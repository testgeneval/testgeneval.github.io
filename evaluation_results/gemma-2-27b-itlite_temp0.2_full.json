{"raw_generations": {"sample_6": ["\nimport re\nfrom django.core import validators\nfrom django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator\nfrom django.utils.translation import gettext_lazy as _\n\ndef test_ascii_username_validator_valid():\n    validator = ASCIIUsernameValidator()\n    assert validator( 'john.doe') is None\n    assert validator('john_doe123') is None\n    assert validator('john.doe+alias') is None\n\ndef test_ascii_username_validator_invalid():\n    validator = ASCIIUsernameValidator()\n    with pytest.raises(validators.ValidationError) as e:\n        validator('john doe')\n    assert str(e.value) == _(\n        'Enter a valid username. This value may contain only English letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n    with pytest.raises(validators.ValidationError) as e:\n        validator('j\u00f5hn.doe')\n    assert str(e.value) == _(\n        'Enter a valid username. This value may contain only English letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n\ndef test_unicode_username_validator_valid():\n    validator = UnicodeUsernameValidator()\n    assert validator('john.doe') is None\n    assert validator('john_doe123') is None\n    assert validator('john.doe+alias') is None\n    assert validator('j\u00f5hn.doe') is None\n\ndef test_unicode_username_validator_invalid():\n    validator = UnicodeUsernameValidator()\n    with pytest.raises(validators.ValidationError) as e:\n        validator('john doe')\n    assert str(e.value) == _(\n        'Enter a valid username. This value may contain only letters, '\n        'numbers, and @/./+/-/_ characters.'\n    )\n"], "sample_100": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.exceptions import NotFittedError\n\nclass TestOneHotEncoder(unittest.TestCase):\n\n    def test_fit_transform_basic(self):\n        X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        enc = OneHotEncoder(handle_unknown='ignore')\n        X_trans = enc.fit_transform(X)\n        self.assertEqual(X_trans.shape, (3, 4))\n\n    def test_transform_unknown(self):\n        X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        enc = OneHotEncoder(handle_unknown='ignore').fit(X)\n        X_new = [['Female', 4]]\n        X_trans = enc.transform(X_new)\n        self.assertEqual(X_trans.shape, (1, 4))\n\n    def test_fit_transform_sparse(self):\n        X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        enc = OneHotEncoder(sparse=True, handle_unknown='ignore')\n        X_trans = enc.fit_transform(X)\n        self.assertTrue(isinstance(X_trans, sparse.csr_matrix))\n\n    def test_inverse_transform(self):\n        X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        enc = OneHotEncoder(handle_unknown='ignore')\n        X_trans = enc.fit_transform(X)\n        X_inv = enc.inverse_transform(X_trans)\n        self.assertEqual(X_inv.tolist(), X)\n\n    def test_not_fitted(self):\n        enc = OneHotEncoder()\n        with self.assertRaises(NotFittedError):\n            enc.transform([['Male', 1]])\n\nclass TestOrdinalEncoder(unittest.TestCase):\n\n    def test_fit_transform_basic(self):\n        X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        enc = OrdinalEncoder()\n        X_trans = enc.fit_transform(X)\n        self.assertEqual(X_trans.shape, (3, 2))\n\n    def test_transform_unknown(self):\n        X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        enc = OrdinalEncoder().fit(X)\n        X_new = [['Female', 4]]\n        with self.assertRaises(ValueError):\n            enc.transform(X_new)\n\n    def test_inverse_transform(self):\n        X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        enc = OrdinalEncoder()\n        X_trans = enc.fit_transform(X)\n        X_inv = enc.inverse_transform(X_trans)\n        self.assertEqual(X_inv.tolist(), X)\n\n    def test_not_fitted(self):\n        enc = OrdinalEncoder()\n        with self.assertRaises(NotFittedError):\n            enc.transform([['Male', 1]])\n\n"], "sample_105": ["\nimport unittest\nfrom unittest.mock import patch\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier, VotingRegressor\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.utils.estimator_checks import check_estimator\n\nclass VotingClassifierTest(unittest.TestCase):\n\n    def test_voting_classifier_hard(self):\n        X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n        y = np.array([1, 1, 1, 2, 2, 2])\n        clf1 = LogisticRegression(solver='lbfgs', multi_class='multinomial', random_state=1)\n        clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n        clf3 = GaussianNB()\n        eclf1 = VotingClassifier(estimators=[\n            ('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='hard')\n        eclf1 = eclf1.fit(X, y)\n        self.assertEqual(eclf1.predict(X).tolist(), [1, 1, 1, 2, 2, 2])\n\n    def test_voting_classifier_soft(self):\n        X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n        y = np.array([1, 1, 1, 2, 2, 2])\n        clf1 = LogisticRegression(solver='lbfgs', multi_class='multinomial', random_state=1)\n        clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n        clf3 = GaussianNB()\n        eclf2 = VotingClassifier(estimators=[\n            ('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='soft')\n        eclf2 = eclf2.fit(X, y)\n        self.assertEqual(eclf2.predict(X).tolist(), [1, 1, 1, 2, 2, 2])\n\n    def test_voting_classifier_weights(self):\n        X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n        y = np.array([1, 1, 1, 2, 2, 2])\n        clf1 = LogisticRegression(solver='lbfgs', multi_class='multinomial', random_state=1)\n        clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n        clf3 = GaussianNB()\n        eclf3 = VotingClassifier(estimators=[\n            ('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='soft', weights=[2,1,1],\n            flatten_transform=True)\n        eclf3 = eclf3.fit(X, y)\n        self.assertEqual(eclf3.predict(X).tolist(), [1, 1, 1, 2, 2, 2])\n        self.assertEqual(eclf3.transform(X).shape, (6, 6))\n\n    def test_voting_classifier_not_fitted(self):\n        clf1 = LogisticRegression(solver='lbfgs', multi_class='multinomial', random_state=1)\n        clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n        clf3 = GaussianNB()\n        eclf1 = VotingClassifier(estimators=[\n            ('lr', clf1), ('rf', clf2), ('gnb', clf3)])\n        with self.assertRaises(NotFittedError):\n            eclf1.predict(np.array([[1, 2]]))\n\n    def test_voting_classifier_set_params(self):\n        X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n        y = np.array([1, 1, 1, 2, 2, 2])\n        clf1 = LogisticRegression(solver='lbfgs', multi_class='multinomial', random_state=1)\n        clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n        clf3 = GaussianNB()\n        eclf1 = VotingClassifier(estimators=[\n            ('lr', clf1), ('rf', clf2), ('gnb', clf3)])\n        eclf1.fit(X, y)\n        eclf1.set_params(rf=None)\n        self.assertIsNone(eclf1.named_estimators_.rf)\n\n    def test_voting_classifier_get_params(self):\n        X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n        y = np.array([1, 1, 1, 2, 2, 2])\n        clf1 = LogisticRegression(solver='lbfgs', multi_class='multinomial', random_state=1)\n        clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n        clf3 = GaussianNB()\n        eclf1 = VotingClassifier(estimators=[\n            ('lr', clf1), ('rf', clf2), ('gnb', clf3)])\n        eclf1.fit(X, y)\n        params = eclf1.get_params(deep=True)\n        self.assertIn('estimators', params)\n\nclass VotingRegressorTest(unittest.TestCase):\n\n    def test_voting_regressor(self):\n        X = np.array([[1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36]])\n        y = np.array([2, 6, 12, 20, 30, 42])\n        r1 = LinearRegression()\n        r2 = RandomForestRegressor(n_estimators=10, random_state=1)\n        er = VotingRegressor([('lr', r1), ('rf', r2)])\n        self.assertAlmostEqual(np.mean(er.fit(X, y).predict(X)), 23.666666666666668)\n\n    def test_voting_regressor_transform(self):\n        X = np.array([[1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36]])\n        y = np.array([2, 6, 12, 20, 30, 42])\n        r1 = LinearRegression()\n        r2 = RandomForestRegressor(n_estimators=10, random_state=1)\n        er = VotingRegressor([('lr', r1), ('rf', r2)])\n        er.fit(X, y)\n        self.assertEqual(er.transform(X).shape, (6, 2))\n\n    def test_voting_regressor_not_fitted(self):\n        r1 = LinearRegression()\n        r2 = RandomForestRegressor(n_estimators=10, random_state=1)\n        er = VotingRegressor([('lr', r1), ('rf', r2)])\n        with self.assertRaises(NotFittedError):\n            er.predict(np.array([[1, 2]]))\n\n    def test_voting_regressor_set_params(self):\n        X = np.array([[1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36]])\n        y = np.array([2, 6, 12, 20, 30, 42])\n        r1 = LinearRegression()\n        r2 = RandomForestRegressor(n_estimators=10, random_state=1)\n        er = VotingRegressor([('lr', r1), ('rf', r2)])\n        er.fit(X, y)\n        er.set_params(lr=None)\n        self.assertIsNone(er.named_estimators_.lr)\n\n    def test_voting_regressor_get_params(self):\n        X = np.array([[1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36]])\n        y = np.array([2, 6, 12, 20, 30, 42])\n        r1 = LinearRegression()\n        r2 = RandomForestRegressor(n_estimators=10, random_state=1)\n        er = VotingRegressor([('lr', r1), ('rf', r2)])\n        er.fit(X, y)\n        params = er.get_params(deep=True)\n        self.assertIn('estimators', params)\n\n"], "sample_150": ["\nimport pytest\nfrom sympy import symbols, Eq, Poly, S\nfrom sympy.solvers.polysys import (solve_poly_system, solve_triangulated, solve_biquadratic, SolveFailed)\n\ndef test_solve_poly_system_biquadratic():\n    x, y = symbols('x y')\n    f = Poly(y**2 - 4 + x, y, x)\n    g = Poly(y*2 + 3*x - 7, y, x)\n    sol = solve_poly_system([f, g], x, y)\n    assert sol == [(1/3, 3), (41/27, 11/9)]\n\ndef test_solve_poly_system_generic():\n    x, y = symbols('x y')\n    f = Poly(x - y + 5, x, y)\n    g = Poly(x + y - 3, x, y)\n    sol = solve_poly_system([f, g], x, y)\n    assert sol == [(-1, 4)]\n\ndef test_solve_poly_system_fail():\n    x, y = symbols('x y')\n    f = Poly(x**2 + y, x, y)\n    g = Poly(x + y**4, x, y)\n    with pytest.raises(SolveFailed):\n        solve_poly_system([f, g], x, y)\n\ndef test_solve_triangulated_basic():\n    x, y, z = symbols('x y z')\n    F = [x**2 + y + z - 1, x + y**2 + z - 1, x + y + z**2 - 1]\n    sol = solve_triangulated(F, x, y, z)\n    assert sol == [(0, 0, 1), (0, 1, 0), (1, 0, 0)]\n\ndef test_solve_biquadratic_fail():\n    x, y = symbols('x y')\n    f = Poly(x**2 + y**2 - 1, x, y)\n    g = Poly(x**2 - y**2 - 1, x, y)\n    with pytest.raises(SolveFailed):\n        solve_biquadratic(f, g, Options((x, y)))\n\ndef test_solve_biquadratic_complex():\n    x, y = symbols('x y')\n    f = Poly(y + x**2 - 3, y, x)\n    g = Poly(-y + x - 4, y, x)\n    sol = solve_biquadratic(f, g, Options((x, y)))\n    assert sol == [(7/2 - sqrt(29)/2, -sqrt(29)/2 - 1/2), (sqrt(29)/2 + 7/2, -1/2 + sqrt(29)/2)]\n"], "sample_95": ["\nimport pytest\nfrom _pytest.python import Function, CallSpec2, get_real_func, showfixtures, _idval, _idvalset, idmaker\nfrom _pytest.python import _showfixtures_main, _show_fixtures_per_test\nfrom _pytest.config import Config\nfrom _pytest.nodes import Item\nfrom _pytest.fixtures import FixtureRequest, FixtureDef\nfrom _pytest.mark import MarkDecorator\nfrom _pytest.terminal import TerminalWriter\nfrom typing import List, Dict, Any, Tuple, Optional, Callable\nfrom _pytest.main import Session\n\ndef test_Function_init():\n    config = Config()\n    parent = Item(\"parent\", config=config)\n    function = Function(\"test_func\", parent, config=config)\n    assert function.name == \"test_func\"\n    assert function.parent == parent\n    assert function.config == config\n\ndef test_Function_from_parent():\n    config = Config()\n    parent = Item(\"parent\", config=config)\n    function = Function.from_parent(parent, name=\"test_func\")\n    assert function.name == \"test_func\"\n    assert function.parent == parent\n    assert function.config == config\n\ndef test_Function__initrequest():\n    config = Config()\n    parent = Item(\"parent\", config=config)\n    function = Function(\"test_func\", parent, config=config)\n    function._initrequest()\n    assert function.funcargs == {}\n    assert isinstance(function._request, FixtureRequest)\n\ndef test_Function_function():\n    def test_func():\n        pass\n    config = Config()\n    parent = Item(\"parent\", config=config)\n    function = Function(\"test_func\", parent, config=config, callobj=test_func)\n    assert function.function == test_func\n\ndef test_Function__getobj():\n    class Parent:\n        def test_func(self):\n            pass\n    config = Config()\n    parent = Item(\"parent\", config=config, obj=Parent())\n    function = Function(\"test_func\", parent, config=config)\n    assert function._getobj() == Parent().test_func\n\ndef test_Function_runtest():\n    config = Config()\n    parent = Item(\"parent\", config=config)\n    function = Function(\"test_func\", parent, config=config)\n    function.runtest()\n\ndef test_Function_setup():\n    config = Config()\n    parent = Item(\"parent\", config=config)\n    function = Function(\"test_func\", parent, config=config)\n    function.setup()\n\ndef test_Function__prunetraceback():\n    config = Config()\n    parent = Item(\"parent\", config=config)\n    function = Function(\"test_func\", parent, config=config)\n    excinfo = ExceptionInfo()\n    function._prunetraceback(excinfo)\n\ndef test_Function_repr_failure():\n    config = Config()\n    parent = Item(\"parent\", config=config)\n    function = Function(\"test_func\", parent, config=config)\n    excinfo = ExceptionInfo()\n    function.repr_failure(excinfo)\n\ndef test_CallSpec2():\n    callspec = CallSpec2(Function(\"test_func\", None, None))\n    assert callspec.id == \"test_func\"\n\ndef test_get_real_func():\n    def test_func():\n        pass\n    assert get_real_func(test_func) == test_func\n\ndef test_showfixtures():\n    config = Config()\n    showfixtures(config)\n\ndef test__idval():\n    assert _idval(\"test\", \"argname\", 0, None, None, None, None) == \"test\"\n    assert _idval(1, \"argname\", 0, None, None, None, None) == \"1\"\n\ndef test__idvalset():\n    parameterset = ParameterSet([\"test\"], [\"argname\"])\n    assert _idvalset(0, parameterset, [\"argname\"], None, None, None, None) == \"test\"\n\ndef test_idmaker():\n    assert idmaker([\"argname\"], [ParameterSet([\"test\"], [\"argname\"])]) == [\"test\"]\n\ndef test__showfixtures_main():\n    config = Config()\n    session = Session()\n    _showfixtures_main(config, session)\n\ndef test__show_fixtures_per_test():\n    config = Config()\n    session = Session()\n    _show_fixtures_per_test(config, session)\n\n"], "sample_101": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline, FeatureUnion, make_pipeline, make_union\nfrom sklearn.exceptions import NotFittedError\n\nclass TestPipeline(unittest.TestCase):\n\n    def test_pipeline_basic(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('logistic', LogisticRegression())])\n        pipe.fit(X, y)\n        self.assertEqual(pipe.predict([[1, 2]]), [0])\n\n    def test_pipeline_named_steps(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('logistic', LogisticRegression())],\n                        memory='cachedir')\n        pipe.fit(X, y)\n        self.assertEqual(pipe.named_steps['scaler'], StandardScaler())\n        self.assertEqual(pipe.named_steps['logistic'], LogisticRegression())\n\n    def test_pipeline_empty(self):\n        pipe = Pipeline([])\n        self.assertEqual(len(pipe.steps), 0)\n\n    def test_pipeline_fit_transform(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('pca', PCA(n_components=1))])\n        Xt = pipe.fit_transform(X)\n        self.assertEqual(Xt.shape, (3, 1))\n\n    def test_pipeline_predict(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('logistic', LogisticRegression())])\n        pipe.fit(X, y)\n        self.assertEqual(pipe.predict([[1, 2]]), [0])\n\n    def test_pipeline_predict_proba(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('logistic', LogisticRegression())])\n        pipe.fit(X, y)\n        proba = pipe.predict_proba([[1, 2]])\n        self.assertEqual(proba.shape, (1, 2))\n\n    def test_pipeline_decision_function(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('logistic', LogisticRegression())])\n        pipe.fit(X, y)\n        score = pipe.decision_function([[1, 2]])\n        self.assertEqual(score.shape, (1,))\n\n    def test_pipeline_score(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('logistic', LogisticRegression())])\n        pipe.fit(X, y)\n        score = pipe.score(X, y)\n        self.assertGreaterEqual(score, 0.0)\n        self.assertLessEqual(score, 1.0)\n\n    def test_pipeline_not_fitted(self):\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('logistic', LogisticRegression())])\n        with self.assertRaises(NotFittedError):\n            pipe.predict([[1, 2]])\n\n    def test_pipeline_memory(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('logistic', LogisticRegression())],\n                        memory='cachedir')\n        pipe.fit(X, y)\n\nclass TestFeatureUnion(unittest.TestCase):\n\n    def test_feature_union_basic(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        union = FeatureUnion([(\"pca\", PCA(n_components=1)),\n                              (\"scaler\", StandardScaler())])\n        Xt = union.fit_transform(X)\n        self.assertEqual(Xt.shape, (3, 2))\n\n    def test_feature_union_weights(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        union = FeatureUnion([(\"pca\", PCA(n_components=1)),\n                              (\"scaler\", StandardScaler())],\n                             transformer_weights={\"pca\": 2, \"scaler\": 1})\n        Xt = union.fit_transform(X)\n        self.assertEqual(Xt.shape, (3, 2))\n\n    def test_feature_union_get_feature_names(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        union = FeatureUnion([(\"pca\", PCA(n_components=1)),\n                              (\"scaler\", StandardScaler())])\n        union.fit(X)\n        feature_names = union.get_feature_names()\n        self.assertEqual(feature_names, ['pca__component_0', 'scaler__x0',\n                                        'scaler__x1'])\n\n    def test_feature_union_empty(self):\n        union = FeatureUnion([])\n        self.assertEqual(len(union.transformer_list), 0)\n\n    def test_feature_union_drop(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        union = FeatureUnion([(\"pca\", PCA(n_components=1)),\n                              (\"drop\", 'drop'),\n                              (\"scaler\", StandardScaler())])\n        Xt = union.fit_transform(X)\n        self.assertEqual(Xt.shape, (3, 2))\n\n    def test_feature_union_none(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        union = FeatureUnion([(\"pca\", PCA(n_components=1)),\n                              (\"none\", None),\n                              (\"scaler\", StandardScaler())])\n        Xt = union.fit_transform(X)\n        self.assertEqual(Xt.shape, (3, 2))\n\n    def test_feature_union_not_fitted(self):\n        union = FeatureUnion([(\"pca\", PCA(n_components=1)),\n                              (\"scaler\", StandardScaler())])\n        with self.assertRaises(NotFittedError):\n            union.transform([[1, 2]])\n\nclass TestMakePipeline(unittest.TestCase):\n\n    def test_make_pipeline(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = make_pipeline(StandardScaler(), LogisticRegression())\n        pipe.fit(X, y)\n        self.assertEqual(pipe.predict([[1, 2]]), [0])\n\nclass TestMakeUnion(unittest.TestCase):\n\n    def test_make_union(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        union = make_union(PCA(n_components=1), StandardScaler())\n        Xt = union.fit_transform(X)\n        self.assertEqual(Xt.shape, (3, 2))\n\n"], "sample_143": ["\nfrom sympy.printing.pretty.pretty import *\nfrom sympy.printing.pretty.pretty_symbology import *\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Integer, Rational, Float, Pi, E, I\nfrom sympy.core.function import Function, sin, cos, exp, log\nfrom sympy.core.relational import Eq, Ne\nfrom sympy.core.containers import Tuple, Dict, List\nfrom sympy.core.sets import Set, FiniteSet, Interval\nfrom sympy.core.expr import Expr\nfrom sympy.core.power import Pow\nfrom sympy.core.mul import Mul\nfrom sympy.core.add import Add\nfrom sympy.core.logic import And, Or, Not\nfrom sympy.core.boolalg import Boolean\nfrom sympy.functions.elementary.complexes import re, im\nfrom sympy.functions.elementary.trigonometric import tan, cot, sec, csc\nfrom sympy.functions.elementary.hyperbolic import sinh, cosh, tanh, coth, sech, csch\nfrom sympy.functions.elementary.exponential import exp, log\nfrom sympy.functions.combinatorial.factorials import factorial\nfrom sympy.functions.special.gamma_functions import gamma\nfrom sympy.functions.special.zeta_functions import zeta\nfrom sympy.functions.special.error_functions import erf\nfrom sympy.matrices import Matrix, eye, zeros, ones, diag\nfrom sympy.geometry import Point, Line, Circle, Triangle\nfrom sympy.physics.units import meter, second, kilogram\nfrom sympy.physics.mechanics import dynamicsymbols, Lagrangian\nfrom sympy.stats import Normal, Uniform\nfrom sympy.solvers.solveset import solveset\nfrom sympy.calculus.util import function_range\nfrom sympy.calculus.derivatives import diff\nfrom sympy.calculus.integrals import integrate\nfrom sympy.logic.boolalg import to_dnf\nfrom sympy.parsing.mathematica import mathematica2sympy\nfrom sympy.parsing.latex import parse_latex\nfrom sympy.parsing.sympy_parser import parse_expr\nfrom sympy.polys.polytools import Poly\nfrom sympy.polys.polyerrors import PolynomialError\nfrom sympy.polys.solvers import solve_poly_system\nfrom sympy.polys.rings import PolyRing\nfrom sympy.polys.domains import ZZ, QQ, RR, CC\nfrom sympy.concrete.summations import Sum\nfrom sympy.concrete.products import Product\nfrom sympy.combinatorics.permutations import Permutation\nfrom sympy.combinatorics.partitions import Partition\nfrom sympy.combinatorics.polytopes import Polyhedron\nfrom sympy.combinatorics.free_groups import FreeGroup\nfrom sympy.combinatorics.group_theory import DihedralGroup\nfrom sympy.combinatorics.generators import Cycle\n\ndef test_pretty_basic():\n    assert pretty(Symbol('x')) == 'x'\n    assert pretty(Integer(2)) == '2'\n    assert pretty(Rational(1, 2)) == '1/2'\n    assert pretty(Float(3.14)) == '3.14'\n    assert pretty(Pi) == '\u03c0'\n    assert pretty(E) == 'e'\n    assert pretty(I) == 'I'\n\ndef test_pretty_functions():\n    assert pretty(sin(x)) == 'sin(x)'\n    assert pretty(cos(x)) == 'cos(x)'\n    assert pretty(exp(x)) == 'exp(x)'\n    assert pretty(log(x)) == 'log(x)'\n\ndef test_pretty_relations():\n    assert pretty(Eq(x, 2)) == 'x = 2'\n    assert pretty(Ne(x, 2)) == 'x \u2260 2'\n\ndef test_pretty_containers():\n    assert pretty(Tuple(1, 2, 3)) == '(1, 2, 3)'\n    assert pretty(Dict({1: 2, 3: 4})) == '{1: 2, 3: 4}'\n    assert pretty(List([1, 2, 3])) == '[1, 2, 3]'\n    assert pretty(Set({1, 2, 3})) == '{1, 2, 3}'\n    assert pretty(FiniteSet({1, 2, 3})) == '{1, 2, 3}'\n    assert pretty(Interval(1, 2)) == '[1, 2]'\n\ndef test_pretty_expressions():\n    assert pretty(x + 2) == 'x + 2'\n    assert pretty(2*x) == '2*x'\n    assert pretty(x**2) == 'x**2'\n    assert pretty(sin(x) + cos(x)) == 'sin(x) + cos(x)'\n\ndef test_pretty_logic():\n    assert pretty(And(x, y)) == 'x and y'\n    assert pretty(Or(x, y)) == 'x or y'\n    assert pretty(Not(x)) == 'not x'\n\ndef test_pretty_complex():\n    assert pretty(2 + 3*I) == '2 + 3*I'\n    assert pretty(re(2 + 3*I)) == '2'\n    assert pretty(im(2 + 3*I)) == '3'\n\ndef test_pretty_trigonometric():\n    assert pretty(tan(x)) == 'tan(x)'\n    assert pretty(cot(x)) == 'cot(x)'\n    assert pretty(sec(x)) == 'sec(x)'\n    assert pretty(csc(x)) == 'csc(x)'\n\ndef test_pretty_hyperbolic():\n    assert pretty(sinh(x)) == 'sinh(x)'\n    assert pretty(cosh(x)) == 'cosh(x)'\n    assert pretty(tanh(x)) == 'tanh(x)'\n    assert pretty(coth(x)) == 'coth(x)'\n    assert pretty(sech(x)) == 'sech(x)'\n    assert pretty(csch(x)) == 'csch(x)'\n\ndef test_pretty_exponential():\n    assert pretty(exp(x)) == 'exp(x)'\n    assert pretty(log(x)) == 'log(x)'\n\ndef test_pretty_combinatorial():\n    assert pretty(factorial(5)) == '5!'\n\ndef test_pretty_special():\n    assert pretty(gamma(x)) == '\u0393(x)'\n    assert pretty(zeta(x)) == '\u03b6(x)'\n    assert pretty(erf(x)) == 'erf(x)'\n\ndef test_pretty_matrices():\n    assert pretty(Matrix([[1, 2], [3, 4]])) == '[1  2]\\n[3  4]'\n    assert pretty(eye(2)) == '[1  0]\\n[0  1]'\n    assert pretty(zeros(2, 3)) == '[0  0  0]\\n[0  0  0]'\n    assert pretty(ones(2, 3)) == '[1  1  1]\\n[1  1  1]'\n    assert pretty(diag(1, 2, 3)) == '[1  0  0]\\n[0  2  0]\\n[0  0  3]'\n\ndef test_pretty_geometry():\n    assert pretty(Point(1, 2)) == 'Point(1, 2)'\n    assert pretty(Line((1, 2), (3, 4))) == 'Line((1, 2), (3, 4))'\n    assert pretty(Circle((0, 0), 1)) == 'Circle((0, 0), 1)'\n    assert pretty(Triangle((0, 0), (1, 0), (0, 1))) == 'Triangle((0, 0), (1, 0), (0, 1))'\n\ndef test_pretty_units():\n    assert pretty(meter) == 'meter'\n    assert pretty(second) == 'second'\n    assert pretty(kilogram) == 'kilogram'\n\ndef test_pretty_mechanics():\n    q = dynamicsymbols('q')\n    assert pretty(Lagrangian(q, q.diff())) == 'Lagrangian(q, Derivative(q, t))'\n\ndef test_pretty_stats():\n    assert pretty(Normal(0, 1)) == 'Normal(0, 1)'\n    assert pretty(Uniform(0, 1)) == 'Uniform(0, 1)'\n\ndef test_pretty_solvers():\n    assert pretty(solveset(Eq(x, 2), x)) == '{2}'\n\ndef test_pretty_calculus():\n    assert pretty(function_range(sin(x), x, Interval(0, 2*pi))) == '[-1, 1]'\n    assert pretty(diff(sin(x), x)) == 'cos(x)'\n    assert pretty(integrate(sin(x), x)) == '-cos(x)'\n\ndef test_pretty_logic_boolalg():\n    assert pretty(to_dnf(x & y | ~x & z)) == '(x and y) or (not x and z)'\n\ndef test_pretty_parsing():\n    assert pretty(mathematica2sympy('Sin[x]')) == 'sin(x)'\n    assert pretty(parse_latex('x^2')) == 'x**2'\n    assert pretty(parse_expr('x + 2')) == 'x + 2'\n\ndef test_pretty_polys():\n    assert pretty(Poly(x**2 + 2*x + 1, x)) == 'x**2 + 2*x + 1'\n    assert pretty(solve_poly_system([x + y - 1, x - y])) == '{(1/2, 1/2)}'\n    assert pretty(PolyRing(ZZ, 'x')) == 'ZZ[x]'\n\ndef test_pretty_domains():\n    assert pretty(ZZ) == 'ZZ'\n    assert pretty(QQ) == 'QQ'\n    assert pretty(RR) == 'RR'\n    assert pretty(CC) == 'CC'\n\ndef test_pretty_sums_products():\n    assert pretty(Sum(x**n, (n, 1, 10))) == '\u2211_{n=1}^{10} x**n'\n    assert pretty(Product(x**n, (n, 1, 10))) == '\u220f_{n=1}^{10} x**n'\n\ndef test_pretty_combinatorics():\n    assert pretty(Permutation([1, 2, 3])) == 'Permutation([1, 2, 3])'\n    assert pretty(Partition([1, 2, 3])) == 'Partition([1, 2, 3])'\n    assert pretty(Polyhedron(vertices=[(0, 0, 0), (1, 0, 0), (0, 1, 0), (0, 0, 1)])) == 'Polyhedron(vertices=[(0, 0, 0), (1, 0, 0), (0, 1, 0), (0, 0, 1)])'\n    assert pretty(FreeGroup('a', 'b')) == 'FreeGroup(a, b)'\n    assert pretty(DihedralGroup(4)) == 'DihedralGroup(4)'\n    assert pretty(Cycle((1, 2, 3))) == 'Cycle((1, 2, 3))'\n"], "sample_159": ["\nimport pytest\nfrom sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo,  kibi\nfrom sympy.physics.units import meter\n\ndef test_prefix_creation():\n    assert Prefix('kilo', 'k', 3).scale_factor == 1000\n    assert Prefix('milli', 'm', -3).scale_factor == 0.001\n    assert Prefix('kibi', 'Ki', 10, 2).scale_factor == 1024\n\ndef test_prefix_multiplication():\n    assert kilo * meter == 1000 * meter\n    assert kilo * kilo == 1000000\n\ndef test_prefix_division():\n    assert kilo / kilo == 1\n    assert kilo / meter == 1000 / meter\n\ndef test_prefix_combination():\n    assert kilo * milli == Prefix('micro', 'mu', -6)\n\ndef test_prefix_unit():\n    prefixed_units = prefix_unit(meter, PREFIXES)\n    assert len(prefixed_units) == len(PREFIXES)\n    assert prefixed_units[0].name == 'yottameter'\n    assert prefixed_units[-1].name == 'yoctometer'\n\ndef test_binary_prefixes():\n    assert kibi * 1024 == kibi**2\n    assert kibi * meter == 1024 * meter\n\n"], "sample_41": ["\nfrom django.forms import (\n    BaseForm, CharField, DateField, FileField, Form, IntegerField,\n    SplitDateTimeField, formsets,\n)\nfrom django.forms.formsets import BaseFormSet, all_valid, formset_factory\nfrom django.forms.utils import ErrorList\nfrom django.forms.widgets import HiddenInput\nfrom django.test import SimpleTestCase\n\nclass MyForm(Form):\n    name = CharField(max_length=100)\n    email = CharField(max_length=254)\n\nclass MyFormSet(formsets.BaseFormSet):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\nclass FormsetTests(SimpleTestCase):\n\n    def test_formset_factory(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet()\n        self.assertEqual(len(formset.forms), 1)\n\n    def test_formset_factory_extra(self):\n        MyFormSet = formset_factory(MyForm, extra=2)\n        formset = MyFormSet()\n        self.assertEqual(len(formset.forms), 3)\n\n    def test_formset_is_valid(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet()\n        self.assertFalse(formset.is_valid())\n\n    def test_formset_is_valid_with_valid_data(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet(data={'form-0-name': ['John Doe'], 'form-0-email': ['john@example.com']})\n        self.assertTrue(formset.is_valid())\n\n    def test_formset_clean(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet()\n        formset.clean()\n\n    def test_formset_all_valid(self):\n        MyFormSet = formset_factory(MyForm)\n        formset1 = MyFormSet(data={'form-0-name': ['John Doe'], 'form-0-email': ['john@example.com']})\n        formset2 = MyFormSet(data={'form-0-name': ['Jane Doe'], 'form-0-email': ['jane@example.com']})\n        self.assertTrue(all_valid([formset1, formset2]))\n\n    def test_formset_management_form(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet()\n        self.assertTrue(isinstance(formset.management_form, BaseForm))\n\n    def test_formset_total_form_count(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet()\n        self.assertEqual(formset.total_form_count(), 1)\n\n    def test_formset_initial_form_count(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet()\n        self.assertEqual(formset.initial_form_count(), 0)\n\n    def test_formset_forms(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet()\n        self.assertEqual(len(formset.forms), 1)\n\n    def test_formset_empty_form(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet()\n        self.assertTrue(isinstance(formset.empty_form, MyForm))\n\n    def test_formset_cleaned_data(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet(data={'form-0-name': ['John Doe'], 'form-0-email': ['john@example.com']})\n        self.assertEqual(formset.cleaned_data[0]['name'], 'John Doe')\n\n    def test_formset_deleted_forms(self):\n        MyFormSet = formset_factory(MyForm, can_delete=True)\n        formset = MyFormSet(data={'form-0-name': ['John Doe'], 'form-0-email': ['john@example.com'], 'form-0-DELETE': [True]})\n        self.assertEqual(len(formset.deleted_forms), 1)\n\n    def test_formset_ordered_forms(self):\n        MyFormSet = formset_factory(MyForm, can_order=True)\n        formset = MyFormSet(data={'form-0-name': ['John Doe'], 'form-0-email': ['john@example.com'], 'form-0-ORDER': [1]})\n        self.assertEqual(len(formset.ordered_forms), 1)\n\n    def test_formset_non_form_errors(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet()\n        self.assertEqual(len(formset.non_form_errors()), 0)\n\n    def test_formset_errors(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet(data={'form-0-name': ['John Doe'], 'form-0-email': ['invalid email']})\n        self.assertEqual(len(formset.errors), 1)\n\n    def test_formset_total_error_count(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet(data={'form-0-name': ['John Doe'], 'form-0-email': ['invalid email']})\n        self.assertEqual(formset.total_error_count(), 1)\n\n    def test_formset_as_table(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet()\n        self.assertTrue(isinstance(formset.as_table(), str))\n\n    def test_formset_as_p(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet()\n        self.assertTrue(isinstance(formset.as_p(), str))\n\n    def test_formset_as_ul(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet()\n        self.assertTrue(isinstance(formset.as_ul(), str))\n\n"], "sample_99": ["\nimport unittest\nimport numpy as np\nfrom sklearn.neighbors.base import (\n    NeighborsBase, KNeighborsMixin, RadiusNeighborsMixin,\n    SupervisedFloatMixin, SupervisedIntegerMixin, UnsupervisedMixin,\n    VALID_METRICS, VALID_METRICS_SPARSE\n)\nfrom sklearn.utils.testing import assert_array_equal, assert_raises\nfrom sklearn.utils.validation import check_X_y, check_array\nfrom sklearn.exceptions import DataConversionWarning\nfrom scipy.sparse import csr_matrix\n\nclass TestNeighborsBase(unittest.TestCase):\n\n    def test_valid_metrics(self):\n        for metric in VALID_METRICS:\n            NeighborsBase(algorithm='auto', metric=metric)\n\n        for metric in VALID_METRICS_SPARSE:\n            NeighborsBase(algorithm='brute', metric=metric)\n\n        with self.assertRaises(ValueError):\n            NeighborsBase(algorithm='auto', metric='invalid_metric')\n\n    def test_fit(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        neigh = NeighborsBase()\n        neigh.fit(X)\n\n        self.assertTrue(hasattr(neigh, '_fit_X'))\n        self.assertTrue(hasattr(neigh, '_tree'))\n\n        # Test with sparse matrix\n        X_sparse = csr_matrix(X)\n        neigh.fit(X_sparse)\n        self.assertTrue(hasattr(neigh, '_fit_X'))\n        self.assertTrue(hasattr(neigh, '_tree'))\n\n    def test_kneighbors(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        neigh = NeighborsBase()\n        neigh.fit(X)\n        dist, ind = neigh.kneighbors(X, n_neighbors=2)\n\n        self.assertEqual(dist.shape, (3, 2))\n        self.assertEqual(ind.shape, (3, 2))\n\n    def test_radius_neighbors(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        neigh = NeighborsBase()\n        neigh.fit(X)\n        dist, ind = neigh.radius_neighbors(X, radius=2)\n\n        self.assertEqual(len(dist), 3)\n        self.assertEqual(len(ind), 3)\n\nclass TestKNeighborsMixin(unittest.TestCase):\n\n    def test_kneighbors(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        neigh = KNeighborsMixin()\n        neigh._fit_X = X\n        neigh.n_neighbors = 2\n        dist, ind = neigh.kneighbors(X)\n\n        self.assertEqual(dist.shape, (3, 2))\n        self.assertEqual(ind.shape, (3, 2))\n\n    def test_kneighbors_graph(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        neigh = KNeighborsMixin()\n        neigh._fit_X = X\n        neigh.n_neighbors = 2\n        graph = neigh.kneighbors_graph(X, mode='connectivity')\n\n        self.assertEqual(graph.shape, (3, 3))\n        self.assertTrue(np.all(graph.toarray() == np.array([[1, 1, 0],\n                                                         [1, 1, 1],\n                                                         [0, 1, 1]])))\n\nclass TestRadiusNeighborsMixin(unittest.TestCase):\n\n    def test_radius_neighbors(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        neigh = RadiusNeighborsMixin()\n        neigh._fit_X = X\n        neigh.radius = 2\n        dist, ind = neigh.radius_neighbors(X)\n\n        self.assertEqual(len(dist), 3)\n        self.assertEqual(len(ind), 3)\n\n    def test_radius_neighbors_graph(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        neigh = RadiusNeighborsMixin()\n        neigh._fit_X = X\n        neigh.radius = 2\n        graph = neigh.radius_neighbors_graph(X, mode='connectivity')\n\n        self.assertEqual(graph.shape, (3, 3))\n        self.assertTrue(np.all(graph.toarray() == np.array([[1, 1, 0],\n                                                         [1, 1, 1],\n                                                         [0, 1, 1]])))\n\nclass TestSupervisedFloatMixin(unittest.TestCase):\n\n    def test_fit(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([1.0, 2.0, 3.0])\n        neigh = SupervisedFloatMixin()\n        neigh.fit(X, y)\n\n        self.assertTrue(hasattr(neigh, '_y'))\n\nclass TestSupervisedIntegerMixin(unittest.TestCase):\n\n    def test_fit(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([1, 2, 3])\n        neigh = SupervisedIntegerMixin()\n        neigh.fit(X, y)\n\n        self.assertTrue(hasattr(neigh, '_y'))\n        self.assertTrue(hasattr(neigh, 'classes_'))\n\n    def test_fit_multi_output(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([[1, 2], [3, 4], [5, 6]])\n        neigh = SupervisedIntegerMixin()\n        neigh.fit(X, y)\n\n        self.assertTrue(hasattr(neigh, '_y'))\n        self.assertTrue(hasattr(neigh, 'classes_'))\n        self.assertTrue(isinstance(neigh.classes_, list))\n        self.assertEqual(len(neigh.classes_), y.shape[1])\n\nclass TestUnsupervisedMixin(unittest.TestCase):\n\n    def test_fit(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        neigh = UnsupervisedMixin()\n        neigh.fit(X)\n\n        self.assertTrue(hasattr(neigh, '_fit_X'))\n\n"], "sample_11": ["\nfrom unittest import mock\n\nfrom django.conf import settings\nfrom django.db import models\nfrom django.db.migrations.operations.base import Operation\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    BaseSequenceSerializer,\n    BaseSimpleSerializer,\n    ChoicesSerializer,\n    DateTimeSerializer,\n    DatetimeDatetimeSerializer,\n    DecimalSerializer,\n    DeconstructableSerializer,\n    DictionarySerializer,\n    EnumSerializer,\n    FloatSerializer,\n    FrozensetSerializer,\n    FunctionTypeSerializer,\n    FunctoolsPartialSerializer,\n    IterableSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    RegexSerializer,\n    SequenceSerializer,\n    SetSerializer,\n    SettingsReferenceSerializer,\n    TupleSerializer,\n    TypeSerializer,\n    UUIDSerializer,\n    serializer_factory,\n)\nfrom django.db.models.fields import (\n    AutoField,\n    BooleanField,\n    CharField,\n    DateField,\n    DateTimeField,\n    DecimalField,\n    FloatField,\n    IntegerField,\n    PositiveIntegerField,\n    TextField,\n)\nfrom django.utils import timezone\nfrom django.utils.functional import LazyObject, Promise\nfrom django.utils.version import get_docs_version\n\nclass TestSerializer:\n\n    def test_base_serializer(self):\n        serializer = BaseSerializer(1)\n        with self.assertRaises(NotImplementedError):\n            serializer.serialize()\n\n    def test_base_sequence_serializer(self):\n        serializer = BaseSequenceSerializer([1, 2, 3])\n        with self.assertRaises(NotImplementedError):\n            serializer._format()\n        with self.assertRaises(NotImplementedError):\n            serializer.serialize()\n\n    def test_base_simple_serializer(self):\n        serializer = BaseSimpleSerializer(1)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, '1')\n        self.assertEqual(imports, set())\n\n    def test_choices_serializer(self):\n        choices = models.Choices([('A', 'Choice A'), ('B', 'Choice B')])\n        serializer = ChoicesSerializer(choices)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, repr(serializer_factory(choices.value).serialize()))\n        self.assertEqual(imports, set())\n\n    def test_datetime_serializer(self):\n        serializer = DateTimeSerializer(timezone.now())\n        result, imports = serializer.serialize()\n        self.assertEqual(result, repr(timezone.now()))\n        self.assertEqual(imports, {'import datetime'})\n\n    def test_datetimedatetime_serializer(self):\n        now = timezone.now()\n        serializer = DatetimeDatetimeSerializer(now)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, repr(now).replace('<UTC>', 'utc'))\n        self.assertEqual(imports, [\"import datetime\", \"from django.utils.timezone import utc\"])\n\n    def test_decimal_serializer(self):\n        serializer = DecimalSerializer(decimal.Decimal('1.23'))\n        result, imports = serializer.serialize()\n        self.assertEqual(result, repr(decimal.Decimal('1.23')))\n        self.assertEqual(imports, {\"from decimal import Decimal\"})\n\n    def test_deconstructable_serializer(self):\n        class MyClass:\n            def deconstruct(self):\n                return 'my_module.MyClass', (), {}\n        serializer = DeconstructableSerializer(MyClass())\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'my_module.MyClass()')\n        self.assertEqual(imports, {'import my_module'})\n\n    def test_dictionary_serializer(self):\n        serializer = DictionarySerializer({'a': 1, 'b': 2})\n        result, imports = serializer.serialize()\n        self.assertEqual(result, \"{'a': 1, 'b': 2}\")\n        self.assertEqual(imports, set())\n\n    def test_enum_serializer(self):\n        class MyEnum(enum.Enum):\n            A = 1\n            B = 2\n        serializer = EnumSerializer(MyEnum.A)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'MyEnum.A')\n        self.assertEqual(imports, {'import MyEnum'})\n\n    def test_float_serializer(self):\n        serializer = FloatSerializer(1.23)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, '1.23')\n        self.assertEqual(imports, set())\n\n    def test_frozenset_serializer(self):\n        serializer = FrozensetSerializer(frozenset([1, 2, 3]))\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'frozenset([1, 2, 3])')\n        self.assertEqual(imports, set())\n\n    def test_function_type_serializer(self):\n        def my_function():\n            pass\n        serializer = FunctionTypeSerializer(my_function)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'my_function')\n        self.assertEqual(imports, {'import __main__'})\n\n    def test_functools_partial_serializer(self):\n        def my_function(a, b):\n            return a + b\n        partial_function = functools.partial(my_function, 1)\n        serializer = FunctoolsPartialSerializer(partial_function)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'functools.partial(my_function, 1)')\n        self.assertEqual(imports, {'import functools'})\n\n    def test_iterable_serializer(self):\n        serializer = IterableSerializer([1, 2, 3])\n        result, imports = serializer.serialize()\n        self.assertEqual(result, '(1, 2, 3)')\n        self.assertEqual(imports, set())\n\n    def test_model_field_serializer(self):\n        field = models.CharField(max_length=100)\n        serializer = ModelFieldSerializer(field)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'models.CharField(max_length=100)')\n        self.assertEqual(imports, {'from django.db import models'})\n\n    def test_model_manager_serializer(self):\n        class MyManager(models.Manager):\n            pass\n        manager = MyManager()\n        serializer = ModelManagerSerializer(manager)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'MyManager()')\n        self.assertEqual(imports, {'from django.db.models import Manager'})\n\n    def test_operation_serializer(self):\n        class MyOperation(Operation):\n            def __init__(self):\n                pass\n        operation = MyOperation()\n        serializer = OperationSerializer(operation)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, '')\n        self.assertEqual(imports, set())\n\n    def test_regex_serializer(self):\n        regex = re.compile(r'^[a-z]+$')\n        serializer = RegexSerializer(regex)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 're.compile(r\\'^[a-z]+\\')')\n        self.assertEqual(imports, {'import re'})\n\n    def test_sequence_serializer(self):\n        serializer = SequenceSerializer([1, 2, 3])\n        result, imports = serializer.serialize()\n        self.assertEqual(result, '[1, 2, 3]')\n        self.assertEqual(imports, set())\n\n    def test_set_serializer(self):\n        serializer = SetSerializer({1, 2, 3})\n        result, imports = serializer.serialize()\n        self.assertEqual(result, '{1, 2, 3}')\n        self.assertEqual(imports, set())\n\n    def test_settings_reference_serializer(self):\n        serializer = SettingsReferenceSerializer(settings.DEBUG)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'settings.DEBUG')\n        self.assertEqual(imports, {'from django.conf import settings'})\n\n    def test_tuple_serializer(self):\n        serializer = TupleSerializer((1, 2, 3))\n        result, imports = serializer.serialize()\n        self.assertEqual(result, '(1, 2, 3)')\n        self.assertEqual(imports, set())\n\n    def test_type_serializer(self):\n        serializer = TypeSerializer(int)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'int')\n        self.assertEqual(imports, set())\n\n    def test_uuid_serializer(self):\n        serializer = UUIDSerializer(uuid.UUID('00000000-0000-0000-0000-000000000000'))\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'uuid.UUID(\\'00000000-0000-0000-0000-000000000000\\')')\n        self.assertEqual(imports, {'import uuid'})\n\n    def test_serializer_factory(self):\n        with mock.patch('django.db.migrations.serializer.Promise', return_value='Promise'):\n            result = serializer_factory(Promise())\n            self.assertEqual(result.value, 'Promise')\n        with mock.patch('django.db.migrations.serializer.LazyObject', return_value='LazyObject'):\n            result = serializer_factory(LazyObject())\n            self.assertEqual(result.value, 'LazyObject')\n        result = serializer_factory(models.CharField(max_length=100))\n        self.assertIsInstance(result, ModelFieldSerializer)\n        result = serializer_factory(models.Manager())\n        self.assertIsInstance(result, ModelManagerSerializer)\n        result = serializer_factory(Operation())\n        self.assertIsInstance(result, OperationSerializer)\n        result = serializer_factory(type(None))\n        self.assertIsInstance(result, TypeSerializer)\n        result = serializer_factory(functools.partial(lambda x: x))\n        self.assertIsInstance(result, FunctoolsPartialSerializer)\n        result = serializer_factory(settings.DEBUG)\n        self.assertIsInstance(result, SettingsReferenceSerializer)\n"], "sample_36": ["\nfrom django.db.models import F, Q\nfrom django.db.models.query_utils import (\n    DeferredAttribute,\n    PathInfo,\n    Q,\n    RegisterLookupMixin,\n    refs_expression,\n    select_related_descend,\n    check_rel_lookup_compatibility,\n    FilteredRelation,\n)\nfrom django.db.models.lookups import Lookup\nfrom django.core.exceptions import FieldError\nfrom django.utils import tree\n\ndef test_deferred_attribute():\n    pass\n\ndef test_pathinfo():\n    pass\n\ndef test_q():\n    q1 = Q(name__startswith='John')\n    q2 = Q(age__gt=30)\n    q3 = q1 & q2\n    assert isinstance(q3, Q)\n\ndef test_registerlookupmixin():\n    class MyLookup(Lookup):\n        lookup_name = 'my_lookup'\n    \n    class MyModel(RegisterLookupMixin):\n        pass\n    \n    MyModel.register_lookup(MyLookup)\n    assert MyModel.get_lookup('my_lookup') == MyLookup\n\ndef test_refs_expression():\n    pass\n\ndef test_select_related_descend():\n    pass\n\ndef test_check_rel_lookup_compatibility():\n    pass\n\ndef test_filteredrelation():\n    pass\n\n"], "sample_83": ["\nimport io\nimport os\nimport re\nimport sys\nfrom unittest.mock import patch\n\nfrom pylint.lint import PyLinter\nfrom pylint.message import Message\nfrom pylint.reporters.text import (\n    ANSI_COLORS,\n    ANSI_END,\n    ANSI_PREFIX,\n    ANSI_STYLES,\n    ColorMappingDict,\n    ColorizedTextReporter,\n    MessageStyle,\n    ParseableTextReporter,\n    TextReporter,\n    TITLE_UNDERLINES,\n    _get_ansi_code,\n    colorize_ansi,\n)\n\n\ndef test_colorize_ansi_no_style():\n    assert colorize_ansi(\"test\") == \"test\"\n\n\ndef test_colorize_ansi_color():\n    assert colorize_ansi(\"test\", \"red\") == f\"{ANSI_PREFIX}31mtest{ANSI_END}\"\n\n\ndef test_colorize_ansi_style():\n    assert colorize_ansi(\"test\", style=\"bold\") == f\"{ANSI_PREFIX}1mtest{ANSI_END}\"\n\n\ndef test_colorize_ansi_both():\n    assert colorize_ansi(\"test\", \"red\", \"bold\") == f\"{ANSI_PREFIX}1;31mtest{ANSI_END}\"\n\n\ndef test_colorize_ansi_message_style():\n    msg_style = MessageStyle(\"red\", (\"bold\",))\n    assert colorize_ansi(\"test\", msg_style) == f\"{ANSI_PREFIX}1;31mtest{ANSI_END}\"\n\n\ndef test_colorize_ansi_invalid_color():\n    assert colorize_ansi(\"test\", \"invalid\") == \"test\"\n\n\ndef test_get_ansi_code_color():\n    assert _get_ansi_code(MessageStyle(\"red\")) == f\"{ANSI_PREFIX}31m{ANSI_END}\"\n\n\ndef test_get_ansi_code_style():\n    assert _get_ansi_code(MessageStyle(style=(\"bold\",))) == f\"{ANSI_PREFIX}1m{ANSI_END}\"\n\n\ndef test_get_ansi_code_both():\n    assert _get_ansi_code(MessageStyle(\"red\", (\"bold\",))) == f\"{ANSI_PREFIX}1;31m{ANSI_END}\"\n\n\ndef test_get_ansi_code_no_style():\n    assert _get_ansi_code(MessageStyle(None)) == \"\"\n\n\ndef test_text_reporter_on_set_current_module():\n    reporter = TextReporter()\n    reporter.linter = PyLinter()\n    reporter.linter.config.msg_template = \"{path}:{line}:{column}: {msg_id}: {msg} ({symbol})\"\n    reporter.on_set_current_module(\"module\", None)\n    assert reporter._template == \"{path}:{line}:{column}: {msg_id}: {msg} ({symbol})\"\n    assert reporter._fixed_template == \"{path}:{line}:{column}: {msg_id}: {msg} ({symbol})\"\n\n    reporter.linter.config.msg_template = \"{path}:{line}:{column}: {msg_id}: {msg} ({symbol}) {unknown}\"\n    reporter.on_set_current_module(\"module\", None)\n    assert reporter._template == \"{path}:{line}:{column}: {msg_id}: {msg} ({symbol}) {unknown}\"\n    assert reporter._fixed_template == \"{path}:{line}:{column}: {msg_id}: {msg} ({symbol})\"\n\n\ndef test_text_reporter_write_message():\n    reporter = TextReporter()\n    msg = Message(\n        \"module\",\n        1,\n        1,\n        \"C0001\",\n        \"test message\",\n        \"C\",\n        \"test symbol\",\n    )\n    with io.StringIO() as buf:\n        reporter.out = buf\n        reporter.write_message(msg)\n        output = buf.getvalue()\n    assert output == \"{path}:1:1: C0001: test message (test symbol)\\n\"\n\n\ndef test_text_reporter_handle_message():\n    reporter = TextReporter()\n    msg = Message(\n        \"module\",\n        1,\n        1,\n        \"C0001\",\n        \"test message\",\n        \"C\",\n        \"test symbol\",\n    )\n    with io.StringIO() as buf:\n        reporter.out = buf\n        reporter.handle_message(msg)\n        output = buf.getvalue()\n    assert output == \"************* Module module\\n{path}:1:1: C0001: test message (test symbol)\\n\"\n\n\ndef test_parseable_text_reporter():\n    reporter = ParseableTextReporter()\n    msg = Message(\n        \"module\",\n        1,\n        1,\n        \"C0001\",\n        \"test message\",\n        \"C\",\n        \"test symbol\",\n    )\n    with io.StringIO() as buf:\n        reporter.out = buf\n        reporter.handle_message(msg)\n        output = buf.getvalue()\n    assert output == \"{path}:1: [C0001(test symbol), C] test message\\n\"\n\n\ndef test_vs_text_reporter():\n    reporter = VSTextReporter()\n    msg = Message(\n        \"module\",\n        1,\n        1,\n        \"C0001\",\n        \"test message\",\n        \"C\",\n        \"test symbol\",\n    )\n    with io.StringIO() as buf:\n        reporter.out = buf\n        reporter.handle_message(msg)\n        output = buf.getvalue()\n    assert output == \"{path}(1): [C0001(test symbol)C] test message\\n\"\n\n\ndef test_colorized_text_reporter_handle_message():\n    reporter = ColorizedTextReporter()\n    msg = Message(\n        \"module\",\n        1,\n        1,\n        \"C0001\",\n        \"test message\",\n        \"C\",\n        \"test symbol\",\n    )\n    with io.StringIO() as buf:\n        reporter.out = buf\n        reporter.handle_message(msg)\n        output = buf.getvalue()\n    assert re.match(\n        r\"************* Module module\\n\"\n        rf\"{ANSI_PREFIX}32m{re.escape(f'{path}:1:1: C0001: test message (test symbol)\\n')}{ANSI_END}\",\n        output,\n    )\n\n\ndef test_colorized_text_reporter_handle_message_custom_color_mapping():\n    custom_color_mapping: ColorMappingDict = {\"C\": MessageStyle(\"blue\")}\n    reporter = ColorizedTextReporter(color_mapping=custom_color_mapping)\n    msg = Message(\n        \"module\",\n        1,\n        1,\n        \"C0001\",\n        \"test message\",\n        \"C\",\n        \"test symbol\",\n    )\n    with io.StringIO() as buf:\n        reporter.out = buf\n        reporter.handle_message(msg)\n        output = buf.getvalue()\n    assert re.match(\n        r\"************* Module module\\n\"\n        rf\"{ANSI_PREFIX}34m{re.escape(f'{path}:1:1: C0001: test message (test symbol)\\n')}{ANSI_END}\",\n        output,\n    )\n\n"], "sample_78": ["\nimport click\nfrom click.testing import CliRunner\nfrom flask import current_app\nfrom flask.cli import AppGroup\nfrom flask.cli import find_best_app\nfrom flask.cli import FlaskGroup\nfrom flask.cli import get_version\nfrom flask.cli import load_dotenv\nfrom flask.cli import locate_app\nfrom flask.cli import NoAppException\nfrom flask.cli import prepare_import\nfrom flask.cli import run_command\nfrom flask.cli import ScriptInfo\nfrom flask.cli import with_appcontext\nfrom unittest.mock import patch\nfrom io import StringIO\n\ndef test_get_version():\n    assert get_version() == f\"Flask CLI {click.__version__}\"\n\ndef test_prepare_import():\n    assert prepare_import(\"foo:bar\") == (\"foo\", \"bar\")\n    assert prepare_import(\"foo\") == (\"foo\", None)\n\ndef test_locate_app_success():\n    with patch('importlib.import_module') as mock_import:\n        mock_import.return_value = \"app\"\n        assert locate_app(\"foo:bar\") == \"app\"\n\ndef test_locate_app_failure():\n    with patch('importlib.import_module') as mock_import:\n        mock_import.side_effect = ImportError(\"Module not found\")\n        with pytest.raises(NoAppException):\n            locate_app(\"foo:bar\")\n\ndef test_find_best_app():\n    # Mock the Flask app creation\n    class MockApp:\n        def __init__(self, name):\n            self.name = name\n\n    # Test case 1: FLASK_APP is set\n    with patch.dict('os.environ', {'FLASK_APP': 'my_app'}):\n        app = find_best_app()\n        assert app.name == 'my_app'\n\n    # Test case 2: wsgi.py exists\n    with patch('os.path.exists', return_value=True):\n        app = find_best_app()\n        assert app.name == 'wsgi'\n\n    # Test case 3: app.py exists\n    with patch('os.path.exists', return_value=True), patch('os.path.isfile', return_value=True):\n        app = find_best_app()\n        assert app.name == 'app'\n\ndef test_load_dotenv():\n    with patch('dotenv.load_dotenv') as mock_load_dotenv:\n        load_dotenv()\n        mock_load_dotenv.assert_called_once_with(encoding=\"utf-8\")\n\ndef test_load_dotenv_no_dotenv():\n    with patch('dotenv.find_dotenv', return_value=None) as mock_find_dotenv:\n        assert not load_dotenv()\n        mock_find_dotenv.assert_called_once_with(\".env\", usecwd=True)\n\ndef test_load_dotenv_path():\n    with patch('dotenv.load_dotenv') as mock_load_dotenv:\n        load_dotenv(path='.env.test')\n        mock_load_dotenv.assert_called_once_with('.env.test', encoding=\"utf-8\")\n\ndef test_run_command():\n    runner = CliRunner()\n    result = runner.invoke(cli, ['run', '--host', '0.0.0.0'])\n    assert result.exit_code == 0\n\ndef test_shell_command():\n    runner = CliRunner()\n    result = runner.invoke(cli, ['shell'])\n    assert result.exit_code == 0\n\ndef test_routes_command():\n    runner = CliRunner()\n    result = runner.invoke(cli, ['routes'])\n    assert result.exit_code == 0\n\ndef test_with_appcontext():\n    @with_appcontext\n    def my_function():\n        return current_app.name\n\n    app = MockApp('test_app')\n    with patch('flask.Flask') as mock_flask:\n        mock_flask.return_value = app\n        assert my_function() == 'test_app'\n\ndef test_script_info():\n    info = ScriptInfo(app_import_path='foo:bar')\n    assert info.app_import_path == 'foo:bar'\n\ndef test_flask_group():\n    group = FlaskGroup()\n    assert isinstance(group, AppGroup)\n\ndef test_app_group():\n    group = AppGroup()\n    assert isinstance(group, click.Group)\n\ndef test_no_app_exception():\n    with pytest.raises(NoAppException):\n        raise NoAppException(\"No app found\")\n\n"], "sample_63": ["\nfrom django.contrib.auth.forms import (\n    AdminPasswordChangeForm,\n    AuthenticationForm,\n    PasswordChangeForm,\n    PasswordResetForm,\n    ReadOnlyPasswordHashField,\n    ReadOnlyPasswordHashWidget,\n    SetPasswordForm,\n    UserChangeForm,\n    UserCreationForm,\n)\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.hashers import make_password\nfrom django.core.exceptions import ValidationError\nfrom django.test import SimpleTestCase\nfrom django.utils.translation import activate\n\nclass AuthFormsTests(SimpleTestCase):\n    def test_user_creation_form(self):\n        form = UserCreationForm()\n        self.assertTrue(form.fields['username'].required)\n        self.assertTrue(form.fields['password1'].required)\n        self.assertTrue(form.fields['password2'].required)\n\n    def test_user_creation_form_valid(self):\n        form = UserCreationForm({'username': 'testuser', 'password1': 'password', 'password2': 'password'})\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertEqual(user.username, 'testuser')\n        self.assertTrue(user.check_password('password'))\n\n    def test_user_creation_form_invalid_password(self):\n        form = UserCreationForm({'username': 'testuser', 'password1': 'password', 'password2': 'differentpassword'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['password2'], ['The two password fields didn\u2019t match.'])\n\n    def test_user_change_form(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = UserChangeForm(instance=user)\n        self.assertTrue(form.fields['username'].required)\n        self.assertTrue(form.fields['password'].widget.is_hidden)\n\n    def test_authentication_form(self):\n        form = AuthenticationForm()\n        self.assertTrue(form.fields['username'].required)\n        self.assertTrue(form.fields['password'].required)\n\n    def test_password_reset_form(self):\n        form = PasswordResetForm()\n        self.assertTrue(form.fields['email'].required)\n\n    def test_password_change_form(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = PasswordChangeForm(user)\n        self.assertTrue(form.fields['old_password'].required)\n        self.assertTrue(form.fields['new_password1'].required)\n        self.assertTrue(form.fields['new_password2'].required)\n\n    def test_password_change_form_valid(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = PasswordChangeForm(user, {'old_password': 'password', 'new_password1': 'newpassword', 'new_password2': 'newpassword'})\n        self.assertTrue(form.is_valid())\n        form.save()\n        self.assertTrue(user.check_password('newpassword'))\n\n    def test_password_change_form_invalid_old_password(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = PasswordChangeForm(user, {'old_password': 'wrongpassword', 'new_password1': 'newpassword', 'new_password2': 'newpassword'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['old_password'], ['Your old password was entered incorrectly. Please enter it again.'])\n\n    def test_set_password_form(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = SetPasswordForm(user)\n        self.assertTrue(form.fields['new_password1'].required)\n        self.assertTrue(form.fields['new_password2'].required)\n\n    def test_set_password_form_valid(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = SetPasswordForm(user, {'new_password1': 'newpassword', 'new_password2': 'newpassword'})\n        self.assertTrue(form.is_valid())\n        form.save()\n        self.assertTrue(user.check_password('newpassword'))\n\n    def test_admin_password_change_form(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = AdminPasswordChangeForm(user)\n        self.assertTrue(form.fields['password1'].required)\n        self.assertTrue(form.fields['password2'].required)\n\n    def test_admin_password_change_form_valid(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = AdminPasswordChangeForm(user, {'password1': 'newpassword', 'password2': 'newpassword'})\n        self.assertTrue(form.is_valid())\n        form.save()\n        self.assertTrue(user.check_password('newpassword'))\n\n    def test_readonly_password_hash_field(self):\n        field = ReadOnlyPasswordHashField()\n        self.assertTrue(field.widget.is_hidden)\n\n    def test_readonly_password_hash_widget(self):\n        widget = ReadOnlyPasswordHashWidget()\n        self.assertEqual(widget.template_name, 'auth/widgets/read_only_password_hash.html')\n\n    def test_unicode_ci_compare(self):\n        self.assertTrue(_unicode_ci_compare('test', 'TEST'))\n        self.assertFalse(_unicode_ci_compare('test', 'tes'))\n\n    def test_password_reset_form_get_users(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = PasswordResetForm()\n        users = list(form.get_users('test@example.com'))\n        self.assertEqual(len(users), 1)\n        self.assertEqual(users[0].username, 'testuser')\n\n    def test_password_reset_form_get_users_inactive_user(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        user.is_active = False\n        user.save()\n        form = PasswordResetForm()\n        users = list(form.get_users('test@example.com'))\n        self.assertEqual(len(users), 0)\n\n    def test_password_reset_form_get_users_unusable_password(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        user.set_password(make_password(None))\n        user.save()\n        form = PasswordResetForm()\n        users = list(form.get_users('test@example.com'))\n        self.assertEqual(len(users), 0)\n\n    def test_authentication_form_confirm_login_allowed_inactive_user(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        user.is_active = False\n        user.save()\n        form = AuthenticationForm(None, {'username': 'testuser', 'password': 'password'})\n        with self.assertRaises(ValidationError) as e:\n            form.confirm_login_allowed(user)\n        self.assertEqual(e.exception.code, 'inactive')\n\n    def test_authentication_form_get_invalid_login_error(self):\n        form = AuthenticationForm(None, {'username': 'testuser', 'password': 'password'})\n        error = form.get_invalid_login_error()\n        self.assertEqual(error.code, 'invalid_login')\n\n    def test_authentication_form_get_user(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = AuthenticationForm(None, {'username': 'testuser', 'password': 'password'})\n        form.clean()\n        self.assertEqual(form.get_user(), user)\n\n    def test_password_reset_form_send_mail(self):\n        form = PasswordResetForm()\n        with self.assertRaises(NotImplementedError):\n            form.send_mail(None, None, None, None, None)\n\n    def test_set_password_form_save(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = SetPasswordForm(user, {'new_password1': 'newpassword', 'new_password2': 'newpassword'})\n        form.save()\n        self.assertTrue(user.check_password('newpassword'))\n\n    def test_password_change_form_save(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = PasswordChangeForm(user, {'old_password': 'password', 'new_password1': 'newpassword', 'new_password2': 'newpassword'})\n        form.save()\n        self.assertTrue(user.check_password('newpassword'))\n\n    def test_admin_password_change_form_save(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = AdminPasswordChangeForm(user, {'password1': 'newpassword', 'password2': 'newpassword'})\n        form.save()\n        self.assertTrue(user.check_password('newpassword'))\n\n    def test_user_creation_form_save_with_unicode_username(self):\n        activate('fr')\n        form = UserCreationForm({'username': '\u00fcser', 'password1': 'password', 'password2': 'password'})\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertEqual(user.username, '\u00fcser')\n\n    def test_user_change_form_save_with_unicode_username(self):\n        activate('fr')\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = UserChangeForm(instance=user, data={'username': '\u00fcser'})\n        self.assertTrue(form.is_valid())\n        form.save()\n        self.assertEqual(user.username, '\u00fcser')\n\n"], "sample_50": ["\nimport unittest\nfrom django.contrib.messages.storage.cookie import (\n    CookieStorage, MessageDecoder, MessageEncoder, MessageSerializer,\n)\nfrom django.contrib.messages.storage.base import Message\nfrom django.utils.safestring import SafeData\nfrom django.test import RequestFactory\nfrom django.http import SimpleHttpResponse\n\nclass CookieStorageTests(unittest.TestCase):\n\n    def setUp(self):\n        self.request = RequestFactory().get('/')\n        self.response = SimpleHttpResponse()\n        self.storage = CookieStorage(request=self.request)\n\n    def test_encode_decode(self):\n        messages = [\n            Message('Hello', 'info'),\n            Message('World', 'warning', extra_tags='important'),\n            Message(SafeData('<strong>Safe</strong>'), 'error'),\n        ]\n        encoded = self.storage._encode(messages)\n        decoded = self.storage._decode(encoded)\n        self.assertEqual(decoded, messages)\n\n    def test_store_retrieve(self):\n        messages = [\n            Message('Hello', 'info'),\n            Message('World', 'warning'),\n        ]\n        self.storage._store(messages, self.response)\n        retrieved, all_retrieved = self.storage._get()\n        self.assertEqual(retrieved, messages)\n        self.assertTrue(all_retrieved)\n\n    def test_store_exceeds_max_size(self):\n        messages = [Message('x' * 1000, 'info') for _ in range(10)]\n        unstored_messages = self.storage._store(messages, self.response)\n        self.assertGreater(len(unstored_messages), 0)\n\n    def test_not_finished_sentinel(self):\n        messages = [Message('Hello', 'info')]\n        self.storage._store(messages, self.response)\n        retrieved, all_retrieved = self.storage._get()\n        self.assertFalse(all_retrieved)\n        self.assertEqual(retrieved, messages)\n\n    def test_empty_cookie(self):\n        retrieved, all_retrieved = self.storage._get()\n        self.assertEqual(retrieved, None)\n        self.assertTrue(all_retrieved)\n\n    def test_message_encoder(self):\n        message = Message('Hello', 'info')\n        encoded = MessageEncoder().default(message)\n        self.assertEqual(encoded, ['__json_message', 0, 'info', 'Hello'])\n\n    def test_message_decoder(self):\n        encoded = ['__json_message', 0, 'info', 'Hello']\n        decoded = MessageDecoder().decode(json.dumps(encoded))\n        self.assertEqual(decoded, Message('Hello', 'info'))\n\n    def test_message_serializer(self):\n        message = Message('Hello', 'info')\n        serialized = MessageSerializer().dumps(message)\n        deserialized = MessageSerializer().loads(serialized)\n        self.assertEqual(deserialized, message)\n\n"], "sample_4": ["\nimport datetime\nimport io\nimport json\nimport mimetypes\nimport os\nimport re\nimport sys\nimport tempfile\nimport unittest\nfrom unittest.mock import patch\n\nfrom django.conf import settings\nfrom django.core import signals\nfrom django.core.exceptions import DisallowedRedirect\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom django.http import (\n    BadHeaderError,\n    HttpResponse,\n    HttpResponseBadRequest,\n    HttpResponseForbidden,\n    HttpResponseGone,\n    HttpResponseNotAllowed,\n    HttpResponseNotModified,\n    HttpResponseNotFound,\n    HttpResponsePermanentRedirect,\n    HttpResponseRedirect,\n    HttpResponseServerError,\n    JsonResponse,\n    StreamingHttpResponse,\n    FileResponse,\n    SimpleCookie,\n)\nfrom django.http.cookies import SimpleCookie\nfrom django.test import SimpleTestCase\nfrom django.utils import timezone\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.http import http_date\n\nsettings.configure()\n\nclass HttpResponseTests(SimpleTestCase):\n\n    def test_init(self):\n        response = HttpResponse()\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.reason_phrase, 'OK')\n        self.assertEqual(response.content, b'')\n        self.assertEqual(response['Content-Type'], 'text/html; charset=utf-8')\n\n    def test_init_with_content_type(self):\n        response = HttpResponse(content='Hello, world!', content_type='text/plain')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.reason_phrase, 'OK')\n        self.assertEqual(response.content, b'Hello, world!')\n        self.assertEqual(response['Content-Type'], 'text/plain')\n\n    def test_init_with_status(self):\n        response = HttpResponse(status=404)\n        self.assertEqual(response.status_code, 404)\n        self.assertEqual(response.reason_phrase, 'Not Found')\n\n    def test_init_with_reason(self):\n        response = HttpResponse(reason='Gone')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.reason_phrase, 'Gone')\n\n    def test_reason_phrase(self):\n        response = HttpResponse(status=404)\n        self.assertEqual(response.reason_phrase, 'Not Found')\n        response.reason_phrase = 'Not Here'\n        self.assertEqual(response.reason_phrase, 'Not Here')\n\n    def test_charset(self):\n        response = HttpResponse()\n        self.assertEqual(response.charset, settings.DEFAULT_CHARSET)\n        response = HttpResponse(content_type='text/html; charset=latin-1')\n        self.assertEqual(response.charset, 'latin-1')\n\n    def test_set_cookie(self):\n        response = HttpResponse()\n        response.set_cookie('my_cookie', 'my_value')\n        self.assertEqual(response.cookies['my_cookie'].value, 'my_value')\n\n    def test_set_cookie_expires(self):\n        response = HttpResponse()\n        response.set_cookie('my_cookie', 'my_value', expires=datetime.datetime.now() + datetime.timedelta(days=1))\n        self.assertIn('expires', response.cookies['my_cookie'])\n\n    def test_set_cookie_max_age(self):\n        response = HttpResponse()\n        response.set_cookie('my_cookie', 'my_value', max_age=3600)\n        self.assertIn('max-age', response.cookies['my_cookie'])\n\n    def test_set_cookie_domain(self):\n        response = HttpResponse()\n        response.set_cookie('my_cookie', 'my_value', domain='example.com')\n        self.assertEqual(response.cookies['my_cookie']['domain'], 'example.com')\n\n    def test_set_cookie_path(self):\n        response = HttpResponse()\n        response.set_cookie('my_cookie', 'my_value', path='/my/path')\n        self.assertEqual(response.cookies['my_cookie']['path'], '/my/path')\n\n    def test_set_cookie_secure(self):\n        response = HttpResponse()\n        response.set_cookie('my_cookie', 'my_value', secure=True)\n        self.assertTrue(response.cookies['my_cookie']['secure'])\n\n    def test_set_cookie_httponly(self):\n        response = HttpResponse()\n        response.set_cookie('my_cookie', 'my_value', httponly=True)\n        self.assertTrue(response.cookies['my_cookie']['httponly'])\n\n    def test_set_cookie_samesite(self):\n        response = HttpResponse()\n        response.set_cookie('my_cookie', 'my_value', samesite='Lax')\n        self.assertEqual(response.cookies['my_cookie']['samesite'], 'Lax')\n\n    def test_delete_cookie(self):\n        response = HttpResponse()\n        response.set_cookie('my_cookie', 'my_value')\n        response.delete_cookie('my_cookie')\n        self.assertEqual(response.cookies['my_cookie'].value, '')\n        self.assertIn('expires', response.cookies['my_cookie'])\n\n    def test_set_signed_cookie(self):\n        response = HttpResponse()\n        response.set_signed_cookie('my_cookie', 'my_value', salt='my_salt')\n        self.assertIn('my_cookie', response.cookies)\n\n    def test_serialize_headers(self):\n        response = HttpResponse()\n        response['Content-Type'] = 'text/plain'\n        response['X-Custom-Header'] = 'My Value'\n        serialized = response.serialize_headers()\n        self.assertIn(b'Content-Type: text/plain', serialized)\n        self.assertIn(b'X-Custom-Header: My Value', serialized)\n\n    def test_make_bytes(self):\n        response = HttpResponse()\n        self.assertEqual(response.make_bytes('Hello'), b'Hello')\n        self.assertEqual(response.make_bytes(b'Hello'), b'Hello')\n        self.assertEqual(response.make_bytes('Hello'.encode('utf-8')), b'Hello')\n\n    def test_streaming_content(self):\n        response = StreamingHttpResponse(streaming_content=['Hello', ' ', 'world!'])\n        self.assertEqual(b''.join(response), b'Hello world!')\n\n    def test_file_response(self):\n        with tempfile.NamedTemporaryFile() as f:\n            f.write(b'Hello, world!')\n            f.seek(0)\n            response = FileResponse(f)\n            self.assertEqual(response['Content-Length'], str(len(b'Hello, world!')))\n            self.assertEqual(response['Content-Type'], 'application/octet-stream')\n            self.assertEqual(b''.join(response), b'Hello, world!')\n\n    def test_file_response_with_filename(self):\n        with tempfile.NamedTemporaryFile() as f:\n            f.write(b'Hello, world!')\n            f.seek(0)\n            response = FileResponse(f, filename='test.txt')\n            self.assertEqual(response['Content-Disposition'], 'attachment; filename=\"test.txt\"')\n\n    def test_file_response_with_content_type(self):\n        with tempfile.NamedTemporaryFile(suffix='.gz') as f:\n            f.write(b'Hello, world!')\n            f.seek(0)\n            response = FileResponse(f)\n            self.assertEqual(response['Content-Type'], 'application/gzip')\n\n    def test_redirect(self):\n        response = HttpResponseRedirect('/redirect/')\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response['Location'], '/redirect/')\n\n    def test_permanent_redirect(self):\n        response = HttpResponsePermanentRedirect('/redirect/')\n        self.assertEqual(response.status_code, 301)\n        self.assertEqual(response['Location'], '/redirect/')\n\n    def test_not_modified(self):\n        response = HttpResponseNotModified()\n        self.assertEqual(response.status_code, 304)\n        self.assertFalse('content-type' in response)\n\n    def test_bad_request(self):\n        response = HttpResponseBadRequest()\n        self.assertEqual(response.status_code, 400)\n\n    def test_not_found(self):\n        response = HttpResponseNotFound()\n        self.assertEqual(response.status_code, 404)\n\n    def test_forbidden(self):\n        response = HttpResponseForbidden()\n        self.assertEqual(response.status_code, 403)\n\n    def test_not_allowed(self):\n        response = HttpResponseNotAllowed(['GET', 'POST'])\n        self.assertEqual(response.status_code, 405)\n        self.assertEqual(response['Allow'], 'GET, POST')\n\n    def test_gone(self):\n        response = HttpResponseGone()\n        self.assertEqual(response.status_code, 410)\n\n    def test_server_error(self):\n        response = HttpResponseServerError()\n        self.assertEqual(response.status_code, 500)\n\n    def test_json_response(self):\n        response = JsonResponse({'key': 'value'})\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'application/json')\n        self.assertEqual(response.content, b'{\"key\": \"value\"}')\n\n    def test_json_response_safe(self):\n        response = JsonResponse({'key': 'value'}, safe=False)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'application/json')\n        self.assertEqual(response.content, b'{\"key\": \"value\"}')\n\n    def test_json_response_encoder(self):\n        class CustomEncoder(json.JSONEncoder):\n            def default(self, obj):\n                return str(obj)\n        response = JsonResponse({'key': 123}, encoder=CustomEncoder)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'application/json')\n        self.assertEqual(response.content, b'{\"key\": \"123\"}')\n\n    def test_json_response_dumps_params(self):\n        response = JsonResponse({'key': 'value'}, json_dumps_params={'indent': 4})\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'application/json')\n        self.assertEqual(response.content, b'{\\n    \"key\": \"value\"\\n}')\n\nclass BadHeaderErrorTests(SimpleTestCase):\n    def test_bad_header_error(self):\n        with self.assertRaises(BadHeaderError):\n            BadHeaderError(\"Header values can't contain newlines (got 'Hello\\nworld')\")\n\nclass HttpResponseRedirectTests(SimpleTestCase):\n    def test_redirect_to_url(self):\n        response = HttpResponseRedirect('https://www.example.com/')\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response['Location'], 'https://www.example.com/')\n\n    def test_redirect_to_url_with_query_params(self):\n        response = HttpResponseRedirect('https://www.example.com/?key=value')\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response['Location'], 'https://www.example.com/?key=value')\n\n    def test_redirect_to_url_with_fragment(self):\n        response = HttpResponseRedirect('https://www.example.com/#fragment')\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response['Location'], 'https://www.example.com/#fragment')\n\n    def test_redirect_to_url_with_disallowed_scheme(self):\n        with self.assertRaises(DisallowedRedirect):\n            HttpResponseRedirect('ftp://www.example.com/')\n\nclass HttpResponsePermanentRedirectTests(SimpleTestCase):\n    def test_permanent_redirect_to_url(self):\n        response = HttpResponsePermanentRedirect('https://www.example.com/')\n        self.assertEqual(response.status_code, 301)\n        self.assertEqual(response['Location'], 'https://www.example.com/')\n\nclass HttpResponseNotModifiedTests(SimpleTestCase):\n    def test_not_modified_response(self):\n        response = HttpResponseNotModified()\n        self.assertEqual(response.status_code, 304)\n        self.assertFalse('content-type' in response)\n        with self.assertRaises(AttributeError):\n            response.content = 'Hello, world!'\n\nclass SimpleCookieTests(SimpleTestCase):\n    def test_simple_cookie(self):\n        cookie = SimpleCookie()\n        cookie['my_cookie'] = 'my_value'\n        self.assertEqual(cookie['my_cookie'].value, 'my_value')\n\n    def test_cookie_with_attributes(self):\n        cookie = SimpleCookie()\n        cookie['my_cookie'] = 'my_value'\n        cookie['my_cookie']['expires'] = datetime.datetime.now() + datetime.timedelta(days=1)\n        self.assertIn('expires', cookie['my_cookie'])\n\nclass StreamingHttpResponseTests(SimpleTestCase):\n    def test_streaming_response(self):\n        response = StreamingHttpResponse(streaming_content=['Hello', ' ', 'world!'])\n        self.assertEqual(b''.join(response), b'Hello world!')\n\n    def test_streaming_response_with_close(self):\n        class MyFile:\n            def __init__(self):\n                self.closed = False\n            def read(self, size):\n                return b'Hello world!'\n            def close(self):\n                self.closed = True\n\n        file = MyFile()\n        response = StreamingHttpResponse(streaming_content=file)\n        self.assertEqual(b''.join(response), b'Hello world!')\n        self.assertTrue(file.closed)\n\nclass FileResponseTests(SimpleTestCase):\n    def test_file_response(self):\n        with tempfile.NamedTemporaryFile() as f:\n            f.write(b'Hello, world!')\n            f.seek(0)\n            response = FileResponse(f)\n            self.assertEqual(response['Content-Length'], str(len(b'Hello, world!')))\n            self.assertEqual(response['Content-Type'], 'application/octet-stream')\n            self.assertEqual(b''.join(response), b'Hello, world!')\n\n    def test_file_response_with_filename(self):\n        with tempfile.NamedTemporaryFile() as f:\n            f.write(b'Hello, world!')\n            f.seek(0)\n            response = FileResponse(f, filename='test.txt')\n            self.assertEqual(response['Content-Disposition'], 'attachment; filename=\"test.txt\"')\n\n    def test_file_response_with_content_type(self):\n        with tempfile.NamedTemporaryFile(suffix='.gz') as f:\n            f.write(b'Hello, world!')\n            f.seek(0)\n            response = FileResponse(f)\n            self.assertEqual(response['Content-Type'], 'application/gzip')\n\n    def test_file_response_with_as_attachment(self):\n        with tempfile.NamedTemporaryFile() as f:\n            f.write(b'Hello, world!')\n            f.seek(0)\n            response = FileResponse(f, as_attachment=True)\n            self.assertEqual(response['Content-Disposition'], 'attachment; filename=\"unknown\"')\n\n    def test_file_response_with_as_attachment_and_filename(self):\n        with tempfile.NamedTemporaryFile() as f:\n            f.write(b'Hello, world!')\n            f.seek(0)\n            response = FileResponse(f, as_attachment=True, filename='test.txt')\n            self.assertEqual(response['Content-Disposition'], 'attachment; filename=\"test.txt\"')\n\nclass JsonResponseTests(SimpleTestCase):\n    def test_json_response(self):\n        response = JsonResponse({'key': 'value'})\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'application/json')\n        self.assertEqual(response.content, b'{\"key\": \"value\"}')\n\n    def test_json_response_safe(self):\n        response = JsonResponse({'key': 'value'}, safe=False)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'application/json')\n        self.assertEqual(response.content, b'{\"key\": \"value\"}')\n\n    def test_json_response_encoder(self):\n        class CustomEncoder(json.JSONEncoder):\n            def default(self, obj):\n                return str(obj)\n        response = JsonResponse({'key': 123}, encoder=CustomEncoder)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'application/json')\n        self.assertEqual(response.content, b'{\"key\": \"123\"}')\n\n    def test_json_response_dumps_params(self):\n        response = JsonResponse({'key': 'value'}, json_dumps_params={'indent': 4})\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'application/json')\n        self.assertEqual(response.content, b'{\\n    \"key\": \"value\"\\n}')\n\n"], "sample_158": ["\nimport unittest\n\nfrom sympy.physics.units.definitions.dimension_definitions import (\n    Dimension, charge, length, time, temperature, pressure, energy, mass\n)\nfrom sympy.physics.units.systems.si import dimsys_SI\nfrom sympy.physics.units.unitsystem import UnitSystem, Quantity\n\nclass TestUnitSystem(unittest.TestCase):\n\n    def test_init(self):\n        units = (Quantity(length, 'meter'), Quantity(time, 'second'))\n        us = UnitSystem(units, name=\"test\")\n        self.assertEqual(us.name, \"test\")\n        self.assertEqual(us._base_units, units)\n\n    def test_str(self):\n        units = (Quantity(length, 'meter'), Quantity(time, 'second'))\n        us = UnitSystem(units, name=\"test\")\n        self.assertEqual(str(us), \"test\")\n\n    def test_repr(self):\n        units = (Quantity(length, 'meter'), Quantity(time, 'second'))\n        us = UnitSystem(units, name=\"test\")\n        self.assertEqual(repr(us), '<UnitSystem: (meter, second)>')\n\n    def test_extend(self):\n        units1 = (Quantity(length, 'meter'), Quantity(time, 'second'))\n        units2 = (Quantity(mass, 'kilogram'),)\n        us1 = UnitSystem(units1, name=\"test1\")\n        us2 = us1.extend(units2, name=\"test2\")\n        self.assertEqual(us2.name, \"test2\")\n        self.assertEqual(us2._base_units, units1 + units2)\n\n    def test_get_dimension_system(self):\n        units = (Quantity(length, 'meter'), Quantity(time, 'second'))\n        us = UnitSystem(units, name=\"test\", dimension_system=dimsys_SI)\n        self.assertEqual(us.get_dimension_system(), dimsys_SI)\n\n    def test_get_quantity_dimension(self):\n        units = (Quantity(length, 'meter'), Quantity(time, 'second'))\n        us = UnitSystem(units, name=\"test\", dimension_system=dimsys_SI)\n        self.assertEqual(us.get_quantity_dimension(Quantity(length, 'meter')), dimsys_SI.get_dimension(length))\n\n    def test_get_quantity_scale_factor(self):\n        units = (Quantity(length, 'meter'), Quantity(time, 'second'))\n        us = UnitSystem(units, name=\"test\", dimension_system=dimsys_SI)\n        self.assertEqual(us.get_quantity_scale_factor(Quantity(length, 'meter')), 1)\n\n    def test_get_unit_system(self):\n        units = (Quantity(length, 'meter'), Quantity(time, 'second'))\n        us = UnitSystem(units, name=\"test\")\n        self.assertEqual(UnitSystem.get_unit_system(us), us)\n\n    def test_get_default_unit_system(self):\n        self.assertEqual(UnitSystem.get_default_unit_system(), UnitSystem.get_unit_system(\"SI\"))\n\n    def test_dim(self):\n        units = (Quantity(length, 'meter'), Quantity(time, 'second'))\n        us = UnitSystem(units, name=\"test\")\n        self.assertEqual(us.dim, 2)\n\n    def test_is_consistent(self):\n        units = (Quantity(length, 'meter'), Quantity(time, 'second'))\n        us = UnitSystem(units, name=\"test\", dimension_system=dimsys_SI)\n        self.assertTrue(us.is_consistent)\n\n    def test_derived_units(self):\n        units = (Quantity(length, 'meter'), Quantity(time, 'second'))\n        derived_units = {Dimension(length**2/time**2): Quantity(length**2/time**2, 'acceleration')}\n        us = UnitSystem(units, name=\"test\", dimension_system=dimsys_SI, derived_units=derived_units)\n        self.assertEqual(us.derived_units, derived_units)\n\n    def test_get_dimensional_expr(self):\n        units = (Quantity(length, 'meter'), Quantity(time, 'second'))\n        us = UnitSystem(units, name=\"test\", dimension_system=dimsys_SI)\n        self.assertEqual(us.get_dimensional_expr(Quantity(length, 'meter')), length)\n\n    def test_collect_factor_and_dimension(self):\n        units = (Quantity(length, 'meter'), Quantity(time, 'second'))\n        us = UnitSystem(units, name=\"test\", dimension_system=dimsys_SI)\n        self.assertEqual(us._collect_factor_and_dimension(Quantity(length, 'meter')), (1, length))\n\n    def test_get_units_non_prefixed(self):\n        units = (Quantity(length, 'meter'), Quantity(time, 'second'))\n        us = UnitSystem(units, name=\"test\", dimension_system=dimsys_SI)\n        self.assertEqual(us.get_units_non_prefixed(), set(units))\n\n"], "sample_96": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.ridge import Ridge\nfrom sklearn.linear_model.ridge import RidgeCV\nfrom sklearn.linear_model.ridge import RidgeClassifier\nfrom sklearn.linear_model.ridge import RidgeClassifierCV\nfrom sklearn.linear_model.ridge import _RidgeGCV\nfrom sklearn.datasets import make_regression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error\n\nclass RidgeTests(unittest.TestCase):\n\n    def test_ridge_fit(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n        ridge = Ridge(alpha=1.0)\n        ridge.fit(X, y)\n        self.assertTrue(ridge.coef_.shape[0] == X.shape[1])\n\n    def test_ridge_predict(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n        ridge = Ridge(alpha=1.0)\n        ridge.fit(X, y)\n        y_pred = ridge.predict(X)\n        self.assertEqual(y_pred.shape[0], y.shape[0])\n\n    def test_ridgecv_fit(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n        ridgecv = RidgeCV(alphas=[0.1, 1.0, 10.0])\n        ridgecv.fit(X, y)\n        self.assertTrue(ridgecv.alpha_ in [0.1, 1.0, 10.0])\n\n    def test_ridgeclassifier_fit(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n        y = np.where(y > 0, 1, -1)\n        ridge_classifier = RidgeClassifier(alpha=1.0)\n        ridge_classifier.fit(X, y)\n        self.assertTrue(ridge_classifier.coef_.shape[0] == X.shape[1])\n\n    def test_ridgeclassifier_predict(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n        y = np.where(y > 0, 1, -1)\n        ridge_classifier = RidgeClassifier(alpha=1.0)\n        ridge_classifier.fit(X, y)\n        y_pred = ridge_classifier.predict(X)\n        self.assertEqual(y_pred.shape[0], y.shape[0])\n\n    def test_ridgeclassifiercv_fit(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n        y = np.where(y > 0, 1, -1)\n        ridge_classifiercv = RidgeClassifierCV(alphas=[0.1, 1.0, 10.0])\n        ridge_classifiercv.fit(X, y)\n        self.assertTrue(ridge_classifiercv.alpha_ in [0.1, 1.0, 10.0])\n\n    def test_ridgegcv_fit(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n        ridgegcv = _RidgeGCV(alphas=[0.1, 1.0, 10.0])\n        ridgegcv.fit(X, y)\n        self.assertTrue(ridgegcv.alpha_ in [0.1, 1.0, 10.0])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_31": ["\nimport os\nimport sys\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nfrom django.core.management import CommandError, call_command\nfrom django.utils.datastructures import OrderedSet\n\nfrom django.core.management.commands.shell import Command\n\n\nclass ShellCommandTests(unittest.TestCase):\n\n    def setUp(self):\n        self.old_environ = os.environ.copy()\n        os.environ['PYTHONSTARTUP'] = '/path/to/pythonstartup.py'\n\n    def tearDown(self):\n        os.environ.clear()\n        os.environ.update(self.old_environ)\n\n    @patch('django.core.management.commands.shell.IPython')\n    def test_ipython_interface(self, mock_ipython):\n        call_command('shell', interface='ipython')\n        mock_ipython.start_ipython.assert_called_once_with(argv=[])\n\n    @patch('django.core.management.commands.shell.bpython')\n    def test_bpython_interface(self, mock_bpython):\n        call_command('shell', interface='bpython')\n        mock_bpython.embed.assert_called_once_with()\n\n    def test_python_interface(self):\n        with patch('django.core.management.commands.shell.code.interact') as mock_interact:\n            call_command('shell', interface='python')\n            mock_interact.assert_called_once_with(local={})\n\n    def test_python_interface_no_startup(self):\n        with patch('django.core.management.commands.shell.code.interact') as mock_interact:\n            call_command('shell', interface='python', no_startup=True)\n            mock_interact.assert_called_once_with(local={})\n\n    @patch('django.core.management.commands.shell.open')\n    def test_python_interface_pythonrc(self, mock_open):\n        mock_file = MagicMock()\n        mock_file.read.return_value = 'print(\"Hello from .pythonrc.py\")'\n        mock_open.return_value = mock_file\n        with patch('django.core.management.commands.shell.code.interact') as mock_interact:\n            call_command('shell', interface='python')\n            mock_interact.assert_called_once_with(local={'print': print})\n\n    def test_command_execution(self):\n        out, err = call_command('shell', command='print(\"Hello from command\")')\n        self.assertEqual(out, 'Hello from command\\n')\n        self.assertEqual(err, '')\n\n    def test_stdin_execution(self):\n        sys.stdin = MagicMock()\n        sys.stdin.isatty.return_value = False\n        sys.stdin.read.return_value = 'print(\"Hello from stdin\")\\n'\n        out, err = call_command('shell')\n        self.assertEqual(out, 'Hello from stdin\\n')\n        self.assertEqual(err, '')\n\n    def test_no_available_shells(self):\n        with patch('django.core.management.commands.shell.IPython', side_effect=ImportError):\n            with patch('django.core.management.commands.shell.bpython', side_effect=ImportError):\n                with self.assertRaises(CommandError):\n                    call_command('shell')\n\n"], "sample_19": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.conf import settings\nfrom django.http import Http404, HttpResponse, HttpResponseNotFound\nfrom django.template import Context, Engine, TemplateDoesNotExist\nfrom django.template.defaultfilters import pprint\nfrom django.urls import resolve\nfrom django.utils import timezone\nfrom django.utils.datastructures import MultiValueDict\nfrom django.utils.encoding import force_str\nfrom django.utils.module_loading import import_string\nfrom django.utils.regex_helper import _lazy_re_compile\nfrom django.utils.version import get_docs_version\n\nfrom django.views.debug import (\n    CallableSettingWrapper,\n    ExceptionReporter,\n    Path as DebugPath,\n    SafeExceptionReporterFilter,\n    default_urlconf,\n    get_default_exception_reporter_filter,\n    technical_404_response,\n    technical_500_response,\n)\nfrom django.views.decorators.debug import (\n    sensitive_post_parameters,\n    sensitive_variables,\n)\n\nsettings.DEBUG = True\nsettings.ROOT_URLCONF = 'django.urls'\n\nclass TestExceptionReporter(unittest.TestCase):\n    def test_get_traceback_data(self):\n        request = MagicMock()\n        exc_type = Exception\n        exc_value = Exception(\"Test exception\")\n        tb = MagicMock()\n        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n        data = reporter.get_traceback_data()\n        self.assertIn('is_email', data)\n        self.assertIn('unicode_hint', data)\n        self.assertIn('frames', data)\n        self.assertIn('request', data)\n        self.assertIn('request_meta', data)\n        self.assertIn('user_str', data)\n        self.assertIn('filtered_POST_items', data)\n        self.assertIn('settings', data)\n        self.assertIn('sys_executable', data)\n        self.assertIn('sys_version_info', data)\n        self.assertIn('server_time', data)\n        self.assertIn('django_version_info', data)\n        self.assertIn('sys_path', data)\n        self.assertIn('template_info', data)\n        self.assertIn('template_does_not_exist', data)\n        self.assertIn('postmortem', data)\n\n    def test_get_traceback_html(self):\n        request = MagicMock()\n        exc_type = Exception\n        exc_value = Exception(\"Test exception\")\n        tb = MagicMock()\n        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n        html = reporter.get_traceback_html()\n        self.assertIsInstance(html, str)\n\n    def test_get_traceback_text(self):\n        request = MagicMock()\n        exc_type = Exception\n        exc_value = Exception(\"Test exception\")\n        tb = MagicMock()\n        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n        text = reporter.get_traceback_text()\n        self.assertIsInstance(text, str)\n\n    def test_get_traceback_frames(self):\n        request = MagicMock()\n        exc_type = Exception\n        exc_value = Exception(\"Test exception\")\n        tb = MagicMock()\n        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n        frames = reporter.get_traceback_frames()\n        self.assertIsInstance(frames, list)\n\nclass TestSafeExceptionReporterFilter(unittest.TestCase):\n    def test_cleanse_setting(self):\n        filter = SafeExceptionReporterFilter()\n        self.assertEqual(filter.cleanse_setting('SECRET_KEY', 'mysecret'), '********************')\n\n    def test_get_safe_settings(self):\n        filter = SafeExceptionReporterFilter()\n        settings_dict = filter.get_safe_settings()\n        for key, value in settings_dict.items():\n            if key.isupper():\n                self.assertEqual(value, '********************')\n\n    def test_get_safe_request_meta(self):\n        filter = SafeExceptionReporterFilter()\n        request = MagicMock()\n        request.META = {'HTTP_AUTHORIZATION': 'Bearer mytoken'}\n        meta = filter.get_safe_request_meta(request)\n        self.assertEqual(meta['HTTP_AUTHORIZATION'], '********************')\n\n    def test_is_active(self):\n        filter = SafeExceptionReporterFilter()\n        self.assertFalse(filter.is_active())\n\n    def test_get_cleansed_multivaluedict(self):\n        filter = SafeExceptionReporterFilter()\n        multivaluedict = MultiValueDict({'password': ['secret']})\n        cleansed = filter.get_cleansed_multivaluedict(None, multivaluedict)\n        self.assertEqual(cleansed['password'], '********************')\n\n    def test_get_post_parameters(self):\n        filter = SafeExceptionReporterFilter()\n        request = MagicMock()\n        request.POST = {'password': 'secret'}\n        cleansed = filter.get_post_parameters(request)\n        self.assertEqual(cleansed['password'], '********************')\n\n    def test_cleanse_special_types(self):\n        filter = SafeExceptionReporterFilter()\n        request = MagicMock()\n        value = MultiValueDict({'password': ['secret']})\n        cleansed = filter.cleanse_special_types(request, value)\n        self.assertEqual(cleansed['password'], '********************')\n\nclass TestTechnical404Response(unittest.TestCase):\n    def test_technical_404_response(self):\n        request = MagicMock()\n        exception = Http404(\"Page not found\")\n        response = technical_404_response(request, exception)\n        self.assertIsInstance(response, HttpResponseNotFound)\n\nclass TestDefaultUrlconf(unittest.TestCase):\n    def test_default_urlconf(self):\n        request = MagicMock()\n        response = default_urlconf(request)\n        self.assertIsInstance(response, HttpResponse)\n\nclass TestTechnical500Response(unittest.TestCase):\n    def test_technical_500_response(self):\n        request = MagicMock()\n        exc_type = Exception\n        exc_value = Exception(\"Test exception\")\n        tb = MagicMock()\n        response = technical_500_response(request, exc_type, exc_value, tb)\n        self.assertIsInstance(response, HttpResponse)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_16": ["\nfrom django.contrib.admin.utils import (\n    NestedObjects, display_for_field, display_for_value, flatten,\n    flatten_fieldsets, label_for_field, lookup_field, quote,\n    unquote, get_deleted_objects, lookup_needs_distinct, prepare_lookup_value,\n    model_format_dict, model_ngettext, _get_non_gfk_field,\n    help_text_for_field, get_model_from_relation, reverse_field_path,\n    get_fields_from_path, construct_change_message,\n)\nfrom django.db import models\nfrom django.test import SimpleTestCase\nfrom django.utils import timezone\nfrom django.utils.formats import localize\nfrom django.utils.safestring import mark_safe\nfrom django.contrib.auth.models import User\nfrom django.core.exceptions import FieldDoesNotExist\n\nclass TestAdminUtils(SimpleTestCase):\n\n    def test_flatten(self):\n        self.assertEqual(flatten([1, 2, [3, 4]]), [1, 2, 3, 4])\n        self.assertEqual(flatten([1, 2, (3, 4)]), [1, 2, 3, 4])\n\n    def test_flatten_fieldsets(self):\n        fieldsets = (\n            ('Group 1', {'fields': ['field1', 'field2']}),\n            ('Group 2', {'fields': ['field3', ('field4', 'field5')]}),\n        )\n        self.assertEqual(flatten_fieldsets(fieldsets), ['field1', 'field2', 'field3', 'field4', 'field5'])\n\n    def test_quote(self):\n        self.assertEqual(quote('test'), 'test')\n        self.assertEqual(quote('/test'), '_2Ftest')\n        self.assertEqual(quote(':test'), '_3Atest')\n        self.assertEqual(quote('_test'), '_5Ftest')\n\n    def test_unquote(self):\n        self.assertEqual(unquote('_2Ftest'), '/test')\n        self.assertEqual(unquote('_3Atest'), ':test')\n        self.assertEqual(unquote('_5Ftest'), '_test')\n\n    def test_lookup_needs_distinct(self):\n        class TestModel(models.Model):\n            field1 = models.CharField(max_length=100)\n            field2 = models.ManyToManyField('self')\n\n        opts = TestModel._meta\n        self.assertFalse(lookup_needs_distinct(opts, 'field1'))\n        self.assertTrue(lookup_needs_distinct(opts, 'field2'))\n\n    def test_prepare_lookup_value(self):\n        self.assertEqual(prepare_lookup_value('field__in', '1,2,3'), ['1', '2', '3'])\n        self.assertEqual(prepare_lookup_value('field__isnull', 'true'), True)\n        self.assertEqual(prepare_lookup_value('field__isnull', 'false'), False)\n        self.assertEqual(prepare_lookup_value('field__isnull', '0'), False)\n        self.assertEqual(prepare_lookup_value('field__isnull', ''), False)\n\n    def test_get_deleted_objects(self):\n        class TestModel(models.Model):\n            name = models.CharField(max_length=100)\n        \n        obj1 = TestModel.objects.create(name='obj1')\n        obj2 = TestModel.objects.create(name='obj2')\n\n        # Mock the admin site\n        class MockAdminSite:\n            def __init__(self):\n                pass\n            def has_delete_permission(self, request, obj):\n                return True\n        admin_site = MockAdminSite()\n\n        deleted_objects, model_count, perms_needed, protected = get_deleted_objects([obj1, obj2], None, admin_site)\n        self.assertEqual(deleted_objects, [\n            '<TestModel: obj1>',\n            '<TestModel: obj2>',\n        ])\n        self.assertEqual(model_count, {'TestModels': 2})\n        self.assertEqual(perms_needed, set())\n        self.assertEqual(protected, [])\n\n    def test_NestedObjects(self):\n        class TestModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        obj1 = TestModel.objects.create(name='obj1')\n        obj2 = TestModel.objects.create(name='obj2')\n        obj3 = TestModel.objects.create(name='obj3')\n\n        collector = NestedObjects()\n        collector.add_edge(obj1, obj2)\n        collector.add_edge(obj1, obj3)\n\n        nested_objects = collector.nested()\n        self.assertEqual(nested_objects, [\n            obj1,\n            [obj2, obj3],\n        ])\n\n    def test_model_format_dict(self):\n        class TestModel(models.Model):\n            class Meta:\n                verbose_name = 'Test Model'\n                verbose_name_plural = 'Test Models'\n\n        self.assertEqual(model_format_dict(TestModel), {'verbose_name': 'Test Model', 'verbose_name_plural': 'Test Models'})\n\n    def test_model_ngettext(self):\n        class TestModel(models.Model):\n            class Meta:\n                verbose_name = 'Test Model'\n                verbose_name_plural = 'Test Models'\n\n        self.assertEqual(model_ngettext(TestModel), 'Test Model')\n        self.assertEqual(model_ngettext(TestModel, 2), 'Test Models')\n\n    def test_lookup_field(self):\n        class TestModel(models.Model):\n            name = models.CharField(max_length=100)\n            \n        obj = TestModel(name='test')\n\n        f, attr, value = lookup_field('name', obj)\n        self.assertIsNotNone(f)\n        self.assertIsNone(attr)\n        self.assertEqual(value, 'test')\n\n    def test_label_for_field(self):\n        class TestModel(models.Model):\n            name = models.CharField(max_length=100, verbose_name='My Name')\n\n        label = label_for_field('name', TestModel)\n        self.assertEqual(label, 'My Name')\n\n    def test_help_text_for_field(self):\n        class TestModel(models.Model):\n            name = models.CharField(max_length=100, help_text='This is the name')\n\n        help_text = help_text_for_field('name', TestModel)\n        self.assertEqual(help_text, 'This is the name')\n\n    def test_display_for_field(self):\n        class TestModel(models.Model):\n            date_field = models.DateField()\n            decimal_field = models.DecimalField(max_digits=5, decimal_places=2)\n\n        obj = TestModel(date_field=timezone.now(), decimal_field=12.34)\n\n        self.assertEqual(display_for_field(obj.date_field, obj._meta.get_field('date_field'), 'N/A'), localize(obj.date_field))\n        self.assertEqual(display_for_field(obj.decimal_field, obj._meta.get_field('decimal_field'), 'N/A'), '12.34')\n\n    def test_display_for_value(self):\n        self.assertEqual(display_for_value(True, 'N/A', boolean=True), '<img src=\"/static/admin/img/icon-yes.svg\" alt=\"Yes\" width=\"13\" height=\"13\">')\n        self.assertEqual(display_for_value(False, 'N/A', boolean=True), '<img src=\"/static/admin/img/icon-no.svg\" alt=\"No\" width=\"13\" height=\"13\">')\n\n    def test_get_model_from_relation(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=100)\n\n        class Book(models.Model):\n            author = models.ForeignKey(Author, on_delete=models.CASCADE)\n\n        field = Book._meta.get_field('author')\n        model = get_model_from_relation(field)\n        self.assertEqual(model, Author)\n\n    def test_reverse_field_path(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=100)\n\n        class Book(models.Model):\n            author = models.ForeignKey(Author, on_delete=models.CASCADE)\n\n        parent, path = reverse_field_path(Book, 'author')\n        self.assertEqual(parent, Author)\n        self.assertEqual(path, 'book')\n\n    def test_get_fields_from_path(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=100)\n\n        class Book(models.Model):\n            author = models.ForeignKey(Author, on_delete=models.CASCADE)\n\n        fields = get_fields_from_path(Book, 'author')\n        self.assertEqual(len(fields), 1)\n        self.assertEqual(fields[0].name, 'author')\n\n    def test_construct_change_message(self):\n        class TestModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        form = {'changed_data': {'name': 'new name'}}\n        change_message = construct_change_message(form, [], False)\n        self.assertEqual(change_message, [{'changed': {'fields': ['name']}}])\n\n"], "sample_91": ["\nfrom _pytest.skipping import evaluate_skip_marks\nfrom _pytest.skipping import evaluate_xfail_marks\nfrom _pytest.skipping import pytest_runtest_setup\nfrom _pytest.skipping import pytest_runtest_call\nfrom _pytest.skipping import pytest_report_teststatus\nfrom _pytest.skipping import pytest_runtest_makereport\nfrom _pytest.skipping import skipped_by_mark_key\nfrom _pytest.skipping import xfailed_key\nfrom _pytest.skipping import unexpectedsuccess_key\nfrom _pytest.nodes import Item\nfrom _pytest.config import Config\nfrom _pytest.outcomes import Skip\nfrom _pytest.outcomes import Xfail\nfrom _pytest.outcomes import CallInfo\nfrom _pytest.reports import BaseReport\nfrom typing import Tuple\n\nimport pytest\n\ndef test_evaluate_skip_marks_unconditional_skip():\n    item = Item(name=\"test_func\", parent=None, config=Config())\n    mark = pytest.mark.skip(reason=\"unconditional skip\")\n    item._markers = [mark]\n    skip_result = evaluate_skip_marks(item)\n    assert isinstance(skip_result, Skip)\n    assert skip_result.reason == \"unconditional skip\"\n\ndef test_evaluate_skip_marks_conditional_skip():\n    item = Item(name=\"test_func\", parent=None, config=Config())\n    mark = pytest.mark.skipif(condition=True, reason=\"conditional skip\")\n    item._markers = [mark]\n    skip_result = evaluate_skip_marks(item)\n    assert isinstance(skip_result, Skip)\n    assert skip_result.reason == \"conditional skip\"\n\ndef test_evaluate_skip_marks_no_skip():\n    item = Item(name=\"test_func\", parent=None, config=Config())\n    skip_result = evaluate_skip_marks(item)\n    assert skip_result is None\n\ndef test_evaluate_xfail_marks_unconditional_xfail():\n    item = Item(name=\"test_func\", parent=None, config=Config())\n    mark = pytest.mark.xfail(reason=\"unconditional xfail\", run=True)\n    item._markers = [mark]\n    xfail_result = evaluate_xfail_marks(item)\n    assert isinstance(xfail_result, Xfail)\n    assert xfail_result.reason == \"unconditional xfail\"\n    assert xfail_result.run is True\n\ndef test_evaluate_xfail_marks_conditional_xfail():\n    item = Item(name=\"test_func\", parent=None, config=Config())\n    mark = pytest.mark.xfail(condition=True, reason=\"conditional xfail\", run=True)\n    item._markers = [mark]\n    xfail_result = evaluate_xfail_marks(item)\n    assert isinstance(xfail_result, Xfail)\n    assert xfail_result.reason == \"conditional xfail\"\n    assert xfail_result.run is True\n\ndef test_evaluate_xfail_marks_no_xfail():\n    item = Item(name=\"test_func\", parent=None, config=Config())\n    xfail_result = evaluate_xfail_marks(item)\n    assert xfail_result is None\n\ndef test_pytest_runtest_setup_skip():\n    item = Item(name=\"test_func\", parent=None, config=Config())\n    mark = pytest.mark.skip(reason=\"skip reason\")\n    item._markers = [mark]\n    pytest_runtest_setup(item)\n    assert item._store[skipped_by_mark_key] is True\n\ndef test_pytest_runtest_setup_xfail():\n    item = Item(name=\"test_func\", parent=None, config=Config())\n    mark = pytest.mark.xfail(reason=\"xfail reason\", run=True)\n    item._markers = [mark]\n    pytest_runtest_setup(item)\n    assert item._store[xfailed_key] is not None\n\ndef test_pytest_runtest_call_xfail_not_run():\n    item = Item(name=\"test_func\", parent=None, config=Config())\n    mark = pytest.mark.xfail(reason=\"xfail reason\", run=False)\n    item._markers = [mark]\n    item._store[xfailed_key] = mark\n    with pytest.raises(pytest.xfail.Exception) as excinfo:\n        next(pytest_runtest_call(item))\n    assert excinfo.value.msg == \"[NOTRUN] xfail reason\"\n\ndef test_pytest_runtest_makereport_xfail_strict():\n    item = Item(name=\"test_func\", parent=None, config=Config())\n    mark = pytest.mark.xfail(reason=\"xfail reason\", strict=True)\n    item._markers = [mark]\n    call = CallInfo(None, None, None)\n    report = BaseReport(item, call)\n    xfail_result = Xfail(reason=\"xfail reason\", run=True, strict=True, raises=None)\n    item._store[xfailed_key] = xfail_result\n    pytest_runtest_makereport(item, call)\n    assert report.outcome == \"failed\"\n    assert report.longrepr == \"[XPASS(strict)] xfail reason\"\n\ndef test_pytest_report_teststatus_xpassed():\n    report = BaseReport(None, None)\n    report.wasxfail = True\n    report.passed = True\n    status = pytest_report_teststatus(report)\n    assert status == (\"xpassed\", \"X\", \"XPASS\")\n\ndef test_pytest_report_teststatus_xfailed():\n    report = BaseReport(None, None)\n    report.wasxfail = True\n    report.skipped = True\n    status = pytest_report_teststatus(report)\n    assert status == (\"xfailed\", \"x\", \"XFAIL\")\n\n"], "sample_117": ["\nimport unittest\nfrom unittest.mock import MagicMock\n\nfrom typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar, Union)\nfrom sphinx.util.typing import get_type_hints, restify, stringify, is_system_TypeVar\nfrom typing import ForwardRef  # type: ignore\nfrom typing import Annotated  # type: ignore\nfrom sphinx.util.inspect import safe_getattr\n\nclass TestUtilTyping(unittest.TestCase):\n\n    def test_get_type_hints_basic(self):\n        def func(a: int, b: str) -> str:\n            return a + b\n        hints = get_type_hints(func)\n        self.assertEqual(hints['a'], int)\n        self.assertEqual(hints['b'], str)\n        self.assertEqual(hints['return'], str)\n\n    def test_get_type_hints_no_hints(self):\n        def func():\n            pass\n        hints = get_type_hints(func)\n        self.assertEqual(hints, {})\n\n    def test_get_type_hints_forwardref(self):\n        T = TypeVar('T')\n        def func(a: ForwardRef('T')) -> T:\n            return a\n        hints = get_type_hints(func)\n        self.assertEqual(hints['a'], T)\n        self.assertEqual(hints['return'], T)\n\n    def test_get_type_hints_broken_class(self):\n        class BrokenClass:\n            pass\n        def func(a: BrokenClass) -> None:\n            pass\n        hints = get_type_hints(func)\n        self.assertEqual(hints['a'], BrokenClass)\n\n    def test_get_type_hints_exception(self):\n        class BrokenClass:\n            pass\n        def func(a: BrokenClass) -> None:\n            pass\n        # Mock safe_getattr to raise an exception\n        safe_getattr.side_effect = KeyError\n        with self.assertRaises(KeyError):\n            get_type_hints(func)\n\n    def test_restify_basic(self):\n        self.assertEqual(restify(int), ':obj:`int`')\n        self.assertEqual(restify(str), ':obj:`str`')\n        self.assertEqual(restify(list), ':obj:`list`')\n        self.assertEqual(restify(dict), ':obj:`dict`')\n\n    def test_restify_none(self):\n        self.assertEqual(restify(None), ':obj:`None`')\n\n    def test_restify_ellipsis(self):\n        self.assertEqual(restify(Ellipsis), '...')\n\n    def test_restify_module(self):\n        self.assertEqual(restify(Exception), ':class:`Exception`')\n        self.assertEqual(restify(ValueError), ':class:`ValueError`')\n\n    def test_restify_generic(self):\n        from typing import List\n        self.assertEqual(restify(List[int]), ':class:`list`\\\\ [:obj:`int`]')\n\n    def test_restify_union(self):\n        from typing import Union\n        self.assertEqual(restify(Union[int, str]), ':obj:`Union`\\\\ [:obj:`int`], :obj:`str`]')\n        self.assertEqual(restify(Union[int, NoneType]), ':obj:`Optional`\\\\ [:obj:`int`]')\n\n    def test_restify_callable(self):\n        from typing import Callable\n        self.assertEqual(restify(Callable[[int, str], bool]), ':class:`Callable`\\\\ [[:obj:`int`], :obj:`str`], :obj:`bool`]')\n\n    def test_restify_newtype(self):\n        NewInt = NewType('NewInt', int)\n        self.assertEqual(restify(NewInt), ':class:`NewInt`')\n\n    def test_restify_typevar(self):\n        T = TypeVar('T')\n        self.assertEqual(restify(T), ':obj:`T`')\n\n    def test_stringify_basic(self):\n        self.assertEqual(stringify(int), 'int')\n        self.assertEqual(stringify(str), 'str')\n        self.assertEqual(stringify(list), 'list')\n        self.assertEqual(stringify(dict), 'dict')\n\n    def test_stringify_none(self):\n        self.assertEqual(stringify(None), 'None')\n\n    def test_stringify_ellipsis(self):\n        self.assertEqual(stringify(Ellipsis), '...')\n\n    def test_stringify_module(self):\n        self.assertEqual(stringify(Exception), 'Exception')\n        self.assertEqual(stringify(ValueError), 'ValueError')\n\n    def test_stringify_generic(self):\n        from typing import List\n        self.assertEqual(stringify(List[int]), 'list[int]')\n\n    def test_stringify_union(self):\n        from typing import Union\n        self.assertEqual(stringify(Union[int, str]), 'Union[int, str]')\n        self.assertEqual(stringify(Union[int, NoneType]), 'Optional[int]')\n\n    def test_stringify_callable(self):\n        from typing import Callable\n        self.assertEqual(stringify(Callable[[int, str], bool]), 'Callable[[int, str], bool]')\n\n    def test_stringify_newtype(self):\n        NewInt = NewType('NewInt', int)\n        self.assertEqual(stringify(NewInt), 'NewInt')\n\n    def test_stringify_typevar(self):\n        T = TypeVar('T')\n        self.assertEqual(stringify(T), 'T')\n\n    def test_is_system_typevar(self):\n        T = TypeVar('T')\n        self.assertTrue(is_system_TypeVar(T))\n\n        class CustomTypeVar(TypeVar):\n            pass\n        self.assertFalse(is_system_TypeVar(CustomTypeVar('CT')))\n\n\n\n"], "sample_23": ["\nfrom django.db import DatabaseError, NotSupportedError, connection\nfrom django.db.models import Exists, F, IntegerField, OuterRef, Value\nfrom django.db.models.query import (\n    Prefetch,\n    RawQuerySet,\n    QuerySet,\n    ModelIterable,\n    prefetch_related_objects,\n    RelatedPopulator,\n    get_related_populators,\n)\nfrom django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n\nclass QuerySetTests(TestCase):\n\n    def test_prefetch_related_objects(self):\n        # Test basic prefetch_related functionality\n        pass\n\n    def test_prefetch_related_objects_with_to_attr(self):\n        # Test prefetch_related with a custom to_attr\n        pass\n\n    def test_prefetch_related_objects_with_nested_lookups(self):\n        # Test prefetch_related with nested lookups\n        pass\n\n    def test_prefetch_related_objects_with_empty_results(self):\n        # Test prefetch_related with empty results\n        pass\n\n    def test_prefetch_related_objects_with_queryset(self):\n        # Test prefetch_related with a custom QuerySet\n        pass\n\n    def test_related_populator(self):\n        # Test RelatedPopulator instantiation and populate method\n        pass\n\n    def test_get_related_populators(self):\n        # Test get_related_populators function\n        pass\n\n    def test_rawqueryset(self):\n        # Test RawQuerySet functionality\n        pass\n\n    def test_queryset_iteration(self):\n        # Test QuerySet iteration\n        pass\n\n    def test_queryset_slicing(self):\n        # Test QuerySet slicing\n        pass\n\n    def test_queryset_filtering(self):\n        # Test QuerySet filtering\n        pass\n\n    def test_queryset_ordering(self):\n        # Test QuerySet ordering\n        pass\n\n    def test_queryset_aggregation(self):\n        # Test QuerySet aggregation\n        pass\n\n    def test_queryset_exists(self):\n        # Test QuerySet exists method\n        pass\n\n    def test_queryset_count(self):\n        # Test QuerySet count method\n        pass\n\n    def test_queryset_update(self):\n        # Test QuerySet update method\n        pass\n\n    def test_queryset_delete(self):\n        # Test QuerySet delete method\n        pass\n\n    def test_queryset_values(self):\n        # Test QuerySet values method\n        pass\n\n    def test_queryset_values_list(self):\n        # Test QuerySet values_list method\n        pass\n\n    def test_queryset_annotate(self):\n        # Test QuerySet annotate method\n        pass\n\n    def test_queryset_defer(self):\n        # Test QuerySet defer method\n        pass\n\n    def test_queryset_only(self):\n        # Test QuerySet only method\n        pass\n\n    def test_queryset_select_related(self):\n        # Test QuerySet select_related method\n        pass\n\n    def test_queryset_prefetch_related(self):\n        # Test QuerySet prefetch_related method\n        pass\n\n    def test_queryset_distinct(self):\n        # Test QuerySet distinct method\n        pass\n\n    def test_queryset_union(self):\n        # Test QuerySet union method\n        pass\n\n    def test_queryset_intersection(self):\n        # Test QuerySet intersection method\n        pass\n\n    def test_queryset_difference(self):\n        # Test QuerySet difference method\n        pass\n\n    def test_queryset_exclude(self):\n        # Test QuerySet exclude method\n        pass\n\n    def test_queryset_reverse(self):\n        # Test QuerySet reverse method\n        pass\n\n    def test_queryset_all(self):\n        # Test QuerySet all method\n        pass\n\n    def test_queryset_none(self):\n        # Test QuerySet none method\n        pass\n\n    def test_modeliterable(self):\n        # Test ModelIterable functionality\n        pass\n\n"], "sample_116": ["\nimport unittest\nfrom typing import List, Tuple\n\nfrom sphinx.builders import Builder\nfrom sphinx.domains.index import IndexDomain\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.errors import NoUri\nfrom sphinx.locale import _, __\nfrom sphinx.util import split_into, logging\n\nfrom sphinx.environment.adapters.indexentries import IndexEntries\n\nlogger = logging.getLogger(__name__)\n\nclass TestIndexEntries(unittest.TestCase):\n\n    def setUp(self):\n        self.env = BuildEnvironment(\n            srcdir='.',\n            doctreedir='.',\n            outdir='.',\n            config={}\n        )\n        self.env.domains.add('index', IndexDomain)\n        self.env.get_domain('index').entries = {}\n        self.builder = Builder(self.env, 'html')\n\n    def test_create_index_single(self):\n        self.env.get_domain('index').entries['test.rst'] = [\n            ('single', 'entry', 'id1', 'main', None)\n        ]\n        index_entries = IndexEntries(self.env).create_index(self.builder)\n        self.assertEqual(len(index_entries), 1)\n        self.assertEqual(index_entries[0][0], 'entry')\n        self.assertEqual(len(index_entries[0][1]), 1)\n        self.assertEqual(index_entries[0][1][0][0], ('main', self.builder.get_relative_uri('genindex', 'test.rst') + '#id1'))\n\n    def test_create_index_pair(self):\n        self.env.get_domain('index').entries['test.rst'] = [\n            ('pair', 'first second', 'id1', 'main', None)\n        ]\n        index_entries = IndexEntries(self.env).create_index(self.builder)\n        self.assertEqual(len(index_entries), 1)\n        self.assertEqual(index_entries[0][0], 'first')\n        self.assertEqual(len(index_entries[0][1]), 1)\n        self.assertEqual(index_entries[0][1][0][0], ('main', self.builder.get_relative_uri('genindex', 'test.rst') + '#id1'))\n        self.assertEqual(index_entries[0][0], 'second')\n        self.assertEqual(len(index_entries[0][1]), 1)\n        self.assertEqual(index_entries[0][1][0][0], ('main', self.builder.get_relative_uri('genindex', 'test.rst') + '#id1'))\n\n    def test_create_index_triple(self):\n        self.env.get_domain('index').entries['test.rst'] = [\n            ('triple', 'first second third', 'id1', 'main', None)\n        ]\n        index_entries = IndexEntries(self.env).create_index(self.builder)\n        self.assertEqual(len(index_entries), 1)\n        self.assertEqual(index_entries[0][0], 'first')\n        self.assertEqual(len(index_entries[0][1]), 1)\n        self.assertEqual(index_entries[0][1][0][0], ('main', self.builder.get_relative_uri('genindex', 'test.rst') + '#id1'))\n        self.assertEqual(index_entries[0][0], 'second')\n        self.assertEqual(len(index_entries[0][1]), 1)\n        self.assertEqual(index_entries[0][1][0][0], ('main', self.builder.get_relative_uri('genindex', 'test.rst') + '#id1'))\n        self.assertEqual(index_entries[0][0], 'third')\n        self.assertEqual(len(index_entries[0][1]), 1)\n        self.assertEqual(index_entries[0][1][0][0], ('main', self.builder.get_relative_uri('genindex', 'test.rst') + '#id1'))\n\n    def test_create_index_see(self):\n        self.env.get_domain('index').entries['test.rst'] = [\n            ('see', 'entry see target', 'id1', 'main', None)\n        ]\n        index_entries = IndexEntries(self.env).create_index(self.builder)\n        self.assertEqual(len(index_entries), 1)\n        self.assertEqual(index_entries[0][0], 'entry')\n        self.assertEqual(len(index_entries[0][1]), 1)\n        self.assertEqual(index_entries[0][1][0][0], ('see target', None))\n\n    def test_create_index_seealso(self):\n        self.env.get_domain('index').entries['test.rst'] = [\n            ('seealso', 'entry see also target', 'id1', 'main', None)\n        ]\n        index_entries = IndexEntries(self.env).create_index(self.builder)\n        self.assertEqual(len(index_entries), 1)\n        self.assertEqual(index_entries[0][0], 'entry')\n        self.assertEqual(len(index_entries[0][1]), 1)\n        self.assertEqual(index_entries[0][1][0][0], ('see also target', None))\n\n    def test_create_index_unknown_type(self):\n        self.env.get_domain('index').entries['test.rst'] = [\n            ('unknown', 'entry', 'id1', 'main', None)\n        ]\n        with self.assertLogs(logger, level='WARNING') as cm:\n            index_entries = IndexEntries(self.env).create_index(self.builder)\n        self.assertEqual(cm.output, [\n            f'WARNING:sphinx.environment.adapters.indexentries:unknown index entry type \\'unknown\\'',\n        ])\n\n    def test_create_index_value_error(self):\n        self.env.get_domain('index').entries['test.rst'] = [\n            ('single', 'entry with too many parts', 'id1', 'main', None)\n        ]\n        with self.assertRaises(ValueError):\n            index_entries = IndexEntries(self.env).create_index(self.builder)\n\n    def test_create_index_no_uri(self):\n        self.env.get_domain('index').entries['test.rst'] = [\n            ('single', 'entry', 'id1', 'main', None)\n        ]\n        with self.assertRaises(NoUri):\n            index_entries = IndexEntries(self.env).create_index(self.builder)\n\n    def test_create_index_group_entries(self):\n        self.env.get_domain('index').entries['test.rst'] = [\n            ('single', 'func() (in module foo)', 'id1', 'main', None),\n            ('single', 'func() (in module bar)', 'id2', 'main', None)\n        ]\n        index_entries = IndexEntries(self.env).create_index(self.builder, group_entries=True)\n        self.assertEqual(len(index_entries), 1)\n        self.assertEqual(index_entries[0][0], 'func()')\n        self.assertEqual(len(index_entries[0][1]), 2)\n        self.assertEqual(index_entries[0][1][0][0], ('main', self.builder.get_relative_uri('genindex', 'test.rst') + '#id1'))\n        self.assertEqual(index_entries[0][1][1][0], ('main', self.builder.get_relative_uri('genindex', 'test.rst') + '#id2'))\n\n    def test_create_index_sorting(self):\n        self.env.get_domain('index').entries['test.rst'] = [\n            ('single', 'Apple', 'id1', 'main', None),\n            ('single', 'Banana', 'id2', 'main', None),\n            ('single', 'apple', 'id3', 'main', None),\n            ('single', '_private', 'id4', 'main', None)\n        ]\n        index_entries = IndexEntries(self.env).create_index(self.builder)\n        self.assertEqual(index_entries[0][0], 'Apple')\n        self.assertEqual(index_entries[1][0], 'Banana')\n        self.assertEqual(index_entries[2][0], 'apple')\n        self.assertEqual(index_entries[3][0], '_private')\n\n"], "sample_129": ["\nimport unittest\nfrom sympy import (\n    pi, sin, asin, Integral, Matrix, Rational, log, symbols,\n    Eq, Function, exp, sqrt, I, oo, zoo, S,\n)\nfrom sympy.abc import x, y, mu, r, tau\nfrom sympy.printing.latex import (\n    latex, translate, greek_letters_set, tex_greek_dictionary,\n    LatexPrinter, other_symbols\n)\n\nclass TestLatexPrinter(unittest.TestCase):\n\n    def test_basic_printing(self):\n        self.assertEqual(latex(x), 'x')\n        self.assertEqual(latex(x + y), 'x + y')\n        self.assertEqual(latex(x*y), 'x y')\n        self.assertEqual(latex(x**2), 'x^{2}')\n        self.assertEqual(latex(2*x), '2 x')\n        self.assertEqual(latex(pi), '\\\\pi')\n        self.assertEqual(latex(Rational(1,2)), '\\\\frac{1}{2}')\n\n    def test_greek_letters(self):\n        for letter in greek_letters_set:\n            self.assertEqual(latex(symbols(letter)), '\\\\' + letter)\n\n    def test_translate(self):\n        self.assertEqual(translate('alphahatdotprime'), \"{\\\\dot{\\\\hat{\\\\alpha}}}'\")\n\n    def test_functions(self):\n        self.assertEqual(latex(sin(x)), '\\\\sin{x}')\n        self.assertEqual(latex(asin(x)), '\\\\operatorname{asin}{x}')\n        self.assertEqual(latex(log(x)), '\\\\log{x}')\n        self.assertEqual(latex(exp(x)), '\\\\exp{x}')\n        self.assertEqual(latex(sqrt(x)), '\\\\sqrt{x}')\n\n    def test_integrals(self):\n        self.assertEqual(latex(Integral(x, x)), '\\\\int x \\, dx')\n        self.assertEqual(latex(Integral(x, (x, 0, 1))), '\\\\int_{0}^{1} x \\, dx')\n\n    def test_matrices(self):\n        self.assertEqual(latex(Matrix([[1, 2], [3, 4]])), '\\\\begin{bmatrix}1 & 2\\\\\\\\3 & 4\\\\end{bmatrix}')\n\n    def test_latex_printer(self):\n        p = LatexPrinter()\n        self.assertEqual(p.doprint(x), 'x')\n        self.assertEqual(p.doprint(x + y), 'x + y')\n\n    def test_settings(self):\n        self.assertEqual(latex(x**Rational(7,2), fold_frac_powers=True), 'x^{7/2}')\n        self.assertEqual(latex(x**Rational(7,2), fold_frac_powers=False), 'x^{\\frac{7}{2}}')\n\n    def test_other_symbols(self):\n        self.assertEqual(latex(oo), '\\\\infty')\n        self.assertEqual(latex(zoo), '\\\\text{NaN}')\n        self.assertEqual(latex(I), 'i')\n\n    def test_complex_numbers(self):\n        self.assertEqual(latex(2 + 3*I), '2 + 3 i')\n        self.assertEqual(latex(2 - 3*I), '2 - 3 i')\n\n    def test_equation_mode(self):\n        self.assertEqual(latex(x + y, mode='equation'), '\\\\begin{equation}x + y\\\\end{equation}')\n\n    def test_itex_mode(self):\n        self.assertEqual(latex(x + y, mode='equation', itex=True), '$$x + y$$')\n\n    def test_symbol_names(self):\n        self.assertEqual(latex(x**2, symbol_names={x:'x_i'}), 'x_i^{2}')\n\n    def test_ln_notation(self):\n        self.assertEqual(latex(log(10), ln_notation=True), '\\\\ln{10}')\n\n    def test_mul_symbol(self):\n        self.assertEqual(latex(x*y, mul_symbol=\"times\"), 'x \\\\times y')\n\n    def test_inv_trig_style(self):\n        self.assertEqual(latex(asin(x), inv_trig_style=\"full\"), '\\\\arcsin{x}')\n        self.assertEqual(latex(asin(x), inv_trig_style=\"power\"), '\\\\sin^{-1}{x}')\n\n    def test_containers(self):\n        self.assertEqual(latex([2/x, y], mode='inline'), '$\\left [ 2 / x, \\quad y\\right ]$')\n\n    def test_function_folding(self):\n        self.assertEqual(latex((2*tau)**sin(Rational(7,2)), fold_func_brackets=True),\n                         '\\left(2 \\tau\\right)^{\\sin {\\frac{7}{2}}}')\n\n"], "sample_43": ["\nfrom django.contrib.admin.views.autocomplete import AutocompleteJsonView\nfrom django.test import SimpleTestCase\nfrom django.http import HttpRequest\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.models import Permission\nfrom django.db import models\nfrom django.core.exceptions import PermissionDenied\nfrom django.core.paginator import Paginator\nfrom unittest.mock import patch, MagicMock\n\nclass TestAutocompleteJsonView(SimpleTestCase):\n\n    def setUp(self):\n        self.request = HttpRequest()\n        self.request.user = User.objects.create_user('testuser', 'test@example.com', 'password')\n\n        class TestModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        self.TestModel = TestModel\n\n        class TestModelAdmin(object):\n            model = TestModel\n            search_fields = ['name']\n\n            def get_queryset(self, request):\n                return self.model.objects.all()\n\n            def get_search_results(self, request, queryset, search_term):\n                return queryset, False\n\n            def has_view_permission(self, request, obj=None):\n                return True\n\n            def to_field_allowed(self, request, to_field_name):\n                return True\n\n            def get_paginator(self, request, *args, **kwargs):\n                return Paginator(self.get_queryset(request), 20)\n\n        self.TestModelAdmin = TestModelAdmin\n\n    def test_get_with_valid_request(self):\n        view = AutocompleteJsonView()\n        view.admin_site = MagicMock()\n        view.admin_site._registry = {'TestModel': self.TestModelAdmin()}\n        view.request = self.request\n        view.request.GET = {'term': 'test', 'app_label': 'tests', 'model_name': 'TestModel', 'field_name': 'name'}\n        response = view.get(self.request)\n        self.assertEqual(response.status_code, 200)\n\n    def test_get_with_invalid_app_label(self):\n        view = AutocompleteJsonView()\n        view.admin_site = MagicMock()\n        view.admin_site._registry = {'TestModel': self.TestModelAdmin()}\n        view.request = self.request\n        view.request.GET = {'term': 'test', 'app_label': 'invalid', 'model_name': 'TestModel', 'field_name': 'name'}\n        with self.assertRaises(PermissionDenied):\n            view.get(self.request)\n\n    def test_get_with_invalid_model_name(self):\n        view = AutocompleteJsonView()\n        view.admin_site = MagicMock()\n        view.admin_site._registry = {'TestModel': self.TestModelAdmin()}\n        view.request = self.request\n        view.request.GET = {'term': 'test', 'app_label': 'tests', 'model_name': 'InvalidModel', 'field_name': 'name'}\n        with self.assertRaises(PermissionDenied):\n            view.get(self.request)\n\n    def test_get_with_invalid_field_name(self):\n        view = AutocompleteJsonView()\n        view.admin_site = MagicMock()\n        view.admin_site._registry = {'TestModel': self.TestModelAdmin()}\n        view.request = self.request\n        view.request.GET = {'term': 'test', 'app_label': 'tests', 'model_name': 'TestModel', 'field_name': 'invalid'}\n        with self.assertRaises(PermissionDenied):\n            view.get(self.request)\n\n    def test_get_with_no_search_fields(self):\n        view = AutocompleteJsonView()\n        view.admin_site = MagicMock()\n        class TestModelAdminNoSearch(object):\n            model = TestModel\n            def get_queryset(self, request):\n                return self.model.objects.all()\n            def get_search_results(self, request, queryset, search_term):\n                return queryset, False\n            def has_view_permission(self, request, obj=None):\n                return True\n            def to_field_allowed(self, request, to_field_name):\n                return True\n            def get_paginator(self, request, *args, **kwargs):\n                return Paginator(self.get_queryset(request), 20)\n        view.admin_site._registry = {'TestModel': TestModelAdminNoSearch()}\n        view.request = self.request\n        view.request.GET = {'term': 'test', 'app_label': 'tests', 'model_name': 'TestModel', 'field_name': 'name'}\n        with self.assertRaises(Http404):\n            view.get(self.request)\n\n    def test_has_perm_with_permission(self):\n        view = AutocompleteJsonView()\n        view.model_admin = self.TestModelAdmin()\n        self.assertTrue(view.has_perm(self.request))\n\n    def test_has_perm_without_permission(self):\n        view = AutocompleteJsonView()\n        view.model_admin = self.TestModelAdmin()\n        self.request.user.user_permissions.add(Permission.objects.get(codename='add_testmodel'))\n        self.assertFalse(view.has_perm(self.request))\n\n    def test_serialize_result(self):\n        view = AutocompleteJsonView()\n        obj = self.TestModel(name='Test Object')\n        result = view.serialize_result(obj, 'name')\n        self.assertEqual(result, {'id': 'Test Object', 'text': 'Test Object'})\n\n    @patch('django.contrib.admin.views.autocomplete.AutocompleteJsonView.get_queryset')\n    def test_get_queryset(self, mock_get_queryset):\n        view = AutocompleteJsonView()\n        view.model_admin = self.TestModelAdmin()\n        view.request = self.request\n        mock_get_queryset.return_value = self.TestModel.objects.all()\n        view.get_queryset()\n        mock_get_queryset.assert_called_once_with()\n\n    def test_process_request(self):\n        view = AutocompleteJsonView()\n        view.admin_site = MagicMock()\n        view.admin_site._registry = {'TestModel': self.TestModelAdmin()}\n        view.request = self.request\n        view.request.GET = {'term': 'test', 'app_label': 'tests', 'model_name': 'TestModel', 'field_name': 'name'}\n        term, model_admin, source_field, to_field_name = view.process_request(self.request)\n        self.assertEqual(term, 'test')\n        self.assertEqual(model_admin, self.TestModelAdmin())\n        self.assertEqual(source_field.name, 'name')\n        self.assertEqual(to_field_name, 'name')\n\n"], "sample_111": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics.cluster import adjusted_mutual_info_score\nfrom sklearn.metrics.cluster import adjusted_rand_score\nfrom sklearn.metrics.cluster import completeness_score\nfrom sklearn.metrics.cluster import fowlkes_mallows_score\nfrom sklearn.metrics.cluster import homogeneity_score\nfrom sklearn.metrics.cluster import mutual_info_score\nfrom sklearn.metrics.cluster import normalized_mutual_info_score\nfrom sklearn.metrics.cluster import v_measure_score\n\nclass TestSupervised(unittest.TestCase):\n\n    def test_adjusted_mutual_info_score(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        self.assertEqual(adjusted_mutual_info_score(labels_true, labels_pred), 1.0)\n        labels_pred = [1, 1, 0, 0]\n        self.assertEqual(adjusted_mutual_info_score(labels_true, labels_pred), 1.0)\n        labels_true = [0, 0, 0, 0]\n        labels_pred = [0, 1, 2, 3]\n        self.assertEqual(adjusted_mutual_info_score(labels_true, labels_pred), 0.0)\n\n    def test_adjusted_rand_score(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        self.assertEqual(adjusted_rand_score(labels_true, labels_pred), 1.0)\n        labels_pred = [1, 1, 0, 0]\n        self.assertEqual(adjusted_rand_score(labels_true, labels_pred), 1.0)\n        labels_true = [0, 0, 0, 0]\n        labels_pred = [0, 1, 2, 3]\n        self.assertEqual(adjusted_rand_score(labels_true, labels_pred), 0.0)\n\n    def test_completeness_score(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        self.assertEqual(completeness_score(labels_true, labels_pred), 1.0)\n        labels_pred = [1, 1, 0, 0]\n        self.assertEqual(completeness_score(labels_true, labels_pred), 1.0)\n        labels_true = [0, 0, 0, 0]\n        labels_pred = [0, 1, 2, 3]\n        self.assertEqual(completeness_score(labels_true, labels_pred), 0.0)\n\n    def test_fowlkes_mallows_score(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        self.assertEqual(fowlkes_mallows_score(labels_true, labels_pred), 1.0)\n        labels_pred = [1, 1, 0, 0]\n        self.assertEqual(fowlkes_mallows_score(labels_true, labels_pred), 1.0)\n        labels_true = [0, 0, 0, 0]\n        labels_pred = [0, 1, 2, 3]\n        self.assertEqual(fowlkes_mallows_score(labels_true, labels_pred), 0.0)\n\n    def test_homogeneity_score(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        self.assertEqual(homogeneity_score(labels_true, labels_pred), 1.0)\n        labels_pred = [1, 1, 0, 0]\n        self.assertEqual(homogeneity_score(labels_true, labels_pred), 1.0)\n        labels_true = [0, 0, 0, 0]\n        labels_pred = [0, 1, 2, 3]\n        self.assertEqual(homogeneity_score(labels_true, labels_pred), 0.0)\n\n    def test_mutual_info_score(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        self.assertEqual(mutual_info_score(labels_true, labels_pred), 2.0)\n        labels_pred = [1, 1, 0, 0]\n        self.assertEqual(mutual_info_score(labels_true, labels_pred), 2.0)\n        labels_true = [0, 0, 0, 0]\n        labels_pred = [0, 1, 2, 3]\n        self.assertEqual(mutual_info_score(labels_true, labels_pred), 0.0)\n\n    def test_normalized_mutual_info_score(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        self.assertEqual(normalized_mutual_info_score(labels_true, labels_pred), 1.0)\n        labels_pred = [1, 1, 0, 0]\n        self.assertEqual(normalized_mutual_info_score(labels_true, labels_pred), 1.0)\n        labels_true = [0, 0, 0, 0]\n        labels_pred = [0, 1, 2, 3]\n        self.assertEqual(normalized_mutual_info_score(labels_true, labels_pred), 0.0)\n\n    def test_v_measure_score(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        self.assertEqual(v_measure_score(labels_true, labels_pred), 1.0)\n        labels_pred = [1, 1, 0, 0]\n        self.assertEqual(v_measure_score(labels_true, labels_pred), 1.0)\n        labels_true = [0, 0, 0, 0]\n        labels_pred = [0, 1, 2, 3]\n        self.assertEqual(v_measure_score(labels_true, labels_pred), 0.0)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_97": ["\nimport unittest\nimport numpy as np\nfrom scipy import sparse as sp\nfrom sklearn.preprocessing.label import LabelBinarizer\nfrom sklearn.preprocessing.label import MultiLabelBinarizer\nfrom sklearn.preprocessing.label import LabelEncoder\nfrom sklearn.preprocessing.label import label_binarize\nfrom sklearn.preprocessing.label import _inverse_binarize_thresholding\nfrom sklearn.preprocessing.label import _inverse_binarize_multiclass\n\nclass TestLabelBinarizer(unittest.TestCase):\n\n    def test_fit_transform(self):\n        lb = LabelBinarizer()\n        y = [0, 1, 2, 0, 1, 2]\n        Y = lb.fit_transform(y)\n        self.assertEqual(Y.shape, (6, 3))\n        self.assertTrue(np.array_equal(lb.classes_, [0, 1, 2]))\n\n    def test_transform(self):\n        lb = LabelBinarizer()\n        lb.fit([0, 1, 2, 0, 1, 2])\n        y = [0, 1, 2]\n        Y = lb.transform(y)\n        self.assertEqual(Y.shape, (3, 3))\n        self.assertTrue(np.array_equal(lb.classes_, [0, 1, 2]))\n\n    def test_inverse_transform(self):\n        lb = LabelBinarizer()\n        lb.fit([0, 1, 2, 0, 1, 2])\n        Y = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n        y = lb.inverse_transform(Y)\n        self.assertTrue(np.array_equal(y, [0, 1, 2]))\n\n    def test_sparse_output(self):\n        lb = LabelBinarizer(sparse_output=True)\n        y = [0, 1, 2, 0, 1, 2]\n        Y = lb.fit_transform(y)\n        self.assertTrue(isinstance(Y, sp.csr_matrix))\n        self.assertEqual(Y.shape, (6, 3))\n\n    def test_neg_label(self):\n        lb = LabelBinarizer(neg_label=-1)\n        y = [0, 1, 2, 0, 1, 2]\n        Y = lb.fit_transform(y)\n        self.assertEqual(Y.shape, (6, 3))\n        self.assertTrue(np.any(Y == -1))\n\nclass TestMultiLabelBinarizer(unittest.TestCase):\n\n    def test_fit_transform(self):\n        mlb = MultiLabelBinarizer()\n        y = [[1, 2], [3], [1, 2, 3]]\n        Y = mlb.fit_transform(y)\n        self.assertEqual(Y.shape, (3, 3))\n        self.assertTrue(np.array_equal(mlb.classes_, [1, 2, 3]))\n\n    def test_transform(self):\n        mlb = MultiLabelBinarizer()\n        mlb.fit([[1, 2], [3], [1, 2, 3]])\n        y = [[1, 2], [3]]\n        Y = mlb.transform(y)\n        self.assertEqual(Y.shape, (2, 3))\n        self.assertTrue(np.array_equal(mlb.classes_, [1, 2, 3]))\n\n    def test_inverse_transform(self):\n        mlb = MultiLabelBinarizer()\n        mlb.fit([[1, 2], [3], [1, 2, 3]])\n        Y = np.array([[1, 1, 0], [0, 0, 1]])\n        y = mlb.inverse_transform(Y)\n        self.assertTrue(np.array_equal(y, [[1, 2], [3]]))\n\n    def test_sparse_output(self):\n        mlb = MultiLabelBinarizer(sparse_output=True)\n        y = [[1, 2], [3], [1, 2, 3]]\n        Y = mlb.fit_transform(y)\n        self.assertTrue(isinstance(Y, sp.csr_matrix))\n        self.assertEqual(Y.shape, (3, 3))\n\nclass TestLabelEncoder(unittest.TestCase):\n\n    def test_fit_transform(self):\n        le = LabelEncoder()\n        y = ['a', 'b', 'a', 'c']\n        y_transform = le.fit_transform(y)\n        self.assertTrue(np.array_equal(y_transform, [0, 1, 0, 2]))\n        self.assertTrue(np.array_equal(le.classes_, ['a', 'b', 'c']))\n\n    def test_transform(self):\n        le = LabelEncoder()\n        le.fit(['a', 'b', 'a', 'c'])\n        y = ['a', 'b']\n        y_transform = le.transform(y)\n        self.assertTrue(np.array_equal(y_transform, [0, 1]))\n\n    def test_inverse_transform(self):\n        le = LabelEncoder()\n        le.fit(['a', 'b', 'a', 'c'])\n        y_transform = np.array([0, 1, 0, 2])\n        y = le.inverse_transform(y_transform)\n        self.assertTrue(np.array_equal(y, ['a', 'b', 'a', 'c']))\n\nclass TestLabelBinarize(unittest.TestCase):\n\n    def test_label_binarize(self):\n        y = [1, 6]\n        classes = [1, 2, 4, 6]\n        Y = label_binarize(y, classes=classes)\n        self.assertEqual(Y.shape, (2, 4))\n\n    def test_label_binarize_multilabel(self):\n        y = [[1, 2], [3]]\n        classes = [1, 2, 3]\n        Y = label_binarize(y, classes=classes)\n        self.assertEqual(Y.shape, (2, 3))\n\n    def test_label_binarize_sparse(self):\n        y = [1, 6]\n        classes = [1, 2, 4, 6]\n        Y = label_binarize(y, classes=classes, sparse_output=True)\n        self.assertTrue(isinstance(Y, sp.csr_matrix))\n        self.assertEqual(Y.shape, (2, 4))\n\nclass TestInverseBinarize(unittest.TestCase):\n\n    def test_inverse_binarize_thresholding(self):\n        y = np.array([[0.8, 0.2, 0.1], [0.1, 0.9, 0.3]])\n        output_type = 'binary'\n        classes = ['a', 'b', 'c']\n        threshold = 0.5\n        y_inv = _inverse_binarize_thresholding(y, output_type, classes, threshold)\n        self.assertTrue(np.array_equal(y_inv, ['a', 'b']))\n\n    def test_inverse_binarize_multiclass(self):\n        y = np.array([[0.8, 0.2], [0.1, 0.9]])\n        classes = ['a', 'b']\n        y_inv = _inverse_binarize_multiclass(y, classes)\n        self.assertTrue(np.array_equal(y_inv, ['a', 'b']))\n\n"], "sample_47": ["\nfrom unittest.mock import patch, MagicMock\nfrom django.db import migrations\nfrom django.db.migrations.executor import MigrationExecutor, InvalidMigrationPlan\nfrom django.db.migrations.loader import MigrationLoader\nfrom django.db.migrations.recorder import MigrationRecorder\nfrom django.apps.registry import apps as global_apps\nfrom django.db.models import Model\nfrom django.test import SimpleTestCase\n\nclass TestMigrationExecutor(SimpleTestCase):\n\n    @patch('django.db.migrations.executor.MigrationExecutor.recorder')\n    def test_migration_plan_clean_start(self, mock_recorder):\n        mock_recorder.has_table.return_value = True\n        loader = MigrationLoader(None)\n        loader.graph = MagicMock()\n        loader.graph.root_nodes.return_value = [('app1', None)]\n        loader.graph.backwards_plan.return_value = [MagicMock()]\n        loader.graph.forwards_plan.return_value = [MagicMock()]\n        loader.applied_migrations = {}\n        executor = MigrationExecutor(None, loader=loader)\n        plan = executor.migration_plan([('app1', None)], clean_start=True)\n        self.assertEqual(plan, [(MagicMock(), True)])\n\n    @patch('django.db.migrations.executor.MigrationExecutor.recorder')\n    def test_migration_plan_unmigrate_all(self, mock_recorder):\n        mock_recorder.has_table.return_value = True\n        loader = MigrationLoader(None)\n        loader.graph = MagicMock()\n        loader.graph.root_nodes.return_value = [('app1', None)]\n        loader.graph.backwards_plan.return_value = [MagicMock()]\n        loader.applied_migrations = {'app1': '0001_initial'}\n        executor = MigrationExecutor(None, loader=loader)\n        plan = executor.migration_plan([('app1', None)], clean_start=False)\n        self.assertEqual(plan, [(MagicMock(), True)])\n\n    @patch('django.db.migrations.executor.MigrationExecutor.recorder')\n    def test_migration_plan_migrate_specific(self, mock_recorder):\n        mock_recorder.has_table.return_value = True\n        loader = MigrationLoader(None)\n        loader.graph = MagicMock()\n        loader.graph.root_nodes.return_value = [('app1', None)]\n        loader.graph.forwards_plan.return_value = [MagicMock()]\n        loader.applied_migrations = {}\n        executor = MigrationExecutor(None, loader=loader)\n        plan = executor.migration_plan([('app1', '0001_initial')], clean_start=False)\n        self.assertEqual(plan, [(MagicMock(), False)])\n\n    @patch('django.db.migrations.executor.MigrationExecutor.recorder')\n    def test_migration_plan_already_applied(self, mock_recorder):\n        mock_recorder.has_table.return_value = True\n        loader = MigrationLoader(None)\n        loader.graph = MagicMock()\n        loader.graph.root_nodes.return_value = [('app1', None)]\n        loader.graph.forwards_plan.return_value = [MagicMock()]\n        loader.applied_migrations = {'app1': '0001_initial'}\n        executor = MigrationExecutor(None, loader=loader)\n        plan = executor.migration_plan([('app1', '0001_initial')], clean_start=False)\n        self.assertEqual(plan, [])\n\n    @patch('django.db.migrations.executor.MigrationExecutor.recorder')\n    def test_migration_plan_replaced_migration(self, mock_recorder):\n        mock_recorder.has_table.return_value = True\n        loader = MigrationLoader(None)\n        loader.graph = MagicMock()\n        loader.graph.root_nodes.return_value = [('app1', None)]\n        loader.graph.forwards_plan.return_value = [MagicMock()]\n        loader.replace_migrations = True\n        loader.graph.node_map = {'app1': '0001_initial': MagicMock()}\n        loader.applied_migrations = {'app1': '0001_initial'}\n        executor = MigrationExecutor(None, loader=loader)\n        plan = executor.migration_plan([('app1', '0001_initial')], clean_start=False)\n        self.assertEqual(plan, [])\n\n    def test_create_project_state(self):\n        loader = MigrationLoader(None)\n        loader.unmigrated_apps = {'app1': MagicMock()}\n        executor = MigrationExecutor(None, loader=loader)\n        state = executor._create_project_state()\n        self.assertEqual(state.apps['app1'], MagicMock())\n\n    @patch('django.db.migrations.executor.MigrationExecutor.recorder')\n    def test_migrate_empty_plan(self, mock_recorder):\n        mock_recorder.has_table.return_value = True\n        loader = MigrationLoader(None)\n        loader.graph = MagicMock()\n        loader.graph.leaf_nodes.return_value = [('app1', '0001_initial')]\n        executor = MigrationExecutor(None, loader=loader)\n        state = executor.migrate([], plan=[], fake=False)\n        self.assertEqual(state.apps['app1'], MagicMock())\n\n    @patch('django.db.migrations.executor.MigrationExecutor.recorder')\n    def test_migrate_forwards(self, mock_recorder):\n        mock_recorder.has_table.return_value = True\n        loader = MigrationLoader(None)\n        loader.graph = MagicMock()\n        loader.graph.leaf_nodes.return_value = [('app1', '0001_initial')]\n        loader.applied_migrations = {}\n        executor = MigrationExecutor(None, loader=loader)\n        state = executor.migrate([('app1', '0001_initial')], fake=False)\n        self.assertEqual(state.apps['app1'], MagicMock())\n\n    @patch('django.db.migrations.executor.MigrationExecutor.recorder')\n    def test_migrate_backwards(self, mock_recorder):\n        mock_recorder.has_table.return_value = True\n        loader = MigrationLoader(None)\n        loader.graph = MagicMock()\n        loader.graph.leaf_nodes.return_value = [('app1', '0001_initial')]\n        loader.applied_migrations = {'app1': '0001_initial'}\n        executor = MigrationExecutor(None, loader=loader)\n        state = executor.migrate([('app1', '0001_initial')], fake=False)\n        self.assertEqual(state.apps['app1'], MagicMock())\n\n    @patch('django.db.migrations.executor.MigrationExecutor.recorder')\n    def test_migrate_mixed_plan(self, mock_recorder):\n        mock_recorder.has_table.return_value = True\n        loader = MigrationLoader(None)\n        loader.graph = MagicMock()\n        loader.graph.leaf_nodes.return_value = [('app1', '0001_initial')]\n        executor = MigrationExecutor(None, loader=loader)\n        with self.assertRaises(InvalidMigrationPlan):\n            executor.migrate([('app1', '0001_initial')], plan=[(MagicMock(), True), (MagicMock(), False)])\n\n    def test_apply_migration(self):\n        state = MagicMock()\n        migration = MagicMock()\n        executor = MigrationExecutor(None)\n        executor.apply_migration(state, migration)\n\n    def test_record_migration(self):\n        migration = MagicMock()\n        executor = MigrationExecutor(None)\n        executor.record_migration(migration)\n\n    def test_unapply_migration(self):\n        state = MagicMock()\n        migration = MagicMock()\n        executor = MigrationExecutor(None)\n        executor.unapply_migration(state, migration)\n\n    def test_check_replacements(self):\n        loader = MigrationLoader(None)\n        loader.replacements = {}\n        executor = MigrationExecutor(None, loader=loader)\n        executor.check_replacements()\n\n    def test_detect_soft_applied(self):\n        class MyModel(Model):\n            pass\n        state = MagicMock()\n        migration = MagicMock()\n        executor = MigrationExecutor(None)\n        executor.detect_soft_applied(state, migration)\n\n"], "sample_128": ["\nfrom sympy.polys.polyoptions import ( Options, Expand, Gens, Wrt, Sort, Order, Field, Greedy, Domain, Split, Gaussian, Extension, Modulus, Symmetric, Strict, Auto, Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\nfrom sympy.polys.orderings import lex\nfrom sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\nfrom sympy.polys.polyerrors import OptionError, GeneratorsError\n\ndef test_Options_init():\n    Options((x, y, z), {'domain': 'ZZ'})\n    Options((x, y, z), {'domain': 'ZZ', 'gens': (x, y)})\n    Options((x, y, z), {'domain': 'ZZ', 'gens': (x, y)}, strict=True)\n\ndef test_Options_clone():\n    opt = Options((x, y, z), {'domain': 'ZZ'})\n    opt.clone({'domain': 'QQ'})\n\ndef test_Options_args():\n    opt = Options((x, y, z), {'domain': 'ZZ'})\n    opt.args\n\ndef test_Options_options():\n    opt = Options((x, y, z), {'domain': 'ZZ'})\n    opt.options\n\ndef test_Options_flags():\n    opt = Options((x, y, z), {'domain': 'ZZ', 'auto': True})\n    opt.flags\n\ndef test_Expand():\n    Expand.default()\n    Expand.preprocess(True)\n    Expand.preprocess(False)\n\ndef test_Gens():\n    Gens.default()\n    Gens.preprocess((x, y, z))\n    Gens.preprocess(x)\n    Gens.preprocess([x, y, z])\n    Gens.preprocess((x, x))\n\ndef test_Wrt():\n    Wrt.preprocess(x)\n    Wrt.preprocess('x')\n    Wrt.preprocess('x, y')\n    Wrt.preprocess(['x', 'y'])\n\ndef test_Sort():\n    Sort.default()\n    Sort.preprocess('x>y>z')\n    Sort.preprocess(['x', 'y', 'z'])\n\ndef test_Order():\n    Order.default()\n    Order.preprocess(lex)\n\ndef test_Field():\n    Field.default()\n    Field.preprocess(True)\n    Field.preprocess(False)\n\ndef test_Greedy():\n    Greedy.default()\n    Greedy.preprocess(True)\n    Greedy.preprocess(False)\n\ndef test_Domain():\n    Domain.preprocess('ZZ')\n    Domain.preprocess('QQ')\n    Domain.preprocess('EX')\n    Domain.preprocess('R')\n    Domain.preprocess('RR_10')\n    Domain.preprocess('C')\n    Domain.preprocess('CC_53')\n    Domain.preprocess('FF(7)')\n    Domain.preprocess('Z[x,y]')\n    Domain.preprocess('QQ(x,y)')\n    Domain.preprocess('QQ<sqrt(2)>')\n\ndef test_Split():\n    Split.default()\n    Split.preprocess(True)\n    Split.preprocess(False)\n\ndef test_Gaussian():\n    Gaussian.default()\n    Gaussian.preprocess(True)\n    Gaussian.preprocess(False)\n\ndef test_Extension():\n    Extension.default()\n    Extension.preprocess(S.ImaginaryUnit)\n    Extension.preprocess([S.ImaginaryUnit, S.Pi])\n    Extension.preprocess(1)\n\ndef test_Modulus():\n    Modulus.default()\n    Modulus.preprocess(7)\n\ndef test_Symmetric():\n    Symmetric.default()\n    Symmetric.preprocess(True)\n    Symmetric.preprocess(False)\n\ndef test_Strict():\n    Strict.default()\n    Strict.preprocess(True)\n    Strict.preprocess(False)\n\ndef test_Auto():\n    Auto.default()\n    Auto.preprocess(True)\n    Auto.preprocess(False)\n\ndef test_Frac():\n    Frac.default()\n    Frac.preprocess(True)\n    Frac.preprocess(False)\n\ndef test_Formal():\n    Formal.default()\n    Formal.preprocess(True)\n    Formal.preprocess(False)\n\ndef test_Polys():\n    Polys.default()\n    Polys.preprocess(True)\n    Polys.preprocess(False)\n\ndef test_Include():\n    Include.default()\n    Include.preprocess(True)\n    Include.preprocess(False)\n\ndef test_All():\n    All.default()\n    All.preprocess(True)\n    All.preprocess(False)\n\ndef test_Gen():\n    Gen.default()\n    Gen.preprocess(x)\n    Gen.preprocess(0)\n\ndef test_Series():\n    Series.default()\n    Series.preprocess(True)\n    Series.preprocess(False)\n\ndef test_Symbols():\n    Symbols.default()\n    Symbols.preprocess([x, y, z])\n\ndef test_Method():\n    Method.preprocess('buchberger')\n\ndef test_build_options():\n    build_options((x, y, z), {'domain': 'ZZ'})\n    build_options((x, y, z), {'opt': Options((x, y, z), {'domain': 'ZZ'})})\n\ndef test_allowed_flags():\n    allowed_flags({'domain': ZZ}, [])\n    allowed_flags({'domain': ZZ, 'frac': True}, ['frac'])\n\ndef test_set_defaults():\n    set_defaults({'domain': ZZ}, frac=True)\n\n"], "sample_131": ["\nfrom sympy import mathematica_code as mcode, symbols, sin, cos, tan, exp, log, sqrt, pi, oo, zoo, I, Eq, Derivative, Integral, Sum, factorial, gamma, erf, Piecewise, Heaviside\nfrom sympy.abc import x, y, z\n\ndef test_basic_math():\n    assert mcode(x + y) == 'x + y'\n    assert mcode(x - y) == 'x - y'\n    assert mcode(x * y) == 'x*y'\n    assert mcode(x / y) == 'x/y'\n    assert mcode(x**y) == 'x^y'\n\ndef test_functions():\n    assert mcode(sin(x)) == 'Sin[x]'\n    assert mcode(cos(x)) == 'Cos[x]'\n    assert mcode(tan(x)) == 'Tan[x]'\n    assert mcode(exp(x)) == 'Exp[x]'\n    assert mcode(log(x)) == 'Log[x]'\n    assert mcode(sqrt(x)) == 'Sqrt[x]'\n\ndef test_constants():\n    assert mcode(pi) == 'Pi'\n    assert mcode(oo) == 'Infinity'\n    assert mcode(-oo) == '-Infinity'\n    assert mcode(zoo) == 'ComplexInfinity'\n    assert mcode(I) == 'I'\n\ndef test_equality():\n    assert mcode(Eq(x, y)) == 'x == y'\n\ndef test_calculus():\n    assert mcode(Derivative(sin(x), x)) == 'Hold[D[Sin[x], x]]'\n    assert mcode(Integral(x**2, x)) == 'Hold[Integrate[x^2, x]]'\n    assert mcode(Sum(x**n, (n, 1, 10))) == 'Hold[Sum[x^n, {n, 1, 10}]]'\n\ndef test_special_functions():\n    assert mcode(factorial(x)) == 'Factorial[x]'\n    assert mcode(gamma(x)) == 'Gamma[x]'\n    assert mcode(erf(x)) == 'Erf[x]'\n\ndef test_piecewise():\n    assert mcode(Piecewise((x, x < 0), (x**2, True))) == 'Piecewise[{{x, x < 0}, {x^2, True}}]'\n\ndef test_heaviside():\n    assert mcode(Heaviside(x)) == 'HeavisideTheta[x]'\n\ndef test_complex_expression():\n    expr = (x + sin(y)) / (sqrt(x**2 + y**2) + exp(z))\n    assert mcode(expr) == '(x + Sin[y])/(Sqrt[x^2 + y^2] + Exp[z])'\n\n"], "sample_29": ["\nfrom django.db.models import (\n    AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count, DateField,\n    DateTimeField, DecimalField, DurationField, Exists, Expression, ExpressionList,\n    ExpressionWrapper, F, FloatField, Func, IntegerField, Max, Min, Model,\n    OrderBy, OuterRef, Q, StdDev, Subquery, Sum, TimeField, UUIDField, Value,\n    Variance, When,\n)\nfrom django.db.models.expressions import (\n    Col, Combinable, CombinedExpression, RawSQL, Ref,\n)\nfrom django.db.models.sql.datastructures import Join\nfrom django.db.models.sql.query import (\n    Query,\n    get_order_dir,\n    add_to_dict,\n    is_reverse_o2o,\n    JoinPromoter,\n)\nfrom django.db.models.sql.compiler import SQLCompiler\n\nclass TestQuery:\n    def test_get_order_dir(self):\n        self.assertEqual(get_order_dir('foo'), ('foo', 'ASC'))\n        self.assertEqual(get_order_dir('-foo'), ('foo', 'DESC'))\n        self.assertEqual(get_order_dir('+foo'), ('foo', 'ASC'))\n\n    def test_add_to_dict(self):\n        data = {}\n        add_to_dict(data, 'foo', 'bar')\n        self.assertEqual(data, {'foo': {'bar'}})\n        add_to_dict(data, 'foo', 'baz')\n        self.assertEqual(data, {'foo': {'bar', 'baz'}})\n\n    def test_is_reverse_o2o(self):\n        class Foo(Model):\n            pass\n        class Bar(Model):\n            foo = OneToOneField(Foo, related_name='bar', on_delete=CASCADE)\n        self.assertTrue(is_reverse_o2o(Bar._meta.get_field('foo')))\n\n    def test_join_promoter(self):\n        jp = JoinPromoter(AND, 2, False)\n        jp.add_votes(['foo', 'bar'])\n        jp.add_votes(['foo'])\n        self.assertEqual(jp.votes, {'foo': 2, 'bar': 1})\n\nclass TestSQLCompiler:\n    def test_compile(self):\n        compiler = SQLCompiler(None, None)\n        compiler.quote_name = lambda x: x\n        compiler.compile(Query(model=Model))\n\nclass TestQueryMethods:\n    def test_set_select(self):\n        q = Query(model=Model)\n        q.set_select([])\n        self.assertEqual(q.select, ())\n\n    def test_add_fields(self):\n        q = Query(model=Model)\n        q.add_fields(['foo', 'bar'])\n        self.assertEqual(q.select, ('foo', 'bar'))\n\n    def test_add_ordering(self):\n        q = Query(model=Model)\n        q.add_ordering('foo')\n        self.assertEqual(q.order_by, ('foo',))\n\n    def test_clear_ordering(self):\n        q = Query(model=Model)\n        q.add_ordering('foo')\n        q.clear_ordering(False)\n        self.assertEqual(q.order_by, ())\n\n    def test_set_group_by(self):\n        q = Query(model=Model)\n        q.set_group_by()\n        self.assertEqual(q.group_by, ())\n\n    def test_add_select_related(self):\n        q = Query(model=Model)\n        q.add_select_related(['foo__bar'])\n        self.assertEqual(q.select_related, {'foo': {'bar'}})\n\n    def test_add_extra(self):\n        q = Query(model=Model)\n        q.add_extra({'foo': 'bar'}, [], [], [], [])\n        self.assertEqual(q.extra, {'foo': ('bar', [])})\n\n    def test_clear_deferred_loading(self):\n        q = Query(model=Model)\n        q.add_deferred_loading(['foo'])\n        q.clear_deferred_loading()\n        self.assertEqual(q.deferred_loading, (frozenset(), True))\n\n    def test_add_deferred_loading(self):\n        q = Query(model=Model)\n        q.add_deferred_loading(['foo'])\n        self.assertEqual(q.deferred_loading, (frozenset({'foo'}), True))\n\n    def test_add_immediate_loading(self):\n        q = Query(model=Model)\n        q.add_immediate_loading(['foo'])\n        self.assertEqual(q.deferred_loading, (frozenset({'foo'}), False))\n\n    def test_get_loaded_field_names(self):\n        q = Query(model=Model)\n        q.add_deferred_loading(['foo'])\n        self.assertEqual(q.get_loaded_field_names(), {'model': {'foo'}})\n\n    def test_set_annotation_mask(self):\n        q = Query(model=Model)\n        q.set_annotation_mask(['foo'])\n        self.assertEqual(q.annotation_select_mask, {'foo'})\n\n    def test_append_annotation_mask(self):\n        q = Query(model=Model)\n        q.set_annotation_mask(['foo'])\n        q.append_annotation_mask(['bar'])\n        self.assertEqual(q.annotation_select_mask, {'foo', 'bar'})\n\n    def test_set_extra_mask(self):\n        q = Query(model=Model)\n        q.set_extra_mask(['foo'])\n        self.assertEqual(q.extra_select_mask, {'foo'})\n\n    def test_set_values(self):\n        q = Query(model=Model)\n        q.set_values(['foo', 'bar'])\n        self.assertEqual(q.select, ('foo', 'bar'))\n\n    def test_annotation_select(self):\n        q = Query(model=Model)\n        q.annotations = {'foo': 'bar'}\n        q.set_annotation_mask(['foo'])\n        self.assertEqual(q.annotation_select, {'foo': 'bar'})\n\n    def test_extra_select(self):\n        q = Query(model=Model)\n        q.extra = {'foo': 'bar'}\n        q.set_extra_mask(['foo'])\n        self.assertEqual(q.extra_select, {'foo': 'bar'})\n\n    def test_trim_start(self):\n        q = Query(model=Model)\n        q.names_to_path = {'foo': [Join(None, None, None)]}\n        q.alias_map = {'foo': None}\n        q.trim_start(q.names_to_path)\n\n"], "sample_64": ["\nfrom django.contrib.admin.templatetags.admin_modify import (\n    prepopulated_fields_js,\n    submit_row,\n    change_form_object_tools_tag,\n    cell_count,\n)\nfrom django.template import Context\nfrom django.forms import ModelForm, CharField, IntegerField\nfrom django.contrib.admin.widgets import AdminDateWidget\nfrom django.test import SimpleTestCase\n\nclass MockInlineAdminForm:\n    def __init__(self, formset, fieldset):\n        self.formset = formset\n        self.original = None\n        self.prepopulated_fields = []\n        self.fieldsets = fieldset\n\nclass MockInlineAdminFormset:\n    def __init__(self, can_delete):\n        self.can_delete = can_delete\n        self.forms = []\n\nclass MockModelForm:\n    def __init__(self, prepopulated_fields):\n        self.prepopulated_fields = prepopulated_fields\n\nclass TestAdminModify(SimpleTestCase):\n\n    def test_prepopulated_fields_js(self):\n        context = Context({\n            'adminform': MockModelForm([{'field': CharField(), 'dependencies': []}]),\n            'inline_admin_formsets': [MockInlineAdminFormset(True), MockInlineAdminFormset(False)],\n        })\n        context = prepopulated_fields_js(context)\n        self.assertIn('prepopulated_fields_json', context)\n\n    def test_submit_row(self):\n        context = Context({\n            'add': True,\n            'change': False,\n            'is_popup': False,\n            'save_as': False,\n            'has_add_permission': True,\n            'has_change_permission': False,\n            'has_view_permission': True,\n            'has_editable_inline_admin_formsets': False,\n            'show_save': True,\n            'show_save_and_add_another': True,\n            'show_save_and_continue': True,\n            'show_delete': True,\n        })\n        context = submit_row(context)\n        self.assertTrue(context['can_change'])\n        self.assertFalse(context['show_delete_link'])\n        self.assertFalse(context['show_save_as_new'])\n        self.assertTrue(context['show_save_and_add_another'])\n        self.assertTrue(context['show_save_and_continue'])\n        self.assertTrue(context['show_save'])\n        self.assertFalse(context['show_close'])\n\n    def test_cell_count(self):\n        fieldset = [\n            [CharField()],\n            [IntegerField()],\n        ]\n        inline_form = MockInlineAdminForm(MockInlineAdminFormset(True), fieldset)\n        count = cell_count(inline_form)\n        self.assertEqual(count, 4)\n\n"], "sample_73": ["\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.offsetbox import ( AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, HPacker, OffsetBox, OffsetImage, PaddedBox, TextArea, VPacker, _get_packed_offsets)\nfrom matplotlib.patches import Rectangle\n\ndef test_AnchoredOffsetbox():\n    fig, ax = plt.subplots()\n    box = AnchoredOffsetbox(\n        loc='upper left',\n        child=TextArea(\"Test\"),\n        pad=0.2,\n        borderpad=0.5,\n        frameon=True,\n    )\n    ax.add_artist(box)\n    plt.draw()\n\ndef test_AnnotationBbox():\n    fig, ax = plt.subplots()\n    offsetbox = AnchoredOffsetbox(\n        loc='upper left',\n        child=TextArea(\"Test\"),\n        pad=0.2,\n        borderpad=0.5,\n        frameon=True,\n    )\n    ab = AnnotationBbox(\n        offsetbox,\n        (0.5, 0.5),\n        xycoords='data',\n        boxcoords=\"offset points\",\n        arrowprops=dict(arrowstyle=\"->\"),\n    )\n    ax.add_artist(ab)\n    plt.draw()\n\ndef test_AnchoredText():\n    fig, ax = plt.subplots()\n    at = AnchoredText(\"Test\", loc='upper left', frameon=True)\n    ax.add_artist(at)\n    plt.draw()\n\ndef test_DrawingArea():\n    fig, ax = plt.subplots()\n    da = DrawingArea(20, 20)\n    da.draw(\n        lambda renderer: renderer.draw_rectangle(\n            (0, 0), (20, 20), fill=True, color=\"red\"\n        )\n    )\n    ax.add_artist(da)\n    plt.draw()\n\ndef test_HPacker():\n    fig, ax = plt.subplots()\n    packer = HPacker(\n        children=[\n            TextArea(\"Test 1\"),\n            TextArea(\"Test 2\"),\n        ],\n        align=\"center\",\n        pad=0.2,\n        sep=5,\n    )\n    box = OffsetBox(packer, width=100, height=50)\n    ax.add_artist(box)\n    plt.draw()\n\ndef test_OffsetBox():\n    fig, ax = plt.subplots()\n    box = OffsetBox(\n        TextArea(\"Test\"),\n        width=100,\n        height=50,\n        xdescent=5,\n        ydescent=5,\n    )\n    ax.add_artist(box)\n    plt.draw()\n\ndef test_OffsetImage():\n    fig, ax = plt.subplots()\n    arr = np.random.rand(10, 10)\n    oi = OffsetImage(arr, zoom=2)\n    box = OffsetBox(oi, width=50, height=50)\n    ax.add_artist(box)\n    plt.draw()\n\ndef test_PaddedBox():\n    fig, ax = plt.subplots()\n    box = PaddedBox(\n        TextArea(\"Test\"),\n        pad=0.2,\n    )\n    ax.add_artist(box)\n    plt.draw()\n\ndef test_TextArea():\n    fig, ax = plt.subplots()\n    ta = TextArea(\"Test\")\n    ax.add_artist(ta)\n    plt.draw()\n\ndef test_VPacker():\n    fig, ax = plt.subplots()\n    packer = VPacker(\n        children=[\n            TextArea(\"Test 1\"),\n            TextArea(\"Test 2\"),\n        ],\n        align=\"center\",\n        pad=0.2,\n        sep=5,\n    )\n    box = OffsetBox(packer, width=100, height=50)\n    ax.add_artist(box)\n    plt.draw()\n\ndef test__get_packed_offsets():\n    fig, ax = plt.subplots()\n    boxes = [\n        Rectangle((0, 0), 1, 1),\n        Rectangle((0, 0), 1, 1),\n    ]\n    offsets = _get_packed_offsets(boxes, 0.2, 0.2)\n    assert len(offsets) == 2\n\n"], "sample_10": ["\nfrom django.db import models\nfrom django.db.models import F, Q, Value\nfrom django.db.models.functions import Concat\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom .lookups import (\n    BuiltinLookup,\n    Contains,\n    Exact,\n    FieldGetDbPrepValueIterableMixin,\n    FieldGetDbPrepValueMixin,\n    GreaterThan,\n    GreaterThanOrEqual,\n    In,\n    IntegerFieldFloatRounding,\n    IntegerGreaterThanOrEqual,\n    IntegerLessThan,\n    IsNull,\n    LessThan,\n    LessThanOrEqual,\n    Lookup,\n    PatternLookup,\n    Range,\n    Regex,\n    Transform,\n    YearExact,\n    YearGt,\n    YearGte,\n    YearLte,\n    YearLt,\n)\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\nclass Article(models.Model):\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n    headline = models.CharField(max_length=200)\n    pub_date = models.DateField()\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=50)\n\nclass Game(models.Model):\n    name = models.CharField(max_length=100)\n    release_year = models.IntegerField()\n\nclass Player(models.Model):\n    name = models.CharField(max_length=100)\n    score = models.IntegerField()\n\nclass Season(models.Model):\n    year = models.IntegerField()\n\nclass IsNullWithNoneAsRHS(models.Model):\n    field = models.CharField(max_length=100)\n\nclass LookupTests(TestCase):\n\n    def test_exact(self):\n        a1 = Author.objects.create(name='Author A')\n        a2 = Author.objects.create(name='Author B')\n        Article.objects.create(author=a1, headline='Article 1')\n        Article.objects.create(author=a2, headline='Article 2')\n        self.assertQuerysetEqual(\n            Article.objects.filter(author__name__exact='Author A'),\n            ['<Article: Article 1>']\n        )\n\n    def test_iexact(self):\n        a1 = Author.objects.create(name='Author A')\n        a2 = Author.objects.create(name='author b')\n        Article.objects.create(author=a1, headline='Article 1')\n        Article.objects.create(author=a2, headline='Article 2')\n        self.assertQuerysetEqual(\n            Article.objects.filter(author__name__iexact='author a'),\n            ['<Article: Article 1>', '<Article: Article 2>']\n        )\n\n    def test_gt(self):\n        g1 = Game.objects.create(name='Game 1', release_year=2000)\n        g2 = Game.objects.create(name='Game 2', release_year=2005)\n        self.assertQuerysetEqual(\n            Game.objects.filter(release_year__gt=2002),\n            ['<Game: Game 2>']\n        )\n\n    def test_gte(self):\n        g1 = Game.objects.create(name='Game 1', release_year=2000)\n        g2 = Game.objects.create(name='Game 2', release_year=2005)\n        self.assertQuerysetEqual(\n            Game.objects.filter(release_year__gte=2005),\n            ['<Game: Game 2>']\n        )\n\n    def test_lt(self):\n        g1 = Game.objects.create(name='Game 1', release_year=2000)\n        g2 = Game.objects.create(name='Game 2', release_year=2005)\n        self.assertQuerysetEqual(\n            Game.objects.filter(release_year__lt=2003),\n            ['<Game: Game 1>']\n        )\n\n    def test_lte(self):\n        g1 = Game.objects.create(name='Game 1', release_year=2000)\n        g2 = Game.objects.create(name='Game 2', release_year=2005)\n        self.assertQuerysetEqual(\n            Game.objects.filter(release_year__lte=2000),\n            ['<Game: Game 1>']\n        )\n\n    def test_in(self):\n        a1 = Author.objects.create(name='Author A')\n        a2 = Author.objects.create(name='Author B')\n        a3 = Author.objects.create(name='Author C')\n        Article.objects.create(author=a1, headline='Article 1')\n        Article.objects.create(author=a2, headline='Article 2')\n        Article.objects.create(author=a3, headline='Article 3')\n        self.assertQuerysetEqual(\n            Article.objects.filter(author__name__in=['Author A', 'Author C']),\n            ['<Article: Article 1>', '<Article: Article 3>']\n        )\n\n    def test_integer_greater_than_or_equal(self):\n        p1 = Player.objects.create(name='Player 1', score=10)\n        p2 = Player.objects.create(name='Player 2', score=15)\n        self.assertQuerysetEqual(\n            Player.objects.filter(score__gte=15),\n            ['<Player: Player 2>']\n        )\n\n    def test_integer_less_than(self):\n        p1 = Player.objects.create(name='Player 1', score=10)\n        p2 = Player.objects.create(name='Player 2', score=15)\n        self.assertQuerysetEqual(\n            Player.objects.filter(score__lt=12),\n            ['<Player: Player 1>']\n        )\n\n    def test_isnull(self):\n        n1 = IsNullWithNoneAsRHS.objects.create(field='value')\n        n2 = IsNullWithNoneAsRHS.objects.create(field=None)\n        self.assertQuerysetEqual(\n            IsNullWithNoneAsRHS.objects.filter(field__isnull=True),\n            ['<IsNullWithNoneAsRHS: IsNullWithNoneAsRHS object (2)>']\n        )\n\n    def test_contains(self):\n        a1 = Author.objects.create(name='Author A')\n        a2 = Author.objects.create(name='Author B')\n        Article.objects.create(author=a1, headline='This is an article')\n        Article.objects.create(author=a2, headline='Another article')\n        self.assertQuerysetEqual(\n            Article.objects.filter(headline__contains='article'),\n            ['<Article: This is an article>', '<Article: Another article>']\n        )\n\n    def test_icontains(self):\n        a1 = Author.objects.create(name='Author A')\n        a2 = Author.objects.create(name='Author B')\n        Article.objects.create(author=a1, headline='This is an article')\n        Article.objects.create(author=a2, headline='another article')\n        self.assertQuerysetEqual(\n            Article.objects.filter(headline__icontains='article'),\n            ['<Article: This is an article>', '<Article: another article>']\n        )\n\n    def test_startswith(self):\n        a1 = Author.objects.create(name='Author A')\n        a2 = Author.objects.create(name='Author B')\n        Article.objects.create(author=a1, headline='This is an article')\n        Article.objects.create(author=a2, headline='Another article')\n        self.assertQuerysetEqual(\n            Article.objects.filter(headline__startswith='This'),\n            ['<Article: This is an article>']\n        )\n\n    def test_istartswith(self):\n        a1 = Author.objects.create(name='Author A')\n        a2 = Author.objects.create(name='Author B')\n        Article.objects.create(author=a1, headline='This is an article')\n        Article.objects.create(author=a2, headline='another article')\n        self.assertQuerysetEqual(\n            Article.objects.filter(headline__istartswith='this'),\n            ['<Article: This is an article>']\n        )\n\n    def test_endswith(self):\n        a1 = Author.objects.create(name='Author A')\n        a2 = Author.objects.create(name='Author B')\n        Article.objects.create(author=a1, headline='This is an article')\n        Article.objects.create(author=a2, headline='Another article')\n        self.assertQuerysetEqual(\n            Article.objects.filter(headline__endswith='article'),\n            ['<Article: This is an article>', '<Article: Another article>']\n        )\n\n    def test_iendswith(self):\n        a1 = Author.objects.create(name='Author A')\n        a2 = Author.objects.create(name='Author B')\n        Article.objects.create(author=a1, headline='This is an article')\n        Article.objects.create(author=a2, headline='Another article')\n        self.assertQuerysetEqual(\n            Article.objects.filter(headline__iendswith='article'),\n            ['<Article: This is an article>', '<Article: Another article>']\n        )\n\n    def test_range(self):\n        p1 = Player.objects.create(name='Player 1', score=10)\n        p2 = Player.objects.create(name='Player 2', score=15)\n        p3 = Player.objects.create(name='Player 3', score=20)\n        self.assertQuerysetEqual(\n            Player.objects.filter(score__range=(12, 18)),\n            ['<Player: Player 2>']\n        )\n\n    def test_regex(self):\n        a1 = Author.objects.create(name='Author A')\n        a2 = Author.objects.create(name='Author B')\n        Article.objects.create(author=a1, headline='This is an article')\n        Article.objects.create(author=a2, headline='Another article')\n        self.assertQuerysetEqual(\n            Article.objects.filter(headline__regex=r'^This.*'),\n            ['<Article: This is an article>']\n        )\n\n    def test_iregex(self):\n        a1 = Author.objects.create(name='Author A')\n        a2 = Author.objects.create(name='Author B')\n        Article.objects.create(author=a1, headline='This is an article')\n        Article.objects.create(author=a2, headline='another article')\n        self.assertQuerysetEqual(\n            Article.objects.filter(headline__iregex=r'^this.*'),\n            ['<Article: This is an article>']\n        )\n\n    def test_year_exact(self):\n        s1 = Season.objects.create(year=2020)\n        s2 = Season.objects.create(year=2021)\n        self.assertQuerysetEqual(\n            Season.objects.filter(year__exact=2020),\n            ['<Season: Season object (1)>']\n        )\n\n    def test_year_gt(self):\n        s1 = Season.objects.create(year=2020)\n        s2 = Season.objects.create(year=2021)\n        self.assertQuerysetEqual(\n            Season.objects.filter(year__gt=2020),\n            ['<Season: Season object (2)>']\n        )\n\n    def test_year_gte(self):\n        s1 = Season.objects.create(year=2020)\n        s2 = Season.objects.create(year=2021)\n        self.assertQuerysetEqual(\n            Season.objects.filter(year__gte=2021),\n            ['<Season: Season object (2)>']\n        )\n\n    def test_year_lt(self):\n        s1 = Season.objects.create(year=2020)\n        s2 = Season.objects.create(year=2021)\n        self.assertQuerysetEqual(\n            Season.objects.filter(year__lt=2021),\n            ['<Season: Season object (1)>']\n        )\n\n    def test_year_lte(self):\n        s1 = Season.objects.create(year=2020)\n        s2 = Season.objects.create(year=2021)\n        self.assertQuerysetEqual(\n            Season.objects.filter(year__lte=2020),\n            ['<Season: Season object (1)>']\n        )\n\n    def test_transform(self):\n        a1 = Author.objects.create(name='Author A')\n        a2 = Author.objects.create(name='Author B')\n        Article.objects.create(author=a1, headline='Article 1')\n        Article.objects.create(author=a2, headline='Article 2')\n        self.assertQuerysetEqual(\n            Article.objects.annotate(\n                full_name=F('author__name')\n            ).filter(full_name='Author A'),\n            ['<Article: Article 1>']\n        )\n\n    def test_field_get_db_prep_value_mixin(self):\n        a1 = Author.objects.create(name='Author A')\n        a2 = Author.objects.create(name='Author B')\n        Article.objects.create(author=a1, headline='Article 1')\n        Article.objects.create(author=a2, headline='Article 2')\n        self.assertQuerysetEqual(\n            Article.objects.filter(author__name__in=['Author A']),\n            ['<Article: Article 1>']\n        )\n\n    def test_field_get_db_prep_value_iterable_mixin(self):\n        a1 = Author.objects.create(name='Author A')\n        a2 = Author.objects.create(name='Author B')\n        Article.objects.create(author=a1, headline='Article 1')\n        Article.objects.create(author=a2, headline='Article 2')\n        self.assertQuerysetEqual(\n            Article.objects.filter(author__name__in=['Author A', 'Author B']),\n            ['<Article: Article 1>', '<Article: Article 2>']\n        )\n\n"], "sample_51": ["\nimport datetime\nimport io\nimport mimetypes\nimport os\nfrom pathlib import Path\nfrom unittest.mock import MagicMock, patch\n\nfrom django.conf import settings\nfrom django.http import FileResponse, HttpResponse, HttpResponseNotModified\nfrom django.template import Context, Engine, Template\nfrom django.test import TestCase\nfrom django.utils.http import http_date\n\nfrom django.views.static import (\n    DEFAULT_DIRECTORY_INDEX_TEMPLATE,\n    directory_index,\n    serve,\n    was_modified_since,\n)\n\nsettings.configure()\n\n\nclass StaticViewsTests(TestCase):\n    def test_serve_file(self):\n        with patch(\"django.views.static.Path.open\") as mock_open:\n            mock_file = MagicMock(spec=io.BufferedReader)\n            mock_open.return_value.__enter__.return_value = mock_file\n            mock_file.stat.return_value = MagicMock(st_mtime=1234567890, st_size=1234)\n            request = MagicMock()\n            request.META = {\"HTTP_IF_MODIFIED_SINCE\": None}\n            response = serve(request, \"test.txt\", document_root=\"/tmp\")\n            self.assertIsInstance(response, FileResponse)\n            self.assertEqual(response.status_code, 200)\n            self.assertEqual(response[\"Last-Modified\"], http_date(1234567890))\n\n    def test_serve_file_not_modified(self):\n        with patch(\"django.views.static.Path.open\") as mock_open:\n            mock_file = MagicMock(spec=io.BufferedReader)\n            mock_open.return_value.__enter__.return_value = mock_file\n            mock_file.stat.return_value = MagicMock(st_mtime=1234567890, st_size=1234)\n            request = MagicMock()\n            request.META = {\"HTTP_IF_MODIFIED_SINCE\": http_date(1234567890)}\n            response = serve(request, \"test.txt\", document_root=\"/tmp\")\n            self.assertIsInstance(response, HttpResponseNotModified)\n\n    def test_serve_directory_indexes_disabled(self):\n        with self.assertRaises(Http404):\n            serve(MagicMock(), \"test/\", document_root=\"/tmp\", show_indexes=False)\n\n    def test_serve_directory_indexes_enabled(self):\n        with patch(\"django.views.static.loader.select_template\") as mock_select_template:\n            mock_template = MagicMock(spec=Template)\n            mock_select_template.return_value = mock_template\n            request = MagicMock()\n            response = directory_index(\"test/\", Path(\"/tmp/test\"))\n            self.assertIsInstance(response, HttpResponse)\n            mock_select_template.assert_called_with(\n                [\"static/directory_index.html\", \"static/directory_index\"]\n            )\n\n    def test_was_modified_since_not_modified(self):\n        self.assertFalse(\n            was_modified_since(\n                header=http_date(1234567890), mtime=1234567890, size=1234\n            )\n        )\n\n    def test_was_modified_since_modified(self):\n        self.assertTrue(\n            was_modified_since(\n                header=http_date(1234567890), mtime=1234567891, size=1234\n            )\n        )\n\n    def test_was_modified_since_invalid_header(self):\n        self.assertTrue(was_modified_since(header=\"invalid\"))\n\n    def test_serve_file_not_found(self):\n        with self.assertRaises(Http404):\n            serve(MagicMock(), \"test.txt\", document_root=\"/tmp\")\n\n    def test_serve_directory_not_found(self):\n        with self.assertRaises(Http404):\n            serve(MagicMock(), \"test/\", document_root=\"/tmp\", show_indexes=True)\n\n    def test_directory_index_default_template(self):\n        with patch(\"django.views.static.Engine.from_string\") as mock_from_string:\n            mock_template = MagicMock(spec=Template)\n            mock_from_string.return_value = mock_template\n            request = MagicMock()\n            response = directory_index(\"test/\", Path(\"/tmp/test\"))\n            self.assertIsInstance(response, HttpResponse)\n            mock_from_string.assert_called_with(DEFAULT_DIRECTORY_INDEX_TEMPLATE)\n\n"], "sample_148": ["\nfrom sympy import ( Abs, acos, adjoint, arg, atan, atan2, conjugate, cos, DiracDelta, E, exp, expand, Expr, Function, Heaviside, I, im, log, nan, oo, pi, Rational, re, S, sign, sin, sqrt, Symbol, symbols, transpose, zoo, exp_polar, Piecewise, Interval, comp, Integral, Matrix, ImmutableMatrix, SparseMatrix, ImmutableSparseMatrix, MatrixSymbol, FunctionMatrix, Lambda, Derivative, Eq)\nfrom sympy.core.expr import unchanged\nfrom sympy.core.function import ArgumentIndexError\nfrom sympy.testing.pytest import XFAIL, raises, _both_exp_pow\nfrom sympy import polar_lift, polarify\nfrom sympy import (exp_polar, polar_lift, exp, unpolarify, principal_branch)\nfrom sympy import gamma, erf, sin, tanh, uppergamma, Eq, Ne\nfrom sympy.abc import x\nfrom sympy import Matrix, simplify\nfrom sympy import (periodic_argument, unbranched_argument, oo, principal_branch, polar_lift, pi)\nfrom sympy import principal_branch\nfrom sympy import principal_branch, polar_lift, exp_polar\nfrom sympy import simplify\nfrom sympy.functions.elementary.complexes import unpolarify\n\ndef test_abs():\n    assert abs(2) == 2\n    assert abs(-2) == 2\n    assert abs(2 + 3j) == sqrt(13)\n    assert abs(2 - 3j) == sqrt(13)\n\ndef test_arg():\n    assert arg(1) == 0\n    assert arg(-1) == pi\n    assert arg(1j) == pi/2\n    assert arg(-1j) == -pi/2\n    assert arg(1 + 1j) == pi/4\n    assert arg(-1 + 1j) == 3*pi/4\n    assert arg(-1 - 1j) == -3*pi/4\n    assert arg(1 - 1j) == -pi/4\n\ndef test_conjugate():\n    assert conjugate(2) == 2\n    assert conjugate(-2) == -2\n    assert conjugate(2 + 3j) == 2 - 3j\n    assert conjugate(2 - 3j) == 2 + 3j\n\ndef test_exp_polar():\n    assert exp_polar(0) == 1\n    assert exp_polar(pi*I) == -1\n    assert exp_polar(pi*I/2) == 1j\n    assert exp_polar(-pi*I/2) == -1j\n\ndef test_polar_lift():\n    assert polar_lift(4) == 4*exp_polar(0)\n    assert polar_lift(-4) == 4*exp_polar(I*pi)\n    assert polar_lift(-I) == exp_polar(-I*pi/2)\n    assert polar_lift(I + 2) == polar_lift(2 + I)\n\ndef test_periodic_argument():\n    assert periodic_argument(exp_polar(10*I*pi), 2*pi) == 0\n    assert periodic_argument(exp_polar(5*I*pi), 4*pi) == pi\n    assert periodic_argument(exp_polar(5*I*pi), 3*pi) == -pi\n    assert periodic_argument(exp_polar(5*I*pi), pi) == 0\n\ndef test_unbranched_argument():\n    assert unbranched_argument(exp_polar(15*I*pi)) == 15*pi\n    assert unbranched_argument(exp_polar(7*I*pi)) == 7*pi\n\ndef test_principal_branch():\n    assert principal_branch(z, oo) == z\n    assert principal_branch(exp_polar(2*pi*I)*3, 2*pi) == 3*exp_polar(0)\n    assert principal_branch(exp_polar(2*pi*I)*3*z, 2*pi) == 3*principal_branch(z, 2*pi)\n\ndef test_polarify():\n    expr = (-x)**y\n    expr.expand()\n    assert polarify(expr)[0].expand() == _x**_y*exp_polar(_y*I*pi)\n\ndef test_unpolarify():\n    assert unpolarify(polar_lift(I + 2)) == 2 + I\n    assert unpolarify(sin(polar_lift(I + 7))) == sin(7 + I)\n\n"], "sample_80": ["\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\n\nfrom xarray.core import formatting\n\ndef test_pretty_print():\n    assert formatting.pretty_print(\"hello\", 10) == \"hello     \"\n    assert formatting.pretty_print(\"hello\", 5) == \"hello\"\n\ndef test_maybe_truncate():\n    assert formatting.maybe_truncate(\"hello world\", 10) == \"hello world\"\n    assert formatting.maybe_truncate(\"hello world\", 5) == \"hello...\"\n\ndef test_wrap_indent():\n    text = \"hello\\nworld\\nthis is a test\"\n    assert formatting.wrap_indent(text) == \"hello\\n    world\\n    this is a test\"\n    assert formatting.wrap_indent(text, start=\"  \") == \"  hello\\n    world\\n    this is a test\"\n\ndef test_get_indexer_at_least_n_items():\n    shape = (10, 5)\n    assert formatting._get_indexer_at_least_n_items(shape, 10, False) == (slice(None),)\n    assert formatting._get_indexer_at_least_n_items(shape, 20, False) == (slice(None, 2),)\n    assert formatting._get_indexer_at_least_n_items(shape, 50, False) == (slice(None, 2), slice(None))\n\ndef test_first_n_items():\n    array = np.arange(10)\n    assert np.array_equal(formatting.first_n_items(array, 5), np.arange(5))\n    assert np.array_equal(formatting.first_n_items(array, 15), array)\n\ndef test_last_n_items():\n    array = np.arange(10)\n    assert np.array_equal(formatting.last_n_items(array, 5), np.arange(5, 10))\n    assert np.array_equal(formatting.last_n_items(array, 15), array)\n\ndef test_last_item():\n    array = np.arange(10)\n    assert formatting.last_item(array) == [9]\n\ndef test_format_timestamp():\n    assert formatting.format_timestamp(pd.Timestamp(\"2023-01-01\")) == \"2023-01-01\"\n    assert formatting.format_timestamp(pd.Timestamp(\"2023-01-01T12:00:00\")) == \"2023-01-01T12:00:00\"\n\ndef test_format_timedelta():\n    assert formatting.format_timedelta(pd.Timedelta(days=1)) == \"1 days\"\n    assert formatting.format_timedelta(pd.Timedelta(days=1, hours=12)) == \"1 days 12:00:00\"\n\ndef test_format_item():\n    assert formatting.format_item(\"hello\") == \"hello\"\n    assert formatting.format_item(1.2345, timedelta_format=\"date\") == \"1.2345\"\n\ndef test_format_items():\n    assert formatting.format_items([1, 2, 3]) == [\"1\", \"2\", \"3\"]\n    assert formatting.format_items([pd.Timestamp(\"2023-01-01\"), pd.Timestamp(\"2023-01-02\")]) == [\"2023-01-01\", \"2023-01-02\"]\n\ndef test_format_array_flat():\n    array = np.arange(10)\n    assert formatting.format_array_flat(array, 20) == \"0 1 2 3 4 5 6 7 8 9\"\n    array = np.arange(20)\n    assert formatting.format_array_flat(array, 20) == \"0 1 2 ... 17 18 19\"\n\ndef test_inline_dask_repr():\n    assert formatting.inline_dask_repr(np.array([1, 2, 3])) == \"dask.array<chunksize=(3,),>\"\n\ndef test_inline_sparse_repr():\n    assert formatting.inline_sparse_repr(sparse.COO([1, 2, 3])) == \"<COO: nnz=3, fill_value=0>\"\n\ndef test_inline_variable_array_repr():\n    array = np.arange(10)\n    assert formatting.inline_variable_array_repr(array, 20) == \"0 1 2 3 4 5 6 7 8 9\"\n\ndef test_summarize_variable():\n    var = np.arange(10)\n    assert formatting.summarize_variable(\"x\", var, 10) == \"  x (10,) int64 0 1 2 3 4 5 6 7 8 9\"\n\ndef test_summarize_coord_multiindex():\n    coord = pd.MultiIndex.from_tuples([(\"a\", 1), (\"a\", 2), (\"b\", 1)])\n    assert formatting.summarize_coord(\"x\", coord, 10) == \"  *x (2,) MultiIndex\\n\"\n\ndef test_summarize_coord_levels():\n    coord = pd.MultiIndex.from_tuples([(\"a\", 1), (\"a\", 2), (\"b\", 1)])\n    assert formatting.summarize_coord_levels(coord, 10) == \"  1 (2,) int64 1 2\\n  2 (1,) int64 1\"\n\ndef test_summarize_coord():\n    var = np.arange(10)\n    assert formatting.summarize_coord(\"x\", var, 10) == \"  *x (10,) int64 0 1 2 3 4 5 6 7 8 9\"\n\ndef test_summarize_attr():\n    assert formatting.summarize_attr(\"key\", \"value\", 10) == \"    key: value\"\n\ndef test_data_vars_repr():\n    data_vars = {\"x\": np.arange(10), \"y\": np.arange(5)}\n    assert formatting.data_vars_repr(data_vars, 10) == \"Data variables:\\n  x (10,) int64 0 1 2 3 4 5 6 7 8 9\\n  y (5,) int64 0 1 2 3 4\"\n\ndef test_attrs_repr():\n    attrs = {\"key\": \"value\"}\n    assert formatting.attrs_repr(attrs, 10) == \"Attributes:\\n    key: value\"\n\ndef test_coords_repr():\n    coords = {\"x\": np.arange(10), \"y\": np.arange(5)}\n    assert formatting.coords_repr(coords, 10) == \"Coordinates:\\n  x (10,) int64 0 1 2 3 4 5 6 7 8 9\\n  y (5,) int64 0 1 2 3 4\"\n\ndef test_indexes_repr():\n    indexes = {\"x\": np.arange(10), \"y\": np.arange(5)}\n    assert formatting.indexes_repr(indexes) == \"x: 0 1 2 3 4 5 6 7 8 9\\ny: 0 1 2 3 4\"\n\ndef test_dim_summary():\n    dims = {\"x\": 10, \"y\": 5}\n    assert formatting.dim_summary(dims) == \"x: 10, y: 5\"\n\ndef test_unindexed_dims_repr():\n    dims = {\"x\": 10, \"y\": 5}\n    coords = {\"x\": np.arange(10)}\n    assert formatting.unindexed_dims_repr(dims, coords) == \"Dimensions without coordinates: y\"\n\ndef test_short_numpy_repr():\n    array = np.arange(10)\n    assert formatting.short_numpy_repr(array) == \"array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\"\n\ndef test_short_data_repr():\n    array = np.arange(10)\n    assert formatting.short_data_repr(array) == \"array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\"\n\ndef test_array_repr():\n    array = np.arange(10)\n    assert formatting.array_repr(array) == \"<xarray.DataArray (10,)>\\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\"\n\ndef test_dataset_repr():\n    data_vars = {\"x\": np.arange(10), \"y\": np.arange(5)}\n    coords = {\"x\": np.arange(10), \"y\": np.arange(5)}\n    ds = xarray.Dataset(data_vars=data_vars, coords=coords)\n    assert formatting.dataset_repr(ds) == \"<xarray.Dataset>\\nDimensions:  (x: 10, y: 5)\\nCoordinates:\\n  x (x) int64 0 1 2 3 4 5 6 7 8 9\\n  y (y) int64 0 1 2 3 4\\nData variables:\\n  x (x) int64 0 1 2 3 4 5 6 7 8 9\\n  y (y) int64 0 1 2 3 4\"\n\ndef test_diff_dim_summary():\n    a = xarray.DataArray(np.arange(10))\n    b = xarray.DataArray(np.arange(5))\n    assert formatting.diff_dim_summary(a, b) == \"Differing dimensions:\\n    (x: 10) != (x: 5)\"\n\ndef test_diff_coords_repr():\n    a = xarray.DataArray(np.arange(10), coords={\"x\": np.arange(10)})\n    b = xarray.DataArray(np.arange(5), coords={\"x\": np.arange(5)})\n    assert formatting.diff_coords_repr(a.coords, b.coords, \"equals\", col_width=10) == \"Differing coordinates:\\nL x (10,) int64 0 1 2 3 4 5 6 7 8 9\\nR x (5,) int64 0 1 2 3 4\"\n\ndef test_diff_data_vars_repr():\n    a = xarray.DataArray(np.arange(10))\n    b = xarray.DataArray(np.arange(5))\n    assert formatting.diff_data_vars_repr(a.data_vars, b.data_vars, \"equals\", col_width=10) == \"Differing Data variables:\\nL x (10,) int64 0 1 2 3 4 5 6 7 8 9\\nR x (5,) int64 0 1 2 3 4\"\n\ndef test_diff_attrs_repr():\n    a = xarray.DataArray(np.arange(10), attrs={\"key\": \"value\"})\n    b = xarray.DataArray(np.arange(10))\n    assert formatting.diff_attrs_repr(a.attrs, b.attrs, \"equals\") == \"Differing Attributes:\\nL key: value\\n\"\n\ndef test_diff_array_repr():\n    a = xarray.DataArray(np.arange(10))\n    b = xarray.DataArray(np.arange(5))\n    assert formatting.diff_array_repr(a, b, \"equals\") == \"Left and right DataArray objects are not equal\\nDimensions:  (x: 10) != (x: 5)\\nDiffering values:\"\n\ndef test_diff_dataset_repr():\n    a = xarray.Dataset({\"x\": np.arange(10), \"y\": np.arange(5)})\n    b = xarray.Dataset({\"x\": np.arange(5), \"y\": np.arange(5)})\n    assert formatting.diff_dataset_repr(a, b, \"equals\") == \"Left and right Dataset objects are not equal\\nDimensions:  (x: 10, y: 5) != (x: 5, y: 5)\\nDiffering coordinates:\\nL x (10,) int64 0 1 2 3 4 5 6 7 8 9\\nR x (5,) int64 0 1 2 3 4\\nDiffering Data variables:\\nL x (10,) int64 0 1 2 3 4 5 6 7 8 9\\nR x (5,) int64 0 1 2 3 4\"\n\n"], "sample_127": ["\nimport unittest\nfrom sympy import (\n    symbols, Eq, Add, Mul, Pow, sin, cos, tan, exp, log, sqrt, pi, I, oo,\n    Matrix, Integral, Derivative, Function, Rational, S, Tuple, Dict,\n    Piecewise, simplify, factor, expand, collect, apart,\n    Poly, FiniteSet, ImageSet, Lambda,\n    EulerGamma, Catalan, GoldenRatio,\n)\nfrom sympy.printing.latex import (\n    latex, translate, greek_letters_set, tex_greek_dictionary,\n    LatexPrinter, other_symbols, modifier_dict, accepted_latex_functions,\n)\nfrom sympy.core.containers import Tuple\nfrom sympy.core.symbol import Symbol\n\nclass TestLatexPrinter(unittest.TestCase):\n\n    def test_basic_symbols(self):\n        self.assertEqual(latex(x), 'x')\n        self.assertEqual(latex(y), 'y')\n        self.assertEqual(latex(pi), '\\pi')\n        self.assertEqual(latex(I), 'i')\n        self.assertEqual(latex(oo), '\\infty')\n\n    def test_greek_letters(self):\n        for letter in greek_letters_set:\n            self.assertEqual(latex(Symbol(letter)), '\\\\' + letter)\n\n    def test_translate(self):\n        self.assertEqual(translate('alpha'), '\\\\alpha')\n        self.assertEqual(translate('betahat'), '\\\\hat{\\\\beta}')\n        self.assertEqual(translate('gammadot'), '\\\\dot{\\\\gamma}')\n        self.assertEqual(translate('deltaprime'), '\\\\delta\\'')\n        self.assertEqual(translate('epsilontilde'), '\\\\tilde{\\\\epsilon}')\n\n    def test_functions(self):\n        self.assertEqual(latex(sin(x)), '\\\\sin{x}')\n        self.assertEqual(latex(cos(x)), '\\\\cos{x}')\n        self.assertEqual(latex(tan(x)), '\\\\tan{x}')\n        self.assertEqual(latex(exp(x)), '\\\\exp{x}')\n        self.assertEqual(latex(log(x)), '\\\\log{x}')\n        self.assertEqual(latex(sqrt(x)), '\\\\sqrt{x}')\n\n    def test_operators(self):\n        self.assertEqual(latex(x + y), 'x + y')\n        self.assertEqual(latex(x - y), 'x - y')\n        self.assertEqual(latex(x * y), 'x y')\n        self.assertEqual(latex(x / y), 'x / y')\n        self.assertEqual(latex(x**y), 'x^{y}')\n\n    def test_parentheses(self):\n        self.assertEqual(latex((x + y) * z), '(x + y) z')\n        self.assertEqual(latex(x * (y + z)), 'x (y + z)')\n\n    def test_powers(self):\n        self.assertEqual(latex(x**2), 'x^{2}')\n        self.assertEqual(latex(x**(-2)), 'x^{-2}')\n        self.assertEqual(latex(x**(1/2)), 'x^{1/2}')\n        self.assertEqual(latex(x**(2/3)), 'x^{2/3}')\n\n    def test_fractions(self):\n        self.assertEqual(latex(x / y), 'x / y')\n        self.assertEqual(latex(Rational(1, 2)), '\\\\frac{1}{2}')\n        self.assertEqual(latex(Rational(3, 4)), '\\\\frac{3}{4}')\n\n    def test_matrices(self):\n        self.assertEqual(latex(Matrix([[1, 2], [3, 4]])),\n                         '\\\\begin{bmatrix}1 & 2 \\\\\\\\ 3 & 4 \\\\end{bmatrix}')\n\n    def test_integrals(self):\n        self.assertEqual(latex(Integral(x, x)), '\\\\int x \\, dx')\n        self.assertEqual(latex(Integral(x, (x, 0, 1))), '\\\\int_{0}^{1} x \\, dx')\n\n    def test_derivatives(self):\n        self.assertEqual(latex(Derivative(x**2, x)), '\\\\frac{d}{dx} x^{2}')\n        self.assertEqual(latex(Derivative(x**2, x, 2)), '\\\\frac{d^{2}}{dx^{2}} x^{2}')\n\n    def test_functions_with_arguments(self):\n        self.assertEqual(latex(sin(x + y)), '\\\\sin{(x + y)}')\n        self.assertEqual(latex(exp(x**2)), '\\\\exp{(x^{2})}')\n\n    def test_piecewise(self):\n        p = Piecewise((x, x < 0), (x**2, x >= 0))\n        self.assertEqual(latex(p),\n                         '\\\\begin{cases} x & x < 0 \\\\\\\\ x^{2} & x \\ge 0 \\\\end{cases}')\n\n    def test_simplify(self):\n        self.assertEqual(latex(simplify((x + 1)**2 - x**2)), '2 x + 1')\n\n    def test_factor(self):\n        self.assertEqual(latex(factor(x**2 - 1)), '(x - 1) (x + 1)')\n\n    def test_expand(self):\n        self.assertEqual(latex(expand((x + 1)**2)), 'x^{2} + 2 x + 1')\n\n    def test_collect(self):\n        self.assertEqual(latex(collect(x**2 + 2*x*y + y**2, x)), 'x^{2} + 2 x y + y^{2}')\n\n    def test_apart(self):\n        self.assertEqual(latex(apart(1/(x*(x-1)))), '\\\\frac{1}{x - 1} - \\\\frac{1}{x}')\n\n    def test_poly(self):\n        p = Poly(x**2 + 2*x + 1, x)\n        self.assertEqual(latex(p), 'x^{2} + 2 x + 1')\n\n    def test_finite_set(self):\n        self.assertEqual(latex(FiniteSet(1, 2, 3)), '{1, 2, 3}')\n\n    def test_image_set(self):\n        self.assertEqual(latex(ImageSet(Lambda(x, x**2), S.Naturals)),\n                         '\\\\left\\{ x^{2} \\\\mid x \\\\in \\\\mathbb{N} \\\\right\\}')\n\n    def test_lambda(self):\n        self.assertEqual(latex(Lambda(x, x**2)), '\\\\lambda x: x^{2}')\n\n    def test_constants(self):\n        self.assertEqual(latex(EulerGamma), '\\\\gamma')\n        self.assertEqual(latex(Catalan), 'C')\n        self.assertEqual(latex(GoldenRatio), '\\\\phi')\n\n    def test_equation(self):\n        self.assertEqual(latex(Eq(x, y), mode='equation'),\n                         '\\\\begin{equation}x = y\\\\end{equation}')\n\n    def test_itex(self):\n        self.assertEqual(latex(Eq(x, y), mode='equation', itex=True),\n                         '$$x = y$$')\n\n    def test_fold_frac_powers(self):\n        self.assertEqual(latex(x**(Rational(1, 2)), fold_frac_powers=True),\n                         'x^{1/2}')\n\n    def test_fold_func_brackets(self):\n        self.assertEqual(latex(sin(x**2), fold_func_brackets=True),\n                         '\\\\sin{x^{2}}')\n\n    def test_fold_short_frac(self):\n        self.assertEqual(latex(x/y, fold_short_frac=True), 'x / y')\n\n    def test_long_frac_ratio(self):\n        self.assertEqual(latex(Integral(x, x)/2/pi, long_frac_ratio=2),\n                         '\\\\frac{\\\\int x \\, dx}{2 \\\\pi}')\n\n    def test_mul_symbol(self):\n        self.assertEqual(latex(x*y, mul_symbol='times'), 'x \\\\times y')\n\n    def test_inv_trig_style(self):\n        self.assertEqual(latex(asin(x), inv_trig_style='full'),\n                         '\\\\arcsin{x}')\n\n    def test_mat_str(self):\n        self.assertEqual(latex(Matrix(2, 1, [x, y]), mat_str='array'),\n                         '\\\\begin{array}{c}x\\\\y\\\\end{array}')\n\n    def test_mat_delim(self):\n        self.assertEqual(latex(Matrix(2, 1, [x, y]), mat_delim='('),\n                         '\\\\left(\\\\begin{matrix}x\\\\y\\\\end{matrix}\\\\right)')\n\n    def test_symbol_names(self):\n        self.assertEqual(latex(x**2, symbol_names={x:'x_i'}), 'x_i^{2}')\n\n    def test_list(self):\n        self.assertEqual(latex([x, y], mode='inline'),\n                         '$\\\\left [ x, \\\\quad y \\\\right ]$')\n\n    def test_tuple(self):\n        self.assertEqual(latex((x, y), mode='inline'),\n                         '$\\\\left ( x, \\\\quad y \\\\right )$')\n\n    def test_dict(self):\n        self.assertEqual(latex({x: y}, mode='inline'),\n                         '$\\\\left \\{ x: y \\\\right \\}$')\n\n    def test_ln_notation(self):\n        self.assertEqual(latex(log(x), ln_notation=True), '\\\\ln{x}')\n\n\n\n"], "sample_98": ["\nimport unittest\nimport numpy as np\nfrom numpy.testing import assert_array_equal\nfrom scipy import sparse as sp\nfrom sklearn.utils.validation import (\n    check_array, check_X_y, check_symmetric,\n    check_is_fitted, NotFittedError, check_consistent_length,\n    column_or_1d, check_random_state, has_fit_parameter,\n    assert_all_finite, check_memory, LARGE_SPARSE_SUPPORTED\n)\nfrom sklearn.exceptions import DataConversionWarning\nimport warnings\n\nclass TestValidation(unittest.TestCase):\n\n    def test_check_array(self):\n        # Test check_array function\n        X = np.array([[1, 2], [3, 4]])\n        X_checked = check_array(X)\n        assert_array_equal(X_checked, X)\n\n        X = np.array([[1, 2, 3], [4, 5, 6]])\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\", DataConversionWarning)\n            X_checked = check_array(X, ensure_2d=False)\n        assert_array_equal(X_checked, X)\n\n        X = np.array([1, 2, 3])\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\", DataConversionWarning)\n            X_checked = check_array(X, ensure_2d=False)\n        assert_array_equal(X_checked, X)\n\n        X = np.array([1, 2, 3])\n        X_checked = check_array(X, ensure_2d=True)\n        self.assertEqual(X_checked.ndim, 2)\n\n        X = sp.csr_matrix([[1, 2], [3, 4]])\n        X_checked = check_array(X, accept_sparse=True)\n        assert_array_equal(X_checked.toarray(), X.toarray())\n\n        X = np.array([[1, 2], [3, np.inf]])\n        with self.assertRaises(ValueError):\n            check_array(X, force_all_finite=True)\n\n        X = np.array([[1, 2], [3, np.nan]])\n        with self.assertRaises(ValueError):\n            check_array(X, force_all_finite=True)\n\n        X = np.array([[1, 2], [3, 'a']])\n        with self.assertRaises(ValueError):\n            check_array(X)\n\n    def test_check_X_y(self):\n        # Test check_X_y function\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([1, 2])\n        X_checked, y_checked = check_X_y(X, y)\n        assert_array_equal(X_checked, X)\n        assert_array_equal(y_checked, y)\n\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([[1], [2]])\n        with self.assertRaises(ValueError):\n            check_X_y(X, y)\n\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([1, 2, 3])\n        with self.assertRaises(ValueError):\n            check_X_y(X, y)\n\n    def test_check_symmetric(self):\n        # Test check_symmetric function\n        X = np.array([[1, 2], [2, 1]])\n        X_sym = check_symmetric(X)\n        assert_array_equal(X_sym, X)\n\n        X = np.array([[1, 2], [3, 1]])\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\", UserWarning)\n            X_sym = check_symmetric(X, raise_warning=True)\n        assert_array_equal(X_sym, 0.5 * (X + X.T))\n\n        X = np.array([[1, 2], [2, 1]])\n        with self.assertRaises(ValueError):\n            check_symmetric(X, raise_exception=True)\n\n    def test_check_is_fitted(self):\n        # Test check_is_fitted function\n        class DummyEstimator:\n            def __init__(self):\n                pass\n        estimator = DummyEstimator()\n        with self.assertRaises(NotFittedError):\n            check_is_fitted(estimator, [\"coef_\"])\n\n        estimator.coef_ = 1\n        check_is_fitted(estimator, [\"coef_\"])\n\n    def test_check_consistent_length(self):\n        # Test check_consistent_length function\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([1, 2])\n        check_consistent_length(X, y)\n\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([1, 2, 3])\n        with self.assertRaises(ValueError):\n            check_consistent_length(X, y)\n\n    def test_column_or_1d(self):\n        # Test column_or_1d function\n        y = np.array([1, 2, 3])\n        y_1d = column_or_1d(y)\n        assert_array_equal(y_1d, y)\n\n        y = np.array([[1], [2], [3]])\n        y_1d = column_or_1d(y)\n        assert_array_equal(y_1d, y.ravel())\n\n        y = np.array([[1, 2], [3, 4]])\n        with self.assertRaises(ValueError):\n            column_or_1d(y)\n\n    def test_check_random_state(self):\n        # Test check_random_state function\n        random_state = check_random_state(None)\n        self.assertIsInstance(random_state, np.random.RandomState)\n\n        random_state = check_random_state(42)\n        self.assertIsInstance(random_state, np.random.RandomState)\n\n        random_state = check_random_state(np.random.RandomState(42))\n        self.assertIsInstance(random_state, np.random.RandomState)\n\n        with self.assertRaises(ValueError):\n            check_random_state(\"invalid\")\n\n    def test_has_fit_parameter(self):\n        # Test has_fit_parameter function\n        from sklearn.svm import SVC\n        estimator = SVC()\n        self.assertTrue(has_fit_parameter(estimator, \"sample_weight\"))\n        self.assertFalse(has_fit_parameter(estimator, \"invalid_parameter\"))\n\n    def test_assert_all_finite(self):\n        # Test assert_all_finite function\n        X = np.array([[1, 2], [3, 4]])\n        assert_all_finite(X)\n\n        X = np.array([[1, 2], [3, np.inf]])\n        with self.assertRaises(ValueError):\n            assert_all_finite(X)\n\n        X = np.array([[1, 2], [3, np.nan]])\n        with self.assertRaises(ValueError):\n            assert_all_finite(X)\n\n    def test_check_memory(self):\n        # Test check_memory function\n        self.assertIsNone(check_memory(None))\n        self.assertEqual(check_memory(\"cachedir\"), \"cachedir\")\n\n        with self.assertRaises(ValueError):\n            check_memory(\"invalid_memory\")\n\n"], "sample_57": ["\nfrom unittest import TestCase\nfrom django.forms import Form, CharField, IntegerField\nfrom django.forms.formsets import (\n    BaseFormSet,\n    formset_factory,\n    all_valid,\n    TOTAL_FORM_COUNT,\n    INITIAL_FORM_COUNT,\n    MIN_NUM_FORM_COUNT,\n    MAX_NUM_FORM_COUNT,\n)\nfrom django.forms.widgets import HiddenInput\nfrom django.forms.utils import ErrorList\n\nclass MyForm(Form):\n    name = CharField(max_length=100)\n    age = IntegerField()\n\nclass MyFormSet(BaseFormSet):\n    form_class = MyForm\n    extra = 2\n\nclass FormSetTests(TestCase):\n\n    def test_formset_factory(self):\n        MyFormSet = formset_factory(MyForm, extra=1)\n        formset = MyFormSet()\n        self.assertEqual(len(formset.forms), 1)\n        self.assertEqual(formset.total_form_count(), 1)\n\n    def test_formset_initial_data(self):\n        initial_data = [\n            {'name': 'Alice', 'age': 30},\n            {'name': 'Bob', 'age': 25},\n        ]\n        MyFormSet = formset_factory(MyForm, extra=1)\n        formset = MyFormSet(initial=initial_data)\n        self.assertEqual(len(formset.forms), 3)\n        self.assertEqual(formset.initial_form_count(), 2)\n        self.assertEqual(formset.forms[0].cleaned_data['name'], 'Alice')\n\n    def test_formset_management_form(self):\n        MyFormSet = formset_factory(MyForm, extra=1)\n        formset = MyFormSet()\n        self.assertTrue(isinstance(formset.management_form, ManagementForm))\n        self.assertEqual(formset.management_form.fields[TOTAL_FORM_COUNT].initial, 1)\n\n    def test_formset_validation(self):\n        MyFormSet = formset_factory(MyForm, extra=1)\n        formset = MyFormSet(data={'form-0-name': ['invalid'], 'form-0-age': ['abc']})\n        self.assertFalse(formset.is_valid())\n        self.assertEqual(len(formset.errors), 1)\n\n    def test_formset_ordering(self):\n        MyFormSet = formset_factory(MyForm, extra=1, can_order=True)\n        formset = MyFormSet(data={\n            'form-0-name': ['Alice'],\n            'form-0-age': [30],\n            'form-0-ORDERING_FIELD_NAME': [2],\n            'form-1-name': ['Bob'],\n            'form-1-age': [25],\n            'form-1-ORDERING_FIELD_NAME': [1],\n        })\n        self.assertTrue(formset.is_valid())\n        self.assertEqual(formset.ordered_forms[0].cleaned_data['name'], 'Bob')\n\n    def test_formset_deletion(self):\n        MyFormSet = formset_factory(MyForm, extra=1, can_delete=True)\n        formset = MyFormSet(data={\n            'form-0-name': ['Alice'],\n            'form-0-age': [30],\n            'form-0-DELETE': [True],\n            'form-1-name': ['Bob'],\n            'form-1-age': [25],\n        })\n        self.assertTrue(formset.is_valid())\n        self.assertEqual(len(formset.deleted_forms), 1)\n\n    def test_all_valid(self):\n        formset1 = MyFormSet()\n        formset2 = MyFormSet()\n        self.assertTrue(all_valid([formset1, formset2]))\n\n"], "sample_66": ["\nfrom django.contrib.admin.checks import (\n    BaseModelAdminChecks,\n    InlineModelAdminChecks,\n    must_be,\n    must_inherit_from,\n    refer_to_missing_field,\n    _get_foreign_key,\n)\nfrom django.core.checks import Error\nfrom django.db import models\nfrom django.contrib.admin import ModelAdmin, InlineModelAdmin\nfrom django.forms import ModelForm\n\nclass TestModelAdminChecks(BaseModelAdminChecks):\n    def test_check_ordering(self):\n        class MyModelAdmin(ModelAdmin):\n            ordering = [\"-field1\", \"field2\", \"?\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E032\")\n\n    def test_check_ordering_valid(self):\n        class MyModelAdmin(ModelAdmin):\n            ordering = [\"field1\", \"-field2\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_ordering_invalid_field(self):\n        class MyModelAdmin(ModelAdmin):\n            ordering = [\"invalid_field\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E033\")\n\n    def test_check_readonly_fields_valid(self):\n        class MyModelAdmin(ModelAdmin):\n            readonly_fields = [\"field1\", \"field2\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_readonly_fields_invalid_field(self):\n        class MyModelAdmin(ModelAdmin):\n            readonly_fields = [\"invalid_field\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E035\")\n\n    def test_check_readonly_fields_callable(self):\n        class MyModelAdmin(ModelAdmin):\n            readonly_fields = [\"get_field\"]\n\n            def get_field(self, obj):\n                return obj.field1\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_readonly_fields_attribute(self):\n        class MyModel(models.Model):\n            field1 = models.CharField(max_length=100)\n\n        class MyModelAdmin(ModelAdmin):\n            readonly_fields = [\"field1\"]\n\n        admin_obj = MyModelAdmin(model=MyModel, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_inlines_valid(self):\n        class MyInline(InlineModelAdmin):\n            model = models.Model\n\n        class MyModelAdmin(ModelAdmin):\n            inlines = [MyInline]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_inlines_invalid_model(self):\n        class MyModelAdmin(ModelAdmin):\n            inlines = [\"invalid_inline\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E104\")\n\n    def test_check_inlines_invalid_subclass(self):\n        class MyInline:\n            pass\n\n        class MyModelAdmin(ModelAdmin):\n            inlines = [MyInline]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E104\")\n\n    def test_check_inlines_missing_model(self):\n        class MyInline(InlineModelAdmin):\n            pass\n\n        class MyModelAdmin(ModelAdmin):\n            inlines = [MyInline]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E105\")\n\n    def test_check_inlines_invalid_model_type(self):\n        class MyInline(InlineModelAdmin):\n            model = \"invalid_model\"\n\n        class MyModelAdmin(ModelAdmin):\n            inlines = [MyInline]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E106\")\n\n    def test_check_list_display_valid(self):\n        class MyModelAdmin(ModelAdmin):\n            list_display = [\"field1\", \"field2\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_list_display_invalid_field(self):\n        class MyModelAdmin(ModelAdmin):\n            list_display = [\"invalid_field\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E108\")\n\n    def test_check_list_display_callable(self):\n        class MyModelAdmin(ModelAdmin):\n            list_display = [\"get_field\"]\n\n            def get_field(self, obj):\n                return obj.field1\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_list_display_attribute(self):\n        class MyModel(models.Model):\n            field1 = models.CharField(max_length=100)\n\n        class MyModelAdmin(ModelAdmin):\n            list_display = [\"field1\"]\n\n        admin_obj = MyModelAdmin(model=MyModel, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_list_display_links_valid(self):\n        class MyModelAdmin(ModelAdmin):\n            list_display = [\"field1\", \"field2\"]\n            list_display_links = [\"field1\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_list_display_links_invalid_field(self):\n        class MyModelAdmin(ModelAdmin):\n            list_display = [\"field1\", \"field2\"]\n            list_display_links = [\"invalid_field\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E111\")\n\n    def test_check_list_filter_valid(self):\n        class MyModelAdmin(ModelAdmin):\n            list_filter = [\"field1\", \"field2\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_list_filter_invalid_field(self):\n        class MyModelAdmin(ModelAdmin):\n            list_filter = [\"invalid_field\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E116\")\n\n    def test_check_list_filter_tuple(self):\n        class MyModelAdmin(ModelAdmin):\n            list_filter = [(\"field1\", \"MyFilter\")]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_list_filter_invalid_tuple(self):\n        class MyModelAdmin(ModelAdmin):\n            list_filter = [(\"invalid_field\", \"MyFilter\")]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E116\")\n\n    def test_check_list_filter_not_fieldlistfilter(self):\n        class MyFilter:\n            pass\n\n        class MyModelAdmin(ModelAdmin):\n            list_filter = [(\"field1\", MyFilter)]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E115\")\n\n    def test_check_list_editable_valid(self):\n        class MyModelAdmin(ModelAdmin):\n            list_editable = [\"field1\", \"field2\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_list_editable_invalid_field(self):\n        class MyModelAdmin(ModelAdmin):\n            list_editable = [\"invalid_field\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E121\")\n\n    def test_check_list_editable_not_in_list_display(self):\n        class MyModelAdmin(ModelAdmin):\n            list_editable = [\"field1\"]\n            list_display = [\"field2\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E122\")\n\n    def test_check_list_editable_primary_key(self):\n        class MyModel(models.Model):\n            id = models.AutoField(primary_key=True)\n\n        class MyModelAdmin(ModelAdmin):\n            list_editable = [\"id\"]\n\n        admin_obj = MyModelAdmin(model=MyModel, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E125\")\n\n    def test_check_list_editable_first_field_in_list_display_and_list_display_links(self):\n        class MyModelAdmin(ModelAdmin):\n            list_editable = [\"field1\"]\n            list_display = [\"field1\", \"field2\"]\n            list_display_links = [\"field1\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E123\")\n\n    def test_check_search_fields_valid(self):\n        class MyModelAdmin(ModelAdmin):\n            search_fields = [\"field1\", \"field2\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_date_hierarchy_valid(self):\n        class MyModel(models.Model):\n            date_field = models.DateField()\n\n        class MyModelAdmin(ModelAdmin):\n            date_hierarchy = \"date_field\"\n\n        admin_obj = MyModelAdmin(model=MyModel, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_date_hierarchy_invalid_field(self):\n        class MyModelAdmin(ModelAdmin):\n            date_hierarchy = \"invalid_field\"\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E127\")\n\n    def test_check_date_hierarchy_not_datefield(self):\n        class MyModel(models.Model):\n            field = models.CharField(max_length=100)\n\n        class MyModelAdmin(ModelAdmin):\n            date_hierarchy = \"field\"\n\n        admin_obj = MyModelAdmin(model=MyModel, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E128\")\n\n    def test_check_action_permission_methods(self):\n        class MyModelAdmin(ModelAdmin):\n            def my_action(self, request, queryset):\n                pass\n\n            my_action.allowed_permissions = [\"my_permission\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E129\")\n\n    def test_check_actions_uniqueness(self):\n        class MyModelAdmin(ModelAdmin):\n            actions = [\"action1\", \"action2\"]\n\n        admin_obj = MyModelAdmin(model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\nclass TestInlineModelAdminChecks(TestModelAdminChecks):\n    def test_check_relation(self):\n        class MyInline(InlineModelAdmin):\n            model = models.Model\n            fk_name = \"related_field\"\n\n        admin_obj = MyInline(parent_model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_relation_invalid(self):\n        class MyInline(InlineModelAdmin):\n            model = models.Model\n            fk_name = \"invalid_field\"\n\n        admin_obj = MyInline(parent_model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E202\")\n\n    def test_check_exclude_of_parent_model(self):\n        class MyModel(models.Model):\n            field1 = models.CharField(max_length=100)\n\n        class MyInline(InlineModelAdmin):\n            model = MyModel\n            exclude = [\"field1\"]\n\n        admin_obj = MyInline(parent_model=MyModel, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, \"admin.E201\")\n\n    def test_check_extra_valid(self):\n        class MyInline(InlineModelAdmin):\n            extra = 1\n\n        admin_obj = MyInline(parent_model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_max_num_valid(self):\n        class MyInline(InlineModelAdmin):\n            max_num = 10\n\n        admin_obj = MyInline(parent_model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_min_num_valid(self):\n        class MyInline(InlineModelAdmin):\n            min_num = 2\n\n        admin_obj = MyInline(parent_model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_formset_valid(self):\n        class MyFormset(ModelForm):\n            class Meta:\n                model = models.Model\n                fields = \"__all__\"\n\n        class MyInline(InlineModelAdmin):\n            formset = MyFormset\n\n        admin_obj = MyInline(parent_model=models.Model, admin_site=None)\n        errors = self.check(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n"], "sample_119": ["\nimport unittest\nfrom sympy import mathematica_code as mcode, symbols, sin, cos, tan, exp, log, sqrt, pi, oo, zoo, I, Derivative, Integral, Sum, Eq, Ne, Lt, Gt, Le, Ge\nfrom sympy.abc import x, y, z\n\nclass TestMCodePrinter(unittest.TestCase):\n    def test_basic_arithmetic(self):\n        self.assertEqual(mcode(x + 1), 'x + 1')\n        self.assertEqual(mcode(x - 1), 'x - 1')\n        self.assertEqual(mcode(x * 2), '2 x')\n        self.assertEqual(mcode(x / 2), 'x/2')\n        self.assertEqual(mcode(x**2), 'x^2')\n\n    def test_functions(self):\n        self.assertEqual(mcode(sin(x)), 'Sin[x]')\n        self.assertEqual(mcode(cos(x)), 'Cos[x]')\n        self.assertEqual(mcode(tan(x)), 'Tan[x]')\n        self.assertEqual(mcode(exp(x)), 'Exp[x]')\n        self.assertEqual(mcode(log(x)), 'Log[x]')\n        self.assertEqual(mcode(sqrt(x)), 'Sqrt[x]')\n\n    def test_constants(self):\n        self.assertEqual(mcode(pi), 'Pi')\n        self.assertEqual(mcode(oo), 'Infinity')\n        self.assertEqual(mcode(-oo), '-Infinity')\n        self.assertEqual(mcode(zoo), 'ComplexInfinity')\n        self.assertEqual(mcode(I), 'I')\n\n    def test_derivative(self):\n        self.assertEqual(mcode(Derivative(sin(x), x)), 'Hold[D[Sin[x], x]]')\n        self.assertEqual(mcode(Derivative(x**2, x, 2)), 'Hold[D[x^2, {x, 2}]]')\n\n    def test_integral(self):\n        self.assertEqual(mcode(Integral(x, x)), 'Hold[Integrate[x, x]]')\n        self.assertEqual(mcode(Integral(x**2, (x, 0, 1))), 'Hold[Integrate[x^2, {x, 0, 1}]]')\n\n    def test_sum(self):\n        self.assertEqual(mcode(Sum(x, (x, 1, 10))), 'Hold[Sum[x, {x, 1, 10}]]')\n\n    def test_logical(self):\n        self.assertEqual(mcode(Eq(x, 1)), 'x == 1')\n        self.assertEqual(mcode(Ne(x, 1)), 'x != 1')\n        self.assertEqual(mcode(Lt(x, 1)), 'x < 1')\n        self.assertEqual(mcode(Gt(x, 1)), 'x > 1')\n        self.assertEqual(mcode(Le(x, 1)), 'x <= 1')\n        self.assertEqual(mcode(Ge(x, 1)), 'x >= 1')\n\n    def test_user_functions(self):\n        def my_func(x):\n            return x**2 + 1\n        mcode.known_functions['my_func'] = [(lambda *x: True, 'MyFunc')]\n        self.assertEqual(mcode(my_func(x)), 'MyFunc[x]')\n\n"], "sample_14": ["\nfrom unittest import mock\n\nfrom django.db import models\nfrom django.db.migrations.operations.base import Operation\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    BaseSequenceSerializer,\n    BaseSimpleSerializer,\n    ChoicesSerializer,\n    DateTimeSerializer,\n    DatetimeDatetimeSerializer,\n    DecimalSerializer,\n    DeconstructableSerializer,\n    DictionarySerializer,\n    EnumSerializer,\n    FloatSerializer,\n    FrozensetSerializer,\n    FunctionTypeSerializer,\n    FunctoolsPartialSerializer,\n    IterableSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    RegexSerializer,\n    SequenceSerializer,\n    SetSerializer,\n    SettingsReferenceSerializer,\n    TupleSerializer,\n    TypeSerializer,\n    UUIDSerializer,\n    serializer_factory,\n)\nfrom django.db.models.fields import (\n    AutoField,\n    BooleanField,\n    CharField,\n    DateField,\n    DateTimeField,\n    DecimalField,\n    FloatField,\n    IntegerField,\n    PositiveIntegerField,\n    TextField,\n)\nfrom django.utils import timezone\nfrom django.utils.functional import LazyObject, Promise\nfrom django.utils.version import get_docs_version\n\nclass TestSerializer:\n\n    def test_base_serializer(self):\n        serializer = BaseSerializer(1)\n        with self.assertRaises(NotImplementedError):\n            serializer.serialize()\n\n    def test_base_sequence_serializer(self):\n        serializer = BaseSequenceSerializer([1, 2, 3])\n        with self.assertRaises(NotImplementedError):\n            serializer._format()\n\n    def test_base_simple_serializer(self):\n        serializer = BaseSimpleSerializer(1)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, '1')\n        self.assertEqual(imports, set())\n\n    def test_choices_serializer(self):\n        choices = models.Choices([('A', 'Choice A'), ('B', 'Choice B')])\n        serializer = ChoicesSerializer(choices)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'models.Choices([(\"A\", \"Choice A\"), (\"B\", \"Choice B\")])')\n        self.assertEqual(imports, {'from django.db import models'})\n\n    def test_datetime_serializer(self):\n        serializer = DateTimeSerializer(timezone.now().date())\n        result, imports = serializer.serialize()\n        self.assertEqual(imports, {'import datetime'})\n        self.assertIn(str(timezone.now().date()), result)\n\n    def test_datetimedatetime_serializer(self):\n        now = timezone.now()\n        serializer = DatetimeDatetimeSerializer(now)\n        result, imports = serializer.serialize()\n        self.assertEqual(imports, [\"import datetime\", \"from django.utils.timezone import utc\"])\n        self.assertEqual(result, repr(now.astimezone(utc)).replace('<UTC>', 'utc'))\n\n    def test_decimal_serializer(self):\n        serializer = DecimalSerializer(decimal.Decimal('1.23'))\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'Decimal(\"1.23\")')\n        self.assertEqual(imports, {\"from decimal import Decimal\"})\n\n    def test_deconstructable_serializer(self):\n        class MyClass:\n            def deconstruct(self):\n                return 'path.to.MyClass', [], {}\n\n        serializer = DeconstructableSerializer(MyClass())\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'path.to.MyClass()')\n        self.assertEqual(imports, {'import path.to'})\n\n    def test_dictionary_serializer(self):\n        serializer = DictionarySerializer({'a': 1, 'b': 2})\n        result, imports = serializer.serialize()\n        self.assertEqual(result, \"{'a': 1, 'b': 2}\")\n        self.assertEqual(imports, set())\n\n    def test_enum_serializer(self):\n        class MyEnum(enum.Enum):\n            VALUE1 = 1\n            VALUE2 = 2\n\n        serializer = EnumSerializer(MyEnum.VALUE1)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'MyEnum.VALUE1')\n        self.assertEqual(imports, {'import __main__'})\n\n    def test_float_serializer(self):\n        serializer = FloatSerializer(3.14)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, '3.14')\n        self.assertEqual(imports, set())\n\n    def test_frozenset_serializer(self):\n        serializer = FrozensetSerializer(frozenset([1, 2, 3]))\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'frozenset([1, 2, 3])')\n        self.assertEqual(imports, set())\n\n    def test_function_type_serializer(self):\n        def my_function():\n            pass\n\n        serializer = FunctionTypeSerializer(my_function)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, '__main__.my_function')\n        self.assertEqual(imports, {'import __main__'})\n\n    def test_functools_partial_serializer(self):\n        def my_function(a, b):\n            return a + b\n\n        partial_function = functools.partial(my_function, 1)\n        serializer = FunctoolsPartialSerializer(partial_function)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'functools.partial(my_function, 1)')\n        self.assertEqual(imports, {'import functools'})\n\n    def test_iterable_serializer(self):\n        serializer = IterableSerializer([1, 2, 3])\n        result, imports = serializer.serialize()\n        self.assertEqual(result, '(1, 2, 3)')\n        self.assertEqual(imports, set())\n\n    def test_model_field_serializer(self):\n        field = models.CharField(max_length=100)\n        serializer = ModelFieldSerializer(field)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'models.CharField(max_length=100)')\n        self.assertEqual(imports, {'from django.db import models'})\n\n    def test_model_manager_serializer(self):\n        manager = models.Manager()\n        serializer = ModelManagerSerializer(manager)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'models.Manager()')\n        self.assertEqual(imports, {'from django.db import models'})\n\n    def test_operation_serializer(self):\n        operation = Operation(name='test_operation')\n        serializer = OperationSerializer(operation)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'test_operation()')\n        self.assertEqual(imports, set())\n\n    def test_regex_serializer(self):\n        regex = re.compile(r'^[a-zA-Z]+$')\n        serializer = RegexSerializer(regex)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 're.compile(r\"^\\\\^[a-zA-Z]+\\\\$\")')\n        self.assertEqual(imports, {'import re'})\n\n    def test_sequence_serializer(self):\n        serializer = SequenceSerializer([1, 2, 3])\n        result, imports = serializer.serialize()\n        self.assertEqual(result, '[1, 2, 3]')\n        self.assertEqual(imports, set())\n\n    def test_set_serializer(self):\n        serializer = SetSerializer({1, 2, 3})\n        result, imports = serializer.serialize()\n        self.assertEqual(result, '{1, 2, 3}')\n        self.assertEqual(imports, set())\n\n    def test_settings_reference_serializer(self):\n        setting = settings.DEBUG\n        serializer = SettingsReferenceSerializer(setting)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'settings.DEBUG')\n        self.assertEqual(imports, {'from django.conf import settings'})\n\n    def test_tuple_serializer(self):\n        serializer = TupleSerializer((1, 2, 3))\n        result, imports = serializer.serialize()\n        self.assertEqual(result, '(1, 2, 3)')\n        self.assertEqual(imports, set())\n\n    def test_type_serializer(self):\n        serializer = TypeSerializer(int)\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'int')\n        self.assertEqual(imports, set())\n\n    def test_uuid_serializer(self):\n        serializer = UUIDSerializer(uuid.UUID('a1b2c3d4-e5f6-7890-1234-567890abcdef'))\n        result, imports = serializer.serialize()\n        self.assertEqual(result, 'uuid.UUID(\"a1b2c3d4-e5f6-7890-1234-567890abcdef\")')\n        self.assertEqual(imports, {'import uuid'})\n\n    def test_serializer_factory_promise(self):\n        promise = Promise(lambda: 'test')\n        result, imports = serializer_factory(promise).serialize()\n        self.assertEqual(result, \"'test'\")\n        self.assertEqual(imports, set())\n\n    def test_serializer_factory_lazyobject(self):\n        lazy_object = LazyObject(lambda: 'test')\n        result, imports = serializer_factory(lazy_object).serialize()\n        self.assertEqual(result, \"'test'\")\n        self.assertEqual(imports, set())\n\n    def test_serializer_factory_modelfield(self):\n        field = models.CharField(max_length=100)\n        result, imports = serializer_factory(field).serialize()\n        self.assertEqual(result, 'models.CharField(max_length=100)')\n        self.assertEqual(imports, {'from django.db import models'})\n\n    def test_serializer_factory_modelmanager(self):\n        manager = models.Manager()\n        result, imports = serializer_factory(manager).serialize()\n        self.assertEqual(result, 'models.Manager()')\n        self.assertEqual(imports, {'from django.db import models'})\n\n    def test_serializer_factory_operation(self):\n        operation = Operation(name='test_operation')\n        result, imports = serializer_factory(operation).serialize()\n        self.assertEqual(result, 'test_operation()')\n        self.assertEqual(imports, set())\n\n    def test_serializer_factory_type(self):\n        result, imports = serializer_factory(int).serialize()\n        self.assertEqual(result, 'int')\n        self.assertEqual(imports, set())\n\n    def test_serializer_factory_deconstructable(self):\n        class MyClass:\n            def deconstruct(self):\n                return 'path.to.MyClass', [], {}\n\n        result, imports = serializer_factory(MyClass()).serialize()\n        self.assertEqual(result, 'path.to.MyClass()')\n        self.assertEqual(imports, {'import path.to'})\n\n    def test_serializer_factory_unknown_type(self):\n        with self.assertRaises(ValueError):\n            serializer_factory(object())\n\n"], "sample_118": ["\nfrom sympy import symbols, Eq, Piecewise, sin, cos, Abs, ceiling, floor, Rational, Matrix, MatrixSymbol, IndexedBase, Idx, Function, pi, exp, log\nfrom sympy.printing.ccode import CCodePrinter, ccode\nfrom sympy.core.compatibility import range\n\ndef test_basic_arithmetic():\n    x, y = symbols('x y')\n    assert ccode(x + y) == 'x + y'\n    assert ccode(x - y) == 'x - y'\n    assert ccode(x * y) == 'x*y'\n    assert ccode(x / y) == 'x/y'\n    assert ccode(x**2) == 'pow(x, 2)'\n    assert ccode(2*x) == '2*x'\n\ndef test_functions():\n    x = symbols('x')\n    assert ccode(sin(x)) == 'sin(x)'\n    assert ccode(cos(x)) == 'cos(x)'\n    assert ccode(Abs(x)) == 'fabs(x)'\n    assert ccode(ceiling(x)) == 'ceil(x)'\n    assert ccode(floor(x)) == 'floor(x)'\n    assert ccode(exp(x)) == 'exp(x)'\n    assert ccode(log(x)) == 'log(x)'\n\ndef test_rationals():\n    assert ccode(Rational(1, 2)) == '0.5L'\n    assert ccode(Rational(3, 4)) == '0.75L'\n\ndef test_piecewise():\n    x = symbols('x')\n    pw = Piecewise((x + 1, x > 0), (x, True))\n    assert ccode(pw) == '((x > 0) ? (x + 1) : (x))'\n\ndef test_assign_to():\n    x, y = symbols('x y')\n    assert ccode(x + y, assign_to='z') == 'z = x + y;'\n\ndef test_matrix():\n    A = MatrixSymbol('A', 2, 2)\n    B = Matrix([[1, 2], [3, 4]])\n    assert ccode(B, A) == 'A[0] = 1;\\nA[1] = 2;\\nA[2] = 3;\\nA[3] = 4;'\n\ndef test_indexed():\n    i = symbols('i')\n    x = IndexedBase('x', shape=(5,))\n    assert ccode(x[i], assign_to='y') == 'y = x[i];'\n\ndef test_loops():\n    i = Idx('i', 5)\n    x = IndexedBase('x', shape=(5,))\n    expr = x[i]\n    assert ccode(expr, contract=True) == 'for (int i=0; i<5; i++){\\nx[i];\\n}'\n\ndef test_user_functions():\n    x = symbols('x')\n    custom_functions = {'myfunc': 'MYFUNC'}\n    assert ccode(Function('myfunc')(x), user_functions=custom_functions) == 'MYFUNC(x)'\n\ndef test_dereference():\n    x = symbols('x')\n    assert ccode(x, dereference=[x]) == '(*x)'\n\ndef test_constants():\n    assert ccode(pi) == 'M_PI'\n    assert ccode(exp(1)) == 'M_E'\n\ndef test_complex():\n    assert ccode(1 + 2j) == '1.0 + 2.0*I'\n\ndef test_for_loop():\n    n = symbols('n')\n    assert ccode(sum(i for i in range(n)), assign_to='sum') == 'sum = 0;\\nfor (int i=0; i<n; i++){\\nsum += i;\\n}'\n\ndef test_equation():\n    x, y = symbols('x y')\n    eq = Eq(x, y + 1)\n    assert ccode(eq) == 'x = y + 1;'\n\ndef test_Piecewise_with_default():\n    x = symbols('x')\n    pw = Piecewise((x + 1, x > 0), (x, True))\n    assert ccode(pw) == '((x > 0) ? (x + 1) : (x))'\n\ndef test_Piecewise_without_default():\n    x = symbols('x')\n    pw = Piecewise((x + 1, x > 0))\n    try:\n        ccode(pw)\n    except ValueError as e:\n        assert str(e) == \"All Piecewise expressions must contain an (expr, True) statement to be used as a default condition. Without one, the generated expression may not evaluate to anything under some condition.\"\n\ndef test_sign():\n    x = symbols('x')\n    assert ccode(sign(x)) == '((x > 0) - (x < 0))'\n\ndef test_augmented_assignment():\n    x, y = symbols('x y')\n    assert ccode(x += y) == 'x += y;'\n\ndef test_reserved_words():\n    x = symbols('if')\n    assert ccode(x) == 'if_'\n\n\n\n"], "sample_133": ["\nimport unittest\nfrom sympy.utilities.codegen import (\n    codegen, make_routine, CCodeGen, C89CodeGen, C99CodeGen, InputArgument,\n    CodeGenError, FCodeGen, CodeGenArgumentListError, OutputArgument,\n    InOutArgument, JuliaCodeGen, OctaveCodeGen, RustCodeGen\n)\nfrom sympy.abc import x, y, z, f, g\nfrom sympy import Eq, Matrix\n\nclass TestCodegen(unittest.TestCase):\n\n    def test_codegen_simple(self):\n        code = codegen(\n            (\"f\", x + y), \"C\", \"test\", header=False, empty=False\n        )\n        self.assertEqual(code[0], 'test.c')\n        self.assertIn('#include \"test.h\"', code[1])\n        self.assertIn('double f(double x, double y) {', code[1])\n\n    def test_codegen_multiple_outputs(self):\n        code = codegen(\n            (\"f\", [Eq(f, 2*x), Eq(g, x + y)]), \"C\", \"test\", header=False,\n            empty=False\n        )\n        self.assertIn('void f(double x, double y, double *f, double *g) {', code[1])\n        self.assertIn('(*f) = 2*x;', code[1])\n        self.assertIn('(*g) = x + y;', code[1])\n\n    def test_codegen_global_vars(self):\n        code = codegen(\n            (\"f\", x + y*z), \"F95\", \"test\", header=False, empty=False,\n            argument_sequence=(x, y), global_vars=(z,)\n        )\n        self.assertIn('REAL*8 function f(x, y)', code[1])\n        self.assertIn('implicit none', code[1])\n        self.assertIn('REAL*8, intent(in) :: x', code[1])\n        self.assertIn('REAL*8, intent(in) :: y', code[1])\n        self.assertIn('f = x + y*z', code[1])\n\n    def test_make_routine(self):\n        r = make_routine('test', [Eq(f, 2*x), Eq(g, x + y)])\n        self.assertEqual(r.name, 'test')\n        self.assertEqual(len(r.results), 2)\n        self.assertEqual(len(r.arguments), 4)\n\n    def test_make_routine_matrix(self):\n        r = make_routine('fcn', [x*y, Eq(f, 1), Eq(g, x + g), Matrix([[x, 2]])])\n        self.assertEqual(len(r.results), 4)\n        self.assertEqual(len(r.arguments), 5)\n\n    def test_codegen_julia(self):\n        code = codegen(\n            (\"f\", x + y), \"JULIA\", \"test\", header=False, empty=False\n        )\n        self.assertEqual(code[0], 'test.jl')\n        self.assertIn('function f(x, y)', code[1])\n        self.assertIn('return x + y', code[1])\n\n    def test_codegen_octave(self):\n        code = codegen(\n            (\"f\", x + y), \"OCTAVE\", \"test\", header=False, empty=False\n        )\n        self.assertEqual(code[0], 'test.m')\n        self.assertIn('function f = test(x, y)', code[1])\n        self.assertIn('f = x + y;', code[1])\n\n    def test_codegen_rust(self):\n        code = codegen(\n            (\"f\", x + y), \"RUST\", \"test\", header=False, empty=False\n        )\n        self.assertEqual(code[0], 'test.rs')\n        self.assertIn('fn f(x: f64, y: f64) -> f64', code[1])\n        self.assertIn('let f = x + y;', code[1])\n\n    def test_codegen_argument_order(self):\n        code = codegen(\n            (\"f\", x + y), \"C\", \"test\", header=False, empty=False,\n            argument_sequence=(y, x)\n        )\n        self.assertIn('double f(double y, double x) {', code[1])\n\n    def test_codegen_error_missing_argument(self):\n        with self.assertRaises(CodeGenArgumentListError):\n            codegen(\n                (\"f\", x + y), \"C\", \"test\", header=False, empty=False,\n                argument_sequence=(z,)\n            )\n\n    def test_codegen_error_invalid_language(self):\n        with self.assertRaises(ValueError):\n            codegen(\n                (\"f\", x + y), \"INVALID\", \"test\", header=False, empty=False\n            )\n\n\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_27": ["\nfrom unittest.mock import patch, MagicMock\n\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.tokens import PasswordResetTokenGenerator, default_token_generator\nfrom django.utils import timezone\n\nclass PasswordResetTokenGeneratorTests(object):\n\n    def setUp(self):\n        self.generator = PasswordResetTokenGenerator()\n        self.user = User.objects.create_user(username='testuser', password='password')\n\n    def test_make_token(self):\n        token = self.generator.make_token(self.user)\n        self.assertIsInstance(token, str)\n\n    def test_check_token_valid(self):\n        token = self.generator.make_token(self.user)\n        self.assertTrue(self.generator.check_token(self.user, token))\n\n    def test_check_token_invalid_user(self):\n        token = self.generator.make_token(self.user)\n        self.assertFalse(self.generator.check_token(User.objects.create_user(username='anotheruser', password='password'), token))\n\n    def test_check_token_invalid_token(self):\n        self.assertFalse(self.generator.check_token(self.user, 'invalid-token'))\n\n    def test_check_token_expired(self):\n        token = self.generator.make_token(self.user)\n        with patch('django.utils.timezone.now') as mock_now:\n            mock_now.return_value = timezone.now() + timezone.timedelta(days=2)\n            self.assertFalse(self.generator.check_token(self.user, token))\n\n    @patch('django.contrib.auth.tokens.settings')\n    def test_check_token_legacy_token(self, mock_settings):\n        mock_settings.PASSWORD_RESET_TIMEOUT = 3600\n        token = default_token_generator._make_token_with_timestamp(self.user, 1678886400, legacy=True)\n        self.assertTrue(default_token_generator.check_token(self.user, token))\n\n    def test_make_hash_value(self):\n        hash_value = self.generator._make_hash_value(self.user, 1678886400)\n        self.assertIsInstance(hash_value, str)\n\n    def test_num_seconds(self):\n        dt = timezone.now()\n        seconds = self.generator._num_seconds(dt)\n        self.assertIsInstance(seconds, int)\n\n    @patch('django.utils.timezone.now')\n    def test_now(self, mock_now):\n        mock_now.return_value = timezone.now()\n        now = self.generator._now()\n        self.assertEqual(now, timezone.now())\n\n\n\n"], "sample_61": ["\nimport unittest\n\nfrom django.utils.numberformat import format as nformat\nfrom django.conf import settings\n\nclass NumberFormatTests(unittest.TestCase):\n\n    def test_format_int(self):\n        self.assertEqual(nformat(12345, \".\", 2), \"12345.00\")\n\n    def test_format_float(self):\n        self.assertEqual(nformat(12345.6789, \".\", 2), \"12345.68\")\n\n    def test_format_decimal(self):\n        from decimal import Decimal\n        self.assertEqual(nformat(Decimal(\"12345.6789\"), \".\", 2), \"12345.68\")\n\n    def test_format_scientific_notation(self):\n        self.assertEqual(nformat(1.23456789e100, \".\", 2), \"1.23e+100\")\n\n    def test_format_negative_number(self):\n        self.assertEqual(nformat(-12345.6789, \".\", 2), \"-12345.68\")\n\n    def test_format_no_decimal_places(self):\n        self.assertEqual(nformat(12345.6789, \".\", None), \"12346\")\n\n    def test_format_grouping(self):\n        self.assertEqual(nformat(123456789, \".\", 2, grouping=3, thousand_sep=\",\"), \"123,456,789.00\")\n\n    def test_format_grouping_non_uniform(self):\n        self.assertEqual(nformat(123456789, \".\", 2, grouping=(3, 2, 0), thousand_sep=\",\"), \"123,45,6789.00\")\n\n    def test_format_force_grouping(self):\n        self.assertEqual(nformat(12345, \".\", 2, force_grouping=True), \"12,345.00\")\n\n    def test_format_use_l10n(self):\n        settings.USE_L10N = True\n        settings.USE_THOUSAND_SEPARATOR = True\n        self.assertEqual(nformat(123456789, \".\", 2), \"123,456,789.00\")\n\n    def test_format_none(self):\n        self.assertEqual(nformat(None, \".\", 2), \"\")\n\n    def test_format_empty_string(self):\n        self.assertEqual(nformat(\"\", \".\", 2), \"\")\n\n"], "sample_112": ["\nimport unittest\nimport numpy as np\nfrom sklearn.isotonic import (\n    check_increasing,\n    isotonic_regression,\n    IsotonicRegression,\n    _make_unique,\n)\nfrom sklearn.utils.testing import assert_array_equal, assert_allclose\nfrom sklearn.utils.validation import check_is_fitted\n\n\nclass TestCheckIncreasing(unittest.TestCase):\n    def test_check_increasing_positive(self):\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([1, 2, 3, 4, 5])\n        self.assertTrue(check_increasing(x, y))\n\n    def test_check_increasing_negative(self):\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([5, 4, 3, 2, 1])\n        self.assertFalse(check_increasing(x, y))\n\n    def test_check_increasing_constant(self):\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([2, 2, 2, 2, 2])\n        self.assertTrue(check_increasing(x, y))\n\n    def test_check_increasing_random(self):\n        x = np.random.rand(100)\n        y = np.random.rand(100)\n        result = check_increasing(x, y)\n        self.assertIsInstance(result, bool)\n\n    def test_check_increasing_empty(self):\n        x = np.array([])\n        y = np.array([])\n        self.assertTrue(check_increasing(x, y))\n\nclass TestIsotonicRegression(unittest.TestCase):\n    def test_isotonic_regression_increasing(self):\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([1, 3, 5, 7, 9])\n        y_pred = isotonic_regression(y, increasing=True)\n        assert_array_equal(y_pred, y)\n\n    def test_isotonic_regression_decreasing(self):\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([9, 7, 5, 3, 1])\n        y_pred = isotonic_regression(y, increasing=False)\n        assert_array_equal(y_pred, y)\n\n    def test_isotonic_regression_bounds(self):\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([1, 3, 5, 7, 9])\n        y_pred = isotonic_regression(y, y_min=0, y_max=10, increasing=True)\n        assert_array_equal(y_pred, np.clip(y, 0, 10))\n\n    def test_isotonic_regression_weights(self):\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([1, 3, 5, 7, 9])\n        weights = np.array([1, 2, 1, 2, 1])\n        y_pred = isotonic_regression(y, sample_weight=weights, increasing=True)\n        self.assertTrue(np.all(y_pred >= y))\n\n    def test_isotonic_regression_empty(self):\n        y = np.array([])\n        y_pred = isotonic_regression(y, increasing=True)\n        assert_array_equal(y_pred, y)\n\nclass TestIsotonicRegressionClass(unittest.TestCase):\n    def test_fit_predict(self):\n        X = np.array([1, 2, 3, 4, 5])\n        y = np.array([1, 3, 5, 7, 9])\n        model = IsotonicRegression()\n        model.fit(X, y)\n        y_pred = model.predict(X)\n        assert_array_equal(y_pred, y)\n\n    def test_transform(self):\n        X = np.array([1, 2, 3, 4, 5])\n        y = np.array([1, 3, 5, 7, 9])\n        model = IsotonicRegression()\n        model.fit(X, y)\n        y_pred = model.transform(X)\n        assert_array_equal(y_pred, y)\n\n    def test_out_of_bounds(self):\n        X = np.array([1, 2, 3, 4, 5])\n        y = np.array([1, 3, 5, 7, 9])\n        model = IsotonicRegression(out_of_bounds=\"clip\")\n        model.fit(X, y)\n        y_pred = model.predict([0, 6])\n        assert_array_equal(y_pred, [1, 9])\n\n    def test_increasing_auto(self):\n        X = np.array([1, 2, 3, 4, 5])\n        y = np.array([1, 3, 5, 7, 9])\n        model = IsotonicRegression(increasing=\"auto\")\n        model.fit(X, y)\n        self.assertTrue(model.increasing_)\n\n    def test_get_feature_names_out(self):\n        model = IsotonicRegression()\n        names = model.get_feature_names_out()\n        self.assertEqual(names[0], \"isotonicregression0\")\n\n    def test_not_fitted(self):\n        model = IsotonicRegression()\n        with self.assertRaises(NotFittedError):\n            model.predict([1, 2])\n\n    def test_persistence(self):\n        X = np.array([1, 2, 3, 4, 5])\n        y = np.array([1, 3, 5, 7, 9])\n        model = IsotonicRegression()\n        model.fit(X, y)\n        model_pickled = pickle.loads(pickle.dumps(model))\n        y_pred = model_pickled.predict(X)\n        assert_array_equal(y_pred, y)\n\nclass TestMakeUnique(unittest.TestCase):\n    def test_make_unique(self):\n        x = np.array([1, 2, 2, 3, 4, 4, 4, 5])\n        y = np.array([1, 2, 2, 3, 4, 4, 4, 5])\n        x_unique, y_unique = _make_unique(x, y)\n        assert_array_equal(x_unique, np.array([1, 2, 3, 4, 5]))\n        assert_array_equal(y_unique, np.array([1, 2, 3, 4, 5]))\n\n    def test_make_unique_empty(self):\n        x = np.array([])\n        y = np.array([])\n        x_unique, y_unique = _make_unique(x, y)\n        assert_array_equal(x_unique, np.array([]))\n        assert_array_equal(y_unique, np.array([]))\n\n"], "sample_70": ["\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import Patch\nfrom matplotlib.lines import Line2D\nfrom matplotlib.collections import PatchCollection\nfrom matplotlib.legend_handler import HandlerTuple\nimport matplotlib.legend as mlegend\n\ndef test_Legend_init():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    assert legend._loc == \"upper right\"\n\ndef test_Legend_set_draggable():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    legend.set_draggable(True)\n    assert legend._draggable is not None\n\ndef test_Legend_get_draggable():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    legend.set_draggable(True)\n    assert legend.get_draggable()\n\ndef test_Legend_set_title():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    legend.set_title(\"My Legend\")\n    assert legend._legend_title_box._text.get_text() == \"My Legend\"\n\ndef test_Legend_get_title():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    legend.set_title(\"My Legend\")\n    assert legend.get_title() == legend._legend_title_box._text\n\ndef test_Legend_get_frame():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    assert legend.get_frame() == legend.legendPatch\n\ndef test_Legend_get_lines():\n    fig, ax = plt.subplots()\n    line = ax.plot([1, 2, 3], [4, 5, 6])[0]\n    legend = mlegend.Legend(ax, [line], [\"Line\"])\n    assert legend.get_lines() == [line]\n\ndef test_Legend_get_patches():\n    fig, ax = plt.subplots()\n    patch = ax.add_patch(plt.Rectangle((0, 0), 1, 1))\n    legend = mlegend.Legend(ax, [patch], [\"Patch\"])\n    assert legend.get_patches() == [patch]\n\ndef test_Legend_get_texts():\n    fig, ax = plt.subplots()\n    text = ax.text(0.5, 0.5, \"Text\")\n    legend = mlegend.Legend(ax, [text], [\"Text\"])\n    assert legend.get_texts() == [text]\n\ndef test_Legend_get_bbox_to_anchor():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    assert legend.get_bbox_to_anchor() == ax.bbox\n\ndef test_Legend_set_bbox_to_anchor():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    legend.set_bbox_to_anchor((0.5, 0.5))\n    assert legend._bbox_to_anchor.bounds == (0.5, 0.5, 0, 0)\n\ndef test__get_legend_handles():\n    fig, ax = plt.subplots()\n    line = ax.plot([1, 2, 3], [4, 5, 6])[0]\n    patch = ax.add_patch(plt.Rectangle((0, 0), 1, 1))\n    handles = list(_get_legend_handles([ax]))\n    assert line in handles\n    assert patch in handles\n\ndef test__get_legend_handles_labels():\n    fig, ax = plt.subplots()\n    line = ax.plot([1, 2, 3], [4, 5, 6])[0]\n    patch = ax.add_patch(plt.Rectangle((0, 0), 1, 1))\n    line.set_label(\"Line\")\n    patch.set_label(\"Patch\")\n    handles, labels = _get_legend_handles_labels([ax])\n    assert handles == [line, patch]\n    assert labels == [\"Line\", \"Patch\"]\n\ndef test__parse_legend_args():\n    fig, ax = plt.subplots()\n    line = ax.plot([1, 2, 3], [4, 5, 6])[0]\n    patch = ax.add_patch(plt.Rectangle((0, 0), 1, 1))\n    line.set_label(\"Line\")\n    patch.set_label(\"Patch\")\n\n    handles, labels, extra_args, kwargs = _parse_legend_args([ax], line, patch)\n    assert handles == [line, patch]\n    assert labels == [\"Line\", \"Patch\"]\n\n    handles, labels, extra_args, kwargs = _parse_legend_args([ax], [\"Line\", \"Patch\"])\n    assert handles == [line, patch]\n    assert labels == [\"Line\", \"Patch\"]\n\n    handles, labels, extra_args, kwargs = _parse_legend_args([ax], handles=[line, patch], labels=[\"Line\", \"Patch\"])\n    assert handles == [line, patch]\n    assert labels == [\"Line\", \"Patch\"]\n\ndef test_Legend_contains():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    assert legend.contains(plt.Point(0, 0)) is None\n\ndef test_Legend_set_frame_on():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    legend.set_frame_on(False)\n    assert legend.legendPatch.get_visible() is False\n\ndef test_Legend_get_frame_on():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    assert legend.get_frame_on() is True\n\ndef test_Legend_set_alignment():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    legend.set_alignment(\"center\")\n    assert legend._alignment == \"center\"\n\ndef test_Legend_get_alignment():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    assert legend.get_alignment() == \"center\"\n\ndef test_Legend_get_window_extent():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    assert legend.get_window_extent() is not None\n\ndef test_Legend_get_tightbbox():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    assert legend.get_tightbbox() is not None\n\ndef test_Legend_get_children():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    assert len(legend.get_children()) == 2\n\ndef test_Legend_set_loc():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    legend.set_loc(\"best\")\n    assert legend._loc == \"best\"\n\ndef test_Legend_get_loc():\n    fig, ax = plt.subplots()\n    legend = mlegend.Legend(ax, [], [], loc=\"upper right\")\n    assert legend.get_loc() == \"upper right\"\n\n\n\n"], "sample_153": ["\nfrom sympy.printing.pretty.pretty import *\nfrom sympy import *\nfrom sympy.abc import *\nfrom sympy.matrices import *\nfrom sympy.physics.quantum import *\nfrom sympy.geometry import *\n\ndef test_pretty_basic():\n    assert pretty(1) == '1'\n    assert pretty(x) == 'x'\n    assert pretty(x + 1) == 'x + 1'\n    assert pretty(x**2) == 'x\u00b2'\n    assert pretty(sin(x)) == 'sin(x)'\n    assert pretty(Integral(x, x)) == '\u222b x dx'\n\ndef test_pretty_fractions():\n    assert pretty(1/2) == '\u00bd'\n    assert pretty(x/2) == 'x/2'\n    assert pretty(1/x) == '1/x'\n\ndef test_pretty_powers():\n    assert pretty(x**3) == 'x\u00b3'\n    assert pretty(x**(-1)) == '1/x'\n    assert pretty(x**(1/2)) == '\u221ax'\n\ndef test_pretty_functions():\n    assert pretty(exp(x)) == 'exp(x)'\n    assert pretty(log(x)) == 'log(x)'\n    assert pretty(sqrt(x)) == '\u221ax'\n\ndef test_pretty_matrices():\n    assert pretty(Matrix([[1, 2], [3, 4]])) == '\u23a11  2\u23a4\\n\u23a33  4\u23a6'\n\ndef test_pretty_quantum():\n    assert pretty(Ket('psi')) == '|\u03c8\u27e9'\n    assert pretty(Bra('phi')) == '\u27e8\u03c6|'\n\ndef test_pretty_geometry():\n    assert pretty(Point(1, 2)) == 'Point(1, 2)'\n    assert pretty(Line((0, 0), (1, 1))) == 'Line((0, 0), (1, 1))'\n\ndef test_pretty_complex():\n    assert pretty(1 + 2*I) == '1 + 2\u22c5i'\n\ndef test_pretty_limits():\n    assert pretty(Limit(sin(x)/x, x, 0)) == 'lim (x\u21920) sin(x)/x'\n\ndef test_pretty_sums():\n    assert pretty(Sum(x**i, (i, 1, 5))) == '\u2211_{i=1}^5 x^i'\n\ndef test_pretty_products():\n    assert pretty(Product(x**i, (i, 1, 5))) == '\u220f_{i=1}^5 x^i'\n\ndef test_pretty_integrals():\n    assert pretty(Integral(x**2, (x, 0, 1))) == '\u222b_{0}^{1} x\u00b2 dx'\n\ndef test_pretty_derivatives():\n    assert pretty(Derivative(sin(x), x)) == 'd/dx sin(x)'\n\ndef test_pretty_equations():\n    assert pretty(Eq(x, 2)) == 'x = 2'\n\ndef test_pretty_inequalities():\n    assert pretty(Lt(x, 2)) == 'x < 2'\n\ndef test_pretty_sets():\n    assert pretty({1, 2, 3}) == '{1, 2, 3}'\n\ndef test_pretty_tuples():\n    assert pretty((1, 2, 3)) == '(1, 2, 3)'\n\ndef test_pretty_lists():\n    assert pretty([1, 2, 3]) == '[1, 2, 3]'\n\ndef test_pretty_dictionaries():\n    assert pretty({1: 'a', 2: 'b'}) == '{1: a, 2: b}'\n\ndef test_pretty_symbols():\n    assert pretty(Symbol('x')) == 'x'\n    assert pretty(Symbol('alpha')) == '\u03b1'\n\ndef test_pretty_unicode():\n    assert pretty(pi) == '\u03c0'\n    assert pretty(Infinity) == '\u221e'\n\ndef test_pretty_settings():\n    assert pretty(x, use_unicode=False) == 'x'\n    assert pretty(x, wrap_line=False) == 'x'\n    assert pretty(x, num_columns=10) == 'x'\n\ndef test_pretty_custom_printer():\n    class MyPrinter(PrettyPrinter):\n        def _print_Symbol(self, expr):\n            return self._print(expr.name.upper())\n    assert MyPrinter().doprint(x) == 'X'\n\n"], "sample_106": ["\nimport unittest\nfrom sklearn.neighbors.nca import NeighborhoodComponentsAnalysis\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\nfrom sklearn.utils.estimator_checks import check_estimator\n\nclass TestNeighborhoodComponentsAnalysis(unittest.TestCase):\n\n    def test_nca_init(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis()\n        self.assertIsNone(nca.n_components)\n        self.assertEqual(nca.init, 'auto')\n        self.assertFalse(nca.warm_start)\n        self.assertEqual(nca.max_iter, 50)\n        self.assertEqual(nca.tol, 1e-5)\n        self.assertIsNone(nca.callback)\n        self.assertEqual(nca.verbose, 0)\n        self.assertIsNone(nca.random_state)\n\n    def test_nca_fit(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis()\n        nca.fit(X, y)\n        self.assertTrue(hasattr(nca, 'components_'))\n        self.assertTrue(hasattr(nca, 'n_iter_'))\n\n    def test_nca_transform(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis()\n        nca.fit(X, y)\n        X_transformed = nca.transform(X)\n        self.assertEqual(X_transformed.shape[1], nca.n_components)\n\n    def test_nca_warm_start(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis(warm_start=True)\n        nca.fit(X, y)\n        nca.fit(X, y)\n        self.assertTrue(hasattr(nca, 'components_'))\n\n    def test_nca_init_pca(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis(init='pca')\n        nca.fit(X, y)\n        self.assertTrue(hasattr(nca, 'components_'))\n\n    def test_nca_init_lda(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis(init='lda')\n        nca.fit(X, y)\n        self.assertTrue(hasattr(nca, 'components_'))\n\n    def test_nca_init_identity(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis(init='identity')\n        nca.fit(X, y)\n        self.assertTrue(hasattr(nca, 'components_'))\n\n    def test_nca_init_random(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis(init='random')\n        nca.fit(X, y)\n        self.assertTrue(hasattr(nca, 'components_'))\n\n    def test_nca_init_array(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis(init=np.random.rand(2, X.shape[1]))\n        nca.fit(X, y)\n        self.assertTrue(hasattr(nca, 'components_'))\n\n    def test_nca_n_components(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis(n_components=2)\n        nca.fit(X, y)\n        self.assertEqual(nca.components_.shape[0], 2)\n\n    def test_nca_max_iter(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis(max_iter=10)\n        nca.fit(X, y)\n        self.assertTrue(hasattr(nca, 'n_iter_'))\n        self.assertLessEqual(nca.n_iter_, 10)\n\n    def test_nca_tol(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis(tol=1e-6)\n        nca.fit(X, y)\n        self.assertTrue(hasattr(nca, 'n_iter_'))\n\n    def test_nca_callback(self):\n        X, y = load_iris(return_X_y=True)\n        callback_called = False\n        def callback(transformation):\n            nonlocal callback_called\n            callback_called = True\n        nca = NeighborhoodComponentsAnalysis(callback=callback)\n        nca.fit(X, y)\n        self.assertTrue(callback_called)\n\n    def test_nca_verbose(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis(verbose=1)\n        nca.fit(X, y)\n\n    def test_nca_random_state(self):\n        X, y = load_iris(return_X_y=True)\n        nca1 = NeighborhoodComponentsAnalysis(random_state=42)\n        nca2 = NeighborhoodComponentsAnalysis(random_state=42)\n        nca1.fit(X, y)\n        nca2.fit(X, y)\n        self.assertTrue(np.allclose(nca1.components_, nca2.components_))\n\n    def test_nca_estimator_checks(self):\n        check_estimator(NeighborhoodComponentsAnalysis())\n\n    def test_nca_kneighbors_classifier(self):\n        X, y = load_iris(return_X_y=True)\n        X_train, X_test, y_train, y_test = train_test_split(X, y,\n                                                        stratify=y,\n                                                        test_size=0.7,\n                                                        random_state=42)\n        nca = NeighborhoodComponentsAnalysis(random_state=42)\n        nca.fit(X_train, y_train)\n        knn = KNeighborsClassifier(n_neighbors=3)\n        knn.fit(X_train, y_train)\n        score_before = knn.score(X_test, y_test)\n        knn.fit(nca.transform(X_train), y_train)\n        score_after = knn.score(nca.transform(X_test), y_test)\n        self.assertGreater(score_after, score_before)\n\n"], "sample_79": ["\nimport pytest\nimport numpy as np\nimport pandas as pd\nfrom xarray import DataArray, Dataset, Variable, concat\n\ndef test_concat_datasets_identical():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    expected = Dataset({'a': (('x', 'y', 'concat_dim'),\n                             np.arange(12).reshape(2, 3, 2))},\n                       coords={'x': [0, 1], 'y': [0, 1, 2],\n                               'concat_dim': [0, 1]})\n    actual = concat([ds1, ds2], dim='concat_dim', compat='identical')\n    assert actual.equals(expected)\n\ndef test_concat_datasets_equals():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    expected = Dataset({'a': (('x', 'y', 'concat_dim'),\n                             np.arange(12).reshape(2, 3, 2))},\n                       coords={'x': [0, 1], 'y': [0, 1, 2],\n                               'concat_dim': [0, 1]})\n    actual = concat([ds1, ds2], dim='concat_dim', compat='equals')\n    assert actual.equals(expected)\n\ndef test_concat_datasets_broadcast_equals():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    expected = Dataset({'a': (('x', 'y', 'concat_dim'),\n                             np.arange(12).reshape(2, 3, 2))},\n                       coords={'x': [0, 1], 'y': [0, 1, 2],\n                               'concat_dim': [0, 1]})\n    actual = concat([ds1, ds2], dim='concat_dim', compat='broadcast_equals')\n    assert actual.equals(expected)\n\ndef test_concat_datasets_no_conflicts():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    expected = Dataset({'a': (('x', 'y', 'concat_dim'),\n                             np.arange(12).reshape(2, 3, 2))},\n                       coords={'x': [0, 1], 'y': [0, 1, 2],\n                               'concat_dim': [0, 1]})\n    actual = concat([ds1, ds2], dim='concat_dim', compat='no_conflicts')\n    assert actual.equals(expected)\n\ndef test_concat_datasets_override():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    expected = Dataset({'a': (('x', 'y', 'concat_dim'),\n                             np.arange(6).reshape(2, 3, 1))},\n                       coords={'x': [0, 1], 'y': [0, 1, 2],\n                               'concat_dim': [0]})\n    actual = concat([ds1, ds2], dim='concat_dim', compat='override')\n    assert actual.equals(expected)\n\ndef test_concat_dataarrays_identical():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'),\n                    coords={'x': [0, 1], 'y': [0, 1, 2]})\n    da2 = DataArray(np.arange(6).reshape(2, 3) + 6, dims=('x', 'y'),\n                    coords={'x': [0, 1], 'y': [0, 1, 2]})\n    expected = DataArray(np.arange(12).reshape(2, 3, 2), dims=('x', 'y', 'concat_dim'),\n                        coords={'x': [0, 1], 'y': [0, 1, 2], 'concat_dim': [0, 1]})\n    actual = concat([da1, da2], dim='concat_dim', compat='identical')\n    assert actual.equals(expected)\n\ndef test_concat_dataarrays_equals():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'),\n                    coords={'x': [0, 1], 'y': [0, 1, 2]})\n    da2 = DataArray(np.arange(6).reshape(2, 3) + 6, dims=('x', 'y'),\n                    coords={'x': [0, 1], 'y': [0, 1, 2]})\n    expected = DataArray(np.arange(12).reshape(2, 3, 2), dims=('x', 'y', 'concat_dim'),\n                        coords={'x': [0, 1], 'y': [0, 1, 2], 'concat_dim': [0, 1]})\n    actual = concat([da1, da2], dim='concat_dim', compat='equals')\n    assert actual.equals(expected)\n\ndef test_concat_dataarrays_broadcast_equals():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'),\n                    coords={'x': [0, 1], 'y': [0, 1, 2]})\n    da2 = DataArray(np.arange(6).reshape(2, 3) + 6, dims=('x', 'y'),\n                    coords={'x': [0, 1], 'y': [0, 1, 2]})\n    expected = DataArray(np.arange(12).reshape(2, 3, 2), dims=('x', 'y', 'concat_dim'),\n                        coords={'x': [0, 1], 'y': [0, 1, 2], 'concat_dim': [0, 1]})\n    actual = concat([da1, da2], dim='concat_dim', compat='broadcast_equals')\n    assert actual.equals(expected)\n\ndef test_concat_dataarrays_no_conflicts():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'),\n                    coords={'x': [0, 1], 'y': [0, 1, 2]})\n    da2 = DataArray(np.arange(6).reshape(2, 3) + 6, dims=('x', 'y'),\n                    coords={'x': [0, 1], 'y': [0, 1, 2]})\n    expected = DataArray(np.arange(12).reshape(2, 3, 2), dims=('x', 'y', 'concat_dim'),\n                        coords={'x': [0, 1], 'y': [0, 1, 2], 'concat_dim': [0, 1]})\n    actual = concat([da1, da2], dim='concat_dim', compat='no_conflicts')\n    assert actual.equals(expected)\n\ndef test_concat_dataarrays_override():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'),\n                    coords={'x': [0, 1], 'y': [0, 1, 2]})\n    da2 = DataArray(np.arange(6).reshape(2, 3) + 6, dims=('x', 'y'),\n                    coords={'x': [0, 1], 'y': [0, 1, 2]})\n    expected = DataArray(np.arange(6).reshape(2, 3, 1), dims=('x', 'y', 'concat_dim'),\n                        coords={'x': [0, 1], 'y': [0, 1, 2], 'concat_dim': [0]})\n    actual = concat([da1, da2], dim='concat_dim', compat='override')\n    assert actual.equals(expected)\n\ndef test_concat_datasets_different_coords():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'y': [0, 1, 2], 'z': [0, 1]})\n    with pytest.raises(ValueError):\n        concat([ds1, ds2], dim='concat_dim', compat='identical')\n\ndef test_concat_datasets_different_data_vars():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'b': (('x', 'y'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    with pytest.raises(ValueError):\n        concat([ds1, ds2], dim='concat_dim', data_vars='minimal')\n\ndef test_concat_datasets_different_dims():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'z'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'z': [0, 1, 2]})\n    with pytest.raises(ValueError):\n        concat([ds1, ds2], dim='concat_dim')\n\ndef test_concat_dataarrays_different_dims():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'))\n    da2 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'z'))\n    with pytest.raises(ValueError):\n        concat([da1, da2], dim='concat_dim')\n\ndef test_concat_datasets_empty():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset()\n    expected = Dataset({'a': (('x', 'y', 'concat_dim'),\n                             np.arange(6).reshape(2, 3, 1))},\n                       coords={'x': [0, 1], 'y': [0, 1, 2],\n                               'concat_dim': [0]})\n    actual = concat([ds1, ds2], dim='concat_dim', compat='override')\n    assert actual.equals(expected)\n\ndef test_concat_dataarrays_empty():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'))\n    da2 = DataArray()\n    expected = DataArray(np.arange(6).reshape(2, 3, 1), dims=('x', 'y', 'concat_dim'),\n                        coords={'concat_dim': [0]})\n    actual = concat([da1, da2], dim='concat_dim', compat='override')\n    assert actual.equals(expected)\n\ndef test_concat_datasets_positions():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    expected = Dataset({'a': (('x', 'y', 'concat_dim'),\n                             np.array([np.arange(6).reshape(2, 3),\n                                       np.arange(6).reshape(2, 3) + 6]).transpose(2, 0, 1))},\n                       coords={'x': [0, 1], 'y': [0, 1, 2],\n                               'concat_dim': [0, 1]})\n    actual = concat([ds1, ds2], dim='concat_dim', positions=[[0, 1], [2, 3]])\n    assert actual.equals(expected)\n\ndef test_concat_dataarrays_positions():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'))\n    da2 = DataArray(np.arange(6).reshape(2, 3) + 6, dims=('x', 'y'))\n    expected = DataArray(np.array([np.arange(6).reshape(2, 3),\n                                  np.arange(6).reshape(2, 3) + 6]).transpose(2, 0, 1),\n                        dims=('x', 'y', 'concat_dim'))\n    actual = concat([da1, da2], dim='concat_dim', positions=[[0, 1], [2, 3]])\n    assert actual.equals(expected)\n\ndef test_concat_datasets_fill_value():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    expected = Dataset({'a': (('x', 'y', 'concat_dim'),\n                             np.arange(12).reshape(2, 3, 2))},\n                       coords={'x': [0, 1], 'y': [0, 1, 2],\n                               'concat_dim': [0, 1]})\n    actual = concat([ds1, ds2], dim='concat_dim', fill_value=-1)\n    assert actual.equals(expected)\n\ndef test_concat_dataarrays_fill_value():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'))\n    da2 = DataArray(np.arange(6).reshape(2, 3) + 6, dims=('x', 'y'))\n    expected = DataArray(np.arange(12).reshape(2, 3, 2), dims=('x', 'y', 'concat_dim'))\n    actual = concat([da1, da2], dim='concat_dim', fill_value=-1)\n    assert actual.equals(expected)\n\ndef test_concat_datasets_join():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'z'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'z': [0, 1, 2]})\n    with pytest.raises(ValueError):\n        concat([ds1, ds2], dim='concat_dim', join='inner')\n\ndef test_concat_dataarrays_join():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'))\n    da2 = DataArray(np.arange(6).reshape(2, 3) + 6, dims=('x', 'z'))\n    with pytest.raises(ValueError):\n        concat([da1, da2], dim='concat_dim', join='inner')\n\ndef test_concat_datasets_join_outer():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'z'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'z': [0, 1, 2]})\n    expected = Dataset({'a': (('x', 'y', 'z', 'concat_dim'),\n                             np.array([[[np.arange(6).reshape(2, 3)] * 3],\n                                       [[np.arange(6).reshape(2, 3) + 6] * 3]]).transpose(3, 0, 1, 2))},\n                       coords={'x': [0, 1], 'y': [0, 1, 2], 'z': [0, 1, 2],\n                               'concat_dim': [0, 1]})\n    actual = concat([ds1, ds2], dim='concat_dim', join='outer')\n    assert actual.equals(expected)\n\ndef test_concat_dataarrays_join_outer():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'))\n    da2 = DataArray(np.arange(6).reshape(2, 3) + 6, dims=('x', 'z'))\n    expected = DataArray(np.array([[[np.arange(6).reshape(2, 3)] * 3],\n                                  [[np.arange(6).reshape(2, 3) + 6] * 3]]).transpose(3, 0, 1, 2),\n                        dims=('x', 'y', 'z', 'concat_dim'))\n    actual = concat([da1, da2], dim='concat_dim', join='outer')\n    assert actual.equals(expected)\n\ndef test_concat_datasets_join_left():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'z'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'z': [0, 1, 2]})\n    expected = Dataset({'a': (('x', 'y', 'concat_dim'),\n                             np.array([np.arange(6).reshape(2, 3),\n                                       np.full((2, 3), np.nan)]).transpose(2, 0, 1))},\n                       coords={'x': [0, 1], 'y': [0, 1, 2],\n                               'concat_dim': [0, 1]})\n    actual = concat([ds1, ds2], dim='concat_dim', join='left')\n    assert actual.equals(expected)\n\ndef test_concat_dataarrays_join_left():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'))\n    da2 = DataArray(np.arange(6).reshape(2, 3) + 6, dims=('x', 'z'))\n    expected = DataArray(np.array([np.arange(6).reshape(2, 3),\n                                  np.full((2, 3), np.nan)]).transpose(2, 0, 1),\n                        dims=('x', 'y', 'concat_dim'))\n    actual = concat([da1, da2], dim='concat_dim', join='left')\n    assert actual.equals(expected)\n\ndef test_concat_datasets_join_right():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'z'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'z': [0, 1, 2]})\n    expected = Dataset({'a': (('x', 'y', 'concat_dim'),\n                             np.array([np.full((2, 3), np.nan),\n                                       np.arange(6).reshape(2, 3)]).transpose(2, 0, 1))},\n                       coords={'x': [0, 1], 'y': [0, 1, 2],\n                               'concat_dim': [0, 1]})\n    actual = concat([ds1, ds2], dim='concat_dim', join='right')\n    assert actual.equals(expected)\n\ndef test_concat_dataarrays_join_right():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'))\n    da2 = DataArray(np.arange(6).reshape(2, 3) + 6, dims=('x', 'z'))\n    expected = DataArray(np.array([np.full((2, 3), np.nan),\n                                  np.arange(6).reshape(2, 3)]).transpose(2, 0, 1),\n                        dims=('x', 'y', 'concat_dim'))\n    actual = concat([da1, da2], dim='concat_dim', join='right')\n    assert actual.equals(expected)\n\ndef test_concat_datasets_join_exact():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    expected = Dataset({'a': (('x', 'y', 'concat_dim'),\n                             np.arange(12).reshape(2, 3, 2))},\n                       coords={'x': [0, 1], 'y': [0, 1, 2],\n                               'concat_dim': [0, 1]})\n    actual = concat([ds1, ds2], dim='concat_dim', join='exact')\n    assert actual.equals(expected)\n\ndef test_concat_dataarrays_join_exact():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'))\n    da2 = DataArray(np.arange(6).reshape(2, 3) + 6, dims=('x', 'y'))\n    expected = DataArray(np.arange(12).reshape(2, 3, 2), dims=('x', 'y', 'concat_dim'))\n    actual = concat([da1, da2], dim='concat_dim', join='exact')\n    assert actual.equals(expected)\n\ndef test_concat_datasets_join_override():\n    ds1 = Dataset({'a': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                  coords={'x': [0, 1], 'y': [0, 1, 2]})\n    ds2 = Dataset({'a': (('x', 'z'), np.arange(6).reshape(2, 3) + 6)},\n                  coords={'x': [0, 1], 'z': [0, 1, 2]})\n    expected = Dataset({'a': (('x', 'y', 'concat_dim'),\n                             np.arange(6).reshape(2, 3, 1))},\n                       coords={'x': [0, 1], 'y': [0, 1, 2],\n                               'concat_dim': [0]})\n    actual = concat([ds1, ds2], dim='concat_dim', join='override')\n    assert actual.equals(expected)\n\ndef test_concat_dataarrays_join_override():\n    da1 = DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'))\n    da2 = DataArray(np.arange(6).reshape(2, 3) + 6, dims=('x', 'z'))\n    expected = DataArray(np.arange(6).reshape(2, 3, 1), dims=('x', 'y', 'concat_dim'))\n    actual = concat([da1, da2], dim='concat_dim', join='override')\n    assert actual.equals(expected)\n\n"], "sample_81": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nfrom pylint.checkers import misc\nfrom pylint.lint import PyLinter\nfrom pylint.testutils import CheckerTestCase, Message\n\nclass MiscCheckerTest(CheckerTestCase):\n\n    CHECKER_CLASS = misc.EncodingChecker\n\n    def test_encoding_issue(self):\n        self.checker.file_encoding = 'ascii'\n        with self.checker.stream() as stream:\n            stream.write(b'\\xc3\\xa9')\n        self.assertEqual(self.checker.messages, [\n            Message('syntax-error', line=1, args='Cannot decode using encoding \\'ascii\\', bad encoding')\n        ])\n\n    def test_encoding_issue_with_coding_comment(self):\n        self.checker.file_encoding = 'ascii'\n        with self.checker.stream() as stream:\n            stream.write(b'# coding: utf-8\\n')\n            stream.write(b'\\xc3\\xa9')\n        self.assertEqual(self.checker.messages, [])\n\n    def test_fixme_warning(self):\n        self.checker.config.notes = ('FIXME', 'TODO')\n        with self.checker.stream() as stream:\n            stream.write(b'# FIXME: This is a fixme\\n')\n        self.assertEqual(self.checker.messages, [\n            Message('fixme', line=1, args='FIXME: This is a fixme', col_offset=1)\n        ])\n\n    def test_todo_warning(self):\n        self.checker.config.notes = ('FIXME', 'TODO')\n        with self.checker.stream() as stream:\n            stream.write(b'# TODO: This is a todo\\n')\n        self.assertEqual(self.checker.messages, [\n            Message('fixme', line=1, args='TODO: This is a todo', col_offset=1)\n        ])\n\n    def test_ignore_disable_pragma(self):\n        self.checker.config.notes = ('FIXME', 'TODO')\n        with self.checker.stream() as stream:\n            stream.write(b'# pylint: disable=fixme\\n')\n            stream.write(b'# FIXME: This is a fixme\\n')\n        self.assertEqual(self.checker.messages, [])\n\n    def test_bad_inline_option(self):\n        with self.checker.stream() as stream:\n            stream.write(b'# pylint: disable=unknown-message\\n')\n        self.assertEqual(self.checker.messages, [\n            Message('bad-inline-option', line=1, args='unknown-message', col_offset=1)\n        ])\n\n    def test_notes_rgx(self):\n        self.checker.config.notes_rgx = r'BUG'\n        with self.checker.stream() as stream:\n            stream.write(b'# BUG: This is a bug\\n')\n        self.assertEqual(self.checker.messages, [\n            Message('fixme', line=1, args='BUG: This is a bug', col_offset=1)\n        ])\n\nclass ByIdManagedMessagesCheckerTest(CheckerTestCase):\n\n    CHECKER_CLASS = misc.ByIdManagedMessagesChecker\n\n    @patch('pylint.checkers.misc.parse_pragma')\n    def test_use_symbolic_message_instead(self, mock_parse_pragma):\n        mock_parse_pragma.return_value = [\n            misc.ManagedMessage('module_name', 'W0001', 'symbol', 10, False)\n        ]\n        linter = PyLinter()\n        linter.register_checker(self.checker_class(linter))\n        linter._by_id_managed_msgs = [\n            ('module_name', 'W0001', 'symbol', 10, False)\n        ]\n        node = MagicMock()\n        node.name = 'module_name'\n        self.checker.process_module(node)\n        self.assertEqual(self.checker.messages, [\n            Message('use-symbolic-message-instead', line=10, args=\"'W0001' is cryptic: use '# pylint: enable=symbol' instead\")\n        ])\n\n\n\n"], "sample_126": ["\nimport unittest\nfrom sympy import (Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr)\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt, integer_log\nfrom sympy.core.numbers import (igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse)\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom sympy import pi\nfrom mpmath.libmp.libmpf import fnan\nfrom sympy import Pi\n\nclass TestNumbers(unittest.TestCase):\n\n    def test_Rational(self):\n        self.assertEqual(Rational(1, 2), S.Half)\n        self.assertEqual(Rational(3, 4), 3/4)\n        self.assertEqual(Rational(-2, 3), -2/3)\n\n    def test_Integer(self):\n        self.assertEqual(Integer(5), 5)\n        self.assertEqual(Integer(-3), -3)\n\n    def test_Float(self):\n        self.assertEqual(Float(3.14), 3.14)\n        self.assertEqual(Float(-2.718), -2.718)\n\n    def test_I(self):\n        self.assertEqual(I*I, -1)\n        self.assertEqual(1/I, -I)\n\n    def test_oo(self):\n        self.assertEqual(oo + 1, oo)\n        self.assertEqual(oo - 1, oo)\n\n    def test_nan(self):\n        self.assertTrue(nan != nan)\n        self.assertTrue(nan is S.NaN)\n\n    def test_pi(self):\n        self.assertEqual(pi, S.Pi)\n        self.assertTrue(pi > 3)\n\n    def test_E(self):\n        self.assertEqual(E, S.Exp1)\n        self.assertTrue(E > 2)\n\n    def test_GoldenRatio(self):\n        self.assertEqual(GoldenRatio, S.GoldenRatio)\n        self.assertTrue(GoldenRatio > 1)\n\n    def test_EulerGamma(self):\n        self.assertEqual(EulerGamma, S.EulerGamma)\n        self.assertTrue(EulerGamma > 0)\n\n    def test_Catalan(self):\n        self.assertEqual(Catalan, S.Catalan)\n        self.assertTrue(Catalan > 0)\n\n    def test_factorial(self):\n        self.assertEqual(factorial(5), 120)\n        self.assertEqual(factorial(0), 1)\n\n    def test_sqrt(self):\n        self.assertEqual(sqrt(4), 2)\n        self.assertEqual(sqrt(9), 3)\n\n    def test_cos(self):\n        self.assertAlmostEqual(cos(0), 1)\n        self.assertAlmostEqual(cos(pi/2), 0)\n\n    def test_exp(self):\n        self.assertAlmostEqual(exp(0), 1)\n        self.assertAlmostEqual(exp(1), E)\n\n    def test_log(self):\n        self.assertAlmostEqual(log(E), 1)\n        self.assertAlmostEqual(log(1), 0)\n\n    def test_sin(self):\n        self.assertAlmostEqual(sin(0), 0)\n        self.assertAlmostEqual(sin(pi/2), 1)\n\n    def test_fibonacci(self):\n        self.assertEqual(fibonacci(0), 0)\n        self.assertEqual(fibonacci(1), 1)\n        self.assertEqual(fibonacci(2), 1)\n        self.assertEqual(fibonacci(3), 2)\n\n    def test_sympify(self):\n        self.assertEqual(sympify(\"1/2\"), S.Half)\n        self.assertEqual(sympify(\"3.14\"), 3.14)\n        self.assertEqual(sympify(\"x\"), Symbol('x'))\n\n    def test_srepr(self):\n        self.assertEqual(srepr(S.Pi), \"S.Pi\")\n        self.assertEqual(srepr(Rational(1, 2)), \"Rational(1, 2)\")\n\n    def test_latex(self):\n        self.assertEqual(latex(S.Pi), r\"\\pi\")\n        self.assertEqual(latex(S.Infinity), r\"\\infty\")\n\n    def test_igcd(self):\n        self.assertEqual(igcd(12, 18), 6)\n        self.assertEqual(igcd(15, 25), 5)\n\n    def test_ilcm(self):\n        self.assertEqual(ilcm(12, 18), 36)\n        self.assertEqual(ilcm(15, 25), 75)\n\n    def test_igcdex(self):\n        self.assertEqual(igcdex(12, 18), (6, 2, -1))\n        self.assertEqual(igcdex(15, 25), (5, -1, 2))\n\n    def test_seterr(self):\n        seterr(0)\n        self.assertEqual(seterr(0), 0)\n\n    def test_mpf_norm(self):\n        self.assertEqual(mpf_norm(1.234), 1.234)\n        self.assertEqual(mpf_norm(-5.678), 5.678)\n\n    def test_comp(self):\n        self.assertEqual(comp(1, 2), -1)\n        self.assertEqual(comp(2, 1), 1)\n        self.assertEqual(comp(1, 1), 0)\n\n    def test_mod_inverse(self):\n        self.assertEqual(mod_inverse(3, 7), 5)\n        self.assertEqual(mod_inverse(5, 7), 3)\n\n    def test_integer_nthroot(self):\n        self.assertEqual(integer_nthroot(8, 3), 2)\n        self.assertEqual(integer_nthroot(27, 3), 3)\n\n    def test_isqrt(self):\n        self.assertEqual(isqrt(9), 3)\n        self.assertEqual(isqrt(16), 4)\n\n    def test_integer_log(self):\n        self.assertEqual(integer_log(8, 2), 3)\n        self.assertEqual(integer_log(27, 3), 3)\n\n    def test_Gt(self):\n        self.assertTrue(Gt(2, 1))\n        self.assertFalse(Gt(1, 2))\n\n    def test_Lt(self):\n        self.assertTrue(Lt(1, 2))\n        self.assertFalse(Lt(2, 1))\n\n    def test_Ge(self):\n        self.assertTrue(Ge(2, 1))\n        self.assertTrue(Ge(1, 1))\n        self.assertFalse(Ge(1, 2))\n\n    def test_Le(self):\n        self.assertTrue(Le(1, 2))\n        self.assertTrue(Le(1, 1))\n        self.assertFalse(Le(2, 1))\n\n    def test_AlgebraicNumber(self):\n        x = AlgebraicNumber(sqrt(2))\n        self.assertEqual(x.minpoly(), [1, 0, -2])\n\n    def test_simplify(self):\n        self.assertEqual(simplify(sqrt(8)), 2*sqrt(2))\n        self.assertEqual(simplify(1/sqrt(2)), sqrt(2)/2)\n\n    def test_Tuple(self):\n        t = Tuple(1, 2, 3)\n        self.assertEqual(t[0], 1)\n        self.assertEqual(t[1], 2)\n        self.assertEqual(t[2], 3)\n\n    def test_RealField(self):\n        r = RealField(10)\n        self.assertEqual(r.prec(), 10)\n\n"], "sample_109": ["\nimport unittest\nfrom unittest.mock import patch\nimport numpy as np\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom sklearn.model_selection import LeaveOneOut\nfrom sklearn.model_selection import LeaveOneGroupOut\nfrom sklearn.model_selection import LeavePOut\nfrom sklearn.model_selection import LeavePGroupsOut\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import GroupShuffleSplit\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.model_selection import PredefinedSplit\nfrom sklearn.model_selection import check_cv\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection._split import _validate_shuffle_split\nfrom sklearn.model_selection._split import _build_repr\n\nclass TestSplit(unittest.TestCase):\n\n    def test_KFold(self):\n        kf = KFold(n_splits=5)\n        X = np.arange(10)\n        for train_index, test_index in kf.split(X):\n            self.assertTrue(len(train_index) + len(test_index) == 10)\n\n    def test_StratifiedKFold(self):\n        y = np.array([0, 0, 1, 1, 1, 2, 2, 2, 2, 2])\n        skf = StratifiedKFold(n_splits=3)\n        for train_index, test_index in skf.split(X, y):\n            self.assertTrue(len(train_index) + len(test_index) == 10)\n\n    def test_GroupKFold(self):\n        X = np.arange(10)\n        groups = np.array([0, 0, 1, 1, 1, 2, 2, 2, 2, 2])\n        gkf = GroupKFold(n_splits=3)\n        for train_index, test_index in gkf.split(X, groups=groups):\n            self.assertTrue(len(train_index) + len(test_index) == 10)\n\n    def test_TimeSeriesSplit(self):\n        X = np.arange(10)\n        tss = TimeSeriesSplit(n_splits=3)\n        for train_index, test_index in tss.split(X):\n            self.assertTrue(train_index[-1] < test_index[0])\n\n    def test_LeaveOneOut(self):\n        loo = LeaveOneOut()\n        X = np.arange(10)\n        for train_index, test_index in loo.split(X):\n            self.assertTrue(len(train_index) + len(test_index) == 10)\n\n    def test_LeaveOneGroupOut(self):\n        X = np.arange(10)\n        groups = np.array([0, 0, 1, 1, 1, 2, 2, 2, 2, 2])\n        logo = LeaveOneGroupOut()\n        for train_index, test_index in logo.split(X, groups=groups):\n            self.assertTrue(len(train_index) + len(test_index) == 10)\n\n    def test_LeavePOut(self):\n        lpo = LeavePOut(p=2)\n        X = np.arange(10)\n        for train_index, test_index in lpo.split(X):\n            self.assertTrue(len(train_index) + len(test_index) == 10)\n\n    def test_LeavePGroupsOut(self):\n        X = np.arange(10)\n        groups = np.array([0, 0, 1, 1, 1, 2, 2, 2, 2, 2])\n        lpgo = LeavePGroupsOut(n_groups=2)\n        for train_index, test_index in lpgo.split(X, groups=groups):\n            self.assertTrue(len(train_index) + len(test_index) == 10)\n\n    def test_ShuffleSplit(self):\n        ss = ShuffleSplit(n_splits=3, test_size=0.25)\n        X = np.arange(10)\n        for train_index, test_index in ss.split(X):\n            self.assertTrue(len(train_index) + len(test_index) == 10)\n\n    def test_GroupShuffleSplit(self):\n        X = np.arange(10)\n        groups = np.array([0, 0, 1, 1, 1, 2, 2, 2, 2, 2])\n        gss = GroupShuffleSplit(n_splits=3, test_size=0.25)\n        for train_index, test_index in gss.split(X, groups=groups):\n            self.assertTrue(len(train_index) + len(test_index) == 10)\n\n    def test_StratifiedShuffleSplit(self):\n        X = np.arange(10)\n        y = np.array([0, 0, 1, 1, 1, 2, 2, 2, 2, 2])\n        sss = StratifiedShuffleSplit(n_splits=3, test_size=0.25)\n        for train_index, test_index in sss.split(X, y):\n            self.assertTrue(len(train_index) + len(test_index) == 10)\n\n    def test_PredefinedSplit(self):\n        X = np.arange(10)\n        test_fold = [0, 1, -1, 1]\n        ps = PredefinedSplit(test_fold)\n        for train_index, test_index in ps.split():\n            self.assertTrue(len(train_index) + len(test_index) == 10)\n\n    def test_check_cv(self):\n        cv = check_cv(cv=5)\n        self.assertIsInstance(cv, KFold)\n\n    def test_train_test_split(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.array([0, 1, 2, 3, 4])\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)\n        self.assertTrue(len(X_train) + len(X_test) == 10)\n\n    def test_RepeatedKFold(self):\n        rkf = RepeatedKFold(n_splits=5, n_repeats=2)\n        X = np.arange(10)\n        for train_index, test_index in rkf.split(X):\n            self.assertTrue(len(train_index) + len(test_index) == 10)\n\n    def test_RepeatedStratifiedKFold(self):\n        y = np.array([0, 0, 1, 1, 1, 2, 2, 2, 2, 2])\n        rskf = RepeatedStratifiedKFold(n_splits=3, n_repeats=2)\n        for train_index, test_index in rskf.split(X, y):\n            self.assertTrue(len(train_index) + len(test_index) == 10)\n\n    def test__validate_shuffle_split(self):\n        n_samples = 10\n        test_size = 0.25\n        n_train, n_test = _validate_shuffle_split(n_samples, test_size)\n        self.assertEqual(n_train + n_test, n_samples)\n\n    def test__build_repr(self):\n        class MyClass:\n            def __init__(self, param1, param2):\n                self.param1 = param1\n                self.param2 = param2\n\n        obj = MyClass(param1=1, param2=2)\n        repr_str = _build_repr(obj)\n        self.assertIn(\"MyClass(param1=1, param2=2)\", repr_str)\n\n"], "sample_42": ["\nimport datetime\nimport decimal\nimport functools\nimport os\nimport re\nimport uuid\nfrom unittest import mock\n\nfrom django.conf import settings\nfrom django.db import models\nfrom django.db.migrations.operations.base import Operation\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    BaseSequenceSerializer,\n    BaseSimpleSerializer,\n    ChoicesSerializer,\n    DateTimeSerializer,\n    DatetimeDatetimeSerializer,\n    DecimalSerializer,\n    DeconstructableSerializer,\n    DictionarySerializer,\n    EnumSerializer,\n    FloatSerializer,\n    FrozensetSerializer,\n    FunctionTypeSerializer,\n    FunctoolsPartialSerializer,\n    IterableSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    PathLikeSerializer,\n    PathSerializer,\n    RegexSerializer,\n    SequenceSerializer,\n    SetSerializer,\n    SettingsReferenceSerializer,\n    TupleSerializer,\n    TypeSerializer,\n    UUIDSerializer,\n    serializer_factory,\n)\nfrom django.utils.functional import LazyObject, Promise\nfrom django.utils.timezone import utc\n\n\nclass TestSerializer(object):\n\n    def test_base_serializer(self):\n        class MySerializer(BaseSerializer):\n            def serialize(self):\n                return 'test', set()\n        serializer = MySerializer('value')\n        self.assertEqual(serializer.serialize(), ('test', set()))\n\n    def test_base_sequence_serializer(self):\n        class MySerializer(BaseSequenceSerializer):\n            def _format(self):\n                return 'test'\n        serializer = MySerializer(['a', 'b'])\n        self.assertEqual(serializer.serialize(), ('test', set()))\n\n    def test_base_simple_serializer(self):\n        serializer = BaseSimpleSerializer('value')\n        self.assertEqual(serializer.serialize(), (\"'value'\", set()))\n\n    def test_choices_serializer(self):\n        class MyChoices(models.Choices):\n            CHOICE1 = 'choice1', 'Choice 1'\n            CHOICE2 = 'choice2', 'Choice 2'\n        serializer = ChoicesSerializer(models.Field(choices=MyChoices))\n        self.assertEqual(serializer.serialize(), (\n            \"models.Field(choices=models.Choices(CHOICE1=('choice1', 'Choice 1'), CHOICE2=('choice2', 'Choice 2')))\",\n            {'from django.db import models'},\n        ))\n\n    def test_datetime_serializer(self):\n        serializer = DateTimeSerializer(datetime.date.today())\n        self.assertEqual(serializer.serialize(), (repr(datetime.date.today()), {'import datetime'}))\n\n    def test_datetime_datetime_serializer(self):\n        now = datetime.datetime.now()\n        serializer = DatetimeDatetimeSerializer(now)\n        self.assertEqual(serializer.serialize(), (repr(now).replace('<UTC>', 'utc'), {'import datetime', 'from django.utils.timezone import utc'}))\n\n    def test_decimal_serializer(self):\n        serializer = DecimalSerializer(decimal.Decimal('1.23'))\n        self.assertEqual(serializer.serialize(), (repr(decimal.Decimal('1.23')), {\"from decimal import Decimal\"}))\n\n    def test_deconstructable_serializer(self):\n        class MyClass:\n            def deconstruct(self):\n                return 'path.to.MyClass', [], {}\n        serializer = DeconstructableSerializer(MyClass())\n        self.assertEqual(serializer.serialize(), (\"path.to.MyClass()\", {'import path.to'}))\n\n    def test_dictionary_serializer(self):\n        serializer = DictionarySerializer({'a': 1, 'b': 2})\n        self.assertEqual(serializer.serialize(), (\"{'a': 1, 'b': 2}\", set()))\n\n    def test_enum_serializer(self):\n        class MyEnum(enum.Enum):\n            CHOICE1 = 1\n            CHOICE2 = 2\n        serializer = EnumSerializer(MyEnum.CHOICE1)\n        self.assertEqual(serializer.serialize(), (\"'MyEnum.CHOICE1'\", {'import MyEnum'}))\n\n    def test_float_serializer(self):\n        serializer = FloatSerializer(float('inf'))\n        self.assertEqual(serializer.serialize(), (\"float('inf')\", set()))\n\n    def test_frozenset_serializer(self):\n        serializer = FrozensetSerializer(frozenset([1, 2, 3]))\n        self.assertEqual(serializer.serialize(), (\"frozenset([1, 2, 3])\", set()))\n\n    def test_function_type_serializer(self):\n        def my_function():\n            pass\n        serializer = FunctionTypeSerializer(my_function)\n        self.assertEqual(serializer.serialize(), (\"my_function\", {'import __main__'}))\n\n    def test_functools_partial_serializer(self):\n        def my_function(a, b):\n            return a + b\n        partial = functools.partial(my_function, 1)\n        serializer = FunctoolsPartialSerializer(partial)\n        self.assertEqual(serializer.serialize(), (\"functools.partial(my_function, 1)\", {'import functools'}))\n\n    def test_iterable_serializer(self):\n        serializer = IterableSerializer([1, 2, 3])\n        self.assertEqual(serializer.serialize(), (\"(1, 2, 3)\", set()))\n\n    def test_model_field_serializer(self):\n        field = models.CharField(max_length=100)\n        serializer = ModelFieldSerializer(field)\n        self.assertEqual(serializer.serialize(), (\"models.CharField(max_length=100)\", {'from django.db import models'}))\n\n    def test_model_manager_serializer(self):\n        class MyManager(models.Manager):\n            pass\n        manager = MyManager()\n        serializer = ModelManagerSerializer(manager)\n        self.assertEqual(serializer.serialize(), (\"MyManager()\", {'import MyManager'}))\n\n    def test_operation_serializer(self):\n        operation = Operation()\n        serializer = OperationSerializer(operation)\n        self.assertEqual(serializer.serialize(), (\"\", set()))\n\n    def test_pathlike_serializer(self):\n        serializer = PathLikeSerializer(os.path.join('path', 'to', 'file'))\n        self.assertEqual(serializer.serialize(), (\"'path/to/file'\", set()))\n\n    def test_path_serializer(self):\n        serializer = PathSerializer(pathlib.Path('path/to/file'))\n        self.assertEqual(serializer.serialize(), (\"pathlib.PurePath('path/to/file')\", {'import pathlib'}))\n\n    def test_regex_serializer(self):\n        serializer = RegexSerializer(re.compile(r'^[a-z]+$'))\n        self.assertEqual(serializer.serialize(), (\"re.compile('^[a-z]+$')\", {'import re'}))\n\n    def test_sequence_serializer(self):\n        serializer = SequenceSerializer([1, 2, 3])\n        self.assertEqual(serializer.serialize(), (\"[1, 2, 3]\", set()))\n\n    def test_set_serializer(self):\n        serializer = SetSerializer({1, 2, 3})\n        self.assertEqual(serializer.serialize(), (\"{1, 2, 3}\", set()))\n\n    def test_settings_reference_serializer(self):\n        serializer = SettingsReferenceSerializer(settings.DEBUG)\n        self.assertEqual(serializer.serialize(), (\"settings.DEBUG\", {\"from django.conf import settings\"}))\n\n    def test_tuple_serializer(self):\n        serializer = TupleSerializer((1, 2, 3))\n        self.assertEqual(serializer.serialize(), (\"(1, 2, 3)\", set()))\n\n    def test_type_serializer(self):\n        serializer = TypeSerializer(type(None))\n        self.assertEqual(serializer.serialize(), (\"type(None)\", set()))\n\n    def test_uuid_serializer(self):\n        serializer = UUIDSerializer(uuid.uuid4())\n        self.assertEqual(serializer.serialize(), (\"uuid.%s\" % repr(uuid.uuid4()), {\"import uuid\"}))\n\n    def test_serializer_factory(self):\n        with mock.patch('django.db.migrations.serializer.LazyObject') as mock_lazy_object:\n            mock_lazy_object.return_value = 'value'\n            self.assertEqual(serializer_factory(mock_lazy_object()), ('value', set()))\n\n        with mock.patch('django.db.migrations.serializer.Promise') as mock_promise:\n            mock_promise.return_value = 'value'\n            self.assertEqual(serializer_factory(mock_promise()), ('value', set()))\n"], "sample_151": ["\nfrom sympy.geometry.point import Point, Point2D, Point3D\nfrom sympy.core.numbers import Rational, pi\nfrom sympy.core.symbol import symbols\nfrom sympy.functions.elementary.miscellaneous import sqrt\nfrom sympy.matrices import Matrix\n\ndef test_point_creation():\n    p = Point(1, 2)\n    assert p.x == 1\n    assert p.y == 2\n    assert p.args == (1, 2)\n\n    p = Point(1, 2, 3)\n    assert p.x == 1\n    assert p.y == 2\n    assert p.z == 3\n    assert p.args == (1, 2, 3)\n\ndef test_point2d_creation():\n    p = Point2D(1, 2)\n    assert p.x == 1\n    assert p.y == 2\n    assert p.args == (1, 2)\n\ndef test_point3d_creation():\n    p = Point3D(1, 2, 3)\n    assert p.x == 1\n    assert p.y == 2\n    assert p.z == 3\n    assert p.args == (1, 2, 3)\n\ndef test_point_equality():\n    p1 = Point(1, 2)\n    p2 = Point(1, 2)\n    p3 = Point(3, 4)\n    assert p1 == p2\n    assert p1 != p3\n\ndef test_point_distance():\n    p1 = Point(1, 2)\n    p2 = Point(4, 6)\n    assert p1.distance(p2) == 5\n\ndef test_point_midpoint():\n    p1 = Point(1, 2)\n    p2 = Point(4, 6)\n    assert p1.midpoint(p2) == Point(2.5, 4)\n\ndef test_point_intersection():\n    p1 = Point(1, 2)\n    p2 = Point(4, 6)\n    assert p1.intersection(p2) == []\n\ndef test_point2d_rotate():\n    p = Point2D(1, 0)\n    assert p.rotate(pi/2) == Point2D(0, 1)\n\ndef test_point2d_scale():\n    p = Point2D(1, 1)\n    assert p.scale(2) == Point2D(2, 1)\n\ndef test_point2d_translate():\n    p = Point2D(1, 1)\n    assert p.translate(2) == Point2D(3, 1)\n\ndef test_point3d_direction_cosine():\n    p1 = Point3D(1, 2, 3)\n    p2 = Point3D(2, 3, 5)\n    assert p1.direction_cosine(p2) == [sqrt(6)/6, sqrt(6)/6, sqrt(6)/3]\n\ndef test_point3d_direction_ratio():\n    p1 = Point3D(1, 2, 3)\n    p2 = Point3D(2, 3, 5)\n    assert p1.direction_ratio(p2) == [1, 1, 2]\n\ndef test_point3d_scale():\n    p = Point3D(1, 1, 1)\n    assert p.scale(2) == Point3D(2, 1, 1)\n\ndef test_point3d_translate():\n    p = Point3D(1, 1, 1)\n    assert p.translate(2) == Point3D(3, 1, 1)\n\ndef test_point_transform():\n    p = Point(1, 2)\n    m = Matrix([[2, 0], [0, 2]])\n    assert p.transform(m) == Point(2, 4)\n\ndef test_point3d_transform():\n    p = Point3D(1, 2, 3)\n    m = Matrix([[2, 0, 0, 0], [0, 2, 0, 0], [0, 0, 2, 0], [0, 0, 0, 1]])\n    assert p.transform(m) == Point3D(2, 4, 6)\n\ndef test_point_is_collinear():\n    p1 = Point(1, 2)\n    p2 = Point(2, 4)\n    p3 = Point(3, 6)\n    assert Point.is_collinear(p1, p2, p3)\n\ndef test_point3d_is_collinear():\n    p1 = Point3D(1, 2, 3)\n    p2 = Point3D(2, 4, 6)\n    p3 = Point3D(3, 6, 9)\n    assert Point3D.are_collinear(p1, p2, p3)\n\ndef test_point_evalf():\n    x = symbols('x')\n    p = Point(x, 2)\n    assert p.evalf(subs={x: 1}) == Point(1, 2)\n\ndef test_point_bounds():\n    p = Point(1, 2)\n    assert p.bounds == (1, 2, 1, 2)\n\ndef test_point_length():\n    p = Point(3, 4)\n    assert p.length == 5\n\ndef test_point_orthogonal_direction():\n    p = Point(1, 2)\n    assert p.orthogonal_direction == Point(-2, 1)\n\ndef test_point_taxicab_distance():\n    p1 = Point(1, 1)\n    p2 = Point(4, 5)\n    assert p1.taxicab_distance(p2) == 7\n\ndef test_point_canberra_distance():\n    p1 = Point(1, 1)\n    p2 = Point(3, 3)\n    assert p1.canberra_distance(p2) == 1\n\n"], "sample_89": ["\nfrom _pytest import nodes\nfrom _pytest.mark.structures import MarkDecorator\nfrom _pytest.compat import cached_property\nimport pytest\nimport py\n\ndef test_NodeMeta_create():\n    node = nodes.Node._create(name=\"test_node\", parent=None)\n    assert node.name == \"test_node\"\n    assert node.parent is None\n\ndef test_Node_init():\n    config = pytest.Config()\n    session = pytest.Session()\n    node = nodes.Node(\"test_node\", parent=None, config=config, session=session)\n    assert node.name == \"test_node\"\n    assert node.parent is None\n    assert node.config is config\n    assert node.session is session\n\ndef test_Node_repr():\n    node = nodes.Node(\"test_node\")\n    assert repr(node) == \"<Node test_node>\"\n\ndef test_Node_nodeid():\n    node = nodes.Node(\"test_node\", parent=nodes.Node(\"parent_node\"))\n    assert node._nodeid == \"parent_node::test_node\"\n\ndef test_Node_listchain():\n    node = nodes.Node(\"test_node\", parent=nodes.Node(\"parent_node\", parent=nodes.Node(\"grandparent_node\")))\n    chain = node.listchain()\n    assert len(chain) == 3\n    assert chain[0].name == \"grandparent_node\"\n    assert chain[1].name == \"parent_node\"\n    assert chain[2].name == \"test_node\"\n\ndef test_Node_add_marker():\n    node = nodes.Node(\"test_node\")\n    node.add_marker(\"pytest.mark.skip\")\n    assert len(node.own_markers) == 1\n    assert node.own_markers[0].name == \"skip\"\n\ndef test_Node_iter_markers():\n    node = nodes.Node(\"test_node\")\n    node.add_marker(\"pytest.mark.skip\")\n    node.add_marker(\"pytest.mark.parametrize\")\n    assert list(node.iter_markers()) == [node.own_markers[0], node.own_markers[1]]\n\ndef test_Node_iter_markers_with_node():\n    node = nodes.Node(\"test_node\")\n    node.add_marker(\"pytest.mark.skip\")\n    node.add_marker(\"pytest.mark.parametrize\")\n    markers_with_node = list(node.iter_markers_with_node())\n    assert len(markers_with_node) == 2\n    assert markers_with_node[0][1].name == \"skip\"\n    assert markers_with_node[1][1].name == \"parametrize\"\n\ndef test_Node_get_closest_marker():\n    node = nodes.Node(\"test_node\")\n    node.add_marker(\"pytest.mark.skip\")\n    node.add_marker(\"pytest.mark.parametrize\")\n    assert node.get_closest_marker(\"skip\").name == \"skip\"\n\ndef test_Node_listextrakeywords():\n    node = nodes.Node(\"test_node\")\n    node.extra_keyword_matches.add(\"keyword1\")\n    node.extra_keyword_matches.add(\"keyword2\")\n    assert node.listextrakeywords() == {\"keyword1\", \"keyword2\"}\n\ndef test_Node_listnames():\n    node = nodes.Node(\"test_node\", parent=nodes.Node(\"parent_node\", parent=nodes.Node(\"grandparent_node\")))\n    assert node.listnames() == [\"grandparent_node\", \"parent_node\", \"test_node\"]\n\ndef test_Node_getparent():\n    node = nodes.Node(\"test_node\", parent=nodes.Node(\"parent_node\"))\n    assert node.getparent(nodes.Node) is node.parent\n\ndef test_Node_repr_failure():\n    node = nodes.Node(\"test_node\")\n    excinfo = pytest.ExceptionInfo(Exception(\"test exception\"))\n    repr_failure = node._repr_failure_py(excinfo)\n    assert repr_failure\n\ndef test_Collector_collect():\n    collector = nodes.Collector(\"test_collector\")\n    with pytest.raises(NotImplementedError):\n        collector.collect()\n\ndef test_Collector_repr_failure():\n    collector = nodes.Collector(\"test_collector\")\n    excinfo = pytest.ExceptionInfo(Exception(\"test exception\"))\n    repr_failure = collector.repr_failure(excinfo)\n    assert repr_failure\n\ndef test_Collector_prunetraceback():\n    collector = nodes.Collector(\"test_collector\", fspath=py.path.local(\"/path/to/file.py\"))\n    excinfo = pytest.ExceptionInfo(Exception(\"test exception\"))\n    collector._prunetraceback(excinfo)\n\ndef test_FSCollector_from_parent():\n    parent = nodes.Collector(\"parent_collector\")\n    fspath = py.path.local(\"/path/to/file.py\")\n    collector = nodes.FSCollector.from_parent(parent=parent, fspath=fspath)\n    assert collector.fspath == fspath\n\ndef test_FSCollector_gethookproxy():\n    collector = nodes.FSCollector(fspath=py.path.local(\"/path/to/file.py\"))\n    hookproxy = collector._gethookproxy(py.path.local(\"/path/to/file.py\").dirpath())\n    assert hookproxy\n\ndef test_FSCollector_recurse():\n    collector = nodes.FSCollector(fspath=py.path.local(\"/path/to/file.py\"))\n    assert collector._recurse(py.path.local(\"/path/to/file.py\").dirpath())\n\ndef test_FSCollector_collectfile():\n    collector = nodes.FSCollector(fspath=py.path.local(\"/path/to/file.py\"))\n    assert collector._collectfile(py.path.local(\"/path/to/file.py\"))\n\ndef test_Item_runtest():\n    item = nodes.Item(\"test_item\")\n    with pytest.raises(NotImplementedError):\n        item.runtest()\n\ndef test_Item_add_report_section():\n    item = nodes.Item(\"test_item\")\n    item.add_report_section(\"call\", \"stdout\", \"report section contents\")\n    assert item._report_sections == [(\"call\", \"stdout\", \"report section contents\")]\n\ndef test_Item_reportinfo():\n    item = nodes.Item(\"test_item\", fspath=py.path.local(\"/path/to/file.py\"))\n    assert item.reportinfo() == (py.path.local(\"/path/to/file.py\"), None, \"\")\n\ndef test_Item_location():\n    item = nodes.Item(\"test_item\", fspath=py.path.local(\"/path/to/file.py\"))\n    assert item.location == (py.path.local(\"/path/to/file.py\"), None, \"\")\n\n"], "sample_124": ["\nimport sympy\nfrom sympy import symbols, Symbol, sinh, nan, oo, zoo, pi, asinh, acosh, log, sqrt,  coth, I, cot, E, tanh, tan, cosh, cos, S, sin, Rational, atanh, acoth,  Integer, O, exp, sech, sec, csch, asech, acsch, acos, asin, expand_mul\n\ndef test_sinh():\n    assert sinh(0) == 0\n    assert sinh(S.Infinity) == S.Infinity\n    assert sinh(S.NegativeInfinity) == S.NegativeInfinity\n    assert sinh(nan) == nan\n\ndef test_cosh():\n    assert cosh(0) == 1\n    assert cosh(S.Infinity) == S.Infinity\n    assert cosh(S.NegativeInfinity) == S.Infinity\n    assert cosh(nan) == nan\n\ndef test_tanh():\n    assert tanh(0) == 0\n    assert tanh(S.Infinity) == 1\n    assert tanh(S.NegativeInfinity) == -1\n    assert tanh(nan) == nan\n\ndef test_coth():\n    assert coth(0) == zoo\n    assert coth(S.Infinity) == 1\n    assert coth(S.NegativeInfinity) == -1\n    assert coth(nan) == nan\n\ndef test_sech():\n    assert sech(0) == 1\n    assert sech(S.Infinity) == 0\n    assert sech(S.NegativeInfinity) == 0\n    assert sech(nan) == nan\n\ndef test_csch():\n    assert csch(0) == zoo\n    assert csch(S.Infinity) == 0\n    assert csch(S.NegativeInfinity) == 0\n    assert csch(nan) == nan\n\ndef test_asinh():\n    assert asinh(0) == 0\n    assert asinh(S.Infinity) == S.Infinity\n    assert asinh(S.NegativeInfinity) == S.NegativeInfinity\n    assert asinh(nan) == nan\n\ndef test_acosh():\n    assert acosh(1) == 0\n    assert acosh(S.Infinity) == S.Infinity\n    assert acosh(S.NegativeInfinity) == S.NaN\n    assert acosh(nan) == nan\n\ndef test_atanh():\n    assert atanh(0) == 0\n    assert atanh(1) == S.Infinity\n    assert atanh(-1) == S.NegativeInfinity\n    assert atanh(nan) == nan\n\ndef test_acoth():\n    assert acoth(1) == S.Infinity\n    assert acoth(-1) == S.NegativeInfinity\n    assert acoth(nan) == nan\n\ndef test_asech():\n    assert asech(1) == 0\n    assert asech(S.Infinity) == 0\n    assert asech(S.NegativeInfinity) == S.NaN\n    assert asech(nan) == nan\n\ndef test_acsch():\n    assert acsch(S.Infinity) == 0\n    assert acsch(S.NegativeInfinity) == 0\n    assert acsch(nan) == nan\n\n\n\n"], "sample_120": ["\nfrom sympy import KroneckerDelta, diff, Piecewise, And\nfrom sympy import Sum\nfrom sympy.core import S, symbols, Add, Mul\nfrom sympy.functions import transpose, sin, cos, sqrt\nfrom sympy.simplify import simplify\nfrom sympy.matrices import (Identity, ImmutableMatrix, Inverse, MatAdd, MatMul, MatPow, Matrix, MatrixExpr, MatrixSymbol, ShapeError, ZeroMatrix, SparseMatrix, Transpose, Adjoint)\nfrom sympy.matrices.expressions.matexpr import MatrixElement, MatrixSymbol\nfrom sympy.utilities.pytest import raises\n\ndef test_MatrixElement():\n    A = MatrixSymbol('A', 2, 2)\n    i, j = symbols('i j')\n    me = MatrixElement(A, i, j)\n    assert me.parent == A\n    assert me.i == i\n    assert me.j == j\n\ndef test_MatrixSymbol():\n    A = MatrixSymbol('A', 2, 3)\n    assert A.shape == (2, 3)\n    assert A.name == 'A'\n    assert A[1, 2] == MatrixElement(A, 1, 2)\n\ndef test_Identity():\n    I = Identity(3)\n    assert I.rows == 3\n    assert I.cols == 3\n    assert I.shape == (3, 3)\n    assert I.transpose() == I\n    assert I.inverse() == I\n    assert I._entry(1, 1) == 1\n    assert I._entry(1, 2) == 0\n\ndef test_ZeroMatrix():\n    Z = ZeroMatrix(2, 3)\n    assert Z.shape == (2, 3)\n    assert Z.transpose() == ZeroMatrix(3, 2)\n    assert Z.trace() == 0\n    assert Z.determinant() == 0\n    assert Z._entry(1, 1) == 0\n\ndef test_MatrixExpr():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = A + B\n    assert isinstance(C, MatAdd)\n    D = A * B\n    assert isinstance(D, MatMul)\n    E = A**2\n    assert isinstance(E, MatPow)\n    assert E.base == A\n    assert E.exp == 2\n\ndef test_MatrixExpr_conjugate():\n    A = MatrixSymbol('A', 2, 2)\n    assert A.conjugate() == Adjoint(Transpose(A))\n\ndef test_MatrixExpr_transpose():\n    A = MatrixSymbol('A', 2, 2)\n    assert A.transpose() == Transpose(A)\n\ndef test_MatrixExpr_inverse():\n    A = MatrixSymbol('A', 2, 2)\n    assert A.inverse() == Inverse(A)\n\ndef test_MatrixExpr_as_explicit():\n    A = MatrixSymbol('A', 2, 2)\n    assert A.as_explicit() == ImmutableMatrix(A.shape)\n\ndef test_MatrixExpr_as_mutable():\n    A = MatrixSymbol('A', 2, 2)\n    assert A.as_mutable() == ImmutableMatrix(A.shape).as_mutable()\n\ndef test_MatrixExpr_equals():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    assert A.equals(B) == False\n\ndef test_MatrixExpr_canonicalize():\n    A = MatrixSymbol('A', 2, 2)\n    assert A.canonicalize() == A\n\ndef test_MatrixExpr_as_coeff_mmul():\n    A = MatrixSymbol('A', 2, 2)\n    assert A.as_coeff_mmul() == (1, MatMul(A))\n\ndef test_MatrixExpr_getitem():\n    A = MatrixSymbol('A', 2, 2)\n    assert A[0, 0] == MatrixElement(A, 0, 0)\n\ndef test_MatrixExpr_slice():\n    A = MatrixSymbol('A', 3, 3)\n    assert A[:, 0] == MatrixSlice(A, slice(None), 0)\n\ndef test_MatrixExpr_pow():\n    A = MatrixSymbol('A', 2, 2)\n    assert A**2 == MatPow(A, 2)\n\ndef test_MatrixExpr_rpow():\n    A = MatrixSymbol('A', 2, 2)\n    raises(NotImplementedError, lambda: A**S.Half)\n\ndef test_MatrixExpr_mul():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    assert A * B == MatMul(A, B)\n\ndef test_MatrixExpr_add():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    assert A + B == MatAdd(A, B)\n\ndef test_MatrixExpr_sub():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    assert A - B == MatAdd(A, -B)\n\ndef test_MatrixExpr_div():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    assert A / B == A * B**-1\n\ndef test_MatrixExpr_rdiv():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    raises(NotImplementedError, lambda: B / A)\n\ndef test_MatrixExpr_truediv():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    assert A / B == A * B**-1\n\ndef test_MatrixExpr_rtruediv():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    raises(NotImplementedError, lambda: B / A)\n\ndef test_MatrixExpr_sympifyit():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    assert _sympifyit(A, B)(A, B) == B\n\ndef test_MatrixExpr_valid_index():\n    A = MatrixSymbol('A', 2, 2)\n    assert A.valid_index(0, 0) == True\n    assert A.valid_index(2, 0) == False\n\ndef test_MatrixExpr_as_array():\n    A = MatrixSymbol('A', 2, 2)\n    assert A.as_array() == A.as_explicit().as_numpy_array()\n\ndef test_MatrixExpr_diff():\n    A = MatrixSymbol('A', 2, 2)\n    x = symbols('x')\n    assert diff(A, x) == MatrixSymbol('A', 2, 2)\n\ndef test_MatrixElement_doit():\n    A = MatrixSymbol('A', 2, 2)\n    me = MatrixElement(A, 1, 1)\n    assert me.doit() == A[1, 1]\n\ndef test_MatrixElement_diff():\n    A = MatrixSymbol('A', 2, 2)\n    x = symbols('x')\n    me = MatrixElement(A, 1, 1)\n    assert me.diff(x) == KroneckerDelta(1, 1)*KroneckerDelta(1, 1)\n\n"], "sample_87": ["\nfrom _pytest.main import _in_venv\nfrom _pytest.main import ExitCode\nfrom _pytest.main import Session\nfrom _pytest.main import pytest_addoption\nfrom _pytest.main import pytest_cmdline_main\nfrom _pytest.main import pytest_collection\nfrom _pytest.main import pytest_runtestloop\nfrom _pytest.main import pytest_ignore_collect\nfrom _pytest.main import pytest_collection_modifyitems\nfrom _pytest.main import FSHookProxy\nfrom _pytest.main import NoMatch\nfrom _pytest.main import Interrupted\nfrom _pytest.main import Failed\nfrom _pytest.main import _bestrelpath_cache\nfrom _pytest.main import _parsearg\nfrom _pytest.main import _tryconvertpyarg\nfrom _pytest.main import _matchnodes\nfrom _pytest.nodes import Collector, Item\nfrom _pytest.config import Config\nfrom _pytest.config import Directory\nfrom _pytest.config import hookimpl\nimport py\nimport os\nimport sys\nimport fnmatch\n\ndef test_pytest_addoption():\n    config = Config()\n    pytest_addoption(config)\n    assert config.getini(\"norecursedirs\") == [\".*\", \"build\", \"dist\", \"CVS\", \"_darcs\", \"{arch}\", \"*.egg\", \"venv\"]\n\ndef test_pytest_cmdline_main():\n    config = Config()\n    pytest_cmdline_main(config)\n\ndef test_pytest_collection():\n    session = Session(Config())\n    pytest_collection(session)\n\ndef test_pytest_runtestloop():\n    session = Session(Config())\n    pytest_runtestloop(session)\n\ndef test_pytest_ignore_collect():\n    config = Config()\n    path = py.path.local(\"test\")\n    pytest_ignore_collect(path, config)\n\ndef test_pytest_collection_modifyitems():\n    items = []\n    config = Config()\n    pytest_collection_modifyitems(items, config)\n\ndef test_FSHookProxy():\n    fspath = py.path.local(\"test\")\n    pm = Config()\n    remove_mods = []\n    proxy = FSHookProxy(fspath, pm, remove_mods)\n\ndef test_NoMatch():\n    try:\n        raise NoMatch\n    except NoMatch:\n        pass\n\ndef test_Interrupted():\n    try:\n        raise Interrupted\n    except Interrupted:\n        pass\n\ndef test_Failed():\n    try:\n        raise Failed\n    except Failed:\n        pass\n\ndef test__bestrelpath_cache():\n    path = py.path.local(\"test\")\n    cache = _bestrelpath_cache(path)\n\ndef test__parsearg():\n    arg = \"test::test_function\"\n    result = _parsearg(arg)\n\ndef test__tryconvertpyarg():\n    x = \"test.module\"\n    result = _tryconvertpyarg(x)\n\ndef test__matchnodes():\n    matching = []\n    names = []\n    result = _matchnodes(matching, names)\n\ndef test__in_venv():\n    path = py.path.local(\"test\")\n    result = _in_venv(path)\n\ndef test_Session():\n    config = Config()\n    session = Session(config)\n\ndef test_ExitCode():\n    code = ExitCode.OK\n    assert code == 0\n\n"], "sample_145": ["\nimport unittest\nfrom sympy import symbols, sin, cos, exp, log, I, Rational, pi, Eq, Integral, Matrix, oo\nfrom sympy.printing.latex import (latex, translate, greek_letters_set, tex_greek_dictionary, multiline_latex, latex_escape, LatexPrinter)\nfrom sympy.printing.latex import LatexPrinter\n\nclass TestLatexPrinter(unittest.TestCase):\n    def test_latex_basic(self):\n        x, y = symbols('x y')\n        self.assertEqual(latex(x + y), 'x + y')\n        self.assertEqual(latex(x*y), 'x y')\n        self.assertEqual(latex(x**2), 'x^{2}')\n        self.assertEqual(latex(sin(x)), '\\\\sin{x}')\n        self.assertEqual(latex(exp(x)), 'e^{x}')\n        self.assertEqual(latex(log(x)), '\\\\log{x}')\n        self.assertEqual(latex(I), 'i')\n        self.assertEqual(latex(oo), '\\\\infty')\n\n    def test_latex_rational(self):\n        self.assertEqual(latex(Rational(1, 2)), '\\\\frac{1}{2}')\n        self.assertEqual(latex(Rational(3, 4)), '\\\\frac{3}{4}')\n\n    def test_latex_pi(self):\n        self.assertEqual(latex(pi), '\\\\pi')\n\n    def test_latex_equation(self):\n        x, y = symbols('x y')\n        eq = Eq(x + y, 2)\n        self.assertEqual(latex(eq), 'x + y = 2')\n\n    def test_latex_integral(self):\n        x = symbols('x')\n        int_expr = Integral(x**2, x)\n        self.assertEqual(latex(int_expr), '\\\\int x^{2} \\, dx')\n\n    def test_latex_matrix(self):\n        A = Matrix([[1, 2], [3, 4]])\n        self.assertEqual(latex(A), '\\\\begin{bmatrix}1 & 2\\\\\\\\3 & 4\\\\end{bmatrix}')\n\n    def test_latex_multiline(self):\n        x, y = symbols('x y')\n        expr = sin(x) + cos(y)\n        self.assertEqual(multiline_latex(x, expr), '\\\\begin{align*}x &= \\\\sin{x} \\\\\\\\ &+ \\\\cos{y}\\\\end{align*}')\n\n    def test_latex_translate(self):\n        self.assertEqual(translate('alphahatdotprime'), '{\\\\dot{\\\\hat{\\\\alpha}}}\\\\prime')\n\n    def test_latex_escape(self):\n        self.assertEqual(latex_escape('Hello, world!'), 'Hello, world!')\n        self.assertEqual(latex_escape('This is a $test$'), 'This is a \\$test\\$')\n\n    def test_latex_settings(self):\n        x = symbols('x')\n        self.assertEqual(latex(x**2, mode='inline'), '$x^{2}$')\n        self.assertEqual(latex(x**2, fold_frac_powers=True), 'x^{2}')\n\n    def test_latex_custom_symbol_names(self):\n        x = symbols('x')\n        self.assertEqual(latex(x**2, symbol_names={x: 'x_i'}), 'x_i^{2}')\n\n    def test_latex_greek_letters(self):\n        self.assertEqual(latex(pi), '\\\\pi')\n        self.assertEqual(latex(symbols('alpha')), '\\\\alpha')\n\n    def test_latex_other_symbols(self):\n        self.assertEqual(latex(symbols('Delta')), '\\\\Delta')\n        self.assertEqual(latex(symbols('sum')), '\\\\sum')\n\n    def test_latex_imaginary_unit(self):\n        self.assertEqual(latex(I), 'i')\n        self.assertEqual(latex(I, imaginary_unit='j'), 'j')\n\n    def test_latex_gothic_re_im(self):\n        x = symbols('x')\n        self.assertEqual(latex(x.real), '\\\\operatorname{re}{x}')\n        self.assertEqual(latex(x.real, gothic_re_im=True), '\\\\Re{x}')\n        self.assertEqual(latex(x.imag), '\\\\operatorname{im}{x}')\n        self.assertEqual(latex(x.imag, gothic_re_im=True), '\\\\Im{x}')\n\n    def test_latex_decimal_separator(self):\n        self.assertEqual(latex(2.5), '2.5')\n        self.assertEqual(latex(2.5, decimal_separator='comma'), '2{,}5')\n\n    def test_latex_parenthesize_super(self):\n        x = symbols('x')\n        self.assertEqual(latex((x + 1)**2), '(x + 1)^{2}')\n        self.assertEqual(latex((x + 1)**2, parenthesize_super=False), 'x + 1^{2}')\n\n    def test_latex_min_max(self):\n        self.assertEqual(latex(1.23456789e-5, min=1e-6, max=1e-3), '1.23 \\times 10^{-5}')\n        self.assertEqual(latex(1.23456789e-5, min=1e-7, max=1e-2), '0.0000123456789')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_22": ["\nimport unittest\nfrom django.utils import text\nfrom django.utils.text import (\n    capfirst,\n    wrap,\n    Truncator,\n    get_valid_filename,\n    get_text_list,\n    normalize_newlines,\n    phone2numeric,\n    smart_split,\n    unescape_entities,\n    unescape_string_literal,\n    slugify,\n    camel_case_to_spaces,\n    format_lazy,\n)\nfrom django.utils.translation import gettext_lazy as _, override\n\nclass TextUtilsTests(unittest.TestCase):\n\n    def test_capfirst(self):\n        self.assertEqual(text.capfirst(\"hello world\"), \"Hello world\")\n        self.assertEqual(text.capfirst(\"HELLO WORLD\"), \"HELLO WORLD\")\n        self.assertEqual(text.capfirst(\"\"), \"\")\n\n    def test_wrap(self):\n        self.assertEqual(text.wrap(\"This is a long sentence that should be wrapped.\", 10),\n                         \"This is a\\nlong sentence\\nthat should\\nbe wrapped.\")\n        self.assertEqual(text.wrap(\"This is a short sentence.\", 20), \"This is a short sentence.\")\n        self.assertEqual(text.wrap(\"This is a sentence with\\nnewlines.\", 20),\n                         \"This is a sentence with\\nnewlines.\")\n\n    def test_truncator(self):\n        truncator = text.Truncator(\"This is a long string that needs to be truncated.\")\n        self.assertEqual(truncator.chars(10), \"This is a...\")\n        self.assertEqual(truncator.chars(20), \"This is a long string...\")\n        self.assertEqual(truncator.words(5), \"This is a long string...\")\n        self.assertEqual(truncator.words(10), \"This is a long string that needs to be truncated.\")\n\n    def test_get_valid_filename(self):\n        self.assertEqual(text.get_valid_filename(\"john's portrait in 2004.jpg\"), \"johns_portrait_in_2004.jpg\")\n        self.assertEqual(text.get_valid_filename(\"invalid filename.txt\"), \"invalid_filename.txt\")\n\n    def test_get_text_list(self):\n        self.assertEqual(text.get_text_list([\"a\", \"b\", \"c\", \"d\"]), \"a, b, c or d\")\n        self.assertEqual(text.get_text_list([\"a\", \"b\", \"c\"], \"and\"), \"a, b and c\")\n        self.assertEqual(text.get_text_list([\"a\", \"b\"], \"and\"), \"a and b\")\n        self.assertEqual(text.get_text_list([\"a\"]), \"a\")\n        self.assertEqual(text.get_text_list([]), \"\")\n\n    def test_normalize_newlines(self):\n        self.assertEqual(text.normalize_newlines(\"This is a string\\r\\nwith CRLF newlines.\"),\n                         \"This is a string\\nwith CRLF newlines.\")\n\n    def test_phone2numeric(self):\n        self.assertEqual(text.phone2numeric(\"1-800-555-1212\"), \"1-800-555-1212\")\n        self.assertEqual(text.phone2numeric(\"1-800-FLOWERS\"), \"1-800-3569377\")\n        self.assertEqual(text.phone2numeric(\"1-800-GET-FLOWERS\"), \"1-800-438-3569377\")\n\n    def test_smart_split(self):\n        self.assertEqual(list(text.smart_split(r'This is \"a person\\'s\" test.')),\n                         ['This', 'is', '\"a person\\\\\\'s\"', 'test.'])\n        self.assertEqual(list(text.smart_split(r\"Another 'person\\'s' test.\")),\n                         ['Another', \"'person\\\\'s'\", 'test.'])\n        self.assertEqual(list(text.smart_split(r'A \"\\\"funky\\\" style\" test.')),\n                         ['A', '\"\\\\\"funky\\\\\" style\"', 'test.'])\n\n    def test_unescape_entities(self):\n        self.assertEqual(text.unescape_entities(\"&amp;\"), \"&\")\n        self.assertEqual(text.unescape_entities(\"&lt;\"), \"<\")\n        self.assertEqual(text.unescape_entities(\"&gt;\"), \">\")\n        self.assertEqual(text.unescape_entities(\"&quot;\"), '\"')\n        self.assertEqual(text.unescape_entities(\"&#39;\"), \"'\")\n\n    def test_unescape_string_literal(self):\n        self.assertEqual(text.unescape_string_literal('\"abc\"'), 'abc')\n        self.assertEqual(text.unescape_string_literal(\"'abc'\"), 'abc')\n        self.assertEqual(text.unescape_string_literal('\"a \\\"bc\\\"\"'), 'a \"bc\"')\n        self.assertEqual(text.unescape_string_literal(\"'\\'ab\\' c'\"), \"'ab' c\")\n\n    def test_slugify(self):\n        self.assertEqual(text.slugify(\"This is a test\"), \"this-is-a-test\")\n        self.assertEqual(text.slugify(\"This is a test with spaces\"), \"this-is-a-test-with-spaces\")\n        self.assertEqual(text.slugify(\"This is a test with---dashes\"), \"this-is-a-test-with-dashes\")\n        self.assertEqual(text.slugify(\"This is a test with unicode: caf\u00e9\"), \"this-is-a-test-with-unicode-cafe\")\n\n    def test_camel_case_to_spaces(self):\n        self.assertEqual(text.camel_case_to_spaces(\"ThisIsATest\"), \"this is a test\")\n        self.assertEqual(text.camel_case_to_spaces(\"thisIsATest\"), \"this is a test\")\n        self.assertEqual(text.camel_case_to_spaces(\"ThisIsATestWithMultipleWords\"), \"this is a test with multiple words\")\n\n    def test_format_lazy(self):\n        self.assertEqual(text.format_lazy(\"Hello, {}!\", \"world\"), \"Hello, world!\")\n        self.assertEqual(text.format_lazy(\"The answer is: {}.\", 42), \"The answer is: 42.\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_102": ["\nimport unittest\nimport numpy as np\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.ensemble.iforest import _average_path_length\nfrom sklearn.utils.testing import assert_array_equal, assert_allclose\nfrom sklearn.datasets import make_classification\nfrom sklearn.utils.validation import check_random_state\n\nclass TestIsolationForest(unittest.TestCase):\n\n    def test_fit_predict(self):\n        X, _ = make_classification(n_samples=100, n_features=2, random_state=0)\n        clf = IsolationForest(random_state=0)\n        clf.fit(X)\n        y_pred = clf.predict(X)\n        self.assertEqual(len(y_pred), 100)\n\n    def test_decision_function(self):\n        X, _ = make_classification(n_samples=100, n_features=2, random_state=0)\n        clf = IsolationForest(random_state=0)\n        clf.fit(X)\n        scores = clf.decision_function(X)\n        self.assertEqual(len(scores), 100)\n\n    def test_score_samples(self):\n        X, _ = make_classification(n_samples=100, n_features=2, random_state=0)\n        clf = IsolationForest(random_state=0)\n        clf.fit(X)\n        scores = clf.score_samples(X)\n        self.assertEqual(len(scores), 100)\n\n    def test_threshold(self):\n        X, _ = make_classification(n_samples=100, n_features=2, random_state=0)\n        clf = IsolationForest(random_state=0)\n        clf.fit(X)\n        threshold = clf.threshold_\n        self.assertTrue(isinstance(threshold, float))\n\n    def test_contamination(self):\n        X, _ = make_classification(n_samples=100, n_features=2, random_state=0)\n        clf = IsolationForest(contamination=0.1, random_state=0)\n        clf.fit(X)\n        self.assertEqual(clf._contamination, 0.1)\n\n    def test_behaviour(self):\n        X, _ = make_classification(n_samples=100, n_features=2, random_state=0)\n        clf = IsolationForest(behaviour='old', random_state=0)\n        clf.fit(X)\n        self.assertEqual(clf.behaviour, 'old')\n\n    def test_average_path_length(self):\n        n_samples_leaf = np.array([1, 2, 3, 4, 5])\n        average_path_length = _average_path_length(n_samples_leaf)\n        self.assertEqual(len(average_path_length), 5)\n\n    def test_max_samples(self):\n        X, _ = make_classification(n_samples=100, n_features=2, random_state=0)\n        clf = IsolationForest(max_samples=50, random_state=0)\n        clf.fit(X)\n        self.assertEqual(clf.max_samples_, 50)\n\n    def test_max_features(self):\n        X, _ = make_classification(n_samples=100, n_features=2, random_state=0)\n        clf = IsolationForest(max_features=1, random_state=0)\n        clf.fit(X)\n        self.assertEqual(clf.max_features, 1)\n\n    def test_bootstrap(self):\n        X, _ = make_classification(n_samples=100, n_features=2, random_state=0)\n        clf = IsolationForest(bootstrap=True, random_state=0)\n        clf.fit(X)\n        self.assertTrue(clf.bootstrap)\n\n    def test_n_jobs(self):\n        X, _ = make_classification(n_samples=100, n_features=2, random_state=0)\n        clf = IsolationForest(n_jobs=2, random_state=0)\n        clf.fit(X)\n        self.assertEqual(clf.n_jobs, 2)\n\n    def test_warm_start(self):\n        X, _ = make_classification(n_samples=100, n_features=2, random_state=0)\n        clf = IsolationForest(warm_start=True, random_state=0)\n        clf.fit(X)\n        clf.fit(X)\n        self.assertTrue(clf.warm_start)\n\n    def test_sparse_input(self):\n        rng = check_random_state(0)\n        X = rng.rand(100, 10)\n        X_sparse = sparse.csr_matrix(X)\n        clf = IsolationForest(random_state=0)\n        clf.fit(X_sparse)\n        y_pred = clf.predict(X_sparse)\n        self.assertEqual(len(y_pred), 100)\n\n"], "sample_7": ["\nimport os\nimport signal\nimport sys\nimport time\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.apps import apps\nfrom django.core.signals import request_finished\nfrom django.utils import autoreload\nfrom django.utils.autoreload import (\n    BaseReloader,\n    DJANGO_AUTORELOAD_ENV,\n    StatReloader,\n    WatchmanReloader,\n    WatchmanUnavailable,\n    get_reloader,\n    iter_all_python_module_files,\n    iter_modules_and_files,\n    logger,\n)\nfrom django.urls import get_resolver\n\ntry:\n    import pywatchman\nexcept ImportError:\n    pywatchman = None\n\nclass TestAutoreload(unittest.TestCase):\n\n    def setUp(self):\n        self.reloader = autoreload.get_reloader()\n        self.reloader._stop_condition = MagicMock()\n\n    def test_get_reloader_returns_stat_reloader_if_watchman_unavailable(self):\n        with patch('django.utils.autoreload.pywatchman', None):\n            reloader = autoreload.get_reloader()\n            self.assertIsInstance(reloader, autoreload.StatReloader)\n\n    def test_get_reloader_returns_watchman_reloader_if_available(self):\n        with patch('django.utils.autoreload.pywatchman', MagicMock()):\n            reloader = autoreload.get_reloader()\n            self.assertIsInstance(reloader, autoreload.WatchmanReloader)\n\n    def test_iter_all_python_module_files(self):\n        # This test is difficult to write comprehensively as it depends on the\n        # current state of sys.modules. Instead, we'll test the logic of the\n        # function.\n        sys.modules['test_module'] = MagicMock()\n        sys.modules['test_module'].__file__ = '/path/to/test_module.py'\n        sys.modules['test_module'].__spec__ = MagicMock()\n        sys.modules['test_module'].__spec__.loader = MagicMock()\n        sys.modules['test_module'].__spec__.loader.archive = None\n        sys.modules['test_module'].__spec__.origin = '/path/to/test_module.py'\n        results = list(iter_all_python_module_files())\n        self.assertIn('/path/to/test_module.py', results)\n\n    def test_iter_modules_and_files(self):\n        modules = [MagicMock(), MagicMock()]\n        modules[0].__file__ = '/path/to/module1.py'\n        modules[1].__file__ = '/path/to/module2.py'\n        modules[0].__spec__ = MagicMock()\n        modules[0].__spec__.loader = MagicMock()\n        modules[0].__spec__.loader.archive = None\n        modules[0].__spec__.origin = '/path/to/module1.py'\n        modules[1].__spec__ = MagicMock()\n        modules[1].__spec__.loader = MagicMock()\n        modules[1].__spec__.loader.archive = None\n        modules[1].__spec__.origin = '/path/to/module2.py'\n        extra_files = {'/path/to/extra_file.py'}\n        results = list(iter_modules_and_files(modules, extra_files))\n        self.assertIn('/path/to/module1.py', results)\n        self.assertIn('/path/to/module2.py', results)\n        self.assertIn('/path/to/extra_file.py', results)\n\n    def test_common_roots(self):\n        paths = [\n            '/path/to/project/app1',\n            '/path/to/project/app2',\n            '/path/to/project/app3/subdir',\n        ]\n        roots = list(autoreload.common_roots(paths))\n        self.assertEqual(roots, ['/path/to/project'])\n\n    def test_sys_path_directories(self):\n        sys.path.append('/path/to/project')\n        sys.path.append('/path/to/another/project')\n        directories = list(autoreload.sys_path_directories())\n        self.assertIn('/path/to/project', directories)\n        self.assertIn('/path/to/another/project', directories)\n\n    def test_get_child_arguments(self):\n        args = autoreload.get_child_arguments()\n        self.assertIn(sys.executable, args)\n        self.assertIn('-W%s' % os.environ.get('PYTHONWARNINGS', 'default'), args)\n\n    def test_trigger_reload(self):\n        with patch('sys.exit') as mock_exit:\n            autoreload.trigger_reload('/path/to/file.py')\n            mock_exit.assert_called_with(3)\n\n    def test_restart_with_reloader(self):\n        with patch('os.environ', {'DJANGO_AUTORELOAD_ENV': 'true'}):\n            with patch('subprocess.call') as mock_call:\n                autoreload.restart_with_reloader()\n                mock_call.assert_called_once()\n\n    def test_base_reloader_watch_dir(self):\n        reloader = BaseReloader()\n        reloader.watch_dir('/path/to/dir', '*.py')\n        self.assertEqual(reloader.directory_globs['/path/to/dir'], {'*.py'})\n\n    def test_base_reloader_watch_file(self):\n        reloader = BaseReloader()\n        reloader.watch_file('/path/to/file.py')\n        self.assertIn('/path/to/file.py', reloader.extra_files)\n\n    def test_base_reloader_watched_files(self):\n        reloader = BaseReloader()\n        reloader.watch_dir('/path/to/dir', '*.py')\n        reloader.watch_file('/path/to/file.py')\n        files = list(reloader.watched_files())\n        self.assertIn('/path/to/file.py', files)\n\n    def test_base_reloader_wait_for_apps_ready(self):\n        reloader = BaseReloader()\n        apps.ready_event = MagicMock()\n        thread = MagicMock()\n        thread.is_alive.return_value = True\n        reloader.wait_for_apps_ready(apps, thread)\n        apps.ready_event.wait.assert_called_once()\n\n    def test_stat_reloader_tick(self):\n        reloader = StatReloader()\n        reloader.snapshot_files = MagicMock(return_value=[('/path/to/file.py', 12345)])\n        reloader.notify_file_changed = MagicMock()\n        next(reloader.tick())\n        reloader.notify_file_changed.assert_called_once_with('/path/to/file.py')\n\n    def test_stat_reloader_snapshot_files(self):\n        reloader = StatReloader()\n        file = MagicMock()\n        file.stat.return_value.st_mtime = 12345\n        files = list(reloader.snapshot_files())\n        self.assertEqual(files[0][0], file)\n        self.assertEqual(files[0][1], 12345)\n\n    def test_watchman_reloader_check_availability(self):\n        with patch('django.utils.autoreload.pywatchman', MagicMock()):\n            reloader = WatchmanReloader()\n            reloader.check_availability()\n\n    def test_watchman_reloader_update_watches(self):\n        reloader = WatchmanReloader()\n        reloader.client = MagicMock()\n        reloader.client.query.return_value = {'watch': 'watch_id', 'relative_path': 'relative_path'}\n        reloader.update_watches()\n        reloader.client.query.assert_called()\n\n    def test_watchman_reloader_tick(self):\n        reloader = WatchmanReloader()\n        reloader.client = MagicMock()\n        reloader.client.receive.return_value = []\n        reloader.client.subs = {}\n        reloader.client.getSubscription.return_value = None\n        next(reloader.tick())\n        reloader.client.receive.assert_called_once()\n\n    def test_watchman_reloader_check_server_status(self):\n        reloader = WatchmanReloader()\n        reloader.client = MagicMock()\n        reloader.check_server_status()\n        reloader.client.query.assert_called_once()\n\n    def test_run_with_reloader(self):\n        with patch('django.utils.autoreload.get_reloader') as mock_get_reloader:\n            mock_get_reloader.return_value = MagicMock()\n            autoreload.run_with_reloader(lambda: None)\n            mock_get_reloader.assert_called_once()\n\n\n\n"], "sample_49": ["\nimport os\nimport tempfile\nfrom pathlib import Path\n\nfrom django.conf import settings\nfrom django.template import engines\nfrom django.template.backends.django import DjangoTemplates\nfrom django.test import TestCase\nfrom django.utils._os import to_path\nfrom django.utils.autoreload import (\n    autoreload_started, file_changed, is_django_path,\n)\n\nfrom django.template.autoreload import (\n    get_template_directories, reset_loaders, watch_for_template_changes,\n    template_changed,\n)\n\nclass AutoreloadTests(TestCase):\n\n    def setUp(self):\n        # Create a temporary directory for testing\n        self.temp_dir = tempfile.mkdtemp()\n        settings.TEMPLATES = [\n            {\n                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                'DIRS': [self.temp_dir],\n                'APP_DIRS': True,\n                'OPTIONS': {\n                    'context_processors': [\n                        'django.template.context_processors.debug',\n                        'django.template.context_processors.request',\n                        'django.contrib.auth.context_processors.auth',\n                        'django.contrib.messages.context_processors.messages',\n                    ],\n                },\n            },\n        ]\n\n    def tearDown(self):\n        # Clean up the temporary directory\n        os.rmdir(self.temp_dir)\n\n    def test_get_template_directories(self):\n        # Create a test template directory\n        test_dir = Path(self.temp_dir) / 'test_templates'\n        test_dir.mkdir()\n\n        # Assert that the test directory is included in the returned directories\n        directories = get_template_directories()\n        self.assertIn(test_dir, directories)\n\n    def test_reset_loaders(self):\n        # Mock the reset method of a template loader\n        class MockLoader:\n            def reset(self):\n                self.reset_called = True\n\n        # Create a mock engine with the mock loader\n        mock_engine = DjangoTemplates(\n            dirs=[self.temp_dir],\n            template_loaders=[MockLoader()],\n        )\n\n        # Add the mock engine to the engines list\n        engines.all().append(mock_engine)\n\n        # Call reset_loaders\n        reset_loaders()\n\n        # Assert that the reset method was called on the mock loader\n        self.assertTrue(mock_engine.template_loaders[0].reset_called)\n\n    def test_watch_for_template_changes(self):\n        # Create a test template directory\n        test_dir = Path(self.temp_dir) / 'test_templates'\n        test_dir.mkdir()\n\n        # Mock the watch_dir method of the autoreload sender\n        class MockSender:\n            def watch_dir(self, directory, pattern):\n                self.watched_directory = directory\n                self.watched_pattern = pattern\n\n        # Call watch_for_template_changes with the mock sender\n        watch_for_template_changes(MockSender())\n\n        # Assert that the test directory is watched\n        self.assertEqual(MockSender().watched_directory, test_dir)\n        self.assertEqual(MockSender().watched_pattern, '**/*')\n\n    def test_template_changed(self):\n        # Create a test template file\n        test_file = Path(self.temp_dir) / 'test_templates' / 'test.html'\n        test_file.touch()\n\n        # Call template_changed with the test file path\n        template_changed(None, test_file)\n\n        # Assert that reset_loaders was called\n        self.assertTrue(reset_loaders.called)\n\n"], "sample_17": ["\nimport os\nimport sys\nfrom io import StringIO\n\nfrom django.apps import apps\nfrom django.conf import settings\nfrom django.core import serializers\nfrom django.db import router\nfrom django.db.transaction import atomic\nfrom django.db.backends.base.creation import (\n    TEST_DATABASE_PREFIX,\n    BaseDatabaseCreation,\n)\nfrom django.core.management import call_command\n\nclass TestBaseDatabaseCreation(object):\n\n    def setUp(self):\n        self.connection = None\n        self.test_database_name = None\n\n    def test_create_test_db(self):\n        # Mock the connection object\n        self.connection = MockConnection()\n        self.connection.settings_dict = {\n            'NAME': 'test_db',\n            'TEST': {'NAME': None, 'MIGRATE': True},\n        }\n        self.connection.alias = 'default'\n        self.connection.ops = MockOps()\n        self.connection.constraint_checks_disabled = MockConstraintChecksDisabled()\n\n        # Create a BaseDatabaseCreation instance\n        creation = BaseDatabaseCreation(self.connection)\n\n        # Call create_test_db\n        creation.create_test_db(verbosity=0, autoclobber=False, serialize=True, keepdb=False)\n\n        # Assert that the test database name is set correctly\n        self.assertEqual(self.connection.settings_dict['NAME'], creation._get_test_db_name())\n\n        # Assert that the migrate command is called\n        self.assertTrue(self.connection.migrate_called)\n\n        # Assert that the serialize_db_to_string method is called\n        self.assertTrue(self.connection.serialize_called)\n\n    def test_set_as_test_mirror(self):\n        # Mock the connection object\n        self.connection = MockConnection()\n        self.connection.settings_dict = {'NAME': 'test_db'}\n        self.connection.alias = 'default'\n\n        # Create a BaseDatabaseCreation instance\n        creation = BaseDatabaseCreation(self.connection)\n\n        # Call set_as_test_mirror\n        primary_settings_dict = {'NAME': 'primary_db'}\n        creation.set_as_test_mirror(primary_settings_dict)\n\n        # Assert that the connection settings are updated\n        self.assertEqual(self.connection.settings_dict['NAME'], 'primary_db')\n\n    def test_serialize_db_to_string(self):\n        # Mock the connection object\n        self.connection = MockConnection()\n        self.connection.settings_dict = {'NAME': 'test_db'}\n        self.connection.alias = 'default'\n        self.connection.ops = MockOps()\n\n        # Create a BaseDatabaseCreation instance\n        creation = BaseDatabaseCreation(self.connection)\n\n        # Mock the apps and models\n        apps.app_configs = [MockAppConfig()]\n        router.allow_migrate_model = MockAllowMigrateModel()\n\n        # Call serialize_db_to_string\n        serialized_data = creation.serialize_db_to_string()\n\n        # Assert that the serialized data is not empty\n        self.assertTrue(serialized_data)\n\n    def test_deserialize_db_from_string(self):\n        # Mock the connection object\n        self.connection = MockConnection()\n        self.connection.settings_dict = {'NAME': 'test_db'}\n        self.connection.alias = 'default'\n        self.connection.ops = MockOps()\n\n        # Create a BaseDatabaseCreation instance\n        creation = BaseDatabaseCreation(self.connection)\n\n        # Mock the serialized data\n        serialized_data = '{\"model\": {\"fields\": {\"id\": 1}}}'\n\n        # Call deserialize_db_from_string\n        creation.deserialize_db_from_string(serialized_data)\n\n        # Assert that the data is deserialized correctly\n        self.assertTrue(self.connection.deserialize_called)\n\n    def test_get_test_db_name(self):\n        # Mock the connection object\n        self.connection = MockConnection()\n        self.connection.settings_dict = {'NAME': 'test_db', 'TEST': {'NAME': 'custom_test_db'}}\n        self.connection.alias = 'default'\n\n        # Create a BaseDatabaseCreation instance\n        creation = BaseDatabaseCreation(self.connection)\n\n        # Call get_test_db_name\n        test_db_name = creation._get_test_db_name()\n\n        # Assert that the test database name is correct\n        self.assertEqual(test_db_name, 'custom_test_db')\n\n    def test_destroy_test_db(self):\n        # Mock the connection object\n        self.connection = MockConnection()\n        self.connection.settings_dict = {'NAME': 'test_db'}\n        self.connection.alias = 'default'\n\n        # Create a BaseDatabaseCreation instance\n        creation = BaseDatabaseCreation(self.connection)\n\n        # Call destroy_test_db\n        creation.destroy_test_db(verbosity=0, keepdb=False)\n\n        # Assert that the destroy_test_db method is called\n        self.assertTrue(self.connection.destroy_called)\n\n    def test_clone_test_db(self):\n        # Mock the connection object\n        self.connection = MockConnection()\n        self.connection.settings_dict = {'NAME': 'test_db'}\n        self.connection.alias = 'default'\n\n        # Create a BaseDatabaseCreation instance\n        creation = BaseDatabaseCreation(self.connection)\n\n        # Call clone_test_db\n        creation.clone_test_db(suffix='clone1', verbosity=0, autoclobber=False, keepdb=False)\n\n        # Assert that the clone_test_db method is called\n        self.assertTrue(self.connection.clone_called)\n\n    def test_get_test_db_clone_settings(self):\n        # Mock the connection object\n        self.connection = MockConnection()\n        self.connection.settings_dict = {'NAME': 'test_db'}\n        self.connection.alias = 'default'\n\n        # Create a BaseDatabaseCreation instance\n        creation = BaseDatabaseCreation(self.connection)\n\n        # Call get_test_db_clone_settings\n        clone_settings = creation.get_test_db_clone_settings(suffix='clone1')\n\n        # Assert that the clone settings are correct\n        self.assertEqual(clone_settings['NAME'], 'test_db_clone1')\n\nclass MockConnection:\n    def __init__(self):\n        self.settings_dict = {}\n        self.alias = None\n        self.ops = None\n        self.migrate_called = False\n        self.serialize_called = False\n        self.deserialize_called = False\n        self.destroy_called = False\n        self.clone_called = False\n\n    def _nodb_cursor(self):\n        return self\n\n    def close(self):\n        pass\n\n    def ensure_connection(self):\n        pass\n\n    def constraint_checks_disabled(self):\n        return self\n\nclass MockOps:\n    def quote_name(self, name):\n        return name\n\nclass MockConstraintChecksDisabled:\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        pass\n\nclass MockAppConfig:\n    models_module = None\n    label = 'test_app'\n\nclass MockAllowMigrateModel:\n    def __call__(self, alias, model):\n        return True\n\n"], "sample_25": ["\nfrom django.db import models\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.operations import (\n    AddField,\n    AlterField,\n    RemoveField,\n    AlterModelOptions,\n    AlterUniqueTogether,\n    AlterIndexTogether,\n    RenameModel,\n    DeleteModel,\n)\n\nclass TestModel(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\nclass TestModel2(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n    extra_field = models.BooleanField()\n\nclass TestModel3(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\nclass TestModel4(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField(unique=True)\n\nclass TestModel5(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\n    class Meta:\n        unique_together = ('name', 'age')\n\nclass TestModel6(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\n    class Meta:\n        index_together = ('name', 'age')\n\nclass TestModel7(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\n    class Meta:\n        ordering = ('name',)\n\nclass TestModel8(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\n    class Meta:\n        db_table = 'custom_table'\n\nclass TestModel9(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\n    class Meta:\n        managed = False\n\nclass TestModel10(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\nclass TestModel11(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField(null=True)\n\nclass TestModel12(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField(blank=True)\n\nclass TestModel13(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField(default=10)\n\nclass TestModel14(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField(choices=[(1, 'One'), (2, 'Two')])\n\nclass TestModel15(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\n    def __str__(self):\n        return self.name\n\nclass TestModel16(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\n    def clean(self):\n        if self.age < 0:\n            raise ValidationError('Age cannot be negative')\n\nclass TestModel17(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\n    class Meta:\n        verbose_name = 'Custom Name'\n        verbose_name_plural = 'Custom Names'\n\nclass TestModel18(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\n    def save(self, *args, **kwargs):\n        # Custom save logic\n        super().save(*args, **kwargs)\n\ndef test_add_field():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel2,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AddField)\n\ndef test_remove_field():\n    autodetector = MigrationAutodetector(\n        TestModel2,\n        TestModel,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], RemoveField)\n\ndef test_change_field():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel11,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AlterField)\n\ndef test_rename_model():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel3,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], RenameModel)\n\ndef test_delete_model():\n    autodetector = MigrationAutodetector(\n        TestModel,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], DeleteModel)\n\ndef test_alter_unique_together():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel5,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AlterUniqueTogether)\n\ndef test_alter_index_together():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel6,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AlterIndexTogether)\n\ndef test_alter_model_options():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel7,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AlterModelOptions)\n\ndef test_alter_db_table():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel8,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AlterModelTable)\n\ndef test_managed_to_unmanaged():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel9,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AlterModelOptions)\n\ndef test_unmanaged_to_managed():\n    autodetector = MigrationAutodetector(\n        TestModel9,\n        TestModel,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AlterModelOptions)\n\ndef test_default_value():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel13,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AlterField)\n\ndef test_choices():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel14,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AlterField)\n\ndef test_null():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel11,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AlterField)\n\ndef test_blank():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel12,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AlterField)\n\ndef test_custom_str():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel15,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AlterField)\n\ndef test_custom_clean():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel16,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AlterField)\n\ndef test_custom_verbose_name():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel17,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 1\n    assert isinstance(changes['test_app'][0].operations[0], AlterModelOptions)\n\ndef test_custom_save():\n    autodetector = MigrationAutodetector(\n        TestModel,\n        TestModel18,\n    )\n    changes = autodetector.changes(None, None)\n    assert len(changes['test_app']) == 0\n\n"], "sample_67": ["\nimport datetime\nimport decimal\nimport enum\nimport functools\nimport os\nimport pathlib\nimport re\nimport uuid\nfrom unittest import mock\n\nfrom django.conf import settings\nfrom django.db import models\nfrom django.db.migrations.operations.base import Operation\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    BaseSequenceSerializer,\n    BaseSimpleSerializer,\n    BaseUnorderedSequenceSerializer,\n    ChoicesSerializer,\n    DateTimeSerializer,\n    DatetimeDatetimeSerializer,\n    DecimalSerializer,\n    DeconstructableSerializer,\n    DictionarySerializer,\n    EnumSerializer,\n    FloatSerializer,\n    FrozensetSerializer,\n    FunctionTypeSerializer,\n    FunctoolsPartialSerializer,\n    IterableSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    PathLikeSerializer,\n    PathSerializer,\n    RegexSerializer,\n    SequenceSerializer,\n    SetSerializer,\n    SettingsReferenceSerializer,\n    TupleSerializer,\n    TypeSerializer,\n    UUIDSerializer,\n    serializer_factory,\n)\nfrom django.utils.functional import LazyObject, Promise\nfrom django.utils.version import PY311\n\n\nclass TestSerializer(object):\n    def test_base_serializer(self):\n        class MySerializer(BaseSerializer):\n            def serialize(self):\n                return \"test\", set()\n\n        serializer = MySerializer(\"value\")\n        self.assertEqual(serializer.serialize(), (\"test\", set()))\n\n    def test_base_sequence_serializer(self):\n        serializer = BaseSequenceSerializer([1, 2, 3])\n        with mock.patch.object(serializer, \"_format\") as mock_format:\n            mock_format.return_value = \"%s\"\n            self.assertEqual(serializer.serialize(), (\"%s\", set()))\n\n    def test_base_unordered_sequence_serializer(self):\n        serializer = BaseUnorderedSequenceSerializer([3, 1, 2])\n        with mock.patch.object(serializer, \"_format\") as mock_format:\n            mock_format.return_value = \"%s\"\n            self.assertEqual(serializer.serialize(), (\"%s\", set()))\n\n    def test_base_simple_serializer(self):\n        serializer = BaseSimpleSerializer(\"value\")\n        self.assertEqual(serializer.serialize(), (\"'value'\", set()))\n\n    def test_choices_serializer(self):\n        class MyChoices(models.Choices):\n            OPTION_A = \"A\", \"Option A\"\n            OPTION_B = \"B\", \"Option B\"\n\n        serializer = ChoicesSerializer(MyChoices.OPTION_A)\n        self.assertEqual(serializer.serialize(), serializer_factory(MyChoices.OPTION_A).serialize())\n\n    def test_datetime_serializer(self):\n        serializer = DateTimeSerializer(datetime.date(2023, 1, 1))\n        self.assertEqual(serializer.serialize(), (\"datetime.date(2023, 1, 1)\", {\"import datetime\"}))\n\n    def test_datetimedatetime_serializer(self):\n        serializer = DatetimeDatetimeSerializer(datetime.datetime(2023, 1, 1, 12, 0, 0))\n        self.assertEqual(serializer.serialize(), (\"datetime.datetime(2023, 1, 1, 12, 0)\", {\"import datetime\"}))\n\n    def test_decimal_serializer(self):\n        serializer = DecimalSerializer(decimal.Decimal(\"1.23\"))\n        self.assertEqual(serializer.serialize(), (\"Decimal('1.23')\", {\"from decimal import Decimal\"}))\n\n    def test_deconstructable_serializer(self):\n        class MyDeconstructable:\n            def deconstruct(self):\n                return \"path.to.module\", [], {}\n\n        serializer = DeconstructableSerializer(MyDeconstructable())\n        self.assertEqual(serializer.serialize(), (\"path.to.module()\", {\"import path.to.module\"}))\n\n    def test_dictionary_serializer(self):\n        serializer = DictionarySerializer({\"key\": \"value\"})\n        self.assertEqual(serializer.serialize(), (\"{'key': 'value'}\", set()))\n\n    def test_enum_serializer(self):\n        class MyEnum(enum.Enum):\n            OPTION_A = \"A\"\n            OPTION_B = \"B\"\n\n        serializer = EnumSerializer(MyEnum.OPTION_A)\n        self.assertEqual(serializer.serialize(), (\"MyEnum.OPTION_A\", {\"import my_module\"}))\n\n    def test_float_serializer(self):\n        serializer = FloatSerializer(1.23)\n        self.assertEqual(serializer.serialize(), (\"1.23\", set()))\n\n    def test_frozenset_serializer(self):\n        serializer = FrozensetSerializer(frozenset([1, 2, 3]))\n        self.assertEqual(serializer.serialize(), (\"frozenset([1, 2, 3])\", set()))\n\n    def test_function_type_serializer(self):\n        def my_function():\n            pass\n\n        serializer = FunctionTypeSerializer(my_function)\n        self.assertEqual(serializer.serialize(), (\"<module>.my_function\", {\"import <module>\"}))\n\n    def test_functools_partial_serializer(self):\n        def my_function(a, b):\n            return a + b\n\n        partial_function = functools.partial(my_function, 1)\n        serializer = FunctoolsPartialSerializer(partial_function)\n        self.assertEqual(serializer.serialize(), (\"functools.partial(<module>.my_function, 1)\", {\"import functools\", \"import <module>\"}))\n\n    def test_iterable_serializer(self):\n        serializer = IterableSerializer([1, 2, 3])\n        self.assertEqual(serializer.serialize(), (\"(1, 2, 3)\", set()))\n\n    def test_model_field_serializer(self):\n        field = models.CharField(max_length=100)\n        serializer = ModelFieldSerializer(field)\n        self.assertEqual(serializer.serialize(), serializer_factory(field.deconstruct()).serialize())\n\n    def test_model_manager_serializer(self):\n        manager = models.Manager()\n        serializer = ModelManagerSerializer(manager)\n        self.assertEqual(serializer.serialize(), serializer_factory(manager.deconstruct()).serialize())\n\n    def test_operation_serializer(self):\n        operation = Operation()\n        serializer = OperationSerializer(operation)\n        self.assertEqual(serializer.serialize(), (operation.serialize(), set()))\n\n    def test_pathlike_serializer(self):\n        serializer = PathLikeSerializer(pathlib.Path(\"/path/to/file\"))\n        self.assertEqual(serializer.serialize(), (\"'/path/to/file'\", set()))\n\n    def test_path_serializer(self):\n        serializer = PathSerializer(pathlib.Path(\"/path/to/file\"))\n        self.assertEqual(serializer.serialize(), (\"pathlib.PurePath('/path/to/file')\", {\"import pathlib\"}))\n\n    def test_regex_serializer(self):\n        serializer = RegexSerializer(re.compile(r\"pattern\"))\n        self.assertEqual(serializer.serialize(), (\"re.compile('pattern')\", {\"import re\"}))\n\n    def test_sequence_serializer(self):\n        serializer = SequenceSerializer([1, 2, 3])\n        self.assertEqual(serializer.serialize(), (\"[1, 2, 3]\", set()))\n\n    def test_set_serializer(self):\n        serializer = SetSerializer({1, 2, 3})\n        self.assertEqual(serializer.serialize(), (\"{1, 2, 3}\", set()))\n\n    def test_settings_reference_serializer(self):\n        serializer = SettingsReferenceSerializer(settings.DEBUG)\n        self.assertEqual(serializer.serialize(), (\"settings.DEBUG\", {\"from django.conf import settings\"}))\n\n    def test_tuple_serializer(self):\n        serializer = TupleSerializer((1, 2, 3))\n        self.assertEqual(serializer.serialize(), (\"(1, 2, 3)\", set()))\n\n    def test_type_serializer(self):\n        serializer = TypeSerializer(int)\n        self.assertEqual(serializer.serialize(), (\"int\", set()))\n\n    def test_uuid_serializer(self):\n        serializer = UUIDSerializer(uuid.UUID(\"12345678-1234-5678-1234-567812345678\"))\n        self.assertEqual(serializer.serialize(), (\"uuid.UUID('12345678-1234-5678-1234-567812345678')\", {\"import uuid\"}))\n\n    def test_serializer_factory_promise(self):\n        promise = Promise(lambda: \"value\")\n        self.assertEqual(serializer_factory(promise).serialize(), (\"'value'\", set()))\n\n    def test_serializer_factory_lazyobject(self):\n        lazy_object = LazyObject(lambda: \"value\")\n        self.assertEqual(serializer_factory(lazy_object).serialize(), (\"'value'\", set()))\n\n    def test_serializer_factory_deconstructable(self):\n        class MyDeconstructable:\n            def deconstruct(self):\n                return \"path.to.module\", [], {}\n\n        self.assertEqual(serializer_factory(MyDeconstructable()).serialize(), (\"path.to.module()\", {\"import path.to.module\"}))\n\n    def test_serializer_factory_unknown_type(self):\n        with self.assertRaises(ValueError):\n            serializer_factory(object())\n\n"], "sample_76": ["\nimport pytest\nfrom numpy.testing import assert_array_equal\nimport pandas as pd\nfrom seaborn._stats.regression import PolyFit\n\ndef test_polyfit_basic():\n    data = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 4, 5, 4, 5]})\n    stat = PolyFit(order=2)\n    result = stat(data, groupby=lambda x: x, orient=None, scales=None)\n    assert isinstance(result, pd.DataFrame)\n    assert 'x' in result.columns\n    assert 'y' in result.columns\n\ndef test_polyfit_not_enough_points():\n    data = pd.DataFrame({'x': [1, 2], 'y': [2, 4]})\n    stat = PolyFit(order=2)\n    result = stat(data, groupby=lambda x: x, orient=None, scales=None)\n    assert isinstance(result, pd.DataFrame)\n    assert result.empty\n\ndef test_polyfit_different_order():\n    data = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 4, 5, 4, 5]})\n    stat = PolyFit(order=3)\n    result = stat(data, groupby=lambda x: x, orient=None, scales=None)\n    assert isinstance(result, pd.DataFrame)\n    assert 'x' in result.columns\n    assert 'y' in result.columns\n"], "sample_32": ["\nfrom django.db import models\nfrom django.db.models.fields import JSONField\nfrom django.db.models.fields.json import (\n    HasKey,\n    HasKeyLookup,\n    HasKeys,\n    HasAnyKeys,\n    JSONExact,\n    KeyTransform,\n    KeyTransformExact,\n    KeyTransformIExact,\n    KeyTransformIsNull,\n    KeyTransformIn,\n    KeyTransformIContains,\n    KeyTransformStartsWith,\n    KeyTransformIStartsWith,\n    KeyTransformEndsWith,\n    KeyTransformIEndsWith,\n    KeyTransformRegex,\n    KeyTransformIRegex,\n    KeyTransformLt,\n    KeyTransformLte,\n    KeyTransformGt,\n    KeyTransformGte,\n    KeyTransformFactory,\n)\nfrom django.test import TestCase\nfrom django.utils import timezone\n\nclass JSONModel(models.Model):\n    data = JSONField()\n\nclass NullableJSONModel(models.Model):\n    data = JSONField(null=True, blank=True)\n\nclass RelatedJSONModel(models.Model):\n    related = models.ForeignKey(JSONModel, on_delete=models.CASCADE)\n    data = JSONField()\n\nclass CustomJSONDecoder(json.JSONDecoder):\n    def decode(self, s):\n        return super().decode(s)\n\nclass JSONFieldTests(TestCase):\n\n    def test_jsonfield_creation(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertEqual(model.data, {'key': 'value'})\n\n    def test_jsonfield_null(self):\n        model = NullableJSONModel.objects.create(data=None)\n        self.assertIsNone(model.data)\n\n    def test_jsonfield_blank(self):\n        model = NullableJSONModel.objects.create(data='')\n        self.assertEqual(model.data, {})\n\n    def test_jsonfield_related(self):\n        related_model = JSONModel.objects.create(data={'key': 'value'})\n        model = RelatedJSONModel.objects.create(related=related_model, data={'key': 'value'})\n        self.assertEqual(model.related.data, {'key': 'value'})\n\n    def test_jsonfield_custom_decoder(self):\n        class CustomJSONModel(models.Model):\n            data = JSONField(decoder=CustomJSONDecoder)\n\n        model = CustomJSONModel.objects.create(data='{\"key\": \"value\"}')\n        self.assertEqual(model.data, {'key': 'value'})\n\n    def test_jsonfield_has_key(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertTrue(JSONModel.objects.filter(data__has_key='key').exists())\n\n    def test_jsonfield_has_keys(self):\n        model = JSONModel.objects.create(data={'key1': 'value1', 'key2': 'value2'})\n        self.assertTrue(JSONModel.objects.filter(data__has_keys=['key1', 'key2']).exists())\n\n    def test_jsonfield_has_any_keys(self):\n        model = JSONModel.objects.create(data={'key1': 'value1', 'key2': 'value2'})\n        self.assertTrue(JSONModel.objects.filter(data__has_any_keys=['key1', 'key3']).exists())\n\n    def test_jsonfield_exact(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertTrue(JSONModel.objects.filter(data__key='value').exists())\n\n    def test_jsonfield_iexact(self):\n        model = JSONModel.objects.create(data={'key': 'Value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__iexact='value').exists())\n\n    def test_jsonfield_isnull(self):\n        model = NullableJSONModel.objects.create(data=None)\n        self.assertTrue(NullableJSONModel.objects.filter(data__isnull=True).exists())\n\n    def test_jsonfield_in(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__in=['value', 'other']).exists())\n\n    def test_jsonfield_icontains(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__icontains='al').exists())\n\n    def test_jsonfield_istartswith(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__istartswith='va').exists())\n\n    def test_jsonfield_iendswith(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__iendswith='ue').exists())\n\n    def test_jsonfield_regex(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__regex=r'^va.*$').exists())\n\n    def test_jsonfield_iregex(self):\n        model = JSONModel.objects.create(data={'key': 'Value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__iregex=r'^va.*$').exists())\n\n    def test_jsonfield_lt(self):\n        model = JSONModel.objects.create(data={'key': 1})\n        self.assertTrue(JSONModel.objects.filter(data__key__lt=2).exists())\n\n    def test_jsonfield_lte(self):\n        model = JSONModel.objects.create(data={'key': 1})\n        self.assertTrue(JSONModel.objects.filter(data__key__lte=1).exists())\n\n    def test_jsonfield_gt(self):\n        model = JSONModel.objects.create(data={'key': 1})\n        self.assertTrue(JSONModel.objects.filter(data__key__gt=0).exists())\n\n    def test_jsonfield_gte(self):\n        model = JSONModel.objects.create(data={'key': 1})\n        self.assertTrue(JSONModel.objects.filter(data__key__gte=1).exists())\n\n    def test_jsonfield_keytransform(self):\n        model = JSONModel.objects.create(data={'key': {'nested_key': 'value'}})\n        self.assertEqual(JSONModel.objects.get(data__key__nested_key='value').data, {'key': {'nested_key': 'value'}})\n\n    def test_jsonfield_keytransform_isnull(self):\n        model = JSONModel.objects.create(data={'key': None})\n        self.assertTrue(JSONModel.objects.filter(data__key__isnull=True).exists())\n\n    def test_jsonfield_keytransform_in(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__in=['value', 'other']).exists())\n\n    def test_jsonfield_keytransform_exact(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__exact='value').exists())\n\n    def test_jsonfield_keytransform_iexact(self):\n        model = JSONModel.objects.create(data={'key': 'Value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__iexact='value').exists())\n\n    def test_jsonfield_keytransform_icontains(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__icontains='al').exists())\n\n    def test_jsonfield_keytransform_istartswith(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__istartswith='va').exists())\n\n    def test_jsonfield_keytransform_iendswith(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__iendswith='ue').exists())\n\n    def test_jsonfield_keytransform_regex(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__regex=r'^va.*$').exists())\n\n    def test_jsonfield_keytransform_iregex(self):\n        model = JSONModel.objects.create(data={'key': 'Value'})\n        self.assertTrue(JSONModel.objects.filter(data__key__iregex=r'^va.*$').exists())\n\n    def test_jsonfield_keytransform_lt(self):\n        model = JSONModel.objects.create(data={'key': 1})\n        self.assertTrue(JSONModel.objects.filter(data__key__lt=2).exists())\n\n    def test_jsonfield_keytransform_lte(self):\n        model = JSONModel.objects.create(data={'key': 1})\n        self.assertTrue(JSONModel.objects.filter(data__key__lte=1).exists())\n\n    def test_jsonfield_keytransform_gt(self):\n        model = JSONModel.objects.create(data={'key': 1})\n        self.assertTrue(JSONModel.objects.filter(data__key__gt=0).exists())\n\n    def test_jsonfield_keytransform_gte(self):\n        model = JSONModel.objects.create(data={'key': 1})\n        self.assertTrue(JSONModel.objects.filter(data__key__gte=1).exists())\n\n    def test_jsonfield_keytransform_factory(self):\n        model = JSONModel.objects.create(data={'key': 'value'})\n        self.assertEqual(JSONModel.objects.get(data__key='value').data, {'key': 'value'})\n\n"], "sample_56": ["\nfrom django.core.checks.templates import (\n    E001,\n    E002,\n    E003,\n    check_for_template_tags_with_the_same_name,\n    check_setting_app_dirs_loaders,\n    check_string_if_invalid_is_string,\n)\nfrom django.conf import settings\nfrom django.test import SimpleTestCase\n\nclass TemplatesChecksTests(SimpleTestCase):\n\n    def test_check_setting_app_dirs_loaders_with_app_dirs_and_loaders(self):\n        settings.TEMPLATES = [\n            {\n                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                'APP_DIRS': True,\n                'OPTIONS': {'loaders': ['django.template.loaders.filesystem.Loader']}\n            }\n        ]\n        errors = check_setting_app_dirs_loaders(None, **{})\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, E001.id)\n\n    def test_check_setting_app_dirs_loaders_without_app_dirs(self):\n        settings.TEMPLATES = [\n            {\n                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                'APP_DIRS': False,\n                'OPTIONS': {'loaders': ['django.template.loaders.filesystem.Loader']}\n            }\n        ]\n        errors = check_setting_app_dirs_loaders(None, **{})\n        self.assertEqual(len(errors), 0)\n\n    def test_check_setting_app_dirs_loaders_without_loaders(self):\n        settings.TEMPLATES = [\n            {\n                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                'APP_DIRS': True,\n                'OPTIONS': {}\n            }\n        ]\n        errors = check_setting_app_dirs_loaders(None, **{})\n        self.assertEqual(len(errors), 0)\n\n    def test_check_string_if_invalid_is_string(self):\n        settings.TEMPLATES = [\n            {\n                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                'OPTIONS': {'string_if_invalid': 'test'}\n            }\n        ]\n        errors = check_string_if_invalid_is_string(None, **{})\n        self.assertEqual(len(errors), 0)\n\n    def test_check_string_if_invalid_is_not_string(self):\n        settings.TEMPLATES = [\n            {\n                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                'OPTIONS': {'string_if_invalid': 123}\n            }\n        ]\n        errors = check_string_if_invalid_is_string(None, **{})\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, E002.id)\n\n    def test_check_for_template_tags_with_the_same_name_no_duplicates(self):\n        settings.TEMPLATES = [\n            {\n                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                'OPTIONS': {'libraries': {'my_library': 'my_app.templatetags.my_library'}}\n            }\n        ]\n        errors = check_for_template_tags_with_the_same_name(None, **{})\n        self.assertEqual(len(errors), 0)\n\n    def test_check_for_template_tags_with_the_same_name_with_duplicates(self):\n        settings.TEMPLATES = [\n            {\n                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                'OPTIONS': {'libraries': {'my_library': 'my_app.templatetags.my_library'}}\n            },\n            {\n                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                'OPTIONS': {'libraries': {'my_library': 'another_app.templatetags.my_library'}}\n            }\n        ]\n        errors = check_for_template_tags_with_the_same_name(None, **{})\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, E003.id)\n\n\n\n"], "sample_40": ["\nfrom django.core.exceptions import ValidationError\nfrom django.forms import (\n    BooleanField,\n    CharField,\n    ChoiceField,\n    Form,\n    IntegerField,\n    MultiValueDict,\n    Select,\n    Textarea,\n)\nfrom django.forms.boundfield import BoundField\nfrom django.forms.widgets import TextInput\nfrom django.utils.safestring import mark_safe\n\nclass MyForm(Form):\n    name = CharField(max_length=100)\n    age = IntegerField()\n    choices = ChoiceField(choices=[(1, 'One'), (2, 'Two')])\n\ndef test_boundfield_as_widget():\n    form = MyForm({'name': 'John Doe', 'age': '30', 'choices': '1'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bound_field.as_widget() == '<input type=\"text\" name=\"name\" value=\"John Doe\" id=\"id_name\">'\n\ndef test_boundfield_as_text():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bound_field.as_text() == '<input type=\"text\" name=\"name\" value=\"John Doe\" id=\"id_name\">'\n\ndef test_boundfield_as_textarea():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bound_field.as_textarea() == '<textarea name=\"name\" id=\"id_name\">John Doe</textarea>'\n\ndef test_boundfield_as_hidden():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bound_field.as_hidden() == '<input type=\"hidden\" name=\"name\" value=\"John Doe\" id=\"id_name\">'\n\ndef test_boundfield_label_tag():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bound_field.label_tag() == '<label for=\"id_name\">name</label>'\n\ndef test_boundfield_css_classes():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bound_field.css_classes() == ''\n\ndef test_boundfield_is_hidden():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert not bound_field.is_hidden\n\ndef test_boundfield_auto_id():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bound_field.auto_id == 'name'\n\ndef test_boundfield_id_for_label():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bound_field.id_for_label == 'id_name'\n\ndef test_boundfield_initial():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bound_field.initial == 'John Doe'\n\ndef test_boundfield_build_widget_attrs():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    attrs = {}\n    assert bound_field.build_widget_attrs(attrs) == {}\n\ndef test_boundfield_widget_type():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bound_field.widget_type == 'textinput'\n\ndef test_boundfield_errors():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bound_field.errors == []\n\ndef test_boundfield_value():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bound_field.value() == 'John Doe'\n\ndef test_boundfield_data():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bound_field.data == 'John Doe'\n\ndef test_boundfield_subwidgets():\n    form = MyForm({'choices': '1'})\n    bound_field = BoundField(form, form.fields['choices'], 'choices')\n    assert len(bound_field.subwidgets) == 1\n\ndef test_boundfield_getitem():\n    form = MyForm({'choices': '1'})\n    bound_field = BoundField(form, form.fields['choices'], 'choices')\n    assert isinstance(bound_field[0], BoundWidget)\n\ndef test_boundfield_len():\n    form = MyForm({'choices': '1'})\n    bound_field = BoundField(form, form.fields['choices'], 'choices')\n    assert len(bound_field) == 1\n\ndef test_boundfield_bool():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bool(bound_field) is True\n\ndef test_boundfield_has_changed():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert not bound_field._has_changed()\n\ndef test_boundfield_as_widget_only_initial():\n    form = MyForm({'name': 'John Doe'})\n    bound_field = BoundField(form, form.fields['name'], 'name')\n    assert bound_field.as_widget(only_initial=True) == '<input type=\"hidden\" name=\"name\" value=\"John Doe\" id=\"id_name\">'\n\n"], "sample_149": ["\nimport unittest\nfrom sympy.polys.monomials import (\n    itermonomials,\n    monomial_count,\n    monomial_mul,\n    monomial_div,\n    monomial_gcd,\n    monomial_lcm,\n    monomial_max,\n    monomial_min,\n    monomial_divides,\n    monomial_pow,\n    Monomial,\n)\nfrom sympy.abc import x, y, z\nfrom sympy import symbols\n\nclass TestMonomials(unittest.TestCase):\n\n    def test_itermonomials_total_degree(self):\n        self.assertEqual(list(itermonomials([x, y], 2)), [1, x, y, x**2, x*y, y**2])\n        self.assertEqual(list(itermonomials([x, y], 3)), [1, x, y, x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3])\n        self.assertEqual(list(itermonomials([x, y], 2, 1)), [x, y, x**2, x*y, y**2])\n\n    def test_itermonomials_list_degrees(self):\n        self.assertEqual(list(itermonomials([x, y], [2, 4], [1, 2])), [x**2*y**4, x**2*y**3, x**2*y**2, x*y**4, x*y**3, x*y**2])\n\n    def test_monomial_count(self):\n        self.assertEqual(monomial_count(2, 2), 6)\n\n    def test_monomial_mul(self):\n        self.assertEqual(monomial_mul((3, 4, 1), (1, 2, 0)), (4, 6, 1))\n\n    def test_monomial_div(self):\n        self.assertEqual(monomial_div((3, 4, 1), (1, 2, 0)), (2, 2, 1))\n        self.assertIsNone(monomial_div((3, 4, 1), (1, 2, 2)))\n\n    def test_monomial_ldiv(self):\n        self.assertEqual(monomial_ldiv((3, 4, 1), (1, 2, 0)), (2, 2, 1))\n        self.assertEqual(monomial_ldiv((3, 4, 1), (1, 2, 2)), (2, 2, -1))\n\n    def test_monomial_pow(self):\n        self.assertEqual(monomial_pow((1, 2, 3), 2), (2, 4, 6))\n\n    def test_monomial_gcd(self):\n        self.assertEqual(monomial_gcd((1, 4, 1), (3, 2, 0)), (1, 2, 0))\n\n    def test_monomial_lcm(self):\n        self.assertEqual(monomial_lcm((1, 4, 1), (3, 2, 0)), (3, 4, 1))\n\n    def test_monomial_divides(self):\n        self.assertTrue(monomial_divides((1, 2), (3, 4)))\n        self.assertFalse(monomial_divides((1, 2), (0, 2)))\n\n    def test_monomial_max(self):\n        self.assertEqual(monomial_max((3,4,5), (0,5,1), (6,3,9)), (6, 5, 9))\n\n    def test_monomial_min(self):\n        self.assertEqual(monomial_min((3,4,5), (0,5,1), (6,3,9)), (0, 3, 1))\n\n    def test_monomial_deg(self):\n        self.assertEqual(monomial_deg((1, 2)), 3)\n\n    def test_Monomial(self):\n        m1 = Monomial((1, 2, 3), gens=[x, y, z])\n        m2 = Monomial((2, 1, 0), gens=[x, y, z])\n        self.assertEqual(m1 * m2, Monomial((3, 3, 3), gens=[x, y, z]))\n        self.assertEqual(m1 / m2, Monomial((-1, 1, 3), gens=[x, y, z]))\n        self.assertEqual(m1.gcd(m2), Monomial((1, 1, 0), gens=[x, y, z]))\n        self.assertEqual(m1.lcm(m2), Monomial((2, 2, 3), gens=[x, y, z]))\n        self.assertEqual(m1**2, Monomial((2, 4, 6), gens=[x, y, z]))\n        self.assertEqual(str(m1), 'x**1*y**2*z**3')\n        self.assertEqual(m1.as_expr(), x*y**2*z**3)\n\n"], "sample_135": ["\nimport pytest\nfrom sympy.core.basic import (Basic, Atom, preorder_traversal, as_Basic, _atomic, _aresame)\nfrom sympy.core.function import Function, Lambda\nfrom sympy.core.compatibility import default_sort_key\nfrom sympy.functions.elementary.exponential import exp\nfrom sympy.core.function import Function\nfrom sympy.functions.elementary.trigonometric import cos, sin\nfrom sympy.abc import x, y, z\nfrom sympy import S, Symbol, Number, Rational, Integer, Derivative, Eq, Add, Mul\n\ndef test_Basic_init():\n    a = Basic()\n    assert a.args == ()\n    assert a.func == Basic\n\ndef test_Basic_eq():\n    assert Basic() == Basic()\n    assert Basic(x) == Basic(x)\n    assert Basic(x, y) == Basic(x, y)\n    assert Basic(x, y) != Basic(y, x)\n\ndef test_Basic_hash():\n    assert hash(Basic()) == hash(Basic())\n    assert hash(Basic(x)) == hash(Basic(x))\n    assert hash(Basic(x, y)) == hash(Basic(x, y))\n\ndef test_Basic_repr():\n    assert repr(Basic()) == 'Basic()'\n    assert repr(Basic(x)) == 'Basic(x)'\n    assert repr(Basic(x, y)) == 'Basic(x, y)'\n\ndef test_Basic_subs():\n    assert Basic(x).subs(x, y) == Basic(y)\n    assert Basic(x, y).subs(x, z) == Basic(z, y)\n\ndef test_Basic_free_symbols():\n    assert Basic().free_symbols == set()\n    assert Basic(x).free_symbols == {x}\n    assert Basic(x, y).free_symbols == {x, y}\n\ndef test_Atom_init():\n    a = Atom()\n    assert a.args == ()\n    assert a.func == Atom\n\ndef test_Atom_is_Atom():\n    assert Atom().is_Atom\n\ndef test_preorder_traversal():\n    expr = (x + y)*z\n    pt = preorder_traversal(expr)\n    assert list(pt) == [z*(x + y), z, x + y, x, y]\n\ndef test_preorder_traversal_skip():\n    expr = (x + y)*z\n    pt = preorder_traversal(expr)\n    for i in pt:\n        print(i)\n        if i == x+y:\n            pt.skip()\n    assert list(pt) == [z*(x + y), z, x + y, z]\n\ndef test_as_Basic():\n    assert as_Basic(x) == x\n    assert as_Basic(1) == S.One\n    assert as_Basic(2.0) == S.Two\n\ndef test__atomic():\n    assert _atomic(x + y) == {x, y}\n    assert _atomic(x + Function('f')(y)) == {x, Function('f')(y)}\n    assert _atomic(Derivative(Function('f')(x), x) + cos(x) + y) == {y, cos(x), Derivative(Function('f')(x), x)}\n\ndef test__aresame():\n    assert _aresame(S(2.0), S(2)) == False\n    assert _aresame(2.0, S(2)) == True\n    assert _aresame(0.5, S.Half) == True\n\n"], "sample_132": ["\nfrom sympy.geometry import Point, Point2D, Line, Circle, Polygon, Segment, convex_hull, intersection, centroid\nfrom sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points, are_coplanar, are_similar\nfrom sympy.utilities.pytest import raises\nfrom sympy.utilities.iterables import subsets\n\ndef test_idiff_basic():\n    x, y = sympy.symbols('x y')\n    eq = x**2 + y**2 - 4\n    assert idiff(eq, y, x) == -x/y\n\ndef test_idiff_second_derivative():\n    x, y = sympy.symbols('x y')\n    eq = x**2 + y**2 - 4\n    assert idiff(eq, y, x, 2).simplify() == -(x**2 + y**2)/y**3\n\ndef test_idiff_independent_variable():\n    x, y, a = sympy.symbols('x y a')\n    eq = x + a + y\n    assert idiff(eq, y, x) == -1\n    assert idiff(eq, [y, a], x) == -sympy.Derivative(a, x) - 1\n\ndef test_closest_points_basic():\n    p1, p2, p3 = Point(0, 0), Point(3, 0), Point(3, 4)\n    assert closest_points(p1, p2, p3) == {frozenset({p1, p2})}\n\ndef test_closest_points_multiple():\n    p1, p2, p3, p4 = Point(0, 0), Point(3, 0), Point(3, 4), Point(0, 4)\n    assert closest_points(p1, p2, p3, p4) == {frozenset({p1, p2}), frozenset({p3, p4})}\n\ndef test_farthest_points_basic():\n    p1, p2, p3 = Point(0, 0), Point(3, 0), Point(3, 4)\n    assert farthest_points(p1, p2, p3) == {frozenset({p1, p3})}\n\ndef test_farthest_points_multiple():\n    p1, p2, p3, p4 = Point(0, 0), Point(3, 0), Point(3, 4), Point(0, 4)\n    assert farthest_points(p1, p2, p3, p4) == {frozenset({p1, p4}), frozenset({p2, p3})}\n\ndef test_convex_hull_basic():\n    p1, p2, p3 = Point(0, 0), Point(3, 0), Point(3, 4)\n    assert convex_hull(p1, p2, p3) == Polygon(p1, p2, p3)\n\ndef test_convex_hull_polygon():\n    p1, p2, p3, p4 = Point(0, 0), Point(3, 0), Point(3, 4), Point(0, 4)\n    assert convex_hull(p1, p2, p3, p4) == Polygon(p1, p2, p3, p4)\n\ndef test_convex_hull_segment():\n    p1, p2 = Point(0, 0), Point(3, 0)\n    assert convex_hull(p1, p2) == Segment(p1, p2)\n\ndef test_convex_hull_single_point():\n    p1 = Point(0, 0)\n    assert convex_hull(p1) == p1\n\ndef test_intersection_basic():\n    c = Circle((0, 1), 1)\n    right = Ray((0, 0), (1, 0))\n    up = Ray((0, 0), (0, 1))\n    assert intersection(c, right, up) == [Point2D(0, 1)]\n\ndef test_intersection_pairwise():\n    c = Circle((0, 1), 1)\n    right = Ray((0, 0), (1, 0))\n    up = Ray((0, 0), (0, 1))\n    assert intersection(c, right, up, pairwise=True) == [Point2D(0, 1), Point2D(0, 2)]\n\ndef test_intersection_lines():\n    left = Ray((1, 0), (0, 0))\n    right = Ray((0, 0), (1, 0))\n    assert intersection(right, left) == [Segment2D(Point2D(0, 0), Point2D(1, 0))]\n\ndef test_are_coplanar_basic():\n    p1, p2, p3 = Point3D(0, 0, 0), Point3D(1, 0, 0), Point3D(0, 1, 0)\n    assert are_coplanar(p1, p2, p3)\n\ndef test_are_coplanar_not_coplanar():\n    p1, p2, p3, p4 = Point3D(0, 0, 0), Point3D(1, 0, 0), Point3D(0, 1, 0), Point3D(0, 0, 1)\n    assert not are_coplanar(p1, p2, p3, p4)\n\ndef test_are_similar_triangles():\n    t1 = Triangle(Point(0, 0), Point(1, 0), Point(0, 1))\n    t2 = Triangle(Point(0, 0), Point(2, 0), Point(0, 2))\n    assert are_similar(t1, t2)\n\ndef test_are_similar_not_similar():\n    t1 = Triangle(Point(0, 0), Point(1, 0), Point(0, 1))\n    t2 = Triangle(Point(0, 0), Point(2, 0), Point(1, 1))\n    assert not are_similar(t1, t2)\n\ndef test_centroid_points():\n    p1, p2 = Point(0, 0), Point(2, 0)\n    assert centroid(p1, p2) == Point2D(1, 0)\n\ndef test_centroid_segments():\n    s1, s2 = Segment((0, 0), (2, 0)), Segment((0, 0), (2, 2))\n    assert centroid(s1, s2) == Point2D(1, sqrt(2)/2)\n\ndef test_centroid_polygons():\n    p1 = Polygon((0, 0), (1, 0), (1, 1), (0, 1))\n    p2 = p1.translate(0, 1)\n    assert centroid(p1, p2) == Point2D(1/2, 1)\n\ndef test_ordered_points():\n    p1 = Point(1, 2)\n    p2 = Point(2, 1)\n    assert _ordered_points((p2, p1)) == (p1, p2)\n\n"], "sample_34": ["\nfrom django.core import checks\nfrom django.core.checks import Error, Warning\nfrom django.db import models\nfrom django.db.models import (\n    CASCADE,\n    CheckConstraint,\n    CharField,\n    ForeignKey,\n    ManyToManyField,\n    Model,\n    OneToOneField,\n    UniqueConstraint,\n)\nfrom django.test import TestCase\nfrom django.test.utils import (\n    isolate_apps,\n    modify_settings,\n    override_settings,\n    override_system_checks,\n)\n\nclass TestModelBase(TestCase):\n\n    def test_check_model_name_db_lookup_clashes(self):\n        with override_settings(DEBUG=True):\n            class BadModel(models.Model):\n                name = models.CharField(max_length=100)\n            errors = BadModel._check_model_name_db_lookup_clashes()\n            self.assertEqual(len(errors), 1)\n            self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_property_name_related_field_accessor_clashes(self):\n        class RelatedModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        class BadModel(models.Model):\n            related = models.ForeignKey(RelatedModel, on_delete=CASCADE)\n            name = models.CharField(max_length=100)\n\n        errors = BadModel._check_property_name_related_field_accessor_clashes()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_single_primary_key(self):\n        class BadModel(models.Model):\n            pk1 = models.AutoField(primary_key=True)\n            pk2 = models.AutoField(primary_key=True)\n\n        errors = BadModel._check_single_primary_key()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_index_together(self):\n        class BadModel(models.Model):\n            field1 = models.CharField(max_length=100)\n            field2 = models.CharField(max_length=100)\n\n            class Meta:\n                index_together = [('field1', 'field3')]\n\n        errors = BadModel._check_index_together()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_unique_together(self):\n        class BadModel(models.Model):\n            field1 = models.CharField(max_length=100)\n            field2 = models.CharField(max_length=100)\n\n            class Meta:\n                unique_together = [('field1', 'field3')]\n\n        errors = BadModel._check_unique_together()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_ordering(self):\n        class BadModel(models.Model):\n            field1 = models.CharField(max_length=100)\n\n            class Meta:\n                ordering = ['field3']\n\n        errors = BadModel._check_ordering()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_long_column_names(self):\n        class BadModel(models.Model):\n            field1 = models.CharField(max_length=255)\n\n        errors = BadModel._check_long_column_names(['default'])\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_constraints(self):\n        class BadModel(models.Model):\n            field1 = models.CharField(max_length=100)\n\n            class Meta:\n                constraints = [\n                    UniqueConstraint(fields=['field1'], condition=models.Q(field1__isnull=False))\n                ]\n\n        errors = BadModel._check_constraints(['default'])\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Warning)\n\n    def test_check_m2m_through_model_name(self):\n        class ThroughModel(models.Model):\n            pass\n\n        class ModelA(models.Model):\n            pass\n\n        class ModelB(models.Model):\n            models = models.ManyToManyField(ModelA, through=ThroughModel)\n\n        errors = ModelB._check_m2m_through_model_name()\n        self.assertEqual(len(errors), 0)\n\n    def test_check_m2m_through_model_name_clash(self):\n        class ThroughModel(models.Model):\n            pass\n\n        class ModelA(models.Model):\n            pass\n\n        class ModelB(models.Model):\n            models = models.ManyToManyField(ModelA, through='ThroughModel')\n\n        errors = ModelB._check_m2m_through_model_name()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_field_name_clashes(self):\n        class BadModel(models.Model):\n            name = models.CharField(max_length=100)\n            _order = models.IntegerField()\n\n        errors = BadModel._check_field_name_clashes()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_field_name_clashes_with_related_field(self):\n        class RelatedModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        class BadModel(models.Model):\n            related = models.ForeignKey(RelatedModel, on_delete=CASCADE)\n            name = models.CharField(max_length=100)\n\n        errors = BadModel._check_field_name_clashes()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_field_name_clashes_with_method(self):\n        class BadModel(models.Model):\n            name = models.CharField(max_length=100)\n\n            def name(self):\n                pass\n\n        errors = BadModel._check_field_name_clashes()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_field_name_clashes_with_property(self):\n        class BadModel(models.Model):\n            name = models.CharField(max_length=100)\n\n            @property\n            def name(self):\n                pass\n\n        errors = BadModel._check_field_name_clashes()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_m2m_through_model_name_clash_with_field(self):\n        class ThroughModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        class ModelA(models.Model):\n            pass\n\n        class ModelB(models.Model):\n            models = models.ManyToManyField(ModelA, through=ThroughModel)\n\n        errors = ModelB._check_m2m_through_model_name()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_m2m_through_model_name_clash_with_related_field(self):\n        class ThroughModel(models.Model):\n            related = models.ForeignKey(ModelA, on_delete=CASCADE)\n\n        class ModelA(models.Model):\n            pass\n\n        class ModelB(models.Model):\n            models = models.ManyToManyField(ModelA, through=ThroughModel)\n\n        errors = ModelB._check_m2m_through_model_name()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_m2m_through_model_name_clash_with_method(self):\n        class ThroughModel(models.Model):\n            def related(self):\n                pass\n\n        class ModelA(models.Model):\n            pass\n\n        class ModelB(models.Model):\n            models = models.ManyToManyField(ModelA, through=ThroughModel)\n\n        errors = ModelB._check_m2m_through_model_name()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_m2m_through_model_name_clash_with_property(self):\n        class ThroughModel(models.Model):\n            @property\n            def related(self):\n                pass\n\n        class ModelA(models.Model):\n            pass\n\n        class ModelB(models.Model):\n            models = models.ManyToManyField(ModelA, through=ThroughModel)\n\n        errors = ModelB._check_m2m_through_model_name()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_m2m_through_model_name_clash_with_database_field(self):\n        class ThroughModel(models.Model):\n            related = models.CharField(max_length=100)\n\n        class ModelA(models.Model):\n            pass\n\n        class ModelB(models.Model):\n            models = models.ManyToManyField(ModelA, through=ThroughModel)\n\n        errors = ModelB._check_m2m_through_model_name()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], checks.Error)\n\n\n\n"], "sample_39": ["\nfrom unittest import mock\nfrom django.urls import (\n    NoReverseMatch,\n    Resolver404,\n    ResolverMatch,\n    URLPattern,\n    URLResolver,\n    get_callable,\n    get_resolver,\n    include,\n    path,\n    re_path,\n    resolve,\n    reverse,\n    reverse_lazy,\n)\nfrom django.urls.resolvers import LocalePrefixPattern, LocaleRegexDescriptor, RegexPattern, RoutePattern\nfrom django.conf import settings\nfrom django.http import HttpRequest\nfrom django.test import SimpleTestCase\n\nsettings.LANGUAGE_CODE = 'en'\n\nclass ResolverTests(SimpleTestCase):\n\n    def test_resolver_match(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article', name='article'),\n                URLPattern(RegexPattern(r'^about/$'), lambda x: 'about'),\n            ],\n        )\n        match = resolver.resolve('/articles/1/')\n        self.assertEqual(match.func, 'article')\n        self.assertEqual(match.kwargs, {'article_id': '1'})\n\n    def test_resolver_no_match(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        with self.assertRaises(Resolver404):\n            resolver.resolve('/about/')\n\n    def test_resolver_reverse(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article', name='article'),\n            ],\n        )\n        self.assertEqual(resolver.reverse('article', args=[1]), '/articles/1/')\n\n    def test_resolver_reverse_with_kwargs(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article', name='article'),\n            ],\n        )\n        self.assertEqual(resolver.reverse('article', kwargs={'article_id': 1}), '/articles/1/')\n\n    def test_resolver_reverse_no_match(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article', name='article'),\n            ],\n        )\n        with self.assertRaises(NoReverseMatch):\n            resolver.reverse('nonexistent_view')\n\n    def test_resolver_include(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                include('my_app.urls'),\n            ],\n        )\n        # Assuming my_app.urls contains a URLPattern for '/articles/1/'\n        match = resolver.resolve('/articles/1/')\n        self.assertEqual(match.func, 'article')\n\n    def test_resolver_namespace(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLResolver(\n                    RegexPattern(r'^blog/'),\n                    [\n                        URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                                   lambda x: 'article', name='blog_article'),\n                    ],\n                    namespace='blog',\n                ),\n            ],\n        )\n        self.assertEqual(resolver.reverse('blog:blog_article', args=[1]), '/blog/articles/1/')\n\n    def test_resolver_app_name(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLResolver(\n                    RegexPattern(r'^blog/'),\n                    [\n                        URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                                   lambda x: 'article', name='blog_article'),\n                    ],\n                    app_name='my_blog',\n                ),\n            ],\n        )\n        self.assertEqual(resolver.reverse('my_blog:blog_article', args=[1]), '/blog/articles/1/')\n\n    def test_resolver_default_kwargs(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article', default_kwargs={'category': 'news'}),\n            ],\n        )\n        match = resolver.resolve('/articles/1/')\n        self.assertEqual(match.kwargs, {'article_id': '1', 'category': 'news'})\n\n    def test_resolver_locale_prefix(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n            LocalePrefixPattern(),\n        )\n        with mock.patch('django.conf.settings.LANGUAGE_CODE', 'fr'):\n            match = resolver.resolve('/fr/articles/1/')\n            self.assertEqual(match.func, 'article')\n            self.assertEqual(match.kwargs, {'article_id': '1'})\n\n    def test_resolver_route_pattern(self):\n        resolver = URLResolver(\n            RoutePattern(r'^/articles/<int:article_id>/'),\n            [\n                URLPattern(RoutePattern(r'^articles/<int:article_id>/'),\n                           lambda x: 'article'),\n            ],\n        )\n        match = resolver.resolve('/articles/1/')\n        self.assertEqual(match.func, 'article')\n        self.assertEqual(match.kwargs, {'article_id': 1})\n\n    def test_resolver_regex_pattern(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/articles/(?P<article_id>\\d+)/$'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        match = resolver.resolve('/articles/1/')\n        self.assertEqual(match.func, 'article')\n        self.assertEqual(match.kwargs, {'article_id': '1'})\n\n    def test_resolver_regex_pattern_with_converter(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/articles/(?P<article_id>\\d+)/$'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        match = resolver.resolve('/articles/1/')\n        self.assertEqual(match.func, 'article')\n        self.assertEqual(match.kwargs, {'article_id': '1'})\n\n    def test_resolver_regex_pattern_with_converter_error(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/articles/(?P<article_id>\\d+)/$'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        with self.assertRaises(Resolver404):\n            resolver.resolve('/articles/abc/')\n\n    def test_resolver_match_with_trailing_slash(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        match = resolver.resolve('/articles/1/')\n        self.assertEqual(match.func, 'article')\n        self.assertEqual(match.kwargs, {'article_id': '1'})\n\n    def test_resolver_match_without_trailing_slash(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        match = resolver.resolve('/articles/1')\n        self.assertEqual(match.func, 'article')\n        self.assertEqual(match.kwargs, {'article_id': '1'})\n\n    def test_resolver_reverse_with_trailing_slash(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article', name='article'),\n            ],\n        )\n        self.assertEqual(resolver.reverse('article', args=[1]), '/articles/1/')\n\n    def test_resolver_reverse_without_trailing_slash(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article', name='article'),\n            ],\n        )\n        self.assertEqual(resolver.reverse('article', args=[1]), '/articles/1/')\n\n    def test_resolver_reverse_lazy(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article', name='article'),\n            ],\n        )\n        lazy_reverse = reverse_lazy('article', args=[1])\n        self.assertEqual(lazy_reverse(), '/articles/1/')\n\n    def test_resolver_get_urlconf(self):\n        resolver = get_resolver(None)\n        self.assertIsInstance(resolver, URLResolver)\n\n    def test_resolver_get_callable(self):\n        def my_view():\n            pass\n        callable_ = get_callable(my_view)\n        self.assertEqual(callable_, my_view)\n\n    def test_resolver_get_callable_from_string(self):\n        callable_ = get_callable('django.urls.tests.views.my_view')\n        self.assertIsNotNone(callable_)\n\n    def test_resolver_get_callable_invalid(self):\n        with self.assertRaises(ImportError):\n            get_callable('nonexistent.module.view')\n\n    def test_resolver_resolve_error_handler(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        with mock.patch('django.urls.urls.handler404', lambda request, exception: 'custom_404'):\n            response = resolver.resolve('/nonexistent/')\n            self.assertEqual(response.status_code, 404)\n            self.assertEqual(response.content, b'custom_404')\n\n    def test_resolver_resolve_error_handler_no_handler(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        with self.assertRaises(Resolver404):\n            resolver.resolve('/nonexistent/')\n\n    def test_resolver_resolve_error_handler_custom_handler(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        def custom_handler(request, exception):\n            return 'custom_handler'\n        resolver.urlconf_module.handler404 = custom_handler\n        response = resolver.resolve('/nonexistent/')\n        self.assertEqual(response.content, b'custom_handler')\n\n    def test_resolver_resolve_error_handler_custom_handler_args(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        def custom_handler(request, exception, article_id):\n            return f'custom_handler {article_id}'\n        resolver.urlconf_module.handler404 = custom_handler\n        response = resolver.resolve('/nonexistent/123/')\n        self.assertEqual(response.content, b'custom_handler 123')\n\n    def test_resolver_resolve_error_handler_custom_handler_kwargs(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        def custom_handler(request, exception, **kwargs):\n            return f'custom_handler {kwargs[\"article_id\"]}'\n        resolver.urlconf_module.handler404 = custom_handler\n        response = resolver.resolve('/nonexistent/123/')\n        self.assertEqual(response.content, b'custom_handler 123')\n\n    def test_resolver_resolve_error_handler_500(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        with mock.patch('django.urls.urls.handler500', lambda request: 'custom_500'):\n            response = resolver.resolve('/nonexistent/')\n            self.assertEqual(response.status_code, 500)\n            self.assertEqual(response.content, b'custom_500')\n\n    def test_resolver_resolve_error_handler_500_no_handler(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        with self.assertRaises(Exception):\n            resolver.resolve('/nonexistent/')\n\n    def test_resolver_resolve_error_handler_500_custom_handler(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        def custom_handler(request):\n            return 'custom_handler'\n        resolver.urlconf_module.handler500 = custom_handler\n        response = resolver.resolve('/nonexistent/')\n        self.assertEqual(response.content, b'custom_handler')\n\n    def test_resolver_resolve_error_handler_500_custom_handler_args(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        def custom_handler(request, article_id):\n            return f'custom_handler {article_id}'\n        resolver.urlconf_module.handler500 = custom_handler\n        response = resolver.resolve('/nonexistent/123/')\n        self.assertEqual(response.content, b'custom_handler 123')\n\n    def test_resolver_resolve_error_handler_500_custom_handler_kwargs(self):\n        resolver = URLResolver(\n            RegexPattern(r'^/'),\n            [\n                URLPattern(RegexPattern(r'^articles/(?P<article_id>\\d+)/$'),\n                           lambda x: 'article'),\n            ],\n        )\n        def custom_handler(request, **kwargs):\n            return f'custom_handler {kwargs[\"article_id\"]}'\n        resolver.urlconf_module.handler500 = custom_handler\n        response = resolver.resolve('/nonexistent/123/')\n        self.assertEqual(response.content, b'custom_handler 123')\n\n\n\n"], "sample_115": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nimport numpy as np\nimport pandas as pd\nfrom scipy.sparse import csr_matrix\n\nfrom sklearn.utils._set_output import (\n    _wrap_in_pandas_container,\n    _safe_set_output,\n    _SetOutputMixin,\n    _get_output_config,\n    _wrap_method_output,\n    _auto_wrap_is_configured,\n)\nfrom sklearn._config import get_config\n\n\nclass TestSetOutputMixin(unittest.TestCase):\n    def test_set_output_transform(self):\n        class Estimator(_SetOutputMixin):\n            def __init__(self):\n                super().__init__(auto_wrap_output_keys=(\"transform\",))\n                self._sklearn_output_config = {}\n\n            def transform(self, X):\n                return X\n\n        estimator = Estimator()\n        estimator.set_output(transform=\"pandas\")\n        self.assertEqual(estimator._sklearn_output_config, {\"transform\": \"pandas\"})\n\n    def test_set_output_no_transform(self):\n        class Estimator(_SetOutputMixin):\n            def __init__(self):\n                super().__init__(auto_wrap_output_keys=())\n\n        estimator = Estimator()\n        with self.assertRaises(ValueError):\n            estimator.set_output(transform=\"pandas\")\n\n    def test_auto_wrap_is_configured(self):\n        class Estimator(_SetOutputMixin):\n            def __init__(self):\n                super().__init__(auto_wrap_output_keys=(\"transform\",))\n                self._sklearn_auto_wrap_output_keys = {\"transform\"}\n            def get_feature_names_out(self):\n                return [\"feature1\", \"feature2\"]\n\n        estimator = Estimator()\n        self.assertTrue(_auto_wrap_is_configured(estimator))\n\n    def test_auto_wrap_is_configured_disabled(self):\n        class Estimator(_SetOutputMixin):\n            def __init__(self):\n                super().__init__(auto_wrap_output_keys=(\"transform\",))\n                self._sklearn_auto_wrap_output_keys = set()\n\n            def get_feature_names_out(self):\n                return [\"feature1\", \"feature2\"]\n\n        estimator = Estimator()\n        self.assertFalse(_auto_wrap_is_configured(estimator))\n\n    def test_auto_wrap_is_configured_no_get_feature_names_out(self):\n        class Estimator(_SetOutputMixin):\n            def __init__(self):\n                super().__init__(auto_wrap_output_keys=(\"transform\",))\n\n        estimator = Estimator()\n        self.assertFalse(_auto_wrap_is_configured(estimator))\n\nclass TestWrapInPandasContainer(unittest.TestCase):\n    def test_wrap_in_pandas_container_dataframe(self):\n        data = pd.DataFrame({\"a\": [1, 2], \"b\": [3, 4]})\n        result = _wrap_in_pandas_container(data, columns=[\"c\", \"d\"], index=[0, 1])\n        pd.testing.assert_frame_equal(result, pd.DataFrame({\"c\": [1, 2], \"d\": [3, 4]}, index=[0, 1]))\n\n    def test_wrap_in_pandas_container_ndarray(self):\n        data = np.array([[1, 2], [3, 4]])\n        result = _wrap_in_pandas_container(data, columns=[\"c\", \"d\"], index=[0, 1])\n        pd.testing.assert_frame_equal(result, pd.DataFrame({\"c\": [1, 2], \"d\": [3, 4]}, index=[0, 1]))\n\n    def test_wrap_in_pandas_container_callable_columns(self):\n        data = np.array([[1, 2], [3, 4]])\n        def get_columns():\n            return [\"c\", \"d\"]\n        result = _wrap_in_pandas_container(data, columns=get_columns, index=[0, 1])\n        pd.testing.assert_frame_equal(result, pd.DataFrame({\"c\": [1, 2], \"d\": [3, 4]}, index=[0, 1]))\n\n    def test_wrap_in_pandas_container_callable_columns_error(self):\n        data = np.array([[1, 2], [3, 4]])\n        def get_columns():\n            raise ValueError\n        result = _wrap_in_pandas_container(data, columns=get_columns, index=[0, 1])\n        pd.testing.assert_frame_equal(result, pd.DataFrame({0: [1, 2], 1: [3, 4]}, index=[0, 1]))\n\n    def test_wrap_in_pandas_container_sparse(self):\n        data = csr_matrix([[1, 2], [3, 4]])\n        with self.assertRaises(ValueError):\n            _wrap_in_pandas_container(data, columns=[\"c\", \"d\"], index=[0, 1])\n\nclass TestSafeSetOutput(unittest.TestCase):\n    def test_safe_set_output_transform(self):\n        class Estimator:\n            def transform(self, X):\n                return X\n        estimator = Estimator()\n        estimator = _safe_set_output(estimator, transform=\"pandas\")\n        self.assertTrue(hasattr(estimator, \"set_output\"))\n\n    def test_safe_set_output_no_transform(self):\n        class Estimator:\n            pass\n        estimator = Estimator()\n        estimator = _safe_set_output(estimator, transform=\"pandas\")\n        self.assertFalse(hasattr(estimator, \"set_output\"))\n\n    def test_safe_set_output_no_set_output(self):\n        class Estimator:\n            def transform(self, X):\n                return X\n        estimator = Estimator()\n        with self.assertRaises(ValueError):\n            estimator = _safe_set_output(estimator, transform=\"pandas\")\n\nclass TestGetOutputConfig(unittest.TestCase):\n    def test_get_output_config_default(self):\n        with patch(\"sklearn._config.get_config\") as mock_get_config:\n            mock_get_config.return_value = {\"transform_output\": \"default\"}\n            config = _get_output_config(\"transform\")\n            self.assertEqual(config, {\"dense\": \"default\"})\n\n    def test_get_output_config_pandas(self):\n        with patch(\"sklearn._config.get_config\") as mock_get_config:\n            mock_get_config.return_value = {\"transform_output\": \"pandas\"}\n            config = _get_output_config(\"transform\")\n            self.assertEqual(config, {\"dense\": \"pandas\"})\n\n    def test_get_output_config_estimator(self):\n        class Estimator:\n            _sklearn_output_config = {\"transform\": \"pandas\"}\n        estimator = Estimator()\n        config = _get_output_config(\"transform\", estimator=estimator)\n        self.assertEqual(config, {\"dense\": \"pandas\"})\n\n    def test_get_output_config_invalid(self):\n        with patch(\"sklearn._config.get_config\") as mock_get_config:\n            mock_get_config.return_value = {\"transform_output\": \"invalid\"}\n            with self.assertRaises(ValueError):\n                _get_output_config(\"transform\")\n\nclass TestWrapMethodOutput(unittest.TestCase):\n    def test_wrap_method_output_default(self):\n        def transform(self, X):\n            return X\n        wrapped_transform = _wrap_method_output(transform, \"transform\")\n        result = wrapped_transform(None, np.array([[1, 2], [3, 4]]))\n        np.testing.assert_array_equal(result, np.array([[1, 2], [3, 4]]))\n\n    def test_wrap_method_output_pandas(self):\n        def transform(self, X):\n            return X\n        wrapped_transform = _wrap_method_output(transform, \"transform\")\n        result = wrapped_transform(None, np.array([[1, 2], [3, 4]]))\n        pd.testing.assert_frame_equal(result, pd.DataFrame({0: [1, 2], 1: [3, 4]}))\n\n    def test_wrap_method_output_tuple(self):\n        def transform(self, X):\n            return np.array([[1, 2], [3, 4]]), np.array([5, 6])\n        wrapped_transform = _wrap_method_output(transform, \"transform\")\n        result = wrapped_transform(None, np.array([[1, 2], [3, 4]]))\n        self.assertEqual(type(result), tuple)\n        pd.testing.assert_frame_equal(result[0], pd.DataFrame({0: [1, 2], 1: [3, 4]}))\n        np.testing.assert_array_equal(result[1], np.array([5, 6]))\n\n\n\n"], "sample_37": ["\nfrom django.db import models\nfrom django.db.models import Q, F, Value, Func\nfrom django.db.models.query_utils import (\n    DeferredAttribute,\n    PathInfo,\n    Q,\n    RegisterLookupMixin,\n    select_related_descend,\n    refs_expression,\n    check_rel_lookup_compatibility,\n    FilteredRelation,\n)\nfrom django.test import TestCase, SimpleTestCase\nfrom django.test.utils import CaptureQueriesContext\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n    value = models.IntegerField()\n\nclass RelatedModel(models.Model):\n    mymodel = models.ForeignKey(MyModel, on_delete=models.CASCADE)\n    other_value = models.IntegerField()\n\nclass TestQueryUtils(TestCase):\n\n    def test_deferred_attribute(self):\n        obj = MyModel.objects.create(name='test', value=10)\n        deferred_field = DeferredAttribute(MyModel._meta.get_field('value'))\n        self.assertEqual(getattr(obj, 'value'), 10)\n\n    def test_path_info(self):\n        path_info = PathInfo(\n            from_opts=MyModel._meta,\n            to_opts=RelatedModel._meta,\n            target_fields=['other_value'],\n            join_field=RelatedModel._meta.get_field('mymodel'),\n            m2m=False,\n            direct=True,\n            filtered_relation=None,\n        )\n        self.assertEqual(path_info.from_opts, MyModel._meta)\n        self.assertEqual(path_info.to_opts, RelatedModel._meta)\n\n    def test_q_object(self):\n        q = Q(name='test')\n        self.assertEqual(q.connector, Q.AND)\n        q2 = Q(value__gt=5)\n        combined_q = q & q2\n        self.assertEqual(combined_q.connector, Q.AND)\n\n    def test_register_lookup_mixin(self):\n        class MyLookupMixin(RegisterLookupMixin):\n            pass\n        MyLookupMixin.register_lookup(Func(F('value'), function='UPPER'), 'upper')\n        lookup = MyLookupMixin.get_lookup('upper')\n        self.assertIsNotNone(lookup)\n\n    def test_select_related_descend(self):\n        self.assertTrue(select_related_descend(RelatedModel._meta.get_field('mymodel'), False, {}, set()))\n\n    def test_refs_expression(self):\n        lookup_parts = ['field1', 'field2']\n        annotations = {'field1': True}\n        result, remaining = refs_expression(lookup_parts, annotations)\n        self.assertTrue(result)\n        self.assertEqual(remaining, ['field2'])\n\n    def test_check_rel_lookup_compatibility(self):\n        self.assertTrue(check_rel_lookup_compatibility(MyModel, RelatedModel._meta, RelatedModel._meta.get_field('mymodel')))\n\n    def test_filtered_relation(self):\n        relation = FilteredRelation('related_model', condition=Q(other_value__gt=5))\n        self.assertEqual(relation.relation_name, 'related_model')\n        self.assertEqual(relation.condition, Q(other_value__gt=5))\n\n\n\n"], "sample_147": ["\nfrom sympy.core.function import (\n    expand, expand_mul, expand_multinomial, expand_log, expand_func,\n    expand_trig, expand_complex, expand_power_base, expand_power_exp,\n    count_ops, nfloat, Function, Derivative, _coeff_isneg\n)\nfrom sympy.core.symbol import Symbol, symbols\nfrom sympy.core.numbers import (\n    Rational, Integer, Float, I, pi, E, oo, zoo\n)\nfrom sympy.core.expr import Expr\nfrom sympy.core.relational import Eq\nfrom sympy.core.containers import Tuple\nfrom sympy.functions.elementary.exponential import exp\nfrom sympy.functions.elementary.trigonometric import sin, cos\nfrom sympy.functions.elementary.complexes import im, re\nfrom sympy.functions.combinatorial.factorials import factorial\nfrom sympy.matrices import Matrix, eye\nfrom sympy.abc import x, y, z, a, b, c, t\n\ndef test_expand():\n    assert expand(x*(x + 1)) == x**2 + x\n    assert expand((x + 1)*(x + 2)) == x**2 + 3*x + 2\n    assert expand((x + 1)**2) == x**2 + 2*x + 1\n    assert expand((x + y)**2) == x**2 + 2*x*y + y**2\n    assert expand((x + y + z)**2) == x**2 + 2*x*y + 2*x*z + y**2 + 2*y*z + z**2\n    assert expand((x + y)*(x - y)) == x**2 - y**2\n    assert expand((x + y)**3) == x**3 + 3*x**2*y + 3*x*y**2 + y**3\n    assert expand((x + y + z)**3) == x**3 + 3*x**2*y + 3*x**2*z + 3*x*y**2 + 6*x*y*z + 3*x*z**2 + y**3 + 3*y**2*z + 3*y*z**2 + z**3\n\ndef test_expand_mul():\n    assert expand_mul(x*(x + 1)) == x**2 + x\n    assert expand_mul((x + 1)*(x + 2)) == x**2 + 3*x + 2\n    assert expand_mul((x + 1)**2) == x**2 + 2*x + 1\n    assert expand_mul((x + y)**2) == x**2 + 2*x*y + y**2\n    assert expand_mul((x + y + z)**2) == x**2 + 2*x*y + 2*x*z + y**2 + 2*y*z + z**2\n\ndef test_expand_multinomial():\n    assert expand_multinomial((x + y)**2) == x**2 + 2*x*y + y**2\n    assert expand_multinomial((x + y + z)**2) == x**2 + 2*x*y + 2*x*z + y**2 + 2*y*z + z**2\n    assert expand_multinomial((x + y)**3) == x**3 + 3*x**2*y + 3*x*y**2 + y**3\n\ndef test_expand_log():\n    assert expand_log(log(x*y)) == log(x) + log(y)\n    assert expand_log(log(x/y)) == log(x) - log(y)\n    assert expand_log(log(x**2)) == 2*log(x)\n\ndef test_expand_func():\n    assert expand_func(sin(x + y)) == sin(x)*cos(y) + cos(x)*sin(y)\n    assert expand_func(cos(x + y)) == cos(x)*cos(y) - sin(x)*sin(y)\n\ndef test_expand_trig():\n    assert expand_trig(sin(x + y)) == sin(x)*cos(y) + cos(x)*sin(y)\n    assert expand_trig(cos(x + y)) == cos(x)*cos(y) - sin(x)*sin(y)\n\ndef test_expand_complex():\n    assert expand_complex(exp(x + I*y)) == exp(x)*cos(y) + I*exp(x)*sin(y)\n\ndef test_expand_power_base():\n    assert expand_power_base((x*y)**2) == x**2*y**2\n    assert expand_power_base((2*x)**y) == 2**y*x**y\n\ndef test_expand_power_exp():\n    assert expand_power_exp(x**(y + 2)) == x**2*x**y\n\ndef test_count_ops():\n    assert count_ops(x + y) == 1\n    assert count_ops(x + y + z) == 2\n    assert count_ops(x*y) == 1\n    assert count_ops(x*y + z) == 2\n    assert count_ops(x**2) == 1\n    assert count_ops(sin(x)) == 1\n    assert count_ops(x + sin(y)) == 2\n    assert count_ops(x*sin(y) + z) == 3\n    assert count_ops(x**2 + 2*x*y + y**2) == 3\n\ndef test_nfloat():\n    assert nfloat(x**4 + x/2 + cos(pi/3) + 1 + sqrt(y)) == x**4 + 0.5*x + sqrt(y) + 1.5\n    assert nfloat(x**4 + sqrt(y), exponent=True) == x**4.0 + y**0.5\n    assert nfloat((1, 2)) == (1, 2)\n    assert nfloat({1: 2, 3: 4}) == {1: 2, 3: 4}\n    assert nfloat({1: 2, 3: 4}, dkeys=True) == {1.0: 2, 3.0: 4}\n\n"], "sample_65": ["\nfrom django.template.defaultfilters import (\n    add,\n    capfirst,\n    center,\n    date,\n    default,\n    default_if_none,\n    dictsort,\n    dictsortreversed,\n    divisibleby,\n    escape,\n    filesizeformat,\n    first,\n    floatformat,\n    force_escape,\n    get_digit,\n    indent,\n    intcomma,\n    join,\n    last,\n    length,\n    length_is,\n    linebreaks,\n    linebreaksbr,\n    linenumbers,\n    ljust,\n    lower,\n    make_list,\n    pluralize,\n    phone2numeric,\n    random,\n    removetags,\n    rjust,\n    safe,\n    safeseq,\n    slice_,\n    slugify,\n    stringformat,\n    striptags,\n    time,\n    timesince,\n    timeuntil,\n    title,\n    truncatechars,\n    truncatechars_html,\n    truncatewords,\n    truncatewords_html,\n    upper,\n    urlencode,\n    urlize,\n    urlizetrunc,\n    wordcount,\n    wordwrap,\n    yesno,\n)\nfrom django.utils.safestring import mark_safe\nfrom django.utils import timezone\n\nimport datetime\nimport random\n\ndef test_add():\n    assert add(1, 2) == 3\n    assert add(\"1\", \"2\") == \"12\"\n    assert add(\"1\", 2) == 3\n    assert add(1, \"2\") == 3\n\ndef test_capfirst():\n    assert capfirst(\"hello world\") == \"Hello world\"\n    assert capfirst(\"HELLO WORLD\") == \"HELLO WORLD\"\n    assert capfirst(\"\") == \"\"\n\ndef test_center():\n    assert center(\"hello\", 10) == \"   hello   \"\n    assert center(\"hello\", 5) == \"hello\"\n    assert center(\"hello\", 10, \"*\") == \"***hello***\"\n\ndef test_date():\n    assert date(datetime.date(2023, 10, 26)) == \"2023-10-26\"\n    assert date(datetime.date(2023, 10, 26), \"Y-m-d\") == \"2023-10-26\"\n    assert date(None) == \"\"\n\ndef test_default():\n    assert default(None, \"default\") == \"default\"\n    assert default(\"hello\", \"default\") == \"hello\"\n\ndef test_default_if_none():\n    assert default_if_none(None, \"default\") == \"default\"\n    assert default_if_none(\"hello\", \"default\") == \"hello\"\n\ndef test_dictsort():\n    data = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}]\n    assert dictsort(data, 'name') == [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}]\n    assert dictsort(data, 'age') == [{'name': 'Bob', 'age': 25}, {'name': 'Alice', 'age': 30}]\n\ndef test_dictsortreversed():\n    data = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}]\n    assert dictsortreversed(data, 'name') == [{'name': 'Bob', 'age': 25}, {'name': 'Alice', 'age': 30}]\n    assert dictsortreversed(data, 'age') == [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}]\n\ndef test_divisibleby():\n    assert divisibleby(10, 2) == True\n    assert divisibleby(10, 3) == False\n\ndef test_escape():\n    assert escape(\"<script>alert('XSS')</script>\") == \"&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;\"\n\ndef test_filesizeformat():\n    assert filesizeformat(1024) == \"1 KB\"\n    assert filesizeformat(1024 * 1024) == \"1 MB\"\n    assert filesizeformat(1024 * 1024 * 1024) == \"1 GB\"\n    assert filesizeformat(1024 * 1024 * 1024 * 1024) == \"1 TB\"\n    assert filesizeformat(1024 * 1024 * 1024 * 1024 * 1024) == \"1 PB\"\n    assert filesizeformat(0) == \"0 bytes\"\n\ndef test_first():\n    assert first([1, 2, 3]) == 1\n    assert first([]) == \"\"\n\ndef test_floatformat():\n    assert floatformat(3.14159, 2) == \"3.14\"\n    assert floatformat(3.14159, 0) == \"3\"\n\ndef test_force_escape():\n    assert force_escape(\"<script>alert('XSS')</script>\") == \"&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;\"\n\ndef test_get_digit():\n    assert get_digit(12345, 1) == 5\n    assert get_digit(12345, 2) == 4\n    assert get_digit(12345, 6) == 0\n\ndef test_indent():\n    assert indent(\"hello\", 4) == \"    hello\"\n\ndef test_intcomma():\n    assert intcomma(12345) == \"12,345\"\n\ndef test_join():\n    assert join([\"a\", \"b\", \"c\"], \", \") == \"a, b, c\"\n\ndef test_last():\n    assert last([1, 2, 3]) == 3\n    assert last([]) == \"\"\n\ndef test_length():\n    assert length([1, 2, 3]) == 3\n    assert length(\"\") == 0\n\ndef test_length_is():\n    assert length_is([1, 2, 3], 3) == True\n    assert length_is([1, 2, 3], 4) == False\n\ndef test_linebreaks():\n    assert linebreaks(\"This is a line.\\nThis is another line.\") == \"<p>This is a line.<br />This is another line.</p>\"\n\ndef test_linebreaksbr():\n    assert linebreaksbr(\"This is a line.\\nThis is another line.\") == \"This is a line.<br />This is another line.\"\n\ndef test_linenumbers():\n    assert linenumbers(\"This is a line.\\nThis is another line.\") == \"<ol><li>This is a line.</li><li>This is another line.</li></ol>\"\n\ndef test_ljust():\n    assert ljust(\"hello\", 10) == \"hello     \"\n\ndef test_lower():\n    assert lower(\"HELLO WORLD\") == \"hello world\"\n\ndef test_make_list():\n    assert make_list(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]\n    assert make_list(123) == [1, 2, 3]\n\ndef test_pluralize():\n    assert pluralize(1) == \"1\"\n    assert pluralize(2) == \"2s\"\n    assert pluralize(1, \"es\") == \"1\"\n    assert pluralize(2, \"es\") == \"2es\"\n    assert pluralize(1, \"y,ies\") == \"1y\"\n    assert pluralize(2, \"y,ies\") == \"2ies\"\n\ndef test_phone2numeric():\n    assert phone2numeric(\"1-800-555-1212\") == \"18005551212\"\n\ndef test_random():\n    assert random([1, 2, 3]) in [1, 2, 3]\n\ndef test_removetags():\n    assert removetags(\"<p>Hello, <b>world</b>!</p>\") == \"Hello, world!\"\n\ndef test_rjust():\n    assert rjust(\"hello\", 10) == \"     hello\"\n\ndef test_safe():\n    assert safe(\"<script>alert('XSS')</script>\") == mark_safe(\"<script>alert('XSS')</script>\")\n\ndef test_safeseq():\n    assert safeseq([\"<script>alert('XSS')</script>\"]) == [mark_safe(\"<script>alert('XSS')</script>\")]\n\ndef test_slice_():\n    assert slice_([1, 2, 3, 4, 5], \"1:3\") == [2, 3]\n\ndef test_slugify():\n    assert slugify(\"Hello, world!\") == \"hello-world\"\n\ndef test_stringformat():\n    assert stringformat(\"Hello, %s!\", \"world\") == \"Hello, world!\"\n\ndef test_striptags():\n    assert striptags(\"<p>Hello, <b>world</b>!</p>\") == \"Hello, world!\"\n\ndef test_time():\n    assert time(datetime.datetime(2023, 10, 26, 10, 30, 0)) == \"10:30:00\"\n    assert time(datetime.datetime(2023, 10, 26, 10, 30, 0), \"H:i\") == \"10:30\"\n    assert time(None) == \"\"\n\ndef test_timesince():\n    now = timezone.now()\n    past = now - datetime.timedelta(days=1)\n    assert timesince(past) == \"1 day ago\"\n\ndef test_timeuntil():\n    now = timezone.now()\n    future = now + datetime.timedelta(days=1)\n    assert timeuntil(future) == \"in 1 day\"\n\ndef test_title():\n    assert title(\"hello world\") == \"Hello World\"\n\ndef test_truncatechars():\n    assert truncatechars(\"hello world\", 5) == \"hello\"\n\ndef test_truncatechars_html():\n    assert truncatechars_html(\"<p>hello world</p>\", 5) == \"<p>hello</p>\"\n\ndef test_truncatewords():\n    assert truncatewords(\"hello world\", 1) == \"hello\"\n\ndef test_truncatewords_html():\n    assert truncatewords_html(\"<p>hello world</p>\", 1) == \"<p>hello</p>\"\n\ndef test_upper():\n    assert upper(\"hello world\") == \"HELLO WORLD\"\n\ndef test_urlencode():\n    assert urlencode({\"key\": \"value\"}) == \"key=value\"\n\ndef test_urlize():\n    assert urlize(\"http://www.example.com\") == \"<a href=\\\"http://www.example.com\\\">http://www.example.com</a>\"\n\ndef test_urlizetrunc():\n    assert urlizetrunc(\"http://www.example.com\", 10) == \"<a href=\\\"http://www.example.com\\\">example.com</a>\"\n\ndef test_wordcount():\n    assert wordcount(\"hello world\") == 2\n\ndef test_wordwrap():\n    assert wordwrap(\"hello world\", 5) == \"hello\\nworld\"\n\ndef test_yesno():\n    assert yesno(True) == \"yes\"\n    assert yesno(False) == \"no\"\n    assert yesno(None) == \"no\"\n    assert yesno(True, \"yes,no,maybe\") == \"yes\"\n    assert yesno(False, \"yes,no,maybe\") == \"no\"\n    assert yesno(None, \"yes,no,maybe\") == \"maybe\"\n\n"], "sample_15": ["\nfrom django.conf import settings\nfrom django.test import SimpleTestCase\nfrom django.utils.translation import get_supported_language_variant\nfrom django.utils.translation.trans_real import language_code_re\n\nfrom django.core.checks.translation import (\n    check_language_settings_consistent,\n    check_setting_language_code,\n    check_setting_languages,\n    check_setting_languages_bidi,\n)\n\nclass TranslationChecksTests(SimpleTestCase):\n\n    def test_check_setting_language_code_valid(self):\n        settings.LANGUAGE_CODE = 'en-us'\n        self.assertEqual(check_setting_language_code(None), [])\n\n    def test_check_setting_language_code_invalid_type(self):\n        settings.LANGUAGE_CODE = 123\n        errors = check_setting_language_code(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'translation.E001')\n\n    def test_check_setting_language_code_invalid_format(self):\n        settings.LANGUAGE_CODE = 'invalid-language-code'\n        errors = check_setting_language_code(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'translation.E001')\n\n    def test_check_setting_languages_valid(self):\n        settings.LANGUAGES = [('en', 'English'), ('fr', 'French')]\n        self.assertEqual(check_setting_languages(None), [])\n\n    def test_check_setting_languages_invalid_type(self):\n        settings.LANGUAGES = [('en', 'English'), (123, 'French')]\n        errors = check_setting_languages(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'translation.E002')\n\n    def test_check_setting_languages_invalid_format(self):\n        settings.LANGUAGES = [('en', 'English'), ('invalid-language-code', 'French')]\n        errors = check_setting_languages(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'translation.E002')\n\n    def test_check_setting_languages_bidi_valid(self):\n        settings.LANGUAGES_BIDI = ['ar', 'he']\n        self.assertEqual(check_setting_languages_bidi(None), [])\n\n    def test_check_setting_languages_bidi_invalid_type(self):\n        settings.LANGUAGES_BIDI = ['ar', 123]\n        errors = check_setting_languages_bidi(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'translation.E003')\n\n    def test_check_setting_languages_bidi_invalid_format(self):\n        settings.LANGUAGES_BIDI = ['ar', 'invalid-language-code']\n        errors = check_setting_languages_bidi(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'translation.E003')\n\n    def test_check_language_settings_consistent_valid(self):\n        settings.LANGUAGE_CODE = 'en-us'\n        settings.LANGUAGES = [('en', 'English'), ('fr', 'French')]\n        self.assertEqual(check_language_settings_consistent(None), [])\n\n    def test_check_language_settings_consistent_invalid(self):\n        settings.LANGUAGE_CODE = 'invalid-language-code'\n        settings.LANGUAGES = [('en', 'English'), ('fr', 'French')]\n        errors = check_language_settings_consistent(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'translation.E004')\n"], "sample_107": ["\nimport unittest\nimport numpy as np\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model.logistic import (\n    LogisticRegression,\n    LogisticRegressionCV,\n    _logistic_loss,\n    _log_reg_scoring_path,\n)\nfrom sklearn.metrics.scorer import get_scorer\nfrom sklearn.exceptions import ConvergenceWarning\nimport warnings\n\nclass LogisticRegressionTest(unittest.TestCase):\n\n    def test_logistic_regression(self):\n        X, y = make_classification(n_samples=100, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n        model = LogisticRegression(random_state=42)\n        model.fit(X_train, y_train)\n        score = model.score(X_test, y_test)\n        self.assertGreater(score, 0.8)\n\n    def test_logistic_regression_penalty(self):\n        X, y = make_classification(n_samples=100, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n        model_l1 = LogisticRegression(penalty='l1', solver='liblinear', random_state=42)\n        model_l2 = LogisticRegression(penalty='l2', solver='liblinear', random_state=42)\n        model_l1.fit(X_train, y_train)\n        model_l2.fit(X_train, y_train)\n        score_l1 = model_l1.score(X_test, y_test)\n        score_l2 = model_l2.score(X_test, y_test)\n        self.assertAlmostEqual(score_l1, score_l2, places=2)\n\n    def test_logistic_regression_multiclass(self):\n        X, y = make_classification(n_samples=100, n_classes=3, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n        model = LogisticRegression(multi_class='multinomial', solver='lbfgs', random_state=42)\n        model.fit(X_train, y_train)\n        score = model.score(X_test, y_test)\n        self.assertGreater(score, 0.8)\n\n    def test_logistic_regression_cv(self):\n        X, y = make_classification(n_samples=100, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n        model = LogisticRegressionCV(cv=5, random_state=42)\n        model.fit(X_train, y_train)\n        score = model.score(X_test, y_test)\n        self.assertGreater(score, 0.8)\n\n    def test_logistic_regression_scoring(self):\n        X, y = make_classification(n_samples=100, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n        model = LogisticRegression(random_state=42, scoring='f1')\n        model.fit(X_train, y_train)\n        score = model.score(X_test, y_test)\n        self.assertGreater(score, 0.5)\n\n    def test_logistic_loss(self):\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([0, 1])\n        coef = np.array([0.5, 0.5])\n        intercept = 0\n        loss = _logistic_loss(X, y, coef, intercept)\n        self.assertAlmostEqual(loss, 0.6931, places=4)\n\n    def test_log_reg_scoring_path(self):\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([0, 1])\n        Cs = [0.1, 1, 10]\n        scores = _log_reg_scoring_path(X, y, np.arange(len(X)), np.arange(len(X)),\n                                       Cs=Cs, scoring='accuracy')\n        self.assertEqual(len(scores), len(Cs))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_54": ["\nimport unittest\nfrom django.utils.html import (\n    conditional_escape,\n    escape,\n    escapejs,\n    format_html,\n    html_safe,\n    json_script,\n    linebreaks,\n    smart_urlquote,\n    strip_spaces_between_tags,\n    strip_tags,\n    urlize,\n    Urlizer,\n)\nfrom django.utils.safestring import SafeString\nfrom django.utils.encoding import punycode\n\nclass HTMLUtilitiesTests(unittest.TestCase):\n\n    def test_escape(self):\n        self.assertEqual(escape(\"<script>alert('XSS')</script>\"), \"&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;\")\n\n    def test_escape_already_escaped(self):\n        self.assertEqual(escape(SafeString(\"<b>bold</b>\")), \"<b>bold</b>\")\n\n    def test_escapejs(self):\n        self.assertEqual(escapejs(\"'\\\"\\\\<>&=-`\"), \"\\\\u0027\\\\u0022\\\\u005C\\\\u003E\\\\u003C\\\\u0026\\\\u003D\\\\u002D\\\\u0060\")\n\n    def test_json_script(self):\n        self.assertEqual(json_script({\"key\": \"value\"}), '<script type=\"application/json\">{\"key\": \"value\"}</script>')\n\n    def test_json_script_with_element_id(self):\n        self.assertEqual(json_script({\"key\": \"value\"}, element_id=\"my-script\"), '<script id=\"my-script\" type=\"application/json\">{\"key\": \"value\"}</script>')\n\n    def test_conditional_escape(self):\n        self.assertEqual(conditional_escape(\"<script>alert('XSS')</script>\"), \"&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;\")\n        self.assertEqual(conditional_escape(SafeString(\"<b>bold</b>\")), \"<b>bold</b>\")\n\n    def test_format_html(self):\n        self.assertEqual(format_html(\"<p>{}</p>\", \"Hello, <b>world</b>!\"), '<p>Hello, <b>world</b>!</p>')\n\n    def test_format_html_join(self):\n        self.assertEqual(format_html_join('\\n', \"<li>{} {}</li>\", [(\"John\", \"Doe\"), (\"Jane\", \"Doe\")]), '<li>John Doe</li>\\n<li>Jane Doe</li>')\n\n    def test_linebreaks(self):\n        self.assertEqual(linebreaks(\"This is a paragraph.\\n\\nThis is another paragraph.\"), \"<p>This is a paragraph.</p>\\n\\n<p>This is another paragraph.</p>\")\n\n    def test_linebreaks_autoescape(self):\n        self.assertEqual(linebreaks(\"This is a paragraph.\\n\\nThis is another paragraph.\", autoescape=True), \"<p>This is a paragraph.</p><br><br><p>This is another paragraph.</p>\")\n\n    def test_strip_tags(self):\n        self.assertEqual(strip_tags(\"<p>Hello, <b>world</b>!</p>\"), \"Hello, world!\")\n\n    def test_strip_spaces_between_tags(self):\n        self.assertEqual(strip_spaces_between_tags(\"<p> Hello </p>\"), \"<p>Hello</p>\")\n\n    def test_smart_urlquote(self):\n        self.assertEqual(smart_urlquote(\"http://www.example.com\"), \"http://www.example.com\")\n        self.assertEqual(smart_urlquote(\"https://www.example.com\"), \"https://www.example.com\")\n        self.assertEqual(smart_urlquote(\"www.example.com\"), \"http://www.example.com\")\n        self.assertEqual(smart_urlquote(\"example.com\"), \"http://example.com\")\n        self.assertEqual(smart_urlquote(\"example.net\"), \"http://example.net\")\n\n    def test_urlizer(self):\n        self.assertEqual(urlize(\"Go to http://www.example.com\"), '<a href=\"http://www.example.com\">http://www.example.com</a>')\n        self.assertEqual(urlize(\"Go to www.example.com\"), '<a href=\"http://www.example.com\">www.example.com</a>')\n        self.assertEqual(urlize(\"Go to example.com\"), '<a href=\"http://example.com\">example.com</a>')\n        self.assertEqual(urlize(\"Go to example.net\"), '<a href=\"http://example.net\">example.net</a>')\n        self.assertEqual(urlize(\"Go to example.com (with parentheses)\"), '<a href=\"http://example.com\">example.com</a> (with parentheses)')\n\n    def test_urlizer_nofollow(self):\n        self.assertEqual(urlize(\"Go to http://www.example.com\", nofollow=True), '<a href=\"http://www.example.com\" rel=\"nofollow\">http://www.example.com</a>')\n\n    def test_urlizer_trim_url_limit(self):\n        self.assertEqual(urlize(\"Go to averylongurl.com\", trim_url_limit=10), '<a href=\"http://averylongurl.com\">averylong\u2026</a>')\n\n    def test_urlizer_email(self):\n        self.assertEqual(urlize(\"Contact me at john.doe@example.com\"), '<a href=\"mailto:john.doe@example.com\">john.doe@example.com</a>')\n\n    def test_avoid_wrapping(self):\n        self.assertEqual(avoid_wrapping(\"This is a phrase.\"), \"This\\xa0is\\xa0a\\xa0phrase.\")\n\n    def test_html_safe(self):\n        class SafeStringClass:\n            def __str__(self):\n                return \"SafeString\"\n        @html_safe\n        class UnsafeStringClass:\n            def __str__(self):\n                return \"UnsafeString\"\n\n        self.assertEqual(str(SafeStringClass()), \"SafeString\")\n        self.assertEqual(str(UnsafeStringClass()), \"UnsafeString\")\n        self.assertIsInstance(SafeStringClass().__str__(), str)\n        self.assertIsInstance(UnsafeStringClass().__html__(), str)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_82": ["\nimport numpy as np\nimport pandas as pd\nimport pytest\n\nfrom xarray import DataArray, Dataset\nfrom xarray.core.groupby import (\n    DataArrayGroupBy,\n    DatasetGroupBy,\n    GroupBy,\n    ImplementsArrayReduce,\n    ImplementsDatasetReduce,\n    _consolidate_slices,\n    _DummyGroup,\n    _unique_and_monotonic,\n)\n\nfrom xarray.tests.test_dataset import create_test_data\n\n# Test _consolidate_slices\ndef test_consolidate_slices():\n    slices = [slice(0, 2), slice(2, 4), slice(4, 6)]\n    expected = slice(0, 6)\n    assert _consolidate_slices(slices) == expected\n\n    slices = [slice(0, 2), slice(1, 3), slice(2, 4)]\n    expected = slice(0, 4)\n    assert _consolidate_slices(slices) == expected\n\n    slices = [slice(0, 5), slice(2, 7), slice(4, 9)]\n    expected = slice(0, 9)\n    assert _consolidate_slices(slices) == expected\n\n# Test _unique_and_monotonic\ndef test_unique_and_monotonic():\n    assert _unique_and_monotonic([1, 2, 3, 4, 5])\n    assert not _unique_and_monotonic([1, 2, 1, 4, 5])\n    assert not _unique_and_monotonic([1, 2, 3, 2, 5])\n\n# Test _DummyGroup\ndef test_dummy_group():\n    group = _DummyGroup(DataArray(np.arange(5), dims=[\"x\"]), \"group\")\n    assert group.name == \"group\"\n    assert group.size == 5\n\n# Test GroupBy\ndef test_groupby_init():\n    ds = create_test_data()\n    grouped = ds.groupby(\"time\")\n    assert isinstance(grouped, DatasetGroupBy)\n    assert grouped._obj is ds\n    assert grouped._group is ds[\"time\"]\n    assert grouped._group_dim == \"time\"\n\n# Test DataArrayGroupBy\ndef test_dataarray_groupby_init():\n    da = DataArray(np.arange(10), dims=[\"x\"])\n    grouped = da.groupby(\"x\")\n    assert isinstance(grouped, DataArrayGroupBy)\n    assert grouped._obj is da\n    assert grouped._group is da.coords[\"x\"]\n    assert grouped._group_dim == \"x\"\n\n# Test apply\ndef test_apply():\n    ds = create_test_data()\n    grouped = ds.groupby(\"time\")\n    def mean(x):\n        return x.mean()\n    result = grouped.apply(mean)\n    assert isinstance(result, Dataset)\n    assert result.dims == (\"time\",)\n\n# Test map\ndef test_map():\n    ds = create_test_data()\n    grouped = ds.groupby(\"time\")\n    def square(x):\n        return x**2\n    result = grouped.map(square)\n    assert isinstance(result, Dataset)\n    assert result.dims == ds.dims\n\n# Test reduce\ndef test_reduce():\n    ds = create_test_data()\n    grouped = ds.groupby(\"time\")\n    result = grouped.reduce(np.mean)\n    assert isinstance(result, Dataset)\n    assert result.dims == (\"time\",)\n\n# Test assign\ndef test_assign():\n    ds = create_test_data()\n    grouped = ds.groupby(\"time\")\n    result = grouped.assign(new_var=lambda ds: ds[\"var1\"] + ds[\"var2\"])\n    assert isinstance(result, Dataset)\n    assert \"new_var\" in result.data_vars\n\n# Test ImplementsArrayReduce\nclass TestImplementsArrayReduce:\n    def test_inject_reduce_methods(self):\n        class TestClass(ImplementsArrayReduce):\n            pass\n        TestClass._reduce_methods = {\"mean\": lambda self, dim: self}\n        obj = TestClass(np.arange(10))\n        result = obj.mean(\"dim\")\n        assert result is obj\n\n# Test ImplementsDatasetReduce\nclass TestImplementsDatasetReduce:\n    def test_inject_reduce_methods(self):\n        class TestClass(ImplementsDatasetReduce):\n            pass\n        TestClass._reduce_methods = {\"mean\": lambda self, dim: self}\n        obj = TestClass(create_test_data())\n        result = obj.mean(\"dim\")\n        assert result is obj\n\n"], "sample_114": ["\nimport unittest\nimport numpy as np\nfrom sklearn.utils.multiclass import unique_labels\nfrom sklearn.utils.multiclass import is_multilabel\nfrom sklearn.utils.multiclass import type_of_target\nfrom sklearn.utils.multiclass import class_distribution\nfrom sklearn.utils.multiclass import check_classification_targets\nfrom sklearn.utils.multiclass import _ovr_decision_function\nfrom sklearn.utils.multiclass import _check_partial_fit_first_call\n\nclass TestMulticlass(unittest.TestCase):\n\n    def test_unique_labels(self):\n        self.assertTrue(np.array_equal(unique_labels([3, 5, 5, 5, 7, 7]), np.array([3, 5, 7])))\n        self.assertTrue(np.array_equal(unique_labels([1, 2, 3, 4]), np.array([1, 2, 3, 4])))\n        self.assertTrue(np.array_equal(unique_labels([1, 2, 10]), np.array([1, 2, 10])))\n        self.assertTrue(np.array_equal(unique_labels([5, 11]), np.array([5, 11])))\n\n    def test_is_multilabel(self):\n        self.assertFalse(is_multilabel([0, 1, 0, 1]))\n        self.assertFalse(is_multilabel([[1], [0, 2], []]))\n        self.assertTrue(is_multilabel(np.array([[1, 0], [0, 0]])))\n        self.assertFalse(is_multilabel(np.array([[1], [0], [0]])))\n        self.assertTrue(is_multilabel(np.array([[1, 0, 0]])))\n\n    def test_type_of_target(self):\n        self.assertEqual(type_of_target([0.1, 0.6]), 'continuous')\n        self.assertEqual(type_of_target([1, -1, -1, 1]), 'binary')\n        self.assertEqual(type_of_target(['a', 'b', 'a']), 'binary')\n        self.assertEqual(type_of_target([1.0, 2.0]), 'binary')\n        self.assertEqual(type_of_target([1, 0, 2]), 'multiclass')\n        self.assertEqual(type_of_target([1.0, 0.0, 3.0]), 'multiclass')\n        self.assertEqual(type_of_target(['a', 'b', 'c']), 'multiclass')\n        self.assertEqual(type_of_target(np.array([[1, 2], [3, 1]])), 'multiclass-multioutput')\n        self.assertEqual(type_of_target([[1, 2]]), 'multilabel-indicator')\n        self.assertEqual(type_of_target(np.array([[1.5, 2.0], [3.0, 1.6]])), 'continuous-multioutput')\n        self.assertEqual(type_of_target(np.array([[0, 1], [1, 1]])), 'multilabel-indicator')\n\n    def test_class_distribution(self):\n        y = np.array([[0, 1], [1, 0], [0, 1]])\n        classes, n_classes, class_prior = class_distribution(y)\n        self.assertEqual(classes, [[0, 1], [0, 1]])\n        self.assertEqual(n_classes, [2, 2])\n        self.assertTrue(np.allclose(class_prior[0], [1/3, 2/3]))\n        self.assertTrue(np.allclose(class_prior[1], [1/3, 2/3]))\n\n    def test_check_classification_targets(self):\n        with self.assertRaises(ValueError):\n            check_classification_targets([1, 2, 3])\n        check_classification_targets(['a', 'b', 'c'])\n\n    def test__ovr_decision_function(self):\n        predictions = np.array([[0, 1], [1, 0], [0, 1]])\n        confidences = np.array([[0.1, 0.9], [0.8, 0.2], [0.3, 0.7]])\n        n_classes = 3\n        decision_function = _ovr_decision_function(predictions, confidences, n_classes)\n        self.assertTrue(np.allclose(decision_function, [[ -0.7, 1.7], [ 1.7, -0.7], [ -0.3, 1.3]]))\n\n    def test__check_partial_fit_first_call(self):\n        class MockClassifier:\n            def __init__(self):\n                self.classes_ = None\n        clf = MockClassifier()\n        self.assertTrue(_check_partial_fit_first_call(clf, classes=[0, 1, 2]))\n        self.assertEqual(clf.classes_.tolist(), [0, 1, 2])\n        _check_partial_fit_first_call(clf, classes=[0, 1, 2])\n\n"], "sample_18": ["\nfrom django.db import models\nfrom django.db.models.fields import (\n    ManyToManyField,\n    ManyToManyDescriptor,\n    RECURSIVE_RELATIONSHIP_CONSTANT,\n)\nfrom django.db.models.fields.related import ManyToManyRel\nfrom django.core.checks import Error, Warning as DjangoWarning\nfrom django.apps import apps\nfrom django.test import SimpleTestCase, TestCase\nfrom django.test.utils import override_settings\nfrom django.utils.functional import curry\nfrom django.utils import timezone\n\nclass MyModel(models.Model):\n    pass\n\nclass MyOtherModel(models.Model):\n    pass\n\nclass MyThirdModel(models.Model):\n    pass\n\nclass MyIntermediateModel(models.Model):\n    from_model = models.ForeignKey(MyModel, on_delete=models.CASCADE)\n    to_model = models.ForeignKey(MyOtherModel, on_delete=models.CASCADE)\n\nclass MyRecursiveModel(models.Model):\n    friends = models.ManyToManyField(\n        \"self\",\n        symmetrical=True,\n        through='MyRecursiveThroughModel',\n    )\n\nclass MyRecursiveThroughModel(models.Model):\n    from_friend = models.ForeignKey(MyRecursiveModel, on_delete=models.CASCADE, related_name='from_friends')\n    to_friend = models.ForeignKey(MyRecursiveModel, on_delete=models.CASCADE, related_name='to_friends')\n\nclass TestManyToManyField(SimpleTestCase):\n\n    def test_check_unique(self):\n        field = ManyToManyField(MyModel)\n        errors = field.check()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Error)\n\n    def test_check_relationship_model(self):\n        field = ManyToManyField(MyModel, through='MyIntermediateModel')\n        errors = field.check(from_model=MyModel)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_relationship_model_invalid(self):\n        field = ManyToManyField(MyModel, through='NonExistentModel')\n        errors = field.check(from_model=MyModel)\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Error)\n\n    def test_check_relationship_model_recursive(self):\n        field = ManyToManyField(RECURSIVE_RELATIONSHIP_CONSTANT, through='MyRecursiveThroughModel')\n        errors = field.check(from_model=MyRecursiveModel)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_relationship_model_recursive_invalid(self):\n        field = ManyToManyField(RECURSIVE_RELATIONSHIP_CONSTANT, through='NonExistentModel')\n        errors = field.check(from_model=MyRecursiveModel)\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Error)\n\n    def test_check_relationship_model_through_fields(self):\n        field = ManyToManyField(MyModel, through='MyIntermediateModel', through_fields=('from_model', 'to_model'))\n        errors = field.check(from_model=MyModel)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_relationship_model_through_fields_invalid(self):\n        field = ManyToManyField(MyModel, through='MyIntermediateModel', through_fields=('invalid_field', 'to_model'))\n        errors = field.check(from_model=MyModel)\n        self.assertEqual(len(errors), 2)\n        self.assertIsInstance(errors[0], Error)\n        self.assertIsInstance(errors[1], Error)\n\n    def test_check_relationship_model_through_fields_missing(self):\n        field = ManyToManyField(MyModel, through='MyIntermediateModel', through_fields=('from_model',))\n        errors = field.check(from_model=MyModel)\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Error)\n\n    def test_check_ignored_options(self):\n        field = ManyToManyField(MyModel, null=True)\n        errors = field.check()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], DjangoWarning)\n\n    def test_deconstruct(self):\n        field = ManyToManyField(MyModel, through='MyIntermediateModel', related_name='my_related_name')\n        name, path, args, kwargs = field.deconstruct()\n        self.assertEqual(name, 'ManyToManyField')\n        self.assertEqual(path, None)\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {\n            'to': 'MyModel',\n            'through': 'MyIntermediateModel',\n            'related_name': 'my_related_name',\n        })\n\n    def test_deconstruct_swappable(self):\n        class MySwappableModel(models.Model):\n            class Meta:\n                app_label = 'myapp'\n                swappable = 'MY_SWAP'\n        field = ManyToManyField(MySwappableModel)\n        name, path, args, kwargs = field.deconstruct()\n        self.assertEqual(kwargs['to'], 'myapp.MySwappableModel')\n\n    def test_get_path_info(self):\n        field = ManyToManyField(MyModel, through='MyIntermediateModel')\n        path_info = field.get_path_info()\n        self.assertEqual(len(path_info), 2)\n\n    def test_get_reverse_path_info(self):\n        field = ManyToManyField(MyModel, through='MyIntermediateModel')\n        path_info = field.get_reverse_path_info()\n        self.assertEqual(len(path_info), 2)\n\n    def test_m2m_db_table(self):\n        field = ManyToManyField(MyModel)\n        self.assertEqual(field.m2m_db_table(MyModel._meta), 'myapp_mymodel_mymodel')\n\n    def test_m2m_db_table_custom(self):\n        field = ManyToManyField(MyModel, db_table='custom_table')\n        self.assertEqual(field.m2m_db_table(MyModel._meta), 'custom_table')\n\n    def test_m2m_db_table_through(self):\n        field = ManyToManyField(MyModel, through='MyIntermediateModel')\n        self.assertEqual(field.m2m_db_table(MyModel._meta), 'myapp_myintermediatemodel')\n\n    def test_m2m_attr(self):\n        field = ManyToManyField(MyModel, through='MyIntermediateModel')\n        self.assertEqual(field._get_m2m_attr(MyModel, 'column'), 'from_model_id')\n\n    def test_m2m_reverse_attr(self):\n        field = ManyToManyField(MyModel, through='MyIntermediateModel')\n        self.assertEqual(field._get_m2m_reverse_attr(MyModel, 'column'), 'to_model_id')\n\n    def test_m2m_field_name(self):\n        field = ManyToManyField(MyModel, through='MyIntermediateModel')\n        self.assertEqual(field._get_m2m_field_name(MyModel), 'from_model')\n\n    def test_m2m_reverse_field_name(self):\n        field = ManyToManyField(MyModel, through='MyIntermediateModel')\n        self.assertEqual(field._get_m2m_reverse_field_name(MyModel), 'to_model')\n\n    def test_m2m_target_field_name(self):\n        field = ManyToManyField(MyModel, through='MyIntermediateModel')\n        self.assertEqual(field.m2m_target_field_name(), 'to_model')\n\n    def test_m2m_reverse_target_field_name(self):\n        field = ManyToManyField(MyModel, through='MyIntermediateModel')\n        self.assertEqual(field.m2m_reverse_target_field_name(), 'from_model')\n\n    def test_contribute_to_class(self):\n        class MyModel(models.Model):\n            my_m2m = ManyToManyField(MyOtherModel)\n        self.assertTrue(hasattr(MyModel, 'my_m2m'))\n\n    def test_contribute_to_class_related_name(self):\n        class MyModel(models.Model):\n            my_m2m = ManyToManyField(MyOtherModel, related_name='my_related_name')\n        self.assertTrue(hasattr(MyModel, 'my_m2m'))\n        self.assertTrue(hasattr(MyOtherModel, 'my_related_name'))\n\n    def test_contribute_to_class_symmetrical(self):\n        class MyModel(models.Model):\n            my_m2m = ManyToManyField(\n                'self',\n                symmetrical=True,\n                related_name='+'\n            )\n        self.assertTrue(hasattr(MyModel, 'my_m2m'))\n        self.assertTrue(hasattr(MyModel, 'my_m2m_+'))\n\n    def test_contribute_to_related_class(self):\n        class MyModel(models.Model):\n            my_m2m = ManyToManyField(MyOtherModel)\n        self.assertTrue(hasattr(MyOtherModel, MyModel._meta.model_name.lower() + '_set'))\n\n    def test_value_from_object(self):\n        class MyModel(models.Model):\n            my_m2m = ManyToManyField(MyOtherModel)\n        obj = MyModel.objects.create()\n        self.assertEqual(obj.my_m2m.all(), [])\n\n    def test_save_form_data(self):\n        class MyModel(models.Model):\n            my_m2m = ManyToManyField(MyOtherModel)\n        obj = MyModel.objects.create()\n        obj.my_m2m.set([MyOtherModel.objects.create()])\n        self.assertEqual(obj.my_m2m.all().count(), 1)\n\n    def test_formfield(self):\n        class MyModel(models.Model):\n            my_m2m = ManyToManyField(MyOtherModel)\n        field = MyModel._meta.get_field('my_m2m')\n        formfield = field.formfield()\n        self.assertIsInstance(formfield, forms.ModelMultipleChoiceField)\n\n    def test_db_check(self):\n        field = ManyToManyField(MyModel)\n        self.assertIsNone(field.db_check(None))\n\n    def test_db_type(self):\n        field = ManyToManyField(MyModel)\n        self.assertIsNone(field.db_type(None))\n\n    def test_db_parameters(self):\n        field = ManyToManyField(MyModel)\n        self.assertEqual(field.db_parameters(None), {\"type\": None, \"check\": None})\n\n"], "sample_113": ["\nimport unittest\nfrom unittest.mock import MagicMock\n\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.compose import (\n    ColumnTransformer,\n    make_column_transformer,\n    make_column_selector,\n)\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.preprocessing import FunctionTransformer, StandardScaler, OneHotEncoder\nimport numpy as np\nimport pandas as pd\n\nclass TestColumnTransformer(unittest.TestCase):\n\n    def test_init(self):\n        ct = ColumnTransformer(\n            transformers=[\n                (\"num\", StandardScaler(), [0, 1]),\n                (\"cat\", OneHotEncoder(), [2]),\n            ]\n        )\n        self.assertEqual(ct.transformers, [(\"num\", StandardScaler(), [0, 1]), (\"cat\", OneHotEncoder(), [2])])\n        self.assertEqual(ct.n_jobs, None)\n        self.assertEqual(ct.remainder, \"drop\")\n        self.assertEqual(ct.sparse_threshold, 0.3)\n        self.assertEqual(ct.verbose, False)\n        self.assertEqual(ct.verbose_feature_names_out, True)\n\n    def test_fit_transform(self):\n        X = np.array([[1, 2, 'a'], [3, 4, 'b'], [5, 6, 'a']])\n        ct = ColumnTransformer(\n            transformers=[\n                (\"num\", StandardScaler(), [0, 1]),\n                (\"cat\", OneHotEncoder(), [2]),\n            ]\n        )\n        X_t = ct.fit_transform(X)\n        self.assertEqual(X_t.shape, (3, 4))\n\n    def test_fit_transform_pandas(self):\n        df = pd.DataFrame({'a': [1, 3, 5], 'b': [2, 4, 6], 'c': ['a', 'b', 'a']})\n        ct = ColumnTransformer(\n            transformers=[\n                (\"num\", StandardScaler(), ['a', 'b']),\n                (\"cat\", OneHotEncoder(), ['c']),\n            ]\n        )\n        X_t = ct.fit_transform(df)\n        self.assertEqual(X_t.shape, (3, 4))\n\n    def test_transform(self):\n        ct = ColumnTransformer(\n            transformers=[\n                (\"num\", StandardScaler(), [0, 1]),\n                (\"cat\", OneHotEncoder(), [2]),\n            ]\n        )\n        X = np.array([[1, 2, 'a'], [3, 4, 'b'], [5, 6, 'a']])\n        ct.fit(X)\n        X_t = ct.transform(X)\n        self.assertEqual(X_t.shape, (3, 4))\n\n    def test_get_feature_names_out(self):\n        ct = ColumnTransformer(\n            transformers=[\n                (\"num\", StandardScaler(), [0, 1]),\n                (\"cat\", OneHotEncoder(), [2]),\n            ]\n        )\n        X = np.array([[1, 2, 'a'], [3, 4, 'b'], [5, 6, 'a']])\n        ct.fit(X)\n        feature_names_out = ct.get_feature_names_out()\n        self.assertEqual(feature_names_out, ['num__x0', 'num__x1', 'cat__x2_a', 'cat__x2_b'])\n\n    def test_get_feature_names_out_verbose_false(self):\n        ct = ColumnTransformer(\n            transformers=[\n                (\"num\", StandardScaler(), [0, 1]),\n                (\"cat\", OneHotEncoder(), [2]),\n            ],\n            verbose_feature_names_out=False\n        )\n        X = np.array([[1, 2, 'a'], [3, 4, 'b'], [5, 6, 'a']])\n        ct.fit(X)\n        with self.assertRaises(ValueError):\n            ct.get_feature_names_out()\n\n    def test_remainder(self):\n        ct = ColumnTransformer(\n            transformers=[(\"num\", StandardScaler(), [0])],\n            remainder=\"passthrough\"\n        )\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        X_t = ct.fit_transform(X)\n        self.assertEqual(X_t.shape, (3, 2))\n\n    def test_remainder_estimator(self):\n        ct = ColumnTransformer(\n            transformers=[(\"num\", StandardScaler(), [0])],\n            remainder=FunctionTransformer(lambda x: x * 2)\n        )\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        X_t = ct.fit_transform(X)\n        self.assertEqual(X_t.shape, (3, 2))\n\n    def test_not_fitted(self):\n        ct = ColumnTransformer(\n            transformers=[(\"num\", StandardScaler(), [0, 1])]\n        )\n        with self.assertRaises(NotFittedError):\n            ct.transform(np.array([[1, 2, 'a'], [3, 4, 'b'], [5, 6, 'a']]))\n\n    def test_make_column_transformer(self):\n        ct = make_column_transformer(\n            (StandardScaler(), [0, 1]),\n            (OneHotEncoder(), [2]),\n        )\n        self.assertIsInstance(ct, ColumnTransformer)\n\n    def test_make_column_selector(self):\n        df = pd.DataFrame({'city': ['London', 'London', 'Paris', 'Sallisaw'],\n                          'rating': [5, 3, 4, 5]})\n        ct = make_column_transformer(\n            (StandardScaler(), make_column_selector(dtype_include=np.number)),\n            (OneHotEncoder(), make_column_selector(dtype_include=object))\n        )\n        ct.fit_transform(df)\n\n    def test_make_column_selector_pattern(self):\n        df = pd.DataFrame({'city': ['London', 'London', 'Paris', 'Sallisaw'],\n                          'rating': [5, 3, 4, 5]})\n        ct = make_column_transformer(\n            (StandardScaler(), make_column_selector(pattern='rating')),\n            (OneHotEncoder(), make_column_selector(pattern='city'))\n        )\n        ct.fit_transform(df)\n\n    def test_make_column_selector_error(self):\n        with self.assertRaises(ValueError):\n            make_column_selector(pattern='rating', dtype_include=np.number)\n\n\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_85": ["\nimport logging\nimport contextlib\nfrom _pytest.logging import (\n    LogCaptureHandler,\n    LoggingPlugin,\n    ColoredLevelFormatter,\n    get_option_ini,\n    catching_logs,\n    _LiveLoggingStreamHandler,\n    caplog,\n)\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pytester import Testdir\nimport pytest\nfrom io import StringIO\n\ndef test_get_option_ini(monkeypatch):\n    config = object()\n    config.getoption = lambda name: None\n    config.getini = lambda name: \"default\"\n    monkeypatch.setattr(config, \"option\", object())\n    assert LoggingPlugin.get_option_ini(config, \"foo\") == \"default\"\n    assert config.getoption.call_args_list == [(\"foo\",)]\n    assert config.getini.call_args_list == [(\"foo\",)]\n\ndef test_get_actual_log_level(monkeypatch):\n    config = object()\n    config.getoption = lambda name: None\n    config.getini = lambda name: None\n    monkeypatch.setattr(config, \"option\", object())\n\n    with pytest.raises(pytest.UsageError):\n        LoggingPlugin.get_actual_log_level(config, \"foo\")\n\n    config.getoption.return_value = \"DEBUG\"\n    assert LoggingPlugin.get_actual_log_level(config, \"foo\") == logging.DEBUG\n\n    config.getoption.return_value = \"WARNING\"\n    assert LoggingPlugin.get_actual_log_level(config, \"foo\") == logging.WARNING\n\n    config.getoption.return_value = None\n    config.getini.return_value = \"INFO\"\n    assert LoggingPlugin.get_actual_log_level(config, \"foo\") == logging.INFO\n\ndef test_colored_level_formatter(capsys):\n    formatter = ColoredLevelFormatter(create_terminal_writer(None),\n                                      \"%(levelname)s: %(message)s\",\n                                      datefmt=\"%H:%M:%S\")\n    record = logging.LogRecord(\"test_module\", logging.ERROR, \"test_file\", 123,\n                               \"Error message\", [], None, None)\n    formatter.format(record)\n    captured = capsys.readouterr()\n    assert captured.out.startswith(\"\\033[91mERROR\\033[0m: Error message\")\n\ndef test_catching_logs(caplog):\n    handler = LogCaptureHandler()\n    with catching_logs(handler):\n        logging.getLogger().info(\"test message\")\n    assert handler.records == [\n        logging.LogRecord(\n            \"root\", logging.INFO, \"test_file\", 123, \"test message\", [], None, None\n        )\n    ]\n\ndef test_log_capture_handler(caplog):\n    handler = LogCaptureHandler()\n    handler.emit(logging.LogRecord(\"root\", logging.INFO, \"test_file\", 123, \"test message\", [], None, None))\n    assert handler.records == [\n        logging.LogRecord(\n            \"root\", logging.INFO, \"test_file\", 123, \"test message\", [], None, None\n        )\n    ]\n\ndef test_log_capture_fixture(testdir):\n    testdir.makepyfile(\n        \"\"\"\n        import logging\n\n        def test_log_capture(caplog):\n            logging.info(\"test message\")\n            assert caplog.text == \"test message\\\\n\"\n            assert caplog.records[0].levelno == logging.INFO\n        \"\"\"\n    )\n    result = testdir.runpytest()\n    assert result.ret == 0\n\ndef test_live_logging_stream_handler(capsys):\n    terminal_reporter = object()\n    capture_manager = object()\n    handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n    handler.set_when(\"setup\")\n    handler.emit(logging.LogRecord(\"root\", logging.INFO, \"test_file\", 123, \"test message\", [], None, None))\n    captured = capsys.readouterr()\n    assert captured.out.startswith(\"\\nINFO: test message\")\n\ndef test_logging_plugin_setup(testdir):\n    testdir.makepyfile(\n        \"\"\"\n        import logging\n\n        def test_logging(caplog):\n            logging.info(\"test message\")\n            assert caplog.text == \"test message\\\\n\"\n        \"\"\"\n    )\n    result = testdir.runpytest()\n    assert result.ret == 0\n\ndef test_logging_plugin_teardown(testdir):\n    testdir.makepyfile(\n        \"\"\"\n        import logging\n\n        def test_logging(caplog):\n            logging.info(\"test message\")\n            assert caplog.text == \"test message\\\\n\"\n        \"\"\"\n    )\n    result = testdir.runpytest()\n    assert result.ret == 0\n\ndef test_logging_plugin_log_file(testdir, tmpdir):\n    log_file = tmpdir.join(\"pytest.log\")\n    testdir.makepyfile(\n        \"\"\"\n        import logging\n\n        def test_logging(caplog):\n            logging.info(\"test message\")\n        \"\"\"\n    )\n    testdir.monkeypatch.setattr(LoggingPlugin, \"get_option_ini\", lambda *args: str(log_file))\n    result = testdir.runpytest()\n    assert result.ret == 0\n    assert log_file.read() == \"INFO:test message\\n\"\n\ndef test_logging_plugin_log_level(testdir):\n    testdir.makepyfile(\n        \"\"\"\n        import logging\n\n        def test_logging(caplog):\n            logging.info(\"test message\")\n        \"\"\"\n    )\n    testdir.monkeypatch.setattr(LoggingPlugin, \"get_actual_log_level\", lambda *args: logging.ERROR)\n    result = testdir.runpytest()\n    assert result.ret == 0\n    assert len(caplog.records) == 0\n\ndef test_logging_plugin_print_logs(testdir, capsys):\n    testdir.makepyfile(\n        \"\"\"\n        import logging\n\n        def test_logging(caplog):\n            logging.info(\"test message\")\n        \"\"\"\n    )\n    testdir.monkeypatch.setattr(LoggingPlugin, \"print_logs\", True)\n    result = testdir.runpytest()\n    assert result.ret == 0\n    captured = capsys.readouterr()\n    assert \"test message\" in captured.out\n\ndef test_logging_plugin_log_cli_level(testdir, capsys):\n    testdir.makepyfile(\n        \"\"\"\n        import logging\n\n        def test_logging(caplog):\n            logging.info(\"test message\")\n        \"\"\"\n    )\n    testdir.monkeypatch.setattr(LoggingPlugin, \"get_actual_log_level\", lambda *args: logging.ERROR)\n    testdir.monkeypatch.setattr(LoggingPlugin, \"_log_cli_enabled\", lambda *args: True)\n    result = testdir.runpytest()\n    assert result.ret == 0\n    captured = capsys.readouterr()\n    assert \"test message\" not in captured.out\n\ndef test_logging_plugin_log_file_level(testdir, tmpdir):\n    log_file = tmpdir.join(\"pytest.log\")\n    testdir.makepyfile(\n        \"\"\"\n        import logging\n\n        def test_logging(caplog):\n            logging.info(\"test message\")\n        \"\"\"\n    )\n    testdir.monkeypatch.setattr(LoggingPlugin, \"get_option_ini\", lambda *args: str(log_file))\n    testdir.monkeypatch.setattr(LoggingPlugin, \"get_actual_log_level\", lambda *args: logging.ERROR)\n    testdir.monkeypatch.setattr(LoggingPlugin, \"get_actual_log_level\", lambda *args: logging.INFO)\n    result = testdir.runpytest()\n    assert result.ret == 0\n    assert log_file.read() == \"INFO:test message\\n\"\n"], "sample_35": ["\nfrom django.forms import (\n    BooleanField, CharField, ChoiceField, DateField, DateTimeField, DecimalField,\n    EmailField, FileField, FloatField, Form, GenericIPAddressField, IntegerField,\n    ModelChoiceField, ModelMultipleChoiceField, MultipleChoiceField,\n    RegexField, SplitDateTimeField, TimeField, URLField,\n)\nfrom django.forms.models import (\n    BaseModelFormSet, BaseInlineFormSet, InlineForeignKeyField,\n    inlineformset_factory, modelform_defines_fields, modelformset_factory,\n)\nfrom django.test import SimpleTestCase\nfrom django.test.utils import override_settings\nfrom django.core.exceptions import ValidationError\n\nfrom .models import (\n    Author, Book, Publisher, ChoiceModel,\n)\n\nclass ModelFormTest(SimpleTestCase):\n\n    def test_modelform_defines_fields(self):\n        class MyForm(Form):\n            pass\n        self.assertFalse(modelform_defines_fields(MyForm))\n\n        class MyModelForm(Form):\n            class Meta:\n                model = Author\n                fields = '__all__'\n        self.assertTrue(modelform_defines_fields(MyModelForm))\n\n        class MyModelForm2(Form):\n            class Meta:\n                model = Author\n                exclude = ['name']\n        self.assertTrue(modelform_defines_fields(MyModelForm2))\n\nclass ModelFormSetTest(SimpleTestCase):\n\n    def test_modelformset_factory(self):\n        BookFormSet = modelformset_factory(Book, extra=1)\n        formset = BookFormSet()\n        self.assertEqual(len(formset.forms), 1)\n        self.assertEqual(formset.can_delete, True)\n        self.assertEqual(formset.can_order, False)\n\n        BookFormSet = modelformset_factory(Book, extra=1, can_delete=False)\n        formset = BookFormSet()\n        self.assertEqual(formset.can_delete, False)\n\n    def test_inlineformset_factory(self):\n        BookInlineFormSet = inlineformset_factory(Author, Book, fk_name='author', extra=1)\n        formset = BookInlineFormSet(instance=Author.objects.create())\n        self.assertEqual(len(formset.forms), 1)\n        self.assertEqual(formset.can_delete, True)\n        self.assertEqual(formset.can_order, False)\n\n        BookInlineFormSet = inlineformset_factory(Author, Book, fk_name='author', extra=1, can_delete=False)\n        formset = BookInlineFormSet(instance=Author.objects.create())\n        self.assertEqual(formset.can_delete, False)\n\nclass ModelChoiceFieldTest(SimpleTestCase):\n\n    def test_modelchoicefield(self):\n        field = ModelChoiceField(queryset=Publisher.objects.all())\n        self.assertEqual(field.widget.__class__, Select)\n\n        field = ModelChoiceField(queryset=Publisher.objects.all(), widget=RadioSelect)\n        self.assertEqual(field.widget.__class__, RadioSelect)\n\n        field = ModelChoiceField(queryset=Publisher.objects.all(), empty_label=\"None\")\n        self.assertEqual(field.empty_label, \"None\")\n\n        with self.assertRaises(ValidationError):\n            field.clean(\"invalid\")\n\n        field = ModelChoiceField(queryset=Publisher.objects.all(), to_field_name='slug')\n        self.assertEqual(field.to_field_name, 'slug')\n\nclass ModelMultipleChoiceFieldTest(SimpleTestCase):\n\n    def test_modelmultiplechoicefield(self):\n        field = ModelMultipleChoiceField(queryset=Publisher.objects.all())\n        self.assertEqual(field.widget.__class__, SelectMultiple)\n\n        field = ModelMultipleChoiceField(queryset=Publisher.objects.all(), widget=CheckboxSelectMultiple)\n        self.assertEqual(field.widget.__class__, CheckboxSelectMultiple)\n\n        field = ModelMultipleChoiceField(queryset=Publisher.objects.all(), empty_label=\"None\")\n        self.assertEqual(field.empty_label, \"None\")\n\n        with self.assertRaises(ValidationError):\n            field.clean(\"invalid\")\n\n        field = ModelMultipleChoiceField(queryset=Publisher.objects.all(), to_field_name='slug')\n        self.assertEqual(field.to_field_name, 'slug')\n\nclass InlineForeignKeyFieldTest(SimpleTestCase):\n\n    def test_inlineforeignkeyfield(self):\n        parent_instance = Author.objects.create()\n        field = InlineForeignKeyField(parent_instance)\n        self.assertEqual(field.parent_instance, parent_instance)\n        self.assertEqual(field.initial, parent_instance.pk)\n\n        field = InlineForeignKeyField(parent_instance, pk_field=True)\n        self.assertTrue(field.pk_field)\n\n        field = InlineForeignKeyField(parent_instance, to_field='name')\n        self.assertEqual(field.to_field, 'name')\n        self.assertEqual(field.initial, getattr(parent_instance, 'name'))\n\n        with self.assertRaises(ValidationError):\n            field.clean(\"invalid\")\n\nclass BaseModelFormSetTest(SimpleTestCase):\n\n    def test_basemodelformset(self):\n        formset = BaseModelFormSet(queryset=Author.objects.all())\n        self.assertEqual(formset.model, Author)\n\nclass BaseInlineFormSetTest(SimpleTestCase):\n\n    def test_baseinlineformset(self):\n        formset = BaseInlineFormSet(instance=Author.objects.create(), queryset=Book.objects.all())\n        self.assertEqual(formset.model, Book)\n\n"], "sample_157": ["\nfrom sympy import Symbol, Mul, Add, Pow\nfrom sympy.physics.quantum.tensorproduct import TensorProduct, tensor_product_simp\nfrom sympy.physics.quantum.tensorproduct import combined_tensor_printing\nfrom sympy.physics.quantum.qexpr import QExpr\nfrom sympy.physics.quantum.state import Ket, Bra\nfrom sympy.physics.quantum.commutator import Commutator\nfrom sympy.physics.quantum.anticommutator import AntiCommutator\n\ndef test_TensorProduct_basic():\n    A = Symbol('A', commutative=False)\n    B = Symbol('B', commutative=False)\n    C = Symbol('C', commutative=False)\n    D = Symbol('D', commutative=False)\n    assert TensorProduct(A, B) == A*B\n    assert TensorProduct(A, B, C) == A*B*C\n    assert TensorProduct(A, B)*TensorProduct(C, D) == (A*C) * (B*D)\n\ndef test_TensorProduct_simplification():\n    A = Symbol('A', commutative=False)\n    B = Symbol('B', commutative=False)\n    C = Symbol('C', commutative=False)\n    D = Symbol('D', commutative=False)\n    assert tensor_product_simp(TensorProduct(A, B)*TensorProduct(C, D)) == (A*C) * (B*D)\n    assert tensor_product_simp(TensorProduct(A, B)**2) == (A*B)**2\n    assert tensor_product_simp(Add(TensorProduct(A, B), TensorProduct(C, D))) == A*B + C*D\n\ndef test_TensorProduct_combined_printing():\n    A = Ket('A')\n    B = Ket('B')\n    combined_tensor_printing(True)\n    assert str(TensorProduct(A, B)) == '|AB>'\n    combined_tensor_printing(False)\n    assert str(TensorProduct(A, B)) == '|A>x|B>'\n\ndef test_TensorProduct_with_commutator():\n    A = Symbol('A', commutative=False)\n    B = Symbol('B', commutative=False)\n    C = Symbol('C', commutative=False)\n    assert tensor_product_simp(Commutator(TensorProduct(A, B), TensorProduct(C, D))) == Commutator(A*C, B*D)\n\ndef test_TensorProduct_with_anticommutator():\n    A = Symbol('A', commutative=False)\n    B = Symbol('B', commutative=False)\n    C = Symbol('C', commutative=False)\n    assert tensor_product_simp(AntiCommutator(TensorProduct(A, B), TensorProduct(C, D))) == AntiCommutator(A*C, B*D)\n\ndef test_TensorProduct_with_pow():\n    A = Symbol('A', commutative=False)\n    B = Symbol('B', commutative=False)\n    assert tensor_product_simp(TensorProduct(A, B)**2) == (A*B)**2\n\ndef test_TensorProduct_with_add():\n    A = Symbol('A', commutative=False)\n    B = Symbol('B', commutative=False)\n    C = Symbol('C', commutative=False)\n    assert tensor_product_simp(Add(TensorProduct(A, B), TensorProduct(C, D))) == A*B + C*D\n\ndef test_TensorProduct_with_scalar():\n    A = Symbol('A', commutative=False)\n    B = Symbol('B', commutative=False)\n    assert tensor_product_simp(2*TensorProduct(A, B)) == 2*(A*B)\n\ndef test_TensorProduct_with_matrix():\n    from sympy.matrices.dense import Matrix\n    m1 = Matrix([[1,2],[3,4]])\n    m2 = Matrix([[1,0],[0,1]])\n    assert TensorProduct(m1, m2) == Matrix([\n        [1, 0, 2, 0],\n        [0, 1, 0, 2],\n        [3, 0, 4, 0],\n        [0, 3, 0, 4]])\n\ndef test_TensorProduct_with_qexpr():\n    class MyQExpr(QExpr):\n        pass\n    q = MyQExpr()\n    A = Symbol('A', commutative=False)\n    assert isinstance(TensorProduct(q, A), TensorProduct)\n\ndef test_TensorProduct_with_ket_bra():\n    A = Ket('A')\n    B = Bra('B')\n    assert TensorProduct(A, B) == A*B\n\ndef test_TensorProduct_expand():\n    A = Symbol('A', commutative=False)\n    B = Symbol('B', commutative=False)\n    C = Symbol('C', commutative=False)\n    assert TensorProduct(A + B, C).expand(tensorproduct=True) == A*C + B*C\n\ndef test_TensorProduct_trace():\n    A = Symbol('A', commutative=False)\n    B = Symbol('B', commutative=False)\n    C = Symbol('C', commutative=False)\n    assert TensorProduct(A, B, C).trace() == Tr(A)*Tr(B)*Tr(C)\n    assert TensorProduct(A, B, C).trace(indices=[1]) == Tr(B)*Tr(A)*Tr(C)\n"], "sample_136": ["\nfrom sympy import (MatrixSymbol, Identity, Inverse, trace, Transpose, det, ZeroMatrix,\n                  symbols, Matrix, eye, diag, ones, zeros)\nfrom sympy.matrices.expressions.blockmatrix import ( block_collapse, bc_matmul, bc_block_plus_ident, BlockDiagMatrix, BlockMatrix, bc_dist, bc_matadd, bc_transpose, bc_inverse, blockcut, reblock_2x2, deblock)\nfrom sympy.functions import transpose\n\ndef test_block_collapse_add():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    C = BlockMatrix([[Identity(n), Z]])\n    assert block_collapse(C*B) == Matrix([[X, Z + Z*Y]])\n\ndef test_block_collapse_matmul():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    C = BlockMatrix([[Identity(n), Z]])\n    assert block_collapse(C*B) == Matrix([[X, Z + Z*Y]])\n\ndef test_block_collapse_transpose():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert block_collapse(transpose(B)) == Matrix([[Transpose(X), Transpose(Z)], [ZeroMatrix(n, m), Transpose(Y)]])\n\ndef test_block_collapse_inverse():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert block_collapse(Inverse(B)) == BlockMatrix([[Inverse(X), -Inverse(X)*Z*Inverse(Y)], [ZeroMatrix(m, n), Inverse(Y)]])\n\ndef test_block_collapse_identity():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert block_collapse(B + Identity(n+m)) == Matrix([[X + Identity(n), Z], [ZeroMatrix(m, n), Y + Identity(m)]])\n\ndef test_block_diagmatrix():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    BD = BlockDiagMatrix(X, Y)\n    assert BD.blocks == Matrix([[X, ZeroMatrix(n, m)], [ZeroMatrix(m, n), Y]])\n\ndef test_block_diagmatrix_mul():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    BD1 = BlockDiagMatrix(X, Y)\n    BD2 = BlockDiagMatrix(Y, X)\n    assert block_collapse(BD1*BD2) == BlockDiagMatrix(X*Y, Y*X)\n\ndef test_block_diagmatrix_add():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    BD1 = BlockDiagMatrix(X, Y)\n    BD2 = BlockDiagMatrix(Y, X)\n    assert block_collapse(BD1 + BD2) == BlockDiagMatrix(X + Y, Y + X)\n\ndef test_blockcut():\n    M = Matrix(4, 4, range(16))\n    B = blockcut(M, (1, 3), (1, 3))\n    assert B.blocks[0, 0] == Matrix([[0]])\n    assert B.blocks[0, 1] == Matrix([[1, 2, 3]])\n    assert B.blocks[1, 0] == Matrix([[4, 5, 6]])\n    assert B.blocks[1, 1] == Matrix([[7, 8, 9], [10, 11, 12], [13, 14, 15]])\n\ndef test_reblock_2x2():\n    M = Matrix(4, 4, range(16))\n    B = reblock_2x2(BlockMatrix([[M]]))\n    assert B.blocks[0, 0].shape == (2, 2)\n    assert B.blocks[0, 1].shape == (2, 2)\n    assert B.blocks[1, 0].shape == (2, 2)\n    assert B.blocks[1, 1].shape == (2, 2)\n\ndef test_deblock():\n    M = Matrix(4, 4, range(16))\n    B = BlockMatrix([[M]])\n    assert deblock(B) == M\n\ndef test_deblock_nested():\n    M = Matrix(4, 4, range(16))\n    B = BlockMatrix([[BlockMatrix([[M]])]])\n    assert deblock(B) == M\n\ndef test_bc_matadd():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B1 = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    B2 = BlockMatrix([[Identity(n), Z], [ZeroMatrix(m, n), Y]])\n    assert bc_matadd(B1 + B2) == BlockMatrix([[X + Identity(n), 2*Z], [ZeroMatrix(m, n), 2*Y]])\n\ndef test_bc_block_plus_ident():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B1 = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    B2 = BlockMatrix([[Identity(n), Z], [ZeroMatrix(m, n), Y]])\n    assert bc_block_plus_ident(B1 + B2) == BlockMatrix([[X + Identity(n), 2*Z], [ZeroMatrix(m, n), 2*Y]])\n\ndef test_bc_dist():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert bc_dist(2*B) == BlockMatrix([[2*X, 2*Z], [ZeroMatrix(m, n), 2*Y]])\n\ndef test_bc_matmul():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B1 = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    B2 = BlockMatrix([[Identity(n), Z], [ZeroMatrix(m, n), Y]])\n    assert bc_matmul(B1*B2) == BlockMatrix([[X*Identity(n) + Z*ZeroMatrix(m, n), X*Z + Z*Y], [ZeroMatrix(m, n)*Identity(n) + Y*ZeroMatrix(m, n), ZeroMatrix(m, n)*Z + Y*Y]])\n\ndef test_bc_transpose():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert bc_transpose(transpose(B)) == BlockMatrix([[Transpose(X), Transpose(Z)], [ZeroMatrix(n, m), Transpose(Y)]])\n\ndef test_bc_inverse():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert bc_inverse(Inverse(B)) == BlockMatrix([[Inverse(X), -Inverse(X)*Z*Inverse(Y)], [ZeroMatrix(m, n), Inverse(Y)]])\n\n"], "sample_90": ["\nfrom unittest.mock import MagicMock\n\nfrom _pytest.mark.evaluate import MarkEvaluator\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import TEST_OUTCOME\n\ndef test_MarkEvaluator_istrue_empty():\n    item = MagicMock(spec=Item)\n    mark_evaluator = MarkEvaluator(item, \"mark_name\")\n    assert not mark_evaluator.istrue()\n\ndef test_MarkEvaluator_istrue_no_marks():\n    item = MagicMock(spec=Item)\n    item.iter_markers.return_value = []\n    mark_evaluator = MarkEvaluator(item, \"mark_name\")\n    assert not mark_evaluator.istrue()\n\ndef test_MarkEvaluator_istrue_condition_true():\n    item = MagicMock(spec=Item)\n    item.iter_markers.return_value = [MagicMock(spec=Mark, kwargs={\"condition\": \"1 == 1\"})]\n    mark_evaluator = MarkEvaluator(item, \"mark_name\")\n    assert mark_evaluator.istrue()\n\ndef test_MarkEvaluator_istrue_condition_false():\n    item = MagicMock(spec=Item)\n    item.iter_markers.return_value = [MagicMock(spec=Mark, kwargs={\"condition\": \"1 == 2\"})]\n    mark_evaluator = MarkEvaluator(item, \"mark_name\")\n    assert not mark_evaluator.istrue()\n\ndef test_MarkEvaluator_istrue_multiple_conditions_one_true():\n    item = MagicMock(spec=Item)\n    item.iter_markers.return_value = [MagicMock(spec=Mark, kwargs={\"condition\": \"1 == 2\"}), MagicMock(spec=Mark, kwargs={\"condition\": \"1 == 1\"})]\n    mark_evaluator = MarkEvaluator(item, \"mark_name\")\n    assert mark_evaluator.istrue()\n\ndef test_MarkEvaluator_istrue_multiple_conditions_all_false():\n    item = MagicMock(spec=Item)\n    item.iter_markers.return_value = [MagicMock(spec=Mark, kwargs={\"condition\": \"1 == 2\"}), MagicMock(spec=Mark, kwargs={\"condition\": \"2 == 3\"})]\n    mark_evaluator = MarkEvaluator(item, \"mark_name\")\n    assert not mark_evaluator.istrue()\n\ndef test_MarkEvaluator_istrue_boolean_condition_true():\n    item = MagicMock(spec=Item)\n    item.iter_markers.return_value = [MagicMock(spec=Mark, kwargs={\"condition\": True, \"reason\": \"This is true\"})]\n    mark_evaluator = MarkEvaluator(item, \"mark_name\")\n    assert mark_evaluator.istrue()\n\ndef test_MarkEvaluator_istrue_boolean_condition_false():\n    item = MagicMock(spec=Item)\n    item.iter_markers.return_value = [MagicMock(spec=Mark, kwargs={\"condition\": False})]\n    mark_evaluator = MarkEvaluator(item, \"mark_name\")\n    assert not mark_evaluator.istrue()\n\ndef test_MarkEvaluator_istrue_boolean_condition_no_reason():\n    item = MagicMock(spec=Item)\n    item.iter_markers.return_value = [MagicMock(spec=Mark, kwargs={\"condition\": True})]\n    mark_evaluator = MarkEvaluator(item, \"mark_name\")\n    assert mark_evaluator.istrue()\n\ndef test_MarkEvaluator_istrue_raises_exception():\n    item = MagicMock(spec=Item)\n    item.iter_markers.return_value = [MagicMock(spec=Mark, kwargs={\"raises\": SyntaxError})]\n    mark_evaluator = MarkEvaluator(item, \"mark_name\")\n    try:\n        mark_evaluator.istrue()\n        assert False\n    except TEST_OUTCOME:\n        assert True\n\ndef test_MarkEvaluator_getexplanation_reason():\n    item = MagicMock(spec=Item)\n    item.iter_markers.return_value = [MagicMock(spec=Mark, kwargs={\"reason\": \"This is a reason\"})]\n    mark_evaluator = MarkEvaluator(item, \"mark_name\")\n    assert mark_evaluator.getexplanation() == \"This is a reason\"\n\ndef test_MarkEvaluator_getexplanation_no_reason():\n    item = MagicMock(spec=Item)\n    item.iter_markers.return_value = [MagicMock(spec=Mark)]\n    mark_evaluator = MarkEvaluator(item, \"mark_name\")\n    assert mark_evaluator.getexplanation() == \"\"\n\ndef test_MarkEvaluator_getexplanation_condition():\n    item = MagicMock(spec=Item)\n    item.iter_markers.return_value = [MagicMock(spec=Mark, kwargs={\"condition\": \"1 == 1\"})]\n    mark_evaluator = MarkEvaluator(item, \"mark_name\")\n    assert mark_evaluator.getexplanation() == \"condition: 1 == 1\"\n\ndef test_MarkEvaluator_get_empty_parameterset_mark():\n    item = MagicMock(spec=Item)\n    mark_evaluator = MarkEvaluator(item, \"mark_name\")\n    assert mark_evaluator.get(\"condition\") is None\n\n"], "sample_26": ["\nimport os\nimport sys\nfrom unittest import mock\nfrom unittest.mock import patch\n\nfrom django.apps import apps\nfrom django.conf import settings\nfrom django.core import serializers\nfrom django.db import router\nfrom django.db.transaction import atomic\nfrom django.db.backends.base.creation import (\n    TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n)\n\nclass TestBaseDatabaseCreation(object):\n\n    def setUp(self):\n        self.connection = mock.MagicMock()\n        self.connection.alias = 'test_alias'\n        self.connection.settings_dict = {\n            'NAME': 'test_db',\n            'TEST': {'NAME': None, 'MIGRATE': False},\n            'ENGINE': 'django.db.backends.sqlite3',\n            'HOST': 'localhost',\n            'PORT': '',\n        }\n        self.creation = BaseDatabaseCreation(self.connection)\n\n    def test_create_test_db(self):\n        with patch('django.core.management.call_command') as mock_call_command:\n            self.creation.create_test_db(verbosity=1, autoclobber=False, serialize=True, keepdb=False)\n            mock_call_command.assert_called_once_with(\n                'migrate', verbosity=0, interactive=False, database='test_alias', run_syncdb=True\n            )\n\n    def test_create_test_db_keepdb(self):\n        with patch('django.core.management.call_command') as mock_call_command:\n            self.creation.create_test_db(verbosity=1, autoclobber=False, serialize=True, keepdb=True)\n            mock_call_command.assert_called_once_with(\n                'migrate', verbosity=0, interactive=False, database='test_alias', run_syncdb=True\n            )\n\n    def test_set_as_test_mirror(self):\n        primary_settings_dict = {'NAME': 'primary_db'}\n        self.creation.set_as_test_mirror(primary_settings_dict)\n        assert self.connection.settings_dict['NAME'] == 'primary_db'\n\n    def test_serialize_db_to_string(self):\n        # Mock out the get_objects function to return a list of objects\n        with patch('django.db.backends.base.creation.get_objects', return_value=[]):\n            serialized_data = self.creation.serialize_db_to_string()\n            assert serialized_data == ''\n\n    def test_deserialize_db_from_string(self):\n        serialized_data = '[]'\n        with patch('django.db.backends.base.creation.serializers.deserialize') as mock_deserialize:\n            self.creation.deserialize_db_from_string(serialized_data)\n            mock_deserialize.assert_called_once_with('json', mock.ANY, using='test_alias')\n\n    def test__get_database_display_str(self):\n        display_str = self.creation._get_database_display_str(verbosity=1, database_name='test_db')\n        assert display_str == \"'test_alias' ('test_db')\"\n\n    def test__get_database_display_str_verbosity_2(self):\n        display_str = self.creation._get_database_display_str(verbosity=2, database_name='test_db')\n        assert display_str == \"'test_alias' ('test_db')\"\n\n    def test__get_test_db_name(self):\n        test_db_name = self.creation._get_test_db_name()\n        assert test_db_name == 'test_test_db'\n\n    def test__get_test_db_name_custom_name(self):\n        self.connection.settings_dict['TEST']['NAME'] = 'custom_test_db'\n        test_db_name = self.creation._get_test_db_name()\n        assert test_db_name == 'custom_test_db'\n\n    def test_clone_test_db(self):\n        with patch('django.db.backends.base.creation.BaseDatabaseCreation._clone_test_db') as mock_clone_test_db:\n            self.creation.clone_test_db(suffix='clone_suffix', verbosity=1, autoclobber=False, keepdb=False)\n            mock_clone_test_db.assert_called_once_with('clone_suffix', 1, False)\n\n    def test_get_test_db_clone_settings(self):\n        clone_settings = self.creation.get_test_db_clone_settings(suffix='clone_suffix')\n        assert clone_settings['NAME'] == 'test_db_clone_suffix'\n\n    def test_destroy_test_db(self):\n        with patch('django.db.backends.base.creation.BaseDatabaseCreation._destroy_test_db') as mock_destroy_test_db:\n            self.creation.destroy_test_db(old_database_name='original_db', verbosity=1, keepdb=False, suffix=None)\n            mock_destroy_test_db.assert_called_once_with('test_test_db', 1)\n\n    def test_destroy_test_db_keepdb(self):\n        with patch('django.db.backends.base.creation.BaseDatabaseCreation._destroy_test_db') as mock_destroy_test_db:\n            self.creation.destroy_test_db(old_database_name='original_db', verbosity=1, keepdb=True, suffix=None)\n            mock_destroy_test_db.assert_not_called()\n\n    def test_sql_table_creation_suffix(self):\n        suffix = self.creation.sql_table_creation_suffix()\n        assert suffix == ''\n\n    def test_test_db_signature(self):\n        signature = self.creation.test_db_signature()\n        assert signature == ('localhost', '', 'django.db.backends.sqlite3', 'test_test_db')\n\n"], "sample_104": ["\nimport unittest\nfrom unittest.mock import patch\nfrom sklearn.utils._pprint import _EstimatorPrettyPrinter, _changed_params, KeyValTuple, KeyValTupleParam\nfrom sklearn.base import BaseEstimator\nfrom sklearn.linear_model import LogisticRegression\n\nclass TestEstimatorPrettyPrinter(unittest.TestCase):\n\n    def test_changed_params(self):\n        estimator = LogisticRegression()\n        params = _changed_params(estimator)\n        self.assertEqual(params, {})\n\n        estimator.penalty = 'elasticnet'\n        params = _changed_params(estimator)\n        self.assertEqual(params, {'penalty': 'elasticnet'})\n\n    def test_key_val_tuple(self):\n        kvt = KeyValTuple(('a', 1))\n        self.assertEqual(repr(kvt), \"('a', 1)\")\n\n        kvt_param = KeyValTupleParam(('a', 1))\n        self.assertEqual(repr(kvt_param), \"('a', 1)\")\n\n    def test_format(self):\n        printer = _EstimatorPrettyPrinter()\n        estimator = LogisticRegression()\n        rep = printer.format(estimator, {}, 10, 0)\n        self.assertIn('LogisticRegression()', rep)\n\n    def test_pprint_estimator(self):\n        printer = _EstimatorPrettyPrinter()\n        estimator = LogisticRegression(penalty='l1')\n        with patch('sklearn.utils._pprint._safe_repr') as mock_safe_repr:\n            printer._pprint_estimator(estimator, None, 0, 0, {}, 0)\n            mock_safe_repr.assert_called_once()\n\n    def test_format_dict_items(self):\n        printer = _EstimatorPrettyPrinter()\n        items = {'a': 1, 'b': 2}\n        with patch('sklearn.utils._pprint._format_params_or_dict_items') as mock_format:\n            printer._format_dict_items(items, None, 0, 0, {}, 0)\n            mock_format.assert_called_once()\n\n    def test_format_params(self):\n        printer = _EstimatorPrettyPrinter()\n        items = {'a': 1, 'b': 2}\n        with patch('sklearn.utils._pprint._format_params_or_dict_items') as mock_format:\n            printer._format_params(items, None, 0, 0, {}, 0)\n            mock_format.assert_called_once()\n\n    def test_format_params_or_dict_items(self):\n        printer = _EstimatorPrettyPrinter()\n        items = {'a': 1, 'b': 2}\n        with patch('sklearn.utils._pprint._format_items') as mock_format:\n            printer._format_params_or_dict_items(items, None, 0, 0, {}, 0, is_dict=True)\n            mock_format.assert_called_once()\n\n    def test_format_items(self):\n        printer = _EstimatorPrettyPrinter()\n        items = [1, 2, 3]\n        with patch('sklearn.utils._pprint._format') as mock_format:\n            printer._format_items(items, None, 0, 0, {}, 0)\n            mock_format.assert_called()\n\n    def test_pprint_key_val_tuple(self):\n        printer = _EstimatorPrettyPrinter()\n        kvt = KeyValTuple(('a', 1))\n        with patch('sklearn.utils._pprint._format') as mock_format:\n            printer._pprint_key_val_tuple(kvt, None, 0, 0, {}, 0)\n            mock_format.assert_called_once()\n\n    def test_safe_repr_estimator(self):\n        printer = _EstimatorPrettyPrinter()\n        estimator = LogisticRegression()\n        rep, readable, recursive = _safe_repr(estimator, {}, 10, 0)\n        self.assertIn('LogisticRegression()', rep)\n\n    def test_safe_repr_dict(self):\n        printer = _EstimatorPrettyPrinter()\n        d = {'a': 1, 'b': 2}\n        rep, readable, recursive = _safe_repr(d, {}, 10, 0)\n        self.assertEqual(rep, \"{'a': 1, 'b': 2}\")\n\n    def test_safe_repr_list(self):\n        printer = _EstimatorPrettyPrinter()\n        l = [1, 2, 3]\n        rep, readable, recursive = _safe_repr(l, {}, 10, 0)\n        self.assertEqual(rep, \"[1, 2, 3]\")\n\n    def test_safe_repr_tuple(self):\n        printer = _EstimatorPrettyPrinter()\n        t = (1, 2, 3)\n        rep, readable, recursive = _safe_repr(t, {}, 10, 0)\n        self.assertEqual(rep, \"(1, 2, 3)\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_154": ["\nimport pytest\nfrom sympy import symbols, sin, cos, tan, exp, log, sqrt, pi\nfrom sympy.utilities.lambdify import lambdify, implemented_function, lambdastr\nfrom sympy.utilities.lambdify import MATH_TRANSLATIONS, MPMATH_TRANSLATIONS\nfrom sympy.utilities.lambdify import NUMPY_TRANSLATIONS, SCIPY_TRANSLATIONS\nfrom sympy.core.symbol import Dummy\n\ndef test_lambdify_basic():\n    x = symbols('x')\n    f = lambdify(x, x**2)\n    assert f(3) == 9\n\ndef test_lambdify_multiple_vars():\n    x, y = symbols('x y')\n    f = lambdify((x, y), x + y)\n    assert f(2, 3) == 5\n\ndef test_lambdify_trig():\n    x = symbols('x')\n    f = lambdify(x, sin(x))\n    assert f(pi/2) == pytest.approx(1.0)\n\ndef test_lambdify_exp():\n    x = symbols('x')\n    f = lambdify(x, exp(x))\n    assert f(1) == pytest.approx(2.71828)\n\ndef test_lambdify_log():\n    x = symbols('x')\n    f = lambdify(x, log(x))\n    assert f(1) == 0\n\ndef test_lambdify_sqrt():\n    x = symbols('x')\n    f = lambdify(x, sqrt(x))\n    assert f(4) == 2\n\ndef test_lambdify_nested():\n    x = symbols('x')\n    f = lambdify(x, sin(x**2))\n    assert f(1) == pytest.approx(0.84147)\n\ndef test_lambdify_constant():\n    f = lambdify((), pi)\n    assert f() == pi\n\ndef test_lambdify_implemented_function():\n    x = symbols('x')\n    def my_func(x):\n        return x**3\n    f = implemented_function('my_func', my_func)\n    g = lambdify(x, f(x))\n    assert g(2) == 8\n\ndef test_lambdify_dummify():\n    x = symbols('x')\n    f = lambdify(x, x + sin(x), dummify=True)\n    assert f(1) == pytest.approx(1.84147)\n\ndef test_lambdastr_basic():\n    x = symbols('x')\n    s = lambdastr(x, x**2)\n    assert eval(s) == 9\n\ndef test_lambdastr_multiple_vars():\n    x, y = symbols('x y')\n    s = lambdastr((x, y), x + y)\n    assert eval(s) == 5\n\ndef test_lambdastr_trig():\n    x = symbols('x')\n    s = lambdastr(x, sin(x))\n    assert eval(s) == pytest.approx(1.0)\n\ndef test_lambdastr_nested():\n    x = symbols('x')\n    s = lambdastr(x, sin(x**2))\n    assert eval(s) == pytest.approx(0.84147)\n\ndef test_lambdastr_constant():\n    s = lambdastr((), pi)\n    assert eval(s) == pi\n\ndef test_lambdastr_dummify():\n    x = symbols('x')\n    s = lambdastr(x, x + sin(x), dummify=True)\n    assert eval(s) == pytest.approx(1.84147)\n\ndef test_lambdastr_tuple_arg():\n    x, y = symbols('x y')\n    s = lambdastr((x, (y,)), [y, x])\n    assert eval(s) == [2, 1]\n\ndef test_lambdastr_complex_arg():\n    x, y = symbols('x y')\n    s = lambdastr((x, (y,)), [y, x])\n    assert eval(s) == [2, 1]\n\ndef test_lambdify_modules():\n    x = symbols('x')\n    f = lambdify(x, sin(x), modules='numpy')\n    assert f(pi/2) == pytest.approx(1.0)\n\ndef test_lambdify_modules_math():\n    x = symbols('x')\n    f = lambdify(x, sin(x), modules='math')\n    assert f(pi/2) == pytest.approx(1.0)\n\ndef test_lambdify_modules_mpmath():\n    x = symbols('x')\n    f = lambdify(x, sin(x), modules='mpmath')\n    assert f(pi/2) == pytest.approx(1.0)\n\ndef test_lambdify_modules_scipy():\n    x = symbols('x')\n    f = lambdify(x, sin(x), modules='scipy.special')\n    assert f(pi/2) == pytest.approx(1.0)\n\ndef test_lambdify_modules_tensorflow():\n    x = symbols('x')\n    f = lambdify(x, x**2, modules='tensorflow')\n    assert f(3) == 9\n\ndef test_lambdify_cse():\n    x = symbols('x')\n    f = lambdify(x, 2*x + 2*x, cse=True)\n    assert f(3) == 12\n\ndef test_lambdify_cse_multiple_vars():\n    x, y = symbols('x y')\n    f = lambdify((x, y), x*y + x*y, cse=True)\n    assert f(2, 3) == 12\n\ndef test_lambdify_cse_complex():\n    x, y = symbols('x y')\n    f = lambdify((x, y), x**2 + y**2 + 2*x*y, cse=True)\n    assert f(2, 3) == 25\n\ndef test_lambdify_dummify_complex():\n    x, y = symbols('x y')\n    f = lambdify((x, y), x*sin(y) + y*cos(x), dummify=True)\n    assert f(1, 2) == pytest.approx(1.90929)\n\ndef test_lambdify_dummify_nested():\n    x = symbols('x')\n    f = lambdify(x, sin(x*cos(x)), dummify=True)\n    assert f(1) == pytest.approx(0.84147)\n\ndef test_lambdify_dummify_multiple_vars():\n    x, y = symbols('x y')\n    f = lambdify((x, y), x*sin(y) + y*cos(x), dummify=True)\n    assert f(1, 2) == pytest.approx(1.90929)\n\ndef test_lambdify_dummify_tuple_arg():\n    x, y = symbols('x y')\n    f = lambdify((x, (y,)), [y, x], dummify=True)\n    assert f(1, 2) == [2, 1]\n\ndef test_lambdify_dummify_complex_arg():\n    x, y = symbols('x y')\n    f = lambdify((x, (y,)), [y, x], dummify=True)\n    assert f(1, 2) == [2, 1]\n\ndef test_lambdify_dummify_nested_functions():\n    x = symbols('x')\n    f = lambdify(x, sin(x*cos(x)), dummify=True)\n    assert f(1) == pytest.approx(0.84147)\n\ndef test_lambdify_dummify_multiple_nested_functions():\n    x, y = symbols('x y')\n    f = lambdify((x, y), x*sin(y*cos(x)) + y*cos(x*sin(y)), dummify=True)\n    assert f(1, 2) == pytest.approx(1.90929)\n\ndef test_lambdify_dummify_with_constants():\n    x = symbols('x')\n    f = lambdify(x, x*sin(pi/2) + 1, dummify=True)\n    assert f(1) == 2\n\ndef test_lambdify_dummify_with_constants_and_functions():\n    x = symbols('x')\n    f = lambdify(x, x*sin(pi/2) + cos(x), dummify=True)\n    assert f(1) == pytest.approx(1.54030)\n\ndef test_lambdify_dummify_with_constants_and_multiple_functions():\n    x, y = symbols('x y')\n    f = lambdify((x, y), x*sin(pi/2) + y*cos(x) + sin(y), dummify=True)\n    assert f(1, 2) == pytest.approx(2.90929)\n\ndef test_lambdify_dummify_with_constants_and_nested_functions():\n    x = symbols('x')\n    f = lambdify(x, sin(x*cos(pi/2)) + 1, dummify=True)\n    assert f(1) == pytest.approx(2)\n\ndef test_lambdify_dummify_with_constants_and_multiple_nested_functions():\n    x, y = symbols('x y')\n    f = lambdify((x, y), x*sin(y*cos(pi/2)) + y*cos(x*sin(pi/2)), dummify=True)\n    assert f(1, 2) == pytest.approx(2.41421)\n\ndef test_lambdify_dummify_with_constants_and_complex_expressions():\n    x, y = symbols('x y')\n    f = lambdify((x, y), x*sin(y*cos(pi/2)) + y*cos(x*sin(pi/2)) + 2*x + 3*y, dummify=True)\n    assert f(1, 2) == pytest.approx(5.41421)\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(pi/2)) + y*cos(z*sin(pi/2)) + 2*x + 3*y + 4*z, dummify=True)\n    assert f(1, 2, 3) == pytest.approx(13.41421)\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables_and_nested_functions():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(z*sin(pi/2))) + y*cos(z*sin(x*sin(pi/2))) + 2*x + 3*y + 4*z, dummify=True)\n    assert f(1, 2, 3) == pytest.approx(13.41421)\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables_and_nested_functions_and_complex_expressions():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(z*sin(pi/2))) + y*cos(z*sin(x*sin(pi/2))) + 2*x + 3*y + 4*z + 5*x*y*z, dummify=True)\n    assert f(1, 2, 3) == pytest.approx(37.41421)\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables_and_nested_functions_and_complex_expressions_and_special_functions():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(z*sin(pi/2))) + y*cos(z*sin(x*sin(pi/2))) + 2*x + 3*y + 4*z + 5*x*y*z + exp(x*y*z), dummify=True)\n    assert f(1, 2, 3) == pytest.approx(37.41421 + exp(6))\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables_and_nested_functions_and_complex_expressions_and_special_functions_and_logarithms():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(z*sin(pi/2))) + y*cos(z*sin(x*sin(pi/2))) + 2*x + 3*y + 4*z + 5*x*y*z + exp(x*y*z) + log(x*y*z), dummify=True)\n    assert f(1, 2, 3) == pytest.approx(37.41421 + exp(6) + log(6))\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables_and_nested_functions_and_complex_expressions_and_special_functions_and_logarithms_and_trig_functions():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(z*sin(pi/2))) + y*cos(z*sin(x*sin(pi/2))) + 2*x + 3*y + 4*z + 5*x*y*z + exp(x*y*z) + log(x*y*z) + tan(x*y*z), dummify=True)\n    assert f(1, 2, 3) == pytest.approx(37.41421 + exp(6) + log(6) + tan(6))\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables_and_nested_functions_and_complex_expressions_and_special_functions_and_logarithms_and_trig_functions_and_power_functions():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(z*sin(pi/2))) + y*cos(z*sin(x*sin(pi/2))) + 2*x + 3*y + 4*z + 5*x*y*z + exp(x*y*z) + log(x*y*z) + tan(x*y*z) + x**y, dummify=True)\n    assert f(1, 2, 3) == pytest.approx(37.41421 + exp(6) + log(6) + tan(6) + 1)\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables_and_nested_functions_and_complex_expressions_and_special_functions_and_logarithms_and_trig_functions_and_power_functions_and_factorial_functions():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(z*sin(pi/2))) + y*cos(z*sin(x*sin(pi/2))) + 2*x + 3*y + 4*z + 5*x*y*z + exp(x*y*z) + log(x*y*z) + tan(x*y*z) + x**y + factorial(x), dummify=True)\n    assert f(1, 2, 3) == pytest.approx(37.41421 + exp(6) + log(6) + tan(6) + 1 + factorial(1))\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables_and_nested_functions_and_complex_expressions_and_special_functions_and_logarithms_and_trig_functions_and_power_functions_and_factorial_functions_and_floor_functions():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(z*sin(pi/2))) + y*cos(z*sin(x*sin(pi/2))) + 2*x + 3*y + 4*z + 5*x*y*z + exp(x*y*z) + log(x*y*z) + tan(x*y*z) + x**y + factorial(x) + floor(x), dummify=True)\n    assert f(1, 2, 3) == pytest.approx(37.41421 + exp(6) + log(6) + tan(6) + 1 + factorial(1) + 1)\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables_and_nested_functions_and_complex_expressions_and_special_functions_and_logarithms_and_trig_functions_and_power_functions_and_factorial_functions_and_floor_functions_and_ceiling_functions():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(z*sin(pi/2))) + y*cos(z*sin(x*sin(pi/2))) + 2*x + 3*y + 4*z + 5*x*y*z + exp(x*y*z) + log(x*y*z) + tan(x*y*z) + x**y + factorial(x) + floor(x) + ceiling(x), dummify=True)\n    assert f(1, 2, 3) == pytest.approx(37.41421 + exp(6) + log(6) + tan(6) + 1 + factorial(1) + 1 + 1)\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables_and_nested_functions_and_complex_expressions_and_special_functions_and_logarithms_and_trig_functions_and_power_functions_and_factorial_functions_and_floor_functions_and_ceiling_functions_and_abs_functions():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(z*sin(pi/2))) + y*cos(z*sin(x*sin(pi/2))) + 2*x + 3*y + 4*z + 5*x*y*z + exp(x*y*z) + log(x*y*z) + tan(x*y*z) + x**y + factorial(x) + floor(x) + ceiling(x) + abs(x), dummify=True)\n    assert f(1, 2, 3) == pytest.approx(37.41421 + exp(6) + log(6) + tan(6) + 1 + factorial(1) + 1 + 1 + 1)\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables_and_nested_functions_and_complex_expressions_and_special_functions_and_logarithms_and_trig_functions_and_power_functions_and_factorial_functions_and_floor_functions_and_ceiling_functions_and_abs_functions_and_sqrt_functions():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(z*sin(pi/2))) + y*cos(z*sin(x*sin(pi/2))) + 2*x + 3*y + 4*z + 5*x*y*z + exp(x*y*z) + log(x*y*z) + tan(x*y*z) + x**y + factorial(x) + floor(x) + ceiling(x) + abs(x) + sqrt(x), dummify=True)\n    assert f(1, 2, 3) == pytest.approx(37.41421 + exp(6) + log(6) + tan(6) + 1 + factorial(1) + 1 + 1 + 1 + 1)\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables_and_nested_functions_and_complex_expressions_and_special_functions_and_logarithms_and_trig_functions_and_power_functions_and_factorial_functions_and_floor_functions_and_ceiling_functions_and_abs_functions_and_sqrt_functions_and_mod_functions():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(z*sin(pi/2))) + y*cos(z*sin(x*sin(pi/2))) + 2*x + 3*y + 4*z + 5*x*y*z + exp(x*y*z) + log(x*y*z) + tan(x*y*z) + x**y + factorial(x) + floor(x) + ceiling(x) + abs(x) + sqrt(x) + mod(x, 2), dummify=True)\n    assert f(1, 2, 3) == pytest.approx(37.41421 + exp(6) + log(6) + tan(6) + 1 + factorial(1) + 1 + 1 + 1 + 1 + 1)\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables_and_nested_functions_and_complex_expressions_and_special_functions_and_logarithms_and_trig_functions_and_power_functions_and_factorial_functions_and_floor_functions_and_ceiling_functions_and_abs_functions_and_sqrt_functions_and_mod_functions_and_binomial_functions():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(z*sin(pi/2))) + y*cos(z*sin(x*sin(pi/2))) + 2*x + 3*y + 4*z + 5*x*y*z + exp(x*y*z) + log(x*y*z) + tan(x*y*z) + x**y + factorial(x) + floor(x) + ceiling(x) + abs(x) + sqrt(x) + mod(x, 2) + binomial(x, y), dummify=True)\n    assert f(1, 2, 3) == pytest.approx(37.41421 + exp(6) + log(6) + tan(6) + 1 + factorial(1) + 1 + 1 + 1 + 1 + 1 + 1)\n\ndef test_lambdify_dummify_with_constants_and_multiple_variables_and_nested_functions_and_complex_expressions_and_special_functions_and_logarithms_and_trig_functions_and_power_functions_and_factorial_functions_and_floor_functions_and_ceiling_functions_and_abs_functions_and_sqrt_functions_and_mod_functions_and_binomial_functions_and_gamma_functions():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), x*sin(y*cos(z*sin(pi/2))) + y*cos(z*sin(x*sin(pi/2))) + 2*x + 3*y + 4*z + 5*x*y*z + exp(x*y*z) + log(x*y*z) + tan(x*y*z) + x**y + factorial(x) + floor(x) + ceiling(x) + abs(x) + sqrt(x) + mod(x, 2) + binomial(x, y) + gamma(x), dummify=True)\n    assert f(1, 2, 3) == pytest.approx(37.41421 + exp(6) + log(6) + tan(6) + 1 + factorial(1) + 1 + 1 + 1 + 1 + 1 + 1 + 1)\n\n\n\n"], "sample_45": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.utils.decorators import (\n    classonlymethod,\n    _update_method_wrapper,\n    _multi_decorate,\n    method_decorator,\n    decorator_from_middleware_with_args,\n    decorator_from_middleware,\n    make_middleware_decorator,\n    sync_and_async_middleware,\n    sync_only_middleware,\n    async_only_middleware,\n)\nfrom django.http import HttpRequest\n\n\nclass TestDecorators(unittest.TestCase):\n\n    def test_classonlymethod(self):\n        class MyClass:\n            @classonlymethod\n            def my_method(cls):\n                return \"Class method\"\n\n        self.assertEqual(MyClass.my_method(), \"Class method\")\n        with self.assertRaises(AttributeError):\n            MyClass().my_method()\n\n    def test__update_method_wrapper(self):\n        def decorator(func):\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs) + \" decorated\"\n            return wrapper\n        \n        def my_func(x):\n            return x\n\n        _update_method_wrapper(my_func, decorator)\n        self.assertEqual(my_func(5), \"5 decorated\")\n\n    def test__multi_decorate(self):\n        def decorator1(func):\n            def wrapper(*args, **kwargs):\n                return \"decorator1 \" + func(*args, **kwargs)\n            return wrapper\n        def decorator2(func):\n            def wrapper(*args, **kwargs):\n                return \"decorator2 \" + func(*args, **kwargs)\n            return wrapper\n\n        @ _multi_decorate([decorator1, decorator2],)\n        def my_func(x):\n            return str(x)\n\n        self.assertEqual(my_func(5), \"decorator2 decorator1 5\")\n\n    def test_method_decorator(self):\n        def decorator(func):\n            def wrapper(*args, **kwargs):\n                return \"decorated \" + func(*args, **kwargs)\n            return wrapper\n\n        class MyClass:\n            @method_decorator(decorator)\n            def my_method(self, x):\n                return str(x)\n\n        obj = MyClass()\n        self.assertEqual(obj.my_method(5), \"decorated 5\")\n\n    def test_method_decorator_class(self):\n        def decorator(func):\n            def wrapper(*args, **kwargs):\n                return \"decorated \" + func(*args, **kwargs)\n            return wrapper\n\n        @method_decorator(decorator, name='my_method')\n        class MyClass:\n            def my_method(self, x):\n                return str(x)\n\n        obj = MyClass()\n        self.assertEqual(obj.my_method(5), \"decorated 5\")\n\n    def test_decorator_from_middleware_with_args(self):\n        class Middleware:\n            def __init__(self, view_func, arg1, arg2):\n                self.view_func = view_func\n                self.arg1 = arg1\n                self.arg2 = arg2\n\n            def __call__(self, request):\n                return self.view_func(request)\n\n        decorator = decorator_from_middleware_with_args(Middleware)\n        @decorator(1, 2)\n        def my_view(request):\n            return \"view\"\n\n        request = HttpRequest()\n        response = my_view(request)\n        self.assertEqual(response, \"view\")\n\n    def test_decorator_from_middleware(self):\n        class Middleware:\n            def __init__(self, view_func):\n                self.view_func = view_func\n\n            def __call__(self, request):\n                return self.view_func(request)\n\n        decorator = decorator_from_middleware(Middleware)\n        @decorator\n        def my_view(request):\n            return \"view\"\n\n        request = HttpRequest()\n        response = my_view(request)\n        self.assertEqual(response, \"view\")\n\n    def test_make_middleware_decorator(self):\n        class Middleware:\n            def __init__(self, view_func):\n                self.view_func = view_func\n\n            def __call__(self, request):\n                return self.view_func(request)\n\n        decorator = make_middleware_decorator(Middleware)\n        @decorator()\n        def my_view(request):\n            return \"view\"\n\n        request = HttpRequest()\n        response = my_view(request)\n        self.assertEqual(response, \"view\")\n\n    def test_sync_and_async_middleware(self):\n        @sync_and_async_middleware\n        def middleware_factory(view_func):\n            return MagicMock()\n\n        self.assertTrue(middleware_factory.sync_capable)\n        self.assertTrue(middleware_factory.async_capable)\n\n    def test_sync_only_middleware(self):\n        @sync_only_middleware\n        def middleware_factory(view_func):\n            return MagicMock()\n\n        self.assertTrue(middleware_factory.sync_capable)\n        self.assertFalse(middleware_factory.async_capable)\n\n    def test_async_only_middleware(self):\n        @async_only_middleware\n        def middleware_factory(view_func):\n            return MagicMock()\n\n        self.assertFalse(middleware_factory.sync_capable)\n        self.assertTrue(middleware_factory.async_capable)\n\n"], "sample_134": ["\nimport sympy\nfrom sympy.printing.pycode import (\n    PythonCodePrinter,\n    NumPyPrinter,\n    SciPyPrinter,\n    MpmathPrinter,\n)\nfrom sympy.abc import x, y, z, t\nfrom sympy import (\n    sin, cos, tan, cot, sec, csc,\n    exp, log, sqrt, pi, E, I,\n    Matrix,\n    Piecewise,\n    Eq,\n    Function,\n    S,\n    Sum,\n    Integral,\n    Derivative,\n    factorial,\n    gamma,\n    LambertW,\n    erf,\n    erfc,\n    besselj,\n    bessely,\n    besseli,\n    besselk,\n    sign,\n    re,\n    im,\n    arg,\n    conjugate,\n    Abs,\n    floor,\n    ceiling,\n    acos,\n    asin,\n    atan,\n    atan2,\n    acosh,\n    asinh,\n    atanh,\n    sinh,\n    cosh,\n    tanh,\n    sech,\n    csch,\n    coth,\n    \n)\n\ndef test_python_code_printer_basic():\n    assert PythonCodePrinter().doprint(x + y) == 'x + y'\n    assert PythonCodePrinter().doprint(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert PythonCodePrinter().doprint(sin(x)) == 'sin(x)'\n    assert PythonCodePrinter().doprint(exp(x)) == 'exp(x)'\n    assert PythonCodePrinter().doprint(log(x)) == 'log(x)'\n    assert PythonCodePrinter().doprint(sqrt(x)) == 'sqrt(x)'\n    assert PythonCodePrinter().doprint(pi) == 'pi'\n    assert PythonCodePrinter().doprint(E) == 'E'\n    assert PythonCodePrinter().doprint(I) == 'I'\n\ndef test_python_code_printer_matrix():\n    M = Matrix([[1, 2], [3, 4]])\n    assert PythonCodePrinter().doprint(M) == 'Matrix([[1, 2], [3, 4]])'\n\ndef test_python_code_printer_piecewise():\n    pw = Piecewise((x, x < 0), (x**2, x >= 0))\n    assert PythonCodePrinter().doprint(pw) == 'Piecewise((x, x < 0), (x**2, x >= 0))'\n\ndef test_python_code_printer_function():\n    f = Function('f')(x)\n    assert PythonCodePrinter().doprint(f) == 'f(x)'\n\ndef test_numpy_printer_basic():\n    assert NumPyPrinter().doprint(x + y) == 'x + y'\n    assert NumPyPrinter().doprint(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert NumPyPrinter().doprint(sin(x)) == 'numpy.sin(x)'\n    assert NumPyPrinter().doprint(exp(x)) == 'numpy.exp(x)'\n    assert NumPyPrinter().doprint(log(x)) == 'numpy.log(x)'\n    assert NumPyPrinter().doprint(sqrt(x)) == 'numpy.sqrt(x)'\n    assert NumPyPrinter().doprint(pi) == 'numpy.pi'\n    assert NumPyPrinter().doprint(E) == 'numpy.e'\n\ndef test_numpy_printer_matrix():\n    M = Matrix([[1, 2], [3, 4]])\n    assert NumPyPrinter().doprint(M) == 'numpy.array([[1, 2], [3, 4]])'\n\ndef test_numpy_printer_piecewise():\n    pw = Piecewise((x, x < 0), (x**2, x >= 0))\n    assert NumPyPrinter().doprint(pw) == 'numpy.select([x < 0, x >= 0], [x, x**2], default=numpy.nan)'\n\ndef test_scipy_printer_basic():\n    assert SciPyPrinter().doprint(x + y) == 'x + y'\n    assert SciPyPrinter().doprint(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert SciPyPrinter().doprint(sin(x)) == 'numpy.sin(x)'\n    assert SciPyPrinter().doprint(exp(x)) == 'numpy.exp(x)'\n    assert SciPyPrinter().doprint(log(x)) == 'numpy.log(x)'\n    assert SciPyPrinter().doprint(sqrt(x)) == 'numpy.sqrt(x)'\n    assert SciPyPrinter().doprint(pi) == 'numpy.pi'\n    assert SciPyPrinter().doprint(E) == 'numpy.e'\n    assert SciPyPrinter().doprint(erf(x)) == 'scipy.special.erf(x)'\n    assert SciPyPrinter().doprint(gamma(x)) == 'scipy.special.gamma(x)'\n\ndef test_scipy_printer_matrix():\n    M = Matrix([[1, 2], [3, 4]])\n    assert SciPyPrinter().doprint(M) == 'numpy.array([[1, 2], [3, 4]])'\n\ndef test_scipy_printer_piecewise():\n    pw = Piecewise((x, x < 0), (x**2, x >= 0))\n    assert SciPyPrinter().doprint(pw) == 'numpy.select([x < 0, x >= 0], [x, x**2], default=numpy.nan)'\n\ndef test_mpmath_printer_basic():\n    assert MpmathPrinter().doprint(x + y) == 'x + y'\n    assert MpmathPrinter().doprint(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert MpmathPrinter().doprint(sin(x)) == 'mpmath.sin(x)'\n    assert MpmathPrinter().doprint(exp(x)) == 'mpmath.exp(x)'\n    assert MpmathPrinter().doprint(log(x)) == 'mpmath.log(x)'\n    assert MpmathPrinter().doprint(sqrt(x)) == 'mpmath.sqrt(x)'\n    assert MpmathPrinter().doprint(pi) == 'mpmath.pi'\n    assert MpmathPrinter().doprint(E) == 'mpmath.e'\n    assert MpmathPrinter().doprint(S(1)/2) == 'mpmath.mpf(1)/2'\n\ndef test_mpmath_printer_matrix():\n    M = Matrix([[1, 2], [3, 4]])\n    assert MpmathPrinter().doprint(M) == 'Matrix([[mpmath.mpf(1), mpmath.mpf(2)], [mpmath.mpf(3), mpmath.mpf(4)]])'\n\ndef test_mpmath_printer_piecewise():\n    pw = Piecewise((x, x < 0), (x**2, x >= 0))\n    assert MpmathPrinter().doprint(pw) == 'Piecewise((x, x < 0), (x**2, x >= 0))'\n\n\n\n"], "sample_92": ["\nfrom _pytest.skipping import evaluate_skip_marks\nfrom _pytest.skipping import evaluate_xfail_marks\nfrom _pytest.skipping import pytest_runtest_setup\nfrom _pytest.skipping import pytest_runtest_call\nfrom _pytest.skipping import pytest_report_teststatus\nfrom _pytest.skipping import pytest_runtest_makereport\nfrom _pytest.nodes import Item\nfrom _pytest.config import Config\nfrom _pytest.outcomes import Skip\nfrom _pytest.outcomes import Xfail\nfrom _pytest.compat import TYPE_CHECKING\nif TYPE_CHECKING:\n    from typing import Type\n\ndef test_evaluate_skip_marks_empty():\n    item = Item.from_parent(None, None)\n    assert evaluate_skip_marks(item) is None\n\ndef test_evaluate_skip_marks_skip():\n    item = Item.from_parent(None, None)\n    item._nodeid = \"test_skip\"\n    item.iter_markers = lambda name: [Skip(\"reason\")] if name == \"skip\" else []\n    assert evaluate_skip_marks(item).reason == \"reason\"\n\ndef test_evaluate_skip_marks_skipif_true():\n    item = Item.from_parent(None, None)\n    item._nodeid = \"test_skipif_true\"\n    item.iter_markers = lambda name: [Skip(\"reason\")] if name == \"skipif\" else []\n    assert evaluate_skip_marks(item).reason == \"reason\"\n\ndef test_evaluate_skip_marks_skipif_false():\n    item = Item.from_parent(None, None)\n    item._nodeid = \"test_skipif_false\"\n    item.iter_markers = lambda name: [Skip(\"reason\")] if name == \"skipif\" else []\n    assert evaluate_skip_marks(item) is None\n\ndef test_evaluate_xfail_marks_empty():\n    item = Item.from_parent(None, None)\n    assert evaluate_xfail_marks(item) is None\n\ndef test_evaluate_xfail_marks_xfail():\n    item = Item.from_parent(None, None)\n    item._nodeid = \"test_xfail\"\n    item.iter_markers = lambda name: [Xfail(\"reason\", True, False, None)] if name == \"xfail\" else []\n    assert evaluate_xfail_marks(item).reason == \"reason\"\n\ndef test_pytest_runtest_setup_skip():\n    item = Item.from_parent(None, None)\n    item._nodeid = \"test_skip\"\n    item.iter_markers = lambda name: [Skip(\"reason\")] if name == \"skip\" else []\n    pytest_runtest_setup(item)\n    assert item._store[skipped_by_mark_key] is True\n\ndef test_pytest_runtest_setup_xfail():\n    item = Item.from_parent(None, None)\n    item._nodeid = \"test_xfail\"\n    item.iter_markers = lambda name: [Xfail(\"reason\", True, False, None)] if name == \"xfail\" else []\n    pytest_runtest_setup(item)\n    assert item._store[xfailed_key].reason == \"reason\"\n\ndef test_pytest_runtest_call_xfail():\n    item = Item.from_parent(None, None)\n    item._nodeid = \"test_xfail\"\n    item.iter_markers = lambda name: [Xfail(\"reason\", True, False, None)] if name == \"xfail\" else []\n    item._store[xfailed_key] = None\n    def fake_yield():\n      yield\n    pytest_runtest_call(item)\n    assert item._store[xfailed_key].reason == \"reason\"\n\ndef test_pytest_report_teststatus_xfailed():\n    report = BaseReport(when=\"call\", outcome=\"skipped\", wasxfail=\"reason\")\n    status = pytest_report_teststatus(report)\n    assert status == (\"xfailed\", \"x\", \"XFAIL\")\n\ndef test_pytest_report_teststatus_xpassed():\n    report = BaseReport(when=\"call\", outcome=\"passed\", wasxfail=\"reason\")\n    status = pytest_report_teststatus(report)\n    assert status == (\"xpassed\", \"X\", \"XPASS\")\n\ndef test_pytest_report_teststatus_other():\n    report = BaseReport(when=\"call\", outcome=\"failed\")\n    status = pytest_report_teststatus(report)\n    assert status is None\n\ndef test_pytest_runtest_makereport_unexpectedsuccess():\n    item = Item.from_parent(None, None)\n    item._nodeid = \"test_unexpectedsuccess\"\n    call = CallInfo(None, None, None)\n    item._store[unexpectedsuccess_key] = \"reason\"\n    def fake_yield():\n      yield\n    pytest_runtest_makereport(item, call)\n    assert item._store[unexpectedsuccess_key] == \"reason\"\n\ndef test_pytest_runtest_makereport_xfail():\n    item = Item.from_parent(None, None)\n    item._nodeid = \"test_xfail\"\n    call = CallInfo(None, None, None)\n    item._store[xfailed_key] = Xfail(\"reason\", True, False, None)\n    def fake_yield():\n      yield\n    pytest_runtest_makereport(item, call)\n    assert item._store[xfailed_key].reason == \"reason\"\n\ndef test_evaluate_condition_string():\n    item = Item.from_parent(None, None)\n    mark = Mark(\"skipif\", {\"condition\": \"sys.platform == 'win32'\"})\n    result, reason = evaluate_condition(item, mark, \"sys.platform == 'win32'\")\n    assert result is True\n    assert reason == \"condition: sys.platform == 'win32'\"\n\ndef test_evaluate_condition_boolean():\n    item = Item.from_parent(None, None)\n    mark = Mark(\"skipif\", {\"condition\": True})\n    result, reason = evaluate_condition(item, mark, True)\n    assert result is True\n    assert reason == \"condition: True\"\n\ndef test_evaluate_condition_error():\n    item = Item.from_parent(None, None)\n    mark = Mark(\"skipif\", {\"condition\": \"invalid syntax\"})\n    with pytest.raises(SyntaxError):\n        evaluate_condition(item, mark, \"invalid syntax\")\n\n"], "sample_72": ["\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.figure import Figure\nfrom matplotlib.axes import Axes\nfrom matplotlib.patches import Rectangle\n\ndef test_Figure_init():\n    fig = Figure()\n    assert fig.dpi == plt.rcParams['figure.dpi']\n    assert fig.figsize == plt.rcParams['figure.figsize']\n    assert fig.canvas is None\n\ndef test_Figure_add_axes():\n    fig = Figure()\n    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n    assert isinstance(ax, Axes)\n    assert ax.figure is fig\n\ndef test_Figure_add_subplot():\n    fig = Figure()\n    ax = fig.add_subplot(111)\n    assert isinstance(ax, Axes)\n    assert ax.figure is fig\n\ndef test_Figure_subplots():\n    fig, axes = plt.subplots(2, 2)\n    assert isinstance(fig, Figure)\n    assert len(axes) == 4\n    for ax in axes:\n        assert isinstance(ax, Axes)\n        assert ax.figure is fig\n\ndef test_Figure_delaxes():\n    fig = Figure()\n    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n    fig.delaxes(ax)\n    assert len(fig.axes) == 0\n\ndef test_Figure_clear():\n    fig = Figure()\n    fig.add_axes([0.1, 0.1, 0.8, 0.8])\n    fig.clear()\n    assert len(fig.axes) == 0\n\ndef test_Figure_savefig():\n    fig = Figure()\n    fig.savefig('test.png')\n\ndef test_Figure_set_size_inches():\n    fig = Figure()\n    fig.set_size_inches(10, 5)\n    assert fig.get_size_inches() == (10, 5)\n\ndef test_Figure_get_size_inches():\n    fig = Figure()\n    assert fig.get_size_inches() == plt.rcParams['figure.figsize']\n\ndef test_Figure_set_dpi():\n    fig = Figure()\n    fig.set_dpi(100)\n    assert fig.dpi == 100\n\ndef test_Figure_get_dpi():\n    fig = Figure()\n    assert fig.get_dpi() == plt.rcParams['figure.dpi']\n\ndef test_Figure_set_figwidth():\n    fig = Figure()\n    fig.set_figwidth(10)\n    assert fig.get_size_inches()[0] == 10\n\ndef test_Figure_set_figheight():\n    fig = Figure()\n    fig.set_figheight(5)\n    assert fig.get_size_inches()[1] == 5\n\ndef test_Figure_tight_layout():\n    fig, ax = plt.subplots()\n    ax.set_xlabel('X Label')\n    ax.set_ylabel('Y Label')\n    fig.tight_layout()\n\ndef test_Figure_ginput():\n    fig, ax = plt.subplots()\n    clicks = fig.ginput(3)\n    assert len(clicks) == 3\n\ndef test_Figure_waitforbuttonpress():\n    fig, ax = plt.subplots()\n    pressed = fig.waitforbuttonpress()\n    assert isinstance(pressed, bool)\n\ndef test_Figure_get_layout_engine():\n    fig = Figure()\n    engine = fig.get_layout_engine()\n    assert engine is None\n\ndef test_Figure_set_layout_engine():\n    fig = Figure()\n    engine = fig.get_layout_engine()\n    assert engine is None\n\ndef test_Figure_add_artist():\n    fig = Figure()\n    rect = Rectangle((0, 0), 1, 1)\n    fig.add_artist(rect)\n    assert rect in fig.artists\n\ndef test_Figure_draw():\n    fig = Figure()\n    fig.draw(renderer=None)\n\ndef test_Figure_draw_artist():\n    fig = Figure()\n    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n    line = ax.plot([1, 2, 3], [4, 5, 6])[0]\n    fig.draw_artist(line)\n\ndef test_Figure_add_axobserver():\n    fig = Figure()\n    def func(self):\n        pass\n    fig.add_axobserver(func)\n\ndef test_Figure_figaspect():\n    w, h = figaspect(2.)\n    assert w / h == 2.\n\ndef test_Figure_figaspect_array():\n    A = np.random.rand(5, 3)\n    w, h = figaspect(A)\n    assert w / h == 3 / 5.\n\n"], "sample_86": ["\nfrom unittest.mock import MagicMock, patch\nfrom _pytest.junitxml import LogXML, mangle_test_address, bin_xml_escape\nfrom _pytest.junitxml import record_property, record_xml_attribute\nfrom _pytest.junitxml import record_testsuite_property\nfrom _pytest import junitxml\n\nimport pytest\nimport os\nimport py\n\ndef test_mangle_test_address():\n    assert mangle_test_address(\"test_function\") == [\"test_function\"]\n    assert mangle_test_address(\"test_class::test_function\") == [\n        \"test_class\",\n        \"test_function\",\n    ]\n    assert mangle_test_address(\"test_class::test_function[param1]\") == [\n        \"test_class\",\n        \"test_function[param1]\",\n    ]\n    assert mangle_test_address(\"path.to.module::test_class::test_function\") == [\n        \"path.to.module.test_class\",\n        \"test_function\",\n    ]\n\ndef test_bin_xml_escape():\n    assert bin_xml_escape(\"<hello>\") == \"&lt;hello&gt;\"\n    assert bin_xml_escape('\"') == \"&quot;\"\n    assert bin_xml_escape(\"'\") == \"&#x27;\"\n    assert bin_xml_escape(\"&\") == \"&amp;\"\n\ndef test_LogXML_init():\n    logxml = LogXML(\"test.xml\", \"prefix\", \"suite_name\")\n    assert logxml.logfile == os.path.abspath(\"test.xml\")\n    assert logxml.prefix == \"prefix\"\n    assert logxml.suite_name == \"suite_name\"\n\ndef test_LogXML_finalize():\n    logxml = LogXML(\"test.xml\", \"prefix\", \"suite_name\")\n    report = MagicMock()\n    report.nodeid = \"test_nodeid\"\n    logxml.node_reporters[(\"test_nodeid\", None)] = MagicMock()\n    logxml.finalize(report)\n    assert (\"test_nodeid\", None) not in logxml.node_reporters\n\ndef test_LogXML_node_reporter():\n    logxml = LogXML(\"test.xml\", \"prefix\", \"suite_name\")\n    report = MagicMock()\n    report.nodeid = \"test_nodeid\"\n    reporter = logxml.node_reporter(report)\n    assert reporter in logxml.node_reporters.values()\n\ndef test_LogXML_add_stats():\n    logxml = LogXML(\"test.xml\", \"prefix\", \"suite_name\")\n    logxml.add_stats(\"passed\")\n    assert logxml.stats[\"passed\"] == 1\n\ndef test_record_property():\n    with pytest.raises(TypeError):\n        record_property(\"test_fixture\", 1)\n\ndef test_record_xml_attribute():\n    with pytest.raises(PytestExperimentalApiWarning):\n        record_xml_attribute(\"test_fixture\", 1)\n\ndef test_record_testsuite_property():\n    with pytest.raises(TypeError):\n        record_testsuite_property(\"test_key\", 1)\n\ndef test_LogXML_pytest_runtest_logreport():\n    logxml = LogXML(\"test.xml\", \"prefix\", \"suite_name\")\n    report = MagicMock()\n    report.passed = True\n    report.when = \"call\"\n    logxml.pytest_runtest_logreport(report)\n    assert report in logxml.open_reports\n\ndef test_LogXML_pytest_collectreport():\n    logxml = LogXML(\"test.xml\", \"prefix\", \"suite_name\")\n    report = MagicMock()\n    report.passed = False\n    report.failed = True\n    logxml.pytest_collectreport(report)\n\ndef test_LogXML_pytest_internalerror():\n    logxml = LogXML(\"test.xml\", \"prefix\", \"suite_name\")\n    excrepr = MagicMock()\n    logxml.pytest_internalerror(excrepr)\n\ndef test_LogXML_pytest_sessionstart():\n    logxml = LogXML(\"test.xml\", \"prefix\", \"suite_name\")\n    logxml.pytest_sessionstart()\n    assert logxml.suite_start_time is not None\n\ndef test_LogXML_pytest_sessionfinish():\n    logxml = LogXML(\"test.xml\", \"prefix\", \"suite_name\")\n    logxml.pytest_sessionfinish()\n\ndef test_LogXML_pytest_terminal_summary():\n    logxml = LogXML(\"test.xml\", \"prefix\", \"suite_name\")\n    terminalreporter = MagicMock()\n    logxml.pytest_terminal_summary(terminalreporter)\n\ndef test_LogXML__get_global_properties_node():\n    logxml = LogXML(\"test.xml\", \"prefix\", \"suite_name\")\n    logxml.global_properties = [(\"key\", \"value\")]\n    properties_node = logxml._get_global_properties_node()\n    assert properties_node.tag == \"properties\"\n\n"], "sample_155": ["\nimport unittest\nfrom sympy.physics.units.unitsystem import UnitSystem\nfrom sympy.physics.units.quantities import Quantity\nfrom sympy.physics.units.definitions.dimension_definitions import (\n    Dimension, charge, length, time, temperature, pressure, energy, mass\n)\nfrom sympy.physics.units.systems.si import dimsys_SI\n\nclass TestUnitSystem(unittest.TestCase):\n\n    def test_unit_system_creation(self):\n        base_units = (length, time)\n        units = (Quantity(length, name=\"meter\"), Quantity(time, name=\"second\"))\n        us = UnitSystem(base_units, units, name=\"test_system\")\n        self.assertEqual(us.name, \"test_system\")\n        self.assertEqual(us.dim, 2)\n\n    def test_unit_system_extend(self):\n        base_units = (length, time)\n        units = (Quantity(length, name=\"meter\"), Quantity(time, name=\"second\"))\n        us = UnitSystem(base_units, units, name=\"test_system\")\n        us_extended = us.extend(base=(mass,), units=(Quantity(mass, name=\"kilogram\"),), name=\"extended_system\")\n        self.assertEqual(us_extended.dim, 3)\n        self.assertEqual(us_extended.name, \"extended_system\")\n\n    def test_get_dimension_system(self):\n        base_units = (length, time)\n        units = (Quantity(length, name=\"meter\"), Quantity(time, name=\"second\"))\n        us = UnitSystem(base_units, units, name=\"test_system\", dimension_system=dimsys_SI)\n        self.assertEqual(us.get_dimension_system(), dimsys_SI)\n\n    def test_get_quantity_dimension(self):\n        base_units = (length, time)\n        units = (Quantity(length, name=\"meter\"), Quantity(time, name=\"second\"))\n        us = UnitSystem(base_units, units, name=\"test_system\", dimension_system=dimsys_SI)\n        self.assertEqual(us.get_quantity_dimension(Quantity(length, name=\"meter\")), length)\n\n    def test_get_quantity_scale_factor(self):\n        base_units = (length, time)\n        units = (Quantity(length, name=\"meter\"), Quantity(time, name=\"second\"))\n        us = UnitSystem(base_units, units, name=\"test_system\", dimension_system=dimsys_SI)\n        self.assertEqual(us.get_quantity_scale_factor(Quantity(length, name=\"meter\")), 1)\n\n    def test_get_unit_system(self):\n        base_units = (length, time)\n        units = (Quantity(length, name=\"meter\"), Quantity(time, name=\"second\"))\n        us = UnitSystem(base_units, units, name=\"test_system\")\n        self.assertEqual(UnitSystem.get_unit_system(\"test_system\"), us)\n\n    def test_get_default_unit_system(self):\n        self.assertEqual(UnitSystem.get_default_unit_system().name, \"SI\")\n\n    def test_is_consistent(self):\n        base_units = (length, time)\n        units = (Quantity(length, name=\"meter\"), Quantity(time, name=\"second\"))\n        us = UnitSystem(base_units, units, name=\"test_system\", dimension_system=dimsys_SI)\n        self.assertTrue(us.is_consistent)\n\n    def test_derived_units(self):\n        base_units = (length, time)\n        units = (Quantity(length, name=\"meter\"), Quantity(time, name=\"second\"))\n        derived_units = {Dimension(length**2): Quantity(length**2, name=\"area\")}\n        us = UnitSystem(base_units, units, name=\"test_system\", derived_units=derived_units)\n        self.assertEqual(us.derived_units, derived_units)\n\n    def test_get_dimensional_expr(self):\n        base_units = (length, time)\n        units = (Quantity(length, name=\"meter\"), Quantity(time, name=\"second\"))\n        us = UnitSystem(base_units, units, name=\"test_system\", dimension_system=dimsys_SI)\n        expr = Quantity(length, name=\"meter\") * Quantity(time, name=\"second\")\n        self.assertEqual(us.get_dimensional_expr(expr), length*time)\n\n    def test_collect_factor_and_dimension(self):\n        base_units = (length, time)\n        units = (Quantity(length, name=\"meter\"), Quantity(time, name=\"second\"))\n        us = UnitSystem(base_units, units, name=\"test_system\", dimension_system=dimsys_SI)\n        expr = Quantity(length, name=\"meter\") * Quantity(time, name=\"second\")\n        factor, dim = us._collect_factor_and_dimension(expr)\n        self.assertEqual(factor, 1)\n        self.assertEqual(dim, length*time)\n\n    def test_get_units_non_prefixed(self):\n        base_units = (length, time)\n        units = (Quantity(length, name=\"meter\"), Quantity(time, name=\"second\"))\n        us = UnitSystem(base_units, units, name=\"test_system\")\n        self.assertEqual(us.get_units_non_prefixed(), {Quantity(length, name=\"meter\"), Quantity(time, name=\"second\")})\n\n"], "sample_103": ["\nimport unittest\nfrom sklearn.feature_selection.mutual_info_ import (mutual_info_regression,\n                                                 mutual_info_classif,\n                                                 _compute_mi_cc,\n                                                 _compute_mi_cd,\n                                                 _estimate_mi)\nfrom sklearn.datasets import make_classification, make_regression\nfrom sklearn.utils.testing import assert_array_almost_equal\nfrom sklearn.utils.testing import assert_array_equal\nfrom sklearn.utils.multiclass import type_of_target\nfrom scipy.sparse import csr_matrix\nimport numpy as np\n\nclass TestMutualInfo(unittest.TestCase):\n\n    def test_mutual_info_regression_continuous(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=0)\n        mi = mutual_info_regression(X, y, random_state=0)\n        self.assertEqual(mi.shape[0], X.shape[1])\n\n    def test_mutual_info_regression_sparse(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=0)\n        X = csr_matrix(X)\n        mi = mutual_info_regression(X, y, random_state=0)\n        self.assertEqual(mi.shape[0], X.shape[1])\n\n    def test_mutual_info_classif_discrete(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=0)\n        mi = mutual_info_classif(X, y, random_state=0)\n        self.assertEqual(mi.shape[0], X.shape[1])\n\n    def test_mutual_info_classif_sparse(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=0)\n        X = csr_matrix(X)\n        mi = mutual_info_classif(X, y, random_state=0)\n        self.assertEqual(mi.shape[0], X.shape[1])\n\n    def test_mutual_info_classif_multiclass(self):\n        X, y = make_classification(n_samples=100, n_features=10, n_classes=3,\n                                   random_state=0)\n        mi = mutual_info_classif(X, y, random_state=0)\n        self.assertEqual(mi.shape[0], X.shape[1])\n\n    def test_mutual_info_classif_binary(self):\n        X, y = make_classification(n_samples=100, n_features=10, n_classes=2,\n                                   random_state=0)\n        mi = mutual_info_classif(X, y, random_state=0)\n        self.assertEqual(mi.shape[0], X.shape[1])\n\n    def test_mutual_info_cc(self):\n        x = np.random.rand(100)\n        y = np.random.rand(100)\n        mi = _compute_mi_cc(x, y, n_neighbors=3)\n        self.assertGreaterEqual(mi, 0)\n\n    def test_mutual_info_cd(self):\n        x = np.random.rand(100)\n        y = np.random.randint(0, 2, size=100)\n        mi = _compute_mi_cd(x, y, n_neighbors=3)\n        self.assertGreaterEqual(mi, 0)\n\n    def test_estimate_mi_all_continuous(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=0)\n        mi = _estimate_mi(X, y, discrete_features=False, random_state=0)\n        self.assertEqual(mi.shape[0], X.shape[1])\n\n    def test_estimate_mi_all_discrete(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=0)\n        mi = _estimate_mi(X, y, discrete_features=True, random_state=0)\n        self.assertEqual(mi.shape[0], X.shape[1])\n\n    def test_estimate_mi_mixed(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=0)\n        X[:, 0] = np.random.rand(100)\n        mi = _estimate_mi(X, y, discrete_features=[1, 2, 3, 4, 5, 6, 7, 8, 9],\n                          random_state=0)\n        self.assertEqual(mi.shape[0], X.shape[1])\n\n    def test_estimate_mi_sparse(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=0)\n        X = csr_matrix(X)\n        mi = _estimate_mi(X, y, discrete_features=True, random_state=0)\n        self.assertEqual(mi.shape[0], X.shape[1])\n\n    def test_mutual_info_regression_empty(self):\n        X = np.empty((0, 10))\n        y = np.empty(0)\n        mi = mutual_info_regression(X, y)\n        assert_array_equal(mi, np.empty(10))\n\n    def test_mutual_info_classif_empty(self):\n        X = np.empty((0, 10))\n        y = np.empty(0, dtype=int)\n        mi = mutual_info_classif(X, y)\n        assert_array_equal(mi, np.empty(10))\n\n    def test_mutual_info_classif_target_type(self):\n        X = np.random.rand(100, 10)\n        y = np.array(['a', 'b'] * 50)\n        with self.assertRaises(ValueError):\n            mutual_info_classif(X, y)\n\n    def test_mutual_info_regression_target_type(self):\n        X = np.random.rand(100, 10)\n        y = np.array(['a', 'b'] * 50)\n        with self.assertRaises(ValueError):\n            mutual_info_regression(X, y)\n\n"], "sample_0": ["\nfrom django.forms.widgets import (\n    Widget,\n    TextInput,\n    PasswordInput,\n    HiddenInput,\n    NumberInput,\n    EmailInput,\n    URLInput,\n    Textarea,\n    Select,\n    NullBooleanSelect,\n    CheckboxInput,\n    ChoiceWidget,\n    RadioSelect,\n    CheckboxSelectMultiple,\n    MultiWidget,\n    SplitDateTimeWidget,\n    SplitHiddenDateTimeWidget,\n    SelectDateWidget,\n)\nfrom django.forms import DateInput, TimeInput, DateTimeInput\nfrom django.utils import timezone\nfrom datetime import datetime, date\n\ndef test_TextInput():\n    widget = TextInput()\n    assert widget.render('name', 'value') == '<input type=\"text\" name=\"name\" value=\"value\" id=\"id_name\">'\n\ndef test_PasswordInput():\n    widget = PasswordInput()\n    assert widget.render('name', 'value') == '<input type=\"password\" name=\"name\" value=\"value\" id=\"id_name\">'\n\ndef test_HiddenInput():\n    widget = HiddenInput()\n    assert widget.render('name', 'value') == '<input type=\"hidden\" name=\"name\" value=\"value\" id=\"id_name\">'\n\ndef test_NumberInput():\n    widget = NumberInput()\n    assert widget.render('name', 'value') == '<input type=\"number\" name=\"name\" value=\"value\" id=\"id_name\">'\n\ndef test_EmailInput():\n    widget = EmailInput()\n    assert widget.render('name', 'value') == '<input type=\"email\" name=\"name\" value=\"value\" id=\"id_name\">'\n\ndef test_URLInput():\n    widget = URLInput()\n    assert widget.render('name', 'value') == '<input type=\"url\" name=\"name\" value=\"value\" id=\"id_name\">'\n\ndef test_Textarea():\n    widget = Textarea()\n    assert widget.render('name', 'value') == '<textarea name=\"name\" id=\"id_name\">value</textarea>'\n\ndef test_Select():\n    widget = Select()\n    assert widget.render('name', 'value') == '<select name=\"name\" id=\"id_name\"><option value=\"value\">value</option></select>'\n\ndef test_NullBooleanSelect():\n    widget = NullBooleanSelect()\n    assert widget.render('name', 'true') == '<select name=\"name\" id=\"id_name\"><option value=\"unknown\">Unknown</option><option value=\"true\" selected>Yes</option><option value=\"false\">No</option></select>'\n\ndef test_CheckboxInput():\n    widget = CheckboxInput()\n    assert widget.render('name', True) == '<input type=\"checkbox\" name=\"name\" value=\"True\" id=\"id_name\" checked>'\n\ndef test_ChoiceWidget():\n    widget = ChoiceWidget()\n    assert widget.render('name', 'value') == '<select name=\"name\" id=\"id_name\"><option value=\"value\">value</option></select>'\n\ndef test_RadioSelect():\n    widget = RadioSelect()\n    assert widget.render('name', 'value') == '<ul><li><label for=\"id_name_0\"><input type=\"radio\" name=\"name\" value=\"value\" id=\"id_name_0\">value</label></li></ul>'\n\ndef test_CheckboxSelectMultiple():\n    widget = CheckboxSelectMultiple()\n    assert widget.render('name', ['value1', 'value2']) == '<ul><li><label for=\"id_name_0\"><input type=\"checkbox\" name=\"name\" value=\"value1\" id=\"id_name_0\">value1</label></li><li><label for=\"id_name_1\"><input type=\"checkbox\" name=\"name\" value=\"value2\" id=\"id_name_1\">value2</label></li></ul>'\n\ndef test_MultiWidget():\n    widget = MultiWidget([TextInput(), TextInput()])\n    assert widget.render('name', ['value1', 'value2']) == '<div><input type=\"text\" name=\"name_0\" value=\"value1\" id=\"id_name_0\"><input type=\"text\" name=\"name_1\" value=\"value2\" id=\"id_name_1\"></div>'\n\ndef test_SplitDateTimeWidget():\n    widget = SplitDateTimeWidget()\n    assert widget.render('name', datetime.now()) == '<div><input type=\"text\" name=\"name_0\" value=\"2023-10-27\" id=\"id_name_0\"><input type=\"text\" name=\"name_1\" value=\"00:00:00\" id=\"id_name_1\"></div>'\n\ndef test_SplitHiddenDateTimeWidget():\n    widget = SplitHiddenDateTimeWidget()\n    assert widget.render('name', datetime.now()) == '<input type=\"hidden\" name=\"name_0\" value=\"2023-10-27\" id=\"id_name_0\"><input type=\"hidden\" name=\"name_1\" value=\"00:00:00\" id=\"id_name_1\">'\n\ndef test_SelectDateWidget():\n    widget = SelectDateWidget()\n    assert widget.render('name', date.today()) == '<div><select name=\"name_year\" id=\"id_name_year\"><option value=\"\">---</option><option value=\"2023\" selected>2023</option></select><select name=\"name_month\" id=\"id_name_month\"><option value=\"\">---</option><option value=\"10\" selected>October</option></select><select name=\"name_day\" id=\"id_name_day\"><option value=\"\">---</option><option value=\"27\" selected>27</option></select></div>'\n\n"], "sample_121": ["\nimport unittest\nfrom sympy.combinatorics.permutations import (Permutation, _af_parity, _af_rmul, _af_rmuln, Cycle,\n                                             josephus, from_inversion_vector, random, unrank_lex,\n                                             get_precedence_matrix, get_precedence_distance,\n                                             get_adjacency_matrix, get_adjacency_distance,\n                                             get_positional_distance)\nfrom sympy.combinatorics.perm_groups import PermutationGroup\nfrom sympy.utilities.pytest import raises\n\nclass TestPermutation(unittest.TestCase):\n\n    def test_init(self):\n        self.assertEqual(Permutation([0, 1, 2]), Permutation(3))\n        self.assertEqual(Permutation([1, 0, 2]), Permutation([1, 0, 2]))\n        self.assertEqual(Permutation([2, 0, 1]), Permutation([2, 0, 1]))\n        self.assertRaises(ValueError, Permutation, [0, 1, 2, 2])\n\n    def test_cyclic_form(self):\n        p = Permutation([1, 0, 2])\n        self.assertEqual(p.cyclic_form, [[1, 0, 2]])\n        p = Permutation([0, 2, 1])\n        self.assertEqual(p.cyclic_form, [[0, 2, 1]])\n        p = Permutation([2, 0, 1])\n        self.assertEqual(p.cyclic_form, [[2, 0, 1]])\n        p = Permutation([1, 2, 0])\n        self.assertEqual(p.cyclic_form, [[1, 2, 0]])\n\n    def test_full_cyclic_form(self):\n        p = Permutation([1, 0, 2])\n        self.assertEqual(p.full_cyclic_form, [[0], [1, 2]])\n        p = Permutation([0, 2, 1])\n        self.assertEqual(p.full_cyclic_form, [[0, 2, 1]])\n        p = Permutation([2, 0, 1])\n        self.assertEqual(p.full_cyclic_form, [[2, 0, 1]])\n        p = Permutation([1, 2, 0])\n        self.assertEqual(p.full_cyclic_form, [[1, 2, 0]])\n\n    def test_order(self):\n        p = Permutation([1, 0, 2])\n        self.assertEqual(p.order(), 3)\n        p = Permutation([0, 2, 1])\n        self.assertEqual(p.order(), 3)\n        p = Permutation([2, 0, 1])\n        self.assertEqual(p.order(), 3)\n        p = Permutation([1, 2, 0])\n        self.assertEqual(p.order(), 3)\n\n    def test_rank(self):\n        p = Permutation([1, 0, 2])\n        self.assertEqual(p.rank(), 1)\n        p = Permutation([0, 2, 1])\n        self.assertEqual(p.rank(), 2)\n        p = Permutation([2, 0, 1])\n        self.assertEqual(p.rank(), 0)\n        p = Permutation([1, 2, 0])\n        self.assertEqual(p.rank(), 5)\n\n    def test_rank_trotterjohnson(self):\n        p = Permutation([0, 1, 2, 3])\n        self.assertEqual(p.rank_trotterjohnson(), 0)\n        p = Permutation([0, 2, 1, 3])\n        self.assertEqual(p.rank_trotterjohnson(), 7)\n\n    def test_unrank_trotterjohnson(self):\n        p = Permutation.unrank_trotterjohnson(4, 7)\n        self.assertEqual(p, Permutation([0, 2, 1, 3]))\n\n    def test_next_trotterjohnson(self):\n        p = Permutation([3, 0, 2, 1])\n        self.assertEqual(p.next_trotterjohnson(), Permutation([0, 3, 2, 1]))\n\n    def test_unrank_lex(self):\n        p = Permutation.unrank_lex(5, 10)\n        self.assertEqual(p, Permutation([0, 2, 4, 1, 3]))\n\n    def test_from_inversion_vector(self):\n        p = Permutation.from_inversion_vector([3, 2, 1, 0, 0])\n        self.assertEqual(p, Permutation([3, 2, 1, 0, 4, 5]))\n\n    def test_josephus(self):\n        p = Permutation.josephus(3, 6, 2)\n        self.assertEqual(p.array_form, [2, 5, 3, 1, 4, 0])\n\n    def test_random(self):\n        p = Permutation.random(5)\n        self.assertEqual(len(p), 5)\n\n    def test_parity(self):\n        p = Permutation([1, 0, 2])\n        self.assertEqual(p.signature(), -1)\n        p = Permutation([0, 2, 1])\n        self.assertEqual(p.signature(), 1)\n\n    def test_inverse(self):\n        p = Permutation([1, 0, 2])\n        self.assertEqual(p * p.inverse(), Permutation([0, 1, 2]))\n\n    def test_mul(self):\n        p = Permutation([1, 0, 2])\n        q = Permutation([2, 1, 0])\n        self.assertEqual(p * q, Permutation([2, 0, 1]))\n\n    def test_pow(self):\n        p = Permutation([1, 0, 2])\n        self.assertEqual(p**2, Permutation([2, 1, 0]))\n\n    def test_is_identity(self):\n        p = Permutation([0, 1, 2])\n        self.assertTrue(p.is_Identity)\n        p = Permutation([1, 0, 2])\n        self.assertFalse(p.is_Identity)\n\n    def test_support(self):\n        p = Permutation([1, 0, 2])\n        self.assertEqual(p.support(), [0, 1])\n\n    def test_cycles(self):\n        p = Permutation([1, 0, 2])\n        self.assertEqual(p.cycles, [[1, 0, 2]])\n\n    def test_runs(self):\n        p = Permutation([2, 5, 7, 3, 6, 0, 1, 4, 8])\n        self.assertEqual(p.runs(), [[2, 5, 7], [3, 6], [0, 1, 4, 8]])\n\n    def test_get_precedence_matrix(self):\n        p = Permutation.josephus(3, 6, 1)\n        m = p.get_precedence_matrix()\n        self.assertEqual(m[0, 1], 1)\n        self.assertEqual(m[1, 2], 1)\n        self.assertEqual(m[2, 3], 1)\n        self.assertEqual(m[3, 4], 1)\n        self.assertEqual(m[4, 5], 1)\n\n    def test_get_precedence_distance(self):\n        p = Permutation([2, 0, 4, 3, 1])\n        q = Permutation([3, 1, 2, 4, 0])\n        self.assertEqual(p.get_precedence_distance(q), 7)\n\n    def test_get_adjacency_matrix(self):\n        p = Permutation.josephus(3, 6, 1)\n        m = p.get_adjacency_matrix()\n        self.assertEqual(m[0, 1], 1)\n        self.assertEqual(m[1, 2], 1)\n        self.assertEqual(m[2, 3], 1)\n        self.assertEqual(m[3, 4], 1)\n        self.assertEqual(m[4, 5], 1)\n\n    def test_get_adjacency_distance(self):\n        p = Permutation([2, 0, 4, 3, 1])\n        q = Permutation([3, 1, 2, 4, 0])\n        self.assertEqual(p.get_adjacency_distance(q), 3)\n\n    def test_get_positional_distance(self):\n        p = Permutation([2, 0, 4, 3, 1])\n        q = Permutation([3, 1, 2, 4, 0])\n        self.assertEqual(p.get_positional_distance(q), 12)\n\n    def test_PermutationGroup(self):\n        p = Permutation([1, 0, 2])\n        q = Permutation([2, 0, 1])\n        G = PermutationGroup([p, q])\n        self.assertEqual(len(G.generators), 2)\n\n    def test_raises(self):\n        with raises(ValueError):\n            Permutation([0, 1, 2, 2])\n        with raises(ValueError):\n            Permutation([0, 1, 2]).rank()\n        with raises(ValueError):\n            Permutation([0, 1, 2]).unrank(5)\n\n"], "sample_130": ["\nimport unittest\nfrom sympy import ( symbols, lambdify, sqrt, sin, cos, tan, pi, acos, acosh, Rational, Float, Matrix, Lambda, Piecewise, exp, Integral, oo, I, Abs, Function, true, false, And, Or, Not, ITE, Min, Max, floor, diff, IndexedBase, Sum, DotProduct, Eq, Dummy, sinc)\nfrom sympy.utilities.lambdify import implemented_function\nfrom sympy.utilities.lambdify import MATH_TRANSLATIONS\nfrom sympy.utilities.lambdify import MPMATH_TRANSLATIONS\nfrom sympy.utilities.lambdify import NUMPY_TRANSLATIONS\nfrom sympy.utilities.lambdify import TENSORFLOW_TRANSLATIONS\n\nclass TestLambdify(unittest.TestCase):\n    def test_basic_lambdify(self):\n        x = symbols('x')\n        f = lambdify(x, x**2)\n        self.assertEqual(f(2), 4)\n\n    def test_multiple_variables(self):\n        x, y = symbols('x y')\n        f = lambdify((x, y), x + y)\n        self.assertEqual(f(2, 3), 5)\n\n    def test_nested_functions(self):\n        x = symbols('x')\n        f = lambdify(x, sin(x**2))\n        self.assertAlmostEqual(f(pi/2), 1.0)\n\n    def test_piecewise_function(self):\n        x = symbols('x')\n        f = lambdify(x, Piecewise((0, x < 0), (x, x >= 0)))\n        self.assertEqual(f(-1), 0)\n        self.assertEqual(f(1), 1)\n\n    def test_matrix_input(self):\n        x = symbols('x')\n        A = Matrix([[1, 2], [3, 4]])\n        f = lambdify(x, A*x)\n        result = f([1, 2])\n        self.assertEqual(result.tolist(), [5, 11])\n\n    def test_custom_function(self):\n        def my_func(x):\n            return x + 1\n        x = symbols('x')\n        f = implemented_function('my_func', my_func)\n        g = lambdify(x, f(x))\n        self.assertEqual(g(2), 3)\n\n    def test_tensorflow_lambdify(self):\n        import tensorflow as tf\n        x = symbols('x')\n        f = lambdify(x, x**2, 'tensorflow')\n        with tf.Session() as sess:\n            result = sess.run(f(tf.constant(2.0)))\n        self.assertEqual(result, 4.0)\n\n    def test_numpy_lambdify(self):\n        x = symbols('x')\n        f = lambdify(x, x**2, 'numpy')\n        self.assertEqual(f(2), 4)\n\n    def test_math_lambdify(self):\n        x = symbols('x')\n        f = lambdify(x, sin(x), 'math')\n        self.assertAlmostEqual(f(pi/2), 1.0)\n\n    def test_mpmath_lambdify(self):\n        x = symbols('x')\n        f = lambdify(x, sin(x), 'mpmath')\n        self.assertAlmostEqual(f(pi/2), 1.0)\n\n    def test_lambdify_with_args(self):\n        x, y = symbols('x y')\n        f = lambdify((x, y), x + y)\n        self.assertEqual(f(2, 3), 5)\n\n    def test_lambdify_with_tuple_args(self):\n        x, y = symbols('x y')\n        f = lambdify((x, (y,)), [x, y])\n        self.assertEqual(f(2, (3,)), [2, 3])\n\n    def test_lambdify_with_nested_tuple_args(self):\n        x, y, z = symbols('x y z')\n        f = lambdify((x, (y, z)), [x, y, z])\n        self.assertEqual(f(2, (3, 4)), [2, 3, 4])\n\n    def test_lambdify_with_dummy_variables(self):\n        x = symbols('x')\n        f = lambdify(x, x**2, dummify=True)\n        self.assertEqual(f(2), 4)\n\n    def test_lambdify_with_modules(self):\n        x = symbols('x')\n        f = lambdify(x, sin(x), modules=['math'])\n        self.assertAlmostEqual(f(pi/2), 1.0)\n\n    def test_lambdify_with_undefined_function(self):\n        x = symbols('x')\n        f = implemented_function('my_func', lambda x: x + 1)\n        g = lambdify(x, f(x))\n        self.assertEqual(g(2), 3)\n\n    def test_lambdify_with_piecewise_function_and_tensorflow(self):\n        x = symbols('x')\n        f = lambdify(x, Piecewise((0, x < 0), (x, x >= 0)), 'tensorflow')\n        with tf.Session() as sess:\n            result = sess.run(f(tf.constant(-1.0)))\n        self.assertEqual(result, 0.0)\n\n        with tf.Session() as sess:\n            result = sess.run(f(tf.constant(1.0)))\n        self.assertEqual(result, 1.0)\n\n    def test_lambdify_with_matrix_and_tensorflow(self):\n        x = symbols('x')\n        A = Matrix([[1, 2], [3, 4]])\n        f = lambdify(x, A*x, 'tensorflow')\n        with tf.Session() as sess:\n            result = sess.run(f(tf.constant([1, 2])))\n        self.assertEqual(result.tolist(), [5, 11])\n\n    def test_lambdify_with_summation(self):\n        x = symbols('x')\n        i = symbols('i', integer=True)\n        f = lambdify(x, Sum(i, (i, 1, x)), 'numpy')\n        self.assertEqual(f(3), 6)\n\n    def test_lambdify_with_integral(self):\n        x = symbols('x')\n        f = lambdify(x, Integral(x**2, (x, 0, 1)), 'numpy')\n        self.assertAlmostEqual(f(1), 1.0/3)\n\n    def test_lambdify_with_abs(self):\n        x = symbols('x')\n        f = lambdify(x, Abs(x), 'numpy')\n        self.assertEqual(f(-2), 2)\n        self.assertEqual(f(2), 2)\n\n    def test_lambdify_with_floor(self):\n        x = symbols('x')\n        f = lambdify(x, floor(x), 'numpy')\n        self.assertEqual(f(2.5), 2)\n        self.assertEqual(f(-2.5), -3)\n\n    def test_lambdify_with_ITE(self):\n        x = symbols('x')\n        f = lambdify(x, ITE(x > 0, x, -x), 'numpy')\n        self.assertEqual(f(2), 2)\n        self.assertEqual(f(-2), 2)\n\n    def test_lambdify_with_Min(self):\n        x, y = symbols('x y')\n        f = lambdify((x, y), Min(x, y), 'numpy')\n        self.assertEqual(f(2, 3), 2)\n        self.assertEqual(f(3, 2), 2)\n\n    def test_lambdify_with_Max(self):\n        x, y = symbols('x y')\n        f = lambdify((x, y), Max(x, y), 'numpy')\n        self.assertEqual(f(2, 3), 3)\n        self.assertEqual(f(3, 2), 3)\n\n    def test_lambdify_with_logical_operators(self):\n        x, y = symbols('x y')\n        f = lambdify((x, y), And(x > 0, y > 0), 'numpy')\n        self.assertTrue(f(2, 3))\n        self.assertFalse(f(2, -3))\n\n    def test_lambdify_with_sinc(self):\n        x = symbols('x')\n        f = lambdify(x, sinc(x), 'numpy')\n        self.assertAlmostEqual(f(0), 1.0)\n        self.assertAlmostEqual(f(pi), 0.0)\n\n    def test_lambdify_with_complex_numbers(self):\n        x = symbols('x')\n        f = lambdify(x, x + I, 'numpy')\n        self.assertEqual(f(2), 2 + 1j)\n\n    def test_lambdify_with_undefined_function_and_tensorflow(self):\n        x = symbols('x')\n        f = implemented_function('my_func', lambda x: x + 1)\n        g = lambdify(x, f(x), 'tensorflow')\n        with tf.Session() as sess:\n            result = sess.run(g(tf.constant(2.0)))\n        self.assertEqual(result, 3.0)\n\n    def test_lambdify_with_multiple_undefined_functions(self):\n        x = symbols('x')\n        f = implemented_function('f', lambda x: x + 1)\n        g = implemented_function('g', lambda x: x * 2)\n        h = lambdify(x, f(g(x)), 'numpy')\n        self.assertEqual(h(2), 5)\n\n    def test_lambdify_with_undefined_function_and_multiple_arguments(self):\n        x, y = symbols('x y')\n        f = implemented_function('f', lambda x, y: x + y)\n        g = lambdify((x, y), f(x, y), 'numpy')\n        self.assertEqual(g(2, 3), 5)\n\n    def test_lambdify_with_undefined_function_and_nested_calls(self):\n        x = symbols('x')\n        f = implemented_function('f', lambda x: x + 1)\n        g = implemented_function('g', lambda x: f(f(x)))\n        h = lambdify(x, g(x), 'numpy')\n        self.assertEqual(h(2), 4)\n\n    def test_lambdify_with_undefined_function_and_piecewise(self):\n        x = symbols('x')\n        f = implemented_function('f', lambda x: x + 1)\n        g = lambdify(x, Piecewise((f(x), x < 0), (x, x >= 0)), 'numpy')\n        self.assertEqual(g(-1), 0)\n        self.assertEqual(g(1), 1)\n\n    def test_lambdify_with_undefined_function_and_matrix(self):\n        x = symbols('x')\n        f = implemented_function('f', lambda x: x + 1)\n        A = Matrix([[1, 2], [3, 4]])\n        g = lambdify(x, A*f(x), 'numpy')\n        result = g(1)\n        self.assertEqual(result.tolist(), [2, 3, 4, 5])\n\n    def test_lambdify_with_undefined_function_and_summation(self):\n        x = symbols('x')\n        i = symbols('i', integer=True)\n        f = implemented_function('f', lambda x: x + 1)\n        g = lambdify(x, Sum(f(i), (i, 1, x)), 'numpy')\n        self.assertEqual(g(3), 6)\n\n    def test_lambdify_with_undefined_function_and_integral(self):\n        x = symbols('x')\n        f = implemented_function('f', lambda x: x**2)\n        g = lambdify(x, Integral(f(x), (x, 0, 1)), 'numpy')\n        self.assertAlmostEqual(g(1), 1.0/3)\n\n    def test_lambdify_with_undefined_function_and_abs(self):\n        x = symbols('x')\n        f = implemented_function('f', lambda x: x + 1)\n        g = lambdify(x, Abs(f(x)), 'numpy')\n        self.assertEqual(g(-2), 2)\n        self.assertEqual(g(2), 3)\n\n    def test_lambdify_with_undefined_function_and_floor(self):\n        x = symbols('x')\n        f = implemented_function('f', lambda x: x + 1)\n        g = lambdify(x, floor(f(x)), 'numpy')\n        self.assertEqual(g(2), 3)\n        self.assertEqual(g(-2), -1)\n\n    def test_lambdify_with_undefined_function_and_ITE(self):\n        x = symbols('x')\n        f = implemented_function('f', lambda x: x + 1)\n        g = lambdify(x, ITE(f(x) > 0, f(x), -f(x)), 'numpy')\n        self.assertEqual(g(2), 3)\n        self.assertEqual(g(-2), -1)\n\n    def test_lambdify_with_undefined_function_and_Min(self):\n        x, y = symbols('x y')\n        f = implemented_function('f', lambda x: x + 1)\n        g = lambdify((x, y), Min(f(x), y), 'numpy')\n        self.assertEqual(g(2, 3), 3)\n        self.assertEqual(g(3, 2), 3)\n\n    def test_lambdify_with_undefined_function_and_Max(self):\n        x, y = symbols('x y')\n        f = implemented_function('f', lambda x: x + 1)\n        g = lambdify((x, y), Max(f(x), y), 'numpy')\n        self.assertEqual(g(2, 3), 3)\n        self.assertEqual(g(3, 2), 4)\n\n    def test_lambdify_with_undefined_function_and_logical_operators(self):\n        x, y = symbols('x y')\n        f = implemented_function('f', lambda x: x + 1)\n        g = lambdify((x, y), And(f(x) > 0, y > 0), 'numpy')\n        self.assertTrue(g(2, 3))\n        self.assertFalse(g(2, -3))\n\n    def test_lambdify_with_undefined_function_and_sinc(self):\n        x = symbols('x')\n        f = implemented_function('f', lambda x: x + 1)\n        g = lambdify(x, sinc(f(x)), 'numpy')\n        self.assertAlmostEqual(g(0), 1.0)\n        self.assertAlmostEqual(g(pi), 0.0)\n\n    def test_lambdify_with_undefined_function_and_complex_numbers(self):\n        x = symbols('x')\n        f = implemented_function('f', lambda x: x + I)\n        g = lambdify(x, f(x), 'numpy')\n        self.assertEqual(g(2), 2 + 1j)\n\n    def test_lambdify_with_undefined_function_and_multiple_undefined_functions(self):\n        x = symbols('x')\n        f = implemented_function('f', lambda x: x + 1)\n        g = implemented_function('g', lambda x: x * 2)\n        h = implemented_function('h', lambda x: f(g(x)))\n        i = lambdify(x, h(x), 'numpy')\n        self.assertEqual(i(2), 6)\n\n    def test_lambdify_with_undefined_function_and_undefined_function_in_arguments(self):\n        x, y = symbols('x y')\n        f = implemented_function('f', lambda x: x + 1)\n        g = implemented_function('g', lambda x, y: f(x) + y)\n        h = lambdify((x, y), g(x, y), 'numpy')\n        self.assertEqual(h(2, 3), 6)\n\n"], "sample_13": ["\nimport datetime\nimport unittest\nfrom unittest.mock import patch\n\nfrom django.utils.http import (\n    base36_to_int,\n    escape_leading_slashes,\n    http_date,\n    int_to_base36,\n    is_safe_url,\n    is_same_domain,\n    parse_etags,\n    parse_http_date,\n    quote_etag,\n    url_has_allowed_host_and_scheme,\n    urlencode,\n    urlquote,\n    urlquote_plus,\n    urlsafe_base64_decode,\n    urlsafe_base64_encode,\n    urlunquote,\n    urlunquote_plus,\n)\n\nclass HttpUtilsTests(unittest.TestCase):\n\n    def test_base36_to_int(self):\n        self.assertEqual(base36_to_int('0'), 0)\n        self.assertEqual(base36_to_int('1'), 1)\n        self.assertEqual(base36_to_int('a'), 10)\n        self.assertEqual(base36_to_int('z'), 35)\n        self.assertEqual(base36_to_int('10'), 36)\n        self.assertEqual(base36_to_int('1a'), 37)\n        self.assertEqual(base36_to_int('zZ'), 1295)\n        with self.assertRaises(ValueError):\n            base36_to_int('')\n        with self.assertRaises(ValueError):\n            base36_to_int('1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\n    def test_int_to_base36(self):\n        self.assertEqual(int_to_base36(0), '0')\n        self.assertEqual(int_to_base36(1), '1')\n        self.assertEqual(int_to_base36(10), 'a')\n        self.assertEqual(int_to_base36(35), 'z')\n        self.assertEqual(int_to_base36(36), '10')\n        self.assertEqual(int_to_base36(37), '11')\n        self.assertEqual(int_to_base36(1295), 'zZ')\n        with self.assertRaises(ValueError):\n            int_to_base36(-1)\n\n    def test_urlsafe_base64_encode(self):\n        self.assertEqual(urlsafe_base64_encode(b'hello'), 'aGVsbG8')\n        self.assertEqual(urlsafe_base64_encode(b'hello world'), 'aGVsbG8gd29ybGQ')\n\n    def test_urlsafe_base64_decode(self):\n        self.assertEqual(urlsafe_base64_decode('aGVsbG8'), b'hello')\n        self.assertEqual(urlsafe_base64_decode('aGVsbG8gd29ybGQ'), b'hello world')\n\n    def test_http_date(self):\n        now = datetime.datetime.now()\n        http_date_str = http_date()\n        http_date_obj = datetime.datetime.strptime(http_date_str, '%a, %d %b %Y %H:%M:%S GMT')\n        self.assertAlmostEqual(http_date_obj, now, delta=datetime.timedelta(seconds=5))\n\n    def test_parse_http_date(self):\n        self.assertEqual(parse_http_date('Tue, 15 Nov 1994 08:12:31 GMT'), 784676351)\n        self.assertEqual(parse_http_date('Tuesday, 15-Nov-94 08:12:31 GMT'), 784676351)\n        self.assertEqual(parse_http_date('Tue Nov 15 08:12:31 1994'), 784676351)\n\n    def test_parse_http_date_safe(self):\n        self.assertEqual(parse_http_date_safe('Tue, 15 Nov 1994 08:12:31 GMT'), 784676351)\n        self.assertIsNone(parse_http_date_safe('invalid date'))\n\n    def test_parse_etags(self):\n        self.assertEqual(parse_etags('W/\"foo\"'), ['W/\"foo\"'])\n        self.assertEqual(parse_etags('\"foo\", \"bar\"'), ['\"foo\"', '\"bar\"'])\n        self.assertEqual(parse_etags('\"foo\", W/\"bar\"'), ['\"foo\"', 'W/\"bar\"'])\n        self.assertEqual(parse_etags('*'), ['*'])\n\n    def test_quote_etag(self):\n        self.assertEqual(quote_etag('\"foo\"'), '\"foo\"')\n        self.assertEqual(quote_etag('foo'), '\"foo\"')\n\n    def test_is_same_domain(self):\n        self.assertTrue(is_same_domain('example.com', 'example.com'))\n        self.assertTrue(is_same_domain('foo.example.com', '.example.com'))\n        self.assertFalse(is_same_domain('example.org', '.example.com'))\n        self.assertFalse(is_same_domain('example.com', 'example.org'))\n\n    def test_url_has_allowed_host_and_scheme(self):\n        self.assertTrue(url_has_allowed_host_and_scheme('https://example.com', {'example.com'}))\n        self.assertFalse(url_has_allowed_host_and_scheme('http://example.com', {'example.com'}, require_https=True))\n        self.assertTrue(url_has_allowed_host_and_scheme('https://example.com', {'example.com', 'foo.example.com'}))\n        self.assertFalse(url_has_allowed_host_and_scheme('https://example.org', {'example.com'}))\n        self.assertFalse(url_has_allowed_host_and_scheme('//example.com', {'example.com'}))\n        self.assertFalse(url_has_allowed_host_and_scheme('', {'example.com'}))\n\n    def test_urlencode(self):\n        self.assertEqual(urlencode({'foo': 'bar'}), 'foo=bar')\n        self.assertEqual(urlencode({'foo': ['bar', 'baz']}), 'foo=bar&foo=baz')\n        self.assertEqual(urlencode({'foo': None}), '')\n\n    def test_urlquote(self):\n        self.assertEqual(urlquote('https://example.com'), 'https://example.com')\n        self.assertEqual(urlquote('Hello, world!'), 'Hello%2C%20world%21')\n\n    def test_urlquote_plus(self):\n        self.assertEqual(urlquote_plus('https://example.com'), 'https://example.com')\n        self.assertEqual(urlquote_plus('Hello, world!'), 'Hello%2C%20world%21')\n\n    def test_urlunquote(self):\n        self.assertEqual(urlunquote('https://example.com'), 'https://example.com')\n        self.assertEqual(urlunquote('Hello%2C%20world%21'), 'Hello, world!')\n\n    def test_urlunquote_plus(self):\n        self.assertEqual(urlunquote_plus('https://example.com'), 'https://example.com')\n        self.assertEqual(urlunquote_plus('Hello%2C%20world%21'), 'Hello, world!')\n\n    def test_escape_leading_slashes(self):\n        self.assertEqual(escape_leading_slashes('/path/to/resource'), '/%2Fpath/to/resource')\n        self.assertEqual(escape_leading_slashes('https://example.com/path/to/resource'), 'https://example.com/path/to/resource')\n        self.assertEqual(escape_leading_slashes('//example.com/path/to/resource'), '/%2Fexample.com/path/to/resource')\n\n"], "sample_8": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.conf import settings\nfrom django.http import Http404, HttpResponse, HttpResponseNotFound\nfrom django.template import Context, Engine, TemplateDoesNotExist\nfrom django.template.defaultfilters import pprint\nfrom django.urls import resolve\nfrom django.utils import timezone\nfrom django.utils.datastructures import MultiValueDict\nfrom django.utils.encoding import force_str\nfrom django.utils.module_loading import import_string\nfrom django.utils.version import get_docs_version\n\n# Minimal Django templates engine to render the error templates\n# regardless of the project's TEMPLATES setting. Templates are\n# read directly from the filesystem so that the error handler\n# works even if the template loader is broken.\nDEBUG_ENGINE = Engine(\n    debug=True,\n    libraries={'i18n': 'django.templatetags.i18n'},\n)\n\nfrom django.views.debug import (\n    CLEANSED_SUBSTITUTE,\n    CallableSettingWrapper,\n    ExceptionReporter,\n    Path as DebugPath,\n    cleanse_setting,\n    default_urlconf,\n    technical_404_response,\n    technical_500_response,\n)\n\nclass TestCleanseSetting(unittest.TestCase):\n    def test_cleanse_setting_cleanses_sensitive_keys(self):\n        self.assertEqual(cleanse_setting('API_KEY', 'secret'), CLEANSED_SUBSTITUTE)\n        self.assertEqual(cleanse_setting('DATABASE_PASSWORD', 'password'), CLEANSED_SUBSTITUTE)\n        self.assertEqual(cleanse_setting('SECRET_KEY', 'secret'), CLEANSED_SUBSTITUTE)\n\n    def test_cleanse_setting_leaves_non_sensitive_keys_unchanged(self):\n        self.assertEqual(cleanse_setting('DEBUG', True), True)\n        self.assertEqual(cleanse_setting('ALLOWED_HOSTS', ['localhost']), ['localhost'])\n\n    def test_cleanse_setting_recursively_cleanses_dictionaries(self):\n        data = {'API_KEY': 'secret', 'OTHER_KEY': {'NESTED_KEY': 'another_secret'}}\n        expected = {\n            'API_KEY': CLEANSED_SUBSTITUTE,\n            'OTHER_KEY': {\n                'NESTED_KEY': CLEANSED_SUBSTITUTE\n            }\n        }\n        self.assertEqual(cleanse_setting('API_KEY', data), expected)\n\n    def test_cleanse_setting_handles_non_string_values(self):\n        self.assertEqual(cleanse_setting('DEBUG', 1), 1)\n        self.assertEqual(cleanse_setting('ALLOWED_HOSTS', [127, 0, 0, 1]), [127, 0, 0, 1])\n\n    def test_cleanse_setting_handles_callable_values(self):\n        mock_callable = MagicMock()\n        self.assertEqual(cleanse_setting('SETTING_NAME', mock_callable), CallableSettingWrapper(mock_callable))\n\nclass TestCallableSettingWrapper(unittest.TestCase):\n    def test_callable_setting_wrapper(self):\n        mock_callable = MagicMock()\n        wrapper = CallableSettingWrapper(mock_callable)\n        self.assertEqual(repr(wrapper), repr(mock_callable))\n\nclass TestTechnical500Response(unittest.TestCase):\n    def test_technical_500_response_returns_html_for_non_ajax_requests(self):\n        request = MagicMock()\n        request.is_ajax.return_value = False\n        exc_type = Exception\n        exc_value = Exception(\"Test Exception\")\n        tb = None\n        response = technical_500_response(request, exc_type, exc_value, tb)\n        self.assertEqual(response.status_code, 500)\n        self.assertEqual(response['Content-Type'], 'text/html')\n\n    def test_technical_500_response_returns_text_for_ajax_requests(self):\n        request = MagicMock()\n        request.is_ajax.return_value = True\n        exc_type = Exception\n        exc_value = Exception(\"Test Exception\")\n        tb = None\n        response = technical_500_response(request, exc_type, exc_value, tb)\n        self.assertEqual(response.status_code, 500)\n        self.assertEqual(response['Content-Type'], 'text/plain; charset=utf-8')\n\nclass TestExceptionReporter(unittest.TestCase):\n    def test_get_traceback_data(self):\n        request = MagicMock()\n        exc_type = Exception\n        exc_value = Exception(\"Test Exception\")\n        tb = None\n        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n        data = reporter.get_traceback_data()\n        self.assertIn('exception_type', data)\n        self.assertIn('exception_value', data)\n        self.assertIn('frames', data)\n        self.assertIn('request', data)\n\n    def test_get_traceback_html(self):\n        request = MagicMock()\n        exc_type = Exception\n        exc_value = Exception(\"Test Exception\")\n        tb = None\n        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n        html = reporter.get_traceback_html()\n        self.assertIsInstance(html, str)\n\n    def test_get_traceback_text(self):\n        request = MagicMock()\n        exc_type = Exception\n        exc_value = Exception(\"Test Exception\")\n        tb = None\n        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n        text = reporter.get_traceback_text()\n        self.assertIsInstance(text, str)\n\n    @patch('django.views.debug.Path')\n    def test_get_traceback_frames(self, mock_path):\n        request = MagicMock()\n        exc_type = Exception\n        exc_value = Exception(\"Test Exception\")\n        tb = MagicMock()\n        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n        frames = reporter.get_traceback_frames()\n        self.assertIsInstance(frames, list)\n\nclass TestTechnical404Response(unittest.TestCase):\n    def test_technical_404_response(self):\n        request = MagicMock()\n        exception = Http404({'path': '/not_found/', 'tried': []})\n        response = technical_404_response(request, exception)\n        self.assertEqual(response.status_code, 404)\n        self.assertEqual(response['Content-Type'], 'text/html')\n\nclass TestDefaultUrlconf(unittest.TestCase):\n    def test_default_urlconf(self):\n        request = MagicMock()\n        response = default_urlconf(request)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'text/html')\n\n"], "sample_12": ["\nimport unittest\nfrom django.db import models\nfrom django.db.migrations.autodetector import MigrationAutodetector, AlterModelOptions\nfrom django.db.migrations.operations import (\n    CreateModel,\n    DeleteModel,\n    AddField,\n    RemoveField,\n    AlterField,\n    RenameField,\n    AlterUniqueTogether,\n    AlterIndexTogether,\n    AlterModelTable,\n    AddIndex,\n    RemoveIndex,\n    AddConstraint,\n    RemoveConstraint,\n    AlterOrderWithRespectTo,\n    AlterModelManagers,\n)\n\nclass TestMigrationAutodetector(unittest.TestCase):\n\n    def test_no_changes(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field', 'type': 'CharField'},\n                            ],\n                        },\n                    },\n                },\n            },\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field', 'type': 'CharField'},\n                            ],\n                        },\n                    },\n                },\n            },\n        )\n        changes = autodetector.changes(None)\n        self.assertEqual(changes, {})\n\n    def test_create_model(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app': {\n                    'models': {},\n                },\n            },\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field', 'type': 'CharField'},\n                            ],\n                        },\n                    },\n                },\n            },\n        )\n        changes = autodetector.changes(None)\n        self.assertEqual(len(changes['app']), 1)\n        self.assertIsInstance(changes['app'][0].operations[0], CreateModel)\n\n    def test_delete_model(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field', 'type': 'CharField'},\n                            ],\n                        },\n                    },\n                },\n            },\n            {\n                'app': {\n                    'models': {},\n                },\n            },\n        )\n        changes = autodetector.changes(None)\n        self.assertEqual(len(changes['app']), 1)\n        self.assertIsInstance(changes['app'][0].operations[0], DeleteModel)\n\n    def test_add_field(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field1', 'type': 'CharField'},\n                            ],\n                        },\n                    },\n                },\n            },\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field1', 'type': 'CharField'},\n                                {'name': 'field2', 'type': 'IntegerField'},\n                            ],\n                        },\n                    },\n                },\n            },\n        )\n        changes = autodetector.changes(None)\n        self.assertEqual(len(changes['app']), 1)\n        self.assertIsInstance(changes['app'][0].operations[0], AddField)\n\n    def test_remove_field(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field1', 'type': 'CharField'},\n                                {'name': 'field2', 'type': 'IntegerField'},\n                            ],\n                        },\n                    },\n                },\n            },\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field1', 'type': 'CharField'},\n                            ],\n                        },\n                    },\n                },\n            },\n        )\n        changes = autodetector.changes(None)\n        self.assertEqual(len(changes['app']), 1)\n        self.assertIsInstance(changes['app'][0].operations[0], RemoveField)\n\n    def test_alter_field(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field', 'type': 'CharField'},\n                            ],\n                        },\n                    },\n                },\n            },\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field', 'type': 'IntegerField'},\n                            ],\n                        },\n                    },\n                },\n            },\n        )\n        changes = autodetector.changes(None)\n        self.assertEqual(len(changes['app']), 1)\n        self.assertIsInstance(changes['app'][0].operations[0], AlterField)\n\n    def test_rename_field(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'old_field', 'type': 'CharField'},\n                            ],\n                        },\n                    },\n                },\n            },\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'new_field', 'type': 'CharField'},\n                            ],\n                        },\n                    },\n                },\n            },\n        )\n        changes = autodetector.changes(None)\n        self.assertEqual(len(changes['app']), 1)\n        self.assertIsInstance(changes['app'][0].operations[0], RenameField)\n\n    def test_alter_unique_together(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field1', 'type': 'CharField'},\n                                {'name': 'field2', 'type': 'CharField'},\n                            ],\n                            'options': {'unique_together': ()},\n                        },\n                    },\n                },\n            },\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field1', 'type': 'CharField'},\n                                {'name': 'field2', 'type': 'CharField'},\n                            ],\n                            'options': {'unique_together': (('field1', 'field2'),)},\n                        },\n                    },\n                },\n            },\n        )\n        changes = autodetector.changes(None)\n        self.assertEqual(len(changes['app']), 1)\n        self.assertIsInstance(changes['app'][0].operations[0], AlterUniqueTogether)\n\n    def test_alter_index_together(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field1', 'type': 'CharField'},\n                                {'name': 'field2', 'type': 'CharField'},\n                            ],\n                            'options': {'index_together': ()},\n                        },\n                    },\n                },\n            },\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field1', 'type': 'CharField'},\n                                {'name': 'field2', 'type': 'CharField'},\n                            ],\n                            'options': {'index_together': (('field1', 'field2'),)},\n                        },\n                    },\n                },\n            },\n        )\n        changes = autodetector.changes(None)\n        self.assertEqual(len(changes['app']), 1)\n        self.assertIsInstance(changes['app'][0].operations[0], AlterIndexTogether)\n\n    def test_alter_model_table(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field', 'type': 'CharField'},\n                            ],\n                            'options': {'db_table': 'old_table'},\n                        },\n                    },\n                },\n            },\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field', 'type': 'CharField'},\n                            ],\n                            'options': {'db_table': 'new_table'},\n                        },\n                    },\n                },\n            },\n        )\n        changes = autodetector.changes(None)\n        self.assertEqual(len(changes['app']), 1)\n        self.assertIsInstance(changes['app'][0].operations[0], AlterModelTable)\n\n    def test_alter_model_options(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field', 'type': 'CharField'},\n                            ],\n                            'options': {'verbose_name': 'Old Name'},\n                        },\n                    },\n                },\n            },\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field', 'type': 'CharField'},\n                            ],\n                            'options': {'verbose_name': 'New Name'},\n                        },\n                    },\n                },\n            },\n        )\n        changes = autodetector.changes(None)\n        self.assertEqual(len(changes['app']), 1)\n        self.assertIsInstance(changes['app'][0].operations[0], AlterModelOptions)\n\n    def test_alter_order_with_respect_to(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field', 'type': 'CharField'},\n                            ],\n                            'options': {'order_with_respect_to': None},\n                        },\n                    },\n                },\n            },\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field', 'type': 'CharField'},\n                            ],\n                            'options': {'order_with_respect_to': 'another_field'},\n                        },\n                    },\n                },\n            },\n        )\n        changes = autodetector.changes(None)\n        self.assertEqual(len(changes['app']), 1)\n        self.assertIsInstance(changes['app'][0].operations[0], AlterOrderWithRespectTo)\n\n    def test_alter_managers(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field', 'type': 'CharField'},\n                            ],\n                            'managers': [],\n                        },\n                    },\n                },\n            },\n            {\n                'app': {\n                    'models': {\n                        'Model': {\n                            'fields': [\n                                {'name': 'field', 'type': 'CharField'},\n                            ],\n                            'managers': ['custom_manager'],\n                        },\n                    },\n                },\n            },\n        )\n        changes = autodetector.changes(None)\n        self.assertEqual(len(changes['app']), 1)\n        self.assertIsInstance(changes['app'][0].operations[0], AlterModelManagers)\n\n"], "sample_30": ["\nfrom django.contrib.admin.options import (\n    BaseModelAdmin,\n    StackedInline,\n    TabularInline,\n    InlineModelAdmin,\n    InlineModelAdminChecks,\n)\nfrom django.contrib.admin.utils import NestedObjects\nfrom django.contrib.auth.models import Permission\nfrom django.db import models\nfrom django.test import SimpleTestCase, TestCase\nfrom django.test.utils import override_settings\nfrom django.urls import reverse\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\nclass MyInlineModel(models.Model):\n    parent = models.ForeignKey(MyModel, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n\nclass MyModelAdmin(BaseModelAdmin):\n    pass\n\nclass MyInlineModelAdmin(InlineModelAdmin):\n    model = MyInlineModel\n    fk_name = 'parent'\n\nclass MyStackedInlineModelAdmin(StackedInline):\n    model = MyInlineModel\n    fk_name = 'parent'\n\nclass MyTabularInlineModelAdmin(TabularInline):\n    model = MyInlineModel\n    fk_name = 'parent'\n\nclass AdminOptionsTests(TestCase):\n\n    def setUp(self):\n        self.model = MyModel\n        self.inline_model = MyInlineModel\n        self.admin = MyModelAdmin\n        self.inline_admin = MyInlineModelAdmin\n        self.stacked_inline_admin = MyStackedInlineModelAdmin\n        self.tabular_inline_admin = MyTabularInlineModelAdmin\n\n    def test_base_modeladmin(self):\n        admin = self.admin()\n        self.assertEqual(admin.model, self.model)\n\n    def test_inline_modeladmin(self):\n        admin = self.inline_admin()\n        self.assertEqual(admin.model, self.inline_model)\n        self.assertEqual(admin.fk_name, 'parent')\n\n    def test_stacked_inline(self):\n        admin = self.stacked_inline_admin()\n        self.assertEqual(admin.template, 'admin/edit_inline/stacked.html')\n\n    def test_tabular_inline(self):\n        admin = self.tabular_inline_admin()\n        self.assertEqual(admin.template, 'admin/edit_inline/tabular.html')\n\n    def test_get_formset(self):\n        admin = self.inline_admin()\n        formset = admin.get_formset(None)\n        self.assertEqual(formset.form, admin.form)\n\n    def test_get_queryset(self):\n        admin = self.inline_admin()\n        queryset = admin.get_queryset(None)\n        self.assertEqual(queryset.model, self.inline_model)\n\n    def test_has_add_permission(self):\n        admin = self.inline_admin()\n        self.assertTrue(admin.has_add_permission(None))\n\n    def test_has_change_permission(self):\n        admin = self.inline_admin()\n        self.assertTrue(admin.has_change_permission(None))\n\n    def test_has_delete_permission(self):\n        admin = self.inline_admin()\n        self.assertTrue(admin.has_delete_permission(None))\n\n    def test_has_view_permission(self):\n        admin = self.inline_admin()\n        self.assertTrue(admin.has_view_permission(None))\n\n    def test_inline_model_admin_checks(self):\n        checks = InlineModelAdminChecks(None)\n        self.assertEqual(checks.model_admin_checks, [])\n\nclass NestedObjectsTests(SimpleTestCase):\n\n    def test_collect(self):\n        obj = MyModel.objects.create(name='Test')\n        inline_obj = MyInlineModel.objects.create(parent=obj, name='Inline Test')\n        collector = NestedObjects()\n        collector.collect([inline_obj])\n        self.assertEqual(collector.protected, [inline_obj])\n\n    def test_collect_with_permission(self):\n        obj = MyModel.objects.create(name='Test')\n        inline_obj = MyInlineModel.objects.create(parent=obj, name='Inline Test')\n        user = Permission.objects.create(codename='can_delete_myinlinemodel', content_type=MyInlineModel._meta.content_type)\n        collector = NestedObjects(using='default')\n        collector.collect([inline_obj])\n        self.assertEqual(collector.protected, [inline_obj])\n\n"], "sample_138": ["\nfrom sympy.matrices.expressions.blockmatrix import ( block_collapse, bc_matmul, bc_block_plus_ident, BlockDiagMatrix, BlockMatrix, bc_dist, bc_matadd, bc_transpose, bc_inverse, blockcut, reblock_2x2, deblock)\nfrom sympy.matrices.expressions import (MatrixSymbol, Identity, Inverse, trace, Transpose, det, ZeroMatrix)\nfrom sympy.functions import transpose\nfrom sympy import symbols, Matrix, eye, zeros, diag\nfrom sympy.testing.pytest import raises\n\ndef test_BlockMatrix_creation():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n\n    raises(ValueError, lambda: BlockMatrix([[X, Z], [Y, X]]))\n    raises(ValueError, lambda: BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y, Z]]))\n\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert B.shape == (n + m, n + m)\n    assert B.blockshape == (2, 2)\n    assert B.rowblocksizes == [n, m]\n    assert B.colblocksizes == [n, m]\n\n    C = BlockMatrix([[Identity(n), Z]])\n    assert C.shape == (n, n + m)\n    assert C.blockshape == (1, 2)\n    assert C.rowblocksizes == [n]\n    assert C.colblocksizes == [n, m]\n\ndef test_BlockMatrix_structurally_equal():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B1 = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    B2 = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert B1.structurally_equal(B2)\n    B3 = BlockMatrix([[X, Z], [Y, ZeroMatrix(n, m)]])\n    assert not B1.structurally_equal(B3)\n\ndef test_BlockMatrix_add():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B1 = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    B2 = BlockMatrix([[Identity(n), ZeroMatrix(n, m)], [ZeroMatrix(m, n), Identity(m)]])\n    B3 = B1 + B2\n    assert isinstance(B3, BlockMatrix)\n\ndef test_BlockMatrix_mul():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B1 = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    B2 = BlockMatrix([[Identity(n), ZeroMatrix(n, m)], [ZeroMatrix(m, n), Identity(m)]])\n    B3 = B1 * B2\n    assert isinstance(B3, BlockMatrix)\n\ndef test_BlockMatrix_transpose():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B1 = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    B2 = B1.transpose()\n    assert isinstance(B2, BlockMatrix)\n\ndef test_BlockMatrix_trace():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B1 = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert B1.trace() == trace(X) + trace(Y)\n\ndef test_BlockMatrix_determinant():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B1 = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert B1.determinant() == det(X)*det(Y)\n\ndef test_BlockDiagMatrix():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    B = BlockDiagMatrix(X, Y)\n    assert B.shape == (n + m, n + m)\n    assert B.blockshape == (2, 2)\n    assert B.diag == [X, Y]\n\ndef test_block_collapse():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    C = BlockMatrix([[Identity(n), Z]])\n    assert block_collapse(C*B) == BlockMatrix([[X, Z + Z*Y]])\n\ndef test_bc_matmul():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert bc_matmul(B*B) == B*B\n\ndef test_bc_block_plus_ident():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert bc_block_plus_ident(B + Identity(n + m)) == B + Identity(n + m)\n\ndef test_bc_dist():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert bc_dist(2*B) == BlockMatrix([[2*X, 2*Z], [ZeroMatrix(m, n), 2*Y]])\n\ndef test_bc_transpose():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert bc_transpose(B.transpose()) == B\n\ndef test_bc_inverse():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert bc_inverse(Inverse(B)) == Inverse(B)\n\ndef test_blockcut():\n    M = Matrix(4, 4, range(16))\n    B = blockcut(M, (1, 3), (1, 3))\n    assert isinstance(B, BlockMatrix)\n    assert Matrix(B.blocks[0, 1]) == Matrix([[1, 2, 3]])\n\ndef test_reblock_2x2():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert isinstance(reblock_2x2(B), BlockMatrix)\n\ndef test_deblock():\n    n, m, l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert isinstance(deblock(B), BlockMatrix)\n\n"], "sample_110": ["\nimport unittest\nimport numpy as np\nfrom sklearn.cluster import AffinityPropagation\nfrom sklearn.cluster._affinity_propagation import (\n    _equal_similarities_and_preferences, affinity_propagation\n)\nfrom sklearn.utils.testing import assert_array_equal, assert_raises\nfrom sklearn.exceptions import ConvergenceWarning\n\nclass TestAffinityPropagation(unittest.TestCase):\n    def test_equal_similarities_and_preferences(self):\n        S = np.array([[1, 2, 3],\n                      [2, 1, 4],\n                      [3, 4, 1]])\n        preference = 1\n        self.assertTrue(_equal_similarities_and_preferences(S, preference))\n\n        S = np.array([[1, 2, 3],\n                      [2, 1, 4],\n                      [3, 4, 2]])\n        preference = 1\n        self.assertFalse(_equal_similarities_and_preferences(S, preference))\n\n        S = np.array([[1, 1, 1],\n                      [1, 1, 1],\n                      [1, 1, 1]])\n        preference = 1\n        self.assertTrue(_equal_similarities_and_preferences(S, preference))\n\n        S = np.array([[1, 2, 3],\n                      [2, 1, 4],\n                      [3, 4, 1]])\n        preference = np.array([1, 1, 1])\n        self.assertTrue(_equal_similarities_and_preferences(S, preference))\n\n        S = np.array([[1, 2, 3],\n                      [2, 1, 4],\n                      [3, 4, 2]])\n        preference = np.array([1, 1, 1])\n        self.assertFalse(_equal_similarities_and_preferences(S, preference))\n\n    def test_affinity_propagation_basic(self):\n        X = np.array([[1, 2], [1, 4], [1, 0],\n                      [4, 2], [4, 4], [4, 0]])\n        cluster_centers_indices, labels = affinity_propagation(\n            -euclidean_distances(X, squared=True))\n        self.assertEqual(len(cluster_centers_indices), 2)\n        self.assertEqual(len(labels), 6)\n\n    def test_affinity_propagation_preference(self):\n        X = np.array([[1, 2], [1, 4], [1, 0],\n                      [4, 2], [4, 4], [4, 0]])\n        cluster_centers_indices, labels = affinity_propagation(\n            -euclidean_distances(X, squared=True), preference=10)\n        self.assertEqual(len(cluster_centers_indices), 6)\n        self.assertEqual(len(labels), 6)\n\n    def test_affinity_propagation_all_equal(self):\n        X = np.array([[1, 1], [1, 1], [1, 1]])\n        cluster_centers_indices, labels = affinity_propagation(\n            -euclidean_distances(X, squared=True))\n        self.assertEqual(len(cluster_centers_indices), 1)\n        assert_array_equal(labels, np.array([0, 0, 0]))\n\n        cluster_centers_indices, labels = affinity_propagation(\n            -euclidean_distances(X, squared=True), preference=2)\n        self.assertEqual(len(cluster_centers_indices), 3)\n        assert_array_equal(labels, np.array([0, 1, 2]))\n\n    def test_affinity_propagation_empty_input(self):\n        X = np.array([])\n        with assert_raises(ValueError):\n            affinity_propagation(-euclidean_distances(X, squared=True))\n\n    def test_affinity_propagation_non_square_input(self):\n        X = np.array([[1, 2], [1, 4], [1, 0]])\n        with assert_raises(ValueError):\n            affinity_propagation(-euclidean_distances(X, squared=True))\n\n    def test_affinity_propagation_convergence(self):\n        X = np.array([[1, 2], [1, 4], [1, 0],\n                      [4, 2], [4, 4], [4, 0]])\n        cluster_centers_indices, labels, n_iter = affinity_propagation(\n            -euclidean_distances(X, squared=True), return_n_iter=True)\n        self.assertGreater(n_iter, 0)\n\n    def test_affinity_propagation_damping(self):\n        X = np.array([[1, 2], [1, 4], [1, 0],\n                      [4, 2], [4, 4], [4, 0]])\n        cluster_centers_indices, labels = affinity_propagation(\n            -euclidean_distances(X, squared=True), damping=0.6)\n        self.assertEqual(len(cluster_centers_indices), 2)\n        self.assertEqual(len(labels), 6)\n\n    def test_affinity_propagation_max_iter(self):\n        X = np.array([[1, 2], [1, 4], [1, 0],\n                      [4, 2], [4, 4], [4, 0]])\n        cluster_centers_indices, labels = affinity_propagation(\n            -euclidean_distances(X, squared=True), max_iter=10)\n        self.assertEqual(len(cluster_centers_indices), 2)\n        self.assertEqual(len(labels), 6)\n\n    def test_affinity_propagation_convergence_iter(self):\n        X = np.array([[1, 2], [1, 4], [1, 0],\n                      [4, 2], [4, 4], [4, 0]])\n        cluster_centers_indices, labels = affinity_propagation(\n            -euclidean_distances(X, squared=True), convergence_iter=5)\n        self.assertEqual(len(cluster_centers_indices), 2)\n        self.assertEqual(len(labels), 6)\n\n    def test_affinity_propagation_copy(self):\n        X = np.array([[1, 2], [1, 4], [1, 0],\n                      [4, 2], [4, 4], [4, 0]])\n        X_copy = X.copy()\n        affinity_propagation(-euclidean_distances(X, squared=True), copy=False)\n        assert_array_equal(X, X_copy)\n\n    def test_affinity_propagation_class(self):\n        X = np.array([[1, 2], [1, 4], [1, 0],\n                      [4, 2], [4, 4], [4, 0]])\n        model = AffinityPropagation()\n        model.fit(X)\n        self.assertEqual(len(model.cluster_centers_indices_), 2)\n        self.assertEqual(len(model.labels_), 6)\n\n    def test_affinity_propagation_class_precomputed(self):\n        X = np.array([[1, 2], [1, 4], [1, 0],\n                      [4, 2], [4, 4], [4, 0]])\n        S = -euclidean_distances(X, squared=True)\n        model = AffinityPropagation(affinity='precomputed')\n        model.fit(S)\n        self.assertEqual(len(model.cluster_centers_indices_), 2)\n        self.assertEqual(len(model.labels_), 6)\n\n    def test_affinity_propagation_class_predict(self):\n        X = np.array([[1, 2], [1, 4], [1, 0],\n                      [4, 2], [4, 4], [4, 0]])\n        model = AffinityPropagation()\n        model.fit(X)\n        labels = model.predict(X)\n        self.assertEqual(len(labels), 6)\n\n    def test_affinity_propagation_class_predict_precomputed(self):\n        X = np.array([[1, 2], [1, 4], [1, 0],\n                      [4, 2], [4, 4], [4, 0]])\n        S = -euclidean_distances(X, squared=True)\n        model = AffinityPropagation(affinity='precomputed')\n        model.fit(S)\n        labels = model.predict(S)\n        self.assertEqual(len(labels), 6)\n\n    def test_affinity_propagation_class_fit_predict(self):\n        X = np.array([[1, 2], [1, 4], [1, 0],\n                      [4, 2], [4, 4], [4, 0]])\n        model = AffinityPropagation()\n        labels = model.fit_predict(X)\n        self.assertEqual(len(labels), 6)\n\n    def test_affinity_propagation_class_fit_predict_precomputed(self):\n        X = np.array([[1, 2], [1, 4], [1, 0],\n                      [4, 2], [4, 4], [4, 0]])\n        S = -euclidean_distances(X, squared=True)\n        model = AffinityPropagation(affinity='precomputed')\n        labels = model.fit_predict(S)\n        self.assertEqual(len(labels), 6)\n\n    def test_affinity_propagation_no_convergence(self):\n        X = np.array([[1, 1], [1, 1], [1, 1]])\n        with warnings.catch_warnings(record=True) as w:\n            model = AffinityPropagation()\n            model.fit(X)\n            assert_array_equal(model.labels_, np.array([-1, -1, -1]))\n            assert len(w) == 1\n            assert isinstance(w[-1].category, ConvergenceWarning)\n\n"], "sample_46": ["\nfrom django.db.backends.ddl_references import (\n    Columns,\n    Expressions,\n    ForeignKeyName,\n    IndexName,\n    Statement,\n    Table,\n    IndexColumns,\n)\nfrom django.db.models import F\n\ndef test_table():\n    table = Table('my_table', lambda x: x)\n    assert str(table) == 'my_table'\n    assert table.references_table('my_table') == True\n    table.rename_table_references('my_table', 'new_table')\n    assert str(table) == 'new_table'\n    assert table.references_table('my_table') == False\n\ndef test_columns():\n    columns = Columns('my_table', ['col1', 'col2'], lambda x: x)\n    assert str(columns) == 'col1, col2'\n    assert columns.references_table('my_table') == True\n    assert columns.references_column('my_table', 'col1') == True\n    columns.rename_column_references('my_table', 'col1', 'new_col1')\n    assert str(columns) == 'new_col1, col2'\n    assert columns.references_column('my_table', 'col1') == False\n\ndef test_index_name():\n    index_name = IndexName('my_table', ['col1', 'col2'], '_idx', lambda t, c, s: f'{t}_{\"_\".join(c)}{s}')\n    assert str(index_name) == 'my_table_col1_col2_idx'\n\ndef test_index_columns():\n    index_columns = IndexColumns('my_table', ['col1', 'col2'], lambda x: x, opclasses=['text_pattern_ops', 'integer_ops'])\n    assert str(index_columns) == 'col1 text_pattern_ops, col2 integer_ops'\n\ndef test_foreign_key_name():\n    fk_name = ForeignKeyName('from_table', ['from_col'], 'to_table', ['to_col'], '%s_to_%s', lambda t, c, s: f'{t}_{\"_\".join(c)}{s}')\n    assert str(fk_name) == 'from_table_from_col_to_to_col'\n    assert fk_name.references_table('from_table') == True\n    assert fk_name.references_table('to_table') == True\n    assert fk_name.references_column('from_table', 'from_col') == True\n    assert fk_name.references_column('to_table', 'to_col') == True\n    fk_name.rename_table_references('from_table', 'new_from_table')\n    assert fk_name.references_table('from_table') == False\n    assert fk_name.references_table('new_from_table') == True\n    assert str(fk_name) == 'new_from_table_from_col_to_to_col'\n\ndef test_statement():\n    statement = Statement('SELECT * FROM %s WHERE %s = %s', table=Table('my_table', lambda x: x), column=Columns('my_table', ['col1'], lambda x: x), value=F('value'))\n    assert statement.references_table('my_table') == True\n    assert statement.references_column('my_table', 'col1') == True\n    statement.rename_table_references('my_table', 'new_table')\n    assert statement.references_table('my_table') == False\n    assert statement.references_table('new_table') == True\n    assert str(statement) == 'SELECT * FROM new_table WHERE col1 = value'\n\ndef test_expressions():\n    class Compiler:\n        def __init__(self):\n            self.query = None\n        def compile(self, expressions):\n            return 'SELECT * FROM my_table WHERE %s', [expressions]\n        def _gen_cols(self, expressions):\n            return expressions\n    expressions = Expressions('my_table', F('col1') + 1, Compiler(), lambda x: x)\n    assert str(expressions) == 'SELECT * FROM my_table WHERE col1 + 1'\n    expressions.rename_table_references('my_table', 'new_table')\n    assert str(expressions) == 'SELECT * FROM new_table WHERE col1 + 1'\n    expressions.rename_column_references('my_table', 'col1', 'new_col1')\n    assert str(expressions) == 'SELECT * FROM new_table WHERE new_col1 + 1'\n\n\n\n"], "sample_137": ["\nimport unittest\nfrom sympy.utilities.iterables import (\n    _partition, _set_partitions, binary_partitions, bracelets, capture, cartes,\n    common_prefix, common_suffix, connected_components, dict_merge,\n    filter_symbols, flatten, generate_bell, generate_derangements,\n    generate_involutions, generate_oriented_forest, group, has_dups, ibin,\n    iproduct, kbins, minlex, multiset, multiset_combinations,\n    multiset_partitions, multiset_permutations, necklaces, numbered_symbols,\n    ordered, partitions, permutations, postfixes, postorder_traversal,\n    prefixes, reshape, rotate_left, rotate_right, runs, sift,\n    strongly_connected_components, subsets, take, topological_sort,\n    unflatten, uniq, variations, ordered_partitions, rotations, is_palindromic,\n    permute_signs, signed_permutations\n)\nfrom sympy.utilities.enumerative import (\n    factoring_visitor, multiset_partitions_taocp\n)\n\nclass TestIterables(unittest.TestCase):\n\n    def test_binary_partitions(self):\n        self.assertEqual(list(binary_partitions(4)), [(4,), (3, 1), (2, 2), (2, 1, 1), (1, 1, 1, 1)])\n\n    def test_bracelets(self):\n        self.assertEqual(list(bracelets(4, 2)), [(0, 0, 0, 0), (0, 0, 0, 1), (0, 0, 1, 1), (0, 1, 0, 1), (0, 1, 1, 1), (1, 1, 1, 1)])\n\n    def test_capture(self):\n        self.assertEqual(capture(lambda x: x**2, 2), 4)\n\n    def test_cartes(self):\n        self.assertEqual(list(cartes([1, 2], [3, 4])), [(1, 3), (1, 4), (2, 3), (2, 4)])\n\n    def test_common_prefix(self):\n        self.assertEqual(common_prefix(['abcde', 'abcdef', 'abc']), 'abc')\n\n    def test_common_suffix(self):\n        self.assertEqual(common_suffix(['abcde', 'abcdef', 'cde']), 'cde')\n\n    def test_connected_components(self):\n        self.assertEqual(connected_components([[1, 2], [2, 3], [4]]), [{1, 2, 3}, {4}])\n\n    def test_dict_merge(self):\n        self.assertEqual(dict_merge({'a': 1, 'b': 2}, {'b': 3, 'c': 4}), {'a': 1, 'b': 3, 'c': 4})\n\n    def test_filter_symbols(self):\n        from sympy import symbols\n        x, y, z = symbols('x y z')\n        self.assertEqual(list(filter_symbols([x + 1, y*2, z**3])), [x, y, z])\n\n    def test_flatten(self):\n        self.assertEqual(list(flatten([[1, 2], [3, 4]])), [1, 2, 3, 4])\n\n    def test_generate_bell(self):\n        bell_numbers = [1, 1, 2, 5, 15, 52, 203]\n        for i, p in enumerate(generate_bell(7)):\n            self.assertEqual(len(list(p)), bell_numbers[i])\n\n    def test_generate_derangements(self):\n        self.assertEqual(list(generate_derangements([0, 1, 2])), [[1, 2, 0], [2, 0, 1]])\n\n    def test_generate_involutions(self):\n        self.assertEqual(list(generate_involutions([0, 1, 2])), [[0, 1, 2], [0, 2, 1], [1, 0, 2], [1, 2, 0], [2, 0, 1], [2, 1, 0]])\n\n    def test_generate_oriented_forest(self):\n        self.assertEqual(list(generate_oriented_forest(4))[:5], [[0, 1, 2, 3], [0, 1, 2, 2], [0, 1, 2, 1], [0, 1, 2, 0], [0, 1, 1, 1]])\n\n    def test_group(self):\n        self.assertEqual(list(group([1, 2, 1, 3, 2, 1])), [(1, [1, 1, 1]), (2, [2, 2]), (3, [3])])\n\n    def test_has_dups(self):\n        self.assertTrue(has_dups([1, 2, 1]))\n        self.assertFalse(has_dups([1, 2, 3]))\n\n    def test_ibin(self):\n        self.assertEqual(list(ibin(5)), [0, 1, 10, 11, 100])\n\n    def test_iproduct(self):\n        self.assertEqual(list(iproduct([1, 2], [3, 4])), [(1, 3), (1, 4), (2, 3), (2, 4)])\n\n    def test_kbins(self):\n        self.assertEqual(list(kbins([0, 1, 2, 3], 2)), [[[0, 1], [2, 3]], [[0, 2], [1, 3]], [[0, 3], [1, 2]], [[0], [1, 2, 3]], [[1], [0, 2, 3]], [[2], [0, 1, 3]], [[3], [0, 1, 2]]])\n\n    def test_minlex(self):\n        self.assertEqual(minlex([2, 1, 0]), [0, 1, 2])\n\n    def test_multiset(self):\n        self.assertEqual(multiset([1, 1, 2, 3]), {1: 2, 2: 1, 3: 1})\n\n    def test_multiset_combinations(self):\n        self.assertEqual(list(multiset_combinations([1, 1, 2], 2)), [(1, 1), (1, 2), (2, 1)])\n\n    def test_multiset_partitions(self):\n        self.assertEqual(list(multiset_partitions([1, 1, 2], 2)), [[[1, 1], [2]], [[1, 2], [1]]])\n\n    def test_multiset_permutations(self):\n        self.assertEqual(list(multiset_permutations([1, 1, 2])), [(1, 1, 2), (1, 2, 1), (2, 1, 1)])\n\n    def test_necklaces(self):\n        self.assertEqual(list(necklaces(4, 2)), [(0, 0, 0, 0), (0, 0, 0, 1), (0, 0, 1, 1), (0, 1, 0, 1), (0, 1, 1, 1), (1, 1, 1, 1)])\n\n    def test_numbered_symbols(self):\n        from sympy import symbols\n        self.assertEqual(list(numbered_symbols('x', 3)), [symbols('x_0'), symbols('x_1'), symbols('x_2')])\n\n    def test_ordered(self):\n        self.assertEqual(list(ordered([1, 2, 3])), [(1, 2, 3)])\n\n    def test_partitions(self):\n        self.assertEqual(list(partitions(4)), [(4,), (3, 1), (2, 2), (2, 1, 1), (1, 1, 1, 1)])\n\n    def test_permutations(self):\n        self.assertEqual(list(permutations([1, 2, 3])), [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)])\n\n    def test_postfixes(self):\n        self.assertEqual(list(postfixes('abc')), ['c', 'bc', 'abc'])\n\n    def test_postorder_traversal(self):\n        # Example tree:\n        #     1\n        #    / \\\n        #   2   3\n        #  / \\\n        # 4   5\n        tree = {1: [2, 3], 2: [4, 5], 3: [], 4: [], 5: []}\n        self.assertEqual(list(postorder_traversal(tree, 1)), [4, 5, 2, 3, 1])\n\n    def test_prefixes(self):\n        self.assertEqual(list(prefixes('abc')), ['a', 'ab', 'abc'])\n\n    def test_reshape(self):\n        self.assertEqual(list(reshape([1, 2, 3, 4], (2, 2))), [[1, 2], [3, 4]])\n\n    def test_rotate_left(self):\n        self.assertEqual(rotate_left([1, 2, 3]), [2, 3, 1])\n\n    def test_rotate_right(self):\n        self.assertEqual(rotate_right([1, 2, 3]), [3, 1, 2])\n\n    def test_runs(self):\n        self.assertEqual(list(runs([0, 1, 2, 2, 1, 4, 3, 2, 2])), [[0, 1, 2], [2], [1, 4], [3], [2], [2]])\n\n    def test_sift(self):\n        self.assertEqual(list(sift([1, 2, 3, 4, 5], lambda x: x % 2 == 0)), [2, 4])\n\n    def test_strongly_connected_components(self):\n        self.assertEqual(strongly_connected_components([[1, 2], [2, 3], [3, 1], [4]]), [{1, 2, 3}, {4}])\n\n    def test_subsets(self):\n        self.assertEqual(list(subsets([1, 2, 3])), [(), (1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)])\n\n    def test_take(self):\n        self.assertEqual(list(take([1, 2, 3, 4, 5], 3)), [1, 2, 3])\n\n    def test_topological_sort(self):\n        # Example graph:\n        # 0 -> 1 -> 2\n        # ^     |\n        # |     v\n        # 3 -----\n        graph = {0: [1], 1: [2], 2: [], 3: [1, 0]}\n        self.assertEqual(list(topological_sort(graph)), [3, 0, 1, 2])\n\n    def test_unflatten(self):\n        self.assertEqual(list(unflatten([1, 2, 3, 4], 2)), [[1, 2], [3, 4]])\n\n    def test_uniq(self):\n        self.assertEqual(list(uniq([1, 2, 2, 3, 1])), [1, 2, 3])\n\n    def test_variations(self):\n        self.assertEqual(list(variations([1, 2, 3], 2)), [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)])\n\n    def test_ordered_partitions(self):\n        self.assertEqual(list(ordered_partitions(4)), [(4,), (3, 1), (2, 2), (2, 1, 1), (1, 1, 1, 1)])\n\n    def test_rotations(self):\n        self.assertEqual(list(rotations([1, 2, 3])), [[1, 2, 3], [2, 3, 1], [3, 1, 2]])\n\n    def test_is_palindromic(self):\n        self.assertTrue(is_palindromic('racecar'))\n        self.assertFalse(is_palindromic('hello'))\n\n    def test_permute_signs(self):\n        self.assertEqual(list(permute_signs((0, 1, 2))), [(0, 1, 2), (0, -1, 2), (0, 1, -2), (0, -1, -2)])\n\n    def test_signed_permutations(self):\n        self.assertEqual(list(signed_permutations((0, 1, 2))), [(0, 1, 2), (0, -1, 2), (0, 1, -2), (0, -1, -2), (0, 2, 1), (0, -2, 1), (0, 2, -1), (0, -2, -1), (1, 0, 2), (-1, 0, 2), (1, 0, -2), (-1, 0, -2), (1, 2, 0), (-1, 2, 0), (1, -2, 0), (-1, -2, 0), (2, 0, 1), (-2, 0, 1), (2, 0, -1), (-2, 0, -1), (2, 1, 0), (-2, 1, 0), (2, -1, 0), (-2, -1, 0)])\n\n\n\n"], "sample_44": ["\nfrom django.forms.models import (\n    BaseModelFormSet,\n    BaseInlineFormSet,\n    InlineForeignKeyField,\n    ModelChoiceField,\n    ModelChoiceIterator,\n    ModelChoiceIteratorValue,\n    ModelMultipleChoiceField,\n    modelform_defines_fields,\n    modelformset_factory,\n    inlineformset_factory,\n)\nfrom django.test import SimpleTestCase\nfrom django.forms import ModelForm\nfrom django.core.exceptions import ValidationError\nfrom django.db import models\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n\nclass Article(models.Model):\n    headline = models.CharField(max_length=200)\n    pub_date = models.DateTimeField()\n    categories = models.ManyToManyField(Category)\n\nclass Writer(models.Model):\n    name = models.CharField(max_length=100)\n\nclass TestModelChoiceIterator(SimpleTestCase):\n    def test_empty_label(self):\n        field = ModelChoiceField(queryset=Author.objects.all(), empty_label=\"Select Author\")\n        iterator = field.iterator\n        self.assertEqual(len(list(iterator(field))), 1)\n\n    def test_choices(self):\n        field = ModelChoiceField(queryset=Author.objects.all())\n        iterator = field.iterator\n        choices = list(iterator(field))\n        self.assertEqual(len(choices), Author.objects.count() + 1 if field.empty_label else Author.objects.count())\n\n    def test_choice_value(self):\n        field = ModelChoiceField(queryset=Author.objects.all())\n        iterator = field.iterator\n        choices = list(iterator(field))\n        self.assertEqual(choices[0][0].value, \"\")\n\nclass TestModelChoiceField(SimpleTestCase):\n    def test_to_python(self):\n        field = ModelChoiceField(queryset=Author.objects.all())\n        author = Author.objects.create(name=\"Test Author\")\n        self.assertEqual(field.to_python(author.pk), author)\n\n    def test_to_python_invalid(self):\n        field = ModelChoiceField(queryset=Author.objects.all())\n        with self.assertRaises(ValidationError):\n            field.to_python(9999)\n\n    def test_prepare_value(self):\n        field = ModelChoiceField(queryset=Author.objects.all())\n        author = Author.objects.create(name=\"Test Author\")\n        self.assertEqual(field.prepare_value(author), author.pk)\n\nclass TestModelMultipleChoiceField(SimpleTestCase):\n    def test_to_python(self):\n        field = ModelMultipleChoiceField(queryset=Author.objects.all())\n        author1 = Author.objects.create(name=\"Test Author 1\")\n        author2 = Author.objects.create(name=\"Test Author 2\")\n        self.assertEqual(field.to_python([author1.pk, author2.pk]), [author1, author2])\n\n    def test_to_python_invalid(self):\n        field = ModelMultipleChoiceField(queryset=Author.objects.all())\n        with self.assertRaises(ValidationError):\n            field.to_python([1, 2, 9999])\n\n    def test_prepare_value(self):\n        field = ModelMultipleChoiceField(queryset=Author.objects.all())\n        author1 = Author.objects.create(name=\"Test Author 1\")\n        author2 = Author.objects.create(name=\"Test Author 2\")\n        self.assertEqual(field.prepare_value([author1, author2]), [author1.pk, author2.pk])\n\nclass TestBaseModelFormSet(SimpleTestCase):\n    def test_initial_form_count(self):\n        class MyFormSet(BaseModelFormSet):\n            form = ModelForm\n        formset = MyFormSet(queryset=Author.objects.all())\n        self.assertEqual(formset.initial_form_count(), 0)\n\nclass TestBaseInlineFormSet(SimpleTestCase):\n    def test_get_unique_error_message(self):\n        class MyInlineFormSet(BaseInlineFormSet):\n            form = ModelForm\n        formset = MyInlineFormSet(instance=Book.objects.create(title=\"Test Book\"), queryset=Author.objects.all())\n        self.assertEqual(formset.get_unique_error_message([\"author\"]), \"This field must be unique.\")\n\nclass TestInlineForeignKeyField(SimpleTestCase):\n    def test_clean(self):\n        parent = Book.objects.create(title=\"Test Book\")\n        field = InlineForeignKeyField(parent, to_field=\"author\")\n        self.assertEqual(field.clean(parent.author_id), parent)\n\nclass TestModelformsetFactory(SimpleTestCase):\n    def test_formset(self):\n        formset = modelformset_factory(Book, form=ModelForm)\n        self.assertTrue(issubclass(formset, BaseModelFormSet))\n\nclass TestInlineformsetFactory(SimpleTestCase):\n    def test_formset(self):\n        formset = inlineformset_factory(Book, Author, form=ModelForm)\n        self.assertTrue(issubclass(formset, BaseInlineFormSet))\n\nclass TestModelformDefinesFields(SimpleTestCase):\n    def test_true(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Author\n                fields = \"__all__\"\n        self.assertTrue(modelform_defines_fields(MyForm))\n\n    def test_false(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Author\n        self.assertFalse(modelform_defines_fields(MyForm))\n\n"], "sample_84": ["\nfrom _pytest.python import (\n    Function,\n    FunctionDefinition,\n    Metafunc,\n    get_default_arg_names,\n    showfixtures,\n    show_fixtures_per_test,\n    _idval,\n    _idvalset,\n    idmaker,\n    CallSpec2,\n    _ascii_escaped_by_config,\n    _find_parametrized_scope,\n    _validate_if_using_arg_names,\n    _resolve_arg_ids,\n    _resolve_arg_value_types,\n)\nfrom _pytest.fixtures import FixtureRequest, fixtures\nfrom _pytest.config import Config\nfrom _pytest.nodes import Item\nfrom _pytest.mark import ParameterSet\nimport pytest\nfrom typing import List, Tuple, Any\n\ndef test_Function_setup():\n    function = Function(\"test_function\", None, None, None, None, None, None, None, None)\n    function.setup()\n    assert function._request is not None\n\ndef test_FunctionDefinition_runtest():\n    with pytest.raises(RuntimeError):\n        FunctionDefinition(\"test_function\", None, None, None, None, None, None, None, None).runtest()\n\ndef test_FunctionDefinition_setup():\n    with pytest.raises(RuntimeError):\n        FunctionDefinition(\"test_function\", None, None, None, None, None, None, None, None).setup()\n\ndef test_Metafunc_parametrize():\n    metafunc = Metafunc(None, None, None, None, None)\n    metafunc.parametrize(\"arg1\", [1, 2], indirect=True)\n    assert metafunc._calls[0].funcargs[\"arg1\"] == 1\n\ndef test_Metafunc_parametrize_indirect():\n    metafunc = Metafunc(None, None, None, None, None)\n    metafunc.parametrize(\"arg1\", [1, 2], indirect=True)\n    assert metafunc._calls[0].funcargs[\"arg1\"] == 1\n\ndef test_Metafunc_parametrize_ids():\n    metafunc = Metafunc(None, None, None, None, None)\n    metafunc.parametrize(\"arg1\", [1, 2], ids=[\"one\", \"two\"])\n    assert metafunc._calls[0].id == \"one\"\n\ndef test_get_default_arg_names():\n    def func(a=1, b=2):\n        pass\n    assert get_default_arg_names(func) == {\"a\", \"b\"}\n\ndef test_showfixtures():\n    config = Config()\n    showfixtures(config)\n\ndef test_show_fixtures_per_test():\n    config = Config()\n    show_fixtures_per_test(config)\n\ndef test__idval():\n    assert _idval(\"test\", \"arg\", 0, None, None, None) == \"test\"\n\ndef test__idvalset():\n    parameterset = ParameterSet([1, 2], [], None, None, None)\n    assert _idvalset(0, parameterset, [\"arg1\", \"arg2\"], None, None, None) == \"1-2\"\n\ndef test_idmaker():\n    parametersets = [ParameterSet([1, 2], [], None, None, None), ParameterSet([3, 4], [], None, None, None)]\n    assert idmaker([\"arg1\", \"arg2\"], parametersets, None, None, None) == [\"1-2\", \"3-4\"]\n\ndef test_CallSpec2_setmulti2():\n    callspec = CallSpec2(None)\n    callspec.setmulti2({\"arg1\": \"funcargs\", \"arg2\": \"params\"}, [\"arg1\", \"arg2\"], [1, 2], \"id\", [], 0, 0)\n    assert callspec.funcargs == {\"arg1\": 1}\n    assert callspec.params == {\"arg2\": 2}\n\ndef test__ascii_escaped_by_config():\n    assert _ascii_escaped_by_config(\"test\", None) == \"test\"\n\ndef test__find_parametrized_scope():\n    assert _find_parametrized_scope([\"arg1\"], {}, True) == \"function\"\n\ndef test__validate_if_using_arg_names():\n    _validate_if_using_arg_names([\"arg1\"], True)\n\ndef test__resolve_arg_ids():\n    ids = [\"id1\", \"id2\"]\n    assert _resolve_arg_ids([\"arg1\", \"arg2\"], ids, [ParameterSet([1, 2], [], None, None, None), ParameterSet([3, 4], [], None, None, None)], None) == [\"id1\", \"id2\"]\n\ndef test__resolve_arg_value_types():\n    assert _resolve_arg_value_types([\"arg1\", \"arg2\"], True) == {\"arg1\": \"params\", \"arg2\": \"params\"}\n\n\n\n"], "sample_144": ["\nfrom sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt, atan, atan2, nan, Symbol, re, im, sign, arg, MatrixSymbol, MatrixElement)\nfrom sympy.assumptions.refine import refine, handlers_dict\nfrom sympy.core.logic import fuzzy_not\n\ndef test_refine_abs():\n    x = Symbol('x', real=True)\n    assert refine(Abs(x), Q.real(x)) == x\n    assert refine(Abs(x), Q.positive(x)) == x\n    assert refine(Abs(x), Q.negative(x)) == -x\n    assert refine(Abs(2*x), Q.real(x)) == 2*Abs(x)\n    assert refine(Abs(-2*x), Q.real(x)) == 2*x\n    assert refine(Abs(x*y), Q.positive(x) & Q.real(y)) == x*Abs(y)\n\ndef test_refine_Pow():\n    x = Symbol('x', real=True)\n    y = Symbol('y', real=True)\n    z = Symbol('z', real=True)\n    assert refine((-1)**x, Q.real(x)) == (-1)**x\n    assert refine((-1)**x, Q.even(x)) == 1\n    assert refine((-1)**x, Q.odd(x)) == -1\n    assert refine((-1)**(x+y), Q.even(x)) == (-1)**y\n    assert refine((-1)**(x+y+z), Q.odd(x) & Q.odd(z)) == (-1)**y\n    assert refine((-1)**(x+y+2), Q.odd(x)) == (-1)**(y + 1)\n    assert refine((-1)**(x+3), True) == (-1)**(x + 1)\n\ndef test_refine_atan2():\n    x = Symbol('x', real=True)\n    y = Symbol('y', real=True)\n    assert refine(atan2(y,x), Q.real(y) & Q.positive(x)) == atan(y/x)\n    assert refine(atan2(y,x), Q.negative(y) & Q.negative(x)) == atan(y/x) - pi\n    assert refine(atan2(y,x), Q.positive(y) & Q.negative(x)) == atan(y/x) + pi\n    assert refine(atan2(y,x), Q.zero(y) & Q.negative(x)) == pi\n    assert refine(atan2(y,x), Q.positive(y) & Q.zero(x)) == pi/2\n    assert refine(atan2(y,x), Q.negative(y) & Q.zero(x)) == -pi/2\n    assert refine(atan2(y,x), Q.zero(y) & Q.zero(x)) == nan\n\ndef test_refine_re():\n    x = Symbol('x')\n    assert refine(re(x), Q.real(x)) == x\n    assert refine(re(x), Q.imaginary(x)) == 0\n\ndef test_refine_im():\n    x = Symbol('x')\n    assert refine(im(x), Q.real(x)) == 0\n    assert refine(im(x), Q.imaginary(x)) == -I*x\n\ndef test_refine_arg():\n    x = Symbol('x', real=True)\n    assert refine(arg(x), Q.positive(x)) == 0\n    assert refine(arg(x), Q.negative(x)) == pi\n\ndef test_refine_sign():\n    x = Symbol('x', real=True)\n    y = Symbol('y', imaginary=True)\n    assert refine(sign(x), Q.positive(x) & Q.nonzero(x)) == 1\n    assert refine(sign(x), Q.negative(x) & Q.nonzero(x)) == -1\n    assert refine(sign(x), Q.zero(x)) == 0\n    assert refine(sign(y), Q.positive(im(y))) == I\n    assert refine(sign(y), Q.negative(im(y))) == -I\n\ndef test_refine_matrixelement():\n    X = MatrixSymbol('X', 3, 3)\n    assert refine(MatrixElement(X, 0, 1), Q.symmetric(X)) == MatrixElement(X, 0, 1)\n    assert refine(MatrixElement(X, 1, 0), Q.symmetric(X)) == MatrixElement(X, 0, 1)\n\n"], "sample_58": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nfrom django.db.backends.postgresql.client import DatabaseClient\n\nclass DatabaseClientTest(unittest.TestCase):\n\n    @patch('django.db.backends.postgresql.client.DatabaseClient.runshell')\n    def test_runshell_handles_sigint(self, mock_runshell):\n        client = DatabaseClient()\n        client.runshell([])\n        mock_runshell.assert_called_once()\n\n    def test_settings_to_cmd_args_env_default_db(self):\n        settings = {'HOST': 'localhost', 'PORT': 5432, 'USER': 'myuser'}\n        parameters = ['param1', 'param2']\n        client = DatabaseClient()\n        args, env = client.settings_to_cmd_args_env(settings, parameters)\n        self.assertEqual(args, ['psql', '-U', 'myuser', '-h', 'localhost', '-p', '5432', 'param1', 'param2', 'postgres'])\n        self.assertEqual(env, None)\n\n    def test_settings_to_cmd_args_env_with_dbname(self):\n        settings = {'HOST': 'localhost', 'PORT': 5432, 'USER': 'myuser', 'NAME': 'mydb'}\n        parameters = ['param1', 'param2']\n        client = DatabaseClient()\n        args, env = client.settings_to_cmd_args_env(settings, parameters)\n        self.assertEqual(args, ['psql', '-U', 'myuser', '-h', 'localhost', '-p', '5432', 'param1', 'param2', 'mydb'])\n        self.assertEqual(env, None)\n\n    def test_settings_to_cmd_args_env_with_password(self):\n        settings = {'HOST': 'localhost', 'PORT': 5432, 'USER': 'myuser', 'PASSWORD': 'mypassword'}\n        parameters = ['param1', 'param2']\n        client = DatabaseClient()\n        args, env = client.settings_to_cmd_args_env(settings, parameters)\n        self.assertEqual(args, ['psql', '-U', 'myuser', '-h', 'localhost', '-p', '5432', 'param1', 'param2'])\n        self.assertEqual(env, {'PGPASSWORD': 'mypassword'})\n\n    def test_settings_to_cmd_args_env_with_options(self):\n        settings = {'HOST': 'localhost', 'PORT': 5432, 'USER': 'myuser', 'OPTIONS': {'passfile': '/path/to/passfile', 'service': 'myservice'}}\n        parameters = ['param1', 'param2']\n        client = DatabaseClient()\n        args, env = client.settings_to_cmd_args_env(settings, parameters)\n        self.assertEqual(args, ['psql', '-U', 'myuser', '-h', 'localhost', '-p', '5432', 'param1', 'param2'])\n        self.assertEqual(env, {'PGSERVICE': 'myservice', 'PGPASSFILE': '/path/to/passfile'})\n\n    def test_settings_to_cmd_args_env_with_ssl(self):\n        settings = {'HOST': 'localhost', 'PORT': 5432, 'USER': 'myuser', 'OPTIONS': {'sslmode': 'require', 'sslrootcert': '/path/to/rootcert', 'sslcert': '/path/to/cert', 'sslkey': '/path/to/key'}}\n        parameters = ['param1', 'param2']\n        client = DatabaseClient()\n        args, env = client.settings_to_cmd_args_env(settings, parameters)\n        self.assertEqual(args, ['psql', '-U', 'myuser', '-h', 'localhost', '-p', '5432', 'param1', 'param2'])\n        self.assertEqual(env, {'PGSSLMODE': 'require', 'PGSSLROOTCERT': '/path/to/rootcert', 'PGSSLCERT': '/path/to/cert', 'PGSSLKEY': '/path/to/key'})\n\n"], "sample_94": ["\nimport ast\nimport inspect\nimport textwrap\nimport tokenize\nimport types\nfrom typing import List, Tuple\n\nfrom _pytest._code.source import Source, deindent, findsource, getrawcode, getstatementrange_ast\n\ndef test_source_init():\n    source = Source()\n    assert source.lines == []\n\n    source = Source([\"line1\", \"line2\"])\n    assert source.lines == [\"line1\", \"line2\"]\n\n    source = Source(\"line1\\nline2\")\n    assert source.lines == [\"line1\", \"line2\"]\n\n    def func():\n        pass\n\n    source = Source(func)\n    assert source.lines == inspect.getsource(func).splitlines()\n\ndef test_source_eq():\n    source1 = Source([\"line1\", \"line2\"])\n    source2 = Source([\"line1\", \"line2\"])\n    assert source1 == source2\n\n    source3 = Source([\"line1\", \"line3\"])\n    assert source1 != source3\n\ndef test_source_getitem():\n    source = Source([\"line1\", \"line2\", \"line3\"])\n    assert source[0] == \"line1\"\n    assert source[1:2] == Source([\"line2\"])\n\ndef test_source_iter():\n    source = Source([\"line1\", \"line2\", \"line3\"])\n    lines = list(source)\n    assert lines == [\"line1\", \"line2\", \"line3\"]\n\ndef test_source_len():\n    source = Source([\"line1\", \"line2\", \"line3\"])\n    assert len(source) == 3\n\ndef test_source_strip():\n    source = Source([\"\", \"line1\", \"line2\", \"\", \"\"])\n    stripped_source = source.strip()\n    assert stripped_source.lines == [\"line1\", \"line2\"]\n\ndef test_source_indent():\n    source = Source([\"line1\", \"line2\"])\n    indented_source = source.indent()\n    assert indented_source.lines == [\"    line1\", \"    line2\"]\n\ndef test_source_getstatement():\n    source = Source([\"\", \"def func():\", \"    pass\"])\n    statement = source.getstatement(1)\n    assert statement.lines == [\"def func():\", \"    pass\"]\n\ndef test_source_getstatementrange():\n    source = Source([\"\", \"def func():\", \"    pass\"])\n    start, end = source.getstatementrange(1)\n    assert start == 1\n    assert end == 3\n\ndef test_source_deindent():\n    source = Source([\"    line1\", \"        line2\"])\n    deindented_source = source.deindent()\n    assert deindented_source.lines == [\"line1\", \"line2\"]\n\ndef test_source_str():\n    source = Source([\"line1\", \"line2\"])\n    assert str(source) == \"line1\\nline2\"\n\ndef test_deindent():\n    lines = [\"    line1\", \"        line2\"]\n    deindented_lines = deindent(lines)\n    assert deindented_lines == [\"line1\", \"line2\"]\n\ndef test_findsource():\n    def func():\n        pass\n\n    source, lineno = findsource(func)\n    assert source.lines == inspect.getsource(func).splitlines()\n    assert lineno == 0\n\ndef test_getrawcode():\n    def func():\n        pass\n\n    code = getrawcode(func)\n    assert isinstance(code, types.CodeType)\n\ndef test_getstatementrange_ast():\n    source = Source([\"\", \"def func():\", \"    pass\"])\n    astnode = ast.parse(str(source), \"source\", \"exec\")\n    astnode, start, end = getstatementrange_ast(1, source, astnode=astnode)\n    assert start == 1\n    assert end == 3\n\n"], "sample_5": ["\nfrom django.db import models\nfrom django.db.models import signals, CASCADE, PROTECT, SET_NULL, SET_DEFAULT, DO_NOTHING\nfrom django.db.models.deletion import Collector, ProtectedError\nfrom django.test import TestCase\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\nclass RelatedModel(models.Model):\n    my_model = models.ForeignKey(MyModel, on_delete=CASCADE)\n\nclass TestCollector(TestCase):\n\n    def test_add(self):\n        collector = Collector('default')\n        obj1 = MyModel.objects.create(name='obj1')\n        obj2 = MyModel.objects.create(name='obj2')\n        collector.add([obj1, obj2])\n        self.assertEqual(len(collector.data[MyModel]), 2)\n\n    def test_add_field_update(self):\n        collector = Collector('default')\n        obj1 = MyModel.objects.create(name='obj1')\n        collector.add_field_update(MyModel._meta.get_field('name'), 'new_name', [obj1])\n        self.assertEqual(collector.field_updates[MyModel][(MyModel._meta.get_field('name'), 'new_name')], {obj1})\n\n    def test_can_fast_delete(self):\n        collector = Collector('default')\n        obj1 = MyModel.objects.create(name='obj1')\n        self.assertTrue(collector.can_fast_delete([obj1]))\n\n    def test_collect(self):\n        collector = Collector('default')\n        obj1 = MyModel.objects.create(name='obj1')\n        obj2 = RelatedModel.objects.create(my_model=obj1)\n        collector.collect([obj2])\n        self.assertEqual(len(collector.data[MyModel]), 1)\n        self.assertEqual(len(collector.data[RelatedModel]), 1)\n\n    def test_related_objects(self):\n        collector = Collector('default')\n        obj1 = MyModel.objects.create(name='obj1')\n        obj2 = RelatedModel.objects.create(my_model=obj1)\n        related_objs = collector.related_objects(RelatedModel._meta.get_field('my_model'), [obj1])\n        self.assertEqual(len(related_objs), 1)\n\n    def test_instances_with_model(self):\n        collector = Collector('default')\n        obj1 = MyModel.objects.create(name='obj1')\n        obj2 = RelatedModel.objects.create(my_model=obj1)\n        for model, obj in collector.instances_with_model():\n            if model == MyModel:\n                self.assertEqual(obj, obj1)\n            elif model == RelatedModel:\n                self.assertEqual(obj, obj2)\n\n    def test_sort(self):\n        collector = Collector('default')\n        obj1 = MyModel.objects.create(name='obj1')\n        obj2 = RelatedModel.objects.create(my_model=obj1)\n        collector.dependencies[MyModel] = {RelatedModel}\n        collector.sort()\n        self.assertEqual(list(collector.data.keys()), [RelatedModel, MyModel])\n\n    def test_delete(self):\n        collector = Collector('default')\n        obj1 = MyModel.objects.create(name='obj1')\n        obj2 = RelatedModel.objects.create(my_model=obj1)\n        collector.collect([obj2])\n        deleted_count, deleted_counter = collector.delete()\n        self.assertEqual(deleted_count, 2)\n        self.assertEqual(deleted_counter[MyModel._meta.label], 1)\n        self.assertEqual(deleted_counter[RelatedModel._meta.label], 1)\n\n    def test_protected_error(self):\n        collector = Collector('default')\n        obj1 = MyModel.objects.create(name='obj1')\n        obj2 = RelatedModel.objects.create(my_model=obj1, name='obj2')\n        with self.assertRaises(ProtectedError) as cm:\n            collector.collect([obj1], source=RelatedModel, collect_related=False)\n        self.assertEqual(cm.exception.protected_objects, [obj2])\n\n    def test_cascade(self):\n        collector = Collector('default')\n        obj1 = MyModel.objects.create(name='obj1')\n        obj2 = RelatedModel.objects.create(my_model=obj1)\n        collector.collect([obj1], source=RelatedModel, collect_related=False)\n        self.assertEqual(len(collector.data[MyModel]), 1)\n        self.assertEqual(len(collector.data[RelatedModel]), 1)\n\n    def test_set_null(self):\n        collector = Collector('default')\n        obj1 = MyModel.objects.create(name='obj1')\n        obj2 = RelatedModel.objects.create(my_model=obj1)\n        collector.add_field_update(RelatedModel._meta.get_field('my_model'), None, [obj2])\n        collector.delete()\n        self.assertIsNone(obj2.my_model)\n\n    def test_set_default(self):\n        collector = Collector('default')\n        obj1 = MyModel.objects.create(name='obj1')\n        obj2 = RelatedModel.objects.create(my_model=obj1)\n        collector.add_field_update(RelatedModel._meta.get_field('my_model'), 'new_default', [obj2])\n        collector.delete()\n        self.assertEqual(obj2.my_model, 'new_default')\n\n    def test_do_nothing(self):\n        collector = Collector('default')\n        obj1 = MyModel.objects.create(name='obj1')\n        obj2 = RelatedModel.objects.create(my_model=obj1)\n        collector.add_field_update(RelatedModel._meta.get_field('my_model'), obj1, [obj2])\n        collector.delete()\n        self.assertEqual(obj2.my_model, obj1)\n\n"], "sample_75": ["\nimport unittest\nfrom matplotlib.testing.compare import compare_images\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import (\n    axes_size as Size, host_subplot, make_axes_locatable, Grid, AxesGrid, ImageGrid)\nfrom mpl_toolkits.axes_grid1.anchored_artists import (\n    AnchoredAuxTransformBox, AnchoredDrawingArea, AnchoredEllipse,\n    AnchoredDirectionArrows, AnchoredSizeBar)\nfrom mpl_toolkits.axes_grid1.axes_divider import (\n    Divider, HBoxDivider, make_axes_area_auto_adjustable, SubplotDivider,\n    VBoxDivider)\nfrom mpl_toolkits.axes_grid1.axes_rgb import RGBAxes\nfrom mpl_toolkits.axes_grid1.inset_locator import (\n    zoomed_inset_axes, mark_inset, inset_axes, BboxConnectorPatch,\n    InsetPosition)\nimport mpl_toolkits.axes_grid1.mpl_axes\n\nclass TestAxesGrid(unittest.TestCase):\n\n    def test_grid_creation(self):\n        fig, axes = plt.subplots(2, 2)\n        grid = Grid(fig, 111, (2, 2))\n        self.assertEqual(len(grid.axes_all), 4)\n\n    def test_imagegrid_creation(self):\n        fig, axes = plt.subplots(2, 2)\n        grid = ImageGrid(fig, 111, (2, 2))\n        self.assertEqual(len(grid.axes_all), 4)\n\n    def test_colorbar_mode(self):\n        fig, axes = plt.subplots(2, 2)\n        grid = ImageGrid(fig, 111, (2, 2), cbar_mode='each')\n        self.assertEqual(len(grid.cbar_axes), 4)\n\n        grid = ImageGrid(fig, 111, (2, 2), cbar_mode='single')\n        self.assertEqual(len(grid.cbar_axes), 1)\n\n        grid = ImageGrid(fig, 111, (2, 2), cbar_mode='edge')\n        self.assertEqual(len(grid.cbar_axes), 4)\n\n        grid = ImageGrid(fig, 111, (2, 2), cbar_mode=None)\n        self.assertEqual(len(grid.cbar_axes), 0)\n\n    def test_label_mode(self):\n        fig, axes = plt.subplots(2, 2)\n        grid = Grid(fig, 111, (2, 2), label_mode='L')\n        self.assertEqual(grid.axes_all[0].get_xlabel(), None)\n\n        grid = Grid(fig, 111, (2, 2), label_mode='1')\n        self.assertEqual(grid.axes_all[0].get_xlabel(), None)\n\n        grid = Grid(fig, 111, (2, 2), label_mode='all')\n        self.assertEqual(grid.axes_all[0].get_xlabel(), None)\n\n        grid = Grid(fig, 111, (2, 2), label_mode='keep')\n        self.assertEqual(grid.axes_all[0].get_xlabel(), None)\n\n    def test_axes_pad(self):\n        fig, axes = plt.subplots(2, 2)\n        grid = Grid(fig, 111, (2, 2), axes_pad=(0.1, 0.2))\n        self.assertEqual(grid._horiz_pad_size.fixed_size, 0.1)\n        self.assertEqual(grid._vert_pad_size.fixed_size, 0.2)\n\n    def test_get_geometry(self):\n        fig, axes = plt.subplots(2, 2)\n        grid = Grid(fig, 111, (2, 2))\n        self.assertEqual(grid.get_geometry(), (2, 2))\n\n    def test_set_aspect(self):\n        fig, axes = plt.subplots(2, 2)\n        grid = Grid(fig, 111, (2, 2))\n        grid.set_aspect(True)\n        self.assertTrue(grid.get_aspect())\n\n    def test_get_axes_locator(self):\n        fig, axes = plt.subplots(2, 2)\n        grid = Grid(fig, 111, (2, 2))\n        locator = grid.get_axes_locator()\n        self.assertIsNotNone(locator)\n\n    def test_set_axes_locator(self):\n        fig, axes = plt.subplots(2, 2)\n        grid = Grid(fig, 111, (2, 2))\n        locator = grid._divider.new_locator(nx=0, ny=0)\n        grid.set_axes_locator(locator)\n        self.assertEqual(grid.get_axes_locator(), locator)\n\n    def test_get_divider(self):\n        fig, axes = plt.subplots(2, 2)\n        grid = Grid(fig, 111, (2, 2))\n        divider = grid.get_divider()\n        self.assertIsNotNone(divider)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_60": ["\nimport datetime\nimport decimal\nimport enum\nimport functools\nimport os\nimport pathlib\nimport re\nimport uuid\nfrom unittest import mock\n\nfrom django.conf import settings\nfrom django.db import models\nfrom django.db.migrations.operations.base import Operation\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    BaseSequenceSerializer,\n    BaseSimpleSerializer,\n    ChoicesSerializer,\n    DateTimeSerializer,\n    DatetimeDatetimeSerializer,\n    DecimalSerializer,\n    DeconstructableSerializer,\n    DictionarySerializer,\n    EnumSerializer,\n    FloatSerializer,\n    FrozensetSerializer,\n    FunctionTypeSerializer,\n    FunctoolsPartialSerializer,\n    IterableSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    PathLikeSerializer,\n    PathSerializer,\n    RegexSerializer,\n    SequenceSerializer,\n    SetSerializer,\n    SettingsReferenceSerializer,\n    TupleSerializer,\n    TypeSerializer,\n    UUIDSerializer,\n    serializer_factory,\n)\nfrom django.utils.functional import LazyObject, Promise\n\nclass MyModel(models.Model):\n    pass\n\nclass MyEnum(enum.Enum):\n    VALUE1 = 1\n    VALUE2 = 2\n\nclass MyManager(models.Manager):\n    pass\n\nclass MyOperation(Operation):\n    def __init__(self):\n        pass\n\n    def deconstruct(self):\n        return (\n            \"MyOperation\",\n            [],\n            {},\n        )\n\ndef test_base_serializer():\n    serializer = BaseSerializer(None)\n    with pytest.raises(NotImplementedError):\n        serializer.serialize()\n\ndef test_base_sequence_serializer():\n    serializer = BaseSequenceSerializer(None)\n    with pytest.raises(NotImplementedError):\n        serializer._format()\n    with pytest.raises(NotImplementedError):\n        serializer.serialize()\n\ndef test_base_simple_serializer():\n    serializer = BaseSimpleSerializer(1)\n    assert serializer.serialize() == (\"1\", set())\n\ndef test_choices_serializer():\n    serializer = ChoicesSerializer(models.Choices([(\"a\", \"A\"), (\"b\", \"B\")]))\n    serialized, imports = serializer.serialize()\n    assert serialized == \"('a', 'A'), ('b', 'B')\"\n    assert imports == set()\n\ndef test_datetime_serializer():\n    serializer = DateTimeSerializer(datetime.date.today())\n    serialized, imports = serializer.serialize()\n    assert imports == {\"import datetime\"}\n\ndef test_datetimedatetime_serializer():\n    now = datetime.datetime.now()\n    serializer = DatetimeDatetimeSerializer(now)\n    serialized, imports = serializer.serialize()\n    assert imports == [\"import datetime\"]\n    assert serialized == repr(now)\n\ndef test_decimal_serializer():\n    serializer = DecimalSerializer(decimal.Decimal(\"1.23\"))\n    serialized, imports = serializer.serialize()\n    assert serialized == \"Decimal('1.23')\"\n    assert imports == {\"from decimal import Decimal\"}\n\ndef test_deconstructable_serializer():\n    class MyClass:\n        def deconstruct(self):\n            return (\"MyClass\", [], {})\n\n    serializer = DeconstructableSerializer(MyClass())\n    serialized, imports = serializer.serialize()\n    assert serialized == \"MyClass()\"\n    assert imports == set()\n\ndef test_dictionary_serializer():\n    serializer = DictionarySerializer({\"a\": 1, \"b\": 2})\n    serialized, imports = serializer.serialize()\n    assert serialized == \"{'a': 1, 'b': 2}\"\n    assert imports == set()\n\ndef test_enum_serializer():\n    serializer = EnumSerializer(MyEnum.VALUE1)\n    serialized, imports = serializer.serialize()\n    assert serialized == \"MyEnum.VALUE1\"\n    assert imports == {\"import MyEnum\"}\n\ndef test_float_serializer():\n    serializer = FloatSerializer(1.23)\n    serialized, imports = serializer.serialize()\n    assert serialized == \"1.23\"\n    assert imports == set()\n\ndef test_frozenset_serializer():\n    serializer = FrozensetSerializer(frozenset([1, 2, 3]))\n    serialized, imports = serializer.serialize()\n    assert serialized == \"frozenset([1, 2, 3])\"\n    assert imports == set()\n\ndef test_function_type_serializer():\n    def my_function():\n        pass\n\n    serializer = FunctionTypeSerializer(my_function)\n    serialized, imports = serializer.serialize()\n    assert serialized == \"my_function\"\n    assert imports == set()\n\ndef test_functools_partial_serializer():\n    def my_function(a, b):\n        return a + b\n\n    partial = functools.partial(my_function, 1)\n    serializer = FunctoolsPartialSerializer(partial)\n    serialized, imports = serializer.serialize()\n    assert serialized == \"functools.partial(my_function, 1)\"\n    assert imports == {\"import functools\"}\n\ndef test_iterable_serializer():\n    serializer = IterableSerializer([1, 2, 3])\n    serialized, imports = serializer.serialize()\n    assert serialized == \"(1, 2, 3)\"\n    assert imports == set()\n\ndef test_model_field_serializer():\n    field = models.CharField(max_length=100)\n    serializer = ModelFieldSerializer(field)\n    serialized, imports = serializer.serialize()\n    assert serialized == \"models.CharField(max_length=100)\"\n    assert imports == {\"from django.db import models\"}\n\ndef test_model_manager_serializer():\n    manager = MyManager()\n    serializer = ModelManagerSerializer(manager)\n    serialized, imports = serializer.serialize()\n    assert serialized == \"MyManager()\"\n    assert imports == set()\n\ndef test_operation_serializer():\n    operation = MyOperation()\n    serializer = OperationSerializer(operation)\n    serialized, imports = serializer.serialize()\n    assert serialized == \"MyOperation()\"\n    assert imports == set()\n\ndef test_pathlike_serializer():\n    path = pathlib.Path(\"/path/to/file\")\n    serializer = PathLikeSerializer(path)\n    serialized, imports = serializer.serialize()\n    assert serialized == \"'/path/to/file'\"\n    assert imports == {}\n\ndef test_path_serializer():\n    path = pathlib.Path(\"/path/to/file\")\n    serializer = PathSerializer(path)\n    serialized, imports = serializer.serialize()\n    assert serialized == \"pathlib.PurePath('/path/to/file')\"\n    assert imports == {\"import pathlib\"}\n\ndef test_regex_serializer():\n    regex = re.compile(r\"\\d+\")\n    serializer = RegexSerializer(regex)\n    serialized, imports = serializer.serialize()\n    assert serialized == \"re.compile('\\\\d+', re.UNICODE)\"\n    assert imports == {\"import re\"}\n\ndef test_sequence_serializer():\n    serializer = SequenceSerializer([1, 2, 3])\n    serialized, imports = serializer.serialize()\n    assert serialized == \"[1, 2, 3]\"\n    assert imports == set()\n\ndef test_set_serializer():\n    serializer = SetSerializer({1, 2, 3})\n    serialized, imports = serializer.serialize()\n    assert serialized == \"{1, 2, 3}\"\n    assert imports == set()\n\ndef test_settings_reference_serializer():\n    serializer = SettingsReferenceSerializer(settings.DEBUG)\n    serialized, imports = serializer.serialize()\n    assert serialized == \"settings.DEBUG\"\n    assert imports == {\"from django.conf import settings\"}\n\ndef test_tuple_serializer():\n    serializer = TupleSerializer((1, 2, 3))\n    serialized, imports = serializer.serialize()\n    assert serialized == \"(1, 2, 3)\"\n    assert imports == set()\n\ndef test_type_serializer():\n    serializer = TypeSerializer(int)\n    serialized, imports = serializer.serialize()\n    assert serialized == \"int\"\n    assert imports == set()\n\ndef test_uuid_serializer():\n    serializer = UUIDSerializer(uuid.uuid4())\n    serialized, imports = serializer.serialize()\n    assert serialized == \"uuid.UUID(...)\"\n    assert imports == {\"import uuid\"}\n\ndef test_serializer_factory():\n    # Test various types\n    assert serializer_factory(1).__class__ == BaseSimpleSerializer\n    assert serializer_factory(\"hello\").__class__ == BaseSimpleSerializer\n    assert serializer_factory(1.23).__class__ == FloatSerializer\n    assert serializer_factory(True).__class__ == BaseSimpleSerializer\n    assert serializer_factory(None).__class__ == BaseSimpleSerializer\n    assert serializer_factory([1, 2, 3]).__class__ == SequenceSerializer\n    assert serializer_factory({1, 2, 3}).__class__ == SetSerializer\n    assert serializer_factory((1, 2, 3)).__class__ == TupleSerializer\n    assert serializer_factory({\"a\": 1}).__class__ == DictionarySerializer\n    assert serializer_factory(models.Choices([(\"a\", \"A\")])).__class__ == ChoicesSerializer\n    assert serializer_factory(MyEnum.VALUE1).__class__ == EnumSerializer\n    assert serializer_factory(datetime.date.today()).__class__ == DateTimeSerializer\n    assert serializer_factory(datetime.datetime.now()).__class__ == DatetimeDatetimeSerializer\n    assert serializer_factory(decimal.Decimal(\"1.23\")).__class__ == DecimalSerializer\n    assert serializer_factory(MyModel()).__class__ == ModelFieldSerializer\n    assert serializer_factory(MyManager()).__class__ == ModelManagerSerializer\n    assert serializer_factory(MyOperation()).__class__ == OperationSerializer\n    assert serializer_factory(pathlib.Path(\"/path/to/file\")).__class__ == PathSerializer\n    assert serializer_factory(re.compile(r\"\\d+\")).__class__ == RegexSerializer\n    assert serializer_factory(uuid.uuid4()).__class__ == UUIDSerializer\n    assert serializer_factory(settings.DEBUG).__class__ == SettingsReferenceSerializer\n\n    # Test LazyObject and Promise\n    lazy_obj = LazyObject(lambda: 1)\n    assert serializer_factory(lazy_obj).__class__ == BaseSimpleSerializer\n    promise = Promise(lambda: 1)\n    assert serializer_factory(promise).__class__ == BaseSimpleSerializer\n\n"], "sample_74": ["\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.testing.decorators import image_comparison, check_figures_equal\nimport matplotlib.colors as mcolors\nfrom matplotlib.colorbar import Colorbar, make_axes, make_axes_gridspec\nfrom matplotlib.ticker import FixedLocator, LogFormatter\nfrom matplotlib.axes import Axes\n\n@image_comparison(baseline_images=['colorbar_basic'], extensions=['png'])\ndef test_colorbar_basic():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    fig.colorbar(im)\n\n@image_comparison(baseline_images=['colorbar_orientation'], extensions=['png'])\ndef test_colorbar_orientation():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    fig.colorbar(im, orientation='horizontal')\n\n@image_comparison(baseline_images=['colorbar_ticks'], extensions=['png'])\ndef test_colorbar_ticks():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    fig.colorbar(im, ticks=[0, 0.5, 1])\n\n@image_comparison(baseline_images=['colorbar_format'], extensions=['png'])\ndef test_colorbar_format():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    fig.colorbar(im, format='%.2f')\n\n@image_comparison(baseline_images=['colorbar_extend'], extensions=['png'])\ndef test_colorbar_extend():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data, cmap='viridis')\n    fig.colorbar(im, extend='both')\n\n@image_comparison(baseline_images=['colorbar_label'], extensions=['png'])\ndef test_colorbar_label():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    fig.colorbar(im, label='Colorbar Label')\n\n@image_comparison(baseline_images=['colorbar_location'], extensions=['png'])\ndef test_colorbar_location():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    fig.colorbar(im, location='left')\n\n@image_comparison(baseline_images=['colorbar_fraction'], extensions=['png'])\ndef test_colorbar_fraction():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    fig.colorbar(im, fraction=0.1)\n\n@image_comparison(baseline_images=['colorbar_shrink'], extensions=['png'])\ndef test_colorbar_shrink():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    fig.colorbar(im, shrink=0.5)\n\n@image_comparison(baseline_images=['colorbar_aspect'], extensions=['png'])\ndef test_colorbar_aspect():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    fig.colorbar(im, aspect=5)\n\n@image_comparison(baseline_images=['colorbar_pad'], extensions=['png'])\ndef test_colorbar_pad():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    fig.colorbar(im, pad=0.2)\n\n@image_comparison(baseline_images=['colorbar_norm'], extensions=['png'])\ndef test_colorbar_norm():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    norm = mcolors.Normalize(vmin=0, vmax=1)\n    im = ax.imshow(data, norm=norm)\n    fig.colorbar(im)\n\n@image_comparison(baseline_images=['colorbar_mappable'], extensions=['png'])\ndef test_colorbar_mappable():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im, ax=ax)\n    assert cbar.mappable == im\n\n@image_comparison(baseline_images=['colorbar_make_axes'], extensions=['png'])\ndef test_colorbar_make_axes():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cax = make_axes(ax, location='right')\n    fig.colorbar(im, cax=cax)\n\n@image_comparison(baseline_images=['colorbar_make_axes_gridspec'], extensions=['png'])\ndef test_colorbar_make_axes_gridspec():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cax = make_axes_gridspec(ax, location='right')\n    fig.colorbar(im, cax=cax)\n\ndef test_colorbar_set_ticks():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.set_ticks([0, 0.5, 1])\n    assert np.allclose(cbar.get_ticks(), [0, 0.5, 1])\n\ndef test_colorbar_set_ticklabels():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.set_ticklabels(['A', 'B', 'C'])\n    assert [t.get_text() for t in cbar.ax.get_yticklabels()] == ['A', 'B', 'C']\n\ndef test_colorbar_set_label():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.set_label('My Label')\n    assert cbar.ax.get_ylabel() == 'My Label'\n\ndef test_colorbar_set_location():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.set_location('top')\n    assert cbar.ax.get_position().y0 > 0.5\n\ndef test_colorbar_set_fraction():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.set_fraction(0.2)\n    assert cbar.ax.get_position().width == 0.2\n\ndef test_colorbar_set_shrink():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.set_shrink(0.5)\n    assert cbar.ax.get_position().height < 1\n\ndef test_colorbar_set_aspect():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.set_aspect(2)\n    assert cbar.ax.get_aspect() == 2\n\ndef test_colorbar_set_pad():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.set_pad(0.3)\n    assert cbar.ax.get_position().x0 > 0.8\n\ndef test_colorbar_set_norm():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    norm = mcolors.Normalize(vmin=0, vmax=1)\n    cbar.set_norm(norm)\n    assert cbar.norm == norm\n\ndef test_colorbar_set_cmap():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.set_cmap('viridis')\n    assert cbar.cmap.name == 'viridis'\n\ndef test_colorbar_set_ticks_formatter():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.set_ticks_formatter(LogFormatter())\n    assert isinstance(cbar.ax.get_yticklabels()[0].get_formatter(), LogFormatter)\n\ndef test_colorbar_set_tick_params():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.set_tick_params(labelsize=10)\n    assert cbar.ax.get_yticklabels()[0].get_fontsize() == 10\n\ndef test_colorbar_ax():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    assert isinstance(cbar.ax, Axes)\n\ndef test_colorbar_mappable():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    assert cbar.mappable == im\n\ndef test_colorbar_remove():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.remove()\n    assert cbar.ax is None\n\ndef test_colorbar_update_normal():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.update_normal(im)\n    assert cbar.norm == im.norm\n\ndef test_colorbar_update_ticks():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.update_ticks()\n    assert cbar.get_ticks() == cbar.norm.inverse(cbar.ax.get_ylim())\n\ndef test_colorbar_update_bruteforce():\n    fig, ax = plt.subplots()\n    data = np.random.rand(10, 10)\n    im = ax.imshow(data)\n    cbar = fig.colorbar(im)\n    cbar.update_bruteforce()\n    assert cbar.get_ticks() == cbar.norm.inverse(cbar.ax.get_ylim())\n\n"], "sample_2": ["\nimport unittest\nfrom astropy.wcs import WCS\nfrom astropy.io import fits\nfrom astropy.wcs._wcs import find_all_wcs\nfrom astropy.wcs.utils import proj_plane_pixel_scales\nfrom astropy.tests.helper import catch_warnings\nfrom astropy.utils.exceptions import AstropyWarning\nimport numpy as np\n\nclass TestWCS(unittest.TestCase):\n\n    def test_init_from_header(self):\n        hdu = fits.PrimaryHDU(np.zeros((10, 10)))\n        hdu.header['CTYPE1'] = 'RA---TAN'\n        hdu.header['CRVAL1'] = 180.0\n        hdu.header['CDELT1'] = -0.01\n        hdu.header['CTYPE2'] = 'DEC--TAN'\n        hdu.header['CRVAL2'] = 30.0\n        hdu.header['CDELT2'] = 0.01\n        wcs = WCS(hdu.header)\n        self.assertEqual(wcs.wcs.naxis, 2)\n        self.assertEqual(wcs.wcs.ctype[0], 'RA---TAN')\n        self.assertEqual(wcs.wcs.crval[0], 180.0)\n        self.assertEqual(wcs.wcs.cdelt[0], -0.01)\n\n    def test_init_from_file(self):\n        with fits.open('tests/data/test_wcs.fits') as hdul:\n            wcs = WCS(hdul[0].header)\n        self.assertEqual(wcs.wcs.naxis, 2)\n        self.assertEqual(wcs.wcs.ctype[0], 'RA---TAN')\n        self.assertEqual(wcs.wcs.crval[0], 180.0)\n        self.assertEqual(wcs.wcs.cdelt[0], -0.01)\n\n    def test_pixel_to_world(self):\n        hdu = fits.PrimaryHDU(np.zeros((10, 10)))\n        hdu.header['CTYPE1'] = 'RA---TAN'\n        hdu.header['CRVAL1'] = 180.0\n        hdu.header['CDELT1'] = -0.01\n        hdu.header['CTYPE2'] = 'DEC--TAN'\n        hdu.header['CRVAL2'] = 30.0\n        hdu.header['CDELT2'] = 0.01\n        wcs = WCS(hdu.header)\n        world_coords = wcs.pixel_to_world(5, 5)\n        self.assertAlmostEqual(world_coords[0], 179.95, 5)\n        self.assertAlmostEqual(world_coords[1], 30.05, 5)\n\n    def test_world_to_pixel(self):\n        hdu = fits.PrimaryHDU(np.zeros((10, 10)))\n        hdu.header['CTYPE1'] = 'RA---TAN'\n        hdu.header['CRVAL1'] = 180.0\n        hdu.header['CDELT1'] = -0.01\n        hdu.header['CTYPE2'] = 'DEC--TAN'\n        hdu.header['CRVAL2'] = 30.0\n        hdu.header['CDELT2'] = 0.01\n        wcs = WCS(hdu.header)\n        pixel_coords = wcs.world_to_pixel(179.95, 30.05)\n        self.assertEqual(pixel_coords[0], 5)\n        self.assertEqual(pixel_coords[1], 5)\n\n    def test_sub(self):\n        hdu = fits.PrimaryHDU(np.zeros((10, 10, 10)))\n        hdu.header['CTYPE1'] = 'RA---TAN'\n        hdu.header['CRVAL1'] = 180.0\n        hdu.header['CDELT1'] = -0.01\n        hdu.header['CTYPE2'] = 'DEC--TAN'\n        hdu.header['CRVAL2'] = 30.0\n        hdu.header['CDELT2'] = 0.01\n        hdu.header['CTYPE3'] = 'FREQ'\n        hdu.header['CRVAL3'] = 1e9\n        hdu.header['CDELT3'] = 1e6\n        wcs = WCS(hdu.header)\n        wcs_sub = wcs.sub([1, 2])\n        self.assertEqual(wcs_sub.wcs.naxis, 2)\n        self.assertEqual(wcs_sub.wcs.ctype[0], 'RA---TAN')\n        self.assertEqual(wcs_sub.wcs.crval[0], 180.0)\n        self.assertEqual(wcs_sub.wcs.cdelt[0], -0.01)\n        self.assertEqual(wcs_sub.wcs.ctype[1], 'FREQ')\n        self.assertEqual(wcs_sub.wcs.crval[1], 1e9)\n        self.assertEqual(wcs_sub.wcs.cdelt[1], 1e6)\n\n    def test_slice(self):\n        hdu = fits.PrimaryHDU(np.zeros((10, 10, 10)))\n        hdu.header['CTYPE1'] = 'RA---TAN'\n        hdu.header['CRVAL1'] = 180.0\n        hdu.header['CDELT1'] = -0.01\n        hdu.header['CTYPE2'] = 'DEC--TAN'\n        hdu.header['CRVAL2'] = 30.0\n        hdu.header['CDELT2'] = 0.01\n        hdu.header['CTYPE3'] = 'FREQ'\n        hdu.header['CRVAL3'] = 1e9\n        hdu.header['CDELT3'] = 1e6\n        wcs = WCS(hdu.header)\n        wcs_slice = wcs.slice([slice(2, 5), slice(None), slice(1, 3)])\n        self.assertEqual(wcs_slice.wcs.naxis, 3)\n        self.assertEqual(wcs_slice.wcs.crpix[0], 3)\n        self.assertEqual(wcs_slice.wcs.crpix[1], 1)\n        self.assertEqual(wcs_slice.wcs.crpix[2], 2)\n        self.assertEqual(wcs_slice.wcs.cdelt[0], -0.01)\n        self.assertEqual(wcs_slice.wcs.cdelt[1], 0.01)\n        self.assertEqual(wcs_slice.wcs.cdelt[2], 2e6)\n\n    def test_find_all_wcs(self):\n        with fits.open('tests/data/test_wcs.fits') as hdul:\n            wcses = find_all_wcs(hdul[0].header)\n        self.assertEqual(len(wcses), 1)\n\n    def test_proj_plane_pixel_scales(self):\n        hdu = fits.PrimaryHDU(np.zeros((10, 10)))\n        hdu.header['CTYPE1'] = 'RA---TAN'\n        hdu.header['CRVAL1'] = 180.0\n        hdu.header['CDELT1'] = -0.01\n        hdu.header['CTYPE2'] = 'DEC--TAN'\n        hdu.header['CRVAL2'] = 30.0\n        hdu.header['CDELT2'] = 0.01\n        wcs = WCS(hdu.header)\n        scales = proj_plane_pixel_scales(wcs)\n        self.assertAlmostEqual(scales[0], 0.01, 5)\n        self.assertAlmostEqual(scales[1], 0.01, 5)\n\n    def test_to_header(self):\n        hdu = fits.PrimaryHDU(np.zeros((10, 10)))\n        hdu.header['CTYPE1'] = 'RA---TAN'\n        hdu.header['CRVAL1'] = 180.0\n        hdu.header['CDELT1'] = -0.01\n        hdu.header['CTYPE2'] = 'DEC--TAN'\n        hdu.header['CRVAL2'] = 30.0\n        hdu.header['CDELT2'] = 0.01\n        wcs = WCS(hdu.header)\n        header = wcs.to_header()\n        self.assertEqual(header['CTYPE1'], 'RA---TAN')\n        self.assertEqual(header['CRVAL1'], 180.0)\n        self.assertEqual(header['CDELT1'], -0.01)\n\n    def test_fix(self):\n        hdu = fits.PrimaryHDU(np.zeros((10, 10)))\n        hdu.header['CTYPE1'] = 'RA---TAN'\n        hdu.header['CRVAL1'] = 180.0\n        hdu.header['CDELT1'] = -0.01\n        hdu.header['CTYPE2'] = 'DEC--TAN'\n        hdu.header['CRVAL2'] = 30.0\n        hdu.header['CDELT2'] = 0.01\n        wcs = WCS(hdu.header)\n        with catch_warnings(record=True) as w:\n            wcs.fix()\n        self.assertEqual(len(w), 0)\n\n    def test_validate(self):\n        with catch_warnings(record=True) as w:\n            warnings.simplefilter(\"always\", FITSFixedWarning)\n            results = validate('tests/data/test_wcs.fits')\n        self.assertEqual(len(results), 1)\n\n"], "sample_139": ["\nfrom sympy import ( Abs, acos, adjoint, arg, atan, atan2, conjugate, cos, DiracDelta, E, exp, expand, Expr, Function, Heaviside, I, im, log, nan, oo, pi, Rational, re, S, sign, sin, sqrt, Symbol, symbols, transpose, zoo, exp_polar, Piecewise, Interval, comp, Integral, Matrix, ImmutableMatrix, SparseMatrix, ImmutableSparseMatrix, MatrixSymbol, FunctionMatrix, Lambda, Derivative, Eq)\nfrom sympy.core.expr import unchanged\nfrom sympy.core.function import ArgumentIndexError\nfrom sympy.testing.pytest import XFAIL, raises\nfrom sympy import polar_lift, polarify\nfrom sympy import (exp_polar, polar_lift, exp, unpolarify, principal_branch)\nfrom sympy import gamma, erf, sin, tanh, uppergamma, Eq, Ne\nfrom sympy.abc import x\nfrom sympy import Matrix, simplify\nfrom sympy import (periodic_argument, unbranched_argument, oo, principal_branch, polar_lift, pi)\nfrom sympy import principal_branch\nfrom sympy import principal_branch, polar_lift, exp_polar\nfrom sympy import simplify\nfrom sympy.functions.elementary.complexes import unpolarify\n\ndef test_abs():\n    assert abs(3 + 4j) == 5\n    assert abs(-2 - 2j) == 2*sqrt(2)\n    assert abs(I) == 1\n    assert abs(-I) == 1\n    assert abs(0) == 0\n\ndef test_arg():\n    assert arg(1 + 0j) == 0\n    assert arg(-1 + 0j) == pi\n    assert arg(0 + 1j) == pi/2\n    assert arg(0 - 1j) == -pi/2\n    assert arg(1 + 1j) == pi/4\n    assert arg(-1 + 1j) == 3*pi/4\n    assert arg(-1 - 1j) == -3*pi/4\n    assert arg(1 - 1j) == -pi/4\n    assert arg(0) == 0\n\ndef test_conjugate():\n    assert conjugate(3 + 4j) == 3 - 4j\n    assert conjugate(3 - 4j) == 3 + 4j\n    assert conjugate(I) == -I\n    assert conjugate(-I) == I\n    assert conjugate(0) == 0\n\ndef test_exp_polar():\n    assert exp_polar(0) == 1\n    assert exp_polar(pi*I) == -1\n    assert exp_polar(pi*I/2) == I\n    assert exp_polar(-pi*I/2) == -I\n    assert exp_polar(2*pi*I) == 1\n\ndef test_polar_lift():\n    assert polar_lift(4) == 4*exp_polar(0)\n    assert polar_lift(-4) == 4*exp_polar(I*pi)\n    assert polar_lift(-I) == exp_polar(-I*pi/2)\n    assert polar_lift(I + 2) == polar_lift(2 + I)\n\ndef test_periodic_argument():\n    assert periodic_argument(exp(5*I*pi), 2*pi) == pi\n    assert periodic_argument(exp_polar(5*I*pi), 3*pi) == -pi\n    assert periodic_argument(exp_polar(5*I*pi), pi) == 0\n\ndef test_unbranched_argument():\n    assert unbranched_argument(exp(5*I*pi)) == pi\n\ndef test_principal_branch():\n    assert principal_branch(exp_polar(2*pi*I)*3, 2*pi) == 3*exp_polar(0)\n    assert principal_branch(exp_polar(2*pi*I)*3*x, 2*pi) == 3*principal_branch(x, 2*pi)\n\ndef test_polarify():\n    x = Symbol('x')\n    y = Symbol('y')\n    assert polarify(x) == (x, {})\n    assert polarify(x + y) == (x + y, {})\n    assert polarify(x*y) == (x*y, {})\n    assert polarify(exp(x)) == (exp(x), {})\n    assert polarify(sin(x)) == (sin(x), {})\n    assert polarify((-x)**y) == ((_x*exp_polar(I*pi))**_y, {_x: x, _y: y})\n\ndef test_unpolarify():\n    assert unpolarify(polar_lift(I + 2)) == 2 + I\n    assert unpolarify(sin(polar_lift(I + 7))) == sin(7 + I)\n\n"], "sample_59": ["\nfrom unittest import TestCase\nfrom django.forms import (\n    CharField,\n    IntegerField,\n    Form,\n    ValidationError,\n)\nfrom django.forms.formsets import (\n    BaseFormSet,\n    formset_factory,\n    all_valid,\n    ManagementForm,\n)\nfrom django.forms.widgets import HiddenInput\nfrom django.utils.functional import cached_property\n\nclass MyForm(Form):\n    name = CharField(max_length=100)\n    age = IntegerField()\n\nclass MyFormSet(BaseFormSet):\n    form_class = MyForm\n    extra = 2\n\nclass FormSetTests(TestCase):\n\n    def test_formset_factory(self):\n        MyFormSet = formset_factory(MyForm)\n        formset = MyFormSet()\n        self.assertEqual(len(formset.forms), 2)\n\n    def test_management_form(self):\n        formset = MyFormSet()\n        self.assertTrue(isinstance(formset.management_form, ManagementForm))\n\n    def test_total_form_count(self):\n        formset = MyFormSet(data={'form-0-name': 'Alice', 'form-0-age': '30', 'form-1-name': 'Bob', 'form-1-age': '25'})\n        self.assertEqual(formset.total_form_count(), 2)\n\n    def test_initial_form_count(self):\n        formset = MyFormSet(initial=[{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}])\n        self.assertEqual(formset.initial_form_count(), 2)\n\n    def test_get_form_kwargs(self):\n        formset = MyFormSet()\n        self.assertEqual(formset.get_form_kwargs(0), {})\n\n    def test_construct_form(self):\n        formset = MyFormSet()\n        form = formset._construct_form(0)\n        self.assertTrue(isinstance(form, MyForm))\n\n    def test_empty_form(self):\n        formset = MyFormSet()\n        empty_form = formset.empty_form\n        self.assertTrue(isinstance(empty_form, MyForm))\n\n    def test_cleaned_data(self):\n        formset = MyFormSet(data={'form-0-name': 'Alice', 'form-0-age': '30', 'form-1-name': 'Bob', 'form-1-age': '25'})\n        formset.is_valid()\n        self.assertEqual(formset.cleaned_data[0]['name'], 'Alice')\n\n    def test_deleted_forms(self):\n        formset = MyFormSet(data={'form-0-name': 'Alice', 'form-0-age': '30', 'form-1-name': 'Bob', 'form-1-age': '25', 'form-1-DELETE': 'on'})\n        formset.is_valid()\n        self.assertEqual(len(formset.deleted_forms), 1)\n\n    def test_ordered_forms(self):\n        formset = MyFormSet(data={'form-0-name': 'Alice', 'form-0-age': '30', 'form-0-ORDERING': '1', 'form-1-name': 'Bob', 'form-1-age': '25', 'form-1-ORDERING': '2'})\n        formset.is_valid()\n        self.assertEqual(formset.ordered_forms[0].cleaned_data['name'], 'Alice')\n\n    def test_non_form_errors(self):\n        formset = MyFormSet(data={'form-0-name': 'Alice', 'form-0-age': 'thirty'})\n        self.assertTrue(formset.non_form_errors())\n\n    def test_errors(self):\n        formset = MyFormSet(data={'form-0-name': 'Alice', 'form-0-age': 'thirty'})\n        self.assertTrue(formset.errors)\n\n    def test_total_error_count(self):\n        formset = MyFormSet(data={'form-0-name': 'Alice', 'form-0-age': 'thirty'})\n        self.assertEqual(formset.total_error_count(), 1)\n\n    def test_is_valid(self):\n        formset = MyFormSet(data={'form-0-name': 'Alice', 'form-0-age': '30', 'form-1-name': 'Bob', 'form-1-age': '25'})\n        self.assertTrue(formset.is_valid())\n\n    def test_full_clean(self):\n        formset = MyFormSet(data={'form-0-name': 'Alice', 'form-0-age': 'thirty'})\n        formset.full_clean()\n        self.assertTrue(formset.non_form_errors())\n\n    def test_has_changed(self):\n        formset = MyFormSet(data={'form-0-name': 'Alice', 'form-0-age': '30'})\n        self.assertTrue(formset.has_changed())\n\n    def test_add_fields(self):\n        formset = MyFormSet()\n        form = formset._construct_form(0)\n        self.assertTrue('ORDERING' in form.fields)\n\n    def test_add_prefix(self):\n        formset = MyFormSet()\n        self.assertEqual(formset.add_prefix(0), 'form-0')\n\n    def test_is_multipart(self):\n        formset = MyFormSet()\n        self.assertFalse(formset.is_multipart())\n\n    def test_media(self):\n        formset = MyFormSet()\n        self.assertEqual(formset.media, formset.forms[0].media)\n\n    def test_template_name(self):\n        formset = MyFormSet()\n        self.assertEqual(formset.template_name, formset.renderer.formset_template_name)\n\n    def test_get_context(self):\n        formset = MyFormSet()\n        self.assertEqual(formset.get_context()['formset'], formset)\n\n    def test_all_valid(self):\n        formset1 = MyFormSet(data={'form-0-name': 'Alice', 'form-0-age': '30', 'form-1-name': 'Bob', 'form-1-age': '25'})\n        formset2 = MyFormSet(data={'form-0-name': 'Charlie', 'form-0-age': '40', 'form-1-name': 'David', 'form-1-age': '35'})\n        self.assertTrue(all_valid([formset1, formset2]))\n\n"], "sample_48": ["\nfrom django.db import migrations\nfrom django.db.migrations.operations.models import (\n    AddIndex,\n    AddModel,\n    AlterField,\n    AlterModelOptions,\n    AlterModelTable,\n    AlterUniqueTogether,\n    CreateModel,\n    DeleteModel,\n    RemoveIndex,\n    RenameModel,\n)\nfrom django.db.models import CharField, IntegerField, Model, TextField\n\nclass TestModelsOperations(migrations.Migration):\n\n    def test_create_model(self):\n        operation = CreateModel(\n            name='TestModel',\n            fields=[\n                ('name', CharField(max_length=100)),\n                ('age', IntegerField()),\n            ],\n        )\n        self.assertEqual(operation.name, 'TestModel')\n        self.assertEqual(len(operation.fields), 2)\n\n    def test_delete_model(self):\n        operation = DeleteModel(name='TestModel')\n        self.assertEqual(operation.name, 'TestModel')\n\n    def test_rename_model(self):\n        operation = RenameModel(old_name='OldModel', new_name='NewModel')\n        self.assertEqual(operation.old_name, 'OldModel')\n        self.assertEqual(operation.new_name, 'NewModel')\n\n    def test_alter_field(self):\n        operation = AlterField(\n            model_name='TestModel',\n            name='name',\n            field=CharField(max_length=200),\n        )\n        self.assertEqual(operation.model_name, 'TestModel')\n        self.assertEqual(operation.name, 'name')\n        self.assertEqual(operation.field.max_length, 200)\n\n    def test_alter_model_options(self):\n        operation = AlterModelOptions(\n            name='TestModel',\n            options={'verbose_name': 'My Test Model'},\n        )\n        self.assertEqual(operation.name, 'TestModel')\n        self.assertEqual(operation.options['verbose_name'], 'My Test Model')\n\n    def test_alter_model_table(self):\n        operation = AlterModelTable(name='TestModel', table='new_table')\n        self.assertEqual(operation.name, 'TestModel')\n        self.assertEqual(operation.table, 'new_table')\n\n    def test_alter_unique_together(self):\n        operation = AlterUniqueTogether(\n            name='TestModel',\n            unique_together={('name', 'age')},\n        )\n        self.assertEqual(operation.name, 'TestModel')\n        self.assertEqual(operation.unique_together, {('name', 'age')})\n\n    def test_add_index(self):\n        operation = AddIndex(\n            model_name='TestModel',\n            index=migrations.Index(fields=['name'], name='name_idx'),\n        )\n        self.assertEqual(operation.model_name, 'TestModel')\n        self.assertEqual(operation.index.fields, ['name'])\n        self.assertEqual(operation.index.name, 'name_idx')\n\n    def test_remove_index(self):\n        operation = RemoveIndex(model_name='TestModel', name='name_idx')\n        self.assertEqual(operation.model_name, 'TestModel')\n        self.assertEqual(operation.name, 'name_idx')\n\nclass TestModel(Model):\n    name = CharField(max_length=100)\n    age = IntegerField()\n\n"], "sample_68": ["\nfrom django.db import models\nfrom django.db.models import Prefetch, Q\nfrom django.db.models.query import (\n    RawQuerySet,\n    RelatedPopulator,\n    get_related_populators,\n    prefetch_related_objects,\n)\nfrom django.test import TestCase\n\nclass QueryTest(TestCase):\n\n    def test_prefetch_related_objects(self):\n        prefetch_related_objects([], None)\n        prefetch_related_objects([], Prefetch('foo'))\n        prefetch_related_objects([object()], Prefetch('foo'))\n        prefetch_related_objects([object()], Prefetch('foo__bar'))\n\n    def test_get_related_populators(self):\n        klass_info = {'related_klass_infos': []}\n        select = []\n        db = None\n        get_related_populators(klass_info, select, db)\n\n    def test_related_populator(self):\n        klass_info = {'model': models.Model}\n        select = []\n        db = None\n        RelatedPopulator(klass_info, select, db)\n\n    def test_rawqueryset(self):\n        RawQuerySet(\n            'SELECT * FROM myapp_model',\n            model=models.Model,\n            query=None,\n            params=(),\n            translations={},\n            using=None,\n            hints={},\n        )\n\n"], "sample_21": ["\nfrom django.db import models\nfrom django.db.models import ProtectedError, RestrictedError\nfrom django.db.models.deletion import (CASCADE, PROTECT, RESTRICT, SET, SET_NULL,\n                                     SET_DEFAULT, DO_NOTHING, Collector,\n                                     get_candidate_relations_to_delete)\nfrom django.db.models.signals import pre_delete\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nclass B(models.Model):\n    pass\n\nclass A(models.Model):\n    b = models.ForeignKey(B, on_delete=CASCADE)\n\nclass C(models.Model):\n    a = models.ForeignKey(A, on_delete=CASCADE)\n\nclass D(models.Model):\n    c = models.ForeignKey(C, on_delete=SET_NULL)\n\nclass E(models.Model):\n    d = models.ForeignKey(D, on_delete=PROTECT)\n\nclass F(models.Model):\n    e = models.ForeignKey(E, on_delete=RESTRICT)\n\nclass G(models.Model):\n    f = models.ForeignKey(F, on_delete=DO_NOTHING)\n\nclass H(models.Model):\n    g = models.OneToOneField(G, on_delete=CASCADE)\n\nclass I(models.Model):\n    h = models.ForeignKey(H, on_delete=SET_DEFAULT, default=1)\n\nclass J(models.Model):\n    i = models.ForeignKey(I, on_delete=CASCADE, related_name='js')\n\nclass K(models.Model):\n    j = models.ManyToManyField(J)\n\nclass L(models.Model):\n    k = models.ForeignKey(K, on_delete=CASCADE)\n\nclass M(models.Model):\n    l = models.ForeignKey(L, on_delete=SET)\n\nclass N(models.Model):\n    m = models.ForeignKey(M, on_delete=CASCADE, null=True)\n\nclass O(models.Model):\n    n = models.ForeignKey(N, on_delete=PROTECT, related_name='os')\n\nclass P(models.Model):\n    o = models.OneToOneField(O, on_delete=RESTRICT)\n\nclass Q(models.Model):\n    p = models.ForeignKey(P, on_delete=DO_NOTHING)\n\nclass R(models.Model):\n    q = models.ForeignKey(Q, on_delete=CASCADE)\n\nclass S(models.Model):\n    r = models.ForeignKey(R, on_delete=SET_NULL)\n\nclass T(models.Model):\n    s = models.ForeignKey(S, on_delete=PROTECT)\n\nclass U(models.Model):\n    t = models.ForeignKey(T, on_delete=RESTRICT)\n\nclass V(models.Model):\n    u = models.ForeignKey(U, on_delete=DO_NOTHING)\n\nclass W(models.Model):\n    v = models.OneToOneField(V, on_delete=CASCADE)\n\nclass X(models.Model):\n    w = models.ForeignKey(W, on_delete=SET_DEFAULT, default=1)\n\nclass Y(models.Model):\n    x = models.ForeignKey(X, on_delete=CASCADE, related_name='ys')\n\nclass Z(models.Model):\n    y = models.ManyToManyField(Y)\n\nclass AA(models.Model):\n    z = models.ForeignKey(Z, on_delete=CASCADE)\n\nclass BB(models.Model):\n    aa = models.ForeignKey(AA, on_delete=SET)\n\nclass CC(models.Model):\n    bb = models.ForeignKey(BB, on_delete=CASCADE, null=True)\n\nclass DD(models.Model):\n    cc = models.ForeignKey(CC, on_delete=PROTECT, related_name='dds')\n\nclass EE(models.Model):\n    dd = models.OneToOneField(DD, on_delete=RESTRICT)\n\nclass FF(models.Model):\n    ee = models.ForeignKey(EE, on_delete=DO_NOTHING)\n\nclass GG(models.Model):\n    ff = models.ForeignKey(FF, on_delete=CASCADE)\n\nclass HH(models.Model):\n    gg = models.ForeignKey(GG, on_delete=SET_NULL)\n\nclass II(models.Model):\n    hh = models.ForeignKey(HH, on_delete=PROTECT)\n\nclass JJ(models.Model):\n    ii = models.ForeignKey(II, on_delete=RESTRICT)\n\nclass KK(models.Model):\n    jj = models.ForeignKey(JJ, on_delete=DO_NOTHING)\n\nclass LL(models.Model):\n    kk = models.OneToOneField(KK, on_delete=CASCADE)\n\nclass MM(models.Model):\n    ll = models.ForeignKey(LL, on_delete=SET_DEFAULT, default=1)\n\nclass NN(models.Model):\n    mm = models.ForeignKey(MM, on_delete=CASCADE, related_name='nns')\n\nclass OO(models.Model):\n    nn = models.ManyToManyField(NN)\n\nclass PP(models.Model):\n    oo = models.ForeignKey(OO, on_delete=CASCADE)\n\nclass QQ(models.Model):\n    pp = models.ForeignKey(PP, on_delete=SET)\n\nclass RR(models.Model):\n    qq = models.ForeignKey(QQ, on_delete=CASCADE, null=True)\n\nclass SS(models.Model):\n    rr = models.ForeignKey(RR, on_delete=PROTECT, related_name='sss')\n\nclass TT(models.Model):\n    ss = models.OneToOneField(SS, on_delete=RESTRICT)\n\nclass UU(models.Model):\n    tt = models.ForeignKey(TT, on_delete=DO_NOTHING)\n\nclass VV(models.Model):\n    uu = models.ForeignKey(UU, on_delete=CASCADE)\n\nclass WW(models.Model):\n    vv = models.ForeignKey(VV, on_delete=SET_NULL)\n\nclass XX(models.Model):\n    ww = models.ForeignKey(WW, on_delete=PROTECT)\n\nclass YY(models.Model):\n    xx = models.ForeignKey(XX, on_delete=RESTRICT)\n\nclass ZZ(models.Model):\n    yy = models.ForeignKey(YY, on_delete=DO_NOTHING)\n\nclass AAA(models.Model):\n    zz = models.OneToOneField(ZZ, on_delete=CASCADE)\n\nclass BBB(models.Model):\n    aaa = models.ForeignKey(AAA, on_delete=SET_DEFAULT, default=1)\n\nclass CCC(models.Model):\n    bbb = models.ForeignKey(BBB, on_delete=CASCADE, related_name='cccs')\n\nclass DDD(models.Model):\n    ccc = models.ManyToManyField(CCC)\n\nclass EEE(models.Model):\n    ddd = models.ForeignKey(DDD, on_delete=CASCADE)\n\nclass FFF(models.Model):\n    eee = models.ForeignKey(EEE, on_delete=SET)\n\nclass GGG(models.Model):\n    fff = models.ForeignKey(FFF, on_delete=CASCADE, null=True)\n\nclass HHH(models.Model):\n    ggg = models.ForeignKey(GGG, on_delete=PROTECT, related_name='hhhs')\n\nclass III(models.Model):\n    hhh = models.OneToOneField(HHH, on_delete=RESTRICT)\n\nclass JJJ(models.Model):\n    iii = models.ForeignKey(III, on_delete=DO_NOTHING)\n\nclass KKK(models.Model):\n    jjj = models.ForeignKey(JJJ, on_delete=CASCADE)\n\nclass LLL(models.Model):\n    kkk = models.ForeignKey(KKK, on_delete=SET_NULL)\n\nclass MMM(models.Model):\n    lll = models.ForeignKey(LLL, on_delete=PROTECT)\n\nclass NNN(models.Model):\n    mmm = models.ForeignKey(MMM, on_delete=RESTRICT)\n\nclass OOO(models.Model):\n    nnn = models.ForeignKey(NNN, on_delete=DO_NOTHING)\n\nclass PPP(models.Model):\n    ooo = models.OneToOneField(OOO, on_delete=CASCADE)\n\nclass QQQ(models.Model):\n    ppp = models.ForeignKey(PPP, on_delete=SET_DEFAULT, default=1)\n\nclass RRR(models.Model):\n    qqq = models.ForeignKey(QQQ, on_delete=CASCADE, related_name='rrrs')\n\nclass SSS(models.Model):\n    rrr = models.ManyToManyField(RRR)\n\nclass TTT(models.Model):\n    sss = models.ForeignKey(SSS, on_delete=CASCADE)\n\nclass UUU(models.Model):\n    ttt = models.ForeignKey(TTT, on_delete=SET)\n\nclass VVV(models.Model):\n    uuu = models.ForeignKey(UUU, on_delete=CASCADE, null=True)\n\nclass WWW(models.Model):\n    vvv = models.ForeignKey(VVV, on_delete=PROTECT, related_name='wwws')\n\nclass XXX(models.Model):\n    www = models.OneToOneField(WWW, on_delete=RESTRICT)\n\nclass YYY(models.Model):\n    xxx = models.ForeignKey(XXX, on_delete=DO_NOTHING)\n\nclass ZZZ(models.Model):\n    yyy = models.ForeignKey(YYY, on_delete=CASCADE)\n\nclass AAAA(models.Model):\n    zzz = models.ForeignKey(ZZZ, on_delete=SET_NULL)\n\nclass BBBB(models.Model):\n    aaaa = models.ForeignKey(AAAA, on_delete=PROTECT)\n\nclass CCCC(models.Model):\n    bbbb = models.ForeignKey(BBBB, on_delete=RESTRICT)\n\nclass DDDD(models.Model):\n    cccc = models.ForeignKey(CCCC, on_delete=DO_NOTHING)\n\nclass EEEE(models.Model):\n    dddd = models.OneToOneField(DDDD, on_delete=CASCADE)\n\nclass FFFF(models.Model):\n    eeee = models.ForeignKey(EEEE, on_delete=SET_DEFAULT, default=1)\n\nclass GGGG(models.Model):\n    ffff = models.ForeignKey(FFFF, on_delete=CASCADE, related_name='gggg')\n\nclass HHHH(models.Model):\n    gggg = models.ManyToManyField(GGGG)\n\nclass IIII(models.Model):\n    hhhh = models.ForeignKey(HHHH, on_delete=CASCADE)\n\nclass JJJJ(models.Model):\n    iiii = models.ForeignKey(IIII, on_delete=SET)\n\nclass KKKK(models.Model):\n    jjjj = models.ForeignKey(JJJJ, on_delete=CASCADE, null=True)\n\nclass LLLL(models.Model):\n    kkkk = models.ForeignKey(KKKK, on_delete=PROTECT, related_name='llll')\n\nclass MMMMM(models.Model):\n    llll = models.OneToOneField(LLLL, on_delete=RESTRICT)\n\nclass NNNN(models.Model):\n    mmmmm = models.ForeignKey(MMMMM, on_delete=DO_NOTHING)\n\nclass OOOO(models.Model):\n    nnnn = models.ForeignKey(NNNNN, on_delete=CASCADE)\n\nclass PPPP(models.Model):\n    oooo = models.ForeignKey(OOOO, on_delete=SET_NULL)\n\nclass QQQQ(models.Model):\n    pppp = models.ForeignKey(PPPP, on_delete=PROTECT)\n\nclass RRRR(models.Model):\n    qqqq = models.ForeignKey(QQQQ, on_delete=RESTRICT)\n\nclass SSSS(models.Model):\n    rrrr = models.ForeignKey(RRRR, on_delete=DO_NOTHING)\n\nclass TTTT(models.Model):\n    ssss = models.OneToOneField(SSSS, on_delete=CASCADE)\n\nclass UUUU(models.Model):\n    tttt = models.ForeignKey(TTTT, on_delete=SET_DEFAULT, default=1)\n\nclass VVVV(models.Model):\n    uuuu = models.ForeignKey(UUUU, on_delete=CASCADE, related_name='vvvv')\n\nclass WWWW(models.Model):\n    vvvv = models.ManyToManyField(VVVV)\n\nclass XXXX(models.Model):\n    wwww = models.ForeignKey(WWWW, on_delete=CASCADE)\n\nclass YYYY(models.Model):\n    xxxx = models.ForeignKey(XXXX, on_delete=SET)\n\nclass ZZZZ(models.Model):\n    yyyy = models.ForeignKey(YYYY, on_delete=CASCADE, null=True)\n\nclass AAAAA(models.Model):\n    zzzz = models.ForeignKey(ZZZZ, on_delete=PROTECT, related_name='aaaaa')\n\nclass BBBBB(models.Model):\n    aaaaa = models.OneToOneField(AAAAA, on_delete=RESTRICT)\n\nclass CCCCC(models.Model):\n    bbbbb = models.ForeignKey(BBBBB, on_delete=DO_NOTHING)\n\nclass DDDDD(models.Model):\n    ccccc = models.ForeignKey(CCCCC, on_delete=CASCADE)\n\nclass EEEEE(models.Model):\n    ddddd = models.ForeignKey(DDDDD, on_delete=SET_NULL)\n\nclass FFFFF(models.Model):\n    eeeee = models.ForeignKey(EEEEE, on_delete=PROTECT)\n\nclass GGGGG(models.Model):\n    fffff = models.ForeignKey(FFFFF, on_delete=RESTRICT)\n\nclass HHHHH(models.Model):\n    ggggg = models.ForeignKey(GGGGG, on_delete=DO_NOTHING)\n\nclass IIIII(models.Model):\n    hhhhh = models.OneToOneField(HHHHH, on_delete=CASCADE)\n\nclass JJJJJ(models.Model):\n    iiiii = models.ForeignKey(IIIII, on_delete=SET_DEFAULT, default=1)\n\nclass KKKKK(models.Model):\n    jjjjj = models.ForeignKey(JJJJJ, on_delete=CASCADE, related_name='kkkkk')\n\nclass LLLLL(models.Model):\n    kkkkk = models.ManyToManyField(KKKKK)\n\nclass MMMMM(models.Model):\n    lllll = models.ForeignKey(LLLLL, on_delete=CASCADE)\n\nclass NNNNN(models.Model):\n    mmmmm = models.ForeignKey(MMMMM, on_delete=SET)\n\nclass OOOOO(models.Model):\n    nnnnn = models.ForeignKey(NNNNN, on_delete=CASCADE, null=True)\n\nclass PPPPP(models.Model):\n    ooooo = models.ForeignKey(OOOOO, on_delete=PROTECT, related_name='ppppp')\n\nclass QQQQQ(models.Model):\n    ppppp = models.OneToOneField(PPPPP, on_delete=RESTRICT)\n\nclass RRRRR(models.Model):\n    qqqqq = models.ForeignKey(QQQQQ, on_delete=DO_NOTHING)\n\nclass SSSSS(models.Model):\n    rrrrr = models.ForeignKey(RRRRR, on_delete=CASCADE)\n\nclass TTTTT(models.Model):\n    sssss = models.ForeignKey(SSSSS, on_delete=SET_NULL)\n\nclass UUUUU(models.Model):\n    ttttt = models.ForeignKey(TTTTT, on_delete=PROTECT)\n\nclass VVVVV(models.Model):\n    uuuuu = models.ForeignKey(UUUUU, on_delete=RESTRICT)\n\nclass WWWWW(models.Model):\n    vvvvv = models.ForeignKey(VVVVV, on_delete=DO_NOTHING)\n\nclass XXXXX(models.Model):\n    wwwww = models.OneToOneField(WWWWW, on_delete=CASCADE)\n\nclass YYYYY(models.Model):\n    xxxxx = models.ForeignKey(XXXXX, on_delete=SET_DEFAULT, default=1)\n\nclass ZZZZZ(models.Model):\n    yyyyy = models.ForeignKey(YYYYY, on_delete=CASCADE, related_name='zzzzz')\n\nclass AAAAAA(models.Model):\n    zzzzz = models.ManyToManyField(ZZZZZ)\n\nclass BBBBBB(models.Model):\n    aaaaaa = models.ForeignKey(AAAAAA, on_delete=CASCADE)\n\nclass CCCCCC(models.Model):\n    bbbbbb = models.ForeignKey(BBBBBB, on_delete=SET)\n\nclass DDDDDD(models.Model):\n    cccccc = models.ForeignKey(CCCCC, on_delete=CASCADE, null=True)\n\nclass EEEEEE(models.Model):\n    dddddd = models.ForeignKey(DDDDD, on_delete=PROTECT, related_name='eeeeee')\n\nclass FFFFFF(models.Model):\n    eeeeee = models.OneToOneField(EEEEE, on_delete=RESTRICT)\n\nclass GGGGGG(models.Model):\n    ffffff = models.ForeignKey(FFFFF, on_delete=DO_NOTHING)\n\nclass HHHHHH(models.Model):\n    gggggg = models.ForeignKey(GGGGG, on_delete=CASCADE)\n\nclass IIIIII(models.Model):\n    hhhhhh = models.ForeignKey(HHHHHH, on_delete=SET_NULL)\n\nclass JJJJJJ(models.Model):\n    iiiiii = models.ForeignKey(IIIIII, on_delete=PROTECT)\n\nclass KKKKKK(models.Model):\n    jjjjjj = models.ForeignKey(JJJJJJ, on_delete=RESTRICT)\n\nclass LLLLLL(models.Model):\n    kkkkkk = models.ForeignKey(KKKKKK, on_delete=DO_NOTHING)\n\nclass MMMMMM(models.Model):\n    llllll = models.OneToOneField(LLLLLL, on_delete=CASCADE)\n\nclass NNNNNN(models.Model):\n    mmmmmm = models.ForeignKey(MMMMMM, on_delete=SET_DEFAULT, default=1)\n\nclass OOOOOO(models.Model):\n    nnnnnn = models.ForeignKey(NNNNNN, on_delete=CASCADE, related_name='oooooo')\n\nclass PPPPPP(models.Model):\n    oooooo = models.ManyToManyField(OOOOOO)\n\nclass QQQQQQ(models.Model):\n    pppppp = models.ForeignKey(PPPPP, on_delete=CASCADE)\n\nclass RRRRRR(models.Model):\n    qqqqqq = models.ForeignKey(QQQQQQ, on_delete=SET)\n\nclass SSSSSS(models.Model):\n    rrrrrr = models.ForeignKey(RRRRRR, on_delete=CASCADE, null=True)\n\nclass TTTTTT(models.Model):\n    ssssss = models.ForeignKey(SSSSSS, on_delete=PROTECT, related_name='tttttt')\n\nclass UUUUUU(models.Model):\n    tttttt = models.OneToOneField(TTTTT, on_delete=RESTRICT)\n\nclass VVVVVV(models.Model):\n    uuuuuu = models.ForeignKey(UUUUUU, on_delete=DO_NOTHING)\n\nclass WWWWWW(models.Model):\n    vvvvvv = models.ForeignKey(VVVVVV, on_delete=CASCADE)\n\nclass XXXXXX(models.Model):\n    wwwwww = models.ForeignKey(WWWWWW, on_delete=SET_NULL)\n\nclass YYYYYY(models.Model):\n    xxxxxx = models.ForeignKey(XXXXXX, on_delete=PROTECT)\n\nclass ZZZZZZ(models.Model):\n    yyyyyy = models.ForeignKey(YYYYYY, on_delete=RESTRICT)\n\nclass AAAAAAA(models.Model):\n    zzzzzz = models.ForeignKey(ZZZZZZ, on_delete=DO_NOTHING)\n\nclass BBBBBBB(models.Model):\n    aaaaaa = models.OneToOneField(AAAAAA, on_delete=CASCADE)\n\nclass CCCCCCC(models.Model):\n    bbbbbb = models.ForeignKey(BBBBBB, on_delete=SET_DEFAULT, default=1)\n\nclass DDDDDDD(models.Model):\n    cccccc = models.ForeignKey(CCCCCC, on_delete=CASCADE, related_name='dddddd')\n\nclass EEEEEEE(models.Model):\n    dddddd = models.ManyToManyField(DDDDDD)\n\nclass FFFFFFF(models.Model):\n    eeeeee = models.ForeignKey(EEEEEE, on_delete=CASCADE)\n\nclass GGGGGGG(models.Model):\n    ffffff = models.ForeignKey(FFFFFFF, on_delete=SET)\n\nclass HHHHHHH(models.Model):\n    gggggg = models.ForeignKey(GGGGGGG, on_delete=CASCADE, null=True)\n\nclass IIIIIII(models.Model):\n    hhhhhh = models.ForeignKey(HHHHHHH, on_delete=PROTECT, related_name='iiiiii')\n\nclass JJJJJJJ(models.Model):\n    iiiiii = models.OneToOneField(IIIIIII, on_delete=RESTRICT)\n\nclass KKKKKKK(models.Model):\n    jjjjjj = models.ForeignKey(JJJJJJJ, on_delete=DO_NOTHING)\n\nclass LLLLLLL(models.Model):\n    kkkkkk = models.ForeignKey(KKKKKKK, on_delete=CASCADE)\n\nclass MMMMMMM(models.Model):\n    llllll = models.ForeignKey(LLLLLLL, on_delete=SET_NULL)\n\nclass NNNNNNN(models.Model):\n    mmmmmm = models.ForeignKey(MMMMMMM, on_delete=PROTECT)\n\nclass OOOOOOO(models.Model):\n    nnnnnn = models.ForeignKey(NNNNNNN, on_delete=RESTRICT)\n\nclass PPPPPPP(models.Model):\n    oooooo = models.ForeignKey(OOOOOO, on_delete=DO_NOTHING)\n\nclass QQQQQQQ(models.Model):\n    pppppp = models.OneToOneField(PPPPPPP, on_delete=CASCADE)\n\nclass RRRRRRR(models.Model):\n    qqqqqq = models.ForeignKey(QQQQQQQ, on_delete=SET_DEFAULT, default=1)\n\nclass SSSSSS(models.Model):\n    rrrrrr = models.ForeignKey(RRRRRRR, on_delete=CASCADE, related_name='ssssss')\n\nclass TTTTTTT(models.Model):\n    ssssss = models.ManyToManyField(SSSSSS)\n\nclass UUUUUUU(models.Model):\n    tttttt = models.ForeignKey(TTTTTTT, on_delete=CASCADE)\n\nclass VVVVVVV(models.Model):\n    uuuuuu = models.ForeignKey(UUUUUUU, on_delete=SET)\n\nclass WWWWWWW(models.Model):\n    vvvvvv = models.ForeignKey(VVVVVVV, on_delete=CASCADE, null=True)\n\nclass XXXXXXX(models.Model):\n    wwwwww = models.ForeignKey(WWWWWWW, on_delete=PROTECT, related_name='xxxxxx')\n\nclass YYYYYYY(models.Model):\n    xxxxxx = models.OneToOneField(XXXXXX, on_delete=RESTRICT)\n\nclass ZZZZZZZ(models.Model):\n    yyyyyy = models.ForeignKey(YYYYYYY, on_delete=DO_NOTHING)\n\nclass AAAAAAAA(models.Model):\n    aaaaaa = models.ForeignKey(ZZZZZZZ, on_delete=CASCADE)\n\nclass BBBBBBBB(models.Model):\n    bbbbbb = models.ForeignKey(AAAAAAAA, on_delete=SET_NULL)\n\nclass CCCCCCCC(models.Model):\n    cccccc = models.ForeignKey(BBBBBBBB, on_delete=PROTECT)\n\nclass DDDDDDDD(models.Model):\n    dddddd = models.ForeignKey(CCCCCCC, on_delete=RESTRICT)\n\nclass EEEEEEEE(models.Model):\n    eeeeee = models.ForeignKey(DDDDDDD, on_delete=DO_NOTHING)\n\nclass FFFFFFFF(models.Model):\n    ffffff = models.OneToOneField(EEEEEE, on_delete=CASCADE)\n\nclass GGGGGGGG(models.Model):\n    gggggg = models.ForeignKey(FFFFFF, on_delete=SET_DEFAULT, default=1)\n\nclass HHHHHHHH(models.Model):\n    hhhhhh = models.ForeignKey(GGGGGGG, on_delete=CASCADE, related_name='iiiiii')\n\nclass IIIIIIII(models.Model):\n    iiiiii = models.ManyToManyField(HHHHHHH)\n\nclass JJJJJJJJ(models.Model):\n    jjjjjj = models.ForeignKey(IIIIIII, on_delete=CASCADE)\n\nclass KKKKKKKK(models.Model):\n    kkkkkk = models.ForeignKey(JJJJJJJ, on_delete=SET)\n\nclass LLLLLLLL(models.Model):\n    llllll = models.ForeignKey(KKKKKKK, on_delete=CASCADE, null=True)\n\nclass MMMMMMMM(models.Model):\n    mmmmmm = models.ForeignKey(LLLLLLL, on_delete=PROTECT, related_name='nnnnnn')\n\nclass NNNNNNNN(models.Model):\n    nnnnnn = models.OneToOneField(MMMMMMM, on_delete=RESTRICT)\n\nclass OOOOOOOO(models.Model):\n    oooooo = models.ForeignKey(NNNNNNN, on_delete=DO_NOTHING)\n\nclass PPPPPPPP(models.Model):\n    pppppp = models.ForeignKey(OOOOOO, on_delete=CASCADE)\n\nclass QQQQQQQQ(models.Model):\n    qqqqqq = models.ForeignKey(PPPPPPP, on_delete=SET_NULL)\n\nclass RRRRRRRR(models.Model):\n    rrrrrr = models.ForeignKey(QQQQQQQ, on_delete=PROTECT)\n\nclass SSSSSSSS(models.Model):\n    ssssss = models.ForeignKey(RRRRRRR, on_delete=RESTRICT)\n\nclass TTTTTT(models.Model):\n    tttttt = models.ForeignKey(SSSSSSS, on_delete=DO_NOTHING)\n\nclass UUUUUUUU(models.Model):\n    uuuuuu = models.OneToOneField(TTTTTT, on_delete=CASCADE)\n\nclass VVVVVVVV(models.Model):\n    vvvvvv = models.ForeignKey(UUUUUUU, on_delete=SET_DEFAULT, default=1)\n\nclass WWWWWWWW(models.Model):\n    wwwwww = models.ForeignKey(VVVVVVV, on_delete=CASCADE, related_name='xxxxxx')\n\nclass XXXXXXXX(models.Model):\n    xxxxxx = models.ManyToManyField(WWWWWWW)\n\nclass YYYYYYYY(models.Model):\n    yyyyyy = models.ForeignKey(XXXXXXXX, on_delete=CASCADE)\n\nclass ZZZZZZZZ(models.Model):\n    zzzzzz = models.ForeignKey(YYYYYYYY, on_delete=SET)\n\nclass AAAAAAAAA(models.Model):\n    aaaaaa = models.ForeignKey(ZZZZZZZZ, on_delete=CASCADE, null=True)\n\nclass BBBBBBBBB(models.Model):\n    bbbbbb = models.ForeignKey(AAAAAAAA, on_delete=PROTECT, related_name='cccccc')\n\nclass CCCCCCCCC(models.Model):\n    cccccc = models.OneToOneField(BBBBBBBBB, on_delete=RESTRICT)\n\nclass DDDDDDDDD(models.Model):\n    dddddd = models.ForeignKey(CCCCCCCC, on_delete=DO_NOTHING)\n\nclass EEEEEEEE(models.Model):\n    eeeeee = models.ForeignKey(DDDDDDDD, on_delete=CASCADE)\n\nclass FFFFFFFF(models.Model):\n    ffffff = models.ForeignKey(EEEEEE, on_delete=SET_NULL)\n\nclass GGGGGGGG(models.Model):\n    gggggg = models.ForeignKey(FFFFFF, on_delete=PROTECT)\n\nclass HHHHHHHH(models.Model):\n    hhhhhh = models.ForeignKey(GGGGGGG, on_delete=RESTRICT)\n\nclass IIIIIIII(models.Model):\n    iiiiii = models.ForeignKey(HHHHHHH, on_delete=DO_NOTHING)\n\nclass JJJJJJJJ(models.Model):\n    jjjjjj = models.OneToOneField(IIIIIII, on_delete=CASCADE)\n\nclass KKKKKKKK(models.Model):\n    kkkkkk = models.ForeignKey(JJJJJJJ, on_delete=SET_DEFAULT, default=1)\n\nclass LLLLLLLL(models.Model):\n    llllll = models.ForeignKey(KKKKKKK, on_delete=CASCADE, related_name='mmmmmm')\n\nclass MMMMMMMM(models.Model):\n    mmmmmm = models.ManyToManyField(LLLLLLL)\n\nclass NNNNNNNN(models.Model):\n    nnnnnn = models.ForeignKey(MMMMMMM, on_delete=CASCADE)\n\nclass OOOOOOOO(models.Model):\n    oooooo = models.ForeignKey(NNNNNNN, on_delete=SET)\n\nclass PPPPPPPP(models.Model):\n    pppppp = models.ForeignKey(OOOOOO, on_delete=CASCADE, null=True)\n\nclass QQQQQQQQ(models.Model):\n    qqqqqq = models.ForeignKey(PPPPPPP, on_delete=PROTECT, related_name='rrrrrr')\n\nclass RRRRRRRR(models.Model):\n    rrrrrr = models.OneToOneField(QQQQQQQ, on_delete=RESTRICT)\n\nclass SSSSSSSS(models.Model):\n    ssssss = models.ForeignKey(RRRRRRR, on_delete=DO_NOTHING)\n\nclass TTTTTTT(models.Model):\n    tttttt = models.ForeignKey(SSSSSSS, on_delete=CASCADE)\n\nclass UUUUUUUU(models.Model):\n    uuuuuu = models.ForeignKey(TTTTTTT, on_delete=SET_NULL)\n\nclass VVVVVVVV(models.Model):\n    vvvvvv = models.ForeignKey(UUUUUUU, on_delete=PROTECT)\n\nclass WWWWWWWW(models.Model):\n    wwwwww = models.ForeignKey(VVVVVVV, on_delete=RESTRICT)\n\nclass XXXXXXXXX(models.Model):\n    xxxxxx = models.ForeignKey(WWWWWWW, on_delete=DO_NOTHING)\n\nclass YYYYYYYY(models.Model):\n    yyyyyy = models.OneToOneField(XXXXXXXX, on_delete=CASCADE)\n\nclass ZZZZZZZZZ(models.Model):\n    zzzzzz = models.ForeignKey(YYYYYYYY, on_delete=SET_DEFAULT, default=1)\n\n\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=255)\n\nclass MyOtherModel(models.Model):\n    my_model = models.ForeignKey(MyModel, on_delete=models.CASCADE)\n\nclass MyThirdModel(models.Model):\n    my_other_model = models.ForeignKey(MyOtherModel, on_delete=models.CASCADE)\n\nclass MyFourthModel(models.Model):\n    my_third_model = models.ForeignKey(MyThirdModel, on_delete=models.CASCADE)\n\nclass MyFifthModel(models.Model):\n    my_fourth_model = models.ForeignKey(MyFourthModel, on_delete=models.CASCADE)\n\nclass MySixthModel(models.Model):\n    my_fifth_model = models.ForeignKey(MyFifthModel, on_delete=models.CASCADE)\n\nclass MySeventhModel(models.Model):\n    my_sixth_model = models.ForeignKey(MySixthModel, on_delete=models.CASCADE)\n\nclass MyEighthModel(models.Model):\n    my_seventh_model = models.ForeignKey(MySeventhModel, on_delete=models.CASCADE)\n\nclass MyNinthModel(models.Model):\n    my_eighth_model = models.ForeignKey(MyEighthModel, on_delete=models.CASCADE)\n\nclass MyTenthModel(models.Model):\n    my_ninth_model = models.ForeignKey(MyNinthModel, on_delete=models.CASCADE)\n\nclass MyEleventhModel(models.Model):\n    my_tenth_model = models.ForeignKey(MyTenthModel, on_delete=models.CASCADE)\n\nclass MyTwelfthModel(models.Model):\n    my_eleventh_model = models.ForeignKey(MyEleventhModel, on_delete=models.CASCADE)\n\nclass MyThirteenthModel(models.Model):\n    my_twelfth_model = models.ForeignKey(MyTwelfthModel, on_delete=models.CASCADE)\n\nclass MyFourteenthModel(models.Model):\n    my_thirteenth_model = models.ForeignKey(MyThirteenthModel, on_delete=models.CASCADE)\n\nclass MyFifteenthModel(models.Model):\n    my_fourteenth_model = models.ForeignKey(MyFourteenthModel, on_delete=models.CASCADE)\n\nclass MySixteenthModel(models.Model):\n    my_fifteenth_model = models.ForeignKey(MyFifteenthModel, on_delete=models.CASCADE)\n\nclass MySeventeenthModel(models.Model):\n    my_sixteenth_model = models.ForeignKey(MySixteenthModel, on_delete=models.CASCADE)\n\nclass MyEighteenthModel(models.Model):\n    my_seventeenth_model = models.ForeignKey(MySeventeenthModel, on_delete=models.CASCADE)\n\nclass MyNineteenthModel(models.Model):\n    my_eighteenth_model = models.ForeignKey(MyEighteenthModel, on_delete=models.CASCADE)\n\nclass MyTwentiethModel(models.Model):\n    my_nineteenth_model = models.ForeignKey(MyNineteenthModel, on_delete=models.CASCADE)\n\nclass MyTwentyFirstModel(models.Model):\n    my_twentieth_model = models.ForeignKey(MyTwentiethModel, on_delete=models.CASCADE)\n\nclass MyTwentySecondModel(models.Model):\n    my_twenty_first_model = models.ForeignKey(MyTwentyFirstModel, on_delete=models.CASCADE)\n\nclass MyTwentyThirdModel(models.Model):\n    my_twenty_second_model = models.ForeignKey(MyTwentySecondModel, on_delete=models.CASCADE)\n\nclass MyTwentyFourthModel(models.Model):\n    my_twenty_third_model = models.ForeignKey(MyTwentyThirdModel, on_delete=models.CASCADE)\n\nclass MyTwentyFifthModel(models.Model):\n    my_twenty_fourth_model = models.ForeignKey(MyTwentyFourthModel, on_delete=models.CASCADE)\n\nclass MyTwentySixthModel(models.Model):\n    my_twenty_fifth_model = models.ForeignKey(MyTwentyFifthModel, on_delete=models.CASCADE)\n\nclass MyTwentySeventhModel(models.Model):\n    my_twenty_sixth_model = models.ForeignKey(MyTwentySixthModel, on_delete=models.CASCADE)\n\nclass MyTwentyEighthModel(models.Model):\n    my_twenty_seventh_model = models.ForeignKey(MyTwentySeventhModel, on_delete=models.CASCADE)\n\nclass MyTwentyNinthModel(models.Model):\n    my_twenty_eighth_model = models.ForeignKey(MyTwentyEighthModel, on_delete=models.CASCADE)\n\nclass MyThirtiethModel(models.Model):\n    my_twenty_ninth_model = models.ForeignKey(MyTwentyNinthModel, on_delete=models.CASCADE)\n\nclass MyThirtyFirstModel(models.Model):\n    my_thirtieth_model = models.ForeignKey(MyThirtiethModel, on_delete=models.CASCADE)\n\nclass MyThirtySecondModel(models.Model):\n    my_thirty_first_model = models.ForeignKey(MyThirtyFirstModel, on_delete=models.CASCADE)\n\nclass MyThirtyThirdModel(models.Model):\n    my_thirty_second_model = models.ForeignKey(MyThirtySecondModel, on_delete=models.CASCADE)\n\nclass MyThirtyFourthModel(models.Model):\n    my_thirty_third_model = models.ForeignKey(MyThirtyThirdModel, on_delete=models.CASCADE)\n\nclass MyThirtyFifthModel(models.Model):\n    my_thirty_fourth_model = models.ForeignKey(MyThirtyFourthModel, on_delete=models.CASCADE)\n\nclass MyThirtySixthModel(models.Model):\n    my_thirty_fifth_model = models.ForeignKey(MyThirtyFifthModel, on_delete=models.CASCADE)\n\nclass MyThirtySeventhModel(models.Model):\n    my_thirty_sixth_model = models.ForeignKey(MyThirtySixthModel, on_delete=models.CASCADE)\n\nclass MyThirtyEighthModel(models.Model):\n    my_thirty_seventh_model = models.ForeignKey(MyThirtySeventhModel, on_delete=models.CASCADE)\n\nclass MyThirtyNinthModel(models.Model):\n    my_thirty_eighth_model = models.ForeignKey(MyThirtyEighthModel, on_delete=models.CASCADE)\n\nclass MyFortiethModel(models.Model):\n    my_thirty_ninth_model = models.ForeignKey(MyThirtyNinthModel, on_delete=models.CASCADE)\n\nclass MyFortyFirstModel(models.Model):\n    my_fortieth_model = models.ForeignKey(MyFortiethModel, on_delete=models.CASCADE)\n\nclass MyFortySecondModel(models.Model):\n    my_forty_first_model = models.ForeignKey(MyFortyFirstModel, on_delete=models.CASCADE)\n\nclass MyFortyThirdModel"], "sample_146": ["\nfrom sympy.printing import sstr, sstrrepr, StrPrinter\nfrom sympy.core.symbol import Symbol, symbols\nfrom sympy.core.numbers import Integer, Rational, Float, Pi, I, oo\nfrom sympy.core.expr import Expr\nfrom sympy.core.function import Function, sin, cos, exp, log\nfrom sympy.core.relational import Eq, Ne\nfrom sympy.core.containers import Tuple, Dict\nfrom sympy.core.sets import Set, FiniteSet, EmptySet\nfrom sympy.core.logic import And, Or, Not\nfrom sympy.matrices import Matrix, eye\nfrom sympy.polys.polytools import Poly\nfrom sympy.polys.polyclasses import DMP\nfrom sympy.geometry import Point, Line, Triangle\nfrom sympy.physics.units import meter, second, kilogram\nfrom sympy.physics.mechanics import dynamicsymbols\nfrom sympy.calculus.util import Leibniz\n\nx, y, z = symbols('x y z')\na, b, c = symbols('a b c')\n\ndef test_sstr_basic():\n    assert sstr(x) == 'x'\n    assert sstr(x + y) == 'x + y'\n    assert sstr(x*y) == 'x*y'\n    assert sstr(x**2) == 'x**2'\n    assert sstr(2*x) == '2*x'\n    assert sstr(x/y) == 'x/y'\n\ndef test_sstr_numbers():\n    assert sstr(Integer(2)) == '2'\n    assert sstr(Rational(1, 2)) == '1/2'\n    assert sstr(Float(3.14)) == '3.14'\n    assert sstr(Pi) == 'pi'\n    assert sstr(I) == 'I'\n    assert sstr(oo) == 'oo'\n\ndef test_sstr_functions():\n    assert sstr(sin(x)) == 'sin(x)'\n    assert sstr(cos(x + y)) == 'cos(x + y)'\n    assert sstr(exp(x)) == 'exp(x)'\n    assert sstr(log(x)) == 'log(x)'\n\ndef test_sstr_relations():\n    assert sstr(Eq(x, y)) == 'Eq(x, y)'\n    assert sstr(Ne(x, y)) == 'Ne(x, y)'\n\ndef test_sstr_containers():\n    assert sstr(Tuple(x, y)) == '(x, y)'\n    assert sstr(Dict({x: y})) == '{x: y}'\n    assert sstr(Set([x, y])) == '{x, y}'\n    assert sstr(FiniteSet([x, y])) == '{x, y}'\n    assert sstr(EmptySet()) == 'EmptySet()'\n\ndef test_sstr_logic():\n    assert sstr(And(x, y)) == 'And(x, y)'\n    assert sstr(Or(x, y)) == 'Or(x, y)'\n    assert sstr(Not(x)) == 'Not(x)'\n\ndef test_sstr_matrices():\n    assert sstr(Matrix([[1, 2], [3, 4]])) == 'Matrix([[1, 2], [3, 4]])'\n    assert sstr(eye(2)) == 'Matrix([[1, 0], [0, 1]])'\n\ndef test_sstr_polys():\n    assert sstr(Poly(x**2 + 2*x + 1, x)) == 'Poly(x**2 + 2*x + 1, x)'\n    assert sstr(DMP([1, 2, 1], 'x')) == 'DMP([1, 2, 1], x)'\n\ndef test_sstr_geometry():\n    assert sstr(Point(1, 2)) == 'Point(1, 2)'\n    assert sstr(Line((0, 0), (1, 1))) == 'Line((0, 0), (1, 1))'\n    assert sstr(Triangle((0, 0), (1, 0), (0, 1))) == 'Triangle((0, 0), (1, 0), (0, 1))'\n\ndef test_sstr_units():\n    assert sstr(meter) == 'meter'\n    assert sstr(second) == 'second'\n    assert sstr(kilogram) == 'kilogram'\n\ndef test_sstr_mechanics():\n    q = dynamicsymbols('q')\n    assert sstr(q) == 'q'\n\ndef test_sstr_calculus():\n    assert sstr(Leibniz(x, t)) == 'Derivative(x, t)'\n\ndef test_sstrrepr_basic():\n    assert sstrrepr(x) == \"'x'\"\n    assert sstrrepr(x + y) == \"'x + y'\"\n    assert sstrrepr(x*y) == \"'x*y'\"\n    assert sstrrepr(x**2) == \"'x**2'\"\n\ndef test_sstrrepr_numbers():\n    assert sstrrepr(Integer(2)) == \"2\"\n    assert sstrrepr(Rational(1, 2)) == \"1/2\"\n    assert sstrrepr(Float(3.14)) == \"3.14\"\n    assert sstrrepr(Pi) == \"pi\"\n    assert sstrrepr(I) == \"I\"\n    assert sstrrepr(oo) == \"oo\"\n\ndef test_sstrrepr_functions():\n    assert sstrrepr(sin(x)) == \"sin(x)\"\n    assert sstrrepr(cos(x + y)) == \"cos(x + y)\"\n    assert sstrrepr(exp(x)) == \"exp(x)\"\n    assert sstrrepr(log(x)) == \"log(x)\"\n\ndef test_sstrrepr_relations():\n    assert sstrrepr(Eq(x, y)) == \"Eq(x, y)\"\n    assert sstrrepr(Ne(x, y)) == \"Ne(x, y)\"\n\ndef test_sstrrepr_containers():\n    assert sstrrepr(Tuple(x, y)) == \"(x, y)\"\n    assert sstrrepr(Dict({x: y})) == \"{x: y}\"\n    assert sstrrepr(Set([x, y])) == \"{x, y}\"\n    assert sstrrepr(FiniteSet([x, y])) == \"{x, y}\"\n    assert sstrrepr(EmptySet()) == \"EmptySet()\"\n\ndef test_sstrrepr_logic():\n    assert sstrrepr(And(x, y)) == \"And(x, y)\"\n    assert sstrrepr(Or(x, y)) == \"Or(x, y)\"\n    assert sstrrepr(Not(x)) == \"Not(x)\"\n\ndef test_sstrrepr_matrices():\n    assert sstrrepr(Matrix([[1, 2], [3, 4]])) == \"Matrix([[1, 2], [3, 4]])\"\n    assert sstrrepr(eye(2)) == \"Matrix([[1, 0], [0, 1]])\"\n\ndef test_sstrrepr_polys():\n    assert sstrrepr(Poly(x**2 + 2*x + 1, x)) == \"Poly(x**2 + 2*x + 1, x)\"\n    assert sstrrepr(DMP([1, 2, 1], 'x')) == \"DMP([1, 2, 1], x)\"\n\ndef test_sstrrepr_geometry():\n    assert sstrrepr(Point(1, 2)) == \"Point(1, 2)\"\n    assert sstrrepr(Line((0, 0), (1, 1))) == \"Line((0, 0), (1, 1))\"\n    assert sstrrepr(Triangle((0, 0), (1, 0), (0, 1))) == \"Triangle((0, 0), (1, 0), (0, 1))\"\n\ndef test_sstrrepr_units():\n    assert sstrrepr(meter) == \"'meter'\"\n    assert sstrrepr(second) == \"'second'\"\n    assert sstrrepr(kilogram) == \"'kilogram'\"\n\ndef test_sstrrepr_mechanics():\n    q = dynamicsymbols('q')\n    assert sstrrepr(q) == \"'q'\"\n\ndef test_sstrrepr_calculus():\n    assert sstrrepr(Leibniz(x, t)) == \"Derivative(x, t)\"\n\n"], "sample_140": ["\nimport unittest\nfrom sympy import symbols, sin, cos, diff\nfrom sympy.physics.vector import dynamicsymbols, Point, ReferenceFrame\n\nclass TestPoint(unittest.TestCase):\n\n    def setUp(self):\n        self.N = ReferenceFrame('N')\n        self.B = ReferenceFrame('B')\n        self.O = Point('O')\n        self.P = Point('P')\n        self.q = dynamicsymbols('q')\n        self.qd = dynamicsymbols('q', 1)\n        self.q2 = dynamicsymbols('q2')\n        self.q2d = dynamicsymbols('q2', 1)\n\n    def test_init(self):\n        self.assertEqual(self.O.name, 'O')\n\n    def test_str(self):\n        self.assertEqual(str(self.O), 'O')\n\n    def test_repr(self):\n        self.assertEqual(repr(self.O), 'O')\n\n    def test_check_point(self):\n        with self.assertRaises(TypeError):\n            self.O._check_point(self.N)\n\n    def test_pdict_list(self):\n        self.P.set_pos(self.O, 10*self.N.x)\n        self.assertEqual(self.P._pdict_list(self.O, 0), [\n            [self.P], [self.P, self.O]])\n\n    def test_a1pt_theory(self):\n        self.B.set_ang_vel(self.N, 5*self.B.y)\n        self.P.set_pos(self.O, self.q*self.B.x)\n        self.P.set_vel(self.B, self.qd*self.B.x + self.q2d*self.B.y)\n        self.O.set_vel(self.N, 0)\n        self.assertEqual(self.P.a1pt_theory(self.O, self.N, self.B),\n                        (-25*self.q + self.q.diff(t, 2))*self.B.x + self.q2.diff(t, 2)*self.B.y - 10*self.qd*self.B.z)\n\n    def test_a2pt_theory(self):\n        self.B = self.N.orientnew('B', 'Axis', [self.q, self.N.z])\n        self.P.set_pos(self.O, 10*self.B.x)\n        self.O.set_vel(self.N, 5*self.N.x)\n        self.assertEqual(self.P.a2pt_theory(self.O, self.N, self.B),\n                        -10*self.qd**2*self.B.x + 10*self.q.diff(t, 2)*self.B.y)\n\n    def test_acc(self):\n        self.P.set_acc(self.N, 10*self.N.x)\n        self.assertEqual(self.P.acc(self.N), 10*self.N.x)\n\n    def test_locatenew(self):\n        self.P2 = self.P.locatenew('P2', 10*self.N.x)\n        self.assertEqual(self.P2.pos_from(self.P), 10*self.N.x)\n\n    def test_pos_from(self):\n        self.P.set_pos(self.O, 10*self.N.x)\n        self.assertEqual(self.P.pos_from(self.O), 10*self.N.x)\n\n    def test_set_acc(self):\n        self.P.set_acc(self.N, 10*self.N.x)\n        self.assertEqual(self.P._acc_dict[self.N], 10*self.N.x)\n\n    def test_set_pos(self):\n        self.P.set_pos(self.O, 10*self.N.x)\n        self.assertEqual(self.P._pos_dict[self.O], 10*self.N.x)\n\n    def test_set_vel(self):\n        self.P.set_vel(self.N, 10*self.N.x)\n        self.assertEqual(self.P._vel_dict[self.N], 10*self.N.x)\n\n    def test_v1pt_theory(self):\n        self.B.set_ang_vel(self.N, 5*self.B.y)\n        self.P.set_pos(self.O, self.q*self.B.x)\n        self.P.set_vel(self.B, self.qd*self.B.x + self.q2d*self.B.y)\n        self.O.set_vel(self.N, 0)\n        self.assertEqual(self.P.v1pt_theory(self.O, self.N, self.B),\n                        self.qd*self.B.x + self.q2d*self.B.y - 5*self.q*self.B.z)\n\n    def test_v2pt_theory(self):\n        self.B = self.N.orientnew('B', 'Axis', [self.q, self.N.z])\n        self.P.set_pos(self.O, 10*self.B.x)\n        self.O.set_vel(self.N, 5*self.N.x)\n        self.assertEqual(self.P.v2pt_theory(self.O, self.N, self.B),\n                        5*self.N.x + 10*self.qd*self.B.y)\n\n    def test_vel(self):\n        self.P.set_vel(self.N, 10*self.N.x)\n        self.assertEqual(self.P.vel(self.N), 10*self.N.x)\n\n    def test_partial_velocity(self):\n        self.P.set_vel(self.N, self.u1*self.N.x + self.u2*self.B.y)\n        self.assertEqual(self.P.partial_velocity(self.N, self.u1), self.N.x)\n        self.assertEqual(self.P.partial_velocity(self.N, self.u1, self.u2), (self.N.x, self.B.y))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_62": ["\nfrom django.core.cache import cache\nfrom django.core.cache.backends.filebased import FileBasedCache\nfrom django.test import SimpleTestCase, override_settings\nfrom django.utils.crypto import md5\nimport os\nimport tempfile\nimport time\n\nclass FileBasedCacheTests(SimpleTestCase):\n\n    def setUp(self):\n        self.test_dir = tempfile.mkdtemp()\n        self.cache = FileBasedCache(self.test_dir, {})\n\n    def tearDown(self):\n        cache.clear()\n        os.rmdir(self.test_dir)\n\n    def test_add(self):\n        self.cache.add('test_key', 'test_value')\n        self.assertEqual(self.cache.get('test_key'), 'test_value')\n\n    def test_add_existing_key(self):\n        self.cache.add('test_key', 'test_value')\n        self.assertFalse(self.cache.add('test_key', 'new_value'))\n        self.assertEqual(self.cache.get('test_key'), 'test_value')\n\n    def test_get(self):\n        self.cache.set('test_key', 'test_value')\n        self.assertEqual(self.cache.get('test_key'), 'test_value')\n        self.assertIsNone(self.cache.get('nonexistent_key'))\n\n    def test_get_version(self):\n        self.cache.set('test_key', 'test_value', version='v1')\n        self.assertEqual(self.cache.get('test_key', version='v1'), 'test_value')\n        self.assertIsNone(self.cache.get('test_key', version='v2'))\n\n    def test_set(self):\n        self.cache.set('test_key', 'test_value')\n        self.assertEqual(self.cache.get('test_key'), 'test_value')\n\n    def test_set_version(self):\n        self.cache.set('test_key', 'test_value', version='v1')\n        self.assertEqual(self.cache.get('test_key', version='v1'), 'test_value')\n        self.assertIsNone(self.cache.get('test_key', version='v2'))\n\n    def test_touch(self):\n        self.cache.set('test_key', 'test_value', timeout=1)\n        time.sleep(2)\n        self.assertFalse(self.cache.touch('test_key'))\n        self.assertIsNone(self.cache.get('test_key'))\n\n    def test_touch_version(self):\n        self.cache.set('test_key', 'test_value', timeout=1, version='v1')\n        time.sleep(2)\n        self.assertFalse(self.cache.touch('test_key', version='v1'))\n        self.assertIsNone(self.cache.get('test_key', version='v1'))\n\n    def test_delete(self):\n        self.cache.set('test_key', 'test_value')\n        self.cache.delete('test_key')\n        self.assertIsNone(self.cache.get('test_key'))\n\n    def test_delete_version(self):\n        self.cache.set('test_key', 'test_value', version='v1')\n        self.cache.delete('test_key', version='v1')\n        self.assertIsNone(self.cache.get('test_key', version='v1'))\n\n    def test_has_key(self):\n        self.cache.set('test_key', 'test_value')\n        self.assertTrue(self.cache.has_key('test_key'))\n        self.assertFalse(self.cache.has_key('nonexistent_key'))\n\n    def test_has_key_version(self):\n        self.cache.set('test_key', 'test_value', version='v1')\n        self.assertTrue(self.cache.has_key('test_key', version='v1'))\n        self.assertFalse(self.cache.has_key('test_key', version='v2'))\n\n    def test_clear(self):\n        self.cache.set('test_key1', 'test_value1')\n        self.cache.set('test_key2', 'test_value2')\n        self.cache.clear()\n        self.assertIsNone(self.cache.get('test_key1'))\n        self.assertIsNone(self.cache.get('test_key2'))\n\n    def test_cull(self):\n        # This test is difficult to write effectively without mocking\n        # the file system. It relies on the random nature of the culling\n        # process and the assumption that enough entries will be created\n        # to trigger the culling logic.\n\n        # Create a large number of cache entries\n        for i in range(100):\n            self.cache.set(f'test_key_{i}', f'test_value_{i}')\n\n        # Call the cull method\n        self.cache._cull()\n\n        # Check that some entries have been deleted\n        self.assertLess(len(self.cache._list_cache_files()), 100)\n\n    def test_key_to_file(self):\n        key = 'test_key'\n        expected_filename = os.path.join(self.test_dir, md5(key.encode(), usedforsecurity=False).hexdigest() + '.djcache')\n        self.assertEqual(self.cache._key_to_file(key), expected_filename)\n\n    def test_is_expired(self):\n        self.cache.set('test_key', 'test_value', timeout=1)\n        time.sleep(2)\n        self.assertTrue(self.cache._is_expired(open(self.cache._key_to_file('test_key'), 'rb')))\n\n    def test_list_cache_files(self):\n        self.cache.set('test_key1', 'test_value1')\n        self.cache.set('test_key2', 'test_value2')\n        files = self.cache._list_cache_files()\n        self.assertIn(self.cache._key_to_file('test_key1'), files)\n        self.assertIn(self.cache._key_to_file('test_key2'), files)\n\n\n\n"], "sample_142": ["\nimport unittest\nfrom sympy.utilities.iterables import (\n    _partition, _set_partitions, binary_partitions, bracelets, capture, cartes,\n    common_prefix, common_suffix, connected_components, dict_merge,\n    filter_symbols, flatten, generate_bell, generate_derangements,\n    generate_involutions, generate_oriented_forest, group, has_dups, ibin,\n    iproduct, kbins, minlex, multiset, multiset_combinations,\n    multiset_partitions, multiset_permutations, necklaces, numbered_symbols,\n    ordered, partitions, permutations, postfixes, postorder_traversal,\n    prefixes, reshape, rotate_left, rotate_right, runs, sift,\n    strongly_connected_components, subsets, take, topological_sort,\n    unflatten, uniq, variations, ordered_partitions, rotations, is_palindromic,\n)\n\nclass TestIterables(unittest.TestCase):\n\n    def test_binary_partitions(self):\n        self.assertEqual(list(binary_partitions(4)), [(4, 0), (3, 1), (2, 2), (1, 3), (0, 4)])\n\n    def test_bracelets(self):\n        self.assertEqual(list(bracelets(4, 2)), [(0, 0, 0, 0), (0, 0, 0, 1), (0, 0, 1, 1), (0, 1, 0, 1), (0, 1, 1, 1), (1, 1, 1, 1)])\n\n    def test_capture(self):\n        self.assertEqual(list(capture(lambda x: x**2, range(3))), [0, 1, 4])\n\n    def test_cartes(self):\n        self.assertEqual(list(cartes([1, 2], [3, 4])), [(1, 3), (1, 4), (2, 3), (2, 4)])\n\n    def test_common_prefix(self):\n        self.assertEqual(common_prefix(['abcde', 'abcdef', 'abc']), 'abc')\n\n    def test_common_suffix(self):\n        self.assertEqual(common_suffix(['abcde', 'abcdef', 'cde']), 'cde')\n\n    def test_connected_components(self):\n        self.assertEqual(connected_components([[1, 2], [2, 3], [4]]), [{1, 2, 3}, {4}])\n\n    def test_dict_merge(self):\n        self.assertEqual(dict_merge({'a': 1, 'b': 2}, {'b': 3, 'c': 4}), {'a': 1, 'b': 3, 'c': 4})\n\n    def test_filter_symbols(self):\n        from sympy import symbols\n        x, y, z = symbols('x y z')\n        self.assertEqual(list(filter_symbols([x + 1, y*2, z**3])), [x, y, z])\n\n    def test_flatten(self):\n        self.assertEqual(list(flatten([[1, 2], [3, 4]])), [1, 2, 3, 4])\n\n    def test_generate_bell(self):\n        self.assertEqual(list(generate_bell(4)), [\n            (0, 1, 2, 3), (0, 1, 3, 2), (0, 3, 1, 2), (3, 0, 1, 2),\n            (3, 0, 2, 1)\n        ])\n\n    def test_generate_derangements(self):\n        self.assertEqual(list(generate_derangements([0, 1, 2])), [[1, 2, 0], [2, 0, 1]])\n\n    def test_generate_involutions(self):\n        self.assertEqual(list(generate_involutions(3)), [(0, 1, 2), (0, 2, 1), (1, 0, 2), (2, 1, 0)])\n\n    def test_generate_oriented_forest(self):\n        self.assertEqual(list(generate_oriented_forest(4))[:5], [[0, 1, 2, 3], [0, 1, 2, 2], [0, 1, 2, 1], [0, 1, 2, 0], [0, 1, 1, 1]])\n\n    def test_group(self):\n        self.assertEqual(list(group([1, 1, 2, 2, 3])), [(1, [1, 1]), (2, [2, 2]), (3, [3])])\n\n    def test_has_dups(self):\n        self.assertTrue(has_dups([1, 2, 2, 3]))\n        self.assertFalse(has_dups([1, 2, 3]))\n\n    def test_ibin(self):\n        self.assertEqual(list(ibin(3)), [0, 1, 2, 3])\n\n    def test_iproduct(self):\n        self.assertEqual(list(iproduct([1, 2], [3, 4])), [(1, 3), (1, 4), (2, 3), (2, 4)])\n\n    def test_kbins(self):\n        self.assertEqual(list(kbins(list(range(5)), 2)), [[[0], [1, 2, 3, 4]], [[0, 1], [2, 3, 4]], [[0, 1, 2], [3, 4]], [[0, 1, 2, 3], [4]]])\n\n    def test_minlex(self):\n        self.assertEqual(minlex((1, 2, 0)), (0, 1, 2))\n\n    def test_multiset(self):\n        self.assertEqual(multiset([1, 1, 2, 3]), {1: 2, 2: 1, 3: 1})\n\n    def test_multiset_combinations(self):\n        self.assertEqual(list(multiset_combinations([1, 1, 2], 2)), [(1, 1), (1, 2), (2, 1)])\n\n    def test_multiset_partitions(self):\n        self.assertEqual(list(multiset_partitions([1, 1, 2], 2)), [[[1, 1], [2]], [[1, 2], [1]]])\n\n    def test_multiset_permutations(self):\n        self.assertEqual(list(multiset_permutations([1, 1, 2])), [(1, 1, 2), (1, 2, 1), (2, 1, 1)])\n\n    def test_necklaces(self):\n        self.assertEqual(list(necklaces(4, 2)), [(0, 0, 0, 0), (0, 0, 0, 1), (0, 0, 1, 1), (0, 1, 0, 1), (0, 1, 1, 1), (1, 1, 1, 1)])\n\n    def test_numbered_symbols(self):\n        from sympy import symbols\n        self.assertEqual(list(numbered_symbols('x', 3)), [symbols('x_0'), symbols('x_1'), symbols('x_2')])\n\n    def test_ordered(self):\n        self.assertEqual(list(ordered([1, 2, 3])), [(1, 2, 3)])\n\n    def test_partitions(self):\n        self.assertEqual(list(partitions(4)), [(4,), (3, 1), (2, 2), (2, 1, 1), (1, 1, 1, 1)])\n\n    def test_permutations(self):\n        self.assertEqual(list(permutations([1, 2, 3])), [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)])\n\n    def test_postfixes(self):\n        self.assertEqual(list(postfixes('abc')), ['c', 'bc', 'abc'])\n\n    def test_postorder_traversal(self):\n        self.assertEqual(list(postorder_traversal([1, [2, [3, None, None], None], 4, None])), [3, 2, 4, 1])\n\n    def test_prefixes(self):\n        self.assertEqual(list(prefixes('abc')), ['a', 'ab', 'abc'])\n\n    def test_reshape(self):\n        self.assertEqual(list(reshape([1, 2, 3, 4], (2, 2))), [[1, 2], [3, 4]])\n\n    def test_rotate_left(self):\n        self.assertEqual(rotate_left([1, 2, 3], 1), [2, 3, 1])\n\n    def test_rotate_right(self):\n        self.assertEqual(rotate_right([1, 2, 3], 1), [3, 1, 2])\n\n    def test_runs(self):\n        self.assertEqual(list(runs([0, 1, 2, 2, 1, 4, 3, 2, 2])), [[0, 1, 2], [2], [1, 4], [3], [2], [2]])\n\n    def test_sift(self):\n        self.assertEqual(list(sift([1, 2, 3, 4, 5], lambda x: x % 2 == 0)), [2, 4])\n\n    def test_strongly_connected_components(self):\n        self.assertEqual(strongly_connected_components([[1, 2], [2, 3], [3, 1], [4]]), [{1, 2, 3}, {4}])\n\n    def test_subsets(self):\n        self.assertEqual(list(subsets([1, 2, 3])), [(), (1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)])\n\n    def test_take(self):\n        self.assertEqual(list(take([1, 2, 3, 4, 5], 3)), [1, 2, 3])\n\n    def test_topological_sort(self):\n        self.assertEqual(list(topological_sort([1, [2, [3, None, None], None], 4, None])), [3, 2, 4, 1])\n\n    def test_unflatten(self):\n        self.assertEqual(list(unflatten([1, 2, 3, 4], 2)), [[1, 2], [3, 4]])\n\n    def test_uniq(self):\n        self.assertEqual(list(uniq([1, 2, 2, 3])), [1, 2, 3])\n\n    def test_variations(self):\n        self.assertEqual(list(variations([1, 2, 3], 2)), [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)])\n\n    def test_ordered_partitions(self):\n        self.assertEqual(list(ordered_partitions(4)), [(4,), (3, 1), (2, 2), (2, 1, 1), (1, 1, 1, 1)])\n\n    def test_rotations(self):\n        self.assertEqual(list(rotations([1, 2, 3])), [(1, 2, 3), (2, 3, 1), (3, 1, 2)])\n\n    def test_is_palindromic(self):\n        self.assertTrue(is_palindromic('racecar'))\n        self.assertFalse(is_palindromic('hello'))\n\n\n\n"], "sample_69": ["\nimport unittest\nfrom io import StringIO\nimport matplotlib.artist as martist\nfrom matplotlib.testing.compare import compare_images\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nclass TestArtist(unittest.TestCase):\n\n    def test_getp(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        self.assertEqual(martist.getp(line, 'color'), line.get_color())\n        self.assertEqual(martist.getp(line, 'linewidth'), line.get_linewidth())\n        with self.assertRaises(AttributeError):\n            martist.getp(line, 'nonexistent_property')\n\n        # Test printing all properties\n        output = StringIO()\n        martist.getp(line, file=output)\n        self.assertIn('color', output.getvalue())\n        self.assertIn('linewidth', output.getvalue())\n\n    def test_setp(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n\n        # Set properties using keyword arguments\n        martist.setp(line, color='red', linewidth=2)\n        self.assertEqual(line.get_color(), 'red')\n        self.assertEqual(line.get_linewidth(), 2)\n\n        # Set properties using string/value pairs\n        martist.setp(line, 'linestyle', '--', 'marker', 'o')\n        self.assertEqual(line.get_linestyle(), '--')\n        self.assertEqual(line.get_marker(), 'o')\n\n        # Test setting properties on multiple artists\n        line2, = ax.plot([1, 2, 3], [7, 8, 9])\n        martist.setp([line, line2], color='green')\n        self.assertEqual(line.get_color(), 'green')\n        self.assertEqual(line2.get_color(), 'green')\n\n    def test_kwdoc(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        docstring = martist.kwdoc(line)\n        self.assertIn('color', docstring)\n        self.assertIn('linewidth', docstring)\n\n    def test_ArtistInspector(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        inspector = martist.ArtistInspector(line)\n\n        # Test get_setters\n        setters = inspector.get_setters()\n        self.assertIn('color', setters)\n        self.assertIn('linewidth', setters)\n\n        # Test aliased_name\n        self.assertEqual(inspector.aliased_name('markerfacecolor'),\n                         'markerfacecolor or mfc')\n\n        # Test pprint_setters\n        output = inspector.pprint_setters()\n        self.assertIn('color', '\\n'.join(output))\n        self.assertIn('linewidth', '\\n'.join(output))\n\n        # Test pprint_setters_rest\n        output = inspector.pprint_setters_rest()\n        self.assertIn('color', '\\n'.join(output))\n        self.assertIn('linewidth', '\\n'.join(output))\n\n        # Test properties\n        properties = inspector.properties()\n        self.assertIn('color', properties)\n        self.assertIn('linewidth', properties)\n\n    def test_get_valid_values(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        inspector = martist.ArtistInspector(line)\n\n        # Test valid values for a property\n        valid_values = inspector.get_valid_values('linestyle')\n        self.assertIn('-', valid_values)\n        self.assertIn('--', valid_values)\n\n        # Test valid values for a property with no defined values\n        valid_values = inspector.get_valid_values('xdata')\n        self.assertEqual(valid_values, 'unknown')\n\n    def test_Artist_mouseover(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        self.assertFalse(line.mouseover)\n        line.set_mouseover(True)\n        self.assertTrue(line.mouseover)\n\n    def test_Artist_sticky_edges(self):\n        fig, ax = plt.subplots()\n        ax.set_xlim(0, 10)\n        ax.set_ylim(0, 10)\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        self.assertEqual(line.sticky_edges.x, (np.inf, np.inf))\n        self.assertEqual(line.sticky_edges.y, (np.inf, np.inf))\n        line.sticky_edges.x[:] = (0, 10)\n        self.assertEqual(line.sticky_edges.x, (0, 10))\n\n    def test_Artist_update(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.update({'color': 'red', 'linewidth': 2})\n        self.assertEqual(line.get_color(), 'red')\n        self.assertEqual(line.get_linewidth(), 2)\n\n    def test_Artist_update_from(self):\n        fig, ax = plt.subplots()\n        line1, = ax.plot([1, 2, 3], [4, 5, 6])\n        line2, = ax.plot([4, 5, 6], [7, 8, 9])\n        line2.update_from(line1)\n        self.assertEqual(line2.get_color(), line1.get_color())\n        self.assertEqual(line2.get_linewidth(), line1.get_linewidth())\n\n    def test_Artist_properties(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        props = line.properties()\n        self.assertIn('color', props)\n        self.assertIn('linewidth', props)\n\n    def test_Artist_draw(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        # We can't directly test the drawing process, but we can check\n        # that the draw method doesn't raise any errors.\n        line.draw(renderer=None)\n\n    def test_Artist_remove(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.remove()\n        self.assertNotIn(line, ax.lines)\n\n    def test_Artist_set_transform(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        transform = ax.transData\n        line.set_transform(transform)\n        self.assertEqual(line.get_transform(), transform)\n\n    def test_Artist_set_clip_path(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        path = plt.Path([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]])\n        patch = plt.PathPatch(path, transform=ax.transData)\n        line.set_clip_path(patch)\n        self.assertEqual(line.get_clip_path(), patch)\n\n    def test_Artist_set_clip_on(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_clip_on(True)\n        self.assertTrue(line.get_clip_on())\n        line.set_clip_on(False)\n        self.assertFalse(line.get_clip_on())\n\n    def test_Artist_set_visible(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_visible(False)\n        self.assertFalse(line.get_visible())\n        line.set_visible(True)\n        self.assertTrue(line.get_visible())\n\n    def test_Artist_set_zorder(self):\n        fig, ax = plt.subplots()\n        line1, = ax.plot([1, 2, 3], [4, 5, 6])\n        line2, = ax.plot([4, 5, 6], [7, 8, 9])\n        line1.set_zorder(10)\n        self.assertEqual(line1.get_zorder(), 10)\n\n    def test_Artist_set_alpha(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_alpha(0.5)\n        self.assertEqual(line.get_alpha(), 0.5)\n\n    def test_Artist_set_animated(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_animated(True)\n        self.assertTrue(line.get_animated())\n        line.set_animated(False)\n        self.assertFalse(line.get_animated())\n\n    def test_Artist_set_label(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_label('My Line')\n        self.assertEqual(line.get_label(), 'My Line')\n\n    def test_Artist_set_picker(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_picker(True)\n        self.assertTrue(line.get_picker())\n        line.set_picker(5)\n        self.assertEqual(line.get_picker(), 5)\n\n    def test_Artist_set_gid(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_gid('my_gid')\n        self.assertEqual(line.get_gid(), 'my_gid')\n\n    def test_Artist_set_axes(self):\n        fig, ax1 = plt.subplots()\n        ax2 = fig.add_subplot(212)\n        line, = ax1.plot([1, 2, 3], [4, 5, 6])\n        line.set_axes(ax2)\n        self.assertEqual(line.axes, ax2)\n\n    def test_Artist_set_figure(self):\n        fig1, ax1 = plt.subplots()\n        fig2 = plt.figure()\n        line, = ax1.plot([1, 2, 3], [4, 5, 6])\n        line.set_figure(fig2)\n        self.assertEqual(line.figure, fig2)\n\n    def test_Artist_set_data(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_data([4, 5, 6], [7, 8, 9])\n        self.assertEqual(line.get_xdata().tolist(), [4, 5, 6])\n        self.assertEqual(line.get_ydata().tolist(), [7, 8, 9])\n\n    def test_Artist_set_xdata(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_xdata([4, 5, 6])\n        self.assertEqual(line.get_xdata().tolist(), [4, 5, 6])\n\n    def test_Artist_set_ydata(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_ydata([7, 8, 9])\n        self.assertEqual(line.get_ydata().tolist(), [7, 8, 9])\n\n    def test_Artist_get_window_extent(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        extent = line.get_window_extent()\n        self.assertTrue(isinstance(extent, matplotlib.transforms.Bbox))\n\n    def test_Artist_get_path(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        path = line.get_path()\n        self.assertTrue(isinstance(path, matplotlib.path.Path))\n\n    def test_Artist_get_transform(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        transform = line.get_transform()\n        self.assertTrue(isinstance(transform, matplotlib.transforms.Transform))\n\n    def test_Artist_get_clip_path(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        clip_path = line.get_clip_path()\n        self.assertIsNone(clip_path)\n\n    def test_Artist_get_clip_on(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        clip_on = line.get_clip_on()\n        self.assertTrue(clip_on)\n\n    def test_Artist_get_visible(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        visible = line.get_visible()\n        self.assertTrue(visible)\n\n    def test_Artist_get_zorder(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        zorder = line.get_zorder()\n        self.assertEqual(zorder, 2)\n\n    def test_Artist_get_alpha(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        alpha = line.get_alpha()\n        self.assertEqual(alpha, 1.0)\n\n    def test_Artist_get_animated(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        animated = line.get_animated()\n        self.assertFalse(animated)\n\n    def test_Artist_get_label(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        label = line.get_label()\n        self.assertEqual(label, '')\n\n    def test_Artist_get_picker(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        picker = line.get_picker()\n        self.assertFalse(picker)\n\n    def test_Artist_get_gid(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        gid = line.get_gid()\n        self.assertIsNone(gid)\n\n    def test_Artist_get_axes(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        axes = line.get_axes()\n        self.assertEqual(axes, ax)\n\n    def test_Artist_get_figure(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        figure = line.get_figure()\n        self.assertEqual(figure, fig)\n\n    def test_Artist_get_data(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        xdata, ydata = line.get_data()\n        self.assertEqual(xdata.tolist(), [1, 2, 3])\n        self.assertEqual(ydata.tolist(), [4, 5, 6])\n\n    def test_Artist_get_url(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        url = line.get_url()\n        self.assertIsNone(url)\n\n    def test_Artist_set_url(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_url('https://www.example.com')\n        self.assertEqual(line.get_url(), 'https://www.example.com')\n\n    def test_Artist_get_ind(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        ind = line.get_ind()\n        self.assertIsNone(ind)\n\n    def test_Artist_set_ind(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_ind(10)\n        self.assertEqual(line.get_ind(), 10)\n\n    def test_Artist_get_drawstyle(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        drawstyle = line.get_drawstyle()\n        self.assertEqual(drawstyle, 'default')\n\n    def test_Artist_set_drawstyle(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_drawstyle('steps-mid')\n        self.assertEqual(line.get_drawstyle(), 'steps-mid')\n\n    def test_Artist_get_marker(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        marker = line.get_marker()\n        self.assertEqual(marker, None)\n\n    def test_Artist_set_marker(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_marker('o')\n        self.assertEqual(line.get_marker(), 'o')\n\n    def test_Artist_get_linestyle(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        linestyle = line.get_linestyle()\n        self.assertEqual(linestyle, '-')\n\n    def test_Artist_set_linestyle(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_linestyle('--')\n        self.assertEqual(line.get_linestyle(), '--')\n\n    def test_Artist_get_linewidth(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        linewidth = line.get_linewidth()\n        self.assertEqual(linewidth, 1.0)\n\n    def test_Artist_set_linewidth(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_linewidth(2.0)\n        self.assertEqual(line.get_linewidth(), 2.0)\n\n    def test_Artist_get_markersize(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        markersize = line.get_markersize()\n        self.assertEqual(markersize, 6)\n\n    def test_Artist_set_markersize(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_markersize(10)\n        self.assertEqual(line.get_markersize(), 10)\n\n    def test_Artist_get_markerfacecolor(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        markerfacecolor = line.get_markerfacecolor()\n        self.assertEqual(markerfacecolor, 'b')\n\n    def test_Artist_set_markerfacecolor(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_markerfacecolor('r')\n        self.assertEqual(line.get_markerfacecolor(), 'r')\n\n    def test_Artist_get_markeredgecolor(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        markeredgecolor = line.get_markeredgecolor()\n        self.assertEqual(markeredgecolor, 'b')\n\n    def test_Artist_set_markeredgecolor(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_markeredgecolor('g')\n        self.assertEqual(line.get_markeredgecolor(), 'g')\n\n    def test_Artist_get_fillstyle(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        fillstyle = line.get_fillstyle()\n        self.assertEqual(fillstyle, 'full')\n\n    def test_Artist_set_fillstyle(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_fillstyle('none')\n        self.assertEqual(line.get_fillstyle(), 'none')\n\n    def test_Artist_get_snap(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        snap = line.get_snap()\n        self.assertFalse(snap)\n\n    def test_Artist_set_snap(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_snap(True)\n        self.assertTrue(line.get_snap())\n\n    def test_Artist_get_sketch_params(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        sketch_params = line.get_sketch_params()\n        self.assertEqual(sketch_params, (None, None))\n\n    def test_Artist_set_sketch_params(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_sketch_params((1, 2))\n        self.assertEqual(line.get_sketch_params(), (1, 2))\n\n    def test_Artist_get_path_effects(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        path_effects = line.get_path_effects()\n        self.assertIsNone(path_effects)\n\n    def test_Artist_set_path_effects(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        path_effects = [matplotlib.patheffects.Stroke(linewidth=3, foreground='r')]\n        line.set_path_effects(path_effects)\n        self.assertEqual(line.get_path_effects(), path_effects)\n\n    def test_Artist_get_label(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        label = line.get_label()\n        self.assertEqual(label, '')\n\n    def test_Artist_set_label(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        line.set_label('My Line')\n        self.assertEqual(line.get_label(), 'My Line')\n\n\n\n"], "sample_3": ["\nimport numpy as np\nfrom astropy.modeling.models import (Shift, Scale, Rotation2D, Polynomial2D,\n                                   Mapping)\nfrom astropy.modeling.compound import CompoundModel\nfrom astropy.modeling.separable import (_coord_matrix, is_separable, _cdot, _cstack, _arith_oper, separability_matrix)\n\ndef test_coord_matrix_simple():\n    model = Shift(1)\n    coord_mat = _coord_matrix(model, 'left', model.n_outputs)\n    assert np.allclose(coord_mat, np.array([[1, 0]]))\n\ndef test_coord_matrix_mapping():\n    model = Mapping([0, 1, 0, 1])\n    coord_mat = _coord_matrix(model, 'left', model.n_outputs)\n    assert np.allclose(coord_mat, np.array([[1, 0], [0, 1], [1, 0], [0, 1]]))\n\ndef test_coord_matrix_non_separable():\n    model = Rotation2D(2)\n    coord_mat = _coord_matrix(model, 'left', model.n_outputs)\n    assert np.allclose(coord_mat, np.array([[1, 1], [1, 1]]))\n\ndef test_is_separable_simple():\n    transform = Shift(1) & Shift(2)\n    is_sep = is_separable(transform)\n    assert np.allclose(is_sep, np.array([True, True]))\n\ndef test_is_separable_compound():\n    transform = Shift(1) & Shift(2) | Scale(1) & Scale(2)\n    is_sep = is_separable(transform)\n    assert np.allclose(is_sep, np.array([True, True]))\n\ndef test_is_separable_non_separable():\n    transform = Shift(1) & Shift(2) | Rotation2D(2)\n    is_sep = is_separable(transform)\n    assert np.allclose(is_sep, np.array([False, False]))\n\ndef test_separability_matrix_simple():\n    transform = Shift(1) & Shift(2)\n    sep_mat = separability_matrix(transform)\n    assert np.allclose(sep_mat, np.array([[True, False], [False, True]]))\n\ndef test_separability_matrix_compound():\n    transform = Shift(1) & Shift(2) | Scale(1) & Scale(2)\n    sep_mat = separability_matrix(transform)\n    assert np.allclose(sep_mat, np.array([[True, False], [False, True]]))\n\ndef test_separability_matrix_non_separable():\n    transform = Shift(1) & Shift(2) | Rotation2D(2)\n    sep_mat = separability_matrix(transform)\n    assert np.allclose(sep_mat, np.array([[True, True], [True, True]]))\n\ndef test_cstack():\n    left = Shift(1)\n    right = Scale(2)\n    result = _cstack(_coord_matrix(left, 'left', left.n_outputs + right.n_outputs),\n                     _coord_matrix(right, 'right', left.n_outputs + right.n_outputs))\n    assert np.allclose(result, np.array([[1, 0], [0, 1]]))\n\ndef test_cdot():\n    left = Shift(1)\n    right = Scale(2)\n    result = _cdot(_coord_matrix(left, 'left', left.n_outputs + right.n_outputs),\n                   _coord_matrix(right, 'right', left.n_outputs + right.n_outputs))\n    assert np.allclose(result, np.array([[1, 0], [0, 1]]))\n\ndef test_arith_oper():\n    left = Shift(1)\n    right = Scale(2)\n    result = _arith_oper(left, right)\n    assert np.allclose(result, np.ones((left.n_outputs + right.n_outputs, left.n_inputs)))\n\ndef test_compound_model():\n    transform = Shift(1) & Shift(2) | Scale(1) & Scale(2)\n    assert isinstance(transform, CompoundModel)\n\ndef test_mapping_model():\n    transform = Mapping([0, 1, 0, 1])\n    assert isinstance(transform, Mapping)\n\ndef test_separable_matrix_mapping():\n    transform = Shift(1) & Shift(2) | Mapping([0, 1, 0, 1])\n    sep_mat = separability_matrix(transform)\n    assert np.allclose(sep_mat, np.array([[True, False], [False, True], [True, False], [False, True]]))\n\ndef test_is_separable_mapping():\n    transform = Shift(1) & Shift(2) | Mapping([0, 1, 0, 1])\n    is_sep = is_separable(transform)\n    assert np.allclose(is_sep, np.array([True, True, True, True]))\n\ndef test_polynomial_model():\n    transform = Polynomial2D(1) & Polynomial2D(2)\n    assert isinstance(transform, CompoundModel)\n\ndef test_separability_matrix_polynomial():\n    transform = Shift(1) & Shift(2) | Polynomial2D(1) & Polynomial2D(2)\n    sep_mat = separability_matrix(transform)\n    assert np.allclose(sep_mat, np.array([[True, True], [True, True]]))\n\ndef test_is_separable_polynomial():\n    transform = Shift(1) & Shift(2) | Polynomial2D(1) & Polynomial2D(2)\n    is_sep = is_separable(transform)\n    assert np.allclose(is_sep, np.array([False, False]))\n\n"], "sample_122": ["\nfrom sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\nfrom sympy.matrices import MutableSparseMatrix, MutableDenseMatrix\nfrom sympy.matrices import SparseMatrix\nfrom sympy import symbols, S\n\ndef test_SparseMatrix_init():\n    assert SparseMatrix(2, 2, {}) == SparseMatrix(2, 2, [])\n    assert SparseMatrix(2, 2, { (0, 1): 1 }) == SparseMatrix([[0, 1], [0, 0]])\n    assert SparseMatrix(2, 2, [(0, 1, 1)]) == SparseMatrix([[0, 1], [0, 0]])\n\ndef test_SparseMatrix_add():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    B = SparseMatrix([[5, 6], [7, 8]])\n    assert A + B == SparseMatrix([[6, 8], [10, 12]])\n\ndef test_SparseMatrix_sub():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    B = SparseMatrix([[5, 6], [7, 8]])\n    assert A - B == SparseMatrix([[-4, -4], [-4, -4]])\n\ndef test_SparseMatrix_mul():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    B = SparseMatrix([[5, 6], [7, 8]])\n    assert A * B == SparseMatrix([[19, 22], [43, 50]])\n\ndef test_SparseMatrix_transpose():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    assert A.T == SparseMatrix([[1, 3], [2, 4]])\n\ndef test_SparseMatrix_row_del():\n    A = SparseMatrix([[1, 2], [3, 4], [5, 6]])\n    A.row_del(1)\n    assert A == SparseMatrix([[1, 2], [5, 6]])\n\ndef test_SparseMatrix_col_del():\n    A = SparseMatrix([[1, 2], [3, 4], [5, 6]])\n    A.col_del(1)\n    assert A == SparseMatrix([[1], [3], [5]])\n\ndef test_SparseMatrix_row_join():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    B = SparseMatrix([[5, 6], [7, 8]])\n    assert A.row_join(B) == SparseMatrix([[1, 2, 5, 6], [3, 4, 7, 8]])\n\ndef test_SparseMatrix_col_join():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    B = SparseMatrix([[5, 6], [7, 8]])\n    assert A.col_join(B) == SparseMatrix([[1, 2, 5, 6], [3, 4, 7, 8]])\n\ndef test_SparseMatrix_copyin_matrix():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    B = SparseMatrix([[5, 6], [7, 8]])\n    A.copyin_matrix((0, 1, 0, 2), B)\n    assert A == SparseMatrix([[1, 5, 6], [3, 7, 8]])\n\ndef test_SparseMatrix_fill():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    A.fill(0)\n    assert A == SparseMatrix([[0, 0], [0, 0]])\n\ndef test_SparseMatrix_row_op():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    A.row_op(0, lambda v, j: v + 1)\n    assert A == SparseMatrix([[2, 3], [3, 4]])\n\ndef test_SparseMatrix_col_op():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    A.col_op(0, lambda v, i: v + 1)\n    assert A == SparseMatrix([[2, 2], [4, 4]])\n\ndef test_SparseMatrix_zip_row_op():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    A.zip_row_op(0, 1, lambda v, u: v + u)\n    assert A == SparseMatrix([[4, 2], [3, 4]])\n\ndef test_SparseMatrix_scalar_multiply():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    assert A.scalar_multiply(2) == SparseMatrix([[2, 4], [6, 8]])\n\ndef test_SparseMatrix_solve_least_squares():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    b = Matrix([5, 11])\n    x = A.solve_least_squares(b)\n    assert x.evalf() == Matrix([1.0, 2.0])\n\ndef test_SparseMatrix_solve():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    b = Matrix([5, 11])\n    x = A.solve(b)\n    assert x == Matrix([1.0, 2.0])\n\ndef test_SparseMatrix_LDLdecomposition():\n    A = SparseMatrix([[4, 12], [12, 37]])\n    L, D = A.LDLdecomposition()\n    assert L * D * L.T == A\n\ndef test_SparseMatrix_cholesky():\n    A = SparseMatrix([[25, 15, -5], [15, 18, 0], [-5, 0, 11]])\n    L = A.cholesky()\n    assert L * L.T == A\n\ndef test_SparseMatrix_row_structure_symbolic_cholesky():\n    S = SparseMatrix([[1, 0, 3, 2], [0, 0, 1, 0], [4, 0, 0, 5], [0, 6, 7, 0]])\n    L = S.row_structure_symbolic_cholesky()\n    assert L == [[0], [], [0], [1, 2]]\n\ndef test_SparseMatrix_liupc():\n    S = SparseMatrix([[1, 0, 3, 2], [0, 0, 1, 0], [4, 0, 0, 5], [0, 6, 7, 0]])\n    R, parent = S.liupc()\n    assert R == [[0], [], [0], [1, 2]]\n\ndef test_SparseMatrix_RL():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    assert A.RL == [(0, 0, 1), (0, 1, 2), (1, 0, 3), (1, 1, 4)]\n\ndef test_SparseMatrix_CL():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    assert A.CL == [(0, 0, 1), (1, 0, 3), (0, 1, 2), (1, 1, 4)]\n\n"], "sample_38": ["\nfrom unittest.mock import patch, MagicMock\n\nfrom django.contrib.auth.forms import (\n    AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm,\n    PasswordResetForm, ReadOnlyPasswordHashField, ReadOnlyPasswordHashWidget,\n    SetPasswordForm, UserChangeForm, UserCreationForm,\n)\nfrom django.contrib.auth.models import User\nfrom django.core.exceptions import ValidationError\nfrom django.core.mail import EmailMultiAlternatives\nfrom django.test import SimpleTestCase\nfrom django.utils.translation import gettext_lazy as _\n\nclass UserCreationFormTests(SimpleTestCase):\n    def test_password_mismatch(self):\n        form = UserCreationForm()\n        form.data = {'username': 'testuser', 'password1': 'password', 'password2': 'wrongpassword'}\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['password2'], [_(\n            'The two password fields didn\u2019t match.'\n        )])\n\n    def test_valid_form(self):\n        form = UserCreationForm()\n        form.data = {'username': 'testuser', 'password1': 'password', 'password2': 'password'}\n        self.assertTrue(form.is_valid())\n\nclass UserChangeFormTests(SimpleTestCase):\n    def test_password_field(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = UserChangeForm(instance=user)\n        self.assertTrue(isinstance(form.fields['password'], ReadOnlyPasswordHashField))\n\nclass AuthenticationFormTests(SimpleTestCase):\n    def test_invalid_login(self):\n        form = AuthenticationForm()\n        form.data = {'username': 'testuser', 'password': 'wrongpassword'}\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['username'], [_(\n            'Please enter a correct %(username)s and password. Note that both fields may be case-sensitive.'\n        )])\n\n    def test_inactive_user(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        user.is_active = False\n        user.save()\n        form = AuthenticationForm()\n        form.data = {'username': 'testuser', 'password': 'password'}\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['username'], [\n            _('This account is inactive.')\n        ])\n\nclass PasswordResetFormTests(SimpleTestCase):\n    @patch('django.contrib.auth.forms.PasswordResetForm.send_mail')\n    def test_send_mail(self, mock_send_mail):\n        form = PasswordResetForm()\n        form.data = {'email': 'test@example.com'}\n        form.is_valid()\n        mock_send_mail.assert_called_once_with(\n            'registration/password_reset_subject.txt',\n            'registration/password_reset_email.html',\n            {'email': 'test@example.com', 'domain': None, 'site_name': None, 'uid': None, 'user': None, 'token': None, 'protocol': 'http'},\n            None,\n            'test@example.com',\n            'registration/password_reset_email.html',\n        )\n\nclass SetPasswordFormTests(SimpleTestCase):\n    def test_password_mismatch(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = SetPasswordForm(user)\n        form.data = {'new_password1': 'password', 'new_password2': 'wrongpassword'}\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['new_password2'], [_(\n            'The two password fields didn\u2019t match.'\n        )])\n\n    def test_valid_form(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = SetPasswordForm(user)\n        form.data = {'new_password1': 'password', 'new_password2': 'password'}\n        self.assertTrue(form.is_valid())\n\nclass PasswordChangeFormTests(SimpleTestCase):\n    def test_password_incorrect(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = PasswordChangeForm(user)\n        form.data = {'old_password': 'wrongpassword', 'new_password1': 'newpassword', 'new_password2': 'newpassword'}\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['old_password'], [_(\n            'Your old password was entered incorrectly. Please enter it again.'\n        )])\n\nclass AdminPasswordChangeFormTests(SimpleTestCase):\n    def test_password_mismatch(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = AdminPasswordChangeForm(user)\n        form.data = {'password1': 'password', 'password2': 'wrongpassword'}\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['password2'], [_(\n            'The two password fields didn\u2019t match.'\n        )])\n\n    def test_valid_form(self):\n        user = User.objects.create_user('testuser', 'test@example.com', 'password')\n        form = AdminPasswordChangeForm(user)\n        form.data = {'password1': 'password', 'password2': 'password'}\n        self.assertTrue(form.is_valid())\n\nclass ReadOnlyPasswordHashWidgetTests(SimpleTestCase):\n    def test_render(self):\n        widget = ReadOnlyPasswordHashWidget()\n        context = widget.get_context('password', 'hashed_password')\n        self.assertEqual(context['summary'], [{'label': 'hashed_password'}])\n\nclass ReadOnlyPasswordHashFieldTests(SimpleTestCase):\n    def test_widget(self):\n        field = ReadOnlyPasswordHashField()\n        self.assertTrue(isinstance(field.widget, ReadOnlyPasswordHashWidget))\n\nclass UsernameFieldTests(SimpleTestCase):\n    def test_to_python(self):\n        field = UsernameField()\n        self.assertEqual(field.to_python('testuser'), 'testuser')\n\n"], "sample_93": ["\nfrom unittest.mock import patch\nfrom pathlib import Path\n\nfrom _pytest.tmpdir import TempPathFactory\nfrom _pytest.tmpdir import TempdirFactory\nfrom _pytest.tmpdir import get_user\nfrom _pytest.tmpdir import pytest_configure\nfrom _pytest.tmpdir import tmpdir_factory\nfrom _pytest.tmpdir import tmp_path_factory\nfrom _pytest.tmpdir import _mk_tmp\nfrom _pytest.tmpdir import tmpdir\nfrom _pytest.tmpdir import tmp_path\nfrom _pytest.config import Config\nfrom _pytest.fixtures import FixtureRequest\n\ndef test_get_user():\n    with patch('getpass.getuser', return_value='testuser'):\n        assert get_user() == 'testuser'\n\n    with patch('getpass.getuser', side_effect=KeyError):\n        assert get_user() is None\n\ndef test_TempPathFactory_from_config():\n    config = Config()\n    config.option.basetemp = Path('/tmp/basetemp')\n    factory = TempPathFactory.from_config(config, _ispytest=True)\n    assert factory._given_basetemp == Path('/tmp/basetemp')\n\ndef test_TempPathFactory_mktemp():\n    factory = TempPathFactory(None, None, _ispytest=True)\n    p = factory.mktemp('testdir', numbered=True)\n    assert p.is_dir()\n\ndef test_TempPathFactory_getbasetemp():\n    factory = TempPathFactory(None, None, _ispytest=True)\n    basetemp = factory.getbasetemp()\n    assert basetemp.is_dir()\n\ndef test_TempdirFactory_mktemp():\n    tmppath_factory = TempPathFactory(None, None, _ispytest=True)\n    factory = TempdirFactory(tmppath_factory, _ispytest=True)\n    p = factory.mktemp('testdir', numbered=True)\n    assert isinstance(p, py.path.local)\n\ndef test_TempdirFactory_getbasetemp():\n    tmppath_factory = TempPathFactory(None, None, _ispytest=True)\n    factory = TempdirFactory(tmppath_factory, _ispytest=True)\n    basetemp = factory.getbasetemp()\n    assert isinstance(basetemp, py.path.local)\n\ndef test_pytest_configure(monkeypatch):\n    config = Config()\n    monkeypatch.setattr(config, '_cleanup', [])\n    pytest_configure(config)\n    assert hasattr(config, '_tmp_path_factory')\n    assert hasattr(config, '_tmpdirhandler')\n\ndef test_tmpdir_factory(request: FixtureRequest):\n    config = Config()\n    request.config = config\n    pytest_configure(config)\n    factory = tmpdir_factory(request)\n    assert isinstance(factory, TempdirFactory)\n\ndef test_tmp_path_factory(request: FixtureRequest):\n    config = Config()\n    request.config = config\n    pytest_configure(config)\n    factory = tmp_path_factory(request)\n    assert isinstance(factory, TempPathFactory)\n\ndef test__mk_tmp(request: FixtureRequest):\n    factory = TempPathFactory(None, None, _ispytest=True)\n    p = _mk_tmp(request, factory)\n    assert p.is_dir()\n\ndef test_tmpdir(request: FixtureRequest):\n    factory = TempPathFactory(None, None, _ispytest=True)\n    p = tmpdir(factory)\n    assert isinstance(p, py.path.local)\n\ndef test_tmp_path(request: FixtureRequest):\n    factory = TempPathFactory(None, None, _ispytest=True)\n    p = tmp_path(request, factory)\n    assert isinstance(p, Path)\n\n"], "sample_152": ["\nfrom sympy.testing.pytest import raises\nfrom sympy.functions.elementary.trigonometric import sin, cos\nfrom sympy.matrices.dense import Matrix\nfrom sympy.simplify import simplify\nfrom sympy.tensor.array import Array\nfrom sympy.tensor.array.dense_ndim_array import ( ImmutableDenseNDimArray, MutableDenseNDimArray)\nfrom sympy.tensor.array.sparse_ndim_array import ( ImmutableSparseNDimArray, MutableSparseNDimArray)\nfrom sympy.abc import x, y\n\ndef test_ndim_array_creation():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.shape == (2, 2)\n    assert a[0, 0] == 1\n    assert a[1, 1] == 4\n\ndef test_ndim_array_creation_from_matrix():\n    m = Matrix([[1, 2], [3, 4]])\n    a = ImmutableDenseNDimArray(m)\n    assert a.shape == (2, 2)\n    assert a[0, 0] == 1\n    assert a[1, 1] == 4\n\ndef test_ndim_array_creation_from_list():\n    a = ImmutableDenseNDimArray([[1, 2, 3], [4, 5, 6]])\n    assert a.shape == (2, 3)\n    assert a[0, 2] == 3\n    assert a[1, 1] == 5\n\ndef test_ndim_array_creation_from_flat_list():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4, 5, 6], (2, 3))\n    assert a.shape == (2, 3)\n    assert a[0, 2] == 3\n    assert a[1, 1] == 5\n\ndef test_ndim_array_creation_empty():\n    a = ImmutableDenseNDimArray([], (0,))\n    assert a.shape == (0,)\n    assert len(a) == 0\n\ndef test_ndim_array_creation_sparse():\n    a = ImmutableSparseNDimArray({(0, 0): 1, (1, 1): 4}, (2, 2))\n    assert a.shape == (2, 2)\n    assert a[0, 0] == 1\n    assert a[1, 1] == 4\n    assert a[0, 1] == 0\n\ndef test_ndim_array_arithmetic():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    b = ImmutableDenseNDimArray([4, 3, 2, 1], (2, 2))\n    c = a + b\n    assert c.shape == (2, 2)\n    assert c[0, 0] == 5\n    assert c[1, 1] == 5\n\ndef test_ndim_array_subtraction():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    b = ImmutableDenseNDimArray([4, 3, 2, 1], (2, 2))\n    c = a - b\n    assert c.shape == (2, 2)\n    assert c[0, 0] == -3\n    assert c[1, 1] == 3\n\ndef test_ndim_array_multiplication_scalar():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    c = a * 2\n    assert c.shape == (2, 2)\n    assert c[0, 0] == 2\n    assert c[1, 1] == 8\n\ndef test_ndim_array_division_scalar():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    c = a / 2\n    assert c.shape == (2, 2)\n    assert c[0, 0] == 1/2\n    assert c[1, 1] == 2\n\ndef test_ndim_array_negation():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    c = -a\n    assert c.shape == (2, 2)\n    assert c[0, 0] == -1\n    assert c[1, 1] == -4\n\ndef test_ndim_array_equality():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    b = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a == b\n    c = ImmutableDenseNDimArray([1, 2, 3, 5], (2, 2))\n    assert a != c\n\ndef test_ndim_array_transpose():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    c = a.transpose()\n    assert c.shape == (2, 2)\n    assert c[0, 1] == 2\n    assert c[1, 0] == 3\n\ndef test_ndim_array_conjugate():\n    a = ImmutableDenseNDimArray([1 + 2j, 3 - 4j], (2,))\n    c = a.conjugate()\n    assert c.shape == (2,)\n    assert c[0] == 1 - 2j\n    assert c[1] == 3 + 4j\n\ndef test_ndim_array_adjoint():\n    a = ImmutableDenseNDimArray([1 + 2j, 3 - 4j], (2,))\n    c = a.adjoint()\n    assert c.shape == (2,)\n    assert c[0] == 1 - 2j\n    assert c[1] == 3 + 4j\n\ndef test_ndim_array_slicing():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4, 5, 6], (2, 3))\n    assert a[0, :].tolist() == [1, 2, 3]\n    assert a[:, 1].tolist() == [2, 5]\n    assert a[1, 1] == 5\n\ndef test_ndim_array_indexing_symbolic():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    i = x\n    j = y\n    assert a[i, j].free_symbols == {x, y}\n\ndef test_ndim_array_tolist():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.tolist() == [[1, 2], [3, 4]]\n\ndef test_ndim_array_diff():\n    a = ImmutableDenseNDimArray([[x, y], [1, x*y]])\n    assert a.diff(x).tolist() == [[1, y], [0, y]]\n\ndef test_ndim_array_applyfunc():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.applyfunc(lambda i: i*2).tolist() == [[2, 4], [6, 8]]\n\ndef test_ndim_array_shape():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.shape == (2, 2)\n\ndef test_ndim_array_rank():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.rank() == 2\n\ndef test_ndim_array_len():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert len(a) == 4\n\ndef test_ndim_array_errors():\n    with raises(ValueError):\n        ImmutableDenseNDimArray([1, 2, 3], (2, 2))\n    with raises(ValueError):\n        ImmutableDenseNDimArray([1, 2, 3, 4], (2, 3))\n    with raises(ValueError):\n        ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2, 2))\n\n"], "sample_53": ["\nfrom django.db import models\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.operations import (\n    AddField,\n    AlterField,\n    RemoveField,\n    AlterModelOptions,\n    AlterUniqueTogether,\n    AlterIndexTogether,\n    RenameModel,\n    AlterModelTable,\n)\nfrom django.test import TestCase\n\nclass AutodetectorTests(TestCase):\n\n    def test_no_changes(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                \"app\": models.Model._meta.app_label,\n            },\n        )\n        changes = autodetector.discover_changes()\n        self.assertEqual(changes, {})\n\n    def test_add_field(self):\n        class MyModel(models.Model):\n            pass\n\n        autodetector = MigrationAutodetector(\n            {\n                \"app\": MyModel._meta.app_label,\n                \"MyModel\": MyModel,\n            },\n            {\n                \"app\": models.Model._meta.app_label,\n            },\n        )\n        changes = autodetector.discover_changes()\n        self.assertEqual(len(changes[\"app\"]), 1)\n        self.assertEqual(\n            changes[\"app\"][0].operations[0],\n            AddField(\n                model_name=\"mymodel\",\n                name=\"new_field\",\n                field=models.CharField(max_length=255),\n                preserve_default=False,\n            ),\n        )\n\n    def test_alter_field(self):\n        class MyModel(models.Model):\n            field = models.CharField(max_length=10)\n\n        autodetector = MigrationAutodetector(\n            {\n                \"app\": MyModel._meta.app_label,\n                \"MyModel\": MyModel,\n            },\n            {\n                \"app\": models.Model._meta.app_label,\n            },\n        )\n        changes = autodetector.discover_changes()\n        self.assertEqual(len(changes[\"app\"]), 1)\n        self.assertEqual(\n            changes[\"app\"][0].operations[0],\n            AlterField(\n                model_name=\"mymodel\",\n                name=\"field\",\n                field=models.CharField(max_length=20),\n                preserve_default=True,\n            ),\n        )\n\n    def test_remove_field(self):\n        class MyModel(models.Model):\n            field = models.CharField(max_length=10)\n\n        autodetector = MigrationAutodetector(\n            {\n                \"app\": MyModel._meta.app_label,\n                \"MyModel\": MyModel,\n            },\n            {\n                \"app\": models.Model._meta.app_label,\n            },\n        )\n        changes = autodetector.discover_changes()\n        self.assertEqual(len(changes[\"app\"]), 1)\n        self.assertEqual(\n            changes[\"app\"][0].operations[0],\n            RemoveField(model_name=\"mymodel\", name=\"field\"),\n        )\n\n    def test_rename_model(self):\n        class MyModel(models.Model):\n            pass\n\n        autodetector = MigrationAutodetector(\n            {\n                \"app\": MyModel._meta.app_label,\n                \"MyModel\": MyModel,\n            },\n            {\n                \"app\": models.Model._meta.app_label,\n            },\n        )\n        changes = autodetector.discover_changes()\n        self.assertEqual(len(changes[\"app\"]), 1)\n        self.assertEqual(\n            changes[\"app\"][0].operations[0],\n            RenameModel(old_name=\"mymodel\", new_name=\"NewModel\"),\n        )\n\n    def test_alter_model_options(self):\n        class MyModel(models.Model):\n            pass\n\n        MyModel._meta.verbose_name = \"My Model\"\n\n        autodetector = MigrationAutodetector(\n            {\n                \"app\": MyModel._meta.app_label,\n                \"MyModel\": MyModel,\n            },\n            {\n                \"app\": models.Model._meta.app_label,\n            },\n        )\n        changes = autodetector.discover_changes()\n        self.assertEqual(len(changes[\"app\"]), 1)\n        self.assertEqual(\n            changes[\"app\"][0].operations[0],\n            AlterModelOptions(\n                name=\"mymodel\",\n                options={\"verbose_name\": \"My Model\"},\n            ),\n        )\n\n    def test_alter_unique_together(self):\n        class MyModel(models.Model):\n            field1 = models.CharField(max_length=10)\n            field2 = models.CharField(max_length=10)\n\n        MyModel._meta.unique_together = [(\"field1\", \"field2\")]\n\n        autodetector = MigrationAutodetector(\n            {\n                \"app\": MyModel._meta.app_label,\n                \"MyModel\": MyModel,\n            },\n            {\n                \"app\": models.Model._meta.app_label,\n            },\n        )\n        changes = autodetector.discover_changes()\n        self.assertEqual(len(changes[\"app\"]), 1)\n        self.assertEqual(\n            changes[\"app\"][0].operations[0],\n            AlterUniqueTogether(\n                name=\"mymodel\", unique_together=[(\"field1\", \"field2\")]\n            ),\n        )\n\n    def test_alter_index_together(self):\n        class MyModel(models.Model):\n            field1 = models.CharField(max_length=10)\n            field2 = models.CharField(max_length=10)\n\n        MyModel._meta.index_together = [(\"field1\", \"field2\")]\n\n        autodetector = MigrationAutodetector(\n            {\n                \"app\": MyModel._meta.app_label,\n                \"MyModel\": MyModel,\n            },\n            {\n                \"app\": models.Model._meta.app_label,\n            },\n        )\n        changes = autodetector.discover_changes()\n        self.assertEqual(len(changes[\"app\"]), 1)\n        self.assertEqual(\n            changes[\"app\"][0].operations[0],\n            AlterIndexTogether(\n                name=\"mymodel\", index_together=[(\"field1\", \"field2\")]\n            ),\n        )\n\n    def test_alter_model_table(self):\n        class MyModel(models.Model):\n            pass\n\n        MyModel._meta.db_table = \"new_table_name\"\n\n        autodetector = MigrationAutodetector(\n            {\n                \"app\": MyModel._meta.app_label,\n                \"MyModel\": MyModel,\n            },\n            {\n                \"app\": models.Model._meta.app_label,\n            },\n        )\n        changes = autodetector.discover_changes()\n        self.assertEqual(len(changes[\"app\"]), 1)\n        self.assertEqual(\n            changes[\"app\"][0].operations[0],\n            AlterModelTable(\n                name=\"mymodel\", table=\"new_table_name\"\n            ),\n        )\n\n"], "sample_71": ["\nimport os\nimport shutil\nimport tempfile\nfrom pathlib import Path\n\nimport matplotlib as mpl\nfrom matplotlib.style.core import (\n    use, context, available, library, reload_library,\n    _remove_blacklisted_style_params, _apply_style,\n    STYLE_EXTENSION, USER_LIBRARY_PATHS, STYLE_BLACKLIST,\n    _DEPRECATED_SEABORN_STYLES, _StyleLibrary\n)\nfrom matplotlib.testing.compare import compare_images\nfrom matplotlib.testing.decorators import check_figures_equal\n\nimport pytest\n\nmpl.use('Agg')  # Use a non-interactive backend\n\n@pytest.fixture\ndef reset_library():\n    reload_library()\n    yield\n    reload_library()\n\ndef test_use_default():\n    use('default')\n    assert mpl.rcParams == mpl.rcParamsDefault\n\ndef test_use_named_style():\n    style_name = 'classic'\n    use(style_name)\n    assert style_name in library\n\ndef test_use_style_file():\n    with tempfile.TemporaryDirectory() as tmpdir:\n        style_path = os.path.join(tmpdir, 'test_style.' + STYLE_EXTENSION)\n        with open(style_path, 'w') as f:\n            f.write('lines.linewidth: 2')\n        use(style_path)\n        assert mpl.rcParams['lines.linewidth'] == 2\n\ndef test_use_style_dict():\n    style_dict = {'lines.linewidth': 2}\n    use(style_dict)\n    assert mpl.rcParams['lines.linewidth'] == 2\n\ndef test_use_style_list():\n    style_list = ['classic', {'lines.linewidth': 2}]\n    use(style_list)\n    assert mpl.rcParams['lines.linewidth'] == 2\n\ndef test_use_invalid_style():\n    with pytest.raises(IOError):\n        use('nonexistent_style')\n\ndef test_context_manager():\n    with context('classic'):\n        assert 'classic' in library\n    assert mpl.rcParams != library['classic']\n\ndef test_context_manager_after_reset():\n    with context('classic', after_reset=True):\n        assert mpl.rcParams == library['classic']\n\ndef test_remove_blacklisted_params():\n    style_dict = {'lines.linewidth': 2, 'backend': 'agg'}\n    cleaned_style = _remove_blacklisted_style_params(style_dict)\n    assert 'lines.linewidth' in cleaned_style\n    assert 'backend' not in cleaned_style\n\ndef test_apply_style():\n    style_dict = {'lines.linewidth': 2}\n    _apply_style(style_dict)\n    assert mpl.rcParams['lines.linewidth'] == 2\n\ndef test_available_styles():\n    assert available == sorted(library.keys())\n\ndef test_reload_library():\n    with tempfile.TemporaryDirectory() as tmpdir:\n        user_style_path = os.path.join(tmpdir, 'user_style.' + STYLE_EXTENSION)\n        with open(user_style_path, 'w') as f:\n            f.write('lines.linewidth: 3')\n        USER_LIBRARY_PATHS.append(tmpdir)\n        reload_library()\n        assert 'user_style' in available\n        USER_LIBRARY_PATHS.pop()\n\ndef test_deprecated_seaborn_styles():\n    with pytest.warns(UserWarning):\n        use('seaborn')\n    assert 'seaborn-v0_8-seaborn' in library\n\ndef test_style_library_type():\n    assert isinstance(library, _StyleLibrary)\n\ndef test_style_library_getitem():\n    with pytest.warns(UserWarning):\n        library['seaborn']\n    assert library['seaborn-v0_8-seaborn']\n\n"], "sample_20": ["\nfrom django.db import models\nfrom django.db.models import (\n    CASCADE,\n    CheckConstraint,\n    CharField,\n    ForeignKey,\n    ManyToManyField,\n    Model,\n    OneToOneField,\n    UniqueConstraint,\n)\nfrom django.db.models.base import (\n    _check_constraints,\n    _check_field_name_clashes,\n    _check_id_field,\n    _check_index_together,\n    _check_long_column_names,\n    _check_local_fields,\n    _check_model_name_db_lookup_clashes,\n    _check_ordering,\n    _check_property_name_related_field_accessor_clashes,\n    _check_single_primary_key,\n    _check_unique_together,\n    make_foreign_order_accessors,\n    method_get_order,\n    method_set_order,\n)\nfrom django.db.models.fields import AutoField\nfrom django.db.models.fields.related import ManyToManyRel\nfrom django.test import SimpleTestCase, TestCase\n\nclass TestModelBase(SimpleTestCase):\n\n    def test_check_id_field(self):\n        class MyModel(Model):\n            id = models.IntegerField(primary_key=True)\n            name = models.CharField(max_length=100)\n        errors = _check_id_field()\n        self.assertEqual(errors, [])\n\n        class MyModel(Model):\n            id = models.CharField(max_length=100, primary_key=True)\n            name = models.CharField(max_length=100)\n        errors = _check_id_field()\n        self.assertEqual(errors, [])\n\n        class MyModel(Model):\n            my_id = models.IntegerField(primary_key=True)\n            name = models.CharField(max_length=100)\n        errors = _check_id_field()\n        self.assertEqual(errors, [])\n\n    def test_check_field_name_clashes(self):\n        class ParentModel(Model):\n            parent_field = models.CharField(max_length=100)\n\n        class ChildModel(ParentModel):\n            parent_field = models.IntegerField()\n        errors = _check_field_name_clashes(ChildModel)\n        self.assertEqual(len(errors), 1)\n\n    def test_check_model_name_db_lookup_clashes(self):\n        class MyModel(Model):\n            name = models.CharField(max_length=100)\n        errors = _check_model_name_db_lookup_clashes(MyModel)\n        self.assertEqual(errors, [])\n\n        class My_Model(Model):\n            name = models.CharField(max_length=100)\n        errors = _check_model_name_db_lookup_clashes(My_Model)\n        self.assertEqual(len(errors), 1)\n\n        class MyModel_(Model):\n            name = models.CharField(max_length=100)\n        errors = _check_model_name_db_lookup_clashes(MyModel_)\n        self.assertEqual(len(errors), 1)\n\n    def test_check_ordering(self):\n        class MyModel(Model):\n            name = models.CharField(max_length=100)\n        errors = _check_ordering(MyModel)\n        self.assertEqual(errors, [])\n\n        class MyModel(Model):\n            name = models.CharField(max_length=100)\n            ordering = ['name']\n        errors = _check_ordering(MyModel)\n        self.assertEqual(errors, [])\n\n        class MyModel(Model):\n            name = models.CharField(max_length=100)\n            ordering = ['-name']\n        errors = _check_ordering(MyModel)\n        self.assertEqual(errors, [])\n\n        class MyModel(Model):\n            name = models.CharField(max_length=100)\n            ordering = ['name', '-other_field']\n        errors = _check_ordering(MyModel)\n        self.assertEqual(len(errors), 1)\n\n    def test_check_property_name_related_field_accessor_clashes(self):\n        class ParentModel(Model):\n            name = models.CharField(max_length=100)\n\n        class ChildModel(Model):\n            parent = models.ForeignKey(ParentModel, on_delete=CASCADE)\n            name = models.CharField(max_length=100)\n\n        errors = _check_property_name_related_field_accessor_clashes(ChildModel)\n        self.assertEqual(errors, [])\n\n        class ChildModel(Model):\n            parent = models.ForeignKey(ParentModel, on_delete=CASCADE)\n            name = models.CharField(max_length=100)\n\n        errors = _check_property_name_related_field_accessor_clashes(ChildModel)\n        self.assertEqual(len(errors), 1)\n\n    def test_check_single_primary_key(self):\n        class MyModel(Model):\n            id = models.IntegerField(primary_key=True)\n            name = models.CharField(max_length=100)\n        errors = _check_single_primary_key(MyModel)\n        self.assertEqual(errors, [])\n\n        class MyModel(Model):\n            id = models.IntegerField(primary_key=True)\n            name = models.CharField(max_length=100, primary_key=True)\n        errors = _check_single_primary_key(MyModel)\n        self.assertEqual(len(errors), 1)\n\n    def test_check_index_together(self):\n        class MyModel(Model):\n            name = models.CharField(max_length=100)\n            age = models.IntegerField()\n        errors = _check_index_together(MyModel)\n        self.assertEqual(errors, [])\n\n        class MyModel(Model):\n            name = models.CharField(max_length=100)\n            age = models.IntegerField()\n            class Meta:\n                index_together = [('name', 'age')]\n        errors = _check_index_together(MyModel)\n        self.assertEqual(errors, [])\n\n        class MyModel(Model):\n            name = models.CharField(max_length=100)\n            age = models.IntegerField()\n            class Meta:\n                index_together = [('name', 1)]\n        errors = _check_index_together(MyModel)\n        self.assertEqual(len(errors), 1)\n\n    def test_check_local_fields(self):\n        class MyModel(Model):\n            name = models.CharField(max_length=100)\n        errors = _check_local_fields(MyModel, ['name'])\n        self.assertEqual(errors, [])\n\n        class MyModel(Model):\n            name = models.CharField(max_length=100)\n        errors = _check_local_fields(MyModel, ['nonexistent_field'])\n        self.assertEqual(len(errors), 1)\n\n    def test_check_long_column_names(self):\n        class MyModel(Model):\n            name = models.CharField(max_length=100)\n        errors = _check_long_column_names(MyModel, ['default'])\n        self.assertEqual(errors, [])\n\n    def test_check_constraints(self):\n        class MyModel(Model):\n            name = models.CharField(max_length=100)\n        errors = _check_constraints(MyModel, ['default'])\n        self.assertEqual(errors, [])\n\n    def test_make_foreign_order_accessors(self):\n        class ParentModel(Model):\n            name = models.CharField(max_length=100)\n\n        class ChildModel(Model):\n            parent = models.ForeignKey(ParentModel, on_delete=CASCADE)\n            name = models.CharField(max_length=100)\n\n        make_foreign_order_accessors(ParentModel, ChildModel)\n        self.assertTrue(hasattr(ChildModel, 'get_parentmodel_order'))\n        self.assertTrue(hasattr(ChildModel, 'set_parentmodel_order'))\n\n    def test_method_get_order(self):\n        class ParentModel(Model):\n            name = models.CharField(max_length=100)\n\n        class ChildModel(Model):\n            parent = models.ForeignKey(ParentModel, on_delete=CASCADE)\n            name = models.CharField(max_length=100)\n\n        parent = ParentModel.objects.create(name='Parent')\n        child1 = ChildModel.objects.create(parent=parent, name='Child1')\n        child2 = ChildModel.objects.create(parent=parent, name='Child2')\n\n        order = method_get_order(ChildModel, parent)\n        self.assertEqual(list(order), [child1.pk, child2.pk])\n\n    def test_method_set_order(self):\n        class ParentModel(Model):\n            name = models.CharField(max_length=100)\n\n        class ChildModel(Model):\n            parent = models.ForeignKey(ParentModel, on_delete=CASCADE)\n            name = models.CharField(max_length=100)\n\n        parent = ParentModel.objects.create(name='Parent')\n        child1 = ChildModel.objects.create(parent=parent, name='Child1')\n        child2 = ChildModel.objects.create(parent=parent, name='Child2')\n\n        method_set_order(ChildModel, parent, [child2.pk, child1.pk])\n        order = ChildModel.objects.filter(parent=parent).values_list('pk', flat=True)\n        self.assertEqual(list(order), [child2.pk, child1.pk])\n\n"], "sample_141": ["\nfrom sympy import symbols, Eq, Add, Mul, Pow\nfrom sympy.physics.units import (\n    meter, kilogram, second, ampere, kelvin, mole, candela,\n    hertz, newton, pascal, joule, watt, coulomb, volt, ohm,\n    farad, henry, tesla, weber, siemens,\n    speed_of_light, gravitational_constant, Planck_constant,\n    UnitSystem, convert_to, quantity_simplify, check_dimensions\n)\n\ndef test_convert_to_single_unit():\n    assert convert_to(meter, kilometer) == 1e-3*kilometer\n    assert convert_to(speed_of_light, meter/second) == 299792458*meter/second\n    assert convert_to(3*newton, kilogram*meter/second**2) == 3*kilogram*meter/second**2\n\ndef test_convert_to_multiple_units():\n    assert convert_to(speed_of_light, [meter, second]) == 299792458*meter/second\n    assert convert_to(3*newton, [kilogram, meter, second]) == 3*kilogram*meter/second**2\n\ndef test_convert_to_planck_units():\n    assert convert_to(\n        gravitational_constant, [Planck_constant, speed_of_light, meter]\n    ).n() == 1.61622837e-35*Planck_constant*speed_of_light/meter\n\ndef test_quantity_simplify():\n    x = symbols('x')\n    assert quantity_simplify(x*meter*meter) == x*meter**2\n    assert quantity_simplify(1e3*meter) == kilometer\n\ndef test_check_dimensions():\n    assert check_dimensions(meter + 1) == meter + 1\n    assert check_dimensions(meter + 1*meter) == 2*meter\n    try:\n        check_dimensions(meter + second)\n    except ValueError:\n        pass\n\ndef test_convert_to_with_unitsystem():\n    assert convert_to(meter, kilometer, unit_system=\"imperial\").n() == 0.000621371*kilometer\n\ndef test_convert_to_with_quantity():\n    assert convert_to(10*meter, kilometer) == 10e-3*kilometer\n    assert convert_to(10*meter, [kilometer, meter]) == 10e-3*kilometer + 0*meter\n\ndef test_convert_to_with_expression():\n    assert convert_to(meter + second, kilometer) == meter + second\n    assert convert_to(meter*second, kilometer*second) == meter*second\n\ndef test_convert_to_with_complex_expression():\n    assert convert_to(meter**2/second, kilometer**2/second) == 1e-6*kilometer**2/second\n\ndef test_convert_to_with_powers():\n    assert convert_to(meter**2, kilometer**2) == 1e-6*kilometer**2\n\ndef test_convert_to_with_mixed_units():\n    assert convert_to(meter*second, kilometer*second) == meter*second\n\ndef test_convert_to_with_non_compatible_units():\n    assert convert_to(meter, kilogram) is None\n\ndef test_quantity_simplify_with_prefixes():\n    assert quantity_simplify(1e3*meter) == kilometer\n    assert quantity_simplify(1e-3*meter) == millimeter\n\ndef test_quantity_simplify_with_multiple_quantities():\n    assert quantity_simplify(meter + kilometer) == 1001*meter\n    assert quantity_simplify(meter + 1e3*meter) == 1001*meter\n\ndef test_check_dimensions_with_complex_expression():\n    assert check_dimensions(meter + meter*second) == meter + meter*second\n    try:\n        check_dimensions(meter + second*meter)\n    except ValueError:\n        pass\n\ndef test_check_dimensions_with_constants():\n    assert check_dimensions(2*meter) == 2*meter\n    assert check_dimensions(meter + 2) == meter + 2\n\ndef test_check_dimensions_with_symbols():\n    x = symbols('x')\n    assert check_dimensions(x*meter) == x*meter\n    try:\n        check_dimensions(x*meter + 2)\n    except ValueError:\n        pass\n\ndef test_convert_to_with_derived_units():\n    assert convert_to(joule, newton*meter) == newton*meter\n    assert convert_to(watt, joule/second) == joule/second\n\ndef test_convert_to_with_base_units():\n    assert convert_to(meter, meter) == meter\n    assert convert_to(kilogram, kilogram) == kilogram\n\ndef test_convert_to_with_empty_target_units():\n    assert convert_to(meter, []) is None\n\ndef test_convert_to_with_invalid_target_units():\n    try:\n        convert_to(meter, \"invalid\")\n    except TypeError:\n        pass\n\ndef test_quantity_simplify_with_empty_expression():\n    assert quantity_simplify(1) == 1\n\ndef test_quantity_simplify_with_non_quantity_expression():\n    assert quantity_simplify(2*x) == 2*x\n\ndef test_check_dimensions_with_empty_expression():\n    assert check_dimensions(1) == 1\n\ndef test_check_dimensions_with_non_quantity_expression():\n    assert check_dimensions(2*x) == 2*x\n\n"], "sample_88": ["\nimport pytest\nfrom _pytest._io.saferepr import _try_repr_or_str\nfrom _pytest._io.saferepr import _format_repr_exception\nfrom _pytest._io.saferepr import _ellipsize\nfrom _pytest._io.saferepr import SafeRepr\nfrom _pytest._io.saferepr import safeformat\nfrom _pytest._io.saferepr import saferepr\nfrom _pytest._io.saferepr import AlwaysDispatchingPrettyPrinter\nfrom _pytest._io.saferepr import _pformat_dispatch\n\n\ndef test__try_repr_or_str_basic():\n    assert _try_repr_or_str(1) == '1'\n    assert _try_repr_or_str(\"hello\") == '\"hello\"'\n\n\ndef test__try_repr_or_str_exception():\n    class BrokenRepr:\n        def __repr__(self):\n            raise ValueError(\"boom\")\n\n    obj = BrokenRepr()\n    assert _try_repr_or_str(obj) == 'BrokenRepr(\"boom\")'\n\n\ndef test__format_repr_exception():\n    exc = ValueError(\"boom\")\n    obj = object()\n    assert _format_repr_exception(exc, obj) == '<[ValueError(\"boom\")] object object at 0x{:x}>'.format(id(obj))\n\n\ndef test__ellipsize():\n    assert _ellipsize(\"hello\", 10) == \"hello\"\n    assert _ellipsize(\"hello world\", 10) == \"hello...\"\n    assert _ellipsize(\"hello world\", 15) == \"hello world\"\n\n\ndef test_SafeRepr_basic():\n    reprer = SafeRepr(maxsize=20)\n    assert reprer.repr(1) == '1'\n    assert reprer.repr(\"hello\") == '\"hello\"'\n\n\ndef test_SafeRepr_exception():\n    class BrokenRepr:\n        def __repr__(self):\n            raise ValueError(\"boom\")\n\n    obj = BrokenRepr()\n    reprer = SafeRepr(maxsize=20)\n    assert reprer.repr(obj) == '<[ValueError(\"boom\")] BrokenRepr object at 0x{:x}>'.format(id(obj))\n\n\ndef test_safeformat_basic():\n    assert safeformat(1) == '1'\n    assert safeformat(\"hello\") == '\"hello\"'\n\n\ndef test_safeformat_exception():\n    class BrokenRepr:\n        def __repr__(self):\n            raise ValueError(\"boom\")\n\n    obj = BrokenRepr()\n    assert safeformat(obj) == '<[ValueError(\"boom\")] BrokenRepr object at 0x{:x}>'.format(id(obj))\n\n\ndef test_saferepr_basic():\n    assert saferepr(1) == '1'\n    assert saferepr(\"hello\") == '\"hello\"'\n\n\ndef test_saferepr_maxsize():\n    assert len(saferepr(\"hello world\" * 10, maxsize=20)) <= 20\n\n\ndef test_saferepr_exception():\n    class BrokenRepr:\n        def __repr__(self):\n            raise ValueError(\"boom\")\n\n    obj = BrokenRepr()\n    assert saferepr(obj) == '<[ValueError(\"boom\")] BrokenRepr object at 0x{:x}>'.format(id(obj))\n\n\ndef test_AlwaysDispatchingPrettyPrinter():\n    printer = AlwaysDispatchingPrettyPrinter()\n    assert printer.pformat([1, 2, 3]) == '[1, 2, 3]'\n\n\ndef test__pformat_dispatch():\n    assert _pformat_dispatch([1, 2, 3]) == '[1, 2, 3]'\n"], "sample_156": ["\nimport unittest\nfrom sympy.parsing.mathematica import parse_mathematica, MathematicaParser\nfrom sympy import symbols, Eq, sin, cos, tan, exp, log, sqrt, pi, I, integrate, diff\nfrom sympy.functions.special.gamma_functions import gamma\n\nclass TestMathematicaParser(unittest.TestCase):\n\n    def test_basic_arithmetic(self):\n        self.assertEqual(parse_mathematica(\"2 + 3\"), 5)\n        self.assertEqual(parse_mathematica(\"2 * 3\"), 6)\n        self.assertEqual(parse_mathematica(\"10 / 2\"), 5)\n        self.assertEqual(parse_mathematica(\"5 - 2\"), 3)\n        self.assertEqual(parse_mathematica(\"2^3\"), 8)\n\n    def test_parentheses(self):\n        self.assertEqual(parse_mathematica(\"(2 + 3) * 4\"), 20)\n        self.assertEqual(parse_mathematica(\"2 * (3 + 4)\"), 14)\n        self.assertEqual(parse_mathematica(\"10 / (2 + 1)\"), 3.3333333333333335)\n\n    def test_variables(self):\n        x = symbols('x')\n        self.assertEqual(parse_mathematica(\"x + 2\"), x + 2)\n        self.assertEqual(parse_mathematica(\"2*x\"), 2*x)\n        self.assertEqual(parse_mathematica(\"x^2\"), x**2)\n\n    def test_functions(self):\n        x = symbols('x')\n        self.assertEqual(parse_mathematica(\"Sin[x]\"), sin(x))\n        self.assertEqual(parse_mathematica(\"Cos[x]\"), cos(x))\n        self.assertEqual(parse_mathematica(\"Tan[x]\"), tan(x))\n        self.assertEqual(parse_mathematica(\"Exp[x]\"), exp(x))\n        self.assertEqual(parse_mathematica(\"Log[x]\"), log(x))\n        self.assertEqual(parse_mathematica(\"Sqrt[x]\"), sqrt(x))\n\n    def test_constants(self):\n        self.assertEqual(parse_mathematica(\"Pi\"), pi)\n        self.assertEqual(parse_mathematica(\"I\"), I)\n\n    def test_complex_expressions(self):\n        x = symbols('x')\n        self.assertEqual(parse_mathematica(\"2*x + 3*Sin[x]\"), 2*x + 3*sin(x))\n        self.assertEqual(parse_mathematica(\"(x^2 + 1)/(x - 1)\"), (x**2 + 1)/(x - 1))\n        self.assertEqual(parse_mathematica(\"Exp[x] * Sin[x]\"), exp(x)*sin(x))\n\n    def test_integration(self):\n        x = symbols('x')\n        self.assertEqual(parse_mathematica(\"Integrate[x^2, {x, 0, 1}]\"), integrate(x**2, (x, 0, 1)))\n\n    def test_differentiation(self):\n        x = symbols('x')\n        self.assertEqual(parse_mathematica(\"D[x^2, x]\"), diff(x**2, x))\n\n    def test_equations(self):\n        x = symbols('x')\n        self.assertEqual(parse_mathematica(\"x == 2\"), Eq(x, 2))\n\n    def test_gamma_function(self):\n        x = symbols('x')\n        self.assertEqual(parse_mathematica(\"Gamma[x]\"), gamma(x))\n\n    def test_list(self):\n        self.assertEqual(parse_mathematica(\"{1, 2, 3}\"), [1, 2, 3])\n\n    def test_function_definition(self):\n        parser = MathematicaParser()\n        expr = parser.parse(\"f[x_] := x^2\")\n        self.assertEqual(expr, Function('f')(x) == x**2)\n\n    def test_compound_expression(self):\n        self.assertEqual(parse_mathematica(\"a + b; c + d\"), (a + b, c + d))\n\n    def test_conditional_expression(self):\n        x = symbols('x')\n        self.assertEqual(parse_mathematica(\"If[x > 0, x, -x]\"), Piecewise((x, x > 0), (-x, True)))\n\n    def test_slot_notation(self):\n        x = symbols('x')\n        self.assertEqual(parse_mathematica(\"#1 + #2\"), x + y)\n\n    def test_pattern_matching(self):\n        x = symbols('x')\n        self.assertEqual(parse_mathematica(\"f[x_] := x^2\"), Function('f')(x) == x**2)\n\n    def test_error_handling(self):\n        with self.assertRaises(SyntaxError):\n            parse_mathematica(\"x + (\")\n\n"], "sample_33": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.dispatch import Signal, receiver\nfrom django.conf import settings\n\nclass SignalTest(unittest.TestCase):\n\n    def setUp(self):\n        self.signal = Signal()\n        self.sender = MagicMock()\n        self.receiver = MagicMock()\n\n    def test_connect_disconnect(self):\n        self.signal.connect(self.receiver, sender=self.sender)\n        self.assertTrue(self.signal.has_listeners(self.sender))\n        self.signal.disconnect(self.receiver, sender=self.sender)\n        self.assertFalse(self.signal.has_listeners(self.sender))\n\n    def test_connect_disconnect_dispatch_uid(self):\n        self.signal.connect(self.receiver, sender=self.sender, dispatch_uid='test_uid')\n        self.assertTrue(self.signal.has_listeners(self.sender))\n        self.signal.disconnect(dispatch_uid='test_uid', sender=self.sender)\n        self.assertFalse(self.signal.has_listeners(self.sender))\n\n    def test_send(self):\n        self.signal.connect(self.receiver, sender=self.sender)\n        self.signal.send(self.sender, name='test')\n        self.receiver.assert_called_once_with(signal=self.signal, sender=self.sender, name='test')\n\n    def test_send_robust(self):\n        self.signal.connect(self.receiver, sender=self.sender)\n        self.signal.send_robust(self.sender, name='test')\n        self.receiver.assert_called_once_with(signal=self.signal, sender=self.sender, name='test')\n\n    def test_send_robust_error(self):\n        def error_receiver(sender, **kwargs):\n            raise ValueError('Test error')\n        self.signal.connect(error_receiver, sender=self.sender)\n        result = self.signal.send_robust(self.sender, name='test')\n        self.assertEqual(len(result), 1)\n        self.assertIsInstance(result[0][1], ValueError)\n\n    def test_weak_references(self):\n        class Receiver:\n            pass\n        receiver = Receiver()\n        self.signal.connect(receiver, sender=self.sender, weak=True)\n        del receiver\n        self.assertFalse(self.signal.has_listeners(self.sender))\n\n    def test_receiver_decorator(self):\n        @receiver(self.signal, sender=self.sender)\n        def my_receiver(sender, **kwargs):\n            pass\n        self.signal.send(self.sender)\n        my_receiver.assert_called_once_with(sender=self.sender)\n\n    def test_receiver_decorator_multiple_signals(self):\n        signal2 = Signal()\n        @receiver([self.signal, signal2], sender=self.sender)\n        def my_receiver(sender, **kwargs):\n            pass\n        self.signal.send(self.sender)\n        my_receiver.assert_called_once_with(sender=self.sender)\n        signal2.send(self.sender)\n        self.assertEqual(my_receiver.call_count, 2)\n\n    @patch('django.conf.settings.DEBUG', True)\n    def test_receiver_decorator_debug_check(self):\n        @receiver(self.signal, sender=self.sender)\n        def my_receiver(sender, **kwargs):\n            pass\n        with self.assertRaises(ValueError):\n            @receiver(self.signal, sender=self.sender)\n            def invalid_receiver(sender):\n                pass\n\n    def test_caching(self):\n        self.signal = Signal(use_caching=True)\n        self.signal.connect(self.receiver, sender=self.sender)\n        self.assertTrue(self.signal.has_listeners(self.sender))\n        self.signal.disconnect(self.receiver, sender=self.sender)\n        self.assertFalse(self.signal.has_listeners(self.sender))\n\n    def test_providing_args(self):\n        with warnings.catch_warnings(record=True) as w:\n            Signal(providing_args='test')\n        self.assertEqual(len(w), 1)\n        self.assertIn('The providing_args argument is deprecated', str(w[0].message))\n\n"], "sample_123": ["\nimport unittest\nfrom sympy import (Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr)\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt\nfrom sympy.core.numbers import (igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse)\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom sympy import pi\nfrom mpmath.libmp.libmpf import fnan\nfrom sympy import Pi\n\nclass TestNumbers(unittest.TestCase):\n    def test_Rational(self):\n        self.assertEqual(Rational(1, 2) + Rational(1, 3), Rational(5, 6))\n        self.assertEqual(Rational(1, 2) * Rational(1, 3), Rational(1, 6))\n        self.assertEqual(Rational(1, 2) / Rational(1, 3), Rational(3, 2))\n        self.assertEqual(Rational(1, 2) - Rational(1, 3), Rational(1, 6))\n        self.assertEqual(Rational(1, 2) ** 2, Rational(1, 4))\n        self.assertEqual(Rational(1, 2).p, 1)\n        self.assertEqual(Rational(1, 2).q, 2)\n\n    def test_Integer(self):\n        self.assertEqual(Integer(1) + Integer(2), Integer(3))\n        self.assertEqual(Integer(1) * Integer(2), Integer(2))\n        self.assertEqual(Integer(1) / Integer(2), Rational(1, 2))\n        self.assertEqual(Integer(1) - Integer(2), Integer(-1))\n        self.assertEqual(Integer(2) ** 3, Integer(8))\n        self.assertEqual(Integer(10).bit_length(), 4)\n\n    def test_Float(self):\n        self.assertAlmostEqual(Float(1.23) + Float(2.45), Float(3.68))\n        self.assertAlmostEqual(Float(1.23) * Float(2.45), Float(3.0135))\n        self.assertAlmostEqual(Float(1.23) / Float(2.45), Float(0.5020408163265306))\n        self.assertAlmostEqual(Float(1.23) - Float(2.45), Float(-1.22))\n        self.assertAlmostEqual(Float(2.0) ** 3, Float(8.0))\n\n    def test_I(self):\n        self.assertEqual(I * I, -1)\n        self.assertEqual(I ** 2, -1)\n        self.assertEqual(1 / I, -I)\n\n    def test_oo(self):\n        self.assertEqual(oo + oo, oo)\n        self.assertEqual(oo * oo, oo)\n        self.assertTrue(oo > 10)\n        self.assertTrue(oo > -oo)\n\n    def test_nan(self):\n        self.assertTrue(nan is nan)\n        self.assertTrue(nan != 1)\n        self.assertTrue(nan != nan)\n\n    def test_pi(self):\n        self.assertAlmostEqual(pi.evalf(10), 3.1415926535)\n\n    def test_E(self):\n        self.assertAlmostEqual(E.evalf(10), 2.7182818285)\n\n    def test_GoldenRatio(self):\n        self.assertAlmostEqual(GoldenRatio.evalf(10), 1.6180339887)\n\n    def test_Catalan(self):\n        self.assertAlmostEqual(Catalan.evalf(10), 0.915965594177)\n\n    def test_EulerGamma(self):\n        self.assertAlmostEqual(EulerGamma.evalf(10), 0.5772156649015329)\n\n    def test_factorial(self):\n        self.assertEqual(factorial(5), 120)\n\n    def test_fibonacci(self):\n        self.assertEqual(fibonacci(5), 5)\n\n    def test_sqrt(self):\n        self.assertEqual(sqrt(4), 2)\n        self.assertAlmostEqual(sqrt(2).evalf(10), 1.4142135624)\n\n    def test_sin(self):\n        self.assertAlmostEqual(sin(pi / 2).evalf(10), 1.0)\n\n    def test_cos(self):\n        self.assertAlmostEqual(cos(pi / 2).evalf(10), 0.0)\n\n    def test_exp(self):\n        self.assertAlmostEqual(exp(1).evalf(10), 2.7182818285)\n\n    def test_log(self):\n        self.assertAlmostEqual(log(10).evalf(10), 2.302585092994)\n\n    def test_sympify(self):\n        self.assertEqual(sympify(\"1/2\"), Rational(1, 2))\n        self.assertEqual(sympify(\"2.5\"), Float(2.5))\n        self.assertEqual(sympify(\"pi\"), pi)\n\n    def test_srepr(self):\n        self.assertEqual(srepr(Rational(1, 2)), \"Rational(1, 2)\")\n        self.assertEqual(srepr(Float(2.5)), \"Float(2.5)\")\n        self.assertEqual(srepr(pi), \"pi\")\n\n    def test_latex(self):\n        self.assertEqual(latex(Rational(1, 2)), r\"\\frac{1}{2}\")\n        self.assertEqual(latex(Float(2.5)), \"2.5\")\n        self.assertEqual(latex(pi), r\"\\pi\")\n\n    def test_comp(self):\n        self.assertTrue(comp(1, 2) == -1)\n        self.assertTrue(comp(2, 1) == 1)\n        self.assertTrue(comp(1, 1) == 0)\n\n    def test_mod_inverse(self):\n        self.assertEqual(mod_inverse(3, 7), 5)\n\n    def test_igcd(self):\n        self.assertEqual(igcd(12, 18), 6)\n\n    def test_ilcm(self):\n        self.assertEqual(ilcm(12, 18), 36)\n\n    def test_igcdex(self):\n        self.assertEqual(igcdex(12, 18), (6, 2, -1))\n\n    def test_seterr(self):\n        seterr(divide='ignore')\n\n    def test_mpf_norm(self):\n        self.assertEqual(mpf_norm(fnan), fnan)\n\n    def test_isqrt(self):\n        self.assertEqual(isqrt(9), 3)\n\n    def test_integer_nthroot(self):\n        self.assertEqual(integer_nthroot(8, 3), 2)\n\n    def test_RealField(self):\n        self.assertTrue(isinstance(RealField(1), float))\n\n    def test_Gt(self):\n        self.assertTrue(Gt(1, 0))\n\n    def test_Lt(self):\n        self.assertTrue(Lt(0, 1))\n\n    def test_Ge(self):\n        self.assertTrue(Ge(1, 1))\n\n    def test_Le(self):\n        self.assertTrue(Le(1, 1))\n\n    def test_AlgebraicNumber(self):\n        self.assertEqual(AlgebraicNumber(sqrt(2)), sqrt(2))\n\n    def test_simplify(self):\n        self.assertEqual(simplify(1/2 + 1/2), 1)\n\n    def test_Tuple(self):\n        self.assertEqual(Tuple((1, 2, 3)), (1, 2, 3))\n\n    def test_zoo(self):\n        self.assertTrue(zoo is zoo)\n        self.assertTrue(zoo != 1)\n        self.assertTrue(zoo != zoo)\n\n"], "sample_77": ["\nimport numpy as np\nfrom numpy.testing import assert_allclose\nfrom pandas import Series\nfrom matplotlib.ticker import (\n    AutoDateLocator,\n    AutoMinorLocator,\n    FixedLocator,\n    LogFormatterSciNotation,\n    LogLocator,\n    MaxNLocator,\n    MultipleLocator,\n    ScalarFormatter,\n    StrMethodFormatter,\n)\nfrom matplotlib.dates import ConciseDateFormatter, AutoDateFormatter\nfrom matplotlib.transforms import Transform\n\nfrom seaborn._core.scales import (\n    Nominal,\n    Ordinal,\n    Discrete,\n    Continuous,\n    Temporal,\n    PseudoAxis,\n    _make_identity_transforms,\n    _make_logit_transforms,\n    _make_log_transforms,\n    _make_symlog_transforms,\n    _make_sqrt_transforms,\n    _make_power_transforms,\n)\n\ndef test_nominal_scale():\n    scale = Nominal()\n    assert scale._priority == 4\n\ndef test_ordinal_scale():\n    scale = Ordinal()\n    assert scale._priority == 3\n\ndef test_discrete_scale():\n    scale = Discrete()\n    assert scale._priority == 2\n\ndef test_continuous_scale():\n    scale = Continuous()\n    assert scale._priority == 1\n\ndef test_temporal_scale():\n    scale = Temporal()\n    assert scale._priority == 2\n\ndef test_pseudoaxis():\n    scale = Continuous()\n    axis = PseudoAxis(scale)\n    assert axis.axis_name == \"\"\n\ndef test_identity_transforms():\n    forward, inverse = _make_identity_transforms()\n    x = np.array([1, 2, 3])\n    assert_allclose(forward(x), x)\n    assert_allclose(inverse(x), x)\n\ndef test_logit_transforms():\n    forward, inverse = _make_logit_transforms()\n    x = np.array([0.1, 0.5, 0.9])\n    assert_allclose(inverse(forward(x)), x, rtol=1e-5)\n\ndef test_log_transforms():\n    forward, inverse = _make_log_transforms()\n    x = np.array([1, 10, 100])\n    assert_allclose(inverse(forward(x)), x, rtol=1e-5)\n\ndef test_symlog_transforms():\n    forward, inverse = _make_symlog_transforms()\n    x = np.array([-10, -1, 0, 1, 10])\n    assert_allclose(inverse(forward(x)), x, rtol=1e-5)\n\ndef test_sqrt_transforms():\n    forward, inverse = _make_sqrt_transforms()\n    x = np.array([-9, -1, 0, 1, 9])\n    assert_allclose(inverse(forward(x)), x, rtol=1e-5)\n\ndef test_power_transforms():\n    forward, inverse = _make_power_transforms(2)\n    x = np.array([-8, -1, 0, 1, 8])\n    assert_allclose(inverse(forward(x)), x, rtol=1e-5)\n\ndef test_continuous_tick():\n    scale = Continuous()\n    scale = scale.tick(every=2)\n    assert scale._tick_params[\"every\"] == 2\n\ndef test_continuous_label():\n    scale = Continuous()\n    scale = scale.label(like=\".2f\")\n    assert scale._label_params[\"like\"] == \".2f\"\n\ndef test_temporal_tick():\n    scale = Temporal()\n    scale = scale.tick(upto=5)\n    assert scale._tick_params[\"upto\"] == 5\n\ndef test_temporal_label():\n    scale = Temporal()\n    scale = scale.label(concise=True)\n    assert scale._label_params[\"concise\"] is True\n\ndef test_nominal_scale_setup():\n    data = Series([1, 2, 3, 1, 2])\n    scale = Nominal()._setup(data, None)\n    assert isinstance(scale._pipeline[0], np.vectorize)\n\ndef test_continuous_scale_setup():\n    data = Series([1, 2, 3, 1, 2])\n    scale = Continuous()._setup(data, None)\n    assert isinstance(scale._pipeline[0], np.vectorize)\n\ndef test_temporal_scale_setup():\n    data = Series(pd.to_datetime([\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"]))\n    scale = Temporal()._setup(data, None)\n    assert isinstance(scale._pipeline[0], np.vectorize)\n\ndef test_pseudoaxis_set_data_interval():\n    axis = PseudoAxis(Continuous())\n    axis.set_data_interval(0, 10)\n    assert axis._data_interval == (0, 10)\n\ndef test_pseudoaxis_get_data_interval():\n    axis = PseudoAxis(Continuous())\n    axis.set_data_interval(0, 10)\n    assert axis.get_data_interval() == (0, 10)\n\ndef test_pseudoaxis_set_view_interval():\n    axis = PseudoAxis(Continuous())\n    axis.set_view_interval(0, 10)\n    assert axis._view_interval == (0, 10)\n\ndef test_pseudoaxis_get_view_interval():\n    axis = PseudoAxis(Continuous())\n    axis.set_view_interval(0, 10)\n    assert axis.get_view_interval() == (0, 10)\n\ndef test_pseudoaxis_set_major_locator():\n    axis = PseudoAxis(Continuous())\n    locator = AutoLocator()\n    axis.set_major_locator(locator)\n    assert axis.major.locator is locator\n\ndef test_pseudoaxis_set_major_formatter():\n    axis = PseudoAxis(Continuous())\n    formatter = ScalarFormatter()\n    axis.set_major_formatter(formatter)\n    assert axis.major.formatter is formatter\n\ndef test_pseudoaxis_set_minor_locator():\n    axis = PseudoAxis(Continuous())\n    locator = AutoMinorLocator()\n    axis.set_minor_locator(locator)\n    assert axis.minor.locator is locator\n\ndef test_pseudoaxis_set_minor_formatter():\n    axis = PseudoAxis(Continuous())\n    formatter = ScalarFormatter()\n    axis.set_minor_formatter(formatter)\n    assert axis.minor.formatter is formatter\n\ndef test_pseudoaxis_set_units():\n    axis = PseudoAxis(Continuous())\n    axis.set_units(\"m\")\n    assert axis.units == \"m\"\n\ndef test_pseudoaxis_update_units():\n    axis = PseudoAxis(Continuous())\n    axis.update_units([\"1m\", \"2m\", \"3m\"])\n    assert axis.converter is not None\n\ndef test_pseudoaxis_convert_units():\n    axis = PseudoAxis(Continuous())\n    axis.update_units([\"1m\", \"2m\", \"3m\"])\n    assert axis.convert_units([\"1m\"]) == [1]\n\ndef test_pseudoaxis_get_scale():\n    axis = PseudoAxis(Continuous())\n    assert axis.get_scale() == Continuous\n\ndef test_pseudoaxis_get_majorticklocs():\n    axis = PseudoAxis(Continuous())\n    axis.set_major_locator(AutoLocator())\n    assert isinstance(axis.get_majorticklocs(), np.ndarray)\n\n"], "sample_125": ["\nimport unittest\nfrom sympy import (Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr)\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt\nfrom sympy.core.numbers import (igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse)\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom sympy import pi\nfrom mpmath.libmp.libmpf import fnan\nfrom sympy import Pi\n\nclass TestNumbers(unittest.TestCase):\n    def test_Rational(self):\n        self.assertEqual(Rational(1, 2), S.Half)\n        self.assertEqual(Rational(3, 4) + Rational(1, 4), S.One)\n        self.assertEqual(Rational(1, 2) * Rational(2, 3), Rational(1, 3))\n\n    def test_Integer(self):\n        self.assertEqual(Integer(5), S.Five)\n        self.assertEqual(Integer(5) + Integer(3), S.Eight)\n        self.assertEqual(Integer(5) * Integer(3), S.Fifteen)\n\n    def test_Float(self):\n        self.assertEqual(Float(3.14), S.Pi)\n        self.assertEqual(Float(3.14) + Float(2.86), Float(6.00))\n        self.assertEqual(Float(3.14) * Float(2.00), Float(6.28))\n\n    def test_I(self):\n        self.assertEqual(I * I, S.NegativeOne)\n        self.assertEqual(I + I, 2*I)\n\n    def test_oo(self):\n        self.assertEqual(oo + 1, oo)\n        self.assertEqual(oo * 2, oo)\n\n    def test_nan(self):\n        self.assertTrue(nan != nan)\n        self.assertEqual(nan + 1, nan)\n        self.assertEqual(nan * 2, nan)\n\n    def test_pi(self):\n        self.assertEqual(pi, S.Pi)\n        self.assertEqual(pi + 1, pi + 1)\n        self.assertEqual(pi * 2, 2*pi)\n\n    def test_E(self):\n        self.assertEqual(E, S.Exp1)\n        self.assertEqual(E + 1, E + 1)\n        self.assertEqual(E * 2, 2*E)\n\n    def test_GoldenRatio(self):\n        self.assertEqual(GoldenRatio, S.GoldenRatio)\n        self.assertEqual(GoldenRatio + 1, GoldenRatio + 1)\n        self.assertEqual(GoldenRatio * 2, 2*GoldenRatio)\n\n    def test_EulerGamma(self):\n        self.assertEqual(EulerGamma, S.EulerGamma)\n        self.assertEqual(EulerGamma + 1, EulerGamma + 1)\n        self.assertEqual(EulerGamma * 2, 2*EulerGamma)\n\n    def test_Catalan(self):\n        self.assertEqual(Catalan, S.Catalan)\n        self.assertEqual(Catalan + 1, Catalan + 1)\n        self.assertEqual(Catalan * 2, 2*Catalan)\n\n    def test_factorial(self):\n        self.assertEqual(factorial(5), 120)\n        self.assertEqual(factorial(0), 1)\n\n    def test_fibonacci(self):\n        self.assertEqual(fibonacci(5), 5)\n        self.assertEqual(fibonacci(0), 0)\n\n    def test_sqrt(self):\n        self.assertEqual(sqrt(4), 2)\n        self.assertEqual(sqrt(9), 3)\n\n    def test_cos(self):\n        self.assertEqual(cos(0), 1)\n        self.assertEqual(cos(pi/2), 0)\n\n    def test_sin(self):\n        self.assertEqual(sin(0), 0)\n        self.assertEqual(sin(pi/2), 1)\n\n    def test_exp(self):\n        self.assertEqual(exp(0), 1)\n        self.assertEqual(exp(1), E)\n\n    def test_log(self):\n        self.assertEqual(log(E), 1)\n        self.assertEqual(log(1), 0)\n\n    def test_simplify(self):\n        self.assertEqual(simplify(1/2 + 1/4), Rational(3, 4))\n        self.assertEqual(simplify(sqrt(4)), 2)\n\n    def test_latex(self):\n        self.assertEqual(latex(pi), r\"\\pi\")\n        self.assertEqual(latex(E), r\"e\")\n\n    def test_srepr(self):\n        self.assertEqual(srepr(pi), \"pi\")\n        self.assertEqual(srepr(E), \"E\")\n\n    def test_igcd(self):\n        self.assertEqual(igcd(12, 18), 6)\n        self.assertEqual(igcd(10, 15), 5)\n\n    def test_ilcm(self):\n        self.assertEqual(ilcm(12, 18), 36)\n        self.assertEqual(ilcm(10, 15), 30)\n\n    def test_igcdex(self):\n        self.assertEqual(igcdex(12, 18), (6, 2, -1))\n        self.assertEqual(igcdex(10, 15), (5, -1, 2))\n\n    def test_mod_inverse(self):\n        self.assertEqual(mod_inverse(3, 7), 5)\n        self.assertEqual(mod_inverse(5, 7), 3)\n\n    def test_mpf_norm(self):\n        self.assertEqual(mpf_norm(Float(3.14)), 3.14)\n        self.assertEqual(mpf_norm(Float(2.718)), 2.718)\n\n    def test_comp(self):\n        self.assertEqual(comp(1, 2), -1)\n        self.assertEqual(comp(2, 1), 1)\n        self.assertEqual(comp(1, 1), 0)\n\n    def test_seterr(self):\n        seterr(under='ignore')\n        seterr(over='raise')\n        seterr(invalid='warn')\n        seterr(divide='print')\n\n    def test_set_precision(self):\n        conserve_mpmath_dps(10)\n        self.assertEqual(mpmath.mp.dps, 10)\n\n    def test_fnan(self):\n        self.assertTrue(fnan != fnan)\n\n    def test_Tuple(self):\n        self.assertEqual(Tuple((1, 2, 3)), (1, 2, 3))\n\n    def test_Gt(self):\n        self.assertTrue(Gt(1, 0))\n        self.assertFalse(Gt(0, 1))\n\n    def test_Lt(self):\n        self.assertTrue(Lt(0, 1))\n        self.assertFalse(Lt(1, 0))\n\n    def test_Ge(self):\n        self.assertTrue(Ge(1, 1))\n        self.assertTrue(Ge(1, 0))\n        self.assertFalse(Ge(0, 1))\n\n    def test_Le(self):\n        self.assertTrue(Le(1, 1))\n        self.assertTrue(Le(0, 1))\n        self.assertFalse(Le(1, 0))\n\n    def test_AlgebraicNumber(self):\n        x = AlgebraicNumber(sqrt(2))\n        self.assertEqual(x.minpoly(), [1, 0, -2])\n\n    def test_RealField(self):\n        R = RealField(prec=53)\n        self.assertEqual(R.prec, 53)\n\n    def test_sympify(self):\n        self.assertEqual(sympify('1/2'), Rational(1, 2))\n        self.assertEqual(sympify('sqrt(2)'), sqrt(2))\n\n    def test_integer_nthroot(self):\n        self.assertEqual(integer_nthroot(8, 3), 2)\n        self.assertEqual(integer_nthroot(27, 3), 3)\n\n    def test_isqrt(self):\n        self.assertEqual(isqrt(9), 3)\n        self.assertEqual(isqrt(16), 4)\n\n\n\n"], "sample_52": ["\nfrom django.db import IntegrityError, connection, migrations, models, transaction\nfrom django.db.migrations.state import ModelState, ProjectState\nfrom django.db.models.functions import Abs\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom ..models import (\n    AddIndex,\n    AddConstraint,\n    AlterModelOptions,\n    AlterModelTable,\n    AlterUniqueTogether,\n    AlterIndexTogether,\n    AlterOrderWithRespectTo,\n    RemoveIndex,\n    RenameIndex,\n    RenameModel,\n    DeleteModel,\n)\n\nclass TestModelOperations(TestCase):\n\n    def test_add_index(self):\n        # Test adding a simple index\n        operation = AddIndex('MyModel', models.Index(fields=['field1']))\n        self.assertEqual(operation.describe(), \"Create index mymodel_field1_idx on field(s) field1 of model MyModel\")\n\n        # Test adding an index with a custom name\n        operation = AddIndex('MyModel', models.Index(fields=['field1'], name='custom_name'))\n        self.assertEqual(operation.describe(), \"Create index custom_name on field(s) field1 of model MyModel\")\n\n    def test_remove_index(self):\n        operation = RemoveIndex('MyModel', 'my_index_name')\n        self.assertEqual(operation.describe(), \"Remove index my_index_name from MyModel\")\n\n    def test_rename_index(self):\n        operation = RenameIndex('MyModel', 'new_name', old_name='old_name')\n        self.assertEqual(operation.describe(), \"Rename index old_name to new_name on MyModel\")\n\n        operation = RenameIndex('MyModel', 'new_name', old_fields=['field1', 'field2'])\n        self.assertEqual(operation.describe(), \"Rename unnamed index for field1, field2 on MyModel to new_name\")\n\n    def test_alter_model_table(self):\n        operation = AlterModelTable('MyModel', 'new_table_name')\n        self.assertEqual(operation.describe(), \"Rename table for MyModel to new_table_name\")\n\n    def test_alter_model_options(self):\n        operation = AlterModelOptions('MyModel', {'verbose_name': 'New verbose name'})\n        self.assertEqual(operation.describe(), \"Change Meta options on MyModel\")\n\n    def test_alter_unique_together(self):\n        operation = AlterUniqueTogether('MyModel', set([('field1', 'field2')]))\n        self.assertEqual(operation.describe(), \"Alter unique_together for MyModel (('field1', 'field2') constraint(s))\")\n\n    def test_alter_index_together(self):\n        operation = AlterIndexTogether('MyModel', set([('field1', 'field2')]))\n        self.assertEqual(operation.describe(), \"Alter index_together for MyModel (('field1', 'field2') constraint(s))\")\n\n    def test_alter_order_with_respect_to(self):\n        operation = AlterOrderWithRespectTo('MyModel', 'field1')\n        self.assertEqual(operation.describe(), \"Set order_with_respect_to on MyModel to field1\")\n\n    def test_add_constraint(self):\n        operation = AddConstraint('MyModel', models.UniqueConstraint(fields=['field1'], name='unique_constraint'))\n        self.assertEqual(operation.describe(), \"Create constraint unique_constraint on model MyModel\")\n\n    def test_remove_constraint(self):\n        operation = RemoveConstraint('MyModel', 'unique_constraint')\n        self.assertEqual(operation.describe(), \"Remove constraint unique_constraint from model MyModel\")\n\n    def test_rename_model(self):\n        operation = RenameModel('OldModelName', 'NewModelName')\n        self.assertEqual(operation.describe(), \"Rename model OldModelName to NewModelName\")\n\n    def test_delete_model(self):\n        operation = DeleteModel('ModelName')\n        self.assertEqual(operation.describe(), \"Delete model ModelName\")\n\n"], "sample_55": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nfrom django.core.management.base import (\n    BaseCommand,\n    CommandError,\n    AppCommand,\n    LabelCommand,\n    no_translations,\n    DjangoHelpFormatter,\n    OutputWrapper,\n    SystemCheckError,\n)\nfrom django.core.management.utils import popen_wrapper\nfrom django.apps import AppConfig\nfrom django.db import connections\nfrom django.test import SimpleTestCase\n\nclass BaseCommandTests(SimpleTestCase):\n\n    def test_create_parser(self):\n        command = BaseCommand()\n        parser = command.create_parser(\"manage.py\", \"test_command\")\n        self.assertIsInstance(parser, argparse.ArgumentParser)\n\n    def test_add_base_argument(self):\n        command = BaseCommand()\n        parser = command.create_parser(\"manage.py\", \"test_command\")\n        command.add_base_argument(parser, \"--foo\", help=\"Foo help\")\n        args = parser.parse_args([\"--foo\"])\n        self.assertEqual(args.foo, True)\n\n    def test_run_from_argv(self):\n        command = BaseCommand()\n        with patch.object(command, 'execute') as mock_execute:\n            command.run_from_argv([\"manage.py\", \"test_command\"])\n            mock_execute.assert_called_once_with()\n\n    def test_execute(self):\n        command = BaseCommand()\n        with patch.object(command, 'handle') as mock_handle:\n            command.execute()\n            mock_handle.assert_called_once_with()\n\n    def test_check(self):\n        command = BaseCommand()\n        with patch('django.core.management.base.checks.run_checks') as mock_run_checks:\n            command.check()\n            mock_run_checks.assert_called_once_with()\n\n    def test_check_migrations(self):\n        command = BaseCommand()\n        with patch('django.db.migrations.executor.MigrationExecutor') as mock_executor:\n            command.check_migrations()\n            mock_executor.assert_called_once_with()\n\n    def test_no_translations(self):\n        @no_translations\n        def test_func():\n            pass\n        test_func()\n\nclass AppCommandTests(SimpleTestCase):\n\n    def test_add_arguments(self):\n        command = AppCommand()\n        parser = command.create_parser(\"manage.py\", \"test_command\")\n        command.add_arguments(parser)\n        args = parser.parse_args([\"app1\", \"app2\"])\n        self.assertEqual(args.args, [\"app1\", \"app2\"])\n\n    def test_handle(self):\n        command = AppCommand()\n        with patch.object(command, 'handle_app_config') as mock_handle_app_config:\n            command.handle(\"app1\", \"app2\")\n            mock_handle_app_config.assert_has_calls([\n                unittest.mock.call(unittest.mock.ANY, **{}),\n                unittest.mock.call(unittest.mock.ANY, **{})\n            ])\n\nclass LabelCommandTests(SimpleTestCase):\n\n    def test_add_arguments(self):\n        command = LabelCommand()\n        parser = command.create_parser(\"manage.py\", \"test_command\")\n        command.add_arguments(parser)\n        args = parser.parse_args([\"label1\", \"label2\"])\n        self.assertEqual(args.args, [\"label1\", \"label2\"])\n\n    def test_handle(self):\n        command = LabelCommand()\n        with patch.object(command, 'handle_label') as mock_handle_label:\n            command.handle(\"label1\", \"label2\")\n            mock_handle_label.assert_has_calls([\n                unittest.mock.call(\"label1\", **{}),\n                unittest.mock.call(\"label2\", **{})\n            ])\n\nclass OutputWrapperTests(SimpleTestCase):\n\n    def test_write(self):\n        out = OutputWrapper(sys.stdout)\n        out.write(\"test\")\n        self.assertEqual(sys.stdout.getvalue(), \"test\\n\")\n\nclass DjangoHelpFormatterTests(SimpleTestCase):\n\n    def test_add_arguments(self):\n        formatter = DjangoHelpFormatter()\n        parser = argparse.ArgumentParser()\n        parser.add_argument(\"--foo\")\n        formatter.add_arguments(parser._actions)\n\nclass SystemCheckErrorTests(SimpleTestCase):\n\n    def test_init(self):\n        error = SystemCheckError(\"test message\")\n        self.assertEqual(str(error), \"test message\")\n\n"], "sample_1": ["\nimport os\nimport tempfile\n\nimport numpy as np\nfrom astropy.table import Table\nfrom astropy.io.ascii.qdp import (\n    _get_lines_from_file,\n    _read_table_qdp,\n    _write_table_qdp,\n    QDPSplitter,\n    QDPHeader,\n    QDPData,\n    QDP,\n)\n\ndef test_get_lines_from_file_string():\n    qdp_file = \"\"\"! Initial comment line 1\n! Initial comment line 2\nREAD TERR 1\nREAD SERR 3\n! Table 0 comment\n!a a(pos) a(neg) b be c d\n53000.5   0.25  -0.5   1  1.5  3.5 2\n54000.5   1.25  -1.5   2  2.5  4.5 3\nNO NO NO NO NO\n! Table 1 comment\n!a a(pos) a(neg) b be c d\n54000.5   2.25  -2.5   NO  3.5  5.5 5\n55000.5   3.25  -3.5   4  4.5  6.5 nan\"\"\"\n    lines = _get_lines_from_file(qdp_file)\n    assert len(lines) == 12\n\ndef test_get_lines_from_file_list():\n    qdp_file = [\n        \"! Initial comment line 1\",\n        \"! Initial comment line 2\",\n        \"READ TERR 1\",\n        \"READ SERR 3\",\n        \"! Table 0 comment\",\n        \"!a a(pos) a(neg) b be c d\",\n        \"53000.5   0.25  -0.5   1  1.5  3.5 2\",\n        \"54000.5   1.25  -1.5   2  2.5  4.5 3\",\n        \"NO NO NO NO NO\",\n        \"! Table 1 comment\",\n        \"!a a(pos) a(neg) b be c d\",\n        \"54000.5   2.25  -2.5   NO  3.5  5.5 5\",\n        \"55000.5   3.25  -3.5   4  4.5  6.5 nan\",\n    ]\n    lines = _get_lines_from_file(qdp_file)\n    assert len(lines) == 12\n\ndef test_get_lines_from_file_file():\n    with tempfile.NamedTemporaryFile(mode=\"w\", delete=False) as f:\n        f.write(\"\"\"! Initial comment line 1\n! Initial comment line 2\nREAD TERR 1\nREAD SERR 3\n! Table 0 comment\n!a a(pos) a(neg) b be c d\n53000.5   0.25  -0.5   1  1.5  3.5 2\n54000.5   1.25  -1.5   2  2.5  4.5 3\nNO NO NO NO NO\n! Table 1 comment\n!a a(pos) a(neg) b be c d\n54000.5   2.25  -2.5   NO  3.5  5.5 5\n55000.5   3.25  -3.5   4  4.5  6.5 nan\"\"\")\n        f.close()\n        lines = _get_lines_from_file(f.name)\n        os.unlink(f.name)\n    assert len(lines) == 12\n\ndef test_read_table_qdp_basic():\n    qdp_file = \"\"\"! Initial comment line 1\n! Initial comment line 2\nREAD TERR 1\nREAD SERR 3\n! Table 0 comment\n!a a(pos) a(neg) b be c d\n53000.5   0.25  -0.5   1  1.5  3.5 2\n54000.5   1.25  -1.5   2  2.5  4.5 3\nNO NO NO NO NO\n! Table 1 comment\n!a a(pos) a(neg) b be c d\n54000.5   2.25  -2.5   NO  3.5  5.5 5\n55000.5   3.25  -3.5   4  4.5  6.5 nan\"\"\"\n    table = _read_table_qdp(qdp_file, table_id=0)\n    assert len(table) == 2\n    assert table[\"col1\"][0] == 53000.5\n\ndef test_read_table_qdp_names():\n    qdp_file = \"\"\"! Initial comment line 1\n! Initial comment line 2\nREAD TERR 1\nREAD SERR 3\n! Table 0 comment\n!a a(pos) a(neg) b be c d\n53000.5   0.25  -0.5   1  1.5  3.5 2\n54000.5   1.25  -1.5   2  2.5  4.5 3\nNO NO NO NO NO\n! Table 1 comment\n!a a(pos) a(neg) b be c d\n54000.5   2.25  -2.5   NO  3.5  5.5 5\n55000.5   3.25  -3.5   4  4.5  6.5 nan\"\"\"\n    table = _read_table_qdp(qdp_file, table_id=0, names=[\"a\", \"b\", \"c\", \"d\"])\n    assert len(table) == 2\n    assert table[\"a\"][0] == 53000.5\n\ndef test_write_table_qdp():\n    table = Table(\n        names=[\"a\", \"b\", \"c\", \"d\"],\n        data=[\n            [53000.5, 54000.5],\n            [0.25, 1.25],\n            [-0.5, -1.5],\n            [1, 2],\n        ],\n    )\n    lines = _write_table_qdp(table, err_specs={'terr': [1], 'serr': [3]})\n    assert lines[0] == \"! Initial comments\"\n    assert lines[1] == \"READ TERR 1\"\n    assert lines[2] == \"READ SERR 3\"\n\ndef test_QDPSplitter():\n    splitter = QDPSplitter()\n    assert splitter.delimiter == \" \"\n\ndef test_QDPHeader():\n    header = QDPHeader()\n    assert header.comment == \"!\"\n\ndef test_QDPData():\n    data = QDPData()\n    assert data.comment == \"!\"\n\ndef test_QDP():\n    qdp = QDP()\n    assert qdp._format_name == \"qdp\"\n\n\n\n"], "sample_9": ["\nimport os\nimport sys\nimport tempfile\nimport threading\nimport time\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.apps import apps\nfrom django.conf import settings\nfrom django.core.signals import request_finished\nfrom django.utils import autoreload\nfrom django.utils.autoreload import (\n    DJANGO_AUTORELOAD_ENV,\n    BaseReloader,\n    StatReloader,\n    WatchmanReloader,\n    WatchmanUnavailable,\n    check_errors,\n    ensure_echo_on,\n    get_child_arguments,\n    get_reloader,\n    iter_all_python_module_files,\n    iter_modules_and_files,\n    raise_last_exception,\n    restart_with_reloader,\n    run_with_reloader,\n    trigger_reload,\n)\n\n# Mock out pywatchman to avoid external dependencies\nclass MockPywatchman:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def client(self, *args, **kwargs):\n        return MagicMock()\n\n    def capabilityCheck(self):\n        return {'version': '4.10.0'}\n\n    def query(self, *args, **kwargs):\n        return {'watch': 'some_watch', 'relative_path': 'some_path'}\n\n    def receive(self):\n        pass\n\n    def getSubscription(self, *args, **kwargs):\n        return {'files': ['changed_file']}\n\n    def close(self):\n        pass\n\npywatchman = MockPywatchman()\n\nclass TestAutoreload(unittest.TestCase):\n\n    def setUp(self):\n        self.old_environ = os.environ.copy()\n        os.environ[DJANGO_AUTORELOAD_ENV] = 'true'\n        self.reloader = get_reloader()\n        self.reloader._stop_condition = threading.Event()\n\n    def tearDown(self):\n        os.environ.clear()\n        os.environ.update(self.old_environ)\n\n    def test_check_errors(self):\n        def raise_exception():\n            raise Exception('Test Exception')\n\n        with patch('sys.exc_info') as mock_exc_info:\n            mock_exc_info.return_value = (Exception, Exception('Test Exception'), None)\n            check_errors(raise_exception)()\n            self.assertEqual(autoreload._exception[1].args[0], 'Test Exception')\n\n    def test_raise_last_exception(self):\n        autoreload._exception = (Exception, Exception('Test Exception'), None)\n        with self.assertRaises(Exception) as cm:\n            raise_last_exception()\n        self.assertEqual(str(cm.exception), 'Test Exception')\n\n    def test_ensure_echo_on(self):\n        with patch('sys.stdin.isatty') as mock_isatty:\n            mock_isatty.return_value = True\n            with patch('termios.tcgetattr') as mock_tcgetattr:\n                mock_tcgetattr.return_value = ([], [], [], [], [], [], [], [], [])\n                ensure_echo_on()\n                mock_tcgetattr.assert_called_once()\n\n    def test_iter_all_python_module_files(self):\n        # Mock sys.modules to simulate loaded modules\n        sys.modules['django.utils.autoreload'] = MagicMock()\n        sys.modules['django.core.signals'] = MagicMock()\n        sys.modules['django.apps'] = MagicMock()\n\n        result = iter_all_python_module_files()\n        self.assertTrue(isinstance(result, frozenset))\n\n    def test_iter_modules_and_files(self):\n        modules = [MagicMock(spec=ModuleType, __name__='module1'), MagicMock(spec=ModuleType, __name__='module2')]\n        extra_files = {'file1.py', 'file2.py'}\n        result = iter_modules_and_files(modules, extra_files)\n        self.assertTrue(isinstance(result, frozenset))\n\n    def test_common_roots(self):\n        paths = ['/path/to/dir1', '/path/to/dir2/subdir']\n        result = common_roots(paths)\n        self.assertEqual(list(result), ['/path/to'])\n\n    def test_sys_path_directories(self):\n        sys.path.append('/path/to/dir1')\n        sys.path.append('/path/to/dir2')\n        result = list(sys_path_directories())\n        self.assertEqual(len(result), 2)\n\n    def test_get_child_arguments(self):\n        args = get_child_arguments()\n        self.assertIn(sys.executable, args)\n\n    def test_trigger_reload(self):\n        with patch('sys.exit') as mock_exit:\n            trigger_reload('/path/to/file')\n            mock_exit.assert_called_once_with(3)\n\n    def test_restart_with_reloader(self):\n        with patch('subprocess.call') as mock_call:\n            mock_call.return_value = 0\n            restart_with_reloader()\n            mock_call.assert_called_once()\n\n    def test_BaseReloader_watch_dir(self):\n        reloader = BaseReloader()\n        reloader.watch_dir('/path/to/dir', '*.py')\n        self.assertEqual(reloader.directory_globs['/path/to/dir'], {'*.py'})\n\n    def test_BaseReloader_watch_file(self):\n        reloader = BaseReloader()\n        reloader.watch_file('/path/to/file')\n        self.assertIn('/path/to/file', reloader.extra_files)\n\n    def test_BaseReloader_watched_files(self):\n        reloader = BaseReloader()\n        reloader.watch_dir('/path/to/dir', '*.py')\n        reloader.watch_file('/path/to/file')\n        result = list(reloader.watched_files())\n        self.assertIn('/path/to/file', result)\n\n    def test_BaseReloader_wait_for_apps_ready(self):\n        reloader = BaseReloader()\n        django_main_thread = threading.Thread()\n        reloader.wait_for_apps_ready(apps, django_main_thread)\n\n    def test_BaseReloader_run(self):\n        reloader = BaseReloader()\n        django_main_thread = threading.Thread()\n        reloader.run(django_main_thread)\n\n    def test_BaseReloader_tick(self):\n        reloader = BaseReloader()\n        with self.assertRaises(NotImplementedError):\n            next(reloader.tick())\n\n    def test_BaseReloader_check_availability(self):\n        reloader = BaseReloader()\n        with self.assertRaises(NotImplementedError):\n            reloader.check_availability()\n\n    def test_BaseReloader_notify_file_changed(self):\n        reloader = BaseReloader()\n        reloader.notify_file_changed('/path/to/file')\n\n    def test_StatReloader_tick(self):\n        reloader = StatReloader()\n        with patch('os.stat') as mock_stat:\n            mock_stat.return_value.st_mtime = 12345\n            next(reloader.tick())\n\n    def test_StatReloader_snapshot_files(self):\n        reloader = StatReloader()\n        with patch('os.stat') as mock_stat:\n            mock_stat.return_value.st_mtime = 12345\n            list(reloader.snapshot_files())\n\n    def test_StatReloader_check_availability(self):\n        reloader = StatReloader()\n        self.assertTrue(reloader.check_availability())\n\n    def test_WatchmanReloader_check_availability(self):\n        reloader = WatchmanReloader()\n        self.assertTrue(reloader.check_availability())\n\n    def test_WatchmanReloader_tick(self):\n        reloader = WatchmanReloader()\n        with patch('time.sleep') as mock_sleep:\n            next(reloader.tick())\n            mock_sleep.assert_called_once_with(reloader.SLEEP_TIME)\n\n    def test_WatchmanReloader_update_watches(self):\n        reloader = WatchmanReloader()\n        reloader.update_watches()\n\n    def test_WatchmanReloader_request_processed(self):\n        reloader = WatchmanReloader()\n        reloader.request_processed()\n\n    def test_get_reloader(self):\n        reloader = get_reloader()\n        self.assertTrue(isinstance(reloader, WatchmanReloader))\n\n    def test_run_with_reloader(self):\n        def main_func():\n            pass\n        run_with_reloader(main_func)\n\n"], "sample_28": ["\nfrom django.contrib.admin.sites import AdminSite, AlreadyRegistered, NotRegistered\nfrom django.contrib.admin.views.autocomplete import AutocompleteJsonView\nfrom django.contrib.auth import REDIRECT_FIELD_NAME\nfrom django.contrib.auth.models import User\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.db import models\nfrom django.http import (\n    Http404, HttpResponsePermanentRedirect, HttpResponseRedirect,\n)\nfrom django.test import SimpleTestCase, RequestFactory\nfrom django.test.client import Client\nfrom django.urls import NoReverseMatch, Resolver404, resolve, reverse\nfrom django.utils.functional import LazyObject\nfrom django.utils.translation import gettext_lazy as _\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\nclass MyAdmin(AdminSite):\n    site_title = 'My Site'\n    site_header = 'My Admin'\n    index_title = 'My Index'\n\nclass MyModelAdmin(AdminSite):\n    pass\n\nclass TestAdminSite(SimpleTestCase):\n    def test_register(self):\n        site = AdminSite()\n        site.register(MyModel)\n        self.assertIn(MyModel, site._registry)\n\n    def test_register_twice(self):\n        site = AdminSite()\n        site.register(MyModel)\n        with self.assertRaises(AlreadyRegistered):\n            site.register(MyModel)\n\n    def test_register_abstract(self):\n        class AbstractModel(models.Model):\n            class Meta:\n                abstract = True\n                app_label = 'test_app'\n\n        site = AdminSite()\n        with self.assertRaises(ImproperlyConfigured):\n            site.register(AbstractModel)\n\n    def test_unregister(self):\n        site = AdminSite()\n        site.register(MyModel)\n        site.unregister(MyModel)\n        self.assertNotIn(MyModel, site._registry)\n\n    def test_unregister_not_registered(self):\n        site = AdminSite()\n        with self.assertRaises(NotRegistered):\n            site.unregister(MyModel)\n\n    def test_is_registered(self):\n        site = AdminSite()\n        self.assertFalse(site.is_registered(MyModel))\n        site.register(MyModel)\n        self.assertTrue(site.is_registered(MyModel))\n\n    def test_add_action(self):\n        site = AdminSite()\n        def my_action(modeladmin, request, queryset):\n            pass\n        site.add_action(my_action)\n        self.assertIn('my_action', site._actions)\n\n    def test_disable_action(self):\n        site = AdminSite()\n        def my_action(modeladmin, request, queryset):\n            pass\n        site.add_action(my_action)\n        site.disable_action('my_action')\n        self.assertNotIn('my_action', site._actions)\n\n    def test_get_action(self):\n        site = AdminSite()\n        def my_action(modeladmin, request, queryset):\n            pass\n        site.add_action(my_action)\n        self.assertEqual(site.get_action('my_action'), my_action)\n\n    def test_actions(self):\n        site = AdminSite()\n        def my_action(modeladmin, request, queryset):\n            pass\n        site.add_action(my_action)\n        self.assertEqual(list(site.actions), [('my_action', my_action)])\n\n    def test_has_permission(self):\n        site = AdminSite()\n        request = RequestFactory().get('/')\n        request.user = User()\n        request.user.is_staff = True\n        self.assertTrue(site.has_permission(request))\n        request.user.is_staff = False\n        self.assertFalse(site.has_permission(request))\n\n    def test_admin_view(self):\n        site = AdminSite()\n        def my_view(request):\n            return HttpResponseRedirect('/')\n\n        wrapped_view = site.admin_view(my_view)\n        request = RequestFactory().get('/')\n        request.user = User()\n        request.user.is_staff = True\n        response = wrapped_view(request)\n        self.assertEqual(response.status_code, 302)\n        request.user.is_staff = False\n        response = wrapped_view(request)\n        self.assertEqual(response.status_code, 302)\n\n    def test_get_urls(self):\n        site = AdminSite()\n        urls = site.get_urls()\n        self.assertTrue(urls)\n\n    def test_each_context(self):\n        site = AdminSite()\n        request = RequestFactory().get('/')\n        context = site.each_context(request)\n        self.assertIn('site_title', context)\n        self.assertIn('site_header', context)\n        self.assertIn('site_url', context)\n        self.assertIn('has_permission', context)\n        self.assertIn('available_apps', context)\n        self.assertIn('is_popup', context)\n        self.assertIn('is_nav_sidebar_enabled', context)\n\n    def test_password_change(self):\n        site = AdminSite()\n        request = RequestFactory().get('/')\n        request.user = User()\n        response = site.password_change(request)\n        self.assertEqual(response.status_code, 200)\n\n    def test_password_change_done(self):\n        site = AdminSite()\n        request = RequestFactory().get('/')\n        request.user = User()\n        response = site.password_change_done(request)\n        self.assertEqual(response.status_code, 200)\n\n    def test_i18n_javascript(self):\n        site = AdminSite()\n        request = RequestFactory().get('/')\n        response = site.i18n_javascript(request)\n        self.assertEqual(response.status_code, 200)\n\n    def test_logout(self):\n        site = AdminSite()\n        request = RequestFactory().get('/')\n        response = site.logout(request)\n        self.assertEqual(response.status_code, 200)\n\n    def test_login(self):\n        site = AdminSite()\n        request = RequestFactory().get('/')\n        response = site.login(request)\n        self.assertEqual(response.status_code, 200)\n\n    def test_autocomplete_view(self):\n        site = AdminSite()\n        request = RequestFactory().get('/')\n        response = site.autocomplete_view(request)\n        self.assertEqual(response.status_code, 200)\n\n    def test_catch_all_view(self):\n        site = AdminSite()\n        request = RequestFactory().get('/')\n        response = site.catch_all_view(request, 'test')\n        self.assertEqual(response.status_code, 404)\n\n    def test_build_app_dict(self):\n        site = AdminSite()\n        site.register(MyModel)\n        app_dict = site._build_app_dict(RequestFactory().get('/'))\n        self.assertIn('test_app', app_dict)\n\n    def test_get_app_list(self):\n        site = AdminSite()\n        site.register(MyModel)\n        app_list = site.get_app_list(RequestFactory().get('/'))\n        self.assertTrue(app_list)\n\n    def test_index(self):\n        site = AdminSite()\n        site.register(MyModel)\n        request = RequestFactory().get('/')\n        response = site.index(request)\n        self.assertEqual(response.status_code, 200)\n\n    def test_app_index(self):\n        site = AdminSite()\n        site.register(MyModel)\n        request = RequestFactory().get('/')\n        response = site.app_index(request, 'test_app')\n        self.assertEqual(response.status_code, 200)\n\n\n\n"], "sample_24": ["\nfrom django.core.exceptions import (\n    FieldDoesNotExist,\n    AppRegistryNotReady,\n    ObjectDoesNotExist,\n    MultipleObjectsReturned,\n    SuspiciousOperation,\n    SuspiciousMultipartForm,\n    SuspiciousFileOperation,\n    DisallowedHost,\n    DisallowedRedirect,\n    TooManyFieldsSent,\n    RequestDataTooBig,\n    RequestAborted,\n    PermissionDenied,\n    ViewDoesNotExist,\n    MiddlewareNotUsed,\n    ImproperlyConfigured,\n    FieldError,\n    ValidationError,\n    NON_FIELD_ERRORS,\n    EmptyResultSet,\n    SynchronousOnlyOperation,\n)\n\n\ndef test_field_does_not_exist():\n    try:\n        raise FieldDoesNotExist(\"Test field\")\n    except FieldDoesNotExist as e:\n        assert str(e) == \"Test field\"\n\n\ndef test_app_registry_not_ready():\n    try:\n        raise AppRegistryNotReady(\"Test app\")\n    except AppRegistryNotReady as e:\n        assert str(e) == \"Test app\"\n\n\ndef test_object_does_not_exist():\n    try:\n        raise ObjectDoesNotExist(\"Test object\")\n    except ObjectDoesNotExist as e:\n        assert str(e) == \"Test object\"\n        assert e.silent_variable_failure\n\n\ndef test_multiple_objects_returned():\n    try:\n        raise MultipleObjectsReturned(\"Test query\")\n    except MultipleObjectsReturned as e:\n        assert str(e) == \"Test query\"\n\n\ndef test_suspicious_operation():\n    try:\n        raise SuspiciousOperation(\"Test operation\")\n    except SuspiciousOperation as e:\n        assert str(e) == \"Test operation\"\n\n\ndef test_suspicious_multipart_form():\n    try:\n        raise SuspiciousMultipartForm(\"Test form\")\n    except SuspiciousMultipartForm as e:\n        assert str(e) == \"Test form\"\n\n\ndef test_suspicious_file_operation():\n    try:\n        raise SuspiciousFileOperation(\"Test operation\")\n    except SuspiciousFileOperation as e:\n        assert str(e) == \"Test operation\"\n\n\ndef test_disallowed_host():\n    try:\n        raise DisallowedHost(\"Test host\")\n    except DisallowedHost as e:\n        assert str(e) == \"Test host\"\n\n\ndef test_disallowed_redirect():\n    try:\n        raise DisallowedRedirect(\"Test redirect\")\n    except DisallowedRedirect as e:\n        assert str(e) == \"Test redirect\"\n\n\ndef test_too_many_fields_sent():\n    try:\n        raise TooManyFieldsSent(\"Test request\")\n    except TooManyFieldsSent as e:\n        assert str(e) == \"Test request\"\n\n\ndef test_request_data_too_big():\n    try:\n        raise RequestDataTooBig(\"Test request\")\n    except RequestDataTooBig as e:\n        assert str(e) == \"Test request\"\n\n\ndef test_request_aborted():\n    try:\n        raise RequestAborted(\"Test request\")\n    except RequestAborted as e:\n        assert str(e) == \"Test request\"\n\n\ndef test_permission_denied():\n    try:\n        raise PermissionDenied(\"Test permission\")\n    except PermissionDenied as e:\n        assert str(e) == \"Test permission\"\n\n\ndef test_view_does_not_exist():\n    try:\n        raise ViewDoesNotExist(\"Test view\")\n    except ViewDoesNotExist as e:\n        assert str(e) == \"Test view\"\n\n\ndef test_middleware_not_used():\n    try:\n        raise MiddlewareNotUsed(\"Test middleware\")\n    except MiddlewareNotUsed as e:\n        assert str(e) == \"Test middleware\"\n\n\ndef test_improperly_configured():\n    try:\n        raise ImproperlyConfigured(\"Test configuration\")\n    except ImproperlyConfigured as e:\n        assert str(e) == \"Test configuration\"\n\n\ndef test_field_error():\n    try:\n        raise FieldError(\"Test field\")\n    except FieldError as e:\n        assert str(e) == \"Test field\"\n\n\ndef test_validation_error_single_message():\n    try:\n        raise ValidationError(\"Test message\")\n    except ValidationError as e:\n        assert e.message == \"Test message\"\n        assert e.error_list == [e]\n\n\ndef test_validation_error_list_of_messages():\n    try:\n        raise ValidationError([\"Test message 1\", \"Test message 2\"])\n    except ValidationError as e:\n        assert e.error_list == [ValidationError(\"Test message 1\"), ValidationError(\"Test message 2\")]\n\n\ndef test_validation_error_dict_of_messages():\n    try:\n        raise ValidationError({\"field1\": [\"Test message 1\"], \"field2\": [\"Test message 2\"]})\n    except ValidationError as e:\n        assert e.error_dict == {\"field1\": [ValidationError(\"Test message 1\")], \"field2\": [ValidationError(\"Test message 2\")]}\n\n\ndef test_validation_error_nested_validation_error():\n    nested_error = ValidationError(\"Nested error\")\n    try:\n        raise ValidationError(nested_error)\n    except ValidationError as e:\n        assert e.error_list == [nested_error]\n\n\ndef test_validation_error_message_dict():\n    try:\n        raise ValidationError({\"field1\": [\"Test message 1\"], \"field2\": [\"Test message 2\"]})\n    except ValidationError as e:\n        assert e.message_dict == {\"field1\": [\"Test message 1\"], \"field2\": [\"Test message 2\"]}\n\n\ndef test_validation_error_messages():\n    try:\n        raise ValidationError([\"Test message 1\", \"Test message 2\"])\n    except ValidationError as e:\n        assert e.messages == [ValidationError(\"Test message 1\"), ValidationError(\"Test message 2\")]\n\n\ndef test_validation_error_update_error_dict():\n    error_dict = {}\n    try:\n        raise ValidationError({\"field1\": [\"Test message 1\"]})\n    except ValidationError as e:\n        e.update_error_dict(error_dict)\n        assert error_dict == {\"field1\": [ValidationError(\"Test message 1\")]}\n\n    error_dict = {}\n    try:\n        raise ValidationError([\"Test message 1\"])\n    except ValidationError as e:\n        e.update_error_dict(error_dict)\n        assert error_dict == {NON_FIELD_ERRORS: [ValidationError(\"Test message 1\")]}\n\n\ndef test_empty_result_set():\n    try:\n        raise EmptyResultSet(\"Test query\")\n    except EmptyResultSet as e:\n        assert str(e) == \"Test query\"\n\n\ndef test_synchronous_only_operation():\n    try:\n        raise SynchronousOnlyOperation(\"Test operation\")\n    except SynchronousOnlyOperation as e:\n        assert str(e) == \"Test operation\"\n\n"], "sample_108": ["\nimport unittest\nimport numpy as np\nfrom sklearn.svm import SVC, LinearSVC, SVR\nfrom sklearn.datasets import make_classification, make_regression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.exceptions import NotFittedError, ConvergenceWarning\nfrom sklearn.metrics import accuracy_score, mean_squared_error\nfrom sklearn.linear_model import LogisticRegression\n\nclass TestSVC(unittest.TestCase):\n\n    def test_fit_predict_classification(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        clf = SVC(kernel='linear', random_state=42)\n        clf.fit(X_train, y_train)\n        y_pred = clf.predict(X_test)\n        self.assertEqual(accuracy_score(y_test, y_pred), 1.0)\n\n    def test_decision_function(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        clf = SVC(kernel='linear', probability=True, random_state=42)\n        clf.fit(X_train, y_train)\n        dec_func = clf.decision_function(X_test)\n        self.assertGreater(dec_func.shape[0], 0)\n\n    def test_predict_proba(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        clf = SVC(kernel='linear', probability=True, random_state=42)\n        clf.fit(X_train, y_train)\n        proba = clf.predict_proba(X_test)\n        self.assertGreater(proba.shape[0], 0)\n        self.assertEqual(proba.shape[1], 2)\n\n    def test_predict_log_proba(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        clf = SVC(kernel='linear', probability=True, random_state=42)\n        clf.fit(X_train, y_train)\n        log_proba = clf.predict_log_proba(X_test)\n        self.assertGreater(log_proba.shape[0], 0)\n        self.assertEqual(log_proba.shape[1], 2)\n\n    def test_not_fitted_error(self):\n        clf = SVC(kernel='linear')\n        with self.assertRaises(NotFittedError):\n            clf.predict(np.array([[1, 2]]))\n\nclass TestLinearSVC(unittest.TestCase):\n\n    def test_fit_predict_classification(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        clf = LinearSVC(random_state=42)\n        clf.fit(X_train, y_train)\n        y_pred = clf.predict(X_test)\n        self.assertEqual(accuracy_score(y_test, y_pred), 1.0)\n\n    def test_decision_function(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        clf = LinearSVC(random_state=42)\n        clf.fit(X_train, y_train)\n        dec_func = clf.decision_function(X_test)\n        self.assertGreater(dec_func.shape[0], 0)\n\n    def test_coef_(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        clf = LinearSVC(random_state=42)\n        clf.fit(X_train, y_train)\n        self.assertGreater(clf.coef_.shape[0], 0)\n        self.assertEqual(clf.coef_.shape[1], X_train.shape[1])\n\nclass TestSVR(unittest.TestCase):\n\n    def test_fit_predict_regression(self):\n        X, y = make_regression(n_samples=100, n_features=20, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        clf = SVR(kernel='linear')\n        clf.fit(X_train, y_train)\n        y_pred = clf.predict(X_test)\n        self.assertLess(mean_squared_error(y_test, y_pred), 1e-2)\n\n    def test_decision_function(self):\n        X, y = make_regression(n_samples=100, n_features=20, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        clf = SVR(kernel='linear')\n        clf.fit(X_train, y_train)\n        dec_func = clf.decision_function(X_test)\n        self.assertGreater(dec_func.shape[0], 0)\n\n"]}, "raw_scored_generations": {"sample_2": [true], "sample_3": [false], "sample_0": [false], "sample_1": [true], "sample_6": [false], "sample_4": [false], "sample_5": [true], "sample_7": [true], "sample_9": [true], "sample_8": [true], "sample_10": [false], "sample_11": [true], "sample_13": [true], "sample_12": [false], "sample_14": [true], "sample_15": [true], "sample_16": [false], "sample_17": [false], "sample_18": [false], "sample_19": [false], "sample_21": [false], "sample_20": [false], "sample_23": [true], "sample_22": [true], "sample_24": [false], "sample_25": [false], "sample_28": [true], "sample_26": [true], "sample_27": [true], "sample_29": [false], "sample_31": [false], "sample_30": [false], "sample_32": [false], "sample_33": [true], "sample_34": [false], "sample_35": [false], "sample_36": [false], "sample_37": [true], "sample_39": [true], "sample_38": [true], "sample_40": [false], "sample_42": [true], "sample_41": [true], "sample_43": [false], "sample_45": [true], "sample_44": [false], "sample_46": [false], "sample_48": [false], "sample_47": [true], "sample_50": [false], "sample_49": [false], "sample_51": [false], "sample_52": [false], "sample_53": [false], "sample_55": [true], "sample_54": [true], "sample_56": [true], "sample_58": [false], "sample_57": [true], "sample_60": [true], "sample_59": [true], "sample_61": [true], "sample_63": [true], "sample_62": [true], "sample_64": [false], "sample_66": [false], "sample_65": [false], "sample_68": [true], "sample_67": [true], "sample_69": [true], "sample_70": [true], "sample_71": [true], "sample_72": [true], "sample_73": [true], "sample_74": [true], "sample_75": [true], "sample_76": [false], "sample_77": [false], "sample_78": [true], "sample_79": [false], "sample_80": [true], "sample_82": [false], "sample_81": [false], "sample_83": [true], "sample_84": [false], "sample_85": [false], "sample_86": [true], "sample_87": [false], "sample_88": [true], "sample_89": [false], "sample_90": [true], "sample_91": [false], "sample_92": [false], "sample_93": [true], "sample_95": [false], "sample_94": [true], "sample_96": [true], "sample_97": [true], "sample_98": [true], "sample_99": [false], "sample_100": [true], "sample_101": [true], "sample_102": [true], "sample_103": [true], "sample_104": [true], "sample_105": [true], "sample_107": [true], "sample_106": [true], "sample_108": [true], "sample_109": [true], "sample_110": [true], "sample_111": [true], "sample_112": [false], "sample_113": [true], "sample_114": [true], "sample_115": [true], "sample_116": [false], "sample_117": [false], "sample_118": [true], "sample_119": [true], "sample_120": [true], "sample_121": [false], "sample_122": [true], "sample_123": [false], "sample_124": [true], "sample_125": [false], "sample_126": [false], "sample_127": [true], "sample_128": [true], "sample_129": [true], "sample_130": [true], "sample_131": [true], "sample_132": [true], "sample_133": [true], "sample_134": [true], "sample_135": [false], "sample_136": [true], "sample_137": [true], "sample_138": [true], "sample_139": [true], "sample_140": [true], "sample_142": [true], "sample_141": [false], "sample_143": [false], "sample_144": [false], "sample_145": [true], "sample_146": [false], "sample_147": [true], "sample_148": [true], "sample_149": [true], "sample_150": [false], "sample_151": [true], "sample_152": [true], "sample_153": [true], "sample_154": [false], "sample_155": [true], "sample_156": [true], "sample_157": [true], "sample_158": [true], "sample_159": [true]}}