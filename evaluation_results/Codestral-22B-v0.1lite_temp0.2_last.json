{"raw_generations": {"sample_33": ["def test_receiver_signal_with_sender(self):\n    @receiver(a_signal, sender=self)\n        self.state = val\n    self.state = False\n    a_signal.send(sender=self, val=True)\n    self.assertTrue(self.state)\n    a_signal.disconnect(f, sender=self)\n    self.assertTestIsClean(a_signal)\n"], "sample_42": ["def test_serialize_complex(self):\n    complex_num = complex(1, 2)\n    self.assertSerializedEqual(complex_num)\n    self.assertSerializedResultEqual(\n        complex_num,\n        (\"complex((1+2j))\", set())\n    )\n"], "sample_112": ["def test_isotonic_regression_with_sample_weight_zero():\n    # Test from #15012\n    # Check that IsotonicRegression handles sample_weight with zero values correctly\n    X = np.arange(10)\n    y = np.arange(10)\n    sample_weight = np.ones(10)\n    sample_weight[5] = 0\n\n    iso_reg = IsotonicRegression().fit(X, y, sample_weight=sample_weight)\n\n    assert iso_reg.X_thresholds_.shape[0] == X.shape[0] - 1\n    assert iso_reg.y_thresholds_.shape[0] == y.shape[0] - 1\n\n    y_pred = iso_reg.predict(X)\n    assert np.all(np.isfinite(y_pred))\n"], "sample_84": ["def test_call_fixture_function_error_with_request(request):\n    \"\"\"Check if an error is raised if a fixture function is called directly with a request (#4545)\"\"\"\n\n    @pytest.fixture\n        return 1\n\n    with pytest.raises(pytest.fail.Exception):\n        assert fix(request) == 1\n"], "sample_85": ["def test_log_cli_format(testdir):\n    # Test log_cli_format\n    testdir.makepyfile(\n        \"\"\"\n        import pytest\n        import logging\n            plugin = request.config.pluginmanager.getplugin('logging-plugin')\n            assert plugin.log_cli_handler.formatter._fmt == '%(levelname)s %(message)s'\n            logging.getLogger('catchlog').info(\"INFO message\")\n            print('PASSED')\n    \"\"\"\n    )\n    testdir.makeini(\n        \"\"\"\n        [pytest]\n        log_cli=true\n        log_cli_format=%(levelname)s %(message)s\n        \"\"\"\n    )\n\n    result = testdir.runpytest(\"-s\")\n\n    # fnmatch_lines does an assertion internally\n    result.stdout.fnmatch_lines(\n        [\n            \"*test_log_cli_format.py*INFO message\",\n            \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n        ]\n    )\n\n    # make sure that that we get a '0' exit code for the testsuite\n    assert result.ret == 0\n"], "sample_4": ["    def test_charset_from_content_type(self):\n        r = HttpResponse(content_type='text/html; charset=iso-8859-1')\n        self.assertEqual(r.charset, 'iso-8859-1')\n\n        r = HttpResponse(content_type='text/html; charset=\"utf-8\"')\n        self.assertEqual(r.charset, 'utf-8')\n\n        r = HttpResponse(content_type='text/html; charset=utf-8; other=value')\n        self.assertEqual(r.charset, 'utf-8')\n\n        r = HttpResponse(content_type='text/html')\n        self.assertEqual(r.charset, 'utf-8')  # default charset\n"], "sample_66": ["def test_list_editable_missing_field(self):\n    class TestModelAdmin(ModelAdmin):\n        list_editable = (\"non_existent_field\",)\n\n    self.assertIsInvalid(\n        TestModelAdmin,\n        ValidationTestModel,\n        \"The value of 'list_editable[0]' refers to 'non_existent_field', which is not a field of 'modeladmin.ValidationTestModel'.\",\n        \"admin.E121\",\n    )\n"], "sample_116": ["def test_create_index_with_category(app):\n    text = (\".. index:: single: docutils\\n\"\n            \"   :category: tools\\n\"\n            \".. index:: single: Python\\n\"\n            \"   :category: languages\\n\"\n            \".. index:: Sphinx\\n\"\n            \"   :category: tools\\n\")\n    restructuredtext.parse(app, text)\n    index = IndexEntries(app.env).create_index(app.builder)\n\n    # check index is created correctly\n    assert len(index) == 2\n    assert index[0] == ('languages', [('Python', [[('', '#index-1')], [], 'languages'])])\n    assert index[1] == ('tools', [('docutils', [[('', '#index-0')], [], 'tools']),\n                                  ('Sphinx', [[('', '#index-2')], [], 'tools'])])\n"], "sample_52": ["def test_references_field_by_through_fields(self):\n    operation = FieldOperation(\n        \"Model\",\n        \"field\",\n        models.ManyToManyField(\"Other\", through_fields=(\"from\", \"to\")),\n    )\n    self.assertIs(operation.references_field(\"Model\", \"from\", \"migrations\"), True)\n    self.assertIs(operation.references_field(\"Model\", \"to\", \"migrations\"), True)\n    self.assertIs(operation.references_field(\"Other\", \"from\", \"migrations\"), False)\n    self.assertIs(operation.references_field(\"Other\", \"to\", \"migrations\"), False)\n"], "sample_69": ["def test_set_clip_path():\n    art = martist.Artist()\n    path = mpath.Path([(0, 0), (1, 1), (0, 1), (0, 0)])\n    transform = mtransforms.IdentityTransform()\n\n    # Test setting clip path with a Path and a Transform\n    art.set_clip_path(path, transform)\n    assert isinstance(art._clippath, mtransforms.TransformedPath)\n\n    # Test setting clip path with a TransformedPath\n    transformed_path = mtransforms.TransformedPath(path, transform)\n    art.set_clip_path(transformed_path)\n    assert art._clippath == transformed_path\n\n    # Test setting clip path with a TransformedPatchPath\n    patch = mpatches.Rectangle((0, 0), 1, 1)\n    transformed_patch_path = mtransforms.TransformedPatchPath(patch)\n    art.set_clip_path(transformed_patch_path)\n    assert art._clippath == transformed_patch_path\n\n    # Test setting clip path with a Rectangle\n    rect = mpatches.Rectangle((0, 0), 1, 1)\n    art.set_clip_path(rect)\n    assert isinstance(art._clippath, mtransforms.TransformedPatchPath)\n\n    # Test setting clip path to None\n    art.set_clip_path(None)\n    assert art._clippath is None\n\n    # Test setting clip path with an invalid type\n    with pytest.raises(TypeError):\n        art.set_clip_path(\"invalid\")\n"], "sample_127": ["def test_issue_14237_matrix_multiplication():\n    A = MatrixSymbol(\"A\", 3, 3)\n    B = MatrixSymbol(\"B\", 3, 3)\n    C = MatrixSymbol(\"C\", 3, 3)\n\n    assert latex(A * B) == r\"A B\"\n    assert latex(A * B * C) == r\"A B C\"\n    assert latex(A * (B * C)) == r\"A \\left(B C\\right)\"\n    assert latex((A * B) * C) == r\"\\left(A B\\right) C\"\n"], "sample_65": ["def test_join09(self):\n    output = self.engine.render_to_string(\n        \"join09\", {\"a\": [\"Alpha\", \"Beta <me>\"], \"var\": \" & \"}\n    )\n    self.assertEqual(output, \"Alpha &amp; Beta &lt;me&gt;\")\n"], "sample_28": ["    def setUp(self):\n        self.site = admin.AdminSite()\n"], "sample_89": ["def test_node_add_marker():\n    node = nodes.Node(\"test_node\")\n    node.add_marker(\"mark1\")\n    assert node.keywords[\"mark1\"].name == \"mark1\"\n    assert node.own_markers[0].name == \"mark1\"\n\n    node.add_marker(\"mark2\", append=False)\n    assert node.keywords[\"mark2\"].name == \"mark2\"\n    assert node.own_markers[0].name == \"mark2\"\n    assert node.own_markers[1].name == \"mark1\"\n"], "sample_80": ["def test_format_timedelta_out_of_bounds():\n    from datetime import timedelta\n\n    delta = timedelta(days=1000000)\n    expected = \"11574 days 00:00:00\"\n    result = formatting.format_timedelta(delta)\n    assert result == expected\n\n    delta = timedelta(days=-1000000)\n    expected = \"-11574 days +00:00:00\"\n    result = formatting.format_timedelta(delta)\n    assert result == expected\n"], "sample_124": ["def test_tanh_expansion():\n    x, y = symbols('x,y')\n    assert tanh(x+y).expand(trig=True) == (tanh(x) + tanh(y)) / (1 + tanh(x)*tanh(y))\n    assert tanh(2*x).expand(trig=True).expand() == 2*tanh(x) / (1 + tanh(x)**2)\n    assert tanh(3*x).expand(trig=True).expand() == (3*tanh(x) - 3*tanh(x)**3) / (1 - 3*tanh(x)**2)\n"], "sample_64": ["def test_override_submit_row_template_tags(self):\n    \"\"\"\n    submit_row template tag follows the standard search pattern\n    admin/app_label/model/template.html.\n    \"\"\"\n    article = Article.objects.all()[0]\n    request = self.request_factory.get(\n        reverse(\"admin:admin_views_article_change\", args=[article.pk])\n    )\n    request.user = self.superuser\n    admin = ArticleAdmin(Article, site)\n    extra_context = {\"show_save\": False, \"extra\": True}\n    response = admin.change_view(\n        request, str(article.pk), extra_context=extra_context\n    )\n    response.render()\n    self.assertIs(response.context_data[\"show_save\"], False)\n    self.assertIs(response.context_data[\"extra\"], True)\n    self.assertNotContains(response, 'name=\"_save\"')\n    self.assertContains(response, \"override-submit_row\")\n"], "sample_15": ["def test_consistent_language_settings(self):\n    for tag in self.valid_tags:\n        with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n            self.assertEqual(check_language_settings_consistent(None), [])\n"], "sample_2": ["def test_to_fits_2():\n    \"\"\"\n    Test to_fits() with SIP distortion.\n    \"\"\"\n    fits_name = get_pkg_data_filename('data/sip.fits')\n    w = wcs.WCS(fits_name)\n    wfits = w.to_fits()\n    assert isinstance(wfits, fits.HDUList)\n    assert isinstance(wfits[0], fits.PrimaryHDU)\n    assert isinstance(wfits[1], fits.ImageHDU)\n"], "sample_41": ["def test_formset_with_deletion_and_empty_forms(self):\n    \"\"\"\n    FormSets with deletion and empty forms.\n    \"\"\"\n    ChoiceFormSet = formset_factory(Choice, can_delete=True)\n    initial = [{'choice': 'Calexico', 'votes': 100}, {'choice': 'Fergie', 'votes': 900}]\n    formset = ChoiceFormSet(initial=initial, auto_id=False, prefix='choices')\n    data = {\n        'choices-TOTAL_FORMS': '3',  # the number of forms rendered\n        'choices-INITIAL_FORMS': '2',  # the number of forms with initial data\n        'choices-MIN_NUM_FORMS': '0',  # min number of forms\n        'choices-MAX_NUM_FORMS': '0',  # max number of forms\n        'choices-0-choice': 'Calexico',\n        'choices-0-votes': '100',\n        'choices-0-DELETE': '',\n        'choices-1-choice': 'Fergie',\n        'choices-1-votes': '900',\n        'choices-1-DELETE': 'on',\n        'choices-2-choice': '',\n        'choices-2-votes': '',\n        'choices-2-DELETE': '',\n    }\n    formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n    self.assertTrue(formset.is_valid())\n    self.assertEqual(\n        [form.cleaned_data for form in formset.forms],\n        [\n            {'votes': 100, 'DELETE': False, 'choice': 'Calexico'},\n            {'votes': 900, 'DELETE': True, 'choice': 'Fergie'},\n            {},\n        ]\n    )\n    self.assertEqual(\n        [form.cleaned_data for form in formset.deleted_forms],\n        [{'votes': 900, 'DELETE': True, 'choice': 'Fergie'}]\n   "], "sample_132": ["def test_closest_points():\n    points = [(1, 1), (1, 2), (3, 1), (-5, 2), (15, 4)]\n    assert closest_points(*points) == {(Point2D(1, 1), Point2D(1, 2))}\n"], "sample_152": ["def test_array_addition_subtraction():\n    for ArrayType in array_types:\n        A = ArrayType([[1, 2], [3, 4]])\n        B = ArrayType([[5, 6], [7, 8]])\n        assert A + B == ArrayType([[6, 8], [10, 12]])\n        assert A - B == ArrayType([[-4, -4], [-4, -4]])\n"], "sample_51": ["def test_directory_index_template_context(self):\n    response = self.client.get(\"/%s/\" % self.prefix)\n    self.assertEqual(response.context[\"directory\"], \"./\")\n    self.assertIn(\"file.txt\", response.context[\"file_list\"])\n    self.assertIn(\"subdir/\", response.context[\"file_list\"])\n"], "sample_134": ["def test_cbrt():\n    if not np:\n        skip(\"NumPy not installed\")\n\n    f = lambdify((a,), Cbrt(a), 'numpy')\n    assert abs(f(8) - 2) < 1e-16\n"], "sample_55": ["def test_call_command_with_invalid_type_for_option(self):\n    msg = \"invalid int value: 'invalid'\"\n    with self.assertRaisesMessage(CommandError, msg):\n        management.call_command(\"dance\", integer=\"invalid\")\n"], "sample_49": ["def test_locmem_loader_reset(self, mock_reset):\n    autoreload.reset_loaders()\n    mock_reset.assert_called_once()\n"], "sample_13": ["    def test_parsing_invalid_date(self):\n        invalid_dates = (\n            'Invalid date',\n            'Sun, 06 Nov 1994 25:49:37 GMT',  # Invalid hour\n            'Sun, 06 Nov 1994 08:60:37 GMT',  # Invalid minute\n            'Sun, 06 Nov 1994 08:49:61 GMT',  # Invalid second\n            'Sun, 32 Nov 1994 08:49:37 GMT',  # Invalid day\n            'Sun, 06 Xxx 1994 08:49:37 GMT',  # Invalid month\n            'Sun, 06 Nov 94 08:49:37 GMT',    # Invalid year\n        )\n        for date in invalid_dates:\n            with self.subTest(date=date):\n                with self.assertRaises(ValueError):\n                    parse_http_date(date)\n"], "sample_48": ["def test_references_field_by_limit_choices_to(self):\n    operation = FieldOperation(\n        'Model', 'field', models.ForeignKey('Other', models.CASCADE, limit_choices_to={'field': 'value'})\n    )\n    self.assertIs(operation.references_field('Other', 'field', 'migrations'), True)\n    self.assertIs(operation.references_field('Other', 'whatever', 'migrations'), False)\n    self.assertIs(operation.references_field('Missing', 'whatever', 'migrations'), False)\n"], "sample_12": ["def test_add_blank_textfield_and_charfield_with_default(self):\n    \"\"\"\n    #23405 - Adding a NOT NULL and blank `CharField` or `TextField`\n    with default should not prompt for a default.\n    \"\"\"\n    changes = self.get_changes([self.author_empty], [self.author_with_biography_blank_default])\n    # Right number/type of migrations?\n    self.assertNumberMigrations(changes, 'testapp', 1)\n    self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n    self.assertOperationAttributes(changes, 'testapp', 0, 0)\n"], "sample_6": ["    def test_validate(self):\n        valid_usernames = ['joe', 'joe.smith', 'joe+smith', 'joe-smith', 'joe_smith', 'joe@smith', 'joe123']\n        invalid_usernames = ['joe!smith', 'joe#smith', 'joe$smith', 'joe%smith', 'joe&smith', 'joe*smith', 'joe/smith']\n        v = validators.ASCIIUsernameValidator()\n        for valid in valid_usernames:\n            with self.subTest(valid=valid):\n                v(valid)\n        for invalid in invalid_usernames:\n            with self.subTest(invalid=invalid):\n                with self.assertRaises(ValidationError):\n                    v(invalid)\n"], "sample_153": ["def test_pretty_print_unicode_d():\n    assert upretty(d[0]) == '(0|0)'\n    assert upretty(d[1]) == '(i_N|k_N)'\n    assert upretty(d[4]) == '(a) (i_N|k_N)'\n    assert upretty(d[5]) == '(a) (i_N|k_N) + (-b) (j_N|k_N)'\n    assert upretty(d[8]) == '(j_N|k_N) + (C.x**2 - \u222b f(b) db) (k_N|k_N)'\n    assert upretty(d[10]) == '(cos(a)) (i_C|k_N) + (-sin(a)) (j_C|k_N)'\n"], "sample_140": ["def test_point_vel_with_different_frames():\n    q1, q2 = dynamicsymbols('q1 q2')\n    N = ReferenceFrame('N')\n    B = ReferenceFrame('B')\n    P = Point('P')\n    P.set_vel(N, q1 * N.x)\n    P.set_vel(B, q2 * B.y)\n    assert P.vel(N) == q1 * N.x\n    assert P.vel(B) == q2 * B.y\n"], "sample_19": ["def test_template_encoding_text(self):\n    \"\"\"\n    The templates are loaded directly, not via a template loader, and\n    should be opened as utf-8 charset as is the default specified on\n    template engines.\n    \"\"\"\n    response = self.client.get('/raises500/', HTTP_ACCEPT='text/plain')\n    self.assertEqual(response['Content-Type'], 'text/plain; charset=utf-8')\n"], "sample_119": ["def test_Sum():\n    assert mcode(Sum(x**n, (n, 1, oo))) == \"Hold[Sum[x^n, {n, 1, Infinity}]]\"\n    assert mcode(Sum(1/n**2, (n, 1, 10))) == \"Hold[Sum[1/n^2, {n, 1, 10}]]\"\n"], "sample_133": ["def test_c_with_custom_printer():\n    x, y = symbols('x y')\n    expr = x**y\n\n    printer = CustomPrinter()\n    gen = C99CodeGen(printer=printer)\n\n    expected = (\n        '#include \"expr.h\"\\n'\n        '#include <math.h>\\n'\n        'double expr(double x, double y) {\\n'\n        '   double expr_result;\\n'\n        '   expr_result = fastpow(x, y);\\n'\n        '   return expr_result;\\n'\n        '}\\n'\n    )\n\n    result = codegen(('expr', expr), header=False, empty=False, code_gen=gen)\n    source = result[0][1]\n    assert source == expected\n"], "sample_148": ["def test_issue_14239():\n    # doesn't cause recursion error\n    r = Symbol('r', real=True)\n    assert Abs(r + Piecewise((0, r < 0), (1 + r, True)))\n"], "sample_23": ["def test_union_with_different_fields(self):\n    qs1 = Number.objects.filter(num__lte=1).values('num')\n    qs2 = Number.objects.filter(num__gte=2, num__lte=3).values('other_num')\n    with self.assertRaises(TypeError):\n        qs1.union(qs2)\n"], "sample_146": ["def test_issue_21537():\n    assert str(Mul(x, Pow(1/y, -1, evaluate=False), evaluate=False)) == 'x/(1/y)'\n"], "sample_17": ["    def setUp(self):\n        self.test_connection = get_connection_copy()\n        self.creation = self.test_connection.creation_class(self.test_connection)\n        self.old_database_name = self.test_connection.settings_dict['NAME']\n        with mock.patch.object(self.creation, '_create_test_db'):\n            self.creation.create_test_db(verbosity=0, autoclobber=True, serialize=False)\n"], "sample_99": ["def test_sparse_metric_callable_with_fit():\n        assert_true(issparse(x) and issparse(y))\n        return x.dot(y.T).A.item()\n\n    X = csr_matrix(np.eye(5))\n    y = np.array([0, 1, 2, 3, 4])\n\n    classifier = neighbors.KNeighborsClassifier(n_neighbors=1, metric=sparse_metric)\n    result = classifier.fit(X, y).predict(X)\n    assert_array_equal(result, y)\n"], "sample_34": ["def test_default_auto_field_app_config(self):\n    class Model(models.Model):\n        pass\n\n    self.apps.get_app_config('check_framework').default_auto_field = 'django.db.models.BigAutoField'\n    self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n"], "sample_123": ["def test_Float_comparison():\n    fpi = Float(pi)\n    assert (fpi == pi) == (pi == fpi)\n    assert (fpi != pi) == (pi != fpi)\n    assert (fpi < pi) == (pi > fpi)\n    assert (fpi <= pi) == (pi >= fpi)\n    assert (fpi > pi) == (pi < fpi)\n    assert (fpi >= pi) == (pi <= fpi)\n"], "sample_149": ["def test_monomial_ldiv():\n    assert monomial_ldiv((3, 4, 1), (1, 2, 0)) == (2, 2, 1)\n    assert monomial_ldiv((3, 4, 1), (1, 2, 2)) == (2, 2, -1)\n"], "sample_46": ["    def test_rename_column_references_without_alias(self):\n        compiler = Query(Person, alias_cols=False).get_compiler(connection=connection)\n        table = Person._meta.db_table\n        expressions = Expressions(\n            table=table,\n            expressions=ExpressionList(\n                IndexExpression(Upper('last_name')),\n                IndexExpression(F('first_name')),\n            ).resolve_expression(compiler.query),\n            compiler=compiler,\n            quote_value=self.editor.quote_value,\n        )\n        expressions.rename_column_references(table, 'first_name', 'other')\n        self.assertIs(expressions.references_column(table, 'other'), True)\n        self.assertIs(expressions.references_column(table, 'first_name'), False)\n        expected_str = '(UPPER(%s)), %s' % (\n            self.editor.quote_name('last_name'),\n            self.editor.quote_name('other'),\n        )\n        self.assertEqual(str(expressions), expected_str)\n"], "sample_93": ["def test_tmp_path_factory_from_config(pytester: Pytester, monkeypatch) -> None:\n    \"\"\"Test that tmp_path_factory is created from config correctly.\"\"\"\n    mytemp = pytester.mkdir(\"mytemp\")\n    p = pytester.makepyfile(\n        \"\"\"\n            assert tmp_path_factory.getbasetemp() == mytemp\n    \"\"\"\n    )\n    result = pytester.runpytest(p, \"--basetemp=%s\" % mytemp)\n    assert result.ret == 0\n"], "sample_16": ["def test_boolean_display_for_field(self):\n    display_value = display_for_field(True, models.BooleanField(), self.empty_value)\n    expected = '<img src=\"%sadmin/img/icon-yes.svg\" alt=\"True\" />' % settings.STATIC_URL\n    self.assertHTMLEqual(display_value, expected)\n\n    display_value = display_for_field(False, models.BooleanField(), self.empty_value)\n    expected = '<img src=\"%sadmin/img/icon-no.svg\" alt=\"False\" />' % settings.STATIC_URL\n    self.assertHTMLEqual(display_value, expected)\n"], "sample_82": ["def test_groupby_fillna(array):\n    grouped = array.groupby(\"y\")\n    filled = grouped.fillna(0)\n    expected = array.fillna(0)\n    assert_identical(filled, expected)\n"], "sample_20": ["def test_unique_constraint_pointing_to_fk(self):\n    class Foo(models.Model):\n        pass\n\n    class Bar(models.Model):\n        foo_1 = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name='bar_1')\n        foo_2 = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name='bar_2')\n\n        class Meta:\n            constraints = [models.UniqueConstraint(fields=['foo_1_id', 'foo_2'], name='unique_constraint')]\n\n    self.assertEqual(Bar.check(databases=self.databases), [])\n"], "sample_136": ["def test_BlockMatrix_as_real_imag():\n    A = MatrixSymbol('A', n, n)\n    B = MatrixSymbol('B', n, m)\n    C = MatrixSymbol('C', m, n)\n    D = MatrixSymbol('D', m, m)\n    X = BlockMatrix([[A, B], [C, D]])\n\n    real_part, imag_part = X.as_real_imag()\n    assert real_part == BlockMatrix([[re(A), re(B)], [re(C), re(D)]])\n    assert imag_part == BlockMatrix([[im(A), im(B)], [im(C), im(D)]])\n"], "sample_91": ["def test_xfail_raises_multiple_exceptions(self, testdir):\n    p = testdir.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.xfail(raises=(TypeError, ValueError))\n            raise IndexError()\n        \"\"\"\n    )\n    result = testdir.runpytest(p)\n    result.stdout.fnmatch_lines([\"*1 failed*\"])\n"], "sample_118": ["def test_ccode_AugmentedAssignment():\n    expr = aug_assign(x, '+=', y + z)\n    assert ccode(expr) == 'x += y + z;'\n"], "sample_62": ["def test_cache_versioning_touch(self):\n    cache.set(\"answer1\", 37, version=1)\n    cache.set(\"answer1\", 42, version=2)\n    self.assertIs(cache.touch(\"answer1\"), True)\n    self.assertEqual(cache.get(\"answer1\", version=1), 37)\n    self.assertEqual(cache.get(\"answer1\", version=2), 42)\n\n    cache.set(\"answer2\", 37, version=1)\n    cache.set(\"answer2\", 42, version=2)\n    self.assertIs(cache.touch(\"answer2\", version=2), True)\n    self.assertEqual(cache.get(\"answer2\", version=1), 37)\n    self.assertEqual(cache.get(\"answer2\", version=2), 42)\n\n    cache.set(\"answer3\", 37, version=1)\n    cache.set(\"answer3\", 42, version=2)\n    self.assertIs(caches[\"v2\"].touch(\"answer3\"), True)\n    self.assertEqual(cache.get(\"answer3\", version=1), 37)\n    self.assertEqual(cache.get(\"answer3\", version=2), 42)\n\n    cache.set(\"answer4\", 37, version=1)\n    cache.set(\"answer4\", 42, version=2)\n    self.assertIs(caches[\"v2\"].touch(\"answer4\", version=1), True)\n    self.assertEqual(cache.get(\"answer4\", version=1), 37)\n    self.assertEqual(cache.get(\"answer4\", version=2), 42)\n"], "sample_8": ["def test_sensitive_function_keyword_arguments_with_debug_false(self):\n    \"\"\"\n    Sensitive variables don't leak in the sensitive_variables decorator's\n    frame, when those variables are passed as keyword arguments to the\n    decorated function, even when DEBUG is False.\n    \"\"\"\n    self.verify_safe_response(sensitive_kwargs_function_caller, check_for_POST_params=False)\n    self.verify_safe_email(sensitive_kwargs_function_caller, check_for_POST_params=False)\n"], "sample_101": ["def test_pipeline_memory_with_fit_params():\n    X = np.array([[1, 2]])\n    pipe = Pipeline([('transf', TransfFitParams()), ('clf', FitParamT())],\n                    memory=DummyMemory())\n    pipe.fit(X, y=None, transf__should_get_this=True, clf__should_succeed=True)\n    assert pipe.named_steps['transf'].fit_params['should_get_this']\n    assert pipe.named_steps['clf'].successful\n    assert 'should_succeed' not in pipe.named_steps['transf'].fit_params\n"], "sample_11": ["def test_serialize_complex(self):\n    self.assertSerializedEqual(complex(1, 2))\n    self.assertSerializedResultEqual(\n        complex(1, 2),\n        (\"complex((1+2j))\", set())\n    )\n"], "sample_122": ["def test_sparse_matrix_scalar_multiply():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    B = A.scalar_multiply(2)\n    assert B == SparseMatrix([[2, 4], [6, 8]])\n    B = A.scalar_multiply(0)\n    assert B == SparseMatrix([[0, 0], [0, 0]])\n"], "sample_54": ["def test_urlize_nofollow(self):\n    value = \"Check out this link: example.com\"\n    output = 'Check out this link: <a href=\"http://example.com\" rel=\"nofollow\">example.com</a>'\n    self.assertEqual(urlize(value, nofollow=True), output)\n"], "sample_29": ["def test_expression_wrapper_with_aggregate(self):\n    Number.objects.create(integer=10, float=123.45)\n    qs = Number.objects.annotate(\n        wrapped_integer=ExpressionWrapper(\n            Avg('integer'),\n            output_field=IntegerField(),\n        ),\n    )\n    self.assertEqual(qs.get().wrapped_integer, 10)\n"], "sample_37": ["def test_expression_wrapper_with_aggregate(self):\n    Number.objects.create(integer=10, float=123.45)\n    qs = Number.objects.annotate(\n        wrapped_integer=ExpressionWrapper(\n            Avg('integer'),\n            output_field=IntegerField(),\n        ),\n    )\n    self.assertEqual(qs.get().wrapped_integer, 10)\n"], "sample_56": ["    def test_template_tags_with_different_module_name(self):\n        with self.settings(\n            TEMPLATES=[\n                self.get_settings(\n                    \"same_tags\", \"different_tags_app_1.templatetags.same_tags\"\n                ),\n                self.get_settings(\n                    \"same_tags\", \"different_tags_app_2.templatetags.same_tags\"\n                ),\n            ]\n        ):\n            self.assertEqual(\n                check_for_template_tags_with_the_same_name(None),\n                [self.error_same_tags],\n            )\n"], "sample_88": ["def test_broken_getattribute_in_repr():\n    \"\"\"saferepr() can handle classes with broken __repr__ and __getattribute__\"\"\"\n\n    class SomeClass:\n            raise RuntimeError\n\n            raise ValueError(\"Broken repr!\")\n\n    assert \"Broken\" in saferepr(SomeClass())\n"], "sample_74": ["def test_colorbar_set_scale():\n    fig, ax = plt.subplots()\n    pc = ax.pcolormesh(np.random.randn(10, 10))\n    cb = fig.colorbar(pc)\n    cb.set_scale('log')\n    assert cb.ax.yaxis.get_scale() == 'log'\n    cb.set_scale('linear')\n    assert cb.ax.yaxis.get_scale() == 'linear'\n"], "sample_111": ["def test_empty_labels(metric_name):\n    # All clustering metrics should return 1.0 for empty labels\n    metric = SUPERVISED_METRICS[metric_name]\n    assert metric([], []) == 1.0\n"], "sample_47": ["def test_minimize_rollbacks_with_replacements(self):\n    \"\"\"\n    Minimize rollbacks when target is a replacement migration.\n\n    a: 1 <---- 3 <--\\\n              \\ \\- 2 <--- 4\n               \\       \\\n    b:      \\- 1 <--- 2\n    \"\"\"\n    a1_impl = FakeMigration('a1')\n    a1 = ('a', '1')\n    a2_impl = FakeMigration('a2')\n    a2 = ('a', '2')\n    a3_impl = FakeMigration('a3')\n    a3 = ('a', '3')\n    a4_impl = FakeMigration('a4')\n    a4 = ('a', '4')\n    b1_impl = FakeMigration('b1')\n    b1 = ('b', '1')\n    b2_impl = FakeMigration('b2')\n    b2 = ('b', '2')\n    squashed_impl = FakeMigration('squashed')\n    squashed = ('a', 'squashed')\n    graph = MigrationGraph()\n    graph.add_node(a1, a1_impl)\n    graph.add_node(a2, a2_impl)\n    graph.add_node(a3, a3_impl)\n    graph.add_node(a4, a4_impl)\n    graph.add_node(b1, b1_impl)\n    graph.add_node(b2, b2_impl)\n    graph.add_node(squashed, squashed_impl)\n    graph.add_dependency(None, a2, a1)\n    graph.add_dependency(None, a3, a1)\n    graph.add_dependency(None, a4, a2)\n    graph.add_dependency(None, a4, a3)\n    graph.add_dependency(None, b2, b1)\n    graph.add_dependency(None, b1, a1)\n    graph.add_dependency(None, b2, a2)\n    graph.add_dependency(None"], "sample_75": ["def test_imagegrid_cbar_mode_single():\n    arr = np.arange(16).reshape((4, 4))\n\n    fig = plt.figure(figsize=(18, 9))\n\n    positions = (241, 242, 243, 244)\n    cbar_locations = ['left', 'right', 'top', 'bottom']\n\n    for position, location in zip(positions, cbar_locations):\n        grid = ImageGrid(fig, position,\n                         nrows_ncols=(2, 2),\n                         cbar_location=location,\n                         cbar_size='20%',\n                         cbar_mode='single')\n        ax1, ax2, ax3, ax4 = grid\n\n        ax1.imshow(arr, cmap='nipy_spectral')\n        ax2.imshow(arr.T, cmap='hot')\n        ax3.imshow(np.hypot(arr, arr.T), cmap='jet')\n        ax4.imshow(np.arctan2(arr, arr.T), cmap='hsv')\n\n        # In each row/column, the \"first\" colorbar must be overwritten by the\n        # \"second\" one.  To achieve this, clear out the axes first.\n        for ax in grid:\n            ax.cax.cla()\n            cb = ax.cax.colorbar(ax.images[0])\n"], "sample_147": ["def test_MatMul_kind():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    assert MatMul(A, B).kind is MatrixKind(NumberKind)\n"], "sample_115": ["def test_set_output_method_with_index():\n    \"\"\"Check that the output index is updated.\"\"\"\n    pd = pytest.importorskip(\"pandas\")\n\n    X_df = pd.DataFrame({\"feat1\": [1, 2, 3], \"feat2\": [3, 4, 5]})\n    est = EstimatorWithSetOutputIndex().fit(X_df)\n\n    est.set_output(transform=\"pandas\")\n\n    X_trans_pd = est.transform(X_df)\n    assert isinstance(X_trans_pd, pd.DataFrame)\n    assert_array_equal(X_trans_pd.index, [\"s0\", \"s1\", \"s2\"])\n"], "sample_126": ["def test_Float_from_mpmath():\n    import mpmath\n    mpmath.mp.dps = 100\n    mp_pi = mpmath.pi()\n\n    assert Float(mp_pi, 100) == Float(mp_pi._mpf_, 100) == pi.evalf(100)\n\n    mpmath.mp.dps = 15\n\n    assert Float(mp_pi, 100) == Float(mp_pi._mpf_, 100) == pi.evalf(100)\n"], "sample_138": ["def test_BlockMatrix_as_real_imag():\n    A, B, C, D = [MatrixSymbol(s, 3, 3) for s in 'ABCD']\n    X = BlockMatrix([[A, B], [C, D]])\n    real_part, imag_part = X.as_real_imag()\n    assert real_part == BlockMatrix([[re(A), re(B)], [re(C), re(D)]])\n    assert imag_part == BlockMatrix([[im(A), im(B)], [im(C), im(D)]])\n"], "sample_117": ["def test_restify_type_hints_Annotated():\n    from typing import Annotated  # type: ignore\n    assert restify(Annotated[str, \"foo\", \"bar\"]) == \":class:`str`\"  # NOQA\n"], "sample_63": ["def test_custom_email_field_max_length(self):\n    email = \"test@mail.com\" * 100  # Exceeding the max length of 254 characters\n    with self.assertRaises(ValidationError):\n        CustomEmailField.objects.create_user(\"test name\", \"test password\", email)\n"], "sample_31": ["def test_shell_with_bpython_not_installed(self, select):\n    select.return_value = ([], [], [])\n    with self.assertRaisesMessage(CommandError, \"Couldn't import bpython interface.\"):\n        call_command('shell', interface='bpython')\n"], "sample_81": ["def test_regex_codetag(self) -> None:\n    code = \"\"\"a = 1\n            # BUG\n            # FIXME\n            \"\"\"\n    with self.assertAddsMessages(\n        MessageTest(msg_id=\"fixme\", line=2, args=\"BUG\", col_offset=17)\n    ):\n        self.checker.process_tokens(_tokenize_str(code))\n"], "sample_114": ["def test_ovr_decision_function():\n    predictions = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n    confidences = np.array([[0.2, 0.3, 0.4], [0.5, 0.6, 0.7], [0.8, 0.9, 1.0]])\n    n_classes = 3\n\n    expected_output = np.array([[0.2/3, 1.3/3, 1.4/3], [1.5/3, 0.6/3, 1.7/3], [0.8/3, 1.9/3, 1.4/3]])\n    output = _ovr_decision_function(predictions, confidences, n_classes)\n\n    assert_allclose(output, expected_output)\n"], "sample_130": ["def test_lambdify_with_custom_function():\n        return x * 2\n\n    f = lambdify(x, custom_func(x))\n    assert f(3) == 6\n"], "sample_131": ["def test_TrigonometricFunctions():\n    assert mcode(sin(x)) == \"Sin[x]\"\n    assert mcode(cos(x)) == \"Cos[x]\"\n    assert mcode(exp(x)) == \"Exp[x]\"\n    assert mcode(sin(x) + cos(x)) == \"Cos[x] + Sin[x]\"\n    assert mcode(sin(x) * cos(x)) == \"Cos[x]*Sin[x]\"\n"], "sample_32": ["def test_key_transform_with_numeric_lookups(self):\n    tests = [\n        ('value__c__lt', 15),\n        ('value__c__lte', 14),\n        ('value__c__gt', 13),\n        ('value__c__gte', 14),\n    ]\n    for lookup, value in tests:\n        with self.subTest(lookup=lookup):\n            self.assertIs(NullableJSONModel.objects.filter(\n                **{lookup: value},\n            ).exists(), True)\n"], "sample_128": ["def test_Method_postprocess():\n    opt = {'method': 'some_method'}\n    Method.postprocess(opt)\n\n    assert opt == {'method': 'some_method'}\n"], "sample_144": ["def test_matrixelement():\n    X = MatrixSymbol('X', 3, 3)\n    assert refine(X[0, 1], Q.symmetric(X)) == X[0, 1]\n    assert refine(X[1, 0], Q.symmetric(X)) == X[0, 1]\n    assert refine(X[0, 0], Q.symmetric(X)) == X[0, 0]\n    assert refine(X[1, 1], Q.symmetric(X)) == X[1, 1]\n"], "sample_35": ["def test_modelchoicefield_to_field_name(self):\n    # Create choices for the model choice field tests below.\n    ChoiceModel.objects.create(pk=1, name='a', custom_id='A')\n    ChoiceModel.objects.create(pk=2, name='b', custom_id='B')\n    ChoiceModel.objects.create(pk=3, name='c', custom_id='C')\n\n    # ModelChoiceField with to_field_name\n    e = {\n        'required': 'REQUIRED',\n        'invalid_choice': 'INVALID CHOICE',\n    }\n    f = ModelChoiceField(queryset=ChoiceModel.objects.all(), to_field_name='custom_id', error_messages=e)\n    self.assertFormErrors(['REQUIRED'], f.clean, '')\n    self.assertFormErrors(['INVALID CHOICE'], f.clean, 'D')\n    self.assertEqual(f.clean('A').name, 'a')\n"], "sample_61": ["    def test_decimal_subclass_formatting(self):\n        class EuroDecimal(Decimal):\n            \"\"\"\n            Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n            \"\"\"\n\n                amount = super().__format__(specifier, **kwargs)\n                return \"\u20ac {}\".format(amount)\n\n        self.assertEqual(nformat(EuroDecimal(\"1234.56\"), \".\", decimal_pos=2), \"\u20ac 1234.56\")\n        self.assertEqual(nformat(EuroDecimal(\"1234.56\"), \".\", grouping=3, thousand_sep=\",\", force_grouping=True), \"\u20ac 1,234.56\")\n"], "sample_108": ["def test_svc_ovr_tie_breaking_with_three_classes():\n    \"\"\"Test if predict breaks ties in OVR mode with three classes.\n    Related issue: https://github.com/scikit-learn/scikit-learn/issues/8277\n    \"\"\"\n    X, y = make_blobs(n_samples=300, centers=3, random_state=27)\n\n    xs = np.linspace(X[:, 0].min(), X[:, 0].max(), 1000)\n    ys = np.linspace(X[:, 1].min(), X[:, 1].max(), 1000)\n    xx, yy = np.meshgrid(xs, ys)\n\n    svm = svm.SVC(kernel=\"linear\", decision_function_shape='ovr',\n                   break_ties=True, random_state=42).fit(X, y)\n    pred = svm.predict(np.c_[xx.ravel(), yy.ravel()])\n    dv = svm.decision_function(np.c_[xx.ravel(), yy.ravel()])\n    assert np.all(pred == np.argmax(dv, axis=1))\n"], "sample_141": ["def test_issue_14932_with_units():\n    assert (log(inch) - log(2*inch)).simplify() == log(S.Half)\n    assert (log(inch) - log(foot)).simplify() == -log(12)\n    p = symbols('p', positive=True)\n    assert (log(inch) - log(p*inch)).simplify() == log(1/p)\n"], "sample_142": ["def test_has_variety():\n    assert has_variety((1, 2, 1)) is True\n    assert has_variety((1, 1, 1)) is False\n"], "sample_105": ["def test_transform_hard_voting():\n    \"\"\"Check transform method of VotingClassifier with hard voting on toy dataset.\"\"\"\n    clf1 = LogisticRegression(random_state=123)\n    clf2 = RandomForestClassifier(random_state=123)\n    clf3 = GaussianNB()\n    X = np.array([[-1.1, -1.5], [-1.2, -1.4], [-3.4, -2.2], [1.1, 1.2]])\n    y = np.array([1, 1, 2, 2])\n\n    eclf = VotingClassifier(estimators=[\n        ('lr', clf1), ('rf', clf2), ('gnb', clf3)],\n        voting='hard').fit(X, y)\n\n    assert_array_equal(eclf.transform(X).shape, (4, 3))\n    assert_array_equal(eclf.transform(X), np.array([[1, 1, 1], [1, 1, 1], [2, 2, 1], [2, 2, 2]]))\n"], "sample_53": ["def test_add_model_with_field_removed_from_base_model_with_m2m(self):\n    \"\"\"\n    Removing a base field takes place before adding a new inherited model\n    that has a field with the same name and a ManyToManyField.\n    \"\"\"\n    before = [\n        ModelState(\n            \"app\",\n            \"readable\",\n            [\n                (\"id\", models.AutoField(primary_key=True)),\n                (\"title\", models.CharField(max_length=200)),\n            ],\n        ),\n    ]\n    after = [\n        ModelState(\n            \"app\",\n            \"readable\",\n            [\n                (\"id\", models.AutoField(primary_key=True)),\n            ],\n        ),\n        ModelState(\n            \"app\",\n            \"book\",\n            [\n                (\"title\", models.CharField(max_length=200)),\n                (\"authors\", models.ManyToManyField(\"app.Author\")),\n            ],\n            bases=(\"app.readable\",),\n        ),\n    ]\n    changes = self.get_changes(before, after)\n    self.assertNumberMigrations(changes, \"app\", 1)\n    self.assertOperationTypes(changes, \"app\", 0, [\"RemoveField\", \"CreateModel\"])\n    self.assertOperationAttributes(\n        changes, \"app\", 0, 0, name=\"title\", model_name=\"readable\"\n    )\n    self.assertOperationAttributes(changes, \"app\", 0, 1, name=\"book\")\n"], "sample_137": ["def test_has_variety():\n    assert has_variety((1, 2, 1)) is True\n    assert has_variety((1, 1, 1)) is False\n"], "sample_86": ["def test_record_testsuite_property_non_string_value(testdir):\n    testdir.makepyfile(\n        \"\"\"\n            record_testsuite_property(\"stats\", 10)\n    \"\"\"\n    )\n    result, dom = runandparse(testdir)\n    assert result.ret == 0\n    node = dom.find_first_by_tag(\"testsuite\")\n    properties_node = node.find_first_by_tag(\"properties\")\n    p1_node = properties_node.find_nth_by_tag(\"property\", 0)\n    p1_node.assert_attr(name=\"stats\", value=\"10\")\n"], "sample_83": ["def test_colorized_text_reporter_custom_color_mapping(linter):\n    output = StringIO()\n    linter.reporter.out = output\n    custom_color_mapping = {\n        \"I\": MessageStyle(\"blue\"),\n        \"C\": MessageStyle(\"cyan\", (\"bold\",)),\n        \"R\": MessageStyle(\"yellow\", (\"bold\", \"italic\")),\n        \"W\": MessageStyle(\"magenta\"),\n        \"E\": MessageStyle(\"red\", (\"bold\",)),\n        \"F\": MessageStyle(\"red\", (\"bold\", \"underline\")),\n        \"S\": MessageStyle(\"green\", (\"inverse\",)),\n    }\n    linter.reporter = ColorizedTextReporter(color_mapping=custom_color_mapping)\n    linter.open()\n    linter.set_current_module(\"my_module\")\n    linter.add_message(\"C0301\", line=1, args=(1, 2))\n    linter.add_message(\"line-too-long\", line=2, args=(3, 4))\n\n    out_lines = output.getvalue().split(\"\\n\")\n    assert \"my_module\" in out_lines[1]\n    assert \"C0301\" in out_lines[2]\n    assert \"line-too-long\" in out_lines[3]\n"], "sample_7": ["    def test_tick_notifies_file_changed(self):\n        reloader = autoreload.StatReloader()\n        reloader.watch_file(self.existing_file)\n        with mock.patch.object(reloader, 'notify_file_changed') as mocked_notify:\n            ticker = reloader.tick()\n            next(ticker)\n            self.increment_mtime(self.existing_file)\n            next(ticker)\n        self.assertEqual(mocked_notify.call_count, 1)\n        self.assertCountEqual(mocked_notify.call_args[0], [self.existing_file])\n"], "sample_22": ["def test_camel_case_to_spaces(self):\n    items = [\n        ('CamelCaseExample', 'camel case example'),\n        ('AnotherExample', 'another example'),\n        ('NoChange', 'no change'),\n        ('', ''),\n        ('AllCaps', 'all caps'),\n        ('AllLower', 'all lower'),\n        ('MixedCaps', 'mixed caps'),\n        ('Multiple   Spaces', 'multiple   spaces'),\n        ('LeadingAndTrailingSpaces', 'leading and trailing spaces'),\n    ]\n    for value, output in items:\n        self.assertEqual(text.camel_case_to_spaces(value), output)\n        self.assertEqual(text.camel_case_to_spaces(lazystr(value)), output)\n"], "sample_72": ["def test_toolmanager_add_tool():\n    with pytest.warns(UserWarning, match=_EXPECTED_WARNING_TOOLMANAGER):\n        plt.rcParams['toolbar'] = 'toolmanager'\n    fig = plt.gcf()\n    initial_len = len(fig.canvas.manager.toolmanager.tools)\n    assert 'custom_tool' not in fig.canvas.manager.toolmanager.tools\n    fig.canvas.manager.toolmanager.add_tool('custom_tool', 'Custom Tool')\n    assert len(fig.canvas.manager.toolmanager.tools) == initial_len + 1\n    assert 'custom_tool' in fig.canvas.manager.toolmanager.tools\n"], "sample_150": ["def test_solve_poly_system_with_rational_coefficients():\n    x, y = symbols('x y')\n    f_1 = 2*x - 3*y + 1\n    f_2 = x/2 + y - 1\n\n    assert solve_poly_system([f_1, f_2], x, y) == [(Rational(4, 3), Rational(1, 3))]\n"], "sample_40": ["def test_field_deep_copy_widget(self):\n    class CustomTextInput(TextInput):\n        pass\n\n    field = CharField(widget=CustomTextInput())\n    field_copy = copy.deepcopy(field)\n    self.assertIsInstance(field_copy, CharField)\n    self.assertIsNot(field_copy.widget, field.widget)\n"], "sample_155": ["def test_issue_24062_with_derivative():\n    from sympy.core.symbol import symbols\n    from sympy.core.function import Derivative\n    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n\n    R = Quantity('R')\n    C = Quantity('C')\n    T = Quantity('T')\n    SI.set_quantity_dimension(R, impedance)\n    SI.set_quantity_dimension(C, capacitance)\n    SI.set_quantity_dimension(T, time)\n    R.set_global_relative_scale_factor(1, ohm)\n    C.set_global_relative_scale_factor(1, farad)\n    T.set_global_relative_scale_factor(1, second)\n    x = symbols('x')\n    expr = Derivative(T / (R * C), x)\n    dim = SI._collect_factor_and_dimension(expr)[1]\n    assert SI.get_dimension_system().is_dimensionless(dim)\n"], "sample_21": ["def test_fast_delete_with_signals(self):\n    # Test that fast delete works even when signals are connected\n        pass\n\n    models.signals.pre_delete.connect(receiver, sender=User)\n    u = User.objects.create()\n    a = Avatar.objects.create(user=u)\n    # 1 query to fast-delete the user\n    # 1 query to delete the avatar\n    self.assertNumQueries(2, a.delete)\n    self.assertFalse(User.objects.exists())\n    self.assertFalse(Avatar.objects.exists())\n    models.signals.pre_delete.disconnect(receiver, sender=User)\n"], "sample_71": ["def test_context_with_after_reset():\n    original_value = 'gray'\n    other_value = 'blue'\n    mpl.rcParams[PARAM] = original_value\n    with temp_style('test', DUMMY_SETTINGS):\n        with style.context('test', after_reset=True):\n            assert mpl.rcParams[PARAM] == VALUE\n    assert mpl.rcParams[PARAM] == original_value\n"], "sample_10": ["def test_exact_queryset_rhs(self):\n    \"\"\"__exact=QuerySet is transformed to __in=QuerySet.\"\"\"\n    authors = Author.objects.filter(pk__in=[self.au1.pk, self.au2.pk])\n    articles = Article.objects.filter(author__in=authors)\n    self.assertCountEqual(articles, [self.a1, self.a2, self.a3, self.a4, self.a5, self.a6, self.a7])\n"], "sample_25": ["def test_add_model_with_field_removed_from_base_model_and_altered(self):\n    \"\"\"\n    Removing a base field, altering it, and adding a new inherited model that\n    has a field with the same name are all handled correctly.\n    \"\"\"\n    before = [\n        ModelState('app', 'readable', [\n            ('id', models.AutoField(primary_key=True)),\n            ('title', models.CharField(max_length=200)),\n        ]),\n    ]\n    after = [\n        ModelState('app', 'readable', [\n            ('id', models.AutoField(primary_key=True)),\n            ('title', models.CharField(max_length=300)),\n        ]),\n        ModelState('app', 'book', [\n            ('title', models.CharField(max_length=200)),\n        ], bases=('app.readable',)),\n    ]\n    changes = self.get_changes(before, after)\n    self.assertNumberMigrations(changes, 'app', 1)\n    self.assertOperationTypes(changes, 'app', 0, ['AlterField', 'CreateModel'])\n    self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n    self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n"], "sample_9": ["def test_file_deletion(self, mocked_modules, notify_mock):\n    self.reloader.watch_file(self.existing_file)\n    with self.tick_twice():\n        self.existing_file.unlink()\n    self.assertEqual(notify_mock.call_count, 1)\n    self.assertCountEqual(notify_mock.call_args[0], [self.existing_file])\n"], "sample_96": ["def test_ridge_classifier_cv_no_support_multilabel():\n    X, y = make_multilabel_classification(n_samples=10, random_state=0)\n    assert_raises(ValueError, RidgeClassifierCV().fit, X, y)\n"], "sample_94": ["def test_getstatementrange_with_decorator():\n    source = Source(\n        \"\"\"\\\n        @decorator\n            assert True\n        \"\"\"\n    )\n    assert source.getstatementrange(2) == (2, 3)\n"], "sample_0": ["def test_render_options_with_custom_placeholder(self):\n    form = AlbumForm()\n    form.fields['band'].widget.placeholder = 'Select a band'\n    output = form.as_table()\n    self.assertIn('data-placeholder=\"Select a band\"', output)\n"], "sample_27": ["def test_token_with_different_password(self):\n    \"\"\"Updating the user password invalidates the token.\"\"\"\n    user = User.objects.create_user('changepassworduser', 'test5@example.com', 'testpw')\n    p0 = PasswordResetTokenGenerator()\n    tk1 = p0.make_token(user)\n    self.assertIs(p0.check_token(user, tk1), True)\n    user.set_password('newtestpw')\n    user.save()\n    self.assertIs(p0.check_token(user, tk1), False)\n"], "sample_145": ["def test_latex_MatrixExpr():\n    from sympy import MatrixSymbol, Identity\n    A = MatrixSymbol('A', 3, 3)\n    B = MatrixSymbol('B', 3, 3)\n    expr = A * B + Identity(3)\n    assert latex(expr) == r\"A B + \\mathbf{I}\"\n"], "sample_1": ["def test_read_write_simple_with_err_specs(tmp_path):\n    test_file = tmp_path / \"test.qdp\"\n    t1 = Table()\n    t1.add_column(Column(name=\"a\", data=[1, 2, 3]))\n    t1.add_column(Column(name=\"b\", data=[0.1, 0.2, 0.3]))\n    t1.write(test_file, format=\"ascii.qdp\", err_specs={\"serr\": [2]})\n    t2 = Table.read(test_file, table_id=0, format=\"ascii.qdp\", names=[\"a\"])\n    assert np.all(t2[\"a\"] == t1[\"a\"])\n    assert np.allclose(t2[\"a_err\"], t1[\"b\"])\n"], "sample_156": ["def test_parser_mathematica_fullform():\n    parser = MathematicaParser()\n\n    # Test the _from_fullform_to_fullformlist method\n    assert parser._from_fullform_to_fullformlist('List[1, List[2, 3], 4]') == ['List', '1', ['List', '2', '3'], '4']\n    assert parser._from_fullform_to_fullformlist('Plus[1, Times[2, 3], 4]') == ['Plus', '1', ['Times', '2', '3'], '4']\n\n    # Test the _from_fullformlist_to_fullformsympy method\n    from sympy import Function, Symbol\n    assert parser._from_fullformlist_to_fullformsympy(['List', '1', ['List', '2', '3'], '4']) == Function('List')(Symbol('1'), Function('List')(Symbol('2'), Symbol('3')), Symbol('4'))\n    assert parser._from_fullformlist_to_fullformsympy(['Plus', '1', ['Times', '2', '3'], '4']) == Function('Plus')(Symbol('1'), Function('Times')(Symbol('2'), Symbol('3')), Symbol('4'))\n\n    # Test the _from_fullformsympy_to_sympy method\n    from sympy import Tuple, Add, Mul\n    assert parser._from_fullformsympy_to_sympy(Function('List')(Symbol('1'), Function('List')(Symbol('2'), Symbol('3')), Symbol('4'))) == Tuple(1, Tuple(2, 3), 4)\n    assert parser._from_fullformsympy_to_sympy(Function('Plus')(Symbol('1'), Function('Times')(Symbol('2'), Symbol('3')), Symbol('4'))) == Add(1, Mul(2, 3), 4)\n"], "sample_143": ["def test_issue_18272_complex():\n    x = Symbol('x')\n    n = Symbol('n')\n\n    assert upretty(ConditionSet(x, Eq(-x + exp(x), 0), S.Complexes)) == \\\n    '\u23a7            \u239b      x    \u239e\u23ab\\n'\\\n    '\u23a8x | x \u220a \u2102 \u2227 \u239d-x + \u212f  = 0\u23a0\u23ac\\n'\\\n    '\u23a9                         \u23ad'\n    assert upretty(ConditionSet(x, Contains(n/2, Interval(0, oo)), FiniteSet(-n/2, n/2))) == \\\n    '\u23a7        \u23a7-n   n\u23ab   \u239bn         \u239e\u23ab\\n'\\\n    '\u23a8x | x \u220a \u23a8\u2500\u2500\u2500, \u2500\u23ac \u2227 \u239c\u2500 \u2208 [0, \u221e)\u239f\u23ac\\n'\\\n    '\u23a9        \u23a9 2   2\u23ad   \u239d2         \u23a0\u23ad'\n    assert upretty(ConditionSet(x, Eq(Piecewise((1, x >= 3), (x/2 - 1/2, x >= 2), (1/2, x >= 1),\n                (x/2, True)) - 1/2, 0), Interval(0, 3))) == \\\n    '\u23a7                 \u239b\u239b\u23a7   1     for x \u2265 3\u239e          \u239e\u23ab\\n'\\\n    '\u23aa                 \u239c\u239c\u23aa                  \u239f          \u239f\u23aa\\n'\\\n    '\u23aa                 \u239c\u239c\u23aax                 \u239f          \u239f\u23aa\\n'\\\n    '\u23aa                 \u239c\u239c\u23aa\u2500 - 0.5  for x \u2265 2\u239f"], "sample_106": ["def test_transform_before_fit():\n    # Test that transform raises an error if fit has not been called\n    nca = NeighborhoodComponentsAnalysis()\n    assert_raises(NotFittedError, nca.transform, iris_data)\n"], "sample_103": ["def test_mutual_info_regression_sparse():\n    # Test that sparse matrix with continuous features raises an error.\n    X = csr_matrix([[0, 0, 0],\n                    [1, 1, 0],\n                    [2, 0, 1],\n                    [2, 0, 1],\n                    [2, 0, 1]])\n    y = np.array([0, 1, 2, 2, 1])\n\n    with assert_raises(ValueError):\n        mutual_info_regression(X, y)\n"], "sample_113": ["def test_column_transformer_with_pandas_out_transformer():\n    pd = pytest.importorskip(\"pandas\")\n\n    X_df = pd.DataFrame({\"feat0\": [1.0, 2.0, 3.0], \"feat1\": [2.0, 3.0, 4.0]})\n    ct = ColumnTransformer(\n        [\n            (\"trans_0\", PandasOutTransformer(offset=3.0), [\"feat1\"]),\n            (\"trans_1\", PandasOutTransformer(offset=1.0), [\"feat0\"]),\n        ]\n    )\n    ct.set_output(transform=\"pandas\")\n    X_trans_df = ct.fit_transform(X_df)\n    assert isinstance(X_trans_df, pd.DataFrame)\n    assert_array_equal(X_trans_df.columns, [\"trans_0__feat1\", \"trans_1__feat0\"])\n    assert_array_equal(X_trans_df.values, [[-2.0, 0.0], [-1.0, 1.0], [0.0, 2.0]])\n"], "sample_97": ["def test_label_binarize_multilabel_indicator():\n    y_ind = np.array([[0, 1, 0], [1, 1, 1], [0, 0, 0]])\n    classes = [0, 1, 2]\n    pos_label = 2\n    neg_label = 0\n    expected = pos_label * y_ind\n    y_sparse = [sparse_matrix(y_ind)\n                for sparse_matrix in [coo_matrix, csc_matrix, csr_matrix,\n                                      dok_matrix, lil_matrix]]\n\n    for y in [y_ind] + y_sparse:\n        yield (check_binarized_results, y, classes, pos_label, neg_label,\n               expected)\n\n    assert_raises(ValueError, label_binarize, y, classes, neg_label=-1,\n                  pos_label=pos_label, sparse_output=True)\n"], "sample_26": ["    def test_migrate_test_setting_none(self, mocked_sync_apps, mocked_migrate, *mocked_objects):\n        test_connection = get_connection_copy()\n        test_connection.settings_dict['TEST']['MIGRATE'] = None\n        creation = test_connection.creation_class(test_connection)\n        if connection.vendor == 'oracle':\n            # Don't close connection on Oracle.\n            creation.connection.close = mock.Mock()\n        old_database_name = test_connection.settings_dict['NAME']\n        try:\n            with mock.patch.object(creation, '_create_test_db'):\n                creation.create_test_db(verbosity=0, autoclobber=True, serialize=False)\n            # Migrations run.\n            mocked_migrate.assert_called()\n            args, kwargs = mocked_migrate.call_args\n            self.assertEqual(args, ([('app_unmigrated', '0001_initial')],))\n            self.assertEqual(len(kwargs['plan']), 1)\n            # App is not synced.\n            mocked_sync_apps.assert_not_called()\n        finally:\n            with mock.patch.object(creation, '_destroy_test_db'):\n                creation.destroy_test_db(old_database_name, verbosity=0)\n"], "sample_50": ["def test_extra_tags(self):\n    \"\"\"\n    A message containing extra_tags is properly encoded/decoded by the custom JSON\n    encoder/decoder classes.\n    \"\"\"\n    messages = [\n        Message(constants.INFO, 'Test message', extra_tags='tag1'),\n        Message(constants.INFO, 'Another message', extra_tags='tag2 tag3'),\n    ]\n    storage = self.get_storage()\n    encoded = storage._encode(messages)\n    decoded_messages = storage._decode(encoded)\n    self.assertEqual(messages, decoded_messages)\n"], "sample_90": ["def test_mark_evaluator_istrue(testdir):\n    testdir.makepyfile(\n        \"\"\"\n        import pytest\n        from _pytest.nodes import Item\n        from _pytest.mark import MarkEvaluator\n\n        @pytest.fixture\n            item = Item.from_parent(request.node, name=\"test_func\")\n            item.config = request.config\n            return MarkEvaluator(item, \"mark_name\")\n\n            assert evaluator._istrue() is False\n\n            evaluator._marks = [pytest.mark.mark_name()]\n            assert evaluator._istrue() is True\n\n            evaluator._marks = [pytest.mark.mark_name(condition=\"1 == 1\")]\n            assert evaluator._istrue() is True\n\n            evaluator._marks = [pytest.mark.mark_name(condition=\"1 == 2\")]\n            assert evaluator._istrue() is False\n\n            evaluator._marks = [pytest.mark.mark_name(reason=\"Test reason\")]\n            assert evaluator._istrue() is True\n            assert evaluator.reason == \"Test reason\"\n\n            evaluator._marks = [pytest.mark.mark_name(True)]\n            with pytest.raises(AssertionError):\n                evaluator._istrue()\n        \"\"\"\n    )\n    result = testdir.runpytest()\n    result.assert_outcomes(passed=6)\n"], "sample_125": ["def test_Float_from_numpy():\n    from sympy.utilities.pytest import skip\n    from sympy.external import import_module\n    np = import_module('numpy')\n    if not np:\n        skip('numpy not installed. Abort numpy tests.')\n\n    x = np.float64(2.5)\n    y = Float(x)\n    assert y == Float(2.5)\n    assert y._prec == 53\n"], "sample_129": ["def test_Quaternion_latex_printing_with_zero_components():\n    q = Quaternion(0, 0, 0, 0)\n    assert latex(q) == \"0\"\n    q = Quaternion(x, 0, 0, 0)\n    assert latex(q) == \"x\"\n    q = Quaternion(0, y, 0, 0)\n    assert latex(q) == \"y i\"\n    q = Quaternion(0, 0, z, 0)\n    assert latex(q) == \"z j\"\n    q = Quaternion(0, 0, 0, t)\n    assert latex(q) == \"t k\"\n"], "sample_70": ["def test_legend_markers_from_line2d_with_different_colors():\n    # Test that markers can be copied for legend lines with different colors (#17960)\n    _markers = ['.', '*', 'v']\n    _colors = ['r', 'g', 'b']\n    fig, ax = plt.subplots()\n    lines = [mlines.Line2D([0], [0], ls='None', marker=mark, color=col)\n             for mark, col in zip(_markers, _colors)]\n    labels = [\"foo\", \"bar\", \"xyzzy\"]\n    markers = [line.get_marker() for line in lines]\n    colors = [line.get_color() for line in lines]\n    legend = ax.legend(lines, labels)\n\n    new_markers = [line.get_marker() for line in legend.get_lines()]\n    new_colors = [line.get_color() for line in legend.get_lines()]\n    new_labels = [text.get_text() for text in legend.get_texts()]\n\n    assert markers == new_markers == _markers\n    assert colors == new_colors == _colors\n    assert labels == new_labels\n"], "sample_3": ["def test_custom_model_separability():\n    @custom_model\n        return x + y, x - y\n\n    result = is_separable(model_b)\n    expected_result = np.array([False, False])\n    assert_allclose(result, expected_result)\n\n    result = separability_matrix(model_b)\n    expected_result = np.array([[True, True], [True, True]])\n    assert_allclose(result, expected_result)\n"], "sample_157": ["def test_tensor_product_trace():\n    assert Tr(TP(A, B)).doit() == Tr(A)*Tr(B)\n    assert Tr(TP(A, B), indices=[0]).doit() == Tr(A)*B\n    assert Tr(TP(A, B), indices=[1]).doit() == A*Tr(B)\n"], "sample_139": ["def test_issue_14239():\n    # doesn't cause recursion error\n    r = Symbol('r', real=True)\n    assert Abs(r + Piecewise((0, r < 0), (1 + r, True)))\n"], "sample_95": ["def test_mark_skip_item(pytester: Pytester) -> None:\n    # Ensure pytest.mark.skip works with non-Python Item\n    pytester.makeconftest(\n        \"\"\"\n        import pytest\n\n        class MyItem(pytest.Item):\n            nodeid = 'foo'\n                marker = pytest.mark.skip(reason=\"Skipped test\")\n                self.add_marker(marker)\n                assert False\n\n            return MyItem.from_parent(name=\"foo\", parent=parent)\n    \"\"\"\n    )\n    result = pytester.inline_run()\n    passed, skipped, failed = result.listoutcomes()\n    assert not failed\n    assert skipped\n"], "sample_44": ["def test_limit_choices_to(self):\n    # Test limit_choices_to with a dictionary\n    f = forms.ModelChoiceField(Category.objects.all(), limit_choices_to={'name': 'Entertainment'})\n    self.assertEqual(list(f.choices), [\n        ('', '---------'),\n        (self.c1.pk, 'Entertainment'),\n    ])\n\n    # Test limit_choices_to with a callable\n        return {'name': 'A test'}\n    f = forms.ModelChoiceField(Category.objects.all(), limit_choices_to=limit_choices_to)\n    self.assertEqual(list(f.choices), [\n        ('', '---------'),\n        (self.c2.pk, 'A test'),\n    ])\n"], "sample_76": ["def test_order_greater_than_unique_values(self, df):\n\n    df = pd.DataFrame(dict(x=[1, 2, 3], y=[1, 2, 3]))\n    groupby = GroupBy([\"group\"])\n    res = PolyFit(order=4, gridsize=100)(df, groupby, \"x\", {})\n\n    assert res.empty\n"], "sample_24": ["def test_update_error_dict(self):\n    error_dict = {}\n    exception = ValidationError('message')\n    exception.update_error_dict(error_dict)\n    self.assertEqual(error_dict, {'__all__': ['message']})\n\n    error_dict = {}\n    exception = ValidationError({'field1': 'error1', 'field2': 'error2'})\n    exception.update_error_dict(error_dict)\n    self.assertEqual(error_dict, {'field1': ['error1'], 'field2': ['error2']})\n\n    error_dict = {'field1': ['error1']}\n    exception = ValidationError({'field2': 'error2'})\n    exception.update_error_dict(error_dict)\n    self.assertEqual(error_dict, {'field1': ['error1'], 'field2': ['error2']})\n"], "sample_36": ["def test_combine_and_or(self):\n    q1 = Q(price__gt=F('discounted_price'))\n    q2 = Q(price=F('discounted_price'))\n    q3 = Q(quantity__gt=5)\n    q = (q1 & q2) | q3\n    path, args, kwargs = q.deconstruct()\n    self.assertEqual(args, (\n        (('price', F('discounted_price')), ('price__gt', F('discounted_price'))),\n        ('quantity__gt', 5),\n    ))\n    self.assertEqual(kwargs, {'_connector': 'OR'})\n"], "sample_67": ["def test_register_serializer_usage(self):\n    BaseSerializer.register(complex, ComplexSerializer)\n    self.assertSerializedResultEqual(\n        complex(1, 2),\n        (\"complex((1+2j))\", set()),\n    )\n    BaseSerializer.unregister(complex)\n"], "sample_5": ["def test_fast_delete_with_signals(self):\n    # Test that fast_delete still works when there are signals connected\n    u = User.objects.create(\n        avatar=Avatar.objects.create()\n    )\n    a = Avatar.objects.get(pk=u.avatar_id)\n\n    # Attach a signal to make sure we will not do fast_deletes.\n    calls = []\n\n        calls.append('')\n\n    models.signals.post_delete.connect(noop, sender=User)\n\n    # 1 query to fast-delete the user\n    # 1 query to delete the avatar\n    self.assertNumQueries(2, a.delete)\n    self.assertFalse(User.objects.exists())\n    self.assertFalse(Avatar.objects.exists())\n    self.assertEqual(len(calls), 1)\n\n    models.signals.post_delete.disconnect(noop, sender=User)\n"], "sample_98": ["def test_check_array_complex_data_warning():\n    X = np.array([[1, 2, 3], [4, 5, 6]], dtype=complex)\n    assert_warns(ComplexWarning, check_array, X)\n"], "sample_120": ["def test_matrix_element_subs():\n    A = MatrixSymbol('A', n, m)\n    B = MatrixSymbol('B', m, l)\n    C = MatrixSymbol('C', l, p)\n\n    assert (A[k, m]*B[m, l]).subs(m, n) == A[k, n]*B[n, l]\n    assert (A[k, m]*B[m, l]*C[l, p]).subs({m: n, l: p}) == A[k, n]*B[n, p]*C[p, p]\n"], "sample_104": ["def test_long_repr():\n    # Test with a long repr that doesn't fit on a single line\n    long_string = 'a' * 1000\n    lr = LogisticRegression(penalty=long_string, dual=long_string, tol=long_string, C=long_string,\n                            fit_intercept=long_string, intercept_scaling=long_string, class_weight=long_string,\n                            random_state=long_string, solver=long_string, max_iter=long_string,\n                            multi_class=long_string, verbose=long_string, warm_start=long_string, n_jobs=long_string,\n                            l1_ratio=long_string)\n    repr_ = lr.__repr__()\n    assert '...' in repr_\n"], "sample_87": ["def test_collect_sub_with_symlinks_and_pyargs(testdir, monkeypatch):\n    sub = testdir.mkdir(\"sub\")\n    sub.ensure(\"__init__.py\")\n    sub.ensure(\"test_file.py\").write(\"def test_file(): pass\")\n\n    # Create a broken symlink.\n    sub.join(\"test_broken.py\").mksymlinkto(\"test_doesnotexist.py\")\n\n    # Symlink that gets collected.\n    sub.join(\"test_symlink.py\").mksymlinkto(\"test_file.py\")\n\n    monkeypatch.setenv(\"PYTHONPATH\", str(testdir.tmpdir), prepend=os.pathsep)\n    result = testdir.runpytest_subprocess(\"--pyargs\", \"sub\")\n    result.stdout.fnmatch_lines(\n        [\n            \"sub/test_file.py::test_file PASSED*\",\n            \"sub/test_symlink.py::test_file PASSED*\",\n            \"*2 passed in*\",\n        ]\n    )\n"], "sample_78": ["def test_run_cert_path_exists(monkeypatch):\n    # cert path does not exist\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", \"non-existent-file\"])\n\n    # cert path exists\n    ctx = run_command.make_context(\"run\", [\"--cert\", __file__, \"--key\", __file__])\n    assert ctx.params[\"cert\"] == (__file__, __file__)\n"], "sample_92": ["def test_dynamic_xfail_set_during_runtest_passed(self, testdir: Testdir) -> None:\n    # Issue #7486.\n    p = testdir.makepyfile(\n        \"\"\"\n        import pytest\n            request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n        \"\"\"\n    )\n    result = testdir.runpytest(p)\n    result.assert_outcomes(xfailed=1)\n"], "sample_107": ["def test_logistic_regression_path_intercept_scaling():\n    # Test that intercept_scaling is ignored when fit_intercept is False\n\n    coefs, _, _ = _logistic_regression_path(X, Y1, fit_intercept=False, intercept_scaling=2.0)\n    assert_equal(coefs.shape[-1], X.shape[1])\n"], "sample_45": ["def test_cache_control_decorator(self):\n    @cache_control(public=True, max_age=3600)\n        return HttpResponse()\n    r = a_view(HttpRequest())\n    self.assertEqual(r.headers['Cache-Control'], 'public, max-age=3600')\n"], "sample_100": ["def test_one_hot_encoder_unsorted_categories_error():\n    X = np.array([[1, 2]]).T\n    enc = OneHotEncoder(categories=[[2, 1, 3]])\n    msg = 'Unsorted categories are not supported'\n    with pytest.raises(ValueError, match=msg):\n        enc.fit_transform(X)\n"], "sample_77": ["def test_label_concise(self, t):\n\n    s = Temporal().label(concise=True)\n    a = PseudoAxis(s._setup(t, Coordinate())._matplotlib_scale)\n    a.set_view_interval(10, 1000)\n    label, = a.major.formatter.format_ticks([100])\n    assert label != \"\"\n"], "sample_68": ["def test_update_conflicts_with_db_column(self):\n    FieldsWithDbColumns.objects.bulk_create(\n        [\n            FieldsWithDbColumns(db_column_field=1, name=\"a\"),\n            FieldsWithDbColumns(db_column_field=2, name=\"b\"),\n        ]\n    )\n    self.assertEqual(FieldsWithDbColumns.objects.count(), 2)\n\n    conflicting_objects = [\n        FieldsWithDbColumns(db_column_field=1, name=\"c\"),\n        FieldsWithDbColumns(db_column_field=2, name=\"d\"),\n    ]\n    results = FieldsWithDbColumns.objects.bulk_create(\n        conflicting_objects,\n        update_conflicts=True,\n        unique_fields=[\"db_column_field\"],\n        update_fields=[\"name\"],\n    )\n    self.assertEqual(len(results), len(conflicting_objects))\n    if connection.features.can_return_rows_from_bulk_insert:\n        for instance in results:\n            self.assertIsNotNone(instance.pk)\n    self.assertEqual(FieldsWithDbColumns.objects.count(), 2)\n    self.assertCountEqual(\n        FieldsWithDbColumns.objects.values(\"db_column_field\", \"name\"),\n        [\n            {\"db_column_field\": 1, \"name\": \"c\"},\n            {\"db_column_field\": 2, \"name\": \"d\"},\n        ],\n    )\n"], "sample_14": ["def test_serialize_complex(self):\n    self.assertSerializedEqual(complex(1, 2))\n    self.assertSerializedResultEqual(\n        complex(1, 2),\n        (\"complex((1+2j))\", set())\n    )\n"], "sample_57": ["def test_formset_with_custom_renderer(self):\n    \"\"\"\n    A custom renderer passed to a formset_factory() is passed to all forms\n    and ErrorList.\n    \"\"\"\n    from django.forms.renderers import Jinja2\n\n    renderer = Jinja2()\n    data = {\n        \"choices-TOTAL_FORMS\": \"2\",\n        \"choices-INITIAL_FORMS\": \"0\",\n        \"choices-MIN_NUM_FORMS\": \"0\",\n        \"choices-0-choice\": \"Zero\",\n        \"choices-0-votes\": \"0\",\n        \"choices-1-choice\": \"One\",\n        \"choices-1-votes\": \"1\",\n    }\n    ChoiceFormSet = formset_factory(Choice, renderer=renderer)\n    formset = ChoiceFormSet(data, auto_id=False, prefix=\"choices\")\n    self.assertEqual(formset.renderer, renderer)\n    self.assertEqual(formset.forms[0].renderer, renderer)\n    self.assertEqual(formset.management_form.renderer, renderer)\n    self.assertEqual(formset.non_form_errors().renderer, renderer)\n    self.assertEqual(formset.empty_form.renderer, renderer)\n"], "sample_151": ["def test_direction_cosine_direction_ratio():\n    p1 = Point3D(1, 2, 3)\n    p2 = Point3D(2, 3, 5)\n    assert p1.direction_cosine(p2) == [sqrt(6)/6, sqrt(6)/6, sqrt(6)/3]\n    assert p1.direction_ratio(p2) == [1, 1, 2]\n"], "sample_43": ["def test_permission_denied_for_invalid_app_label(self):\n    request = self.factory.get(self.url, {'term': 'is', **self.opts, 'app_label': 'invalid_app'})\n    request.user = self.superuser\n    with self.assertRaises(PermissionDenied):\n        AutocompleteJsonView.as_view(**self.as_view_args)(request)\n"], "sample_38": ["def test_password_reset_form_with_custom_user_model(self):\n    class CustomUser(User):\n        email = models.EmailField(unique=True)\n        USERNAME_FIELD = 'email'\n        REQUIRED_FIELDS = []\n\n    with self.settings(AUTH_USER_MODEL='auth_tests.CustomUser'):\n        email = 'test@mail.com'\n        CustomUser.objects.create_user(email=email, password='test password')\n        form = PasswordResetForm({'email': email})\n        self.assertTrue(form.is_valid())\n        form.save()\n        self.assertEqual(form.cleaned_data['email'], email)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].to, [email])\n"], "sample_79": ["def test_concat_dim_is_dataarray(self):\n    objs = [DataArray([0]), DataArray([1])]\n    dim = DataArray([3, 4], dims=\"y\")\n    expected = DataArray([0, 1], dims=\"y\", coords={\"y\": [3, 4]})\n    actual = concat(objs, dim)\n    assert_identical(actual, expected)\n"], "sample_135": ["def test_is_hypergeometric():\n    from sympy import hyper\n    x = symbols('x')\n    assert hyper([1, 2], [3, 4], x).is_hypergeometric(2) is True\n    assert hyper([1, 2], [3, 4], x).is_hypergeometric(3) is False\n"], "sample_159": ["def test_prefix_combination():\n    k = PREFIXES['k']\n    m = PREFIXES['m']\n    Ki = BIN_PREFIXES['Ki']\n\n    assert k * Ki == 1024\n    assert m * Ki == 0.0009765625\n    assert k / Ki == 1024 / k\n    assert m / Ki == 0.0009765625 / m\n"], "sample_30": ["def test_inline_formset_error_message(self):\n    self.admin_login(username='super', password='secret')\n    self.selenium.get(self.live_server_url + reverse('admin:admin_inlines_holder5_add'))\n    self.wait_until_visible('#id_dummy')\n    self.selenium.find_element_by_id('id_dummy').send_keys(1)\n    fields = ['id_inner5stacked_set-0-dummy', 'id_inner5tabular_set-0-dummy']\n    show_links = self.selenium.find_elements_by_link_text('SHOW')\n    for show_index, field_name in enumerate(fields):\n        show_links[show_index].click()\n        self.wait_until_visible('#' + field_name)\n        self.selenium.find_element_by_id(field_name).send_keys(1)\n\n    self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n    error_messages = self.selenium.find_elements_by_css_selector('.errorlist li')\n    self.assertEqual(len(error_messages), 2)\n    self.assertEqual(error_messages[0].text, 'This field is required.')\n    self.assertEqual(error_messages[1].text, 'This field is required.')\n"], "sample_154": ["def test_lambdify_with_numexpr_and_cse():\n    if not numexpr:\n        skip(\"numexpr not installed.\")\n    if not numpy:\n        skip(\"numpy not installed.\")\n\n    expr1 = x**2 + y**2\n    expr2 = sqrt(expr1)\n    expr3 = sin(expr2)\n\n    f = lambdify((x, y), expr3, modules='numexpr', cse=True)\n\n    result = f(1, 2)\n    reference = expr3.subs({x: 1, y: 2}).evalf()\n    assert numpy.allclose(result, float(reference))\n"], "sample_18": ["def test_foreign_object_to_unique_field_with_unique_together(self):\n    class Person(models.Model):\n        country_id = models.IntegerField()\n        city_id = models.IntegerField()\n\n        class Meta:\n            unique_together = (('country_id', 'city_id'),)\n\n    class MMembership(models.Model):\n        person_country_id = models.IntegerField()\n        person_city_id = models.IntegerField()\n        person = models.ForeignObject(\n            Person,\n            on_delete=models.CASCADE,\n            from_fields=['person_country_id', 'person_city_id'],\n            to_fields=['country_id', 'city_id'],\n        )\n\n    field = MMembership._meta.get_field('person')\n    self.assertEqual(field.check(), [])\n"], "sample_58": ["def test_no_dbname_no_service(self):\n    self.assertEqual(\n        self.settings_to_cmd_args_env(\n            {\n                \"USER\": \"someuser\",\n                \"PASSWORD\": \"somepassword\",\n                \"HOST\": \"somehost\",\n                \"PORT\": \"444\",\n            }\n        ),\n        (\n            [\"psql\", \"-U\", \"someuser\", \"-h\", \"somehost\", \"-p\", \"444\", \"postgres\"],\n            {\"PGPASSWORD\": \"somepassword\"},\n        ),\n    )\n"], "sample_73": ["def test_offsetimage():\n    fig, ax = plt.subplots()\n\n    data = np.random.rand(10, 10)\n    oi = OffsetImage(data, zoom=2, cmap='viridis')\n    ab = AnchoredOffsetbox('center', child=oi)\n    ax.add_artist(ab)\n"], "sample_121": ["def test_commutes_with():\n    p = Permutation([1, 5, 2, 0, 3, 6, 4])\n    q = Permutation([[1, 2, 3, 5, 6], [0, 4]])\n    assert p.commutes_with(q) == False\n    assert q.commutes_with(p) == False\n    r = Permutation([0, 1, 2, 3])\n    assert r.commutes_with(r) == True\n"], "sample_158": ["def test_physical_constant_property():\n    assert not meter.is_physical_constant\n    assert not joule.is_physical_constant\n    assert not day.is_physical_constant\n    assert not second.is_physical_constant\n    assert not volt.is_physical_constant\n    assert not ohm.is_physical_constant\n    assert not centimeter.is_physical_constant\n    assert not kilometer.is_physical_constant\n    assert not kilogram.is_physical_constant\n    assert not pebibyte.is_physical_constant\n    assert elementary_charge.is_physical_constant\n    assert speed_of_light.is_physical_constant\n    assert vacuum_permittivity.is_physical_constant\n    assert molar_gas_constant.is_physical_constant\n    assert gravitational_constant.is_physical_constant\n"], "sample_59": ["def test_formset_with_custom_prefix(self):\n    \"\"\"Formsets with custom prefix.\"\"\"\n    ChoiceFormSet = formset_factory(Choice, can_order=True, can_delete=True)\n    initial = [\n        {\"choice\": \"Calexico\", \"votes\": 100},\n        {\"choice\": \"Fergie\", \"votes\": 900},\n        {\"choice\": \"The Decemberists\", \"votes\": 500},\n    ]\n    formset = ChoiceFormSet(initial=initial, auto_id=False, prefix=\"custom_prefix\")\n    self.assertHTMLEqual(\n        \"\\n\".join(form.as_ul() for form in formset.forms),\n        '<li>Choice: <input type=\"text\" name=\"custom_prefix-0-choice\" value=\"Calexico\">'\n        \"</li>\"\n        '<li>Votes: <input type=\"number\" name=\"custom_prefix-0-votes\" value=\"100\"></li>'\n        '<li>Order: <input type=\"number\" name=\"custom_prefix-0-ORDER\" value=\"1\"></li>'\n        '<li>Delete: <input type=\"checkbox\" name=\"custom_prefix-0-DELETE\"></li>'\n        '<li>Choice: <input type=\"text\" name=\"custom_prefix-1-choice\" value=\"Fergie\">'\n        \"</li>\"\n        '<li>Votes: <input type=\"number\" name=\"custom_prefix-1-votes\" value=\"900\"></li>'\n        '<li>Order: <input type=\"number\" name=\"custom_prefix-1-ORDER\" value=\"2\"></li>'\n        '<li>Delete: <input type=\"checkbox\" name=\"custom_prefix-1-DELETE\"></li>'\n        '<li>Choice: <input type=\"text\" name=\"custom_prefix-2-choice\" '\n        'value=\"The Decemberists\"></li>'\n        '<li>Votes: <input type=\"number\" name=\"custom_prefix-2-votes\" value=\"500\"></li>'\n        '<li>Order: <input type=\"number\" name=\"custom_prefix-2-ORDER\" value=\"3\"></li>'"], "sample_60": ["def test_register_serializer_usage(self):\n    BaseSerializer.register(complex, ComplexSerializer)\n    self.assertSerializedResultEqual(\n        complex(1, 2),\n        (\"complex((1+2j))\", set()),\n    )\n    BaseSerializer.unregister(complex)\n"], "sample_102": ["def test_iforest_sparse_csc_csr_equivalence():\n    \"\"\"Check that IsolationForest gives the same results for csc and csr sparse matrices.\"\"\"\n    rng = check_random_state(0)\n    X_train, X_test, y_train, y_test = train_test_split(boston.data[:50],\n                                                        boston.target[:50],\n                                                        random_state=rng)\n    X_train_csc = csc_matrix(X_train)\n    X_test_csc = csc_matrix(X_test)\n    X_train_csr = csr_matrix(X_train)\n    X_test_csr = csr_matrix(X_test)\n\n    clf_csc = IsolationForest(random_state=rng).fit(X_train_csc)\n    clf_csr = IsolationForest(random_state=rng).fit(X_train_csr)\n\n    y_pred_csc = clf_csc.predict(X_test_csc)\n    y_pred_csr = clf_csr.predict(X_test_csr)\n\n    assert_array_equal(y_pred_csc, y_pred_csr)\n"], "sample_109": ["def test_leave_p_out_empty_trainset():\n    cv = LeavePOut(p=2)\n    X, y = [[1]], [0]  # 1 sample\n    with pytest.raises(\n            ValueError,\n            match='Cannot perform LeavePOut with n_samples=1 and p=2'):\n        next(cv.split(X, y))\n"], "sample_110": ["def test_affinity_propagation_sparse_input():\n    # Test AffinityPropagation with sparse input\n    X_sparse = csr_matrix(X)\n    af = AffinityPropagation(affinity=\"euclidean\")\n    labels_sparse = af.fit_predict(X_sparse)\n    labels_dense = af.fit_predict(X)\n    assert_array_equal(labels_sparse, labels_dense)\n"], "sample_39": ["def test_include_app_name_namespace_override(self):\n    self.assertEqual(\n        include(self.app_urls, namespace='override'),\n        (self.app_urls, 'inc-app', 'override')\n    )\n"]}, "raw_scored_generations": {"sample_0": [true], "sample_3": [false], "sample_1": [false], "sample_2": [false], "sample_6": [true], "sample_4": [true], "sample_5": [false], "sample_7": [true], "sample_9": [true], "sample_8": [false], "sample_10": [true], "sample_11": [true], "sample_13": [true], "sample_12": [true], "sample_14": [true], "sample_15": [true], "sample_16": [true], "sample_17": [false], "sample_18": [true], "sample_19": [true], "sample_21": [false], "sample_20": [true], "sample_23": [true], "sample_22": [true], "sample_24": [true], "sample_25": [true], "sample_28": [false], "sample_26": [false], "sample_27": [true], "sample_29": [true], "sample_31": [true], "sample_30": [true], "sample_32": [true], "sample_33": [false], "sample_34": [true], "sample_35": [true], "sample_36": [true], "sample_37": [true], "sample_39": [true], "sample_38": [true], "sample_40": [true], "sample_42": [true], "sample_41": [false], "sample_43": [true], "sample_45": [false], "sample_44": [false], "sample_46": [true], "sample_48": [true], "sample_47": [false], "sample_50": [true], "sample_49": [true], "sample_51": [true], "sample_52": [true], "sample_53": [true], "sample_55": [true], "sample_54": [true], "sample_56": [false], "sample_58": [true], "sample_57": [true], "sample_60": [true], "sample_59": [false], "sample_61": [false], "sample_63": [true], "sample_62": [true], "sample_64": [true], "sample_66": [true], "sample_65": [true], "sample_68": [true], "sample_67": [true], "sample_69": [false], "sample_70": [true], "sample_71": [true], "sample_72": [false], "sample_73": [false], "sample_74": [false], "sample_75": [false], "sample_76": [false], "sample_77": [false], "sample_78": [true], "sample_79": [false], "sample_80": [false], "sample_82": [true], "sample_81": [false], "sample_83": [false], "sample_84": [false], "sample_85": [false], "sample_86": [false], "sample_87": [false], "sample_88": [false], "sample_89": [false], "sample_90": [false], "sample_91": [false], "sample_92": [false], "sample_93": [false], "sample_95": [false], "sample_94": [false], "sample_96": [false], "sample_97": [true], "sample_98": [false], "sample_99": [false], "sample_100": [true], "sample_101": [true], "sample_102": [false], "sample_103": [false], "sample_104": [true], "sample_105": [false], "sample_107": [false], "sample_106": [false], "sample_108": [false], "sample_109": [false], "sample_110": [true], "sample_111": [false], "sample_112": [true], "sample_113": [false], "sample_114": [false], "sample_115": [true], "sample_116": [false], "sample_117": [false], "sample_118": [false], "sample_119": [false], "sample_120": [false], "sample_121": [true], "sample_122": [true], "sample_123": [true], "sample_124": [false], "sample_125": [true], "sample_126": [true], "sample_127": [false], "sample_128": [true], "sample_129": [false], "sample_130": [false], "sample_131": [false], "sample_132": [true], "sample_133": [false], "sample_134": [true], "sample_135": [false], "sample_136": [false], "sample_137": [false], "sample_138": [false], "sample_139": [true], "sample_140": [true], "sample_142": [false], "sample_141": [false], "sample_143": [false], "sample_144": [true], "sample_145": [false], "sample_146": [true], "sample_147": [true], "sample_148": [true], "sample_149": [false], "sample_150": [false], "sample_151": [true], "sample_152": [true], "sample_153": [false], "sample_154": [true], "sample_155": [true], "sample_156": [false], "sample_157": [false], "sample_158": [true], "sample_159": [false]}}