{"raw_generations": {"sample_47": ["\nfrom django.db.migrations.executor import MigrationExecutor\nfrom django.db import migrations, router\nfrom django.apps import apps\nfrom django.test import TestCase\nfrom unittest.mock import patch, MagicMock\n\nclass TestMigrationExecutor(TestCase):\n\n    @patch('django.db.migrations.executor.MigrationLoader')\n    @patch('django.db.migrations.executor.MigrationRecorder')\n    def test_migration_plan(self, mock_recorder, mock_loader):\n        mock_loader.return_value = MagicMock(spec=MigrationLoader)\n        mock_loader.return_value.graph = MagicMock(spec=MigrationLoader.graph)\n        mock_loader.return_value.graph.root_nodes.return_value = [('app1', None)]\n        mock_loader.return_value.applied_migrations = {'m1': 'm1'}\n        executor = MigrationExecutor(connection=MagicMock(), progress_callback=lambda *args: None)\n        plan = executor.migration_plan(['app1'], clean_start=False)\n        self.assertEqual(len(plan), 1)\n        self.assertEqual(plan[0][0], mock_loader.return_value.graph.nodes['m1'])\n        self.assertTrue(plan[0][1])\n\n    @patch('django.db.migrations.executor.MigrationLoader')\n    @patch('django.db.migrations.executor.MigrationRecorder')\n    def test_migration_plan_clean_start(self, mock_recorder, mock_loader):\n        mock_loader.return_value = MagicMock(spec=MigrationLoader)\n        mock_loader.return_value.graph = MagicMock(spec=MigrationLoader.graph)\n        mock_loader.return_value.graph.root_nodes.return_value = [('app1', None)]\n        executor = MigrationExecutor(connection=MagicMock(), progress_callback=lambda *args: None)\n        plan = executor.migration_plan(['app1'], clean_start=True)\n        self.assertEqual(len(plan), 1)\n        self.assertEqual(plan[0][0], mock_loader.return_value.graph.nodes['m1'])\n        self.assertTrue(plan[0][1])\n\n    @patch('django.db.migrations.executor.MigrationLoader')\n    @patch('django.db.migrations.executor.MigrationRecorder')\n    def test_migration_plan_unmigrate_everything(self, mock_recorder, mock_loader):\n        mock_loader.return_value = MagicMock(spec=MigrationLoader)\n        mock_loader.return_value.graph = MagicMock(spec=MigrationLoader.graph)\n        mock_loader.return_value.graph.root_nodes.return_value = [('app1', None)]\n        executor = MigrationExecutor(connection=MagicMock(), progress_callback=lambda *args: None)\n        plan = executor.migration_plan(['app1'], clean_start=False)\n        self.assertEqual(len(plan), 1)\n        self.assertEqual(plan[0][0], mock_loader.return_value.graph.nodes['m1'])\n        self.assertTrue(plan[0][1])\n\n    @patch('django.db.migrations.executor.MigrationLoader')\n    @patch('django.db.migrations.executor.MigrationRecorder')\n    def test_migrate_forwards(self, mock_recorder, mock_loader):\n        mock_loader.return_value = MagicMock(spec=MigrationLoader)\n        mock_loader.return_value.graph = MagicMock(spec=MigrationLoader.graph)\n        mock_loader.return_value.graph.root_nodes.return_value = [('app1', None)]\n        mock_loader.return_value.applied_migrations = {}\n        executor = MigrationExecutor(connection=MagicMock(), progress_callback=lambda *args: None)\n        state = executor.migrate(['app1'], clean_start=False)\n        self.assertEqual(state.apps, mock_loader.return_value.unmigrated_apps)\n\n    @patch('django.db.migrations.executor.MigrationLoader')\n    @patch('django.db.migrations.executor.MigrationRecorder')\n    def test_migrate_forwards_with_progress_callback(self, mock_recorder, mock_loader):\n        mock_loader.return_value = MagicMock(spec=MigrationLoader)\n        mock_loader.return_value.graph = MagicMock(spec=MigrationLoader.graph)\n        mock_loader.return_value.graph.root_nodes.return_value = [('app1', None)]\n        mock_loader.return_value.applied_migrations = {}\n        executor = MigrationExecutor(connection=MagicMock(), progress_callback=lambda *args: None)\n        with patch('django.db.migrations.executor.print') as mock_print:\n            executor.migrate(['app1'], clean_start=False)\n            mock_print.assert_any_call(\"apply_start\")\n            mock_print.assert_any_call(\"apply_success\")\n\n    @patch('django.db.migrations.executor.MigrationLoader')\n    @patch('django.db.migrations.executor.MigrationRecorder')\n    def test_migrate_backwards(self, mock_recorder, mock_loader):\n        mock_loader.return_value = MagicMock(spec=MigrationLoader)\n        mock_loader.return_value.graph = MagicMock(spec=MigrationLoader.graph)\n        mock_loader.return_value.graph.root_nodes.return_value = [('app1', None)]\n        mock_loader.return_value.applied_migrations = {'m1': 'm1'}\n        executor = MigrationExecutor(connection=MagicMock(), progress_callback=lambda *args: None)\n        state = executor.migrate(['app1'], backwards=True)\n        self.assertEqual(state.apps, mock_loader.return_value.unmigrated_apps)\n\n    @patch('django.db.migrations.executor.MigrationLoader')\n    @patch('django.db.migrations.executor.MigrationRecorder')\n    def test_migrate_all_forwards(self, mock_recorder, mock_loader):\n        mock_loader.return_value = MagicMock(spec=MigrationLoader)\n        mock_loader.return_value.graph = MagicMock(spec=MigrationLoader.graph)\n        mock_loader.return_value.graph.root_nodes.return_value = [('app1', None)]\n        mock_loader.return_value.applied_migrations = {}\n        executor = MigrationExecutor(connection=MagicMock(), progress_callback=lambda *args: None)\n        state = executor.migrate(['app1'], clean_start=True)\n        self.assertEqual(state.apps, mock_loader.return_value.unmigrated_apps)\n\n    @patch('django.db.migrations.executor.MigrationLoader')\n    @patch('django.db.migrations.executor.MigrationRecorder')\n    def test_migrate_all_backwards(self, mock_recorder, mock_loader):\n        mock_loader.return_value = MagicMock(spec=MigrationLoader)\n        mock_loader.return_value.graph = MagicMock(spec=MigrationLoader.graph)\n        mock_loader.return_value.graph.root_nodes.return_value = [('app1', None)]\n        mock_loader.return_value.applied_migrations = {'m1': 'm1'}\n        executor = MigrationExecutor(connection=MagicMock(), progress_callback=lambda *args: None)\n        state = executor.migrate(['app1'], backwards=True)\n        self.assertEqual(state.apps, mock_loader.return_value.unmigrated_apps)\n\n\n\n"], "sample_12": ["\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db import migrations\nfrom django.db.models import Model, CharField, IntegerField\nfrom django.test import TestCase\nfrom unittest.mock import patch, MagicMock\nfrom django.apps import apps\nfrom django.core.management.commands.migrate import Command as MigrateCommand\nfrom django.conf import settings\n\nclass TestMigrationAutodetector(TestCase):\n\n    def setUp(self):\n        self.autodetector = MigrationAutodetector(\n            settings.INSTALLED_APPS,\n            apps=apps.AppRegistry.ready(),\n            questioner=MagicMock(),\n        )\n\n    def test_no_changes(self):\n        self.autodetector.detect_migrations()\n        self.assertEqual(len(self.autodetector.changes), 0)\n\n    def test_new_model(self):\n        class MyModel(Model):\n            name = CharField(max_length=255)\n\n        with patch('django.db.migrations.autodetector.MigrationAutodetector.detect_model_changes') as mock_detect:\n            mock_detect.return_value = [\n                (\n                    \"myapp\",\n                    \"MyModel\",\n                    {\"name\": \"CharField(max_length=255)\"},\n                )\n            ]\n            self.autodetector.detect_migrations()\n            mock_detect.assert_called_once()\n            self.assertEqual(len(self.autodetector.changes), 1)\n            self.assertIn(\"myapp\", self.autodetector.changes)\n\n    def test_changed_model(self):\n        class MyModel(Model):\n            name = CharField(max_length=255)\n            age = IntegerField()\n\n        with patch('django.db.migrations.autodetector.MigrationAutodetector.detect_model_changes') as mock_detect:\n            mock_detect.return_value = [\n                (\n                    \"myapp\",\n                    \"MyModel\",\n                    {\"name\": \"CharField(max_length=100)\", \"age\": \"IntegerField(null=True)\"},\n                )\n            ]\n            self.autodetector.detect_migrations()\n            mock_detect.assert_called_once()\n            self.assertEqual(len(self.autodetector.changes), 1)\n            self.assertIn(\"myapp\", self.autodetector.changes)\n\n    def test_removed_model(self):\n        class MyModel(Model):\n            name = CharField(max_length=255)\n\n        with patch('django.db.migrations.autodetector.MigrationAutodetector.detect_model_changes') as mock_detect:\n            mock_detect.return_value = [\n                (\n                    \"myapp\",\n                    \"MyModel\",\n                    {\"name\": \"CharField(max_length=255)\"},\n                )\n            ]\n            self.autodetector.detect_migrations()\n            mock_detect.assert_called_once()\n            self.assertEqual(len(self.autodetector.changes), 1)\n            self.assertIn(\"myapp\", self.autodetector.changes)\n\n    def test_added_field(self):\n        class MyModel(Model):\n            name = CharField(max_length=255)\n\n        with patch('django.db.migrations.autodetector.MigrationAutodetector.detect_model_changes') as mock_detect:\n            mock_detect.return_value = [\n                (\n                    \"myapp\",\n                    \"MyModel\",\n                    {\"name\": \"CharField(max_length=255)\", \"new_field\": \"IntegerField()\"},\n                )\n            ]\n            self.autodetector.detect_migrations()\n            mock_detect.assert_called_once()\n            self.assertEqual(len(self.autodetector.changes), 1)\n            self.assertIn(\"myapp\", self.autodetector.changes)\n\n    def test_removed_field(self):\n        class MyModel(Model):\n            name = CharField(max_length=255)\n            age = IntegerField()\n\n        with patch('django.db.migrations.autodetector.MigrationAutodetector.detect_model_changes') as mock_detect:\n            mock_detect.return_value = [\n                (\n                    \"myapp\",\n                    \"MyModel\",\n                    {\"name\": \"CharField(max_length=255)\", \"age\": None},\n                )\n            ]\n            self.autodetector.detect_migrations()\n            mock_detect.assert_called_once()\n            self.assertEqual(len(self.autodetector.changes), 1)\n            self.assertIn(\"myapp\", self.autodetector.changes)\n\n    def test_altered_field(self):\n        class MyModel(Model):\n            name = CharField(max_length=255)\n            age = IntegerField()\n\n        with patch('django.db.migrations.autodetector.MigrationAutodetector.detect_model_changes') as mock_detect:\n            mock_detect.return_value = [\n                (\n                    \"myapp\",\n                    \"MyModel\",\n                    {\"name\": \"CharField(max_length=100)\", \"age\": \"IntegerField(null=True)\"},\n                )\n            ]\n            self.autodetector.detect_migrations()\n            mock_detect.assert_called_once()\n            self.assertEqual(len(self.autodetector.changes), 1)\n            self.assertIn(\"myapp\", self.autodetector.changes)\n\n    def test_rename_model(self):\n        class MyModel(Model):\n            name = CharField(max_length=255)\n\n        with patch('django.db.migrations.autodetector.MigrationAutodetector.detect_model_changes') as mock_detect:\n            mock_detect.return_value = [\n                (\n                    \"myapp\",\n                    \"MyModel\",\n                    {\"name\": \"CharField(max_length=255)\"},\n                )\n            ]\n            self.autodetector.detect_migrations()\n            mock_detect.assert_called_once()\n            self.assertEqual(len(self.autodetector.changes), 1)\n            self.assertIn(\"myapp\", self.autodetector.changes)\n\n    def test_rename_field(self):\n        class MyModel(Model):\n            name = CharField(max_length=255)\n\n        with patch('django.db.migrations.autodetector.MigrationAutodetector.detect_model_changes') as mock_detect:\n            mock_detect.return_value = [\n                (\n                    \"myapp\",\n                    \"MyModel\",\n                    {\"name\": \"CharField(max_length=255)\", \"new_field\": \"CharField(max_length=100)\"},\n                )\n            ]\n            self.autodetector.detect_migrations()\n            mock_detect.assert_called_once()\n            self.assertEqual(len(self.autodetector.changes), 1)\n            self.assertIn(\"myapp\", self.autodetector.changes)\n\n\n\n"], "sample_90": ["\nimport pytest\nfrom _pytest.mark import pytest_configure, get_empty_parameterset_mark\nfrom _pytest.mark import Mark\nfrom _pytest.nodes import Item\nfrom src._pytest.mark.evaluate import MarkEvaluator\n\nclass TestMarkEvaluator:\n    def test_mark_evaluator_init(self):\n        item = Item(name=\"test_function\")\n        mark_evaluator = MarkEvaluator(item, name=\"my_mark\")\n        assert mark_evaluator.item is item\n        assert mark_evaluator._marks is None\n        assert mark_evaluator._mark is None\n        assert mark_evaluator._mark_name == \"my_mark\"\n\n    def test_mark_evaluator_bool(self):\n        item = Item(name=\"test_function\")\n        mark_evaluator = MarkEvaluator(item, name=\"my_mark\")\n        assert not bool(mark_evaluator)\n\n        mark = Mark(name=\"my_mark\", kwargs={\"condition\": True})\n        item.add_marker(mark)\n        assert bool(mark_evaluator)\n\n    def test_mark_evaluator_wasvalid(self):\n        item = Item(name=\"test_function\")\n        mark_evaluator = MarkEvaluator(item, name=\"my_mark\")\n        assert mark_evaluator.wasvalid()\n\n        mark_evaluator.exc = (None, ValueError(\"test\"), None)\n        assert not mark_evaluator.wasvalid()\n\n    def test_mark_evaluator_invalidraise(self):\n        item = Item(name=\"test_function\")\n        mark_evaluator = MarkEvaluator(item, name=\"my_mark\")\n        assert mark_evaluator.invalidraise(ValueError(\"test\")) is None\n\n        mark = Mark(name=\"my_mark\", kwargs={\"raises\": ValueError})\n        item.add_marker(mark)\n        assert mark_evaluator.invalidraise(ValueError(\"test\")) is False\n\n        assert mark_evaluator.invalidraise(TypeError(\"test\")) is True\n\n    def test_mark_evaluator_istrue(self):\n        item = Item(name=\"test_function\")\n        mark_evaluator = MarkEvaluator(item, name=\"my_mark\")\n\n        with pytest.raises(TEST_OUTCOME):\n            mark_evaluator._istrue()\n\n        mark = Mark(name=\"my_mark\", kwargs={\"condition\": True})\n        item.add_marker(mark)\n        assert mark_evaluator._istrue() is True\n\n        mark = Mark(name=\"my_mark\", kwargs={\"condition\": False})\n        item.add_marker(mark)\n        assert mark_evaluator._istrue() is False\n\n    def test_mark_evaluator_get(self):\n        item = Item(name=\"test_function\")\n        mark_evaluator = MarkEvaluator(item, name=\"my_mark\")\n        assert mark_evaluator.get(\"reason\") is None\n\n        mark = Mark(name=\"my_mark\", kwargs={\"reason\": \"test_reason\"})\n        item.add_marker(mark)\n        assert mark_evaluator.get(\"reason\") == \"test_reason\"\n\n    def test_mark_evaluator_getexplanation(self):\n        item = Item(name=\"test_function\")\n        mark_evaluator = MarkEvaluator(item, name=\"my_mark\")\n        assert mark_evaluator.getexplanation() == \"\"\n\n        mark = Mark(name=\"my_mark\", kwargs={\"reason\": \"test_reason\"})\n        item.add_marker(mark)\n        assert mark_evaluator.getexplanation() == \"test_reason\"\n\n\n\n"], "sample_34": ["\nimport unittest\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\nfrom django.core.checks import Error, Warning\nfrom django.core.management.commands.migrate import Command\nfrom django.apps import apps\nfrom django.db import connection, router\nfrom django.db.models.base import (\n    ModelBase,\n    model_unpickle,\n    make_foreign_order_accessors,\n    _check_model_name_db_lookup_clashes,\n    _check_constraints,\n    _check_indexes,\n    _check_local_fields,\n    _check_m2m_through_same_relationship,\n    _check_id_field,\n    _check_field_name_clashes,\n    _check_property_name_related_field_accessor_clashes,\n    _check_single_primary_key,\n    _check_unique_together,\n    _check_ordering,\n    _check_long_column_names,\n)\n\nclass ModelBaseTests(TestCase):\n    def test_model_unpickle(self):\n        class MyModel(models.Model):\n            pass\n\n        # Test with model name as tuple\n        unpickled_model = model_unpickle(('my_app.MyModel',))\n        self.assertEqual(unpickled_model, MyModel)\n\n        # Test with model instance\n        unpickled_model = model_unpickle(MyModel)\n        self.assertEqual(unpickled_model, MyModel)\n\n    def test_make_foreign_order_accessors(self):\n        class ParentModel(models.Model):\n            pass\n\n        class ChildModel(models.Model):\n            parent = models.ForeignKey(ParentModel, on_delete=models.CASCADE)\n\n        make_foreign_order_accessors(ParentModel, ChildModel)\n        self.assertTrue(hasattr(ChildModel, 'get_parentmodel_order'))\n        self.assertTrue(hasattr(ChildModel, 'set_parentmodel_order'))\n\n    def test__check_model_name_db_lookup_clashes(self):\n        errors = _check_model_name_db_lookup_clashes([])\n        self.assertEqual(len(errors), 0)\n\n    def test__check_constraints(self):\n        errors = _check_constraints([])\n        self.assertEqual(len(errors), 0)\n\n    def test__check_indexes(self):\n        errors = _check_indexes([])\n        self.assertEqual(len(errors), 0)\n\n    def test__check_local_fields(self):\n        errors = _check_local_fields([], 'test')\n        self.assertEqual(len(errors), 0)\n\n    def test__check_m2m_through_same_relationship(self):\n        errors = _check_m2m_through_same_relationship(ModelBase)\n        self.assertEqual(len(errors), 0)\n\n    def test__check_id_field(self):\n        errors = _check_id_field(ModelBase)\n        self.assertEqual(len(errors), 0)\n\n    def test__check_field_name_clashes(self):\n        errors = _check_field_name_clashes(ModelBase)\n        self.assertEqual(len(errors), 0)\n\n    def test__check_property_name_related_field_accessor_clashes(self):\n        errors = _check_property_name_related_field_accessor_clashes(ModelBase)\n        self.assertEqual(len(errors), 0)\n\n    def test__check_single_primary_key(self):\n        errors = _check_single_primary_key(ModelBase)\n        self.assertEqual(len(errors), 0)\n\n    def test__check_unique_together(self):\n        errors = _check_unique_together(ModelBase)\n        self.assertEqual(len(errors), 0)\n\n    def test__check_ordering(self):\n        errors = _check_ordering(ModelBase)\n        self.assertEqual(len(errors), 0)\n\n    def test__check_long_column_names(self):\n        errors = _check_long_column_names(ModelBase, [])\n        self.assertEqual(len(errors), 0)\n\n\n\n"], "sample_86": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom _pytest.junitxml import LogXML\nfrom _pytest.junitxml import mangle_test_address\nfrom _pytest.junitxml import bin_xml_escape\nfrom _pytest import junitxml\nfrom _pytest.junitxml import _NodeReporter\nfrom _pytest.junitxml import _warn_incompatibility_with_xunit2\nfrom _pytest.config import Config\n\nclass TestJunitXML(unittest.TestCase):\n\n    def test_mangle_test_address(self):\n        self.assertEqual(mangle_test_address(\"test.module.Test\"), [\"test\", \"module\", \"Test\"])\n        self.assertEqual(mangle_test_address(\"test.module.Test[1]\"), [\"test\", \"module\", \"Test[1]\"])\n        self.assertEqual(mangle_test_address(\"test.module.Test::[1]\"), [\"test\", \"module\", \"Test\", \"[1]\"])\n        self.assertEqual(mangle_test_address(\"test.module.Test::[1]\"), [\"test\", \"module\", \"Test\", \"[1]\"])\n\n    def test_bin_xml_escape(self):\n        self.assertEqual(bin_xml_escape(\"test\"), \"test\")\n        self.assertEqual(bin_xml_escape(\"\\t\"), \"#x9\")\n        self.assertEqual(bin_xml_escape(\"\\n\"), \"#xA\")\n        self.assertEqual(bin_xml_escape(\"\\r\"), \"#xD\")\n        self.assertEqual(bin_xml_escape(\" \"), \" \")\n        self.assertEqual(bin_xml_escape(\"\\x00\"), \"#x0\")\n        self.assertEqual(bin_xml_escape(\"\\x1F\"), \"#x1F\")\n        self.assertEqual(bin_xml_escape(\"\\xFF\"), \"#xFF\")\n\n    def test_LogXML_init(self):\n        logxml = LogXML(\n            logfile=\"test.xml\",\n            prefix=\"prefix\",\n            suite_name=\"test_suite\",\n            logging=\"system-out\",\n            report_duration=\"total\",\n            family=\"xunit1\",\n            log_passing_tests=True,\n        )\n        self.assertEqual(logxml.logfile, \"test.xml\")\n        self.assertEqual(logxml.prefix, \"prefix\")\n        self.assertEqual(logxml.suite_name, \"test_suite\")\n        self.assertEqual(logxml.logging, \"system-out\")\n        self.assertEqual(logxml.report_duration, \"total\")\n        self.assertEqual(logxml.family, \"xunit1\")\n        self.assertEqual(logxml.log_passing_tests, True)\n\n    def test_LogXML_add_stats(self):\n        logxml = LogXML(\n            logfile=\"test.xml\",\n            prefix=\"prefix\",\n            suite_name=\"test_suite\",\n            logging=\"system-out\",\n            report_duration=\"total\",\n            family=\"xunit1\",\n            log_passing_tests=True,\n        )\n        logxml.add_stats(\"passed\")\n        self.assertEqual(logxml.stats[\"passed\"], 1)\n\n    def test_LogXML_node_reporter(self):\n        logxml = LogXML(\n            logfile=\"test.xml\",\n            prefix=\"prefix\",\n            suite_name=\"test_suite\",\n            logging=\"system-out\",\n            report_duration=\"total\",\n            family=\"xunit1\",\n            log_passing_tests=True,\n        )\n        reporter = logxml.node_reporter(\"test\")\n        self.assertIsInstance(reporter, _NodeReporter)\n\n    def test_LogXML_pytest_runtest_logreport(self):\n        logxml = LogXML(\n            logfile=\"test.xml\",\n            prefix=\"prefix\",\n            suite_name=\"test_suite\",\n            logging=\"system-out\",\n            report_duration=\"total\",\n            family=\"xunit1\",\n            log_passing_tests=True,\n        )\n        report = MagicMock()\n        report.passed = True\n        report.when = \"call\"\n        logxml.pytest_runtest_logreport(report)\n        self.assertEqual(logxml.stats[\"passed\"], 1)\n\n    def test_LogXML_pytest_collectreport(self):\n        logxml = LogXML(\n            logfile=\"test.xml\",\n            prefix=\"prefix\",\n            suite_name=\"test_suite\",\n            logging=\"system-out\",\n            report_duration=\"total\",\n            family=\"xunit1\",\n            log_passing_tests=True,\n        )\n        report = MagicMock()\n        report.passed = False\n        logxml.pytest_collectreport(report)\n        self.assertEqual(logxml.stats[\"error\"], 1)\n\n    def test_LogXML_pytest_internalerror(self):\n        logxml = LogXML(\n            logfile=\"test.xml\",\n            prefix=\"prefix\",\n            suite_name=\"test_suite\",\n            logging=\"system-out\",\n            report_duration=\"total\",\n            family=\"xunit1\",\n            log_passing_tests=True,\n        )\n        excrepr = MagicMock()\n        logxml.pytest_internalerror(excrepr)\n        self.assertEqual(logxml.stats[\"error\"], 1)\n\n    def test_LogXML_pytest_sessionstart(self):\n        logxml = LogXML(\n            logfile=\"test.xml\",\n            prefix=\"prefix\",\n            suite_name=\"test_suite\",\n            logging=\"system-out\",\n            report_duration=\"total\",\n            family=\"xunit1\",\n            log_passing_tests=True,\n        )\n        logxml.pytest_sessionstart()\n        self.assertIsNotNone(logxml.suite_start_time)\n\n    def test_LogXML_pytest_sessionfinish(self):\n        logxml = LogXML(\n            logfile=\"test.xml\",\n            prefix=\"prefix\",\n            suite_name=\"test_suite\",\n            logging=\"system-out\",\n            report_duration=\"total\",\n            family=\"xunit1\",\n            log_passing_tests=True,\n        )\n        logxml.pytest_sessionfinish()\n        self.assertTrue(os.path.exists(\"test.xml\"))\n\n    def test_LogXML_pytest_terminal_summary(self):\n        logxml = LogXML(\n            logfile=\"test.xml\",\n            prefix=\"prefix\",\n            suite_name=\"test_suite\",\n            logging=\"system-out\",\n            report_duration=\"total\",\n            family=\"xunit1\",\n            log_passing_tests=True,\n        )\n        terminalreporter = MagicMock()\n        logxml.pytest_terminal_summary(terminalreporter)\n        terminalreporter.write_sep.assert_called_once()\n\n    def test_record_property(self):\n        with patch(\"pytest.config\", new_callable=Config):\n            config = Config()\n            config.node_id = \"test\"\n            with patch(\"sys.stdout\", new_callable=MagicMock()) as mock_stdout:\n                record_property(\"test_key\", \"test_value\")\n                self.assertEqual(config.node_properties, [(\"test_key\", \"test_value\")])\n                mock_stdout.write.assert_not_called()\n\n    def test_record_xml_attribute(self):\n        with patch(\"pytest.config\", new_callable=Config):\n            config = Config()\n            config.node_id = \"test\"\n            with patch(\"sys.stdout\", new_callable=MagicMock()) as mock_stdout:\n                record_xml_attribute(\"test_key\", \"test_value\")\n                self.assertEqual(config.node_properties, [(\"test_key\", \"test_value\")])\n                mock_stdout.write.assert_not_called()\n\n    def test_record_testsuite_property(self):\n        with patch(\"pytest.config\", new_callable=Config):\n            config = Config()\n            config.node_id = \"test\"\n            with patch(\"sys.stdout\", new_callable=MagicMock()) as mock_stdout:\n                record_testsuite_property(\"test_key\", \"test_value\")\n                self.assertEqual(config.node_properties, [(\"test_key\", \"test_value\")])\n                mock_stdout.write.assert_not_called()\n\n    def test_pytest_addoption(self):\n        from _pytest.junitxml import pytest_addoption\n        with patch(\"sys.stdout\", new_callable=MagicMock()) as mock_stdout:\n            pytest_addoption(MagicMock())\n            mock_stdout.write.assert_not_called()\n\n    def test_pytest_configure(self):\n        from _pytest.junitxml import pytest_configure\n        with patch(\"sys.stdout\", new_callable=MagicMock()) as mock_stdout:\n            pytest_configure(MagicMock())\n            mock_stdout.write.assert_not_called()\n\n    def test_pytest_unconfigure(self):\n        from _pytest.junitxml import pytest_unconfigure\n        with patch(\"sys.stdout\", new_callable=MagicMock()) as mock_stdout:\n            pytest_unconfigure(MagicMock())\n            mock_stdout.write.assert_not_called()\n\n\n\n"], "sample_120": ["\nfrom sympy import KroneckerDelta, diff, Piecewise, And\nfrom sympy import Sum\nfrom sympy.core import S, symbols, Add, Mul\nfrom sympy.functions import transpose, sin, cos, sqrt\nfrom sympy.simplify import simplify\nfrom sympy.matrices import (Identity, ImmutableMatrix, Inverse, MatAdd, MatMul, MatPow, Matrix, MatrixExpr, MatrixSymbol, ShapeError, ZeroMatrix, SparseMatrix, Transpose, Adjoint)\nfrom sympy.matrices.expressions.matexpr import MatrixElement\nfrom sympy.utilities.pytest import raises\n\ndef test_matrix_symbol():\n    from sympy.matrices import MatrixSymbol\n    A = MatrixSymbol('A', 3, 4)\n    assert A.name == 'A'\n    assert A.shape == (3, 4)\n    assert isinstance(A, MatrixExpr)\n    assert isinstance(A, MatrixSymbol)\n    assert A.is_commutative is False\n    assert A.is_Matrix is True\n    assert A.is_MatrixExpr is True\n\ndef test_matrix_symbol_subs():\n    from sympy.matrices import MatrixSymbol\n    A = MatrixSymbol('A', 3, 4)\n    B = MatrixSymbol('B', 4, 3)\n    assert (A.subs(A, B)).name == 'B'\n    assert (A.subs(A, B)).shape == (3, 4)\n\ndef test_identity():\n    from sympy.matrices import Identity\n    I = Identity(3)\n    assert I.shape == (3, 3)\n    assert I.is_Identity is True\n    assert I.is_ZeroMatrix is False\n    assert I * Identity(3) == I\n    assert I * 2 == 2 * I\n\ndef test_zero_matrix():\n    from sympy.matrices import ZeroMatrix\n    Z = ZeroMatrix(3, 4)\n    assert Z.shape == (3, 4)\n    assert Z.is_ZeroMatrix is True\n    assert Z.is_Identity is False\n    assert Z * 2 == ZeroMatrix(3, 4)\n    assert 2 * Z == ZeroMatrix(3, 4)\n\ndef test_matrix_element():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 3, 3)\n    e = A[1, 2]\n    assert isinstance(e, MatrixElement)\n    assert e.parent is A\n    assert e.i == 1\n    assert e.j == 2\n\ndef test_matrix_element_derivative():\n    from sympy import MatrixSymbol, MatrixElement\n    A = MatrixSymbol('A', 3, 3)\n    e = A[1, 2]\n    v = MatrixSymbol('v', 3, 3)\n    d = e.diff(v)\n    assert isinstance(d, KroneckerDelta)\n    assert d.args == (1, 2)\n\ndef test_matrix_expr_add():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = A + B\n    assert isinstance(C, MatAdd)\n    assert C.args == (A, B)\n\ndef test_matrix_expr_mul():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = A * B\n    assert isinstance(C, MatMul)\n    assert C.args == (A, B)\n\ndef test_matrix_expr_pow():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 2)\n    C = A**2\n    assert isinstance(C, MatPow)\n    assert C.args == (A, 2)\n\ndef test_matrix_expr_inv():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 2)\n    C = A**(-1)\n    assert isinstance(C, Inverse)\n    assert C.args == (A,)\n\ndef test_matrix_expr_transpose():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 2)\n    C = A.T\n    assert isinstance(C, Transpose)\n    assert C.args == (A,)\n\ndef test_matrix_expr_conjugate():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 2)\n    C = A.conjugate()\n    assert isinstance(C, Adjoint)\n    assert C.args == (A,)\n\ndef test_matrix_expr_simplify():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = A + B\n    D = simplify(C)\n    assert D == C\n\ndef test_matrix_expr_as_explicit():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 2)\n    B = A.as_explicit()\n    assert isinstance(B, ImmutableMatrix)\n\ndef test_matrix_expr_as_mutable():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 2)\n    B = A.as_mutable()\n    assert isinstance(B, ImmutableMatrix)\n\ndef test_matrix_expr_equals():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    assert A.equals(B) is False\n\ndef test_matrix_expr_shape():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 3)\n    assert A.shape == (2, 3)\n\ndef test_matrix_expr_is_square():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 2)\n    assert A.is_square is True\n    B = MatrixSymbol('B', 2, 3)\n    assert B.is_square is False\n\ndef test_matrix_expr_valid_index():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 3)\n    assert A.valid_index(0, 0) is True\n    assert A.valid_index(1, 2) is True\n    assert A.valid_index(2, 3) is False\n\ndef test_matrix_expr_getitem():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 3)\n    assert A[0, 0] == A._entry(0, 0)\n    assert A[1, 2] == A._entry(1, 2)\n\ndef test_matrix_expr_array():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 3)\n    array = A.__array__()\n    assert isinstance(array, np.ndarray)\n\ndef test_matrix_expr_canonicalize():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 2)\n    assert A.canonicalize() == A\n\ndef test_matrix_expr_as_coeff_mmul():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol('A', 2, 2)\n    result = A.as_coeff_mmul()\n    assert result == (1, A)\n\n\n\n"], "sample_100": ["\nimport unittest\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.utils.testing import assert_array_equal\nfrom sklearn.utils.testing import assert_array_almost_equal\nfrom sklearn.utils.testing import assert_raises\n\nclass TestOneHotEncoder(unittest.TestCase):\n\n    def test_fit_transform_empty(self):\n        enc = OneHotEncoder(sparse=True)\n        X = []\n        enc.fit(X)\n        self.assertEqual(enc.categories_, [])\n        self.assertEqual(enc.transform(X).shape, (0, 0))\n\n    def test_fit_transform_single_feature(self):\n        enc = OneHotEncoder(sparse=True)\n        X = [['A'], ['B'], ['A']]\n        enc.fit(X)\n        self.assertEqual(enc.categories_, [['A', 'B']])\n        expected = sparse.csr_matrix([[1, 0], [0, 1], [1, 0]])\n        assert_array_equal(enc.transform(X), expected)\n\n    def test_fit_transform_multiple_features(self):\n        enc = OneHotEncoder(sparse=True)\n        X = [['A', 1], ['B', 2], ['A', 1]]\n        enc.fit(X)\n        self.assertEqual(enc.categories_, [['A', 'B'], [1, 2]])\n        expected = sparse.csr_matrix([[1, 0, 1], [0, 1, 0], [1, 0, 1]])\n        assert_array_equal(enc.transform(X), expected)\n\n    def test_fit_transform_with_n_values(self):\n        enc = OneHotEncoder(sparse=True, n_values=[2, 3])\n        X = [['A', 1], ['B', 2], ['A', 0]]\n        enc.fit(X)\n        self.assertEqual(enc.categories_, [['A', 'B'], [0, 1, 2]])\n        expected = sparse.csr_matrix([[1, 0, 1], [0, 1, 0], [1, 0, 0]])\n        assert_array_equal(enc.transform(X), expected)\n\n    def test_inverse_transform(self):\n        enc = OneHotEncoder(sparse=False)\n        X = [['A', 1], ['B', 2], ['A', 1]]\n        enc.fit(X)\n        X_encoded = enc.transform(X)\n        X_decoded = enc.inverse_transform(X_encoded)\n        assert_array_equal(X, X_decoded)\n\n    def test_inverse_transform_sparse(self):\n        enc = OneHotEncoder(sparse=True)\n        X = [['A', 1], ['B', 2], ['A', 1]]\n        enc.fit(X)\n        X_encoded = enc.transform(X)\n        X_decoded = enc.inverse_transform(X_encoded)\n        assert_array_equal(X, X_decoded)\n\n    def test_handle_unknown(self):\n        enc = OneHotEncoder(handle_unknown='ignore', sparse=True)\n        X = [['A', 1], ['B', 3]]\n        enc.fit(X)\n        X_new = [['A', 1], ['B', 4]]\n        X_encoded = enc.transform(X_new)\n        assert_array_equal(X_encoded.toarray(), [[1, 0, 1, 0], [0, 1, 0, 0]])\n\n    def test_handle_unknown_error(self):\n        enc = OneHotEncoder(handle_unknown='error', sparse=True)\n        X = [['A', 1], ['B', 3]]\n        enc.fit(X)\n        X_new = [['A', 1], ['B', 4]]\n        with assert_raises(ValueError):\n            enc.transform(X_new)\n\n    def test_categories_auto(self):\n        enc = OneHotEncoder(sparse=True, categories='auto')\n        X = [['A', 1], ['B', 2], ['A', 1], ['C', 3]]\n        enc.fit(X)\n        self.assertEqual(enc.categories_, [['A', 'B', 'C'], [1, 2, 3]])\n\n    def test_legacy_fit_transform(self):\n        enc = OneHotEncoder(n_values=[2, 3], sparse=True, legacy_mode=True)\n        X = [['A', 1], ['B', 2], ['A', 0]]\n        enc.fit_transform(X)\n        self.assertEqual(enc.categories_, [['A', 'B'], [0, 1, 2]])\n\n    def test_legacy_transform(self):\n        enc = OneHotEncoder(n_values=[2, 3], sparse=True, legacy_mode=True)\n        X = [['A', 1], ['B', 2], ['A', 0]]\n        enc.fit(X)\n        expected = sparse.csr_matrix([[1, 0, 1], [0, 1, 0], [1, 0, 0]])\n        assert_array_equal(enc.transform(X), expected)\n\n\n\nclass TestOrdinalEncoder(unittest.TestCase):\n\n    def test_fit_transform_single_feature(self):\n        enc = OrdinalEncoder()\n        X = [['A'], ['B'], ['A']]\n        enc.fit(X)\n        self.assertEqual(enc.categories_, [['A', 'B']])\n        expected = np.array([[0, 1, 0]])\n        assert_array_almost_equal(enc.transform(X), expected)\n\n    def test_fit_transform_multiple_features(self):\n        enc = OrdinalEncoder()\n        X = [['A', 1], ['B', 2], ['A', 1]]\n        enc.fit(X)\n        self.assertEqual(enc.categories_, [['A', 'B'], [1, 2]])\n        expected = np.array([[0, 1], [1, 0], [0, 1]])\n        assert_array_almost_equal(enc.transform(X), expected)\n\n    def test_inverse_transform(self):\n        enc = OrdinalEncoder()\n        X = [['A', 1], ['B', 2], ['A', 1]]\n        enc.fit(X)\n        X_encoded = enc.transform(X)\n        X_decoded = enc.inverse_transform(X_encoded)\n        assert_array_equal(X, X_decoded)\n\n    def test_fit_transform_with_categories(self):\n        enc = OrdinalEncoder(categories=[['A', 'B', 'C'], [1, 2, 3]])\n        X = [['A', 1], ['B', 2], ['C', 3]]\n        enc.fit(X)\n        expected = np.array([[0, 1], [1, 0], [2, 2]])\n        assert_array_almost_equal(enc.transform(X), expected)\n\n    def test_fit_transform_with_categories_different_length(self):\n        with self.assertRaises(ValueError):\n            OrdinalEncoder(categories=[['A', 'B', 'C'], [1, 2]])\n\n    def test_fit_transform_with_categories_mixed_types(self):\n        with self.assertRaises(ValueError):\n            OrdinalEncoder(categories=[['A', 'B', 'C'], [1, 2, 3.0]])\n\n\n\n"], "sample_146": ["\nfrom sympy.printing import sstr, sstrrepr, StrPrinter\nfrom sympy import symbols, Eq, Add, Pow, Integer, Rational, pi, oo, S, sqrt, Matrix, zeros, eye, sympify\nfrom sympy.core.symbol import Str\nfrom sympy.utilities.pytest import raises\n\ndef test_sstr_basic():\n    x, y = symbols('x y')\n    assert sstr(x) == 'x'\n    assert sstr(y) == 'y'\n    assert sstr(x + y) == 'Eq(x + y, 0)'\n    assert sstr(x**2) == 'x**2'\n    assert sstr(Integer(5)) == '5'\n    assert sstr(Rational(1, 2)) == '1/2'\n    assert sstr(pi) == 'pi'\n    assert sstr(oo) == 'oo'\n    assert sstr(S.One) == '1'\n    assert sstr(sqrt(x)) == 'sqrt(x)'\n\ndef test_sstr_matrices():\n    assert sstr(Matrix([[1, 2], [3, 4]])) == 'Matrix([[1, 2], [3, 4]])'\n    assert sstr(zeros(2, 2)) == 'zeros(2, 2)'\n    assert sstr(eye(3)) == 'eye(3)'\n\ndef test_sstr_settings():\n    assert sstr(x + y, abbrev=True) == 'Eq(x + y, 0)'\n    assert sstr(x + y, order='none') == 'x + y'\n\ndef test_sstrrepr_basic():\n    x, y = symbols('x y')\n    assert sstrrepr(x) == \"'x'\"\n    assert sstrrepr(y) == \"'y'\"\n    assert sstrrepr(x + y) == \"Eq(x + y, 0)\"\n    assert sstrrepr(x**2) == \"x**2\"\n    assert sstrrepr(Integer(5)) == \"5\"\n    assert sstrrepr(Rational(1, 2)) == \"1/2\"\n    assert sstrrepr(pi) == \"pi\"\n    assert sstrrepr(oo) == \"oo\"\n    assert sstrrepr(S.One) == \"1\"\n    assert sstrrepr(sqrt(x)) == \"sqrt(x)\"\n\ndef test_sstrrepr_matrices():\n    assert sstrrepr(Matrix([[1, 2], [3, 4]])) == \"Matrix([[1, 2], [3, 4]])\"\n    assert sstrrepr(zeros(2, 2)) == \"zeros(2, 2)\"\n    assert sstrrepr(eye(3)) == \"eye(3)\"\n\ndef test_sstrrepr_symbols():\n    assert sstrrepr(Str('hello')) == \"'hello'\"\n\ndef test_sstrrepr_errors():\n    with raises(TypeError):\n        sstrrepr(123)\n\n\n\n"], "sample_64": ["\nfrom django.contrib.admin.templatetags.admin_modify import (\n    prepopulated_fields_js,\n    submit_row,\n    change_form_object_tools_tag,\n    cell_count,\n)\nfrom django.template import Context\nfrom django.template.defaultfilters import stringfilter\nfrom django.test import TestCase\n\nclass TestAdminModifyTags(TestCase):\n\n    def test_prepopulated_fields_js(self):\n        context = Context({\"adminform\": {\"prepopulated_fields\": [{\"field\": {\"auto_id\": \"id_field1\", \"name\": \"field1\"}, \"dependencies\": [{\"name\": \"field2\"}]}]}})\n        result = prepopulated_fields_js(context)\n        self.assertIn(\"prepopulated_fields_json\", result)\n        self.assertEqual(json.loads(result[\"prepopulated_fields_json\"]), [{\"id\": \"#id_field1\", \"name\": \"field1\", \"dependency_ids\": [\"#id_field2\"], \"dependency_list\": [\"field2\"], \"maxLength\": 50, \"allowUnicode\": False}])\n\n    def test_submit_row(self):\n        context = Context({\n            \"add\": True,\n            \"change\": False,\n            \"is_popup\": False,\n            \"save_as\": False,\n            \"show_save\": True,\n            \"show_save_and_add_another\": True,\n            \"show_save_and_continue\": True,\n            \"has_add_permission\": True,\n            \"has_change_permission\": False,\n            \"has_delete_permission\": True,\n            \"has_view_permission\": True,\n            \"has_editable_inline_admin_formsets\": False\n        })\n        result = submit_row(context)\n        self.assertTrue(result[\"show_save\"])\n        self.assertTrue(result[\"show_save_and_add_another\"])\n        self.assertTrue(result[\"show_save_and_continue\"])\n        self.assertFalse(result[\"show_delete_link\"])\n        self.assertFalse(result[\"show_save_as_new\"])\n\n    def test_change_form_object_tools_tag(self):\n        context = Context({})\n        result = change_form_object_tools_tag(None, None)(context)\n        self.assertEqual(result, context)\n\n    def test_cell_count(self):\n        inline_admin_form = {}\n        self.assertEqual(cell_count(inline_admin_form), 1)\n\n        inline_admin_form = {\"fields\": [{\"field\": {\"is_hidden\": False}}]}\n        self.assertEqual(cell_count(inline_admin_form), 2)\n\n        inline_admin_form = {\"fields\": [{\"field\": {\"is_hidden\": True}}, {\"field\": {\"is_hidden\": False}}]}\n        self.assertEqual(cell_count(inline_admin_form), 2)\n\n        inline_admin_form = {\"fields\": [{\"field\": {\"is_hidden\": False}}, {\"field\": {\"is_hidden\": True}}]}\n        self.assertEqual(cell_count(inline_admin_form), 2)\n\n        inline_admin_form = {\"fields\": [{\"field\": {\"is_hidden\": False}}, {\"field\": {\"is_hidden\": False}}]}\n        self.assertEqual(cell_count(inline_admin_form), 3)\n\n"], "sample_76": ["\nimport unittest\nfrom seaborn._stats.regression import PolyFit\nimport pandas as pd\nimport numpy as np\n\nclass TestPolyFit(unittest.TestCase):\n\n    def test_polyfit_low_unique_x(self):\n        data = pd.DataFrame({\"x\": [1, 2, 3], \"y\": [4, 5, 6]})\n        polyfit = PolyFit(order=3)\n        result = polyfit._fit_predict(data)\n        self.assertEqual(len(result[\"x\"]), 0)\n        self.assertEqual(len(result[\"y\"]), 0)\n\n    def test_polyfit_normal_case(self):\n        data = pd.DataFrame({\"x\": np.linspace(0, 10, 10), \"y\": np.sin(np.linspace(0, 10, 10))})\n        polyfit = PolyFit(order=2)\n        result = polyfit._fit_predict(data)\n        self.assertEqual(len(result[\"x\"]), polyfit.gridsize)\n        self.assertEqual(len(result[\"y\"]), polyfit.gridsize)\n\n    def test_polyfit_call(self):\n        data = pd.DataFrame({\"x\": np.linspace(0, 10, 10), \"y\": np.sin(np.linspace(0, 10, 10))})\n        groupby = pd.DataFrame({\"group\": [\"A\", \"B\", \"A\", \"B\"]})\n        polyfit = PolyFit()\n        result = polyfit(data, groupby, \"x\", None)\n        self.assertEqual(len(result), 2)\n        for i in range(2):\n            self.assertEqual(len(result.iloc[i][\"x\"]), polyfit.gridsize)\n            self.assertEqual(len(result.iloc[i][\"y\"]), polyfit.gridsize)\n\n\n\n"], "sample_74": ["\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colorbar import Colorbar, make_axes, make_axes_gridspec\nfrom matplotlib.ticker import FixedLocator, LogFormatter\nfrom matplotlib.testing.decorators import image_comparison\n\nclass TestColorbar(object):\n\n    def test_colorbar_basic(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        cb = Colorbar(ax, cmap='viridis')\n        plt.close()\n\n    def test_colorbar_location(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        for loc in ['left', 'right', 'top', 'bottom']:\n            cb = Colorbar(ax, cmap='viridis', location=loc)\n            plt.close()\n\n    def test_colorbar_orientation(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        for orient in ['horizontal', 'vertical']:\n            cb = Colorbar(ax, cmap='viridis', orientation=orient)\n            plt.close()\n\n    def test_colorbar_fraction(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        for frac in [0.1, 0.5, 0.9]:\n            cb = Colorbar(ax, cmap='viridis', fraction=frac)\n            plt.close()\n\n    def test_colorbar_shrink(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        for shrink in [0.5, 1.0, 1.5]:\n            cb = Colorbar(ax, cmap='viridis', shrink=shrink)\n            plt.close()\n\n    def test_colorbar_aspect(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        for aspect in [1, 2, 0.5]:\n            cb = Colorbar(ax, cmap='viridis', aspect=aspect)\n            plt.close()\n\n    def test_colorbar_pad(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        for pad in [0.01, 0.1, 0.5]:\n            cb = Colorbar(ax, cmap='viridis', pad=pad)\n            plt.close()\n\n    def test_colorbar_extend(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        for extend in ['both', 'min', 'max', 'neither']:\n            cb = Colorbar(ax, cmap='viridis', extend=extend)\n            plt.close()\n\n    def test_colorbar_ticks(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        cb = Colorbar(ax, cmap='viridis', ticks=[0.2, 0.5, 0.8])\n        plt.close()\n\n    def test_colorbar_ticklabels(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        cb = Colorbar(ax, cmap='viridis', ticklabels=['a', 'b', 'c'])\n        plt.close()\n\n    def test_colorbar_format(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        cb = Colorbar(ax, cmap='viridis', format='%.2f')\n        plt.close()\n\n    def test_colorbar_locator(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        cb = Colorbar(ax, cmap='viridis', locator=FixedLocator([0.2, 0.5, 0.8]))\n        plt.close()\n\n    def test_colorbar_formatter(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        cb = Colorbar(ax, cmap='viridis', formatter=LogFormatter(labelFormatter=lambda x: f'log({x})'))\n        plt.close()\n\n    def test_make_axes(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        cax, kwargs = make_axes(ax, location='right')\n        plt.close()\n\n    def test_make_axes_gridspec(self):\n        fig, ax = plt.subplots()\n        im = ax.imshow(np.random.rand(5, 5))\n        cax, kwargs = make_axes_gridspec(ax, location='right')\n        plt.close()\n\n\n\n"], "sample_62": ["\nimport os\nimport shutil\nimport tempfile\nimport time\nimport unittest\nfrom django.core.cache.backends.base import DEFAULT_TIMEOUT\nfrom django.core.cache.backends.filebased import FileBasedCache\nfrom django.test import TestCase\n\n\nclass FileBasedCacheTests(TestCase):\n\n    def setUp(self):\n        self.cache_dir = tempfile.mkdtemp()\n        self.cache = FileBasedCache(self.cache_dir, {})\n\n    def tearDown(self):\n        shutil.rmtree(self.cache_dir)\n\n    def test_add(self):\n        self.assertTrue(self.cache.add(\"key\", \"value\", timeout=DEFAULT_TIMEOUT))\n        self.assertFalse(self.cache.add(\"key\", \"value\", timeout=DEFAULT_TIMEOUT))\n\n    def test_get(self):\n        self.cache.set(\"key\", \"value\", timeout=DEFAULT_TIMEOUT)\n        self.assertEqual(self.cache.get(\"key\"), \"value\")\n        self.assertEqual(self.cache.get(\"nonexistent_key\"), None)\n\n    def test_set(self):\n        self.cache.set(\"key\", \"value\", timeout=DEFAULT_TIMEOUT)\n        with open(self.cache._key_to_file(\"key\"), \"rb\") as f:\n            content = f.read()\n        self.assertEqual(pickle.loads(zlib.decompress(content)), \"value\")\n\n    def test_touch(self):\n        self.cache.set(\"key\", \"value\", timeout=DEFAULT_TIMEOUT)\n        self.assertTrue(self.cache.touch(\"key\", timeout=DEFAULT_TIMEOUT))\n        with open(self.cache._key_to_file(\"key\"), \"rb\") as f:\n            content = f.read()\n        self.assertEqual(pickle.loads(zlib.decompress(content)), \"value\")\n\n    def test_delete(self):\n        self.cache.set(\"key\", \"value\", timeout=DEFAULT_TIMEOUT)\n        self.assertTrue(self.cache.delete(\"key\"))\n        self.assertFalse(os.path.exists(self.cache._key_to_file(\"key\")))\n\n    def test_has_key(self):\n        self.cache.set(\"key\", \"value\", timeout=DEFAULT_TIMEOUT)\n        self.assertTrue(self.cache.has_key(\"key\"))\n        self.assertFalse(self.cache.has_key(\"nonexistent_key\"))\n\n    def test_clear(self):\n        self.cache.set(\"key1\", \"value1\", timeout=DEFAULT_TIMEOUT)\n        self.cache.set(\"key2\", \"value2\", timeout=DEFAULT_TIMEOUT)\n        self.cache.clear()\n        self.assertFalse(os.path.exists(self.cache._key_to_file(\"key1\")))\n        self.assertFalse(os.path.exists(self.cache._key_to_file(\"key2\")))\n\n    def test_cull(self):\n        # This test requires a specific number of cache entries to be created\n        # and a specific cull_frequency to be set.\n        self.cache._max_entries = 10\n        self.cache._cull_frequency = 2\n        for i in range(15):\n            self.cache.set(f\"key{i}\", f\"value{i}\", timeout=DEFAULT_TIMEOUT)\n        self.cache._cull()\n        # Assert that 5 cache entries have been removed\n        self.assertEqual(len(self._list_cache_files()), 5)\n\n    def _list_cache_files(self):\n        return [\n            os.path.join(self.cache_dir, fname)\n            for fname in glob.glob1(self.cache_dir, \"*%s\" % self.cache.cache_suffix)\n        ]\n\n\n\n"], "sample_52": ["\nimport unittest\nfrom django.db import migrations\nfrom django.db.migrations.operations.models import (\n    AddIndex,\n    RemoveIndex,\n    RenameIndex,\n    AddConstraint,\n    RemoveConstraint,\n    AlterModelOptions,\n    AlterModelTable,\n    AlterTogetherOptionOperation,\n    AlterModelManagers,\n    ModelOperation,\n    RenameModel,\n    DeleteModel,\n    AlterField,\n    RemoveField,\n    AddField,\n    RenameField,\n    ModelOptionOperation,\n)\nfrom django.db.models import Index, ForeignKey, OneToOneField, ManyToManyField, CharField, IntegerField, Model\nfrom django.test import TestCase, override_settings\nfrom django.apps import apps\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.db.migrations.state import ProjectState, ModelState\n\nclass TestModelOperations(TestCase):\n    def setUp(self):\n        self.app_label = \"myapp\"\n        self.model_name = \"MyModel\"\n        self.project_state = ProjectState()\n        self.app_state = self.project_state.get_app_state(self.app_label)\n        self.model_state = self.app_state.get_model_state(self.model_name)\n\n    def create_model(self):\n        class MyModel(Model):\n            name = CharField(max_length=100)\n            age = IntegerField()\n        return MyModel\n\n    def test_rename_model(self):\n        old_name = \"MyModel\"\n        new_name = \"NewMyModel\"\n        operation = RenameModel(old_name, new_name)\n        operation.state_forwards(self.app_label, self.project_state)\n        self.assertEqual(self.app_state.get_model_state(new_name).model._meta.db_table, new_name)\n        self.assertNotIn(old_name, self.app_state.get_model_states())\n\n    def test_delete_model(self):\n        operation = DeleteModel(self.model_name)\n        operation.state_forwards(self.app_label, self.project_state)\n        self.assertNotIn(self.model_name, self.app_state.get_model_states())\n\n    def test_add_field(self):\n        operation = AddField(\n            self.model_name,\n            \"new_field\",\n            CharField(max_length=100),\n        )\n        operation.state_forwards(self.app_label, self.project_state)\n        model = self.app_state.get_model_state(self.model_name).model\n        self.assertTrue(hasattr(model, \"new_field\"))\n\n    def test_remove_field(self):\n        operation = RemoveField(self.model_name, \"name\")\n        operation.state_forwards(self.app_label, self.project_state)\n        model = self.app_state.get_model_state(self.model_name).model\n        self.assertFalse(hasattr(model, \"name\"))\n\n    def test_rename_field(self):\n        operation = RenameField(self.model_name, \"name\", \"new_name\")\n        operation.state_forwards(self.app_label, self.project_state)\n        model = self.app_state.get_model_state(self.model_name).model\n        self.assertEqual(model._meta.get_field(\"new_name\").name, \"new_name\")\n\n    def test_alter_field(self):\n        operation = AlterField(\n            self.model_name,\n            \"age\",\n            IntegerField(max_length=5),\n        )\n        operation.state_forwards(self.app_label, self.project_state)\n        model = self.app_state.get_model_state(self.model_name).model\n        self.assertEqual(model._meta.get_field(\"age\").max_length, 5)\n\n    def test_add_index(self):\n        operation = AddIndex(self.model_name, Index(fields=[\"name\"]))\n        operation.state_forwards(self.app_label, self.project_state)\n        model = self.app_state.get_model_state(self.model_name).model\n        self.assertEqual(len(model._meta.indexes), 1)\n\n    def test_remove_index(self):\n        operation = RemoveIndex(self.model_name, \"name\")\n        operation.state_forwards(self.app_label, self.project_state)\n        model = self.app_state.get_model_state(self.model_name).model\n        self.assertEqual(len(model._meta.indexes), 0)\n\n    def test_rename_index(self):\n        operation = RenameIndex(self.model_name, \"new_index_name\", \"old_index_name\")\n        operation.state_forwards(self.app_label, self.project_state)\n        model = self.app_state.get_model_state(self.model_name).model\n        self.assertEqual(model._meta.get_field(\"new_index_name\").name, \"new_index_name\")\n\n    def test_add_constraint(self):\n        operation = AddConstraint(\n            self.model_name,\n            models.UniqueConstraint(fields=[\"name\"], name=\"unique_name\"),\n        )\n        operation.state_forwards(self.app_label, self.project_state)\n        model = self.app_state.get_model_state(self.model_name).model\n        self.assertEqual(\n            len(model._meta.constraints), 1\n        )\n\n    def test_remove_constraint(self):\n        operation = RemoveConstraint(self.model_name, \"unique_name\")\n        operation.state_forwards(self.app_label, self.project_state)\n        model = self.app_state.get_model_state(self.model_name).model\n        self.assertEqual(len(model._meta.constraints), 0)\n\n    def test_alter_model_options(self):\n        operation = AlterModelOptions(\n            self.model_name, {\"ordering\": [\"name\", \"age\"]}\n        )\n        operation.state_forwards(self.app_label, self.project_state)\n        model = self.app_state.get_model_state(self.model_name).model\n        self.assertEqual(model._meta.ordering, [\"name\", \"age\"])\n\n    def test_alter_model_managers(self):\n        operation = AlterModelManagers(self.model_name, {\"get_objects\": \"get_objects\"})\n        operation.state_forwards(self.app_label, self.project_state)\n        model = self.app_state.get_model_state(self.model_name).model\n        self.assertEqual(model.get_objects, \"get_objects\")\n\n\n\n"], "sample_29": ["\nimport unittest\nfrom django.db import models\nfrom django.db.models import (\n    Q,\n    OuterRef,\n    F,\n    Value,\n    Expression,\n    IntegerField,\n    CharField,\n    DateField,\n    DateTimeField,\n    BooleanField,\n    Count,\n    Avg,\n    Max,\n    Min,\n    Sum,\n    StdDev,\n    Variance,\n    Exists,\n    Subquery,\n    annotate,\n    related,\n    Prefetch,\n)\nfrom django.db.models.sql.query import (\n    JoinPromoter,\n    get_order_dir,\n    add_to_dict,\n    is_reverse_o2o,\n    Query,\n    ExtraWhere,\n)\nfrom django.db.models.sql.constants import (\n    AND,\n    OR,\n    LOOKUP_SEP,\n)\nfrom django.test import TestCase\nfrom django.utils.timezone import now\n\nclass Model(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=255)\n    value = models.IntegerField()\n    date = models.DateField()\n    boolean_field = models.BooleanField()\n    related_id = models.ForeignKey('self', on_delete=models.CASCADE, related_name='related_models')\n\nclass QueryTest(TestCase):\n    def setUp(self):\n        self.model = Model.objects.create(name='test', value=1, date=now(), boolean_field=True)\n        self.model2 = Model.objects.create(name='test2', value=2, date=now(), boolean_field=False)\n        self.model3 = Model.objects.create(name='test3', value=3, date=now(), boolean_field=True)\n        self.model.related_models.add(self.model2)\n\n    def test_add_ordering(self):\n        q = Query(Model)\n        q.add_ordering('name')\n        self.assertEqual(q.order_by, [('name', 'ASC')])\n\n        q = Query(Model)\n        q.add_ordering('-name')\n        self.assertEqual(q.order_by, [('name', 'DESC')])\n\n        q = Query(Model)\n        q.add_ordering('name', 'date')\n        self.assertEqual(q.order_by, [('name', 'ASC'), ('date', 'ASC')])\n\n    def test_add_ordering_with_existing_ordering(self):\n        q = Query(Model)\n        q.add_ordering('name')\n        q.add_ordering('-date')\n        self.assertEqual(q.order_by, [('name', 'ASC'), ('date', 'DESC')])\n\n    def test_clear_ordering(self):\n        q = Query(Model)\n        q.add_ordering('name')\n        q.clear_ordering()\n        self.assertEqual(q.order_by, ())\n\n    def test_add_ordering_with_field_name_collision(self):\n        class ModelWithCollision(models.Model):\n            id = models.AutoField(primary_key=True)\n            name = models.CharField(max_length=255)\n            value = models.IntegerField()\n            date = models.DateField()\n            related_id = models.ForeignKey('self', on_delete=models.CASCADE, related_name='related_models')\n        q = Query(ModelWithCollision)\n        q.add_ordering('name')\n        q.add_ordering('related_id')\n        self.assertEqual(q.order_by, [('name', 'ASC'), ('related_id', 'ASC')])\n\n    def test_add_ordering_with_f_expression(self):\n        q = Query(Model)\n        q.add_ordering(F('value') + 1)\n        self.assertEqual(q.order_by, [(F('value') + 1, 'ASC')])\n\n    def test_add_ordering_with_expression(self):\n        q = Query(Model)\n        q.add_ordering(Expression(lambda x: x.value * 2))\n        self.assertEqual(q.order_by, [(Expression(lambda x: x.value * 2), 'ASC')])\n\n    def test_add_ordering_with_multiple_expressions(self):\n        q = Query(Model)\n        q.add_ordering(Expression(lambda x: x.value * 2))\n        q.add_ordering(F('date'))\n        self.assertEqual(q.order_by, [(Expression(lambda x: x.value * 2), 'ASC'), ('date', 'ASC')])\n\n    def test_add_ordering_with_reverse_ordering(self):\n        q = Query(Model)\n        q.add_ordering('-name')\n        self.assertEqual(q.order_by, [('name', 'DESC')])\n\n    def test_add_ordering_with_mixed_ordering(self):\n        q = Query(Model)\n        q.add_ordering('name')\n        q.add_ordering('-value')\n        self.assertEqual(q.order_by, [('name', 'ASC'), ('value', 'DESC')])\n\n    def test_add_ordering_with_duplicate_fields(self):\n        q = Query(Model)\n        q.add_ordering('name')\n        q.add_ordering('name')\n        self.assertEqual(q.order_by, [('name', 'ASC')])\n\n    def test_add_ordering_with_invalid_field(self):\n        q = Query(Model)\n        with self.assertRaises(AttributeError):\n            q.add_ordering('invalid_field')\n\n    def test_add_ordering_with_nested_object(self):\n        q = Query(Model)\n        q.add_ordering('related_models__name')\n        self.assertEqual(q.order_by, [('related_models__name', 'ASC')])\n\n    def test_add_ordering_with_nested_object_reverse(self):\n        q = Query(Model)\n        q.add_ordering('-related_models__name')\n        self.assertEqual(q.order_by, [('related_models__name', 'DESC')])\n\n    def test_add_ordering_with_nested_object_multiple_levels(self):\n        q = Query(Model)\n        q.add_ordering('related_models__related_models__name')\n        self.assertEqual(q.order_by, [('related_models__related_models__name', 'ASC')])\n\n    def test_add_ordering_with_nested_object_reverse_multiple_levels(self):\n        q = Query(Model)\n        q.add_ordering('-related_models__related_models__name')\n        self.assertEqual(q.order_by, [('related_models__related_models__name', 'DESC')])\n\n    def test_add_ordering_with_nested_object_mixed_ordering(self):\n        q = Query(Model)\n        q.add_ordering('related_models__name')\n        q.add_ordering('-related_models__value')\n        self.assertEqual(q.order_by, [('related_models__name', 'ASC'), ('related_models__value', 'DESC')])\n\n    def test_add_ordering_with_nested_object_mixed_ordering_reverse(self):\n        q = Query(Model)\n        q.add_ordering('-related_models__name')\n        q.add_ordering('related_models__value')\n        self.assertEqual(q.order_by, [('related_models__name', 'DESC'), ('related_models__value', 'ASC')])\n\n    def test_add_ordering_with_nested_object_duplicate_fields(self):\n        q = Query(Model)\n        q.add_ordering('related_models__name')\n        q.add_ordering('related_models__name')\n        self.assertEqual(q.order_by, [('related_models__name', 'ASC')])\n\n    def test_add_ordering_with_nested_object_invalid_field(self):\n        q = Query(Model)\n        with self.assertRaises(AttributeError):\n            q.add_ordering('related_models__invalid_field')\n\n    def test_add_ordering_with_nested_object_mixed_ordering_invalid_field(self):\n        q = Query(Model)\n        with self.assertRaises(AttributeError):\n            q.add_ordering('related_models__name')\n            q.add_ordering('related_models__invalid_field')\n\n\n    def test_add_ordering_with_nested_object_mixed_ordering_invalid_field(self):\n        q = Query(Model)\n        with self.assertRaises(AttributeError):\n            q.add_ordering('related_models__name')\n            q.add_ordering('related_models__invalid_field')\n\n\n\n"], "sample_66": ["\nimport unittest\nfrom django.contrib.admin.checks import (\n    ModelAdminChecks,\n    InlineModelAdminChecks,\n    must_be,\n    must_inherit_from,\n    refer_to_missing_field,\n)\nfrom django.db import models\nfrom django.contrib.admin.options import ModelAdmin, InlineModelAdmin\n\nclass TestModelAdminChecks(unittest.TestCase):\n\n    def test_check_ordering(self):\n        class MyModelAdmin(ModelAdmin):\n            ordering = ['field1', 'field2']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_ordering_invalid(self):\n        class MyModelAdmin(ModelAdmin):\n            ordering = ['field1', '?']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg,\n            \"The value of 'ordering' has the random ordering marker '?', but contains other fields as well.\",\n        )\n\n    def test_check_ordering_empty(self):\n        class MyModelAdmin(ModelAdmin):\n            ordering = ()\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_ordering_invalid_field(self):\n        class MyModelAdmin(ModelAdmin):\n            ordering = ['invalid_field']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg,\n            \"The value of 'ordering' refers to 'invalid_field', which is not a field.\",\n        )\n\n    def test_check_save_as(self):\n        class MyModelAdmin(ModelAdmin):\n            save_as = True\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_save_as_invalid(self):\n        class MyModelAdmin(ModelAdmin):\n            save_as = \"invalid\"\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(checks[0].msg, \"The value of 'save_as' must be a boolean.\")\n\n    def test_check_save_on_top(self):\n        class MyModelAdmin(ModelAdmin):\n            save_on_top = True\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_save_on_top_invalid(self):\n        class MyModelAdmin(ModelAdmin):\n            save_on_top = \"invalid\"\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(checks[0].msg, \"The value of 'save_on_top' must be a boolean.\")\n\n    def test_check_inlines(self):\n        class MyModelAdmin(ModelAdmin):\n            inlines = [\n                InlineModelAdmin(model=models.Model),\n            ]\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_inlines_invalid(self):\n        class MyModelAdmin(ModelAdmin):\n            inlines = [\"invalid\"]\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(checks[0].msg, \"The value of 'inlines' must be a list or tuple.\")\n\n    def test_check_list_display(self):\n        class MyModelAdmin(ModelAdmin):\n            list_display = ['field1', 'field2']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_list_display_invalid(self):\n        class MyModelAdmin(ModelAdmin):\n            list_display = ['invalid_field']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg, \"The value of 'list_display' refers to 'invalid_field', which is not a field.\",\n        )\n\n    def test_check_list_display_links(self):\n        class MyModelAdmin(ModelAdmin):\n            list_display_links = ['field1', 'field2']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_list_display_links_invalid(self):\n        class MyModelAdmin(ModelAdmin):\n            list_display_links = ['invalid_field']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg, \"The value of 'list_display_links' refers to 'invalid_field', which is not a field.\",\n        )\n\n    def test_check_list_display_links_not_in_list_display(self):\n        class MyModelAdmin(ModelAdmin):\n            list_display = ['field1']\n            list_display_links = ['field2']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg,\n            \"The value of 'list_display_links' refers to 'field2', which is not defined in 'list_display'.\",\n        )\n\n    def test_check_list_filter(self):\n        class MyModelAdmin(ModelAdmin):\n            list_filter = ['field1', 'field2']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_list_filter_invalid(self):\n        class MyModelAdmin(ModelAdmin):\n            list_filter = ['invalid_field']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg, \"The value of 'list_filter' refers to 'invalid_field', which is not a field.\",\n        )\n\n    def test_check_list_select_related(self):\n        class MyModelAdmin(ModelAdmin):\n            list_select_related = True\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_list_select_related_invalid(self):\n        class MyModelAdmin(ModelAdmin):\n            list_select_related = \"invalid\"\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg, \"The value of 'list_select_related' must be a boolean, tuple or list.\"\n        )\n\n    def test_check_list_per_page(self):\n        class MyModelAdmin(ModelAdmin):\n            list_per_page = 10\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_list_per_page_invalid(self):\n        class MyModelAdmin(ModelAdmin):\n            list_per_page = \"invalid\"\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg, \"The value of 'list_per_page' must be an integer.\"\n        )\n\n    def test_check_list_max_show_all(self):\n        class MyModelAdmin(ModelAdmin):\n            list_max_show_all = 10\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_list_max_show_all_invalid(self):\n        class MyModelAdmin(ModelAdmin):\n            list_max_show_all = \"invalid\"\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg, \"The value of 'list_max_show_all' must be an integer.\"\n        )\n\n    def test_check_list_editable(self):\n        class MyModelAdmin(ModelAdmin):\n            list_editable = ['field1']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_list_editable_invalid(self):\n        class MyModelAdmin(ModelAdmin):\n            list_editable = ['invalid_field']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg,\n            \"The value of 'list_editable' refers to 'invalid_field', which is not a field.\",\n        )\n\n    def test_check_list_editable_not_in_list_display(self):\n        class MyModelAdmin(ModelAdmin):\n            list_display = ['field1']\n            list_editable = ['field2']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg,\n            \"The value of 'list_editable' refers to 'field2', which is not contained in 'list_display'.\",\n        )\n\n    def test_check_list_editable_not_editable(self):\n        class MyModelAdmin(ModelAdmin):\n            list_editable = ['field1']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg,\n            \"The value of 'list_editable' refers to 'field1', which is not editable through the admin.\",\n        )\n\n    def test_check_search_fields(self):\n        class MyModelAdmin(ModelAdmin):\n            search_fields = ['field1']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_search_fields_invalid(self):\n        class MyModelAdmin(ModelAdmin):\n            search_fields = ['invalid_field']\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg, \"The value of 'search_fields' refers to 'invalid_field', which is not a field.\"\n        )\n\n    def test_check_date_hierarchy(self):\n        class MyModelAdmin(ModelAdmin):\n            date_hierarchy = 'created_at'\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_date_hierarchy_invalid(self):\n        class MyModelAdmin(ModelAdmin):\n            date_hierarchy = 'invalid_field'\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg,\n            \"The value of 'date_hierarchy' refers to 'invalid_field', which is not a field.\"\n        )\n\n    def test_check_action_permission_methods(self):\n        class MyModelAdmin(ModelAdmin):\n            actions = [\n                (\"action_name\", lambda obj: None),\n            ]\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_action_uniqueness(self):\n        class MyModelAdmin(ModelAdmin):\n            actions = [\n                (\"action_name\", lambda obj: None),\n                (\"action_name\", lambda obj: None),\n            ]\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 1)\n        self.assertEqual(\n            checks[0].msg,\n            \"The __name__ of actions defined in %s\" % MyModelAdmin.__class__.__name__,\n        )\n\n\n\nclass TestInlineModelAdminChecks(unittest.TestCase):\n\n    def test_check_relation(self):\n        class MyInlineModelAdmin(InlineModelAdmin):\n            model = models.Model\n        checks = InlineModelAdminChecks().check(MyInlineModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_exclude_of_parent_model(self):\n        class MyModelAdmin(ModelAdmin):\n            inlines = [\n                InlineModelAdmin(model=models.Model),\n            ]\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_extra(self):\n        class MyModelAdmin(ModelAdmin):\n            inlines = [\n                InlineModelAdmin(model=models.Model),\n            ]\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_max_num(self):\n        class MyModelAdmin(ModelAdmin):\n            inlines = [\n                InlineModelAdmin(model=models.Model),\n            )\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_min_num(self):\n        class MyModelAdmin(ModelAdmin):\n            inlines = [\n                InlineModelAdmin(model=models.Model),\n            )\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n    def test_check_formset(self):\n        class MyModelAdmin(ModelAdmin):\n            inlines = [\n                InlineModelAdmin(model=models.Model)\n            ]\n        checks = ModelAdminChecks().check(MyModelAdmin())\n        self.assertEqual(len(checks), 0)\n\n\n\n"], "sample_51": ["\nimport mimetypes\nimport os\nimport re\nimport shutil\nimport tempfile\nfrom pathlib import Path\nfrom unittest import mock\n\nfrom django.http import HttpResponse, HttpResponseNotModified\nfrom django.template import Context, Engine, TemplateDoesNotExist, loader\nfrom django.utils._os import safe_join\nfrom django.utils.http import http_date, parse_http_date\nfrom django.utils.translation import gettext as _\nfrom django.utils.translation import gettext_lazy\n\nfrom django.views.static import (\n    serve,\n    DEFAULT_DIRECTORY_INDEX_TEMPLATE,\n    directory_index,\n    was_modified_since,\n)\n\n\nclass TestServe(mock.TestCase):\n\n    def setUp(self):\n        self.temp_dir = tempfile.mkdtemp()\n        self.document_root = Path(self.temp_dir)\n        os.makedirs(os.path.join(self.document_root, \"subdir\"))\n        with open(os.path.join(self.document_root, \"file1.txt\"), \"w\") as f:\n            f.write(\"Hello, world!\")\n        with open(os.path.join(self.document_root, \"subdir\", \"file2.txt\"), \"w\") as f:\n            f.write(\"Hello, subdir!\")\n\n    def tearDown(self):\n        shutil.rmtree(self.temp_dir)\n\n    def test_serve_file(self):\n        response = serve(\n            mock.Mock(),\n            \"file1.txt\",\n            document_root=self.document_root,\n        )\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content.decode(), \"Hello, world!\")\n\n    def test_serve_file_with_if_modified_since(self):\n        response = serve(\n            mock.Mock(),\n            \"file1.txt\",\n            document_root=self.document_root,\n        )\n        last_modified = response.headers[\"Last-Modified\"]\n        response = serve(\n            mock.Mock(HTTP_IF_MODIFIED_SINCE=last_modified),\n            \"file1.txt\",\n            document_root=self.document_root,\n        )\n        self.assertEqual(response.status_code, 304)\n\n    def test_serve_file_modified_since(self):\n        with open(os.path.join(self.document_root, \"file1.txt\"), \"w\") as f:\n            f.write(\"New content!\")\n        response = serve(\n            mock.Mock(HTTP_IF_MODIFIED_SINCE=http_date(1)),\n            \"file1.txt\",\n            document_root=self.document_root,\n        )\n        self.assertEqual(response.status_code, 200)\n\n    def test_serve_directory(self):\n        with self.assertRaises(Http404):\n            serve(\n                mock.Mock(),\n                \"subdir/\",\n                document_root=self.document_root,\n                show_indexes=False,\n            )\n\n    def test_serve_directory_with_index(self):\n        response = serve(\n            mock.Mock(),\n            \"subdir/\",\n            document_root=self.document_root,\n            show_indexes=True,\n        )\n        self.assertEqual(response.status_code, 200)\n\n    def test_directory_index_template(self):\n        response = serve(\n            mock.Mock(),\n            \"subdir/\",\n            document_root=self.document_root,\n            show_indexes=True,\n        )\n        content = response.content.decode()\n        self.assertIn(\"Index of subdir/\", content)\n        self.assertIn(\"file2.txt\", content)\n\n    def test_directory_index_template_custom(self):\n        custom_template = \"\"\"\n        <h1>Custom Index</h1>\n        \"\"\"\n        with open(os.path.join(self.temp_dir, \"static/directory_index.html\"), \"w\") as f:\n            f.write(custom_template)\n        response = serve(\n            mock.Mock(),\n            \"subdir/\",\n            document_root=self.document_root,\n            show_indexes=True,\n        )\n        content = response.content.decode()\n        self.assertIn(\"Custom Index\", content)\n\n    def test_was_modified_since_not_modified(self):\n        self.assertTrue(\n            was_modified_since(\n                header=http_date(1), mtime=1, size=10\n            )\n        )\n\n    def test_was_modified_since_modified(self):\n        self.assertFalse(\n            was_modified_since(\n                header=http_date(1), mtime=2, size=10\n            )\n        )\n\n    def test_was_modified_since_different_size(self):\n        self.assertFalse(\n            was_modified_since(\n                header=http_date(1), mtime=1, size=20\n            )\n        )\n\n    def test_was_modified_since_invalid_header(self):\n        with self.assertRaises(ValueError):\n            was_modified_since(header=\"invalid\")\n\n\n\n"], "sample_59": ["\nimport unittest\nfrom django.forms import (\n    BaseForm,\n    CharField,\n    DateField,\n    FileField,\n    Form,\n    IntegerField,\n    SplitDateTimeField,\n    formsets,\n)\nfrom django.forms.formsets import (\n    INITIAL_FORM_COUNT,\n    MAX_NUM_FORM_COUNT,\n    MIN_NUM_FORM_COUNT,\n    TOTAL_FORM_COUNT,\n    BaseFormSet,\n    ManagementForm,\n    all_valid,\n    formset_factory,\n)\nfrom django.forms.renderers import TemplatesSetting, get_default_renderer\nfrom django.forms.utils import ErrorList\nfrom django.forms.widgets import HiddenInput\nfrom django.forms.renderers import Jinja2\nfrom django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n\n\nclass TestFormSet(unittest.TestCase):\n\n    def test_formset_factory(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm)\n        self.assertEqual(FormSet.extra, 1)\n        self.assertEqual(FormSet.can_order, False)\n        self.assertEqual(FormSet.can_delete, False)\n        self.assertEqual(FormSet.min_num, DEFAULT_MIN_NUM)\n        self.assertEqual(FormSet.max_num, DEFAULT_MAX_NUM)\n        self.assertEqual(FormSet.validate_min, False)\n        self.assertEqual(FormSet.validate_max, False)\n\n    def test_formset_factory_with_args(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(\n            MyForm,\n            extra=2,\n            can_order=True,\n            can_delete=True,\n            max_num=5,\n            validate_max=True,\n            min_num=2,\n            validate_min=True,\n        )\n        self.assertEqual(FormSet.extra, 2)\n        self.assertEqual(FormSet.can_order, True)\n        self.assertEqual(FormSet.can_delete, True)\n        self.assertEqual(FormSet.min_num, 2)\n        self.assertEqual(FormSet.max_num, 5)\n        self.assertEqual(FormSet.validate_min, True)\n        self.assertEqual(FormSet.validate_max, True)\n\n    def test_formset_factory_with_renderer(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(\n            MyForm, renderer=Jinja2()\n        )\n        self.assertEqual(FormSet.renderer, Jinja2())\n\n    def test_baseformset_total_form_count(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm)\n        formset = FormSet(data={})\n        self.assertEqual(formset.total_form_count(), 1)\n\n    def test_baseformset_initial_form_count(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm)\n        formset = FormSet(data={})\n        self.assertEqual(formset.initial_form_count(), 0)\n\n    def test_baseformset_empty_form(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm)\n        formset = FormSet(data={})\n        empty_form = formset.empty_form\n        self.assertEqual(empty_form.fields, {'name': CharField()})\n\n    def test_baseformset_add_fields(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm)\n        formset = FormSet(data={})\n        formset.add_fields(formset.forms[0], 0)\n        self.assertIn(\n            'ordering', formset.forms[0].fields\n        )\n        self.assertIn('deletion', formset.forms[0].fields)\n\n    def test_all_valid(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm)\n        formset1 = FormSet(data={})\n        formset2 = FormSet(data={})\n        self.assertTrue(all_valid([formset1, formset2]))\n\n        formset1.is_valid = False\n        self.assertFalse(all_valid([formset1, formset2]))\n\n\n\n"], "sample_114": ["\nimport unittest\nfrom sklearn.utils.multiclass import (\n    unique_labels,\n    is_multilabel,\n    type_of_target,\n    check_classification_targets,\n    class_distribution,\n    _ovr_decision_function,\n)\nfrom sklearn.utils.array_api import get_namespace\nimport numpy as np\nfrom scipy.sparse import csr_matrix\n\nclass TestMulticlass(unittest.TestCase):\n\n    def test_unique_labels(self):\n        self.assertEqual(unique_labels([3, 5, 5, 5, 7, 7]), np.array([3, 5, 7]))\n        self.assertEqual(unique_labels([1, 2, 3, 4], [2, 2, 3, 4]), np.array([1, 2, 3, 4]))\n        self.assertEqual(unique_labels([1, 2, 10], [5, 11]), np.array([1, 2, 5, 10, 11]))\n\n    def test_unique_labels_mixed_types(self):\n        with self.assertRaises(ValueError):\n            unique_labels([1, \"a\", 2])\n\n    def test_unique_labels_multilabel_indicator(self):\n        y1 = np.array([[1, 0, 1], [0, 1, 0], [1, 1, 1]])\n        y2 = np.array([[1, 0], [0, 1], [1, 1]])\n        self.assertEqual(unique_labels(y1), np.array([0, 1]))\n        self.assertEqual(unique_labels(y2), np.array([0, 1]))\n\n    def test_is_multilabel(self):\n        self.assertFalse(is_multilabel([0, 1, 0, 1]))\n        self.assertFalse(is_multilabel([[1], [0, 2], []]))\n        self.assertTrue(is_multilabel(np.array([[1, 0], [0, 0]])))\n        self.assertTrue(is_multilabel(np.array([[1, 0, 0]])))\n\n    def test_type_of_target(self):\n        self.assertEqual(type_of_target([0.1, 0.6]), \"continuous\")\n        self.assertEqual(type_of_target([1, -1, -1, 1]), \"binary\")\n        self.assertEqual(type_of_target(['a', 'b', 'a']), \"binary\")\n        self.assertEqual(type_of_target([1.0, 2.0]), \"binary\")\n        self.assertEqual(type_of_target([1, 0, 2]), \"multiclass\")\n        self.assertEqual(type_of_target([1.0, 0.0, 3.0]), \"multiclass\")\n        self.assertEqual(type_of_target(['a', 'b', 'c']), \"multiclass\")\n        self.assertEqual(type_of_target(np.array([[1, 2], [3, 1]])), \"multiclass-multioutput\")\n        self.assertEqual(type_of_target([[1, 2]]), \"multilabel-indicator\")\n        self.assertEqual(type_of_target(np.array([[1.5, 2.0], [3.0, 1.6]])), \"continuous-multioutput\")\n        self.assertEqual(type_of_target(np.array([[0, 1], [1, 1]])), \"multilabel-indicator\")\n\n    def test_check_classification_targets(self):\n        with self.assertRaises(ValueError):\n            check_classification_targets([1, 2, 3, 4])\n\n    def test_class_distribution(self):\n        y = np.array([[0, 1], [1, 0], [0, 1]])\n        classes, n_classes, class_prior = class_distribution(y)\n        self.assertEqual(classes, [[0, 1]])\n        self.assertEqual(n_classes, [2])\n        self.assertEqual(class_prior, [[0.5, 0.5]])\n\n    def test_class_distribution_with_weights(self):\n        y = np.array([[0, 1], [1, 0], [0, 1]])\n        sample_weight = np.array([1, 2, 3])\n        classes, n_classes, class_prior = class_distribution(y, sample_weight)\n        self.assertEqual(classes, [[0, 1]])\n        self.assertEqual(n_classes, [2])\n        self.assertEqual(class_prior, [[0.66666667, 0.33333333]])\n\n    def test_class_distribution_sparse(self):\n        y = csr_matrix([[0, 1], [1, 0], [0, 1]])\n        classes, n_classes, class_prior = class_distribution(y)\n        self.assertEqual(classes, [[0, 1]])\n        self.assertEqual(n_classes, [2])\n        self.assertEqual(class_prior, [[0.5, 0.5]])\n\n    def test_class_distribution_sparse_with_weights(self):\n        y = csr_matrix([[0, 1], [1, 0], [0, 1]])\n        sample_weight = np.array([1, 2, 3])\n        classes, n_classes, class_prior = class_distribution(y, sample_weight)\n        self.assertEqual(classes, [[0, 1]])\n        self.assertEqual(n_classes, [2])\n        self.assertEqual(class_prior, [[0.66666667, 0.33333333]])\n\n    def test_ovr_decision_function(self):\n        predictions = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n        confidences = np.array([[0.8, 0.2, 0.9], [0.1, 0.9, 0.7], [0.6, 0.4, 0.3]])\n        n_classes = 3\n        decision_function = _ovr_decision_function(predictions, confidences, n_classes)\n        self.assertEqual(decision_function.shape, (3, 3))\n        # Check that the decision function is continuous and monotonic\n        # with respect to the confidences.\n\n\n\n"], "sample_9": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.utils.autoreload import (\n    StatReloader,\n    WatchmanReloader,\n    get_reloader,\n    restart_with_reloader,\n    iter_all_python_module_files,\n    _error_files,\n    raise_last_exception,\n    ensure_echo_on,\n    check_errors,\n    run_with_reloader,\n    file_changed,\n    common_roots,\n    sys_path_directories,\n)\nfrom django.apps import apps\nfrom django.core.signals import request_finished\nfrom django.utils.functional import cached_property\nfrom django.utils.version import get_version_tuple\nfrom pathlib import Path\nimport os\nimport time\nimport threading\nimport sys\nimport logging\nimport termios\nimport traceback\nimport itertools\nimport shutil\n\nlogger = logging.getLogger(__name__)\n\nclass TestAutoreload(unittest.TestCase):\n\n    def setUp(self):\n        _error_files.clear()\n        self.mock_sys_path = ['/path/to/project', '/path/to/another/module']\n        sys.path = self.mock_sys_path\n        self.patch_sys_path_directories = patch('django.utils.autoreload.sys_path_directories', return_value=self.mock_sys_path)\n        self.patch_iter_all_python_module_files = patch('django.utils.autoreload.iter_all_python_module_files', return_value=self.mock_sys_path)\n        self.patch_get_version_tuple = patch('django.utils.version.get_version_tuple', return_value=(1, 0, 0))\n        self.patch_common_roots = patch('django.utils.autoreload.common_roots', return_value=frozenset(['/path/to/project']))\n        self.addCleanup(self.patch_sys_path_directories.stop)\n        self.addCleanup(self.patch_iter_all_python_module_files.stop)\n        self.addCleanup(self.patch_get_version_tuple.stop)\n        self.addCleanup(self.patch_common_roots.stop)\n\n    def test_iter_all_python_module_files(self):\n        files = list(iter_all_python_module_files())\n        self.assertEqual(files, self.mock_sys_path)\n\n    def test_common_roots(self):\n        roots = common_roots(['/path/to/project', '/path/to/another/module'])\n        self.assertEqual(roots, frozenset(['/path/to/project']))\n\n    def test_sys_path_directories(self):\n        directories = list(sys_path_directories())\n        self.assertEqual(directories, self.mock_sys_path)\n\n    def test_get_reloader_watchman_available(self):\n        with patch('django.utils.autoreload.pywatchman', autospec=True) as mock_pywatchman:\n            mock_pywatchman.client.query.return_value = {'version': '4.10.0'}\n            reloader = get_reloader()\n            self.assertIsInstance(reloader, WatchmanReloader)\n\n    def test_get_reloader_watchman_unavailable(self):\n        with patch('django.utils.autoreload.pywatchman', autospec=True) as mock_pywatchman:\n            mock_pywatchman.client.query.side_effect = Exception('Watchman unavailable')\n            with self.assertRaises(WatchmanUnavailable):\n                get_reloader()\n\n    def test_get_reloader_stat_reloader(self):\n        with patch('django.utils.autoreload.pywatchman', autospec=True) as mock_pywatchman:\n            mock_pywatchman.client.query.side_effect = Exception('Watchman unavailable')\n            reloader = get_reloader()\n            self.assertIsInstance(reloader, StatReloader)\n\n    def test_restart_with_reloader(self):\n        with patch('django.utils.autoreload.os.environ', {'DJANGO_AUTORELOAD_ENV': 'true'}) as mock_environ:\n            with patch('django.utils.autoreload.subprocess.call') as mock_subprocess:\n                mock_subprocess.return_value = 3\n                exit_code = restart_with_reloader()\n                self.assertEqual(exit_code, 3)\n\n    def test_run_with_reloader(self):\n        with patch('django.utils.autoreload.os.environ', {'DJANGO_AUTORELOAD_ENV': 'true'}) as mock_environ:\n            with patch('django.utils.autoreload.get_reloader') as mock_get_reloader:\n                mock_get_reloader.return_value = MagicMock()\n                with patch('django.utils.autoreload.start_django') as mock_start_django:\n                    run_with_reloader(lambda: None)\n                    mock_get_reloader.assert_called_once()\n                    mock_start_django.assert_called_once()\n\n    def test_check_errors(self):\n        def my_function():\n            raise Exception('Test exception')\n        wrapped_function = check_errors(my_function)\n        with self.assertRaises(Exception):\n            wrapped_function()\n        self.assertEqual(_error_files, ['<traceback>'])\n\n    def test_ensure_echo_on(self):\n        with patch('django.utils.autoreload.termios.tcgetattr') as mock_tcgetattr:\n            with patch('django.utils.autoreload.termios.ECHO') as mock_ECHO:\n                mock_tcgetattr.return_value = (\n                    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                )\n                mock_ECHO.return_value = False\n                ensure_echo_on()\n                mock_tcgetattr.assert_called_once()\n                mock_ECHO.assert_called_once()\n\n    def test_raise_last_exception(self):\n        global _exception\n        _exception = Exception('Test exception')\n        raise_last_exception()\n        self.assertIsNone(_exception)\n\n    def test_file_changed(self):\n        file_changed.send(sender=None, file_path='/path/to/file', kind='modified')\n        self.assertEqual(file_changed.send(sender=None, file_path='/path/to/file', kind='modified'), [])\n\n    def test_common_roots_empty_list(self):\n        self.assertEqual(common_roots([]), frozenset())\n\n    def test_common_roots_single_element(self):\n        self.assertEqual(common_roots(['/path/to/project']), frozenset(['/path/to/project']))\n\n    def test_common_roots_duplicate_elements(self):\n        self.assertEqual(common_roots(['/path/to/project', '/path/to/project']), frozenset(['/path/to/project']))\n\n    def test_common_roots_different_elements(self):\n        self.assertEqual(common_roots(['/path/to/project', '/path/to/another/module']), frozenset(['/path/to/project']))\n\n\n\n"], "sample_49": ["\nimport os\nimport unittest\nfrom unittest.mock import patch\nfrom django.template import engines\nfrom django.template.backends.django import DjangoTemplates\nfrom django.utils._os import to_path\nfrom django.utils.autoreload import (\n    autoreload_started, file_changed, is_django_path,\n)\nfrom django.template.loader import BaseLoader\n\nfrom django.template.autoreload import (\n    get_template_directories, reset_loaders,\n    watch_for_template_changes, template_changed\n)\n\nclass TestTemplateAutoreload(unittest.TestCase):\n\n    @patch('django.utils.autoreload.autoreload_started')\n    def test_get_template_directories(self, mock_autoreload_started):\n        # Mock DjangoTemplates engine\n        class MockDjangoTemplates(DjangoTemplates):\n            def __init__(self, *args, **kwargs):\n                super().__init__(*args, **kwargs)\n                self.engine.dirs = ['/path/to/templates']\n                self.engine.template_loaders = [\n                    MockLoader()\n                ]\n\n        engines.all = [MockDjangoTemplates()]\n\n        # Call the function\n        result = get_template_directories()\n\n        # Assert the result\n        self.assertEqual(result, {'/path/to/templates'})\n\n    @patch('django.utils.autoreload.autoreload_started')\n    def test_get_template_directories_with_loader(self, mock_autoreload_started):\n        # Mock DjangoTemplates engine\n        class MockDjangoTemplates(DjangoTemplates):\n            def __init__(self, *args, **kwargs):\n                super().__init__(*args, **kwargs)\n                self.engine.dirs = ['/path/to/templates']\n                self.engine.template_loaders = [\n                    MockLoader(dirs=['/path/to/custom_templates'])\n                ]\n\n        engines.all = [MockDjangoTemplates()]\n\n        # Call the function\n        result = get_template_directories()\n\n        # Assert the result\n        self.assertEqual(result, {'/path/to/templates', '/path/to/custom_templates'})\n\n    class MockLoader(BaseLoader):\n        def __init__(self, dirs=None):\n            self.dirs = dirs or []\n\n        def get_dirs(self):\n            return self.dirs\n\n    @patch('django.utils.autoreload.autoreload_started')\n    def test_reset_loaders(self, mock_autoreload_started):\n        # Mock DjangoTemplates engine\n        class MockDjangoTemplates(DjangoTemplates):\n            def __init__(self, *args, **kwargs):\n                super().__init__(*args, **kwargs)\n                self.engine.template_loaders = [\n                    MockLoader()\n                ]\n\n        engines.all = [MockDjangoTemplates()]\n\n        # Call the function\n        reset_loaders()\n\n        # Assert that the loader's reset method was called\n        self.assertTrue(MockLoader().reset.called)\n\n    @patch('django.utils.autoreload.autoreload_started')\n    def test_watch_for_template_changes(self, mock_autoreload_started):\n        # Mock the watch_dir method of autoreload_started\n        mock_watch_dir = mock_autoreload_started.return_value.watch_dir\n        \n        # Call the function\n        watch_for_template_changes(mock_autoreload_started.return_value, **{})\n\n        # Assert that the watch_dir method was called with the expected arguments\n        mock_watch_dir.assert_called_once_with('/path/to/templates', '**/*')\n\n    @patch('django.utils.autoreload.autoreload_started')\n    @patch('django.utils.autoreload.file_changed')\n    def test_template_changed(self, mock_file_changed, mock_autoreload_started):\n        # Mock the file_changed function\n        mock_file_changed.return_value = True\n\n        # Call the function\n        template_changed(mock_autoreload_started.return_value, '/path/to/template.html', **{})\n\n        # Assert that the reset_loaders function was called\n        reset_loaders.assert_called_once()\n\n\n\n"], "sample_147": ["\nfrom sympy.core.function import nfloat, count_ops\nfrom sympy.core.symbol import Dummy, Symbol\nfrom sympy.abc import x, y, z\nfrom sympy import cos, pi, sqrt, S, exp, sin, log, Integer, Rational, oo,  Add, Mul, Pow,  Matrix,  MatrixSymbol,  ImmutableMatrix, ImmutableSparseMatrix,  SparseMatrix\nfrom sympy.simplify.radsimp import fraction\nfrom sympy.utilities.pytest import raises\nimport pytest\n\ndef test_nfloat_numbers():\n    assert nfloat(1) == 1.0\n    assert nfloat(2.5) == 2.5\n    assert nfloat(3.141592653589793) == 3.141592653589793\n    assert nfloat(oo) == oo\n    assert nfloat(-oo) == -oo\n    assert nfloat(S.Infinity) == oo\n    assert nfloat(S.NegativeInfinity) == -oo\n\ndef test_nfloat_symbols():\n    assert nfloat(x) == x\n    assert nfloat(x + y) == x + y\n\ndef test_nfloat_functions():\n    assert nfloat(cos(pi/3)) == 0.5\n    assert nfloat(sqrt(4)) == 2.0\n    assert nfloat(exp(1)) == 2.718281828459045\n    assert nfloat(log(10)) == 2.302585092994046\n\ndef test_nfloat_rationals():\n    assert nfloat(1/2) == 0.5\n    assert nfloat(3/4) == 0.75\n    assert nfloat(Rational(1, 3)) == 0.3333333333333333\n\ndef test_nfloat_powers():\n    assert nfloat(x**2) == x**2\n    assert nfloat(x**3) == x**3\n    assert nfloat(2**x) == 2**x\n    assert nfloat(x**y) == x**y\n\ndef test_nfloat_exponents():\n    assert nfloat(x**2, exponent=True) == x**2.0\n    assert nfloat(x**y, exponent=True) == x**y.n(15)\n\ndef test_nfloat_containers():\n    assert nfloat((1, 2)) == (1.0, 2.0)\n    assert nfloat([1, 2, 3]) == [1.0, 2.0, 3.0]\n    assert nfloat({'a': 1, 'b': 2}) == {'a': 1.0, 'b': 2.0}\n\ndef test_nfloat_dictionaries():\n    assert nfloat({'a': 1, 'b': 2}, dkeys=True) == {'a': 1.0, 'b': 2.0}\n    assert nfloat({'a': 1, 'b': 2}) == {'a': 1, 'b': 2}\n\ndef test_nfloat_matrices():\n    m = Matrix([[1, 2], [3, 4]])\n    assert nfloat(m) == Matrix([[1.0, 2.0], [3.0, 4.0]])\n\ndef test_nfloat_matrix_symbol():\n    m = MatrixSymbol('m', 2, 2)\n    assert nfloat(m) == MatrixSymbol('m', 2, 2)\n\ndef test_nfloat_immutable_matrices():\n    m = ImmutableMatrix([[1, 2], [3, 4]])\n    assert nfloat(m) == ImmutableMatrix([[1.0, 2.0], [3.0, 4.0]])\n\ndef test_nfloat_immutable_sparse_matrices():\n    m = ImmutableSparseMatrix([[1, 0, 0], [0, 2, 0], [0, 0, 3]])\n    assert nfloat(m) == ImmutableSparseMatrix([[1.0, 0.0, 0.0], [0.0, 2.0, 0.0], [0.0, 0.0, 3.0]])\n\ndef test_nfloat_sparse_matrices():\n    m = SparseMatrix([[1, 0, 0], [0, 2, 0], [0, 0, 3]])\n    assert nfloat(m) == SparseMatrix([[1.0, 0.0, 0.0], [0.0, 2.0, 0.0], [0.0, 0.0, 3.0]])\n\ndef test_nfloat_raises():\n    with raises(TypeError):\n        nfloat(None)\n    with raises(TypeError):\n        nfloat(True)\n    with raises(TypeError):\n        nfloat(list)\n\n\n\ndef test_count_ops_basic():\n    assert count_ops(1) == 0\n    assert count_ops(x) == 0\n    assert count_ops(x + y) == ADD\n    assert count_ops(x * y) == MUL\n    assert count_ops(x**2) == POW\n    assert count_ops(sin(x)) == SIN\n    assert count_ops(log(x)) == LOG\n    assert count_ops(exp(x)) == EXP\n    assert count_ops(x**y) == POW\n    assert count_ops(x + y + z) == 2*ADD\n    assert count_ops(x * y * z) == 2*MUL\n    assert count_ops(x**y**z) == 2*POW\n    assert count_ops(x + y - z) == ADD + SUB\n    assert count_ops(x * y / z) == MUL + DIV\n    assert count_ops(x**y + z) == POW + ADD\n    assert count_ops(x**y * z) == POW + MUL\n\ndef test_count_ops_nested():\n    assert count_ops((x + y)**2) == 2*POW + 2*ADD\n    assert count_ops(x * (y + z)) == MUL + ADD\n    assert count_ops(x * (y * z)) == 2*MUL\n    assert count_ops(x**y + y**z) == POW + POW + ADD\n    assert count_ops((x + y) * (z + w)) == 2*MUL + 2*ADD\n\ndef test_count_ops_complex():\n    assert count_ops(x + y * z) == ADD + MUL\n    assert count_ops(x * (y + z)) == MUL + ADD\n    assert count_ops(x**y + z**w) == POW + POW + ADD\n    assert count_ops(x * y / z) == MUL + DIV\n    assert count_ops(x + y - z) == ADD + SUB\n    assert count_ops(x**y * z) == POW + MUL\n    assert count_ops(x**y + z) == POW + ADD\n    assert count_ops(x * (y + z)) == MUL + ADD\n    assert count_ops((x + y)**2) == 2*POW + 2*ADD\n    assert count_ops(x * (y * z)) == 2*MUL\n    assert count_ops((x + y) * (z + w)) == 2*MUL + 2*ADD\n    assert count_ops(x * y / z) == MUL + DIV\n    assert count_ops(x + y - z) == ADD + SUB\n\ndef test_count_ops_iterable():\n    assert count_ops([x, y, z]) == ADD + 2*MUL\n    assert count_ops([x, y, z]) == ADD + 2*MUL\n    assert count_ops({x: y, z: w}) == 2*ADD\n    assert count_ops({x: y, z: w}) == 2*ADD\n    assert count_ops([x, y, z]) == ADD + 2*MUL\n    assert count_ops([x, y, z]) == ADD + 2*MUL\n    assert count_ops({x: y, z: w}) == 2*ADD\n    assert count_ops({x: y, z: w}) == 2*ADD\n    assert count_ops([x, y, z]) == ADD + 2*MUL\n    assert count_ops([x, y, z]) == ADD + 2*MUL\n    assert count_ops({x: y, z: w}) == 2*ADD\n    assert count_ops({x: y, z: w}) == 2*ADD\n\n\n\n"], "sample_135": ["\nfrom sympy.core.basic import (Basic, Atom, preorder_traversal, as_Basic, _atomic, _aresame)\nfrom sympy.core.function import Function, Lambda\nfrom sympy.core.compatibility import default_sort_key\nfrom sympy.functions.elementary.exponential import exp\nfrom sympy.core.function import Function\nfrom sympy.functions.elementary.trigonometric import cos, sin\nfrom sympy import symbols, S, Integer, sympify\nfrom sympy.abc import x, y, z\nimport unittest\nfrom sympy.testing.pytest import raises\n\nclass TestBasic(unittest.TestCase):\n\n    def test_basic_init(self):\n        b = Basic('test', [1, 2, 3])\n        self.assertEqual(b.func, 'test')\n        self.assertEqual(b.args, (1, 2, 3))\n\n    def test_atom_is_atom(self):\n        self.assertTrue(Atom(1).is_Atom)\n        self.assertFalse(Basic(1).is_Atom)\n\n    def test_atom_matches(self):\n        a = Atom(1)\n        b = Atom(1)\n        self.assertEqual(a.matches(b, {}), {})\n\n    def test_atom_xreplace(self):\n        a = Atom(1)\n        self.assertEqual(a.xreplace({a: 2}), 2)\n\n    def test_atom_doit(self):\n        a = Atom(1)\n        self.assertEqual(a.doit(), 1)\n\n    def test_preorder_traversal(self):\n        expr = (x + y) * z\n        result = list(preorder_traversal(expr))\n        self.assertEqual(result, [expr, z, x + y, y, x])\n\n    def test_preorder_traversal_with_keys(self):\n        expr = (x + y) * z\n        result = list(preorder_traversal(expr, keys=True))\n        self.assertEqual(result, [expr, z, x + y, x, y])\n\n    def test_preorder_traversal_skip(self):\n        expr = (x + y) * z\n        pt = preorder_traversal(expr)\n        for i in pt:\n            print(i)\n            if i == x + y:\n                pt.skip()\n        self.assertEqual(list(pt), [expr, z])\n\n    def test_atomic(self):\n        self.assertEqual(_atomic(x + y), {x, y})\n        self.assertEqual(_atomic(x + f(y)), {x, f(y)})\n        self.assertEqual(_atomic(Derivative(f(x), x) + cos(x) + y), {y, cos(x), Derivative(f(x), x)})\n\n    def test_aresame(self):\n        self.assertTrue(_aresame(2, S(2)))\n        self.assertFalse(_aresame(2, S(2.0)))\n\n    def test_as_basic(self):\n        self.assertEqual(as_Basic(1), 1)\n        self.assertEqual(as_Basic(S(1)), 1)\n        self.assertEqual(as_Basic(x), x)\n\n\n\n"], "sample_33": ["\nimport unittest\nfrom django.dispatch import Signal, receiver\nfrom django.conf import settings\nfrom unittest.mock import patch, MagicMock\nimport weakref\n\nclass TestSignal(unittest.TestCase):\n\n    def test_signal_creation(self):\n        signal = Signal()\n        self.assertEqual(signal.receivers, [])\n        self.assertIsNone(signal.sender_receivers_cache)\n\n    def test_signal_connect_disconnect(self):\n        signal = Signal()\n        receiver_func = MagicMock()\n        signal.connect(receiver_func)\n        self.assertIn((id(receiver_func), None), signal.receivers)\n        signal.disconnect(receiver_func)\n        self.assertNotIn((id(receiver_func), None), signal.receivers)\n\n    def test_signal_connect_with_sender(self):\n        signal = Signal()\n        receiver_func = MagicMock()\n        signal.connect(receiver_func, sender=object())\n        self.assertIn((id(receiver_func), id(object())), signal.receivers)\n\n    def test_signal_connect_with_dispatch_uid(self):\n        signal = Signal()\n        receiver_func = MagicMock()\n        signal.connect(receiver_func, dispatch_uid='test_uid')\n        self.assertIn((('test_uid', None), id(receiver_func)), signal.receivers)\n\n    def test_signal_connect_duplicate_dispatch_uid(self):\n        signal = Signal()\n        receiver_func = MagicMock()\n        signal.connect(receiver_func, dispatch_uid='test_uid')\n        with self.assertRaises(ValueError):\n            signal.connect(receiver_func, dispatch_uid='test_uid')\n\n    def test_signal_has_listeners(self):\n        signal = Signal()\n        receiver_func = MagicMock()\n        signal.connect(receiver_func)\n        self.assertTrue(signal.has_listeners())\n        signal.disconnect(receiver_func)\n        self.assertFalse(signal.has_listeners())\n\n    def test_signal_send(self):\n        signal = Signal()\n        receiver_func = MagicMock()\n        signal.connect(receiver_func)\n        sender = object()\n        response = signal.send(sender)\n        self.assertEqual(len(response), 1)\n        self.assertEqual(response[0][0], receiver_func)\n\n    def test_signal_send_with_kwargs(self):\n        signal = Signal()\n        receiver_func = MagicMock()\n        signal.connect(receiver_func)\n        sender = object()\n        response = signal.send(sender, arg1='value1', arg2='value2')\n        self.assertEqual(len(response), 1)\n        self.assertEqual(response[0][0], receiver_func)\n        self.assertEqual(receiver_func.call_args[1], {'arg1': 'value1', 'arg2': 'value2'})\n\n    def test_signal_send_robust(self):\n        signal = Signal()\n        receiver_func = MagicMock(side_effect=ValueError)\n        signal.connect(receiver_func)\n        sender = object()\n        response = signal.send_robust(sender)\n        self.assertEqual(len(response), 1)\n        self.assertEqual(response[0][1], ValueError)\n\n    def test_receiver_decorator(self):\n        signal = Signal()\n        @receiver(signal)\n        def test_receiver(sender, **kwargs):\n            pass\n        self.assertIn((id(test_receiver), id(signal)), signal.receivers)\n\n    def test_receiver_decorator_multiple_signals(self):\n        signal1 = Signal()\n        signal2 = Signal()\n        @receiver([signal1, signal2])\n        def test_receiver(sender, **kwargs):\n            pass\n        self.assertIn((id(test_receiver), id(signal1)), signal1.receivers)\n        self.assertIn((id(test_receiver), id(signal2)), signal2.receivers)\n\n    def test_weak_references(self):\n        signal = Signal()\n        class TestClass:\n            def __init__(self):\n                self.called = False\n\n            def receiver(self, sender, **kwargs):\n                self.called = True\n        instance = TestClass()\n        signal.connect(instance.receiver, weak=True)\n        del instance\n        self.assertFalse(instance.called)\n        signal.send(object())\n        self.assertFalse(instance.called)\n\n    @patch('django.dispatch.logging.getLogger')\n    def test_error_logging(self, mock_getLogger):\n        signal = Signal()\n        receiver_func = MagicMock(side_effect=ValueError)\n        signal.connect(receiver_func)\n        sender = object()\n        signal.send_robust(sender)\n        mock_getLogger.assert_called_once_with('django.dispatch')\n        logger = mock_getLogger.return_value\n        logger.error.assert_called_once_with(\n            'Error calling %s in Signal.send_robust() (%s)',\n            receiver_func.__qualname__,\n            ValueError,\n            exc_info=True,\n        )\n\n\n\n"], "sample_156": ["\nfrom sympy.parsing.mathematica import parse_mathematica, MathematicaParser\nfrom sympy import *\n\ndef test_parse_mathematica_basic():\n    code = \"x + y\"\n    result = parse_mathematica(code)\n    assert result == Add(x, y)\n\ndef test_parse_mathematica_power():\n    code = \"x^2\"\n    result = parse_mathematica(code)\n    assert result == Pow(x, 2)\n\ndef test_parse_mathematica_multiplication():\n    code = \"2*x*y\"\n    result = parse_mathematica(code)\n    assert result == Mul(2, x, y)\n\ndef test_parse_mathematica_parentheses():\n    code = \"(x + y)\"\n    result = parse_mathematica(code)\n    assert result == Add(x, y)\n\ndef test_parse_mathematica_functions():\n    code = \"Sin[x]\"\n    result = parse_mathematica(code)\n    assert result == sin(x)\n\ndef test_parse_mathematica_nested_functions():\n    code = \"Sin[Cos[x]]\"\n    result = parse_mathematica(code)\n    assert result == sin(cos(x))\n\ndef test_parse_mathematica_list():\n    code = \"{x, y, z}\"\n    result = parse_mathematica(code)\n    assert result == Tuple(x, y, z)\n\ndef test_parse_mathematica_complex_expression():\n    code = \"Simplify[Expand[(x + y)^2]]\"\n    result = parse_mathematica(code)\n    assert result == x**2 + 2*x*y + y**2\n\ndef test_parse_mathematica_fullform():\n    code = \"FullForm[Sin[x]]\"\n    result = parse_mathematica(code)\n    assert result == Function(\"Sin\", x)\n\ndef test_parse_mathematica_fullform_list():\n    code = \"FullForm[Downvalues[Sin]]\"\n    result = parse_mathematica(code)\n    assert isinstance(result, list)\n    assert result[0] == \"Function\"\n    assert result[1] == \"Sin\"\n    assert isinstance(result[2], list)\n\ndef test_parse_mathematica_error():\n    code = \"x + y + z\"\n    with pytest.raises(SyntaxError):\n        parse_mathematica(code)\n\n"], "sample_149": ["\nfrom sympy.polys.monomials import ( itermonomials, monomial_count, monomial_mul, monomial_div, monomial_gcd, monomial_lcm, monomial_max, monomial_min, monomial_divides, monomial_pow, Monomial, )\nfrom sympy import symbols, S, sympify\nfrom sympy.polys.orderings import monomial_key\nfrom sympy.testing.pytest import raises\n\ndef test_itermonomials():\n    for n in range(5):\n        for max_degree in range(n + 1):\n            for min_degree in range(max_degree + 1):\n                gens = [symbols(f'x{i}') for i in range(n)]\n                for monom in itermonomials(gens, max_degree, min_degree):\n                    assert monomial_deg(monom) in range(min_degree, max_degree + 1)\n\ndef test_monomial_count():\n    for n in range(5):\n        for N in range(n + 1):\n            gens = [symbols(f'x{i}') for i in range(n)]\n            count = monomial_count(n, N)\n            expected = factorial(n + N) // (factorial(n) * factorial(N))\n            assert count == expected\n\ndef test_monomial_mul():\n    for i in range(5):\n        for j in range(5):\n            A = tuple(range(i))\n            B = tuple(range(j))\n            C = monomial_mul(A, B)\n            assert C == tuple(a + b for a, b in zip(A, B))\n\ndef test_monomial_div():\n    for i in range(5):\n        for j in range(5):\n            A = tuple(range(i))\n            B = tuple(range(j))\n            C = monomial_div(A, B)\n            if all(a >= b for a, b in zip(A, B)):\n                assert C == tuple(a - b for a, b in zip(A, B))\n            else:\n                assert C is None\n\ndef test_monomial_ldiv():\n    for i in range(5):\n        for j in range(5):\n            A = tuple(range(i))\n            B = tuple(range(j))\n            C = monomial_ldiv(A, B)\n            assert C == tuple(a - b for a, b in zip(A, B))\n\ndef test_monomial_pow():\n    for i in range(5):\n        A = tuple(range(i))\n        k = 2\n        C = monomial_pow(A, k)\n        assert C == tuple(a * k for a in A)\n\ndef test_monomial_gcd():\n    for i in range(5):\n        for j in range(5):\n            A = tuple(range(i))\n            B = tuple(range(j))\n            C = monomial_gcd(A, B)\n            assert C == tuple(min(a, b) for a, b in zip(A, B))\n\ndef test_monomial_lcm():\n    for i in range(5):\n        for j in range(5):\n            A = tuple(range(i))\n            B = tuple(range(j))\n            C = monomial_lcm(A, B)\n            assert C == tuple(max(a, b) for a, b in zip(A, B))\n\ndef test_monomial_divides():\n    for i in range(5):\n        for j in range(5):\n            A = tuple(range(i))\n            B = tuple(range(j))\n            assert monomial_divides(A, B) == all(a <= b for a, b in zip(A, B))\n\ndef test_monomial_max():\n    for i in range(5):\n        for j in range(5):\n            for k in range(5):\n                A = tuple(range(i))\n                B = tuple(range(j))\n                C = tuple(range(k))\n                D = monomial_max(A, B, C)\n                assert D == tuple(max(a, b, c) for a, b, c in zip(A, B, C))\n\ndef test_monomial_min():\n    for i in range(5):\n        for j in range(5):\n            for k in range(5):\n                A = tuple(range(i))\n                B = tuple(range(j))\n                C = tuple(range(k))\n                D = monomial_min(A, B, C)\n                assert D == tuple(min(a, b, c) for a, b, c in zip(A, B, C))\n\ndef test_monomial_deg():\n    for i in range(5):\n        A = tuple(range(i))\n        assert monomial_deg(A) == sum(A)\n\ndef test_term_div():\n    from sympy.polys.polyutils import ring\n    R = ring(ZZ)\n    a = (2, 3)\n    b = (1, 1)\n    c = term_div(a, b, R)\n    assert c == (2, 2)\n    d = (3, 4)\n    e = (1, 1)\n    f = term_div(d, e, R)\n    assert f == (3, 3)\n\ndef test_monomial_class():\n    m = Monomial((1, 2, 3))\n    assert m.exponents == (1, 2, 3)\n    assert m.gens is None\n    m = Monomial((1, 2, 3), gens=[x, y, z])\n    assert m.exponents == (1, 2, 3)\n    assert m.gens == [x, y, z]\n    assert str(m) == \"x**1*y**2*z**3\"\n    assert m.as_expr(x, y, z) == x**1 * y**2 * z**3\n    assert m * Monomial((4, 5, 6)) == Monomial((5, 7, 9))\n    assert m / Monomial((1, 2, 3)) == Monomial((0, 0, 0))\n    assert m ** 2 == Monomial((2, 4, 6))\n    assert m.gcd(Monomial((1, 2, 3))) == Monomial((1, 2, 3))\n    assert m.lcm(Monomial((1, 2, 3))) == Monomial((1, 2, 3))\n\ndef test_monomial_mulpow():\n    for i in range(5):\n        for j in range(5):\n            A = tuple(range(i))\n            B = tuple(range(j))\n            k = 2\n            C = monomial_mulpow(A, B, k)\n            assert C == tuple(a + b*k for a, b in zip(A, B))\n\ndef test_monomial_ops():\n    ops = MonomialOps(3)\n    mul = ops.mul()\n    assert mul((1, 2), (3, 4)) == (4, 6)\n    pow = ops.pow()\n    assert pow((1, 2), 3) == (3, 6)\n    ldiv = ops.ldiv()\n    assert ldiv((3, 4), (1, 2)) == (2, 2)\n    div = ops.div()\n    assert div((3, 4), (1, 2)) == (2, 2)\n    lcm = ops.lcm()\n    assert lcm((3, 4), (1, 2)) == (3, 4)\n    gcd = ops.gcd()\n    assert gcd((3, 4), (1, 2)) == (1, 2)\n\n\n\n"], "sample_151": ["\nfrom sympy.geometry.point import Point, Point2D, Point3D\nfrom sympy.geometry.entity import GeometryEntity\nfrom sympy.testing.pytest import raises, warns\nfrom sympy import (\n    S,\n    sqrt,\n    pi,\n    Rational,\n    Symbol,\n    cos,\n    sin,\n    Matrix,\n    Add,\n    Point2D,\n    Point3D,\n    Line,\n    Line3D,\n    Plane,\n    evaluate,\n)\nfrom sympy.core.sympify import sympify\n\ndef test_point_creation():\n    assert Point(1, 2) == Point(1, 2)\n    assert Point([1, 2]) == Point(1, 2)\n    assert Point(1, 2, evaluate=False) != Point(1, 2)\n    assert Point(1, 2, evaluate=False) == Point([1, 2], evaluate=False)\n\ndef test_point_2d_creation():\n    assert Point2D(1, 2) == Point2D(1, 2)\n    assert Point2D([1, 2]) == Point2D(1, 2)\n    assert Point2D(1, 2, evaluate=False) != Point2D(1, 2)\n    assert Point2D(1, 2, evaluate=False) == Point2D([1, 2], evaluate=False)\n\ndef test_point_3d_creation():\n    assert Point3D(1, 2, 3) == Point3D(1, 2, 3)\n    assert Point3D([1, 2, 3]) == Point3D(1, 2, 3)\n    assert Point3D(1, 2, 3, evaluate=False) != Point3D(1, 2, 3)\n    assert Point3D(1, 2, 3, evaluate=False) == Point3D([1, 2, 3], evaluate=False)\n\ndef test_point_equality():\n    p1 = Point(1, 2)\n    p2 = Point(1, 2)\n    p3 = Point(1, 3)\n    assert p1 == p2\n    assert p1 != p3\n\ndef test_point_distance():\n    p1 = Point(1, 2)\n    p2 = Point(4, 6)\n    assert p1.distance(p2) == 5\n\ndef test_point_taxicab_distance():\n    p1 = Point(1, 2)\n    p2 = Point(4, 6)\n    assert p1.taxicab_distance(p2) == 7\n\ndef test_point_canberra_distance():\n    p1 = Point(1, 2)\n    p2 = Point(4, 6)\n    assert p1.canberra_distance(p2) == 1\n\ndef test_point_intersection():\n    p1 = Point(1, 2)\n    p2 = Point(3, 4)\n    assert p1.intersection(p2) == []\n\ndef test_point_intersection_self():\n    p1 = Point(1, 2)\n    assert p1.intersection(p1) == [p1]\n\ndef test_point_rotate():\n    p1 = Point(1, 0)\n    p2 = p1.rotate(pi/2)\n    assert p2 == Point(0, 1)\n\ndef test_point_rotate_around_point():\n    p1 = Point(1, 0)\n    p2 = Point(2, 0)\n    p3 = p1.rotate(pi/2, pt=p2)\n    assert p3 == Point(0, 1)\n\ndef test_point_scale():\n    p1 = Point(1, 2)\n    p2 = p1.scale(2)\n    assert p2 == Point(2, 4)\n\ndef test_point_scale_xy():\n    p1 = Point(1, 2)\n    p2 = p1.scale(2, 3)\n    assert p2 == Point(2, 6)\n\ndef test_point_translate():\n    p1 = Point(1, 2)\n    p2 = p1.translate(2)\n    assert p2 == Point(3, 2)\n\ndef test_point_translate_xyz():\n    p1 = Point(1, 2, 3)\n    p2 = p1.translate(2, 3, 4)\n    assert p2 == Point(3, 5, 7)\n\ndef test_point_transform():\n    p1 = Point(1, 2)\n    matrix = Matrix([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n    p2 = p1.transform(matrix)\n    assert p2 == Point(1, 2)\n\ndef test_point_transform_3d():\n    p1 = Point(1, 2, 3)\n    matrix = Matrix([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n    p2 = p1.transform(matrix)\n    assert p2 == Point(1, 2, 3)\n\ndef test_point_are_collinear():\n    p1 = Point(0, 0, 0)\n    p2 = Point(1, 1, 1)\n    p3 = Point(2, 2, 2)\n    assert Point.are_collinear(p1, p2, p3) is True\n\ndef test_point_are_collinear_not_collinear():\n    p1 = Point(0, 0, 0)\n    p2 = Point(1, 1, 1)\n    p3 = Point(1, 2, 3)\n    assert Point.are_collinear(p1, p2, p3) is False\n\ndef test_point_direction_cosine():\n    p1 = Point3D(1, 2, 3)\n    p2 = Point3D(2, 3, 5)\n    assert p1.direction_cosine(p2) == [sqrt(6)/6, sqrt(6)/6, sqrt(6)/3]\n\ndef test_point_direction_ratio():\n    p1 = Point3D(1, 2, 3)\n    p2 = Point3D(2, 3, 5)\n    assert p1.direction_ratio(p2) == [1, 1, 2]\n\n"], "sample_38": ["\nfrom django.contrib.auth.forms import (\n    AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm, PasswordResetForm, ReadOnlyPasswordHashField, ReadOnlyPasswordHashWidget, SetPasswordForm, UserChangeForm, UserCreationForm,\n)\nfrom django.forms import forms\nfrom django.forms.fields import CharField, Field, IntegerField\nfrom django.test import TestCase\nfrom django.contrib.auth.models import User\nfrom django.utils.encoding import force_bytes\nfrom django.utils.http import urlsafe_base64_encode\nfrom django.core.mail.message import EmailMessage\nfrom unittest.mock import patch, MagicMock\nfrom django.contrib.sites.shortcuts import get_current_site\nfrom django.template import TemplateDoesNotExist\nfrom django.template.loader import render_to_string\n\nclass TestReadOnlyPasswordHashWidget(TestCase):\n    def test_render(self):\n        widget = ReadOnlyPasswordHashWidget()\n        context = {'summary': [{'label': 'Password Hash', 'value': 'hashed_password'}]}\n        rendered_html = widget.render('test_name', None, context)\n        self.assertIn('<div class=\"password-hash\">', rendered_html)\n        self.assertIn('Password Hash: hashed_password', rendered_html)\n\nclass TestReadOnlyPasswordHashField(TestCase):\n    def test_render(self):\n        field = ReadOnlyPasswordHashField()\n        context = {'summary': [{'label': 'Password Hash', 'value': 'hashed_password'}]}\n        rendered_html = field.render('test_name', None, context)\n        self.assertIn('<div class=\"password-hash\">', rendered_html)\n        self.assertIn('Password Hash: hashed_password', rendered_html)\n\nclass TestUsernameField(TestCase):\n    def test_to_python(self):\n        field = UsernameField()\n        self.assertEqual(field.to_python('test_username'), 'test_username')\n\n    def test_widget_attrs(self):\n        field = UsernameField()\n        attrs = field.widget_attrs(forms.TextInput())\n        self.assertEqual(attrs['autocapitalize'], 'none')\n        self.assertEqual(attrs['autocomplete'], 'username')\n\nclass TestUserCreationForm(TestCase):\n    def test_clean_password2(self):\n        form = UserCreationForm()\n        form.data = {\n            'username': 'test_user',\n            'password1': 'test_password',\n            'password2': 'test_password'\n        }\n        form.is_valid()\n        self.assertEqual(form.cleaned_data['password2'], 'test_password')\n\n    def test_clean_password2_mismatch(self):\n        form = UserCreationForm()\n        form.data = {\n            'username': 'test_user',\n            'password1': 'test_password',\n            'password2': 'wrong_password'\n        }\n        with self.assertRaises(ValidationError):\n            form.is_valid()\n\n    def test_save(self):\n        form = UserCreationForm()\n        form.data = {\n            'username': 'test_user',\n            'password1': 'test_password',\n            'password2': 'test_password'\n        }\n        form.is_valid()\n        user = form.save()\n        self.assertEqual(user.username, 'test_user')\n        self.assertEqual(user.password, 'test_password')\n\nclass TestUserChangeForm(TestCase):\n    def test_init(self):\n        form = UserChangeForm(instance=User.objects.create(username='test_user'))\n        self.assertEqual(form.fields['password'].help_text, '../password/')\n\nclass TestAuthenticationForm(TestCase):\n    def test_clean(self):\n        form = AuthenticationForm()\n        form.data = {\n            'username': 'test_user',\n            'password': 'test_password'\n        }\n        form.is_valid()\n        self.assertEqual(form.cleaned_data['username'], 'test_user')\n        self.assertEqual(form.cleaned_data['password'], 'test_password')\n\n    def test_clean_invalid_login(self):\n        form = AuthenticationForm()\n        form.data = {\n            'username': 'wrong_user',\n            'password': 'wrong_password'\n        }\n        with self.assertRaises(ValidationError):\n            form.is_valid()\n\nclass TestPasswordResetForm(TestCase):\n    @patch('django.contrib.auth.forms.PasswordResetForm.send_mail')\n    def test_save(self, mock_send_mail):\n        form = PasswordResetForm()\n        form.data = {'email': 'test@example.com'}\n        form.is_valid()\n        form.save()\n        mock_send_mail.assert_called_once()\n\nclass TestSetPasswordForm(TestCase):\n    def test_clean_new_password2(self):\n        user = User.objects.create(username='test_user')\n        form = SetPasswordForm(user)\n        form.data = {\n            'new_password1': 'test_password',\n            'new_password2': 'test_password'\n        }\n        form.is_valid()\n        self.assertEqual(form.cleaned_data['new_password2'], 'test_password')\n\n    def test_clean_new_password2_mismatch(self):\n        user = User.objects.create(username='test_user')\n        form = SetPasswordForm(user)\n        form.data = {\n            'new_password1': 'test_password',\n            'new_password2': 'wrong_password'\n        }\n        with self.assertRaises(ValidationError):\n            form.is_valid()\n\n    def test_save(self):\n        user = User.objects.create(username='test_user')\n        form = SetPasswordForm(user)\n        form.data = {\n            'new_password1': 'test_password',\n            'new_password2': 'test_password'\n        }\n        form.is_valid()\n        form.save()\n        self.assertEqual(user.password, 'test_password')\n\nclass TestPasswordChangeForm(TestCase):\n    def test_clean_old_password(self):\n        user = User.objects.create(username='test_user', password='test_password')\n        form = PasswordChangeForm(user)\n        form.data = {\n            'old_password': 'test_password',\n            'new_password1': 'new_password',\n            'new_password2': 'new_password'\n        }\n        form.is_valid()\n        self.assertEqual(form.cleaned_data['new_password1'], 'new_password')\n\n    def test_clean_old_password_incorrect(self):\n        user = User.objects.create(username='test_user', password='test_password')\n        form = PasswordChangeForm(user)\n        form.data = {\n            'old_password': 'wrong_password',\n            'new_password1': 'new_password',\n            'new_password2': 'new_password'\n        }\n        with self.assertRaises(ValidationError):\n            form.is_valid()\n\n    def test_save(self):\n        user = User.objects.create(username='test_user', password='test_password')\n        form = PasswordChangeForm(user)\n        form.data = {\n            'old_password': 'test_password',\n            'new_password1': 'new_password',\n            'new_password2': 'new_password'\n        }\n        form.is_valid()\n        form.save()\n        self.assertEqual(user.password, 'new_password')\n\nclass TestAdminPasswordChangeForm(TestCase):\n    def test_clean_password2(self):\n        user = User.objects.create(username='test_user')\n        form = AdminPasswordChangeForm(user)\n        form.data = {\n            'password1': 'test_password',\n            'password2': 'test_password'\n        }\n        form.is_valid()\n        self.assertEqual(form.cleaned_data['password2'], 'test_password')\n\n    def test_clean_password2_mismatch(self):\n        user = User.objects.create(username='test_user')\n        form = AdminPasswordChangeForm(user)\n        form.data = {\n            'password1': 'test_password',\n            'password2': 'wrong_password'\n        }\n        with self.assertRaises(ValidationError):\n            form.is_valid()\n\n    def test_save(self):\n        user = User.objects.create(username='test_user')\n        form = AdminPasswordChangeForm(user)\n        form.data = {\n            'password1': 'test_password',\n            'password2': 'test_password'\n        }\n        form.is_valid()\n        form.save()\n        self.assertEqual(user.password, 'test_password')\n\n\n\n"], "sample_102": ["\nimport unittest\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.datasets import make_blobs\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.utils.estimator_checks import check_estimator\nfrom sklearn.exceptions import ConvergenceWarning\n\nfrom sklearn.ensemble.iforest import _average_path_length\n\nclass TestIsolationForest(unittest.TestCase):\n\n    def test_estimator_checks(self):\n        check_estimator(IsolationForest())\n\n    def test_fit_predict_basic(self):\n        X, y = make_blobs(n_samples=100, centers=2, random_state=42)\n        clf = IsolationForest()\n        clf.fit(X)\n        y_pred = clf.predict(X)\n        self.assertEqual(len(y_pred), len(X))\n        self.assertIn(1, np.unique(y_pred))\n        self.assertIn(-1, np.unique(y_pred))\n\n    def test_fit_predict_contamination(self):\n        X, y = make_blobs(n_samples=100, centers=2, random_state=42)\n        clf = IsolationForest(contamination=0.2)\n        clf.fit(X)\n        y_pred = clf.predict(X)\n        self.assertEqual(len(y_pred), len(X))\n        self.assertIn(1, np.unique(y_pred))\n        self.assertIn(-1, np.unique(y_pred))\n\n    def test_decision_function(self):\n        X, y = make_blobs(n_samples=100, centers=2, random_state=42)\n        clf = IsolationForest()\n        clf.fit(X)\n        scores = clf.decision_function(X)\n        self.assertEqual(len(scores), len(X))\n        self.assertTrue(np.all(scores.ndim == 1))\n        self.assertTrue(np.min(scores) < 0)\n        self.assertTrue(np.max(scores) > 0)\n\n    def test_predict_proba(self):\n        X, y = make_blobs(n_samples=100, centers=2, random_state=42)\n        clf = IsolationForest()\n        clf.fit(X)\n        proba = clf.predict_proba(X)\n        self.assertEqual(proba.shape, (X.shape[0], 2))\n        self.assertTrue(np.all(proba[:, 0] >= 0))\n        self.assertTrue(np.all(proba[:, 1] >= 0))\n        self.assertTrue(np.all(proba[:, 0] + proba[:, 1] == 1))\n\n    def test_behaviour_old(self):\n        X, y = make_blobs(n_samples=100, centers=2, random_state=42)\n        clf = IsolationForest(behaviour='old')\n        clf.fit(X)\n        scores = clf.decision_function(X)\n        self.assertEqual(clf.offset_, -0.5)\n        self.assertTrue(np.min(scores) < 0)\n        self.assertTrue(np.max(scores) > 0)\n\n    def test_behaviour_new(self):\n        X, y = make_blobs(n_samples=100, centers=2, random_state=42)\n        clf = IsolationForest(behaviour='new')\n        clf.fit(X)\n        scores = clf.decision_function(X)\n        self.assertEqual(clf.offset_, -0.5)\n        self.assertTrue(np.min(scores) < 0)\n        self.assertTrue(np.max(scores) > 0)\n\n    def test_average_path_length(self):\n        n_samples_leaf = np.array([1, 2, 3, 4, 5])\n        expected_path_length = np.array([0, 1, 1.60943791, 2.19722457, 2.63890561])\n        self.assertTrue(np.allclose(_average_path_length(n_samples_leaf),\n                                    expected_path_length))\n\n    def test_contamination_auto(self):\n        X, y = make_blobs(n_samples=100, centers=2, random_state=42)\n        clf = IsolationForest(contamination=\"auto\")\n        clf.fit(X)\n        self.assertTrue(0.0 < clf._contamination < 0.5)\n\n    def test_warn_contamination_legacy(self):\n        with self.assertWarns(FutureWarning):\n            clf = IsolationForest(contamination=\"legacy\")\n            clf.fit(X)\n\n\n\n"], "sample_5": ["\nfrom django.db import models\nfrom django.db.models.deletion import (\n    CASCADE, PROTECT, SET, SET_NULL, SET_DEFAULT, DO_NOTHING,\n    Collector, ProtectedError\n)\nfrom django.test import TestCase\nfrom django.db.models import signals, sql\nfrom django.db.models.query import QuerySet\nfrom django.utils import timezone\n\nclass TestDeletion(TestCase):\n\n    def setUp(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=100)\n\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            author = models.ForeignKey(Author, on_delete=CASCADE)\n\n        self.Author = Author\n        self.Book = Book\n\n    def test_collector_add(self):\n        collector = Collector(using='default')\n        authors = [self.Author.objects.create(name='Author 1'),\n                   self.Author.objects.create(name='Author 2')]\n        collector.add(authors)\n        self.assertEqual(len(collector.data[self.Author]), 2)\n\n    def test_collector_add_nullable(self):\n        collector = Collector(using='default')\n        books = [self.Book.objects.create(title='Book 1', author=None),\n                 self.Book.objects.create(title='Book 2', author=None)]\n        collector.add(books, nullable=True)\n        self.assertEqual(len(collector.data[self.Book]), 2)\n\n    def test_collector_add_reverse_dependency(self):\n        collector = Collector(using='default')\n        authors = [self.Author.objects.create(name='Author 1'),\n                   self.Author.objects.create(name='Author 2')]\n        books = [self.Book.objects.create(title='Book 1', author=authors[0]),\n                 self.Book.objects.create(title='Book 2', author=authors[1])]\n        collector.add(books, reverse_dependency=True)\n        self.assertIn(self.Book, collector.dependencies)\n        self.assertIn(self.Author, collector.dependencies[self.Book])\n\n    def test_collector_collect(self):\n        collector = Collector(using='default')\n        authors = [self.Author.objects.create(name='Author 1'),\n                   self.Author.objects.create(name='Author 2')]\n        books = [self.Book.objects.create(title='Book 1', author=authors[0]),\n                 self.Book.objects.create(title='Book 2', author=authors[1])]\n        collector.collect(books)\n        self.assertEqual(len(collector.data[self.Book]), 2)\n        self.assertEqual(len(collector.data[self.Author]), 2)\n\n    def test_collector_collect_related(self):\n        collector = Collector(using='default')\n        authors = [self.Author.objects.create(name='Author 1'),\n                   self.Author.objects.create(name='Author 2')]\n        books = [self.Book.objects.create(title='Book 1', author=authors[0]),\n                 self.Book.objects.create(title='Book 2', author=authors[1])]\n        collector.collect(books)\n        self.assertEqual(len(collector.data[self.Book]), 2)\n        self.assertEqual(len(collector.data[self.Author]), 2)\n\n    def test_collector_related_objects(self):\n        collector = Collector(using='default')\n        authors = [self.Author.objects.create(name='Author 1'),\n                   self.Author.objects.create(name='Author 2')]\n        books = [self.Book.objects.create(title='Book 1', author=authors[0]),\n                 self.Book.objects.create(title='Book 2', author=authors[1])]\n        collector.collect(books)\n        related_objects = collector.related_objects(self.Book.author, books)\n        self.assertEqual(len(related_objects), 2)\n\n    def test_collector_delete(self):\n        collector = Collector(using='default')\n        authors = [self.Author.objects.create(name='Author 1'),\n                   self.Author.objects.create(name='Author 2')]\n        books = [self.Book.objects.create(title='Book 1', author=authors[0]),\n                 self.Book.objects.create(title='Book 2', author=authors[1])]\n        collector.collect(books)\n        deleted_count, deleted_data = collector.delete()\n        self.assertEqual(deleted_count, 4)\n        self.assertEqual(deleted_data, {'Author': 2, 'Book': 2})\n\n    def test_protected_error(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=100)\n            books = models.ManyToManyField(Book, on_delete=PROTECT)\n\n        with self.assertRaises(ProtectedError):\n            collector = Collector(using='default')\n            authors = [self.Author.objects.create(name='Author 1')]\n            books = [self.Book.objects.create(title='Book 1', author=authors[0])]\n            collector.collect(books)\n            collector.delete()\n\n    def test_on_delete_cascade(self):\n        collector = Collector(using='default')\n        authors = [self.Author.objects.create(name='Author 1'),\n                   self.Author.objects.create(name='Author 2')]\n        books = [self.Book.objects.create(title='Book 1', author=authors[0]),\n                 self.Book.objects.create(title='Book 2', author=authors[1])]\n        collector.collect(books, on_delete=CASCADE)\n        deleted_count, deleted_data = collector.delete()\n        self.assertEqual(deleted_count, 4)\n        self.assertEqual(deleted_data, {'Author': 2, 'Book': 2})\n\n    def test_on_delete_protect(self):\n        collector = Collector(using='default')\n        authors = [self.Author.objects.create(name='Author 1'),\n                   self.Author.objects.create(name='Author 2')]\n        books = [self.Book.objects.create(title='Book 1', author=authors[0]),\n                 self.Book.objects.create(title='Book 2', author=authors[1])]\n        collector.collect(books, on_delete=PROTECT)\n        with self.assertRaises(ProtectedError):\n            collector.delete()\n\n    def test_on_delete_set(self):\n        collector = Collector(using='default')\n        authors = [self.Author.objects.create(name='Author 1'),\n                   self.Author.objects.create(name='Author 2')]\n        books = [self.Book.objects.create(title='Book 1', author=authors[0]),\n                 self.Book.objects.create(title='Book 2', author=authors[1])]\n        collector.collect(books, on_delete=SET(None))\n        deleted_count, deleted_data = collector.delete()\n        self.assertEqual(deleted_count, 2)\n        self.assertEqual(deleted_data, {'Book': 2})\n\n    def test_on_delete_set_null(self):\n        collector = Collector(using='default')\n        authors = [self.Author.objects.create(name='Author 1'),\n                   self.Author.objects.create(name='Author 2')]\n        books = [self.Book.objects.create(title='Book 1', author=authors[0]),\n                 self.Book.objects.create(title='Book 2', author=authors[1])]\n        collector.collect(books, on_delete=SET_NULL)\n        deleted_count, deleted_data = collector.delete()\n        self.assertEqual(deleted_count, 2)\n        self.assertEqual(deleted_data, {'Book': 2})\n\n    def test_on_delete_set_default(self):\n        collector = Collector(using='default')\n        authors = [self.Author.objects.create(name='Author 1'),\n                   self.Author.objects.create(name='Author 2')]\n        books = [self.Book.objects.create(title='Book 1', author=authors[0]),\n                 self.Book.objects.create(title='Book 2', author=authors[1])]\n        collector.collect(books, on_delete=SET_DEFAULT)\n        deleted_count, deleted_data = collector.delete()\n        self.assertEqual(deleted_count, 2)\n        self.assertEqual(deleted_data, {'Book': 2})\n\n    def test_on_delete_do_nothing(self):\n        collector = Collector(using='default')\n        authors = [self.Author.objects.create(name='Author 1'),\n                   self.Author.objects.create(name='Author 2')]\n        books = [self.Book.objects.create(title='Book 1', author=authors[0]),\n                 self.Book.objects.create(title='Book 2', author=authors[1])]\n        collector.collect(books, on_delete=DO_NOTHING)\n        deleted_count, deleted_data = collector.delete()\n        self.assertEqual(deleted_count, 2)\n        self.assertEqual(deleted_data, {'Book': 2})\n\n"], "sample_8": ["\nimport unittest\nfrom django.http import HttpResponse\nfrom django.test import TestCase, override_settings\nfrom django.utils.encoding import force_str\nfrom django.utils.timezone import now\nfrom django.conf import settings\nfrom django.urls import resolve\nfrom django.utils.module_loading import import_string\nfrom django.template import TemplateDoesNotExist\nfrom django.views.debug import (\n    CLEANSED_SUBSTITUTE,\n    CallableSettingWrapper,\n    ExceptionReporter,\n    cleanse_setting,\n    technical_404_response,\n    technical_500_response,\n    get_safe_settings,\n    get_default_exception_reporter_filter,\n    get_exception_reporter_filter,\n    SafeExceptionReporterFilter,\n    default_urlconf,\n)\n\nclass TestCleanseSetting(TestCase):\n    def test_cleanse_setting_basic(self):\n        with self.subTest(key='basic'):\n            self.assertEqual(cleanse_setting('key', 'value'), 'value')\n\n    def test_cleanse_setting_hidden_key(self):\n        with self.subTest(key='hidden_key'):\n            self.assertEqual(cleanse_setting('API_KEY', 'secret'), CLEANSED_SUBSTITUTE)\n\n    def test_cleanse_setting_dictionary(self):\n        with self.subTest(key='dictionary'):\n            data = {'key1': 'value1', 'API_KEY': 'secret', 'key2': {'nested_key': 'nested_value'}}\n            cleaned_data = cleanse_setting('data', data)\n            self.assertEqual(cleaned_data['key1'], 'value1')\n            self.assertEqual(cleaned_data['API_KEY'], CLEANSED_SUBSTITUTE)\n            self.assertEqual(cleaned_data['key2']['nested_key'], 'nested_value')\n\n    def test_cleanse_setting_callable(self):\n        with self.subTest(key='callable'):\n            def callable_function():\n                pass\n            wrapped_callable = CallableSettingWrapper(callable_function)\n            cleaned_callable = cleanse_setting('callable_setting', wrapped_callable)\n            self.assertIsInstance(cleaned_callable, CallableSettingWrapper)\n\nclass TestGetSafeSettings(TestCase):\n    def test_get_safe_settings(self):\n        with self.subTest(key='get_safe_settings'):\n            settings.DEBUG = False\n            settings.SECRET_KEY = 'secret'\n            expected_settings = {\n                'DEBUG': False,\n                'SECRET_KEY': CLEANSED_SUBSTITUTE,\n                # ... other settings ...\n            }\n            self.assertEqual(get_safe_settings(), expected_settings)\n\nclass TestExceptionReporter(TestCase):\n    def test_get_traceback_data(self):\n        with self.subTest(key='get_traceback_data'):\n            reporter = ExceptionReporter(None, None, None, None)\n            data = reporter.get_traceback_data()\n            self.assertIsInstance(data, dict)\n            self.assertIn('frames', data)\n            self.assertIn('request', data)\n            self.assertIn('user_str', data)\n            self.assertIn('settings', data)\n            self.assertIn('sys_executable', data)\n            self.assertIn('sys_version_info', data)\n            self.assertIn('server_time', data)\n            self.assertIn('django_version_info', data)\n            self.assertIn('sys_path', data)\n\n    def test_get_traceback_html(self):\n        with self.subTest(key='get_traceback_html'):\n            reporter = ExceptionReporter(None, None, None, None)\n            html = reporter.get_traceback_html()\n            self.assertIsInstance(html, str)\n\n    def test_get_traceback_text(self):\n        with self.subTest(key='get_traceback_text'):\n            reporter = ExceptionReporter(None, None, None, None)\n            text = reporter.get_traceback_text()\n            self.assertIsInstance(text, str)\n\nclass TestExceptionReporterFilter(TestCase):\n    def test_is_active(self):\n        with self.subTest(key='is_active'):\n            filter = SafeExceptionReporterFilter()\n            self.assertFalse(filter.is_active(None))\n\n    def test_get_post_parameters(self):\n        with self.subTest(key='get_post_parameters'):\n            filter = SafeExceptionReporterFilter()\n            request = MockRequest()\n            request.POST = {'key1': 'value1', 'API_KEY': 'secret'}\n            cleaned_post = filter.get_post_parameters(request)\n            self.assertEqual(cleaned_post, {'key1': 'value1'})\n\n    def test_cleanse_special_types(self):\n        with self.subTest(key='cleanse_special_types'):\n            filter = SafeExceptionReporterFilter()\n            self.assertEqual(filter.cleanse_special_types(None, 'value'), 'value')\n            self.assertEqual(filter.cleanse_special_types(None, [1, 2, 3]), [1, 2, 3])\n            self.assertEqual(filter.cleanse_special_types(None, {'key': 'value'}), {'key': 'value'})\n\nclass TestTechnical404Response(TestCase):\n    def test_technical_404_response(self):\n        with self.subTest(key='technical_404_response'):\n            request = MockRequest()\n            request.path_info = '/nonexistent_page'\n            response = technical_404_response(request, Http404('Page not found'))\n            self.assertEqual(response.status_code, 404)\n            self.assertEqual(response.content_type, 'text/html')\n\nclass TestTechnical500Response(TestCase):\n    def test_technical_500_response(self):\n        with self.subTest(key='technical_500_response'):\n            request = MockRequest()\n            exc_type = Exception('Test exception')\n            response = technical_500_response(request, exc_type, exc_type.__traceback__)\n            self.assertEqual(response.status_code, 500)\n            self.assertEqual(response.content_type, 'text/html')\n\nclass TestDefaultUrlconf(TestCase):\n    def test_default_urlconf(self):\n        with self.subTest(key='default_urlconf'):\n            request = MockRequest()\n            response = default_urlconf(request)\n            self.assertEqual(response.status_code, 404)\n            self.assertEqual(response.content_type, 'text/html')\n\nclass MockRequest(object):\n    def __init__(self):\n        self.path_info = '/'\n        self.POST = {}\n        self.GET = {}\n        self.FILES = {}\n        self.COOKIES = {}\n        self.urlconf = None\n        self.is_ajax = False\n\n\n\n"], "sample_105": ["\nimport unittest\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.ensemble import VotingClassifier, VotingRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.datasets import make_classification\nfrom sklearn.datasets import make_regression\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.utils.estimator_checks import check_estimator\n\nclass TestVotingClassifier(unittest.TestCase):\n\n    def test_voting_classifier_init(self):\n        VotingClassifier(estimators=[('lr', LogisticRegression())])\n        VotingClassifier(estimators=[('lr', LogisticRegression()), ('rf', RandomForestClassifier())])\n        VotingClassifier(estimators=[('lr', LogisticRegression()), ('rf', RandomForestClassifier()), ('gnb', GaussianNB())])\n\n    def test_voting_classifier_fit_predict(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier(n_estimators=50, random_state=42)\n        clf3 = GaussianNB()\n        eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='hard')\n        eclf.fit(X, y)\n        y_pred = eclf.predict(X)\n        self.assertEqual(len(y_pred), len(y))\n\n    def test_voting_classifier_predict_proba(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier(n_estimators=50, random_state=42)\n        clf3 = GaussianNB()\n        eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='soft')\n        eclf.fit(X, y)\n        y_pred_proba = eclf.predict_proba(X)\n        self.assertEqual(y_pred_proba.shape[1], len(eclf.classes_))\n\n    def test_voting_classifier_transform(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier(n_estimators=50, random_state=42)\n        clf3 = GaussianNB()\n        eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='soft', flatten_transform=True)\n        eclf.fit(X, y)\n        transformed_data = eclf.transform(X)\n        self.assertEqual(transformed_data.shape[1], len(eclf.classes_) * len(eclf.estimators_))\n\n    def test_voting_classifier_weights(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier(n_estimators=50, random_state=42)\n        clf3 = GaussianNB()\n        eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='hard', weights=[2, 1, 1])\n        eclf.fit(X, y)\n        y_pred = eclf.predict(X)\n        self.assertEqual(len(y_pred), len(y))\n\n    def test_voting_classifier_invalid_voting(self):\n        with self.assertRaises(ValueError):\n            VotingClassifier(estimators=[('lr', LogisticRegression()), ('rf', RandomForestClassifier())], voting='invalid')\n\n    def test_voting_classifier_missing_estimators(self):\n        with self.assertRaises(AttributeError):\n            VotingClassifier(estimators=[])\n\n    def test_voting_classifier_all_estimators_none(self):\n        with self.assertRaises(ValueError):\n            VotingClassifier(estimators=[('lr', None), ('rf', None)])\n\n    def test_voting_classifier_weights_length(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier(n_estimators=50, random_state=42)\n        clf3 = GaussianNB()\n        with self.assertRaises(ValueError):\n            VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)], weights=[1, 2, 3, 4])\n\n    def test_voting_classifier_le_transform(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier(n_estimators=50, random_state=42)\n        clf3 = GaussianNB()\n        eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)])\n        eclf.fit(X, y)\n        transformed_y = eclf.le_.transform(y)\n        self.assertEqual(transformed_y.shape[0], len(y))\n\n    def test_voting_classifier_not_fitted(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier(n_estimators=50, random_state=42)\n        eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)])\n        with self.assertRaises(NotFittedError):\n            eclf.predict(X)\n\nclass TestVotingRegressor(unittest.TestCase):\n\n    def test_voting_regressor_init(self):\n        VotingRegressor(estimators=[('lr', LogisticRegression())])\n        VotingRegressor(estimators=[('lr', LogisticRegression()), ('rf', RandomForestRegressor())])\n\n    def test_voting_regressor_fit_predict(self):\n        X, y = make_regression(n_samples=100, n_features=20, random_state=42)\n        r1 = LogisticRegression()\n        r2 = RandomForestRegressor(n_estimators=50, random_state=42)\n        er = VotingRegressor(estimators=[('lr', r1), ('rf', r2)])\n        er.fit(X, y)\n        y_pred = er.predict(X)\n        self.assertEqual(len(y_pred), len(y))\n\n    def test_voting_regressor_transform(self):\n        X, y = make_regression(n_samples=100, n_features=20, random_state=42)\n        r1 = LogisticRegression()\n        r2 = RandomForestRegressor(n_estimators=50, random_state=42)\n        er = VotingRegressor(estimators=[('lr', r1), ('rf', r2)])\n        er.fit(X, y)\n        transformed_data = er.transform(X)\n        self.assertEqual(transformed_data.shape[1], len(er.estimators_))\n\n    def test_voting_regressor_weights(self):\n        X, y = make_regression(n_samples=100, n_features=20, random_state=42)\n        r1 = LogisticRegression()\n        r2 = RandomForestRegressor(n_estimators=50, random_state=42)\n        er = VotingRegressor(estimators=[('lr', r1), ('rf', r2)], weights=[2, 1])\n        er.fit(X, y)\n        y_pred = er.predict(X)\n        self.assertEqual(len(y_pred), len(y))\n\n    def test_voting_regressor_invalid_weights(self):\n        X, y = make_regression(n_samples=100, n_features=20, random_state=42)\n        r1 = LogisticRegression()\n        r2 = RandomForestRegressor(n_estimators=50, random_state=42)\n        with self.assertRaises(ValueError):\n            VotingRegressor(estimators=[('lr', r1), ('rf', r2)], weights=[1, 2, 3])\n\n    def test_voting_regressor_missing_estimators(self):\n        with self.assertRaises(AttributeError):\n            VotingRegressor(estimators=[])\n\n    def test_voting_regressor_all_estimators_none(self):\n        with self.assertRaises(ValueError):\n            VotingRegressor(estimators=[('lr', None), ('rf', None)])\n\n    def test_voting_regressor_not_fitted(self):\n        X, y = make_regression(n_samples=100, n_features=20, random_state=42)\n        r1 = LogisticRegression()\n        r2 = RandomForestRegressor(n_estimators=50, random_state=42)\n        er = VotingRegressor(estimators=[('lr', r1), ('rf', r2)])\n        with self.assertRaises(NotFittedError):\n            er.predict(X)\n\n\n\n"], "sample_48": ["\nimport unittest\nfrom django.db import migrations\nfrom django.db.migrations.operations.models import (\n    AddIndex,\n    RemoveIndex,\n    AddConstraint,\n    RemoveConstraint,\n    AlterModelTable,\n    AlterModelOptions,\n    AlterModelManagers,\n    AlterUniqueTogether,\n    AlterIndexTogether,\n    AlterOrderWithRespectTo,\n    DeleteModel,\n    RenameModel,\n    ModelOperation,\n)\nfrom django.db.models import (\n    AutoField,\n    CharField,\n    ForeignKey,\n    IntegerField,\n    Model,\n    ManyToManyField,\n    OneToOneField,\n)\nfrom django.test import TestCase, override_settings\nfrom django.utils.functional import cached_property\n\nclass TestModelOperations(TestCase):\n    def setUp(self):\n        self.app_label = 'myapp'\n        self.model_name = 'MyModel'\n        self.model_fields = [\n            ('id', AutoField(primary_key=True)),\n            ('name', CharField(max_length=100)),\n            ('age', IntegerField()),\n        ]\n\n    def create_model(self):\n        class MyModel(Model):\n            pass\n        for name, field in self.model_fields:\n            setattr(MyModel, name, field)\n        return MyModel\n\n    def test_model_operation_reduce(self):\n        class MyModelOperation(ModelOperation):\n            pass\n\n        operation1 = MyModelOperation(self.model_name, None)\n        operation2 = MyModelOperation(self.model_name, None)\n        operation3 = MyModelOperation(self.model_name, None)\n        self.assertEqual(operation1.reduce([operation2, operation3]), [operation2, operation3])\n        self.assertEqual(operation2.reduce([operation1, operation3]), [operation1, operation3])\n        self.assertEqual(operation3.reduce([operation1, operation2]), [operation1, operation2])\n\n    def test_add_index(self):\n        model = self.create_model()\n        operation = AddIndex(self.model_name, model._meta.get_field('name'))\n        self.assertEqual(operation.describe(), 'Create index name_index on field name of model MyModel')\n        self.assertEqual(operation.migration_name_fragment, 'myapp_mymodel_name_index')\n\n    def test_remove_index(self):\n        model = self.create_model()\n        operation = RemoveIndex(self.model_name, 'name_index')\n        self.assertEqual(operation.describe(), 'Remove index name_index from MyModel')\n        self.assertEqual(operation.migration_name_fragment, 'remove_myapp_mymodel_name_index')\n\n    def test_add_constraint(self):\n        model = self.create_model()\n        operation = AddConstraint(self.model_name, model._meta.get_field('name'))\n        self.assertEqual(operation.describe(), 'Create constraint name_constraint on model MyModel')\n        self.assertEqual(operation.migration_name_fragment, 'myapp_mymodel_name_constraint')\n\n    def test_remove_constraint(self):\n        model = self.create_model()\n        operation = RemoveConstraint(self.model_name, 'name_constraint')\n        self.assertEqual(operation.describe(), 'Remove constraint name_constraint from MyModel')\n        self.assertEqual(operation.migration_name_fragment, 'remove_myapp_mymodel_name_constraint')\n\n    def test_alter_model_table(self):\n        operation = AlterModelTable(self.model_name, 'new_table_name')\n        self.assertEqual(operation.describe(), 'Rename table for MyModel to new_table_name')\n        self.assertEqual(operation.migration_name_fragment, 'alter_myapp_mymodel_table')\n\n    def test_alter_model_options(self):\n        operation = AlterModelOptions(self.model_name, {'verbose_name': 'New Model Name'})\n        self.assertEqual(operation.describe(), 'Change Meta options on MyModel')\n        self.assertEqual(operation.migration_name_fragment, 'alter_myapp_mymodel_options')\n\n    def test_alter_model_managers(self):\n        operation = AlterModelManagers(self.model_name, [])\n        self.assertEqual(operation.describe(), 'Change managers on MyModel')\n        self.assertEqual(operation.migration_name_fragment, 'alter_myapp_mymodel_managers')\n\n    def test_delete_model(self):\n        operation = DeleteModel(self.model_name)\n        self.assertEqual(operation.describe(), 'Delete model MyModel')\n        self.assertEqual(operation.migration_name_fragment, 'delete_myapp_mymodel')\n\n    def test_rename_model(self):\n        operation = RenameModel('MyModel', 'NewModel')\n        self.assertEqual(operation.describe(), 'Rename model MyModel to NewModel')\n        self.assertEqual(operation.migration_name_fragment, 'rename_myapp_mymodel_newmodel')\n\n\n\n"], "sample_27": ["\nfrom django.contrib.auth.tokens import PasswordResetTokenGenerator\nfrom django.contrib.auth.models import User\nfrom django.utils.crypto import constant_time_compare\nfrom django.utils.http import base36_to_int, int_to_base36\nfrom django.utils import timezone\nfrom unittest import mock\n\nclass TestPasswordResetTokenGenerator(object):\n\n    def setUp(self):\n        self.generator = PasswordResetTokenGenerator()\n        self.user = User(username='testuser', password='password')\n        self.user.save()\n\n    def test_make_token(self):\n        token = self.generator.make_token(self.user)\n        assert isinstance(token, str)\n\n    def test_check_token_valid(self):\n        token = self.generator.make_token(self.user)\n        assert self.generator.check_token(self.user, token)\n\n    def test_check_token_invalid_format(self):\n        assert not self.generator.check_token(self.user, 'invalid-token')\n\n    def test_check_token_expired(self):\n        token = self.generator.make_token(self.user)\n        # Simulate token expiration\n        future_timestamp = timezone.now() + timezone.timedelta(seconds=settings.PASSWORD_RESET_TIMEOUT + 1)\n        with mock.patch('django.contrib.auth.tokens.PasswordResetTokenGenerator._now', return_value=future_timestamp):\n            assert not self.generator.check_token(self.user, token)\n\n    def test_check_token_tampered(self):\n        token = self.generator.make_token(self.user)\n        # Modify the token\n        modified_token = token[:len(token) - 1]\n        assert not self.generator.check_token(self.user, modified_token)\n\n    def test_make_token_with_timestamp(self):\n        timestamp = self.generator._num_seconds(timezone.now())\n        token = self.generator._make_token_with_timestamp(self.user, timestamp)\n        assert isinstance(token, str)\n\n    def test_make_hash_value(self):\n        timestamp = self.generator._num_seconds(timezone.now())\n        hash_value = self.generator._make_hash_value(self.user, timestamp)\n        assert isinstance(hash_value, str)\n\n    def test_constant_time_compare(self):\n        # This test relies on the implementation of constant_time_compare\n        # and is not directly testable in isolation.\n\n\n\n"], "sample_138": ["\nfrom sympy.matrices.expressions.blockmatrix import ( block_collapse, bc_matmul, bc_block_plus_ident, BlockDiagMatrix, BlockMatrix, bc_dist, bc_matadd, bc_transpose, bc_inverse, blockcut, reblock_2x2, deblock)\nfrom sympy.matrices.expressions import (MatrixSymbol, Identity, Inverse, trace, Transpose, det, ZeroMatrix)\nfrom sympy.functions import transpose\nfrom sympy import Q\nimport unittest\n\nclass TestBlockMatrix(unittest.TestCase):\n\n    def test_blockmatrix_basic(self):\n        from sympy import MatrixSymbol, symbols\n        n,m,l = symbols('n m l')\n        X = MatrixSymbol('X', n, n)\n        Y = MatrixSymbol('Y', m ,m)\n        Z = MatrixSymbol('Z', n, m)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n        self.assertEqual(B.blockshape, (2, 2))\n        self.assertEqual(B.rowblocksizes, [n, m])\n        self.assertEqual(B.colblocksizes, [n, m])\n\n    def test_blockmatrix_irregular(self):\n        from sympy import MatrixSymbol, symbols\n        n,m,l = symbols('n m l')\n        X = MatrixSymbol('X', n, n)\n        Y = MatrixSymbol('Y', m ,m)\n        Z = MatrixSymbol('Z', n, m)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n        with self.assertRaises(ValueError):\n            BlockMatrix([[X, Z], [ones(m,2), ones(m,2)*2]])\n\n    def test_blockmatrix_diag(self):\n        from sympy import MatrixSymbol, symbols\n        n,m,l = symbols('n m l')\n        X = MatrixSymbol('X', n, n)\n        Y = MatrixSymbol('Y', m ,m)\n        B = BlockDiagMatrix(X, Y)\n        self.assertEqual(B.blockshape, (2, 2))\n        self.assertEqual(B.rowblocksizes, [n, m])\n        self.assertEqual(B.colblocksizes, [n, m])\n\n    def test_blockmatrix_collapse(self):\n        from sympy import MatrixSymbol, symbols\n        n,m,l = symbols('n m l')\n        X = MatrixSymbol('X', n, n)\n        Y = MatrixSymbol('Y', m ,m)\n        Z = MatrixSymbol('Z', n, m)\n        C = BlockMatrix([[Identity(n), Z]])\n        B = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n        self.assertEqual(block_collapse(C*B), BlockMatrix([[X, Z + Z*Y]]))\n\n    def test_blockmatrix_transpose(self):\n        from sympy import MatrixSymbol, symbols\n        n,m,l = symbols('n m l')\n        X = MatrixSymbol('X', n, n)\n        Y = MatrixSymbol('Y', m ,m)\n        Z = MatrixSymbol('Z', n, m)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n        self.assertEqual(B.transpose(), BlockMatrix([[X.T,  0],\n                                                  [Z.T, Y.T]]))\n\n    def test_blockmatrix_inverse(self):\n        from sympy import MatrixSymbol, symbols\n        n,m,l = symbols('n m l')\n        X = MatrixSymbol('X', n, n)\n        Y = MatrixSymbol('Y', m ,m)\n        Z = MatrixSymbol('Z', n, m)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n        with self.assertRaises(NotImplementedError):\n            B.inverse()\n        B = BlockDiagMatrix(X, Y)\n        self.assertEqual(B.inverse(), BlockDiagMatrix(X.inverse(), Y.inverse()))\n\n    def test_blockmatrix_trace(self):\n        from sympy import MatrixSymbol, symbols\n        n,m,l = symbols('n m l')\n        X = MatrixSymbol('X', n, n)\n        Y = MatrixSymbol('Y', m ,m)\n        Z = MatrixSymbol('Z', n, m)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n        with self.assertRaises(NotImplementedError):\n            trace(B)\n        B = BlockDiagMatrix(X, Y)\n        self.assertEqual(trace(B), trace(X) + trace(Y))\n\n    def test_blockmatrix_determinant(self):\n        from sympy import MatrixSymbol, symbols\n        n,m,l = symbols('n m l')\n        X = MatrixSymbol('X', n, n)\n        Y = MatrixSymbol('Y', m ,m)\n        Z = MatrixSymbol('Z', n, m)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n        with self.assertRaises(NotImplementedError):\n            det(B)\n        B = BlockDiagMatrix(X, Y)\n        self.assertEqual(det(B), det(X)*det(Y))\n\n    def test_blockmatrix_as_real_imag(self):\n        from sympy import MatrixSymbol, symbols\n        n,m,l = symbols('n m l')\n        X = MatrixSymbol('X', n, n)\n        Y = MatrixSymbol('Y', m ,m)\n        B = BlockMatrix([[X, Y]])\n        real, imag = B.as_real_imag()\n        self.assertEqual(real.blocks[0, 0], X)\n        self.assertEqual(imag.blocks[0, 0], Y)\n\n    def test_blockmatrix_is_identity(self):\n        from sympy import MatrixSymbol, symbols\n        n,m,l = symbols('n m l')\n        X = MatrixSymbol('X', n, n)\n        Y = MatrixSymbol('Y', m ,m)\n        Z = MatrixSymbol('Z', n, m)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n        self.assertFalse(B.is_Identity)\n        B = BlockDiagMatrix(Identity(n), Identity(m))\n        self.assertTrue(B.is_Identity)\n\n    def test_blockmatrix_is_structurally_symmetric(self):\n        from sympy import MatrixSymbol, symbols\n        n,m,l = symbols('n m l')\n        X = MatrixSymbol('X', n, n)\n        Y = MatrixSymbol('Y', m ,m)\n        Z = MatrixSymbol('Z', n, m)\n        B = BlockMatrix([[X, Z], [Z.T, Y]])\n        self.assertTrue(B.is_structurally_symmetric)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n        self.assertFalse(B.is_structurally_symmetric)\n\n    def test_blockmatrix_equals(self):\n        from sympy import MatrixSymbol, symbols\n        n,m,l = symbols('n m l')\n        X = MatrixSymbol('X', n, n)\n        Y = MatrixSymbol('Y', m ,m)\n        Z = MatrixSymbol('Z', n, m)\n        B1 = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n        B2 = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n        self.assertTrue(B1 == B2)\n        B3 = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y + 1]])\n        self.assertFalse(B1 == B3)\n\n    def test_blockmatrix_blockcut(self):\n        from sympy import ImmutableMatrix, blockcut\n        M = ImmutableMatrix(4, 4, range(16))\n        B = blockcut(M, (1, 3), (1, 3))\n        self.assertEqual(B.blockshape, (2, 2))\n        self.assertEqual(B.blocks[0, 0].shape, (1, 3))\n        self.assertEqual(B.blocks[1, 1].shape, (3, 3))\n\n    def test_blockmatrix_reblock_2x2(self):\n        from sympy import MatrixSymbol, symbols\n        n,m,l = symbols('n m l')\n        X = MatrixSymbol('X', n, n)\n        Y = MatrixSymbol('Y', m ,m)\n        Z = MatrixSymbol('Z', n, m)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n        reblocked = reblock_2x2(B)\n        self.assertEqual(reblocked.blockshape, (2, 2))\n        self.assertEqual(reblocked.blocks[0, 0].shape, (n, n))\n        self.assertEqual(reblocked.blocks[0, 1].shape, (n, m))\n        self.assertEqual(reblocked.blocks[1, 0].shape, (m, n))\n        self.assertEqual(reblocked.blocks[1, 1].shape, (m, m))\n\n    def test_blockmatrix_deblock(self):\n        from sympy import MatrixSymbol, symbols\n        n,m,l = symbols('n m l')\n        X = MatrixSymbol('X', n, n)\n        Y = MatrixSymbol('Y', m ,m)\n        Z = MatrixSymbol('Z', n, m)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n        deblocked = deblock(B)\n        self.assertEqual(deblocked.blockshape, (n+m, n+m))\n        self.assertEqual(deblocked.blocks[0, 0].shape, (n, n))\n        self.assertEqual(deblocked.blocks[0, 1].shape, (n, m))\n        self.assertEqual(deblocked.blocks[1, 0].shape, (m, n))\n        self.assertEqual(deblocked.blocks[1, 1].shape, (m, m))\n\n\n\n"], "sample_134": ["\nfrom sympy import *\nfrom sympy.printing.pycode import pycode, NumPyPrinter, SciPyPrinter, SymPyPrinter\n\ndef test_pycode_basic():\n    assert pycode(2 + 3) == '2 + 3'\n    assert pycode(x + 1) == 'x + 1'\n    assert pycode(sin(x)) == 'math.sin(x)'\n    assert pycode(cos(x)**2) == 'math.cos(x)**2'\n    assert pycode(log(x)) == 'math.log(x)'\n    assert pycode(exp(x)) == 'math.exp(x)'\n    assert pycode(sqrt(x)) == 'math.sqrt(x)'\n    assert pycode(factorial(x)) == 'math.factorial(x)'\n\ndef test_pycode_functions():\n    assert pycode(tan(x)) == 'math.tan(x)'\n    assert pycode(atan(x)) == 'math.atan(x)'\n    assert pycode(log10(x)) == 'math.log10(x)'\n    assert pycode(log2(x)) == 'math.log2(x)'\n    assert pycode(sinh(x)) == 'math.sinh(x)'\n    assert pycode(cosh(x)) == 'math.cosh(x)'\n    assert pycode(tanh(x)) == 'math.tanh(x)'\n    assert pycode(gamma(x)) == 'math.gamma(x)'\n\ndef test_pycode_constants():\n    assert pycode(Pi) == 'math.pi'\n    assert pycode(E) == 'math.e'\n    assert pycode(GoldenRatio) == 'golden_ratio'\n\ndef test_pycode_numpy():\n    assert NumPyPrinter().doprint(sin(x)) == 'numpy.sin(x)'\n    assert NumPyPrinter().doprint(cos(x)**2) == 'numpy.cos(x)**2'\n    assert NumPyPrinter().doprint(log(x)) == 'numpy.log(x)'\n    assert NumPyPrinter().doprint(exp(x)) == 'numpy.exp(x)'\n    assert NumPyPrinter().doprint(sqrt(x)) == 'numpy.sqrt(x)'\n    assert NumPyPrinter().doprint(factorial(x)) == 'numpy.math.factorial(x)'\n\ndef test_pycode_scipy():\n    assert SciPyPrinter().doprint(erf(x)) == 'scipy.special.erf(x)'\n    assert SciPyPrinter().doprint(erfc(x)) == 'scipy.special.erfc(x)'\n    assert SciPyPrinter().doprint(gamma(x)) == 'scipy.special.gamma(x)'\n    assert SciPyPrinter().doprint(loggamma(x)) == 'scipy.special.gammaln(x)'\n\ndef test_pycode_sympy():\n    assert SymPyPrinter().doprint(sin(x)) == 'sympy.sin(x)'\n    assert SymPyPrinter().doprint(cos(x)**2) == 'sympy.cos(x)**2'\n    assert SymPyPrinter().doprint(log(x)) == 'sympy.log(x)'\n    assert SymPyPrinter().doprint(exp(x)) == 'sympy.exp(x)'\n    assert SymPyPrinter().doprint(sqrt(x)) == 'sympy.sqrt(x)'\n    assert SymPyPrinter().doprint(factorial(x)) == 'sympy.factorial(x)'\n\n\n\n"], "sample_118": ["\nfrom sympy.printing.ccode import ccode\nfrom sympy import symbols, sin, cos, tan, exp, log, pi, S, Rational, Piecewise, IndexedBase, Idx, Matrix, MatrixSymbol, Function, Abs, ceiling\nfrom sympy.core.relational import Eq\n\ndef test_basic_functions():\n    x = symbols('x')\n    assert ccode(sin(x)) == 'sin(x)'\n    assert ccode(cos(x)) == 'cos(x)'\n    assert ccode(tan(x)) == 'tan(x)'\n    assert ccode(exp(x)) == 'exp(x)'\n    assert ccode(log(x)) == 'log(x)'\n    assert ccode(pi) == 'M_PI'\n\ndef test_constants():\n    assert ccode(S(2)) == '2'\n    assert ccode(Rational(3, 4)) == '0.75'\n\ndef test_piecewise():\n    x = symbols('x')\n    expr = Piecewise((x + 1, x > 0), (x, True))\n    assert ccode(expr) == 'if (x > 0) {\\n  tau = x + 1;\\n} else {\\n  tau = x;\\n}'\n\ndef test_indexed():\n    x = symbols('x')\n    y = IndexedBase('y', shape=(3,))\n    i = Idx('i', 2)\n    assert ccode(y[i]) == 'y[i]'\n\ndef test_matrix():\n    x = symbols('x')\n    A = MatrixSymbol('A', 2, 2)\n    mat = Matrix([[x**2, sin(x)], [cos(x), exp(x)]])\n    assert ccode(mat, A) == 'A[0, 0] = pow(x, 2);\\n A[0, 1] = sin(x);\\n A[1, 0] = cos(x);\\n A[1, 1] = exp(x);'\n\ndef test_assignment():\n    x = symbols('x')\n    assert ccode(x + 1, assign_to='y') == 'y = x + 1;'\n\ndef test_custom_functions():\n    from sympy import Function\n    func = Function('func')\n    custom_functions = {'func': 'myfunc'}\n    assert ccode(func(x), user_functions=custom_functions) == 'myfunc(x)'\n\ndef test_abs():\n    x = symbols('x')\n    assert ccode(Abs(x)) == 'fabs(x)'\n\ndef test_ceiling():\n    x = symbols('x')\n    assert ccode(ceiling(x)) == 'CEIL(x)'\n\ndef test_for_loop():\n    x = symbols('x')\n    from sympy import Range\n    expr = x + 1\n    for i in Range(1, 5):\n        assert ccode(expr, assign_to=f'y{i}', assign_to_context='local') == f'y{i} = x + 1;'\n\ndef test_indexed_loop():\n    x = symbols('x')\n    y = IndexedBase('y', shape=(3,))\n    i = Idx('i', 2)\n    assert ccode(y[i], assign_to='z', contract=True) == 'for (int i=0; i<3; i++){\\n z = y[i];\\n}'\n\ndef test_equation():\n    x = symbols('x')\n    y = IndexedBase('y', shape=(3,))\n    i = Idx('i', 2)\n    eq = Eq(y[i], x + 1)\n    assert ccode(eq.rhs, assign_to=eq.lhs, contract=False) == 'y[i] = x + 1;'\n\n\n\n"], "sample_108": ["\nimport unittest\nfrom sklearn.svm import BaseSVC, SVC\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.svm.base import _get_liblinear_solver_type, _fit_liblinear\nfrom sklearn.utils.validation import check_is_fitted\nfrom sklearn.utils.testing import assert_array_almost_equal\nfrom sklearn.preprocessing import LabelEncoder\nimport numpy as np\nfrom scipy.sparse import csr_matrix\nfrom sklearn.svm.sparse import libsvm_sparse\n\nclass TestBaseSVC(unittest.TestCase):\n\n    def test_init_with_invalid_kernel(self):\n        with self.assertRaises(ValueError):\n            BaseSVC(kernel=\"invalid_kernel\", degree=3, gamma=0.1,\n                    C=1.0, nu=0.1, tol=0.001, verbose=0,\n                    max_iter=1000, random_state=42)\n\n    def test_init_with_invalid_multi_class(self):\n        with self.assertRaises(ValueError):\n            BaseSVC(multi_class=\"invalid_multi_class\", degree=3, gamma=0.1,\n                    C=1.0, nu=0.1, tol=0.001, verbose=0,\n                    max_iter=1000, random_state=42)\n\n    def test_init_with_invalid_loss(self):\n        with self.assertRaises(ValueError):\n            BaseSVC(loss=\"invalid_loss\", degree=3, gamma=0.1,\n                    C=1.0, nu=0.1, tol=0.001, verbose=0,\n                    max_iter=1000, random_state=42)\n\n    def test_predict_proba_probability_false(self):\n        with self.assertRaises(AttributeError):\n            svc = SVC(probability=False)\n            svc.fit(np.random.rand(10, 5), np.random.rand(10))\n            svc.predict_proba(np.random.rand(5, 5))\n\n    def test_predict_log_proba_probability_false(self):\n        with self.assertRaises(AttributeError):\n            svc = SVC(probability=False)\n            svc.fit(np.random.rand(10, 5), np.random.rand(10))\n            svc.predict_log_proba(np.random.rand(5, 5))\n\n    def test_predict_proba_not_fitted(self):\n        svc = SVC(probability=True)\n        with self.assertRaises(NotFittedError):\n            svc.predict_proba(np.random.rand(5, 5))\n\n    def test_predict_log_proba_not_fitted(self):\n        svc = SVC(probability=True)\n        with self.assertRaises(NotFittedError):\n            svc.predict_log_proba(np.random.rand(5, 5))\n\n    def test_predict_proba_ovr_multiclass(self):\n        X, y = make_classification(n_samples=100, n_features=10, n_classes=3,\n                                   random_state=42)\n        svc = SVC(probability=True, multi_class='ovr')\n        svc.fit(X, y)\n        y_pred_proba = svc.predict_proba(X)\n        self.assertEqual(y_pred_proba.shape[1], 3)\n\n    def test_predict_log_proba_ovr_multiclass(self):\n        X, y = make_classification(n_samples=100, n_features=10, n_classes=3,\n                                   random_state=42)\n        svc = SVC(probability=True, multi_class='ovr')\n        svc.fit(X, y)\n        y_pred_log_proba = svc.predict_log_proba(X)\n        self.assertEqual(y_pred_log_proba.shape[1], 3)\n\n    def test_predict_proba_crammer_singer_multiclass(self):\n        X, y = make_classification(n_samples=100, n_features=10, n_classes=3,\n                                   random_state=42)\n        svc = SVC(probability=True, multi_class='crammer_singer')\n        svc.fit(X, y)\n        y_pred_proba = svc.predict_proba(X)\n        self.assertEqual(y_pred_proba.shape[1], 3)\n\n    def test_predict_log_proba_crammer_singer_multiclass(self):\n        X, y = make_classification(n_samples=100, n_features=10, n_classes=3,\n                                   random_state=42)\n        svc = SVC(probability=True, multi_class='crammer_singer')\n        svc.fit(X, y)\n        y_pred_log_proba = svc.predict_log_proba(X)\n        self.assertEqual(y_pred_log_proba.shape[1], 3)\n\n    def test_predict_proba_sparse_data(self):\n        X = csr_matrix(np.random.rand(100, 10))\n        y = np.random.rand(100)\n        svc = SVC(probability=True)\n        svc.fit(X, y)\n        y_pred_proba = svc.predict_proba(X)\n        self.assertEqual(y_pred_proba.shape[0], 100)\n        self.assertEqual(y_pred_proba.shape[1], 2)\n\n    def test_predict_log_proba_sparse_data(self):\n        X = csr_matrix(np.random.rand(100, 10))\n        y = np.random.rand(100)\n        svc = SVC(probability=True)\n        svc.fit(X, y)\n        y_pred_log_proba = svc.predict_log_proba(X)\n        self.assertEqual(y_pred_log_proba.shape[0], 100)\n        self.assertEqual(y_pred_log_proba.shape[1], 2)\n\n    def test_predict_proba_dense_data(self):\n        X = np.random.rand(100, 10)\n        y = np.random.rand(100)\n        svc = SVC(probability=True)\n        svc.fit(X, y)\n        y_pred_proba = svc.predict_proba(X)\n        self.assertEqual(y_pred_proba.shape[0], 100)\n        self.assertEqual(y_pred_proba.shape[1], 2)\n\n    def test_predict_log_proba_dense_data(self):\n        X = np.random.rand(100, 10)\n        y = np.random.rand(100)\n        svc = SVC(probability=True)\n        svc.fit(X, y)\n        y_pred_log_proba = svc.predict_log_proba(X)\n        self.assertEqual(y_pred_log_proba.shape[0], 100)\n        self.assertEqual(y_pred_log_proba.shape[1], 2)\n\n    def test_fit_liblinear_ovr(self):\n        X, y = make_classification(n_samples=100, n_features=10, n_classes=3,\n                                   random_state=42)\n        coef_, intercept_, n_iter_ = _fit_liblinear(X, y, C=1.0,\n                                                    fit_intercept=True,\n                                                    intercept_scaling=1.0,\n                                                    class_weight=None,\n                                                    penalty='l2',\n                                                    dual=True,\n                                                    verbose=0,\n                                                    max_iter=1000,\n                                                    tol=0.001,\n                                                    random_state=42,\n                                                    multi_class='ovr',\n                                                    loss='logistic_regression',\n                                                    epsilon=0.1)\n        self.assertEqual(coef_.shape[1], 10)\n        self.assertEqual(intercept_.shape, (1,))\n\n    def test_fit_liblinear_crammer_singer(self):\n        X, y = make_classification(n_samples=100, n_features=10, n_classes=3,\n                                   random_state=42)\n        coef_, intercept_, n_iter_ = _fit_liblinear(X, y, C=1.0,\n                                                    fit_intercept=True,\n                                                    intercept_scaling=1.0,\n                                                    class_weight=None,\n                                                    penalty='l2',\n                                                    dual=True,\n                                                    verbose=0,\n                                                    max_iter=1000,\n                                                    tol=0.001,\n                                                    random_state=42,\n                                                    multi_class='crammer_singer',\n                                                    loss='logistic_regression',\n                                                    epsilon=0.1)\n        self.assertEqual(coef_.shape[1], 10)\n        self.assertEqual(intercept_.shape, (1,))\n\n    def test_fit_liblinear_hinge(self):\n        X, y = make_classification(n_samples=100, n_features=10, n_classes=2,\n                                   random_state=42)\n        coef_, intercept_, n_iter_ = _fit_liblinear(X, y, C=1.0,\n                                                    fit_intercept=True,\n                                                    intercept_scaling=1.0,\n                                                    class_weight=None,\n                                                    penalty='l2',\n                                                    dual=True,\n                                                    verbose=0,\n                                                    max_iter=1000,\n                                                    tol=0.001,\n                                                    random_state=42,\n                                                    multi_class='ovr',\n                                                    loss='hinge',\n                                                    epsilon=0.1)\n        self.assertEqual(coef_.shape[1], 10)\n        self.assertEqual(intercept_.shape, (1,))\n\n    def test_fit_liblinear_squared_hinge(self):\n        X, y = make_classification(n_samples=100, n_features=10, n_classes=2,\n                                   random_state=42)\n        coef_, intercept_, n_iter_ = _fit_liblinear(X, y, C=1.0,\n                                                    fit_intercept=True,\n                                                    intercept_scaling=1.0,\n                                                    class_weight=None,\n                                                    penalty='l2',\n                                                    dual=True,\n                                                    verbose=0,\n                                                    max_iter=1000,\n                                                    tol=0.001,\n                                                    random_state=42,\n                                                    multi_class='ovr',\n                                                    loss='squared_hinge',\n                                                    epsilon=0.1)\n        self.assertEqual(coef_.shape[1], 10)\n        self.assertEqual(intercept_.shape, (1,))\n\n    def test_fit_liblinear_epsilon_insensitive(self):\n        X, y = make_classification(n_samples=100, n_features=10, n_classes=2,\n                                   random_state=42)\n        coef_, intercept_, n_iter_ = _fit_liblinear(X, y, C=1.0,\n                                                    fit_intercept=True,\n                                                    intercept_scaling=1.0,\n                                                    class_weight=None,\n                                                    penalty='l2',\n                                                    dual=True,\n                                                    verbose=0,\n                                                    max_iter=1000,\n                                                    tol=0.001,\n                                                    random_state=42,\n                                                    multi_class='ovr',\n                                                    loss='epsilon_insensitive',\n                                                    epsilon=0.1)\n        self.assertEqual(coef_.shape[1], 10)\n        self.assertEqual(intercept_.shape, (1,))\n\n    def test_fit_liblinear_squared_epsilon_insensitive(self):\n        X, y = make_classification(n_samples=100, n_features=10, n_classes=2,\n                                   random_state=42)\n        coef_, intercept_, n_iter_ = _fit_liblinear(X, y, C=1.0,\n                                                    fit_intercept=True,\n                                                    intercept_scaling=1.0,\n                                                    class_weight=None,\n                                                    penalty='l2',\n                                                    dual=True,\n                                                    verbose=0,\n                                                    max_iter=1000,\n                                                    tol=0.001,\n                                                    random_state=42,\n                                                    multi_class='ovr',\n                                                    loss='squared_epsilon_insensitive',\n                                                    epsilon=0.1)\n        self.assertEqual(coef_.shape[1], 10)\n        self.assertEqual(intercept_.shape, (1,))\n\n\n\n"], "sample_77": ["\nimport unittest\nimport numpy as np\nfrom seaborn._core.scales import (\n    Nominal,\n    Continuous,\n    Temporal,\n    PseudoAxis,\n    _make_identity_transforms,\n    _make_logit_transforms,\n    _make_log_transforms,\n    _make_symlog_transforms,\n    _make_sqrt_transforms,\n    _make_power_transforms,\n)\n\nclass TestScales(unittest.TestCase):\n\n    def test_nominal_scale(self):\n        scale = Nominal()\n        self.assertEqual(scale._priority, 0)\n\n    def test_continuous_scale(self):\n        scale = Continuous()\n        self.assertEqual(scale._priority, 1)\n        self.assertEqual(scale.trans, None)\n\n    def test_temporal_scale(self):\n        scale = Temporal()\n        self.assertEqual(scale._priority, 2)\n        self.assertEqual(scale.trans, None)\n\n    def test_pseudo_axis(self):\n        scale = Continuous()\n        axis = PseudoAxis(scale)\n        self.assertEqual(axis.axis_name, \"\")\n        self.assertIsNotNone(axis.scale)\n        self.assertIsNone(axis.converter)\n        self.assertIsNone(axis.units)\n\n    def test_identity_transforms(self):\n        forward, inverse = _make_identity_transforms()\n        self.assertEqual(forward(1), 1)\n        self.assertEqual(inverse(1), 1)\n\n    def test_logit_transforms(self):\n        forward, inverse = _make_logit_transforms(base=10)\n        self.assertAlmostEqual(forward(0.5), 0)\n        self.assertAlmostEqual(inverse(0), 0.5)\n\n    def test_log_transforms(self):\n        forward, inverse = _make_log_transforms(base=2)\n        self.assertAlmostEqual(forward(1), 0)\n        self.assertAlmostEqual(inverse(0), 1)\n\n    def test_symlog_transforms(self):\n        forward, inverse = _make_symlog_transforms(c=1)\n        self.assertAlmostEqual(forward(1), 0)\n        self.assertAlmostEqual(inverse(0), 1)\n\n    def test_sqrt_transforms(self):\n        forward, inverse = _make_sqrt_transforms()\n        self.assertAlmostEqual(forward(4), 2)\n        self.assertAlmostEqual(inverse(2), 4)\n\n    def test_power_transforms(self):\n        forward, inverse = _make_power_transforms(exp=2)\n        self.assertAlmostEqual(forward(2), 4)\n        self.assertAlmostEqual(inverse(4), 2)\n\n\n\n"], "sample_116": ["\nfrom unittest.mock import patch\nfrom sphinx.environment.adapters.indexentries import IndexEntries\nfrom sphinx.builders import Builder\nfrom sphinx.domains.index import IndexDomain\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.errors import NoUri\nfrom sphinx.locale import _, __\nfrom sphinx.util import split_into\n\n\nclass TestIndexEntries(object):\n    def test_create_index_single(self):\n        env = BuildEnvironment()\n        domain = IndexDomain()\n        domain.entries = {\n            'test.txt': [\n                ('single', 'test_entry', 'test_id', 'Test Entry', None)\n            ]\n        }\n        env.domains = {\n            'index': domain\n        }\n        index_entries = IndexEntries(env)\n        builder = Builder(None)\n        result = index_entries.create_index(builder, group_entries=True)\n        assert len(result) == 1\n        assert result[0][0] == 'Test Entry'\n        assert len(result[0][1]) == 1\n        assert result[0][1][0][0] == 'Test Entry'\n        assert result[0][1][0][1] == 'test.txt#test_id'\n\n    def test_create_index_pair(self):\n        env = BuildEnvironment()\n        domain = IndexDomain()\n        domain.entries = {\n            'test.txt': [\n                ('pair', 'first entry second entry', 'test_id', 'Pair Entry', None)\n            ]\n        }\n        env.domains = {\n            'index': domain\n        }\n        index_entries = IndexEntries(env)\n        builder = Builder(None)\n        result = index_entries.create_index(builder, group_entries=True)\n        assert len(result) == 1\n        assert result[0][0] == 'Pair Entry'\n        assert len(result[0][1]) == 2\n        assert result[0][1][0][0] == 'Pair Entry'\n        assert result[0][1][0][1] == 'test.txt#test_id'\n        assert result[0][1][1][0] == 'Pair Entry'\n        assert result[0][1][1][1] == 'test.txt#test_id'\n\n    def test_create_index_triple(self):\n        env = BuildEnvironment()\n        domain = IndexDomain()\n        domain.entries = {\n            'test.txt': [\n                ('triple', 'first entry second entry third entry', 'test_id', 'Triple Entry', None)\n            ]\n        }\n        env.domains = {\n            'index': domain\n        }\n        index_entries = IndexEntries(env)\n        builder = Builder(None)\n        result = index_entries.create_index(builder, group_entries=True)\n        assert len(result) == 1\n        assert result[0][0] == 'Triple Entry'\n        assert len(result[0][1]) == 3\n        assert result[0][1][0][0] == 'Triple Entry'\n        assert result[0][1][0][1] == 'test.txt#test_id'\n        assert result[0][1][1][0] == 'Triple Entry'\n        assert result[0][1][1][1] == 'test.txt#test_id'\n        assert result[0][1][2][0] == 'Triple Entry'\n        assert result[0][1][2][1] == 'test.txt#test_id'\n\n    def test_create_index_see(self):\n        env = BuildEnvironment()\n        domain = IndexDomain()\n        domain.entries = {\n            'test.txt': [\n                ('see', 'see entry', 'test_id', 'See Entry', None)\n            ]\n        }\n        env.domains = {\n            'index': domain\n        }\n        index_entries = IndexEntries(env)\n        builder = Builder(None)\n        result = index_entries.create_index(builder, group_entries=True)\n        assert len(result) == 1\n        assert result[0][0] == 'See Entry'\n        assert len(result[0][1]) == 1\n        assert result[0][1][0][0] == 'See Entry'\n        assert result[0][1][0][1] == 'test.txt#test_id'\n\n    def test_create_index_seealso(self):\n        env = BuildEnvironment()\n        domain = IndexDomain()\n        domain.entries = {\n            'test.txt': [\n                ('seealso', 'see also entry', 'test_id', 'See Also Entry', None)\n            ]\n        }\n        env.domains = {\n            'index': domain\n        }\n        index_entries = IndexEntries(env)\n        builder = Builder(None)\n        result = index_entries.create_index(builder, group_entries=True)\n        assert len(result) == 1\n        assert result[0][0] == 'See Also Entry'\n        assert len(result[0][1]) == 1\n        assert result[0][1][0][0] == 'See Also Entry'\n        assert result[0][1][0][1] == 'test.txt#test_id'\n\n    def test_create_index_unknown_type(self):\n        env = BuildEnvironment()\n        domain = IndexDomain()\n        domain.entries = {\n            'test.txt': [\n                ('unknown', 'test_entry', 'test_id', 'Test Entry', None)\n            ]\n        }\n        env.domains = {\n            'index': domain\n        }\n        index_entries = IndexEntries(env)\n        builder = Builder(None)\n        result = index_entries.create_index(builder, group_entries=True)\n        assert len(result) == 1\n        assert result[0][0] == 'Test Entry'\n        assert len(result[0][1]) == 1\n        assert result[0][1][0][0] == 'Test Entry'\n        assert result[0][1][0][1] == 'test.txt#test_id'\n\n\n\n"], "sample_83": ["\nimport unittest\nfrom unittest.mock import patch\nfrom io import StringIO\nfrom pylint.reporters.text import (\n    TextReporter,\n    ParseableTextReporter,\n    VSTextReporter,\n    ColorizedTextReporter,\n    colorize_ansi,\n    register,\n)\nfrom pylint.message import Message\nfrom pylint.lint import PyLinter\n\nclass TestTextReporter(unittest.TestCase):\n\n    def test_text_reporter_init(self):\n        reporter = TextReporter(output=StringIO())\n        self.assertEqual(reporter.name, \"text\")\n        self.assertEqual(reporter.extension, \"txt\")\n        self.assertEqual(reporter.line_format, \"{path}:{line}:{column}: {msg_id}: {msg} ({symbol})\")\n\n    def test_text_reporter_on_set_current_module(self):\n        reporter = TextReporter(output=StringIO())\n        reporter.on_set_current_module(\"my_module\", None)\n        self.assertEqual(reporter._template, \"{path}:{line}:{column}: {msg_id}: {msg} ({symbol})\")\n        reporter.on_set_current_module(\"another_module\", None)\n        self.assertEqual(reporter._template, \"{path}:{line}:{column}: {msg_id}: {msg} ({symbol})\")\n\n    def test_text_reporter_write_message(self):\n        reporter = TextReporter(output=StringIO())\n        msg = Message(\n            msg_id=\"C001\",\n            msg=\"This is a test message\",\n            path=\"test.py\",\n            line=10,\n            column=5,\n            symbol=\"C\",\n            category=\"Convention\",\n        )\n        reporter.write_message(msg)\n        output = reporter.output.getvalue()\n        self.assertIn(\"test.py:10:5: C001: This is a test message (C)\", output)\n\n    def test_parseable_text_reporter_init(self):\n        reporter = ParseableTextReporter(output=StringIO())\n        self.assertEqual(reporter.name, \"parseable\")\n        self.assertEqual(reporter.line_format, \"{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}\")\n\n    def test_parseable_text_reporter_write_message(self):\n        reporter = ParseableTextReporter(output=StringIO())\n        msg = Message(\n            msg_id=\"C001\",\n            msg=\"This is a test message\",\n            path=\"test.py\",\n            line=10,\n            column=5,\n            symbol=\"C\",\n            category=\"Convention\",\n            obj=\"my_object\",\n        )\n        reporter.write_message(msg)\n        output = reporter.output.getvalue()\n        self.assertIn(\"test.py:10: [C001(C), my_object] This is a test message\", output)\n\n    def test_vs_text_reporter_init(self):\n        reporter = VSTextReporter(output=StringIO())\n        self.assertEqual(reporter.name, \"msvs\")\n        self.assertEqual(reporter.line_format, \"{path}({line}): [{msg_id}({symbol}){obj}] {msg}\")\n\n    def test_vs_text_reporter_write_message(self):\n        reporter = VSTextReporter(output=StringIO())\n        msg = Message(\n            msg_id=\"C001\",\n            msg=\"This is a test message\",\n            path=\"test.py\",\n            line=10,\n            column=5,\n            symbol=\"C\",\n            category=\"Convention\",\n            obj=\"my_object\",\n        )\n        reporter.write_message(msg)\n        output = reporter.output.getvalue()\n        self.assertIn(\"test.py(10): [C001(C)my_object] This is a test message\", output)\n\n    def test_colorized_text_reporter_init(self):\n        reporter = ColorizedTextReporter(output=StringIO())\n        self.assertEqual(reporter.name, \"colorized\")\n        self.assertEqual(reporter.COLOR_MAPPING, ColorizedTextReporter.COLOR_MAPPING)\n\n    def test_colorized_text_reporter_handle_message(self):\n        reporter = ColorizedTextReporter(output=StringIO())\n        msg = Message(\n            msg_id=\"C001\",\n            msg=\"This is a test message\",\n            path=\"test.py\",\n            line=10,\n            column=5,\n            symbol=\"C\",\n            category=\"Convention\",\n        )\n        reporter.handle_message(msg)\n        output = reporter.output.getvalue()\n        self.assertIn(\n            f\"\\033[32m************* Module test.py\\033[0m\", output\n        )  # Green module separator\n        self.assertIn(f\"\\033[1;31mC001: This is a test message (C)\\033[0m\", output)  # Red message\n\n    def test_colorize_ansi(self):\n        self.assertEqual(colorize_ansi(\"Hello\"), \"Hello\")\n        self.assertEqual(colorize_ansi(\"Hello\", MessageStyle(\"red\")), \"\\033[31mHello\\033[0m\")\n        self.assertEqual(colorize_ansi(\"Hello\", \"red\"), \"\\033[31mHello\\033[0m\")\n        self.assertEqual(colorize_ansi(\"Hello\", MessageStyle(\"red\", (\"bold\",))), \"\\033[1;31mHello\\033[0m\")\n        self.assertEqual(colorize_ansi(\"Hello\", MessageStyle(\"red\", (\"bold\", \"underline\"))), \"\\033[1;31;4mHello\\033[0m\")\n\n    @patch(\"sys.platform\", \"win32\")\n    def test_colorized_text_reporter_win32(self):\n        reporter = ColorizedTextReporter(output=StringIO())\n        msg = Message(\n            msg_id=\"C001\",\n            msg=\"This is a test message\",\n            path=\"test.py\",\n            line=10,\n            column=5,\n            symbol=\"C\",\n            category=\"Convention\",\n        )\n        reporter.handle_message(msg)\n        output = reporter.output.getvalue()\n        self.assertIn(f\"\\033[31mC001: This is a test message (C)\\033[0m\", output)  # Red message\n\n\n\n"], "sample_30": ["\nimport unittest\nfrom django.contrib.admin import ModelAdmin, TabularInline, InlineModelAdmin, StackedInline\nfrom django.contrib.admin.options import InlineModelAdminChecks, get_content_type_for_model\nfrom django.core.exceptions import ValidationError\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.urls import reverse\nfrom django.utils.translation import gettext_lazy as _\nfrom django.utils.encoding import force_text\n\nclass TestInlineModelAdmin(TestCase):\n    def setUp(self):\n        class ParentModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        class ChildModel(models.Model):\n            parent = models.ForeignKey(ParentModel, on_delete=models.CASCADE)\n            text = models.CharField(max_length=100)\n\n        self.ParentModel = ParentModel\n        self.ChildModel = ChildModel\n\n    def test_get_formset_defaults(self):\n        class MyInline(InlineModelAdmin):\n            model = self.ChildModel\n            fk_name = 'parent'\n\n        formset = MyInline().get_formset(None, None)\n        self.assertEqual(formset.form.fields, ['text'])\n        self.assertEqual(formset.form.exclude, [])\n        self.assertEqual(formset.extra, 3)\n        self.assertEqual(formset.min_num, None)\n        self.assertEqual(formset.max_num, None)\n\n    def test_get_formset_with_fields(self):\n        class MyInline(InlineModelAdmin):\n            model = self.ChildModel\n            fk_name = 'parent'\n\n        formset = MyInline().get_formset(None, None, fields=['text', 'id'])\n        self.assertEqual(formset.form.fields, ['text', 'id'])\n\n    def test_get_formset_with_exclude(self):\n        class MyInline(InlineModelAdmin):\n            model = self.ChildModel\n            fk_name = 'parent'\n            exclude = ['id']\n\n        formset = MyInline().get_formset(None, None)\n        self.assertEqual(formset.form.exclude, ['id'])\n\n    def test_get_formset_with_readonly_fields(self):\n        class MyInline(InlineModelAdmin):\n            model = self.ChildModel\n            fk_name = 'parent'\n            readonly_fields = ['id']\n\n        formset = MyInline().get_formset(None, None)\n        self.assertEqual(formset.form.exclude, ['id'])\n\n    def test_get_formset_with_custom_form(self):\n        class MyCustomForm(forms.ModelForm):\n            class Meta:\n                model = self.ChildModel\n                fields = ['text']\n\n        class MyInline(InlineModelAdmin):\n            model = self.ChildModel\n            fk_name = 'parent'\n            form = MyCustomForm\n\n        formset = MyInline().get_formset(None, None)\n        self.assertEqual(formset.form.fields, ['text'])\n\n    def test_get_formset_with_can_delete(self):\n        class MyInline(InlineModelAdmin):\n            model = self.ChildModel\n            fk_name = 'parent'\n            can_delete = False\n\n        formset = MyInline().get_formset(None, None)\n        self.assertFalse(formset.can_delete)\n\n    def test_get_formset_with_extra(self):\n        class MyInline(InlineModelAdmin):\n            model = self.ChildModel\n            fk_name = 'parent'\n            extra = 5\n\n        formset = MyInline().get_formset(None, None)\n        self.assertEqual(formset.extra, 5)\n\n    def test_get_formset_with_min_num(self):\n        class MyInline(InlineModelAdmin):\n            model = self.ChildModel\n            fk_name = 'parent'\n            min_num = 2\n\n        formset = MyInline().get_formset(None, None)\n        self.assertEqual(formset.min_num, 2)\n\n    def test_get_formset_with_max_num(self):\n        class MyInline(InlineModelAdmin):\n            model = self.ChildModel\n            fk_name = 'parent'\n            max_num = 3\n\n        formset = MyInline().get_formset(None, None)\n        self.assertEqual(formset.max_num, 3)\n\n    def test_get_queryset(self):\n        class MyInline(InlineModelAdmin):\n            model = self.ChildModel\n            fk_name = 'parent'\n\n        inline = MyInline()\n        queryset = inline.get_queryset(None)\n        self.assertEqual(queryset, self.ChildModel.objects.all())\n\n    def test_has_add_permission(self):\n        class MyInline(InlineModelAdmin):\n            model = self.ChildModel\n            fk_name = 'parent'\n\n        inline = MyInline()\n        self.assertTrue(inline.has_add_permission(None))\n\n    def test_has_change_permission(self):\n        class MyInline(InlineModelAdmin):\n            model = self.ChildModel\n            fk_name = 'parent'\n\n        inline = MyInline()\n        self.assertTrue(inline.has_change_permission(None))\n\n    def test_has_delete_permission(self):\n        class MyInline(InlineModelAdmin):\n            model = self.ChildModel\n            fk_name = 'parent'\n\n        inline = MyInline()\n        self.assertTrue(inline.has_delete_permission(None))\n\n    def test_has_view_permission(self):\n        class MyInline(InlineModelAdmin):\n            model = self.ChildModel\n            fk_name = 'parent'\n\n        inline = MyInline()\n        self.assertTrue(inline.has_view_permission(None))\n\n\n\n"], "sample_37": ["\nfrom django.db import models\nfrom django.db.models import Q, FilteredRelation, PathInfo\nfrom django.db.models.query_utils import (\n    select_related_descend,\n    refs_expression,\n    check_rel_lookup_compatibility,\n    subclasses,\n)\nfrom django.test.utils import override_settings\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n    value = models.IntegerField()\n\nclass MyRelatedModel(models.Model):\n    name = models.CharField(max_length=100)\n    my_model = models.ForeignKey(MyModel, on_delete=models.CASCADE)\n\nclass MyModelWithDeferredField(models.Model):\n    name = models.CharField(max_length=100)\n    value = models.IntegerField()\n    deferred_value = models.IntegerField(null=True)\n\nclass MyModelWithLookup(models.Model):\n    name = models.CharField(max_length=100)\n    value = models.IntegerField()\n\n    class Meta:\n        abstract = True\n\nclass MyLookup(models.Lookup):\n    lookup_name = 'my_lookup'\n\n    def as_sql(self, compiler, connection):\n        return ('my_lookup', [self.lhs, self.rhs])\n\n    def get_transform(self, lookup_name):\n        return self\n\n    def get_expression(self, lookup_name):\n        return self\n\n    def get_field_type(self):\n        return self.output_field\n\n    def get_output_field(self):\n        return self.output_field\n\n    def get_source_field(self):\n        return self.lhs\n\n    def get_source_model(self):\n        return self.lhs.model\n\n    def get_rhs_field(self):\n        return self.rhs\n\n    def get_rhs_model(self):\n        return self.rhs.model\n\n    def get_lookup_name(self):\n        return self.lookup_name\n\n\n\n@override_settings(\n    INSTALLED_APPS=[\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.sites',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n    ]\n)\nclass TestQueryUtils(object):\n    def test_select_related_descend(self):\n        field = MyModel.objects.get(pk=1).value\n        assert select_related_descend(field, False, {}, set(), reverse=False) is True\n        assert select_related_descend(field, True, {}, set(), reverse=False) is False\n        assert select_related_descend(field, False, {'value': True}, set(), reverse=False) is True\n        assert select_related_descend(field, True, {'value': True}, set(), reverse=False) is True\n\n    def test_refs_expression(self):\n        annotations = {'a.b': True}\n        assert refs_expression(['a', 'b'], annotations) == (True, ())\n        assert refs_expression(['a', 'c'], annotations) == (False, ('a', 'c'))\n        assert refs_expression(['a', 'b', 'c'], annotations) == (False, ('a', 'b', 'c'))\n\n    def test_check_rel_lookup_compatibility(self):\n        assert check_rel_lookup_compatibility(MyModel, MyRelatedModel._meta, MyRelatedModel.my_model) is True\n        assert check_rel_lookup_compatibility(MyRelatedModel, MyModel._meta, MyRelatedModel.my_model) is True\n        assert check_rel_lookup_compatibility(MyModel, MyModel._meta, MyModel.value) is True\n\n    def test_subclasses(self):\n        for cls in subclasses(MyModel):\n            print(cls)\n\n    def test_register_lookup(self):\n        register_lookup(MyLookup)\n        lookup = MyModel.objects.filter(my_lookup=1)\n        assert lookup.query.where.children[0].get_lookup_name() == 'my_lookup'\n\n    def test_filtered_relation(self):\n        fr = FilteredRelation('my_relation', condition=Q(name='test'))\n        assert fr.relation_name == 'my_relation'\n        assert fr.condition.connector == Q.AND\n        assert fr.alias is None\n        assert fr.path == []\n\n        fr2 = fr.clone()\n        assert fr2.relation_name == 'my_relation'\n        assert fr2.condition.connector == Q.AND\n        assert fr2.alias is None\n        assert fr2.path == []\n\n\n\n"], "sample_94": ["\nfrom _pytest._code import Source\nfrom _pytest._code.source import deindent as deindent\nfrom _pytest._code.source import findsource\nfrom _pytest._code.source import getstatementrange_ast\nfrom typing import List\n\ndef test_source_init():\n    assert Source().lines == []\n    assert Source(None).lines == []\n    assert Source(Source()).lines == []\n    assert Source((\"\\n\".join([\"a\", \"b\", \"c\"])).splitlines()) == Source(\n        \"\"\"\n        a\n        b\n        c\n        \"\"\"\n    )\n    assert Source(\"a\\nb\\nc\").lines == [\"a\", \"b\", \"c\"]\n    def func():\n        pass\n    assert Source(func).lines == getrawcode(func).co_code.splitlines()\n\ndef test_source_getitem():\n    source = Source(\"\"\"\n        a = 1\n        b = 2\n        c = 3\n    \"\"\")\n    assert source[0] == \"a = 1\"\n    assert source[1] == \"b = 2\"\n    assert source[2] == \"c = 3\"\n    assert source[0:2] == Source(\"\"\"\n        a = 1\n        b = 2\n    \"\"\")\n\ndef test_source_strip():\n    source = Source(\"\"\"\n        \n        a = 1\n        \n        b = 2\n        \n    \"\"\")\n    stripped_source = source.strip()\n    assert stripped_source.lines == [\"a = 1\", \"b = 2\"]\n\ndef test_source_indent():\n    source = Source(\"\"\"\n        a = 1\n        b = 2\n        c = 3\n    \"\"\")\n    indented_source = source.indent(\"  \")\n    assert indented_source.lines == [\"  a = 1\", \"  b = 2\", \"  c = 3\"]\n\ndef test_source_getstatement():\n    source = Source(\"\"\"\n        a = 1\n        b = 2\n        c = 3\n    \"\"\")\n    assert source.getstatement(0) == Source(\"a = 1\")\n    assert source.getstatement(1) == Source(\"b = 2\")\n    assert source.getstatement(2) == Source(\"c = 3\")\n\ndef test_source_getstatementrange():\n    source = Source(\"\"\"\n        a = 1\n        b = 2\n        c = 3\n    \"\"\")\n    assert source.getstatementrange(0) == (0, 1)\n    assert source.getstatementrange(1) == (1, 2)\n    assert source.getstatementrange(2) == (2, 3)\n\ndef test_source_deindent():\n    source = Source(\"\"\"\n            a = 1\n        b = 2\n        c = 3\n    \"\"\")\n    deindented_source = source.deindent()\n    assert deindented_source.lines == [\"a = 1\", \"b = 2\", \"c = 3\"]\n\ndef test_findsource():\n    def func():\n        pass\n    source, lineno = findsource(func)\n    assert source is not None\n    assert lineno != -1\n\ndef test_getstatementrange_ast():\n    source = Source(\"\"\"\n        a = 1\n        b = 2\n        c = 3\n    \"\"\")\n    astnode, start, end = getstatementrange_ast(0, source)\n    assert start == 0\n    assert end == 1\n"], "sample_17": ["\nfrom django.db.backends.base.creation import (\n    TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n)\nfrom django.apps import apps\nfrom django.conf import settings\nfrom django.core.management import call_command\nfrom django.core.management.base import CommandError\nfrom django.db import router\nfrom django.db.backends.base import BaseDatabaseIntrospection\nfrom django.test import TestCase, override_settings\nfrom unittest.mock import patch, MagicMock\n\nclass TestBaseDatabaseCreation(TestCase):\n\n    def setUp(self):\n        self.connection = MagicMock(spec=BaseDatabaseIntrospection)\n        self.connection.settings_dict = {'NAME': 'test_db', 'ENGINE': 'django.db.backends.sqlite3'}\n        self.base_creation = BaseDatabaseCreation(self.connection)\n\n    def test_get_test_db_name(self):\n        self.assertEqual(self.base_creation._get_test_db_name(), TEST_DATABASE_PREFIX + 'test_db')\n\n    def test_get_test_db_name_with_custom_name(self):\n        self.connection.settings_dict['TEST'] = {'NAME': 'custom_test_db'}\n        self.assertEqual(self.base_creation._get_test_db_name(), 'custom_test_db')\n\n    def test_create_test_db(self):\n        with patch('sys.stderr.write') as mock_write:\n            self.base_creation.create_test_db()\n            self.assertIn('Creating test database for alias', mock_write.mock_calls)\n\n    def test_create_test_db_with_keepdb(self):\n        with patch('sys.stderr.write') as mock_write:\n            self.base_creation.create_test_db(keepdb=True)\n            self.assertIn('Using existing test database for alias', mock_write.mock_calls)\n\n    def test_destroy_test_db(self):\n        with patch('sys.stderr.write') as mock_write:\n            self.base_creation.destroy_test_db()\n            self.assertIn('Destroying test database for alias', mock_write.mock_calls)\n\n    def test_destroy_test_db_with_keepdb(self):\n        with patch('sys.stderr.write') as mock_write:\n            self.base_creation.destroy_test_db(keepdb=True)\n            self.assertIn('Preserving test database for alias', mock_write.mock_calls)\n\n    def test_clone_test_db(self):\n        with patch('sys.stderr.write') as mock_write:\n            self.base_creation.clone_test_db('suffix')\n            self.assertIn('Cloning test database for alias', mock_write.mock_calls)\n\n    def test_get_test_db_clone_settings(self):\n        settings_dict = self.base_creation.get_test_db_clone_settings('suffix')\n        self.assertEqual(settings_dict['NAME'], 'test_db_suffix')\n\n    def test_test_db_signature(self):\n        signature = self.base_creation.test_db_signature()\n        self.assertEqual(signature, ('localhost', 65532, 'django.db.backends.sqlite3', 'test_test_db'))\n\n\n\n"], "sample_54": ["\nfrom django.utils.html import (\n    conditional_escape,\n    escape,\n    escapejs,\n    format_html,\n    html_safe,\n    json_script,\n    linebreaks,\n    smart_urlquote,\n    strip_spaces_between_tags,\n    strip_tags,\n    urlize,\n)\nfrom django.utils.safestring import SafeString\nfrom django.utils.text import normalize_newlines\nimport unittest\n\n\nclass TestHTMLUtils(unittest.TestCase):\n\n    def test_escape(self):\n        self.assertEqual(escape(\"Hello &lt;world&gt;\"), \"Hello &amp;lt;world&amp;gt;\")\n        self.assertEqual(escape(SafeString(\"Hello &lt;world&gt;\")), \"Hello &amp;lt;world&amp;gt;\")\n\n    def test_conditional_escape(self):\n        self.assertEqual(conditional_escape(\"Hello &lt;world&gt;\"), \"Hello &lt;world&gt;\")\n        self.assertEqual(conditional_escape(SafeString(\"Hello &lt;world&gt;\")), \"Hello &lt;world&gt;\")\n        self.assertEqual(conditional_escape(\"Hello\"), \"Hello\")\n\n    def test_escapejs(self):\n        self.assertEqual(escapejs(\"Hello \\\\\\\"world\\\\\\\" \"), \"Hello \\\\u005C\\\\u0022world\\\\u0022 \")\n        self.assertEqual(escapejs(\"Hello < > & \"), \"Hello &lt; &gt; &amp; \")\n\n    def test_json_script(self):\n        data = {\"name\": \"John Doe\", \"age\": 30}\n        escaped_json = json_script(data)\n        self.assertIn('{\"name\":\"John Doe\",\"age\":30}', escaped_json)\n        self.assertIn('<script', escaped_json)\n        self.assertIn('</script>', escaped_json)\n\n    def test_format_html(self):\n        self.assertEqual(format_html(\"Hello {0}!\", \"world\"), \"Hello world!\")\n        self.assertEqual(format_html(\"Hello {0} and {1}!\", \"world\", \"Django\"), \"Hello world and Django!\")\n\n    def test_format_html_join(self):\n        self.assertEqual(\n            format_html_join(\"\\n\", \"<li>{} {}</li>\", ((u.first_name, u.last_name) for u in [1, 2, 3])),\n            \"<li>1 first_name 1 last_name</li>\\n<li>2 first_name 2 last_name</li>\\n<li>3 first_name 3 last_name</li>\",\n        )\n\n    def test_linebreaks(self):\n        self.assertEqual(linebreaks(\"Hello\\nworld\"), \"<p>Hello<br>world</p>\")\n        self.assertEqual(linebreaks(\"Hello\\n\\nworld\", autoescape=True), \"<p>Hello</p><p>world</p>\")\n\n    def test_strip_tags(self):\n        self.assertEqual(strip_tags(\"<p>Hello <b>world</b></p>\"), \"Hello world\")\n\n    def test_strip_spaces_between_tags(self):\n        self.assertEqual(strip_spaces_between_tags(\"<p> Hello </p>\"), \"<p>Hello</p>\")\n\n    def test_smart_urlquote(self):\n        self.assertEqual(smart_urlquote(\"http://www.example.com\"), \"http://www.example.com\")\n        self.assertEqual(smart_urlquote(\"https://www.example.com\"), \"https://www.example.com\")\n        self.assertEqual(smart_urlquote(\"www.example.com\"), \"http://www.example.com\")\n        self.assertEqual(smart_urlquote(\"example.com\"), \"http://example.com\")\n\n    def test_urlize(self):\n        self.assertEqual(\n            urlize(\"Visit http://www.example.com and https://www.google.com\"),\n            '<a href=\"http://www.example.com\">http://www.example.com</a> and <a href=\"https://www.google.com\">https://www.google.com</a>',\n        )\n        self.assertEqual(urlize(\"john.doe@example.com\"), '<a href=\"mailto:john.doe@example.com\">john.doe@example.com</a>')\n\n    def test_avoid_wrapping(self):\n        self.assertEqual(avoid_wrapping(\"This is a test\"), \"This is a test\")\n        self.assertEqual(avoid_wrapping(\"This is a test with spaces\"), \"This is a test with\\xa0spaces\")\n\n\n\n"], "sample_67": ["\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    serializer_factory,\n    Serializer,\n)\nfrom django.db import models\nfrom django.utils.functional import LazyObject\nfrom django.utils.version import get_docs_version\nfrom unittest import mock\nimport datetime\nimport decimal\nimport functools\nimport os\nimport pathlib\nimport re\nimport types\nimport uuid\nfrom typing import Any, Dict, Tuple\n\nclass TestSerializer(object):\n    def test_register_unregister(self):\n        class MySerializer(BaseSerializer):\n            pass\n        Serializer.register(object, MySerializer)\n        self.assertEqual(Serializer._registry[object], MySerializer)\n        Serializer.unregister(object)\n        with self.assertRaises(KeyError):\n            Serializer._registry[object]\n\n    def test_serializer_factory_basic(self):\n        self.assertEqual(serializer_factory(1), BaseSimpleSerializer(1))\n        self.assertEqual(serializer_factory(1.0), BaseSimpleSerializer(1.0))\n        self.assertEqual(serializer_factory(True), BaseSimpleSerializer(True))\n        self.assertEqual(serializer_factory(False), BaseSimpleSerializer(False))\n        self.assertEqual(serializer_factory(\"hello\"), BaseSimpleSerializer(\"hello\"))\n        self.assertEqual(serializer_factory(None), BaseSimpleSerializer(None))\n\n    def test_serializer_factory_list(self):\n        self.assertEqual(\n            serializer_factory([1, 2, 3]), SequenceSerializer([1, 2, 3])\n        )\n\n    def test_serializer_factory_dict(self):\n        self.assertEqual(\n            serializer_factory({\"a\": 1, \"b\": 2}), DictionarySerializer({\"a\": 1, \"b\": 2})\n        )\n\n    def test_serializer_factory_tuple(self):\n        self.assertEqual(\n            serializer_factory((1, 2, 3)), TupleSerializer((1, 2, 3))\n        )\n\n    def test_serializer_factory_set(self):\n        self.assertEqual(\n            serializer_factory({1, 2, 3}), SetSerializer({1, 2, 3})\n        )\n\n    def test_serializer_factory_frozenset(self):\n        self.assertEqual(\n            serializer_factory(frozenset([1, 2, 3])), FrozensetSerializer(frozenset([1, 2, 3]))\n        )\n\n    def test_serializer_factory_datetime(self):\n        dt = datetime.datetime(2023, 10, 26, 10, 30, 0)\n        self.assertEqual(\n            serializer_factory(dt), DatetimeDatetimeSerializer(dt)\n        )\n\n    def test_serializer_factory_decimal(self):\n        self.assertEqual(\n            serializer_factory(decimal.Decimal(\"1.23\")), DecimalSerializer(decimal.Decimal(\"1.23\"))\n        )\n\n    def test_serializer_factory_uuid(self):\n        self.assertEqual(\n            serializer_factory(uuid.uuid4()), UUIDSerializer(uuid.uuid4())\n        )\n\n    def test_serializer_factory_path(self):\n        self.assertEqual(\n            serializer_factory(pathlib.Path(\"/tmp/test.txt\")), PathSerializer(pathlib.Path(\"/tmp/test.txt\"))\n        )\n\n    def test_serializer_factory_regex(self):\n        regex = re.compile(r\"hello\")\n        self.assertEqual(\n            serializer_factory(regex), RegexSerializer(regex)\n        )\n\n    def test_serializer_factory_function(self):\n        def my_function():\n            pass\n        self.assertEqual(\n            serializer_factory(my_function), FunctionTypeSerializer(my_function)\n        )\n\n    def test_serializer_factory_functools_partial(self):\n        def my_function(a, b):\n            return a + b\n\n        partial = functools.partial(my_function, 1)\n        self.assertEqual(\n            serializer_factory(partial), FunctoolsPartialSerializer(partial)\n        )\n\n    def test_serializer_factory_type(self):\n        self.assertEqual(\n            serializer_factory(int), TypeSerializer(int)\n        )\n\n    def test_serializer_factory_models_field(self):\n        field = models.CharField(max_length=100)\n        self.assertEqual(\n            serializer_factory(field), ModelFieldSerializer(field)\n        )\n\n    def test_serializer_factory_models_manager(self):\n        class MyManager(models.Manager):\n            pass\n        manager = MyManager()\n        self.assertEqual(\n            serializer_factory(manager), ModelManagerSerializer(manager)\n        )\n\n    def test_serializer_factory_operation(self):\n        class MyOperation(Operation):\n            pass\n        operation = MyOperation()\n        self.assertEqual(\n            serializer_factory(operation), OperationSerializer(operation)\n        )\n\n    def test_serializer_factory_promise(self):\n        promise = LazyObject(lambda: \"hello\")\n        self.assertEqual(serializer_factory(promise), BaseSerializer(\"hello\"))\n\n    def test_serializer_factory_unknown_type(self):\n        with self.assertRaises(ValueError):\n            serializer_factory(object())\n\n\n\n"], "sample_152": ["\nfrom sympy.testing.pytest import raises\nfrom sympy.functions.elementary.trigonometric import sin, cos\nfrom sympy.matrices.dense import Matrix\nfrom sympy.simplify import simplify\nfrom sympy.tensor.array import Array\nfrom sympy.tensor.array.dense_ndim_array import ( ImmutableDenseNDimArray, MutableDenseNDimArray)\nfrom sympy.tensor.array.sparse_ndim_array import ( ImmutableSparseNDimArray, MutableSparseNDimArray)\nfrom sympy.abc import x, y\n\ndef test_ndim_array_creation():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.shape == (2, 2)\n    assert a[0, 0] == 1\n    assert a[1, 1] == 4\n\n    b = MutableDenseNDimArray([[1, 2], [3, 4]])\n    assert b.shape == (2, 2)\n    assert b[0, 0] == 1\n    assert b[1, 1] == 4\n\n    c = MutableDenseNDimArray(ImmutableDenseNDimArray([[1, 2], [3, 4]]))\n    assert c.shape == (2, 2)\n    assert c[0, 0] == 1\n    assert c[1, 1] == 4\n\n    d = MutableDenseNDimArray(Matrix([[1, 2], [3, 4]]))\n    assert d.shape == (2, 2)\n    assert d[0, 0] == 1\n    assert d[1, 1] == 4\n\n    e = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert e.shape == (2, 2)\n    assert e[0, 0] == 1\n    assert e[1, 1] == 4\n\n    f = MutableDenseNDimArray(\n        [[1, 2, 3], [4, 5, 6]], (2, 3)\n    )\n    assert f.shape == (2, 3)\n    assert f[0, 0] == 1\n    assert f[1, 2] == 6\n\ndef test_ndim_array_shape():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.shape == (2, 2)\n\n    b = MutableDenseNDimArray([[1, 2], [3, 4]])\n    assert b.shape == (2, 2)\n\n    c = MutableDenseNDimArray(ImmutableDenseNDimArray([[1, 2], [3, 4]]))\n    assert c.shape == (2, 2)\n\n    d = MutableDenseNDimArray(Matrix([[1, 2], [3, 4]]))\n    assert d.shape == (2, 2)\n\n    e = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert e.shape == (2, 2)\n\n    f = MutableDenseNDimArray(\n        [[1, 2, 3], [4, 5, 6]], (2, 3)\n    )\n    assert f.shape == (2, 3)\n\ndef test_ndim_array_rank():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.rank() == 2\n\n    b = MutableDenseNDimArray([[1, 2], [3, 4]])\n    assert b.rank() == 2\n\n    c = MutableDenseNDimArray(ImmutableDenseNDimArray([[1, 2], [3, 4]]))\n    assert c.rank() == 2\n\n    d = MutableDenseNDimArray(Matrix([[1, 2], [3, 4]]))\n    assert d.rank() == 2\n\n    e = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert e.rank() == 2\n\n    f = MutableDenseNDimArray(\n        [[1, 2, 3], [4, 5, 6]], (2, 3)\n    )\n    assert f.rank() == 2\n\ndef test_ndim_array_len():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert len(a) == 4\n\n    b = MutableDenseNDimArray([[1, 2], [3, 4]])\n    assert len(b) == 4\n\n    c = MutableDenseNDimArray(ImmutableDenseNDimArray([[1, 2], [3, 4]]))\n    assert len(c) == 4\n\n    d = MutableDenseNDimArray(Matrix([[1, 2], [3, 4]]))\n    assert len(d) == 4\n\n    e = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert len(e) == 4\n\n    f = MutableDenseNDimArray(\n        [[1, 2, 3], [4, 5, 6]], (2, 3)\n    )\n    assert len(f) == 6\n\ndef test_ndim_array_tolist():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.tolist() == [[1, 2], [3, 4]]\n\n    b = MutableDenseNDimArray([[1, 2], [3, 4]])\n    assert b.tolist() == [[1, 2], [3, 4]]\n\n    c = MutableDenseNDimArray(ImmutableDenseNDimArray([[1, 2], [3, 4]]))\n    assert c.tolist() == [[1, 2], [3, 4]]\n\n    d = MutableDenseNDimArray(Matrix([[1, 2], [3, 4]]))\n    assert d.tolist() == [[1, 2], [3, 4]]\n\n    e = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert e.tolist() == [[1, 2], [3, 4]]\n\n    f = MutableDenseNDimArray(\n        [[1, 2, 3], [4, 5, 6]], (2, 3)\n    )\n    assert f.tolist() == [[1, 2, 3], [4, 5, 6]]\n\ndef test_ndim_array_getitem():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a[0, 0] == 1\n    assert a[1, 1] == 4\n\n    b = MutableDenseNDimArray([[1, 2], [3, 4]])\n    assert b[0, 0] == 1\n    assert b[1, 1] == 4\n\n    c = MutableDenseNDimArray(ImmutableDenseNDimArray([[1, 2], [3, 4]]))\n    assert c[0, 0] == 1\n    assert c[1, 1] == 4\n\n    d = MutableDenseNDimArray(Matrix([[1, 2], [3, 4]]))\n    assert d[0, 0] == 1\n    assert d[1, 1] == 4\n\n    e = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert e[0, 0] == 1\n    assert e[1, 1] == 4\n\n    f = MutableDenseNDimArray(\n        [[1, 2, 3], [4, 5, 6]], (2, 3)\n    )\n    assert f[0, 0] == 1\n    assert f[1, 2] == 6\n\ndef test_ndim_array_setitem():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    a[0, 0] = 5\n    assert a[0, 0] == 5\n\n    b = MutableDenseNDimArray([[1, 2], [3, 4]])\n    b[0, 0] = 5\n    assert b[0, 0] == 5\n\n    c = MutableDenseNDimArray(ImmutableDenseNDimArray([[1, 2], [3, 4]]))\n    c[0, 0] = 5\n    assert c[0, 0] == 5\n\n    d = MutableDenseNDimArray(Matrix([[1, 2], [3, 4]]))\n    d[0, 0] = 5\n    assert d[0, 0] == 5\n\n    e = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    e[0, 0] = 5\n    assert e[0, 0] == 5\n\n    f = MutableDenseNDimArray(\n        [[1, 2, 3], [4, 5, 6]], (2, 3)\n    )\n    f[0, 0] = 5\n    assert f[0, 0] == 5\n\ndef test_ndim_array_arithmetic():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    b = MutableDenseNDimArray([5, 6, 7, 8], (2, 2))\n\n    c = a + b\n    assert c.tolist() == [[6, 8], [10, 12]]\n\n    d = a - b\n    assert d.tolist() == [[-4, -4], [-4, -4]]\n\n    e = a * b\n    assert e.tolist() == [[5, 12], [15, 24]]\n\n    f = a / b\n    assert f.tolist() == [[0.2, 0.3333333333333333], [0.4285714285714286, 0.5]]\n\n    g = a * 2\n    assert g.tolist() == [[2, 4], [6, 8]]\n\n    h = a / 2\n    assert h.tolist() == [[0.5, 1], [1.5, 2]]\n\ndef test_ndim_array_applyfunc():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    b = a.applyfunc(lambda x: x*2)\n    assert b.tolist() == [[2, 4], [6, 8]]\n\ndef test_ndim_array_diff():\n    a = MutableDenseNDimArray([[x, y], [1, 2]], (2, 2))\n    b = a.diff(x)\n    assert b.tolist() == [[1, 0], [0, 0]]\n\ndef test_ndim_array_transpose():\n    a = MutableDenseNDimArray([[1, 2], [3, 4]], (2, 2))\n    b = a.transpose()\n    assert b.tolist() == [[1, 3], [2, 4]]\n\ndef test_ndim_array_conjugate():\n    a = MutableDenseNDimArray([[1, 2], [3, 4]], (2, 2))\n    b = a.conjugate()\n    assert b.tolist() == [[1, 2], [3, 4]]\n\ndef test_ndim_array_adjoint():\n    a = MutableDenseNDimArray([[1, 2], [3, 4]], (2, 2))\n    b = a.adjoint()\n    assert b.tolist() == [[1, 3], [2, 4]]\n\ndef test_ndim_array_slice():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    b = a[0:1, 0:1]\n    assert b.tolist() == [[1]]\n\n    c = a[1:, :]\n    assert c.tolist() == [[3, 4]]\n\n    d = a[:, 1]\n    assert d.tolist() == [2, 4]\n\ndef test_ndim_array_equality():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    b = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    c = MutableDenseNDimArray([1, 2, 3, 5], (2, 2))\n    assert a == b\n    assert a != c\n\ndef test_ndim_array_shape_check():\n    raises(ValueError, lambda: MutableDenseNDimArray([1, 2, 3], (2, 3)))\n    raises(ValueError, lambda: MutableDenseNDimArray([1, 2, 3], ()))\n    raises(ValueError, lambda: MutableDenseNDimArray([1, 2, 3], (0,)))\n\n\n\n"], "sample_85": ["\nimport logging\nimport contextlib\nfrom _pytest.logging import _LiveLoggingStreamHandler\nfrom unittest import TestCase, mock\n\nclass TestLoggingPlugin(TestCase):\n\n    def test_get_actual_log_level(self):\n        with mock.patch(\"logging.CRITICAL\", 50) as mock_critical:\n            with mock.patch(\"logging.ERROR\", 40) as mock_error:\n                with mock.patch(\"logging.WARNING\", 30) as mock_warning:\n                    with mock.patch(\"logging.INFO\", 20) as mock_info:\n                        with mock.patch(\"logging.DEBUG\", 10) as mock_debug:\n                            with mock.patch(\"logging.NOTSET\", 0) as mock_notset:\n                                self.assertEqual(get_actual_log_level(None, \"log_level\", \"log_level\"), 50)\n                                self.assertEqual(get_actual_log_level(None, \"log_level\", \"CRITICAL\"), 50)\n                                self.assertEqual(get_actual_log_level(None, \"log_level\", \"ERROR\"), 40)\n                                self.assertEqual(get_actual_log_level(None, \"log_level\", \"WARNING\"), 30)\n                                self.assertEqual(get_actual_log_level(None, \"log_level\", \"INFO\"), 20)\n                                self.assertEqual(get_actual_log_level(None, \"log_level\", \"DEBUG\"), 10)\n                                self.assertEqual(get_actual_log_level(None, \"log_level\", \"NOTSET\"), 0)\n\n    def test_log_cli_enabled(self):\n        config = mock.Mock()\n        config.getoption = mock.Mock()\n        config.getini = mock.Mock()\n\n        self.assertFalse(LoggingPlugin(config)._log_cli_enabled())\n        config.getoption.return_value = \"DEBUG\"\n        self.assertTrue(LoggingPlugin(config)._log_cli_enabled())\n        config.getini.return_value = \"DEBUG\"\n        self.assertTrue(LoggingPlugin(config)._log_cli_enabled())\n\n    def test__setup_cli_logging(self):\n        config = mock.Mock()\n        config.pluginmanager = mock.Mock()\n        config.pluginmanager.get_plugin = mock.Mock()\n        config.option = mock.Mock()\n\n        terminal_reporter = mock.Mock()\n        capture_manager = mock.Mock()\n        config.pluginmanager.get_plugin.return_value = terminal_reporter\n        config.pluginmanager.get_plugin.side_effect = terminal_reporter\n\n        logging_plugin = LoggingPlugin(config)\n        logging_plugin._setup_cli_logging()\n        logging_plugin.log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        self.assertIsInstance(logging_plugin.log_cli_handler, _LiveLoggingStreamHandler)\n\n    def test_set_log_path(self):\n        logging_plugin = LoggingPlugin(mock.Mock())\n        logging_plugin.set_log_path(\"test.log\")\n        self.assertEqual(logging_plugin.log_file_handler.baseFilename, \"test.log\")\n\n\n\n"], "sample_68": ["\nfrom django.db import IntegrityError, NotSupportedError, OperationalError, ProgrammingError, connection\nfrom django.db.models import FileField, Value\nfrom django.db.models.functions import Lower, Now\nfrom django.test import TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature\nfrom .models import BigAutoFieldModel, Country, FieldsWithDbColumns, NoFields, NullableFields, Pizzeria, ProxyCountry, ProxyMultiCountry, ProxyMultiProxyCountry, ProxyProxyCountry, RelatedModel, Restaurant, SmallAutoFieldModel, State, TwoFields, UpsertConflict,  \n\nclass QuerySetTests(TestCase):\n\n    def test_empty_query_set(self):\n        qs = Country.objects.none()\n        self.assertEqual(len(qs), 0)\n        self.assertFalse(qs.exists())\n        self.assertIsNone(qs.first())\n        self.assertIsNone(qs.get())\n\n    def test_query_set_iter(self):\n        countries = Country.objects.all()\n        for i, country in enumerate(countries):\n            self.assertEqual(country, countries[i])\n\n    def test_query_set_getitem(self):\n        countries = Country.objects.all()\n        self.assertEqual(countries[0], countries.first())\n        with self.assertRaises(IndexError):\n            countries[100]\n\n    def test_query_set_contains(self):\n        country = Country.objects.get(name=\"United States\")\n        self.assertIn(country, Country.objects.all())\n        self.assertNotIn(country, Country.objects.filter(name=\"Canada\"))\n\n    def test_query_set_update(self):\n        countries = Country.objects.all()\n        countries.update(population=countries.values(\"population\")[0][\"population\"] * 2)\n        updated_countries = Country.objects.all()\n        for country in updated_countries:\n            self.assertEqual(country.population, countries.values(\"population\")[0][\"population\"] * 2)\n\n    def test_query_set_delete(self):\n        countries = Country.objects.all()\n        countries.delete()\n        self.assertEqual(Country.objects.count(), 0)\n\n    def test_query_set_values(self):\n        countries = Country.objects.values(\"name\", \"population\")\n        self.assertEqual(len(countries), Country.objects.count())\n        self.assertEqual(type(countries[0]), dict)\n\n    def test_query_set_annotate(self):\n        countries = Country.objects.annotate(\n            population_density=Value(\"100\") * \"population\"\n        )\n        for country in countries:\n            self.assertIsInstance(country.population_density, int)\n\n    def test_query_set_order_by(self):\n        countries = Country.objects.order_by(\"name\")\n        self.assertEqual(\n            list(countries), sorted(Country.objects.all(), key=lambda c: c.name)\n        )\n\n    def test_query_set_filter(self):\n        countries = Country.objects.filter(name=\"United States\")\n        self.assertEqual(len(countries), 1)\n\n    def test_query_set_exclude(self):\n        countries = Country.objects.exclude(name=\"United States\")\n        self.assertEqual(len(countries), Country.objects.count() - 1)\n\n    def test_query_set_get(self):\n        country = Country.objects.get(name=\"United States\")\n        self.assertEqual(country.name, \"United States\")\n\n    def test_query_set_get_raises_exception(self):\n        with self.assertRaises(Country.DoesNotExist):\n            Country.objects.get(name=\"Nonexistent Country\")\n\n    def test_query_set_exists(self):\n        self.assertTrue(Country.objects.filter(name=\"United States\").exists())\n        self.assertFalse(Country.objects.filter(name=\"Nonexistent Country\").exists())\n\n    def test_query_set_count(self):\n        self.assertEqual(Country.objects.count(), Country.objects.all().count())\n\n    def test_query_set_raw(self):\n        with connection.cursor() as cursor:\n            cursor.execute(\"SELECT * FROM django_countries\")\n            rows = cursor.fetchall()\n            raw_query_set = Country.objects.raw(\"SELECT * FROM django_countries\")\n            for row in rows:\n                country = raw_query_set[0]\n                self.assertEqual(country.name, row[1])\n\n    def test_query_set_using(self):\n        with connection.cursor() as cursor:\n            cursor.execute(\"SELECT * FROM django_countries\")\n            rows = cursor.fetchall()\n            raw_query_set = Country.objects.using(\"default\").raw(\"SELECT * FROM django_countries\")\n            for row in rows:\n                country = raw_query_set[0]\n                self.assertEqual(country.name, row[1])\n\n\n\n"], "sample_15": ["\nfrom django.core.checks.translation import (\n    check_language_settings_consistent,\n    check_setting_language_code,\n    check_setting_languages,\n    check_setting_languages_bidi,\n)\nfrom django.conf import settings\nfrom django.utils.translation import get_supported_language_variant\nfrom unittest import mock\n\nclass TestTranslationChecks(object):\n\n    @mock.patch('django.conf.settings.LANGUAGE_CODE', 'en')\n    @mock.patch('django.conf.settings.LANGUAGES', [('en', 'English'), ('fr', 'French')])\n    @mock.patch('django.conf.settings.LANGUAGES_BIDI', [('en', 'English'), ('ar', 'Arabic')])\n    def test_check_setting_language_code(self, mock_languages_bidi, mock_languages, mock_language_code):\n        with mock.patch('django.core.checks.Error') as mock_error:\n            errors = check_setting_language_code(None, **{})\n        assert len(errors) == 0\n        mock_error.assert_not_called()\n\n    @mock.patch('django.conf.settings.LANGUAGE_CODE', 'es')\n    @mock.patch('django.conf.settings.LANGUAGES', [('en', 'English'), ('fr', 'French')])\n    @mock.patch('django.conf.settings.LANGUAGES_BIDI', [('en', 'English'), ('ar', 'Arabic')])\n    def test_check_setting_language_code_invalid(self, mock_languages_bidi, mock_languages, mock_language_code):\n        with mock.patch('django.core.checks.Error') as mock_error:\n            errors = check_setting_language_code(None, **{})\n        assert len(errors) == 1\n        mock_error.assert_called_once_with(\n            'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}'.format('es'),\n            id='translation.E001',\n        )\n\n    @mock.patch('django.conf.settings.LANGUAGE_CODE', 'en')\n    @mock.patch('django.conf.settings.LANGUAGES', [('en', 'English'), ('fr', 'French')])\n    @mock.patch('django.conf.settings.LANGUAGES_BIDI', [('en', 'English'), ('ar', 'Arabic')])\n    def test_check_setting_languages(self, mock_languages_bidi, mock_languages, mock_language_code):\n        with mock.patch('django.core.checks.Error') as mock_error:\n            errors = check_setting_languages(None, **{})\n        assert len(errors) == 0\n        mock_error.assert_not_called()\n\n    @mock.patch('django.conf.settings.LANGUAGE_CODE', 'en')\n    @mock.patch('django.conf.settings.LANGUAGES', [('en', 'English'), ('fr', 'French')])\n    @mock.patch('django.conf.settings.LANGUAGES_BIDI', [('en', 'English'), ('fr', 'French')])\n    def test_check_setting_languages_invalid(self, mock_languages_bidi, mock_languages, mock_language_code):\n        with mock.patch('django.core.checks.Error') as mock_error:\n            errors = check_setting_languages(None, **{})\n        assert len(errors) == 0\n        mock_error.assert_not_called()\n\n    @mock.patch('django.conf.settings.LANGUAGE_CODE', 'en')\n    @mock.patch('django.conf.settings.LANGUAGES', [('en', 'English'), ('fr', 'French')])\n    @mock.patch('django.conf.settings.LANGUAGES_BIDI', [('en', 'English'), ('ar', 'Arabic')])\n    def test_check_setting_languages_bidi_invalid(self, mock_languages_bidi, mock_languages, mock_language_code):\n        with mock.patch('django.core.checks.Error') as mock_error:\n            errors = check_setting_languages_bidi(None, **{})\n        assert len(errors) == 0\n        mock_error.assert_not_called()\n\n    @mock.patch('django.conf.settings.LANGUAGE_CODE', 'es')\n    @mock.patch('django.conf.settings.LANGUAGES', [('en', 'English'), ('fr', 'French')])\n    @mock.patch('django.conf.settings.LANGUAGES_BIDI', [('en', 'English'), ('ar', 'Arabic')])\n    def test_check_language_settings_consistent(self, mock_languages_bidi, mock_languages, mock_language_code):\n        with mock.patch('django.utils.translation.get_supported_language_variant') as mock_get_supported_language_variant:\n            mock_get_supported_language_variant.side_effect = LookupError\n            errors = check_language_settings_consistent(None, **{})\n        assert len(errors) == 1\n        mock_get_supported_language_variant.assert_called_once_with('es')\n\n    @mock.patch('django.conf.settings.LANGUAGE_CODE', 'en')\n    @mock.patch('django.conf.settings.LANGUAGES', [('en', 'English'), ('fr', 'French')])\n    @mock.patch('django.conf.settings.LANGUAGES_BIDI', [('en', 'English'), ('ar', 'Arabic')])\n    def test_check_language_settings_consistent_valid(self, mock_languages_bidi, mock_languages, mock_language_code):\n        with mock.patch('django.utils.translation.get_supported_language_variant') as mock_get_supported_language_variant:\n            mock_get_supported_language_variant.return_value = 'en'\n            errors = check_language_settings_consistent(None, **{})\n        assert len(errors) == 0\n        mock_get_supported_language_variant.assert_called_once_with('en')\n\n\n\n"], "sample_126": ["\nfrom sympy import (Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr)\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt, integer_log\nfrom sympy.core.numbers import (igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse)\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom sympy import pi\nfrom mpmath.libmp.libmpf import fnan\nfrom sympy import Pi\n\ndef test_sympify():\n    assert sympify(1) == S.One\n    assert sympify(2.5) == Rational(5, 2)\n    assert sympify(1j) == S.ImaginaryUnit\n    assert sympify(oo) == S.Infinity\n    assert sympify(nan) == S.NaN\n    assert sympify(pi) == S.Pi\n    assert sympify(E) == S.Exp1\n    assert sympify(zoo) == S.ComplexInfinity\n    assert sympify(complex(1, 2)) == 1 + 2*S.ImaginaryUnit\n\ndef test_number_symbols():\n    assert isinstance(S.One, NumberSymbol)\n    assert isinstance(S.Zero, NumberSymbol)\n    assert isinstance(S.Infinity, NumberSymbol)\n    assert isinstance(S.NegativeInfinity, NumberSymbol)\n    assert isinstance(S.NaN, NumberSymbol)\n    assert isinstance(S.Pi, NumberSymbol)\n    assert isinstance(S.Exp1, NumberSymbol)\n    assert isinstance(S.ImaginaryUnit, NumberSymbol)\n    assert isinstance(S.ComplexInfinity, NumberSymbol)\n    assert isinstance(S.GoldenRatio, NumberSymbol)\n    assert isinstance(S.Catalan, NumberSymbol)\n    assert isinstance(S.EulerGamma, NumberSymbol)\n\ndef test_number_symbol_methods():\n    assert S.Pi.is_real is True\n    assert S.Pi.is_positive is True\n    assert S.Pi.is_irrational is True\n    assert S.Pi.is_number is True\n    assert S.Pi.is_algebraic is False\n    assert S.Pi.is_transcendental is True\n    assert S.Exp1.is_real is True\n    assert S.Exp1.is_positive is True\n    assert S.Exp1.is_irrational is True\n    assert S.Exp1.is_number is True\n    assert S.Exp1.is_algebraic is False\n    assert S.Exp1.is_transcendental is True\n    assert S.ImaginaryUnit.is_imaginary is True\n    assert S.ImaginaryUnit.is_finite is True\n    assert S.ImaginaryUnit.is_number is True\n    assert S.ImaginaryUnit.is_algebraic is True\n    assert S.ImaginaryUnit.is_transcendental is False\n\ndef test_number_symbol_approximation():\n    assert S.Pi.approximation_interval(Integer) == ((Integer(3), Integer(4)))\n    assert S.Exp1.approximation_interval(Integer) == ((Integer(2), Integer(3)))\n    assert S.GoldenRatio.approximation_interval(Integer) == ((S.One, Rational(2)))\n\ndef test_number_symbol_evalf():\n    assert S.Pi._eval_evalf(5) == Float('3.14159', 5)\n    assert S.Exp1._eval_evalf(5) == Float('2.71828', 5)\n\ndef test_number_symbol_int():\n    assert S.Pi.__int__() == 3\n    assert S.Exp1.__int__() == 2\n\ndef test_number_symbol_latex():\n    assert S.Pi._latex(None) == r\"\\pi\"\n    assert S.Exp1._latex(None) == r\"e\"\n    assert S.ImaginaryUnit._latex(None) == r\"i\"\n\n\n\n"], "sample_75": ["\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import Grid, ImageGrid\nimport numpy as np\nimport unittest\n\nclass TestGrid(unittest.TestCase):\n\n    def test_grid_creation(self):\n        fig = plt.figure()\n        grid = Grid(fig, (0.1, 0.1, 0.8, 0.8), (1, 2), ngrids=2)\n        self.assertEqual(len(grid.axes_all), 2)\n        self.assertEqual(grid.get_geometry(), (1, 2))\n\n    def test_grid_direction(self):\n        fig = plt.figure()\n        grid = Grid(fig, (0.1, 0.1, 0.8, 0.8), (1, 2), ngrids=2, direction=\"column\")\n        self.assertEqual(len(grid.axes_column), 2)\n        self.assertEqual(len(grid.axes_row), 1)\n\n    def test_grid_axes_pad(self):\n        fig = plt.figure()\n        grid = Grid(fig, (0.1, 0.1, 0.8, 0.8), (1, 2), ngrids=2, axes_pad=0.05)\n        self.assertEqual(grid.get_axes_pad(), (0.05, 0.05))\n\n    def test_grid_aspect(self):\n        fig = plt.figure()\n        grid = Grid(fig, (0.1, 0.1, 0.8, 0.8), (1, 2), ngrids=2, aspect=True)\n        self.assertTrue(grid._divider.get_aspect())\n\n    def test_grid_label_mode(self):\n        fig = plt.figure()\n        grid = Grid(fig, (0.1, 0.1, 0.8, 0.8), (1, 2), ngrids=2, label_mode=\"L\")\n        for ax in grid.axes_all:\n            _tick_only(ax, False, False)\n\n    def test_grid_set_axes_locator(self):\n        fig = plt.figure()\n        grid = Grid(fig, (0.1, 0.1, 0.8, 0.8), (1, 2), ngrids=2)\n        locator = grid._divider.new_locator(nx=0, ny=0)\n        grid.set_axes_locator(locator)\n        self.assertEqual(grid._divider.get_locator(), locator)\n\n    def test_grid_get_axes_locator(self):\n        fig = plt.figure()\n        grid = Grid(fig, (0.1, 0.1, 0.8, 0.8), (1, 2), ngrids=2)\n        locator = grid._divider.new_locator(nx=0, ny=0)\n        grid._divider.set_locator(locator)\n        self.assertEqual(grid.get_axes_locator(), locator)\n\n    def test_imagegrid_creation(self):\n        fig = plt.figure()\n        grid = ImageGrid(fig, (0.1, 0.1, 0.8, 0.8), (1, 2), ngrids=2,\n                         cbar_mode=\"each\", cbar_location=\"right\")\n        self.assertEqual(len(grid.axes_all), 2)\n        self.assertEqual(len(grid.cbar_axes), 2)\n\n    def test_imagegrid_colorbar_location(self):\n        fig = plt.figure()\n        grid = ImageGrid(fig, (0.1, 0.1, 0.8, 0.8), (1, 2), ngrids=2,\n                         cbar_mode=\"edge\", cbar_location=\"bottom\")\n        self.assertEqual(len(grid.axes_all), 2)\n        self.assertEqual(len(grid.cbar_axes), 1)\n\n    def test_imagegrid_colorbar_size(self):\n        fig = plt.figure()\n        grid = ImageGrid(fig, (0.1, 0.1, 0.8, 0.8), (1, 2), ngrids=2,\n                         cbar_mode=\"each\", cbar_size=\"5%\")\n        self.assertEqual(len(grid.axes_all), 2)\n        self.assertEqual(len(grid.cbar_axes), 2)\n\n    def test_imagegrid_colorbar_pad(self):\n        fig = plt.figure()\n        grid = ImageGrid(fig, (0.1, 0.1, 0.8, 0.8), (1, 2), ngrids=2,\n                         cbar_mode=\"each\", cbar_pad=0.05)\n        self.assertEqual(len(grid.axes_all), 2)\n        self.assertEqual(len(grid.cbar_axes), 2)\n\n    def test_imagegrid_label_mode(self):\n        fig = plt.figure()\n        grid = ImageGrid(fig, (0.1, 0.1, 0.8, 0.8), (1, 2), ngrids=2,\n                         label_mode=\"L\")\n        for ax in grid.axes_all:\n            _tick_only(ax, False, False)\n\n\n\n"], "sample_154": ["\nfrom sympy.utilities.lambdify import lambdify\nfrom sympy.utilities.lambdify import implemented_function, lambdastr\nfrom sympy.utilities.lambdify import MATH_TRANSLATIONS\nfrom sympy.utilities.lambdify import MPMATH_TRANSLATIONS\nfrom sympy.utilities.lambdify import NUMPY_TRANSLATIONS\nfrom sympy.utilities.lambdify import SCIPY_TRANSLATIONS\nfrom sympy import *\nimport numpy as np\nimport sympy\nimport unittest\n\nclass TestLambdify(unittest.TestCase):\n\n    def test_basic_lambdify(self):\n        x = symbols('x')\n        f = lambdify(x, x**2)\n        self.assertEqual(f(2), 4)\n\n    def test_lambdify_with_multiple_variables(self):\n        x, y = symbols('x y')\n        f = lambdify((x, y), x + y)\n        self.assertEqual(f(1, 2), 3)\n\n    def test_lambdify_with_custom_module(self):\n        from sympy.utilities.lambdify import _imp_namespace\n        from sympy.core.function import FunctionClass\n\n        class MyMath:\n            def my_sin(x):\n                return np.sin(x)\n\n        namespace = _imp_namespace(MyMath.my_sin(x))\n        self.assertEqual(namespace['my_sin'], MyMath.my_sin)\n\n    def test_lambdify_with_numpy(self):\n        x = symbols('x')\n        f = lambdify(x, sin(x), 'numpy')\n        self.assertAlmostEqual(f(np.pi/2), 1.0)\n\n    def test_lambdify_with_scipy(self):\n        x = symbols('x')\n        f = lambdify(x, cos(x), 'scipy')\n        self.assertAlmostEqual(f(np.pi/2), 0.0)\n\n    def test_lambdify_with_mpmath(self):\n        x = symbols('x')\n        f = lambdify(x, exp(x), 'mpmath')\n        self.assertAlmostEqual(f(1), np.e)\n\n    def test_lambdastr(self):\n        x = symbols('x')\n        expr = x**2\n        self.assertEqual(lambdastr(x, expr), 'lambda x: (x**2)')\n\n    def test_lambdastr_with_multiple_variables(self):\n        x, y = symbols('x y')\n        expr = x + y\n        self.assertEqual(lambdastr((x, y), expr), 'lambda x,y: (x + y)')\n\n    def test_implemented_function(self):\n        def my_func(x):\n            return x * 2\n\n        f = implemented_function('my_func', my_func)\n        self.assertEqual(f(3), 6)\n\n    def test_implemented_function_with_args(self):\n        def my_func(x, y):\n            return x + y\n\n        f = implemented_function('my_func', my_func)\n        self.assertEqual(f(1, 2), 3)\n\n\n\n"], "sample_111": ["\nimport unittest\nfrom sklearn.metrics.cluster import _generalized_average\nfrom sklearn.metrics.cluster import contingency_matrix\nfrom sklearn.metrics.cluster import homogeneity_completeness_v_measure\nfrom sklearn.metrics.cluster import entropy\nfrom sklearn.metrics.cluster import adjusted_mutual_info_score\nfrom sklearn.metrics.cluster import normalized_mutual_info_score\nfrom sklearn.metrics.cluster import fowlkes_mallows_score\nfrom sklearn.metrics.cluster import v_measure_score\nfrom sklearn.metrics.cluster import homogeneity_score\nfrom sklearn.metrics.cluster import completeness_score\nfrom sklearn.metrics.cluster import mutual_info_score\n\nclass TestHomogeneityCompletenessVMeasure(unittest.TestCase):\n    def test_homogeneity_completeness_v_measure(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        homogeneity, completeness, v_measure = homogeneity_completeness_v_measure(\n            labels_true, labels_pred\n        )\n        self.assertAlmostEqual(homogeneity, 1.0)\n        self.assertAlmostEqual(completeness, 1.0)\n        self.assertAlmostEqual(v_measure, 1.0)\n\n    def test_homogeneity_completeness_v_measure_beta(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        homogeneity, completeness, v_measure = homogeneity_completeness_v_measure(\n            labels_true, labels_pred, beta=0.5\n        )\n        self.assertAlmostEqual(homogeneity, 1.0)\n        self.assertAlmostEqual(completeness, 1.0)\n        self.assertAlmostEqual(v_measure, 1.0)\n\n    def test_homogeneity_completeness_v_measure_empty(self):\n        labels_true = []\n        labels_pred = []\n        homogeneity, completeness, v_measure = homogeneity_completeness_v_measure(\n            labels_true, labels_pred\n        )\n        self.assertAlmostEqual(homogeneity, 0.0)\n        self.assertAlmostEqual(completeness, 0.0)\n        self.assertAlmostEqual(v_measure, 0.0)\n\nclass TestEntropy(unittest.TestCase):\n    def test_entropy_empty(self):\n        labels = []\n        self.assertAlmostEqual(entropy(labels), 1.0)\n\n    def test_entropy_uniform(self):\n        labels = [0, 1, 2, 0, 1, 2]\n        self.assertAlmostEqual(entropy(labels), np.log(3))\n\n    def test_entropy_non_uniform(self):\n        labels = [0, 0, 1, 1, 2, 2, 2, 0]\n        self.assertAlmostEqual(entropy(labels), 1.522986)\n\nclass TestMutualInfoScore(unittest.TestCase):\n    def test_mutual_info_score_empty(self):\n        labels_true = []\n        labels_pred = []\n        self.assertAlmostEqual(mutual_info_score(labels_true, labels_pred), 0.0)\n\n    def test_mutual_info_score_identical(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        self.assertAlmostEqual(mutual_info_score(labels_true, labels_pred), 0.693147)\n\n    def test_mutual_info_score_different(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [1, 1, 0, 0]\n        self.assertAlmostEqual(mutual_info_score(labels_true, labels_pred), 0.0)\n\nclass TestNormalizedMutualInfoScore(unittest.TestCase):\n    def test_normalized_mutual_info_score_empty(self):\n        labels_true = []\n        labels_pred = []\n        self.assertAlmostEqual(normalized_mutual_info_score(labels_true, labels_pred), 0.0)\n\n    def test_normalized_mutual_info_score_identical(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        self.assertAlmostEqual(normalized_mutual_info_score(labels_true, labels_pred), 1.0)\n\n    def test_normalized_mutual_info_score_different(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [1, 1, 0, 0]\n        self.assertAlmostEqual(normalized_mutual_info_score(labels_true, labels_pred), 0.0)\n\nclass TestAdjustedMutualInfoScore(unittest.TestCase):\n    def test_adjusted_mutual_info_score_empty(self):\n        labels_true = []\n        labels_pred = []\n        self.assertAlmostEqual(adjusted_mutual_info_score(labels_true, labels_pred), 1.0)\n\n    def test_adjusted_mutual_info_score_identical(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        self.assertAlmostEqual(adjusted_mutual_info_score(labels_true, labels_pred), 1.0)\n\n    def test_adjusted_mutual_info_score_different(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [1, 1, 0, 0]\n        self.assertAlmostEqual(adjusted_mutual_info_score(labels_true, labels_pred), 0.0)\n\nclass TestVMeasureScore(unittest.TestCase):\n    def test_v_measure_score_empty(self):\n        labels_true = []\n        labels_pred = []\n        self.assertAlmostEqual(v_measure_score(labels_true, labels_pred), 1.0)\n\n    def test_v_measure_score_identical(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        self.assertAlmostEqual(v_measure_score(labels_true, labels_pred), 1.0)\n\n    def test_v_measure_score_different(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [1, 1, 0, 0]\n        self.assertAlmostEqual(v_measure_score(labels_true, labels_pred), 0.0)\n\nclass TestHomogeneityCompleteness(unittest.TestCase):\n    def test_homogeneity_completeness(self):\n        labels_true = [0, 0, 1, 1]\n        labels_pred = [0, 0, 1, 1]\n        homogeneity, completeness = homogeneity_score(labels_true, labels_pred), completeness_score(labels_true, labels_pred)\n        self.assertAlmostEqual(homogeneity, 1.0)\n        self.assertAlmostEqual(completeness, 1.0)\n\n\n\n"], "sample_22": ["\nfrom django.utils import text\nfrom django.utils.text import format_lazy\nfrom django.utils.translation import gettext_lazy, override\nimport unittest\nfrom io import BytesIO\nfrom gzip import GzipFile\nimport re\nimport unicodedata\n\nclass TestText(unittest.TestCase):\n\n    def test_capfirst(self):\n        self.assertEqual(text.capfirst(''), '')\n        self.assertEqual(text.capfirst('hello'), 'Hello')\n        self.assertEqual(text.capfirst('HELLO'), 'HELLO')\n        self.assertEqual(text.capfirst('123'), '123')\n        self.assertEqual(text.capfirst('aBc'), 'aBc')\n\n    def test_wrap(self):\n        self.assertEqual(text.wrap('This is a test string.', 10), 'This is a\\n test string.')\n        self.assertEqual(text.wrap('This is a test string.', 5), 'This\\nis a\\n test\\nstring.')\n        self.assertEqual(text.wrap('This is a test string.', 20), 'This is a test string.')\n\n    def test_truncate_chars(self):\n        self.assertEqual(text.Truncator('This is a test string.').chars(10), 'This is a...')\n        self.assertEqual(text.Truncator('This is a test string.').chars(20, truncate=None), 'This is a test string.')\n        self.assertEqual(text.Truncator('This is a test string.').chars(10, truncate='\u2026'), 'This is a\u2026')\n\n    def test_truncate_words(self):\n        self.assertEqual(text.Truncator('This is a test string.').words(2), 'This is...')\n        self.assertEqual(text.Truncator('This is a test string.').words(3, truncate=None), 'This is a test string.')\n        self.assertEqual(text.Truncator('This is a test string.').words(2, truncate='\u2026'), 'This is\u2026')\n\n    def test_get_valid_filename(self):\n        self.assertEqual(text.get_valid_filename(\"john's portrait in 2004.jpg\"), 'johns_portrait_in_2004.jpg')\n        self.assertEqual(text.get_valid_filename(\"  My File.txt  \"), 'my_file.txt')\n        self.assertEqual(text.get_valid_filename(\"This is a file with some # symbols.txt\"), 'this_is_a_file_with_some_symbols.txt')\n\n    def test_get_text_list(self):\n        self.assertEqual(text.get_text_list(['a', 'b', 'c', 'd']), 'a, b, c or d')\n        self.assertEqual(text.get_text_list(['a', 'b', 'c'], 'and'), 'a, b and c')\n        self.assertEqual(text.get_text_list(['a']), 'a')\n        self.assertEqual(text.get_text_list([]), '')\n\n    def test_normalize_newlines(self):\n        self.assertEqual(text.normalize_newlines(\"\\r\\n\"), \"\\n\")\n        self.assertEqual(text.normalize_newlines(\"\\r\"), \"\\n\")\n        self.assertEqual(text.normalize_newlines(\"\\n\"), \"\\n\")\n        self.assertEqual(text.normalize_newlines(\"\\r\\n\\r\\n\"), \"\\n\\n\")\n\n    def test_phone2numeric(self):\n        self.assertEqual(text.phone2numeric(\"123-456-7890\"), \"1234567890\")\n        self.assertEqual(text.phone2numeric(\"(123) 456-7890\"), \"1234567890\")\n        self.assertEqual(text.phone2numeric(\"1-234-567-8901\"), \"12345678901\")\n        self.assertEqual(text.phone2numeric(\"abc-def-ghi\"), \"223-333-444\")\n\n    def test_compress_string(self):\n        compressed = text.compress_string(\"This is a test string.\")\n        decompressed = GzipFile(fileobj=BytesIO(compressed)).read()\n        self.assertEqual(decompressed, \"This is a test string.\")\n\n    def test_compress_sequence(self):\n        compressed = list(text.compress_sequence(['This', 'is', 'a', 'test', 'string.']))\n        decompressed = GzipFile(fileobj=BytesIO(compressed[0])).read()\n        for i in range(1, len(compressed)):\n            decompressed += GzipFile(fileobj=BytesIO(compressed[i])).read()\n        self.assertEqual(decompressed, 'This is a test string.')\n\n    def test_smart_split(self):\n        self.assertEqual(list(text.smart_split('This is \"a person\\'s\" test.')), ['This', 'is', '\"a person\\\\\\'s\"', 'test.'])\n        self.assertEqual(list(text.smart_split(\"Another 'person\\'s' test.\")), ['Another', \"'person\\\\'s'\", 'test.'])\n        self.assertEqual(list(text.smart_split('A \"\\\"funky\\\" style\" test.')), ['A', '\"\\\\\"funky\\\\\" style\"', 'test.'])\n\n    def test_unescape_entities(self):\n        self.assertEqual(text.unescape_entities(\"&amp;\"), '&')\n        self.assertEqual(text.unescape_entities(\"&lt;\"), '<')\n        self.assertEqual(text.unescape_entities(\"&gt;\"), '>')\n        self.assertEqual(text.unescape_entities(\"&quot;\"), '\"')\n        self.assertEqual(text.unescape_entities(\"&#38;\"), '&')\n        self.assertEqual(text.unescape_entities(\"&#x26;\"), '&')\n\n    def test_unescape_string_literal(self):\n        self.assertEqual(text.unescape_string_literal('\"abc\"'), 'abc')\n        self.assertEqual(text.unescape_string_literal(\"'abc'\"), 'abc')\n        self.assertEqual(text.unescape_string_literal('\"a \\\"bc\\\"\"'), 'a \"bc\"')\n        self.assertEqual(text.unescape_string_literal(\"'\\'ab\\' c'\"), \"'ab' c\")\n\n    def test_slugify(self):\n        self.assertEqual(text.slugify(\"This is a test string.\"), \"this-is-a-test-string\")\n        self.assertEqual(text.slugify(\"This is a test string.\", allow_unicode=True), \"this-is-a-test-string\")\n        self.assertEqual(text.slugify(\"This is a test string with some # symbols.\"), \"this-is-a-test-string-with-some-symbols\")\n        self.assertEqual(text.slugify(\"This is a test string with some # symbols.\", allow_unicode=True), \"this-is-a-test-string-with-some-#-symbols\")\n\n    def test_camel_case_to_spaces(self):\n        self.assertEqual(text.camel_case_to_spaces(\"ThisIsACamelCaseString\"), \"This is a camel case string\")\n        self.assertEqual(text.camel_case_to_spaces(\"thisIsACamelCaseString\"), \"this is a camel case string\")\n        self.assertEqual(text.camel_case_to_spaces(\"This_is_a_camel_case_string\"), \"This is a camel case string\")\n\n    def test_format_lazy(self):\n        self.assertEqual(format_lazy(\"Hello, {name}!\"), \"Hello, world!\")\n        self.assertEqual(format_lazy(\"Hello, {name}!\", name=\"world\"), \"Hello, world!\")\n\n\n\n"], "sample_87": ["\nfrom _pytest.main import _in_venv\nfrom _pytest.main import ExitCode\nfrom _pytest.main import Session\nfrom _pytest.main import pytest_addoption\nfrom _pytest.main import pytest_cmdline_main\nfrom _pytest.main import pytest_ignore_collect\nfrom _pytest.main import pytest_collection_modifyitems\nfrom _pytest.main import pytest_collectstart\nfrom _pytest.main import pytest_runtest_logreport\nfrom _pytest.main import FSHookProxy\nfrom _pytest.main import NoMatch\nfrom _pytest.main import Interrupted\nfrom _pytest.main import Failed\nfrom _pytest.main import _bestrelpath_cache\nfrom _pytest.main import collect_one_node\nfrom _pytest.main import _collectfile\nfrom _pytest.main import _recurse\nfrom _pytest.main import _visit_filter\nfrom _pytest.main import _tryconvertpyarg\nfrom _pytest.main import _parsearg\nfrom _pytest.main import matchnodes\nfrom _pytest.main import genitems\nfrom _pytest.main import nodes\nfrom _pytest.main import attr\nfrom _pytest.main import py\n\nimport os\nimport sys\nimport unittest\nimport importlib\nimport tempfile\nimport shutil\nimport fnmatch\n\nclass TestMain(unittest.TestCase):\n\n    def test_in_venv(self):\n        with tempfile.TemporaryDirectory() as tempdir:\n            os.mkdir(os.path.join(tempdir, 'Scripts'))\n            os.mkdir(os.path.join(tempdir, 'Scripts', 'activate'))\n            self.assertTrue(_in_venv(tempdir))\n\n    def test_ExitCode(self):\n        self.assertEqual(ExitCode.OK, 0)\n        self.assertEqual(ExitCode.TESTS_FAILED, 1)\n        self.assertEqual(ExitCode.USAGE_ERROR, 4)\n\n    def test_Session(self):\n        session = Session(None)\n        self.assertEqual(session.testsfailed, 0)\n        self.assertEqual(session.testscollected, 0)\n        self.assertEqual(session.shouldstop, False)\n        self.assertEqual(session.shouldfail, None)\n        self.assertEqual(session.trace, None)\n        self.assertEqual(session.config, None)\n        self.assertEqual(session._norecursepatterns, None)\n        self.assertEqual(session.startdir, None)\n        self.assertEqual(session._initialpaths, None)\n        self.assertEqual(session._node_cache, {})\n        self.assertEqual(session._pkg_roots, {})\n\n    def test_pytest_addoption(self):\n        pytest_addoption(None)\n\n    def test_pytest_cmdline_main(self):\n        pytest_cmdline_main(None)\n\n    def test_pytest_ignore_collect(self):\n        pytest_ignore_collect(None, None)\n\n    def test_pytest_collection_modifyitems(self):\n        pytest_collection_modifyitems([], None)\n\n    def test_pytest_collectstart(self):\n        pytest_collectstart()\n\n    def test_pytest_runtest_logreport(self):\n        pytest_runtest_logreport(None)\n\n    def test_FSHookProxy(self):\n        FSHookProxy(None, None, None)\n\n    def test_NoMatch(self):\n        NoMatch(\"\", \"\")\n\n    def test_Interrupted(self):\n        Interrupted()\n\n    def test_Failed(self):\n        Failed(\"\")\n\n    def test__bestrelpath_cache(self):\n        _bestrelpath_cache(None)\n\n    def test_collect_one_node(self):\n        collect_one_node(None)\n\n    def test__collectfile(self):\n        _collectfile(None)\n\n    def test__recurse(self):\n        _recurse(None)\n\n    def test__visit_filter(self):\n        _visit_filter(None)\n\n    def test__tryconvertpyarg(self):\n        _tryconvertpyarg(\"\")\n\n    def test__parsearg(self):\n        _parsearg(\"\")\n\n    def test_matchnodes(self):\n        matchnodes([], [])\n\n    def test_genitems(self):\n        genitems(None)\n\n    def test_nodes(self):\n        nodes.FSCollector()\n\n    def test_attr(self):\n        attr.s()\n\n    def test_py(self):\n        py.path.local(\"\")\n\n\n\n"], "sample_96": ["\nimport numpy as np\nfrom sklearn.linear_model.ridge import _RidgeGCV\nfrom sklearn.linear_model.ridge import RidgeCV\nfrom sklearn.linear_model.ridge import RidgeClassifierCV\nfrom sklearn.linear_model.ridge import Ridge\nfrom sklearn.linear_model.ridge import check_X_y\nfrom sklearn.linear_model.ridge import _pre_compute\nfrom sklearn.linear_model.ridge import _rescale_data\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.datasets import make_classification\nfrom sklearn.utils.estimator_checks import check_estimator\nfrom sklearn.utils.testing import assert_almost_equal\nfrom sklearn.utils.testing import assert_array_almost_equal\nfrom sklearn.utils.testing import assert_equal\nfrom sklearn.utils.testing import assert_raises\n\ndef test_ridge_regression_basic():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    ridge = Ridge(alpha=1.0)\n    ridge.fit(X, y)\n    assert_equal(ridge.coef_.shape, (10,))\n    assert_almost_equal(ridge.intercept_, 0.0)\n\ndef test_ridge_regression_sparse():\n    X, y = make_classification(n_samples=100, n_features=1000, random_state=42)\n    X = X.tocsr()\n    ridge = Ridge(alpha=1.0)\n    ridge.fit(X, y)\n    assert_equal(ridge.coef_.shape, (1000,))\n    assert_almost_equal(ridge.intercept_, 0.0)\n\ndef test_ridge_regression_fit_intercept():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    ridge = Ridge(alpha=1.0, fit_intercept=False)\n    ridge.fit(X, y)\n    assert_equal(ridge.intercept_, 0.0)\n\ndef test_ridge_regression_normalize():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    ridge = Ridge(alpha=1.0, normalize=True)\n    ridge.fit(X, y)\n    assert_equal(ridge.coef_.shape, (10,))\n    assert_almost_equal(ridge.intercept_, 0.0)\n\ndef test_ridge_regression_scoring():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    ridge = Ridge(alpha=1.0, scoring='accuracy')\n    ridge.fit(X, y)\n    assert_equal(ridge.scoring_, 'accuracy')\n\ndef test_ridge_regression_cv():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    ridge = RidgeCV(alphas=[0.1, 1.0, 10.0], cv=5)\n    ridge.fit(X, y)\n    assert_equal(ridge.cv_, 5)\n\ndef test_ridge_regression_gcv_mode():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    ridge = RidgeCV(alphas=[0.1, 1.0, 10.0], gcv_mode='svd')\n    ridge.fit(X, y)\n    assert_equal(ridge.gcv_mode_, 'svd')\n\ndef test_ridge_classifier_basic():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    ridge = RidgeClassifier(alpha=1.0)\n    ridge.fit(X, y)\n    assert_equal(ridge.coef_.shape, (10,))\n    assert_almost_equal(ridge.intercept_, 0.0)\n\ndef test_ridge_classifier_sparse():\n    X, y = make_classification(n_samples=100, n_features=1000, random_state=42)\n    X = X.tocsr()\n    ridge = RidgeClassifier(alpha=1.0)\n    ridge.fit(X, y)\n    assert_equal(ridge.coef_.shape, (1000,))\n    assert_almost_equal(ridge.intercept_, 0.0)\n\ndef test_ridge_classifier_fit_intercept():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    ridge = RidgeClassifier(alpha=1.0, fit_intercept=False)\n    ridge.fit(X, y)\n    assert_equal(ridge.intercept_, 0.0)\n\ndef test_ridge_classifier_normalize():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    ridge = RidgeClassifier(alpha=1.0, normalize=True)\n    ridge.fit(X, y)\n    assert_equal(ridge.coef_.shape, (10,))\n    assert_almost_equal(ridge.intercept_, 0.0)\n\ndef test_ridge_classifier_scoring():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    ridge = RidgeClassifier(alpha=1.0, scoring='accuracy')\n    ridge.fit(X, y)\n    assert_equal(ridge.scoring_, 'accuracy')\n\ndef test_ridge_classifier_cv():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    ridge = RidgeClassifierCV(alphas=[0.1, 1.0, 10.0], cv=5)\n    ridge.fit(X, y)\n    assert_equal(ridge.cv_, 5)\n\ndef test_ridge_classifier_gcv_mode():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    ridge = RidgeClassifierCV(alphas=[0.1, 1.0, 10.0], gcv_mode='svd')\n    ridge.fit(X, y)\n    assert_equal(ridge.gcv_mode_, 'svd')\n\ndef test_ridge_regression_check_X_y():\n    X = np.array([[1, 2], [3, 4]])\n    y = np.array([0, 1])\n    check_X_y(X, y, accept_sparse=['csr', 'csc', 'coo'], dtype=np.float64)\n\ndef test_ridge_regression_pre_compute():\n    X = np.array([[1, 2], [3, 4]])\n    y = np.array([0, 1])\n    v, Q, QT_y = _pre_compute(X, y)\n    assert_equal(v.shape, (2,))\n    assert_equal(Q.shape, (2, 2))\n    assert_equal(QT_y.shape, (2,))\n\ndef test_ridge_regression_rescale_data():\n    X = np.array([[1, 2], [3, 4]])\n    y = np.array([0, 1])\n    sample_weight = np.array([1, 2])\n    X, y, X_offset, y_offset, X_scale = _rescale_data(X, y, sample_weight)\n    assert_equal(X.shape, (2, 2))\n    assert_equal(y.shape, (2,))\n    assert_equal(X_offset.shape, (2,))\n    assert_equal(y_offset.shape, ())\n    assert_equal(X_scale.shape, (2,))\n\n\n"], "sample_82": ["\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\nfrom xarray.core.groupby import (\n    DataArrayGroupBy,\n    DatasetGroupBy,\n    _DummyGroup,\n    _unique_and_monotonic,\n    _ensure_1d,\n    _inverse_permutation_indices,\n    _get_keep_attrs,\n)\nfrom xarray.core.ops import concat, peek_at\nfrom xarray.core.utils import is_duck_array_ops\nfrom xarray.tests.test_core import assert_identical\n\n# Test _DummyGroup\ndef test_dummy_group():\n    data = xr.DataArray(np.arange(10), dims=(\"x\", \"y\"))\n    group = _DummyGroup(data, \"x\")\n    assert group.name == \"x\"\n    assert group.coords[\"x\"] == data.coords[\"x\"]\n\n# Test _unique_and_monotonic\ndef test__unique_and_monotonic():\n    data = xr.DataArray(np.arange(10), dims=(\"x\", \"y\"))\n    unique_values, indices = _unique_and_monotonic(data.values)\n    assert unique_values == np.arange(10)\n    assert indices == np.arange(10)\n\n    data = xr.DataArray(np.array([1, 2, 2, 3, 4, 4, 4, 5]), dims=(\"x\", \"y\"))\n    unique_values, indices = _unique_and_monotonic(data.values)\n    assert unique_values == np.array([1, 2, 3, 4, 5])\n    assert indices == np.array([0, 1, 2, 3, 4, 5, 6, 7])\n\n# Test _ensure_1d\ndef test__ensure_1d():\n    data = xr.DataArray(np.arange(10), dims=(\"x\", \"y\"))\n    data, group, stacked_dim, inserted_dims = _ensure_1d(data, data.isel(x=0))\n    assert data.dims == (\"y\",)\n    assert group.dims == (\"x\",)\n    assert stacked_dim == \"x\"\n    assert inserted_dims == []\n\n# Test _inverse_permutation_indices\ndef test__inverse_permutation_indices():\n    indices = np.array([1, 0, 2])\n    inverse_indices = _inverse_permutation_indices(indices)\n    assert inverse_indices == np.array([0, 1, 2])\n\n    indices = np.array([1, 3, 0, 2])\n    inverse_indices = _inverse_permutation_indices(indices)\n    assert inverse_indices == np.array([1, 3, 0, 2])\n\n    indices = np.array([0, 1, 2])\n    inverse_indices = _inverse_permutation_indices(indices)\n    assert inverse_indices is None\n\n\n\n# Test DataArrayGroupBy\ndef test_dataarray_groupby_first():\n    data = xr.DataArray(\n        np.arange(10), dims=(\"x\", \"y\"), coords={\"x\": [0, 1, 2], \"y\": [0, 1]}\n    )\n    grouped = data.groupby(\"x\").first()\n    expected = xr.DataArray(\n        np.array([0, 3, 6]), dims=(\"x\", \"y\"), coords={\"x\": [0, 1, 2], \"y\": [0]}\n    )\n    assert_identical(grouped, expected)\n\ndef test_dataarray_groupby_last():\n    data = xr.DataArray(\n        np.arange(10), dims=(\"x\", \"y\"), coords={\"x\": [0, 1, 2], \"y\": [0, 1]}\n    )\n    grouped = data.groupby(\"x\").last()\n    expected = xr.DataArray(\n        np.array([2, 5, 8]), dims=(\"x\", \"y\"), coords={\"x\": [0, 1, 2], \"y\": [1]}\n    )\n    assert_identical(grouped, expected)\n\ndef test_dataarray_groupby_quantile():\n    data = xr.DataArray(\n        np.arange(10), dims=(\"x\", \"y\"), coords={\"x\": [0, 1, 2], \"y\": [0, 1]}\n    )\n    grouped = data.groupby(\"x\").quantile(0.5)\n    expected = xr.DataArray(\n        np.array([1, 3, 5]), dims=(\"x\", \"y\"), coords={\"x\": [0, 1, 2], \"y\": [0]}\n    )\n    assert_identical(grouped, expected)\n\ndef test_dataarray_groupby_map():\n    data = xr.DataArray(\n        np.arange(10), dims=(\"x\", \"y\"), coords={\"x\": [0, 1, 2], \"y\": [0, 1]}\n    )\n    def func(x):\n        return x * 2\n    grouped = data.groupby(\"x\").map(func)\n    expected = xr.DataArray(\n        np.array([0, 2, 4, 6, 8, 10, 12, 14, 16, 18]),\n        dims=(\"x\", \"y\"),\n        coords={\"x\": [0, 1, 2], \"y\": [0, 1]},\n    )\n    assert_identical(grouped, expected)\n\ndef test_dataarray_groupby_reduce():\n    data = xr.DataArray(\n        np.arange(10), dims=(\"x\", \"y\"), coords={\"x\": [0, 1, 2], \"y\": [0, 1]}\n    )\n    def func(x):\n        return x.sum()\n    grouped = data.groupby(\"x\").reduce(func, dim=\"y\")\n    expected = xr.DataArray(\n        np.array([0, 3, 6]), dims=(\"x\",), coords={\"x\": [0, 1, 2]}\n    )\n    assert_identical(grouped, expected)\n\n# Test DatasetGroupBy\ndef test_dataset_groupby_assign():\n    data = xr.Dataset(\n        {\n            \"a\": xr.DataArray(\n                np.arange(10), dims=(\"x\", \"y\"), coords={\"x\": [0, 1, 2], \"y\": [0, 1]}\n            ),\n            \"b\": xr.DataArray(\n                np.arange(10, 20), dims=(\"x\", \"y\"), coords={\"x\": [0, 1, 2], \"y\": [0, 1]}\n            ),\n        }\n    )\n    grouped = data.groupby(\"x\").assign(c=lambda ds: ds[\"a\"] + ds[\"b\"])\n    expected = xr.Dataset(\n        {\n            \"a\": xr.DataArray(\n                np.arange(10), dims=(\"x\", \"y\"), coords={\"x\": [0, 1, 2], \"y\": [0, 1]}\n            ),\n            \"b\": xr.DataArray(\n                np.arange(10, 20), dims=(\"x\", \"y\"), coords={\"x\": [0, 1, 2], \"y\": [0, 1]}\n            ),\n            \"c\": xr.DataArray(\n                np.arange(10) + np.arange(10, 20),\n                dims=(\"x\", \"y\"),\n                coords={\"x\": [0, 1, 2], \"y\": [0, 1]},\n            ),\n        }\n    )\n    assert_identical(grouped, expected)\n\n\n\n"], "sample_153": ["\nfrom sympy import *\nfrom sympy.printing.pretty import pretty, pretty_print\nfrom sympy.printing.pretty.pretty import PrettyPrinter\nfrom sympy.printing.pretty.pretty_symbol import pretty_symbol\nfrom sympy.printing.pretty.pretty_print import _print_seq\nfrom sympy.printing.pretty.pretty_print import _print_list\nfrom sympy.printing.pretty.pretty_print import _print_tuple\nfrom sympy.printing.pretty.pretty_print import _print_dict\nfrom sympy.printing.pretty.pretty_print import _print_frozenset\nfrom sympy.printing.pretty.pretty_print import _print_UniversalSet\nfrom sympy.printing.pretty.pretty_print import _print_PolyRing\nfrom sympy.printing.pretty.pretty_print import _print_FracField\nfrom sympy.printing.pretty.pretty_print import _print_FreeGroupElement\nfrom sympy.printing.pretty.pretty_print import _print_PolyElement\nfrom sympy.printing.pretty.pretty_print import _print_FracElement\nfrom sympy.printing.pretty.pretty_print import _print_AlgebraicNumber\nfrom sympy.printing.pretty.pretty_print import _print_ComplexRootOf\nfrom sympy.printing.pretty.pretty_print import _print_RootSum\nfrom sympy.printing.pretty.pretty_print import _print_FiniteField\nfrom sympy.printing.pretty.pretty_print import _print_IntegerRing\nfrom sympy.printing.pretty.pretty_print import _print_RationalField\nfrom sympy.printing.pretty.pretty_print import _print_RealField\nfrom sympy.printing.pretty.pretty_print import _print_ComplexField\nfrom sympy.printing.pretty.pretty_print import _print_PolynomialRing\nfrom sympy.printing.pretty.pretty_print import _print_FractionField\nfrom sympy.printing.pretty.pretty_print import _print_PolynomialRingBase\nfrom sympy.printing.pretty.pretty_print import _print_GroebnerBasis\nfrom sympy.printing.pretty.pretty_print import _print_Subs\nfrom sympy.printing.pretty.pretty_print import _print_euler\nfrom sympy.printing.pretty.pretty_print import _print_catalan\nfrom sympy.printing.pretty.pretty_print import _print_bernoulli\nfrom sympy.printing.pretty.pretty_print import _print_bell\nfrom sympy.printing.pretty.pretty_print import _print_lucas\nfrom sympy.printing.pretty.pretty_print import _print_fibonacci\nfrom sympy.printing.pretty.pretty_print import _print_tribonacci\nfrom sympy.printing.pretty.pretty_print import _print_stieltjes\nfrom sympy.printing.pretty.pretty_print import _print_KroneckerDelta\nfrom sympy.printing.pretty.pretty_print import _print_RandomDomain\nfrom sympy.printing.pretty.pretty_print import _print_DMP\nfrom sympy.printing.pretty.pretty_print import _print_DMF\nfrom sympy.printing.pretty.pretty_print import _print_Object\nfrom sympy.printing.pretty.pretty_print import _print_Morphism\nfrom sympy.printing.pretty.pretty_print import _print_NamedMorphism\nfrom sympy.printing.pretty.pretty_print import _print_IdentityMorphism\nfrom sympy.printing.pretty.pretty_print import _print_CompositeMorphism\nfrom sympy.printing.pretty.pretty_print import _print_Category\nfrom sympy.printing.pretty.pretty_print import _print_Diagram\nfrom sympy.printing.pretty.pretty_print import _print_DiagramGrid\nfrom sympy.printing.pretty.pretty_print import _print_FreeModuleElement\nfrom sympy.printing.pretty.pretty_print import _print_SubModule\nfrom sympy.printing.pretty.pretty_print import _print_FreeModule\nfrom sympy.printing.pretty.pretty_print import _print_ModuleImplementedIdeal\nfrom sympy.printing.pretty.pretty_print import _print_QuotientRing\nfrom sympy.printing.pretty.pretty_print import _print_QuotientRingElement\nfrom sympy.printing.pretty.pretty_print import _print_QuotientModuleElement\nfrom sympy.printing.pretty.pretty_print import _print_QuotientModule\nfrom sympy.printing.pretty.pretty_print import _print_MatrixHomomorphism\nfrom sympy.printing.pretty.pretty_print import _print_Manifold\nfrom sympy.printing.pretty.pretty_print import _print_Patch\nfrom sympy.printing.pretty.pretty_print import _print_CoordSystem\nfrom sympy.printing.pretty.pretty_print import _print_BaseScalarField\nfrom sympy.printing.pretty.pretty_print import _print_BaseVectorField\nfrom sympy.printing.pretty.pretty_print import _print_Differential\nfrom sympy.printing.pretty.pretty_print import _print_Tr\nfrom sympy.printing.pretty.pretty_print import _print_primenu\nfrom sympy.printing.pretty.pretty_print import _print_primeomega\nfrom sympy.printing.pretty.pretty_print import _print_Quantity\nfrom sympy.printing.pretty.pretty_print import _print_AssignmentBase\nfrom sympy.printing.pretty.pretty_print import _print_Str\n\n\n\ndef test_pretty_print_basic():\n    assert pretty_print(1) == '1'\n    assert pretty_print(2.5) == '2.5'\n    assert pretty_print(True) == 'True'\n    assert pretty_print(False) == 'False'\n    assert pretty_print(Symbol('x')) == 'x'\n    assert pretty_print(x) == 'x'\n    assert pretty_print(sin(x)) == 'sin(x)'\n    assert pretty_print(cos(x)) == 'cos(x)'\n    assert pretty_print(tan(x)) == 'tan(x)'\n    assert pretty_print(log(x)) == 'log(x)'\n    assert pretty_print(exp(x)) == 'exp(x)'\n    assert pretty_print(sqrt(x)) == '\u221ax'\n    assert pretty_print(sqrt(x**2)) == 'x'\n    assert pretty_print(x**2) == 'x**2'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x**2 + 2*x + 1) == 'x**2 + 2*x + 1'\n    assert pretty_print(x) == x\n    assert pretty_print(x) == x\n    assert pretty_print(x) == x\n    assert pretty_print(x) == x\n    assert pretty_print(x) == x\n    assert pretty_print(x) == x\n    assert pretty_print(x) == x\n    assert pretty_print(x) == x\n    assert pretty_print(x) == x\n    assert pretty_print(x) == x\n    assert pretty_print(x) == x\n    assert pretty_print(x) == x\n    assert pretty_print(x) == x\n    assert pretty_print(x) == x\n    assert pretty_print(x) == x\n    return\n    assert pretty_print(x) == x\n    return\n    assert pretty_print(x) == x\n    return\n    assert pretty_print(x) == x\n    return\n    assert pretty_print(x) == x\n    return\n    assert pretty_print(x) == x\n    return\n    assert pretty_print(x) == x\n    return\n    assert pretty_print(x) == x\n    return\n    assert\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n\n    return,\n    return,\n    return,\n    return,\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return,\n    return,\n    return,\n    return,\n    return,\n    return\n\n    return,\n    return,\n    return,\n    return\n    return,\n    return,\n    return\n\n    return,\n    return,\n    return,\nreturn,\nreturn,\nreturn,\nreturn\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn\nreturn,\nreturn\nreturn,\nreturn\n\nreturn,\nreturn,\nreturn\nreturn.\n\nreturn\nreturn.\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn.\n\nreturn,\nreturn.\n\nreturn,\nreturn,\nreturn,\nreturn.\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn.\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn.\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn.\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn.\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn.\n\nreturn,\nreturn,\nreturn.\n\nreturn,\nreturn.\n\nreturn,\nreturn.\n\nreturn,\nreturn.\n\nreturn,\nreturn.\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn.\n\nreturn,\nreturn,\nreturn,\nreturn.\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn_\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn.\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn.\nreturn,\nreturn,\nreturn,\nreturn,\nreturn.\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn.\n\nreturn,\nreturn,\nreturn,\nreturn,\n\nreturn,\nreturn,\nreturn,\nreturn,\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\nreturn.\n\nreturn,\nreturn,\nreturn,\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\n\nreturn,\nreturn,\nreturn,\nreturn,\n\nreturn,\nreturn,\nreturn.\n\nreturn,\n\nreturn,\nreturn,\nreturn,\nreturn,\nreturn,\n\nreturn,\nreturn,\nreturn,\nreturn"], "sample_26": ["\nfrom django.db.backends.base.creation import (\n    TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n)\nfrom django.conf import settings\nfrom django.core.management import call_command\nfrom django.db import router\nfrom django.test import TestCase, override_settings\nfrom django.test.utils import get_random_string\n\nclass TestBaseDatabaseCreation(TestCase):\n\n    def setUp(self):\n        self.connection = None\n        self.base_creation = None\n\n    def tearDown(self):\n        if self.connection:\n            self.connection.close()\n\n    def test_get_test_db_name(self):\n        # Test that the test database name is constructed correctly.\n        settings.DATABASES = {\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        }\n        self.connection = router.get_connection('default')\n        self.base_creation = BaseDatabaseCreation(self.connection)\n        self.assertEqual(self.base_creation._get_test_db_name(), TEST_DATABASE_PREFIX + 'default')\n\n    def test_get_test_db_name_with_custom_name(self):\n        # Test that the test database name is constructed correctly when a custom name is provided.\n        settings.DATABASES = {\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n                'TEST': {\n                    'NAME': 'my_test_db',\n                }\n            }\n        }\n        self.connection = router.get_connection('default')\n        self.base_creation = BaseDatabaseCreation(self.connection)\n        self.assertEqual(self.base_creation._get_test_db_name(), 'my_test_db')\n\n    def test_create_test_db_with_verbosity(self):\n        # Test that the verbosity level is correctly passed to the log method.\n        settings.DATABASES = {\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        }\n        self.connection = router.get_connection('default')\n        self.base_creation = BaseDatabaseCreation(self.connection)\n        with self.assertLogs() as cm:\n            self.base_creation.create_test_db(verbosity=2)\n        for record in cm.records:\n            if record.levelno == 10:\n                self.assertIn('Creating test database for alias default', record.msg)\n\n    def test_create_test_db_with_autoclobber(self):\n        # Test that the autoclobber flag is correctly passed to the _create_test_db method.\n        settings.DATABASES = {\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        }\n        self.connection = router.get_connection('default')\n        self.base_creation = BaseDatabaseCreation(self.connection)\n        with self.assertLogs() as cm:\n            self.base_creation.create_test_db(autoclobber=True)\n        for record in cm.records:\n            if record.levelno == 10:\n                self.assertIn('Creating test database for alias default', record.msg)\n\n    def test_create_test_db_with_keepdb(self):\n        # Test that the keepdb flag is correctly passed to the _create_test_db method.\n        settings.DATABASES = {\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        }\n        self.connection = router.get_connection('default')\n        self.base_creation = BaseDatabaseCreation(self.connection)\n        with self.assertLogs() as cm:\n            self.base_creation.create_test_db(keepdb=True)\n        for record in cm.records:\n            if record.levelno == 10:\n                self.assertIn('Using existing', record.msg)\n\n    def test_clone_test_db(self):\n        # Test that the clone_test_db method works correctly.\n        settings.DATABASES = {\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        }\n        self.connection = router.get_connection('default')\n        self.base_creation = BaseDatabaseCreation(self.connection)\n        self.base_creation.clone_test_db(suffix=get_random_string(length=8))\n\n    def test_get_test_db_clone_settings(self):\n        # Test that the get_test_db_clone_settings method returns the correct settings.\n        settings.DATABASES = {\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        }\n        self.connection = router.get_connection('default')\n        self.base_creation = BaseDatabaseCreation(self.connection)\n        new_settings = self.base_creation.get_test_db_clone_settings(suffix=get_random_string(length=8))\n        self.assertEqual(new_settings['NAME'], ':memory_test_db')\n\n    def test_destroy_test_db(self):\n        # Test that the destroy_test_db method works correctly.\n        settings.DATABASES = {\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        }\n        self.connection = router.get_connection('default')\n        self.base_creation = BaseDatabaseCreation(self.connection)\n        self.base_creation.destroy_test_db()\n\n\n\n"], "sample_92": ["\nfrom _pytest.skipping import evaluate_skip_marks\nfrom _pytest.skipping import evaluate_xfail_marks\nfrom _pytest.skipping import pytest_runtest_setup\nfrom unittest.mock import MagicMock, patch\nfrom typing import Tuple\n\nclass TestSkipping:\n    def test_evaluate_skip_marks_no_skipif(self):\n        item = MagicMock(spec=Item)\n        result = evaluate_skip_marks(item)\n        assert result is None\n\n    def test_evaluate_skip_marks_skip_mark(self):\n        item = MagicMock(spec=Item)\n        item.iter_markers.return_value = [MagicMock(name=\"skip\", kwargs={\"reason\": \"test skipped\"})]\n        result = evaluate_skip_marks(item)\n        assert result.reason == \"test skipped\"\n\n    def test_evaluate_skip_marks_skipif_condition(self):\n        item = MagicMock(spec=Item)\n        item.iter_markers.return_value = [MagicMock(name=\"skipif\", kwargs={\"condition\": True, \"reason\": \"test skipped\"})]\n        result = evaluate_skip_marks(item)\n        assert result.reason == \"test skipped\"\n\n    def test_evaluate_skip_marks_skipif_condition_false(self):\n        item = MagicMock(spec=Item)\n        item.iter_markers.return_value = [MagicMock(name=\"skipif\", kwargs={\"condition\": False, \"reason\": \"test skipped\"})]\n        result = evaluate_skip_marks(item)\n        assert result is None\n\n    def test_evaluate_xfail_marks_no_xfail(self):\n        item = MagicMock(spec=Item)\n        result = evaluate_xfail_marks(item)\n        assert result is None\n\n    def test_evaluate_xfail_marks_xfail_mark(self):\n        item = MagicMock(spec=Item)\n        item.iter_markers.return_value = [MagicMock(name=\"xfail\", kwargs={\"reason\": \"test xfailed\"})]\n        result = evaluate_xfail_marks(item)\n        assert result.reason == \"test xfailed\"\n\n    def test_evaluate_xfail_marks_xfail_condition(self):\n        item = MagicMock(spec=Item)\n        item.iter_markers.return_value = [MagicMock(name=\"xfail\", kwargs={\"condition\": True, \"reason\": \"test xfailed\"})]\n        result = evaluate_xfail_marks(item)\n        assert result.reason == \"test xfailed\"\n\n    def test_evaluate_xfail_marks_xfail_condition_false(self):\n        item = MagicMock(spec=Item)\n        item.iter_markers.return_value = [MagicMock(name=\"xfail\", kwargs={\"condition\": False, \"reason\": \"test xfailed\"})]\n        result = evaluate_xfail_marks(item)\n        assert result is None\n\n    def test_pytest_runtest_setup_skip(self):\n        item = MagicMock(spec=Item)\n        item.iter_markers.return_value = [MagicMock(name=\"skip\", kwargs={\"reason\": \"test skipped\"})]\n        with patch(\"pytest.skip\") as mock_skip:\n            pytest_runtest_setup(item)\n            mock_skip.assert_called_once_with(\"test skipped\")\n\n    def test_pytest_runtest_setup_xfail(self):\n        item = MagicMock(spec=Item)\n        item.iter_markers.return_value = [MagicMock(name=\"xfail\", kwargs={\"reason\": \"test xfailed\"})]\n        with patch(\"pytest.xfail\") as mock_xfail:\n            pytest_runtest_setup(item)\n            mock_xfail.assert_called_once_with(\"test xfailed\")\n\n\n\n"], "sample_112": ["\nimport unittest\nfrom sklearn.isotonic import (\n    check_increasing,\n    isotonic_regression,\n    IsotonicRegression,\n    _make_unique,\n)\nfrom sklearn.datasets import make_regression\nfrom sklearn.utils.testing import assert_array_almost_equal\nimport numpy as np\n\nclass TestIsotonicRegression(unittest.TestCase):\n\n    def test_check_increasing(self):\n        # Test with perfect positive correlation\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([2, 4, 6, 8, 10])\n        self.assertTrue(check_increasing(x, y))\n\n        # Test with perfect negative correlation\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([10, 8, 6, 4, 2])\n        self.assertFalse(check_increasing(x, y))\n\n        # Test with no correlation\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([3, 7, 2, 9, 5])\n        self.assertFalse(check_increasing(x, y))\n\n        # Test with ties\n        x = np.array([1, 2, 2, 3, 4, 4, 5])\n        y = np.array([2, 4, 4, 6, 8, 8, 10])\n        self.assertTrue(check_increasing(x, y))\n\n    def test_isotonic_regression(self):\n        # Test with simple data\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([2, 4, 6, 8, 10])\n        y_pred = isotonic_regression(y)\n        self.assertTrue(np.all(y_pred == y))\n\n        # Test with sample weights\n        sample_weight = np.array([1, 2, 3, 4, 5])\n        y_pred = isotonic_regression(y, sample_weight=sample_weight)\n        self.assertTrue(np.all(y_pred == y))\n\n        # Test with bounds\n        y_pred = isotonic_regression(y, y_min=3, y_max=9)\n        self.assertTrue(np.all(y_pred >= 3))\n        self.assertTrue(np.all(y_pred <= 9))\n\n    def test_isotonic_regression_increasing(self):\n        # Test with increasing\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([2, 4, 6, 8, 10])\n        y_pred = isotonic_regression(y, increasing=True)\n        self.assertTrue(np.all(y_pred == y))\n\n    def test_isotonic_regression_decreasing(self):\n        # Test with decreasing\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([10, 8, 6, 4, 2])\n        y_pred = isotonic_regression(y, increasing=False)\n        self.assertTrue(np.all(y_pred == y[::-1]))\n\n    def test_isotonic_regression_auto(self):\n        # Test with auto\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([2, 4, 6, 8, 10])\n        y_pred = isotonic_regression(y, increasing=\"auto\")\n        self.assertTrue(np.all(y_pred == y))\n\n        x = np.array([1, 2, 3, 4, 5])\n        y = np.array([10, 8, 6, 4, 2])\n        y_pred = isotonic_regression(y, increasing=\"auto\")\n        self.assertTrue(np.all(y_pred == y[::-1]))\n\n    def test_isotonic_regression_fit(self):\n        X, y = make_regression(n_samples=10, n_features=1, random_state=42)\n        model = IsotonicRegression()\n        model.fit(X, y)\n        y_pred = model.predict(X)\n        assert_array_almost_equal(y_pred, y)\n\n    def test_isotonic_regression_transform(self):\n        X, y = make_regression(n_samples=10, n_features=1, random_state=42)\n        model = IsotonicRegression()\n        model.fit(X, y)\n        y_pred = model.transform(X)\n        assert_array_almost_equal(y_pred, y)\n\n    def test_isotonic_regression_predict(self):\n        X, y = make_regression(n_samples=10, n_features=1, random_state=42)\n        model = IsotonicRegression()\n        model.fit(X, y)\n        y_pred = model.predict(X)\n        assert_array_almost_equal(y_pred, y)\n\n    def test_isotonic_regression_bounds(self):\n        X, y = make_regression(n_samples=10, n_features=1, random_state=42)\n        model = IsotonicRegression(y_min=0, y_max=10)\n        model.fit(X, y)\n        y_pred = model.predict(X)\n        self.assertTrue(np.all(y_pred >= 0))\n        self.assertTrue(np.all(y_pred <= 10))\n\n    def test_isotonic_regression_out_of_bounds(self):\n        X, y = make_regression(n_samples=10, n_features=1, random_state=42)\n        model = IsotonicRegression(out_of_bounds=\"clip\")\n        model.fit(X, y)\n        X_out_of_bounds = np.array([X.min() - 1, X.max() + 1])\n        y_pred = model.predict(X_out_of_bounds)\n        self.assertTrue(np.all(y_pred >= model.y_min))\n        self.assertTrue(np.all(y_pred <= model.y_max))\n\n    def test_make_unique(self):\n        X = np.array([1, 2, 2, 3, 4, 4, 5])\n        y = np.array([2, 4, 4, 6, 8, 8, 10])\n        X_unique, y_unique, _ = _make_unique(X, y)\n        self.assertEqual(len(X_unique), 5)\n        self.assertEqual(len(y_unique), 5)\n\n\n\n"], "sample_91": ["\nfrom _pytest.skipping import evaluate_skip_marks\nfrom _pytest.skipping import evaluate_xfail_marks\nfrom _pytest.skipping import pytest_runtest_setup\nfrom typing import Any\nfrom unittest import mock\n\nclass TestSkipping:\n    def test_evaluate_skip_marks_no_skip(self):\n        item = mock.Mock(spec=Any)\n        result = evaluate_skip_marks(item)\n        assert result is None\n\n    def test_evaluate_skip_marks_skip(self):\n        item = mock.Mock(spec=Any)\n        item.iter_markers.return_value = [mock.Mock(name=\"skip\", kwargs={\"reason\": \"test skipped\"})]\n        result = evaluate_skip_marks(item)\n        assert result.reason == \"test skipped\"\n\n    def test_evaluate_skip_marks_skipif_true(self):\n        item = mock.Mock(spec=Any)\n        item.iter_markers.return_value = [mock.Mock(name=\"skipif\", kwargs={\"condition\": True, \"reason\": \"test skipped\"})]\n        result = evaluate_skip_marks(item)\n        assert result.reason == \"test skipped\"\n\n    def test_evaluate_skip_marks_skipif_false(self):\n        item = mock.Mock(spec=Any)\n        item.iter_markers.return_value = [mock.Mock(name=\"skipif\", kwargs={\"condition\": False, \"reason\": \"test skipped\"})]\n        result = evaluate_skip_marks(item)\n        assert result is None\n\n    def test_evaluate_xfail_marks_no_xfail(self):\n        item = mock.Mock(spec=Any)\n        result = evaluate_xfail_marks(item)\n        assert result is None\n\n    def test_evaluate_xfail_marks_xfail(self):\n        item = mock.Mock(spec=Any)\n        item.iter_markers.return_value = [mock.Mock(name=\"xfail\", kwargs={\"reason\": \"test xfailed\"})]\n        result = evaluate_xfail_marks(item)\n        assert result.reason == \"test xfailed\"\n\n    def test_evaluate_xfail_marks_xfail_run_false(self):\n        item = mock.Mock(spec=Any)\n        item.iter_markers.return_value = [mock.Mock(name=\"xfail\", kwargs={\"run\": False, \"reason\": \"test xfailed\"})]\n        result = evaluate_xfail_marks(item)\n        assert result.reason == \"test xfailed\"\n        assert not result.run\n\n    def test_evaluate_xfail_marks_xfail_strict_true(self):\n        item = mock.Mock(spec=Any)\n        item.iter_markers.return_value = [mock.Mock(name=\"xfail\", kwargs={\"strict\": True, \"reason\": \"test xfailed\"})]\n        result = evaluate_xfail_marks(item)\n        assert result.reason == \"test xfailed\"\n        assert result.strict\n\n    def test_evaluate_xfail_marks_xfail_raises(self):\n        item = mock.Mock(spec=Any)\n        item.iter_markers.return_value = [mock.Mock(name=\"xfail\", kwargs={\"raises\": (ValueError,), \"reason\": \"test xfailed\"})]\n        result = evaluate_xfail_marks(item)\n        assert result.reason == \"test xfailed\"\n        assert result.raises == (ValueError,)\n\n    def test_pytest_runtest_setup(self):\n        item = mock.Mock(spec=Any)\n        pytest_runtest_setup(item)\n        assert item._store[skipped_by_mark_key] is False\n\n\n\n"], "sample_10": ["\nimport unittest\nfrom django.db import connection\nfrom django.db.models import (\n    BooleanField, DateTimeField, Field, IntegerField,\n)\nfrom django.db.models.expressions import (\n    Case, Exists, Func, Value, When,\n)\nfrom django.db.models.query_utils import Query\nfrom django.test import TestCase\nfrom django.utils.datastructures import OrderedSet\n\nfrom ..lookups import (\n    Exact, IExact, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual,\n    IntegerFieldFloatRounding, IntegerGreaterThanOrEqual, IntegerLessThan,\n    In, PatternLookup, Contains, IContains, StartsWith, IStartsWith, EndsWith,\n    IEndsWith, Range, IsNull, Regex, IRegex, YearExact, YearGt, YearGte,\n    YearLt, YearLte,\n)\n\n\nclass LookupTests(TestCase):\n    def setUp(self):\n        self.connection = connection\n\n    def test_exact_lookup(self):\n        field = IntegerField()\n        lookup = Exact()\n        self.assertEqual(lookup.lookup_name, 'exact')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s = %s', ())\n\n    def test_iexact_lookup(self):\n        field = IntegerField()\n        lookup = IExact()\n        self.assertEqual(lookup.lookup_name, 'iexact')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s = %s', ())\n\n    def test_gt_lookup(self):\n        field = IntegerField()\n        lookup = GreaterThan()\n        self.assertEqual(lookup.lookup_name, 'gt')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s > %s', ())\n\n    def test_gte_lookup(self):\n        field = IntegerField()\n        lookup = GreaterThanOrEqual()\n        self.assertEqual(lookup.lookup_name, 'gte')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s >= %s', ())\n\n    def test_lt_lookup(self):\n        field = IntegerField()\n        lookup = LessThan()\n        self.assertEqual(lookup.lookup_name, 'lt')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s < %s', ())\n\n    def test_lte_lookup(self):\n        field = IntegerField()\n        lookup = LessThanOrEqual()\n        self.assertEqual(lookup.lookup_name, 'lte')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s <= %s', ())\n\n    def test_in_lookup(self):\n        field = IntegerField()\n        lookup = In()\n        self.assertEqual(lookup.lookup_name, 'in')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s IN (%s)', ())\n\n    def test_in_lookup_empty(self):\n        field = IntegerField()\n        lookup = In()\n        with self.assertRaises(EmptyResultSet):\n            lookup.as_sql(None, self.connection)\n\n    def test_in_lookup_with_query(self):\n        field = IntegerField()\n        lookup = In()\n        query = Query()\n        lookup.rhs = query\n        with self.assertRaises(ValueError):\n            lookup.as_sql(None, self.connection)\n\n    def test_in_lookup_with_limit_one(self):\n        field = IntegerField()\n        lookup = In()\n        query = Query()\n        query.limit_one()\n        lookup.rhs = query\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s IN (%s)', ())\n\n    def test_in_lookup_with_no_select_fields(self):\n        field = IntegerField()\n        lookup = In()\n        query = Query()\n        lookup.rhs = query\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s IN (%s)', ())\n\n    def test_contains_lookup(self):\n        field = CharField()\n        lookup = Contains()\n        self.assertEqual(lookup.lookup_name, 'contains')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s LIKE %s', ())\n\n    def test_icontains_lookup(self):\n        field = CharField()\n        lookup = IContains()\n        self.assertEqual(lookup.lookup_name, 'icontains')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s ILIKE %s', ())\n\n    def test_startswith_lookup(self):\n        field = CharField()\n        lookup = StartsWith()\n        self.assertEqual(lookup.lookup_name, 'startswith')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s LIKE %s', ())\n\n    def test_istartswith_lookup(self):\n        field = CharField()\n        lookup = IStartsWith()\n        self.assertEqual(lookup.lookup_name, 'istartswith')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s ILIKE %s', ())\n\n    def test_endswith_lookup(self):\n        field = CharField()\n        lookup = EndsWith()\n        self.assertEqual(lookup.lookup_name, 'endswith')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s LIKE %s', ())\n\n    def test_iendswith_lookup(self):\n        field = CharField()\n        lookup = IEndsWith()\n        self.assertEqual(lookup.lookup_name, 'iendswith')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s ILIKE %s', ())\n\n    def test_range_lookup(self):\n        field = IntegerField()\n        lookup = Range()\n        self.assertEqual(lookup.lookup_name, 'range')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s BETWEEN %s AND %s', ())\n\n    def test_isnull_lookup(self):\n        field = BooleanField()\n        lookup = IsNull()\n        self.assertEqual(lookup.lookup_name, 'isnull')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s IS NULL', ())\n\n    def test_iregex_lookup(self):\n        field = CharField()\n        lookup = IRegex()\n        self.assertEqual(lookup.lookup_name, 'iregex')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s ILIKE %s', ())\n\n    def test_year_exact_lookup(self):\n        field = DateTimeField()\n        lookup = YearExact()\n        self.assertEqual(lookup.lookup_name, 'exact')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s BETWEEN %s AND %s', ())\n\n    def test_year_gt_lookup(self):\n        field = DateTimeField()\n        lookup = YearGt()\n        self.assertEqual(lookup.lookup_name, 'gt')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s > %s', ())\n\n    def test_year_gte_lookup(self):\n        field = DateTimeField()\n        lookup = YearGte()\n        self.assertEqual(lookup.lookup_name, 'gte')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s >= %s', ())\n\n    def test_year_lt_lookup(self):\n        field = DateTimeField()\n        lookup = YearLt()\n        self.assertEqual(lookup.lookup_name, 'lt')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s < %s', ())\n\n    def test_year_lte_lookup(self):\n        field = DateTimeField()\n        lookup = YearLte()\n        self.assertEqual(lookup.lookup_name, 'lte')\n        self.assertEqual(lookup.as_sql(None, self.connection), '%s <= %s', ())\n\n\n\n"], "sample_31": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.core.management import CommandError\nfrom django.core.management.commands.shell import Command\n\nclass TestShellCommand(unittest.TestCase):\n\n    @patch('sys.stdin.read', return_value='print(\"Hello from stdin\")\\n')\n    @patch('django.core.management.commands.shell.os.environ', new_callable=dict)\n    def test_stdin_input(self, mock_environ, mock_stdin):\n        mock_environ['PYTHONSTARTUP'] = '/path/to/pythonrc'\n        with patch('django.core.management.commands.shell.os.path.isfile', return_value=True):\n            with patch('django.core.management.commands.shell.open') as mock_open:\n                Command().handle(command='shell', interface='python')\n                mock_open.assert_called_once_with('/path/to/pythonrc', 'r')\n                self.assertEqual(mock_stdin.read.call_count, 1)\n                self.assertEqual(mock_stdin.read.call_args[0][0], '')\n                self.assertEqual(mock_stdin.read.call_args[0][1], '')\n\n    @patch('django.core.management.commands.shell.os.environ', new_callable=dict)\n    def test_no_startup(self, mock_environ):\n        mock_environ['PYTHONSTARTUP'] = '/path/to/pythonrc'\n        with patch('django.core.management.commands.shell.os.path.isfile', return_value=True):\n            with patch('django.core.management.commands.shell.open') as mock_open:\n                Command().handle(command='shell', interface='python', no_startup=True)\n                mock_open.assert_not_called()\n\n    @patch('django.core.management.commands.shell.os.environ', new_callable=dict)\n    def test_command_argument(self, mock_environ):\n        mock_environ['PYTHONSTARTUP'] = '/path/to/pythonrc'\n        with patch('django.core.management.commands.shell.os.path.isfile', return_value=True):\n            with patch('django.core.management.commands.shell.open') as mock_open:\n                Command().handle(command='shell', interface='python', command='print(\"Hello from command\")')\n                mock_open.assert_not_called()\n                self.assertEqual(mock_environ['PYTHONSTARTUP'], '/path/to/pythonrc')\n\n    def test_shell_selection(self):\n        with patch('django.core.management.commands.shell.IPython.start_ipython') as mock_ipython:\n            with patch('django.core.management.commands.shell.bpython.embed') as mock_bpython:\n                with patch('django.core.management.commands.shell.code.interact') as mock_python:\n                    Command().handle(command='shell', interface='ipython')\n                    mock_ipython.assert_called_once()\n                    mock_bpython.assert_not_called()\n                    mock_python.assert_not_called()\n\n    def test_shell_import_error(self):\n        with patch('django.core.management.commands.shell.IPython.start_ipython', side_effect=ImportError):\n            with patch('django.core.management.commands.shell.bpython.embed', side_effect=ImportError):\n                with patch('django.core.management.commands.shell.code.interact') as mock_python:\n                    with self.assertRaises(CommandError):\n                        Command().handle(command='shell', interface='python')\n                    mock_python.assert_not_called()\n\n\n\n"], "sample_155": ["\nfrom sympy.physics.units.definitions.dimension_definitions import ( Dimension, charge, length, time, temperature, pressure, energy, mass )\nfrom sympy.physics.units.systems.si import dimsys_SI\nfrom sympy.physics.units.unitsystem import UnitSystem, get_unit_system, get_default_unit_system\nimport unittest\n\nclass TestUnitSystem(unittest.TestCase):\n\n    def test_init(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units, name=\"Custom\")\n        self.assertEqual(unit_system.name, \"Custom\")\n        self.assertEqual(unit_system._base_units, base_units)\n        self.assertEqual(unit_system._dimension_system, dimsys_SI)\n\n    def test_extend(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units, name=\"Custom\")\n        new_base_units = (charge,)\n        new_unit_system = unit_system.extend(new_base_units, name=\"CustomExtended\")\n        self.assertEqual(new_unit_system.name, \"CustomExtended\")\n        self.assertEqual(new_unit_system._base_units, base_units + new_base_units)\n\n    def test_get_unit_system(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units, name=\"Custom\")\n        self.assertEqual(get_unit_system(\"Custom\"), unit_system)\n        self.assertEqual(get_unit_system(unit_system), unit_system)\n        with self.assertRaises(ValueError):\n            get_unit_system(\"NonExistent\")\n\n    def test_get_default_unit_system(self):\n        self.assertEqual(get_default_unit_system(), dimsys_SI)\n\n    def test_dim(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units)\n        self.assertEqual(unit_system.dim, 3)\n\n    def test_is_consistent(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units)\n        self.assertTrue(unit_system.is_consistent)\n\n    def test_derived_units(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units, derived_units={Dimension(1): Quantity(\"speed\", 1)})\n        self.assertEqual(unit_system.derived_units, {Dimension(1): Quantity(\"speed\", 1)})\n\n    def test_get_dimensional_expr(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units)\n        self.assertEqual(unit_system.get_dimensional_expr(length), length)\n        self.assertEqual(unit_system.get_dimensional_expr(time), time)\n        self.assertEqual(unit_system.get_dimensional_expr(mass), mass)\n        self.assertEqual(unit_system.get_dimensional_expr(length * time), length * time)\n        self.assertEqual(unit_system.get_dimensional_expr(length ** 2), length ** 2)\n        self.assertEqual(unit_system.get_dimensional_expr(time ** 2), time ** 2)\n        self.assertEqual(unit_system.get_dimensional_expr(length * time ** 2), length * time ** 2)\n        self.assertEqual(unit_system.get_dimensional_expr(Quantity(\"speed\", 1)), \"speed\")\n\n\n\n"], "sample_42": ["\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    serializer_factory,\n    Serializer,\n)\nfrom django.db import models\nfrom django.utils.timezone import utc\nfrom unittest import mock\nimport datetime\nimport decimal\nimport enum\nimport functools\nimport pathlib\nimport re\nimport types\nimport uuid\nfrom django.conf import Settings\n\nclass TestSerializer(object):\n    def test_serializer_factory_simple_types(self):\n        for value in [1, 2.5, True, False, 'hello', None, datetime.date(2023, 10, 26),\n                      decimal.Decimal('1.23'), uuid.UUID('123e4567-e89b-12d3-a456-426655440000')]:\n            serializer = serializer_factory(value)\n            self.assertIsInstance(serializer, BaseSerializer)\n\n    def test_serializer_factory_list(self):\n        serializer = serializer_factory([1, 2, 3])\n        self.assertIsInstance(serializer, SequenceSerializer)\n\n    def test_serializer_factory_dict(self):\n        serializer = serializer_factory({'a': 1, 'b': 2})\n        self.assertIsInstance(serializer, DictionarySerializer)\n\n    def test_serializer_factory_tuple(self):\n        serializer = serializer_factory((1, 2, 3))\n        self.assertIsInstance(serializer, TupleSerializer)\n\n    def test_serializer_factory_set(self):\n        serializer = serializer_factory({1, 2, 3})\n        self.assertIsInstance(serializer, SetSerializer)\n\n    def test_serializer_factory_frozenset(self):\n        serializer = serializer_factory(frozenset([1, 2, 3]))\n        self.assertIsInstance(serializer, FrozensetSerializer)\n\n    def test_serializer_factory_datetime(self):\n        serializer = serializer_factory(datetime.datetime(2023, 10, 26, 10, 30, 0))\n        self.assertIsInstance(serializer, DatetimeDatetimeSerializer)\n\n    def test_serializer_factory_date(self):\n        serializer = serializer_factory(datetime.date(2023, 10, 26))\n        self.assertIsInstance(serializer, DateTimeSerializer)\n\n    def test_serializer_factory_time(self):\n        serializer = serializer_factory(datetime.time(10, 30, 0))\n        self.assertIsInstance(serializer, DateTimeSerializer)\n\n    def test_serializer_factory_decimal(self):\n        serializer = serializer_factory(decimal.Decimal('1.23'))\n        self.assertIsInstance(serializer, DecimalSerializer)\n\n    def test_serializer_factory_enum(self):\n        class MyEnum(enum.Enum):\n            VALUE1 = 1\n            VALUE2 = 2\n\n        serializer = serializer_factory(MyEnum.VALUE1)\n        self.assertIsInstance(serializer, EnumSerializer)\n\n    def test_serializer_factory_function(self):\n        def my_function():\n            pass\n\n        serializer = serializer_factory(my_function)\n        self.assertIsInstance(serializer, FunctionTypeSerializer)\n\n    def test_serializer_factory_functools_partial(self):\n        def my_function(a, b):\n            return a + b\n\n        partial = functools.partial(my_function, 1)\n        serializer = serializer_factory(partial)\n        self.assertIsInstance(serializer, FunctoolsPartialSerializer)\n\n    def test_serializer_factory_pathlib_path(self):\n        path = pathlib.Path('/tmp/test')\n        serializer = serializer_factory(path)\n        self.assertIsInstance(serializer, PathSerializer)\n\n    def test_serializer_factory_os_pathlike(self):\n        path = '/tmp/test'\n        serializer = serializer_factory(path)\n        self.assertIsInstance(serializer, PathLikeSerializer)\n\n    def test_serializer_factory_regex(self):\n        pattern = re.compile(r'hello')\n        serializer = serializer_factory(pattern)\n        self.assertIsInstance(serializer, RegexSerializer)\n\n    def test_serializer_factory_settings_reference(self):\n        serializer = serializer_factory(SettingsReference('TEST_SETTING'))\n        self.assertIsInstance(serializer, SettingsReferenceSerializer)\n\n    def test_serializer_factory_models_field(self):\n        class MyModel(models.Model):\n            my_field = models.CharField(max_length=100)\n\n        serializer = serializer_factory(MyModel.my_field)\n        self.assertIsInstance(serializer, ModelFieldSerializer)\n\n    def test_serializer_factory_models_manager(self):\n        class MyModel(models.Model):\n            pass\n\n        manager = MyModel.objects.all()\n        serializer = serializer_factory(manager)\n        self.assertIsInstance(serializer, ModelManagerSerializer)\n\n    def test_serializer_factory_operation(self):\n        class MockOperation(Operation):\n            pass\n\n        serializer = serializer_factory(MockOperation())\n        self.assertIsInstance(serializer, OperationSerializer)\n\n    def test_serializer_factory_type(self):\n        serializer = serializer_factory(list)\n        self.assertIsInstance(serializer, TypeSerializer)\n\n    def test_serializer_factory_uuid(self):\n        serializer = serializer_factory(uuid.UUID('123e4567-e89b-12d3-a456-426655440000'))\n        self.assertIsInstance(serializer, UUIDSerializer)\n\n    def test_serializer_factory_unknown_type(self):\n        with self.assertRaises(ValueError):\n            serializer_factory(object())\n\n\n\n"], "sample_107": ["\nimport unittest\nfrom sklearn.metrics.scorer import get_scorer\nfrom sklearn.linear_model.logistic import (LogisticRegression, logistic_regression_path, _logistic_regression_path, LogisticRegressionCV, _logistic_loss_and_grad, _logistic_grad_hess, _multinomial_grad_hess, _logistic_loss, _log_reg_scoring_path)\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.utils import check_X_y, check_array\nfrom sklearn.utils.validation import check_is_fitted\nfrom sklearn.linear_model import LogisticRegressionCV\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\n\nclass TestLogisticRegressionCV(unittest.TestCase):\n\n    def test_logistic_regression_cv_basic(self):\n        X, y = load_iris(return_X_y=True)\n        X = check_array(X)\n        y = check_array(y)\n        clf = LogisticRegressionCV(cv=5, random_state=0).fit(X, y)\n        self.assertEqual(clf.n_iter_, 5)\n\n    def test_logistic_regression_cv_scoring(self):\n        X, y = load_iris(return_X_y=True)\n        X = check_array(X)\n        y = check_array(y)\n        clf = LogisticRegressionCV(cv=5, scoring='f1', random_state=0).fit(X, y)\n        self.assertEqual(clf.scoring_, 'f1')\n\n    def test_logistic_regression_cv_refit(self):\n        X, y = load_iris(return_X_y=True)\n        X = check_array(X)\n        y = check_array(y)\n        clf = LogisticRegressionCV(cv=5, refit=False, random_state=0).fit(X, y)\n        check_is_fitted(clf)\n        self.assertEqual(clf.refit, False)\n\n    def test_logistic_regression_cv_multi_class(self):\n        X, y = load_iris(return_X_y=True)\n        X = check_array(X)\n        y = check_array(y)\n        clf = LogisticRegressionCV(cv=5, multi_class='multinomial', random_state=0).fit(X, y)\n        self.assertEqual(clf.multi_class, 'multinomial')\n\n    def test_logistic_regression_cv_penalty(self):\n        X, y = load_iris(return_X_y=True)\n        X = check_array(X)\n        y = check_array(y)\n        clf = LogisticRegressionCV(cv=5, penalty='elasticnet', random_state=0).fit(X, y)\n        self.assertEqual(clf.penalty, 'elasticnet')\n\n    def test_logistic_regression_cv_l1_ratio(self):\n        X, y = load_iris(return_X_y=True)\n        X = check_array(X)\n        y = check_array(y)\n        clf = LogisticRegressionCV(cv=5, l1_ratio=0.5, random_state=0).fit(X, y)\n        self.assertEqual(clf.l1_ratio_, 0.5)\n\n    def test_logistic_regression_cv_Cs(self):\n        X, y = load_iris(return_X_y=True)\n        X = check_array(X)\n        y = check_array(y)\n        clf = LogisticRegressionCV(cv=5, Cs=10, random_state=0).fit(X, y)\n        self.assertEqual(clf.Cs_, 10)\n\n    def test_logistic_regression_cv_class_weight(self):\n        X, y = load_iris(return_X_y=True)\n        X = check_array(X)\n        y = check_array(y)\n        clf = LogisticRegressionCV(cv=5, class_weight='balanced', random_state=0).fit(X, y)\n        self.assertEqual(clf.class_weight, 'balanced')\n\n    def test_logistic_regression_cv_n_jobs(self):\n        X, y = load_iris(return_X_y=True)\n        X = check_array(X)\n        y = check_array(y)\n        clf = LogisticRegressionCV(cv=5, n_jobs=-1, random_state=0).fit(X, y)\n        self.assertEqual(clf.n_jobs, -1)\n\n    def test_logistic_regression_cv_verbose(self):\n        X, y = load_iris(return_X_y=True)\n        X = check_array(X)\n        y = check_array(y)\n        clf = LogisticRegressionCV(cv=5, verbose=2, random_state=0).fit(X, y)\n        self.assertEqual(clf.verbose, 2)\n\n    def test_logistic_regression_cv_intercept_scaling(self):\n        X, y = load_iris(return_X_y=True)\n        X = check_array(X)\n        y = check_array(y)\n        clf = LogisticRegressionCV(cv=5, intercept_scaling=2, random_state=0).fit(X, y)\n        self.assertEqual(clf.intercept_scaling, 2)\n\n    def test_logistic_regression_cv_multi_class_ovr(self):\n        X, y = load_iris(return_X_y=True)\n        X = check_array(X)\n        y = check_array(y)\n        clf = LogisticRegressionCV(cv=5, multi_class='ovr', random_state=0).fit(X, y)\n        self.assertEqual(clf.multi_class, 'ovr')\n\n    def test_logistic_regression_cv_multi_class_multinomial(self):\n        X, y = load_iris(return_X_y=True)\n        X = check_array(X)\n        y = check_array(y)\n        clf = LogisticRegressionCV(cv=5, multi_class='multinomial', random_state=0).fit(X, y)\n        self.assertEqual(clf.multi_class, 'multinomial')\n\n    def test_logistic_regression_cv_with_sample_weight(self):\n        X, y = load_iris(return_X_y=True)\n        X = check_array(X)\n        y = check_array(y)\n        sample_weight = np.random.rand(len(y))\n        clf = LogisticRegressionCV(cv=5, random_state=0).fit(X, y, sample_weight=sample_weight)\n        self.assertEqual(clf.sample_weight, sample_weight)\n\n\n\n"], "sample_98": ["\nimport unittest\nimport numpy as np\nfrom sklearn.utils.validation import (\n    check_array, check_X_y, check_symmetric, check_is_fitted,\n    check_consistent_length, assert_all_finite, check_non_negative,\n    check_random_state, has_fit_parameter, LARGE_SPARSE_SUPPORTED\n)\n\nclass TestValidation(unittest.TestCase):\n\n    def test_check_array_numeric_dtype(self):\n        X = np.array([1, 2, 3], dtype=np.object)\n        X_converted = check_array(X, dtype=\"numeric\")\n        self.assertEqual(X_converted.dtype, np.float64)\n\n    def test_check_array_object_dtype_no_conversion(self):\n        X = np.array([1, 2, 3], dtype=np.float64)\n        X_converted = check_array(X, dtype=\"numeric\")\n        self.assertTrue(np.array_equal(X, X_converted))\n\n    def test_check_array_sparse_format(self):\n        from scipy.sparse import csr_matrix\n        X = csr_matrix([[1, 2], [3, 4]])\n        X_converted = check_array(X, accept_sparse='csr')\n        self.assertTrue(isinstance(X_converted, csr_matrix))\n\n    def test_check_array_sparse_format_error(self):\n        from scipy.sparse import coo_matrix\n        X = coo_matrix([[1, 2], [3, 4]])\n        with self.assertRaises(ValueError):\n            check_array(X, accept_sparse='csr')\n\n    def test_check_array_large_sparse_error(self):\n        from scipy.sparse import csr_matrix\n        X = csr_matrix([[1, 2], [3, 4]], dtype=np.int64)\n        with self.assertRaises(ValueError):\n            check_array(X, accept_large_sparse=False)\n\n    def test_check_array_large_sparse_ok(self):\n        from scipy.sparse import csr_matrix\n        X = csr_matrix([[1, 2], [3, 4]], dtype=np.int32)\n        check_array(X, accept_large_sparse=False)\n\n    def test_check_array_ensure_min_samples(self):\n        X = np.array([[1, 2], [3, 4]])\n        with self.assertRaises(ValueError):\n            check_array(X, ensure_min_samples=3)\n\n    def test_check_array_ensure_min_features(self):\n        X = np.array([[1, 2], [3, 4]])\n        with self.assertRaises(ValueError):\n            check_array(X, ensure_min_features=3)\n\n    def test_check_X_y_multi_output(self):\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([[5, 6], [7, 8]])\n        X_converted, y_converted = check_X_y(X, y, multi_output=True)\n        self.assertTrue(isinstance(y_converted, np.ndarray))\n        self.assertEqual(y_converted.shape, (4, 2))\n\n    def test_check_X_y_multi_output_error(self):\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([5, 6])\n        with self.assertRaises(ValueError):\n            check_X_y(X, y, multi_output=True)\n\n    def test_check_symmetric(self):\n        array = np.array([[1, 2], [2, 3]])\n        array_sym = check_symmetric(array)\n        self.assertTrue(np.allclose(array, array_sym))\n\n    def test_check_symmetric_not_symmetric(self):\n        array = np.array([[1, 2], [3, 4]])\n        array[0, 1] = 5\n        array_sym = check_symmetric(array, raise_exception=True)\n        self.assertTrue(np.allclose(array, array_sym))\n\n    def test_check_is_fitted_all(self):\n        class MyEstimator:\n            def __init__(self):\n                self.coef_ = None\n                self.estimator_ = None\n\n            def fit(self, X, y):\n                self.coef_ = X\n                self.estimator_ = y\n\n        estimator = MyEstimator()\n        with self.assertRaises(NotFittedError):\n            check_is_fitted(estimator, [\"coef_\", \"estimator_\"], all=True)\n\n    def test_check_is_fitted_any(self):\n        class MyEstimator:\n            def __init__(self):\n                self.coef_ = None\n                self.estimator_ = None\n\n            def fit(self, X, y):\n                self.coef_ = X\n                self.estimator_ = y\n\n        estimator = MyEstimator()\n        estimator.fit(np.array([1, 2]), np.array([3, 4]))\n        check_is_fitted(estimator, [\"coef_\"], all=False)\n\n    def test_check_is_fitted_not_fitted(self):\n        class MyEstimator:\n            def __init__(self):\n                self.coef_ = None\n                self.estimator_ = None\n\n            def fit(self, X, y):\n                self.coef_ = X\n                self.estimator_ = y\n\n        estimator = MyEstimator()\n        with self.assertRaises(NotFittedError):\n            check_is_fitted(estimator, [\"coef_\"], msg=\"This estimator is not fitted yet.\")\n\n    def test_check_consistent_length(self):\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([5, 6])\n        check_consistent_length(X, y)\n\n    def test_check_consistent_length_error(self):\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([5, 6, 7])\n        with self.assertRaises(ValueError):\n            check_consistent_length(X, y)\n\n    def test_check_non_negative(self):\n        X = np.array([1, 2, 3])\n        check_non_negative(X, 'check_non_negative')\n\n    def test_check_non_negative_error(self):\n        X = np.array([1, 2, -3])\n        with self.assertRaises(ValueError):\n            check_non_negative(X, 'check_non_negative')\n\n    def test_check_random_state(self):\n        seed = None\n        random_state = check_random_state(seed)\n        self.assertIs(random_state, np.random.mtrand._rand)\n\n    def test_check_random_state_int(self):\n        seed = 42\n        random_state = check_random_state(seed)\n        self.assertIsInstance(random_state, np.random.RandomState)\n\n    def test_check_random_state_instance(self):\n        random_state = np.random.RandomState(42)\n        random_state_converted = check_random_state(random_state)\n        self.assertIs(random_state_converted, random_state)\n\n    def test_check_random_state_error(self):\n        with self.assertRaises(ValueError):\n            check_random_state('hello')\n\n    def test_has_fit_parameter(self):\n        class MyEstimator:\n            def __init__(self):\n                pass\n\n            def fit(self, X, y):\n                pass\n\n        self.assertTrue(has_fit_parameter(MyEstimator(), 'coef_'))\n\n    def test_has_fit_parameter_not_found(self):\n        class MyEstimator:\n            def __init__(self):\n                pass\n\n            def fit(self, X, y):\n                pass\n\n        self.assertFalse(has_fit_parameter(MyEstimator(), 'coef_'))\n\n\n\n"], "sample_95": ["\nimport unittest\nfrom _pytest.python import Function, FunctionDefinition, _idvalset, _idval, idmaker, get_real_func, _ascii_escaped_by_config, _pytest_code\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.mark import MarkDecorator\nfrom _pytest.config import Config\nfrom _pytest.runner import runtestprotocol\nfrom _pytest.skipping import pytest_runtest_setup\nfrom typing import Any, Callable, Dict, List, Optional, Tuple, Union\nfrom inspect import getlocation, getdoc, isfunction\nfrom unittest import mock\nimport pytest\nfrom _pytest.nodes import Item\nfrom _pytest.compat import NOTSET\nfrom _pytest.mark import MarkDecorator\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.config import Config\nfrom _pytest.runner import runtestprotocol\nfrom _pytest.skipping import pytest_runtest_setup\nfrom typing import Any, Callable, Dict, List, Optional, Tuple, Union\nfrom inspect import getlocation, getdoc, isfunction\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nclass TestFunction(unittest.TestCase):\n\n    def test_function_init(self):\n        parent = MagicMock()\n        config = MagicMock(spec=Config)\n        callspec = MagicMock(spec=CallSpec2)\n        callobj = MagicMock()\n        keywords = {'a': 1, 'b': 2}\n        session = MagicMock(spec=Session)\n        fixtureinfo = MagicMock(spec=FuncFixtureInfo)\n        originalname = 'original_name'\n\n        func = Function(\n            name=\"my_func\",\n            parent=parent,\n            config=config,\n            callspec=callspec,\n            callobj=callobj,\n            keywords=keywords,\n            session=session,\n            fixtureinfo=fixtureinfo,\n            originalname=originalname,\n        )\n\n        self.assertEqual(func.name, \"my_func\")\n        self.assertEqual(func.parent, parent)\n        self.assertEqual(func.config, config)\n        self.assertEqual(func.callspec, callspec)\n        self.assertEqual(func.obj, callobj)\n        self.assertEqual(func.keywords, keywords)\n        self.assertEqual(func.session, session)\n        self.assertEqual(func.fixtureinfo, fixtureinfo)\n        self.assertEqual(func.originalname, originalname)\n\n    def test_function_from_parent(self):\n        parent = MagicMock()\n        func = Function.from_parent(parent)\n        self.assertEqual(func.parent, parent)\n\n    def test_function_getobj(self):\n        parent = MagicMock()\n        parent.obj = MagicMock()\n        func = Function(\"my_func\", parent)\n        self.assertEqual(func._getobj(), parent.obj)\n\n    def test_function_get_real_func(self):\n        func = MagicMock(spec=object)\n        self.assertEqual(get_real_func(func), func)\n\n    def test_function_repr_failure(self):\n        excinfo = MagicMock(spec=ExceptionInfo[BaseException])\n        func = Function(\"my_func\", MagicMock(),)\n        with patch.object(func, \"_prunetraceback\") as mock_prunetraceback:\n            func._repr_failure_py(excinfo, style=\"auto\")\n            mock_prunetraceback.assert_called_once_with(excinfo)\n\n\n\n"], "sample_142": ["\nfrom sympy.utilities.iterables import (\n    _partition, _set_partitions, binary_partitions, bracelets, capture, cartes, common_prefix, common_suffix, connected_components, dict_merge, filter_symbols, flatten, generate_bell, generate_derangements, generate_involutions, generate_oriented_forest, group, has_dups, ibin, iproduct, kbins, minlex, multiset, multiset_combinations, multiset_partitions, multiset_permutations, necklaces, numbered_symbols, ordered, partitions, permutations, postfixes, postorder_traversal, prefixes, reshape, rotate_left, rotate_right, runs, sift, strongly_connected_components, subsets, take, topological_sort, unflatten, uniq, variations, ordered_partitions, rotations, is_palindromic\n)\nfrom sympy.utilities.enumerative import (\n    factoring_visitor, multiset_partitions_taocp\n)\n\ndef test_generate_bell():\n    from sympy import Permutation\n    for i in range(4):\n        for p in generate_bell(i + 1):\n            assert len(p) == i + 1\n            assert all(p[j] < p[j + 1] for j in range(i))\n            assert all(p[j] != p[j + 1] for j in range(i))\n            assert p == list(Permutation(p))\n\ndef test_generate_derangements():\n    for i in range(4):\n        for p in generate_derangements(list(range(i + 1))):\n            assert len(p) == i + 1\n            assert all(x not in p[p.index(x) + 1:] for x in p)\n\ndef test_generate_involutions():\n    for i in range(4):\n        for p in generate_involutions(i + 1):\n            assert len(p) == i + 1\n            assert all(p[j] != p[j + 1] for j in range(i))\n            assert p == list(Permutation(p))\n\ndef test_generate_oriented_forest():\n    for i in range(4):\n        for p in generate_oriented_forest(i):\n            assert len(p) == i\n            assert all(p[j] < p[j + 1] for j in range(i - 1))\n\ndef test_minlex():\n    for s in ['abc', 'cba', 'aab', 'aba', 'aaab', 'abab']:\n        for i in range(len(s)):\n            assert minlex(s, directed=True, is_set=False) == s\n            assert minlex(s, directed=False, is_set=False) == s\n            assert minlex(s, directed=True, is_set=True) == s\n            assert minlex(s, directed=False, is_set=True) == s\n    for s in ['11010011000', '00011010011', '10101010101']:\n        assert minlex(s, directed=True) == minlex(s, directed=False)\n\ndef test_runs():\n    for seq in [[0, 1, 2, 2, 1, 4, 3, 2, 2], [1, 2, 3, 4, 5], [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]]:\n        for runs_ in runs(seq):\n            assert all(all(op(a, b) for a, b in zip(r, r[1:])) for r in runs_)\n\ndef test_kbins():\n    for k in range(1, 5):\n        for l in range(1, 10):\n            for ordered in [None, 0, 1, 10, 11]:\n                for p in kbins(list(range(l)), k, ordered):\n                    assert len(p) == k\n                    assert sum(len(r) for r in p) == l\n\ndef test_permute_signs():\n    for t in [(0, 1, 2), (1, -1, 0), (0, 0, 1), (1, 2, -3)]:\n        for s in permute_signs(t):\n            assert all(i == 0 or s[i] * s[i + 1] >= 0 for i in range(len(s) - 1))\n\ndef test_signed_permutations():\n    for t in [(0, 1, 2), (1, -1, 0), (0, 0, 1), (1, 2, -3)]:\n        for s in signed_permutations(t):\n            assert all(i == 0 or s[i] * s[i + 1] >= 0 for i in range(len(s) - 1))\n\ndef test_rotations():\n    for s in [(1, 2, 3), (1, 2, 3, 4)]:\n        for r in rotations(s):\n            assert len(r) == len(s)\n            assert all(r[i] == s[(i + 1) % len(s)] for i in range(len(s)))\n\n"], "sample_130": ["\nfrom sympy import symbols, lambdify, sqrt, sin, cos, tan, pi, acos, acosh, Rational, Float, Matrix, Lambda, Piecewise, exp, Integral, oo, I, Abs, Function, true, false, And, Or, Not, ITE, Min, Max, floor, diff, IndexedBase, Sum, DotProduct, Eq, Dummy, sinc\nfrom sympy.utilities.lambdify import implemented_function\nfrom sympy.utilities.lambdify import MATH_TRANSLATIONS\nfrom sympy.utilities.lambdify import MPMATH_TRANSLATIONS\nfrom sympy.utilities.lambdify import NUMPY_TRANSLATIONS\nfrom sympy.utilities.lambdify import TENSORFLOW_TRANSLATIONS\nimport unittest\nimport numpy as np\n\nclass TestLambdify(unittest.TestCase):\n\n    def test_basic_lambdify(self):\n        x = symbols('x')\n        f = lambdify(x, x**2)\n        self.assertEqual(f(3), 9)\n\n    def test_lambdify_with_multiple_variables(self):\n        x, y = symbols('x y')\n        f = lambdify((x, y), x + y)\n        self.assertEqual(f(2, 3), 5)\n\n    def test_lambdify_with_math_functions(self):\n        x = symbols('x')\n        f = lambdify(x, sqrt(x))\n        self.assertAlmostEqual(f(4), 2.0)\n\n    def test_lambdify_with_sin_cos_tan(self):\n        x = symbols('x')\n        f = lambdify(x, sin(x))\n        self.assertAlmostEqual(f(pi/2), 1.0)\n\n        f = lambdify(x, cos(x))\n        self.assertAlmostEqual(f(0), 1.0)\n\n        f = lambdify(x, tan(x))\n        self.assertAlmostEqual(f(pi/4), 1.0)\n\n    def test_lambdify_with_numpy(self):\n        x = symbols('x')\n        f = lambdify(x, x**2, 'numpy')\n        self.assertEqual(f(3), 9)\n\n    def test_lambdify_with_tensorflow(self):\n        import tensorflow as tf\n        x = symbols('x')\n        f = lambdify(x, x**2, 'tensorflow')\n        with tf.compat.v1.Session() as sess:\n            result = sess.run(f(3))\n        self.assertEqual(result, 9)\n\n    def test_lambdify_with_custom_function(self):\n        def my_func(x):\n            return x * 2\n\n        f = lambdify(x, my_func(x))\n        self.assertEqual(f(3), 6)\n\n    def test_lambdify_with_piecewise(self):\n        x = symbols('x')\n        f = lambdify(x, Piecewise((x**2, x > 0), (0, True)))\n        self.assertEqual(f(2), 4)\n        self.assertEqual(f(-2), 0)\n\n    def test_lambdify_with_implemented_function(self):\n        f = implemented_function(Function('f'), lambda x: x + 1)\n        g = lambdify(x, f(x))\n        self.assertEqual(g(3), 4)\n\n    def test_lambdify_with_nested_functions(self):\n        x = symbols('x')\n        f = lambdify(x, (x + 1)**2)\n        self.assertEqual(f(2), 9)\n\n    def test_lambdify_with_tuple_arguments(self):\n        x, y = symbols('x y')\n        f = lambdify((x, y), (x + y, x - y))\n        self.assertEqual(f(2, 3), (5, -1))\n\n    def test_lambdify_with_list_arguments(self):\n        x, y = symbols('x y')\n        f = lambdify([x, y], [x + y, x - y])\n        self.assertEqual(f([2, 3]), [5, -1])\n\n    def test_lambdify_with_matrix_arguments(self):\n        x = symbols('x')\n        A = Matrix([[x, 1], [2, x]])\n        f = lambdify(A, A.det())\n        self.assertEqual(f(Matrix([[1, 1], [2, 1]])), 0)\n\n    def test_lambdify_with_dummy_variables(self):\n        x, y = symbols('x y')\n        f = lambdify((x, y), x + y, dummify=True)\n        self.assertEqual(f(2, 3), 5)\n\n    def test_lambdify_with_custom_namespace(self):\n        my_namespace = {'my_func': lambda x: x**2}\n        f = lambdify(x, my_func(x), namespace=my_namespace)\n        self.assertEqual(f(3), 9)\n\n    def test_lambdify_with_string_arguments(self):\n        x = symbols('x')\n        f = lambdify(x, x**2, modules=['numpy'])\n        self.assertEqual(f('3'), 9)\n\n    def test_lambdify_with_error_handling(self):\n        x = symbols('x')\n        with self.assertRaises(TypeError):\n            lambdify(x, 'invalid_expression')\n\n\n\n"], "sample_110": ["\nimport unittest\nfrom sklearn.cluster import AffinityPropagation\nfrom sklearn.cluster._affinity_propagation import (\n    _equal_similarities_and_preferences, affinity_propagation\n)\nfrom sklearn.datasets import make_blobs\nfrom sklearn.metrics import pairwise_distances\nfrom sklearn.utils.testing import assert_array_equal\nfrom sklearn.utils.testing import assert_almost_equal\nfrom sklearn.utils.testing import ignore_warnings\n\nclass TestAffinityPropagation(unittest.TestCase):\n\n    def test_equal_similarities_and_preferences(self):\n        # Test with equal similarities and preferences\n        S1 = np.array([[1, 2], [2, 1]])\n        preference1 = np.array([1.5, 1.5])\n        self.assertTrue(_equal_similarities_and_preferences(S1, preference1))\n\n        # Test with different similarities and preferences\n        S2 = np.array([[1, 2], [2, 1]])\n        preference2 = np.array([1, 2])\n        self.assertFalse(_equal_similarities_and_preferences(S2, preference2))\n\n    def test_affinity_propagation_convergence(self):\n        n_samples = 10\n        n_clusters = 3\n        X, _ = make_blobs(n_samples=n_samples, n_clusters=n_clusters)\n        S = -pairwise_distances(X, metric='euclidean')\n\n        # Test with default parameters\n        af = AffinityPropagation()\n        labels = af.fit_predict(S)\n        self.assertEqual(len(np.unique(labels)), n_clusters)\n\n        # Test with different parameters\n        af = AffinityPropagation(damping=0.8, max_iter=100,\n                                 convergence_iter=5)\n        labels = af.fit_predict(S)\n        self.assertEqual(len(np.unique(labels)), n_clusters)\n\n    def test_affinity_propagation_empty_clusters(self):\n        # Test with all samples having equal similarities and preferences\n        S = np.ones((5, 5))\n        preference = np.ones(5)\n        with ignore_warnings(category=ConvergenceWarning):\n            af = AffinityPropagation(preference=preference)\n            labels = af.fit_predict(S)\n        self.assertEqual(len(np.unique(labels)), 1)\n\n    def test_affinity_propagation_precomputed_affinity(self):\n        n_samples = 10\n        n_clusters = 3\n        X, _ = make_blobs(n_samples=n_samples, n_clusters=n_clusters)\n        S = -pairwise_distances(X, metric='euclidean')\n\n        af = AffinityPropagation(affinity='precomputed')\n        af.fit(S)\n        labels = af.predict(S)\n        self.assertEqual(len(np.unique(labels)), n_clusters)\n\n    def test_affinity_propagation_invalid_affinity(self):\n        n_samples = 10\n        X, _ = make_blobs(n_samples=n_samples, n_clusters=3)\n        with self.assertRaises(ValueError):\n            af = AffinityPropagation(affinity='invalid')\n            af.fit(X)\n\n    def test_affinity_propagation_invalid_preference(self):\n        n_samples = 10\n        X, _ = make_blobs(n_samples=n_samples, n_clusters=3)\n        with self.assertRaises(ValueError):\n            af = AffinityPropagation(preference=-1)\n            af.fit(X)\n\n    def test_affinity_propagation_invalid_input(self):\n        n_samples = 10\n        X, _ = make_blobs(n_samples=n_samples, n_clusters=3)\n        with self.assertRaises(ValueError):\n            af = AffinityPropagation()\n            af.fit(X, X)\n\n\n\n"], "sample_136": ["\nfrom sympy.matrices.expressions.blockmatrix import ( block_collapse, bc_matmul, bc_block_plus_ident, BlockDiagMatrix, BlockMatrix, bc_dist, bc_matadd, bc_transpose, bc_inverse, blockcut, reblock_2x2, deblock)\nfrom sympy.matrices.expressions import (MatrixSymbol, Identity, Inverse, trace, Transpose, det, ZeroMatrix)\nfrom sympy.functions import transpose\nfrom sympy import Q\nimport unittest\n\nclass TestBlockMatrix(unittest.TestCase):\n\n    def test_blockmatrix_creation(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(B.blockshape, (2, 2))\n        self.assertEqual(B.rowblocksizes, [2, 3])\n        self.assertEqual(B.colblocksizes, [2, 2])\n\n    def test_blockmatrix_equality(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B1 = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        B2 = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(B1, B2)\n\n    def test_blockmatrix_structurally_equal(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B1 = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        B2 = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertTrue(B1.structurally_equal(B2))\n\n    def test_blockmatrix_not_structurally_equal(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B1 = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        B2 = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Identity(2)]])\n        self.assertFalse(B1.structurally_equal(B2))\n\n    def test_blockmatrix_irregular(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        with self.assertRaises(ValueError):\n            BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y], [ZeroMatrix(3, 2), Y]])\n\n    def test_blockmatrix_blockshape(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(B.blockshape, (2, 2))\n\n    def test_blockmatrix_rowblocksizes(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(B.rowblocksizes, [2, 3])\n\n    def test_blockmatrix_colblocksizes(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(B.colblocksizes, [2, 2])\n\n    def test_blockmatrix_transpose(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(B.transpose(), BlockMatrix([[X.T, ZeroMatrix(2, 3)], [Z.T, Y.T]]))\n\n    def test_blockmatrix_trace(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(B.trace(), X.trace() + Y.trace())\n\n    def test_blockmatrix_determinant(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(B.determinant(), det(B))\n\n    def test_blockmatrix_as_real_imag(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        real_matrices, imag_matrices = B.as_real_imag()\n        self.assertEqual(real_matrices, BlockMatrix([[X.real, Z.real], [ZeroMatrix(3, 2).real, Y.real]]))\n        self.assertEqual(imag_matrices, BlockMatrix([[X.imag, Z.imag], [ZeroMatrix(3, 2).imag, Y.imag]]))\n\n    def test_blockdiagmatrix_creation(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        B = BlockDiagMatrix(X, Y)\n        self.assertEqual(B.blockshape, (2, 2))\n        self.assertEqual(B.diag, [X, Y])\n\n    def test_blockdiagmatrix_blockshape(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        B = BlockDiagMatrix(X, Y)\n        self.assertEqual(B.blockshape, (2, 2))\n\n    def test_blockdiagmatrix_rowblocksizes(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        B = BlockDiagMatrix(X, Y)\n        self.assertEqual(B.rowblocksizes, [2, 2])\n\n    def test_blockdiagmatrix_colblocksizes(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        B = BlockDiagMatrix(X, Y)\n        self.assertEqual(B.colblocksizes, [2, 2])\n\n    def test_blockdiagmatrix_transpose(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        B = BlockDiagMatrix(X, Y)\n        self.assertEqual(B.transpose(), BlockDiagMatrix(X.transpose(), Y.transpose()))\n\n    def test_blockdiagmatrix_inverse(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        B = BlockDiagMatrix(X, Y)\n        self.assertEqual(B.inverse(), BlockDiagMatrix(X.inverse(), Y.inverse()))\n\n    def test_block_collapse(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        C = BlockMatrix([[Identity(2), ZeroMatrix(2, 3)], [ZeroMatrix(3, 2), Identity(2)]])\n        self.assertEqual(block_collapse(B*C), BlockMatrix([[X, ZeroMatrix(2, 3)], [ZeroMatrix(3, 2), Y]]))\n\n    def test_block_collapse_identity(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(block_collapse(B + Identity(2)), BlockMatrix([[X + Identity(2), Z], [ZeroMatrix(3, 2), Y + Identity(2)]]))\n\n    def test_block_collapse_diag(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        C = BlockDiagMatrix(Identity(2), Identity(2))\n        self.assertEqual(block_collapse(B*C), BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]]))\n\n    def test_block_collapse_scalar_multiplication(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(block_collapse(2*B), BlockMatrix([[2*X, 2*Z], [2*ZeroMatrix(3, 2), 2*Y]]))\n\n    def test_block_collapse_matmul(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        A = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(block_collapse(A*B), BlockMatrix([[X*X + Z*Z, X*Z + Z*Y], [ZeroMatrix(3, 2)*X + ZeroMatrix(3, 2)*Z, ZeroMatrix(3, 2)*Z + ZeroMatrix(3, 2)*Y]]))\n\n    def test_block_collapse_inverse(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(block_collapse(B.inverse()), BlockMatrix([[X.inverse(), -Z*Y.inverse()], [ZeroMatrix(3, 2).inverse(), Y.inverse()]])\n\n\n\n"], "sample_84": ["\nimport pytest\nfrom _pytest.python import (\n    Function,\n    FunctionDefinition,\n    _idval,\n    _idvalset,\n    idmaker,\n    get_default_arg_names,\n    _ascii_escaped_by_config,\n    _showfixtures_main,\n    showfixtures,\n    show_fixtures_per_test,\n)\n\ndef test_idval():\n    assert _idval(1, \"arg1\", 0, None, None, None) == \"1\"\n    assert _idval(\"hello\", \"arg1\", 0, None, None, None) == \"hello\"\n    assert _idval(1.5, \"arg1\", 0, None, None, None) == \"1.5\"\n    assert _idval(True, \"arg1\", 0, None, None, None) == \"True\"\n    assert _idval(None, \"arg1\", 0, None, None, None) == \"None\"\n    assert _idval(object(), \"arg1\", 0, None, None, None) == \"<object at 0x...>\"\n\ndef test_idvalset():\n    parameterset = {\"a\": 1, \"b\": \"hello\"}\n    assert _idvalset(0, parameterset, [\"a\", \"b\"], None, None, None, None) == \"1-hello\"\n\ndef test_idmaker():\n    assert idmaker([\"a\", \"b\"], [{\"a\": 1, \"b\": \"hello\"}, {\"a\": 2, \"b\": \"world\"}], None, None, None, None) == [\"1-hello\", \"2-world\"]\n\ndef test_get_default_arg_names():\n    def my_function(a, b=1, c=None):\n        pass\n    assert get_default_arg_names(my_function) == [\"b\", \"c\"]\n\ndef test_ascii_escaped_by_config():\n    config = pytest.config\n    assert _ascii_escaped_by_config(\"hello\", config) == \"hello\"\n    config.setini(\"disable_test_id_escaping_and_forfeit_all_rights_to_community_support\", \"true\")\n    assert _ascii_escaped_by_config(\"hello\", config) == \"hello\"\n    config.setini(\"disable_test_id_escaping_and_forfeit_all_rights_to_community_support\", \"false\")\n    assert _ascii_escaped_by_config(\"\u4f60\u597d\", config) == \"\\\\u4f60\\\\u597d\"\n\ndef test_showfixtures_main():\n    with pytest.raises(RuntimeError):\n        _showfixtures_main(None, None)\n\ndef test_showfixtures():\n    with pytest.raises(RuntimeError):\n        showfixtures(None)\n\ndef test_show_fixtures_per_test():\n    with pytest.raises(RuntimeError):\n        show_fixtures_per_test(None)\n\n\n\n"], "sample_131": ["\nfrom sympy import mathematica_code as mcode, symbols, sin, cos, exp, log, pi, oo, Integer, Tuple, List, Matrix\nfrom sympy.abc import x, y\n\ndef test_basic_functions():\n    assert mcode(x) == 'x'\n    assert mcode(2) == '2'\n    assert mcode(pi) == 'Pi'\n    assert mcode(oo) == 'Infinity'\n    assert mcode(-oo) == '-Infinity'\n    assert mcode(Integer(5)) == '5'\n\ndef test_arithmetic_operations():\n    assert mcode(x + 2) == 'x + 2'\n    assert mcode(x - 2) == 'x - 2'\n    assert mcode(x * 2) == '2 x'\n    assert mcode(x / 2) == 'x/2'\n    assert mcode(x**2) == 'x^2'\n    assert mcode(x**3) == 'x^3'\n\ndef test_trig_functions():\n    assert mcode(sin(x)) == 'Sin[x]'\n    assert mcode(cos(x)) == 'Cos[x]'\n    assert mcode(tan(x)) == 'Tan[x]'\n\ndef test_exponential_functions():\n    assert mcode(exp(x)) == 'Exp[x]'\n    assert mcode(log(x)) == 'Log[x]'\n\ndef test_pow():\n    assert mcode(x**y) == 'x^y'\n\ndef test_mul():\n    assert mcode(x * y * 2) == '2 x y'\n\ndef test_list():\n    assert mcode([1, 2, 3]) == '{1, 2, 3}'\n\ndef test_tuple():\n    assert mcode((1, 2, 3)) == '{1, 2, 3}'\n\ndef test_matrix():\n    assert mcode(Matrix([[1, 2], [3, 4]])) == '{{1, 2}, {3, 4}}'\n\ndef test_integral():\n    assert mcode(integrate(x, x)) == 'Hold[Integrate[x, x]]'\n\ndef test_sum():\n    assert mcode(Sum(x, (x, 0, 10))) == 'Hold[Sum[x, {x, 0, 10}]]'\n\ndef test_derivative():\n    assert mcode(Derivative(x**2, x)) == 'Hold[D[x^2, x]]'\n\ndef test_user_functions():\n    custom_functions = {'my_func': lambda x: x**2 + 1}\n    assert mcode(my_func(x), user_functions=custom_functions) == 'my_func[x]'\n\n\n\n"], "sample_50": ["\nfrom django.contrib.messages.storage.cookie import (\n    CookieStorage, MessageDecoder, MessageEncoder, MessageSerializer\n)\nfrom django.contrib.messages.storage.base import BaseStorage\nfrom django.http import SimpleCookie\nfrom django.test import TestCase\nfrom django.utils.safestring import SafeData\nfrom unittest.mock import patch\n\nclass TestCookieStorage(TestCase):\n\n    def setUp(self):\n        self.storage = CookieStorage()\n        self.request = self.create_mock_request()\n\n    def create_mock_request(self):\n        request = type('MockRequest', (object,), {})()\n        request.COOKIES = SimpleCookie()\n        request.response = type('MockResponse', (object,), {})()\n        return request\n\n    def test_cookie_storage_init(self):\n        self.assertIsInstance(self.storage.signer, signing.CookieSigner)\n\n    def test_get_empty_cookie(self):\n        messages, all_retrieved = self.storage._get()\n        self.assertEqual(messages, [])\n        self.assertTrue(all_retrieved)\n\n    def test_get_messages_with_not_finished(self):\n        self.request.COOKIES[self.storage.cookie_name] = '{\"level\": 1, \"message\": \"test\"}'\n        self.request.COOKIES[self.storage.cookie_name] += ',\"__messagesnotfinished__\"'\n        messages, all_retrieved = self.storage._get()\n        self.assertEqual(messages, [Message(level=1, message=\"test\")])\n        self.assertFalse(all_retrieved)\n\n    def test_get_messages_without_not_finished(self):\n        self.request.COOKIES[self.storage.cookie_name] = '{\"level\": 1, \"message\": \"test\"}'\n        messages, all_retrieved = self.storage._get()\n        self.assertEqual(messages, [Message(level=1, message=\"test\")])\n        self.assertTrue(all_retrieved)\n\n    def test_store_messages(self):\n        messages = [Message(level=1, message=\"test1\"), Message(level=2, message=\"test2\")]\n        self.storage._store(messages, self.request.response)\n        self.assertEqual(self.request.response.cookies[self.storage.cookie_name].value, self.storage.signer.sign_object(messages, serializer=MessageSerializer, compress=True))\n\n    def test_store_messages_with_max_cookie_size(self):\n        self.storage.max_cookie_size = 10\n        messages = [Message(level=1, message=\"test1\"), Message(level=2, message=\"test2\"), Message(level=3, message=\"test3\")]\n        unstored_messages = self.storage._store(messages, self.request.response)\n        self.assertEqual(len(unstored_messages), 1)\n        self.assertEqual(unstored_messages[0].message, \"test3\")\n\n    def test_store_messages_with_not_finished(self):\n        messages = [Message(level=1, message=\"test1\"), Message(level=2, message=\"test2\")]\n        self.storage._store(messages, self.request.response, remove_oldest=False)\n        self.assertEqual(self.request.response.cookies[self.storage.cookie_name].value, self.storage.signer.sign_object(messages + [self.storage.not_finished], serializer=MessageSerializer, compress=True))\n\n    def test_update_cookie(self):\n        self.storage._update_cookie(b'test', self.request.response)\n        self.assertEqual(self.request.response.cookies[self.storage.cookie_name].value, 'test')\n        self.storage._update_cookie(None, self.request.response)\n        self.assertFalse(self.request.response.cookies.has_key(self.storage.cookie_name))\n\n    @patch('django.contrib.messages.storage.cookie.signing.CookieSigner.sign_object')\n    def test_encode_messages(self, mock_sign_object):\n        messages = [Message(level=1, message=\"test1\"), Message(level=2, message=\"test2\")]\n        encoded_data = self.storage._encode(messages)\n        mock_sign_object.assert_called_once_with(messages, serializer=MessageSerializer, compress=True)\n        self.assertEqual(encoded_data, mock_sign_object.return_value)\n\n    @patch('django.contrib.messages.storage.cookie.signing.CookieSigner.unsign_object')\n    def test_decode_messages(self, mock_unsign_object):\n        encoded_data = b'test_data'\n        decoded_messages = self.storage._decode(encoded_data)\n        mock_unsign_object.assert_called_once_with(encoded_data, serializer=MessageSerializer)\n        self.assertEqual(decoded_messages, mock_unsign_object.return_value)\n\n    def test_decode_invalid_data(self):\n        self.assertIsNone(self.storage._decode(b'invalid_data'))\n\n\n\n"], "sample_127": ["\nfrom sympy.printing.latex import (latex, translate, greek_letters_set, tex_greek_dictionary)\nfrom sympy.printing.latex import LatexPrinter\nfrom sympy.printing.latex import LatexPrinter\nfrom sympy.printing.latex import other_symbols\nfrom sympy import symbols, pi, sin, asin, Integral, Matrix, Rational, log, S\nfrom sympy.abc import x, y, mu, r, tau\n\ndef test_latex_basic():\n    assert latex(2) == '2'\n    assert latex(x) == 'x'\n    assert latex(x + y) == 'x + y'\n    assert latex(x * y) == 'x y'\n    assert latex(x**2) == 'x^{2}'\n    assert latex(x**Rational(1, 2)) == 'x^{\\frac{1}{2}}'\n    assert latex(sin(x)) == ' \\sin{\\left(x \\right)}'\n    assert latex(asin(x)) == ' \\operatorname{asin}{\\left(x \\right)}'\n    assert latex(log(x)) == ' \\log{\\left(x \\right)}'\n    assert latex(pi) == ' \\pi'\n\ndef test_latex_symbols():\n    assert latex(S.Pi) == ' \\pi'\n    assert latex(S.Infinity) == ' \\infty'\n    assert latex(S.Zero) == '0'\n    assert latex(S.One) == '1'\n    assert latex(S.Two) == '2'\n\ndef test_latex_matrices():\n    assert latex(Matrix([[1, 2], [3, 4]])) == '\\left[\\begin{matrix}1 & 2 \\\\ 3 & 4\\end{matrix}\\right]'\n    assert latex(Matrix([[1, 2], [3, 4]], mat_str='array')) == '\\left[\\begin{array}{cc}1 & 2 \\\\ 3 & 4\\end{array}\\right]'\n    assert latex(Matrix([[1, 2], [3, 4]], mat_delim='(')) == '\\left(\\begin{matrix}1 & 2 \\\\ 3 & 4\\end{matrix}\\right)'\n\ndef test_latex_modes():\n    assert latex(x + y, mode='inline') == '$x + y$'\n    assert latex(x + y, mode='equation') == '\\begin{equation}x + y\\end{equation}'\n    assert latex(x + y, mode='equation*', itex=True) == '$$x + y$$'\n\ndef test_latex_fold_frac_powers():\n    assert latex((2*tau)**Rational(7,2), fold_frac_powers=True) == '8 \\sqrt{2} \\tau^{7/2}'\n\ndef test_latex_fold_func_brackets():\n    assert latex((2*tau)**sin(Rational(7,2))) == '\\left(2 \\tau\\right)^{\\sin{\\left (\\frac{7}{2} \\right )}}'\n    assert latex((2*tau)**sin(Rational(7,2)), fold_func_brackets=True) == '\\left(2 \\tau\\right)^{\\sin {\\frac{7}{2}}}'\n\ndef test_latex_fold_short_frac():\n    assert latex(3*x**2/y, fold_short_frac=True) == '3 x^{2} / y'\n\ndef test_latex_long_frac_ratio():\n    assert latex(Integral(r, r)/2/pi, long_frac_ratio=2) == '\\frac{\\int r\\, dr}{2 \\pi}'\n    assert latex(Integral(r, r)/2/pi, long_frac_ratio=0) == '\\frac{1}{2 \\pi} \\int r\\, dr'\n\ndef test_latex_mul_symbol():\n    assert latex((2*tau)**sin(Rational(7,2)), mul_symbol=\"times\") == '\\left(2 \\times \\tau\\right)^{\\sin{\\left (\\frac{7}{2} \\right )}}'\n\ndef test_latex_inv_trig_style():\n    assert latex(asin(Rational(7,2))) == ' \\operatorname{asin}{\\left (\\frac{7}{2} \\right )}'\n    assert latex(asin(Rational(7,2)), inv_trig_style=\"full\") == ' \\arcsin{\\left (\\frac{7}{2} \\right )}'\n    assert latex(asin(Rational(7,2)), inv_trig_style=\"power\") == ' \\sin^{-1}{\\left (\\frac{7}{2} \\right )}'\n\ndef test_latex_symbol_names():\n    assert latex(x**2, symbol_names={x:'x_i'}) == 'x_i^{2}'\n\ndef test_latex_ln_notation():\n    assert latex(log(10)) == ' \\log{\\left (10 \\right )}'\n    assert latex(log(10), ln_notation=True) == ' \\ln{\\left (10 \\right )}'\n\ndef test_latex_translate():\n    assert translate('alphahatdotprime') == r\"{\\\\dot{\\\\hat{\\\\alpha}}}'\"\n    assert translate('alpha') == r\"\\alpha\"\n    assert translate('x') == r\"x\"\n    assert translate('sin') == r\"\\sin\"\n    assert translate('sqrt') == r\"\\sqrt\"\n    assert translate('sum') == r\"\\sum\"\n    assert translate('prod') == r\"\\prod\"\n    assert translate('lim') == r\"\\lim\"\n    assert translate('int') == r\"\\int\"\n    assert translate('partial') == r\"\\partial\"\n    assert translate('nabla') == r\"\\nabla\"\n    assert translate('phi') == r\"\\phi\"\n    assert translate('psi') == r\"\\psi\"\n    assert translate('omega') == r\"\\omega\"\n    assert translate('theta') == r\"\\theta\"\n    assert translate('rho') == r\"\\rho\"\n    assert translate('sigma') == r\"\\sigma\"\n    assert translate('tau') == r\"\\tau\"\n    assert translate('epsilon') == r\"\\epsilon\"\n    assert translate('delta') == r\"\\delta\"\n    assert translate('gamma') == r\"\\gamma\"\n    assert translate('lambda') == r\"\\lambda\"\n    assert translate('mu') == r\"\\mu\"\n    assert translate('nu') == r\"\\nu\"\n    assert translate('xi') == r\"\\xi\"\n    assert translate('pi') == r\"\\pi\"\n    assert translate('alphahat') == r\"\\hat{\\alpha}\"\n    assert translate('alphadot') == r\"\\dot{\\alpha}\"\n    assert translate('alphaprime') == r\"'\\alpha\"\n    assert translate('alphahatprime') == r\"{\\\\hat{\\\\alpha}}'\"\n    assert translate('alphahatdot') == r\"\\hat{\\dot{\\alpha}}\"\n    assert translate('alphahatdotprime') == r\"{\\\\hat{\\\\dot{\\\\alpha}}}'\"\n\n"], "sample_61": ["\nfrom django.utils.numberformat import format as nformat\nfrom decimal import Decimal\nimport unittest\n\n\nclass TestNumberFormat(unittest.TestCase):\n\n    def test_empty_string(self):\n        self.assertEqual(nformat(\"\", \"\", decimal_pos=2), \"\")\n\n    def test_int_no_grouping(self):\n        self.assertEqual(nformat(12345, \".\"), \"12345\")\n\n    def test_int_with_grouping(self):\n        self.assertEqual(nformat(12345, \".\", grouping=3), \"12,345\")\n\n    def test_float_no_grouping(self):\n        self.assertEqual(nformat(12345.67, \".\"), \"12345.67\")\n\n    def test_float_with_grouping(self):\n        self.assertEqual(nformat(12345.67, \".\", grouping=3), \"12,345.67\")\n\n    def test_decimal_pos(self):\n        self.assertEqual(nformat(12345.6789, \".\", decimal_pos=2), \"12345.68\")\n\n    def test_negative_number(self):\n        self.assertEqual(nformat(-12345, \".\"), \"-12345\")\n\n    def test_large_number(self):\n        self.assertEqual(nformat(1234567890123456789.123456789, \".\", decimal_pos=2), \"1.23e+20\")\n\n    def test_scientific_notation(self):\n        self.assertEqual(nformat(1234567890123456789.123456789, \".\", decimal_pos=2), \"1.23e+20\")\n\n    def test_thousand_separator(self):\n        self.assertEqual(nformat(1234567890, \",\", thousand_sep=\".\"), \"123,456,789.0\")\n\n    def test_force_grouping(self):\n        self.assertEqual(nformat(12345, \".\", grouping=0, force_grouping=True), \"12,345\")\n\n\n\n"], "sample_80": ["\nimport unittest\nfrom xarray.core import formatting\nfrom xarray import Dataset, DataArray\nimport numpy as np\nfrom datetime import datetime, timedelta\n\nclass TestFormatting(unittest.TestCase):\n\n    def test_pretty_print(self):\n        self.assertEqual(formatting.pretty_print(\"hello\", 10), \"hello\")\n        self.assertEqual(formatting.pretty_print(\"hello world\", 5), \"hello w\")\n        self.assertEqual(formatting.pretty_print(\"hello world\", 15), \"hello world\")\n\n    def test_maybe_truncate(self):\n        self.assertEqual(formatting.maybe_truncate(\"hello\", 10), \"hello\")\n        self.assertEqual(formatting.maybe_truncate(\"hello world\", 5), \"hello w\")\n        self.assertEqual(formatting.maybe_truncate(\"hello world\", 10), \"hello world\")\n\n    def test_wrap_indent(self):\n        self.assertEqual(formatting.wrap_indent(\"hello world\", start=\"*\", length=10), \" *hello world\")\n        self.assertEqual(formatting.wrap_indent(\"hello world\", start=\"*\", length=5), \"*hello\\n *world\")\n\n    def test_format_timestamp(self):\n        self.assertEqual(formatting.format_timestamp(datetime(2023, 10, 26)), \"2023-10-26\")\n        self.assertEqual(formatting.format_timestamp(datetime(2023, 10, 26, 12, 30, 45)), \"2023-10-26T12:30:45\")\n        self.assertEqual(formatting.format_timestamp(\"2023-10-26\"), \"2023-10-26\")\n\n    def test_format_timedelta(self):\n        self.assertEqual(formatting.format_timedelta(timedelta(days=1)), \"1 days\")\n        self.assertEqual(formatting.format_timedelta(timedelta(hours=2)), \"2:00:00\")\n        self.assertEqual(formatting.format_timedelta(timedelta(minutes=30)), \"0:30:00\")\n\n    def test_format_item(self):\n        self.assertEqual(formatting.format_item(1), \"1\")\n        self.assertEqual(formatting.format_item(1.234), \"1.234\")\n        self.assertEqual(formatting.format_item(datetime(2023, 10, 26)), \"2023-10-26\")\n        self.assertEqual(formatting.format_item(timedelta(days=1)), \"1 days\")\n        self.assertEqual(formatting.format_item(\"hello\"), \"hello\")\n\n    def test_format_items(self):\n        self.assertEqual(formatting.format_items([1, 2, 3]), [\"1\", \"2\", \"3\"])\n        self.assertEqual(formatting.format_items([1.234, 2.345, 3.456]), [\"1.234\", \"2.345\", \"3.456\"])\n\n    def test_format_array_flat(self):\n        array = np.array([1, 2, 3, 4, 5])\n        self.assertEqual(formatting.format_array_flat(array, 10), \"1 2 3 4 5\")\n\n    def test_inline_dask_repr(self):\n        from dask.array import from_array\n        array = from_array(np.array([1, 2, 3]), chunks=(2,))\n        self.assertEqual(formatting.inline_dask_repr(array), \"dask.array<chunksize=(2,)>\")\n\n    def test_inline_sparse_repr(self):\n        from sparse import COO\n        array = COO.from_numpy(np.array([[1, 0, 0], [0, 2, 0], [0, 0, 3]]))\n        self.assertEqual(formatting.inline_sparse_repr(array), \"<COO: nnz=3, fill_value=0>\")\n\n    def test_summarize_variable(self):\n        var = DataArray(np.array([1, 2, 3]), dims=(\"x\",), name=\"my_var\")\n        self.assertEqual(formatting.summarize_variable(\"my_var\", var, 10), \"  my_var(x) int64 \")\n\n    def test_summarize_coord(self):\n        coord = DataArray(np.array([1, 2, 3]), dims=(\"x\",), name=\"my_coord\")\n        self.assertEqual(formatting.summarize_coord(\"my_coord\", coord, 10), \"  *my_coord(x) int64 \")\n\n    def test_summarize_attr(self):\n        self.assertEqual(formatting.summarize_attr(\"my_attr\", \"hello\"), \"    my_attr: hello\")\n\n    def test_data_vars_repr(self):\n        ds = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3])), \"y\": ((\"x\",), np.array([4, 5, 6]))})\n        self.assertEqual(formatting.data_vars_repr(ds.data_vars), \"Data variables:\\n    x(x) int64 \\n    y(x) int64 \")\n\n    def test_attrs_repr(self):\n        ds = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3]))})\n        ds.attrs[\"my_attr\"] = \"hello\"\n        self.assertEqual(formatting.attrs_repr(ds.attrs), \"Attributes:\\n    my_attr: hello\")\n\n    def test_coords_repr(self):\n        ds = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3]))})\n        ds.coords[\"my_coord\"] = DataArray(np.array([1, 2, 3]), dims=(\"x\",))\n        self.assertEqual(formatting.coords_repr(ds.coords), \"Coordinates:\\n    my_coord(x) int64 \")\n\n    def test_indexes_repr(self):\n        ds = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3]))})\n        ds.indexes[\"my_index\"] = DataArray(np.array([1, 2, 3]), dims=(\"x\",))\n        self.assertEqual(formatting.indexes_repr({\"my_index\": ds.indexes[\"my_index\"]}), \"my_index: <xarray.DataArray (x: 3)>\")\n\n    def test_dim_summary(self):\n        ds = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3])), \"y\": ((\"x\",), np.array([4, 5, 6]))})\n        self.assertEqual(formatting.dim_summary(ds), \"x: 3, y: 3\")\n\n    def test_unindexed_dims_repr(self):\n        ds = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3])), \"y\": ((\"x\",), np.array([4, 5, 6]))})\n        self.assertEqual(formatting.unindexed_dims_repr(ds.dims, ds.coords), \"Dimensions without coordinates: \")\n\n    def test_array_repr(self):\n        var = DataArray(np.array([1, 2, 3]), dims=(\"x\",), name=\"my_var\")\n        self.assertEqual(formatting.array_repr(var), \"<xarray.DataArray 'my_var' (x: 3)>[[1 2 3]]\")\n\n    def test_dataset_repr(self):\n        ds = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3])), \"y\": ((\"x\",), np.array([4, 5, 6]))})\n        self.assertEqual(formatting.dataset_repr(ds), \"<xarray.Dataset>\\nDimensions: x: 3, y: 3\\nCoordinates:\\n    my_coord(x) int64 \\nData variables:\\n    x(x) int64 \\n    y(x) int64 \")\n\n    def test_diff_dim_summary(self):\n        a = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3])), \"y\": ((\"x\",), np.array([4, 5, 6]))}\n        b = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3])), \"z\": ((\"x\",), np.array([7, 8, 9]))}\n        self.assertEqual(formatting.diff_dim_summary(a, b), \"Differing dimensions:\\n    (x: 3, y: 3) != (x: 3, z: 3)\")\n\n    def test_diff_coords_repr(self):\n        a = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3])), \"y\": ((\"x\",), np.array([4, 5, 6]))}\n        b = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3])), \"z\": ((\"x\",), np.array([7, 8, 9]))}\n        self.assertEqual(formatting.diff_coords_repr(a.coords, b.coords, \"identical\", col_width=10), \"Differing Coordinates:\\n    z(x) int64 \")\n\n    def test_diff_data_vars_repr(self):\n        a = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3])), \"y\": ((\"x\",), np.array([4, 5, 6]))}\n        b = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3])), \"z\": ((\"x\",), np.array([7, 8, 9]))}\n        self.assertEqual(formatting.diff_data_vars_repr(a.data_vars, b.data_vars, \"identical\", col_width=10), \"Differing Data variables:\\n    z(x) int64 \")\n\n    def test_diff_attrs_repr(self):\n        a = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3])})\n        a.attrs[\"my_attr\"] = \"hello\"\n        b = Dataset({\"x\": ((\"x\",), np.array([1, 2, 3])})\n        b.attrs[\"my_attr\"] = \"world\"\n        self.assertEqual(formatting.diff_attrs_repr(a.attrs, b.attrs, \"identical\"), \"Differing Attributes:\\n    my_attr: hello\\n    my_attr: world\")\n\n    def test_diff_array_repr(self):\n        a = DataArray(np.array([1, 2, 3]), dims=(\"x\",), name=\"my_var\")\n        b = DataArray(np.array([1, 2, 4]), dims=(\"x\",), name=\"my_var\")\n        self.assertEqual(formatting.diff_array_repr(a, b, \"allclose\"), \"Left and right DataArray objects are not close\")\n\n    def test_short_numpy_repr(self):\n        array = np.array([1, 2, 3])\n        self.assertEqual(formatting.short_numpy_repr(array), \"[[1 2 3]\")\n\n\n\n"], "sample_71": ["\nimport os\nimport unittest\nfrom unittest.mock import patch\nfrom matplotlib.style.core import (\n    use, context, reload_library, _remove_blacklisted_style_params,\n    _apply_style, library, available, STYLE_EXTENSION,\n    read_style_directory, update_nested_dict,\n)\nfrom matplotlib import rcParams\nfrom pathlib import Path\n\nclass TestStyleCore(unittest.TestCase):\n\n    def setUp(self):\n        self.temp_style_dir = Path(os.path.join(os.path.dirname(__file__), 'temp_style_dir'))\n        self.temp_style_dir.mkdir(exist_ok=True)\n\n    def tearDown(self):\n        self.temp_style_dir.rmdir()\n\n    def test_use_default(self):\n        use('default')\n        self.assertEqual(rcParams, rcParamsDefault)\n\n    def test_use_existing_style(self):\n        # Create a sample style file\n        with open(os.path.join(self.temp_style_dir, 'test_style.mplstyle'), 'w') as f:\n            f.write('lines.linewidth = 3\\n')\n\n        use(os.path.join(self.temp_style_dir, 'test_style.mplstyle'))\n        self.assertEqual(rcParams['lines.linewidth'], 3)\n\n    def test_use_style_dict(self):\n        style_dict = {'lines.linewidth': 4, 'axes.titlesize': 16}\n        use(style_dict)\n        self.assertEqual(rcParams['lines.linewidth'], 4)\n        self.assertEqual(rcParams['axes.titlesize'], 16)\n\n    def test_use_list_of_styles(self):\n        # Create two sample style files\n        with open(os.path.join(self.temp_style_dir, 'style1.mplstyle'), 'w') as f:\n            f.write('lines.color = \"red\"\\n')\n        with open(os.path.join(self.temp_style_dir, 'style2.mplstyle'), 'w') as f:\n            f.write('lines.marker = \"o\"\\n')\n\n        use([os.path.join(self.temp_style_dir, 'style1.mplstyle'),\n             os.path.join(self.temp_style_dir, 'style2.mplstyle')])\n        self.assertEqual(rcParams['lines.color'], 'red')\n        self.assertEqual(rcParams['lines.marker'], 'o')\n\n    def test_use_invalid_style(self):\n        with self.assertRaises(IOError):\n            use('nonexistent_style')\n\n    def test_context_manager(self):\n        with context('default'):\n            self.assertEqual(rcParams, rcParamsDefault)\n\n        with context('seaborn-white'):\n            self.assertIn('axes.facecolor', rcParams)\n\n    def test_reload_library(self):\n        reload_library()\n        self.assertTrue(library)\n        self.assertTrue(available)\n\n    def test_read_style_directory(self):\n        with open(os.path.join(self.temp_style_dir, 'test_style.mplstyle'), 'w') as f:\n            f.write('lines.linewidth = 3\\n')\n        styles = read_style_directory(self.temp_style_dir)\n        self.assertEqual(len(styles), 1)\n        self.assertEqual(styles['test_style']['lines.linewidth'], 3)\n\n    def test_update_nested_dict(self):\n        main_dict = {'a': {'b': 1}}\n        new_dict = {'a': {'b': 2, 'c': 3}}\n        updated_dict = update_nested_dict(main_dict, new_dict)\n        self.assertEqual(updated_dict['a']['b'], 2)\n        self.assertEqual(updated_dict['a']['c'], 3)\n\n    def test_remove_blacklisted_style_params(self):\n        style_params = {'interactive': True, 'lines.linewidth': 2}\n        filtered_params = _remove_blacklisted_style_params(style_params)\n        self.assertNotIn('interactive', filtered_params)\n        self.assertIn('lines.linewidth', filtered_params)\n\n    def test_apply_style(self):\n        style_params = {'lines.linewidth': 2}\n        _apply_style(style_params)\n        self.assertEqual(rcParams['lines.linewidth'], 2)\n\n    def test_deprecated_functions(self):\n        with patch('matplotlib.style.core.load_base_library'):\n            with patch('matplotlib.style.core.iter_user_libraries'):\n                with patch('matplotlib.style.core.update_user_library'):\n                    load_base_library()\n                    iter_user_libraries()\n                    update_user_library({})\n                    \n                    \n"], "sample_35": ["\nimport unittest\nfrom django.forms import (\n    BooleanField, CharField, ChoiceField, DateField, DateTimeField, DecimalField, EmailField, FileField, FloatField, Form, GenericIPAddressField, IntegerField, ModelChoiceField, ModelMultipleChoiceField, MultipleChoiceField, RegexField, SplitDateTimeField, TimeField, URLField, utils,\n)\nfrom django.db import models\nfrom django.forms.models import modelform_factory, inlineformset_factory\nfrom django.test import TestCase, override_settings\nfrom django.utils.translation import gettext_lazy as _\n\nclass ChoiceModel(models.Model):\n    name = models.CharField(max_length=100)\n    value = models.IntegerField()\n\n    def __str__(self):\n        return self.name\n\nclass TestModelForms(TestCase):\n\n    def test_modelform_factory(self):\n        class MyForm(Form):\n            pass\n\n        form_class = modelform_factory(ChoiceModel, form=MyForm)\n        self.assertEqual(form_class._meta.model, ChoiceModel)\n        self.assertEqual(form_class._meta.fields, ['name', 'value'])\n        self.assertEqual(form_class._meta.exclude, [])\n\n    def test_modelform_factory_with_fields(self):\n        class MyForm(Form):\n            pass\n\n        form_class = modelform_factory(ChoiceModel, form=MyForm, fields=['name'])\n        self.assertEqual(form_class._meta.model, ChoiceModel)\n        self.assertEqual(form_class._meta.fields, ['name'])\n        self.assertEqual(form_class._meta.exclude, ['value'])\n\n    def test_modelform_factory_with_exclude(self):\n        class MyForm(Form):\n            pass\n\n        form_class = modelform_factory(ChoiceModel, form=MyForm, exclude=['name'])\n        self.assertEqual(form_class._meta.model, ChoiceModel)\n        self.assertEqual(form_class._meta.fields, ['value'])\n        self.assertEqual(form_class._meta.exclude, ['name'])\n\n    def test_modelform_factory_with_fields_and_exclude(self):\n        class MyForm(Form):\n            pass\n\n        form_class = modelform_factory(ChoiceModel, form=MyForm, fields=['name', 'value'], exclude=['value'])\n        self.assertEqual(form_class._meta.model, ChoiceModel)\n        self.assertEqual(form_class._meta.fields, ['name'])\n        self.assertEqual(form_class._meta.exclude, ['value'])\n\n    def test_modelform_factory_with_fields_and_exclude_empty(self):\n        class MyForm(Form):\n            pass\n\n        form_class = modelform_factory(ChoiceModel, form=MyForm, fields=[], exclude=['name', 'value'])\n        self.assertEqual(form_class._meta.model, ChoiceModel)\n        self.assertEqual(form_class._meta.fields, [])\n        self.assertEqual(form_class._meta.exclude, ['name', 'value'])\n\n    def test_modelform_factory_with_form_class(self):\n        class MyForm(Form):\n            name = CharField()\n            value = IntegerField()\n\n        form_class = modelform_factory(ChoiceModel, form=MyForm)\n        self.assertEqual(form_class._meta.model, ChoiceModel)\n        self.assertEqual(form_class.fields, {'name': CharField(), 'value': IntegerField()})\n\n    def test_modelform_factory_with_form_class_and_fields(self):\n        class MyForm(Form):\n            name = CharField()\n            value = IntegerField()\n\n        form_class = modelform_factory(ChoiceModel, form=MyForm, fields=['name'])\n        self.assertEqual(form_class._meta.model, ChoiceModel)\n        self.assertEqual(form_class.fields, {'name': CharField()})\n\n    def test_modelform_factory_with_form_class_and_exclude(self):\n        class MyForm(Form):\n            name = CharField()\n            value = IntegerField()\n\n        form_class = modelform_factory(ChoiceModel, form=MyForm, exclude=['name'])\n        self.assertEqual(form_class._meta.model, ChoiceModel)\n        self.assertEqual(form_class.fields, {'value': IntegerField()})\n\n    def test_modelform_factory_with_form_class_and_fields_and_exclude(self):\n        class MyForm(Form):\n            name = CharField()\n            value = IntegerField()\n\n        form_class = modelform_factory(ChoiceModel, form=MyForm, fields=['name', 'value'], exclude=['value'])\n        self.assertEqual(form_class._meta.model, ChoiceModel)\n        self.assertEqual(form_class.fields, {'name': CharField()})\n\n    def test_modelform_factory_with_form_class_and_fields_and_exclude_empty(self):\n        class MyForm(Form):\n            name = CharField()\n            value = IntegerField()\n\n        form_class = modelform_factory(ChoiceModel, form=MyForm, fields=[], exclude=['name', 'value'])\n        self.assertEqual(form_class._meta.model, ChoiceModel)\n        self.assertEqual(form_class.fields, {})\n\n    def test_inlineformset_factory(self):\n        class ParentModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        class ChildModel(models.Model):\n            parent = models.ForeignKey(ParentModel, on_delete=models.CASCADE)\n            name = models.CharField(max_length=100)\n\n        FormSet = inlineformset_factory(ParentModel, ChildModel, form=ModelForm, extra=1)\n        self.assertEqual(FormSet._meta.model, ChildModel)\n        self.assertEqual(FormSet._meta.fields, ['parent', 'name'])\n        self.assertEqual(FormSet._meta.exclude, [])\n\n    def test_inlineformset_factory_with_fields(self):\n        class ParentModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        class ChildModel(models.Model):\n            parent = models.ForeignKey(ParentModel, on_delete=models.CASCADE)\n            name = models.CharField(max_length=100)\n\n        FormSet = inlineformset_factory(ParentModel, ChildModel, form=ModelForm, fields=['name'])\n        self.assertEqual(FormSet._meta.model, ChildModel)\n        self.assertEqual(FormSet._meta.fields, ['name'])\n        self.assertEqual(FormSet._meta.exclude, ['parent'])\n\n    def test_inlineformset_factory_with_exclude(self):\n        class ParentModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        class ChildModel(models.Model):\n            parent = models.ForeignKey(ParentModel, on_delete=models.CASCADE)\n            name = models.CharField(max_length=100)\n\n        FormSet = inlineformset_factory(ParentModel, ChildModel, form=ModelForm, exclude=['name'])\n        self.assertEqual(FormSet._meta.model, ChildModel)\n        self.assertEqual(FormSet._meta.fields, ['parent'])\n        self.assertEqual(FormSet._meta.exclude, ['name'])\n\n    def test_inlineformset_factory_with_fields_and_exclude(self):\n        class ParentModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        class ChildModel(models.Model):\n            parent = models.ForeignKey(ParentModel, on_delete=models.CASCADE)\n            name = models.CharField(max_length=100)\n\n        FormSet = inlineformset_factory(ParentModel, ChildModel, form=ModelForm, fields=['name'], exclude=['name'])\n        self.assertEqual(FormSet._meta.model, ChildModel)\n        self.assertEqual(FormSet._meta.fields, ['parent'])\n        self.assertEqual(FormSet._meta.exclude, ['name'])\n\n    def test_inlineformset_factory_with_fields_and_exclude_empty(self):\n        class ParentModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        class ChildModel(models.Model):\n            parent = models.ForeignKey(ParentModel, on_delete=models.CASCADE)\n            name = models.CharField(max_length=100)\n\n        FormSet = inlineformset_factory(ParentModel, ChildModel, form=ModelForm, fields=[], exclude=['name', 'parent'])\n        self.assertEqual(FormSet._meta.model, ChildModel)\n        self.assertEqual(FormSet._meta.fields, [])\n        self.assertEqual(FormSet._meta.exclude, ['name', 'parent'])\n\n    def test_model_choice_field(self):\n        FormSet = ModelChoiceField(queryset=ChoiceModel.objects.all())\n        self.assertEqual(FormSet.queryset, ChoiceModel.objects.all())\n\n    def test_model_multiple_choice_field(self):\n        FormSet = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all())\n        self.assertEqual(FormSet.queryset, ChoiceModel.objects.all())\n\n\n\n"], "sample_109": ["\nimport unittest\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom sklearn.model_selection import LeaveOneOut\nfrom sklearn.model_selection import LeaveOneGroupOut\nfrom sklearn.model_selection import LeavePOut\nfrom sklearn.model_selection import LeavePGroupsOut\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import GroupShuffleSplit\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.model_selection import PredefinedSplit\nfrom sklearn.model_selection import check_cv\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection._split import _validate_shuffle_split\nfrom sklearn.model_selection._split import _build_repr\nfrom sklearn.utils.validation import check_array\nfrom sklearn.utils.testing import assert_array_equal\nfrom sklearn.utils.testing import assert_raises\nimport numpy as np\nimport warnings\n\nclass TestShuffleSplit(unittest.TestCase):\n\n    def test_shuffle_split_basic(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.arange(5)\n        train, test = train_test_split(X, y, test_size=0.33, random_state=42)\n        self.assertEqual(len(train), 6)\n        self.assertEqual(len(test), 4)\n\n    def test_shuffle_split_stratify(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.array([0, 0, 1, 1, 1])\n        train, test = train_test_split(X, y, test_size=0.33, random_state=42, stratify=y)\n        self.assertEqual(len(train), 6)\n        self.assertEqual(len(test), 4)\n\n    def test_shuffle_split_train_size(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.arange(5)\n        train, test = train_test_split(X, y, train_size=0.7, random_state=42)\n        self.assertEqual(len(train), 7)\n        self.assertEqual(len(test), 3)\n\n    def test_shuffle_split_test_size(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.arange(5)\n        train, test = train_test_split(X, y, test_size=0.7, random_state=42)\n        self.assertEqual(len(train), 3)\n        self.assertEqual(len(test), 7)\n\n    def test_shuffle_split_shuffle_false(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.arange(5)\n        train, test = train_test_split(X, y, shuffle=False, test_size=0.33, random_state=42)\n        self.assertEqual(train, np.arange(5))\n        self.assertEqual(test, np.arange(5, 10))\n\n    def test_shuffle_split_invalid_test_size(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.arange(5)\n        with assert_raises(ValueError):\n            train_test_split(X, y, test_size=1.1)\n\n    def test_shuffle_split_invalid_train_size(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.arange(5)\n        with assert_raises(ValueError):\n            train_test_split(X, y, train_size=1.1)\n\n    def test_shuffle_split_invalid_random_state(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.arange(5)\n        with assert_raises(TypeError):\n            train_test_split(X, y, random_state=\"abc\")\n\n    def test_shuffle_split_invalid_stratify(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.arange(5)\n        with assert_raises(TypeError):\n            train_test_split(X, y, stratify=\"abc\")\n\n\n\nclass TestKFold(unittest.TestCase):\n\n    def test_kfold_basic(self):\n        X = np.arange(10).reshape((5, 2))\n        kf = KFold(n_splits=3)\n        for train_index, test_index in kf.split(X):\n            self.assertEqual(len(train_index), 3)\n            self.assertEqual(len(test_index), 2)\n\n    def test_kfold_shuffle(self):\n        X = np.arange(10).reshape((5, 2))\n        kf = KFold(n_splits=3, shuffle=True, random_state=42)\n        for train_index, test_index in kf.split(X):\n            self.assertEqual(len(train_index), 3)\n            self.assertEqual(len(test_index), 2)\n\n    def test_kfold_shuffle_false(self):\n        X = np.arange(10).reshape((5, 2))\n        kf = KFold(n_splits=3, shuffle=False)\n        for train_index, test_index in kf.split(X):\n            self.assertEqual(len(train_index), 3)\n            self.assertEqual(len(test_index), 2)\n\n    def test_kfold_n_splits_invalid(self):\n        X = np.arange(10).reshape((5, 2))\n        with assert_raises(ValueError):\n            KFold(n_splits=-1)\n        with assert_raises(ValueError):\n            KFold(n_splits=0)\n\n    def test_kfold_n_splits_int(self):\n        X = np.arange(10).reshape((5, 2))\n        kf = KFold(n_splits=3)\n        for train_index, test_index in kf.split(X):\n            self.assertEqual(len(train_index), 3)\n            self.assertEqual(len(test_index), 2)\n\n    def test_kfold_n_splits_float(self):\n        X = np.arange(10).reshape((5, 2))\n        kf = KFold(n_splits=3.0)\n        for train_index, test_index in kf.split(X):\n            self.assertEqual(len(train_index), 3)\n            self.assertEqual(len(test_index), 2)\n\n\n\nclass TestStratifiedKFold(unittest.TestCase):\n\n    def test_stratified_kfold_basic(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.array([0, 0, 1, 1, 1])\n        skf = StratifiedKFold(n_splits=3)\n        for train_index, test_index in skf.split(X, y):\n            self.assertEqual(len(train_index), 3)\n            self.assertEqual(len(test_index), 2)\n\n    def test_stratified_kfold_shuffle(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.array([0, 0, 1, 1, 1])\n        skf = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n        for train_index, test_index in skf.split(X, y):\n            self.assertEqual(len(train_index), 3)\n            self.assertEqual(len(test_index), 2)\n\n    def test_stratified_kfold_shuffle_false(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.array([0, 0, 1, 1, 1])\n        skf = StratifiedKFold(n_splits=3, shuffle=False)\n        for train_index, test_index in skf.split(X, y):\n            self.assertEqual(len(train_index), 3)\n            self.assertEqual(len(test_index), 2)\n\n    def test_stratified_kfold_n_splits_invalid(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.array([0, 0, 1, 1, 1])\n        with assert_raises(ValueError):\n            StratifiedKFold(n_splits=-1)\n        with assert_raises(ValueError):\n            StratifiedKFold(n_splits=0)\n\n    def test_stratified_kfold_n_splits_int(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.array([0, 0, 1, 1, 1])\n        skf = StratifiedKFold(n_splits=3)\n        for train_index, test_index in skf.split(X, y):\n            self.assertEqual(len(train_index), 3)\n            self.assertEqual(len(test_index), 2)\n\n    def test_stratified_kfold_n_splits_float(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.array([0, 0, 1, 1, 1])\n        skf = StratifiedKFold(n_splits=3.0)\n        for train_index, test_index in skf.split(X, y):\n            self.assertEqual(len(train_index), 3)\n            self.assertEqual(len(test_index), 2)\n\n\n\nclass TestGroupKFold(unittest.TestCase):\n\n    def test_groupkfold_basic(self):\n        X = np.arange(10).reshape((5, 2))\n        y = np.arange(5)\n        groups = np.array([0, 0, 1, 1, 1])\n        gkf = GroupKFold(n_splits=3)\n        for train_index, test_index in gkf.split(X, groups):\n            self.assertEqual(len(train_index), 3)\n            self.assertEqual(len(test_index), 2)\n\n\n\nclass TestTimeSeriesSplit(unittest.TestCase):\n\n    def test_timeseries_split_basic(self):\n        X = np.arange(10).reshape((5, 2)\n        ts = TimeSeriesSplit(n_splits=3)\n        for train_index, test_index in ts.split(X):\n            self.assertEqual(len(train_index), 3)\n            self.assertEqual(len(test_index), 2)\n\n\n\nclass TestLeaveOneOut(unittest.TestCase):\n\n    def test_leave_one_out_basic(self):\n        X = np.arange(10).reshape((5, 2)\n        loo = LeaveOneOut()\n        for train_index, test_index in loo.split(X):\n            self.assertEqual(len(train_index), 9)\n            self.assertEqual(len(test_index), 1)\n\n\n\nclass TestLeaveOneGroupOut(unittest.TestCase):\n\n    def test_leave_one_group_out_basic(self):\n        X = np.arange(10).reshape((5, 2)\n        y = np.array([0, 0, 1, 1, 1)\n        groups = np.array([0, 0, 1, 1, 1)\n        loo = LeaveOneGroupOut()\n        for train_index, test_index in loo.split(X, groups):\n            self.assertEqual(len(train_index), 4)\n            self.assertEqual(len(test_index), 1)\n\n\n\nclass TestLeavePOut(unittest.TestCase):\n\n    def test_leave_p_out_basic(self):\n        X = np.arange(10).reshape((5, 2)\n        p = 2\n        loo = LeavePOut(p=2)\n        for train_index, test_index in loo.split(X):\n            self.assertEqual(len(train_index), 8)\n            self.assertEqual(len(test_index), 2)\n\n\n\nclass TestLeavePGroupsOut(unittest.TestCase):\n\n    def test_leave_p_groups_out_basic(self):\n        X = np.arange(10).reshape((5, 2)\n        y = np.array([0, 0, 1, 1, 1)\n        groups = np.array([0, 0, 1, 1, 1)\n        p = 2\n        loo = LeavePGroupsOut(p=2)\n        for train_index, test_index in loo.split(X, y, groups):\n            self.assertEqual(len(train_index), 8)\n            self.assertEqual(len(test_index), 2)\n\n\n\nclass TestPredefinedSplit(unittest.TestCase):\n\n    def test_predefined_split(self):\n        X = np.arange(10).reshape((5, 2)\n        y = np.array([0, 0, 1, 1, 2)\n        groups = np.array([0, 0, 1, 1, 2)\n        test_split = PredefinedSplit(test_index=[0, 1, 2, 3, 4)\n        for train_index, test_index in test_split:\n            self.assertEqual(train_index, [0, 1, 2, 3, 4)\n            self.assertEqual(test_index, [4])\n\n\n\nclass Test_validate_shuffle_split(self):\n    def test_validate_shuffle_split_basic(self):\n        with assert_raises(ValueError):\n            _validate_shuffle_split(10, 0, 0)\n        with assert_raises(ValueError):\n            _validate_shuffle_split(10, 1.1)\n        with assert_raises(ValueError):\n        with assert_raises(ValueError):\n        with assert_raises(ValueError):\n        with assert_raises(ValueError):\n\n\n\n"], "sample_28": ["\nimport unittest\nfrom django.contrib.admin.sites import AdminSite, AlreadyRegistered, NotRegistered\nfrom django.contrib.auth.models import User\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.db import models\nfrom django.test import TestCase, override_settings\nfrom django.urls import reverse\n\n\nclass TestAdminSite(TestCase):\n\n    def setUp(self):\n        self.site = AdminSite()\n\n    def test_register_model(self):\n        class MyModel(models.Model):\n            pass\n\n        self.site.register(MyModel)\n        self.assertIn(MyModel, self.site._registry)\n\n    def test_register_model_twice(self):\n        class MyModel(models.Model):\n            pass\n\n        self.site.register(MyModel)\n        with self.assertRaises(AlreadyRegistered):\n            self.site.register(MyModel)\n\n    def test_register_abstract_model(self):\n        class MyAbstractModel(models.Model):\n            abstract = True\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.site.register(MyAbstractModel)\n\n    def test_unregister_model(self):\n        class MyModel(models.Model):\n            pass\n\n        self.site.register(MyModel)\n        self.site.unregister(MyModel)\n        self.assertNotIn(MyModel, self.site._registry)\n\n    def test_unregister_model_not_registered(self):\n        class MyModel(models.Model):\n            pass\n\n        with self.assertRaises(NotRegistered):\n            self.site.unregister(MyModel)\n\n    def test_is_registered(self):\n        class MyModel(models.Model):\n            pass\n\n        self.site.register(MyModel)\n        self.assertTrue(self.site.is_registered(MyModel))\n        self.assertFalse(self.site.is_registered(User))\n\n    def test_add_action(self):\n        def my_action(request, queryset):\n            pass\n\n        self.site.add_action(my_action, name='my_action')\n        self.assertIn('my_action', self.site._actions)\n\n    def test_disable_action(self):\n        def my_action(request, queryset):\n            pass\n\n        self.site.add_action(my_action, name='my_action')\n        self.site.disable_action('my_action')\n        self.assertNotIn('my_action', self.site._actions)\n\n    def test_get_action(self):\n        def my_action(request, queryset):\n            pass\n\n        self.site.add_action(my_action, name='my_action')\n        action = self.site.get_action('my_action')\n        self.assertEqual(action, my_action)\n\n    def test_has_permission(self):\n        self.assertFalse(self.site.has_permission(None))\n\n    def test_admin_view(self):\n        def my_view(request):\n            return 'Hello, world!'\n\n        @self.site.admin_view(my_view)\n        def wrapper(request):\n            pass\n\n        response = wrapper(None)\n        self.assertEqual(response, 'Hello, world!')\n\n    def test_get_urls(self):\n        class MyModelAdmin(AdminSite.ModelAdmin):\n            pass\n\n        class MyModel(models.Model):\n            pass\n\n        self.site.register(MyModel, MyModelAdmin)\n        urls = self.site.get_urls()\n        self.assertIn('/mymodel/', urls)\n\n    def test_each_context(self):\n        context = self.site.each_context(None)\n        self.assertIn('site_title', context)\n        self.assertIn('site_header', context)\n        self.assertIn('site_url', context)\n\n    def test_password_change(self):\n        pass\n\n    def test_password_change_done(self):\n        pass\n\n    def test_i18n_javascript(self):\n        pass\n\n    def test_logout(self):\n        pass\n\n    def test_autocomplete_view(self):\n        pass\n\n    def test_catch_all_view(self):\n        pass\n\n    def test_build_app_dict(self):\n        pass\n\n    def test_get_app_list(self):\n        pass\n\n    def test_index(self):\n        pass\n\n    def test_app_index(self):\n        pass\n\n\n\n"], "sample_16": ["\nimport unittest\nfrom django.contrib.admin.utils import (\n    NestedObjects,\n    display_for_field,\n    display_for_value,\n    flatten,\n    flatten_fieldsets,\n    label_for_field,\n    lookup_field,\n    quote,\n    lookup_needs_distinct,\n    prepare_lookup_value,\n    unquote,\n    get_deleted_objects,\n    model_format_dict,\n    model_ngettext,\n    reverse_field_path,\n    get_fields_from_path,\n    construct_change_message,\n)\nfrom django.db import models\nfrom django.utils.timezone import now\nfrom django.utils.translation import override\n\nclass TestUtils(unittest.TestCase):\n\n    def test_lookup_needs_distinct(self):\n        class MyModel(models.Model):\n            pk = models.AutoField(primary_key=True)\n            name = models.CharField(max_length=100)\n            group = models.ManyToManyField('Group', related_name='my_models')\n\n        class Group(models.Model):\n            pk = models.AutoField(primary_key=True)\n            name = models.CharField(max_length=100)\n\n        opts = MyModel._meta\n        self.assertFalse(lookup_needs_distinct(opts, 'pk'))\n        self.assertFalse(lookup_needs_distinct(opts, 'name'))\n        self.assertTrue(lookup_needs_distinct(opts, 'group'))\n\n    def test_prepare_lookup_value(self):\n        self.assertEqual(prepare_lookup_value('name', 'John Doe'), 'John Doe')\n        self.assertEqual(prepare_lookup_value('name__in', 'John Doe,Jane Doe'), ['John Doe', 'Jane Doe'])\n        self.assertEqual(prepare_lookup_value('name__isnull', 'true'), True)\n        self.assertEqual(prepare_lookup_value('name__isnull', 'false'), False)\n\n    def test_quote(self):\n        self.assertEqual(quote('test'), 'test')\n        self.assertEqual(quote('test/path'), 'test%2Fpath')\n        self.assertEqual(quote('test:path'), 'test%3Apath')\n\n    def test_unquote(self):\n        self.assertEqual(unquote('test'), 'test')\n        self.assertEqual(unquote('test%2Fpath'), 'test/path')\n        self.assertEqual(unquote('test%3Apath'), 'test:path')\n\n    def test_flatten(self):\n        self.assertEqual(flatten([1, 2, [3, 4]]), [1, 2, 3, 4])\n        self.assertEqual(flatten([1, 2, (3, 4)]), [1, 2, 3, 4])\n\n    def test_flatten_fieldsets(self):\n        self.assertEqual(flatten_fieldsets([('Model', {'fields': ['field1', 'field2']})]), ['field1', 'field2'])\n\n    def test_label_for_field(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n            description = models.TextField()\n\n        self.assertEqual(label_for_field('name', MyModel), 'Name')\n        self.assertEqual(label_for_field('description', MyModel), 'Description')\n        self.assertEqual(label_for_field('__str__', MyModel), 'MyModel')\n\n    def test_lookup_field(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n            description = models.TextField()\n\n        obj = MyModel.objects.create(name='Test', description='Test Description')\n        f, attr, value = lookup_field('name', obj)\n        self.assertIsNone(attr)\n        self.assertEqual(f.verbose_name, 'Name')\n        self.assertEqual(value, 'Test')\n\n    def test_display_for_field(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n            description = models.TextField()\n            date_field = models.DateField()\n            boolean_field = models.BooleanField()\n            file_field = models.FileField(upload_to='uploads/')\n\n        obj = MyModel.objects.create(name='Test', description='Test Description', date_field=now(), boolean_field=True, file_field=None)\n\n        self.assertEqual(display_for_field(obj.name, MyModel._meta.get_field('name'), ''), 'Test')\n        self.assertEqual(display_for_field(obj.description, MyModel._meta.get_field('description'), ''), 'Test Description')\n        self.assertEqual(display_for_field(obj.date_field, MyModel._meta.get_field('date_field'), ''), formats.localize(timezone.template_localtime(now())))\n        self.assertEqual(display_for_field(obj.boolean_field, MyModel._meta.get_field('boolean_field'), ''), 'True')\n        self.assertEqual(display_for_field(obj.file_field, MyModel._meta.get_field('file_field'), ''), '')\n\n    def test_display_for_value(self):\n        self.assertEqual(display_for_value('Test'), 'Test')\n        self.assertEqual(display_for_value(True), 'True')\n        self.assertEqual(display_for_value(False), 'False')\n        self.assertEqual(display_for_value(now()), formats.localize(timezone.template_localtime(now())))\n        self.assertEqual(display_for_value(123), '123')\n        self.assertEqual(display_for_value([1, 2, 3]), '1, 2, 3')\n\n    def test_get_deleted_objects(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        class RelatedModel(models.Model):\n            name = models.CharField(max_length=100)\n            my_model = models.ForeignKey(MyModel, on_delete=models.CASCADE)\n\n        obj1 = MyModel.objects.create(name='Test1')\n        obj2 = MyModel.objects.create(name='Test2')\n        obj3 = RelatedModel.objects.create(name='Related1', my_model=obj1)\n        obj4 = RelatedModel.objects.create(name='Related2', my_model=obj2)\n\n        with override('en'):\n            deleted_objects, model_count, perms_needed, protected = get_deleted_objects([obj1, obj2], None, None)\n        self.assertEqual(deleted_objects, [\n            {'name': 'Test1', 'object': '<MyModel: Test1>'},\n            {'name': 'Test2', 'object': '<MyModel: Test2>'},\n        ])\n        self.assertEqual(model_count, {'MyModel': 2})\n        self.assertEqual(perms_needed, set())\n        self.assertEqual(protected, [])\n\n    def test_model_format_dict(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        self.assertEqual(model_format_dict(MyModel), {'verbose_name': 'MyModel', 'verbose_name_plural': 'MyModels'})\n\n    def test_model_ngettext(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        self.assertEqual(model_ngettext(MyModel, 1), 'MyModel')\n        self.assertEqual(model_ngettext(MyModel, 2), 'MyModels')\n\n    def test_reverse_field_path(self):\n        class User(models.Model):\n            name = models.CharField(max_length=100)\n\n        class Group(models.Model):\n            name = models.CharField(max_length=100)\n            user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='groups')\n\n        self.assertEqual(reverse_field_path(User, 'groups'), (Group, 'user'))\n\n    def test_get_fields_from_path(self):\n        class User(models.Model):\n            name = models.CharField(max_length=100)\n\n        class Group(models.Model):\n            name = models.CharField(max_length=100)\n            user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='groups')\n\n        fields = get_fields_from_path(User, 'groups')\n        self.assertEqual(len(fields), 2)\n        self.assertEqual(fields[0].__class__.__name__, 'ForeignKey')\n        self.assertEqual(fields[1].__class__.__name__, 'ManyToManyField')\n\n    def test_construct_change_message(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n            description = models.TextField()\n\n        obj = MyModel.objects.create(name='Test', description='Test Description')\n        form = MyModelAdminForm(instance=obj)\n        form.changed_data = {'name': 'New Name', 'description': 'New Description'}\n        formsets = []\n\n        change_message = construct_change_message(form, formsets, False)\n        self.assertEqual(change_message, [{'changed': {'fields': ['name', 'description']}}])\n\n\n\n"], "sample_55": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.core.management.base import (\n    BaseCommand,\n    CommandError,\n    DjangoHelpFormatter,\n    OutputWrapper,\n    no_style,\n    color_style,\n    handle_default_options,\n    SystemCheckError,\n    AppCommand,\n    LabelCommand,\n)\nfrom django.core.management.color import color_style\nfrom django.apps import AppConfig\nfrom django.db import connections\nfrom django.core.checks import (\n    Checks,\n    Error,\n    Warning,\n    Tag,\n    Info,\n    Debug,\n    check_errors,\n)\n\nclass TestBaseCommand(unittest.TestCase):\n\n    def test_handle_default_options(self):\n        options = {}\n        handle_default_options(options)\n        self.assertEqual(options.get(\"settings\"), None)\n        self.assertEqual(options.get(\"pythonpath\"), None)\n\n    def test_handle_default_options_with_settings(self):\n        options = {\"settings\": \"myproject.settings\"}\n        handle_default_options(options)\n        self.assertEqual(options[\"settings\"], \"myproject.settings\")\n\n    def test_handle_default_options_with_pythonpath(self):\n        options = {\"pythonpath\": \"/path/to/myproject\"}\n        handle_default_options(options)\n        self.assertEqual(options[\"pythonpath\"], \"/path/to/myproject\")\n\n    def test_create_parser(self):\n        command = BaseCommand()\n        parser = command.create_parser(\"test_command\", \"test_subcommand\")\n        self.assertIsInstance(parser, argparse.ArgumentParser)\n\n    def test_print_help(self):\n        command = BaseCommand()\n        with patch(\"sys.stdout\", new_callable=StringIO) as stdout:\n            command.print_help(\"test_command\", \"test_subcommand\")\n        self.assertIn(\"Usage:\", stdout.getvalue())\n\n    def test_run_from_argv(self):\n        command = BaseCommand()\n        with patch(\"sys.argv\", [\"test_command\", \"test_subcommand\", \"arg1\", \"arg2\"]) as mock_argv:\n            with patch(\"django.core.management.base.connections.close_all\") as mock_close:\n                command.run_from_argv(mock_argv)\n                mock_close.assert_called_once()\n\n    def test_execute_with_no_output(self):\n        command = BaseCommand()\n        with patch.object(command, \"handle\", return_value=None) as mock_handle:\n            output = command.execute(args=[], options={})\n            self.assertEqual(output, \"\")\n            mock_handle.assert_called_once_with(args=[], options={})\n\n    def test_execute_with_output(self):\n        command = BaseCommand()\n        with patch.object(command, \"handle\", return_value=\"test output\") as mock_handle:\n            output = command.execute(args=[], options={})\n            self.assertEqual(output, \"test output\")\n            mock_handle.assert_called_once_with(args=[], options={})\n\n    def test_execute_with_system_checks(self):\n        command = BaseCommand()\n        command.requires_system_checks = [\"test_tag\"]\n        with patch.object(command, \"check\", return_value=None) as mock_check:\n            command.execute(args=[], options={})\n            mock_check.assert_called_once_with(tags=[\"test_tag\"])\n\n    def test_execute_with_migrations_checks(self):\n        command = BaseCommand()\n        command.requires_migrations_checks = True\n        with patch.object(command, \"check_migrations\", return_value=None) as mock_check_migrations:\n            command.execute(args=[], options={})\n            mock_check_migrations.assert_called_once()\n\n    def test_execute_with_traceback(self):\n        command = BaseCommand()\n        with patch.object(command, \"handle\", side_effect=Exception(\"test error\")) as mock_handle:\n            with patch(\"sys.stderr\", new_callable=StringIO) as mock_stderr:\n                command.execute(args=[], options={\"traceback\": True})\n                self.assertIn(\"test error\", mock_stderr.getvalue())\n\n    def test_execute_with_no_traceback(self):\n        command = BaseCommand()\n        with patch.object(command, \"handle\", side_effect=Exception(\"test error\")) as mock_handle:\n            with patch(\"sys.stderr\", new_callable=StringIO) as mock_stderr:\n                command.execute(args=[], options={\"traceback\": False})\n                self.assertNotIn(\"test error\", mock_stderr.getvalue())\n\n    def test_execute_with_system_check_error(self):\n        command = BaseCommand()\n        with patch.object(command, \"check\", side_effect=SystemCheckError(\"test error\")) as mock_check:\n            with patch(\"sys.stderr\", new_callable=StringIO) as mock_stderr:\n                command.execute(args=[], options={})\n                self.assertIn(\"SystemCheckError: test error\", mock_stderr.getvalue())\n\n    def test_execute_with_command_error(self):\n        command = BaseCommand()\n        with patch.object(command, \"handle\", side_effect=CommandError(\"test error\")) as mock_handle:\n            with patch(\"sys.stderr\", new_callable=StringIO) as mock_stderr:\n                command.execute(args=[], options={})\n                self.assertIn(\"test error\", mock_stderr.getvalue())\n\n    def test_output_transaction(self):\n        command = BaseCommand()\n        command.output_transaction = True\n        with patch.object(command, \"handle\", return_value=\"test output\") as mock_handle:\n            output = command.execute(args=[], options={})\n            self.assertIn(\"BEGIN;\", output)\n            self.assertIn(\"COMMIT;\", output)\n\n    def test_no_output_transaction(self):\n        command = BaseCommand()\n        command.output_transaction = False\n        with patch.object(command, \"handle\", return_value=\"test output\") as mock_handle:\n            output = command.execute(args=[], options={})\n            self.assertNotIn(\"BEGIN;\", output)\n            self.assertNotIn(\"COMMIT;\", output)\n\n    def test_add_base_argument(self):\n        command = BaseCommand()\n        parser = argparse.ArgumentParser()\n        command.add_base_argument(parser, \"--test\", action=\"store_true\")\n        self.assertIn(\"--test\", parser.format_help())\n\n    def test_add_arguments(self):\n        command = BaseCommand()\n        parser = argparse.ArgumentParser()\n        command.add_arguments(parser)\n        self.assertIn(\"--version\", parser.format_help())\n        self.assertIn(\"--verbosity\", parser.format_help())\n        self.assertIn(\"--settings\", parser.format_help())\n        self.assertIn(\"--pythonpath\", parser.format_help())\n        self.assertIn(\"--traceback\", parser.format_help())\n        self.assertIn(\"--no-color\", parser.format_help())\n        self.assertIn(\"--force-color\", parser.format_help())\n        self.assertIn(\"--skip-checks\", parser.format_help())\n\n    def test_handle_app_config(self):\n        command = AppCommand()\n        app_config = AppConfig(\n            label=\"test_app\",\n            module_path=\"test_app\",\n            apps=None,\n        )\n        with patch.object(command, \"handle_label\", return_value=\"test output\") as mock_handle_label:\n            output = command.handle_app_config(app_config)\n            self.assertEqual(output, \"test output\")\n            mock_handle_label.assert_called_once_with(\"test_app\")\n\n    def test_handle_label(self):\n        command = LabelCommand()\n        with patch.object(command, \"handle_label\", return_value=\"test output\") as mock_handle_label:\n            output = command.handle_label(\"test_label\")\n            self.assertEqual(output, \"test output\")\n            mock_handle_label.assert_called_once_with(\"test_label\")\n\n    def test_check(self):\n        command = BaseCommand()\n        command.requires_system_checks = [\"test_tag\"]\n        with patch.object(command, \"check\", return_value=None) as mock_check:\n            command.check(tags=[\"test_tag\"])\n            mock_check.assert_called_once_with(tags=[\"test_tag\"])\n\n    def test_check_migrations(self):\n        command = BaseCommand()\n        with patch.object(command, \"check_migrations\", return_value=None) as mock_check_migrations:\n            command.check_migrations()\n            mock_check_migrations.assert_called_once()\n\n\n\nclass TestDjangoHelpFormatter(unittest.TestCase):\n    def test_add_usage(self):\n        formatter = DjangoHelpFormatter()\n        parser = argparse.ArgumentParser()\n        formatter.add_usage(\n            \"test command\",\n            [],\n        )\n        self.assertIn(\"Usage:\", formatter.format_help())\n\n    def test_add_arguments(self):\n        formatter = DjangoHelpFormatter()\n        parser = argparse.ArgumentParser()\n        formatter.add_arguments(parser)\n        self.assertIn(\"--version\", formatter.format_help())\n        self.assertIn(\"--verbosity\", formatter.format_help())\n        self.assertIn(\"--settings\", formatter.format_help())\n        self.assertIn(\"--pythonpath\", formatter.format_help())\n        self.assertIn(\"--traceback\", formatter.format_help())\n        self.assertIn(\"--no-color\", formatter.format_help())\n        self.assertIn(\"--force-color\", formatter.format_help())\n        self.assertIn(\"--skip-checks\", formatter.format_help())\n\n\n\nclass TestOutputWrapper(unittest.TestCase):\n    def test_write(self):\n        output_wrapper = OutputWrapper(sys.stdout)\n        output_wrapper.write(\"test output\")\n        self.assertEqual(sys.stdout.getvalue(), \"test output\")\n\n    def test_flush(self):\n        output_wrapper = OutputWrapper(sys.stdout)\n        output_wrapper.write(\"test output\")\n        output_wrapper.flush()\n        self.assertEqual(sys.stdout.getvalue(), \"test output\")\n\n    def test_isatty(self):\n        output_wrapper = OutputWrapper(sys.stdout)\n        self.assertTrue(output_wrapper.isatty())\n\n\n\nclass TestColorStyle(unittest.TestCase):\n    def test_colorize(self):\n        style = color_style()\n        self.assertEqual(style.SQL_KEYWORD(\"test\"), \"test\")\n        self.assertEqual(style.ERROR(\"test\"), \"\\033[31mtest\\033[0m\")\n        self.assertEqual(style.WARNING(\"test\"), \"\\033[33mtest\\033[0m\")\n        self.assertEqual(style.SUCCESS(\"test\"), \"\\033[32mtest\\033[0m\")\n        self.assertEqual(style.INFO(\"test\"), \"\\033[34mtest\\033[0m\")\n\n    def test_no_color(self):\n        style = no_style()\n        self.assertEqual(style.SQL_KEYWORD(\"test\"), \"test\")\n        self.assertEqual(style.ERROR(\"test\"), \"test\")\n        self.assertEqual(style.WARNING(\"test\"), \"test\")\n        self.assertEqual(style.SUCCESS(\"test\"), \"test\")\n        self.assertEqual(style.INFO(\"test\"), \"test\")\n\n\n\n"], "sample_119": ["\nfrom sympy import mathematica_code as mcode, symbols, sin, cos, exp, log, pi, oo, Integer, Tuple, List\nfrom sympy.abc import x, y\n\ndef test_basic_functions():\n    assert mcode(x) == 'x'\n    assert mcode(2) == '2'\n    assert mcode(pi) == 'Pi'\n    assert mcode(oo) == 'Infinity'\n    assert mcode(-oo) == '-Infinity'\n    assert mcode(Integer(5)) == '5'\n\ndef test_arithmetic_operations():\n    assert mcode(x + 2) == 'x + 2'\n    assert mcode(x - 2) == 'x - 2'\n    assert mcode(x * 2) == '2 x'\n    assert mcode(x / 2) == 'x/2'\n    assert mcode(x**2) == 'x^2'\n    assert mcode(x**3) == 'x^3'\n    assert mcode(2**x) == '2^x'\n\ndef test_trig_functions():\n    assert mcode(sin(x)) == 'Sin[x]'\n    assert mcode(cos(x)) == 'Cos[x]'\n    assert mcode(tan(x)) == 'Tan[x]'\n\ndef test_exponential_functions():\n    assert mcode(exp(x)) == 'Exp[x]'\n    assert mcode(log(x)) == 'Log[x]'\n\ndef test_list_and_tuple():\n    assert mcode([1, 2, 3]) == '{1, 2, 3}'\n    assert mcode((1, 2, 3)) == '{1, 2, 3}'\n\ndef test_integral():\n    assert mcode(integrate(x, x)) == 'Hold[Integrate[x, x]]'\n\ndef test_sum():\n    assert mcode(Sum(x, (x, 0, 10))) == 'Hold[Sum[x, {x, 0, 10}]]'\n\ndef test_derivative():\n    assert mcode(Derivative(x**2, x)) == 'Hold[D[x^2, x]]'\n\ndef test_user_functions():\n    custom_functions = {'myfunc': lambda x: x**2 + 1}\n    assert mcode(myfunc(x), user_functions=custom_functions) == 'myfunc[x]'\n\n\n\n"], "sample_97": ["\nimport unittest\nfrom sklearn.preprocessing import LabelBinarizer, MultiLabelBinarizer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import label_binarize\nfrom sklearn.preprocessing import _inverse_binarize_thresholding\nfrom sklearn.preprocessing import _inverse_binarize_multiclass\nfrom sklearn.utils.testing import assert_array_equal\nfrom sklearn.utils.testing import assert_array_almost_equal\nfrom sklearn.utils.testing import assert_equal\nfrom sklearn.utils.testing import ignore_warnings\nfrom sklearn.utils import check_array\nfrom typing import List, Tuple\nimport numpy as np\nimport scipy.sparse as sp\nfrom sklearn.utils.estimator_checks import check_estimator\nfrom sklearn.utils.estimator_checks import check_is_fitted\n\nclass TestLabelBinarizer(unittest.TestCase):\n\n    def test_label_binarizer_fit_transform(self):\n        lb = LabelBinarizer()\n        y = np.array([1, 2, 6, 4, 2])\n        y_bin = lb.fit_transform(y)\n        self.assertEqual(y_bin.shape, (5, 4))\n        self.assertTrue(np.all(y_bin[:, 0] == (y == 1)))\n        self.assertTrue(np.all(y_bin[:, 1] == (y == 2)))\n        self.assertTrue(np.all(y_bin[:, 2] == (y == 4)))\n        self.assertTrue(np.all(y_bin[:, 3] == (y == 6)))\n\n    def test_label_binarizer_fit_transform_sparse(self):\n        lb = LabelBinarizer()\n        y = sp.csr_matrix([1, 2, 6, 4, 2])\n        y_bin = lb.fit_transform(y)\n        self.assertEqual(y_bin.shape, (5, 4))\n        self.assertTrue(np.all(y_bin[:, 0] == (y == 1)))\n        self.assertTrue(np.all(y_bin[:, 1] == (y == 2)))\n        self.assertTrue(np.all(y_bin[:, 2] == (y == 4)))\n        self.assertTrue(np.all(y_bin[:, 3] == (y == 6)))\n\n    def test_label_binarizer_transform(self):\n        lb = LabelBinarizer()\n        y = np.array([1, 2, 6, 4, 2])\n        lb.fit(y)\n        y_bin = lb.transform(y)\n        self.assertEqual(y_bin.shape, (5, 4))\n        self.assertTrue(np.all(y_bin[:, 0] == (y == 1)))\n        self.assertTrue(np.all(y_bin[:, 1] == (y == 2)))\n        self.assertTrue(np.all(y_bin[:, 2] == (y == 4)))\n        self.assertTrue(np.all(y_bin[:, 3] == (y == 6)))\n\n    def test_label_binarizer_sparse_transform(self):\n        lb = LabelBinarizer()\n        y = np.array([1, 2, 6, 4, 2])\n        lb.fit(y)\n        y_bin = lb.transform(sp.csr_matrix(y))\n        self.assertEqual(y_bin.shape, (5, 4))\n        self.assertTrue(np.all(y_bin[:, 0] == (y == 1)))\n        self.assertTrue(np.all(y_bin[:, 1] == (y == 2)))\n        self.assertTrue(np.all(y_bin[:, 2] == (y == 4)))\n        self.assertTrue(np.all(y_bin[:, 3] == (y == 6)))\n\n    def test_label_binarizer_empty_array(self):\n        lb = LabelBinarizer()\n        with self.assertRaises(ValueError):\n            lb.fit_transform([])\n\n    def test_label_binarizer_multilabel(self):\n        lb = LabelBinarizer()\n        with self.assertRaises(ValueError):\n            lb.fit_transform([[1, 2], [1, 3]])\n\n    def test_label_binarizer_neg_label(self):\n        lb = LabelBinarizer(neg_label=-1)\n        y = np.array([1, 2, 6, 4, 2])\n        y_bin = lb.fit_transform(y)\n        self.assertEqual(y_bin.shape, (5, 4))\n        self.assertTrue(np.all(y_bin[:, 0] == (y == 1)))\n        self.assertTrue(np.all(y_bin[:, 1] == (y == 2)))\n        self.assertTrue(np.all(y_bin[:, 2] == (y == 4)))\n        self.assertTrue(np.all(y_bin[:, 3] == (y == 6)))\n\n    def test_label_binarizer_pos_label(self):\n        lb = LabelBinarizer(pos_label=2)\n        y = np.array([1, 2, 6, 4, 2])\n        y_bin = lb.fit_transform(y)\n        self.assertEqual(y_bin.shape, (5, 4))\n        self.assertTrue(np.all(y_bin[:, 1] == (y == 1)))\n        self.assertTrue(np.all(y_bin[:, 2] == (y == 2)))\n        self.assertTrue(np.all(y_bin[:, 0] == (y == 4)))\n        self.assertTrue(np.all(y_bin[:, 3] == (y == 6)))\n\n    def test_label_binarizer_sparse_output(self):\n        lb = LabelBinarizer(sparse_output=True)\n        y = np.array([1, 2, 6, 4, 2])\n        y_bin = lb.fit_transform(y)\n        self.assertTrue(isinstance(y_bin, sp.csr_matrix))\n\n    def test_label_binarizer_sparse_output_transform(self):\n        lb = LabelBinarizer(sparse_output=True)\n        y = np.array([1, 2, 6, 4, 2])\n        lb.fit(y)\n        y_bin = lb.transform(y)\n        self.assertTrue(isinstance(y_bin, sp.csr_matrix))\n\n    def test_label_binarizer_sparse_output_fit_transform(self):\n        lb = LabelBinarizer(sparse_output=True)\n        y = sp.csr_matrix([1, 2, 6, 4, 2])\n        y_bin = lb.fit_transform(y)\n        self.assertTrue(isinstance(y_bin, sp.csr_matrix))\n\n    def test_label_binarizer_multiclass_multilabel(self):\n        lb = LabelBinarizer()\n        y = np.array([[1, 2], [1, 3]])\n        with self.assertRaises(ValueError):\n            lb.fit_transform(y)\n\n    def test_label_binarizer_multiclass_multilabel_sparse(self):\n        lb = LabelBinarizer()\n        y = sp.csr_matrix([[1, 2], [1, 3]])\n        with self.assertRaises(ValueError):\n            lb.fit_transform(y)\n\n    def test_label_binarizer_multiclass_multilabel_sparse_output(self):\n        lb = LabelBinarizer(sparse_output=True)\n        y = sp.csr_matrix([[1, 2], [1, 3]])\n        with self.assertRaises(ValueError):\n            lb.fit_transform(y)\n\n    def test_label_binarizer_multiclass_multilabel_sparse_output_transform(self):\n        lb = LabelBinarizer(sparse_output=True)\n        y = sp.csr_matrix([[1, 2], [1, 3]])\n        lb.fit(y)\n        with self.assertRaises(ValueError):\n            lb.transform(y)\n\n    def test_label_binarizer_multiclass_multilabel_sparse_output_transform(self):\n        lb = LabelBinarizer(sparse_output=True)\n        y = sp.csr_matrix([[1, 2], [1, 3]])\n        lb.fit(y)\n        with self.assertRaises(ValueError):\n            lb.transform(y)\n\n\n\nclass TestMultiLabelBinarizer(unittest.TestCase):\n    def test_multilabel_binarizer_fit_transform(self):\n        mlb = MultiLabelBinarizer()\n        y = [set(['sci-fi', 'thriller'], set(['comedy']))\n        y_bin = mlb.fit_transform(y)\n        self.assertEqual(y_bin.shape, (2, 3))\n        self.assertTrue(np.all(y_bin[0] == [1, 1, 0])\n        self.assertTrue(np.all(y_bin[1] == [0, 0, 1]))\n\n    def test_multilabel_binarizer_fit_transform_classes(self):\n        mlb = MultiLabelBinarizer(classes=['comedy', 'sci-fi', 'thriller'])\n        y = [set(['sci-fi', 'thriller'], set(['comedy']))\n        y_bin = mlb.fit_transform(y)\n        self.assertEqual(y_bin.shape, (2, 3))\n        self.assertTrue(np.all(y_bin[0] == [0, 1, 1])\n        self.assertTrue(np.all(y_bin[1] == [1, 0, 0]))\n\n    def test_multilabel_binarizer_transform(self):\n        mlb = MultiLabelBinarizer()\n        y = [set(['sci-fi', 'thriller'], set(['comedy']))\n        mlb.fit(y)\n        y_bin = mlb.transform(y)\n        self.assertEqual(y_bin.shape, (2, 3))\n        self.assertTrue(np.all(y_bin[0] == [1, 1, 0])\n        self.assertTrue(np.all(y_bin[1] == [0, 0, 1]))\n\n    def test_multilabel_binarizer_transform_classes(self):\n        mlb = MultiLabelBinarizer(classes=['comedy', 'sci-fi', 'thriller'])\n        y = [set(['sci-fi', 'thriller'], set(['comedy']))\n        y_bin = mlb.transform(y)\n        self.assertEqual(y_bin.shape, (2, 3))\n        self.assertTrue(np.all(y_bin[0] == [0, 1, 1])\n        self.assertTrue(np.all(y_bin[1] == [1, 0, 0]))\n\n    def test_multilabel_binarizer_inverse_transform(self):\n        mlb = MultiLabelBinarizer()\n        y = [set(['sci-fi', 'thriller'], set(['comedy']))\n        y_bin = mlb.fit_transform(y)\n        y_classes = mlb.inverse_transform(y_bin)\n        self.assertEqual(y_classes, y)\n\n    def test_multilabel_binarizer_inverse_transform_classes(self):\n        mlb = MultiLabelBinarizer(classes=['comedy', 'sci-fi', 'thriller'])\n        y_bin = mlb.fit_transform([set(['sci-fi', 'thriller'], set(['comedy']))\n        y_classes = mlb.inverse_transform(y_bin)\n        self.assertEqual(y_classes, [set(['sci-fi', 'thriller'], set(['comedy']))\n\n\n\n    def test_multilabel_binarizer_sparse_output(self):\n        mlb = MultiLabelBinarizer(sparse_output=True)\n        y = [set(['sci-fi', 'thriller'], set(['comedy'])\n        y_bin = mlb.fit_transform(y)\n        self.assertTrue(isinstance(y_bin, sp.csr_matrix)\n\n    def test_multilabel_binarizer_sparse_output_transform(self):\n        mlb = MultiLabelBinarizer(sparse_output=True)\n        y = [set(['sci-fi', 'thriller'], set(['comedy'])\n        mlb.fit(y)\n        y_bin = mlb.transform(y)\n        self.assertTrue(isinstance(y_bin, sp.csr_matrix)\n\n\n\n    def test_multilabel_binarizer_classes(self):\n        mlb = MultiLabelBinarizer(classes=['comedy', 'sci-fi', 'thriller'])\n        y = [set(['sci-fi', 'thriller'], set(['comedy'])\n        y_bin = mlb.fit_transform(y)\n        self.assertEqual(y_bin.shape, (2, 3))\n        self.assertTrue(np.all(y_bin[0] == [0, 1, 1])\n        self.assertTrue(np.all(y_bin[1] == [1, 0, 0])\n\n\n\nclass TestLabelEncoder(self):\n    def test_label_encoder(self):\n        le = LabelEncoder()\n        y = [1, 2, 1, 0]\n        le.fit(y)\n        self.assertEqual(len(le.classes_), 4)\n        self.assertEqual(le.classes_, [0, 1, 2, 3])\n        self.assertEqual(le.transform(y), [0, 1, 1, 2])\n\n\n\n"], "sample_14": ["\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    serializer_factory,\n    Serializer,\n)\nfrom django.db import models\nfrom django.utils.timezone import utc\nfrom django.conf import settings\nfrom unittest import mock\nimport datetime\nimport uuid\nimport functools\nimport re\nimport types\nimport decimal\nfrom enum import Enum\nfrom collections import abc\nfrom django.utils.functional import LazyObject, Promise\nfrom django.utils.version import get_docs_version\n\nclass MyEnum(Enum):\n    VALUE1 = 1\n    VALUE2 = 2\n\nclass TestSerializer(object):\n    def test_serializer_factory_simple(self):\n        serializer = serializer_factory(123)\n        self.assertEqual(serializer.__class__.__name__, 'BaseSimpleSerializer')\n        self.assertEqual(serializer.serialize(), ('123', set()))\n\n    def test_serializer_factory_string(self):\n        serializer = serializer_factory(\"hello\")\n        self.assertEqual(serializer.__class__.__name__, 'BaseSimpleSerializer')\n        self.assertEqual(serializer.serialize(), ('\"hello\"', set()))\n\n    def test_serializer_factory_bool(self):\n        serializer = serializer_factory(True)\n        self.assertEqual(serializer.__class__.__name__, 'BaseSimpleSerializer')\n        self.assertEqual(serializer.serialize(), ('True', set()))\n\n    def test_serializer_factory_none(self):\n        serializer = serializer_factory(None)\n        self.assertEqual(serializer.__class__.__name__, 'BaseSimpleSerializer')\n        self.assertEqual(serializer.serialize(), ('None', set()))\n\n    def test_serializer_factory_float(self):\n        serializer = serializer_factory(3.14)\n        self.assertEqual(serializer.__class__.__name__, 'FloatSerializer')\n        self.assertEqual(serializer.serialize(), ('3.14', set()))\n\n    def test_serializer_factory_nan(self):\n        serializer = serializer_factory(float('nan'))\n        self.assertEqual(serializer.__class__.__name__, 'FloatSerializer')\n        self.assertEqual(serializer.serialize(), ('float(\"nan\")', set()))\n\n    def test_serializer_factory_inf(self):\n        serializer = serializer_factory(float('inf'))\n        self.assertEqual(serializer.__class__.__name__, 'FloatSerializer')\n        self.assertEqual(serializer.serialize(), ('float(\"inf\")', set()))\n\n    def test_serializer_factory_int(self):\n        serializer = serializer_factory(42)\n        self.assertEqual(serializer.__class__.__name__, 'BaseSimpleSerializer')\n        self.assertEqual(serializer.serialize(), ('42', set()))\n\n    def test_serializer_factory_bytes(self):\n        serializer = serializer_factory(b'hello')\n        self.assertEqual(serializer.__class__.__name__, 'BaseSimpleSerializer')\n        self.assertEqual(serializer.serialize(), (\"b'hello'\", set()))\n\n    def test_serializer_factory_str(self):\n        serializer = serializer_factory(\"hello\")\n        self.assertEqual(serializer.__class__.__name__, 'BaseSimpleSerializer')\n        self.assertEqual(serializer.serialize(), ('\"hello\"', set()))\n\n    def test_serializer_factory_range(self):\n        serializer = serializer_factory(range(1, 5))\n        self.assertEqual(serializer.__class__.__name__, 'BaseSimpleSerializer')\n        self.assertEqual(serializer.serialize(), ('range(1, 5)', set()))\n\n    def test_serializer_factory_decimal(self):\n        serializer = serializer_factory(decimal.Decimal('1.23'))\n        self.assertEqual(serializer.__class__.__name__, 'DecimalSerializer')\n        self.assertEqual(serializer.serialize(), ('Decimal(\"1.23\")', {'from decimal import Decimal'}))\n\n    def test_serializer_factory_datetime(self):\n        dt = datetime.datetime(2023, 10, 26, 10, 30, 0)\n        serializer = serializer_factory(dt)\n        self.assertEqual(serializer.__class__.__name__, 'DateTimeSerializer')\n        self.assertEqual(serializer.serialize(), ('datetime.datetime(2023, 10, 26, 10, 30, 0)', {'import datetime'}))\n\n    def test_serializer_factory_datetime_utc(self):\n        dt = datetime.datetime(2023, 10, 26, 10, 30, 0, tzinfo=utc)\n        serializer = serializer_factory(dt)\n        self.assertEqual(serializer.__class__.__name__, 'DatetimeDatetimeSerializer')\n        self.assertEqual(serializer.serialize(), ('datetime.datetime(2023, 10, 26, 10, 30, 0, tzinfo=utc)', {'import datetime', 'from django.utils.timezone import utc'}))\n\n    def test_serializer_factory_date(self):\n        dt = datetime.date(2023, 10, 26)\n        serializer = serializer_factory(dt)\n        self.assertEqual(serializer.__class__.__name__, 'DateTimeSerializer')\n        self.assertEqual(serializer.serialize(), ('datetime.date(2023, 10, 26)', {'import datetime'}))\n\n    def test_serializer_factory_timedelta(self):\n        dt = datetime.timedelta(days=1, hours=2, minutes=3)\n        serializer = serializer_factory(dt)\n        self.assertEqual(serializer.__class__.__name__, 'DateTimeSerializer')\n        self.assertEqual(serializer.serialize(), ('datetime.timedelta(days=1, hours=2, minutes=3)', {'import datetime'}))\n\n    def test_serializer_factory_time(self):\n        dt = datetime.time(10, 30, 0)\n        serializer = serializer_factory(dt)\n        self.assertEqual(serializer.__class__.__name__, 'DateTimeSerializer')\n        self.assertEqual(serializer.serialize(), ('datetime.time(10, 30, 0)', {'import datetime'}))\n\n    def test_serializer_factory_enum(self):\n        serializer = serializer_factory(MyEnum.VALUE1)\n        self.assertEqual(serializer.__class__.__name__, 'EnumSerializer')\n        self.assertEqual(serializer.serialize(), ('MyEnum.VALUE1', {'import MyEnum'}))\n\n    def test_serializer_factory_list(self):\n        serializer = serializer_factory([1, 2, 3])\n        self.assertEqual(serializer.__class__.__name__, 'SequenceSerializer')\n        self.assertEqual(serializer.serialize(), ('[1, 2, 3]', set()))\n\n    def test_serializer_factory_tuple(self):\n        serializer = serializer_factory((1, 2, 3))\n        self.assertEqual(serializer.__class__.__name__, 'TupleSerializer')\n        self.assertEqual(serializer.serialize(), ('(1, 2, 3)', set()))\n\n    def test_serializer_factory_set(self):\n        serializer = serializer_factory({1, 2, 3})\n        self.assertEqual(serializer.__class__.__name__, 'SetSerializer')\n        self.assertEqual(serializer.serialize(), ('{1, 2, 3}', set()))\n\n    def test_serializer_factory_dict(self):\n        serializer = serializer_factory({'a': 1, 'b': 2})\n        self.assertEqual(serializer.__class__.__name__, 'DictionarySerializer')\n        self.assertEqual(serializer.serialize(), ('{ \"a\": 1, \"b\": 2 }', set()))\n\n    def test_serializer_factory_frozenset(self):\n        serializer = serializer_factory(frozenset([1, 2, 3]))\n        self.assertEqual(serializer.__class__.__name__, 'FrozensetSerializer')\n        self.assertEqual(serializer.serialize(), ('frozenset([1, 2, 3])', set()))\n\n    def test_serializer_factory_models_field(self):\n        field = models.CharField(max_length=100)\n        serializer = serializer_factory(field)\n        self.assertEqual(serializer.__class__.__name__, 'ModelFieldSerializer')\n        self.assertEqual(serializer.serialize(), ('models.CharField(max_length=100)', set()))\n\n    def test_serializer_factory_models_manager(self):\n        class MyManager(models.Manager):\n            pass\n        manager = MyManager()\n        serializer = serializer_factory(manager)\n        self.assertEqual(serializer.__class__.__name__, 'ModelManagerSerializer')\n        self.assertEqual(serializer.serialize(), ('MyManager.as_manager()', set()))\n\n    def test_serializer_factory_operation(self):\n        operation = Operation()\n        serializer = serializer_factory(operation)\n        self.assertEqual(serializer.__class__.__name__, 'OperationSerializer')\n        self.assertEqual(serializer.serialize(), ('Operation()', set()))\n\n    def test_serializer_factory_type(self):\n        serializer = serializer_factory(int)\n        self.assertEqual(serializer.__class__.__name__, 'TypeSerializer')\n        self.assertEqual(serializer.serialize(), ('int', set()))\n\n    def test_serializer_factory_uuid(self):\n        uuid_obj = uuid.UUID('123e4567-e89b-12d3-a456-426655440000')\n        serializer = serializer_factory(uuid_obj)\n        self.assertEqual(serializer.__class__.__name__, 'UUIDSerializer')\n        self.assertEqual(serializer.serialize(), ('uuid.UUID(\"123e4567-e89b-12d3-a456-426655440000\")', {'import uuid'}))\n\n    def test_serializer_factory_functools_partial(self):\n        @functools.partial\n        def my_func(a, b):\n            return a + b\n\n        serializer = serializer_factory(my_func)\n        self.assertEqual(serializer.__class__.__name__, 'FunctoolsPartialSerializer')\n        self.assertEqual(serializer.serialize(), ('functools.partial(my_func, a, b)', {'import functools'}))\n\n    def test_serializer_factory_functools_partialmethod(self):\n        class MyClass:\n            @functools.partialmethod\n            def my_func(self, a, b):\n                return a + b\n\n        instance = MyClass()\n        serializer = serializer_factory(instance.my_func)\n        self.assertEqual(serializer.__class__.__name__, 'FunctoolsPartialSerializer')\n        self.assertEqual(serializer.serialize(), ('functools.partialmethod(MyClass.my_func, a, b)', {'import functools'}))\n\n    def test_serializer_factory_type_function(self):\n        def my_func():\n            pass\n        serializer = serializer_factory(my_func)\n        self.assertEqual(serializer.__class__.__name__, 'FunctionTypeSerializer')\n        self.assertEqual(serializer.serialize(), ('<function my_func at 0x%x>' % id(my_func)), set())\n\n    def test_serializer_factory_type_builtin_function(self):\n        serializer = serializer_factory(type(None))\n        self.assertEqual(serializer.__class__.__name__, 'FunctionTypeSerializer')\n        self.assertEqual(serializer.serialize(), ('type(None)', set()))\n\n    def test_serializer_factory_type_method(self):\n        class MyClass:\n            def my_method(self):\n                pass\n\n        instance = MyClass()\n        serializer = serializer_factory(instance.my_method)\n        self.assertEqual(serializer.__class__.__name__, 'FunctionTypeSerializer')\n        self.assertEqual(serializer.serialize(), ('MyClass.my_method', {'import MyClass'}))\n\n    def test_serializer_factory_promise(self):\n        promise = Promise(\"hello\")\n        serializer = serializer_factory(promise)\n        self.assertEqual(serializer.__class__.__name__, 'BaseSimpleSerializer')\n        self.assertEqual(serializer.serialize(), ('\"hello\"', set()))\n\n    def test_serializer_factory_lazyobject(self):\n        lazy = LazyObject(\"hello\")\n        serializer = serializer_factory(lazy)\n        self.assertEqual(serializer.__class__.__name__, 'BaseSimpleSerializer')\n        self.assertEqual(serializer.serialize(), ('\"hello\"', set()))\n\n    def test_serializer_factory_unknown_type(self):\n        with self.assertRaises(ValueError):\n            serializer_factory(object())\n\n\n\n"], "sample_63": ["\nfrom django.contrib.auth.forms import (\n    AdminPasswordChangeForm,\n    AuthenticationForm,\n    PasswordChangeForm,\n    PasswordResetForm,\n    ReadOnlyPasswordHashField,\n    ReadOnlyPasswordHashWidget,\n    SetPasswordForm,\n    UserChangeForm,\n    UserCreationForm,\n)\nfrom django.forms import forms\nfrom django.forms.fields import CharField, Field, IntegerField\nfrom django.test import TestCase\nfrom django.utils.encoding import force_bytes\nfrom django.utils.http import urlsafe_base64_encode\nfrom django.contrib.auth.models import User\nfrom django.contrib.sites.shortcuts import get_current_site\nfrom django.core.mail.message import EmailMessage\nfrom unittest.mock import patch, MagicMock\n\nclass TestUserCreationForm(TestCase):\n    def test_clean_password2(self):\n        form = UserCreationForm(data={\"username\": \"testuser\", \"password1\": \"password\", \"password2\": \"password\"})\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.cleaned_data[\"password1\"], \"password\")\n        self.assertEqual(form.cleaned_data[\"password2\"], \"password\")\n\n    def test_clean_password2_mismatch(self):\n        form = UserCreationForm(data={\"username\": \"testuser\", \"password1\": \"password\", \"password2\": \"wrongpassword\"})\n        self.assertFalse(form.is_valid())\n        self.assertIn(\"password_mismatch\", form.errors)\n\n    def test_save(self):\n        form = UserCreationForm(data={\"username\": \"testuser\", \"password1\": \"password\", \"password2\": \"password\"})\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertEqual(user.username, \"testuser\")\n        self.assertTrue(user.check_password(\"password\"))\n\nclass TestUserChangeForm(TestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(username=\"testuser\", password=\"password\")\n\n    def test_clean_password2(self):\n        form = UserChangeForm(instance=self.user, data={\"password2\": \"password\"})\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.cleaned_data[\"password2\"], \"password\")\n\n    def test_clean_password2_mismatch(self):\n        form = UserChangeForm(instance=self.user, data={\"password2\": \"wrongpassword\"})\n        self.assertFalse(form.is_valid())\n        self.assertIn(\"password_mismatch\", form.errors)\n\n    def test_save(self):\n        form = UserChangeForm(instance=self.user, data={\"password2\": \"newpassword\"})\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertEqual(user.username, \"testuser\")\n        self.assertTrue(user.check_password(\"newpassword\"))\n\nclass TestPasswordChangeForm(TestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(username=\"testuser\", password=\"password\")\n\n    def test_clean_old_password(self):\n        form = PasswordChangeForm(user=self.user, data={\"old_password\": \"password\", \"password1\": \"newpassword\", \"password2\": \"newpassword\"})\n        self.assertTrue(form.is_valid())\n\n    def test_clean_old_password_incorrect(self):\n        form = PasswordChangeForm(user=self.user, data={\"old_password\": \"wrongpassword\", \"password1\": \"newpassword\", \"password2\": \"newpassword\"})\n        self.assertFalse(form.is_valid())\n        self.assertIn(\"password_incorrect\", form.errors)\n\n    def test_save(self):\n        form = PasswordChangeForm(user=self.user, data={\"old_password\": \"password\", \"password1\": \"newpassword\", \"password2\": \"newpassword\"})\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertEqual(user.username, \"testuser\")\n        self.assertTrue(user.check_password(\"newpassword\"))\n\nclass TestSetPasswordForm(TestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(username=\"testuser\", password=\"password\")\n\n    def test_clean_password2(self):\n        form = SetPasswordForm(user=self.user, data={\"new_password1\": \"newpassword\", \"new_password2\": \"newpassword\"})\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.cleaned_data[\"new_password1\"], \"newpassword\")\n\n    def test_clean_password2_mismatch(self):\n        form = SetPasswordForm(user=self.user, data={\"new_password1\": \"newpassword\", \"new_password2\": \"wrongpassword\"})\n        self.assertFalse(form.is_valid())\n        self.assertIn(\"password_mismatch\", form.errors)\n\n    def test_save(self):\n        form = SetPasswordForm(user=self.user, data={\"new_password1\": \"newpassword\", \"new_password2\": \"newpassword\"})\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertEqual(user.username, \"testuser\")\n        self.assertTrue(user.check_password(\"newpassword\"))\n\nclass TestAdminPasswordChangeForm(TestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(username=\"testuser\", password=\"password\")\n\n    def test_clean_password2(self):\n        form = AdminPasswordChangeForm(user=self.user, data={\"password1\": \"newpassword\", \"password2\": \"newpassword\"})\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.cleaned_data[\"password2\"], \"newpassword\")\n\n    def test_clean_password2_mismatch(self):\n        form = AdminPasswordChangeForm(user=self.user, data={\"password1\": \"newpassword\", \"password2\": \"wrongpassword\"})\n        self.assertFalse(form.is_valid())\n        self.assertIn(\"password_mismatch\", form.errors)\n\n    def test_save(self):\n        form = AdminPasswordChangeForm(user=self.user, data={\"password1\": \"newpassword\", \"password2\": \"newpassword\"})\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertEqual(user.username, \"testuser\")\n        self.assertTrue(user.check_password(\"newpassword\"))\n\nclass TestAuthenticationForm(TestCase):\n    def test_clean(self):\n        form = AuthenticationForm()\n        self.assertFalse(form.is_valid())\n        form = AuthenticationForm(data={\"username\": \"testuser\", \"password\": \"password\"})\n        self.assertTrue(form.is_valid())\n\nclass TestReadOnlyPasswordHashField(TestCase):\n    def test_to_python(self):\n        field = ReadOnlyPasswordHashField()\n        self.assertEqual(field.to_python(\"hashed_password\"), \"hashed_password\")\n\nclass TestReadOnlyPasswordHashWidget(TestCase):\n    def test_get_context(self):\n        widget = ReadOnlyPasswordHashWidget()\n        context = widget.get_context(\n            name=\"password\", value=\"hashed_password\", attrs={}\n        )\n        self.assertEqual(context[\"summary\"], [{\"label\": \"No password set.\"}])\n\nclass TestPasswordResetForm(TestCase):\n    @patch(\"django.contrib.auth.forms.PasswordResetForm.send_mail\")\n    def test_save(self, mock_send_mail):\n        form = PasswordResetForm()\n        form.save(\n            domain_override=\"example.com\",\n            subject_template_name=\"test_subject.txt\",\n            email_template_name=\"test_email.html\",\n            use_https=False,\n            token_generator=MagicMock(),\n            from_email=\"test@example.com\",\n            request=MagicMock(),\n            html_email_template_name=\"test_html_email.html\",\n            extra_email_context={\"test_key\": \"test_value\"},\n        )\n        mock_send_mail.assert_called_once()\n        args = mock_send_mail.call_args[0]\n        self.assertEqual(args[0], \"test_subject.txt\")\n        self.assertEqual(args[1], \"test_email.html\")\n        self.assertEqual(args[2], \"test@example.com\")\n        self.assertEqual(args[3], [\"test@example.com\"])\n\n\n\n"], "sample_125": ["\nfrom sympy import (Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr)\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt\nfrom sympy.core.numbers import (igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse)\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom sympy import pi\nfrom mpmath.libmp.libmpf import fnan\nfrom sympy import Pi\n\ndef test_sympify_fractions():\n    assert sympify_fractions(fractions.Fraction(1, 2)) == Rational(1, 2)\n    assert sympify_fractions(fractions.Fraction(3, 4)) == Rational(3, 4)\n\ndef test_sympify_mpz():\n    assert sympify_mpz(gmpy.mpz(1)) == S.One\n    assert sympify_mpz(gmpy.mpz(-1)) == S.NegativeOne\n\ndef test_sympify_mpq():\n    assert sympify_mpq(gmpy.mpq(1, 2)) == Rational(1, 2)\n    assert sympify_mpq(gmpy.mpq(3, 4)) == Rational(3, 4)\n\ndef test_sympify_complex():\n    assert sympify_complex(1 + 2j) == S.One + 2*S.ImaginaryUnit\n    assert sympify_complex(3 - 4j) == S.Three - 4*S.ImaginaryUnit\n\ndef test_sympify_mpmath():\n    assert sympify_mpmath(mpmath.mpf(1)) == S.One\n    assert sympify_mpmath(mpmath.mpf(2.718281828459045)) == E\n\ndef test_number_symbols():\n    assert isinstance(S.Pi, NumberSymbol)\n    assert isinstance(S.Exp1, NumberSymbol)\n    assert isinstance(S.GoldenRatio, NumberSymbol)\n    assert isinstance(S.EulerGamma, NumberSymbol)\n    assert isinstance(S.Catalan, NumberSymbol)\n    assert isinstance(S.ImaginaryUnit, AtomicExpr)\n\ndef test_number_symbol_properties():\n    assert S.Pi.is_real is True\n    assert S.Pi.is_positive is True\n    assert S.Pi.is_irrational is True\n    assert S.Pi.is_number is True\n    assert S.Pi.is_algebraic is False\n    assert S.Pi.is_transcendental is True\n\n    assert S.Exp1.is_real is True\n    assert S.Exp1.is_positive is True\n    assert S.Exp1.is_irrational is True\n    assert S.Exp1.is_number is True\n    assert S.Exp1.is_algebraic is False\n    assert S.Exp1.is_transcendental is True\n\n    assert S.GoldenRatio.is_real is True\n    assert S.GoldenRatio.is_positive is True\n    assert S.GoldenRatio.is_irrational is True\n    assert S.GoldenRatio.is_number is True\n    assert S.GoldenRatio.is_algebraic is True\n    assert S.GoldenRatio.is_transcendental is False\n\n    assert S.EulerGamma.is_real is True\n    assert S.EulerGamma.is_positive is True\n    assert S.EulerGamma.is_irrational is None\n    assert S.EulerGamma.is_number is True\n\n    assert S.Catalan.is_real is True\n    assert S.Catalan.is_positive is True\n    assert S.Catalan.is_irrational is None\n    assert S.Catalan.is_number is True\n\n    assert S.ImaginaryUnit.is_imaginary is True\n    assert S.ImaginaryUnit.is_finite is True\n    assert S.ImaginaryUnit.is_number is True\n    assert S.ImaginaryUnit.is_algebraic is True\n    assert S.ImaginaryUnit.is_transcendental is False\n\n\n\n"], "sample_25": ["\nimport unittest\nfrom django.db import migrations\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.apps import apps\nfrom django.test import TestCase\nfrom django.core.management.commands.makemigrations import Command as MakeMigrationsCommand\nfrom django.conf import settings\nfrom django.db.models import Model\nfrom django.db.models.base import ModelBase\nfrom django.core.management import call_command\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.utils.functional import Promise\n\nclass TestMigrationAutodetector(TestCase):\n\n    def setUp(self):\n        settings.INSTALLED_APPS = ['tests']\n        self.autodetector = MigrationAutodetector()\n        self.old_apps = apps\n        apps = apps.get_app_config('tests')\n        apps.models_ready = True\n        apps.ready_to_migrate = True\n\n    def tearDown(self):\n        apps = self.old_apps\n        settings.INSTALLED_APPS = apps.installed_apps\n\n    def test_empty_state(self):\n        changes = self.autodetector.changes(None, None)\n        self.assertEqual(changes, {})\n\n    def test_no_changes(self):\n        changes = self.autodetector.changes(None, None)\n        self.assertEqual(changes, {})\n\n    def test_model_creation(self):\n        class TestModel(Model):\n            pass\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.autodetector.changes(None, None)\n\n    def test_model_deletion(self):\n        class TestModel(Model):\n            pass\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.autodetector.changes(None, None)\n\n    def test_field_addition(self):\n        class TestModel(Model):\n            pass\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.autodetector.changes(None, None)\n\n    def test_field_deletion(self):\n        class TestModel(Model):\n            pass\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.autodetector.changes(None, None)\n\n    def test_field_modification(self):\n        class TestModel(Model):\n            pass\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.autodetector.changes(None, None)\n\n    def test_index_addition(self):\n        class TestModel(Model):\n            pass\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.autodetector.changes(None, None)\n\n    def test_index_deletion(self):\n        class TestModel(Model):\n            pass\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.autodetector.changes(None, None)\n\n    def test_unique_together_addition(self):\n        class TestModel(Model):\n            pass\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.autodetector.changes(None, None)\n\n    def test_unique_together_deletion(self):\n        class TestModel(Model):\n            pass\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.autodetector.changes(None, None)\n\n    def test_order_with_respect_to_addition(self):\n        class TestModel(Model):\n            pass\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.autodetector.changes(None, None)\n\n    def test_order_with_respect_to_deletion(self):\n        class TestModel(Model):\n            pass\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.autodetector.changes(None, None)\n\n    def test_manager_addition(self):\n        class TestModel(Model):\n            pass\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.autodetector.changes(None, None)\n\n    def test_manager_deletion(self):\n        class TestModel(Model):\n            pass\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.autodetector.changes(None, None)\n\n\n\n"], "sample_89": ["\nimport pytest\nfrom _pytest import nodes\n\nclass TestNode:\n    def test_splitnode(self):\n        assert nodes._splitnode(\"testing/code\") == (\"testing\", \"code\")\n        assert nodes._splitnode(\"testing/code/test_excinfo.py\") == (\n            \"testing\",\n            \"code\",\n            \"test_excinfo.py\",\n        )\n        assert nodes._splitnode(\"testing/code/test_excinfo.py::TestFormattedExcinfo\") == (\n            \"testing\",\n            \"code\",\n            \"test_excinfo.py\",\n            \"TestFormattedExcinfo\",\n        )\n        assert nodes._splitnode(\"\") == ()\n\n    def test_ischildnode(self):\n        assert nodes.ischildnode(\"foo/bar::Baz\", \"foo/bar\")\n        assert nodes.ischildnode(\"foo/bar::Baz\", \"foo\")\n        assert not nodes.ischildnode(\"foo/bar::Baz\", \"foo/blorp\")\n\n    def test_Node_from_parent(self):\n        parent = nodes.Node(\"parent\", nodeid=\"parent\")\n        child = nodes.Node.from_parent(parent, name=\"child\")\n        assert child.name == \"child\"\n        assert child.parent is parent\n        assert child.nodeid == \"parent::child\"\n\n    def test_Node_repr(self):\n        node = nodes.Node(\"test_node\")\n        assert repr(node) == \"<Node test_node>\"\n\n    def test_Node_warn(self):\n        node = nodes.Node(\"test_node\")\n        with pytest.warns(Warning):\n            node.warn(Warning(\"test warning\"))\n\n    def test_Node_add_marker(self):\n        node = nodes.Node(\"test_node\")\n        node.add_marker(\"pytest.mark.parametrize\")\n        assert node.get_closest_marker(\"parametrize\") is not None\n\n    def test_Node_iter_markers(self):\n        node = nodes.Node(\"test_node\")\n        node.add_marker(\"pytest.mark.parametrize\")\n        for marker in node.iter_markers(\"parametrize\"):\n            assert marker.name == \"parametrize\"\n\n    def test_Node_listextrakeywords(self):\n        node = nodes.Node(\"test_node\")\n        node.extra_keyword_matches.add(\"extra_keyword\")\n        assert node.listextrakeywords() == {\"extra_keyword\"}\n\n    def test_Node_listnames(self):\n        node = nodes.Node(\"test_node\")\n        assert node.listnames() == [\"test_node\"]\n\n    def test_Node_addfinalizer(self):\n        node = nodes.Node(\"test_node\")\n        def fin():\n            pass\n        node.addfinalizer(fin)\n\n    def test_Node_getparent(self):\n        parent = nodes.Node(\"parent\")\n        child = nodes.Node(\"child\", parent=parent)\n        assert child.getparent(nodes.Node) is parent\n\n    def test_Node_prunetraceback(self):\n        node = nodes.Node(\"test_node\")\n        node._prunetraceback(None)  # No traceback to prune\n\n    def test_Node_repr_failure(self):\n        node = nodes.Node(\"test_node\")\n        assert node._repr_failure_py(None) is not None\n\n\n\n"], "sample_157": ["\nfrom sympy.physics.quantum.tensorproduct import TensorProduct\nfrom sympy.physics.quantum.tensorproduct import tensor_product_simp\nfrom sympy import Matrix, Symbol, Add, Mul, Pow\nfrom sympy.testing.pytest import raises\n\ndef test_tensor_product_matrix():\n    m1 = Matrix([[1,2],[3,4]])\n    m2 = Matrix([[1,0],[0,1]])\n    tp = TensorProduct(m1, m2)\n    assert isinstance(tp, TensorProduct)\n    assert tp.args == (m1, m2)\n\ndef test_tensor_product_symbols():\n    A = Symbol('A',commutative=False)\n    B = Symbol('B',commutative=False)\n    tp = TensorProduct(A, B)\n    assert isinstance(tp, TensorProduct)\n    assert tp.args == (A, B)\n    assert str(tp) == 'AxB'\n\ndef test_tensor_product_commutative_symbols():\n    A = Symbol('A')\n    B = Symbol('B')\n    tp = TensorProduct(A, B)\n    assert isinstance(tp, TensorProduct)\n    assert tp.args == (A, B)\n    assert str(tp) == 'AB'\n\ndef test_tensor_product_dagger():\n    A = Symbol('A',commutative=False)\n    B = Symbol('B',commutative=False)\n    tp = TensorProduct(A, B)\n    tp_dagger = Dagger(tp)\n    assert isinstance(tp_dagger, TensorProduct)\n    assert tp_dagger.args == (Dagger(A), Dagger(B))\n\ndef test_tensor_product_expand():\n    A = Symbol('A',commutative=False)\n    B = Symbol('B',commutative=False)\n    C = Symbol('C',commutative=False)\n    tp = TensorProduct(A + B, C)\n    assert isinstance(tp, TensorProduct)\n    assert tp.args == ((A + B), C)\n    expanded_tp = tp.expand(tensorproduct=True)\n    assert isinstance(expanded_tp, Add)\n    assert expanded_tp.args == (TensorProduct(A, C), TensorProduct(B, C))\n\ndef test_tensor_product_simplification():\n    A = Symbol('A',commutative=False)\n    B = Symbol('B',commutative=False)\n    C = Symbol('C',commutative=False)\n    D = Symbol('D',commutative=False)\n    tp1 = TensorProduct(A, B) * TensorProduct(C, D)\n    simplified_tp = tensor_product_simp(tp1)\n    assert isinstance(simplified_tp, TensorProduct)\n    assert simplified_tp.args == (A*C, B*D)\n\ndef test_tensor_product_simplification_with_powers():\n    A = Symbol('A',commutative=False)\n    B = Symbol('B',commutative=False)\n    C = Symbol('C',commutative=False)\n    D = Symbol('D',commutative=False)\n    tp1 = TensorProduct(A, B) * TensorProduct(C**2, D)\n    simplified_tp = tensor_product_simp(tp1)\n    assert isinstance(simplified_tp, TensorProduct)\n    assert simplified_tp.args == (A*C**2, B*D)\n\ndef test_tensor_product_simplification_with_add():\n    A = Symbol('A',commutative=False)\n    B = Symbol('B',commutative=False)\n    C = Symbol('C',commutative=False)\n    D = Symbol('D',commutative=False)\n    tp1 = TensorProduct(A + B, C) * TensorProduct(D, A + B)\n    simplified_tp = tensor_product_simp(tp1)\n    assert isinstance(simplified_tp, TensorProduct)\n    assert simplified_tp.args == ((A + B)*D, (A + B)*C)\n\ndef test_tensor_product_combined_printing():\n    from sympy.physics.quantum import Ket, Bra\n    A = Ket('A')\n    B = Ket('B')\n    C = Ket('C')\n    combined_tp = TensorProduct(A, B) * TensorProduct(C, A)\n    combined_tp_str = str(combined_tp)\n    assert combined_tp_str == 'A|B>xC|A>'\n\ndef test_tensor_product_combined_printing_off():\n    combined_tensor_printing(False)\n    from sympy.physics.quantum import Ket, Bra\n    A = Ket('A')\n    B = Ket('B')\n    C = Ket('C')\n    tp = TensorProduct(A, B) * TensorProduct(C, A)\n    tp_str = str(tp)\n    assert tp_str == 'A x B x C x A'\n\ndef test_tensor_product_trace():\n    A = Symbol('A',commutative=False)\n    B = Symbol('B',commutative=False)\n    C = Symbol('C',commutative=False)\n    D = Symbol('D',commutative=False)\n    tp = TensorProduct(A, B) * TensorProduct(C, D)\n    trace_tp = tp.doit()._eval_trace()\n    assert trace_tp == Tr(A)*Tr(B)*Tr(C)*Tr(D)\n\ndef test_tensor_product_trace_with_indices():\n    A = Symbol('A',commutative=False)\n    B = Symbol('B',commutative=False)\n    C = Symbol('C',commutative=False)\n    D = Symbol('D',commutative=False)\n    tp = TensorProduct(A, B) * TensorProduct(C, D)\n    trace_tp = tp.doit()._eval_trace(indices=[0, 1])\n    assert trace_tp == Tr(A)*Tr(D)\n\n\n\n"], "sample_159": ["\nfrom sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo,  kibi\nfrom sympy.physics.units import m, s, kg\nfrom sympy.core.sympify import sympify\nfrom sympy import S, symbols\n\ndef test_prefix_creation():\n    assert Prefix('kilo', 'k', 3).name == 'kilo'\n    assert Prefix('kilo', 'k', 3).abbrev == 'k'\n    assert Prefix('kilo', 'k', 3).scale_factor == 1000\n    assert Prefix('kilo', 'k', 3).base == 10\n    assert str(Prefix('kilo', 'k', 3)) == 'k'\n    assert repr(Prefix('kilo', 'k', 3)) == \"Prefix('kilo', 'k', 3)\"\n    assert repr(Prefix('kibi', 'Y', 10, 2)) == \"Prefix('kibi', 'Y', 10, 2)\"\n\ndef test_prefix_multiplication():\n    assert kilo * m == Prefix('kilo', 'k', 3) * m\n    assert kilo * kg == Prefix('kilo', 'k', 3) * kg\n    assert Prefix('kilo', 'k', 3) * Prefix('milli', 'm', -3) == S.One\n    assert Prefix('kilo', 'k', 3) * Prefix('centi', 'c', -2) == Prefix('kilo', 'k', 1)\n\ndef test_prefix_division():\n    assert m / Prefix('milli', 'm', -3) == Prefix('kilo', 'k', 3) * m\n    assert kg / Prefix('milli', 'm', -3) == Prefix('kilo', 'k', 3) * kg\n    assert Prefix('kilo', 'k', 3) / Prefix('kilo', 'k', 3) == S.One\n    assert Prefix('kilo', 'k', 3) / Prefix('centi', 'c', -2) == Prefix('kilo', 'k', 5)\n\ndef test_prefix_unit():\n    prefixed_units = prefix_unit(m, PREFIXES)\n    assert len(prefixed_units) == 19\n    assert prefixed_units[0].name == 'millimeter'\n    assert prefixed_units[1].name == 'centimeter'\n    assert prefixed_units[2].name == 'decimeter'\n    assert prefixed_units[18].name == 'yottameter'\n\ndef test_binary_prefixes():\n    assert kibi.scale_factor == 1024\n    assert mebi.scale_factor == 1024**2\n    assert gibi.scale_factor == 1024**3\n    assert tebi.scale_factor == 1024**4\n    assert pebi.scale_factor == 1024**5\n    assert exbi.scale_factor == 1024**6\n\n\n\n"], "sample_104": ["\nimport unittest\nfrom sklearn.utils._pprint import _EstimatorPrettyPrinter, _safe_repr, KeyValTupleParam, _changed_params\nfrom sklearn.base import BaseEstimator\nfrom collections import OrderedDict\nimport pprint\n\nclass Test_EstimatorPrettyPrinter(unittest.TestCase):\n\n    def test_changed_params(self):\n        class MyEstimator(BaseEstimator):\n            def __init__(self, param1=1, param2=\"hello\", param3=True):\n                self.param1 = param1\n                self.param2 = param2\n                self.param3 = param3\n\n        estimator = MyEstimator(param1=2, param2=\"world\", param3=False)\n        expected_changed_params = {'param1': 2, 'param2': 'world', 'param3': False}\n        self.assertEqual(_changed_params(estimator), expected_changed_params)\n\n    def test_safe_repr_estimator(self):\n        class MyEstimator(BaseEstimator):\n            def __init__(self, param1=1, param2=\"hello\", param3=True):\n                self.param1 = param1\n                self.param2 = param2\n                self.param3 = param3\n\n        estimator = MyEstimator(param1=2, param2=\"world\", param3=False)\n        expected_repr = \"MyEstimator(param1=2, param2='world', param3=False)\"\n        self.assertEqual(_safe_repr(estimator, {}, 0, 0), (expected_repr, True, False))\n\n    def test_safe_repr_estimator_changed_only(self):\n        class MyEstimator(BaseEstimator):\n            def __init__(self, param1=1, param2=\"hello\", param3=True):\n                self.param1 = param1\n                self.param2 = param2\n                self.param3 = param3\n\n        estimator = MyEstimator(param1=2, param2=\"world\", param3=False)\n        estimator2 = MyEstimator(param1=1, param2=\"hello\", param3=True)\n        expected_repr = \"MyEstimator(param1=2, param2='world', param3=False)\"\n        self.assertEqual(_safe_repr(estimator, {}, 0, 0, changed_only=True),\n                         (expected_repr, True, False))\n        self.assertEqual(_safe_repr(estimator2, {}, 0, 0, changed_only=True),\n                         (\"MyEstimator()\", True, False))\n\n    def test_safe_repr_dict(self):\n        d = {'a': 1, 'b': 2, 'c': 3}\n        expected_repr = \"{ 'a': 1, 'b': 2, 'c': 3 }\"\n        self.assertEqual(_safe_repr(d, {}, 0, 0), (expected_repr, True, False))\n\n    def test_safe_repr_list(self):\n        l = [1, 2, 3]\n        expected_repr = \"[1, 2, 3]\"\n        self.assertEqual(_safe_repr(l, {}, 0, 0), (expected_repr, True, False))\n\n    def test_safe_repr_tuple(self):\n        t = (1, 2, 3)\n        expected_repr = \"(1, 2, 3)\"\n        self.assertEqual(_safe_repr(t, {}, 0, 0), (expected_repr, True, False))\n\n    def test_safe_repr_custom_class(self):\n        class MyCustomClass:\n            def __init__(self, value):\n                self.value = value\n\n            def __repr__(self):\n                return f\"MyCustomClass({self.value})\"\n\n        obj = MyCustomClass(123)\n        expected_repr = \"MyCustomClass(123)\"\n        self.assertEqual(_safe_repr(obj, {}, 0, 0), (expected_repr, True, False))\n\n    def test_format_params(self):\n        params = OrderedDict([('param1', 1), ('param2', 'hello'), ('param3', True)])\n        pp = _EstimatorPrettyPrinter(compact=True)\n        expected_output = \"param1=1, param2='hello', param3=True\"\n        self.assertEqual(pp._format_params(params.items(), None, 0, 0, {}, 0),\n                         expected_output)\n\n    def test_format_dict_items(self):\n        items = OrderedDict([('a', 1), ('b', 2), ('c', 3)])\n        pp = _EstimatorPrettyPrinter(compact=True)\n        expected_output = \"a: 1, b: 2, c: 3\"\n        self.assertEqual(pp._format_dict_items(items, None, 0, 0, {}, 0),\n                         expected_output)\n\n    def test_format_items(self):\n        items = [1, 2, 3]\n        pp = _EstimatorPrettyPrinter(compact=True)\n        expected_output = \"1, 2, 3\"\n        self.assertEqual(pp._format_items(items, None, 0, 0, {}, 0),\n                         expected_output)\n\n    def test_pprint_key_val_tuple(self):\n        pp = _EstimatorPrettyPrinter(compact=True)\n        key_val_tuple = KeyValTupleParam(('key', 1))\n        expected_output = \"key=1\"\n        self.assertEqual(pp._pprint_key_val_tuple(key_val_tuple, None, 0, 0, {}, 0),\n                         expected_output)\n\n\n\n"], "sample_150": ["\nfrom sympy.solvers.polysys import (solve_poly_system, solve_triangulated, solve_biquadratic, SolveFailed)\nfrom sympy import symbols, Poly, roots, S, simplify\nfrom sympy.abc import x, y, z\nimport unittest\n\n\nclass TestPolysys(unittest.TestCase):\n\n    def test_solve_poly_system_biquadratic(self):\n        self.assertEqual(solve_biquadratic(Poly(y**2 - 4 + x, y, x), Poly(y*2 + 3*x - 7, y, x)), [(1/3, 3), (41/27, 11/9)])\n        self.assertEqual(solve_biquadratic(Poly(y + x**2 - 3, y, x), Poly(-y + x - 4, y, x)), [(7/2 - sqrt(29)/2, -sqrt(29)/2 - 1/2), (sqrt(29)/2 + 7/2, -1/2 + sqrt(29)/2)])\n\n    def test_solve_poly_system_generic(self):\n        self.assertEqual(solve_poly_system([Poly(x - y + 5, x, y), Poly(x + y - 3, x, y)]), [(-1, 4)])\n        self.assertEqual(solve_poly_system([Poly(x - 2*y + 5, x, y), Poly(2*x - y - 3, x, y)]), [(11/3, 13/3)])\n        self.assertEqual(solve_poly_system([Poly(x**2 + y, x, y), Poly(x + y*4, x, y)]), [(0, 0), (1/4, -1/16)])\n\n    def test_solve_triangulated(self):\n        self.assertEqual(solve_triangulated([x**2 + y + z - 1, x + y**2 + z - 1, x + y + z**2 - 1], x, y, z), [(0, 0, 1), (0, 1, 0), (1, 0, 0)])\n\n    def test_solve_poly_system_exceptions(self):\n        with self.assertRaises(SolveFailed):\n            solve_biquadratic(Poly(y**2 - 4 + x, y, x), Poly(y*2 + 3*x - 7, y, x, domain='ZZ'))\n\n        with self.assertRaises(SolveFailed):\n            solve_poly_system([Poly(x - y + 5, x, y), Poly(x + y - 3, x, y)], x, y, domain='ZZ')\n\n        with self.assertRaises(ComputationFailed):\n            solve_poly_system([x, y], x, y, domain='ZZ')\n\n"], "sample_21": ["\nfrom django.db import models\nfrom django.db.models import ProtectedError, RestrictedError\nfrom django.db.models.deletion import Collector\nfrom django.test import TestCase, override_settings\nfrom django.utils import timezone\n\nclass TestDeletion(TestCase):\n\n    def setUp(self):\n        self.collector = Collector(using='default')\n\n    def test_collect_no_cascade(self):\n        objs = [A(name='a'), A(name='b')]\n        self.collector.collect(objs)\n        self.assertEqual(len(self.collector.data), 1)\n        self.assertEqual(len(self.collector.data[A]), 2)\n\n    def test_collect_cascade(self):\n        objs = [B(name='a'), B(name='b')]\n        self.collector.collect(objs, source=A, nullable=False)\n        self.assertEqual(len(self.collector.data), 2)\n        self.assertEqual(len(self.collector.data[A]), 2)\n        self.assertEqual(len(self.collector.data[B]), 2)\n\n    def test_collect_cascade_with_parent_deletion(self):\n        a = A(name='a')\n        b = B(name='b', a=a)\n        objs = [b]\n        self.collector.collect(objs, source=A, nullable=False)\n        self.assertEqual(len(self.collector.data), 2)\n        self.assertEqual(len(self.collector.data[A]), 1)\n        self.assertEqual(len(self.collector.data[B]), 1)\n\n    def test_collect_cascade_with_parent_deletion_keep_parents(self):\n        a = A(name='a')\n        b = B(name='b', a=a)\n        objs = [b]\n        self.collector.collect(objs, source=A, nullable=False, keep_parents=True)\n        self.assertEqual(len(self.collector.data), 2)\n        self.assertEqual(len(self.collector.data[A]), 1)\n        self.assertEqual(len(self.collector.data[B]), 1)\n\n    def test_collect_cascade_with_parent_deletion_keep_parents_and_related_objects(self):\n        a = A(name='a')\n        b = B(name='b', a=a)\n        c = C(name='c', b=b)\n        objs = [c]\n        self.collector.collect(objs, source=A, nullable=False, keep_parents=True)\n        self.assertEqual(len(self.collector.data), 3)\n        self.assertEqual(len(self.collector.data[A]), 1)\n        self.assertEqual(len(self.collector.data[B]), 1)\n        self.assertEqual(len(self.collector.data[C]), 1)\n\n    def test_collect_cascade_with_parent_deletion_and_related_objects(self):\n        a = A(name='a')\n        b = B(name='b', a=a)\n        c = C(name='c', b=b)\n        objs = [c]\n        self.collector.collect(objs, source=A, nullable=False)\n        self.assertEqual(len(self.collector.data), 3)\n        self.assertEqual(len(self.collector.data[A]), 1)\n        self.assertEqual(len(self.collector.data[B]), 1)\n        self.assertEqual(len(self.collector.data[C]), 1)\n\n    def test_collect_cascade_with_protected_objects(self):\n        a = A(name='a')\n        b = B(name='b', a=a)\n        c = C(name='c', b=b)\n        objs = [c]\n        self.collector.collect(objs, source=A, nullable=False)\n        with self.assertRaises(ProtectedError):\n            self.collector.delete()\n\n    def test_collect_cascade_with_restricted_objects(self):\n        a = A(name='a')\n        b = B(name='b', a=a)\n        c = C(name='c', b=b)\n        objs = [c]\n        self.collector.collect(objs, source=A, nullable=False)\n        with self.assertRaises(RestrictedError):\n            self.collector.delete()\n\n    def test_collect_with_fast_delete(self):\n        objs = [A(name='a'), A(name='b')]\n        self.collector.collect(objs, source=A, nullable=False)\n        self.assertEqual(len(self.collector.fast_deletes), 1)\n\n    def test_collect_with_field_update(self):\n        objs = [A(name='a'), A(name='b')]\n        self.collector.collect(objs, source=A, nullable=False)\n        self.collector.add_field_update(A.name, 'new_name', objs)\n        self.assertEqual(len(self.collector.field_updates), 1)\n        self.assertEqual(len(self.collector.field_updates[A]), 1)\n\n    def test_collect_with_restricted_objects(self):\n        a = A(name='a')\n        b = B(name='b', a=a)\n        c = C(name='c', b=b)\n        objs = [c]\n        self.collector.collect(objs, source=A, nullable=False)\n        self.collector.add_restricted_objects(A.name, objs)\n        self.assertEqual(len(self.collector.restricted_objects), 1)\n        self.assertEqual(len(self.collector.restricted_objects[A]), 1)\n\n    def test_collect_with_clear_restricted_objects_from_set(self):\n        a = A(name='a')\n        b = B(name='b', a=a)\n        c = C(name='c', b=b)\n        objs = [c]\n        self.collector.collect(objs, source=A, nullable=False)\n        self.collector.add_restricted_objects(A.name, objs)\n        self.collector.clear_restricted_objects_from_set(A, objs)\n        self.assertEqual(len(self.collector.restricted_objects), 0)\n\n    def test_collect_with_clear_restricted_objects_from_queryset(self):\n        a = A(name='a')\n        b = B(name='b', a=a)\n        c = C(name='c', b=b)\n        objs = [c]\n        self.collector.collect(objs, source=A, nullable=False)\n        self.collector.add_restricted_objects(A.name, objs)\n        self.collector.clear_restricted_objects_from_queryset(A, objs)\n        self.assertEqual(len(self.collector.restricted_objects), 0)\n\n    def test_collect_with_delete(self):\n        objs = [A(name='a'), A(name='b')]\n        self.collector.collect(objs)\n        deleted_count, deleted_models = self.collector.delete()\n        self.assertEqual(deleted_count, 2)\n        self.assertEqual(deleted_models, {'A': 2})\n\n\n\n"], "sample_144": ["\nfrom sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt, atan, atan2, nan, Symbol, re, im, sign, arg)\nfrom sympy.matrices.expressions.matexpr import MatrixSymbol\nfrom sympy.assumptions.refine import refine_abs, refine_Pow, refine_atan2, refine_re, refine_im, refine_arg, refine_sign, refine_matrixelement\nfrom sympy.assumptions.refine import handlers_dict\nimport unittest\n\nclass TestRefine(unittest.TestCase):\n\n    def test_refine_abs(self):\n        self.assertEqual(refine_abs(Abs(Symbol('x')), Q.real(Symbol('x'))), Symbol('x'))\n        self.assertEqual(refine_abs(Abs(Symbol('x')), Q.positive(Symbol('x'))), Symbol('x'))\n        self.assertEqual(refine_abs(Abs(-Symbol('x')), Q.negative(Symbol('x'))), -Symbol('x'))\n        self.assertEqual(refine_abs(Abs(Symbol('x')*Symbol('y')), Q.real(Symbol('x')) & Q.real(Symbol('y'))), Abs(Symbol('x')*Symbol('y')))\n        self.assertEqual(refine_abs(Abs(Symbol('x')*Symbol('y')), Q.positive(Symbol('x')) & Q.positive(Symbol('y'))), Symbol('x')*Symbol('y'))\n        self.assertEqual(refine_abs(Abs(Symbol('x')*Symbol('y')), Q.positive(Symbol('x')) & Q.negative(Symbol('y'))), -Symbol('x')*Symbol('y'))\n\n    def test_refine_Pow(self):\n        self.assertEqual(refine_Pow(Pow(S.NegativeOne, Symbol('x')), Q.real(Symbol('x'))),  Pow(S.NegativeOne, Symbol('x')))\n        self.assertEqual(refine_Pow(Pow(S.NegativeOne, 2), Q.even(Symbol('x'))), 1)\n        self.assertEqual(refine_Pow(Pow(S.NegativeOne, 3), Q.odd(Symbol('x'))), -1)\n        self.assertEqual(refine_Pow(Pow((-1)**(Symbol('x') + Symbol('y')), Q.even(Symbol('x'))), (-1)**Symbol('y'))\n        self.assertEqual(refine_Pow(Pow((-1)**(Symbol('x') + Symbol('y') + Symbol('z')), Q.odd(Symbol('x')) & Q.odd(Symbol('z'))), (-1)**Symbol('y'))\n        self.assertEqual(refine_Pow(Pow((-1)**(Symbol('x') + Symbol('y') + 2), Q.odd(Symbol('x'))), (-1)**(Symbol('y') + 1))\n        self.assertEqual(refine_Pow(Pow((-1)**(Symbol('x') + 3), True), (-1)**(Symbol('x') + 1))\n\n    def test_refine_atan2(self):\n        self.assertEqual(refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.real(Symbol('y')) & Q.positive(Symbol('x'))), atan(Symbol('y')/Symbol('x')))\n        self.assertEqual(refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.negative(Symbol('y')) & Q.negative(Symbol('x'))), atan(Symbol('y')/Symbol('x')))\n        self.assertEqual(refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.positive(Symbol('y')) & Q.negative(Symbol('x'))), atan(Symbol('y')/Symbol('x')) + pi)\n        self.assertEqual(refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.zero(Symbol('y')) & Q.negative(Symbol('x'))), pi)\n        self.assertEqual(refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.positive(Symbol('y')) & Q.zero(Symbol('x'))), pi/2)\n        self.assertEqual(refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.negative(Symbol('y')) & Q.zero(Symbol('x'))), -pi/2)\n        self.assertEqual(refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.zero(Symbol('y')) & Q.zero(Symbol('x'))), nan)\n\n    def test_refine_re(self):\n        self.assertEqual(refine_re(re(Symbol('x')), Q.real(Symbol('x'))), Symbol('x'))\n        self.assertEqual(refine_re(re(Symbol('x')), Q.imaginary(Symbol('x'))), 0)\n\n    def test_refine_im(self):\n        self.assertEqual(refine_im(im(Symbol('x')), Q.real(Symbol('x'))), 0)\n        self.assertEqual(refine_im(im(Symbol('x')), Q.imaginary(Symbol('x'))), -I*Symbol('x'))\n\n    def test_refine_arg(self):\n        self.assertEqual(refine_arg(arg(Symbol('x')), Q.positive(Symbol('x'))), 0)\n        self.assertEqual(refine_arg(arg(Symbol('x')), Q.negative(Symbol('x'))), pi)\n\n    def test_refine_sign(self):\n        self.assertEqual(refine_sign(sign(Symbol('x')), Q.positive(Symbol('x')) & Q.nonzero(Symbol('x'))), 1)\n        self.assertEqual(refine_sign(sign(Symbol('x')), Q.negative(Symbol('x')) & Q.nonzero(Symbol('x'))), -1)\n        self.assertEqual(refine_sign(sign(Symbol('x')), Q.zero(Symbol('x'))), 0)\n        self.assertEqual(refine_sign(sign(I*Symbol('y')), Q.positive(im(Symbol('y')))), I)\n        self.assertEqual(refine_sign(sign(I*Symbol('y')), Q.negative(im(Symbol('y')))), -I)\n\n    def test_refine_matrixelement(self):\n        X = MatrixSymbol('X', 3, 3)\n        self.assertEqual(refine_matrixelement(X[0, 1], Q.symmetric(X)), X[0, 1])\n        self.assertEqual(refine_matrixelement(X[1, 0], Q.symmetric(X)), X[0, 1])\n\n\n\n"], "sample_73": ["\nimport unittest\nfrom matplotlib.offsetbox import (AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, HPacker, OffsetBox, OffsetImage, PaddedBox, TextArea, VPacker, _get_packed_offsets)\nfrom matplotlib.testing.decorators import image_comparison\nfrom matplotlib.figure import Figure\nfrom matplotlib.transforms import Bbox, Transform\nfrom matplotlib.patches import FancyBboxPatch\nfrom matplotlib import rcParams\nimport numpy as np\n\nclass TestOffsetBox(unittest.TestCase):\n\n    def test_offsetbox_basic(self):\n        fig, ax = Figure().add_subplot(111)\n        bbox = OffsetBox(\n            self.create_text_area(\"Test\"),\n            loc='center',\n            pad=0.5,\n            borderpad=0.5,\n        )\n        bbox.draw(ax.figure.canvas)\n        self.assertEqual(bbox.get_offset(), (0, 0))\n\n    def test_offsetbox_offset(self):\n        fig, ax = Figure().add_subplot(111)\n        bbox = OffsetBox(\n            self.create_text_area(\"Test\"),\n            loc='center',\n            pad=0.5,\n            borderpad=0.5,\n        )\n        bbox.set_offset((1, 1))\n        bbox.draw(ax.figure.canvas)\n        self.assertEqual(bbox.get_offset(), (1, 1))\n\n    def test_offsetbox_child(self):\n        fig, ax = Figure().add_subplot(111)\n        bbox = OffsetBox(\n            self.create_text_area(\"Test\"),\n            loc='center',\n            pad=0.5,\n            borderpad=0.5,\n        )\n        child = self.create_text_area(\"Child\")\n        bbox.add_artist(child)\n        bbox.draw(ax.figure.canvas)\n        self.assertEqual(len(bbox.get_children()), 1)\n\n    def test_anchoredoffsetbox_basic(self):\n        fig, ax = Figure().add_subplot(111)\n        bbox = AnchoredOffsetbox(\n            loc='upper right',\n            pad=0.5,\n            borderpad=0.5,\n            child=self.create_text_area(\"Test\"),\n        )\n        bbox.draw(ax.figure.canvas)\n        self.assertEqual(bbox.get_offset(), (0, 0))\n\n    def test_anchoredoffsetbox_offset(self):\n        fig, ax = Figure().add_subplot(111)\n        bbox = AnchoredOffsetbox(\n            loc='upper right',\n            pad=0.5,\n            borderpad=0.5,\n            child=self.create_text_area(\"Test\"),\n        )\n        bbox.set_offset((1, 1))\n        bbox.draw(ax.figure.canvas)\n        self.assertEqual(bbox.get_offset(), (1, 1))\n\n    def test_anchoredoffsetbox_child(self):\n        fig, ax = Figure().add_subplot(111)\n        bbox = AnchoredOffsetbox(\n            loc='upper right',\n            pad=0.5,\n            borderpad=0.5,\n            child=self.create_text_area(\"Test\"),\n        )\n        child = self.create_text_area(\"Child\")\n        bbox.add_artist(child)\n        bbox.draw(ax.figure.canvas)\n        self.assertEqual(len(bbox.get_children()), 1)\n\n    def test_annotationbbox_basic(self):\n        fig, ax = Figure().add_subplot(111)\n        bbox = AnnotationBbox(\n            self.create_text_area(\"Test\"),\n            (1, 1),\n            xycoords='data',\n            boxcoords='data',\n        )\n        bbox.draw(ax.figure.canvas)\n        self.assertEqual(bbox.get_offset(), (0, 0))\n\n    def test_annotationbbox_offset(self):\n        fig, ax = Figure().add_subplot(111)\n        bbox = AnnotationBbox(\n            self.create_text_area(\"Test\"),\n            (1, 1),\n            xycoords='data',\n            boxcoords='data',\n        )\n        bbox.set_offset((1, 1))\n        bbox.draw(ax.figure.canvas)\n        self.assertEqual(bbox.get_offset(), (1, 1))\n\n    def test_annotationbbox_child(self):\n        fig, ax = Figure().add_subplot(111)\n        bbox = AnnotationBbox(\n            self.create_text_area(\"Test\"),\n            (1, 1),\n            xycoords='data',\n            boxcoords='data',\n        )\n        child = self.create_text_area(\"Child\")\n        bbox.add_artist(child)\n        bbox.draw(ax.figure.canvas)\n        self.assertEqual(len(bbox.get_children()), 1)\n\n    def create_text_area(self, text):\n        return TextArea(text)\n\n    @image_comparison(baseline_images=['offsetbox_test.png'], remove_text=True)\n    def test_offsetbox_image(self):\n        fig, ax = Figure().add_subplot(111)\n        img = np.random.rand(10, 10)\n        image = OffsetImage(img, zoom=2)\n        bbox = OffsetBox(\n            image,\n            loc='center',\n            pad=0.5,\n            borderpad=0.5,\n        )\n        bbox.draw(ax.figure.canvas)\n\n    @image_comparison(baseline_images=['annotationbbox_test.png'], remove_text=True)\n    def test_annotationbbox_image(self):\n        fig, ax = Figure().add_subplot(111)\n        img = np.random.rand(10, 10)\n        image = OffsetImage(img, zoom=2)\n        bbox = AnnotationBbox(\n            image,\n            (1, 1),\n            xycoords='data',\n            boxcoords='data',\n        )\n        bbox.draw(ax.figure.canvas)\n\n\n\n"], "sample_121": ["\nfrom itertools import permutations\nfrom sympy.combinatorics.permutations import (Permutation, _af_parity, _af_rmul, _af_rmuln, Cycle)\nimport random\nimport unittest\n\nclass TestPermutation(unittest.TestCase):\n\n    def test_permutation_from_array(self):\n        self.assertEqual(Permutation([0, 1, 2, 3]).array_form, [0, 1, 2, 3])\n        self.assertEqual(Permutation([3, 1, 2, 0]).array_form, [3, 1, 2, 0])\n        self.assertEqual(Permutation([0, 2, 1, 3]).array_form, [0, 2, 1, 3])\n\n    def test_permutation_from_cycles(self):\n        self.assertEqual(Permutation([0, 2, 1, 3]).full_cyclic_form, [[0, 2, 1, 3]])\n        self.assertEqual(Permutation([3, 1, 2, 0]).full_cyclic_form, [[3, 1, 2, 0]])\n        self.assertEqual(Permutation([0, 2, 1, 3]).full_cyclic_form, [[0, 2, 1, 3]])\n\n    def test_permutation_identity(self):\n        self.assertEqual(Permutation.identity(4).array_form, [0, 1, 2, 3])\n        self.assertEqual(Permutation.identity(5).array_form, [0, 1, 2, 3, 4])\n\n    def test_permutation_inverse(self):\n        p = Permutation([0, 2, 1, 3])\n        self.assertEqual(p.inverse().array_form, [0, 3, 1, 2])\n\n    def test_permutation_composition(self):\n        p = Permutation([0, 2, 1, 3])\n        q = Permutation([1, 3, 0, 2])\n        self.assertEqual(p * q, Permutation([2, 0, 3, 1]))\n\n    def test_permutation_length(self):\n        self.assertEqual(Permutation([0, 1, 2, 3]).length(), 4)\n        self.assertEqual(Permutation([0, 2, 1, 3]).length(), 4)\n\n    def test_permutation_min(self):\n        self.assertEqual(Permutation([3, 1, 2, 0]).min(), 0)\n        self.assertEqual(Permutation([0, 2, 1, 3]).min(), 0)\n\n    def test_permutation_max(self):\n        self.assertEqual(Permutation([3, 1, 2, 0]).max(), 3)\n        self.assertEqual(Permutation([0, 2, 1, 3]).max(), 3)\n\n    def test_permutation_inversions(self):\n        self.assertEqual(Permutation([0, 2, 1, 3]).inversions(), 3)\n        self.assertEqual(Permutation([3, 1, 2, 0]).inversions(), 6)\n\n    def test_permutation_signature(self):\n        self.assertEqual(Permutation([0, 1, 2]).signature(), 1)\n        self.assertEqual(Permutation([0, 2, 1]).signature(), -1)\n\n    def test_permutation_order(self):\n        self.assertEqual(Permutation([0, 1, 2]).order(), 6)\n        self.assertEqual(Permutation([1, 2, 0]).order(), 3)\n\n    def test_permutation_cycle_structure(self):\n        self.assertEqual(Permutation([0, 2, 1, 3]).cycle_structure, {1: 4})\n        self.assertEqual(Permutation([1, 2, 0]).cycle_structure, {1: 3})\n\n    def test_permutation_cycles(self):\n        self.assertEqual(Permutation([0, 2, 1, 3]).cycles, [ [0, 2, 1, 3] ])\n        self.assertEqual(Permutation([1, 2, 0]).cycles, [ [1, 2, 0] ])\n\n    def test_permutation_runs(self):\n        self.assertEqual(Permutation([2, 5, 7, 3, 6, 0, 1, 4, 8]).runs(), [[2, 5, 7], [3, 6], [0, 1, 4, 8]])\n\n    def test_permutation_rank_trotterjohnson(self):\n        self.assertEqual(Permutation([0, 1, 2, 3]).rank_trotterjohnson(), 0)\n        self.assertEqual(Permutation([3, 1, 2, 0]).rank_trotterjohnson(), 4)\n\n    def test_permutation_unrank_trotterjohnson(self):\n        self.assertEqual(Permutation.unrank_trotterjohnson(5, 10), Permutation([2, 5, 3, 1, 4]))\n\n    def test_permutation_next_trotterjohnson(self):\n        p = Permutation([3, 0, 2, 1])\n        self.assertEqual(p.next_trotterjohnson().array_form, [0, 3, 2, 1])\n\n    def test_permutation_get_precedence_matrix(self):\n        p = Permutation([2, 0, 4, 3, 1])\n        self.assertEqual(p.get_precedence_matrix(),\n                         Matrix([\n                             [0, 0, 0, 0, 0, 0],\n                             [1, 0, 0, 0, 1, 0],\n                             [1, 1, 0, 1, 1, 1],\n                             [1, 1, 0, 0, 1, 0],\n                             [1, 0, 0, 0, 0, 0],\n                             [1, 1, 0, 1, 1, 0]\n                         ]))\n\n    def test_permutation_get_precedence_distance(self):\n        p = Permutation([2, 0, 4, 3, 1])\n        q = Permutation([3, 1, 2, 4, 0])\n        self.assertEqual(p.get_precedence_distance(q), 7)\n\n    def test_permutation_get_adjacency_matrix(self):\n        p = Permutation([2, 0, 4, 3, 1])\n        self.assertEqual(p.get_adjacency_matrix(),\n                         Matrix([\n                             [0, 0, 0, 0, 0, 0],\n                             [0, 0, 0, 0, 1, 0],\n                             [0, 0, 0, 0, 0, 1],\n                             [0, 1, 0, 0, 0, 0],\n                             [1, 0, 0, 0, 0, 0],\n                             [0, 0, 1, 0, 0, 0]\n                         ]))\n\n    def test_permutation_get_adjacency_distance(self):\n        p = Permutation([2, 0, 4, 3, 1])\n        q = Permutation.josephus(4, 5, 2)\n        self.assertEqual(p.get_adjacency_distance(q), 3)\n\n    def test_permutation_get_positional_distance(self):\n        p = Permutation([0, 3, 1, 2, 4])\n        q = Permutation.josephus(4, 5, 2)\n        self.assertEqual(p.get_positional_distance(q), 12)\n\n    def test_permutation_from_inversion_vector(self):\n        self.assertEqual(Permutation.from_inversion_vector([3, 2, 1, 0, 0], 5), Permutation([3, 2, 1, 0, 4, 5])\n\n    def test_permutation_random(self):\n        perm = Permutation.random(3)\n        self.assertEqual(len(perm), 3)\n        self.assertEqual(len(perm.array_form), 3)\n\n    def test_permutation_unrank_lex(self):\n        self.assertEqual(Permutation.unrank_lex(5, 10), Permutation([2, 5, 3, 1, 4])\n\n\n\n"], "sample_58": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.db.backends.postgresql.client import DatabaseClient\n\n\nclass TestDatabaseClient(unittest.TestCase):\n\n    @patch('subprocess.run')\n    def test_settings_to_cmd_args_env_with_all_settings(self, mock_subprocess_run):\n        settings_dict = {\n            \"HOST\": \"localhost\",\n            \"PORT\": 5432,\n            \"NAME\": \"mydatabase\",\n            \"USER\": \"myuser\",\n            \"PASSWORD\": \"mypassword\",\n            \"OPTIONS\": {\n                \"passfile\": \"/path/to/passfile\",\n                \"service\": \"my_service\",\n                \"sslmode\": \"require\",\n                \"sslrootcert\": \"/path/to/rootcert\",\n                \"sslcert\": \"/path/to/cert\",\n                \"sslkey\": \"/path/to/key\",\n            }\n        }\n        parameters = [\"-c\", \"SELECT 1\"]\n        args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n\n        expected_args = [\n            \"psql\",\n            \"-U\", \"myuser\",\n            \"-h\", \"localhost\",\n            \"-p\", \"5432\",\n            \"-c\", \"SELECT 1\",\n            \"mydatabase\"\n        ]\n        self.assertEqual(args, expected_args)\n\n        expected_env = {\n            \"PGPASSWORD\": \"mypassword\",\n            \"PGSERVICE\": \"my_service\",\n            \"PGSSLMODE\": \"require\",\n            \"PGSSLROOTCERT\": \"/path/to/rootcert\",\n            \"PGSSLCERT\": \"/path/to/cert\",\n            \"PGSSLKEY\": \"/path/to/key\",\n            \"PGPASSFILE\": \"/path/to/passfile\"\n        }\n        self.assertEqual(env, expected_env)\n\n    @patch('subprocess.run')\n    def test_settings_to_cmd_args_env_without_database_name(self, mock_subprocess_run):\n        settings_dict = {\n            \"HOST\": \"localhost\",\n            \"PORT\": 5432,\n            \"USER\": \"myuser\",\n            \"PASSWORD\": \"mypassword\",\n            \"OPTIONS\": {\n                \"passfile\": \"/path/to/passfile\",\n                \"service\": \"my_service\",\n                \"sslmode\": \"require\",\n                \"sslrootcert\": \"/path/to/rootcert\",\n                \"sslcert\": \"/path/to/cert\",\n                \"sslkey\": \"/path/to/key\",\n            }\n        }\n        parameters = [\"-c\", \"SELECT 1\"]\n        args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n\n        expected_args = [\n            \"psql\",\n            \"-U\", \"myuser\",\n            \"-h\", \"localhost\",\n            \"-c\", \"SELECT 1\",\n            \"postgres\"\n        ]\n        self.assertEqual(args, expected_args)\n\n        expected_env = {\n            \"PGPASSWORD\": \"mypassword\",\n            \"PGSERVICE\": \"my_service\",\n            \"PGSSLMODE\": \"require\",\n            \"PGSSLROOTCERT\": \"/path/to/rootcert\",\n            \"PGSSLCERT\": \"/path/to/cert\",\n            \"PGSSLKEY\": \"/path/to/key\",\n            \"PGPASSFILE\": \"/path/to/passfile\"\n        }\n        self.assertEqual(env, expected_env)\n\n    @patch('subprocess.run')\n    def test_runshell_with_SIGINT_handler(self, mock_subprocess_run):\n        client = DatabaseClient()\n        sigint_handler = signal.getsignal(signal.SIGINT)\n        with patch('signal.signal') as mock_signal:\n            client.runshell([\"-c\", \"SELECT 1\"])\n            mock_signal.assert_called_once_with(signal.SIGINT, signal.SIG_IGN)\n            mock_signal.reset_mock()\n            client.runshell([\"-c\", \"SELECT 1\"])\n            mock_signal.assert_called_once_with(signal.SIGINT, sigint_handler)\n\n\n\n"], "sample_106": ["\nimport unittest\nfrom sklearn.datasets import load_iris\nfrom sklearn.neighbors.nca import NeighborhoodComponentsAnalysis\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import pairwise_distances\nimport numpy as np\nfrom sklearn.base import clone\n\nclass TestNeighborhoodComponentsAnalysis(unittest.TestCase):\n\n    def setUp(self):\n        self.iris = load_iris()\n        self.X = self.iris.data\n        self.y = self.iris.target\n        self.n_samples, self.n_features = self.X.shape\n        self.n_classes = len(np.unique(self.y))\n        self.label_encoder = LabelEncoder()\n        self.y = self.label_encoder.fit_transform(self.y)\n\n    def test_nca_fit_transform(self):\n        nca = NeighborhoodComponentsAnalysis(n_components=2, random_state=42)\n        nca.fit(self.X, self.y)\n        X_embedded = nca.transform(self.X)\n        self.assertEqual(X_embedded.shape, (self.n_samples, 2))\n\n    def test_nca_fit_transform_warm_start(self):\n        nca1 = NeighborhoodComponentsAnalysis(n_components=2, random_state=42)\n        nca1.fit(self.X, self.y)\n        X_embedded1 = nca1.transform(self.X)\n\n        nca2 = clone(nca1)\n        nca2.warm_start = True\n        nca2.fit(self.X, self.y)\n        X_embedded2 = nca2.transform(self.X)\n\n        self.assertTrue(np.allclose(X_embedded1, X_embedded2))\n\n    def test_nca_fit_transform_auto_init(self):\n        nca = NeighborhoodComponentsAnalysis(n_components=2)\n        nca.fit(self.X, self.y)\n        X_embedded = nca.transform(self.X)\n        self.assertEqual(X_embedded.shape, (self.n_samples, 2))\n\n    def test_nca_fit_transform_pca_init(self):\n        nca = NeighborhoodComponentsAnalysis(n_components=2, init='pca')\n        nca.fit(self.X, self.y)\n        X_embedded = nca.transform(self.X)\n        self.assertEqual(X_embedded.shape, (self.n_samples, 2))\n\n    def test_nca_fit_transform_lda_init(self):\n        nca = NeighborhoodComponentsAnalysis(n_components=2, init='lda')\n        nca.fit(self.X, self.y)\n        X_embedded = nca.transform(self.X)\n        self.assertEqual(X_embedded.shape, (self.n_samples, 2))\n\n    def test_nca_fit_transform_identity_init(self):\n        nca = NeighborhoodComponentsAnalysis(n_components=2, init='identity')\n        nca.fit(self.X, self.y)\n        X_embedded = nca.transform(self.X)\n        self.assertEqual(X_embedded.shape, (self.n_samples, 2))\n\n    def test_nca_fit_transform_random_init(self):\n        nca = NeighborhoodComponentsAnalysis(n_components=2, init='random')\n        nca.fit(self.X, self.y)\n        X_embedded = nca.transform(self.X)\n        self.assertEqual(X_embedded.shape, (self.n_samples, 2))\n\n    def test_nca_fit_transform_custom_init(self):\n        init = np.random.rand(2, self.n_features)\n        nca = NeighborhoodComponentsAnalysis(n_components=2, init=init)\n        nca.fit(self.X, self.y)\n        X_embedded = nca.transform(self.X)\n        self.assertEqual(X_embedded.shape, (self.n_samples, 2))\n\n    def test_nca_loss_grad_lbfgs(self):\n        nca = NeighborhoodComponentsAnalysis(n_components=2, random_state=42)\n        X_embedded = nca.fit_transform(self.X, self.y)\n        loss, gradient = nca._loss_grad_lbfgs(\n            nca.components_.flatten(), self.X, np.ones((self.n_samples, self.n_samples))\n        )\n        self.assertTrue(np.isfinite(loss))\n        self.assertTrue(np.all(np.isfinite(gradient)))\n\n    def test_nca_validate_params(self):\n        nca = NeighborhoodComponentsAnalysis()\n        with self.assertRaises(ValueError):\n            nca._validate_params(self.X, self.y, n_components=self.n_features + 1)\n        with self.assertRaises(ValueError):\n            nca._validate_params(self.X, self.y, n_components='abc')\n        with self.assertRaises(ValueError):\n            nca._validate_params(self.X, self.y, init='invalid_init')\n        with self.assertRaises(ValueError):\n            nca._validate_params(self.X, self.y, init=np.random.rand(self.n_features, self.n_features + 1))\n        with self.assertRaises(ValueError):\n            nca._validate_params(self.X, self.y, warm_start=True, components_=np.random.rand(10, self.n_features))\n\n\n\n"], "sample_70": ["\nimport unittest\nfrom matplotlib.legend import Legend, _parse_legend_args, _get_legend_handles_labels, _get_legend_handles\nfrom matplotlib.patches import Rectangle\nfrom matplotlib.lines import Line2D\nfrom matplotlib.collections import PatchCollection\nfrom matplotlib.text import Text\nimport matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox, TransformedBbox\nfrom matplotlib.artist import Artist\nfrom matplotlib.axes import Axes\nfrom matplotlib.figure import Figure\nimport numpy as np\n\nclass TestLegend(unittest.TestCase):\n\n    def setUp(self):\n        self.fig = Figure()\n        self.ax = self.fig.add_subplot(111)\n\n    def test_legend_handles_labels(self):\n        line = Line2D([], [], color='red', label='Line')\n        patch = Rectangle([], [], color='blue', label='Patch')\n        collection = PatchCollection([], label='Collection')\n\n        handles, labels = _get_legend_handles_labels([self.ax], handlers=None)\n        self.assertEqual(len(handles), 0)\n        self.assertEqual(len(labels), 0)\n\n        handles, labels = _get_legend_handles_labels([self.ax], handlers=None,\n                                                    legend_handler_map={\n                                                        Line2D: lambda _, **kwargs: None,\n                                                        Rectangle: lambda _, **kwargs: None,\n                                                        PatchCollection: lambda _, **kwargs: None\n                                                    })\n        self.assertEqual(len(handles), 0)\n        self.assertEqual(len(labels), 0)\n\n        self.ax.add_artist(line)\n        self.ax.add_artist(patch)\n        self.ax.add_artist(collection)\n\n        handles, labels = _get_legend_handles_labels([self.ax], handlers=None)\n        self.assertEqual(len(handles), 3)\n        self.assertEqual(len(labels), 3)\n\n    def test_parse_legend_args(self):\n        ax = self.ax\n        handles, labels, extra_args, kwargs = _parse_legend_args(ax)\n        self.assertEqual(handles, [])\n        self.assertEqual(labels, [])\n        self.assertEqual(extra_args, ())\n        self.assertEqual(kwargs, {})\n\n        handles = [Line2D([], [], color='red', label='Line'),\n                   Rectangle([], [], color='blue', label='Patch')]\n        labels = ['Line', 'Patch']\n        handles, labels, extra_args, kwargs = _parse_legend_args(ax, *handles, *labels)\n        self.assertEqual(handles, handles)\n        self.assertEqual(labels, labels)\n        self.assertEqual(extra_args, ())\n        self.assertEqual(kwargs, {})\n\n        handles, labels, extra_args, kwargs = _parse_legend_args(ax, handles, labels)\n        self.assertEqual(handles, handles)\n        self.assertEqual(labels, labels)\n        self.assertEqual(extra_args, ())\n        self.assertEqual(kwargs, {})\n\n        handles, labels, extra_args, kwargs = _parse_legend_args(ax, labels)\n        self.assertEqual(handles, [])\n        self.assertEqual(labels, labels)\n        self.assertEqual(extra_args, ())\n        self.assertEqual(kwargs, {})\n\n        handles, labels, extra_args, kwargs = _parse_legend_args(ax, handles)\n        self.assertEqual(handles, handles)\n        self.assertEqual(labels, [])\n        self.assertEqual(extra_args, ())\n        self.assertEqual(kwargs, {})\n\n        handles, labels, extra_args, kwargs = _parse_legend_args(ax, 'Line', 'Patch')\n        self.assertEqual(handles, [])\n        self.assertEqual(labels, ['Line', 'Patch'])\n        self.assertEqual(extra_args, ())\n        self.assertEqual(kwargs, {})\n\n    def test_legend_constructor(self):\n        legend = Legend(self.ax)\n        self.assertIsInstance(legend._legend_box, Legend)\n        self.assertIsInstance(legend._legend_title_box, Text)\n        self.assertEqual(legend._loc, 0)\n        self.assertEqual(legend._bbox_to_anchor, None)\n        self.assertEqual(legend._fontsize, 10)\n        self.assertEqual(legend._frameon, True)\n        self.assertEqual(legend._shadow, False)\n        self.assertEqual(legend._borderaxespad, 0.1)\n        self.assertEqual(legend._handlelength, 2)\n        self.assertEqual(legend._handletextpad, 0.5)\n        self.assertEqual(legend._labelspacing, 0.5)\n        self.assertEqual(legend._ncols, 1)\n        self.assertEqual(legend._alignment, 'center')\n        self.assertEqual(legend._mode, 'expand')\n        self.assertEqual(legend._columnspacing, 0.5)\n        self.assertEqual(legend._legend_handler_map, Legend.get_default_handler_map())\n\n    def test_legend_set_loc(self):\n        legend = Legend(self.ax)\n        legend._set_loc(1)\n        self.assertEqual(legend._loc, 1)\n\n    def test_legend_get_legend_handler_map(self):\n        legend = Legend(self.ax)\n        self.assertEqual(legend.get_legend_handler_map(), Legend.get_default_handler_map())\n\n    def test_legend_set_legend_handler_map(self):\n        legend = Legend(self.ax)\n        legend.set_legend_handler_map({Line2D: lambda _, **kwargs: None})\n        self.assertEqual(legend.get_legend_handler_map()[Line2D], lambda _, **kwargs: None)\n\n    def test_legend_set_title(self):\n        legend = Legend(self.ax)\n        legend.set_title('My Legend')\n        self.assertEqual(legend.get_title().get_text(), 'My Legend')\n\n    def test_legend_get_title(self):\n        legend = Legend(self.ax)\n        legend.set_title('My Legend')\n        self.assertEqual(legend.get_title().get_text(), 'My Legend')\n\n    def test_legend_set_bbox_to_anchor(self):\n        legend = Legend(self.ax)\n        legend.set_bbox_to_anchor((0.5, 0.5))\n        self.assertEqual(legend._bbox_to_anchor, Bbox.from_bounds(0.5, 0.5, 1, 1))\n\n    def test_legend_get_bbox_to_anchor(self):\n        legend = Legend(self.ax)\n        legend.set_bbox_to_anchor((0.5, 0.5))\n        self.assertEqual(legend.get_bbox_to_anchor(), Bbox.from_bounds(0.5, 0.5, 1, 1))\n\n    def test_legend_set_frame_on(self):\n        legend = Legend(self.ax)\n        legend.set_frame_on(True)\n        self.assertEqual(legend.get_frame_on(), True)\n\n    def test_legend_get_frame_on(self):\n        legend = Legend(self.ax)\n        legend.set_frame_on(True)\n        self.assertEqual(legend.get_frame_on(), True)\n\n    def test_legend_get_handles(self):\n        legend = Legend(self.ax)\n        self.assertEqual(legend.get_handles(), [])\n\n    def test_legend_get_patches(self):\n        legend = Legend(self.ax)\n        self.assertEqual(legend.get_patches(), [])\n\n    def test_legend_get_texts(self):\n        legend = Legend(self.ax)\n        self.assertEqual(legend.get_texts(), [])\n\n    def test_legend_get_window_extent(self):\n        legend = Legend(self.ax)\n        self.assertEqual(legend.get_window_extent(), None)\n\n    def test_legend_get_tightbbox(self):\n        legend = Legend(self.ax)\n        self.assertEqual(legend.get_tightbbox(), None)\n\n    def test_legend_get_frame_on(self):\n        legend = Legend(self.ax)\n        self.assertEqual(legend.get_frame_on(), True)\n\n    def test_legend_set_frame_on(self):\n        legend = Legend(self.ax)\n        legend.set_frame_on(False)\n        self.assertEqual(legend.get_frame_on(), False)\n\n\n\n"], "sample_129": ["\nfrom sympy.printing.latex import (latex, translate, greek_letters_set, tex_greek_dictionary)\nfrom sympy.printing.latex import LatexPrinter\nfrom sympy.printing.latex import LatexPrinter\nfrom sympy.printing.latex import other_symbols\nfrom sympy import symbols, pi, sin, asin, Integral, Matrix, Rational, log, S\nfrom sympy.abc import x, y, mu, r, tau\n\ndef test_latex_basic():\n    assert latex(2) == '2'\n    assert latex(x) == 'x'\n    assert latex(x + y) == 'x + y'\n    assert latex(x * y) == 'x y'\n    assert latex(x**2) == 'x^{2}'\n    assert latex(x**Rational(1, 2)) == 'x^{\\frac{1}{2}}'\n    assert latex(x**Rational(7, 2)) == 'x^{\\frac{7}{2}}'\n    assert latex(sin(x)) == '\\\\sin{\\left (x \\right )}'\n    assert latex(asin(x)) == '\\\\operatorname{asin}{\\left (x \\right )}'\n    assert latex(log(x)) == '\\\\log{\\left (x \\right )}'\n    assert latex(log(x, 2)) == '\\\\log_{2}{\\left (x \\right )}'\n    assert latex(pi) == '\\\\pi'\n\ndef test_latex_symbols():\n    assert latex(S.Pi) == '\\\\pi'\n    assert latex(S.Infinity) == '\\\\infty'\n    assert latex(S.Zero) == '0'\n    assert latex(S.One) == '1'\n    assert latex(S.ImaginaryUnit) == '\\\\mathbf{i}'\n\ndef test_latex_matrices():\n    assert latex(Matrix([[1, 2], [3, 4]])) == '\\\\left[\\begin{matrix}1 & 2 \\\\ 3 & 4\\end{matrix}\\right]'\n    assert latex(Matrix([[1, 2], [3, 4]], mat_str='array')) == '\\\\left[\\begin{array}{cc}1 & 2 \\\\ 3 & 4\\end{array}\\right]'\n    assert latex(Matrix([[1, 2], [3, 4]], mat_delim='(')) == '\\\\left(\\begin{matrix}1 & 2 \\\\ 3 & 4\\end{matrix}\\right)'\n\ndef test_latex_fractions():\n    assert latex(Rational(1, 2)) == '\\\\frac{1}{2}'\n    assert latex(3/4) == '\\\\frac{3}{4}'\n    assert latex(3/4, fold_short_frac=True) == '3/4'\n    assert latex(Integral(x, x)/2/pi, long_frac_ratio=2) == '\\\\frac{\\int x\\, dx}{2 \\pi}'\n    assert latex(Integral(x, x)/2/pi, long_frac_ratio=0) == '\\\\frac{1}{2 \\pi} \\int x\\, dx'\n\ndef test_latex_powers():\n    assert latex((2*tau)**Rational(7,2)) == '8 \\sqrt{2} \\tau^{\\frac{7}{2}}'\n    assert latex((2*tau)**Rational(7,2), fold_frac_powers=True) == '8 \\\\sqrt{2} \\\\tau^{7/2}'\n\ndef test_latex_functions():\n    assert latex((2*tau)**sin(Rational(7,2))) == '\\\\left(2 \\tau\\right)^{\\sin{\\left (\\frac{7}{2} \\right )}}'\n    assert latex((2*tau)**sin(Rational(7,2)), fold_func_brackets=True) == '\\\\left(2 \\tau\\right)^{\\sin {\\frac{7}{2}}}'\n\ndef test_latex_modifiers():\n    assert latex('alphahatdotprime') == r\"{\\\\dot{\\\\hat{\\\\alpha}}}'\"\n    assert latex('alphahat') == r\"{\\\\hat{\\\\alpha}}\"\n    assert latex('alphaprime') == r\"{\\\\prime{\\\\alpha}}\"\n    assert latex('alphadot') == r\"{\\\\dot{\\\\alpha}}\"\n\ndef test_latex_greek():\n    assert latex('alpha') == '\\\\alpha'\n    assert latex('beta') == '\\\\beta'\n    assert latex('gamma') == '\\\\gamma'\n    assert latex('delta') == '\\\\delta'\n    assert latex('epsilon') == '\\\\epsilon'\n    assert latex('zeta') == '\\\\zeta'\n    assert latex('eta') == '\\\\eta'\n    assert latex('theta') == '\\\\theta'\n    assert latex('iota') == '\\\\iota'\n    assert latex('kappa') == '\\\\kappa'\n    assert latex('lambda') == '\\\\lambda'\n    assert latex('mu') == '\\\\mu'\n    assert latex('nu') == '\\\\nu'\n    assert latex('xi') == '\\\\xi'\n    assert latex('omicron') == '\\\\omicron'\n    assert latex('pi') == '\\\\pi'\n    assert latex('rho') == '\\\\rho'\n    assert latex('sigma') == '\\\\sigma'\n    assert latex('tau') == '\\\\tau'\n    assert latex('upsilon') == '\\\\upsilon'\n    assert latex('phi') == '\\\\phi'\n    assert latex('chi') == '\\\\chi'\n    assert latex('psi') == '\\\\psi'\n    assert latex('omega') == '\\\\omega'\n\ndef test_latex_other_symbols():\n    assert latex('sum') == '\\\\sum'\n    assert latex('prod') == '\\\\prod'\n    assert latex('int') == '\\\\int'\n    assert latex('lim') == '\\\\lim'\n    assert latex('inf') == '\\\\infty'\n    assert latex('Re') == '\\\\operatorname{Re}'\n    assert latex('Im') == '\\\\operatorname{Im}'\n    assert latex('gcd') == '\\\\gcd'\n    assert latex('lcm') == '\\\\lcm'\n    assert latex('mod') == '\\\\mod'\n\ndef test_latex_modes():\n    assert latex(2, mode='plain') == '2'\n    assert latex(2, mode='inline') == '$2$'\n    assert latex(2, mode='equation') == '\\\\begin{equation}2\\\\end{equation}'\n    assert latex(2, mode='equation*', itex=True) == '$$2$$'\n\ndef test_latex_symbol_names():\n    assert latex(x**2, symbol_names={x:'x_i'}) == 'x_i^{2}'\n\n\n\n"], "sample_43": ["\nfrom django.contrib.admin.views.autocomplete import AutocompleteJsonView\nfrom django.contrib.admin.models import LogEntry\nfrom django.http import HttpResponse\nfrom django.test import TestCase, override_settings\nfrom django.urls import reverse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom unittest.mock import patch\n\nclass TestAutocompleteJsonView(TestCase):\n\n    @override_settings(INSTALLED_APPS=['django.contrib.admin'])\n    def setUp(self):\n        self.view = AutocompleteJsonView.as_view()\n\n    def test_process_request_valid(self):\n        with patch('django.contrib.admin.views.autocomplete.apps.apps.get_model') as mock_get_model:\n            mock_get_model.return_value = LogEntry\n            with patch('django.contrib.admin.views.autocomplete.LogEntry.objects.filter') as mock_filter:\n                mock_filter.return_value = LogEntry.objects.all()\n                request = self.create_request(term='test', app_label='django.contrib.admin', model_name='LogEntry', field_name='action_flag')\n                term, model_admin, source_field, to_field_name = self.view.process_request(request)\n                self.assertEqual(term, 'test')\n                self.assertEqual(model_admin, LogEntryAdmin)\n                self.assertEqual(source_field, LogEntry._meta.get_field('action_flag'))\n                self.assertEqual(to_field_name, 'id')\n\n    def test_process_request_invalid_app_label(self):\n        request = self.create_request(term='test', app_label='invalid', model_name='LogEntry', field_name='action_flag')\n        with self.assertRaises(PermissionDenied):\n            self.view.process_request(request)\n\n    def test_process_request_invalid_model_name(self):\n        request = self.create_request(term='test', app_label='django.contrib.admin', model_name='invalid', field_name='action_flag')\n        with self.assertRaises(PermissionDenied):\n            self.view.process_request(request)\n\n    def test_process_request_invalid_field_name(self):\n        request = self.create_request(term='test', app_label='django.contrib.admin', model_name='LogEntry', field_name='invalid')\n        with self.assertRaises(PermissionDenied):\n            self.view.process_request(request)\n\n    def test_process_request_missing_field(self):\n        request = self.create_request(term='test', app_label='django.contrib.admin', model_name='LogEntry', field_name='non_existent_field')\n        with self.assertRaises(PermissionDenied):\n            self.view.process_request(request)\n\n    def test_process_request_missing_search_fields(self):\n        class MockModelAdmin(LogEntryAdmin):\n            search_fields = []\n        with patch('django.contrib.admin.views.autocomplete.LogEntryAdmin') as mock_admin:\n            mock_admin.return_value = MockModelAdmin\n            request = self.create_request(term='test', app_label='django.contrib.admin', model_name='LogEntry', field_name='action_flag')\n            with self.assertRaises(Http404):\n                self.view.process_request(request)\n\n    def test_process_request_invalid_to_field(self):\n        class MockModelAdmin(LogEntryAdmin):\n            to_field_allowed = lambda self, request, field_name: False\n        with patch('django.contrib.admin.views.autocomplete.LogEntryAdmin') as mock_admin:\n            mock_admin.return_value = MockModelAdmin\n            request = self.create_request(term='test', app_label='django.contrib.admin', model_name='LogEntry', field_name='action_flag')\n            with self.assertRaises(PermissionDenied):\n                self.view.process_request(request)\n\n    def test_get_queryset(self):\n        with patch('django.contrib.admin.views.autocomplete.LogEntry.objects.filter') as mock_filter:\n            mock_filter.return_value = LogEntry.objects.all()\n            queryset = self.view.get_queryset()\n            self.assertEqual(queryset, LogEntry.objects.all())\n\n    def test_serialize_result(self):\n        obj = LogEntry()\n        obj.id = 1\n        result = self.view.serialize_result(obj, 'id')\n        self.assertEqual(result, {'id': '1', 'text': 'LogEntry object <__main__.LogEntry object at 0x...>'})\n\n    def test_get(self):\n        with patch('django.contrib.admin.views.autocomplete.LogEntry.objects.filter') as mock_filter:\n            mock_filter.return_value = LogEntry.objects.all()\n            with patch('django.contrib.admin.views.autocomplete.LogEntryAdmin') as mock_admin:\n                mock_admin.return_value = LogEntryAdmin\n                response = self.view.get(self.create_request(term='test', app_label='django.contrib.admin', model_name='LogEntry', field_name='action_flag'))\n                self.assertEqual(response.status_code, 200)\n                self.assertEqual(response.json()['results'], [{'id': '1', 'text': 'LogEntry object <__main__.LogEntry object at 0x...>' }])\n\n    def create_request(self, **kwargs):\n        request = self.request_factory.get('/')\n        for key, value in kwargs.items():\n            request.GET[key] = value\n        return request\n"], "sample_81": ["\nfrom unittest import TestCase\nfrom pylint.checkers import misc\nfrom pylint.checkers.misc import EncodingChecker, ByIdManagedMessagesChecker\nfrom pylint.lint import PyLinter\nfrom pylint.utils.pragma_parser import PragmaParserError\nfrom astroid import nodes\n\nclass TestMiscChecker(TestCase):\n\n    def test_encoding_checker_no_encoding_issues(self):\n        linter = PyLinter()\n        misc.register(linter)\n        module = nodes.Module()\n        module.file_encoding = \"utf-8\"\n        with self.assertLogs() as cm:\n            EncodingChecker(linter).process_module(module)\n        self.assertEqual(len(cm.output), 0)\n\n    def test_encoding_checker_decoding_error(self):\n        linter = PyLinter()\n        misc.register(linter)\n        module = nodes.Module()\n        module.file_encoding = \"ascii\"\n        with self.assertLogs() as cm:\n            EncodingChecker(linter).process_module(module)\n        self.assertTrue(any(\n            \"Cannot decode using encoding 'ascii', bad encoding\" in line\n            for line in cm.output\n        ))\n\n    def test_encoding_checker_encoding_declaration(self):\n        linter = PyLinter()\n        misc.register(linter)\n        module = nodes.Module()\n        module.file_encoding = \"utf-8\"\n        with self.assertLogs() as cm:\n            EncodingChecker(linter).process_module(module)\n        self.assertEqual(len(cm.output), 0)\n\n    def test_encoding_checker_invalid_encoding_declaration(self):\n        linter = PyLinter()\n        misc.register(linter)\n        module = nodes.Module()\n        module.file_encoding = \"invalid_encoding\"\n        with self.assertLogs() as cm:\n            EncodingChecker(linter).process_module(module)\n        self.assertTrue(any(\n            \"Cannot decode using encoding 'invalid_encoding', bad encoding\" in line\n            for line in cm.output\n        ))\n\n    def test_by_id_managed_messages_checker(self):\n        linter = PyLinter()\n        misc.register(linter)\n        checker = ByIdManagedMessagesChecker(linter)\n        checker._by_id_managed_msgs = [\n            (\"test_module\", \"test_message\", \"test_symbol\", 10, False),\n        ]\n        module = nodes.Module()\n        module.name = \"test_module\"\n        checker.process_module(module)\n        self.assertEqual(len(checker._by_id_managed_msgs), 0)\n\n\n\n"], "sample_158": ["\nfrom sympy.physics.units.definitions.dimension_definitions import (\n    Dimension, charge, length, time, temperature, pressure, energy, mass\n)\nfrom sympy.physics.units.systems.si import dimsys_SI\nfrom sympy.physics.units.unitsystem import UnitSystem, get_unit_system, get_default_unit_system\nimport unittest\n\nclass TestUnitSystem(unittest.TestCase):\n\n    def test_unit_system_creation(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units, name=\"MyUnits\")\n        self.assertEqual(unit_system.name, \"MyUnits\")\n        self.assertEqual(unit_system._base_units, base_units)\n\n    def test_unit_system_extend(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units, name=\"MyUnits\")\n        extended_unit_system = unit_system.extend(\n            (charge,), name=\"MyExtendedUnits\", dimension_system=dimsys_SI\n        )\n        self.assertEqual(extended_unit_system.name, \"MyExtendedUnits\")\n        self.assertEqual(extended_unit_system._base_units, tuple(base_units) + (charge,))\n\n    def test_get_unit_system(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units, name=\"MyUnits\")\n        self.assertEqual(get_unit_system(\"MyUnits\"), unit_system)\n\n    def test_get_default_unit_system(self):\n        self.assertEqual(get_default_unit_system(), get_unit_system(\"SI\"))\n\n    def test_get_dimension_system(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units, name=\"MyUnits\", dimension_system=dimsys_SI)\n        self.assertEqual(unit_system.get_dimension_system(), dimsys_SI)\n\n    def test_get_quantity_dimension(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units, name=\"MyUnits\", dimension_system=dimsys_SI)\n        self.assertEqual(unit_system.get_quantity_dimension(length), dimsys_SI.get_dimension(length))\n\n    def test_get_quantity_scale_factor(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units, name=\"MyUnits\", dimension_system=dimsys_SI)\n        self.assertEqual(unit_system.get_quantity_scale_factor(length), dimsys_SI.get_quantity_scale_factor(length))\n\n    def test_is_consistent(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units, name=\"MyUnits\", dimension_system=dimsys_SI)\n        self.assertTrue(unit_system.is_consistent)\n\n    def test_derived_units(self):\n        base_units = (length, time, mass)\n        unit_system = UnitSystem(base_units, name=\"MyUnits\", dimension_system=dimsys_SI, derived_units={\n            Dimension(length**2/time**2): Quantity(\"acceleration\", \"m/s^2\")\n        })\n        self.assertEqual(unit_system.derived_units[Dimension(length**2/time**2)], Quantity(\"acceleration\", \"m/s^2\"))\n\n\n\n"], "sample_117": ["\nfrom typing import Any, Callable, Dict, Generator, List, Optional, Tuple, TypeVar, Union\nfrom typing import ForwardRef  # type: ignore\nfrom typing import Annotated  # type: ignore\nfrom sphinx.util.typing import restify, stringify, get_type_hints, is_system_TypeVar\n\n\ndef test_restify_basic():\n    assert restify(str) == ':obj:`str`'\n    assert restify(int) == ':obj:`int`'\n    assert restify(float) == ':obj:`float`'\n    assert restify(bool) == ':obj:`bool`'\n    assert restify(list) == ':obj:`list`'\n    assert restify(dict) == ':obj:`dict`'\n    assert restify(tuple) == ':obj:`tuple`'\n    assert restify(NoneType) == ':obj:`None`'\n    assert restify(Ellipsis) == '...'\n    assert restify(object) == ':obj:`object`'\n    assert restify(type) == ':obj:`type`'\n\n\ndef test_restify_class():\n    class MyClass:\n        pass\n\n    assert restify(MyClass) == ':class:`MyClass`'\n\n\ndef test_restify_new_type():\n    from typing import NewType\n\n    MyNewType = NewType('MyNewType', int)\n    assert restify(MyNewType) == ':class:`MyNewType`'\n\n\ndef test_restify_forward_ref():\n    class MyClass:\n        pass\n\n    forward_ref = ForwardRef('MyClass')\n    assert restify(forward_ref) == ':class:`MyClass`'\n\n\ndef test_restify_typing_union():\n    from typing import Union\n\n    assert restify(Union[int, str]) == ':obj:`Union`\\\\ [%s, %s]' % ('int', 'str')\n    assert restify(Union[int, str, NoneType]) == ':obj:`Union`\\\\ [%s, %s, %s]' % ('int', 'str', 'None')\n    assert restify(Union[int, NoneType]) == ':obj:`Union`\\\\ [%s, %s]' % ('int', 'None')\n    assert restify(Union[str, NoneType]) == ':obj:`Union`\\\\ [%s, %s]' % ('str', 'None')\n    assert restify(Union[int, ...]) == ':obj:`Union`\\\\ [%s, ...] ' % ('int')\n    assert restify(Union[str, ...]) == ':obj:`Union`\\\\ [%s, ...] ' % ('str')\n    assert restify(Union[int, NoneType, ...]) == ':obj:`Union`\\\\ [%s, %s, ...] ' % ('int', 'None')\n\n\ndef test_restify_typing_callable():\n    from typing import Callable\n\n    assert restify(Callable[[int], str]) == ':class:`Callable`\\\\ [[int], str]'\n    assert restify(Callable[[int, str], str]) == ':class:`Callable`\\\\ [[int, str], str]'\n    assert restify(Callable[[], str]) == ':class:`Callable`\\\\ [[], str]'\n    assert restify(Callable[[int, ...], str]) == ':class:`Callable`\\\\ [[int, ...], str]'\n\n\ndef test_restify_typing_list():\n    from typing import List\n\n    assert restify(List[int]) == ':class:`List`\\\\ [int]'\n    assert restify(List[str]) == ':class:`List`\\\\ [str]'\n    assert restify(List[int, str]) == ':class:`List`\\\\ [int, str]'\n\n\ndef test_restify_typing_dict():\n    from typing import Dict\n\n    assert restify(Dict[str, int]) == ':class:`Dict`\\\\ [str, int]'\n    assert restify(Dict[int, str]) == ':class:`Dict`\\\\ [int, str]'\n    assert restify(Dict[str, int, str]) == ':class:`Dict`\\\\ [str, int, str]'\n\n\ndef test_restify_typing_tuple():\n    from typing import Tuple\n\n    assert restify(Tuple[int, str]) == ':class:`Tuple`\\\\ [int, str]'\n    assert restify(Tuple[int, str, int]) == ':class:`Tuple`\\\\ [int, str, int]'\n    assert restify(Tuple[int, ...]) == ':class:`Tuple`\\\\ [int, ...] '\n\n\ndef test_restify_typing_generator():\n    from typing import Generator\n\n    assert restify(Generator[int, str, None]) == ':class:`Generator`\\\\ [int, str, None]'\n\n\ndef test_restify_typing_any():\n    assert restify(Any) == ':obj:`Any`'\n\n\ndef test_restify_typing_typevar():\n    from typing import TypeVar\n\n    T = TypeVar('T')\n    assert restify(T) == ':obj:`T`'\n\n\ndef test_stringify_basic():\n    assert stringify(str) == 'str'\n    assert stringify(int) == 'int'\n    assert stringify(float) == 'float'\n    assert stringify(bool) == 'bool'\n    assert stringify(list) == 'list'\n    assert stringify(dict) == 'dict'\n    assert stringify(tuple) == 'tuple'\n    assert stringify(NoneType) == 'None'\n    assert stringify(Ellipsis) == '...'\n    assert stringify(object) == 'object'\n    assert stringify(type) == 'type'\n\n\ndef test_stringify_class():\n    class MyClass:\n        pass\n\n    assert stringify(MyClass) == 'MyClass'\n\n\ndef test_stringify_new_type():\n    from typing import NewType\n\n    MyNewType = NewType('MyNewType', int)\n    assert stringify(MyNewType) == 'MyNewType'\n\n\ndef test_stringify_forward_ref():\n    class MyClass:\n        pass\n\n    forward_ref = ForwardRef('MyClass')\n    assert stringify(forward_ref) == 'MyClass'\n\n\ndef test_stringify_typing_union():\n    from typing import Union\n\n    assert stringify(Union[int, str]) == 'Union[int, str]'\n    assert stringify(Union[int, str, NoneType]) == 'Union[int, str, None]'\n    assert stringify(Union[int, NoneType]) == 'Union[int, None]'\n    assert stringify(Union[str, NoneType]) == 'Union[str, None]'\n    assert stringify(Union[int, ...]) == 'Union[int, ...] '\n    assert stringify(Union[str, ...]) == 'Union[str, ...] '\n    assert stringify(Union[int, NoneType, ...]) == 'Union[int, None, ...] '\n\n\ndef test_stringify_typing_callable():\n    from typing import Callable\n\n    assert stringify(Callable[[int], str]) == 'Callable[[int], str]'\n    assert stringify(Callable[[int, str], str]) == 'Callable[[int, str], str]'\n    assert stringify(Callable[[], str]) == 'Callable[(), str]'\n    assert stringify(Callable[[int, ...], str]) == 'Callable[[int, ...], str]'\n\n\ndef test_stringify_typing_list():\n    from typing import List\n\n    assert stringify(List[int]) == 'List[int]'\n    assert stringify(List[str]) == 'List[str]'\n    assert stringify(List[int, str]) == 'List[int, str]'\n\n\ndef test_stringify_typing_dict():\n    from typing import Dict\n\n    assert stringify(Dict[str, int]) == 'Dict[str, int]'\n    assert stringify(Dict[int, str]) == 'Dict[int, str]'\n    assert stringify(Dict[str, int, str]) == 'Dict[str, int, str]'\n\n\ndef test_stringify_typing_tuple():\n    from typing import Tuple\n\n    assert stringify(Tuple[int, str]) == 'Tuple[int, str]'\n    assert stringify(Tuple[int, str, int]) == 'Tuple[int, str, int]'\n    assert stringify(Tuple[int, ...]) == 'Tuple[int, ...] '\n\n\ndef test_stringify_typing_generator():\n    from typing import Generator\n\n    assert stringify(Generator[int, str, None]) == 'Generator[int, str, None]'\n\n\ndef test_stringify_typing_any():\n    assert stringify(Any) == 'Any'\n\n\ndef test_stringify_typing_typevar():\n    from typing import TypeVar\n\n    T = TypeVar('T')\n    assert stringify(T) == 'T'\n\n\ndef test_get_type_hints():\n    class MyClass:\n        def my_method(self, a: int, b: str) -> str:\n            pass\n\n    type_hints = get_type_hints(MyClass.my_method)\n    assert type_hints == {'a': int, 'b': str, '__return__': str}\n\n\ndef test_is_system_TypeVar():\n    from typing import TypeVar\n\n    T = TypeVar('T')\n    assert is_system_TypeVar(T) is True\n\n    class MyTypeVar(TypeVar):\n        pass\n\n    assert is_system_TypeVar(MyTypeVar('T')) is False\n\n\n\n"], "sample_45": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom functools import wraps\nfrom django.utils.decorators import (\n    _multi_decorate,\n    method_decorator,\n    decorator_from_middleware,\n    sync_and_async_middleware,\n    sync_only_middleware,\n    async_only_middleware,\n)\n\n\nclass TestDecorators(unittest.TestCase):\n\n    def test_classonlymethod(self):\n        class MyClass:\n            @classonlymethod\n            def my_method(cls):\n                return cls\n\n        self.assertRaises(AttributeError, MyClass.my_method, MyClass())\n        self.assertEqual(MyClass.my_method(MyClass), MyClass)\n\n    def test__update_method_wrapper(self):\n        @patch('django.utils.decorators._multi_decorate._update_method_wrapper')\n        def test_func(mock_update_wrapper):\n            def dummy(*args, **kwargs):\n                pass\n\n            _update_method_wrapper(dummy, lambda x: x)\n            mock_update_wrapper.assert_called_once_with(dummy, lambda x: x)\n\n        test_func()\n\n    def test__multi_decorate_single_decorator(self):\n        def my_decorator(func):\n            return lambda *args, **kwargs: func(*args, **kwargs)\n\n        @wraps(lambda x: x)\n        def test_func(x):\n            return x\n\n        wrapped_func = _multi_decorate([my_decorator], test_func)\n        self.assertEqual(wrapped_func(1), 1)\n\n    def test__multi_decorate_multiple_decorators(self):\n        def my_decorator1(func):\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs) * 2\n            return wrapper\n\n        def my_decorator2(func):\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs) * 3\n            return wrapper\n\n        @wraps(lambda x: x)\n        def test_func(x):\n            return x\n\n        wrapped_func = _multi_decorate([my_decorator2, my_decorator1], test_func)\n        self.assertEqual(wrapped_func(1), 6)\n\n    def test_method_decorator_function(self):\n        def my_decorator(func):\n            return lambda *args, **kwargs: func(*args, **kwargs)\n\n        @method_decorator(my_decorator)\n        def test_func(self, x):\n            return x\n\n        self.assertEqual(test_func(1), 1)\n\n    def test_method_decorator_class(self):\n        class MyClass:\n            @method_decorator(lambda func: lambda *args, **kwargs: func(*args, **kwargs) * 2)\n            def test_func(self, x):\n                return x\n\n        self.assertEqual(MyClass().test_func(1), 2)\n\n    def test_method_decorator_name(self):\n        class MyClass:\n            @method_decorator(lambda func: lambda *args, **kwargs: func(*args, **kwargs) * 2)\n            def test_func(self, x):\n                return x\n\n        self.assertEqual(MyClass().test_func(1), 2)\n\n    def test_decorator_from_middleware(self):\n        class MyMiddleware:\n            def __init__(self, view_func):\n                self.view_func = view_func\n\n        @decorator_from_middleware(MyMiddleware)\n        def test_view(request):\n            return \"Hello, world!\"\n\n        view = test_view\n        self.assertIsInstance(view, MyMiddleware)\n        self.assertEqual(view(MagicMock()).content, \"Hello, world!\")\n\n    def test_decorator_from_middleware_with_args(self):\n        class MyMiddleware:\n            def __init__(self, view_func, arg1, arg2):\n                self.view_func = view_func\n                self.arg1 = arg1\n                self.arg2 = arg2\n\n        @decorator_from_middleware_with_args(MyMiddleware)\n        def test_view(request):\n            return \"Hello, world!\"\n\n        view = test_view(arg1=\"value1\", arg2=\"value2\")\n        self.assertIsInstance(view, MyMiddleware)\n        self.assertEqual(view.arg1, \"value1\")\n        self.assertEqual(view.arg2, \"value2\")\n\n    def test_sync_and_async_middleware(self):\n        @sync_and_async_middleware\n        def my_middleware_factory():\n            pass\n\n        self.assertTrue(my_middleware_factory.sync_capable)\n        self.assertTrue(my_middleware_factory.async_capable)\n\n    def test_sync_only_middleware(self):\n        @sync_only_middleware\n        def my_middleware_factory():\n            pass\n\n        self.assertTrue(my_middleware_factory.sync_capable)\n        self.assertFalse(my_middleware_factory.async_capable)\n\n    def test_async_only_middleware(self):\n        @async_only_middleware\n        def my_middleware_factory():\n            pass\n\n        self.assertFalse(my_middleware_factory.sync_capable)\n        self.assertTrue(my_middleware_factory.async_capable)\n\n\n\n"], "sample_79": ["\nimport unittest\nfrom xarray import DataArray, Dataset, Variable, concat\nfrom xarray.core.concat import _dataset_concat, _dataarray_concat, _calc_concat_dim_coord, _calc_concat_over, _parse_datasets\n\nclass TestConcat(unittest.TestCase):\n\n    def test_concat_datasets_minimal(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"c\", \"d\"], [5, 6]),\n                \"y\": ([\"c\", \"d\"], [7, 8]),\n            }\n        )\n        result = concat(\n            [ds1, ds2], dim=\"x\", data_vars=\"minimal\", coords=\"minimal\"\n        )\n        expected = Dataset(\n            {\n                \"x\": ([\"a\", \"b\", \"c\", \"d\"], [1, 2, 5, 6]),\n                \"y\": ([\"a\", \"b\", \"c\", \"d\"], [3, 4, 7, 8]),\n            }\n        )\n        pd.testing.assert_frame_equal(result.x, expected.x)\n        pd.testing.assert_frame_equal(result.y, expected.y)\n\n    def test_concat_datasets_different(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"c\", \"d\"], [5, 6]),\n                \"y\": ([\"c\", \"d\"], [7, 8]),\n                \"z\": ([\"c\", \"d\"], [9, 10]),\n            }\n        )\n        result = concat(\n            [ds1, ds2], dim=\"x\", data_vars=\"different\", coords=\"different\"\n        )\n        expected = Dataset(\n            {\n                \"x\": ([\"a\", \"b\", \"c\", \"d\"], [1, 2, 5, 6]),\n                \"y\": ([\"a\", \"b\", \"c\", \"d\"], [3, 4, 7, 8]),\n                \"z\": ([\"c\", \"d\"], [9, 10]),\n            }\n        )\n        pd.testing.assert_frame_equal(result.x, expected.x)\n        pd.testing.assert_frame_equal(result.y, expected.y)\n        pd.testing.assert_frame_equal(result.z, expected.z)\n\n    def test_concat_datasets_all(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"c\", \"d\"], [5, 6]),\n                \"y\": ([\"c\", \"d\"], [7, 8]),\n                \"z\": ([\"c\", \"d\"], [9, 10]),\n            }\n        )\n        result = concat(\n            [ds1, ds2], dim=\"x\", data_vars=\"all\", coords=\"all\"\n        )\n        expected = Dataset(\n            {\n                \"x\": ([\"a\", \"b\", \"c\", \"d\"], [1, 2, 5, 6]),\n                \"y\": ([\"a\", \"b\", \"c\", \"d\"], [3, 4, 7, 8]),\n                \"z\": ([\"c\", \"d\"], [9, 10]),\n            }\n        )\n        pd.testing.assert_frame_equal(result.x, expected.x)\n        pd.testing.assert_frame_equal(result.y, expected.y)\n        pd.testing.assert_frame_equal(result.z, expected.z)\n\n    def test_concat_dataarrays_minimal(self):\n        arr1 = DataArray(\n            data=[1, 2], dims=(\"x\",)\n        )\n        arr2 = DataArray(\n            data=[3, 4], dims=(\"x\",)\n        )\n        result = concat([arr1, arr2], dim=\"x\", data_vars=\"minimal\")\n        expected = DataArray(\n            data=[1, 2, 3, 4], dims=(\"x\",)\n        )\n        pd.testing.assert_frame_equal(result, expected)\n\n    def test_concat_dataarrays_different(self):\n        arr1 = DataArray(\n            data=[1, 2], dims=(\"x\",)\n        )\n        arr2 = DataArray(\n            data=[3, 4], dims=(\"x\",)\n        )\n        with self.assertRaises(ValueError):\n            concat([arr1, arr2], dim=\"x\", data_vars=\"different\")\n\n    def test_concat_datasets_new_dim(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"c\", \"d\"], [5, 6]),\n                \"y\": ([\"c\", \"d\"], [7, 8]),\n            }\n        )\n        result = concat(\n            [ds1, ds2], dim=\"new_dim\", data_vars=\"minimal\", coords=\"minimal\"\n        )\n        expected = Dataset(\n            {\n                \"x\": ([\"a\", \"b\", \"c\", \"d\"], [1, 2, 5, 6]),\n                \"y\": ([\"a\", \"b\", \"c\", \"d\"], [3, 4, 7, 8]),\n            }\n        )\n        pd.testing.assert_frame_equal(result.x, expected.x)\n        pd.testing.assert_frame_equal(result.y, expected.y)\n\n    def test_concat_datasets_existing_dim(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"c\", \"d\"], [5, 6]),\n                \"y\": ([\"c\", \"d\"], [7, 8]),\n            }\n        )\n        result = concat(\n            [ds1, ds2], dim=\"x\", data_vars=\"minimal\", coords=\"minimal\"\n        )\n        expected = Dataset(\n            {\n                \"x\": ([\"a\", \"b\", \"c\", \"d\"], [1, 2, 5, 6]),\n                \"y\": ([\"a\", \"b\", \"c\", \"d\"], [3, 4, 7, 8]),\n            }\n        )\n        pd.testing.assert_frame_equal(result.x, expected.x)\n        pd.testing.assert_frame_equal(result.y, expected.y)\n\n    def test_concat_datasets_compat_identical(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"c\", \"d\"], [5, 6]),\n                \"y\": ([\"c\", \"d\"], [7, 8]),\n            }\n        )\n        with self.assertRaises(ValueError):\n            concat(\n                [ds1, ds2], dim=\"x\", data_vars=\"minimal\", coords=\"minimal\", compat=\"identical\"\n            )\n\n    def test_concat_datasets_compat_broadcast_equals(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"c\", \"d\"], [5, 6]),\n                \"y\": ([\"c\", \"d\"], [7, 8]),\n            }\n        )\n        result = concat(\n            [ds1, ds2], dim=\"x\", data_vars=\"minimal\", coords=\"minimal\", compat=\"broadcast_equals\"\n        )\n        expected = Dataset(\n            {\n                \"x\": ([\"a\", \"b\", \"c\", \"d\"], [1, 2, 5, 6]),\n                \"y\": ([\"a\", \"b\", \"c\", \"d\"], [3, 4, 7, 8]),\n            }\n        )\n        pd.testing.assert_frame_equal(result.x, expected.x)\n        pd.testing.assert_frame_equal(result.y, expected.y)\n\n    def test_concat_datasets_compat_equals(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"c\", \"d\"], [5, 6]),\n                \"y\": ([\"c\", \"d\"], [7, 8]),\n            }\n        )\n        with self.assertRaises(ValueError):\n            concat(\n                [ds1, ds2], dim=\"x\", data_vars=\"minimal\", coords=\"minimal\", compat=\"equals\"\n            )\n\n    def test_concat_datasets_compat_no_conflicts(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"c\", \"d\"], [5, 6]),\n                \"y\": ([\"c\", \"d\"], [7, 8]),\n            }\n        )\n        result = concat(\n            [ds1, ds2], dim=\"x\", data_vars=\"minimal\", coords=\"minimal\", compat=\"no_conflicts\"\n        )\n        expected = Dataset(\n            {\n                \"x\": ([\"a\", \"b\", \"c\", \"d\"], [1, 2, 5, 6]),\n                \"y\": ([\"a\", \"b\", \"c\", \"d\"], [3, 4, 7, 8]),\n            }\n        )\n        pd.testing.assert_frame_equal(result.x, expected.x)\n        pd.testing.assert_frame_equal(result.y, expected.y)\n\n    def test_concat_datasets_compat_override(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"c\", \"d\"], [5, 6]),\n                \"y\": ([\"c\", \"d\"], [7, 8]),\n            }\n        )\n        result = concat(\n            [ds1, ds2], dim=\"x\", data_vars=\"minimal\", coords=\"minimal\", compat=\"override\"\n        )\n        expected = Dataset(\n            {\n                \"x\": ([\"a\", \"b\", \"c\", \"d\"], [1, 2, 5, 6]),\n                \"y\": ([\"a\", \"b\", \"c\", \"d\"], [3, 4, 7, 8]),\n            }\n        )\n        pd.testing.assert_frame_equal(result.x, expected.x)\n        pd.testing.assert_frame_equal(result.y, expected.y)\n\n    def test_concat_datasets_join_outer(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"c\", \"d\"], [5, 6]),\n                \"y\": ([\"c\", \"d\"], [7, 8]),\n            }\n        )\n        result = concat(\n            [ds1, ds2], dim=\"x\", data_vars=\"minimal\", coords=\"minimal\", join=\"outer\"\n        )\n        expected = Dataset(\n            {\n                \"x\": ([\"a\", \"b\", \"c\", \"d\"], [1, 2, 5, 6]),\n                \"y\": ([\"a\", \"b\", \"c\", \"d\"], [3, 4, 7, 8]),\n            }\n        )\n        pd.testing.assert_frame_equal(result.x, expected.x)\n        pd.testing.assert_frame_equal(result.y, expected.y)\n\n    def test_concat_datasets_join_inner(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"b\", \"c\"], [2, 3]),\n                \"y\": ([\"b\", \"c\"], [4, 5]),\n            }\n        )\n        result = concat(\n            [ds1, ds2], dim=\"x\", data_vars=\"minimal\", coords=\"minimal\", join=\"inner\"\n        )\n        expected = Dataset(\n            {\n                \"x\": ([\"b\"], [2]),\n                \"y\": ([\"b\"], [4]),\n            }\n        )\n        pd.testing.assert_frame_equal(result.x, expected.x)\n        pd.testing.assert_frame_equal(result.y, expected.y)\n\n    def test_concat_datasets_join_left(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"b\", \"c\"], [2, 3]),\n                \"y\": ([\"b\", \"c\"], [4, 5]),\n            }\n        )\n        result = concat(\n            [ds1, ds2], dim=\"x\", data_vars=\"minimal\", coords=\"minimal\", join=\"left\"\n        )\n        expected = Dataset(\n            {\n                \"x\": ([\"a\", \"b\", \"c\"], [1, 2, 3]),\n                \"y\": ([\"a\", \"b\", \"c\"], [3, 4, None]),\n            }\n        )\n        pd.testing.assert_frame_equal(result.x, expected.x)\n        pd.testing.assert_frame_equal(result.y, expected.y)\n\n    def test_concat_datasets_join_right(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"b\", \"c\"], [2, 3]),\n                \"y\": ([\"b\", \"c\"], [4, 5]),\n            }\n        )\n        result = concat(\n            [ds1, ds2], dim=\"x\", data_vars=\"minimal\", coords=\"minimal\", join=\"right\"\n        )\n        expected = Dataset(\n            {\n                \"x\": ([\"a\", \"b\", \"c\"], [1, 2, 3]),\n                \"y\": ([\"a\", \"b\", \"c\"], [3, 4, 5]),\n            }\n        )\n        pd.testing.assert_frame_equal(result.x, expected.x)\n        pd.testing.assert_frame_equal(result.y, expected.y)\n\n    def test_concat_datasets_join_exact(self):\n        ds1 = Dataset(\n            {\n                \"x\": ([\"a\", \"b\"], [1, 2]),\n                \"y\": ([\"a\", \"b\"], [3, 4]),\n            }\n        )\n        ds2 = Dataset(\n            {\n                \"x\": ([\"b\", \"c\"], [2, 3]),\n                \"y\": ([\"b\", \"c\"], [4, 5]),\n            }\n        )\n        with self.assertRaises(ValueError):\n            concat(\n                [ds1, ds2], dim=\"x\", data_vars=\"minimal\", coords=\"minimal\", join=\"exact\"\n            )\n\n\n\n"], "sample_3": ["\nfrom astropy.modeling.separable import (_coord_matrix, is_separable, _cdot, _cstack, _arith_oper, separability_matrix)\nfrom astropy.modeling.models import Shift, Scale, Rotation2D, Polynomial2D\nfrom astropy.modeling.core import Model\nimport numpy as np\nimport unittest\n\n\nclass TestSeparable(unittest.TestCase):\n\n    def test_is_separable_single_input_multiple_outputs(self):\n        model = Model(n_inputs=1, n_outputs=3)\n        self.assertTrue(is_separable(model).all() == False)\n\n    def test_is_separable_simple_separable_models(self):\n        shift_model = Shift(1)\n        scale_model = Scale(2)\n        self.assertTrue(is_separable(shift_model & scale_model).all() == True)\n\n    def test_is_separable_non_separable_models(self):\n        rotation_model = Rotation2D(2)\n        self.assertFalse(is_separable(Shift(1) & Shift(2) | rotation_model).all())\n\n    def test_is_separable_mapping(self):\n        mapping_model = Mapping([0, 1, 0, 1])\n        self.assertTrue(is_separable(Shift(1) & Shift(2) | mapping_model).all())\n\n    def test_separability_matrix_simple_separable_models(self):\n        shift_model = Shift(1)\n        scale_model = Scale(2)\n        expected_matrix = np.array([[True, False], [False, True]])\n        self.assertTrue(np.array_equal(separability_matrix(shift_model & scale_model), expected_matrix))\n\n    def test_separability_matrix_non_separable_models(self):\n        rotation_model = Rotation2D(2)\n        expected_matrix = np.array([[True, True], [True, True]])\n        self.assertTrue(np.array_equal(separability_matrix(Shift(1) & Shift(2) | rotation_model), expected_matrix))\n\n    def test_separability_matrix_mapping(self):\n        mapping_model = Mapping([0, 1, 0, 1])\n        expected_matrix = np.array([[True, False], [False, True]])\n        self.assertTrue(np.array_equal(separability_matrix(Shift(1) & Shift(2) | mapping_model), expected_matrix))\n\n    def test_coord_matrix_simple_model(self):\n        shift_model = Shift(1)\n        expected_matrix = np.array([[1, 0],\n                                    [0, 1]])\n        self.assertTrue(np.array_equal(_coord_matrix(shift_model, 'left', 2), expected_matrix))\n\n    def test_coord_matrix_mapping(self):\n        mapping_model = Mapping([0, 1, 0, 1])\n        expected_matrix = np.array([[1, 0, 0, 0],\n                                    [0, 1, 0, 0],\n                                    [0, 0, 1, 0],\n                                    [0, 0, 0, 1]])\n        self.assertTrue(np.array_equal(_coord_matrix(mapping_model, 'left', 4), expected_matrix))\n\n    def test_cstack_simple(self):\n        left_matrix = np.array([[1, 0],\n                                [0, 1]])\n        right_matrix = np.array([[2, 0],\n                                 [0, 2]])\n        expected_matrix = np.array([[1, 0, 2, 0],\n                                    [0, 1, 0, 2]])\n        self.assertTrue(np.array_equal(_cstack(left_matrix, right_matrix), expected_matrix))\n\n    def test_cdot_simple(self):\n        left_matrix = np.array([[1, 0],\n                                [0, 1]])\n        right_matrix = np.array([[2, 0],\n                                 [0, 2]])\n        expected_matrix = np.array([[2, 0],\n                                    [0, 2]])\n        self.assertTrue(np.array_equal(_cdot(left_matrix, right_matrix), expected_matrix))\n\n    def test_arith_oper_simple(self):\n        left_matrix = np.array([[1, 0],\n                                [0, 1]])\n        right_matrix = np.array([[2, 0],\n                                 [0, 2]])\n        expected_matrix = np.array([[1, 0],\n                                    [0, 1]])\n        self.assertTrue(np.array_equal(_arith_oper(left_matrix, right_matrix), expected_matrix))\n\n\n\n"], "sample_57": ["\nimport unittest\nfrom django.forms import (\n    BaseForm,\n    CharField,\n    DateField,\n    FileField,\n    Form,\n    IntegerField,\n    SplitDateTimeField,\n    formsets,\n)\nfrom django.forms.formsets import (\n    INITIAL_FORM_COUNT,\n    MAX_NUM_FORM_COUNT,\n    MIN_NUM_FORM_COUNT,\n    TOTAL_FORM_COUNT,\n    BaseFormSet,\n    ManagementForm,\n    all_valid,\n    formset_factory,\n)\nfrom django.forms.renderers import TemplatesSetting, get_default_renderer\nfrom django.forms.utils import ErrorList\nfrom django.forms.widgets import HiddenInput\nfrom django.forms.renderers import Jinja2\nfrom django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n\n\nclass TestFormSet(unittest.TestCase):\n\n    def test_formset_factory(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm)\n        self.assertEqual(FormSet.extra, 1)\n        self.assertEqual(FormSet.can_order, False)\n        self.assertEqual(FormSet.can_delete, False)\n        self.assertEqual(FormSet.min_num, 0)\n        self.assertEqual(FormSet.max_num, 1000)\n\n    def test_formset_factory_with_args(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(\n            MyForm,\n            extra=2,\n            can_order=True,\n            can_delete=True,\n            max_num=5,\n            validate_max=True,\n            min_num=1,\n            validate_min=True,\n        )\n        self.assertEqual(FormSet.extra, 2)\n        self.assertEqual(FormSet.can_order, True)\n        self.assertEqual(FormSet.can_delete, True)\n        self.assertEqual(FormSet.min_num, 1)\n        self.assertEqual(FormSet.max_num, 5)\n\n    def test_formset_factory_absolute_max(self):\n        class MyForm(Form):\n            name = CharField()\n\n        with self.assertRaises(ValueError):\n            formset_factory(\n                MyForm,\n                max_num=100,\n                absolute_max=50,\n            )\n\n    def test_formset_instance(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm)\n        formset = FormSet()\n        self.assertEqual(len(formset.forms), 1)\n        self.assertEqual(formset.total_form_count(), 1)\n\n    def test_formset_instance_with_data(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm)\n        data = {\"form-0-name\": \"John Doe\"}\n        formset = FormSet(data)\n        self.assertEqual(len(formset.forms), 1)\n        self.assertEqual(formset.total_form_count(), 1)\n        self.assertEqual(formset.cleaned_data[0][\"name\"], \"John Doe\")\n\n    def test_formset_instance_with_extra_forms(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm, extra=2)\n        formset = FormSet()\n        self.assertEqual(len(formset.forms), 3)\n        self.assertEqual(formset.total_form_count(), 3)\n\n    def test_formset_instance_with_can_order(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm, can_order=True)\n        formset = FormSet()\n        self.assertEqual(len(formset.forms), 1)\n        self.assertEqual(formset.total_form_count(), 1)\n        self.assertIn(ORDERING_FIELD_NAME, formset.forms[0].fields)\n\n    def test_formset_instance_with_can_delete(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm, can_delete=True)\n        formset = FormSet()\n        self.assertEqual(len(formset.forms), 1)\n        self.assertEqual(formset.total_form_count(), 1)\n        self.assertIn(DELETION_FIELD_NAME, formset.forms[0].fields)\n\n    def test_formset_instance_with_min_num(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm, min_num=2)\n        formset = FormSet()\n        self.assertEqual(len(formset.forms), 2)\n        self.assertEqual(formset.total_form_count(), 2)\n\n    def test_formset_instance_with_max_num(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm, max_num=2)\n        formset = FormSet()\n        self.assertEqual(len(formset.forms), 2)\n        self.assertEqual(formset.total_form_count(), 2)\n\n    def test_formset_instance_with_validate_max(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm, max_num=2, validate_max=True)\n        formset = FormSet()\n        self.assertEqual(len(formset.forms), 2)\n        self.assertEqual(formset.total_form_count(), 2)\n\n    def test_formset_instance_with_validate_min(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet = formset_factory(MyForm, min_num=2, validate_min=True)\n        formset = FormSet()\n        self.assertEqual(len(formset.forms), 2)\n        self.assertEqual(formset.total_form_count(), 2)\n\n    def test_all_valid(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet1 = formset_factory(MyForm)\n        FormSet2 = formset_factory(MyForm)\n        FormSet1.is_valid = lambda: True\n        FormSet2.is_valid = lambda: True\n        self.assertTrue(all_valid([FormSet1(), FormSet2()]))\n\n    def test_all_valid_with_invalid_formset(self):\n        class MyForm(Form):\n            name = CharField()\n\n        FormSet1 = formset_factory(MyForm)\n        FormSet2 = formset_factory(MyForm)\n        FormSet1.is_valid = lambda: True\n        FormSet2.is_valid = lambda: False\n        self.assertFalse(all_valid([FormSet1(), FormSet2()]))\n\n\n\n"], "sample_113": ["\nimport unittest\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.compose import ColumnTransformer, make_column_transformer, make_column_selector\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.utils.testing import assert_array_equal\nfrom sklearn.utils.validation import check_array\nimport numpy as np\nimport pandas as pd\n\nclass TestColumnTransformer(unittest.TestCase):\n\n    def test_basic_usage(self):\n        from sklearn.preprocessing import StandardScaler, OneHotEncoder\n        ct = make_column_transformer(\n            (StandardScaler(), [\"numerical_column\"]),\n            (OneHotEncoder(), [\"categorical_column\"])\n        )\n        self.assertEqual(len(ct.transformers_), 2)\n        self.assertEqual(ct.transformers_[0][0], StandardScaler())\n        self.assertEqual(ct.transformers_[1][0], OneHotEncoder())\n        self.assertEqual(ct.transformers_[0][1], [\"numerical_column\"])\n        self.assertEqual(ct.transformers_[1][1], [\"categorical_column\"])\n\n    def test_remainder(self):\n        from sklearn.preprocessing import StandardScaler\n        ct = make_column_transformer(\n            (StandardScaler(), [\"numerical_column\"]),\n            remainder=\"passthrough\"\n        )\n        self.assertEqual(len(ct.transformers_), 2)\n        self.assertEqual(ct.transformers_[1][0], \"passthrough\")\n        self.assertEqual(ct.transformers_[1][1], [])\n\n    def test_remainder_estimator(self):\n        from sklearn.preprocessing import StandardScaler\n        class MyRemainder(BaseEstimator, TransformerMixin):\n            def fit(self, X, y=None):\n                pass\n            def transform(self, X):\n                return X * 2\n        ct = make_column_transformer(\n            (StandardScaler(), [\"numerical_column\"]),\n            remainder=MyRemainder()\n        )\n        self.assertEqual(len(ct.transformers_), 2)\n        self.assertEqual(ct.transformers_[1][0], MyRemainder())\n        self.assertEqual(ct.transformers_[1][1], [])\n\n    def test_sparse_threshold(self):\n        ct = make_column_transformer(\n            (StandardScaler(), [\"numerical_column\"]),\n            sparse_threshold=0.5\n        )\n        self.assertEqual(ct.sparse_threshold, 0.5)\n\n    def test_n_jobs(self):\n        ct = make_column_transformer(\n            (StandardScaler(), [\"numerical_column\"]),\n            n_jobs=2\n        )\n        self.assertEqual(ct.n_jobs, 2)\n\n    def test_verbose(self):\n        ct = make_column_transformer(\n            (StandardScaler(), [\"numerical_column\"]),\n            verbose=True\n        )\n        self.assertEqual(ct.verbose, True)\n\n    def test_verbose_feature_names_out(self):\n        ct = make_column_transformer(\n            (StandardScaler(), [\"numerical_column\"]),\n            verbose_feature_names_out=True\n        )\n        self.assertEqual(ct.verbose_feature_names_out, True)\n\n    def test_invalid_remainder(self):\n        with self.assertRaises(ValueError):\n            make_column_transformer(\n                (StandardScaler(), [\"numerical_column\"]),\n                remainder=\"invalid\"\n            )\n\n    def test_fit_transform_with_callable_column_selection(self):\n        def my_selector(X):\n            return X.iloc[:, 0]\n\n        ct = make_column_transformer(\n            (StandardScaler(), my_selector),\n            remainder=\"passthrough\"\n        )\n        X = np.array([[1, 2], [3, 4]])\n        ct.fit_transform(X)\n\n    def test_fit_transform_with_pandas_dataframe(self):\n        df = pd.DataFrame({\"numerical_column\": [1, 2], \"categorical_column\": [\"A\", \"B\"]})\n        ct = make_column_transformer(\n            (StandardScaler(), [\"numerical_column\"]),\n            (OneHotEncoder(), [\"categorical_column\"])\n        )\n        ct.fit_transform(df)\n\n    def test_get_feature_names_out(self):\n        from sklearn.preprocessing import StandardScaler, OneHotEncoder\n        ct = make_column_transformer(\n            (StandardScaler(), [\"numerical_column\"]),\n            (OneHotEncoder(), [\"categorical_column\"])\n        )\n        X = np.array([[1, \"A\"], [2, \"B\"]])\n        ct.fit_transform(X)\n        feature_names_out = ct.get_feature_names_out()\n        self.assertEqual(feature_names_out, [\"numerical_column\", \"categorical_column_A\", \"categorical_column_B\"])\n\n    def test_get_feature_names_out_with_remainder(self):\n        from sklearn.preprocessing import StandardScaler\n        ct = make_column_transformer(\n            (StandardScaler(), [\"numerical_column\"]),\n            remainder=\"passthrough\"\n        )\n        X = np.array([[1, \"A\"], [2, \"B\"]])\n        ct.fit_transform(X)\n        feature_names_out = ct.get_feature_names_out()\n        self.assertEqual(feature_names_out, [\"numerical_column\"])\n\n    def test_get_feature_names_out_with_remainder_estimator(self):\n        from sklearn.preprocessing import StandardScaler\n        class MyRemainder(BaseEstimator, TransformerMixin):\n            def fit(self, X, y=None):\n                pass\n            def transform(self, X):\n                return X * 2\n        ct = make_column_transformer(\n            (StandardScaler(), [\"numerical_column\"]),\n            remainder=MyRemainder()\n        )\n        X = np.array([[1, \"A\"], [2, \"B\"]])\n        ct.fit_transform(X)\n        feature_names_out = ct.get_feature_names_out()\n        self.assertEqual(feature_names_out, [\"numerical_column\"])\n\n    def test_fit_transform_with_empty_transformer(self):\n        ct = make_column_transformer(\n            (StandardScaler(), [\"numerical_column\"]),\n            (FunctionTransformer(lambda x: x), [])\n        )\n        X = np.array([[1, 2], [3, 4]])\n        ct.fit_transform(X)\n\n    def test_fit_transform_with_empty_column_selection(self):\n        from sklearn.preprocessing import StandardScaler\n        ct = make_column_transformer(\n            (StandardScaler(), []),\n            remainder=\"passthrough\"\n        )\n        X = np.array([[1, 2], [3, 4]])\n        ct.fit_transform(X)\n\n    def test_fit_transform_with_invalid_column_selection(self):\n        with self.assertRaises(ValueError):\n            make_column_transformer(\n                (StandardScaler(), [\"numerical_column\", \"invalid_column\"])\n            )\n\n    def test_fit_transform_with_mixed_data_types(self):\n        X = np.array([[1, \"A\", True], [2, \"B\", False]])\n        ct = make_column_transformer(\n            (StandardScaler(), [\"numerical_column\"]),\n            (OneHotEncoder(), [\"categorical_column\"]),\n            (FunctionTransformer(lambda x: x), [\"boolean_column\"])\n        )\n        ct.fit_transform(X)\n\n    def test_fit_transform_with_sparse_data(self):\n        from sklearn.preprocessing import StandardScaler\n        X = pd.DataFrame({\"numerical_column\": [1, 2], \"categorical_column\": [\"A\", \"B\"]})\n        ct = make_column_transformer(\n            (StandardScaler(), [\"numerical_column\"]),\n            (OneHotEncoder(), [\"categorical_column\"])\n        )\n        ct.fit_transform(X)\n\n\n\n"], "sample_139": ["\nfrom sympy import ( Abs, acos, adjoint, arg, atan, atan2, conjugate, cos, DiracDelta, E, exp, expand, Expr, Function, Heaviside, I, im, log, nan, oo, pi, Rational, re, S, sign, sin, sqrt, Symbol, symbols, transpose, zoo, exp_polar, Piecewise, Interval, comp, Integral, Matrix, ImmutableMatrix, SparseMatrix, ImmutableSparseMatrix, MatrixSymbol, FunctionMatrix, Lambda, Derivative, Eq)\nfrom sympy.core.expr import unchanged\nfrom sympy.core.function import ArgumentIndexError\nfrom sympy.testing.pytest import XFAIL, raises\nfrom sympy import polar_lift, polarify\nfrom sympy import (exp_polar, polar_lift, exp, unpolarify, principal_branch)\nfrom sympy import gamma, erf, sin, tanh, uppergamma, Eq, Ne\nfrom sympy.abc import x\nfrom sympy import Matrix, simplify\nfrom sympy import (periodic_argument, unbranched_argument, oo, principal_branch, polar_lift, pi)\nfrom sympy import principal_branch\nfrom sympy import principal_branch, polar_lift, exp_polar\nfrom sympy import simplify\nfrom sympy.functions.elementary.complexes import unpolarify\n\ndef test_polar_lift():\n    from sympy import I\n    assert polar_lift(4) == 4*exp_polar(0)\n    assert polar_lift(-4) == 4*exp_polar(I*pi)\n    assert polar_lift(-I) == exp_polar(-I*pi/2)\n    assert polar_lift(4*x) == 4*polar_lift(x)\n    assert polar_lift(4*polar_lift(I)) == 4*polar_lift(I)\n    assert polar_lift(4*I) == 4*I\n    assert polar_lift(4*I + 2) == 4*I + 2\n    assert polar_lift(exp_polar(5*I*pi)) == exp_polar(5*I*pi)\n    assert polar_lift(exp_polar(5*I*pi)).is_polar is True\n    assert polar_lift(exp_polar(5*I*pi)).args[0].is_polar is True\n\ndef test_periodic_argument():\n    from sympy import exp, exp_polar, I, pi\n    assert periodic_argument(exp_polar(5*I*pi), 2*pi) == 0\n    assert periodic_argument(exp_polar(5*I*pi), pi) == 0\n    assert periodic_argument(exp_polar(5*I*pi), oo) == 5*pi\n    assert periodic_argument(exp_polar(5*I*pi), 2*pi).is_number is True\n    assert periodic_argument(exp_polar(5*I*pi), oo).is_number is False\n    assert periodic_argument(exp_polar(5*I*pi), 2*pi) == periodic_argument(exp_polar(5*I*pi), 2*pi)\n    assert periodic_argument(exp_polar(5*I*pi), 2*pi) != periodic_argument(exp_polar(5*I*pi + 2*pi), 2*pi)\n    assert periodic_argument(exp_polar(5*I*pi), 2*pi) == periodic_argument(exp_polar(5*I*pi + 2*pi), 2*pi)\n\ndef test_principal_branch():\n    from sympy import exp, exp_polar, I, pi\n    assert principal_branch(exp_polar(2*pi*I)*3, 2*pi) == 3*exp_polar(0)\n    assert principal_branch(exp_polar(2*pi*I)*3*x, 2*pi) == 3*principal_branch(x, 2*pi)\n    assert principal_branch(exp_polar(2*pi*I)*3*x, 2*pi).is_polar is True\n    assert principal_branch(exp_polar(2*pi*I)*3*x, 2*pi).args[0].is_polar is True\n    assert principal_branch(exp_polar(2*pi*I)*3*x, 2*pi) != principal_branch(exp_polar(2*pi*I)*3*x, pi)\n    assert principal_branch(exp_polar(2*pi*I)*3*x, 2*pi) == principal_branch(exp_polar(2*pi*I)*3*x, 2*pi)\n    assert principal_branch(exp_polar(2*pi*I)*3*x, 2*pi) != principal_branch(exp_polar(2*pi*I)*3*x, pi)\n\ndef test_unpolarify():\n    from sympy import I, exp, exp_polar\n    assert unpolarify(polar_lift(I + 2)) == 2 + I\n    assert unpolarify(sin(polar_lift(I + 7))) == sin(7 + I)\n    assert unpolarify(exp_polar(I*pi)) == exp(I*pi)\n    assert unpolarify(exp_polar(I*pi)).is_number is True\n    assert unpolarify(exp_polar(I*pi)).is_polar is False\n    assert unpolarify(polar_lift(exp_polar(I*pi))) == exp_polar(I*pi)\n\ndef test_unpolarify_subs():\n    from sympy import I, exp, exp_polar\n    x = Symbol('x')\n    assert unpolarify(polar_lift(I + 2), subs={x: 2}) == 2 + I\n    assert unpolarify(sin(polar_lift(I + 7)), subs={x: 2}) == sin(7 + I)\n    assert unpolarify(exp_polar(I*pi), subs={x: 2}) == exp(I*pi)\n\n\n\n"], "sample_56": ["\nfrom django.core.checks.templates import (\n    E001,\n    E002,\n    E003,\n    check_for_template_tags_with_the_same_name,\n    check_setting_app_dirs_loaders,\n    check_string_if_invalid_is_string,\n)\nfrom django.conf import settings\nfrom django.template.backends.django import get_template_tag_modules\nimport unittest\n\nclass TestTemplatesChecks(unittest.TestCase):\n\n    def test_check_setting_app_dirs_loaders(self):\n        settings.TEMPLATES = [\n            {\"APP_DIRS\": True, \"OPTIONS\": {\"loaders\": []}},\n            {\"APP_DIRS\": False, \"OPTIONS\": {\"loaders\": []}},\n            {\"APP_DIRS\": True, \"OPTIONS\": {\"loaders\": [\"a\", \"b\"]}},\n        ]\n        errors = check_setting_app_dirs_loaders(None, **{})\n        self.assertEqual(errors, [E001])\n\n        settings.TEMPLATES = [\n            {\"APP_DIRS\": False, \"OPTIONS\": {\"loaders\": []}},\n            {\"APP_DIRS\": False, \"OPTIONS\": {\"loaders\": [\"a\", \"b\"]}},\n        ]\n        errors = check_setting_app_dirs_loaders(None, **{})\n        self.assertEqual(errors, [])\n\n    def test_check_string_if_invalid_is_string(self):\n        settings.TEMPLATES = [\n            {\"OPTIONS\": {\"string_if_invalid\": \"abc\"}},\n            {\"OPTIONS\": {\"string_if_invalid\": 123}},\n            {\"OPTIONS\": {\"string_if_invalid\": True}},\n            {\"OPTIONS\": {\"string_if_invalid\": None}},\n        ]\n        errors = check_string_if_invalid_is_string(None, **{})\n        self.assertEqual(len(errors), 3)\n        self.assertEqual(errors[0].msg, E002.msg.format(123, \"int\"))\n        self.assertEqual(errors[1].msg, E002.msg.format(True, \"bool\"))\n        self.assertEqual(errors[2].msg, E002.msg.format(None, \"NoneType\"))\n\n    def test_check_for_template_tags_with_the_same_name(self):\n        get_template_tag_modules.return_value = [\n            (\"my_tags\", \"path/to/my_tags\"),\n            (\"another_tags\", \"path/to/another_tags\"),\n        ]\n        settings.TEMPLATES = [\n            {\"OPTIONS\": {\"libraries\": {\"my_tags\": \"path/to/my_tags\"}}},\n            {\"OPTIONS\": {\"libraries\": {\"another_tags\": \"path/to/another_tags\"}}},\n        ]\n        errors = check_for_template_tags_with_the_same_name(None, **{})\n        self.assertEqual(errors, [])\n\n        settings.TEMPLATES = [\n            {\"OPTIONS\": {\"libraries\": {\"my_tags\": \"path/to/my_tags\"}}},\n            {\"OPTIONS\": {\"libraries\": {\"my_tags\": \"path/to/my_tags2\"}}},\n        ]\n        errors = check_for_template_tags_with_the_same_name(None, **{})\n        self.assertEqual(\n            len(errors),\n            1,\n            \"Expected one error because 'my_tags' is used for multiple template tag modules\",\n        )\n        self.assertEqual(\n            errors[0].msg,\n            E003.msg.format(\n                repr(\"my_tags\"),\n                \", \".join(\n                    repr(item) for item in sorted(\n                        [\"path/to/my_tags\", \"path/to/my_tags2\"]\n                    )\n                ),\n            ),\n        )\n\n\n\n"], "sample_123": ["\nfrom sympy.core.numbers import (\n    S,\n    Integer,\n    Rational,\n    Float,\n    Complex,\n    ImaginaryUnit,\n    NaN,\n    Infinity,\n    NegativeInfinity,\n    Pi,\n    E,\n    Catalan,\n    EulerGamma,\n    GoldenRatio,\n    sympify,\n    _intcache,\n    mpf_norm,\n    comp,\n    mod_inverse,\n    igcd,\n    ilcm,\n    igcdex,\n    igcd2,\n    igcd_lehmer,\n)\nfrom sympy.abc import x, y\nfrom sympy.testing.pytest import raises\nfrom sympy.utilities.pytest import slow\nimport sympy\nimport random\n\ndef test_sympify():\n    assert sympify(1) == S.One\n    assert sympify(2.5) == Rational(5, 2)\n    assert sympify(1j) == S.ImaginaryUnit\n    assert sympify(1 + 2j) == 1 + 2*S.ImaginaryUnit\n    assert sympify(sympify(1)) == S.One\n    assert sympify(sympify(Rational(1, 2))) == Rational(1, 2)\n\ndef test_sympify_special_numbers():\n    assert sympify(pi) == S.Pi\n    assert sympify(E) == S.Exp1\n    assert sympify(oo) == Infinity\n    assert sympify('-oo') == NegativeInfinity\n    assert sympify(nan) == NaN\n\ndef test_sympify_functions():\n    assert sympify(sqrt(4)) == 2\n    assert sympify(log(1)) == 0\n    assert sympify(sin(pi/2)) == 1\n\ndef test_sympify_symbols():\n    assert sympify(x) == x\n    assert sympify(y) == y\n\ndef test_sympify_integers():\n    assert sympify(1) == S.One\n    assert sympify(-1) == S.NegativeOne\n    assert sympify(0) == S.Zero\n\ndef test_sympify_fractions():\n    assert sympify(1/2) == Rational(1, 2)\n    assert sympify(3/4) == Rational(3, 4)\n\ndef test_sympify_floats():\n    assert sympify(1.23) == Float(1.23)\n    assert sympify(3.14159) == Float(3.14159)\n\ndef test_sympify_complex():\n    assert sympify(1 + 2j) == 1 + 2*S.ImaginaryUnit\n    assert sympify(3 - 4j) == 3 - 4*S.ImaginaryUnit\n\ndef test_sympify_nan():\n    assert sympify(float('nan')) == NaN\n\ndef test_sympify_inf():\n    assert sympify(float('inf')) == Infinity\n    assert sympify('-inf') == NegativeInfinity\n\ndef test_sympify_errors():\n    with raises(TypeError):\n        sympify('abc')\n\ndef test_sympify_special_numbers_errors():\n    with raises(ValueError):\n        sympify('pi')\n\ndef test_sympify_functions_errors():\n    with raises(TypeError):\n        sympify(sqrt('abc'))\n\ndef test_sympify_symbols_errors():\n    with raises(TypeError):\n        sympify(1 + x)\n\ndef test_sympify_integers_errors():\n    with raises(TypeError):\n        sympify(1 + 'abc')\n\ndef test_sympify_fractions_errors():\n    with raises(TypeError):\n        sympify(1 + 'abc')\n\ndef test_sympify_floats_errors():\n    with raises(TypeError):\n        sympify(1 + 'abc')\n\ndef test_sympify_complex_errors():\n    with raises(TypeError):\n        sympify(1 + 'abc')\n\n\n\n"], "sample_24": ["\nfrom django.core.exceptions import (\n    FieldDoesNotExist,\n    AppRegistryNotReady,\n    ObjectDoesNotExist,\n    MultipleObjectsReturned,\n    SuspiciousOperation,\n    SuspiciousMultipartForm,\n    SuspiciousFileOperation,\n    DisallowedHost,\n    DisallowedRedirect,\n    TooManyFieldsSent,\n    RequestDataTooBig,\n    RequestAborted,\n    PermissionDenied,\n    ViewDoesNotExist,\n    MiddlewareNotUsed,\n    ImproperlyConfigured,\n    FieldError,\n    ValidationError,\n    NON_FIELD_ERRORS,\n    EmptyResultSet,\n    SynchronousOnlyOperation,\n)\n\n\ndef test_field_does_not_exist():\n    with pytest.raises(FieldDoesNotExist):\n        raise FieldDoesNotExist()\n\n\ndef test_app_registry_not_ready():\n    with pytest.raises(AppRegistryNotReady):\n        raise AppRegistryNotReady()\n\n\ndef test_object_does_not_exist():\n    with pytest.raises(ObjectDoesNotExist):\n        raise ObjectDoesNotExist()\n\n\ndef test_multiple_objects_returned():\n    with pytest.raises(MultipleObjectsReturned):\n        raise MultipleObjectsReturned()\n\n\ndef test_suspicious_operation():\n    with pytest.raises(SuspiciousOperation):\n        raise SuspiciousOperation()\n\n\ndef test_suspicious_multipart_form():\n    with pytest.raises(SuspiciousMultipartForm):\n        raise SuspiciousMultipartForm()\n\n\ndef test_suspicious_file_operation():\n    with pytest.raises(SuspiciousFileOperation):\n        raise SuspiciousFileOperation()\n\n\ndef test_disallowed_host():\n    with pytest.raises(DisallowedHost):\n        raise DisallowedHost()\n\n\ndef test_disallowed_redirect():\n    with pytest.raises(DisallowedRedirect):\n        raise DisallowedRedirect()\n\n\ndef test_too_many_fields_sent():\n    with pytest.raises(TooManyFieldsSent):\n        raise TooManyFieldsSent()\n\n\ndef test_request_data_too_big():\n    with pytest.raises(RequestDataTooBig):\n        raise RequestDataTooBig()\n\n\ndef test_request_aborted():\n    with pytest.raises(RequestAborted):\n        raise RequestAborted()\n\n\ndef test_permission_denied():\n    with pytest.raises(PermissionDenied):\n        raise PermissionDenied()\n\n\ndef test_view_does_not_exist():\n    with pytest.raises(ViewDoesNotExist):\n        raise ViewDoesNotExist()\n\n\ndef test_middleware_not_used():\n    with pytest.raises(MiddlewareNotUsed):\n        raise MiddlewareNotUsed()\n\n\ndef test_improperly_configured():\n    with pytest.raises(ImproperlyConfigured):\n        raise ImproperlyConfigured()\n\n\ndef test_field_error():\n    with pytest.raises(FieldError):\n        raise FieldError()\n\n\ndef test_validation_error():\n    with pytest.raises(ValidationError):\n        raise ValidationError(\"Invalid input\")\n\n\ndef test_validation_error_with_params():\n    with pytest.raises(ValidationError) as excinfo:\n        raise ValidationError(\"Invalid input\", code=\"invalid_data\", params={\"field\": \"value\"})\n    assert excinfo.value.params == {\"field\": \"value\"}\n\n\ndef test_validation_error_with_list_of_errors():\n    with pytest.raises(ValidationError) as excinfo:\n        raise ValidationError([\"Error 1\", \"Error 2\"])\n    assert excinfo.value.error_list == [\"Error 1\", \"Error 2\"]\n\n\ndef test_validation_error_with_dict_of_errors():\n    with pytest.raises(ValidationError) as excinfo:\n        raise ValidationError({\"field1\": [\"Error 1\", \"Error 2\"], \"field2\": \"Error 3\"})\n    assert excinfo.value.error_dict == {\"field1\": [\"Error 1\", \"Error 2\"], \"field2\": \"Error 3\"}\n\n\ndef test_empty_result_set():\n    with pytest.raises(EmptyResultSet):\n        raise EmptyResultSet()\n\n\ndef test_synchronous_only_operation():\n    with pytest.raises(SynchronousOnlyOperation):\n        raise SynchronousOnlyOperation()\n"], "sample_132": ["\nfrom sympy.geometry import Point, Point2D, Line, Circle, Polygon, Segment, convex_hull, intersection, centroid\nfrom sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\nfrom sympy.utilities.pytest import raises\nfrom sympy.utilities.iterables import subsets\nimport sympy\n\ndef test_idiff():\n    from sympy.abc import x, y, a\n    assert idiff(x**2 + y**2 - 4, y, x) == -x/y\n    assert idiff(x + a + y, y, x) == -1\n    assert idiff(x + a + y, [y, a], x) == -Derivative(a, x) - 1\n    assert idiff(x**2 + y**2 - 4, y, x, 2).simplify() == -(x**2 + y**2)/y**3\n\ndef test_closest_points():\n    p1 = Point2D(0, 0)\n    p2 = Point2D(3, 0)\n    p3 = Point2D(3, 4)\n    p4 = Point2D(0, 4)\n    assert closest_points(p1, p2, p3, p4) == {(p1, p2)}\n    assert closest_points(p1, p2) == {(p1, p2)}\n\ndef test_farthest_points():\n    p1 = Point2D(0, 0)\n    p2 = Point2D(3, 0)\n    p3 = Point2D(3, 4)\n    p4 = Point2D(0, 4)\n    assert farthest_points(p1, p2, p3, p4) == {(p1, p3), (p2, p4)}\n    assert farthest_points(p1, p2) == {(p1, p2)}\n\ndef test_are_coplanar():\n    from sympy.geometry.line import Line3D\n    from sympy.geometry.point import Point3D\n    p1 = Point3D(1, 2, 3)\n    p2 = Point3D(4, 5, 6)\n    p3 = Point3D(7, 8, 9)\n    l = Line3D(p1, p2)\n    assert are_coplanar(p1, p2, p3) is False\n    assert are_coplanar(l, p3) is True\n\ndef test_are_similar():\n    from sympy.geometry import Point, Circle, Triangle\n    c1, c2 = Circle(Point(0, 0), 4), Circle(Point(1, 4), 3)\n    t1 = Triangle(Point(0, 0), Point(1, 0), Point(0, 1))\n    t2 = Triangle(Point(0, 0), Point(2, 0), Point(0, 2))\n    t3 = Triangle(Point(0, 0), Point(3, 0), Point(0, 1))\n    assert are_similar(t1, t2) is True\n    assert are_similar(t1, t3) is False\n    assert are_similar(c1, c2) is False\n\ndef test_centroid():\n    from sympy.geometry import Point, Segment, Polygon\n    p = Point(0, 0)\n    q = Point(2, 0)\n    r = Point(2, 2)\n    s = Point(0, 2)\n    p1 = Polygon((p, q, r, s))\n    p2 = Segment(p, q)\n    p3 = Segment(q, r)\n    assert centroid(p, q, r, s) == Point2D(2/3, 2/3)\n    assert centroid(p1) == Point2D(2/3, 2/3)\n    assert centroid(p2, p3) == Point2D(1, 1)\n\ndef test_convex_hull():\n    from sympy.geometry import Point, convex_hull\n    points = [(1, 1), (1, 2), (3, 1), (-5, 2), (15, 4)]\n    hull = convex_hull(*points)\n    assert hull.args == (Point2D(-5, 2), Point2D(1, 1), Point2D(3, 1), Point2D(15, 4))\n\ndef test_intersection():\n    from sympy.geometry import Point, Circle, Ray\n    c = Circle((0, 1), 1)\n    right = Ray((0, 0), (1, 0))\n    up = Ray((0, 0), (0, 1))\n    assert intersection(c, right, up) == [Point2D(0, 0)]\n    assert intersection(c, right, up, pairwise=True) == [Point2D(0, 0), Point2D(0, 2)]\n    left = Ray((1, 0), (0, 0))\n    assert intersection(right, left) == [Segment2D(Point2D(0, 0), Point2D(1, 0))]\n\ndef test_ordered_points():\n    p1 = Point2D(1, 2)\n    p2 = Point2D(3, 4)\n    p3 = Point2D(5, 6)\n    assert _ordered_points((p1, p2, p3)) == (p1, p2, p3)\n    assert _ordered_points((p3, p2, p1)) == (p1, p2, p3)\n\n\n\n"], "sample_23": ["\nfrom django.db import DatabaseError, NotSupportedError, connection\nfrom django.db.models import Exists, F, IntegerField, OuterRef, Value\nfrom django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\nfrom django.test.utils import override_settings\nfrom django.utils.functional import cached_property\nfrom django.utils.timezone import now\n\nfrom django.db.models.query import (\n    Prefetch,\n    RelatedPopulator,\n    get_related_populators,\n    prefetch_related_objects,\n    normalize_prefetch_lookups,\n)\n\nclass QuerySetTests(TestCase):\n    def test_prefetch_related_objects(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=100)\n            books = models.ManyToManyField('Book', related_name='authors')\n\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField('Author', related_name='books')\n\n        author1 = Author.objects.create(name='Author 1')\n        author2 = Author.objects.create(name='Author 2')\n        book1 = Book.objects.create(title='Book 1')\n        book2 = Book.objects.create(title='Book 2')\n        author1.books.add(book1)\n        author2.books.add(book2)\n\n        books = Book.objects.all()\n\n        # Pre-fetch related authors\n        prefetch_related_objects(books, Prefetch('authors'))\n\n        # Check if authors are populated\n        for book in books:\n            self.assertIsNotNone(book.authors.all())\n\n    def test_normalize_prefetch_lookups(self):\n        lookups = [\n            'authors',\n            Prefetch('authors'),\n            'authors__name',\n            Prefetch('authors__name'),\n        ]\n        normalized_lookups = normalize_prefetch_lookups(lookups)\n        self.assertEqual(len(normalized_lookups), 4)\n        self.assertIsInstance(normalized_lookups[0], str)\n        self.assertIsInstance(normalized_lookups[1], Prefetch)\n        self.assertIsInstance(normalized_lookups[2], str)\n        self.assertIsInstance(normalized_lookups[3], Prefetch)\n\n    def test_get_related_populators(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=100)\n            books = models.ManyToManyField('Book', related_name='authors')\n\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField('Author', related_name='books')\n\n        klass_info = {\n            'select_fields': [(1, 'name'), (2, 'title')],\n            'from_parent': True,\n            'model': Author,\n            'related_klass_infos': [\n                {\n                    'select_fields': [(1, 'title')],\n                    'from_parent': False,\n                    'model': Book,\n                }\n            ],\n            'local_setter': lambda x, y: None,\n            'remote_setter': lambda x, y: None,\n        }\n        related_populators = get_related_populators(klass_info, [], connection.db)\n        self.assertEqual(len(related_populators), 1)\n        self.assertIsInstance(related_populators[0], RelatedPopulator)\n\n"], "sample_4": ["\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom django.db import close_old_connections\nfrom django.http import (\n    BadHeaderError,\n    HttpResponse,\n    HttpResponseNotAllowed,\n    HttpResponseNotModified,\n    HttpResponsePermanentRedirect,\n    HttpResponseRedirect,\n    JsonResponse,\n    QueryDict,\n    SimpleCookie,\n    StreamingHttpResponse,\n    parse_cookie,\n)\nfrom django.test import TestCase\nfrom django.utils.encoding import iri_to_uri\nfrom django.utils.http import http_date\nimport datetime\nimport json\nimport os\nimport re\nimport sys\nimport time\nfrom urllib.parse import quote, urlparse\n\nclass HttpResponseTests(TestCase):\n\n    def test_basic_response(self):\n        response = HttpResponse(\"Hello, world!\")\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content, b\"Hello, world!\")\n        self.assertEqual(response['Content-Type'], 'text/html; charset=utf-8')\n\n    def test_response_with_content_type(self):\n        response = HttpResponse(\"Hello, world!\", content_type='text/plain')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content, b\"Hello, world!\")\n        self.assertEqual(response['Content-Type'], 'text/plain')\n\n    def test_response_with_charset(self):\n        response = HttpResponse(\"Hello, world!\", charset='utf-8')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content, b\"Hello, world!\")\n        self.assertEqual(response['Content-Type'], 'text/html; charset=utf-8')\n\n    def test_response_with_reason_phrase(self):\n        response = HttpResponse(reason_phrase=\"OK\")\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.reason_phrase, \"OK\")\n\n    def test_response_with_headers(self):\n        response = HttpResponse()\n        response['Content-Type'] = 'text/plain'\n        response['X-Custom-Header'] = 'value'\n        self.assertEqual(response['Content-Type'], 'text/plain')\n        self.assertEqual(response['X-Custom-Header'], 'value')\n\n    def test_response_with_multiple_headers(self):\n        response = HttpResponse()\n        response['Content-Type'] = 'text/plain'\n        response['X-Custom-Header'] = 'value1'\n        response['X-Custom-Header'] = 'value2'\n        self.assertEqual(response['Content-Type'], 'text/plain')\n        self.assertEqual(response['X-Custom-Header'], 'value2')\n\n    def test_response_with_invalid_header_value(self):\n        with self.assertRaises(BadHeaderError):\n            response = HttpResponse()\n            response['Content-Type'] = 'text/plain\\n'\n\n    def test_response_with_newlines_in_header_value(self):\n        response = HttpResponse()\n        response['Content-Type'] = 'text/plain\\r\\n'\n        with self.assertRaises(BadHeaderError):\n            response['Content-Type'] = 'text/plain\\n'\n\n    def test_response_with_set_cookie(self):\n        response = HttpResponse()\n        response.set_cookie('name', 'value')\n        self.assertEqual(response.cookies['name'].value, 'value')\n\n    def test_response_with_set_signed_cookie(self):\n        response = HttpResponse()\n        response.set_signed_cookie('name', 'value', salt='secret')\n        self.assertEqual(response.cookies['name'].value, 'value')\n\n    def test_response_with_delete_cookie(self):\n        response = HttpResponse()\n        response.set_cookie('name', 'value')\n        response.delete_cookie('name')\n        self.assertNotIn('name', response.cookies)\n\n    def test_response_with_redirect(self):\n        response = HttpResponseRedirect('/another_page/')\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response['Location'], '/another_page/')\n\n    def test_response_with_permanent_redirect(self):\n        response = HttpResponsePermanentRedirect('/another_page/')\n        self.assertEqual(response.status_code, 301)\n        self.assertEqual(response['Location'], '/another_page/')\n\n    def test_response_with_not_modified(self):\n        response = HttpResponseNotModified()\n        self.assertEqual(response.status_code, 304)\n        self.assertEqual(response.content, b'')\n\n    def test_response_with_bad_request(self):\n        response = HttpResponseBadRequest()\n        self.assertEqual(response.status_code, 400)\n\n    def test_response_with_not_found(self):\n        response = HttpResponseNotFound()\n        self.assertEqual(response.status_code, 404)\n\n    def test_response_with_forbidden(self):\n        response = HttpResponseForbidden()\n        self.assertEqual(response.status_code, 403)\n\n    def test_response_with_not_allowed(self):\n        response = HttpResponseNotAllowed(['GET', 'POST'])\n        self.assertEqual(response.status_code, 405)\n        self.assertEqual(response['Allow'], 'GET, POST')\n\n    def test_response_with_gone(self):\n        response = HttpResponseGone()\n        self.assertEqual(response.status_code, 410)\n\n    def test_response_with_server_error(self):\n        response = HttpResponseServerError()\n        self.assertEqual(response.status_code, 500)\n\n    def test_response_streaming(self):\n        response = StreamingHttpResponse(iter([b'chunk 1', b'chunk 2']))\n        self.assertEqual(list(response), [b'chunk 1', b'chunk 2'])\n\n    def test_response_file(self):\n        with open('test.txt', 'w') as f:\n            f.write('This is a test file.')\n        response = FileResponse(open('test.txt', 'rb'))\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content, b'This is a test file.')\n        os.remove('test.txt')\n\n    def test_response_json(self):\n        data = {'key': 'value'}\n        response = JsonResponse(data)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content, json.dumps(data).encode('utf-8'))\n\n\n\n"], "sample_140": ["\nfrom sympy.physics.vector import dynamicsymbols, Point, ReferenceFrame\nfrom sympy.physics.vector import init_vprinting\nfrom sympy import symbols, sin, cos, pi\nimport numpy as np\ninit_vprinting(pretty_print=False)\n\ndef test_point_init():\n    p = Point('p')\n    assert p.name == 'p'\n    assert p._pos_dict == {}\n    assert p._vel_dict == {}\n    assert p._acc_dict == {}\n\ndef test_point_str():\n    p = Point('p')\n    assert str(p) == 'p'\n\ndef test_point_pos_from():\n    N = ReferenceFrame('N')\n    p1 = Point('p1')\n    p2 = Point('p2')\n    p1.set_pos(p2, 10 * N.x)\n    assert p1.pos_from(p2) == 10 * N.x\n\ndef test_point_set_pos():\n    N = ReferenceFrame('N')\n    p1 = Point('p1')\n    p2 = Point('p2')\n    p1.set_pos(p2, 10 * N.x)\n    assert p1._pos_dict[p2] == 10 * N.x\n    assert p2._pos_dict[p1] == -10 * N.x\n\ndef test_point_set_vel():\n    N = ReferenceFrame('N')\n    p = Point('p')\n    p.set_vel(N, 10 * N.x)\n    assert p._vel_dict[N] == 10 * N.x\n\ndef test_point_vel():\n    N = ReferenceFrame('N')\n    p = Point('p')\n    p.set_vel(N, 10 * N.x)\n    assert p.vel(N) == 10 * N.x\n\ndef test_point_acc():\n    N = ReferenceFrame('N')\n    p = Point('p')\n    p.set_acc(N, 10 * N.x)\n    assert p.acc(N) == 10 * N.x\n\ndef test_point_a1pt_theory():\n    N = ReferenceFrame('N')\n    B = ReferenceFrame('B')\n    B.set_ang_vel(N, 5 * B.y)\n    O = Point('O')\n    P = O.locatenew('P', 10 * B.x)\n    O.set_vel(N, 0)\n    P.set_vel(B, 1 * B.x + 2 * B.y)\n    P.a1pt_theory(O, N, B)\n    assert P.acc(N) == (-25 * 10 + 2) * B.x + 2 * P.acc(B) - 10 * P.vel(B).dt(N) * B.z\n\ndef test_point_v1pt_theory():\n    N = ReferenceFrame('N')\n    B = ReferenceFrame('B')\n    B.set_ang_vel(N, 5 * B.y)\n    O = Point('O')\n    P = O.locatenew('P', 10 * B.x)\n    O.set_vel(N, 0)\n    P.set_vel(B, 1 * B.x + 2 * B.y)\n    P.v1pt_theory(O, N, B)\n    assert P.vel(N) == P.vel(B) + O.vel(N) + B.ang_vel_in(N) * P.pos_from(O)\n\ndef test_point_a2pt_theory():\n    N = ReferenceFrame('N')\n    B = N.orientnew('B', 'Axis', [pi/2, N.z])\n    O = Point('O')\n    P = O.locatenew('P', 10 * B.x)\n    O.set_acc(N, 10 * N.x)\n    P.a2pt_theory(O, N, B)\n    assert P.acc(N) == O.acc(N) + B.ang_vel_in(N) * P.pos_from(O) + (B.ang_acc_in(N) * P.pos_from(O))\n\ndef test_point_v2pt_theory():\n    N = ReferenceFrame('N')\n    B = N.orientnew('B', 'Axis', [pi/2, N.z])\n    O = Point('O')\n    P = O.locatenew('P', 10 * B.x)\n    O.set_vel(N, 10 * N.x)\n    P.v2pt_theory(O, N, B)\n    assert P.vel(N) == O.vel(N) + B.ang_vel_in(N) * P.pos_from(O)\n\n\n\n"], "sample_0": ["\nfrom django.test import TestCase\nfrom django.forms.widgets import (\n    CheckboxInput,\n    DateInput,\n    DateTimeInput,\n    FileInput,\n    HiddenInput,\n    NullBooleanSelect,\n    RadioSelect,\n    Select,\n    SelectMultiple,\n    TextInput,\n    TimeInput,\n    ClearableFileInput,\n    SplitDateTimeWidget,\n    SplitHiddenDateTimeWidget,\n    SelectDateWidget,\n)\nfrom django.utils.encoding import force_text\nfrom django.utils.html import escape\nfrom django.utils.timezone import now\nfrom django.utils.translation import gettext_lazy as _\n\nclass WidgetTests(TestCase):\n\n    def test_checkbox_input(self):\n        widget = CheckboxInput()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/checkbox.html')\n        self.assertEqual(widget.input_type, 'checkbox')\n\n    def test_date_input(self):\n        widget = DateInput()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/date.html')\n        self.assertEqual(widget.input_type, 'text')\n        self.assertEqual(widget.format_key, 'DATE_INPUT_FORMATS')\n\n    def test_datetime_input(self):\n        widget = DateTimeInput()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/datetime.html')\n        self.assertEqual(widget.input_type, 'text')\n        self.assertEqual(widget.format_key, 'DATETIME_INPUT_FORMATS')\n\n    def test_file_input(self):\n        widget = FileInput()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/file.html')\n        self.assertEqual(widget.input_type, 'file')\n        self.assertEqual(widget.needs_multipart_form, True)\n\n    def test_hidden_input(self):\n        widget = HiddenInput()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/hidden.html')\n        self.assertEqual(widget.input_type, 'hidden')\n\n    def test_null_boolean_select(self):\n        widget = NullBooleanSelect()\n        self.assertEqual(widget.choices, [\n            ('unknown', _('Unknown')),\n            ('true', _('Yes')),\n            ('false', _('No')),\n        ])\n\n    def test_radio_select(self):\n        widget = RadioSelect()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/radio.html')\n        self.assertEqual(widget.input_type, 'radio')\n\n    def test_select(self):\n        widget = Select()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/select.html')\n        self.assertEqual(widget.input_type, 'select')\n\n    def test_select_multiple(self):\n        widget = SelectMultiple()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/select.html')\n        self.assertEqual(widget.input_type, 'select')\n        self.assertEqual(widget.allow_multiple_selected, True)\n\n    def test_text_input(self):\n        widget = TextInput()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/text.html')\n        self.assertEqual(widget.input_type, 'text')\n\n    def test_time_input(self):\n        widget = TimeInput()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/time.html')\n        self.assertEqual(widget.input_type, 'text')\n        self.assertEqual(widget.format_key, 'TIME_INPUT_FORMATS')\n\n    def test_clearable_file_input(self):\n        widget = ClearableFileInput()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/clearable_file.html')\n        self.assertEqual(widget.input_type, 'file')\n        self.assertEqual(widget.needs_multipart_form, True)\n\n    def test_split_datetime_widget(self):\n        widget = SplitDateTimeWidget()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/splitdatetime.html')\n        self.assertEqual(len(widget.widgets), 2)\n        self.assertEqual(type(widget.widgets[0]), DateInput)\n        self.assertEqual(type(widget.widgets[1]), TimeInput)\n\n    def test_split_hidden_datetime_widget(self):\n        widget = SplitHiddenDateTimeWidget()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/splithiddendatetime.html')\n        self.assertEqual(len(widget.widgets), 2)\n        self.assertEqual(type(widget.widgets[0]), HiddenInput)\n        self.assertEqual(type(widget.widgets[1]), HiddenInput)\n\n    def test_select_date_widget(self):\n        widget = SelectDateWidget()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/select_date.html')\n        self.assertEqual(len(widget.widgets), 3)\n        self.assertEqual(type(widget.widgets[0]), Select)\n        self.assertEqual(type(widget.widgets[1]), Select)\n        self.assertEqual(type(widget.widgets[2]), Select)\n\n"], "sample_44": ["\nimport unittest\nfrom django.forms.models import ModelChoiceField, ModelMultipleChoiceField, InlineForeignKeyField, ModelChoiceIterator, ModelChoiceIteratorValue\nfrom django.db import models\nfrom django.forms import ModelForm, ChoiceField, Select, SelectMultiple, HiddenInput\nfrom django.utils.translation import gettext_lazy as _\n\nclass Article(models.Model):\n    title = models.CharField(max_length=200)\n    author = models.ForeignKey('Author', on_delete=models.CASCADE)\n    category = models.ForeignKey('Category', on_delete=models.CASCADE)\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\nclass Category(models.Model):\n    name = models.CharField(max_length=50)\n\nclass Book(models.Model):\n    title = models.CharField(max_length=200)\n    author = models.ForeignKey('Author', on_delete=models.CASCADE)\n\nclass Writer(models.Model):\n    name = models.CharField(max_length=100)\n\nclass TestModelChoiceField(unittest.TestCase):\n\n    def test_modelchoicefield_queryset(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        self.assertIsInstance(field, ModelChoiceField)\n        self.assertEqual(field.queryset, Article.objects.all().values_list('author_id', flat=True))\n\n    def test_modelchoicefield_empty_label(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        self.assertEqual(field.empty_label, '')\n\n    def test_modelchoicefield_empty_label_with_value(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        field.empty_label = '---------'\n        self.assertEqual(field.empty_label, '---------')\n\n    def test_modelchoicefield_to_field_name(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        self.assertEqual(field.to_field_name, 'id')\n\n    def test_modelchoicefield_to_field_name_custom(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n                to_field_name = 'name'\n\n        field = MyForm().fields['author']\n        self.assertEqual(field.to_field_name, 'name')\n\n    def test_modelchoicefield_limit_choices_to(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        self.assertEqual(field.limit_choices_to, None)\n\n    def test_modelchoicefield_limit_choices_to_callable(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        def get_authors():\n            return Author.objects.filter(name__startswith='A')\n\n        field = MyForm().fields['author']\n        field.limit_choices_to = get_authors\n        self.assertEqual(field.limit_choices_to(), Author.objects.filter(name__startswith='A'))\n\n    def test_modelchoicefield_label_from_instance(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        author = Author(name='John Doe')\n        self.assertEqual(field.label_from_instance(author), 'John Doe')\n\n    def test_modelchoicefield_prepare_value(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        author = Author(name='John Doe')\n        self.assertEqual(field.prepare_value(author), author.id)\n\n    def test_modelchoicefield_to_python(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        author = Author(name='John Doe')\n        self.assertEqual(field.to_python(author.id), author)\n\n    def test_modelchoicefield_to_python_invalid_pk(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        with self.assertRaises(ValidationError):\n            field.to_python(12345)\n\n    def test_modelchoicefield_to_python_empty_value(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        self.assertEqual(field.to_python(''), None)\n\n    def test_modelchoicefield_validate(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        author = Author(name='John Doe')\n        self.assertEqual(field.validate(author.id), author.id)\n\n    def test_modelchoicefield_validate_invalid_value(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        with self.assertRaises(ValidationError):\n            field.validate(12345)\n\n    def test_modelchoicefield_has_changed(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        initial = None\n        data = Author(name='John Doe').id\n        self.assertTrue(field.has_changed(initial, data))\n\n    def test_modelchoicefield_has_changed_same_value(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        initial = Author(name='John Doe').id\n        data = Author(name='John Doe').id\n        self.assertFalse(field.has_changed(initial, data))\n\n    def test_modelchoicefield_has_changed_disabled(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['author']\n\n        field = MyForm().fields['author']\n        field.disabled = True\n        initial = Author(name='John Doe').id\n        data = Author(name='John Doe').id\n        self.assertFalse(field.has_changed(initial, data))\n\n\n\nclass TestModelMultipleChoiceField(unittest.TestCase):\n\n    def test_modelmultiplechoicefield_queryset(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        field = MyForm().fields['authors']\n        self.assertIsInstance(field, ModelMultipleChoiceField)\n        self.assertEqual(field.queryset, Article.objects.all().values_list('author_id', flat=True))\n\n    def test_modelmultiplechoicefield_empty_label(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        field = MyForm().fields['authors']\n        self.assertEqual(field.empty_label, '')\n\n    def test_modelmultiplechoicefield_empty_label_with_value(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        field = MyForm().fields['authors']\n        field.empty_label = '---------'\n        self.assertEqual(field.empty_label, '---------')\n\n    def test_modelmultiplechoicefield_to_field_name(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        field = MyForm().fields['authors']\n        self.assertEqual(field.to_field_name, 'id')\n\n    def test_modelmultiplechoicefield_to_field_name_custom(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n                to_field_name = 'name'\n\n        field = MyForm().fields['authors']\n        self.assertEqual(field.to_field_name, 'name')\n\n    def test_modelmultiplechoicefield_limit_choices_to(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        field = MyForm().fields['authors']\n        self.assertEqual(field.limit_choices_to, None)\n\n    def test_modelmultiplechoicefield_limit_choices_to_callable(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        def get_authors():\n            return Author.objects.filter(name__startswith='A')\n\n        field = MyForm().fields['authors']\n        field.limit_choices_to = get_authors\n        self.assertEqual(field.limit_choices_to(), Author.objects.filter(name__startswith='A'))\n\n    def test_modelmultiplechoicefield_label_from_instance(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        field = MyForm().fields['authors']\n        authors = [Author(name='John Doe'), Author(name='Jane Doe')]\n        self.assertEqual(field.label_from_instance(authors), 'John Doe, Jane Doe')\n\n    def test_modelmultiplechoicefield_prepare_value(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        field = MyForm().fields['authors']\n        authors = [Author(name='John Doe'), Author(name='Jane Doe')]\n        self.assertEqual(field.prepare_value(authors), [Author(name='John Doe').id, Author(name='Jane Doe').id]\n\n    def test_modelmultiplechoicefield_to_python(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        field = MyForm().fields['authors']\n        authors = [Author(name='John Doe').id, Author(name='Jane Doe').id\n        self.assertEqual(field.to_python(authors), [Author(name='John Doe'), Author(name='Jane Doe')]\n\n    def test_modelmultiplechoicefield_to_python_invalid_value(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        field = MyForm().fields['authors']\n        with self.assertRaises(ValidationError):\n            field.to_python([12345])\n\n    def test_modelmultiplechoicefield_validate(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        field = MyForm().fields['authors']\n        authors = [Author(name='John Doe').id, Author(name='Jane Doe').id\n        self.assertEqual(field.validate(authors), authors)\n\n    def test_modelmultiplechoicefield_validate_invalid_value(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        field = MyForm().fields['authors']\n        with self.assertRaises(ValidationError):\n            field.validate([12345])\n\n    def test_modelmultiplechoicefield_has_changed(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        field = MyForm().fields['authors']\n        initial = None\n        data = [Author(name='John Doe').id\n        self.assertTrue(field.has_changed(initial, data))\n\n    def test_modelmultiplechoicefield_has_changed_same_value(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        field = MyForm().fields['authors']\n        initial = [Author(name='John Doe').id\n        data = [Author(name='John Doe').id\n        self.assertFalse(field.has_changed(initial, data))\n\n    def test_modelmultiplechoicefield_has_changed_disabled(self):\n        class MyForm(ModelForm):\n            class Meta:\n                model = Article\n                fields = ['authors']\n\n        field = MyForm().fields['authors']\n        field.disabled = True\n        initial = [Author(name='John Doe').id\n        data = [Author(name='John Doe').id\n        self.assertFalse(field.has_changed(initial, data)\n\n\n\n"], "sample_6": ["\nimport unittest\n\nfrom django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator\nfrom django.core.exceptions import ValidationError\n\nclass TestUsernameValidators(unittest.TestCase):\n\n    def test_ascii_username_validator(self):\n        validator = ASCIIUsernameValidator()\n        self.assertEqual(validator.regex, r'^[\\w.@+-]+\\Z')\n        self.assertEqual(validator.message, _(\n            'Enter a valid username. This value may contain only English letters, '\n            'numbers, and @/./+/-/_ characters.'\n        ))\n        self.assertEqual(validator.flags, re.ASCII)\n\n        self.assertTrue(validator.validate('johndoe'))\n        self.assertTrue(validator.validate('john.doe'))\n        self.assertTrue(validator.validate('john_doe'))\n        self.assertTrue(validator.validate('john+doe'))\n        self.assertTrue(validator.validate('john@doe'))\n\n        with self.assertRaises(ValidationError):\n            validator.validate('john!doe')  # Invalid character\n\n        with self.assertRaises(ValidationError):\n            validator.validate('john\\x80doe')  # Non-ASCII character\n\n    def test_unicode_username_validator(self):\n        validator = UnicodeUsernameValidator()\n        self.assertEqual(validator.regex, r'^[\\w.@+-]+\\Z')\n        self.assertEqual(validator.message, _(\n            'Enter a valid username. This value may contain only letters, '\n            'numbers, and @/./+/-/_ characters.'\n        ))\n        self.assertEqual(validator.flags, 0)\n\n        self.assertTrue(validator.validate('johndoe'))\n        self.assertTrue(validator.validate('john.doe'))\n        self.assertTrue(validator.validate('john_doe'))\n        self.assertTrue(validator.validate('john+doe'))\n        self.assertTrue(validator.validate('john@doe'))\n        self.assertTrue(validator.validate('\u4f60\u597d\u4e16\u754c'))  # Unicode characters\n\n        with self.assertRaises(ValidationError):\n            validator.validate('john!doe')  # Invalid character\n\n\n\n"], "sample_60": ["\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    serializer_factory,\n    Serializer,\n)\nfrom django.db import models\nfrom django.utils.functional import LazyObject\nfrom django.utils.version import PY311\nfrom unittest import mock\n\nimport datetime\nimport decimal\nimport enum\nimport functools\nimport os\nimport pathlib\nimport re\nimport uuid\nfrom typing import Any, Dict, List, Tuple, Set\n\nclass TestSerializer(object):\n    def test_serializer_factory_simple_types(self):\n        for value in [\n            123,\n            True,\n            False,\n            \"hello\",\n            None,\n            datetime.date(2023, 10, 26),\n            datetime.timedelta(days=1),\n            decimal.Decimal(\"1.23\"),\n            uuid.UUID(\"123e4567-e89b-12d3-a456-426655440000\"),\n            pathlib.Path(\"/tmp/test.txt\"),\n            os.PathLike(\"/tmp/test.txt\"),\n        ]:\n            serializer = serializer_factory(value)\n            serializer.serialize()\n\n    def test_serializer_factory_collections(self):\n        for value in [\n            list([1, 2, 3]),\n            tuple([1, 2, 3]),\n            set([1, 2, 3]),\n            frozenset([1, 2, 3]),\n            dict([(\"a\", 1), (\"b\", 2)]),\n        ]:\n            serializer = serializer_factory(value)\n            serializer.serialize()\n\n    def test_serializer_factory_models(self):\n        class MyModel(models.Model):\n            pass\n\n        serializer = serializer_factory(MyModel)\n        serializer.serialize()\n\n        class MyManager(models.Manager):\n            pass\n\n        serializer = serializer_factory(MyManager())\n        serializer.serialize()\n\n    def test_serializer_factory_operations(self):\n        from django.db.migrations.operations.base import Operation\n\n        class MyOperation(Operation):\n            pass\n\n        serializer = serializer_factory(MyOperation())\n        serializer.serialize()\n\n    def test_serializer_factory_types(self):\n        serializer = serializer_factory(int)\n        serializer.serialize()\n\n        serializer = serializer_factory(str)\n        serializer.serialize()\n\n        serializer = serializer_factory(type(None))\n        serializer.serialize()\n\n    def test_serializer_factory_functools_partial(self):\n        @functools.partial\n        def my_func(a, b):\n            return a + b\n\n        serializer = serializer_factory(my_func)\n        serializer.serialize()\n\n    def test_serializer_factory_functools_partialmethod(self):\n        class MyClass:\n            @functools.partialmethod\n            def my_func(self, a, b):\n                return a + b\n\n        serializer = serializer_factory(MyClass().my_func)\n        serializer.serialize()\n\n    def test_serializer_factory_deconstructable(self):\n        class MyDeconstructable:\n            def deconstruct(self):\n                return \"my_name\", \"my_module\", [], {}\n\n        serializer = serializer_factory(MyDeconstructable())\n        serializer.serialize()\n\n    def test_serializer_factory_lazy_object(self):\n        class MyLazyObject(LazyObject):\n            def __init__(self, value):\n                super().__init__(value)\n\n        value = MyLazyObject(123)\n        serializer = serializer_factory(value)\n        serializer.serialize()\n\n    def test_serializer_factory_promise(self):\n        from django.utils.functional import Promise\n\n        value = Promise(123)\n        serializer = serializer_factory(value)\n        serializer.serialize()\n\n    def test_serializer_factory_unknown_type(self):\n        with self.assertRaises(ValueError):\n            serializer_factory(object())\n\n\n\n"], "sample_13": ["\nfrom django.utils.http import (\n    base36_to_int,\n    escape_leading_slashes,\n    http_date,\n    int_to_base36,\n    is_safe_url,\n    is_same_domain,\n    parse_etags,\n    parse_http_date,\n    quote_etag,\n    url_has_allowed_host_and_scheme,\n    urlencode,\n    urlquote,\n    urlquote_plus,\n    urlsafe_base64_decode,\n    urlsafe_base64_encode,\n    urlunquote,\n    urlunquote_plus,\n)\nimport unittest\nfrom datetime import datetime\nfrom urllib.parse import urlencode as original_urlencode\n\n\nclass HttpUtilsTests(unittest.TestCase):\n\n    def test_base36_to_int(self):\n        self.assertEqual(base36_to_int(\"0\"), 0)\n        self.assertEqual(base36_to_int(\"1\"), 1)\n        self.assertEqual(base36_to_int(\"12\"), 18)\n        self.assertEqual(base36_to_int(\"abc\"), 97 * 36**2 + 98 * 36**1 + 99)\n        self.assertEqual(base36_to_int(\"123456789ABCDEF\"), 123456789 * 36**0 + 10 * 36**1 + 11 * 36**2 + 12 * 36**3 + 13 * 36**4 + 14 * 36**5 + 15 * 36**6 + 16 * 36**7 + 17 * 36**8 + 18 * 36**9 + 19 * 36**10 + 20 * 36**11 + 21 * 36**12)\n        with self.assertRaises(ValueError):\n            base36_to_int(\"123456789ABCDEFG\")\n\n    def test_int_to_base36(self):\n        self.assertEqual(int_to_base36(0), \"0\")\n        self.assertEqual(int_to_base36(1), \"1\")\n        self.assertEqual(int_to_base36(18), \"12\")\n        self.assertEqual(int_to_base36(97 * 36**2 + 98 * 36**1 + 99), \"abc\")\n        self.assertEqual(int_to_base36(123456789 * 36**0 + 10 * 36**1 + 11 * 36**2 + 12 * 36**3 + 13 * 36**4 + 14 * 36**5 + 15 * 36**6 + 16 * 36**7 + 17 * 36**8 + 18 * 36**9 + 19 * 36**10 + 20 * 36**11 + 21 * 36**12), \"123456789ABCDEF\")\n        with self.assertRaises(ValueError):\n            int_to_base36(-1)\n\n    def test_http_date(self):\n        self.assertEqual(http_date(), http_date(datetime.now().timestamp()))\n        self.assertEqual(http_date(datetime.now().timestamp()), http_date(datetime.now().timestamp()))\n        self.assertEqual(http_date(1678886400), \"Tue, 14 Mar 2023 00:00:00 GMT\")\n\n    def test_escape_leading_slashes(self):\n        self.assertEqual(escape_leading_slashes('/'), '/')\n        self.assertEqual(escape_leading_slashes('//'), '/%2F')\n        self.assertEqual(escape_leading_slashes('http://example.com'), 'http://example.com')\n        self.assertEqual(escape_leading_slashes('//example.com'), '/%2F%2Fexample.com')\n\n    def test_parse_http_date(self):\n        self.assertEqual(parse_http_date(\"Tue, 14 Mar 2023 00:00:00 GMT\"), 1678886400)\n        self.assertEqual(parse_http_date(\"Mon, 27 Feb 2023 15:30:00 GMT\"), 1677408200)\n        self.assertEqual(parse_http_date(\"Sun, 19 Feb 2023 08:00:00 GMT\"), 1676764800)\n        self.assertEqual(parse_http_date(\"Mon, 27 Feb 2023 15:30:00 +0000\"), 1677408200)\n        with self.assertRaises(ValueError):\n            parse_http_date(\"invalid date\")\n\n    def test_parse_http_date_safe(self):\n        self.assertEqual(parse_http_date_safe(\"Tue, 14 Mar 2023 00:00:00 GMT\"), 1678886400)\n        self.assertEqual(parse_http_date_safe(\"Mon, 27 Feb 2023 15:30:00 GMT\"), 1677408200)\n        self.assertEqual(parse_http_date_safe(\"Sun, 19 Feb 2023 08:00:00 GMT\"), 1676764800)\n        self.assertEqual(parse_http_date_safe(\"Mon, 27 Feb 2023 15:30:00 +0000\"), 1677408200)\n        self.assertIsNone(parse_http_date_safe(\"invalid date\"))\n\n    def test_parse_etags(self):\n        self.assertEqual(parse_etags(\"*\"), [\"*\"])\n        self.assertEqual(parse_etags('\"abc\"'), [\"abc\"])\n        self.assertEqual(parse_etags('\"abc\", \"def\"'), [\"abc\", \"def\"])\n        self.assertEqual(parse_etags('\"abc\", \"def\", \"ghi\"'), [\"abc\", \"def\", \"ghi\"])\n\n    def test_quote_etag(self):\n        self.assertEqual(quote_etag('\"abc\"'), '\"abc\"')\n        self.assertEqual(quote_etag('abc'), '\"abc\"')\n\n    def test_is_same_domain(self):\n        self.assertTrue(is_same_domain(\"example.com\", \"example.com\"))\n        self.assertTrue(is_same_domain(\"example.com\", \".example.com\"))\n        self.assertTrue(is_same_domain(\"sub.example.com\", \".example.com\"))\n        self.assertFalse(is_same_domain(\"example.com\", \"example.org\"))\n        self.assertFalse(is_same_domain(\"example.com\", \".org\"))\n\n    def test_url_has_allowed_host_and_scheme(self):\n        self.assertTrue(url_has_allowed_host_and_scheme(\"https://example.com/\", allowed_hosts=[\"example.com\"], require_https=True))\n        self.assertFalse(url_has_allowed_host_and_scheme(\"http://example.com/\", allowed_hosts=[\"example.com\"], require_https=True))\n        self.assertTrue(url_has_allowed_host_and_scheme(\"https://example.com/\", allowed_hosts=[\"*\"], require_https=True))\n        self.assertTrue(url_has_allowed_host_and_scheme(\"http://example.com/\", allowed_hosts=[\"*\"], require_https=False))\n        self.assertFalse(url_has_allowed_host_and_scheme(\"https://example.org/\", allowed_hosts=[\"example.com\"], require_https=True))\n        self.assertFalse(url_has_allowed_host_and_scheme(\"https://example.com/path\", allowed_hosts=[\"example.com\"], require_https=True))\n        self.assertFalse(url_has_allowed_host_and_scheme(\"https://example.com\", allowed_hosts=[\"example.com\"], require_https=True))\n\n    def test_is_safe_url(self):\n        warnings.warn(\n            'django.utils.http.is_safe_url() is deprecated in favor of '\n            'url_has_allowed_host_and_scheme()',\n            RemovedInDjango40Warning, stacklevel=2,\n        )\n        self.assertTrue(is_safe_url(\"https://example.com/\", allowed_hosts=[\"example.com\"], require_https=True))\n        self.assertFalse(is_safe_url(\"http://example.com/\", allowed_hosts=[\"example.com\"], require_https=True))\n        self.assertTrue(is_safe_url(\"https://example.com/\", allowed_hosts=[\"*\"], require_https=True))\n        self.assertTrue(is_safe_url(\"http://example.com/\", allowed_hosts=[\"*\"], require_https=False))\n        self.assertFalse(is_safe_url(\"https://example.org/\", allowed_hosts=[\"example.com\"], require_https=True))\n        self.assertFalse(is_safe_url(\"https://example.com/path\", allowed_hosts=[\"example.com\"], require_https=True))\n        self.assertFalse(is_safe_url(\"https://example.com\", allowed_hosts=[\"example.com\"], require_https=True))\n\n    def test_urlencode(self):\n        self.assertEqual(urlencode({\"a\": \"1\", \"b\": \"2\"}), \"a=1&b=2\")\n        self.assertEqual(urlencode({\"a\": \"1\", \"b\": \"2\"}, doseq=True), \"a=1&b=2\")\n        self.assertEqual(urlencode({\"a\": [1, 2], \"b\": \"2\"}), \"a=1&a=2&b=2\")\n        self.assertEqual(urlencode({\"a\": None}), \"\")\n        self.assertEqual(urlencode({\"a\": [1, 2], \"b\": None}), \"a=1&a=2\")\n\n    def test_urlquote(self):\n        self.assertEqual(urlquote(\"abc\"), \"abc\")\n        self.assertEqual(urlquote(\"\u00e4\u00f6\u00fc\"), \"\u00e4%C3%B6%C3%BC\")\n\n    def test_urlquote_plus(self):\n        self.assertEqual(urlquote_plus(\"abc\"), \"abc\")\n        self.assertEqual(urlquote_plus(\"\u00e4\u00f6\u00fc\"), \"\u00e4%C3%B6%C3%BC\")\n\n    def test_urlunquote(self):\n        self.assertEqual(urlunquote(\"abc\"), \"abc\")\n        self.assertEqual(urlunquote(\"\u00e4%C3%B6%C3%BC\"), \"\u00e4\u00f6\u00fc\")\n\n    def test_urlunquote_plus(self):\n        self.assertEqual(urlunquote_plus(\"abc\"), \"abc\")\n        self.assertEqual(urlunquote_plus(\"\u00e4%C3%B6%C3%BC\"), \"\u00e4\u00f6\u00fc\")\n\n    def test_urlsafe_base64_encode(self):\n        self.assertEqual(urlsafe_base64_encode(b\"abc\"), \"YWJj\")\n\n    def test_urlsafe_base64_decode(self):\n        self.assertEqual(urlsafe_base64_decode(\"YWJj\"), b\"abc\")\n\n\n\n"], "sample_103": ["\nimport unittest\nfrom sklearn.feature_selection.mutual_info_ import (mutual_info_regression,\n                                                   mutual_info_classif,\n                                                   _compute_mi)\nfrom sklearn.datasets import make_classification\nfrom sklearn.datasets import make_regression\nfrom sklearn.preprocessing import scale\nimport numpy as np\nfrom sklearn.utils.estimator_checks import check_estimator\n\nclass TestMutualInfo(unittest.TestCase):\n\n    def test_mutual_info_regression_basic(self):\n        X, y = make_regression(n_samples=100, n_features=5, random_state=42)\n        mi = mutual_info_regression(X, y, n_neighbors=3)\n        self.assertEqual(mi.shape[0], X.shape[1])\n        self.assertGreater(mi.max(), 0)\n\n    def test_mutual_info_regression_sparse(self):\n        X, y = make_regression(n_samples=100, n_features=5, random_state=42)\n        X_sparse = X.tocsr()\n        mi = mutual_info_regression(X_sparse, y, n_neighbors=3)\n        self.assertEqual(mi.shape[0], X.shape[1])\n        self.assertGreater(mi.max(), 0)\n\n    def test_mutual_info_regression_discrete_features(self):\n        X, y = make_regression(n_samples=100, n_features=5, random_state=42)\n        X[:, 0] = np.round(X[:, 0])\n        mi = mutual_info_regression(X, y, discrete_features=0, n_neighbors=3)\n        self.assertEqual(mi.shape[0], X.shape[1])\n        self.assertGreater(mi.max(), 0)\n\n    def test_mutual_info_classif_basic(self):\n        X, y = make_classification(n_samples=100, n_features=5, random_state=42)\n        mi = mutual_info_classif(X, y, n_neighbors=3)\n        self.assertEqual(mi.shape[0], X.shape[1])\n        self.assertGreater(mi.max(), 0)\n\n    def test_mutual_info_classif_sparse(self):\n        X, y = make_classification(n_samples=100, n_features=5, random_state=42)\n        X_sparse = X.tocsr()\n        mi = mutual_info_classif(X_sparse, y, n_neighbors=3)\n        self.assertEqual(mi.shape[0], X.shape[1])\n        self.assertGreater(mi.max(), 0)\n\n    def test_mutual_info_classif_discrete_features(self):\n        X, y = make_classification(n_samples=100, n_features=5, random_state=42)\n        X[:, 0] = np.round(X[:, 0])\n        mi = mutual_info_classif(X, y, discrete_features=0, n_neighbors=3)\n        self.assertEqual(mi.shape[0], X.shape[1])\n        self.assertGreater(mi.max(), 0)\n\n    def test_compute_mi_continuous_continuous(self):\n        x = np.random.rand(100)\n        y = np.random.rand(100)\n        mi = _compute_mi(x, y, x_discrete=False, y_discrete=False,\n                         n_neighbors=3)\n        self.assertGreater(mi, 0)\n\n    def test_compute_mi_discrete_continuous(self):\n        x = np.random.randint(0, 2, size=100)\n        y = np.random.rand(100)\n        mi = _compute_mi(x, y, x_discrete=True, y_discrete=False,\n                         n_neighbors=3)\n        self.assertGreater(mi, 0)\n\n    def test_compute_mi_continuous_discrete(self):\n        x = np.random.rand(100)\n        y = np.random.randint(0, 2, size=100)\n        mi = _compute_mi(x, y, x_discrete=False, y_discrete=True,\n                         n_neighbors=3)\n        self.assertGreater(mi, 0)\n\n    def test_compute_mi_discrete_discrete(self):\n        x = np.random.randint(0, 2, size=100)\n        y = np.random.randint(0, 2, size=100)\n        mi = _compute_mi(x, y, x_discrete=True, y_discrete=True,\n                         n_neighbors=3)\n        self.assertGreater(mi, 0)\n\n    def test_mutual_info_regression_estimator_checks(self):\n        check_estimator(mutual_info_regression,\n                        X=np.random.rand(10, 5),\n                        y=np.random.rand(10))\n\n\n\n"], "sample_145": ["\nfrom sympy.printing.latex import (latex, translate, greek_letters_set, tex_greek_dictionary, multiline_latex, latex_escape, LatexPrinter)\nfrom sympy import symbols, sin, cos, exp, log, I, pi, Rational, Matrix, Integral\nfrom sympy.abc import x, y, mu, r, tau\nfrom sympy.core.numbers import Float\nfrom sympy.core.symbol import Symbol\n\ndef test_latex_basic():\n    assert latex(2*pi) == '2 \\pi'\n    assert latex(x + y) == 'x + y'\n    assert latex(x**2) == 'x^{2}'\n    assert latex(sin(x)) == '\\\\sin{\\left(x \\right)}'\n    assert latex(cos(x)) == '\\\\cos{\\left(x \\right)}'\n    assert latex(exp(x)) == 'e^{x}'\n    assert latex(log(x)) == '\\\\log{\\left(x \\right)}'\n    assert latex(I) == 'i'\n\ndef test_latex_fractions():\n    assert latex(2/3) == '\\\\frac{2}{3}'\n    assert latex(x/y) == '\\\\frac{x}{y}'\n    assert latex(1/2) == '\\\\frac{1}{2}'\n    assert latex(Rational(1, 2)) == '\\\\frac{1}{2}'\n    assert latex(x**Rational(1, 2)) == 'x^{1/2}'\n    assert latex(x**Rational(2, 3)) == 'x^{2/3}'\n\ndef test_latex_symbols():\n    assert latex(Symbol('a')) == 'a'\n    assert latex(Symbol('b')) == 'b'\n    assert latex(Symbol('c')) == 'c'\n\ndef test_latex_matrices():\n    assert latex(Matrix([[1, 2], [3, 4]])) == r'\\left[\\begin{matrix}1 & 2 \\\\ 3 & 4\\end{matrix}\\right]'\n    assert latex(Matrix([[1, 2], [3, 4]], mat_str='array')) == r'\\left[\\begin{array}{cc}1 & 2 \\\\ 3 & 4\\end{array}\\right]'\n    assert latex(Matrix([[1, 2], [3, 4]], mat_delim='(')) == r'\\left(\\begin{matrix}1 & 2 \\\\ 3 & 4\\end{matrix}\\right)'\n\ndef test_latex_multiline_equation():\n    expr = sin(alpha*y) + exp(I*alpha) - cos(log(y))\n    assert multiline_latex(x, expr) == r'\\begin{align*}\nx &= e^{i \\alpha} + \\sin{\\left(\\alpha y \\right)} - \\cos{\\left(\\log{\\left(y \\right)} \\right)}\n\\end{align*}'\n\ndef test_latex_multiline_equation_with_terms_per_line():\n    expr = sin(alpha*y) + exp(I*alpha) - cos(log(y))\n    assert multiline_latex(x, expr, terms_per_line=2) == r'\\begin{align*}\nx &= e^{i \\alpha} + \\sin{\\left(\\alpha y \\right)} \\\\\n& - \\cos{\\left(\\log{\\left(y \\right)} \\right)}\n\\end{align*}'\n\ndef test_latex_multiline_equation_with_dots():\n    expr = sin(alpha*y) + exp(I*alpha) - cos(log(y))\n    assert multiline_latex(x, expr, use_dots=True) == r'\\begin{align*}\nx &= e^{i \\alpha} + \\sin{\\left(\\alpha y \\right)} \\dots\\\\\n& - \\cos{\\left(\\log{\\left(y \\right)} \\right)}\n\\end{align*}'\n\ndef test_latex_multiline_equation_with_environment():\n    expr = sin(alpha*y) + exp(I*alpha) - cos(log(y))\n    assert multiline_latex(x, expr, environment=\"eqnarray\") == r'\\begin{eqnarray}\nx & = & e^{i \\alpha} + \\sin{\\left(\\alpha y \\right)} \\nonumber\\\\\n& & - \\cos{\\left(\\log{\\left(y \\right)} \\right)}\n\\end{eqnarray}'\n\ndef test_latex_multiline_equation_with_IEEEeqnarray():\n    expr = sin(alpha*y) + exp(I*alpha) - cos(log(y))\n    assert multiline_latex(x, expr, environment=\"IEEEeqnarray\") == r'\\begin{IEEEeqnarray}{rCl}\nx & = & e^{i \\alpha} \\nonumber\\\\\n& & + \\sin{\\left(\\alpha y \\right)} \\nonumber\\\\\n& & - \\cos{\\left(\\log{\\left(y \\right)} \\right)}\n\\end{IEEEeqnarray}'\n\ndef test_latex_custom_symbols():\n    assert latex(x**2, symbol_names={'x': 'x_i'}) == 'x_{i}^{2}'\n\ndef test_latex_log_notation():\n    assert latex(log(10)) == r'\\log{\\left(10 \\right)}'\n    assert latex(log(10), ln_notation=True) == r'\\ln{\\left(10 \\right)}'\n\ndef test_latex_float():\n    assert latex(Float(1.23456789)) == '1.23456789'\n\ndef test_latex_empty_printer():\n    assert latex(1, emptyPrinter=True) == r'\\mathtt{\\text{1}}'\n\ndef test_latex_empty_printer_with_symbol():\n    assert latex(Symbol('a'), emptyPrinter=True) == r'\\mathtt{\\text{a}}'\n\ndef test_latex_empty_printer_with_string():\n    assert latex('hello', emptyPrinter=True) == r'\\mathtt{\\text{hello}}'\n\ndef test_latex_empty_printer_with_expression():\n    assert latex(x + y, emptyPrinter=True) == r'\\mathtt{\\text{x + y}}'\n\ndef test_latex_translate():\n    assert translate('alphahatdotprime') == r'{\\\\dot{\\\\hat{\\\\alpha}}}'\n    assert translate('alpha') == r'\\alpha'\n    assert translate('alphahat') == r'\\hat{\\alpha}'\n    assert translate('alphaprime') == r'\\alpha{'\n\ndef test_latex_translate_symbols():\n    assert translate('pi') == r'\\pi'\n    assert translate('i') == r'i'\n    assert translate('j') == r'j'\n    assert translate('sqrt') == r'\\sqrt'\n    assert translate('sum') == r'\\sum'\n    assert translate('prod') == r'\\prod'\n    assert translate('int') == r'\\int'\n    assert translate('lim') == r'\\lim'\n    assert translate('inf') == r'\\infty'\n    assert translate('Re') == r'\\Re'\n    assert translate('Im') == r'\\Im'\n\ndef test_latex_latex_escape():\n    assert latex_escape('$$') == r'\\$\\$'\n    assert latex_escape('\\\\') == r'\\\\\\\\'\n    assert latex_escape('{') == r'\\{'\n    assert latex_escape('}') == r'\\}'\n\n"], "sample_40": ["\nimport unittest\nfrom django.forms.utils import flatatt\nfrom django.forms.widgets import TextInput, Textarea\nfrom django.core.exceptions import ValidationError\nfrom django.utils.html import conditional_escape\nfrom django.utils.safestring import mark_safe\nfrom django.test import override_settings\nfrom django.forms import BoundField, BoundWidget\nfrom django.forms.boundfield import BoundField, BoundWidget\nfrom django.utils.translation import gettext_lazy as _\n\nclass BoundFieldTest(unittest.TestCase):\n\n    def setUp(self):\n        class MyForm(Form):\n            name = CharField(label='Name')\n            age = IntegerField(label='Age', required=False)\n\n        self.form = MyForm({'name': 'John Doe'})\n        self.bound_name = BoundField(self.form, self.form.fields['name'], 'name')\n        self.bound_age = BoundField(self.form, self.form.fields['age'], 'age')\n\n    def test_init(self):\n        self.assertEqual(self.bound_name.label, 'Name')\n        self.assertEqual(self.bound_name.html_name, 'name')\n        self.assertEqual(self.bound_name.help_text, '')\n        self.assertEqual(self.bound_age.label, 'Age')\n        self.assertEqual(self.bound_age.html_name, 'age')\n        self.assertEqual(self.bound_age.help_text, '')\n\n    def test_str(self):\n        self.assertEqual(str(self.bound_name), self.bound_name.as_widget())\n\n    def test_as_widget(self):\n        self.assertEqual(self.bound_name.as_widget(), self.bound_name.as_widget(TextInput()))\n        self.assertEqual(self.bound_age.as_widget(), self.bound_age.as_widget(TextInput()))\n\n    def test_as_text(self):\n        self.assertEqual(self.bound_name.as_text(), self.bound_name.as_widget(TextInput()))\n\n    def test_as_textarea(self):\n        self.assertEqual(self.bound_name.as_textarea(), self.bound_name.as_widget(Textarea()))\n\n    def test_as_hidden(self):\n        self.assertEqual(self.bound_name.as_hidden(), self.bound_name.as_widget(HiddenInput()))\n\n    def test_errors(self):\n        self.form.errors['name'] = ['This field is required.']\n        self.assertEqual(self.bound_name.errors, ['This field is required.'])\n        self.assertEqual(self.bound_age.errors, [])\n\n    def test_value(self):\n        self.assertEqual(self.bound_name.value(), 'John Doe')\n        self.assertEqual(self.bound_age.value(), None)\n\n    def test_has_changed(self):\n        self.assertFalse(self.bound_name._has_changed())\n        self.form.data['name'] = 'Jane Doe'\n        self.assertTrue(self.bound_name._has_changed())\n\n    def test_label_tag(self):\n        self.assertEqual(self.bound_name.label_tag(), '<label for=\"name\">Name</label>')\n        self.assertEqual(self.bound_name.label_tag(attrs={'class': 'my-label'}), '<label class=\"my-label\" for=\"name\">Name</label>')\n\n    def test_css_classes(self):\n        self.assertEqual(self.bound_name.css_classes(), '')\n        self.assertEqual(self.bound_age.css_classes(), '')\n        self.form.errors['name'] = ['This field is required.']\n        self.assertEqual(self.bound_name.css_classes(), 'error')\n        self.assertEqual(self.bound_age.css_classes(), '')\n\n    def test_is_hidden(self):\n        self.assertFalse(self.bound_name.is_hidden)\n        self.assertFalse(self.bound_age.is_hidden)\n\n    def test_auto_id(self):\n        self.assertEqual(self.bound_name.auto_id, 'name')\n        self.assertEqual(self.bound_age.auto_id, 'age')\n\n    def test_id_for_label(self):\n        self.assertEqual(self.bound_name.id_for_label, 'name')\n        self.assertEqual(self.bound_age.id_for_label, 'age')\n\n    def test_initial(self):\n        self.assertEqual(self.bound_name.initial, 'John Doe')\n        self.assertEqual(self.bound_age.initial, None)\n\n    def test_build_widget_attrs(self):\n        attrs = self.bound_name.build_widget_attrs({})\n        self.assertEqual(attrs, {})\n        attrs = self.bound_name.build_widget_attrs({'class': 'my-class'})\n        self.assertEqual(attrs, {'class': 'my-class'})\n\n    def test_widget_type(self):\n        self.assertEqual(self.bound_name.widget_type, 'text')\n        self.assertEqual(self.bound_age.widget_type, 'number')\n\n\n\nclass BoundWidgetTest(unittest.TestCase):\n\n    def setUp(self):\n        class MyForm(Form):\n            name = CharField(label='Name')\n        self.form = MyForm({'name': 'John Doe'})\n        self.bound_name = BoundField(self.form, self.form.fields['name'], 'name')\n        self.bound_widget = BoundWidget(self.bound_name.field.widget, {'label': 'Name', 'attrs': {'id': 'name'}}, self.bound_name.form.renderer)\n\n    def test_init(self):\n        self.assertEqual(self.bound_widget.parent_widget, self.bound_name.field.widget)\n        self.assertEqual(self.bound_widget.data, {'label': 'Name', 'attrs': {'id': 'name'}})\n        self.assertEqual(self.bound_widget.renderer, self.bound_name.form.renderer)\n\n    def test_str(self):\n        self.assertEqual(str(self.bound_widget), self.bound_widget.tag(wrap_label=True))\n\n    def test_tag(self):\n        self.assertEqual(self.bound_widget.tag(), self.bound_widget.parent_widget._render(self.bound_widget.template_name, {'widget': self.bound_widget.data}, self.bound_widget.renderer))\n\n    def test_id_for_label(self):\n        self.assertEqual(self.bound_widget.id_for_label, 'name')\n\n    def test_choice_label(self):\n        self.assertEqual(self.bound_widget.choice_label, 'Name')\n\n\n\n"], "sample_115": ["\nimport unittest\nimport numpy as np\nfrom sklearn.utils._set_output import _wrap_in_pandas_container\nfrom sklearn.utils._set_output import _safe_set_output\nfrom sklearn.utils._set_output import _SetOutputMixin\nfrom sklearn.utils._set_output import _get_output_config\nfrom sklearn.utils.estimator_checks import check_estimator\nfrom pandas import DataFrame\n\nclass TestSetOutputMixin(unittest.TestCase):\n\n    def test_auto_wrap_is_configured(self):\n        class TestEstimator(object):\n            def __init__(self):\n                self.get_feature_names_out = lambda: [\"feature_1\", \"feature_2\"]\n            def transform(self, X):\n                return X\n\n        estimator = TestEstimator()\n        self.assertTrue(_auto_wrap_is_configured(estimator))\n\n    def test_auto_wrap_is_configured_no_get_feature_names_out(self):\n        class TestEstimator(object):\n            pass\n\n        estimator = TestEstimator()\n        self.assertFalse(_auto_wrap_is_configured(estimator))\n\n    def test_auto_wrap_is_configured_no_transform(self):\n        class TestEstimator(object):\n            def __init__(self):\n                self.get_feature_names_out = lambda: [\"feature_1\", \"feature_2\"]\n            def fit(self, X):\n                return self\n\n        estimator = TestEstimator()\n        self.assertFalse(_auto_wrap_is_configured(estimator))\n\n    def test_auto_wrap_is_configured_no_auto_wrap_output_keys(self):\n        class TestEstimator(_SetOutputMixin):\n            pass\n\n        estimator = TestEstimator()\n        self.assertFalse(_auto_wrap_is_configured(estimator))\n\n    def test_set_output_default(self):\n        class TestEstimator(_SetOutputMixin):\n            def transform(self, X):\n                return X\n\n        estimator = TestEstimator()\n        estimator.set_output(transform=\"default\")\n        self.assertEqual(estimator._sklearn_output_config[\"transform\"], \"default\")\n\n    def test_set_output_pandas(self):\n        class TestEstimator(_SetOutputMixin):\n            def transform(self, X):\n                return X\n\n        estimator = TestEstimator()\n        estimator.set_output(transform=\"pandas\")\n        self.assertEqual(estimator._sklearn_output_config[\"transform\"], \"pandas\")\n\n    def test_set_output_none(self):\n        class TestEstimator(_SetOutputMixin):\n            def transform(self, X):\n                return X\n\n        estimator = TestEstimator()\n        estimator.set_output(transform=None)\n        self.assertNotIn(\"transform\", estimator._sklearn_output_config)\n\n    def test_safe_set_output_no_set_output(self):\n        class TestEstimator(object):\n            pass\n\n        estimator = TestEstimator()\n        _safe_set_output(estimator, transform=\"pandas\")\n        self.assertNotIn(\"transform\", estimator._sklearn_output_config)\n\n    def test_safe_set_output_no_transform(self):\n        class TestEstimator(object):\n            def fit(self, X):\n                return self\n\n        estimator = TestEstimator()\n        _safe_set_output(estimator, transform=\"pandas\")\n        self.assertNotIn(\"transform\", estimator._sklearn_output_config)\n\n    def test_wrap_in_pandas_container_dataframe(self):\n        df = DataFrame({\"col1\": [1, 2], \"col2\": [3, 4]})\n        wrapped_df = _wrap_in_pandas_container(df, columns=[\"col1\", \"col2\"])\n        self.assertEqual(wrapped_df.columns, [\"col1\", \"col2\"])\n\n    def test_wrap_in_pandas_container_ndarray(self):\n        data = np.array([[1, 2], [3, 4]])\n        wrapped_df = _wrap_in_pandas_container(data, columns=[\"col1\", \"col2\"])\n        self.assertEqual(wrapped_df.columns, [\"col1\", \"col2\"])\n\n    def test_wrap_in_pandas_container_no_columns(self):\n        data = np.array([[1, 2], [3, 4]])\n        wrapped_df = _wrap_in_pandas_container(data, columns=None)\n        self.assertEqual(wrapped_df.columns, [0, 1])\n\n    def test_wrap_in_pandas_container_sparse(self):\n        from scipy.sparse import csr_matrix\n        data = csr_matrix([[1, 2], [3, 4]])\n        with self.assertRaises(ValueError):\n            _wrap_in_pandas_container(data, columns=[\"col1\", \"col2\"])\n\n    def test_get_output_config(self):\n        class TestEstimator(object):\n            def __init__(self):\n                self._sklearn_output_config = {\"transform\": \"pandas\"}\n\n        estimator = TestEstimator()\n        config = _get_output_config(\"transform\", estimator)\n        self.assertEqual(config[\"dense\"], \"pandas\")\n\n\n\n"], "sample_137": ["\nfrom sympy.utilities.iterables import (\n    _partition, _set_partitions, binary_partitions, bracelets, capture, cartes, common_prefix, common_suffix, connected_components, dict_merge, filter_symbols, flatten, generate_bell, generate_derangements, generate_involutions, generate_oriented_forest, group, has_dups, ibin, iproduct, kbins, minlex, multiset, multiset_combinations, multiset_partitions, multiset_permutations, necklaces, numbered_symbols, ordered, partitions, permutations, postfixes, postorder_traversal, prefixes, reshape, rotate_left, rotate_right, runs, sift, strongly_connected_components, subsets, take, topological_sort, unflatten, uniq, variations, ordered_partitions, rotations, is_palindromic\n)\nfrom sympy.utilities.enumerative import ( factoring_visitor, multiset_partitions_taocp )\nimport unittest\n\nclass TestIterables(unittest.TestCase):\n\n    def test_capture(self):\n        self.assertEqual(capture((1, 2, 3), 1), (1, 2, 3))\n        self.assertEqual(capture((1, 2, 3), 2), (1, 2, 3))\n        self.assertEqual(capture((1, 2, 3), 3), (1, 2, 3))\n        self.assertEqual(capture((1, 2, 3), 4), (1, 2, 3))\n\n    def test_cartes(self):\n        self.assertEqual(list(cartes(1, 2)), [(1, 1), (1, 2), (2, 1), (2, 2)])\n        self.assertEqual(list(cartes(1, 2, 3)), [(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2), (2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2), (3, 1, 1), (3, 1, 2), (3, 2, 1), (3, 2, 2)])\n\n    def test_common_prefix(self):\n        self.assertEqual(common_prefix('abc', 'ab'), 'ab')\n        self.assertEqual(common_prefix('abc', 'abd'), 'ab')\n        self.assertEqual(common_prefix('abc', 'def'), '')\n        self.assertEqual(common_prefix('', 'abc'), '')\n\n    def test_common_suffix(self):\n        self.assertEqual(common_suffix('abc', 'abc'), 'abc')\n        self.assertEqual(common_suffix('abc', 'ab'), 'b')\n        self.assertEqual(common_suffix('abc', 'def'), '')\n        self.assertEqual(common_suffix('', 'abc'), '')\n\n    def test_connected_components(self):\n        self.assertEqual(connected_components([(0, 1), (1, 2), (2, 3)]), [[0, 1, 2, 3]])\n        self.assertEqual(connected_components([(0, 1), (2, 3), (4, 5)]), [[0, 1], [2, 3], [4, 5]])\n\n    def test_dict_merge(self):\n        self.assertEqual(dict_merge({'a': 1, 'b': 2}, {'b': 3, 'c': 4}), {'a': 1, 'b': 3, 'c': 4})\n\n    def test_filter_symbols(self):\n        self.assertEqual(filter_symbols('x + y', ['x', 'y']), 'x + y')\n        self.assertEqual(filter_symbols('x + y', ['z', 'w']), '')\n\n    def test_flatten(self):\n        self.assertEqual(flatten([1, [2, 3], 4]), [1, 2, 3, 4])\n        self.assertEqual(flatten([[1, 2], [3, 4], [5]]), [1, 2, 3, 4, 5])\n\n    def test_generate_bell(self):\n        self.assertEqual(list(generate_bell(3)), [(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (0, 2, 0), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1), (1, 2, 0), (2, 0, 0), (2, 0, 1), (2, 1, 0), (2, 1, 1), (2, 2, 0), (3, 0, 0)])\n\n    def test_generate_derangements(self):\n        self.assertEqual(list(generate_derangements([0, 1, 2])), [[0, 2, 1], [1, 0, 2], [1, 2, 0], [2, 0, 1], [2, 1, 0]])\n\n    def test_generate_involutions(self):\n        self.assertEqual(list(generate_involutions([0, 1, 2])), [(0, 1, 2), (0, 2, 1), (1, 0, 2), (2, 1, 0)])\n\n    def test_generate_oriented_forest(self):\n        self.assertEqual(list(generate_oriented_forest(4)), [[0, 1, 2, 3], [0, 1, 2, 2], [0, 1, 2, 1], [0, 1, 2, 0], [0, 1, 1, 1], [0, 1, 1, 0], [0, 1, 0, 1], [0, 1, 0, 0], [0, 0, 0, 0]])\n\n    def test_group(self):\n        self.assertEqual(group([1, 2, 3, 1, 2, 3]), [[1, 2, 3]])\n\n    def test_has_dups(self):\n        self.assertTrue(has_dups([1, 2, 2, 3]))\n        self.assertFalse(has_dups([1, 2, 3]))\n\n    def test_ibin(self):\n        self.assertEqual(ibin(3, 2), [(0, 0), (0, 1), (1, 0), (1, 1)])\n\n    def test_iproduct(self):\n        self.assertEqual(list(iproduct([1, 2], [3, 4])), [(1, 3), (1, 4), (2, 3), (2, 4)])\n\n    def test_kbins(self):\n        self.assertEqual(list(kbins(range(5), 2)), [[0], [1, 2, 3, 4]])\n\n    def test_minlex(self):\n        self.assertEqual(minlex([1, 2, 0]), (0, 1, 2))\n\n    def test_multiset(self):\n        self.assertEqual(multiset([1, 2, 2, 3]), [1, 2, 2, 3])\n\n    def test_multiset_combinations(self):\n        self.assertEqual(list(multiset_combinations([1, 2, 2, 3], 2)), [(1, 2), (1, 3), (2, 2), (2, 3)])\n\n    def test_multiset_partitions(self):\n        self.assertEqual(list(multiset_partitions([1, 2, 2, 3], 2), [(1, 2, 2, 3), (1, 2, 3, 2), (1, 3, 2, 2)])\n\n    def test_multiset_permutations(self):\n        self.assertEqual(list(multiset_permutations([1, 2, 2, 3]), [(1, 2, 2, 3), (1, 2, 3, 2), (1, 3, 2, 2), (2, 1, 2, 3), (2, 1, 3, 2), (2, 2, 1, 3), (2, 2, 3, 1), (2, 3, 1, 2), (2, 3, 2, 1), (3, 1, 2, 2), (3, 2, 1, 2), (3, 2, 2, 1)])\n\n    def test_necklaces(self):\n        self.assertEqual(list(necklaces(3, 2)), [[0, 0, 0], [0, 1, 1], [0, 1, 0], [0, 0, 1], [1, 1, 1], [1, 1, 0], [1, 0, 1], [1, 0, 0]])\n\n    def test_numbered_symbols(self):\n        self.assertEqual(numbered_symbols('x + y'), ('x', 'y'))\n\n    def test_ordered(self):\n        self.assertEqual(ordered([1, 2, 3], 2), [(1, 2, 3)])\n\n    def test_partitions(self):\n        self.assertEqual(list(partitions(3, 2), [[1, 2], [1, 1, 1]])\n\n    def test_permutations(self):\n        self.assertEqual(list(permutations([1, 2, 3]), [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)])\n\n    def test_postfixes(self):\n        self.assertEqual(postfixes('abc'), ['abc', 'bc', 'c'])\n\n    def test_postorder_traversal(self):\n        self.assertEqual(list(postorder_traversalsample_99": ["\nimport unittest\nfrom sklearn.neighbors.base import (\n    KNeighborsMixin, RadiusNeighborsMixin, SupervisedFloatMixin,\n    SupervisedIntegerMixin, UnsupervisedMixin, check_is_fitted,\n    VALID_METRICS, VALID_METRICS_SPARSE\n)\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.metrics.pairwise import euclidean_distances\nimport numpy as np\nfrom scipy.sparse import csr_matrix\nfrom sklearn.utils.validation import check_array, check_X_y\n\nclass TestBase(unittest.TestCase):\n    def test_check_algorithm_metric(self):\n        neigh = NearestNeighbors()\n        with self.assertRaises(ValueError):\n            neigh._check_algorithm_metric()\n\n        neigh.algorithm = 'auto'\n        neigh.metric = 'precomputed'\n        neigh._check_algorithm_metric()\n\n        neigh.metric = 'euclidean'\n        neigh._check_algorithm_metric()\n\n        neigh.algorithm = 'brute'\n        neigh._check_algorithm_metric()\n\n        neigh.algorithm = 'kd_tree'\n        neigh._check_algorithm_metric()\n\n        neigh.algorithm = 'ball_tree'\n        neigh._check_algorithm_metric()\n\n        with self.assertRaises(ValueError):\n            neigh.algorithm = 'invalid'\n            neigh._check_algorithm_metric()\n\n        with self.assertRaises(ValueError):\n            neigh.metric = 'invalid'\n            neigh._check_algorithm_metric()\n\n    def test_check_algorithm_metric_sparse(self):\n        neigh = NearestNeighbors()\n        neigh.algorithm = 'brute'\n        neigh.metric = 'euclidean'\n        neigh._check_algorithm_metric()\n\n        neigh.metric = 'manhattan'\n        neigh._check_algorithm_metric()\n\n        neigh.metric = 'cosine'\n        neigh._check_algorithm_metric()\n\n        with self.assertRaises(ValueError):\n            neigh.metric = 'invalid'\n            neigh._check_algorithm_metric()\n\n    def test_check_is_fitted(self):\n        neigh = NearestNeighbors()\n        with self.assertRaises(NotFittedError):\n            neigh.kneighbors([[1, 2]])\n\n        neigh.fit([[1, 2], [3, 4]])\n        neigh.kneighbors([[1, 2]])\n\n    def test_kneighbors_graph(self):\n        X = np.array([[0, 0], [1, 1], [2, 2]])\n        neigh = NearestNeighbors(n_neighbors=2)\n        neigh.fit(X)\n\n        A = neigh.kneighbors_graph(X, mode='connectivity')\n        self.assertEqual(A.shape, (3, 3))\n        self.assertTrue(np.all(A.toarray() == np.array([[0, 1, 1],\n                                                        [1, 0, 1],\n                                                        [1, 1, 0]])))\n\n        A = neigh.kneighbors_graph(X, mode='distance')\n        self.assertEqual(A.shape, (3, 3))\n        self.assertTrue(np.all(A.toarray() == np.array([[0, 1, 1],\n                                                        [1, 0, 1],\n                                                        [1, 1, 0]])))\n\n    def test_radius_neighbors_graph(self):\n        X = np.array([[0, 0], [1, 1], [2, 2]])\n        neigh = NearestNeighbors(radius=1)\n        neigh.fit(X)\n\n        A = neigh.radius_neighbors_graph(X, mode='connectivity')\n        self.assertEqual(A.shape, (3, 3))\n        self.assertTrue(np.all(A.toarray() == np.array([[0, 1, 1],\n                                                        [1, 0, 1],\n                                                        [1, 1, 0]])))\n\n        A = neigh.radius_neighbors_graph(X, mode='distance')\n        self.assertEqual(A.shape, (3, 3))\n        self.assertTrue(np.all(A.toarray() == np.array([[0, 1, 1],\n                                                        [1, 0, 1],\n                                                        [1, 1, 0]])))\n\n    def test_fit_method_with_sparse_data(self):\n        X = csr_matrix([[1, 2], [3, 4]])\n        neigh = NearestNeighbors()\n        neigh.fit(X)\n\n    def test_fit_method_with_ball_tree(self):\n        X = np.array([[1, 2], [3, 4]])\n        neigh = NearestNeighbors(algorithm='ball_tree')\n        neigh.fit(X)\n\n    def test_fit_method_with_kd_tree(self):\n        X = np.array([[1, 2], [3, 4]])\n        neigh = NearestNeighbors(algorithm='kd_tree')\n        neigh.fit(X)\n\n    def test_fit_method_with_precomputed_distances(self):\n        X = np.array([[1, 2], [3, 4]])\n        distances = euclidean_distances(X)\n        neigh = NearestNeighbors(metric='precomputed')\n        neigh.fit(distances)\n\n\n\n"], "sample_72": ["\nimport unittest\nimport numpy as np\nfrom matplotlib.figure import Figure, figaspect, TightLayoutEngine\nfrom matplotlib import rcParams\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg\nfrom matplotlib.patches import Rectangle\nfrom matplotlib.lines import Line2D\n\nclass TestFigure(unittest.TestCase):\n\n    def setUp(self):\n        rcParams['figure.figsize'] = (6, 4)\n        self.fig = Figure()\n        self.canvas = FigureCanvasAgg(self.fig)\n\n    def tearDown(self):\n        del self.fig\n        del self.canvas\n\n    def test_figaspect(self):\n        # Test with a float aspect ratio\n        w, h = figaspect(2.0)\n        self.assertAlmostEqual(w, 2.0, places=3)\n        self.assertAlmostEqual(h, 1.0, places=3)\n\n        # Test with an array aspect ratio\n        A = np.random.rand(3, 4)\n        w, h = figaspect(A)\n        self.assertAlmostEqual(w, 3.0 / 4.0, places=3)\n        self.assertAlmostEqual(h, 1.0, places=3)\n\n        # Test with aspect ratio less than 1\n        w, h = figaspect(0.5)\n        self.assertAlmostEqual(w, 0.5, places=3)\n        self.assertAlmostEqual(h, 2.0, places=3)\n\n    def test_tight_layout(self):\n        # Create subplots\n        ax1 = self.fig.add_subplot(2, 2, 1)\n        ax2 = self.fig.add_subplot(2, 2, 2)\n        ax3 = self.fig.add_subplot(2, 2, 3)\n\n        # Add some content to the subplots\n        ax1.plot([1, 2, 3])\n        ax2.scatter([1, 2, 3], [4, 5, 6])\n        ax3.text(0.5, 0.5, \"Hello\", ha=\"center\", va=\"center\")\n\n        # Call tight_layout\n        self.fig.tight_layout()\n\n        # Check that the subplots are properly spaced\n        # (This is a visual check, you may need to adjust the\n        #  assertion based on your specific setup)\n        self.assertTrue(ax1.get_position().x0 > 0.1)\n        self.assertTrue(ax1.get_position().y0 > 0.1)\n        self.assertTrue(ax2.get_position().x0 > 0.1)\n        self.assertTrue(ax2.get_position().y0 > 0.1)\n        self.assertTrue(ax3.get_position().x0 > 0.1)\n        self.assertTrue(ax3.get_position().y0 > 0.1)\n\n    def test_get_layout_engine(self):\n        self.assertIsNone(self.fig.get_layout_engine())\n        self.fig.set_layout_engine(TightLayoutEngine())\n        self.assertIsInstance(self.fig.get_layout_engine(), TightLayoutEngine)\n\n\n\n"], "sample_7": ["\nimport unittest\nimport sys\nimport os\nimport threading\nimport time\nimport traceback\nimport weakref\nfrom unittest.mock import patch, MagicMock\nfrom django.apps import apps\nfrom django.dispatch import Signal\nfrom django.utils.autoreload import (\n    StatReloader,\n    WatchmanReloader,\n    get_reloader,\n    restart_with_reloader,\n    _error_files,\n    _exception,\n    check_errors,\n    ensure_echo_on,\n    iter_all_python_module_files,\n    common_roots,\n    sys_path_directories,\n    trigger_reload,\n    BaseReloader,\n    file_changed,\n    autoreload_started,\n)\nfrom django.utils.functional import cached_property\nfrom django.utils.version import get_version_tuple\nfrom pathlib import Path\nfrom types import ModuleType\nfrom zipimport import zipimporter\n\nclass TestAutoreload(unittest.TestCase):\n\n    def test_iter_all_python_module_files(self):\n        # Test with a simple set of modules\n        modules = [\n            ModuleType('module1'),\n            ModuleType('module2'),\n            ModuleType('module3'),\n        ]\n        self.assertEqual(list(iter_all_python_module_files()), [])\n        sys.modules.update({m.__name__: m for m in modules})\n        self.assertEqual(list(iter_all_python_module_files()), [\n            'module1.py',\n            'module2.py',\n            'module3.py',\n        ])\n\n    def test_common_roots(self):\n        self.assertEqual(common_roots([]), ())\n        self.assertEqual(common_roots([Path('/a'), Path('/a/b'), Path('/a/c')]), (Path('/a'),))\n        self.assertEqual(common_roots([Path('/a'), Path('/b'), Path('/c')]), ())\n\n    def test_sys_path_directories(self):\n        # Test with a simple set of sys.path entries\n        sys.path = ['/a', '/b/c', '/d', '/e/f/g']\n        self.assertEqual(list(sys_path_directories()), [\n            Path('/a'),\n            Path('/b/c'),\n            Path('/d'),\n            Path('/e/f/g'),\n        ])\n\n    def test_get_reloader(self):\n        with patch('django.utils.autoreload.pywatchman.client') as mock_client:\n            # Test with watchman unavailable\n            mock_client.side_effect = WatchmanUnavailable('Test')\n            self.assertIsInstance(get_reloader(), StatReloader)\n\n        with patch('django.utils.autoreload.pywatchman.client') as mock_client:\n            # Test with watchman available\n            mock_client.return_value = MagicMock()\n            self.assertIsInstance(get_reloader(), WatchmanReloader)\n\n    def test_restart_with_reloader(self):\n        with patch('django.utils.autoreload.subprocess.call') as mock_call:\n            mock_call.return_value = 3\n            self.assertEqual(restart_with_reloader(), 3)\n\n    def test_get_child_arguments(self):\n        # Test with a simple case\n        self.assertEqual(get_child_arguments(), ['python', '-W', '...', '-m', 'django', 'runserver'])\n\n    def test_trigger_reload(self):\n        with patch('django.utils.autoreload.sys.exit') as mock_exit:\n            trigger_reload('test.py')\n            self.assertTrue(mock_exit.called)\n\n    def test_check_errors(self):\n        def my_function():\n            raise Exception('Test Exception')\n\n        @check_errors\n        def wrapper():\n            my_function()\n\n        with self.assertRaises(Exception) as context:\n            wrapper()\n        self.assertEqual(str(context.exception), 'Test Exception')\n        self.assertEqual(_error_files, ['<traceback>'])\n\n    def test_ensure_echo_on(self):\n        with patch('django.utils.autoreload.termios.tcgetattr') as mock_tcgetattr, \\\n             patch('django.utils.autoreload.termios.ECHO') as mock_ECHO:\n            mock_tcgetattr.return_value = [0]\n            mock_ECHO.return_value = False\n            ensure_echo_on()\n            self.assertTrue(mock_tcgetattr.called)\n            self.assertTrue(mock_ECHO.called)\n\n    def test_file_changed(self):\n        with patch('django.utils.autoreload.os.path.exists') as mock_exists:\n            mock_exists.return_value = True\n            result = list(file_changed.send(sender=None, file_path='test.py'))\n            self.assertEqual(len(result), 1)\n            self.assertTrue(result[0][1])\n\n    def test_autoreload_started(self):\n        autoreload_started.send(sender=None)\n        self.assertTrue(autoreload_started.sent)\n\n    def test_BaseReloader(self):\n        reloader = BaseReloader()\n        self.assertFalse(reloader.should_stop)\n        reloader.stop()\n        self.assertTrue(reloader.should_stop)\n\n    def test_StatReloader(self):\n        reloader = StatReloader()\n        self.assertEqual(reloader.SLEEP_TIME, 1)\n        with patch('django.utils.autoreload.time.sleep') as mock_sleep:\n            reloader.tick()\n            mock_sleep.assert_called_once_with(1)\n\n    def test_WatchmanReloader(self):\n        reloader = WatchmanReloader()\n        self.assertEqual(reloader.client_timeout, 5)\n        with patch('django.utils.autoreload.pywatchman.client') as mock_client:\n            mock_client.return_value = MagicMock()\n            reloader.update_watches()\n            mock_client.assert_called_once_with(timeout=5)\n\n\n\n"], "sample_20": ["\nimport unittest\nfrom django.db import models\nfrom django.db.models.base import (\n    ModelBase,\n    make_foreign_order_accessors,\n    model_unpickle,\n    _check_lazy_references,\n)\nfrom django.core.exceptions import FieldDoesNotExist\nfrom django.core.checks import Error, Warning\nfrom django.test import TestCase, override_settings\nfrom django.test.utils import get_model_from_path\nfrom django.utils.functional import partialmethod\nfrom django.apps import apps\n\nclass ModelBaseTests(TestCase):\n\n    def test_model_unpickle(self):\n        class MyModel(models.Model):\n            pass\n\n        # Test with model name as string\n        unpickled_model = model_unpickle(MyModel)\n        self.assertEqual(unpickled_model.__class__.__name__, 'MyModel')\n\n        # Test with model instance\n        instance = MyModel()\n        unpickled_model = model_unpickle(instance)\n        self.assertEqual(unpickled_model.__class__.__name__, 'MyModel')\n\n    def test_make_foreign_order_accessors(self):\n        class ParentModel(models.Model):\n            pass\n\n        class ChildModel(models.Model):\n            parent = models.ForeignKey(ParentModel, on_delete=models.CASCADE)\n\n        make_foreign_order_accessors(ParentModel, ChildModel)\n\n        self.assertTrue(hasattr(ChildModel, 'get_parentmodel_order'))\n        self.assertTrue(hasattr(ChildModel, 'set_parentmodel_order'))\n\n    def test_check_lazy_references(self):\n        class ModelA(models.Model):\n            a = models.ForeignKey('ModelB', on_delete=models.CASCADE, related_name='a_rel')\n\n        class ModelB(models.Model):\n            b = models.ForeignKey('ModelA', on_delete=models.CASCADE, related_name='b_rel')\n\n        with self.assertRaises(Error):\n            _check_lazy_references(ModelA._meta)\n\n        with self.assertRaises(Error):\n            _check_lazy_references(ModelB._meta)\n\n\n\n"], "sample_1": ["\nfrom astropy.io.ascii.qdp import _get_lines_from_file, _read_table_qdp, _write_table_qdp\nimport astropy.units as u\nfrom astropy.table import Table\nimport numpy as np\nimport unittest\n\n\nclass TestQDP(unittest.TestCase):\n\n    def test_get_lines_from_file(self):\n        test_string = \"\"\"\n        ! This is a test\n        col1 col2\n        1 2\n        3 4\n        NO NO\n        ! Another table\n        col3 col4\n        5 6\n        7 8\n        \"\"\"\n        lines = _get_lines_from_file(test_string)\n        self.assertEqual(len(lines), 8)\n\n    def test_get_lines_from_file_with_delimiter(self):\n        test_string = \"\"\"\n        ! This is a test\n        col1,col2\n        1,2\n        3,4\n        NO,NO\n        ! Another table\n        col3,col4\n        5,6\n        7,8\n        \"\"\"\n        lines = _get_lines_from_file(test_string, delimiter=\",\")\n        self.assertEqual(len(lines), 8)\n\n    def test_get_lines_from_file_with_file_object(self):\n        with open(\"test_file.txt\", \"w\") as f:\n            f.write(\"\"\"\n            ! This is a test\n            col1 col2\n            1 2\n            3 4\n            NO NO\n            \"\"\")\n        lines = _get_lines_from_file(\"test_file.txt\")\n        self.assertEqual(len(lines), 5)\n\n    def test_read_table_qdp(self):\n        test_string = \"\"\"\n        ! Initial comment line 1\n        ! Initial comment line 2\n        READ TERR 1\n        READ SERR 3\n        ! Table 0 comment\n        !a a(pos) a(neg) b be c d\n        53000.5   0.25  -0.5   1  1.5  3.5 2\n        54000.5   1.25  -1.5   2  2.5  4.5 3\n        NO NO NO NO NO\n        ! Table 1 comment\n        !a a(pos) a(neg) b be c d\n        54000.5   2.25  -2.5   NO  3.5  5.5 nan\n        55000.5   3.25  -3.5   4  4.5  6.5 nan\n        \"\"\"\n        table = _read_table_qdp(test_string)\n        self.assertEqual(table.meta[\"initial_comments\"], [\"! Initial comment line 1\", \"! Initial comment line 2\"])\n        self.assertEqual(table.meta[\"comments\"], [\"! Table 0 comment\"])\n        self.assertEqual(table.colnames, [\"a\", \"a(pos)\", \"a(neg)\", \"b\", \"be\", \"c\", \"d\"])\n        self.assertEqual(table.shape, (2, 7))\n\n    def test_read_table_qdp_with_names(self):\n        test_string = \"\"\"\n        ! Initial comment line 1\n        ! Initial comment line 2\n        READ TERR 1\n        READ SERR 3\n        ! Table 0 comment\n        !a a(pos) a(neg) b be c d\n        53000.5   0.25  -0.5   1  1.5  3.5 2\n        54000.5   1.25  -1.5   2  2.5  4.5 3\n        NO NO NO NO NO\n        ! Table 1 comment\n        !a a(pos) a(neg) b be c d\n        54000.5   2.25  -2.5   NO  3.5  5.5 nan\n        55000.5   3.25  -3.5   4  4.5  6.5 nan\n        \"\"\"\n        table = _read_table_qdp(test_string, names=[\"flux\", \"flux_err_pos\", \"flux_err_neg\", \"time\", \"time_err\", \"mag\", \"mag_err\"])\n        self.assertEqual(table.meta[\"initial_comments\"], [\"! Initial comment line 1\", \"! Initial comment line 2\"])\n        self.assertEqual(table.meta[\"comments\"], [\"! Table 0 comment\"])\n        self.assertEqual(table.colnames, [\"flux\", \"flux_err_pos\", \"flux_err_neg\", \"time\", \"time_err\", \"mag\", \"mag_err\"])\n        self.assertEqual(table.shape, (2, 7))\n\n    def test_write_table_qdp(self):\n        table = Table([\n            [1, 2, 3, 4],\n            [5, 6, 7, 8]\n        ], names=['a', 'b', 'c', 'd'])\n        lines = _write_table_qdp(table)\n        self.assertEqual(lines[0], \"! Initial comments\")\n        self.assertEqual(lines[1], \"READ SERR 0\")\n        self.assertEqual(lines[2], \"READ TERR 0\")\n        self.assertEqual(lines[3], \"! Table 0 comment\")\n        self.assertEqual(lines[4], \"a b c d\")\n        self.assertEqual(lines[5], \"1 2 3 4\")\n        self.assertEqual(lines[6], \"5 6 7 8\")\n\n    def test_write_table_qdp_with_err_specs(self):\n        table = Table([\n            [1, 2, 3, 4],\n            [5, 6, 7, 8]\n        ], names=['a', 'b', 'c', 'd'])\n        lines = _write_table_qdp(table, err_specs={'serr': [2], 'terr': [0]})\n        self.assertEqual(lines[0], \"! Initial comments\")\n        self.assertEqual(lines[1], \"READ SERR 1\")\n        self.assertEqual(lines[2], \"READ TERR 0\")\n        self.assertEqual(lines[3], \"! Table 0 comment\")\n        self.assertEqual(lines[4], \"a b c d a_err b_err c_err\")\n        self.assertEqual(lines[5], \"1 2 3 4 1.0 1.0 1.0\")\n        self.assertEqual(lines[6], \"5 6 7 8 1.0 1.0 1.0\")\n\n\n\n"], "sample_143": ["\nfrom sympy.matrices import Adjoint, Inverse, MatrixSymbol, Transpose, KroneckerProduct\nfrom sympy.printing.pretty import pprint, pretty as xpretty\nfrom sympy.printing.pretty.pretty_symbology import center_accent, is_combining\nfrom sympy import pretty # As it is redefined above\nfrom sympy.core import Symbol, S, sympify\nfrom sympy.polys import Poly\nfrom sympy.logic import And, Or, Not, Implies\nfrom sympy.combinatorics import Permutation\nfrom sympy.functions import sin, cos, exp, log, sqrt, Abs, sign\nfrom sympy.calculus import diff, integrate\nfrom sympy.physics.quantum import TensorProduct, Dagger\nfrom sympy.physics.mechanics import Point, ReferenceFrame, Lagrangian\nfrom sympy.geometry import Point, Line, Circle, Triangle\nfrom sympy.plotting import plot, plot_implicit\nfrom sympy.ntheory import isprime, factorint\nfrom sympy.sets import FiniteSet, Interval, Union, Intersection\nfrom sympy.combinatorics import Permutation, Combinations\nfrom sympy.physics.mechanics import Point, ReferenceFrame, Lagrangian\nfrom sympy.physics.quantum import TensorProduct, Dagger\nfrom sympy.physics.vector import vectorize, cross, dot\n\ndef test_pretty_printing_basic():\n    x = Symbol('x')\n    y = Symbol('y')\n    z = Symbol('z')\n    expr = x**2 + 2*x*y + y**2\n    assert pretty(expr) == 'x**2 + 2*x*y + y**2'\n    assert pretty(x + y) == 'x + y'\n    assert pretty(x*y) == 'x*y'\n    assert pretty(x/y) == 'x/y'\n    assert pretty(x**y) == 'x**y'\n    assert pretty(sqrt(x)) == 'sqrt(x)'\n    assert pretty(log(x)) == 'log(x)'\n    assert pretty(sin(x)) == 'sin(x)'\n    assert pretty(cos(x)) == 'cos(x)'\n    assert pretty(exp(x)) == 'exp(x)'\n\ndef test_pretty_printing_functions():\n    assert pretty(diff(x**2, x)) == '2*x'\n    assert pretty(integrate(x, x)) == 'x**2/2'\n    assert pretty(abs(x)) == 'abs(x)'\n    assert pretty(sign(x)) == 'sign(x)'\n\ndef test_pretty_printing_symbols():\n    assert pretty(Symbol('a')) == 'a'\n    assert pretty(S.Pi) == 'pi'\n    assert pretty(S.Infinity) == 'infinity'\n    assert pretty(S.Zero) == '0'\n    assert pretty(S.One) == '1'\n\ndef test_pretty_printing_matrices():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    M = A + B\n    assert pretty(M) == 'A + B'\n\ndef test_pretty_printing_polynomials():\n    p = Poly(x**2 + 2*x + 1, x)\n    assert pretty(p) == 'x**2 + 2*x + 1'\n\ndef test_pretty_printing_logic():\n    assert pretty(And(x, y)) == '(x and y)'\n    assert pretty(Or(x, y)) == '(x or y)'\n    assert pretty(Not(x)) == '~x'\n    assert pretty(Implies(x, y)) == '(x implies y)'\n\ndef test_pretty_printing_permutations():\n    p = Permutation('1 2 3')\n    assert pretty(p) == '(1 2 3)'\n\ndef test_pretty_printing_complex_expressions():\n    expr = (x + y)**2 * sin(z) / (sqrt(x**2 + y**2) + 1)\n    assert pretty(expr) == '(x + y)**2 * sin(z) / (sqrt(x**2 + y**2) + 1)'\n\ndef test_pretty_printing_special_symbols():\n    assert pretty(TensorProduct(x, y)) == 'x \u2297 y'\n    assert pretty(Dagger(x)) == 'x\u2020'\n\ndef test_pretty_printing_mechanics():\n    p = Point('p')\n    r = ReferenceFrame('r')\n    L = Lagrangian('L', p, r)\n    assert pretty(p) == 'p'\n    assert pretty(r) == 'r'\n    assert pretty(L) == 'L'\n\ndef test_pretty_printing_geometry():\n    p = Point(1, 2)\n    l = Line(p, 2*p)\n    c = Circle(p, 3)\n    t = Triangle(p, 2*p, 3*p)\n    assert pretty(p) == '(1, 2)'\n    assert pretty(l) == 'Line((1, 2), (2, 4))'\n    assert pretty(c) == 'Circle((1, 2), 3)'\n    assert pretty(t) == 'Triangle((1, 2), (2, 4), (3, 6))'\n\ndef test_pretty_printing_plotting():\n    p = plot(sin(x), (x, 0, 2*pi))\n    assert pretty(p) == 'plot(sin(x), (x, 0, 2*pi))'\n\ndef test_pretty_printing_number_theory():\n    assert pretty(isprime(5)) == 'True'\n    assert pretty(factorint(12)) == '2**2 * 3'\n\ndef test_pretty_printing_sets():\n    s = FiniteSet(1, 2, 3)\n    i = Interval(1, 2)\n    u = Union(s, i)\n    assert pretty(s) == '{1, 2, 3}'\n    assert pretty(i) == 'Interval(1, 2)'\n    assert pretty(u) == '{1, 2, 3} \u222a Interval(1, 2)'\n\ndef test_pretty_printing_combinatorics():\n    c = Combinations(5, 2)\n    assert pretty(c) == 'Combinations(5, 2)'\n\ndef test_pretty_printing_physics_mechanics():\n    p = Point('p')\n    r = ReferenceFrame('r')\n    L = Lagrangian('L', p, r)\n    assert pretty(p) == 'p'\n    assert pretty(r) == 'r'\n    assert pretty(L) == 'L'\n\ndef test_pretty_printing_physics_quantum():\n    t = TensorProduct(x, y)\n    d = Dagger(x)\n    assert pretty(t) == 'x \u2297 y'\n    assert pretty(d) == 'x\u2020'\n\ndef test_pretty_printing_physics_vector():\n    v = vectorize(x)\n    assert pretty(v) == 'x'\n    v = cross(x, y)\n    assert pretty(v) == 'cross(x, y)'\n    v = dot(x, y)\n    assert pretty(v) == 'dot(x, y)'\n\n\n\n"], "sample_133": ["\nimport unittest\nfrom sympy.utilities.codegen import (codegen, make_routine, CCodeGen, C89CodeGen, C99CodeGen, InputArgument, CodeGenError, FCodeGen, CodeGenArgumentListError, OutputArgument, InOutArgument)\nfrom sympy import symbols, Eq, Matrix\nfrom sympy.abc import x, y, z, f, g\n\nclass TestCodeGen(unittest.TestCase):\n\n    def test_codegen_basic(self):\n        c_code, _ = codegen((\"f\", x + y * z), \"C\", \"test\", header=False, empty=False)\n        self.assertEqual(c_code, \"#include \\\"test.h\\\"\\n#include <math.h>\\ndouble test(double x, double y, double z) {\\ndouble test_result;\\ntest_result = x + y*z;\\nreturn test_result;\\n}\")\n\n    def test_codegen_equality(self):\n        c_code, _ = codegen([(\"myfcn\", Eq(f, 2*x)), (\"fcn2\", Eq(g, y))], \"C99\", header=False, empty=False)\n        self.assertEqual(c_code, \"#include \\\"myfcn.h\\\"\\n#include <math.h>\\nvoid myfcn(double x, double y, double *f) {\\n(*f) = 2*x;\\n}\\nvoid fcn2(double x, double y, double *g) {\\n(*g) = y;\\n}\")\n\n    def test_codegen_multiple_outputs(self):\n        c_code, _ = codegen([(\"myfcn\", [x*y, Eq(f, 1), Eq(g, x + g), Matrix([[x, 2]])]),], \"C99\", header=False, empty=False)\n        self.assertEqual(c_code, \"#include \\\"myfcn.h\\\"\\n#include <math.h>\\nvoid myfcn(double x, double y, double *result_5397460570204848505, double *f, double *g, double (*out_8598435338387848786)[2][1]) {\\n(*result_5397460570204848505) = x*y;\\n(*f) = 1;\\n(*g) = g + x;\\nout_8598435338387848786[0][0] = x;\\nout_8598435338387848786[0][1] = 2;\\n}\")\n\n    def test_codegen_global_vars(self):\n        f_code, _ = codegen((\"f\", x + y * z), \"F95\", header=False, empty=False, global_vars=(z,))\n        self.assertIn(\"REAL*8, parameter :: z\", f_code)\n        self.assertNotIn(\"z\", f_code)\n\n    def test_make_routine_basic(self):\n        r = make_routine(\"test\", x + y * z, language=\"C\")\n        self.assertEqual(r.name, \"test\")\n        self.assertEqual(len(r.arguments), 3)\n        self.assertEqual(len(r.results), 1)\n\n    def test_make_routine_equality(self):\n        r = make_routine(\"myfcn\", [Eq(f, 2*x), Eq(g, y)])\n        self.assertEqual(len(r.arguments), 2)\n        self.assertEqual(len(r.results), 2)\n\n    def test_make_routine_multiple_outputs(self):\n        r = make_routine(\"myfcn\", [x*y, Eq(f, 1), Eq(g, x + g), Matrix([[x, 2]])])\n        self.assertEqual(len(r.arguments), 2)\n        self.assertEqual(len(r.results), 4)\n\n    def test_make_routine_global_vars(self):\n        r = make_routine(\"f\", x + y * z, global_vars=(z,))\n        self.assertEqual(len(r.arguments), 2)\n        self.assertEqual(len(r.results), 1)\n        self.assertEqual(r.local_vars, set())\n\n\n\n"], "sample_32": ["\nimport unittest\nfrom django.db import models\nfrom django.db.models.fields.json import (\n    JSONField, KeyTransform, KeyTransformFactory,\n    DataContains, ContainedBy, HasKey, HasKeys, HasAnyKeys, JSONExact,\n    KeyTransformTextLookupMixin, KeyTextTransform,\n)\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom .models import CustomJSONDecoder, JSONModel, NullableJSONModel, RelatedJSONModel\n\nclass TestJSONField(unittest.TestCase):\n\n    def test_json_field_creation(self):\n        field = JSONField()\n        self.assertEqual(field.default_error_messages, {'invalid': _('Value must be valid JSON.')})\n        self.assertEqual(field.empty_strings_allowed, False)\n        self.assertEqual(field.encoder, None)\n        self.assertEqual(field.decoder, None)\n\n    def test_json_field_custom_encoder_decoder(self):\n        encoder = lambda x: x.upper()\n        decoder = lambda x: x.lower()\n        field = JSONField(encoder=encoder, decoder=decoder)\n        self.assertEqual(field.encoder, encoder)\n        self.assertEqual(field.decoder, decoder)\n\n    def test_json_field_check(self):\n        field = JSONField()\n        errors = field.check()\n        self.assertEqual(len(errors), 0)\n\n    def test_json_field_check_unsupported_database(self):\n        field = JSONField()\n        errors = field.check(databases=['unsupported_database'])\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(\n            errors[0].msg,\n            '%s does not support JSONFields.' % 'unsupported_database',\n        )\n\n    def test_json_field_deconstruct(self):\n        field = JSONField(encoder=lambda x: x, decoder=lambda x: x)\n        name, path, args, kwargs = field.deconstruct()\n        self.assertEqual(name, 'JSONField')\n        self.assertEqual(path, 'django.db.models.fields.json')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'encoder': lambda x: x, 'decoder': lambda x: x})\n\n    def test_json_field_from_db_value(self):\n        field = JSONField()\n        value = '{\"key\": \"value\"}'\n        result = field.from_db_value(value, expression=None, connection=None)\n        self.assertEqual(result, {'key': 'value'})\n\n    def test_json_field_get_prep_value(self):\n        field = JSONField()\n        value = {'key': 'value'}\n        result = field.get_prep_value(value)\n        self.assertEqual(result, '{\"key\": \"value\"}')\n\n    def test_json_field_get_transform(self):\n        field = JSONField()\n        transform = field.get_transform('key')\n        self.assertIsInstance(transform, KeyTransform)\n\n    def test_json_field_validate(self):\n        field = JSONField()\n        value = {'key': 'value'}\n        field.validate(value, None)\n\n    def test_json_field_value_to_string(self):\n        field = JSONField()\n        value = {'key': 'value'}\n        result = field.value_to_string(value)\n        self.assertEqual(result, '{\"key\": \"value\"}')\n\n    def test_json_field_formfield(self):\n        field = JSONField()\n        formfield = field.formfield()\n        self.assertIsInstance(formfield, forms.JSONField)\n\n    def test_data_contains_lookup(self):\n        field = JSONField()\n        lookup = DataContains(field, 'value')\n        self.assertEqual(lookup.lookup_name, 'contains')\n\n    def test_contained_by_lookup(self):\n        field = JSONField()\n        lookup = ContainedBy(field, 'value')\n        self.assertEqual(lookup.lookup_name, 'contained_by')\n\n    def test_has_key_lookup(self):\n        field = JSONField()\n        lookup = HasKey(field, 'key')\n        self.assertEqual(lookup.lookup_name, 'has_key')\n\n    def test_has_keys_lookup(self):\n        field = JSONField()\n        lookup = HasKeys(field, ['key1', 'key2'])\n        self.assertEqual(lookup.lookup_name, 'has_keys')\n\n    def test_has_any_keys_lookup(self):\n        field = JSONField()\n        lookup = HasAnyKeys(field, ['key1', 'key2'])\n        self.assertEqual(lookup.lookup_name, 'has_any_keys')\n\n    def test_json_exact_lookup(self):\n        field = JSONField()\n        lookup = JSONExact(field, 'value')\n        self.assertEqual(lookup.lookup_name, 'exact')\n\n    def test_key_transform_factory(self):\n        factory = KeyTransformFactory('key')\n        transform = factory()\n        self.assertIsInstance(transform, KeyTransform)\n        self.assertEqual(transform.key_name, 'key')\n\n    def test_key_transform_preprocess_lhs(self):\n        transform = KeyTransform('key')\n        lhs, params, key_transforms = transform.preprocess_lhs(None, None)\n        self.assertEqual(lhs, 'key')\n        self.assertEqual(params, [])\n        self.assertEqual(key_transforms, ['key'])\n\n    def test_key_transform_as_sql(self):\n        transform = KeyTransform('key')\n        sql, params = transform.as_sql(None, None)\n        self.assertEqual(sql, 'key')\n        self.assertEqual(params, [])\n\n    def test_key_text_transform(self):\n        transform = KeyTextTransform('key')\n        self.assertEqual(transform.postgres_operator, '->>')\n\n    def test_key_transform_text_lookup_mixin(self):\n        class TestLookup(KeyTransformTextLookupMixin, lookups.BaseLookup):\n            pass\n        lookup = TestLookup(KeyTransform('key'))\n        self.assertIsInstance(lookup, KeyTransformTextLookupMixin)\n\n    def test_case_insensitive_mixin(self):\n        class TestLookup(CaseInsensitiveMixin, lookups.BaseLookup):\n            pass\n        lookup = TestLookup(KeyTransform('key'))\n        self.assertIsInstance(lookup, CaseInsensitiveMixin)\n\n    def test_key_transform_is_null_lookup(self):\n        transform = KeyTransform('key')\n        lookup = KeyTransformIsNull(transform, True)\n        sql, params = lookup.as_oracle(None, None)\n        self.assertIn('NOT %s OR %s IS NULL' % (sql, 'key'), sql)\n\n\n\n"], "sample_101": ["\nimport unittest\nfrom sklearn.pipeline import Pipeline, FeatureUnion, make_pipeline, make_union\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np\nfrom sklearn.utils.testing import assert_array_equal\nfrom sklearn.sparse import csr_matrix\nfrom sklearn.exceptions import NotFittedError\n\nclass TestPipeline(unittest.TestCase):\n\n    def test_pipeline_basic(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        pipeline.fit(X, y)\n        y_pred = pipeline.predict(X)\n        self.assertTrue(isinstance(pipeline.steps[0][1], StandardScaler))\n        self.assertTrue(isinstance(pipeline.steps[1][1], LinearRegression))\n        self.assertLess(mean_squared_error(y, y_pred), 1e-3)\n\n    def test_pipeline_with_memory(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler(memory='cache')),\n                             ('regressor', LinearRegression())])\n        pipeline.fit(X, y)\n        y_pred = pipeline.predict(X)\n        # Check that the scaler was fitted\n        self.assertTrue(pipeline.steps[0][1].fitted)\n        # Check that the regressor was fitted\n        self.assertTrue(pipeline.steps[1][1].fitted)\n        # Check that the predictions are the same\n        y_pred_2 = pipeline.predict(X)\n        self.assert_array_equal(y_pred, y_pred_2)\n\n    def test_pipeline_with_invalid_memory(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        with self.assertRaises(ValueError):\n            Pipeline([('scaler', StandardScaler(memory='invalid'))])\n\n    def test_pipeline_with_named_steps(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        pipeline.fit(X, y)\n        y_pred = pipeline.predict(X)\n        self.assertLess(mean_squared_error(y, y_pred), 1e-3)\n\n    def test_pipeline_with_named_steps_and_memory(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler(memory='cache')),\n                             ('regressor', LinearRegression())])\n        pipeline.fit(X, y)\n        y_pred = pipeline.predict(X)\n        self.assertLess(mean_squared_error(y, y_pred), 1e-3)\n\n    def test_pipeline_with_invalid_step_name(self):\n        with self.assertRaises(ValueError):\n            Pipeline([('invalid_name', StandardScaler())])\n\n    def test_pipeline_with_invalid_step_type(self):\n        with self.assertRaises(TypeError):\n            Pipeline([('scaler', 'invalid_type')])\n\n    def test_pipeline_with_missing_step(self):\n        with self.assertRaises(ValueError):\n            Pipeline([('scaler', StandardScaler())])\n\n    def test_pipeline_with_duplicate_step_name(self):\n        with self.assertRaises(ValueError):\n            Pipeline([('scaler', StandardScaler()),\n                      ('scaler', StandardScaler())])\n\n    def test_pipeline_with_invalid_step_order(self):\n        with self.assertRaises(ValueError):\n            Pipeline([('regressor', LinearRegression()),\n                      ('scaler', StandardScaler())])\n\n    def test_pipeline_with_custom_transformer(self):\n        class CustomTransformer(BaseEstimator, TransformerMixin):\n            def fit(self, X, y=None):\n                pass\n\n            def transform(self, X):\n                return X * 2\n\n        pipeline = Pipeline([('transformer', CustomTransformer()),\n                             ('regressor', LinearRegression())])\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline.fit(X, y)\n        y_pred = pipeline.predict(X)\n        self.assertLess(mean_squared_error(y, y_pred), 1e-3)\n\n    def test_pipeline_with_sparse_data(self):\n        X = csr_matrix([[1, 2], [3, 4]])\n        y = np.array([0, 1])\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        pipeline.fit(X, y)\n        y_pred = pipeline.predict(X)\n        self.assertLess(mean_squared_error(y, y_pred), 1e-3)\n\n    def test_pipeline_with_fit_transform(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        pipeline.fit_transform(X, y)\n        y_pred = pipeline.predict(X)\n        self.assertLess(mean_squared_error(y, y_pred), 1e-3)\n\n    def test_pipeline_with_named_steps_and_fit_transform(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        pipeline.fit_transform(X, y)\n        y_pred = pipeline.predict(X)\n        self.assertLess(mean_squared_error(y, y_pred), 1e-3)\n\n    def test_pipeline_with_invalid_fit_transform(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(TypeError):\n            pipeline.fit_transform(X, y)\n\n    def test_pipeline_with_invalid_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_named_steps_and_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_invalid_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_named_steps_and_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_invalid_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_named_steps_and_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_invalid_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_named_steps_and_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_invalid_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_named_steps_and_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_invalid_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_named_steps_and_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_invalid_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_named_steps_and_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_invalid_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_named_steps_and_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_named_steps_and_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_named_steps_and_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_named_steps_and_fit_transform_data(self):\n        X, y = make_classification(n_samples=100, n_features=10)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())])\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y, y2=y)\n\n    def test_pipeline_with_named_steps_and_fit_transform_data(self):\n        X = np.random.rand(100, 10)\n        y = np.random.rand(100)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y)\n\n\n\n    def test_pipeline_with_named_steps_and_fit_transform_data(self):\n        X = np.random.rand(100)\n        y = np.random.rand(100)\n        pipeline = Pipeline([('scaler', StandardScaler()),\n                             ('regressor', LinearRegression())\n        with self.assertRaises(ValueError):\n            pipeline.fit_transform(X, y)\n\n\n\n"], "sample_11": ["\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    serializer_factory,\n    Serializer,\n)\nfrom django.db import models\nfrom django.utils.timezone import utc\nfrom django.conf import settings\nfrom unittest import mock\nimport datetime\nimport uuid\nimport decimal\nimport functools\nimport re\nimport types\nimport collections\nfrom enum import Enum\n\nclass MyEnum(Enum):\n    VALUE1 = 1\n    VALUE2 = 2\n\nclass TestSerializer(object):\n\n    def test_register_unregister(self):\n        class MySerializer(BaseSerializer):\n            pass\n        Serializer.register(object, MySerializer)\n        self.assertEqual(Serializer._registry[object], MySerializer)\n        Serializer.unregister(object)\n        self.assertNotIn(object, Serializer._registry)\n\n    def test_serializer_factory_simple_types(self):\n        for value in [1, 2, 3.14, True, False, None, b'test', 'test', datetime.date(2023, 10, 26), datetime.time(10, 30),\n                      uuid.UUID('123e4567-e89b-12d3-a456-426655440000')]:\n            serializer = serializer_factory(value)\n            self.assertIsInstance(serializer, BaseSerializer)\n\n    def test_serializer_factory_models(self):\n        class MyModel(models.Model):\n            pass\n        serializer = serializer_factory(MyModel)\n        self.assertIsInstance(serializer, ModelFieldSerializer)\n\n    def test_serializer_factory_manager(self):\n        class MyManager(models.Manager):\n            pass\n        serializer = serializer_factory(MyManager())\n        self.assertIsInstance(serializer, ModelManagerSerializer)\n\n    def test_serializer_factory_operation(self):\n        class MyOperation(Operation):\n            pass\n        serializer = serializer_factory(MyOperation())\n        self.assertIsInstance(serializer, OperationSerializer)\n\n    def test_serializer_factory_type(self):\n        serializer = serializer_factory(int)\n        self.assertIsInstance(serializer, TypeSerializer)\n\n    def test_serializer_factory_deconstructable(self):\n        class MyClass:\n            def deconstruct(self):\n                return 'my_class', 'my_module', (), {}\n        serializer = serializer_factory(MyClass())\n        self.assertIsInstance(serializer, DeconstructableSerializer)\n\n    def test_serializer_factory_enum(self):\n        serializer = serializer_factory(MyEnum.VALUE1)\n        self.assertIsInstance(serializer, EnumSerializer)\n\n    def test_serializer_factory_datetime(self):\n        dt = datetime.datetime(2023, 10, 26, 10, 30, 0, tzinfo=utc)\n        serializer = serializer_factory(dt)\n        self.assertIsInstance(serializer, DatetimeDatetimeSerializer)\n\n    def test_serializer_factory_decimal(self):\n        serializer = serializer_factory(decimal.Decimal('1.23'))\n        self.assertIsInstance(serializer, DecimalSerializer)\n\n    def test_serializer_factory_functools_partial(self):\n        func = lambda x: x * 2\n        args = (3,)\n        kwargs = {'a': 1}\n        partial = functools.partial(func, *args, **kwargs)\n        serializer = serializer_factory(partial)\n        self.assertIsInstance(serializer, FunctoolsPartialSerializer)\n\n    def test_serializer_factory_iterable(self):\n        serializer = serializer_factory([1, 2, 3])\n        self.assertIsInstance(serializer, IterableSerializer)\n\n    def test_serializer_factory_regex(self):\n        pattern = re.compile(r'\\d+')\n        serializer = serializer_factory(pattern)\n        self.assertIsInstance(serializer, RegexSerializer)\n\n    def test_serializer_factory_uuid(self):\n        serializer = serializer_factory(uuid.UUID('123e4567-e89b-12d3-a456-426655440000'))\n        self.assertIsInstance(serializer, UUIDSerializer)\n\n    def test_serializer_factory_unknown_type(self):\n        with self.assertRaises(ValueError):\n            serializer_factory(object())\n\n\n\n"], "sample_53": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.db import migrations\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.apps import apps\nfrom django.core.management.commands.migrate import Command\nfrom django.conf import settings\nfrom django.db.models import Model, Field\nfrom django.db.models.fields import CharField, IntegerField\nfrom django.test import TestCase, override_settings\n\nclass TestMigrationAutodetector(TestCase):\n\n    def setUp(self):\n        self.autodetector = MigrationAutodetector(\n            settings.INSTALLED_APPS,\n            Command(),\n            apps,\n        )\n        self.old_state = self.autodetector.get_state(\"old\")\n        self.new_state = self.autodetector.get_state(\"new\")\n\n    def test_detect_no_changes(self):\n        self.assertEqual(self.autodetector.detect_changes(), [])\n\n    def test_detect_field_added(self):\n        class OldModel(Model):\n            name = CharField(max_length=100)\n\n        class NewModel(Model):\n            name = CharField(max_length=100)\n            age = IntegerField()\n\n        self.old_state.models[\"myapp.OldModel\"] = OldModel\n        self.new_state.models[\"myapp.NewModel\"] = NewModel\n        changes = self.autodetector.detect_changes()\n        self.assertEqual(len(changes), 1)\n        self.assertIn(\"myapp\", changes)\n        self.assertIn(\"NewModel\", changes[\"myapp\"])\n\n    def test_detect_field_removed(self):\n        class OldModel(Model):\n            name = CharField(max_length=100)\n            age = IntegerField()\n\n        class NewModel(Model):\n            name = CharField(max_length=100)\n\n        self.old_state.models[\"myapp.OldModel\"] = OldModel\n        self.new_state.models[\"myapp.NewModel\"] = NewModel\n        changes = self.autodetector.detect_changes()\n        self.assertEqual(len(changes), 1)\n        self.assertIn(\"myapp\", changes)\n        self.assertIn(\"OldModel\", changes[\"myapp\"])\n\n    def test_detect_field_modified(self):\n        class OldModel(Model):\n            name = CharField(max_length=50)\n\n        class NewModel(Model):\n            name = CharField(max_length=100)\n\n        self.old_state.models[\"myapp.OldModel\"] = OldModel\n        self.new_state.models[\"myapp.NewModel\"] = NewModel\n        changes = self.autodetector.detect_changes()\n        self.assertEqual(len(changes), 1)\n        self.assertIn(\"myapp\", changes)\n        self.assertIn(\"OldModel\", changes[\"myapp\"])\n\n    def test_detect_model_added(self):\n        class NewModel(Model):\n            name = CharField(max_length=100)\n\n        self.new_state.models[\"myapp.NewModel\"] = NewModel\n        changes = self.autodetector.detect_changes()\n        self.assertEqual(len(changes), 1)\n        self.assertIn(\"myapp\", changes)\n        self.assertIn(\"NewModel\", changes[\"myapp\"])\n\n    def test_detect_model_removed(self):\n        class OldModel(Model):\n            name = CharField(max_length=100)\n\n        self.old_state.models[\"myapp.OldModel\"] = OldModel\n        changes = self.autodetector.detect_changes()\n        self.assertEqual(len(changes), 1)\n        self.assertIn(\"myapp\", changes)\n        self.assertIn(\"OldModel\", changes[\"myapp\"])\n\n    def test_detect_rename_model(self):\n        class OldModel(Model):\n            name = CharField(max_length=100)\n\n        class NewModel(Model):\n            name = CharField(max_length=100)\n\n        self.old_state.models[\"myapp.OldModel\"] = OldModel\n        self.new_state.models[\"myapp.NewModel\"] = NewModel\n        changes = self.autodetector.detect_changes()\n        self.assertEqual(len(changes), 1)\n        self.assertIn(\"myapp\", changes)\n        self.assertIn(\"OldModel\", changes[\"myapp\"])\n        self.assertIn(\"NewModel\", changes[\"myapp\"])\n\n    def test_detect_rename_field(self):\n        class OldModel(Model):\n            name = CharField(max_length=100)\n\n        class NewModel(Model):\n            first_name = CharField(max_length=100)\n\n        self.old_state.models[\"myapp.OldModel\"] = OldModel\n        self.new_state.models[\"myapp.NewModel\"] = NewModel\n        changes = self.autodetector.detect_changes()\n        self.assertEqual(len(changes), 1)\n        self.assertIn(\"myapp\", changes)\n        self.assertIn(\"OldModel\", changes[\"myapp\"])\n\n    def test_detect_no_changes_with_dependencies(self):\n        class OldModel(Model):\n            name = CharField(max_length=100)\n\n        class NewModel(Model):\n            name = CharField(max_length=100)\n\n        self.old_state.models[\"myapp.OldModel\"] = OldModel\n        self.new_state.models[\"myapp.NewModel\"] = NewModel\n        changes = self.autodetector.detect_changes()\n        self.assertEqual(len(changes), 0)\n\n    def test_detect_changes_with_initial_migration(self):\n        class OldModel(Model):\n            name = CharField(max_length=100)\n\n        class NewModel(Model):\n            name = CharField(max_length=100)\n\n        self.old_state.models[\"myapp.OldModel\"] = OldModel\n        self.new_state.models[\"myapp.NewModel\"] = NewModel\n        with patch(\"django.db.migrations.autodetector.MigrationAutodetector.ask_initial\") as mock_ask_initial:\n            mock_ask_initial.return_value = True\n            changes = self.autodetector.detect_changes()\n        self.assertEqual(len(changes), 1)\n        self.assertIn(\"myapp\", changes)\n        self.assertIn(\"NewModel\", changes[\"myapp\"])\n\n    def test_detect_changes_with_no_initial_migration(self):\n        class OldModel(Model):\n            name = CharField(max_length=100)\n\n        class NewModel(Model):\n            name = CharField(max_length=100)\n\n        self.old_state.models[\"myapp.OldModel\"] = OldModel\n        self.new_state.models[\"myapp.NewModel\"] = NewModel\n        with patch(\"django.db.migrations.autodetector.MigrationAutodetector.ask_initial\") as mock_ask_initial:\n            mock_ask_initial.return_value = False\n            changes = self.autodetector.detect_changes()\n        self.assertEqual(len(changes), 0)\n\n\n\n"], "sample_39": ["\nfrom django.urls import (\n    NoReverseMatch, Resolver404, ResolverMatch, URLPattern, URLResolver, get_callable, get_resolver, get_urlconf, include, path, re_path, resolve, reverse, reverse_lazy,\n)\nfrom django.urls.resolvers import RegexPattern\nfrom django.http import HttpResponse\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\nfrom django.utils.http import quote\nfrom unittest.mock import patch\n\nclass TestURLResolver(TestCase):\n\n    def setUp(self):\n        self.urlconf = \"\"\"\nfrom django.urls import path\n\nurlpatterns = [\n    path('accounts/', include('accounts.urls')),\n    path('blog/', include('blog.urls')),\n]\n        \"\"\"\n\n    def test_resolve_simple_path(self):\n        resolver = get_resolver(urlconf='django.urls.resolvers')\n        match = resolver.resolve('/accounts/login/')\n        self.assertEqual(match.func, get_callable('accounts.views.login'))\n        self.assertEqual(match.args, ())\n        self.assertEqual(match.kwargs, {'path': 'accounts/login/'})\n\n    def test_resolve_nested_path(self):\n        resolver = get_resolver(urlconf='django.urls.resolvers')\n        match = resolver.resolve('/accounts/login/')\n        self.assertEqual(match.func, get_callable('accounts.views.login'))\n        self.assertEqual(match.args, ())\n        self.assertEqual(match.kwargs, {'path': 'accounts/login/'})\n\n    def test_resolve_path_with_args(self):\n        resolver = get_resolver(urlconf='django.urls.resolvers')\n        match = resolver.resolve('/blog/post/123/')\n        self.assertEqual(match.func, get_callable('blog.views.post_detail'))\n        self.assertEqual(match.args, ('123',))\n        self.assertEqual(match.kwargs, {})\n\n    def test_resolve_path_with_kwargs(self):\n        resolver = get_resolver(urlconf='django.urls.resolvers')\n        match = resolver.resolve('/blog/post/123/?title=my-post')\n        self.assertEqual(match.func, get_callable('blog.views.post_detail'))\n        self.assertEqual(match.args, ('123',))\n        self.assertEqual(match.kwargs, {'title': 'my-post'})\n\n    def test_resolve_path_with_default_kwargs(self):\n        resolver = get_resolver(urlconf='django.urls.resolvers')\n        match = resolver.resolve('/blog/post/123/')\n        self.assertEqual(match.func, get_callable('blog.views.post_detail'))\n        self.assertEqual(match.args, ('123',))\n        self.assertEqual(match.kwargs, {'published': True})\n\n    def test_resolve_path_not_found(self):\n        resolver = get_resolver(urlconf='django.urls.resolvers')\n        with self.assertRaises(Resolver404):\n            resolver.resolve('/invalid/')\n\n    def test_reverse_simple_path(self):\n        resolver = get_resolver(urlconf='django.urls.resolvers')\n        url = reverse('accounts:login', resolver=resolver)\n        self.assertEqual(url, '/accounts/login/')\n\n    def test_reverse_nested_path(self):\n        resolver = get_resolver(urlconf='django.urls.resolvers')\n        url = reverse('blog:post_detail', args=('123',), resolver=resolver)\n        self.assertEqual(url, '/blog/post/123/')\n\n    def test_reverse_path_with_kwargs(self):\n        resolver = get_resolver(urlconf='django.urls.resolvers')\n        url = reverse('blog:post_detail', kwargs={'title': 'my-post'}, resolver=resolver)\n        self.assertEqual(url, '/blog/post/123/?title=my-post')\n\n    def test_reverse_path_not_found(self):\n        resolver = get_resolver(urlconf='django.urls.resolvers')\n        with self.assertRaises(NoReverseMatch):\n            reverse('invalid_view', resolver=resolver)\n\n    def test_urlconf_module_import(self):\n        with patch('django.conf.urls.get_urlconf') as mock_get_urlconf:\n            mock_get_urlconf.return_value = self.urlconf\n            resolver = get_resolver()\n            self.assertEqual(resolver.urlconf_module, self.urlconf)\n\n    def test_urlconf_module_type(self):\n        with patch('django.conf.urls.get_urlconf') as mock_get_urlconf:\n            mock_get_urlconf.return_value = self.urlconf\n            resolver = get_resolver()\n            self.assertIsInstance(resolver.urlconf_module, type)\n\n    def test_urlconf_module_urlpatterns(self):\n        with patch('django.conf.urls.get_urlconf') as mock_get_urlconf:\n            mock_get_urlconf.return_value = self.urlconf\n            resolver = get_resolver()\n            self.assertIsInstance(resolver.urlconf_module.urlpatterns, list)\n\n    def test_urlconf_module_urlpatterns_empty(self):\n        with patch('django.conf.urls.get_urlconf') as mock_get_urlconf:\n            mock_get_urlconf.return_value = \"urlpatterns = []\"\n            resolver = get_resolver()\n            with self.assertRaises(ImproperlyConfigured):\n                resolver.urlconf_module.urlpatterns\n\n\n\n"], "sample_78": ["\nimport click\nfrom click.testing import CliRunner\nfrom flask import current_app\nfrom flask.cli import AppGroup\nfrom flask.cli import find_best_app\nfrom flask.cli import FlaskGroup\nfrom flask.cli import get_version\nfrom flask.cli import load_dotenv\nfrom flask.cli import locate_app\nfrom flask.cli import NoAppException\nfrom flask.cli import prepare_import\nfrom flask.cli import run_command\nfrom flask.cli import ScriptInfo\nfrom flask.cli import with_appcontext\nfrom cliapp.app import testapp\nfrom flask.cli import cli\n\ndef test_cli_run_command():\n    runner = CliRunner()\n    result = runner.invoke(cli, [\"run\", \"--host\", \"127.0.0.1\", \"--port\", \"5000\"])\n    assert result.exit_code == 0\n    assert \" * Serving Flask app\" in result.output\n\ndef test_cli_shell_command():\n    runner = CliRunner()\n    result = runner.invoke(cli, [\"shell\"])\n    assert result.exit_code == 0\n    assert \"Python\" in result.output\n    assert \"App: testapp\" in result.output\n\ndef test_cli_routes_command():\n    runner = CliRunner()\n    result = runner.invoke(cli, [\"routes\"])\n    assert result.exit_code == 0\n    assert \"Endpoint\" in result.output\n    assert \"Methods\" in result.output\n    assert \"Rule\" in result.output\n\ndef test_cli_load_dotenv():\n    load_dotenv()\n    assert os.environ.get(\"FLASK_DEBUG\") == \"1\"\n\ndef test_cli_get_debug_flag():\n    os.environ[\"FLASK_DEBUG\"] = \"1\"\n    assert get_debug_flag() is True\n    os.environ[\"FLASK_DEBUG\"] = \"0\"\n    assert get_debug_flag() is False\n\ndef test_cli_find_best_app():\n    app = find_best_app()\n    assert app is testapp\n\ndef test_cli_locate_app():\n    app = locate_app(\"wsgi.py\")\n    assert app is testapp\n\ndef test_cli_prepare_import():\n    app = prepare_import(\"wsgi.py\")\n    assert app is testapp\n\ndef test_cli_script_info():\n    info = ScriptInfo()\n    assert info.app_import_path is None\n\ndef test_cli_with_appcontext():\n    @with_appcontext\n    def test_function():\n        assert current_app is testapp\n\n    test_function()\n\n"], "sample_19": ["\nimport unittest\nfrom django.http import HttpResponse\nfrom django.test import TestCase, override_settings\nfrom django.utils.encoding import force_str\nfrom django.utils.timezone import now\nfrom django.utils.translation import gettext_lazy as _\nfrom django.conf import settings\nfrom django.urls import resolve\nfrom django.views.debug import (\n    technical_404_response,\n    technical_500_response,\n    get_exception_reporter_filter,\n    get_default_exception_reporter_filter,\n    SafeExceptionReporterFilter,\n    ExceptionReporter,\n    CallableSettingWrapper,\n)\nfrom django.views.decorators.debug import sensitive_post_parameters, sensitive_variables\nfrom unittest.mock import patch, MagicMock, call\n\nclass TestTechnical404Response(TestCase):\n\n    def test_technical_404_response(self):\n        request = MagicMock(spec=HttpRequest)\n        request.path_info = '/some/nonexistent/path'\n        exception = Http404(_('Page not found'))\n        response = technical_404_response(request, exception)\n        self.assertEqual(response.status_code, 404)\n        self.assertEqual(response.content_type, 'text/html')\n\n    def test_technical_404_response_with_tried_urls(self):\n        request = MagicMock(spec=HttpRequest)\n        request.path_info = '/some/nonexistent/path'\n        exception = Http404(_('Page not found'), tried=[('admin', 'index')])\n        response = technical_404_response(request, exception)\n        self.assertEqual(response.status_code, 404)\n        self.assertEqual(response.content_type, 'text/html')\n\n    def test_technical_404_response_with_default_urlconf(self):\n        request = MagicMock(spec=HttpRequest)\n        request.path_info = '/'\n        exception = Http404(_('Page not found'), tried=[('admin', 'index')])\n        response = technical_404_response(request, exception)\n        self.assertEqual(response.status_code, 404)\n        self.assertEqual(response.content_type, 'text/html')\n\n    def test_technical_404_response_with_custom_urlconf(self):\n        with override_settings(ROOT_URLCONF='my_app.urls'):\n            request = MagicMock(spec=HttpRequest)\n            request.path_info = '/some/nonexistent/path'\n            exception = Http404(_('Page not found'))\n            response = technical_404_response(request, exception)\n            self.assertEqual(response.status_code, 404)\n            self.assertEqual(response.content_type, 'text/html')\n\nclass TestTechnical500Response(TestCase):\n\n    def test_technical_500_response(self):\n        request = MagicMock(spec=HttpRequest)\n        exc_type = Exception\n        exc_value = Exception('Test exception')\n        tb = MagicMock()\n        response = technical_500_response(request, exc_type, exc_value, tb)\n        self.assertEqual(response.status_code, 500)\n        self.assertEqual(response.content_type, 'text/html')\n\n    def test_technical_500_response_text(self):\n        request = MagicMock(spec=HttpRequest)\n        exc_type = Exception\n        exc_value = Exception('Test exception')\n        tb = MagicMock()\n        response = technical_500_response(request, exc_type, exc_value, tb, status_code=500)\n        self.assertEqual(response.status_code, 500)\n        self.assertEqual(response.content_type, 'text/plain')\n\nclass TestExceptionReporter(TestCase):\n\n    def test_get_traceback_data(self):\n        request = MagicMock(spec=HttpRequest)\n        exc_type = Exception\n        exc_value = Exception('Test exception')\n        tb = MagicMock()\n        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n        data = reporter.get_traceback_data()\n        self.assertIn('exception_type', data)\n        self.assertIn('exception_value', data)\n        self.assertIn('frames', data)\n        self.assertIn('request', data)\n        self.assertIn('settings', data)\n        self.assertIn('sys_executable', data)\n        self.assertIn('sys_version_info', data)\n        self.assertIn('server_time', data)\n        self.assertIn('django_version_info', data)\n        self.assertIn('sys_path', data)\n\n    def test_get_traceback_html(self):\n        request = MagicMock(spec=HttpRequest)\n        exc_type = Exception\n        exc_value = Exception('Test exception')\n        tb = MagicMock()\n        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n        html = reporter.get_traceback_html()\n        self.assertTrue(isinstance(html, str))\n\n    def test_get_traceback_text(self):\n        request = MagicMock(spec=HttpRequest)\n        exc_type = Exception\n        exc_value = Exception('Test exception')\n        tb = MagicMock()\n        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n        text = reporter.get_traceback_text()\n        self.assertTrue(isinstance(text, str))\n\nclass TestSafeExceptionReporterFilter(TestCase):\n\n    def test_cleanse_setting(self):\n        filter = SafeExceptionReporterFilter()\n        self.assertEqual(filter.cleanse_setting('API_KEY', 'secret123'), '********************')\n\n    def test_cleanse_setting_with_dict(self):\n        filter = SafeExceptionReporterFilter()\n        self.assertEqual(filter.cleanse_setting('API_KEY', {'secret1': 'secret123', 'secret2': 'secret456'}), {'secret1': '********************', 'secret2': '********************'})\n\n    def test_cleanse_setting_with_list(self):\n        filter = SafeExceptionReporterFilter()\n        self.assertEqual(filter.cleanse_setting('API_KEY', ['secret123', 'secret456']), ['********************', '********************'])\n\n    def test_cleanse_setting_with_tuple(self):\n        filter = SafeExceptionReporterFilter()\n        self.assertEqual(filter.cleanse_setting('API_KEY', ('secret123', 'secret456')), ('********************', '********************'))\n\n    def test_get_safe_settings(self):\n        filter = SafeExceptionReporterFilter()\n        settings = {\n            'API_KEY': 'secret123',\n            'DATABASE_URL': 'postgresql://user:password@host:port/database',\n            'DEBUG': True,\n        }\n        safe_settings = filter.get_safe_settings()\n        self.assertEqual(safe_settings['API_KEY'], '********************')\n        self.assertEqual(safe_settings['DATABASE_URL'], '********************')\n        self.assertEqual(safe_settings['DEBUG'], True)\n\n    def test_get_safe_request_meta(self):\n        filter = SafeExceptionReporterFilter()\n        request = MagicMock(spec=HttpRequest)\n        request.META = {'HTTP_API_KEY': 'secret123', 'REMOTE_ADDR': '127.0.0.1'}\n        safe_meta = filter.get_safe_request_meta(request)\n        self.assertEqual(safe_meta['HTTP_API_KEY'], '********************')\n        self.assertEqual(safe_meta['REMOTE_ADDR'], '127.0.0.1')\n\n    def test_is_active(self):\n        filter = SafeExceptionReporterFilter()\n        self.assertFalse(filter.is_active(None))\n        self.assertFalse(filter.is_active(MagicMock()))\n        self.assertTrue(filter.is_active(MagicMock(DEBUG=False)))\n\n    def test_get_cleansed_multivaluedict(self):\n        filter = SafeExceptionReporterFilter()\n        request = MagicMock(spec=HttpRequest)\n        request.POST = {'API_KEY': ['secret123', 'secret456']}\n        cleansed_post = filter.get_cleansed_multivaluedict(request, request.POST)\n        self.assertEqual(cleansed_post['API_KEY'], ['********************', '********************'])\n\n    def test_get_post_parameters(self):\n        filter = SafeExceptionReporterFilter()\n        request = MagicMock(spec=HttpRequest)\n        request.POST = {'API_KEY': 'secret123', 'OTHER_PARAM': 'value'}\n        cleansed_post = filter.get_post_parameters(request)\n        self.assertEqual(cleansed_post['API_KEY'], '********************')\n        self.assertEqual(cleansed_post['OTHER_PARAM'], 'value')\n\n    def test_cleanse_special_types(self):\n        filter = SafeExceptionReporterFilter()\n        request = MagicMock(spec=HttpRequest)\n        value = {'key': 'value'}\n        cleansed_value = filter.cleanse_special_types(request, value)\n        self.assertEqual(cleansed_value, {'key': '********************'})\n\n\n\n"], "sample_122": ["\nfrom sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\nfrom sympy.matrices import MutableSparseMatrix, MutableDenseMatrix\nfrom sympy.matrices import SparseMatrix\nimport unittest\n\nclass TestSparseMatrix(unittest.TestCase):\n\n    def test_sparse_matrix_creation(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        self.assertEqual(M.rows, 2)\n        self.assertEqual(M.cols, 2)\n        self.assertEqual(M[0, 0], 1)\n        self.assertEqual(M[1, 1], 4)\n\n    def test_sparse_matrix_from_list(self):\n        M = SparseMatrix([[1, 0, 0], [0, 2, 0], [0, 0, 3]])\n        self.assertEqual(M.rows, 3)\n        self.assertEqual(M.cols, 3)\n        self.assertEqual(M[0, 0], 1)\n        self.assertEqual(M[1, 1], 2)\n        self.assertEqual(M[2, 2], 3)\n\n    def test_sparse_matrix_from_dict(self):\n        M = SparseMatrix({(0, 0): 1, (1, 1): 2, (2, 2): 3})\n        self.assertEqual(M.rows, 3)\n        self.assertEqual(M.cols, 3)\n        self.assertEqual(M[0, 0], 1)\n        self.assertEqual(M[1, 1], 2)\n        self.assertEqual(M[2, 2], 3)\n\n    def test_sparse_matrix_zeros(self):\n        M = SparseMatrix.zeros(2, 3)\n        self.assertEqual(M.rows, 2)\n        self.assertEqual(M.cols, 3)\n        self.assertEqual(M[0, 0], 0)\n        self.assertEqual(M[1, 2], 0)\n\n    def test_sparse_matrix_eye(self):\n        M = SparseMatrix.eye(3)\n        self.assertEqual(M.rows, 3)\n        self.assertEqual(M.cols, 3)\n        self.assertEqual(M[0, 0], 1)\n        self.assertEqual(M[1, 1], 1)\n        self.assertEqual(M[2, 2], 1)\n\n    def test_sparse_matrix_copy(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        N = M.copy()\n        self.assertEqual(M.rows, N.rows)\n        self.assertEqual(M.cols, N.cols)\n        self.assertEqual(M[0, 0], N[0, 0])\n        self.assertEqual(M[1, 1], N[1, 1])\n\n    def test_sparse_matrix_getitem(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        self.assertEqual(M[0, 0], 1)\n        self.assertEqual(M[1, 1], 4)\n\n    def test_sparse_matrix_setitem(self):\n        M = SparseMatrix([[0, 0], [0, 0]])\n        M[0, 0] = 1\n        self.assertEqual(M[0, 0], 1)\n\n    def test_sparse_matrix_del(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        del M[0, 0]\n        self.assertEqual(M[0, 0], 0)\n\n    def test_sparse_matrix_row_list(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        self.assertEqual(M.row_list(), [(0, 0, 1), (0, 1, 2), (1, 0, 3), (1, 1, 4)])\n\n    def test_sparse_matrix_col_list(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        self.assertEqual(M.col_list(), [(0, 0, 1), (0, 1, 2), (1, 0, 3), (1, 1, 4)])\n\n    def test_sparse_matrix_nnz(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        self.assertEqual(M.nnz(), 4)\n\n    def test_sparse_matrix_shape(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        self.assertEqual(M.shape, (2, 2))\n\n    def test_sparse_matrix_transpose(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        self.assertEqual(M.transpose().row_list(), [(0, 0, 1), (1, 0, 3), (0, 1, 2), (1, 1, 4)])\n\n    def test_sparse_matrix_add(self):\n        M1 = SparseMatrix([[1, 2], [3, 4]])\n        M2 = SparseMatrix([[5, 6], [7, 8]])\n        self.assertEqual(M1 + M2, SparseMatrix([[6, 8], [10, 12]]))\n\n    def test_sparse_matrix_subtract(self):\n        M1 = SparseMatrix([[1, 2], [3, 4]])\n        M2 = SparseMatrix([[5, 6], [7, 8]])\n        self.assertEqual(M1 - M2, SparseMatrix([[-4, -4], [-4, -4]]))\n\n    def test_sparse_matrix_multiply(self):\n        M1 = SparseMatrix([[1, 2], [3, 4]])\n        M2 = SparseMatrix([[5, 6], [7, 8]])\n        self.assertEqual(M1 * M2, SparseMatrix([[19, 22], [43, 50]]))\n\n    def test_sparse_matrix_scalar_multiply(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        self.assertEqual(M * 2, SparseMatrix([[2, 4], [6, 8]]))\n\n    def test_sparse_matrix_inv(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        self.assertEqual(M.inv(), SparseMatrix([[-2, 1], [1.5, -0.5]]))\n\n    def test_sparse_matrix_solve(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        b = SparseMatrix([[5], [6]])\n        self.assertEqual(M.solve(b), SparseMatrix([[-1], [2]]))\n\n    def test_sparse_matrix_row_del(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        M.row_del(0)\n        self.assertEqual(M.rows, 1)\n        self.assertEqual(M.cols, 2)\n        self.assertEqual(M[0, 0], 3)\n\n    def test_sparse_matrix_col_del(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        M.col_del(0)\n        self.assertEqual(M.rows, 2)\n        self.assertEqual(M.cols, 1)\n        self.assertEqual(M[0, 0], 2)\n\n    def test_sparse_matrix_row_swap(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        M.row_swap(0, 1)\n        self.assertEqual(M.row_list(), [(1, 0, 3), (0, 1, 2)])\n\n    def test_sparse_matrix_col_swap(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        M.col_swap(0, 1)\n        self.assertEqual(M.col_list(), [(1, 1, 2), (0, 0, 1)])\n\n    def test_sparse_matrix_row_op(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        M.row_op(0, lambda v, j: v * 2)\n        self.assertEqual(M[0, 0], 2)\n\n    def test_sparse_matrix_col_op(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        M.col_op(0, lambda v, j: v * 2)\n        self.assertEqual(M[0, 0], 2)\n\n    def test_sparse_matrix_zip_row_op(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        M.zip_row_op(0, 1, lambda v, u: v + u)\n        self.assertEqual(M[0, 0], 3)\n\n\n\n"], "sample_65": ["\nfrom django.template import Template, Context\nfrom django.template.defaultfilters import (\n    add,\n    default,\n    default_if_none,\n    divisibleby,\n    filesizeformat,\n    join,\n    linebreaks,\n    pluralize,\n    safe,\n    slugify,\n    striptags,\n    truncatechars,\n    truncatewords,\n    urlencode,\n    wordwrap,\n    dictsort,\n    dictsortreversed,\n    first,\n    last,\n    length,\n    random,\n    slice_filter,\n    unordered_list,\n    yesno,\n    phone2numeric,\n    pprint,\n    get_digit,\n    date,\n    time,\n    timesince,\n    timeuntil,\n)\nfrom django.utils.safestring import mark_safe\nfrom django.utils.encoding import force_text\nfrom django.utils.translation import gettext, ngettext\nfrom unittest import TestCase\nimport re\nimport random\nfrom datetime import datetime, timedelta\n\nclass DefaultFiltersTests(TestCase):\n\n    def test_add(self):\n        self.assertEqual(add(5, 3), 8)\n        self.assertEqual(add(5, \"3\"), 8)\n        self.assertEqual(add(\"5\", 3), 8)\n        self.assertEqual(add(\"5\", \"3\"), 8)\n\n    def test_default(self):\n        self.assertEqual(default(5, \"default\"), 5)\n        self.assertEqual(default(None, \"default\"), \"default\")\n\n    def test_default_if_none(self):\n        self.assertEqual(default_if_none(5, \"default\"), 5)\n        self.assertEqual(default_if_none(None, \"default\"), \"default\")\n\n    def test_divisibleby(self):\n        self.assertTrue(divisibleby(10, 2))\n        self.assertFalse(divisibleby(10, 3))\n\n    def test_filesizeformat(self):\n        self.assertEqual(filesizeformat(1024), \"1 KB\")\n        self.assertEqual(filesizeformat(1024 * 1024), \"1 MB\")\n        self.assertEqual(filesizeformat(1024 * 1024 * 1024), \"1 GB\")\n        self.assertEqual(filesizeformat(0), \"0 bytes\")\n        self.assertEqual(filesizeformat(-1024), \"-1 KB\")\n\n    def test_join(self):\n        self.assertEqual(join([\"a\", \"b\", \"c\"], \"-\"), \"a-b-c\")\n\n    def test_linebreaks(self):\n        self.assertEqual(linebreaks(\"This is a line.\\nThis is another line.\"), \"<p>This is a line.<br>This is another line.</p>\")\n\n    def test_pluralize(self):\n        self.assertEqual(pluralize(0), \"votes\")\n        self.assertEqual(pluralize(1), \"vote\")\n        self.assertEqual(pluralize(2), \"votes\")\n        self.assertEqual(pluralize(0, \"es\"), \"classes\")\n        self.assertEqual(pluralize(1, \"es\"), \"class\")\n        self.assertEqual(pluralize(2, \"es\"), \"classes\")\n        self.assertEqual(pluralize(0, \"y,ies\"), \"candies\")\n        self.assertEqual(pluralize(1, \"y,ies\"), \"candy\")\n        self.assertEqual(pluralize(2, \"y,ies\"), \"candies\")\n\n    def test_safe(self):\n        self.assertEqual(safe(\"<b>Hello</b>\"), \"<b>Hello</b>\")\n\n    def test_slugify(self):\n        self.assertEqual(slugify(\"This is a test string\"), \"this-is-a-test-string\")\n\n    def test_striptags(self):\n        self.assertEqual(striptags(\"<b>Hello</b>\"), \"Hello\")\n\n    def test_truncatechars(self):\n        self.assertEqual(truncatechars(\"This is a test string\", 10), \"This is a t...\")\n        self.assertEqual(truncatechars(\"This is a test string\", 10, \"...\"), \"This is a test...\")\n\n    def test_truncatewords(self):\n        self.assertEqual(truncatewords(\"This is a test string\", 5), \"This is a test\")\n        self.assertEqual(truncatewords(\"This is a test string\", 5, \"...\"), \"This is a test...\")\n\n    def test_wordwrap(self):\n        self.assertEqual(wordwrap(\"This is a test string\", 10), \"This is a test\\nstring\")\n\n    def test_dictsort(self):\n        data = [\n            {\"name\": \"Alice\", \"age\": 30},\n            {\"name\": \"Bob\", \"age\": 25},\n            {\"name\": \"Charlie\", \"age\": 35},\n        ]\n        sorted_data = dictsort(data, \"name\")\n        self.assertEqual(sorted_data[0][\"name\"], \"Alice\")\n        self.assertEqual(sorted_data[1][\"name\"], \"Bob\")\n        self.assertEqual(sorted_data[2][\"name\"], \"Charlie\")\n\n    def test_dictsortreversed(self):\n        data = [\n            {\"name\": \"Alice\", \"age\": 30},\n            {\"name\": \"Bob\", \"age\": 25},\n            {\"name\": \"Charlie\", \"age\": 35},\n        ]\n        sorted_data = dictsortreversed(data, \"name\")\n        self.assertEqual(sorted_data[0][\"name\"], \"Charlie\")\n        self.assertEqual(sorted_data[1][\"name\"], \"Bob\")\n        self.assertEqual(sorted_data[2][\"name\"], \"Alice\")\n\n    def test_first(self):\n        self.assertEqual(first([\"a\", \"b\", \"c\"]), \"a\")\n\n    def test_last(self):\n        self.assertEqual(last([\"a\", \"b\", \"c\"]), \"c\")\n\n    def test_length(self):\n        self.assertEqual(length([\"a\", \"b\", \"c\"]), 3)\n\n    def test_random(self):\n        data = [\"a\", \"b\", \"c\"]\n        for _ in range(10):\n            self.assertIn(random(data), data)\n\n    def test_slice_filter(self):\n        self.assertEqual(slice_filter(\"abcdefg\", \"1:3\"), \"bcd\")\n        self.assertEqual(slice_filter(\"abcdefg\", \"::2\"), \"aceg\")\n        self.assertEqual(slice_filter(\"abcdefg\", \"2:-1\"), \"bcdef\")\n\n    def test_unordered_list(self):\n        self.assertEqual(\n            unordered_list([\n                \"States\",\n                [\"Kansas\", [\"Lawrence\", \"Topeka\"], \"Illinois\"],\n            ]),\n            \"<ul>\\n<li>States\\n<ul>\\n<li>Kansas\\n<li>Lawrence\\n<li>Topeka\\n</ul>\\n</li>\\n<li>Illinois</li>\\n</ul>\\n\",\n        )\n\n    def test_yesno(self):\n        self.assertEqual(yesno(True, \"yeah,no,maybe\"), \"yeah\")\n        self.assertEqual(yesno(False, \"yeah,no,maybe\"), \"no\")\n        self.assertEqual(yesno(None, \"yeah,no,maybe\"), \"maybe\")\n        self.assertEqual(yesno(None, \"yes,no\"), \"no\")\n\n    def test_phone2numeric(self):\n        self.assertEqual(phone2numeric(\"123-456-7890\"), \"1234567890\")\n        self.assertEqual(phone2numeric(\"(123) 456-7890\"), \"1234567890\")\n        self.assertEqual(phone2numeric(\"123.456.7890\"), \"1234567890\")\n\n    def test_pprint(self):\n        self.assertEqual(pprint({\"a\": 1, \"b\": 2}), \"{'a': 1, 'b': 2}\")\n\n\n\n"], "sample_148": ["\nfrom sympy import (Abs, acos, adjoint, arg, atan, atan2, conjugate, cos, DiracDelta, E, exp, expand, Expr, Function, Heaviside, I, im, log, nan, oo, pi, Rational, re, S, sign, sin, sqrt, Symbol, symbols, transpose, zoo, exp_polar, Piecewise, Interval, comp, Integral, Matrix, ImmutableMatrix, SparseMatrix, ImmutableSparseMatrix, MatrixSymbol, FunctionMatrix, Lambda, Derivative, Eq)\nfrom sympy.core.expr import unchanged\nfrom sympy.core.function import ArgumentIndexError\nfrom sympy.testing.pytest import XFAIL, raises, _both_exp_pow\nfrom sympy import polar_lift, polarify\nfrom sympy import (exp_polar, polar_lift, exp, unpolarify, principal_branch)\nfrom sympy import gamma, erf, sin, tanh, uppergamma, Eq, Ne\nfrom sympy.abc import x\nfrom sympy import Matrix, simplify\nfrom sympy import (periodic_argument, unbranched_argument, oo, principal_branch, polar_lift, pi)\nfrom sympy import principal_branch\nfrom sympy import principal_branch, polar_lift, exp_polar\nfrom sympy import simplify\nfrom sympy.functions.elementary.complexes import unpolarify\n\ndef test_polar_lift():\n    from sympy import I\n    assert polar_lift(2).args[0] == 2\n    assert polar_lift(2*I).args[0] == 2*I\n    assert polar_lift(2 + 3*I).args[0] == 2 + 3*I\n    assert polar_lift(2*exp_polar(I*pi)).args[0] == 2*exp_polar(I*pi)\n    assert polar_lift(2*exp_polar(I*pi/2)).args[0] == 2*exp_polar(I*pi/2)\n\ndef test_periodic_argument():\n    from sympy import I, pi\n    assert periodic_argument(exp_polar(0), 2*pi) == 0\n    assert periodic_argument(exp_polar(I*pi), 2*pi) == pi\n    assert periodic_argument(exp_polar(I*2*pi), 2*pi) == 0\n    assert periodic_argument(exp_polar(I*3*pi), 2*pi) == pi\n    assert periodic_argument(exp_polar(I*5*pi), 2*pi) == 3*pi\n    assert periodic_argument(exp_polar(I*5*pi), oo) == 5*pi\n\ndef test_principal_branch():\n    from sympy import I, pi\n    assert principal_branch(exp_polar(0), 2*pi) == 0\n    assert principal_branch(exp_polar(I*pi), 2*pi) == pi\n    assert principal_branch(exp_polar(I*2*pi), 2*pi) == 0\n    assert principal_branch(exp_polar(I*3*pi), 2*pi) == pi\n    assert principal_branch(exp_polar(I*5*pi), 2*pi) == 3*pi\n    assert principal_branch(exp_polar(I*5*pi), oo) == 5*pi\n\ndef test_unpolarify():\n    from sympy import I, pi\n    assert unpolarify(exp_polar(0)) == 1\n    assert unpolarify(exp_polar(I*pi)) == I\n    assert unpolarify(exp_polar(I*2*pi)) == 1\n    assert unpolarify(exp_polar(I*3*pi)) == I\n    assert unpolarify(exp_polar(I*5*pi)) == -1\n    assert unpolarify(polar_lift(exp_polar(I*pi))) == I\n    assert unpolarify(principal_branch(exp_polar(I*pi), 2*pi)) == I\n    assert unpolarify(polar_lift(2 + 3*I)) == 2 + 3*I\n    assert unpolarify(polar_lift(2*exp_polar(I*pi))) == 2*exp_polar(0)\n\n\n\n"], "sample_46": ["\nfrom django.db.backends.ddl_references import (\n    Columns, Expressions, ForeignKeyName, IndexName, Statement, Table,\n)\nfrom unittest import TestCase\n\nclass TestReferences(TestCase):\n\n    def test_table_references(self):\n        table = Table('users', lambda x: x)\n        self.assertFalse(table.references_table('products'))\n        self.assertTrue(table.references_table('users'))\n\n    def test_table_rename(self):\n        table = Table('users', lambda x: x)\n        table.rename_table_references('users', 'customers')\n        self.assertEqual(table.table, 'customers')\n\n    def test_columns_references(self):\n        columns = Columns('users', ['id', 'name'], lambda x: x)\n        self.assertFalse(columns.references_column('products', 'id'))\n        self.assertTrue(columns.references_column('users', 'id'))\n\n    def test_columns_rename(self):\n        columns = Columns('users', ['id', 'name'], lambda x: x)\n        columns.rename_column_references('users', 'id', 'user_id')\n        self.assertEqual(columns.columns, ['user_id', 'name'])\n\n    def test_index_name(self):\n        index = IndexName('users', ['id'], '_idx', lambda x, y, z: f'{x}_{z}')\n        self.assertEqual(str(index), 'users_idx')\n\n    def test_index_columns(self):\n        index = IndexColumns('users', ['id', 'name'], lambda x: x, opclasses=['btree', 'btree'])\n        self.assertEqual(str(index), 'users.id btree, users.name btree')\n\n    def test_foreign_key_name(self):\n        fk = ForeignKeyName(\n            'users', ['id'], 'groups', ['group_id'], '_{to_table}_{to_column}',\n            lambda x, y, z: f'{x}_{z}'\n        )\n        self.assertEqual(str(fk), 'users_groups_group_id')\n\n    def test_statement(self):\n        statement = Statement(\n            'SELECT {column} FROM {table}',\n            column='id',\n            table='users'\n        )\n        self.assertEqual(str(statement), 'SELECT id FROM users')\n\n    def test_expressions(self):\n        from django.db.models import F, Value\n        expressions = Expressions(\n            'users', [F('id') + Value(1)],\n            compiler=object(),\n            quote_value=lambda x: f\"'{x}'\"\n        )\n        self.assertEqual(str(expressions), 'SELECT (id + \\'1\\')')\n\n\n\n"], "sample_124": ["\nfrom sympy import symbols, Symbol, sinh, nan, oo, zoo, pi, asinh, acosh, log, sqrt,  coth, I, cot, E, tanh, tan, cosh, cos, S, sin, Rational, atanh, acoth,  Integer, O, exp, sech, sec, csch, asech, acsch, acos, asin, expand_mul\nfrom sympy.functions.elementary.hyperbolic import *\n\ndef test_asinh():\n    x = Symbol('x')\n    assert asinh(0) == 0\n    assert asinh(1) == log(1 + sqrt(2))\n    assert asinh(S.Infinity) == oo\n    assert asinh(-1) == -log(1 + sqrt(2))\n    assert asinh(x).diff(x) == 1/sqrt(x**2 + 1)\n    assert asinh(x).rewrite(log) == log(x + sqrt(x**2 + 1))\n\ndef test_acosh():\n    x = Symbol('x')\n    assert acosh(1) == 0\n    assert acosh(S.Infinity) == oo\n    assert acosh(2) == log(1 + sqrt(3))\n    assert acosh(-1) == S.ComplexInfinity\n    assert acosh(x).diff(x) == 1/sqrt(x**2 - 1)\n    assert acosh(x).rewrite(log) == log(x + sqrt(x - 1) * sqrt(x + 1))\n\ndef test_atanh():\n    x = Symbol('x')\n    assert atanh(0) == 0\n    assert atanh(1) == oo\n    assert atanh(-1) == -oo\n    assert atanh(x).diff(x) == 1/(1 - x**2)\n    assert atanh(x).rewrite(log) == (log(1 + x) - log(1 - x))/2\n\ndef test_acoth():\n    x = Symbol('x')\n    assert acoth(1) == oo\n    assert acoth(-1) == -oo\n    assert acoth(x).diff(x) == 1/(1 - x**2)\n    assert acoth(x).rewrite(log) == (log(1 + 1/x) - log(1 - 1/x))/2\n\ndef test_asech():\n    x = Symbol('x')\n    assert asech(1) == 0\n    assert asech(0) == oo\n    assert asech(x).diff(x) == -1/(x*sqrt(1 - x**2))\n    assert asech(x).rewrite(log) == log(1/x + sqrt(1/x - 1) * sqrt(1/x + 1))\n\ndef test_acsch():\n    x = Symbol('x')\n    assert acsch(0) == oo\n    assert acsch(1) == log(1 + sqrt(2))\n    assert acsch(x).diff(x) == -1/(x**2*sqrt(1 + 1/x**2))\n    assert acsch(x).rewrite(log) == log(1/x + sqrt(1/x**2 + 1))\n\n\n\n"], "sample_141": ["\nfrom sympy.physics.units import (\n    meter, second, kilogram,\n    convert_to, quantity_simplify, check_dimensions,\n    UnitSystem, Dimension,\n)\nfrom sympy import (\n    Add, Mul, Pow, sympify, Quantity,\n    Symbol\n)\nfrom sympy.physics.units.prefixes import kilo, milli\nfrom sympy.physics.units.dimensions import Length, Mass, Time\nfrom sympy.physics.units.quantities import speed_of_light\nimport unittest\n\nclass TestUtil(unittest.TestCase):\n\n    def test_convert_to_single_unit(self):\n        self.assertEqual(convert_to(meter, kilometer), 0.001*kilometer)\n        self.assertEqual(convert_to(kilometer, meter), 1000*meter)\n        self.assertEqual(convert_to(speed_of_light, meter/second), 299792458*meter/second)\n\n    def test_convert_to_multiple_units(self):\n        self.assertEqual(convert_to(speed_of_light, [meter, second]), 299792458*meter/second)\n        self.assertEqual(convert_to(3*newton, [centimeter, gram, second]), 300000*centimeter*gram/second**2)\n\n    def test_convert_to_to_planck_units(self):\n        self.assertAlmostEqual(convert_to(atomic_mass_constant, [\n            gravitational_constant, speed_of_light, hbar\n        ]).n(), 7.62963085040767e-20*gravitational_constant**(-0.5)*hbar**0.5*speed_of_light**0.5)\n\n    def test_quantity_simplify(self):\n        self.assertEqual(quantity_simplify(kilo*foot*inch), 250*foot**2/3)\n        self.assertEqual(quantity_simplify(foot - 6*inch), foot/2)\n\n    def test_check_dimensions(self):\n        self.assertEqual(check_dimensions(2*meter + 3*second), 2*meter + 3*second)\n        with self.assertRaises(ValueError):\n            check_dimensions(2*meter + 3)\n\n    def test_check_dimensions_mul(self):\n        self.assertEqual(check_dimensions(2*meter*kilogram), 2*meter*kilogram)\n        with self.assertRaises(ValueError):\n            check_dimensions(2*meter*kilogram + 3)\n\n\n\n"], "sample_2": ["\nimport unittest\nfrom astropy.io import fits\nfrom astropy.wcs import WCS\nfrom astropy.wcs import find_all_wcs\nfrom astropy.utils.exceptions import AstropyUserWarning\nfrom astropy.utils.iers import IERS_A\nfrom astropy.coordinates import SkyCoord\nfrom astropy.units import Quantity\nfrom astropy.coordinates import EarthLocation\nfrom astropy.coordinates import get_body_barycentric_pos\nfrom astropy.time import Time\nfrom astropy.tests.helper import catch_warnings\nfrom astropy.tests.helper import assert_quantity_allclose\nfrom astropy.wcs.utils import _parse_keysel\nfrom astropy.wcs.utils import _wcs\n\nclass TestWCS(unittest.TestCase):\n\n    def test_wcs_from_header(self):\n        with fits.open('tests/data/wcs_test.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            self.assertEqual(wcs.naxis, 2)\n            self.assertEqual(wcs.ctype[0], 'RA---TAN')\n            self.assertEqual(wcs.ctype[1], 'DEC--TAN')\n\n    def test_wcs_from_header_with_sip(self):\n        with fits.open('tests/data/wcs_test_sip.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            self.assertEqual(wcs.naxis, 2)\n            self.assertEqual(wcs.ctype[0], 'RA---TAN')\n            self.assertEqual(wcs.ctype[1], 'DEC--TAN')\n            self.assertIsNotNone(wcs.sip)\n\n    def test_wcs_to_fits(self):\n        with fits.open('tests/data/wcs_test.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            new_header = fits.Header()\n            wcs.to_header(new_header)\n            self.assertEqual(new_header['CTYPE1'], 'RA---TAN')\n            self.assertEqual(new_header['CTYPE2'], 'DEC--TAN')\n\n    def test_wcs_to_fits_with_sip(self):\n        with fits.open('tests/data/wcs_test_sip.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            new_header = fits.Header()\n            wcs.to_header(new_header)\n            self.assertEqual(new_header['CTYPE1'], 'RA---TAN')\n            self.assertEqual(new_header['CTYPE2'], 'DEC--TAN')\n            self.assertIsNotNone(new_header['SIP'])\n\n    def test_wcs_sub(self):\n        with fits.open('tests/data/wcs_test.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            new_wcs = wcs.sub([WCSSUB_CELESTIAL])\n            self.assertEqual(new_wcs.naxis, 2)\n            self.assertEqual(new_wcs.ctype[0], 'RA---TAN')\n            self.assertEqual(new_wcs.ctype[1], 'DEC--TAN')\n\n    def test_wcs_slice(self):\n        with fits.open('tests/data/wcs_test.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            new_wcs = wcs.slice((slice(1, 2), slice(None)))\n            self.assertEqual(new_wcs.naxis, 1)\n            self.assertEqual(new_wcs.ctype[0], 'DEC--TAN')\n\n    def test_wcs_dropaxis(self):\n        with fits.open('tests/data/wcs_test.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            new_wcs = wcs.dropaxis(1)\n            self.assertEqual(new_wcs.naxis, 1)\n            self.assertEqual(new_wcs.ctype[0], 'RA---TAN')\n\n    def test_wcs_swapaxes(self):\n        with fits.open('tests/data/wcs_test.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            new_wcs = wcs.swapaxes(0, 1)\n            self.assertEqual(new_wcs.naxis, 2)\n            self.assertEqual(new_wcs.ctype[0], 'DEC--TAN')\n            self.assertEqual(new_wcs.ctype[1], 'RA---TAN')\n\n    def test_wcs_reorient_celestial_first(self):\n        with fits.open('tests/data/wcs_test.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            new_wcs = wcs.reorient_celestial_first()\n            self.assertEqual(new_wcs.naxis, 2)\n            self.assertEqual(new_wcs.ctype[0], 'RA---TAN')\n            self.assertEqual(new_wcs.ctype[1], 'DEC--TAN')\n\n    def test_wcs_find_all_wcs(self):\n        with fits.open('tests/data/wcs_test.fits') as hdul:\n            header = hdul[0].header\n            wcses = find_all_wcs(header)\n            self.assertEqual(len(wcses), 1)\n\n    def test_wcs_find_all_wcs_with_sip(self):\n        with fits.open('tests/data/wcs_test_sip.fits') as hdul:\n            header = hdul[0].header\n            wcses = find_all_wcs(header)\n            self.assertEqual(len(wcses), 1)\n\n    def test_wcs_fix(self):\n        with fits.open('tests/data/wcs_test_bad.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            with catch_warnings(\n                    warnings.simplefilter(\"always\", FITSFixedWarning)):\n                wcs.fix(translate_units='')\n            self.assertEqual(wcs.naxis, 2)\n            self.assertEqual(wcs.ctype[0], 'RA---TAN')\n            self.assertEqual(wcs.ctype[1], 'DEC--TAN')\n\n    def test_wcs_fix_with_translate_units(self):\n        with fits.open('tests/data/wcs_test_bad.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            with catch_warnings(\n                    warnings.simplefilter(\"always\", FITSFixedWarning)):\n                wcs.fix(translate_units='all')\n            self.assertEqual(wcs.naxis, 2)\n            self.assertEqual(wcs.ctype[0], 'RA---TAN')\n            self.assertEqual(wcs.ctype[1], 'DEC--TAN')\n\n    def test_wcs_celestial(self):\n        with fits.open('tests/data/wcs_test.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            celestial_wcs = wcs.celestial\n            self.assertEqual(celestial_wcs.naxis, 2)\n            self.assertEqual(celestial_wcs.ctype[0], 'RA---TAN')\n            self.assertEqual(celestial_wcs.ctype[1], 'DEC--TAN')\n\n    def test_wcs_is_celestial(self):\n        with fits.open('tests/data/wcs_test.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            self.assertTrue(wcs.is_celestial)\n\n    def test_wcs_axis_type_names(self):\n        with fits.open('tests/data/wcs_test.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            axis_names = wcs.axis_type_names\n            self.assertEqual(axis_names[0], 'RA')\n            self.assertEqual(axis_names[1], 'DEC')\n\n    def test_wcs_pixel_scale_matrix(self):\n        with fits.open('tests/data/wcs_test.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            pixel_scale_matrix = wcs.pixel_scale_matrix\n            self.assertEqual(pixel_scale_matrix.shape, (2, 2))\n\n    def test_wcs_reproject_to_world(self):\n        with fits.open('tests/data/wcs_test.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            world_coords = SkyCoord(ra=10, dec=20, unit='deg')\n            pixel_coords = wcs.reproject_to_world(world_coords)\n            self.assertEqual(pixel_coords.ra.value, 10)\n            self.assertEqual(pixel_coords.dec.value, 20)\n\n    def test_wcs_reproject_to_pixel(self):\n        with fits.open('tests/data/wcs_test.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            world_coords = SkyCoord(ra=10, dec=20, unit='deg')\n            pixel_coords = wcs.reproject_to_pixel(world_coords)\n            self.assertEqual(pixel_coords.ra.value, 10)\n            self.assertEqual(pixel_coords.dec.value, 20)\n\n    def test_wcs_reproject_to_pixel_with_sip(self):\n        with fits.open('tests/data/wcs_test_sip.fits') as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            world_coords = SkyCoord(ra=10, dec=20, unit='deg')\n            pixel_coords = wcs.reproject_to_pixel(world_coords)\n            self.assertEqual(pixel_coords.ra.value, 10)\n            self.assertEqual(pixel_coords.dec.value, 20)\n\n\n\n"], "sample_36": ["\nfrom django.db import models\nfrom django.db.models import Q\nfrom django.db.models.query_utils import (\n    select_related_descend,\n    refs_expression,\n    check_rel_lookup_compatibility,\n    FilteredRelation,\n)\nfrom django.test import TestCase\n\nclass ModelA(models.Model):\n    name = models.CharField(max_length=100)\n    b = models.ForeignKey('ModelB', on_delete=models.CASCADE)\n\nclass ModelB(models.Model):\n    name = models.CharField(max_length=100)\n    c = models.ForeignKey('ModelC', on_delete=models.CASCADE)\n\nclass ModelC(models.Model):\n    name = models.CharField(max_length=100)\n\nclass QueryUtilsTests(TestCase):\n\n    def test_select_related_descend_basic(self):\n        self.assertTrue(select_related_descend(ModelA.b, False, {}, set()))\n        self.assertFalse(select_related_descend(ModelA.b, False, {}, {'name': True}))\n\n    def test_select_related_descend_restricted(self):\n        self.assertTrue(select_related_descend(ModelA.b, True, {'b': True}, set()))\n        self.assertFalse(select_related_descend(ModelA.b, True, {'c': True}, set()))\n\n    def test_select_related_descend_null(self):\n        class ModelD(models.Model):\n            name = models.CharField(max_length=100, null=True)\n        self.assertFalse(select_related_descend(ModelD.name, False, {}, set()))\n\n    def test_select_related_descend_parent_link(self):\n        self.assertFalse(select_related_descend(ModelA.b, False, {}, set(), reverse=True))\n\n    def test_refs_expression(self):\n        annotations = {'a__b': True}\n        self.assertEqual(refs_expression(['a', 'b'], annotations), (annotations['a__b'], ()))\n        self.assertEqual(refs_expression(['a', 'b', 'c'], annotations), (False, ('a', 'b', 'c')))\n\n    def test_check_rel_lookup_compatibility(self):\n        self.assertTrue(check_rel_lookup_compatibility(ModelA, ModelB._meta, ModelA.b))\n        self.assertTrue(check_rel_lookup_compatibility(ModelB, ModelA._meta, ModelB.c))\n        self.assertFalse(check_rel_lookup_compatibility(ModelA, ModelC._meta, ModelA.b))\n\n    def test_filtered_relation(self):\n        fr = FilteredRelation('model_a', condition=Q(name__startswith='A'))\n        self.assertEqual(fr.relation_name, 'model_a')\n        self.assertEqual(fr.condition, Q(name__startswith='A'))\n        self.assertEqual(fr.alias, None)\n        self.assertEqual(fr.path, [])\n\n        fr2 = fr.clone()\n        self.assertNotEqual(fr, fr2)\n\n"], "sample_93": ["\nfrom _pytest.tmpdir import get_user\nfrom _pytest.tmpdir import TempdirFactory\nfrom _pytest.tmpdir import TempPathFactory\nfrom _pytest.tmpdir import _mk_tmp\nfrom _pytest.tmpdir import pytest_configure\nfrom _pytest.tmpdir import tmpdir_factory\nfrom _pytest.tmpdir import tmp_path_factory\nfrom _pytest.compat import final\nfrom _pytest.config import Config\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.monkeypatch import MonkeyPatch\nimport os\nimport tempfile\nimport pytest\nfrom pathlib import Path\nimport attr\nfrom typing import Optional\n\nclass TestTempPathFactory:\n\n    def test_from_config(self):\n        config = Config()\n        factory = TempPathFactory.from_config(config)\n        assert factory._basetemp is None\n        assert factory._given_basetemp is None\n\n    def test_from_config_with_basetemp(self):\n        config = Config()\n        config.option.basetemp = Path(\"/tmp/pytest\")\n        factory = TempPathFactory.from_config(config)\n        assert factory._basetemp is None\n        assert factory._given_basetemp == Path(\"/tmp/pytest\")\n\n    def test_getbasetemp_with_given_basetemp(self):\n        factory = TempPathFactory(given_basetemp=Path(\"/tmp/pytest\"), trace=None, basetemp=None)\n        assert factory.getbasetemp() == Path(\"/tmp/pytest\")\n\n    def test_getbasetemp_without_given_basetemp(self):\n        factory = TempPathFactory(given_basetemp=None, trace=None, basetemp=None)\n        assert factory.getbasetemp().parent == Path(tempfile.gettempdir()).parent\n\n    def test_mktemp(self):\n        factory = TempPathFactory(given_basetemp=None, trace=None, basetemp=None)\n        p = factory.mktemp(\"test\")\n        assert p.exists()\n        p.rmdir()\n\n    def test_mktemp_numbered(self):\n        factory = TempPathFactory(given_basetemp=None, trace=None, basetemp=None)\n        p1 = factory.mktemp(\"test\", numbered=True)\n        p2 = factory.mktemp(\"test\", numbered=True)\n        assert p1.name != p2.name\n\n    def test_mktemp_relative_path(self):\n        factory = TempPathFactory(given_basetemp=None, trace=None, basetemp=None)\n        p = factory.mktemp(\"test/subdir\")\n        assert p.parent == factory.getbasetemp()\n\n    def test_mktemp_absolute_path(self):\n        factory = TempPathFactory(given_basetemp=None, trace=None, basetemp=None)\n        with pytest.raises(ValueError):\n            factory.mktemp(os.path.abspath(\"/tmp/test\"))\n\n    def test_TempdirFactory(self):\n        factory = TempPathFactory(given_basetemp=None, trace=None, basetemp=None)\n        t = TempdirFactory(factory)\n        assert isinstance(t.getbasetemp(), py.path.local)\n        assert isinstance(t.mktemp(\"test\"), py.path.local)\n\n    def test_pytest_configure(self):\n        mp = MonkeyPatch()\n        config = Config()\n        pytest_configure(config)\n        assert hasattr(config, \"_tmp_path_factory\")\n        assert hasattr(config, \"_tmpdirhandler\")\n        mp.undo()\n\n    def test_tmpdir_factory_fixture(self):\n        request = FixtureRequest()\n        assert tmpdir_factory(request) is not None\n\n    def test_tmp_path_factory_fixture(self):\n        request = FixtureRequest()\n        assert tmp_path_factory(request) is not None\n\n    def test__mk_tmp(self):\n        request = FixtureRequest()\n        factory = TempPathFactory(given_basetemp=None, trace=None, basetemp=None)\n        tmp_path = _mk_tmp(request, factory)\n        assert tmp_path.exists()\n        tmp_path.rmdir()\n\n\n\n"], "sample_69": ["\nimport unittest\nimport matplotlib.artist as martist\nimport numpy as np\nfrom matplotlib.testing.decorators import image_comparison\nfrom matplotlib.patches import Rectangle\nfrom matplotlib.lines import Line2D\nfrom matplotlib.text import Text\nfrom matplotlib.axes import Axes\nfrom matplotlib.figure import Figure\nfrom matplotlib import pyplot as plt\nimport warnings\n\nclass TestArtist(unittest.TestCase):\n\n    def test_get_set(self):\n        line = Line2D([1, 2, 3], [4, 5, 6])\n        self.assertEqual(line.get_linewidth(), 2.0)\n        line.set_linewidth(3.0)\n        self.assertEqual(line.get_linewidth(), 3.0)\n\n    def test_get_set_kwargs(self):\n        line = Line2D([1, 2, 3], [4, 5, 6])\n        martist.setp(line, linewidth=3.0, color='red')\n        self.assertEqual(line.get_linewidth(), 3.0)\n        self.assertEqual(line.get_color(), 'red')\n\n    def test_get_set_matlab_style(self):\n        line = Line2D([1, 2, 3], [4, 5, 6])\n        martist.setp(line, 'linewidth', 3.0, 'color', 'red')\n        self.assertEqual(line.get_linewidth(), 3.0)\n        self.assertEqual(line.get_color(), 'red')\n\n    def test_get_set_multiple_artists(self):\n        line1 = Line2D([1, 2, 3], [4, 5, 6])\n        line2 = Line2D([4, 5, 6], [7, 8, 9])\n        martist.setp([line1, line2], linewidth=3.0, color='red')\n        self.assertEqual(line1.get_linewidth(), 3.0)\n        self.assertEqual(line2.get_linewidth(), 3.0)\n        self.assertEqual(line1.get_color(), 'red')\n        self.assertEqual(line2.get_color(), 'red')\n\n    def test_getp(self):\n        line = Line2D([1, 2, 3], [4, 5, 6])\n        self.assertEqual(martist.getp(line, 'linewidth'), 2.0)\n        self.assertEqual(martist.getp(line, 'color'), 'blue')\n\n    def test_getp_multiple_artists(self):\n        line1 = Line2D([1, 2, 3], [4, 5, 6])\n        line2 = Line2D([4, 5, 6], [7, 8, 9])\n        martist.setp([line1, line2], linewidth=3.0, color='red')\n        self.assertEqual(martist.getp(line1, 'linewidth'), 3.0)\n        self.assertEqual(martist.getp(line2, 'color'), 'red')\n\n    def test_getp_list_allowed_values(self):\n        line = Line2D([1, 2, 3], [4, 5, 6])\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\")\n            allowed_values = martist.getp(line, 'linestyle')\n        self.assertIn('solid', allowed_values)\n        self.assertIn('dashed', allowed_values)\n\n    def test_getp_list_all_properties(self):\n        line = Line2D([1, 2, 3], [4, 5, 6])\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\")\n            properties = martist.getp(line)\n        self.assertIn('linewidth', properties)\n        self.assertIn('color', properties)\n\n    def test_kwdoc(self):\n        line = Line2D([1, 2, 3], [4, 5, 6])\n        doc = martist.kwdoc(line)\n        self.assertIn('linewidth', doc)\n        self.assertIn('color', doc)\n\n    def test_update_from_dict(self):\n        line = Line2D([1, 2, 3], [4, 5, 6])\n        props = {'linewidth': 3.0, 'color': 'red'}\n        line.update(props)\n        self.assertEqual(line.get_linewidth(), 3.0)\n        self.assertEqual(line.get_color(), 'red')\n\n    def test_update_from_dict_with_invalid_property(self):\n        line = Line2D([1, 2, 3], [4, 5, 6])\n        props = {'invalid_property': 3.0}\n        with self.assertRaises(AttributeError):\n            line.update(props)\n\n    def test_update_from_dict_with_invalid_value(self):\n        line = Line2D([1, 2, 3], [4, 5, 6])\n        props = {'linewidth': 'abc'}\n        with self.assertRaises(TypeError):\n            line.update(props)\n\n    def test_update_from_kwargs(self):\n        line = Line2D([1, 2, 3], [4, 5, 6])\n        line.set(**{'linewidth': 3.0, 'color': 'red'})\n        self.assertEqual(line.get_linewidth(), 3.0)\n        self.assertEqual(line.get_color(), 'red')\n\n    def test_update_from_kwargs_with_invalid_property(self):\n        line = Line2D([1, 2, 3], [4, 5, 6])\n        with self.assertRaises(AttributeError):\n            line.set(**{'invalid_property': 3.0})\n\n    def test_update_from_kwargs_with_invalid_value(self):\n        line = Line2D([1, 2, 3], [4, 5, 6])\n        with self.assertRaises(TypeError):\n            line.set(**{'linewidth': 'abc'})\n\n\n\n"], "sample_88": ["\nimport pytest\nfrom _pytest._io.saferepr import _pformat_dispatch\nfrom _pytest._io.saferepr import saferepr\nfrom _pytest._io.saferepr import SafeRepr\nfrom types import SimpleNamespace\n\nclass TestSaferepr:\n\n    def test_saferepr_basic(self):\n        assert saferepr(42) == \"42\"\n        assert saferepr(\"hello\") == \"hello\"\n        assert saferepr([1, 2, 3]) == \"[1, 2, 3]\"\n        assert saferepr({1: 2, 3: 4}) == \"{1: 2, 3: 4}\"\n\n    def test_saferepr_maxsize(self):\n        assert len(saferepr(list(range(250)))) > 240\n\n    def test_saferepr_exception(self):\n        class MyException(Exception):\n            pass\n\n        def broken_repr(self):\n            raise MyException()\n\n        class MyObject:\n            def __repr__(self):\n                return broken_repr()\n\n        obj = MyObject()\n        result = saferepr(obj)\n        assert \"MyException\" in result\n\n    def test_saferepr_nested_exception(self):\n        class MyException(Exception):\n            pass\n\n        def broken_repr(self):\n            raise MyException(\"inner\")\n\n        class MyObject:\n            def __repr__(self):\n                return broken_repr()\n\n        obj = MyObject()\n        result = saferepr(obj)\n        assert \"MyException\" in result\n        assert \"inner\" in result\n\n    def test_pformat_dispatch(self):\n        data = SimpleNamespace(a=1, b=2, c=3)\n        result = _pformat_dispatch(data)\n        assert result.startswith(\"{'a': 1, 'b': 2, 'c': 3}\")\n\n"], "sample_128": ["\nfrom sympy.polys.polyoptions import ( Options, Expand, Gens, Wrt, Sort, Order, Field, Greedy, Domain, Split, Gaussian, Extension, Modulus, Symmetric, Strict, Auto, Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\nfrom sympy.polys.orderings import lex\nfrom sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\nfrom sympy.polys.polyerrors import OptionError, GeneratorsError\nimport unittest\n\nclass TestOptions(unittest.TestCase):\n\n    def test_options_init(self):\n        options = Options((x, y, z), {'domain': 'ZZ'})\n        self.assertEqual(options['auto'], False)\n        self.assertEqual(options['domain'], ZZ)\n        self.assertEqual(options['gens'], (x, y, z))\n\n    def test_options_preprocess(self):\n        options = Options((x, y, z), {'domain': 'ZZ', 'expand': True, 'wrt': 'x,y'})\n        self.assertEqual(options['expand'], True)\n        self.assertEqual(options['wrt'], ['x', 'y'])\n\n    def test_options_postprocess(self):\n        options = Options((x, y, z), {'domain': 'ZZ', 'extension': [S.ImaginaryUnit]})\n        self.assertEqual(options['domain'], sympy.polys.domains.QQ.algebraic_field(S.ImaginaryUnit))\n\n    def test_options_flags(self):\n        options = Options((x, y, z), {'domain': 'ZZ', 'auto': True, 'frac': True})\n        self.assertEqual(options['auto'], True)\n        self.assertEqual(options['frac'], True)\n\n    def test_options_errors(self):\n        with self.assertRaises(OptionError):\n            Options((x, y, z), {'domain': 'invalid'})\n        with self.assertRaises(GeneratorsError):\n            Options((x, y, z), {'gens': [x, x]})\n        with self.assertRaises(GeneratorsError):\n            Options((x, y, z), {'gens': [x, y, x]})\n        with self.assertRaises(FlagError):\n            Options((x, y, z), {'domain': 'ZZ', 'frac': True, 'gen': True})\n\n    def test_build_options(self):\n        options = build_options((x, y, z), {'opt': Options((x, y, z), {'domain': 'ZZ'})})\n        self.assertEqual(options['auto'], False)\n        self.assertEqual(options['domain'], ZZ)\n        self.assertEqual(options['gens'], (x, y, z))\n\n    def test_allowed_flags(self):\n        options = Options((x, y, z), {'domain': 'ZZ'})\n        allowed_flags(options, ['frac'])\n        with self.assertRaises(FlagError):\n            allowed_flags(options, ['gen'])\n\n    def test_set_defaults(self):\n        options = Options((x, y, z), {})\n        options = set_defaults(options, domain=ZZ)\n        self.assertEqual(options['domain'], ZZ)\n        self.assertEqual(options.get('defaults'), {})\n\n\n\n"], "sample_18": ["\nimport unittest\nfrom django.db import models\nfrom django.db.models.fields import ManyToManyField\nfrom django.core.exceptions import FieldDoesNotExist\nfrom django.core.checks import Error, Warning\nfrom django.utils.functional import lazy\nfrom django.test import TestCase\nfrom django.db.models.related import ManyToManyDescriptor\nfrom django.apps import apps\nfrom django.conf import settings\n\nclass ManyToManyFieldTests(TestCase):\n\n    def setUp(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=100)\n\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField(Author)\n\n        self.Author = Author\n        self.Book = Book\n        apps.populate(['tests'])\n\n    def test_deconstruct(self):\n        field = self.Book._meta.get_field('authors')\n        name, path, args, kwargs = field.deconstruct()\n        self.assertEqual(name, 'authors')\n        self.assertEqual(path, 'django.db.models.fields.related.ManyToManyField')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'to': 'tests.Author'})\n\n    def test_deconstruct_with_through(self):\n        class BookAuthor(models.Model):\n            book = models.ForeignKey(self.Book, on_delete=models.CASCADE)\n            author = models.ForeignKey(self.Author, on_delete=models.CASCADE)\n\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField(self.Author, through=BookAuthor)\n\n        field = self.Book._meta.get_field('authors')\n        name, path, args, kwargs = field.deconstruct()\n        self.assertEqual(name, 'authors')\n        self.assertEqual(path, 'django.db.models.fields.related.ManyToManyField')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'to': 'tests.Author', 'through': 'tests.BookAuthor'})\n\n    def test_deconstruct_with_db_table(self):\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField(self.Author, db_table='book_authors')\n\n        field = self.Book._meta.get_field('authors')\n        name, path, args, kwargs = field.deconstruct()\n        self.assertEqual(name, 'authors')\n        self.assertEqual(path, 'django.db.models.fields.related.ManyToManyField')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'to': 'tests.Author', 'db_table': 'book_authors'})\n\n    def test_deconstruct_with_swappable(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=100)\n\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField(\n                to='Author',\n                swappable='AUTH_USER_MODEL',\n            )\n\n        field = self.Book._meta.get_field('authors')\n        name, path, args, kwargs = field.deconstruct()\n        self.assertEqual(name, 'authors')\n        self.assertEqual(path, 'django.db.models.fields.related.ManyToManyField')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'to': 'tests.Author', 'swappable': 'AUTH_USER_MODEL'})\n\n    def test_check_unique(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=100)\n\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField(Author, unique=True)\n\n        field = self.Book._meta.get_field('authors')\n        errors = field.check(include_auto_created=True)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_unique_with_through(self):\n        class BookAuthor(models.Model):\n            book = models.ForeignKey(self.Book, on_delete=models.CASCADE)\n            author = models.ForeignKey(self.Author, on_delete=models.CASCADE)\n\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField(self.Author, through=BookAuthor, unique=True)\n\n        field = self.Book._meta.get_field('authors')\n        errors = field.check(include_auto_created=True)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_unique_with_db_table(self):\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField(self.Author, db_table='book_authors', unique=True)\n\n        field = self.Book._meta.get_field('authors')\n        errors = field.check(include_auto_created=True)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_unique_with_swappable(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=100)\n\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField(\n                to='Author',\n                swappable='AUTH_USER_MODEL',\n                unique=True,\n            )\n\n        field = self.Book._meta.get_field('authors')\n        errors = field.check(include_auto_created=True)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_related_model_exists(self):\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField('NonExistingAuthor')\n\n        field = self.Book._meta.get_field('authors')\n        errors = field.check(include_auto_created=True)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'fields.E338')\n\n    def test_check_related_model_exists_with_through(self):\n        class BookAuthor(models.Model):\n            book = models.ForeignKey(self.Book, on_delete=models.CASCADE)\n            author = models.ForeignKey('NonExistingAuthor', on_delete=models.CASCADE)\n\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField(self.Author, through=BookAuthor)\n\n        field = self.Book._meta.get_field('authors')\n        errors = field.check(include_auto_created=True)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'fields.E338')\n\n    def test_check_related_model_exists_with_db_table(self):\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField('NonExistingAuthor', db_table='book_authors')\n\n        field = self.Book._meta.get_field('authors')\n        errors = field.check(include_auto_created=True)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'fields.E338')\n\n    def test_check_related_model_exists_with_swappable(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=100)\n\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField(\n                to='Author',\n                swappable='AUTH_USER_MODEL',\n            )\n\n        field = self.Book._meta.get_field('authors')\n        errors = field.check(include_auto_created=True)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'fields.E338')\n\n\n\n"], "sample_41": ["\nfrom django.forms import (\n    BaseForm, CharField, DateField, FileField, Form, IntegerField, SplitDateTimeField, formsets,\n)\nfrom django.forms.formsets import BaseFormSet, all_valid, formset_factory\nfrom django.forms.utils import ErrorList\nfrom django.forms.widgets import HiddenInput\nfrom django.test import TestCase\nfrom unittest.mock import patch\n\nclass TestBaseFormSet(TestCase):\n\n    def test_init(self):\n        formset = BaseFormSet()\n        self.assertEqual(formset.prefix, 'form')\n        self.assertEqual(formset.auto_id, 'id_%s')\n        self.assertEqual(formset.initial, {})\n        self.assertEqual(formset.form_kwargs, {})\n        self.assertEqual(formset.error_class, ErrorList)\n        self.assertEqual(formset.is_bound, False)\n\n    def test_total_form_count(self):\n        formset = BaseFormSet(initial=[{'foo': 'bar'}])\n        self.assertEqual(formset.total_form_count(), 1)\n\n    def test_initial_form_count(self):\n        formset = BaseFormSet(initial=[{'foo': 'bar'}])\n        self.assertEqual(formset.initial_form_count(), 1)\n\n    def test_ordering_widget(self):\n        formset = BaseFormSet()\n        self.assertEqual(formset.ordering_widget, IntegerInput)\n\n    def test_add_prefix(self):\n        formset = BaseFormSet()\n        self.assertEqual(formset.add_prefix(0), 'form-0')\n\n    def test_as_table(self):\n        formset = BaseFormSet()\n        self.assertIsInstance(formset.as_table(), str)\n\n    def test_as_p(self):\n        formset = BaseFormSet()\n        self.assertIsInstance(formset.as_p(), str)\n\n    def test_as_ul(self):\n        formset = BaseFormSet()\n        self.assertIsInstance(formset.as_ul(), str)\n\n    def test_formset_factory(self):\n        form = Form()\n        formset_class = formset_factory(form)\n        self.assertEqual(formset_class.form, form)\n\n    def test_all_valid(self):\n        formset1 = BaseFormSet()\n        formset2 = BaseFormSet()\n        self.assertTrue(all_valid([formset1, formset2]))\n\n        formset1.is_valid = False\n        self.assertFalse(all_valid([formset1, formset2]))\n\n\n\n"]}, "raw_scored_generations": {"sample_1": [false], "sample_3": [true], "sample_0": [true], "sample_2": [false], "sample_6": [false], "sample_4": [true], "sample_5": [false], "sample_7": [true], "sample_9": [false], "sample_8": [true], "sample_10": [false], "sample_11": [true], "sample_13": [true], "sample_12": [false], "sample_14": [true], "sample_15": [true], "sample_16": [false], "sample_17": [false], "sample_18": [false], "sample_19": [true], "sample_21": [false], "sample_20": [false], "sample_23": [false], "sample_22": [true], "sample_24": [false], "sample_25": [false], "sample_28": [false], "sample_26": [false], "sample_27": [true], "sample_29": [false], "sample_31": [false], "sample_30": [false], "sample_32": [true], "sample_33": [true], "sample_34": [false], "sample_35": [false], "sample_36": [false], "sample_37": [false], "sample_39": [false], "sample_38": [false], "sample_40": [false], "sample_42": [true], "sample_41": [true], "sample_43": [false], "sample_45": [true], "sample_44": [false], "sample_46": [true], "sample_48": [false], "sample_47": [false], "sample_50": [false], "sample_49": [false], "sample_51": [false], "sample_52": [false], "sample_53": [false], "sample_55": [false], "sample_54": [true], "sample_56": [true], "sample_58": [true], "sample_57": [true], "sample_60": [true], "sample_59": [true], "sample_61": [true], "sample_63": [true], "sample_62": [true], "sample_64": [true], "sample_66": [false], "sample_65": [false], "sample_68": [false], "sample_67": [true], "sample_69": [true], "sample_70": [false], "sample_71": [false], "sample_72": [true], "sample_73": [false], "sample_74": [true], "sample_75": [true], "sample_76": [true], "sample_77": [true], "sample_78": [false], "sample_79": [true], "sample_80": [true], "sample_82": [false], "sample_81": [false], "sample_83": [true], "sample_84": [false], "sample_85": [false], "sample_86": [true], "sample_87": [false], "sample_88": [false], "sample_89": [true], "sample_90": [false], "sample_91": [false], "sample_92": [false], "sample_93": [false], "sample_95": [false], "sample_94": [true], "sample_96": [false], "sample_97": [false], "sample_98": [true], "sample_99": [true], "sample_100": [true], "sample_101": [false], "sample_102": [false], "sample_103": [true], "sample_104": [true], "sample_105": [true], "sample_107": [false], "sample_106": [true], "sample_108": [false], "sample_109": [true], "sample_110": [false], "sample_111": [false], "sample_112": [false], "sample_113": [false], "sample_114": [false], "sample_115": [true], "sample_116": [false], "sample_117": [false], "sample_118": [true], "sample_119": [false], "sample_120": [true], "sample_121": [true], "sample_122": [true], "sample_123": [false], "sample_124": [true], "sample_125": [false], "sample_126": [false], "sample_127": [true], "sample_128": [true], "sample_129": [true], "sample_130": [false], "sample_131": [false], "sample_132": [true], "sample_133": [true], "sample_134": [false], "sample_135": [true], "sample_136": [true], "sample_137": [true], "sample_138": [true], "sample_139": [true], "sample_140": [false], "sample_142": [true], "sample_141": [false], "sample_143": [false], "sample_144": [true], "sample_145": [true], "sample_146": [false], "sample_147": [false], "sample_148": [false], "sample_149": [true], "sample_150": [true], "sample_151": [true], "sample_152": [true], "sample_153": [false], "sample_154": [false], "sample_155": [false], "sample_156": [false], "sample_157": [true], "sample_158": [false], "sample_159": [false]}}