{"raw_generations": {"sample_119": ["\nfrom sympy.combinatorics.permutations import (Permutation, Cycle, Permutation.josephus, Permutation.from_inversion_vector,\n                                             _af_new, Permutation.unrank_lex, Permutation.random,\n                                             Permutation.rank_trotterjohnson,\n                                             Permutation.unrank_trotterjohnson, Permutation.next_trotterjohnson,\n                                             Permutation.get_precedence_distance,\n                                             Permutation.get_adjacency_distance,\n                                             Permutation.get_positional_distance, Permutation.get_precedence_matrix,\n                                             Permutation.get_adjacency_matrix,\n                                             Permutation.inversions, Permutation.signature,\n                                             Permutation.length, Permutation.support,\n                                             Permutation.cycles, Permutation.order, Permutation.rank,\n                                             Permutation.is_identity, Permutation.is_fixed,\n                                             Permutation.index, Permutation.runs, Permutation.min, Permutation.max,\n                                             Permutation.commutator, Permutation.cycle_structure, Permutation.full_cyclic_form)\n\nfrom itertools import permutations\n\ndef test_init():\n    assert Permutation([0, 1, 2]).array_form == [0, 1, 2]\n    assert Permutation([2, 1, 0]).array_form == [2, 1, 0]\n    assert Permutation('(1 2)(3 4)').array_form == [1, 2, 3, 4]\n\ndef test_cycle_notation():\n    assert Permutation([1, 2, 0]).cyclic_form == [[0, 1, 2]]\n    assert Permutation([1, 0, 2]).cyclic_form == [[0, 1]]\n\ndef test_identity():\n    assert Permutation.identity(3).array_form == [0, 1, 2]\n\ndef test_inverse():\n\n    p = Permutation([1, 2, 0])\n    assert p * p.inverse() == Permutation([0, 1, 2])\n\ndef test_mul():\n    p = Permutation([1, 0, 2])\n    q = Permutation([0, 2, 1])\n    assert (p * q).array_form == [2, 1, 0]\n    assert (q * p).array_form == [1, 0, 2]\n\ndef test_power():\n\n    p = Permutation([1, 0, 2, 3])\n    assert p**2.array_form == [0, 2, 1, 3]\n    assert p**3.array_form == [2, 1, 0, 3]\n\ndef test_from_cycle_tuple():\n\n    p = Permutation(((0, 1, 2), (3, 4)))\n    assert p.array_form == [1, 2, 0, 4, 3]\n\ndef test_conjugate():\n    p = Permutation([1, 0, 2])\n    q = Permutation([0, 2, 1])\n    r = Permutation([2, 0, 1])\n    assert (p * q * p.inverse()) == r\n\ndef test_rank():\n\n    p = Permutation([2, 0, 1, 3])\n    assert p.rank() == 5\n\ndef test_josephus():\n\n    p = Permutation.josephus(3, 6)\n    assert p.array_form == [2, 5, 3, 1, 4, 0]\n\ndef test_from_inversion_vector():\n    p = Permutation.from_inversion_vector([3, 2, 1, 0, 0])\n    assert p.array_form == [3, 2, 1, 0, 4, 5]\n\ndef test_unrank_lex():\n\n    p = Permutation.unrank_lex(5, 10)\n    assert p.rank() == 10\n    assert p.array_form == [0, 2, 4, 1, 3]\n\ndef test_random():\n\n    p = Permutation.random(5)\n    assert len(p.array_form) == 5\n\ndef test_rank_trotterjohnson():\n\n    p = Permutation([0, 2, 1, 3])\n    assert p.rank_trotterjohnson() == 7\ndef test_unrank_trotterjohnson():\n    p = Permutation.unrank_trotterjohnson(5, 10)\n    assert p.array_form == [0, 3, 1, 2, 4]\n\ndef test_next_trotterjohnson():\n\n    p = Permutation([3, 0, 2, 1])\n    assert p.next_trotterjohnson().array_form == [0, 3, 2, 1]\n\ndef test_precedence():\n\n    p = Permutation.josephus(3, 6, 1)\n    assert p.get_precedence_matrix()[0, 1] == 0\n    assert p.get_precedence_distance(Permutation([3, 1, 2, 4, 0])) == 7\n\ndef test_adjacency():\n\n    p = Permutation.josephus(3, 6, 1)\n    assert p.get_adjacency_matrix()[0, 1] == 0\n    assert p.get_adjacency_distance(Permutation([3, 1, 2, 4, 0])) == 3\n\ndef test_positional_distance():\n    p = Permutation([0, 3, 1, 2, 4])\n    q = Permutation.josephus(4, 5, 2)\n    assert p.get_positional_distance(q) == 12\n\ndef test_inversions():\n    p = Permutation([3, 1, 2, 0])\n    assert p.inversions() == 4\n\ndef test_signature():\n\n    p = Permutation([0, 2, 1, 3])\n    assert p.signature() == -1\n\ndef test_length():\n\n    p = Permutation([0, 2, 1, 3])\n    assert p.length() == 2\n\ndef test_support():\n\n    p = Permutation([0, 2, 1, 3])\n    assert p.support() == [1, 2]\n\ndef test_cycles():\n\n    p = Permutation([0, 2, 1, 3])\n    assert p.cycles == [[2, 1]]\n\ndef test_order():\n\n    p = Permutation([0, 2, 1, 3])\n    assert p.order() == 2\n\ndef test_rank():\n\n    p = Permutation([1, 0, 2])\n    assert p.rank() == 1\n\ndef test_is_identity():\n    p = Permutation([0, 1, 2])\n    assert p.is_identity()\n\ndef test_is_fixed():\n\n    p = Permutation([0, 2, 1])\n    assert p.is_fixed(0)\n\ndef test_index():\n\n    p = Permutation([3, 0, 2, 1])\n    assert p.index() == 2\n\ndef test_runs():\n    p = Permutation([2, 5, 7, 3, 6, 0, 1, 4, 8])\n    assert p.runs() == [[2, 5, 7], [3, 6], [0, 1, 4, 8]]\n\n\ndef test_min():\n\n    p = Permutation([3, 0, 2, 1])\n    assert p.min() == 0\n\ndef test_max():\n    p = Permutation([3, 0, 2, 1])\n    assert p.max() == 3\n\ndef test_commutator():\n\n    p = Permutation([0, 2, 1])\n    q = Permutation([1, 0, 2])\n    assert p.commutator(q).array_form == [1, 0, 2]\n\ndef test_cycle_structure():\n    p = Permutation([3, 0, 2, 1])\n    assert p.cycle_structure == {2: 2, 1: 1}\n\ndef test_full_cyclic_form():\n    p = Permutation([3, 0, 2, 1])\n    assert p.full_cyclic_form == [[3, 0, 2, 1]]\n\n"], "sample_92": ["\nfrom _pytest._code import Source\nfrom _pytest._code.source import deindent as deindent\nfrom _pytest._code.source import findsource\nfrom _pytest._code.source import getstatementrange_ast\nimport ast\nimport inspect\nimport textwrap\nimport tokenize\nimport types\nimport warnings\nfrom bisect import bisect_right\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Optional\nfrom typing import overload\nfrom typing import Tuple\nfrom typing import Union\n\n\n\ndef test_Source_init_empty():\n    source = Source()\n    assert source.lines == []\n\n\ndef test_Source_init_source():\n    source = Source(\"def foo(): pass\\n\")\n    assert source.lines == [\"def foo(): pass\"]\n\n\ndef test_Source_init_list():\n    source = Source([\"def foo(): pass\", \"\"])\n    assert source.lines == [\"def foo(): pass\", \"\"]\n\n\ndef test_Source_init_tuple():\n    source = Source((\"def foo(): pass\", \"\"))\n    assert source.lines == [\"def foo(): pass\", \"\"]\n\n\ndef test_Source_init_object():\n    def func():\n        pass\n    source = Source(func)\n    assert source.lines == inspect.getsource(func).splitlines()\n\n\ndef test_Source_eq():\n    source1 = Source(\"def foo(): pass\\n\")\n    source2 = Source(\"def foo(): pass\\n\")\n    assert source1 == source2\n\n\ndef test_Source_neq():\n    source1 = Source(\"def foo(): pass\\n\")\n    source2 = Source(\"def bar(): pass\\n\")\n    assert source1 != source2\n\n\ndef test_Source_getitem_int():\n    source = Source(\"def foo(): pass\\n\")\n    assert source[0] == \"def foo(): pass\"\n\n\ndef test_Source_getitem_slice():\n    source = Source([\"def foo(): pass\", \"    pass\", \"\"])\n    assert source[1:3] == Source([\"    pass\", \"\"])\n\n\ndef test_Source_getitem_slice_step():\n    source = Source([\"def foo(): pass\", \"    pass\", \"\"])\n    with pytest.raises(IndexError):\n        source[1:3:2]\n\n\ndef test_Source_iter():\n    source = Source([\"def foo(): pass\", \"    pass\", \"\"])\n    assert list(source) == [\"def foo(): pass\", \"    pass\", \"\"]\n\n\ndef test_Source_len():\n    source = Source([\"def foo(): pass\", \"    pass\", \"\"])\n    assert len(source) == 3\n\n\ndef test_Source_strip():\n    source = Source([\"\", \"def foo(): pass\", \"    pass\", \"\"])\n    assert source.strip().lines == [\"def foo(): pass\", \"    pass\"]\n\n\ndef test_Source_indent():\n    source = Source([\"def foo(): pass\", \"    pass\"])\n    assert source.indent().lines == [\"    def foo(): pass\", \"        pass\"]\n\n\ndef test_Source_getstatement():\n    source = Source([\"def foo(): pass\", \"    pass\"])\n    assert source.getstatement(0) == Source([\"def foo(): pass\"])\n\n\ndef test_Source_getstatement_invalid_lineno():\n    source = Source([\"def foo(): pass\"])\n    with pytest.raises(IndexError):\n        source.getstatement(1)\n\n\ndef test_Source_getstatementrange():\n    source = Source([\"def foo(): pass\", \"    pass\", \"def bar(): pass\"])\n    assert source.getstatementrange(1) == (1, 3)\n\ndef test_findsource_func():\n    def func():\n        pass\n    source, lineno = findsource(func)\n    assert source.lines == inspect.getsource(func).splitlines()\n    assert lineno == 0\ndef test_findsource_no_source():\n    source, lineno = findsource(object())\n    assert source is None\n    assert lineno == -1\n\ndef test_getrawcode_func():\n    def func():\n        pass\n    rawcode = getrawcode(func)\n    assert isinstance(rawcode, types.CodeType)\n\ndef test_getrawcode_object_with_call():\n    class MyClass:\n        def __call__(self):\n            pass\n    obj = MyClass()\n    rawcode = getrawcode(obj)\n    assert isinstance(rawcode, types.CodeType)\n\ndef test_getrawcode_no_code():\n    with pytest.raises(TypeError):\n        getrawcode(object())\n\ndef test_deindent():\n    lines = [\"    def foo(): pass\", \"        pass\"]\n    assert deindent(lines) == [\"def foo(): pass\", \"    pass\"]\n    \ndef test_get_statement_startend2_simple():\n    \n    node = ast.parse(\"x = 1\\ny = 2\")\n    start, end = get_statement_startend2(0, node)\n    assert start == 0\n    assert end == 1\n\ndef test_get_statement_startend2_multi_line():\n    node = ast.parse(\"if True:\\n    x = 1\\n    y = 2\")\n    start, end = get_statement_startend2(1, node)\n    assert start == 1\n    assert end == 3\n\ndef test_getstatementrange_ast_simple():\n    source = Source(\"x = 1\\ny = 2\")\n    astnode, start, end = getstatementrange_ast(0, source)\n    assert start == 0\n    assert end == 2\n\ndef test_getstatementrange_ast_multi_line():\n    source = Source(\"if True:\\n    x = 1\\n    y = 2\")\n    astnode, start, end = getstatementrange_ast(1, source)\n    assert start == 1\n    assert end == 3\n\n"], "sample_147": ["\nimport unittest\n\nfrom sympy.printing.pretty.pretty import pretty, print_function\nfrom sympy.printing.pretty import pretty_print\nfrom sympy.printing.pretty.pretty_symbology import center_accent, is_combining\nfrom sympy import  Symbol, Integer, Rational, sin, cos, tan, exp, ln\nfrom sympy import  pi, oo, I, S, Function\nfrom sympy.core.numbers import ComplexInfinity\nfrom sympy.core.containers import Tuple, Dict\nfrom sympy.core.sets import Set, FiniteSet, EmptySet\nfrom sympy.core.relational import Eq, Ne, Gt, Ge, Lt, Le\nfrom sympy.core.logic import And, Or, Not\nfrom sympy.core.add import Add\nfrom sympy.core.mul import Mul\nfrom sympy.core.power import Pow\nfrom sympy.core.expr import UnevaluatedExpr\n\nfrom sympy.matrices import Matrix, ImmutableMatrix\nfrom sympy.matrices import Adjoint, Inverse, MatrixSymbol, Transpose, KroneckerProduct\nfrom sympy.geometry.point import Point\nfrom sympy.geometry.line import Line\nfrom sympy.geometry.plane import Plane\n\nfrom sympy.polys import PolynomialRing, FractionField, GroebnerBasis\n\nfrom sympy.physics.quantum import Ket, Bra, Operator\nfrom sympy.physics.units import meter, second\nfrom sympy.physics.quantum.state import QuantumState\nfrom sympy.physics.quantum.operator import QuantumOperator\nfrom sympy.diffgeom import Manifold, Patch, CoordSystem, BaseScalarField, BaseVectorField, Differential\nfrom sympy.integrals.integrals import Integral\n\n"], "sample_61": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nfrom django.forms import Form, CharField, IntegerField\nfrom django.forms.formsets import (\n    BaseFormSet,\n    formset_factory,\n    ManagementForm,\n    all_valid,\n    TOTAL_FORM_COUNT,\n    INITIAL_FORM_COUNT,\n    MIN_NUM_FORM_COUNT,\n    MAX_NUM_FORM_COUNT,\n)\nfrom django.forms.widgets import HiddenInput\nfrom django.utils.functional import cached_property\n\n\nclass TestForm(Form):\n    name = CharField()\n    age = IntegerField()\n\n\nclass TestFormSet(BaseFormSet):\n    form = TestForm\n    def add_fields(self, form, index):\n        pass\n\nclass TestFormSetFactory(unittest.TestCase):\n\n    def test_formset_factory_creates_formset_class(self):\n        MyFormSet = formset_factory(TestForm)\n        self.assertTrue(issubclass(MyFormSet, BaseFormSet))\n\n    def test_formset_factory_sets_form_attribute(self):\n        MyFormSet = formset_factory(TestForm)\n        self.assertEqual(MyFormSet.form, TestForm)\n\n    def test_formset_factory_sets_extra_attribute(self):\n        MyFormSet = formset_factory(TestForm, extra=2)\n        self.assertEqual(MyFormSet.extra, 2)\n\n    def test_formset_factory_sets_can_order_attribute(self):\n        MyFormSet = formset_factory(TestForm, can_order=True)\n        self.assertTrue(MyFormSet.can_order)\n\n    def test_formset_factory_sets_can_delete_attribute(self):\n        MyFormSet = formset_factory(TestForm, can_delete=True)\n        self.assertTrue(MyFormSet.can_delete)\n\n    def test_formset_factory_sets_min_num_attribute(self):\n        MyFormSet = formset_factory(TestForm, min_num=2)\n        self.assertEqual(MyFormSet.min_num, 2)\n\n    def test_formset_factory_sets_max_num_attribute(self):\n        MyFormSet = formset_factory(TestForm, max_num=5)\n        self.assertEqual(MyFormSet.max_num, 5)\n\n    def test_formset_factory_sets_absolute_max_attribute(self):\n        MyFormSet = formset_factory(TestForm, absolute_max=10)\n        self.assertEqual(MyFormSet.absolute_max, 10)\n\n    def test_formset_factory_sets_validate_min_attribute(self):\n        MyFormSet = formset_factory(TestForm, validate_min=True)\n        self.assertTrue(MyFormSet.validate_min)\n\n    def test_formset_factory_sets_validate_max_attribute(self):\n        MyFormSet = formset_factory(TestForm, validate_max=True)\n        self.assertTrue(MyFormSet.validate_max)\n\nclass TestBaseFormSet(unittest.TestCase):\n\n    def setUp(self):\n        self.formset = TestFormSet(data={\n            TOTAL_FORM_COUNT: '2',\n            INITIAL_FORM_COUNT: '1',\n            0: {'name': ['Alice'], 'age': ['25']},\n            1: {'name': ['Bob'], 'age': ['30']},\n        })\n\n    def test_total_form_count(self):\n        self.assertEqual(self.formset.total_form_count(), 2)\n\n    def test_initial_form_count(self):\n        self.assertEqual(self.formset.initial_form_count(), 1)\n\n    def test_forms(self):\n        self.assertEqual(len(self.formset.forms), 2)\n\n    def test_empty_form(self):\n        empty_form = self.formset.empty_form\n        self.assertIsInstance(empty_form, TestForm)\n\n    def test_cleaned_data(self):\n        self.assertEqual(self.formset.cleaned_data[0]['name'], ['Alice'])\n        self.assertEqual(self.formset.cleaned_data[1]['name'], ['Bob'])\n\n    def test_deleted_forms(self):\n        self.assertEqual(len(self.formset.deleted_forms), 0)\n\n    def test_ordered_forms(self):\n        self.formset.management_form.cleaned_data[ORDERING_FIELD_NAME] = 1\n        self.assertEqual(len(self.formset.ordered_forms), 2)\n\n    def test_non_form_errors(self):\n        self.formset.errors = [ErrorList()]\n        self.assertEqual(len(self.formset.non_form_errors), 0)\n\n    def test_errors(self):\n        self.assertEqual(len(self.formset.errors), 2)\n\n    def test_total_error_count(self):\n        self.assertEqual(self.formset.total_error_count(), 0)\n\n    def test_is_valid(self):\n        self.assertTrue(self.formset.is_valid())\n\n\nclass TestManagementForm(unittest.TestCase):\n    def test_clean(self):\n        form = ManagementForm(data={TOTAL_FORM_COUNT: 2, INITIAL_FORM_COUNT: 1})\n        form.full_clean()\n        self.assertEqual(form.cleaned_data[TOTAL_FORM_COUNT], 2)\n        self.assertEqual(form.cleaned_data[INITIAL_FORM_COUNT], 1)\n\nclass TestAllValid(unittest.TestCase):\n\n    def test_all_valid_returns_true_if_all_formsets_are_valid(self):\n        \n        formset1 = TestFormSet(data={\n\n            TOTAL_FORM_COUNT: '2',\n            INITIAL_FORM_COUNT: '1',\n            0: {'name': ['Alice'], 'age': ['25']},\n            1: {'name': ['Bob'], 'age': ['30']},\n        })\n\n        formset2 = TestFormSet(data={\n\n            TOTAL_FORM_COUNT: '2',\n            INITIAL_FORM_COUNT: '1',\n            0: {'name': ['Charlie'], 'age': ['25']},\n            1: {'name': ['David'], 'age': ['30']},\n        })\n        self.assertTrue(all_valid([formset1, formset2]))\n\n    def test_all_valid_returns_false_if_one_formset_is_invalid(self):\n        \n        formset1 = TestFormSet(data={\n\n            TOTAL_FORM_COUNT: '2',\n            INITIAL_FORM_COUNT: '1',\n            0: {'name': ['Alice'], 'age': ['25']},\n            1: {'name': ['Bob'], 'age': ['30']},\n        })\n\n        formset2 = TestFormSet(data={\n\n            TOTAL_FORM_COUNT: '2',\n            INITIAL_FORM_COUNT: '1',\n            0: {'name': ['Charlie'], 'age': ['abc']},\n            1: {'name': ['David'], 'age': ['30']},\n        })\n        self.assertFalse(all_valid([formset1, formset2]))\n\n"], "sample_15": ["\nfrom datetime import datetime, date, timedelta, time\nfrom decimal import Decimal\nfrom django.db import models\nfrom django.db.migrations.operations.base import Operation\nfrom django.db.migrations.writer import OperationWriter\nfrom django.utils.timezone import utc\nimport enum\nimport functools\nimport re\nimport uuid\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    BaseSequenceSerializer,\n    BaseSimpleSerializer,\n    ChoicesSerializer,\n    DateTimeSerializer,\n    DatetimeDatetimeSerializer,\n    DecimalSerializer,\n    DeconstructableSerializer,\n    DictionarySerializer,\n    EnumSerializer,\n    FloatSerializer,\n    FrozensetSerializer,\n    FunctionTypeSerializer,\n    FunctoolsPartialSerializer,\n    IterableSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    RegexSerializer,\n    SequenceSerializer,\n    SetSerializer,\n    SettingsReferenceSerializer,\n    TupleSerializer,\n    TypeSerializer,\n    UUIDSerializer,\n    Serializer,\n)\nfrom django.conf import settings\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\nclass MyEnum(enum.Enum):\n    ONE = 1\n    TWO = 2\n\ndef test_serializer_factory():\n    Serializer.register(MyModel, MyModelSerializer)\n    Serializer.register(MyEnum, MyEnumSerializer)\n    \n    test_cases = [\n        (1, BaseSimpleSerializer),\n        (1.0, BaseSimpleSerializer),\n        (True, BaseSimpleSerializer),\n        (None, BaseSimpleSerializer),\n        (b\"bytes\", BaseSimpleSerializer),\n        (\"str\", BaseSimpleSerializer),\n        (range(1, 10), BaseSimpleSerializer),\n        (Decimal(\"1.0\"), DecimalSerializer),\n        (datetime.datetime.now(utc), DatetimeDatetimeSerializer),\n        (date.today(), DateTimeSerializer),\n        (timedelta(days=1), DateTimeSerializer),\n        (time(hour=10), DateTimeSerializer),\n        (settings.DEBUG, SettingsReferenceSerializer),\n        (frozenset([1, 2, 3]), FrozensetSerializer),\n        ([1, 2, 3], SequenceSerializer),\n        ({1, 2, 3}, SetSerializer),\n        ((1, 2, 3), TupleSerializer),\n        ({\"key\": \"value\"}, DictionarySerializer),\n        (MyModel.objects.get_or_create(name=\"test\")[0], ModelFieldSerializer),\n        (MyModel.objects, ModelManagerSerializer),\n        (Operation(), OperationSerializer),\n        (re.compile(\"test\"), RegexSerializer),\n        (uuid.uuid4(), UUIDSerializer),\n        (functools.partial(print, \"test\"), FunctoolsPartialSerializer),\n        (MyEnum.ONE, EnumSerializer),\n        \n        # Add more cases here as needed\n\n    ]\n    for value, expected_serializer in test_cases:\n        serializer = serializer_factory(value)\n        assert isinstance(serializer, expected_serializer)\n    \n    Serializer.unregister(MyModel)\n    Serializer.unregister(MyEnum)\ndef test_datetime_serialization():\n    now = datetime.datetime.now()\n    serializer = DatetimeDatetimeSerializer(now)\n    serialized, _ = serializer.serialize()\n    assert repr(now) in serialized\n\ndef test_datetime_serialization_with_timezone():\n    now = datetime.datetime.now(utc)\n    serializer = DatetimeDatetimeSerializer(now)\n    serialized, _ = serializer.serialize()\n    assert serialized == repr(now).replace('<UTC>', 'utc') \n\ndef test_decimal_serialization():\n    decimal_value = Decimal(\"1.23\")\n    serializer = DecimalSerializer(decimal_value)\n    serialized, _ = serializer.serialize()\n    assert serialized == repr(decimal_value)\n\n\ndef test_model_field_serialization():\n    field = models.CharField(max_length=100)\n    serializer = ModelFieldSerializer(field)\n    serialized, _ = serializer.serialize()\n    assert \"django.db.models.CharField\" in serialized\n\n\ndef test_model_manager_serialization():\n    manager = MyModel.objects\n    serializer = ModelManagerSerializer(manager)\n    serialized, _ = serializer.serialize()\n    assert \"django.db.models.Manager\" in serialized\n\ndef test_settings_reference_serialization():\n    serializer = SettingsReferenceSerializer(settings.DEBUG)\n    serialized, _ = serializer.serialize()\n    assert serialized == \"settings.DEBUG\"\n\ndef test_regex_serialization():\n    regex = re.compile(\"test\")\n    serializer = RegexSerializer(regex)\n    serialized, _ = serializer.serialize()\n    assert \"re.compile('test')\" in serialized\n\ndef test_function_serialization():\n    def my_function(x):\n        return x\n    serializer = FunctionTypeSerializer(my_function)\n    serialized, _ = serializer.serialize()\n    assert \"my_function\" in serialized\n\ndef test_functools_partial_serialization():\n    partial_function = functools.partial(print, \"test\")\n    serializer = FunctoolsPartialSerializer(partial_function)\n    serialized, _ = serializer.serialize()\n    assert \"functools.partial\" in serialized\n\ndef test_uuid_serialization():\n    uuid_value = uuid.uuid4()\n    serializer = UUIDSerializer(uuid_value)\n    serialized, _ = serializer.serialize()\n    assert \"uuid.%s\" % repr(uuid_value) in serialized\n\ndef test_enum_serialization():\n    enum_value = MyEnum.ONE\n    serializer = EnumSerializer(enum_value)\n    serialized, _ = serializer.serialize()\n    assert \"MyEnum.ONE\" in serialized\n\ndef test_iterable_serialization():\n    iterable = [1, 2, 3]\n    serializer = IterableSerializer(iterable)\n    serialized, _ = serializer.serialize()\n    assert \"(1, 2, 3)\" in serialized\n\ndef test_frozenset_serialization():\n    frozenset_value = frozenset([1, 2, 3])\n    serializer = FrozensetSerializer(frozenset_value)\n    serialized, _ = serializer.serialize()\n    assert \"frozenset([1, 2, 3])\" in serialized\n\ndef test_set_serialization():\n    set_value = {1, 2, 3}\n    serializer = SetSerializer(set_value)\n    serialized, _ = serializer.serialize()\n    assert \"{1, 2, 3}\" in serialized\n\n\n\n"], "sample_12": ["\nfrom django.db.models import (\n    F,\n    IntegerField,\n    ManyToManyField,\n    CharField,\n    BooleanField,\n    Model,\n    DateField,\n    DateTimeField,\n)\nfrom django.db.models.lookups import (\n    Exact,\n    IExact,\n    GreaterThan,\n    GreaterThanOrEqual,\n    LessThan,\n    LessThanOrEqual,\n    In,\n    Contains,\n    IContains,\n    StartsWith,\n    IStartsWith,\n    EndsWith,\n    IEndsWith,\n    Range,\n    IsNull,\n    Regex,\n    IRegex,\n    YearExact,\n    YearGt,\n    YearGte,\n    YearLt,\n    YearLte,\n)\nfrom django.test import TestCase\nfrom django.db import connection\n\nclass MyModel(Model):\n    name = CharField(max_length=100)\n    age = IntegerField()\n    created_date = DateField()\n    updated_date = DateTimeField()\n\nclass MyModel2(Model):\n    name = CharField(max_length=100)\n    mymodel = ManyToManyField(MyModel)\n\nclass LookupsTests(TestCase):\n\n    def test_exact(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        self.assertEqual(MyModel.objects.filter(name__exact='John Doe').count(), 1)\n        self.assertEqual(MyModel.objects.filter(name__exact='john doe').count(), 0)\n\n    def test_iexact(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        self.assertEqual(MyModel.objects.filter(name__iexact='John Doe').count(), 1)\n        self.assertEqual(MyModel.objects.filter(name__iexact='john doe').count(), 1)\n\n    def test_gt(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        MyModel.objects.create(name='Jane Doe', age=25)\n        self.assertEqual(MyModel.objects.filter(age__gt=25).count(), 1)\n\n    def test_gte(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        MyModel.objects.create(name='Jane Doe', age=25)\n        self.assertEqual(MyModel.objects.filter(age__gte=30).count(), 1)\n\n    def test_lt(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        MyModel.objects.create(name='Jane Doe', age=25)\n        self.assertEqual(MyModel.objects.filter(age__lt=30).count(), 1)\n\n    def test_lte(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        MyModel.objects.create(name='Jane Doe', age=25)\n        self.assertEqual(MyModel.objects.filter(age__lte=25).count(), 1)\n\n    def test_in(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        MyModel.objects.create(name='Jane Doe', age=25)\n        self.assertEqual(MyModel.objects.filter(age__in=[25, 30]).count(), 2)\n\n    def test_contains(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        self.assertEqual(MyModel.objects.filter(name__contains='John').count(), 1)\n\n    def test_icontains(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        self.assertEqual(MyModel.objects.filter(name__icontains='john').count(), 1)\n\n    def test_startswith(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        self.assertEqual(MyModel.objects.filter(name__startswith='John').count(), 1)\n\n    def test_istartswith(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        self.assertEqual(MyModel.objects.filter(name__istartswith='john').count(), 1)\n\n    def test_endswith(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        self.assertEqual(MyModel.objects.filter(name__endswith='Doe').count(), 1)\n    \n    def test_iendswith(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        self.assertEqual(MyModel.objects.filter(name__iendswith='doe').count(), 1)\n\n    def test_range(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        MyModel.objects.create(name='Jane Doe', age=25)\n        self.assertEqual(MyModel.objects.filter(age__range=[20, 30]).count(), 2)\n\n    def test_isnull(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        MyModel.objects.create(name='Jane Doe', age=None)\n        self.assertEqual(MyModel.objects.filter(age__isnull=True).count(), 1)\n        self.assertEqual(MyModel.objects.filter(age__isnull=False).count(), 1)\n\n    def test_regex(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        self.assertEqual(MyModel.objects.filter(name__regex=r'^John.*$').count(), 1)\n\n    def test_iregex(self):\n        MyModel.objects.create(name='John Doe', age=30)\n        self.assertEqual(MyModel.objects.filter(name__iregex=r'^john.*$').count(), 1)\n\n    def test_year_exact(self):\n        MyModel.objects.create(created_date='2023-01-01')\n        self.assertEqual(MyModel.objects.filter(created_date__year=2023).count(), 1)\n\n    def test_year_gt(self):\n        MyModel.objects.create(created_date='2022-01-01')\n        MyModel.objects.create(created_date='2023-01-01')\n        self.assertEqual(MyModel.objects.filter(created_date__year__gt=2022).count(), 1)\n\n    def test_year_gte(self):\n        MyModel.objects.create(created_date='2022-01-01')\n        MyModel.objects.create(created_date='2023-01-01')\n        self.assertEqual(MyModel.objects.filter(created_date__year__gte=2023).count(), 1)\n\n    def test_year_lt(self):\n        MyModel.objects.create(created_date='2022-01-01')\n        MyModel.objects.create(created_date='2023-01-01')\n        self.assertEqual(MyModel.objects.filter(created_date__year__lt=2023).count(), 1)\n\n    def test_year_lte(self):\n        MyModel.objects.create(created_date='2022-01-01')\n        MyModel.objects.create(created_date='2023-01-01')\n        self.assertEqual(MyModel.objects.filter(created_date__year__lte=2022).count(), 1)\n\n"], "sample_152": ["\nimport unittest\nfrom sympy.printing.pretty import pretty as xpretty\nfrom sympy.printing.pretty.pretty import _print_seq\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import pi\nfrom sympy.matrices import Matrix\nfrom sympy.functions.elementary.trigonometric import sin, cos\nfrom sympy.functions.elementary.exponential import exp\nfrom sympy.concrete.summations import Sum\nfrom sympy.sets.sets import FiniteSet\nfrom sympy.geometry import Point, Line\nfrom sympy.physics.units import meter, second\nfrom sympy import Eq, Lt, Gt, Ne\n\nclass TestPretty(unittest.TestCase):\n\n    def test_basic_symbols(self):\n        x = Symbol('x')\n        self.assertEqual(xpretty(x), 'x')\n\n    def test_basic_numbers(self):\n        self.assertEqual(xpretty(1), '1')\n        self.assertEqual(xpretty(pi), '\u03c0')\n\n    def test_addition(self):\n        x = Symbol('x')\n        y = Symbol('y')\n        self.assertEqual(xpretty(x + y), 'x + y')\n\n    def test_subtraction(self):\n        x = Symbol('x')\n        y = Symbol('y')\n        self.assertEqual(xpretty(x - y), 'x - y')\n\n    def test_multiplication(self):\n        x = Symbol('x')\n        y = Symbol('y')\n        self.assertEqual(xpretty(x * y), 'x*y')\n\n    def test_division(self):\n        x = Symbol('x')\n        y = Symbol('y')\n        self.assertEqual(xpretty(x / y), 'x/y')\n\n    def test_power(self):\n        x = Symbol('x')\n        self.assertEqual(xpretty(x**2), 'x**2')\n\n    def test_matrix(self):\n        A = Matrix([[1, 2], [3, 4]])\n        self.assertEqual(xpretty(A), '\u23a11  2\u23a4\\n\u23a33  4\u23a6')\n\n    def test_function(self):\n        x = Symbol('x')\n        self.assertEqual(xpretty(sin(x)), 'sin(x)')\n        self.assertEqual(xpretty(cos(x)), 'cos(x)')\n        self.assertEqual(xpretty(exp(x)), 'exp(x)')\n\n    def test_summation(self):\n        x = Symbol('x')\n        n = Symbol('n')\n        s = Sum(x**n, (n, 1, 10))\n        self.assertEqual(xpretty(s), '\u2211_{n=1}^{10} x**n')\n\n    def test_finite_set(self):\n        s = FiniteSet(1, 2, 3)\n        self.assertEqual(xpretty(s), '{1, 2, 3}')\n\n    def test_geometry(self):\n        p = Point(1, 2)\n        l = Line((1, 0), (0, 1))\n        self.assertEqual(xpretty(p), 'Point2D(1, 2)')\n        self.assertEqual(xpretty(l), 'Line2D((1, 0), (0, 1))')\n\n    def test_units(self):\n        v = 5*meter/second\n        self.assertEqual(xpretty(v), '5 meter/second')\n\n    def test_relations(self):\n        x = Symbol('x')\n        y = Symbol('y')\n        self.assertEqual(xpretty(Eq(x, y)), 'x = y')\n        self.assertEqual(xpretty(Lt(x, y)), 'x < y')\n        self.assertEqual(xpretty(Gt(x, y)), 'x > y')\n        self.assertEqual(xpretty(Ne(x, y)), 'x \u2260 y')\n\n    def test_seq(self):\n        self.assertEqual(_print_seq([1,2,3], \"[\", \"]\"), \"[1, 2, 3]\")\n\n"], "sample_46": ["\nfrom django.forms import (\n    CharField,\n    DateField,\n    FileField,\n    Form,\n    IntegerField,\n    SplitDateTimeField,\n)\nfrom django.forms.formsets import (\n    BaseFormSet,\n    all_valid,\n    formset_factory,\n)\nfrom django.forms.utils import ErrorList\nfrom django.forms.widgets import HiddenInput\n\nclass MyForm(Form):\n    field1 = CharField(max_length=100)\n    field2 = IntegerField()\n\nclass MyFormSet(BaseFormSet):\n    def clean(self):\n        super().clean()\n        # Simulate some custom validation logic\n        if len(self.cleaned_data) > 3:\n            raise ValidationError('Too many forms!')\n\ndef test_formset_factory():\n    FormSet = formset_factory(MyForm, extra=2)\n    formset = FormSet()\n    assert formset.is_valid()\n    # Test initial data\n    formset = FormSet(initial=[{'field1': 'initial value'}])\n    assert formset.is_valid()\n\ndef test_forms():\n    formset = MyFormSet()\n    assert isinstance(formset, BaseFormSet)\n    assert formset.forms\n\ndef test_management_form():\n    formset = MyFormSet()\n    assert formset.management_form\n\ndef test_total_form_count():\n    formset = MyFormSet(data={'form-0-field1': 'test'})\n    assert formset.total_form_count() == 1\n\ndef test_initial_form_count():\n    formset = MyFormSet(data={'form-0-field1': 'test'}, initial=[{'field1': 'initial'}])\n    assert formset.initial_form_count() == 1\n\ndef test_is_valid():\n    formset = MyFormSet(data={'form-0-field1': 'test'})\n    assert formset.is_valid()\n\ndef test_all_valid():\n    formset1 = MyFormSet()\n    formset2 = MyFormSet()\n    assert all_valid([formset1, formset2])\n\ndef test_errors():\n    formset = MyFormSet(data={'form-0-field1': ''})\n    assert not formset.is_valid()\n    assert formset.errors\n\ndef test_clean():\n    formset = MyFormSet(data={'form-0-field1': 'test', 'form-1-field1': 'test', 'form-2-field1': 'test', 'form-3-field1': 'test'})\n    with pytest.raises(ValidationError):\n        formset.full_clean()\n\ndef test_deleted_forms():\n    MyFormSet.can_delete = True\n    formset = MyFormSet(data={'form-0-field1': 'test', 'form-1-DELETE': 'on'})\n    assert len(formset.deleted_forms) == 1\n\ndef test_ordering():\n    MyFormSet.can_order = True\n    formset = MyFormSet(data={'form-0-field1': 'test', 'form-1-field1': 'test', 'form-0-ORDERING': '2', 'form-1-ORDERING': '1'})\n    assert formset.ordered_forms\n\ndef test_add_prefix():\n    formset = MyFormSet()\n    assert formset.add_prefix(1) == 'formset-1'\n\ndef test_as_table():\n    formset = MyFormSet()\n    assert isinstance(formset.as_table(), str)\n    \n\n"], "sample_84": ["\nfrom _pytest.python import (\n    Function,\n    FunctionDefinition,\n    Metafunc,\n    get_default_arg_names,\n    CallSpec2,\n    _find_parametrized_scope,\n    ParameterSet,\n    idmaker,\n    showfixtures,\n    show_fixtures_per_test,\n    write_docstring,\n    _ascii_escaped_by_config,\n    _idval,\n    _idvalset,\n)\nfrom _pytest.mark import MarkDecorator\nfrom _pytest.nodes import Item\nimport pytest\nfrom _pytest.fixtures import FixtureRequest\n\n\ndef test_Function_setup():\n    f = Function(\"name\", None)\n    f.setup()\n    assert f._request is not None\n\n\ndef test_Function_runtest():\n    f = Function(\"name\", None)\n    with pytest.raises(RuntimeError):\n        f.runtest()\n\n\ndef test_get_default_arg_names():\n    def func(a=1, b=2):\n        pass\n\n    assert get_default_arg_names(func) == {\"a\", \"b\"}\n\n\ndef test_CallSpec2_copy():\n    cs = CallSpec2(None)\n    cs.funcargs = {\"a\": 1}\n    cs2 = cs.copy()\n    assert cs2.funcargs == {\"a\": 1}\n\n\ndef test_CallSpec2_setall():\n    cs = CallSpec2(None)\n    cs.setall({\"a\": 1}, None, None)\n    assert cs.funcargs == {\"a\": 1}\n\n\ndef test_Metafunc_parametrize():\n    m = Metafunc(None, None, None)\n\n    with pytest.raises(ValueError):\n        m.parametrize(\"arg\", [1, 2], indirect=True)\n\n    m.parametrize(\"arg\", [1, 2])\n\n\ndef test__find_parametrized_scope():\n    from _pytest.fixtures import scopes\n\n    fixturedefs = {\"a\": [(\"scope\", None)]}\n    assert _find_parametrized_scope([\"a\"], fixturedefs, True) == \"scope\"\n    assert _find_parametrized_scope([\"a\"], fixturedefs, False) == \"function\"\n\n\ndef test_ParameterSet_for_parametrize():\n    argnames = [\"a\", \"b\"]\n    argvalues = [1, 2]\n    ps = ParameterSet._for_parametrize(argnames, argvalues, None, None, None)\n    assert ps.values == (1, 2)\n\ndef test_idmaker():\n    ids = idmaker([\"a\"], [ParameterSet([1])], None, None, None)\n    assert ids == [\"1\"]\n\ndef test_showfixtures():\n    config = pytest.Config()\n    showfixtures(config)\n\ndef test_show_fixtures_per_test():\n    config = pytest.Config()\n    show_fixtures_per_test(config)\n\ndef test_write_docstring():\n    tw = DummyTerminalWriter()\n    write_docstring(tw, \"This is a docstring\\nwith multiple lines.\", \"\")\n    output = tw.getvalue()\n    assert output == \"    This is a docstring\\n    with multiple lines.\\n\"\n\n\n\nclass DummyTerminalWriter:\n    def __init__(self):\n        self.output = \"\"\n\n    def write(self, text):\n        self.output += text\n\n    def line(self, text, red=False, green=False, yellow=False, cyan=False):\n        self.output += text + \"\\n\"\n\n    def sep(self, sep, title):\n        pass\n\n    def getvalue(self):\n        return self.output\n\n\n\n"], "sample_155": ["\nimport pytest\nfrom sympy import symbols, Matrix, I, eye, Mul, Add, Pow\nfrom sympy.physics.quantum.tensorproduct import TensorProduct, tensor_product_simp\nfrom sympy.physics.quantum.tensorproduct import combined_tensor_printing\nfrom sympy.physics.quantum.state import Ket, Bra\nfrom sympy.physics.quantum.commutator import Commutator\nfrom sympy.physics.quantum.anticommutator import AntiCommutator\nfrom sympy.physics.quantum.dagger import Dagger\n\n# Test TensorProduct simplification\n\ndef test_TensorProduct_basic():\n    A, B, C, D = symbols('A B C D', commutative=False)\n    assert TensorProduct(A, B) == A*B\n    assert TensorProduct(A, B, C) == A*B*C\n    assert TensorProduct(A*B, C*D) == (A*C)*(B*D)\n\ndef test_TensorProduct_combine_states():\n    k1 = Ket('k1')\n    k2 = Ket('k2')\n    b1 = Bra('b1')\n    b2 = Bra('b2')\n\n    assert TensorProduct(k1, k2) == k1*k2\n    assert TensorProduct(k1, k2, k1) == k1*k2*k1\n    assert TensorProduct(b1, b2) == b1*b2\n\ndef test_TensorProduct_combined_printing():\n    k1 = Ket('k1')\n    k2 = Ket('k2')\n    b1 = Bra('b1')\n    b2 = Bra('b2')\n\n    combined_tensor_printing(True)\n\n    assert str(TensorProduct(k1, k2)) == 'k1*k2'\n    assert str(TensorProduct(b1, b2)) == 'b1*b2'\n    assert str(TensorProduct(k1, k2, k1)) == 'k1*k2*k1'\n\n    combined_tensor_printing(False)\n\ndef test_TensorProduct_matrix():\n    m1 = Matrix([[1,2],[3,4]])\n    m2 = Matrix([[1,0],[0,1]])\n\n    assert TensorProduct(m1, m2) == Matrix([\n        [1, 0, 2, 0],\n        [0, 1, 0, 2],\n        [3, 0, 4, 0],\n        [0, 3, 0, 4]])\n    assert TensorProduct(m2, m1) == Matrix([\n        [1, 2, 0, 0],\n        [3, 4, 0, 0],\n        [0, 0, 1, 2],\n        [0, 0, 3, 4]])\n\ndef test_TensorProduct_dagger():\n    A, B = symbols('A B', commutative=False)\n    assert Dagger(TensorProduct(A, B)) == Dagger(B)*Dagger(A)\n    k1 = Ket('k1')\n    k2 = Ket('k2')\n    assert Dagger(TensorProduct(k1, k2)) == Dagger(k2)*Dagger(k1)\n\ndef test_TensorProduct_expand():\n    A, B, C = symbols('A B C', commutative=False)\n    tp = TensorProduct(A + B, C)\n\n    assert tp.expand(tensorproduct=True) == A*C + B*C\n\ndef test_tensor_product_simp():\n    A, B, C, D = symbols('A B C D', commutative=False)\n    assert tensor_product_simp(TensorProduct(A,B)*TensorProduct(C,D)) == (A*C)*(B*D)\n    assert tensor_product_simp((A*B)*TensorProduct(C,D)) == (A*B)*(C*D)\n    assert tensor_product_simp(TensorProduct(A, B)**2) == (A*B)**2\n\ndef test_tensor_product_simp_pow():\n    A, B, C, D = symbols('A B C D', commutative=False)\n    assert tensor_product_simp(TensorProduct(A, B)**2) == (A*B)**2\n\ndef test_tensor_product_simp_add():\n    A, B, C, D = symbols('A B C D', commutative=False)\n    assert tensor_product_simp(TensorProduct(A, B) + TensorProduct(C, D)) == (A*C) + (B*D)\n\ndef test_tensor_product_simp_commutator():\n    A, B, C, D = symbols('A B C D', commutative=False)\n    assert tensor_product_simp(Commutator(TensorProduct(A, B), TensorProduct(C, D))) == Commutator(A*C, B*D)\n\ndef test_tensor_product_simp_anticommutator():\n    A, B, C, D = symbols('A B C D', commutative=False)\n    assert tensor_product_simp(AntiCommutator(TensorProduct(A, B), TensorProduct(C, D))) == AntiCommutator(A*C, B*D)\n\n"], "sample_140": ["\nfrom sympy import ( Abs, acos, adjoint, arg, atan, atan2, conjugate, cos, DiracDelta, E, exp, expand, Expr, Function, Heaviside, I, im, log, nan, oo, pi, Rational, re, S, sign, sin, sqrt, Symbol, symbols, transpose, zoo, exp_polar, Piecewise, Interval, comp, Integral, Matrix, ImmutableMatrix, SparseMatrix, ImmutableSparseMatrix, MatrixSymbol, FunctionMatrix, Lambda, Derivative, Eq)\nfrom sympy.core.expr import unchanged\nfrom sympy.core.function import ArgumentIndexError\nfrom sympy.testing.pytest import XFAIL, raises\nfrom sympy import polar_lift, polarify\nfrom sympy import (exp_polar, polar_lift, exp, unpolarify, principal_branch)\nfrom sympy import gamma, erf, sin, tanh, uppergamma, Eq, Ne\nfrom sympy.abc import x\nfrom sympy import Matrix, simplify\nfrom sympy import (periodic_argument, unbranched_argument, oo, principal_branch, polar_lift, pi)\nfrom sympy import principal_branch\nfrom sympy import principal_branch, polar_lift, exp_polar\nfrom sympy import simplify\nfrom sympy.functions.elementary.complexes import unpolarify\n\ndef test_Abs_basic():\n    assert Abs(3) == 3\n    assert Abs(-3) == 3\n    assert Abs(x) == Abs(x)\n\ndef test_Abs_complex():\n    assert Abs(3 + 4*I) == 5\n    assert Abs(-3 + 4*I) == 5\n\ndef test_arg_basic():\n    assert arg(1) == 0\n    assert arg(-1) == pi\n    assert arg(I) == pi/2\n    assert arg(-I) == -pi/2\n\ndef test_arg_complex():\n    assert arg(3 + 4*I) == atan2(4, 3)\n    assert arg(-3 + 4*I) == atan2(4, -3) + pi\n    assert arg(3 - 4*I) == atan2(-4, 3)\n\ndef test_conjugate_basic():\n    assert conjugate(3) == 3\n    assert conjugate(-3) == -3\n    assert conjugate(x) == x\n    assert conjugate(I) == -I\n\ndef test_conjugate_complex():\n    assert conjugate(3 + 4*I) == 3 - 4*I\n    assert conjugate(-3 + 4*I) == -3 - 4*I\n\ndef test_transpose():\n    M = Matrix([[1, 2], [3, 4]])\n    assert transpose(M) == M.T\n    assert transpose(M.T) == M\n    assert transpose(3) == 3\n\ndef test_adjoint():\n    M = Matrix([[1, 2], [3, 4]])\n    assert adjoint(M) == M.H\n    assert adjoint(M.H) == M\n    assert adjoint(3) == 3\n\ndef test_polar_lift():\n    assert polar_lift(4) == 4*exp_polar(0)\n    assert polar_lift(-4) == 4*exp_polar(I*pi)\n    assert polar_lift(-I) == exp_polar(-I*pi/2)\n    assert isinstance(polar_lift(4*x), polar_lift)\n    assert polar_lift(4*x).args[0] == 4*x\n\ndef test_periodic_argument():\n    assert periodic_argument(exp(5*I*pi), 2*pi) == pi\n    assert periodic_argument(exp_polar(5*I*pi), 3*pi) == -pi\n    assert periodic_argument(exp_polar(5*I*pi), pi) == 0\n    assert periodic_argument(exp_polar(2*I*pi)*3, 2*pi) == 0\n\ndef test_principal_branch():\n    assert principal_branch(3*exp_polar(2*I*pi), 2*pi) == 3\n    assert principal_branch(exp_polar(2*I*pi)*3*x, 2*pi) == 3*principal_branch(x, 2*pi)\n\n\ndef test_unpolarify():\n    assert unpolarify(polar_lift(I + 2)) == 2 + I\n\ndef test_polarify():\n    expr = (-x)**y\n    res, reps = polarify(expr, subs=True)\n    assert res.expand() == (_x**_y*exp_polar(_y*I*pi)).expand()\n\n"], "sample_87": ["\nimport pytest\nfrom _pytest._io.saferepr import _try_repr_or_str\nfrom _pytest._io.saferepr import _format_repr_exception\nfrom _pytest._io.saferepr import _ellipsize\nfrom _pytest._io.saferepr import SafeRepr\nfrom _pytest._io.saferepr import safeformat\nfrom _pytest._io.saferepr import saferepr\nfrom _pytest._io.saferepr import AlwaysDispatchingPrettyPrinter\nfrom _pytest._io.saferepr import _pformat_dispatch\n\n\ndef test__try_repr_or_str_basic():\n    assert _try_repr_or_str('abc') == \"'abc'\"\n\ndef test__try_repr_or_str_object():\n    class MyClass:\n        def __init__(self, value):\n            self.value = value\n        def __repr__(self):\n            return f'MyClass({self.value!r})'\n    obj = MyClass(123)\n    assert _try_repr_or_str(obj) == 'MyClass(123)'\n\ndef test__try_repr_or_str_exception():\n    class ErrorClass:\n        def __repr__(self):\n            raise ValueError(\"Something went wrong\")\n    obj = ErrorClass()\n    assert _try_repr_or_str(obj) == 'ErrorClass(\"Something went wrong\")'\n\n\ndef test__format_repr_exception():\n    class MyException(Exception):\n        pass\n    exc = MyException(\"Test exception\")\n    obj = object()\n    result = _format_repr_exception(exc, obj)\n    assert \"'Test exception'\" in result\n    assert \"object\" in result\n\ndef test__ellipsize():\n    assert _ellipsize(\"1234567890\", 10) == \"1234567890\"\n    assert _ellipsize(\"12345678901234567890\", 10) == \"123...890\"\n\ndef test_SafeRepr_repr_basic():\n    srepr = SafeRepr(maxsize=20)\n    assert srepr.repr(123) == '123'\n\ndef test_SafeRepr_repr_long():\n    srepr = SafeRepr(maxsize=10)\n    assert srepr.repr('12345678901234567890') == '123...890'\n\ndef test_SafeRepr_repr_exception():\n    class ErrorClass:\n        def __repr__(self):\n            raise ValueError(\"Something went wrong\")\n    srepr = SafeRepr(maxsize=20)\n    obj = ErrorClass()\n    result = srepr.repr(obj)\n    assert \"ValueError\" in result\n    assert \"ErrorClass\" in result\n\ndef test_safeformat_basic():\n    assert safeformat({'a': 1, 'b': 2}) == \"{'a': 1, 'b': 2}\"\n\ndef test_safeformat_exception():\n    class ErrorClass:\n        def __repr__(self):\n            raise ValueError(\"Something went wrong\")\n    obj = ErrorClass()\n    result = safeformat(obj)\n    assert \"ValueError\" in result\n    assert \"ErrorClass\" in result\n\ndef test_saferepr_basic():\n    assert saferepr(123) == '123'\n\ndef test_saferepr_long():\n    assert saferepr('12345678901234567890', maxsize=10) == '123...890'\n\ndef test_saferepr_exception():\n    class ErrorClass:\n        def __repr__(self):\n            raise ValueError(\"Something went wrong\")\n    obj = ErrorClass()\n    result = saferepr(obj)\n    assert \"ValueError\" in result\n    assert \"ErrorClass\" in result\n\ndef test_AlwaysDispatchingPrettyPrinter_basic():\n    printer = AlwaysDispatchingPrettyPrinter()\n    result = printer.pformat({'a': 1, 'b': 2})\n    assert result == \"{'a': 1, 'b': 2}\"\n\ndef test__pformat_dispatch_basic():\n\n    result = _pformat_dispatch({'a': 1, 'b': 2})\n    assert result == \"{'a': 1, 'b': 2}\"\n"], "sample_18": ["\nfrom unittest.mock import patch, Mock, MagicMock\n\nfrom django.contrib.admin.models import LogEntry\nfrom django.contrib.admin.sites import AdminSite, AlreadyRegistered, NotRegistered\nfrom django.contrib.admin.views.main import ChangeList\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.auth.models import Group, Permission\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.db import models\nfrom django.urls import reverse\nfrom django.test import SimpleTestCase, TestCase, RequestFactory, Client\nfrom django.http import HttpResponseRedirect, HttpResponse\nfrom django.conf import settings\n\nUser = get_user_model()\n\nclass TestModel(models.Model):\n    name = models.CharField(max_length=100)\n\nclass AdminSiteTests(SimpleTestCase):\n\n    def test_register_model_twice(self):\n        site = AdminSite()\n        site.register(TestModel)\n        with self.assertRaises(AlreadyRegistered):\n            site.register(TestModel)\n\n    def test_unregister_model(self):\n        site = AdminSite()\n        site.register(TestModel)\n        self.assertTrue(site.is_registered(TestModel))\n        site.unregister(TestModel)\n        self.assertFalse(site.is_registered(TestModel))\n        with self.assertRaises(NotRegistered):\n            site.unregister(TestModel)\n\n    def test_register_abstract_model(self):\n        class AbstractModel(models.Model):\n            name = models.CharField(max_length=100)\n            class Meta:\n                abstract = True\n        site = AdminSite()\n        with self.assertRaises(ImproperlyConfigured):\n            site.register(AbstractModel)\n\n    def test_has_permission(self):\n        site = AdminSite()\n        request = Mock(user=Mock(is_active=True, is_staff=True))\n        self.assertTrue(site.has_permission(request))\n        request.user.is_staff = False\n        self.assertFalse(site.has_permission(request))\n        request.user.is_active = False\n        self.assertFalse(site.has_permission(request))\n\n    def test_admin_view(self):\n        site = AdminSite()\n\n        @site.admin_view\n        def my_view(request):\n            return HttpResponse('Hello, world!')\n        \n        request = Mock(user=Mock(is_active=True, is_staff=True))\n        response = my_view(request)\n        self.assertEqual(response.content, b'Hello, world!')\n        request.user.is_staff = False\n        with self.assertRaises(HttpResponseRedirect):\n            my_view(request)\n\n    def test_get_urls(self):\n        site = AdminSite()\n        site.register(TestModel)\n        urls = site.get_urls()\n        self.assertIsNotNone(urls)\n\n    def test_each_context(self):\n        site = AdminSite()\n        context = site.each_context(Mock())\n        self.assertIn('site_title', context)\n        self.assertIn('site_header', context)\n        self.assertIn('site_url', context)\n\n    def test_password_change(self):\n        site = AdminSite()\n        request = Mock()\n        response = site.password_change(request)\n        self.assertIsNotNone(response)\n\n    def test_index(self):\n        site = AdminSite()\n        request = Mock()\n        response = site.index(request)\n        self.assertIsNotNone(response)\n\n    def test_app_index(self):\n        site = AdminSite()\n        site.register(TestModel)\n        request = Mock(app_label='test_app')\n        response = site.app_index(request, 'test_app')\n        self.assertIsNotNone(response)\n\nclass TestCustomAdminSite(TestCase):\n    def setUp(self):\n        self.client = Client()\n\n    def test_custom_site(self):\n        class MyAdminSite(AdminSite):\n            site_header = 'My Custom Site'\n        \n        site = MyAdminSite()\n\n        # register a test model\n        site.register(TestModel)\n\n        # access the admin index page\n        response = self.client.get(reverse('admin:index', current_app='admin'))\n\n        # check if the title contains the custom site header\n        self.assertIn(site.site_header, response.content.decode())\n"], "sample_145": ["\nfrom sympy import ( Abs, acos, adjoint, arg, atan, atan2, conjugate, cos, DiracDelta, E, exp, expand, Expr, Function, Heaviside, I, im, log, nan, oo, pi, Rational, re, S, sign, sin, sqrt, Symbol, symbols, transpose, zoo, exp_polar, Piecewise, Interval, comp, Integral, Matrix, ImmutableMatrix, SparseMatrix, ImmutableSparseMatrix, MatrixSymbol, FunctionMatrix, Lambda, Derivative, Eq)\nfrom sympy.core.expr import unchanged\nfrom sympy.core.function import ArgumentIndexError\nfrom sympy.testing.pytest import XFAIL, raises, _both_exp_pow\nfrom sympy import polar_lift, polarify\nfrom sympy import (exp_polar, polar_lift, exp, unpolarify, principal_branch)\nfrom sympy import gamma, erf, sin, tanh, uppergamma, Eq, Ne\nfrom sympy.abc import x\n\ndef test_abs():\n    assert Abs(2) == 2\n    assert Abs(-2) == 2\n    assert Abs(2 + 3j) == sqrt(13)\n    assert Abs(I) == 1\n    assert Abs(2*I) == 2\n    assert Abs(2*S.ImaginaryUnit) == 2\n\ndef test_arg():\n    assert arg(2) == 0\n    assert arg(-2) == pi\n    assert arg(2 + 3j) == atan2(3, 2)\n    assert arg(I) == pi/2\n    assert arg(-I) == -pi/2\n    assert arg(0) == 0\n\ndef test_conjugate():\n    assert conjugate(2) == 2\n    assert conjugate(-2) == -2\n    assert conjugate(2 + 3j) == 2 - 3j\n    assert conjugate(I) == -I\n    assert conjugate(2*I) == -2*I\n    assert conjugate(2*S.ImaginaryUnit) == -2*S.ImaginaryUnit\n\ndef test_exp_polar():\n    assert exp_polar(0) == 1\n    assert exp_polar(I*pi) == -1\n    assert exp_polar(I*pi/2) == I\n    assert exp_polar(2*I*pi) == 1\n    assert exp_polar(I*pi/4) == (1 + I)/sqrt(2)\n\ndef test_polar_lift():\n    assert polar_lift(4) == 4*exp_polar(0)\n    assert polar_lift(-4) == 4*exp_polar(I*pi)\n    assert polar_lift(-I) == exp_polar(-I*pi/2)\n    assert polar_lift(I + 2) == polar_lift(2 + I)\n\ndef test_periodic_argument():\n    assert periodic_argument(exp_polar(10*I*pi), 2*pi) == 0\n    assert periodic_argument(exp_polar(5*I*pi), 4*pi) == pi\n    assert periodic_argument(exp_polar(5*I*pi), 3*pi) == -pi\n    assert periodic_argument(exp_polar(5*I*pi), pi) == 0\n\ndef test_principal_branch():\n    assert principal_branch(exp_polar(2*pi*I)*3, 2*pi) == 3*exp_polar(0)\n    assert principal_branch(exp_polar(2*pi*I)*3*x, 2*pi) == 3*principal_branch(x, 2*pi)\n    assert principal_branch(x, oo) == x\n    \ndef test_unbranched_argument():\n    assert unbranched_argument(exp_polar(15*I*pi)) == 15*pi\n    assert unbranched_argument(exp_polar(7*I*pi)) == 7*pi\n\ndef test_polarify():\n     assert polarify(x, lift=True).is_polar\n     assert polarify(1 + sin((1 + I)*x)).is_polar\n\ndef test_unpolarify():\n    assert unpolarify(polar_lift(I + 2)) == 2 + I\n    assert unpolarify(sin(polar_lift(I + 7))) == sin(7 + I)\n\n"], "sample_40": ["\nfrom django.db.models import Q, F, Model, IntegerField, CharField\nfrom django.db.models.query_utils import (\n    PathInfo,\n    DeferredAttribute,\n    select_related_descend,\n    refs_expression,\n    check_rel_lookup_compatibility,\n    RegisterLookupMixin,\n    FilteredRelation,\n\n)\nfrom django.test import TestCase\nfrom django.db import connection\nfrom django.db.models.sql import constants\n\nclass MyModel(Model):\n    name = CharField(max_length=100)\n    value = IntegerField()\n\nclass AnotherModel(Model):\n    my_model = ForeignKey(MyModel, on_delete=models.CASCADE)\n\nclass QueryUtilsTests(TestCase):\n\n    def test_pathinfo(self):\n        pass # Add assertions for PathInfo\n\n    def test_deferred_attribute(self):\n        instance = MyModel(name='Test', value=10)\n        instance.save()\n        da = DeferredAttribute(instance._meta.get_field('value'))\n        self.assertEqual(getattr(instance, da.field.attname), 10)\n\n    def test_select_related_descend(self):\n        self.assertTrue(select_related_descend(MyModel._meta.get_field('name'), False, {}, set()))\n        self.assertFalse(select_related_descend(MyModel._meta.get_field('value'), True, {}, set()))\n        # Add more test cases for select_related_descend\n\n    def test_refs_expression(self):\n        lookup_parts = ['name__startswith']\n        annotations = {'name__startswith': True}\n        result, remaining = refs_expression(lookup_parts, annotations)\n        self.assertTrue(result)\n        self.assertEqual(remaining, ())\n        # Add more test cases for refs_expression\n\n    def test_check_rel_lookup_compatibility(self):\n        target_opts = AnotherModel._meta\n        field = MyModel._meta.get_field('name')\n        self.assertTrue(check_rel_lookup_compatibility(MyModel._meta, target_opts, field))\n        # Add more test cases for check_rel_lookup_compatibility\n\n    def test_register_lookup_mixin(self):\n        pass # Add assertions for RegisterLookupMixin\n\n    def test_filtered_relation(self):\n        relation = FilteredRelation('some_relation', condition=Q(name='test'))\n        self.assertEqual(relation.relation_name, 'some_relation')\n        self.assertEqual(relation.condition, Q(name='test'))\n        # Add more test cases for FilteredRelation\n\n\n\n"], "sample_94": ["\nimport unittest\nimport numpy as np\nfrom scipy import sparse as sp\nfrom sklearn.utils.validation import (\n    check_array, check_X_y, check_symmetric,\n    check_is_fitted, NotFittedError, check_consistent_length,\n    column_or_1d, _shape_repr, _assert_all_finite,\n    check_random_state, has_fit_parameter,\n    check_non_negative,\n)\nfrom sklearn.exceptions import DataConversionWarning\n\nclass TestValidation(unittest.TestCase):\n\n    def test_check_array_dtype(self):\n        # Test dtype preservation and conversion\n        X = np.array([[1, 2], [3, 4]], dtype=np.float32)\n        X_checked = check_array(X)\n        self.assertEqual(X_checked.dtype, np.float32)\n\n        X = np.array([[1, 2], [3, 4]], dtype=np.int64)\n        X_checked = check_array(X, dtype=np.float64)\n        self.assertEqual(X_checked.dtype, np.float64)\n\n        X = np.array([[1, 2], [3, 4]], dtype=object)\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"record\")\n            X_checked = check_array(X, dtype=np.float64)\n            self.assertEqual(X_checked.dtype, np.float64)\n            self.assertEqual(len(warnings.warnings), 1)\n            self.assertTrue(\"Data with input dtype object\" in str(warnings.warnings[0].message))\n\n    def test_check_array_force_all_finite(self):\n        X = np.array([[1, 2], [3, np.inf]])\n        with self.assertRaises(ValueError):\n            check_array(X, force_all_finite=True)\n\n        X = np.array([[1, 2], [3, np.nan]])\n        with self.assertRaises(ValueError):\n            check_array(X, force_all_finite=True)\n\n        X = np.array([[1, 2], [3, 4]])\n        X_checked = check_array(X, force_all_finite=True)\n        np.testing.assert_array_equal(X_checked, X)\n\n    def test_check_array_allow_nan(self):\n        X = np.array([[1, 2], [3, np.nan]])\n        X_checked = check_array(X, force_all_finite='allow-nan')\n        np.testing.assert_array_equal(X_checked, X)\n\n    def test_check_array_shape(self):\n        X = np.array([[1, 2], [3, 4]])\n        X_checked = check_array(X, ensure_2d=False)\n        np.testing.assert_array_equal(X_checked, X)\n\n        X = np.array([1, 2, 3, 4])\n        X_checked = check_array(X, ensure_2d=True)\n        self.assertTrue(X_checked.ndim == 2)\n\n    def test_check_array_sparse(self):\n        X = sparse.csr_matrix([[1, 2], [3, 4]])\n        X_checked = check_array(X, accept_sparse=True)\n        self.assertIsInstance(X_checked, sparse.csr_matrix)\n\n        X = np.array([[1, 2], [3, 4]])\n        with self.assertRaises(TypeError):\n            check_array(X, accept_sparse=True,\n                        force_all_finite=True)\n\n    def test_check_X_y(self):\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([1, 2])\n\n        X_checked, y_checked = check_X_y(X, y)\n        np.testing.assert_array_equal(X_checked, X)\n        np.testing.assert_array_equal(y_checked, y)\n\n    def test_check_X_y_multioutput(self):\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([[1, 2], [3, 4]])\n        with self.assertRaises(ValueError):\n            check_X_y(X, y, multi_output=False)\n\n        X_checked, y_checked = check_X_y(X, y, multi_output=True)\n        np.testing.assert_array_equal(X_checked, X)\n        np.testing.assert_array_equal(y_checked, y)\n\n    def test_check_consistent_length(self):\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([1, 2, 3])\n        with self.assertRaises(ValueError):\n            check_consistent_length(X, y)\n\n    def test_check_symmetric(self):\n        X = np.array([[1, 2], [2, 1]])\n        X_sym = check_symmetric(X)\n        np.testing.assert_array_equal(X_sym, X)\n\n        X = np.array([[1, 2], [3, 1]])\n        X_sym = check_symmetric(X, raise_warning=True)\n        self.assertTrue(np.allclose(X_sym, (X + X.T) / 2))\n\n    def test_check_is_fitted(self):\n        class MockEstimator:\n            def __init__(self):\n                self.coef_ = None\n\n            def fit(self, X, y):\n                self.coef_ = [1, 2]\n\n        estimator = MockEstimator()\n        with self.assertRaises(NotFittedError):\n            check_is_fitted(estimator, \"coef_\")\n\n        estimator.fit(np.array([[1, 2], [3, 4]]), np.array([1, 2]))\n        check_is_fitted(estimator, \"coef_\")\n\n    def test_column_or_1d(self):\n        y = np.array([1, 2, 3])\n        y_reshaped = column_or_1d(y)\n        np.testing.assert_array_equal(y_reshaped, y)\n\n        y = np.array([[1], [2], [3]])\n        y_reshaped = column_or_1d(y)\n        np.testing.assert_array_equal(y_reshaped, y.ravel())\n\n        y = np.array([[1, 2], [3, 4]])\n        with self.assertRaises(ValueError):\n            column_or_1d(y)\n\n    def test_check_random_state(self):\n        rs = check_random_state(None)\n        self.assertIs(rs, np.random.mtrand._rand)\n        rs = check_random_state(42)\n        self.assertTrue(isinstance(rs, np.random.RandomState))\n\n    def test_has_fit_parameter(self):\n        from sklearn.svm import SVC\n        self.assertTrue(has_fit_parameter(SVC(), \"sample_weight\"))\n        self.assertFalse(has_fit_parameter(SVC(), \"non_existent_param\"))\n\n    def test_check_non_negative(self):\n       X = np.array([[1, 2], [3, 4]])\n       check_non_negative(X, \"test\")\n       X = np.array([[-1, 2], [3, 4]])\n       with self.assertRaises(ValueError):\n           check_non_negative(X, \"test\")\n\n\n\n"], "sample_13": ["\nfrom unittest import mock\nfrom django.db import models, connections\nfrom django.db.models import signals\nfrom django.db.models.deletion import (\n    CASCADE, PROTECT, SET, SET_NULL, SET_DEFAULT, DO_NOTHING, Collector,\n)\nfrom django.test import TestCase\n\nclass ModelA(models.Model):\n    name = models.CharField(max_length=100)\n\nclass ModelB(models.Model):\n    a = models.ForeignKey(ModelA, on_delete=CASCADE)\n    name = models.CharField(max_length=100)\n\nclass ModelC(models.Model):\n    b = models.OneToOneField(ModelB, on_delete=CASCADE)\n    name = models.CharField(max_length=100)\n\n\nclass MyTestCase(TestCase):\n    def setUp(self):\n        self.conn = connections['default']\n        self.conn.set_test_data([\n            {\n                'models_modela': {'name': 'A1'},\n                'models_modelb': [\n                    {'name': 'B1', 'a_id': 1},\n                    {'name': 'B2', 'a_id': 1},\n                ],\n                'models_modelc': [\n                    {'name': 'C1', 'b_id': 1},\n                ]\n            }\n        ])\n\n    @mock.patch('django.db.models.signals.pre_delete.send')\n    def test_delete_cascade(self, mock_pre_delete):\n        a = ModelA.objects.get(name='A1')\n        collector = Collector(using='default')\n        collector.collect([a])\n        collector.delete()\n\n        self.assertEqual(ModelA.objects.count(), 0)\n        self.assertEqual(ModelB.objects.count(), 0)\n        self.assertEqual(ModelC.objects.count(), 0)\n        mock_pre_delete.assert_called()\n\n    @mock.patch('django.db.models.signals.pre_delete.send')\n    def test_delete_protect(self, mock_pre_delete):\n        a = ModelA.objects.get(name='A1')\n        b = ModelB.objects.get(name='B1')\n        c = ModelC.objects.get(name='C1')\n        b.a = None\n        b.save()\n        collector = Collector(using='default')\n        collector.collect([a])\n        with self.assertRaises(ProtectedError):\n            collector.delete()\n        self.assertEqual(ModelA.objects.count(), 1)\n        self.assertEqual(ModelB.objects.count(), 2)\n        self.assertEqual(ModelC.objects.count(), 1)\n        mock_pre_delete.assert_not_called()\n\n    def test_delete_set(self):\n        a = ModelA.objects.get(name='A1')\n        b = ModelB.objects.get(name='B1')\n        collector = Collector(using='default')\n        collector.collect([a])\n        collector.delete()\n\n        self.assertEqual(ModelA.objects.count(), 0)\n        self.assertEqual(ModelB.objects.count(), 1)\n        self.assertIsNone(ModelB.objects.get(name='B1').a_id)\n\n    def test_delete_set_null(self):\n        a = ModelA.objects.get(name='A1')\n        b = ModelB.objects.get(name='B1')\n        collector = Collector(using='default')\n        collector.collect([a])\n        collector.delete()\n\n        self.assertEqual(ModelA.objects.count(), 0)\n        self.assertEqual(ModelB.objects.count(), 1)\n        self.assertIsNone(ModelB.objects.get(name='B1').a)\n\n    def test_delete_set_default(self):\n        class ModelD(models.Model):\n            a = models.ForeignKey(ModelA, on_delete=SET_DEFAULT, default=1)\n\n        a = ModelA.objects.get(name='A1')\n        d = ModelD.objects.create(a=a)\n        collector = Collector(using='default')\n        collector.collect([a])\n        collector.delete()\n\n        self.assertEqual(ModelA.objects.count(), 0)\n        self.assertEqual(ModelD.objects.count(), 1)\n        self.assertEqual(ModelD.objects.get().a_id, 1)\n\n    def test_delete_do_nothing(self):\n        a = ModelA.objects.get(name='A1')\n        b = ModelB.objects.get(name='B1')\n        collector = Collector(using='default')\n        collector.collect([a])\n        collector.delete()\n\n        self.assertEqual(ModelA.objects.count(), 0)\n        self.assertEqual(ModelB.objects.count(), 2)\n\n    def test_get_candidate_relations_to_delete(self):\n        opts = ModelB._meta\n        relations = list(Collector.get_candidate_relations_to_delete(opts))\n        self.assertEqual(len(relations), 1)\n        self.assertEqual(relations[0].name, 'a')\n\n    def test_fast_delete(self):\n        a = ModelA.objects.get(name='A1')\n        b = ModelB.objects.get(name='B1')\n        collector = Collector(using='default')\n        collector.collect([b])\n        collector.delete()\n\n        self.assertEqual(ModelA.objects.count(), 1)\n        self.assertEqual(ModelB.objects.count(), 1)\n\n    def test_can_fast_delete_with_signals(self):\n        signals.post_delete.send_robust_failed = True\n        a = ModelA.objects.get(name='A1')\n        collector = Collector(using='default')\n        collector.collect([a])\n        self.assertFalse(collector.can_fast_delete([a]))\n\n    def test_sort(self):\n        a = ModelA.objects.get(name='A1')\n        b = ModelB.objects.get(name='B1')\n        c = ModelC.objects.get(name='C1')\n        collector = Collector(using='default')\n        collector.collect([a, b, c])\n        collector.sort()\n        self.assertEqual(list(collector.data.keys()), [ModelC, ModelB, ModelA])\n\n"], "sample_34": ["\nfrom django.db import models\nfrom django.db.models import (\n    AutoField,\n    BooleanField,\n    CharField,\n    CheckConstraint,\n    DateField,\n    DateTimeField,\n    ForeignKey,\n    ManyToManyField,\n    OneToOneField,\n    UniqueConstraint,\n    F,\n    Q,\n)\nfrom django.db.models.base import ModelBase, make_foreign_order_accessors, model_unpickle\nfrom django.test import TestCase\nfrom django.test.utils import (\n    isolate_apps,\n    modify_settings,\n    override_settings,\n    override_system_checks,\n)\n\nChecks = checks.Checks\nError = checks.Error\nWarning = checks.Warning\n\nclass TestModelBase(TestCase):\n    def test_order_with_respect_to(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n            order = models.PositiveIntegerField(default=0)\n\n            class Meta:\n                order_with_respect_to = 'name'\n\n        model_base = ModelBase\n\n        self.assertTrue(hasattr(MyModel, 'get_name_order'))\n        self.assertTrue(hasattr(MyModel, 'set_name_order'))\n\n        make_foreign_order_accessors(MyModel, MyModel)\n\n        self.assertTrue(hasattr(MyModel, 'get_mymodel_order'))\n        self.assertTrue(hasattr(MyModel, 'set_mymodel_order'))\n\n    def test_model_unpickle(self):\n       class SimpleModel(models.Model):\n           name = models.CharField(max_length=100)\n       \n       # Pickle and unpickle the model class\n       pickled = pickle.dumps(SimpleModel)\n       unpickled = pickle.loads(pickled)\n\n       self.assertEqual(unpickled, SimpleModel)\n       self.assertEqual(type(unpickled), type(SimpleModel)) \n\n"], "sample_100": ["\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.exceptions import NotFittedError\n\ndef test_onehotencoder_fit_transform():\n    enc = OneHotEncoder(handle_unknown='ignore')\n    X = [['Male', 1], ['Female', 3], ['Female', 2]]\n    enc.fit_transform(X)\n    assert enc.categories_ == [\n        np.array(['Female', 'Male'], dtype=object), np.array([1, 2, 3], dtype=object)\n    ]\n\ndef test_onehotencoder_transform():\n    enc = OneHotEncoder(handle_unknown='ignore')\n    X = [['Male', 1], ['Female', 3], ['Female', 2]]\n    enc.fit(X)\n    \n    X_new = [['Female', 3], ['Male', 1]]\n    enc.transform(X_new)\n    \ndef test_onehotencoder_inverse_transform():\n    enc = OneHotEncoder()\n    X = [['Male', 1], ['Female', 3], ['Female', 2]]\n    enc.fit(X)  \n    \n    X_new = [['Female', 3], ['Male', 1]]\n    X_trans = enc.transform(X_new)\n    \n    enc.inverse_transform(X_trans)\n\n\ndef test_ordinalencoder_fit_transform():\n    enc = OrdinalEncoder()\n    X = [['Male', 1], ['Female', 3], ['Female', 2]]\n    enc.fit_transform(X)\n    assert enc.categories_ == [\n        np.array(['Female', 'Male'], dtype=object), np.array([1, 2, 3], dtype=object)\n    ]\n\ndef test_ordinalencoder_transform():\n    enc = OrdinalEncoder()\n    X = [['Male', 1], ['Female', 3], ['Female', 2]]\n    enc.fit(X)\n    \n    X_new = [['Female', 3], ['Male', 1]]\n    enc.transform(X_new)\n    \ndef test_ordinalencoder_inverse_transform():\n    enc = OrdinalEncoder(dtype=int)\n    X = [['Male', 1], ['Female', 3], ['Female', 2]]\n    enc.fit(X)\n    \n    X_new = [[1, 0], [0, 1]]\n    enc.inverse_transform(X_new)\n\ndef test_onehotencoder_handle_unknown_error():\n    enc = OneHotEncoder(handle_unknown='error')\n    enc.fit([['Male', 1], ['Female', 3]])\n    \n    with pytest.raises(ValueError):\n      enc.transform([['Male', 4]])\n\n"], "sample_103": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.logistic import (LogisticRegression, LogisticRegressionCV,\n                                          logistic_regression_path,\n                                          _logistic_regression_path,\n                                          _logistic_loss_and_grad,\n                                          _logistic_grad_hess,\n                                          _multinomial_grad_hess,\n                                          _logistic_loss,\n                                          _log_reg_scoring_path)\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics.scorer import get_scorer\n\n\nclass LogisticRegressionTestCase(unittest.TestCase):\n\n    def test_logistic_regression(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n        lr = LogisticRegression(penalty='l2', solver='lbfgs', random_state=42)\n        lr.fit(X_train, y_train)\n\n        y_pred = lr.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        self.assertGreater(accuracy, 0.8)\n\n    def test_logistic_regression_multiclass(self):\n        X, y = make_classification(n_samples=100, n_features=10, n_classes=3, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n        lr = LogisticRegression(penalty='l2', solver='lbfgs', random_state=42)\n        lr.fit(X_train, y_train)\n\n        y_pred = lr.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        self.assertGreater(accuracy, 0.8)\n\n    def test_logistic_regression_l1_penalty(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n        lr = LogisticRegression(penalty='l1', solver='liblinear', random_state=42)\n        lr.fit(X_train, y_train)\n\n        y_pred = lr.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        self.assertGreater(accuracy, 0.8)\n\n    def test_logistic_regression_elasticnet(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n        lr = LogisticRegression(penalty='elasticnet', solver='saga', l1_ratio=0.5, random_state=42)\n        lr.fit(X_train, y_train)\n\n        y_pred = lr.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        self.assertGreater(accuracy, 0.8)\n\n    def test_logistic_regression_cv(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n        lr = LogisticRegressionCV(penalty='l2', solver='lbfgs', cv=5, random_state=42)\n        lr.fit(X_train, y_train)\n\n        y_pred = lr.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        self.assertGreater(accuracy, 0.8)\n\n    def test_logistic_regression_predict_proba(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n        lr = LogisticRegression(penalty='l2', solver='lbfgs', random_state=42)\n        lr.fit(X_train, y_train)\n\n        probs = lr.predict_proba(X_test)\n        self.assertEqual(probs.shape[0], X_test.shape[0])\n        self.assertEqual(probs.shape[1], len(np.unique(y)))\n\n    def test_logistic_regression_score(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n        lr = LogisticRegression(penalty='l2', solver='lbfgs', random_state=42)\n        lr.fit(X_train, y_train)\n\n        score = lr.score(X_test, y_test)\n        self.assertGreater(score, 0.8)\n\n    def test_logistic_regression_custom_scoring(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n        lr = LogisticRegression(penalty='l2', solver='lbfgs', random_state=42)\n        lr.fit(X_train, y_train)\n\n        scorer = get_scorer('f1_micro')\n        score = scorer(lr, X_test, y_test)\n\n        self.assertGreater(score, 0.8)\n    def test_logistic_regression_fit_intercept_false(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n        lr = LogisticRegression(penalty='l2', solver='lbfgs', fit_intercept=False, random_state=42)\n        lr.fit(X_train, y_train)\n\n        y_pred = lr.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        self.assertGreater(accuracy, 0.8)\n\n    def test_logistic_regression_intercept_scaling(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n        lr = LogisticRegression(penalty='l2', solver='lbfgs', intercept_scaling=2, random_state=42)\n        lr.fit(X_train, y_train)\n\n        y_pred = lr.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        self.assertGreater(accuracy, 0.8)\n    def test_logistic_regression_empty_feature_set(self):\n        X = np.empty((10, 0))\n        y = np.array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1])\n        lr = LogisticRegression(penalty='l2', solver='lbfgs', random_state=42)\n        lr.fit(X, y)\n        self.assertTrue(np.allclose(lr.coef_, 0))\n        self.assertTrue(np.allclose(lr.intercept_, 0))\n\n    def test_logistic_regression_label_encoder(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42, n_classes=3)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n        le = LabelEncoder()\n        y_train = le.fit_transform(y_train)\n        y_test = le.transform(y_test)\n        \n        lr = LogisticRegression(multi_class='multinomial', solver='lbfgs', random_state=42)\n\n        lr.fit(X_train, y_train)\n\n        y_pred = lr.predict(X_test)   \n        accuracy = accuracy_score(y_test, y_pred)\n        self.assertGreater(accuracy, 0.8)\n\n\n\n"], "sample_131": ["\nfrom sympy.core.basic import (Basic, Atom, preorder_traversal, as_Basic, _atomic,\n                             _aresame, _constructor_postprocessors)\nfrom sympy.core.function import Function, Lambda\nfrom sympy.core.compatibility import default_sort_key\nfrom sympy.functions.elementary.exponential import exp\nfrom sympy.core.symbol import Symbol\n\n# Testing _aresame\ndef test_aresame_basic():\n    assert _aresame(1, 1)\n    assert _aresame(2, 2.0)\n    assert not _aresame(1, 2)\n    assert not _aresame(1, 2.0)\n    assert _aresame(Symbol('x'), Symbol('x'))\n    assert not _aresame(Symbol('x'), Symbol('y'))\n\n# Testing _atomic\n\ndef test_atomic_basic():\n    x, y = Symbol('x'), Symbol('y')\n    f = Function('f')\n    assert _atomic(x + y) == {x, y}\n    assert _atomic(x + f(y)) == {x, f(y)}\n    assert _atomic(x*f(y)) == {x, f(y)}\n    assert _atomic(x**f(y)) == {x, f(y)}\n\n# Testing preorder_traversal\n\ndef test_preorder_traversal_basic():\n    x, y, z = Symbol('x'), Symbol('y'), Symbol('z')\n    expr = (x + y) * z\n    pt = list(preorder_traversal(expr))\n    assert pt == [expr, z, x + y, y, x]\n\n    expr = exp(x*y)\n    pt = list(preorder_traversal(expr))\n    assert pt == [expr, exp, x*y, y, x]\n\n# Testing Basic methods\n\ndef test_basic_methods():\n    x, y = Symbol('x'), Symbol('y')\n    a = Basic(x, y)\n    assert a.args == (x, y)\n    assert a.is_Atom is False\n    assert a.func == type(a)\n\n# Testing as_Basic \n\ndef test_as_Basic():\n    assert as_Basic(1) == 1\n    assert as_Basic(x) == x\n\n# Testing _constructor_postprocessors\n\ndef test_constructor_postprocessors():\n    class MyBasic(Basic):\n        _constructor_postprocessors = [lambda obj: obj.func(*obj.args[::-1])]\n\n    obj = MyBasic(1, 2)\n\n    assert obj.args == (2, 1)\n\n"], "sample_96": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nimport numpy as np\nfrom scipy.sparse import csr_matrix\nfrom sklearn.utils.validation import DataConversionWarning\nfrom sklearn.neighbors.base import (\n    NeighborsBase,\n    KNeighborsMixin,\n    RadiusNeighborsMixin,\n    SupervisedFloatMixin,\n    SupervisedIntegerMixin,\n    UnsupervisedMixin,\n    VALID_METRICS_SPARSE,\n    VALID_METRICS,\n)\nfrom sklearn.utils import check_array\n\n\nclass TestNeighborsBase(unittest.TestCase):\n\n    def test_valid_metrics(self):\n        self.assertIn('euclidean', VALID_METRICS)\n        self.assertIn('manhattan', VALID_METRICS)\n        self.assertIn('minkowski', VALID_METRICS)\n        self.assertIn('precomputed', VALID_METRICS)\n\n        self.assertIn('euclidean', VALID_METRICS_SPARSE)\n        self.assertIn('manhattan', VALID_METRICS_SPARSE)\n        self.assertIn('cosine', VALID_METRICS_SPARSE)\n        self.assertIn('l1', VALID_METRICS_SPARSE)\n        self.assertIn('l2', VALID_METRICS_SPARSE)\n\n    def test_check_algorithm_metric(self):\n        nb = NeighborsBase(algorithm='auto', metric='euclidean')\n        nb._check_algorithm_metric()\n\n        nb = NeighborsBase(algorithm='kd_tree', metric='euclidean')\n        nb._check_algorithm_metric()\n\n        nb = NeighborsBase(algorithm='brute', metric='manhattan')\n        nb._check_algorithm_metric()\n\n        nb = NeighborsBase(algorithm='ball_tree', metric='minkowski')\n        nb._check_algorithm_metric()\n\n        with self.assertRaises(ValueError):\n            nb = NeighborsBase(algorithm='invalid', metric='euclidean')\n            nb._check_algorithm_metric()\n\n        with self.assertRaises(ValueError):\n            nb = NeighborsBase(algorithm='auto', metric='invalid')\n            nb._check_algorithm_metric()\n\n        with self.assertRaises(ValueError):\n            nb = NeighborsBase(algorithm='kd_tree', metric='invalid')\n            nb._check_algorithm_metric()\n\n        with self.assertRaises(ValueError):\n            nb = NeighborsBase(algorithm='ball_tree', metric=None)\n            nb._check_algorithm_metric()\n\n        # callable metric\n        nb = NeighborsBase(algorithm='brute', metric=lambda x, y: x)\n        nb._check_algorithm_metric()\n\n        with self.assertRaises(ValueError):\n            nb = NeighborsBase(algorithm='kd_tree',\n                               metric=lambda x, y: x)\n            nb._check_algorithm_metric()\n\n        with self.assertRaises(ValueError):\n            nb = NeighborsBase(algorithm='ball_tree',\n                               metric=lambda x, y: x)\n            nb._check_algorithm_metric()\n\n\nclass TestKNeighborsMixin(unittest.TestCase):\n    def test_kneighbors(self):\n        X = np.array([[0], [1], [2], [3]])\n        neigh = NeighborsBase()\n        neigh._fit_X = X\n        neigh._fit_method = 'brute'\n\n        dist, ind = neigh.kneighbors(X, n_neighbors=2)\n\n        self.assertEqual(dist.shape, (4, 2))\n        self.assertEqual(ind.shape, (4, 2))\n\n        dist, ind = neigh.kneighbors(X, n_neighbors=1)\n\n        self.assertEqual(dist.shape, (4, 1))\n        self.assertEqual(ind.shape, (4, 1))\n\n        with self.assertRaises(ValueError):\n            neigh.kneighbors(X, n_neighbors=0)\n\n        with self.assertRaises(ValueError):\n            neigh.kneighbors(X, n_neighbors=-1)\n\n        with self.assertRaises(ValueError):\n            neigh.kneighbors(X, n_neighbors=5)\n\n    @patch('sklearn.neighbors.base.pairwise_distances')\n    def test_kneighbors_sparse(self, mock_pairwise_distances):\n        X = csr_matrix([[0], [1], [2], [3]])\n        neigh = NeighborsBase()\n\n        # Mock pairwise_distances to return a sparse matrix\n        mock_pairwise_distances.return_value = csr_matrix([[0, 1],\n                                                          [1, 0]])\n        neigh._fit_X = X\n        neigh._fit_method = 'brute'\n        neigh.kneighbors(X, n_neighbors=2)\n\n        mock_pairwise_distances.assert_called_once_with(\n            X, X, 'euclidean', n_jobs=None, squared=False)\n\n    def test_kneighbors_graph(self):\n        X = np.array([[0], [3], [1]])\n        neigh = NeighborsBase()\n        neigh._fit_X = X\n        neigh._fit_method = 'brute'\n\n        A = neigh.kneighbors_graph(X, n_neighbors=2, mode='connectivity')\n        self.assertTrue(isinstance(A, csr_matrix))\n\n        A = neigh.kneighbors_graph(X, n_neighbors=2, mode='distance')\n        self.assertTrue(isinstance(A, csr_matrix))\n\n        with self.assertRaises(ValueError):\n            neigh.kneighbors_graph(X, n_neighbors=2, mode='invalid')\n\n\nclass TestRadiusNeighborsMixin(unittest.TestCase):\n\n    def test_radius_neighbors(self):\n        X = np.array([[0], [1], [2], [3]])\n        neigh = NeighborsBase()\n        neigh._fit_X = X\n        neigh._fit_method = 'brute'\n\n        dist, ind = neigh.radius_neighbors(X, radius=1.5)\n\n        self.assertEqual(dist.shape, (4,))\n        self.assertEqual(ind.shape, (4,))\n\n        dist, ind = neigh.radius_neighbors(X, radius=1.5,\n                                           return_distance=False)\n\n        self.assertEqual(ind.shape, (4,))\n        self.assertIsNone(dist)\n\n    @patch('sklearn.neighbors.base.pairwise_distances')\n    def test_radius_neighbors_sparse(self, mock_pairwise_distances):\n        X = csr_matrix([[0], [1], [2], [3]])\n        neigh = NeighborsBase()\n        neigh._fit_X = X\n        neigh._fit_method = 'brute'\n\n        # Mock pairwise_distances to return a sparse matrix\n        mock_pairwise_distances.return_value = csr_matrix([[0, 1],\n                                                          [1, 0]])\n        neigh.radius_neighbors(X, radius=1.5)\n\n        mock_pairwise_distances.assert_called_once_with(\n            X, X, 'euclidean', n_jobs=None, squared=True)\n\n    def test_radius_neighbors_graph(self):\n        X = np.array([[0], [3], [1]])\n        neigh = NeighborsBase()\n        neigh._fit_X = X\n        neigh._fit_method = 'brute'\n\n        A = neigh.radius_neighbors_graph(X, radius=1.5, mode='connectivity')\n        self.assertTrue(isinstance(A, csr_matrix))\n\n        A = neigh.radius_neighbors_graph(X, radius=1.5, mode='distance')\n        self.assertTrue(isinstance(A, csr_matrix))\n\n        with self.assertRaises(ValueError):\n            neigh.radius_neighbors_graph(X, radius=1.5, mode='invalid')\n\n\n\n#Mock up a fake supervised classification dataset\nclass TestSupervisedFloatMixin(unittest.TestCase):\n\n    def test_fit(self):\n        from sklearn.neighbors import KNeighborsRegressor\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([1.0, 2.0, 3.0])\n\n        neigh = KNeighborsRegressor()\n        neigh.fit(X, y)\n\n        self.assertTrue(hasattr(neigh, \"_y\"))\n        self.assertEqual(neigh._y.shape, (3, ))\n\nclass TestSupervisedIntegerMixin(unittest.TestCase):\n\n    def test_fit(self):\n        from sklearn.neighbors import KNeighborsClassifier\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n\n        neigh = KNeighborsClassifier()\n\n        neigh.fit(X, y)\n        self.assertTrue(hasattr(neigh, \"_y\"))\n        self.assertTrue(hasattr(neigh, \"classes_\"))\n\n        y = np.array([[0, 1]])\n        neigh = KNeighborsClassifier()\n\n        with warnings.catch_warnings(record=True) as w:\n            neigh.fit(X, y)\n        self.assertTrue(hasattr(neigh, \"_y\"))\n        self.assertTrue(hasattr(neigh, \"classes_\"))\n        self.assertEqual(len(w), 1)\n        self.assertRegex(str(w[0].message), r\"A column-vector y was passed\")\n\nclass TestUnsupervisedMixin(unittest.TestCase):\n\n    def test_fit(self):\n        from sklearn.neighbors import KNeighborsMixin\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        neigh = KNeighborsMixin()\n\n        neigh.fit(X)\n\n        self.assertTrue(hasattr(neigh, \"_fit_X\"))\n\n"], "sample_68": ["\nimport contextlib\nimport os\nimport tempfile\nimport warnings\nfrom pathlib import Path\n\nimport matplotlib as mpl\nfrom matplotlib.style.core import (\n    use, context, available, library, reload_library,\n    read_style_directory, update_user_library, _remove_blacklisted_style_params,\n    _apply_style, STYLE_EXTENSION, USER_LIBRARY_PATHS, _StyleLibrary,\n    _DEPRECATED_SEABORN_STYLES, _DEPRECATED_SEABORN_MSG)\nfrom matplotlib.testing.compare import compare_images\n\nmpl.use('Agg')  # Use agg backend for testing\n\ndef create_temp_style_dir(style_dict):\n    \"\"\"Create a temporary directory and populate it with style files.\"\"\"\n    with tempfile.TemporaryDirectory() as tmpdir:\n        for name, params in style_dict.items():\n            style_path = os.path.join(tmpdir, f'{name}.{STYLE_EXTENSION}')\n            with open(style_path, 'w') as f:\n                for key, val in params.items():\n                    f.write(f'{key}: {val}\\n')\n        return tmpdir\n\ndef test_use_default():\n    use('default')\n    assert mpl.rcParams == mpl.rcParamsDefault\n\n\n\ndef test_use_invalid_style():\n    with pytest.raises(IOError):\n        use('nonexistent_style')\n\n\ndef test_use_style_from_file():\n    style_dict = {'test_style': {'lines.linewidth': 2}}\n    with create_temp_style_dir(style_dict) as tmpdir:\n        style_file = os.path.join(tmpdir, 'test_style.mplstyle')\n        use(style_file)\n        assert mpl.rcParams['lines.linewidth'] == 2\n\ndef test_use_multiple_styles():\n    style_dict1 = {'style1': {'figure.figsize': (10, 5)}}\n    style_dict2 = {'style2': {'lines.linewidth': 3}}\n\n    with create_temp_style_dir(style_dict1) as tmpdir1:\n        with create_temp_style_dir(style_dict2) as tmpdir2:\n            style_file1 = os.path.join(tmpdir1, 'style1.mplstyle')\n            style_file2 = os.path.join(tmpdir2, 'style2.mplstyle')\n\n            use([style_file1, style_file2])\n            assert mpl.rcParams['figure.figsize'] == (10, 5)\n            assert mpl.rcParams['lines.linewidth'] == 3\n\ndef test_context_manager():\n    style_dict = {'test_style': {'lines.linewidth': 2}}\n    with create_temp_style_dir(style_dict) as tmpdir:\n        style_file = os.path.join(tmpdir, 'test_style.mplstyle')\n        with context(style_file):\n            assert mpl.rcParams['lines.linewidth'] == 2\n        assert mpl.rcParams['lines.linewidth'] != 2\n\n\ndef test_context_after_reset():\n    style_dict = {'test_style': {'lines.linewidth': 2}}\n    with create_temp_style_dir(style_dict) as tmpdir:\n        style_file = os.path.join(tmpdir, 'test_style.mplstyle')\n        with context(style_file, after_reset=True):\n            assert mpl.rcParams['lines.linewidth'] == 2\n        assert mpl.rcParams['lines.linewidth'] != 2\n\ndef test_use_dict():\n    style_dict = {'test_style': {'lines.linewidth': 2}}\n    use(style_dict)\n    assert mpl.rcParams['lines.linewidth'] == 2\n\ndef test_read_style_directory():\n    style_dict = {'test_style': {'lines.linewidth': 2}}\n    with create_temp_style_dir(style_dict) as tmpdir:\n        styles = read_style_directory(tmpdir)\n        assert styles == style_dict\n\ndef test_update_user_library():\n    style_dict = {'test_style': {'lines.linewidth': 2}}\n    with create_temp_style_dir(style_dict) as tmpdir:\n        USER_LIBRARY_PATHS[0] = tmpdir\n\n        updated_library = _StyleLibrary()\n        update_user_library(updated_library)\n        assert 'test_style' in updated_library\n\ndef test_remove_blacklisted_style_params():\n    params = {'lines.linewidth': 2,\n              'interactive': True,\n              'backend': 'Agg'}\n    cleaned_params = _remove_blacklisted_style_params(params)\n    assert 'lines.linewidth' in cleaned_params\n    assert 'interactive' not in cleaned_params\n    assert 'backend' not in cleaned_params\n\ndef test_apply_style():\n    params = {'lines.linewidth': 2}\n    _apply_style(params)\n    assert mpl.rcParams['lines.linewidth'] == 2\n\ndef test_deprecation_warning_for_seaborn():\n    with warnings.catch_warnings(record=True) as w:\n        use(\"seaborn-darkgrid\")\n        assert len(w) == 1\n        assert \"deprecated\" in str(w[0].message)\n        assert _DEPRECATED_SEABORN_MSG.format(since=\"3.6\") in str(w[0].message)\n\ndef test_reload_library():\n    style_dict = {'test_style': {'lines.linewidth': 2}}\n    with create_temp_style_dir(style_dict) as tmpdir:\n        USER_LIBRARY_PATHS[0] = tmpdir\n        reload_library()\n        assert 'test_style' in library\n\ndef test_deprecation_warning_for_mpl_alias():\n\n        with warnings.catch_warnings(record=True) as w:\n            use('mpl20')\n            assert len(w) == 0\n            use('mpl15')\n            assert len(w) == 0\n\n\n\n"], "sample_83": ["\nimport re\nimport tokenize\nfrom unittest import mock\n\nfrom pylint.checkers import misc\nfrom pylint.interfaces import IRawChecker\nfrom pylint.lint import PyLinter\nfrom pylint.testutils import CheckerTestCase, Message\n\nclass MiscellaneousCheckerTest(CheckerTestCase):\n\n    CHECKER_CLASS = misc.EncodingChecker\n\n    def test_fixme(self):\n        self.checker.config.notes = (\"FIXME\", \"XXX\", \"TODO\")\n\n        with mock.patch(\"builtins.open\") as mock_open:\n            mock_open.return_value.read.return_value = \"# FIXME: This is a fixme\\n\"\n\n            self.checker.process_tokens(\n                [\n                    (\n                        tokenize.COMMENT,\n                        \"comment\",\n                        (1, 0, 1, 18, \"# FIXME: This is a fixme\\n\"),\n                    ),\n                ]\n            )\n            self.assertEqual(\n                self.checker.messages,\n                [Message(\"fixme\", line=1, col_offset=2, args=(\"FIXME: This is a fixme\",))],\n            )\n\n    def test_note_regex(self):\n        self.checker.config.notes_rgx = r\"BUG\"\n        with mock.patch(\"builtins.open\") as mock_open:\n            mock_open.return_value.read.return_value = \"# BUG: This is a bug\\n\"\n            self.checker.process_tokens(\n                [\n                    (\n                        tokenize.COMMENT,\n                        \"comment\",\n                        (1, 0, 1, 20, \"# BUG: This is a bug\\n\"),\n                    ),\n                ]\n            )\n            self.assertEqual(\n                self.checker.messages,\n                [Message(\"fixme\", line=1, col_offset=2, args=(\"BUG: This is a bug\",))],\n            )\n\n    def test_encoding(self):\n        node = mock.MagicMock()\n        node.file_encoding = \"utf-8\"\n        node.stream.return_value = [\"# coding: latin-1\\n\", \"print('Hello')\"]\n        self.checker.process_module(node)\n\n    def test_check_encoding_latin1(self):\n        line = b\"# coding: latin-1\\n\"\n\n        self.checker.config.notes = (\"FIXME\", \"XXX\")\n        res = self.checker._check_encoding(1, line, \"latin-1\")\n        self.assertEqual(res, \"# coding: latin-1\\n\")\n\n    def test_check_encoding_ascii(self):\n        line = b\"# coding: ascii\\n\"\n\n        self.checker.config.notes = (\"FIXME\", \"XXX\")\n        res = self.checker._check_encoding(1, line, \"ascii\")\n        self.assertEqual(res, \"# coding: ascii\\n\")\n\n    def test_check_encoding_bad_encoding(self):\n        line = b\"# coding: foobar\\n\"\n\n        self.checker.config.notes = (\"FIXME\", \"XXX\")\n        res = self.checker._check_encoding(1, line, \"latin-1\")\n        self.assertEqual(res, None)\n\n    def test_check_encoding_unicode_error(self):\n        line = b\"\\xc3\\xa9\\n\"\n\n        self.checker.config.notes = (\"FIXME\", \"XXX\")\n        res = self.checker._check_encoding(1, line, \"ascii\")\n        self.assertEqual(res, None)\n\n    def test_disable_option(self):\n        self.checker.config.notes = (\"FIXME\", \"XXX\")\n        with mock.patch(\"builtins.open\") as mock_open:\n            mock_open.return_value.read.return_value = \"# pylint: disable=FIXME\\n\"\n\n            self.checker.process_tokens(\n                [\n                    (\n                        tokenize.COMMENT,\n                        \"comment\",\n                        (1, 0, 1, 23, \"# pylint: disable=FIXME\\n\"),\n                    ),\n                ]\n            )\n\n            self.assertEqual(self.checker.messages, [])\n\n    def test_bad_inline_option(self):\n        self.checker.config.notes = (\"FIXME\", \"XXX\")\n        with mock.patch(\"builtins.open\") as mock_open:\n            mock_open.return_value.read.return_value = \"# pylint: disable=nofixme\\n\"\n\n            self.checker.process_tokens(\n                [\n                    (\n                        tokenize.COMMENT,\n                        \"comment\",\n                        (1, 0, 1, 18, \"# pylint: disable=nofixme\\n\"),\n                    ),\n                ]\n            )\n            self.assertEqual(\n                self.checker.messages,\n                [Message(\"bad-inline-option\", line=1, col_offset=1, args=(\"nofixme\",))],\n            )\n\n\n\nclass ByIdManagedMessagesCheckerTest(CheckerTestCase):\n    CHECKER_CLASS = misc.ByIdManagedMessagesChecker\n\n    def test_by_id_messages(self):\n        linter = PyLinter()\n        linter.register_checker(self.checker)\n        linter._by_id_managed_msgs = [\n            (\"foo\", \"W001\", \"symbol\", 10, True),\n            (\"bar\", \"W002\", \"symbol\", 20, False),\n        ]\n\n        self.checker.process_module(mock.MagicMock())\n        self.assertEqual(\n            self.checker.messages,\n            [\n                Message(\"use-symbolic-message-instead\", line=10, args=\"'W001' is cryptic: use '# pylint: disable=symbol' instead\"),\n                Message(\"use-symbolic-message-instead\", line=20, args=\"'W002' is cryptic: use '# pylint: enable=symbol' instead\"),\n            ],\n        )\n\n"], "sample_49": ["\nfrom django.contrib.messages.storage.cookie import (\n    CookieStorage, MessageDecoder, MessageEncoder, MessageSerializer,\n)\nfrom django.http import SimpleHttpResponse\nfrom django.conf import settings\nfrom django.contrib.messages import constants as messages\nfrom django.utils.safestring import mark_safe\nfrom unittest.mock import patch, MagicMock\n\nsettings.SESSION_COOKIE_DOMAIN = \"example.com\"\nsettings.SESSION_COOKIE_SECURE = False\nsettings.SESSION_COOKIE_HTTPONLY = False\nsettings.SESSION_COOKIE_SAMESITE = None\n\ndef test_message_encoder_default():\n    message = Message(\n        \"Hello, world!\", messages.INFO, extra_tags='success'\n    )\n    encoder = MessageEncoder()\n    encoded_message = encoder.default(message)\n    assert encoded_message == [\n        '__json_message', 1, 'INFO', mark_safe('Hello, world!'), 'success'\n    ]\n\ndef test_message_encoder_default_not_safedata():\n    message = Message(\"Hello, world!\", messages.INFO)\n    encoder = MessageEncoder()\n    encoded_message = encoder.default(message)\n    assert encoded_message == [\n        '__json_message', 0, 'INFO', 'Hello, world!'\n    ]\n\ndef test_message_decoder_process_messages():\n    decoder = MessageDecoder()\n    message_data = [\n        '__json_message', 1, 'INFO', mark_safe('Hello, world!'), 'success'\n    ]\n    decoded_message = decoder.process_messages(message_data)\n    assert isinstance(decoded_message, Message)\n    assert decoded_message.level == messages.INFO\n    assert decoded_message.message == mark_safe('Hello, world!')\n    assert decoded_message.extra_tags == 'success'\n\ndef test_message_decoder_process_messages_list():\n    decoder = MessageDecoder()\n    message_data = [\n        ['__json_message', 1, 'INFO', mark_safe('Hello, world!'), 'success'],\n        ['__json_message', 0, 'WARNING', 'Danger!'],\n    ]\n    decoded_messages = decoder.process_messages(message_data)\n    assert isinstance(decoded_messages[0], Message)\n    assert isinstance(decoded_messages[1], Message)\n\ndef test_message_decoder_process_messages_dict():\n    decoder = MessageDecoder()\n    message_data = {\n        'message1': ['__json_message', 1, 'INFO', mark_safe('Hello, world!'), 'success'],\n        'message2': ['__json_message', 0, 'WARNING', 'Danger!'],\n    }\n    decoded_messages = decoder.process_messages(message_data)\n    assert isinstance(decoded_messages['message1'], Message)\n    assert isinstance(decoded_messages['message2'], Message)\n\ndef test_message_serializer_dumps():\n    message = Message(\"Hello, world!\", messages.INFO)\n    serializer = MessageSerializer()\n    encoded_message = serializer.dumps([message])\n    assert isinstance(encoded_message, bytes)\n\ndef test_message_serializer_loads():\n    encoded_message = b'[\"__json_message\",0,\"INFO\",\"Hello, world!\"]'\n    serializer = MessageSerializer()\n    decoded_message = serializer.loads(encoded_message)\n    assert isinstance(decoded_message, list)\n    assert isinstance(decoded_message[0], Message)\n\ndef test_cookiestorage_get():\n    storage = CookieStorage(request=MagicMock())\n    storage._get()\n    assert storage._get() == ([], True)\n\ndef test_cookiestorage_get_not_finished():\n    storage = CookieStorage(request=MagicMock())\n    storage._get()\n    assert storage._get() == ([], True)\n\ndef test_cookiestorage_update_cookie():\n    response = SimpleHttpResponse()\n    storage = CookieStorage(request=MagicMock(), response=response)\n    encoded_data = b'test_data'\n    storage._update_cookie(encoded_data, response)\n    assert response.cookies[storage.cookie_name].value == encoded_data.decode('latin-1')\n\ndef test_cookiestorage_update_cookie_empty():\n    response = SimpleHttpResponse()\n    storage = CookieStorage(request=MagicMock(), response=response)\n    encoded_data = None\n    storage._update_cookie(encoded_data, response)\n    assert storage.cookie_name not in response.cookies\n\ndef test_cookiestorage_store():\n    response = SimpleHttpResponse()\n    storage = CookieStorage(request=MagicMock(), response=response)\n    messages = [Message(\"Hello, world!\", messages.INFO)]\n    storage._store(messages, response)\n    assert response.cookies[storage.cookie_name].value \n\ndef test_cookiestorage_store_remove_oldest():\n    response = SimpleHttpResponse()\n    storage = CookieStorage(request=MagicMock(), response=response)\n    messages = [Message(\"Hello, world!\", messages.INFO) for _ in range(5)]\n    storage._store(messages, response, remove_oldest=True)\n\ndef test_cookiestorage_encode():\n    storage = CookieStorage(request=MagicMock())\n    messages = [Message(\"Hello, world!\", messages.INFO)]\n    encoded_data = storage._encode(messages)\n    assert isinstance(encoded_data, bytes)\n\ndef test_cookiestorage_decode():\n    storage = CookieStorage(request=MagicMock())\n    encoded_data = b'test_data'\n    decoded_data = storage._decode(encoded_data.decode('latin-1'))\n    assert decoded_data is None\n\n"], "sample_42": ["\nfrom unittest import mock\nimport re\n\nfrom django.core.exceptions import ValidationError\nfrom django.forms import (\n    BooleanField, CharField, CheckboxSelectMultiple, ChoiceField, DateField,\n    DateTimeField, EmailField, FileField, FileInput, FloatField, Form,\n    HiddenInput, ImageField, IntegerField, MultipleChoiceField,\n    MultipleHiddenInput, MultiValueField, NullBooleanField, PasswordInput,\n    RadioSelect, Select, SplitDateTimeField, SplitHiddenDateTimeWidget, Textarea,\n    TextInput, TimeField, forms,\n)\nfrom django.forms.boundfield import BoundField, BoundWidget\nfrom django.forms.utils import flatatt, pretty_name\nfrom django.forms.widgets import Widget\nfrom django.utils.html import format_html\nfrom django.utils.safestring import mark_safe\n\nclass TestBoundField(object):\n\n    def test_as_hidden(self):\n        form = Form()\n        field = CharField()\n        bound_field = BoundField(form, field, 'name')\n        hidden_html = bound_field.as_hidden()\n        self.assertTrue('<input' in hidden_html)\n        self.assertTrue('type=\"hidden\"' in hidden_html)\n\n    def test_as_text(self):\n        form = Form()\n        field = CharField()\n        bound_field = BoundField(form, field, 'name')\n        text_html = bound_field.as_text()\n        self.assertTrue('<input' in text_html)\n        self.assertTrue('type=\"text\"' in text_html)\n\n    def test_as_textarea(self):\n        form = Form()\n        field = CharField()\n        bound_field = BoundField(form, field, 'name')\n        textarea_html = bound_field.as_textarea()\n        self.assertTrue('<textarea' in textarea_html)\n\n    def test_errors(self):\n        form = Form({'name': ['error']})\n        field = CharField()\n        bound_field = BoundField(form, field, 'name')\n        errors = bound_field.errors\n        self.assertEqual(len(errors), 1)\n\n    def test_label_tag(self):\n        form = Form()\n        field = CharField(label='My Label')\n        bound_field = BoundField(form, field, 'name')\n        label_html = bound_field.label_tag()\n        self.assertTrue('<label' in label_html)\n        self.assertTrue('My Label' in label_html)\n\n    def test_css_classes(self):\n        form = Form()\n        field = CharField(required=True)\n        bound_field = BoundField(form, field, 'name')\n        css_classes = bound_field.css_classes()\n        self.assertTrue('required' in css_classes)\n\n    def test_auto_id(self):\n        form = Form(auto_id='%s_id')\n        field = CharField()\n        bound_field = BoundField(form, field, 'name')\n        auto_id = bound_field.auto_id\n        self.assertEqual(auto_id, 'name_id')\n\n    def test_build_widget_attrs(self):\n        form = Form()\n        field = CharField(required=True)\n        bound_field = BoundField(form, field, 'name')\n        attrs = bound_field.build_widget_attrs({})\n        self.assertTrue('required' in attrs)\n\n    def test_subwidgets(self):\n        form = Form()\n        field = CheckboxSelectMultiple()\n        bound_field = BoundField(form, field, 'name')\n        subwidgets = bound_field.subwidgets\n        self.assertTrue(len(subwidgets) > 0)\n\n    def test_as_widget(self):\n        form = Form()\n        field = CharField()\n        bound_field = BoundField(form, field, 'name')\n        widget_html = bound_field.as_widget()\n        self.assertTrue('<input' in widget_html)\n        self.assertTrue('type=\"text\"' in widget_html)\n\nclass TestBoundWidget(object):\n\n    def test_tag(self):\n        parent_widget = mock.MagicMock()\n        parent_widget.template_name = 'template.html'\n        data = {'label': 'My Label'}\n        renderer = mock.MagicMock()\n        bound_widget = BoundWidget(parent_widget, data, renderer)\n        tag_html = bound_widget.tag()\n        self.assertTrue('template.html' in tag_html)\n\n\n\n"], "sample_148": ["\nimport unittest\nfrom sympy import latex, symbols, sin, cos, exp, log, I, Rational, Eq\nfrom sympy.printing.latex import (latex, translate, greek_letters_set, tex_greek_dictionary, multiline_latex, latex_escape, LatexPrinter)\n\nclass MyTestCases(unittest.TestCase):\n    def test_latex_basic_symbols(self):\n        x, y = symbols('x y')\n        self.assertEqual(latex(x), 'x')\n        self.assertEqual(latex(y), 'y')\n        self.assertEqual(latex(x + y), 'x + y')\n        self.assertEqual(latex(x*y), 'x y')\n        self.assertEqual(latex(x/y), 'x / y')\n        self.assertEqual(latex(x**2), 'x^{2}')\n\n    def test_latex_functions(self):\n        x = symbols('x')\n        self.assertEqual(latex(sin(x)), '\\\\sin{x}')\n        self.assertEqual(latex(cos(x)), '\\\\cos{x}')\n        self.assertEqual(latex(exp(x)), '\\\\exp{x}')\n        self.assertEqual(latex(log(x)), '\\\\log{x}')\n\n    def test_latex_complex(self):\n        self.assertEqual(latex(I), 'i')\n\n    def test_latex_rational(self):\n        self.assertEqual(latex(Rational(1,2)), '\\\\frac{1}{2}')\n\n    def test_latex_multiline(self):\n        x, y = symbols('x y')\n        expr = sin(x*y) + exp(I*x) - cos(log(y))\n        self.assertEqual(multiline_latex(x, expr),\n        r'\\begin{align*}\nx &= e^{i x} + \\sin{\\left(x y \\right)} \\\\\n& - \\cos{\\left(\\log{\\left(y \\right)} \\right)}\n\\end{align*}')\n\n    def test_latex_options(self):\n        x = symbols('x')\n        self.assertEqual(latex(x**2, fold_short_frac=False), 'x^{2}')\n        self.assertEqual(latex(x**2, fold_short_frac=True), 'x^{2}')\n\n    def test_latex_greek_letters(self):\n        self.assertEqual(latex(symbols('alpha')), '\\\\alpha')\n        self.assertEqual(latex(symbols('Omega')), '\\\\Omega')\n        self.assertEqual(latex(symbols('epsilon')), '\\\\epsilon')\n\n    def test_latex_translate(self):\n        self.assertEqual(translate('alphahatdotprime'), \"{\\\\dot{\\\\hat{\\\\alpha}}}'\")\n     \n    def test_latex_multiline_options(self):\n        x, y = symbols('x y')\n        expr = sin(x*y) + exp(I*x) - cos(log(y))\n        \n        self.assertEqual(multiline_latex(x, expr, 2, environment=\"eqnarray\", use_dots=True),\n        r'\\begin{eqnarray}\nx & = & e^{i x} + \\sin{\\left(x y \\right)} \\dots\\nonumber\\\\\n& & - \\cos{\\left(\\log{\\left(y \\right)} \\right)}\n\\end{eqnarray}')\n"], "sample_113": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom sphinx.builders import Builder\nfrom sphinx.domains.index import IndexDomain\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.environment.adapters.indexentries import IndexEntries\nfrom sphinx.util import logging\n\nlogger = logging.getLogger(__name__)\n\nclass TestIndexEntries(unittest.TestCase):\n\n    def setUp(self):\n        self.env = MagicMock(spec=BuildEnvironment)\n        self.env.get_domain.return_value = MagicMock(spec=IndexDomain)\n        self.env.get_domain.return_value.entries = {}\n        self.builder = MagicMock(spec=Builder)\n        self.index_entries = IndexEntries(self.env)\n\n    def test_create_index_empty(self):\n        result = self.index_entries.create_index(self.builder)\n        self.assertEqual(result, [])\n\n    def test_create_index_single(self):\n        self.env.get_domain.return_value.entries = {\n            'file.txt': [('single', 'entry', 'target', 'main', None)],\n        }\n        result = self.index_entries.create_index(self.builder)\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][0], 'entry')\n        self.assertEqual(len(result[0][1]), 1)\n        self.assertEqual(result[0][1][0][0], ('main', self.builder.get_relative_uri.return_value))\n\n    def test_create_index_pair(self):\n        self.env.get_domain.return_value.entries = {\n            'file.txt': [('pair', 'first second', 'target', 'main', None)],\n        }\n        result = self.index_entries.create_index(self.builder)\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][0], 'first')\n        self.assertEqual(len(result[0][1]), 2)\n        self.assertEqual(result[0][1][0][0], ('main', self.builder.get_relative_uri.return_value))\n        self.assertEqual(result[0][1][1][0], ('second', self.builder.get_relative_uri.return_value))\n\n    def test_create_index_triple(self):\n        self.env.get_domain.return_value.entries = {\n            'file.txt': [('triple', 'first second third', 'target', 'main', None)],\n        }\n        result = self.index_entries.create_index(self.builder)\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][0], 'first')\n        self.assertEqual(len(result[0][1]), 3)\n        self.assertEqual(result[0][1][0][0], ('main', self.builder.get_relative_uri.return_value))\n        self.assertEqual(result[0][1][1][0], ('second', self.builder.get_relative_uri.return_value))\n        self.assertEqual(result[0][1][2][0], ('third', self.builder.get_relative_uri.return_value))\n\n    def test_create_index_see(self):\n        self.env.get_domain.return_value.entries = {\n            'file.txt': [('see', 'entry see target', 'target', 'main', None)],\n        }\n        result = self.index_entries.create_index(self.builder)\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][0], 'entry')\n\n    def test_create_index_unknown_type(self):\n        self.env.get_domain.return_value.entries = {\n            'file.txt': [('unknown', 'entry', 'target', 'main', None)],\n        }\n        with patch('sphinx.environment.adapters.indexentries.logger.warning') as mock_warning:\n            result = self.index_entries.create_index(self.builder)\n            mock_warning.assert_called_once_with(__('unknown index entry type %r'), 'unknown',\n                                                location='file.txt')\n\n    def test_create_index_value_error(self):\n        self.env.get_domain.return_value.entries = {\n            'file.txt': [('pair', 'entry', 'target', 'main', None)],\n        }\n        with patch('sphinx.environment.adapters.indexentries.logger.warning') as mock_warning:\n            result = self.index_entries.create_index(self.builder)\n            mock_warning.assert_called_once()\n\n\n\n"], "sample_117": ["\nfrom sympy import mathematica_code as mcode, symbols, Eq, sin, cos, tan, exp, log, sqrt, pi, oo, zoo, nan, Derivative, integrate, Sum, factorial, gamma\nfrom sympy.functions.special.gamma_functions import gamma\nfrom sympy.functions.elementary.miscellaneous import Min, Max\n\nx, y, z = symbols('x y z')\n\ndef test_basic_arithmetic():\n    assert mcode(x + y) == 'x + y'\n    assert mcode(x - y) == 'x - y'\n    assert mcode(x * y) == 'x*y'\n\ndef test_powers():\n    assert mcode(x**2) == 'x^2'\n    assert mcode(x**-2) == 'x^-2'\n    assert mcode(2**x) == '2^x'\n\ndef test_trigonometric_functions():\n    assert mcode(sin(x)) == 'Sin[x]'\n    assert mcode(cos(x)) == 'Cos[x]'\n    assert mcode(tan(x)) == 'Tan[x]'\n\ndef test_exponential_and_logarithmic_functions():\n    assert mcode(exp(x)) == 'Exp[x]'\n    assert mcode(log(x)) == 'Log[x]'\n\ndef test_sqrt():\n    assert mcode(sqrt(x)) == 'Sqrt[x]'\n    \n\ndef test_constants():\n    assert mcode(pi) == 'Pi'\n    assert mcode(oo) == 'Infinity'\n    assert mcode(-oo) == '-Infinity'\n    assert mcode(zoo) == 'ComplexInfinity'\n    assert mcode(nan) == 'Indeterminate'\n\ndef test_derivative():\n    assert mcode(Derivative(sin(x), x)) == \"Hold[D[Sin[x], x]]\"\n\ndef test_integral():\n    assert mcode(integrate(x, x)) == \"Hold[Integrate[x, x]]\"\n    assert mcode(integrate(x**2, (x, 0, 1))) == \"Hold[Integrate[x^2, {x, 0, 1}]]\"\n\ndef test_summation():\n    assert mcode(Sum(x, (x, 1, 10))) == \"Hold[Sum[x, {x, 1, 10}]]\"\n\ndef test_factorial():\n    assert mcode(factorial(x)) == 'Gamma[x + 1]'\n\ndef test_gamma_function():\n    assert mcode(gamma(x)) == 'Gamma[x]'\n\ndef test_piecewise():\n    f = piecewise((x < 0, 0), (x >= 0, x))\n    assert mcode(f) == 'Piecewise[{{0, x < 0}, {x, x >= 0}}]'\n\ndef test_minmax():\n    assert mcode(Min(x, y)) == 'Min[x, y]'\n    assert mcode(Max(x, y)) == 'Max[x, y]'\n\ndef test_functions():\n    \n"], "sample_143": ["\nimport unittest\nfrom sympy.abc import x, y, z\nfrom sympy.printing import sstr, StrPrinter, sstrrepr\nfrom sympy import (sin, cos, exp, Eq, Add, Mul, Pow, MatrixSymbol,\n                  Matrix, Rational, Integer, Float, Symbol, Function,\n                  Derivative, Integral, Sum, Limit, I, pi, oo,\n                  Tuple, Dict, sqrt, factorial, gamma, erf, Poly,\n                  ZeroMatrix, OneMatrix, Trace, det, UnevaluatedExpr,\n                  Piecewise, Union, Identity, Lambda, Basic, Catalan,\n                  GoldenRatio, EulerGamma,\n                  Infinity, NegativeInfinity,\n                  ImageSet, Interval, FiniteSet,\n                  Complexes, Naturals0, Integers,\n                  Naturals, Reals, RationalField,\n                   AlgebraicNumber,\n                  HypergeometricFunction,\n                  EllipticFunction,\n                  )\n\nclass TestStrPrinter(unittest.TestCase):\n    def test_basic_printing(self):\n        p = StrPrinter()\n\n        self.assertEqual(p.doprint(x), 'x')\n        self.assertEqual(p.doprint(x + y), 'x + y')\n        self.assertEqual(p.doprint(x*y), 'x*y')\n        self.assertEqual(p.doprint(x**2), 'x**2')\n        self.assertEqual(p.doprint(sin(x)), 'sin(x)')\n\n    def test_matrix_printing(self):\n        A = Matrix([\n            [1, 2],\n            [3, 4]\n        ])\n        p = StrPrinter()\n        self.assertEqual(p.doprint(A), \"Matrix([[1, 2], [3, 4]])\")\n        p.set_print_level(2)\n        self.assertEqual(\n            p.doprint(MatrixSymbol('A', 2, 2)), \"MatrixSymbol('A', 2, 2)\")\n        p.set_print_level(1)\n        self.assertEqual(\n            p.doprint(MatrixSymbol('A', 2, 2)), \"A\")\n\n    def test_sstr(self):\n        self.assertEqual(sstr(x + y), 'x + y')\n        self.assertEqual(sstr(2*x), '2*x')\n        self.assertEqual(sstr(x**2), 'x**2')\n        self.assertEqual(sstr(sin(x)), 'sin(x)')\n\n    def test_sstrrepr(self):\n        self.assertEqual(sstrrepr(x + y), \"Add(Symbol('x'), Symbol('y'))\")\n        self.assertEqual(sstrrepr(2*x), \"Mul(Integer(2), Symbol('x'))\")\n        self.assertEqual(sstrrepr(x**2), \"Pow(Symbol('x'), Integer(2))\")\n        self.assertEqual(sstrrepr(sin(x)), \"sin(Symbol('x'))\")\n        self.assertEqual(sstrrepr(str(x)), \"'x'\")\n\n    def test_Rational_printing(self):\n        self.assertEqual(sstr(Rational(1, 2)), '1/2')\n        self.assertEqual(sstr(Rational(-1, 2)), '-1/2')\n\n    def test_Float_printing(self):\n        self.assertEqual(sstr(Float(1.2)), '1.2')\n        self.assertEqual(sstr(Float(1.2345678901234567)), '1.2345678901234567')\n        p = StrPrinter({'full_prec': True})\n        self.assertEqual(p.doprint(Float(1.2345678901234567)), '1.2345678901234567')\n        p = StrPrinter({'full_prec': False})\n        self.assertEqual(p.doprint(Float(1.2345678901234567)), '1.235')\n\n    def test_Pow_printing(self):\n        self.assertEqual(sstr(x**2), 'x**2')\n        self.assertEqual(sstr(x**-2), '1/x**2')\n        self.assertEqual(sstr(x**(1/2)), 'sqrt(x)')\n        self.assertEqual(sstr(x**(1/3)), 'x**(1/3)')\n\n\n    def test_complex_printing(self):\n        self.assertEqual(sstr(1 + 2*I), '1 + 2*I')\n\n    def test_function_printing(self):\n        f = Function('f')\n        self.assertEqual(sstr(f(x)), 'f(x)')\n        self.assertEqual(sstr(f(x + y)), 'f(x + y)')\n        self.assertEqual(sstr(sin(x)), 'sin(x)')\n\n    def test_equation_printing(self):\n        self.assertEqual(sstr(Eq(x, y)), 'Eq(x, y)')\n\n    def test_derivative_printing(self):\n        self.assertEqual(sstr(Derivative(x**2, x)), 'Derivative(x**2, x)')\n\n    def test_integral_printing(self):\n        self.assertEqual(sstr(Integral(x**2, x)), 'Integral(x**2, x)')\n\n    def test_sum_printing(self):\n        self.assertEqual(sstr(Sum(x**2, (x, 1, 10))), 'Sum(x**2, (x, 1, 10))')\n\n    def test_limit_printing(self):\n        self.assertEqual(sstr(Limit(x**2, x, 0)), 'Limit(x**2, x, 0)')\n\n    def test_Piecewise_printing(self):\n        self.assertEqual(sstr(Piecewise((x, x < 0), (y, True))),\n                         'Piecewise((x, x < 0), (y, True))')\n\n    def test_Union_printing(self):\n        self.assertEqual(sstr(Union(Interval(0, 1), Interval(2, 3))),\n                         'Union(Interval(0, 1), Interval(2, 3))')\n\n    def test_identity_printing(self):\n        self.assertEqual(sstr(Identity(3)), 'Identity(3)')\n\n    def test_Lambda_printing(self):\n        self.assertEqual(sstr(Lambda(x, x**2)), 'Lambda(x, x**2)')\n\n    def test_Mul_printing(self):\n        self.assertEqual(sstr(Mul(x, y, z)), 'x*y*z')\n\n    def test_Add_printing(self):\n        self.assertEqual(sstr(Add(x, y, z)), 'x + y + z')\n\n\n\n    def test_printing_with_custom_settings(self):\n        p = StrPrinter({'order': 'none'})\n        self.assertEqual(p.doprint(x + y), 'x + y')\n\n        p = StrPrinter({'abbrev': True})\n        self.assertEqual(p.doprint(x*y/m), 'x*y/m')\n\n    def test_printing_infinity(self):\n        self.assertEqual(sstr(oo), 'oo')\n        self.assertEqual(sstr(-oo), '-oo')\n\n    def test_printing_NaN(self):\n        self.assertEqual(sstr(nan), 'nan')\n\n    def test_Tuple_printing(self):\n        self.assertEqual(sstr(Tuple(x, y)), '(x, y)')\n\n    def test_Dict_printing(self):\n        self.assertEqual(sstr(Dict({x: y})), '{x: y}')\n"], "sample_153": ["\nimport pytest\nfrom sympy.polys.monomials import (\n    itermonomials,\n    monomial_count,\n    monomial_mul,\n    monomial_div,\n    monomial_gcd,\n    monomial_lcm,\n    monomial_max,\n    monomial_min,\n    monomial_divides,\n    monomial_pow,\n    Monomial,\n)\nfrom sympy.polys.orderings import monomial_key\nfrom sympy.abc import x, y, z, a, b\nfrom sympy import symbols\n\ndef test_itermonomials():\n    assert list(itermonomials([x, y], 2)) == [\n        1, x, y, x**2, x*y, y**2]\n    assert list(itermonomials([x, y], 3)) == [\n        1, x, y, x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3]\n\n    assert list(itermonomials([x, y], 2, 1)) == [\n    x, y, x**2, x*y, y**2]\n\n    assert list(itermonomials([a, b], [2, 4], [1, 2])) == [\n        a*b**2, a**2*b**2, a*b**3, a**2*b**3,\n        a**2*b**4, a*b**4,]\n\ndef test_monomial_count():\n    assert monomial_count(2, 2) == 6\n    assert monomial_count(3, 2) == 10\n\ndef test_monomial_mul():\n    assert monomial_mul((3, 4, 1), (1, 2, 0)) == (4, 6, 1)\n\ndef test_monomial_div():\n    assert monomial_div((3, 4, 1), (1, 2, 0)) == (2, 2, 1)\n    assert monomial_div((3, 4, 1), (1, 2, 2)) is None\n\ndef test_monomial_ldiv():\n    assert monomial_ldiv((3, 4, 1), (1, 2, 0)) == (2, 2, 1)\n    assert monomial_ldiv((3, 4, 1), (1, 2, 2)) == (2, 2, -1)\n\ndef test_monomial_pow():\n    assert monomial_pow((1, 2, 3), 2) == (2, 4, 6)\n\ndef test_monomial_gcd():\n    assert monomial_gcd((1, 4, 1), (3, 2, 0)) == (1, 2, 0)\n\ndef test_monomial_lcm():\n    assert monomial_lcm((1, 4, 1), (3, 2, 0)) == (3, 4, 1)\n\ndef test_monomial_divides():\n    assert monomial_divides((1, 2), (3, 4)) == True\n    assert monomial_divides((1, 2), (0, 2)) == False\n\ndef test_monomial_max():\n    assert monomial_max((3,4,5), (0,5,1), (6,3,9)) == (6, 5, 9)\n\ndef test_monomial_min():\n    assert monomial_min((3,4,5), (0,5,1), (6,3,9)) == (0, 3, 1)\n\ndef test_monomial_deg():\n    assert monomial_deg((1,2)) == 3\n\ndef test_Monomial():\n    a, b = symbols('a b', commutative=False)\n    m1 = Monomial((1, 2, 3), gens=[x, y, z])\n    m2 = Monomial([1, 2, 3], gens=[x, y, z])\n    m3 = Monomial((a, b))\n\n    assert m1 == m2\n\n    assert str(m1) == 'x**1*y**2*z**3'\n    assert m1.as_expr() == x*y**2*z**3\n\n    assert m1 * m2 == Monomial((2, 4, 6), gens=[x, y, z])\n    assert m1 / m2 == Monomial((0, 0, 0), gens=[x, y, z])\n    assert m1.gcd(m2) == Monomial((1, 2, 3), gens=[x, y, z])\n    assert m1.lcm(m2) == Monomial((1, 2, 3), gens=[x, y, z])\n    assert m3.as_expr() == a**1*b**1\n\n"], "sample_132": ["\nimport unittest\nfrom sympy import mathematica_code as mcode, symbols, sin, cos, exp, log, tan, cot, asin, acos, atan, sinh, cosh, tanh, coth, sech, csch, Max, Min, integrate, Sum, Derivative, oo, zoo\nfrom sympy.abc import x, y, z\n\nclass TestMCodePrinter(unittest.TestCase):\n\n    def test_basic_arithmetic(self):\n        self.assertEqual(mcode(x + 1), 'x + 1')\n        self.assertEqual(mcode(x - 1), 'x - 1')\n        self.assertEqual(mcode(x * 2), '2 x')\n        self.assertEqual(mcode(x / 2), 'x/2')\n        self.assertEqual(mcode(x**2), 'x^2')\n\n    def test_trig_functions(self):\n        self.assertEqual(mcode(sin(x)), \"Sin[x]\")\n        self.assertEqual(mcode(cos(x)), \"Cos[x]\")\n        self.assertEqual(mcode(tan(x)), \"Tan[x]\")\n        self.assertEqual(mcode(cot(x)), \"Cot[x]\")\n\n    def test_inverse_trig_functions(self):\n        self.assertEqual(mcode(asin(x)), \"ArcSin[x]\")\n        self.assertEqual(mcode(acos(x)), \"ArcCos[x]\")\n        self.assertEqual(mcode(atan(x)), \"ArcTan[x]\")\n        \n    def test_hyperbolic_functions(self):\n        self.assertEqual(mcode(sinh(x)), \"Sinh[x]\")\n        self.assertEqual(mcode(cosh(x)), \"Cosh[x]\")\n        self.assertEqual(mcode(tanh(x)), \"Tanh[x]\")\n        self.assertEqual(mcode(coth(x)), \"Coth[x]\")\n        self.assertEqual(mcode(sech(x)), \"Sech[x]\")\n        self.assertEqual(mcode(csch(x)), \"Csch[x]\")\n\n    def test_inverse_hyperbolic_functions(self):\n        self.assertEqual(mcode(asinh(x)), \"ArcSinh[x]\")\n        self.assertEqual(mcode(acosh(x)), \"ArcCosh[x]\")\n        self.assertEqual(mcode(atanh(x)), \"ArcTanh[x]\")\n        self.assertEqual(mcode(acoth(x)), \"ArcCoth[x]\")\n        self.assertEqual(mcode(asech(x)), \"ArcSech[x]\")\n        self.assertEqual(mcode(acsch(x)), \"ArcCsch[x]\")\n\n    def test_exponential_logarithmic_functions(self):\n        self.assertEqual(mcode(exp(x)), \"Exp[x]\")\n        self.assertEqual(mcode(log(x)), \"Log[x]\")\n\n    def test_max_min(self):\n        self.assertEqual(mcode(Max(x, 1)), \"Max[x, 1]\")\n        self.assertEqual(mcode(Min(x, 1)), \"Min[x, 1]\")\n\n    def test_constants(self):\n        self.assertEqual(mcode(oo), \"Infinity\")\n        self.assertEqual(mcode(zoo), \"-Infinity\")\n\n    def test_power(self):\n        self.assertEqual(mcode(x**2), \"x^2\")\n        self.assertEqual(mcode(x**(1/2)), \"x^(1/2)\")\n\n    def test_series(self):\n        self.assertEqual(mcode(sin(x).series(x).removeO()), \"'(1/120)*x^5 - 1/6*x^3 + x'\")\n\n    def test_integral(self):\n        self.assertEqual(mcode(integrate(x**2, x)), \"Hold[Integrate[x^2, {x}]]\")\n\n    def test_sum(self):\n        self.assertEqual(mcode(Sum(x**n, (n, 1, 5))), \"Hold[Sum[x^n, {n, 1, 5}]]\")\n\n    def test_derivative(self):\n        self.assertEqual(mcode(Derivative(sin(x),x)), \"Hold[D[Sin[x], x]]\")\n\n    def test_multivariable_functions(self):\n        self.assertEqual(mcode(sin(x) + cos(y)), \"Sin[x] + Cos[y]\")\n\n    def test_complex_expressions(self):\n        self.assertEqual(mcode((x + y)**2 * sin(z)), \"(x + y)^2*Sin[z]\")\n\n    def test_user_defined_functions(self):\n        def my_func(x):\n            return x**2 + 1\n        mcode_printer = MCodePrinter({'user_functions': {'my_func': my_func}})\n        self.assertEqual(mcode_printer.doprint(my_func(x)), \"my_func[x]\")\n\n        \n"], "sample_90": ["\nfrom _pytest.main import _in_venv\nfrom _pytest.main import ExitCode\nfrom _pytest.main import Session\nfrom _pytest.main import pytest_addoption\nfrom _pytest.main import pytest_cmdline_main\nfrom _pytest.main import pytest_collection\nfrom _pytest.main import pytest_runtestloop\nfrom _pytest.main import pytest_ignore_collect\nfrom _pytest.main import pytest_collection_modifyitems\nfrom _pytest.main import FSHookProxy\nfrom _pytest.main import NoMatch\nfrom _pytest.main import Interrupted\nfrom _pytest.main import Failed\nfrom _pytest.main import _bestrelpath_cache\nfrom _pytest.main import _parsearg\n\nfrom _pytest.nodes import Collector, Item\nimport os\nimport py\nimport pytest\nfrom typing import List, Optional, Tuple\n\ndef test_in_venv():\n    assert _in_venv(py.path.local('venv')) == True\n    assert _in_venv(py.path.local('.')) == False\n\ndef test_pytest_addoption(monkeypatch):\n    config = object()\n    parser = object()\n    monkeypatch.setattr(config, \"invocation_dir\", py.path.local('.'))\n    pytest_addoption(parser)\n\ndef test_pytest_cmdline_main():\n    config = object()\n    session = object()\n    def mock_wrap_session(*args, **kwargs) -> ExitCode:\n        return ExitCode.OK\n\n    with pytest.monkeypatch.context() as monkeypatch:\n        monkeypatch.setattr(_pytest.main, \"wrap_session\", mock_wrap_session)\n        pytest_cmdline_main(config)\n\ndef test_pytest_collection():\n    session = Session(object())\n    pytest_collection(session)\n\ndef test_pytest_runtestloop():\n    session = Session(object())\n    pytest_runtestloop(session)\n\ndef test_pytest_ignore_collect():\n    config = object()\n    path = py.path.local('.')\n    pytest_ignore_collect(path, config)\n\ndef test_pytest_collection_modifyitems():\n    items = []\n    config = object()\n    pytest_collection_modifyitems(items, config)\n\ndef test_FSHookProxy():\n    fspath = py.path.local('.')\n    pm = object()\n    remove_mods = set()\n    proxy = FSHookProxy(fspath, pm, remove_mods)\n\ndef test_NoMatch():\n    with pytest.raises(NoMatch):\n        raise NoMatch\n\ndef test_Interrupted():\n    with pytest.raises(Interrupted):\n        raise Interrupted\n\ndef test_Failed():\n    with pytest.raises(Failed):\n        raise Failed\n\ndef test__bestrelpath_cache():\n    from _pytest.main import _bestrelpath_cache\n    cache = _bestrelpath_cache(py.path.local('.'))\n    cache['a/b/c']\n\ndef test__parsearg():\n\n    _parsearg(\"file.py\")\n    _parsearg(\"package.module::function\")\n\ndef test_Session_isinitpath():\n    session = Session(object())\n    session._initialpaths = frozenset(['a', 'b'])\n    assert session.isinitpath('a') == True\n    assert session.isinitpath('c') == False\n"], "sample_6": ["\nimport unittest\n\nfrom django.db import models\nfrom django.db.migrations.operations import (\n    AddField,\n    AlterField,\n    CreateModel,\n    DeleteModel,\n    RenameModel,\n    RemoveField,\n)\nfrom django.db.migrations.autodetector import MigrationAutodetector\n\nclass AutodetectorTests(unittest.TestCase):\n\n    def test_no_changes(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app_label': {\n                    'models': {\n                        'Model': models.Model\n                    }\n                }\n            }\n        )\n        changes = autodetector.changes(None, {})\n        self.assertEqual(changes, {})\n\n    def test_create_model(self):\n        autodetector = MigrationAutodetector(\n            None,\n            {\n                'app_label': {}\n            }\n        )\n        autodetector.add_model('app_label', 'Model', models.Model)\n        changes = autodetector.changes(None, {})\n        self.assertEqual(len(changes['app_label']), 1)\n        self.assertIsInstance(changes['app_label'][0].operations[0], CreateModel)\n\n    def test_delete_model(self):\n        autodetector = MigrationAutodetector(\n            {\n                'app_label': {\n                    'models': {\n                        'Model': models.Model\n                    }\n                }\n            },\n            {},\n        )\n        autodetector.remove_model('app_label', 'Model')\n        changes = autodetector.changes(None, {})\n        self.assertEqual(len(changes['app_label']), 1)\n        self.assertIsInstance(changes['app_label'][0].operations[0], DeleteModel)\n    \n    def test_rename_model(self):\n        autodetector = MigrationAutodetector(\n            {\n                'app_label': {\n                    'models': {\n                        'OldModel': models.Model\n                    }\n                }\n            },\n            {},\n        )\n        autodetector.rename_model('app_label', 'OldModel', 'NewModel')\n        changes = autodetector.changes(None, {})\n        self.assertEqual(len(changes['app_label']), 1)\n        self.assertIsInstance(changes['app_label'][0].operations[0], RenameModel)\n        \n    def test_add_field(self):\n        autodetector = MigrationAutodetector(\n            {\n                'app_label': {\n                    'models': {\n                        'Model': models.Model\n                    }\n                }\n            },\n            {},\n        )\n        autodetector.add_field('app_label', 'Model', 'new_field', models.CharField())\n        changes = autodetector.changes(None, {})\n        self.assertEqual(len(changes['app_label']), 1)\n        self.assertIsInstance(changes['app_label'][0].operations[0], AddField)\n\n    def test_remove_field(self):\n        autodetector = MigrationAutodetector(\n            {\n                'app_label': {\n                    'models': {\n                        'Model': type('Model', (models.Model,), {'field': models.CharField()})\n                    }\n                }\n            },\n            {},\n        )\n        autodetector.remove_field('app_label', 'Model', 'field')\n        changes = autodetector.changes(None, {})\n        self.assertEqual(len(changes['app_label']), 1)\n        self.assertIsInstance(changes['app_label'][0].operations[0], RemoveField)\n\n    def test_alter_field(self):\n        autodetector = MigrationAutodetector(\n            {\n                'app_label': {\n                    'models': {\n                        'Model': type('Model', (models.Model,), {'field': models.CharField()})\n                    }\n                }\n            },\n            {},\n        )\n        autodetector.alter_field('app_label', 'Model', 'field', models.TextField())\n        changes = autodetector.changes(None, {})\n        self.assertEqual(len(changes['app_label']), 1)\n        self.assertIsInstance(changes['app_label'][0].operations[0], Self.assertEqual(len(changes['app_label']), 1)\n        self.assertIsInstance(changes['app_label'][0].operations[0], AlterField)\n\n    def test_multiple_changes(self):\n        autodetector = MigrationAutodetector(\n            {\n                'app_label': {\n                    'models': {}\n                }\n            },\n            {},\n        )\n        autodetector.add_model('app_label', 'Model', models.Model)\n        autodetector.add_field('app_label', 'Model', 'new_field', models.CharField())\n        changes = autodetector.changes(None, {})\n        self.assertEqual(len(changes['app_label']), 2)\n        self.assertIsInstance(changes['app_label'][0].operations[0], CreateModel)\n        self.assertIsInstance(changes['app_label'][1].operations[0], AddField)\n\n"], "sample_55": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nfrom django.db.backends.postgresql.client import DatabaseClient\nfrom django.conf import settings\n\nsettings.configure()\n\n\nclass DatabaseClientTests(unittest.TestCase):\n\n    def test_settings_to_cmd_args_env_defaults(self):\n        client = DatabaseClient()\n        settings_dict = {}\n        parameters = []\n\n        args, env = client.settings_to_cmd_args_env(settings_dict, parameters)\n\n        self.assertEqual(args, ['psql', 'postgres'])\n        self.assertEqual(env, None)\n\n    def test_settings_to_cmd_args_env_all_options(self):\n        client = DatabaseClient()\n        settings_dict = {\n            \"HOST\": \"localhost\",\n            \"PORT\": 5432,\n            \"NAME\": \"mydatabase\",\n            \"USER\": \"myuser\",\n            \"PASSWORD\": \"mypassword\",\n            \"OPTIONS\": {\n                \"passfile\": \"/path/to/passfile\",\n                \"service\": \"myservice\",\n                \"sslmode\": \"require\",\n                \"sslrootcert\": \"/path/to/sslrootcert\",\n                \"sslcert\": \"/path/to/sslcert\",\n                \"sslkey\": \"/path/to/sslkey\",\n            }\n        }\n        parameters = [\"-c\", \"SELECT * FROM mytable\"]\n\n        args, env = client.settings_to_cmd_args_env(settings_dict, parameters)\n\n        expected_args = ['psql', '-U', 'myuser', '-h', 'localhost', '-p', '5432',\n                         '-c', 'SELECT * FROM mytable', 'mydatabase']\n        expected_env = {\n            \"PGPASSWORD\": \"mypassword\",\n            \"PGSERVICE\": \"myservice\",\n            \"PGSSLMODE\": \"require\",\n            \"PGSSLROOTCERT\": \"/path/to/sslrootcert\",\n            \"PGSSLCERT\": \"/path/to/sslcert\",\n            \"PGSSLKEY\": \"/path/to/sslkey\",\n            \"PGPASSFILE\": \"/path/to/passfile\",\n        }\n        self.assertEqual(args, expected_args)\n        self.assertEqual(env, expected_env)\n\n    @patch('django.db.backends.postgresql.client.super')\n    def test_runshell_calls_super_and_ignores_sigint(self, mock_super):\n        client = DatabaseClient()\n        mock_super.runshell.return_value = None\n\n        with patch.object(signal, 'getsignal', return_value=MagicMock()) as mock_getsignal:\n            client.runshell([\"some\", \"parameters\"])\n\n        mock_super.runshell.assert_called_once_with([\"some\", \"parameters\"])\n        mock_getsignal.assert_called_once_with(signal.SIGINT)\n\n\n\n"], "sample_93": ["\nimport sys\n\nfrom _pytest.python import (\n    FixtureInfo,\n    Function,\n    CallSpec2,\n    _idval,\n    _idvalset,\n    idmaker,\n    get_best_relpath\n)\nfrom _pytest.config import Config\nfrom _pytest.nodes import Item\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.mark import Mark, MarkDecorator\n\n\ndef test_Function_init_and_properties():\n    config = Config()\n    callspec = CallSpec2(config)\n    function = Function(\"test_func\", parent=Item(\"parent\"), config=config,\n                        callspec=callspec)\n    assert function.name == \"test_func\"\n    assert function.originalname == \"test_func\"\n    assert function.parent is not None\n    assert function.config is config\n    assert function.callspec is callspec\n    assert function.keywords == {}\n    assert function.own_markers == []\n    assert function._fixtureinfo is not None\n    assert function.fixturenames == []\n\n\n\ndef test_Function_repr_failure():\n    config = Config()\n    callspec = CallSpec2(config)\n    function = Function(\"test_func\", parent=Item(\"parent\"), config=config,\n                        callspec=callspec)\n    excinfo = ExceptionInfo()\n    function._repr_failure_py(excinfo)\n\ndef test_showfixtures_main():\n    session = object()\n    config = Config()\n\n    _showfixtures_main(config, session)\n\ndef test_show_fixtures_per_test():\n    session = object()\n    config = Config()\n    \n    _show_fixtures_per_test(config, session)\n\ndef test_idmaker():\n    argnames = ['a', 'b']\n    parametersets = [\n        {'a': 1, 'b': 2},\n        {'a': 3, 'b': 4}\n    ]\n    ids = ['id1', 'id2']\n    resolved_ids = idmaker(argnames, parametersets, ids=ids)\n    assert resolved_ids == ['id1', 'id2']\n\ndef test__idval():\n    val = 'test'\n    argname = 'arg'\n    idx = 0\n    idfn = None\n    nodeid = None\n    config = None\n    \n    result = _idval(val, argname, idx, idfn, nodeid, config)\n    assert result == 'test'\n\n    val = 123\n    result = _idval(val, argname, idx, idfn, nodeid, config)\n    assert result == '123'\n\ndef test__idvalset():\n    idx = 0\n    parameterset = {'a': 1, 'b': 2}\n    argnames = ['a', 'b']\n    idfn = None\n    ids = ['id1', 'id2']\n    nodeid = None\n    config = None\n    \n    result = _idvalset(idx, parameterset, argnames, idfn, ids, nodeid, config)\n    assert result == '1-2'\n\n\n\ndef test_FixtureInfo():\n    fixtureinfo = FixtureInfo()\n    fixtureinfo.name2fixturedefs = {}\n\ndef test_CallSpec2():\n    callspec = CallSpec2(Config())\n    callspec.marks = []\n\ndef test_Mark():\n    mark = Mark('mark')\n    mark.name = 'mark'\n\ndef test_MarkDecorator():\n    mark_decorator = MarkDecorator('mark')\n    mark_decorator.mark = Mark('mark')\n\ndef mock_function():\n    pass\n\ndef test_Function_callspec():\n    config = Config()\n    callspec = CallSpec2(config)\n    callspec.marks = []\n    function = Function(mock_function.__name__, parent=Item(\"parent\"), config=config, callspec=callspec)\n    assert function.callspec is callspec\n    assert function.own_markers == []\n\n\n\ndef test_Function_setup():\n    config = Config()\n    callspec = CallSpec2(Config())\n    function = Function(\"test_func\", parent=Item(\"parent\"), config=config,\n                        callspec=callspec)\n    function.setup()\n    assert function._request is not None\n\n\n\ndef test_get_best_relpath():\n    curdir = '/home/user/project'\n    funcpath = '/home/user/project/test_file.py'\n    result = get_best_relpath(curdir, funcpath)\n    assert result == 'test_file.py'\n\n\ndef test_FunctionDefinition():\n    config = Config()\n    callspec = CallSpec2(config)\n    function = FunctionDefinition(\"test_func\", parent=Item(\"parent\"), config=config,\n                        callspec=callspec)\n    function.runtest()\n    \n\n"], "sample_133": ["\nimport unittest\nfrom sympy.utilities.codegen import (codegen, make_routine, CCodeGen, C89CodeGen,\n                                    C99CodeGen, InputArgument, CodeGenError,\n                                    FCodeGen, CodeGenArgumentListError,\n                                    OutputArgument, InOutArgument, JuliaCodeGen,\n                                    OctaveCodeGen, RustCodeGen)\nfrom sympy.abc import x, y, z, f, g\nfrom sympy import Eq, Matrix\n\nclass TestCodegen(unittest.TestCase):\n\n    def test_codegen_basic(self):\n        code = codegen((\"f\", x + y), \"C\", \"test\")\n        self.assertIn(\"#include \\\"test.h\\\"\", code[1])\n        self.assertIn(\"double f(double x, double y) {\", code[1])\n\n    def test_codegen_multiple_outputs(self):\n        code = codegen([(\"f\", [Eq(f, 2*x), Eq(g, x + y)])], \"C\", \"test\")\n        self.assertIn(\"void f(double x, double y, double *f, double *g) {\", code[1])\n\n    def test_codegen_f95(self):\n        code = codegen((\"f\", x + y), \"F95\", \"test\")\n        self.assertIn(\"REAL*8 function f(x, y)\", code[1])\n\n    def test_codegen_argument_sequence(self):\n        code = codegen((\"f\", x + y), \"C\", \"test\", argument_sequence=(y, x))\n        self.assertIn(\"double f(double y, double x) {\", code[1])\n\n    def test_codegen_global_vars(self):\n        code = codegen((\"f\", x + y), \"C\", \"test\", global_vars=(z,))\n        self.assertIn(\"double f(double x, double y) {\", code[1])\n\n    def test_make_routine(self):\n        r = make_routine('test', x + y)\n        self.assertEqual(r.name, 'test')\n        self.assertEqual(len(r.results), 1)\n        self.assertEqual(r.results[0].expr, x + y)\n        \n    def test_make_routine_outputs(self):\n        r = make_routine('fcn', [Eq(f, 2*x), Eq(g, x + y)])\n        self.assertEqual(len(r.arguments), 4)\n        self.assertEqual(len(r.results), 0)\n        self.assertEqual(len(r.result_variables), 2)\n\n    def test_codegen_julia(self):\n        code = codegen((\"f\", x + y), \"JULIA\", \"test\")\n        self.assertIn(\"function f(x, y)\", code[1])\n\n    def test_codegen_octave(self):\n        code = codegen((\"f\", x + y), \"OCTAVE\", \"test\")\n        self.assertIn(\"function f = f(x, y)\", code[1])\n\n    def test_codegen_rust(self):\n        code = codegen((\"f\", x + y), \"RUST\", \"test\")\n        self.assertIn(\"fn f(x: f64, y: f64) -> f64 {\", code[1])\n\n    def test_make_routine_matrix(self):\n        r = make_routine('fcn', Matrix([[x, 2]]))\n        self.assertEqual(len(r.results), 1)\n        self.assertEqual(r.results[0].expr, Matrix([[x, 2]]))\n\n    def test_codegen_error(self):\n        with self.assertRaises(CodeGenError):\n            codegen((\"f\", x + y), \"INVALID_LANGUAGE\", \"test\")\n\n    def test_codegen_argument_list_error(self):\n        with self.assertRaises(CodeGenArgumentListError):\n            codegen((\"f\", x + y), \"C\", \"test\", argument_sequence=(\"z\",))\n\n"], "sample_21": ["\nimport unittest\nfrom unittest.mock import patch\n\nfrom django.utils import text\nfrom django.utils.text import (\n    capfirst, compress_sequence, compress_string, format_lazy, get_text_list,\n    get_valid_filename, normalize_newlines, phone2numeric, slugify,\n    smart_split, unescape_entities, unescape_string_literal,\n    wrap, Truncator, camel_case_to_spaces,\n)\nfrom django.utils.translation import gettext_lazy as _, override\n\n\nclass TextUtilsTests(unittest.TestCase):\n    def test_capfirst(self):\n        self.assertEqual(text.capfirst(\"hello world\"), \"Hello world\")\n        self.assertEqual(text.capfirst(\"HELLO world\"), \"HELLO world\")\n        self.assertEqual(text.capfirst(\"\"), \"\")\n\n    def test_wrap(self):\n        self.assertEqual(text.wrap(\"This is a long sentence.\", 10),\n                         \"This is a\\nlong\"\n                         \" sentence.\")\n        self.assertEqual(text.wrap(\"Short.\", 10), \"Short.\")\n        self.assertEqual(text.wrap(\"This is a sentence with newline.\\nThis is the second line.\", 20),\n                         \"This is a sentence with\\nnewline. This is the second line.\")\n\n    def test_truncator(self):\n        truncator = text.Truncator(\"This is a test.\")\n\n        self.assertEqual(truncator.chars(5), \"This...\")\n        self.assertEqual(truncator.chars(10), \"This is a...\")\n        self.assertEqual(truncator.chars(15), \"This is a test.\")\n        self.assertEqual(truncator.chars(15, truncate='... (more)'),\n                         \"This is a test... (more)\")\n        self.assertEqual(truncator.chars(0), \"\")\n\n        truncator = text.Truncator(\"This is a test.\")\n\n        self.assertEqual(truncator.words(2), \"This is...\")\n        self.assertEqual(truncator.words(3), \"This is a...\")\n        self.assertEqual(truncator.words(4), \"This is a test.\")\n        self.assertEqual(truncator.words(4, truncate='... (more)'),\n                         \"This is a test.\")\n        self.assertEqual(truncator.words(0), \"\")\n\n        html = \"<p>This is <strong>a</strong> test.</p>\"\n        truncator = text.Truncator(html)\n\n        self.assertEqual(truncator.chars(10, html=True), '<p>This is ...</p>')\n        self.assertEqual(truncator.chars(20, html=True), '<p>This is a <strong>a</strong> test.</p>')\n        self.assertEqual(truncator.words(2, html=True), '<p>This is...</p>')\n        self.assertEqual(truncator.words(4, html=True), html)\n\n    def test_get_valid_filename(self):\n        self.assertEqual(text.get_valid_filename(\"john's portrait in 2004.jpg\"),\n                         \"johns_portrait_in_2004.jpg\")\n        self.assertEqual(text.get_valid_filename(\"a file name.txt\"),\n                         \"a_file_name.txt\")\n        self.assertEqual(text.get_valid_filename(\"invalid!!!$$$.$$$\"),\n                         \"invalid.$$$\")\n\n    def test_get_text_list(self):\n        self.assertEqual(text.get_text_list(['a', 'b', 'c', 'd']),\n                         \"a, b, c or d\")\n        self.assertEqual(text.get_text_list(['a', 'b', 'c'], 'and'),\n                         \"a, b and c\")\n        self.assertEqual(text.get_text_list(['a', 'b'], 'and'),\n                         \"a and b\")\n        self.assertEqual(text.get_text_list(['a']), \"a\")\n        self.assertEqual(text.get_text_list([]), \"\")\n\n    def test_normalize_newlines(self):\n        self.assertEqual(text.normalize_newlines(\"Hello\\r\\nWorld\"),\n                         \"Hello\\nWorld\")\n        self.assertEqual(text.normalize_newlines(\"Hello\\rWorld\"),\n                         \"Hello\\nWorld\")\n\n    def test_phone2numeric(self):\n        self.assertEqual(text.phone2numeric(\"555-GET-FOOD\"), \"555-438-3663\")\n        self.assertEqual(text.phone2numeric(\"1-800-FLOWERS\"), \"1-800-3569377\")\n        self.assertEqual(text.phone2numeric(\"(555) 123-4567\"), \"5551234567\")\n\n    def test_compress_string(self):\n        compressed = text.compress_string(\"This is a test.\")\n        self.assertIsInstance(compressed, bytes)\n        self.assertNotEqual(len(compressed), len(\"This is a test.\"))  # It should be smaller\n\n    @patch('django.utils.text.GzipFile')\n    def test_compress_sequence(self, mock_GzipFile):\n\n        class MockFile:\n            def write(self, data):\n                self.data = data\n\n        mock_GzipFile.return_value = MockFile()\n        sequence = [\"This \", \"is \", \"a \", \"test.\"]\n        for chunk in text.compress_sequence(sequence):\n\n            mock_GzipFile.assert_called_with(mode='wb', compresslevel=6, fileobj=mock_GzipFile.return_value, mtime=0)\n\n    def test_smart_split(self):\n        self.assertEqual(\n            list(text.smart_split(r'This is \"a person\\'s\" test.')),\n            ['This', 'is', '\"a person\\\\\\'s\"', 'test.']\n        )\n        self.assertEqual(\n            list(text.smart_split(r\"Another 'person\\'s' test.\")),\n            ['Another', \"'person\\\\'s'\", 'test.']\n        )\n        self.assertEqual(\n            list(text.smart_split(r'A \"\\\"funky\\\" style\" test.')),\n            ['A', '\"\\\\\"funky\\\\\" style\"', 'test.']\n        )\n\n    def test_unescape_entities(self):\n        with warnings.catch_warnings(record=True) as w:\n            text.unescape_entities(\"Hello &amp; world!\")\n        self.assertEqual(len(w), 1)\n        self.assertEqual(str(w[0].message), 'django.utils.text.unescape_entities() is deprecated in favor of html.unescape().')\n\n    def test_unescape_string_literal(self):\n        self.assertEqual(text.unescape_string_literal('\"abc\"'), 'abc')\n        self.assertEqual(text.unescape_string_literal(\"'abc'\"), 'abc')\n        self.assertEqual(text.unescape_string_literal('\"a \\\"bc\\\"\"'), 'a \"bc\"')\n        self.assertEqual(text.unescape_string_literal(\"'\\'ab\\' c'\"), \"'ab' c\")\n\n    def test_slugify(self):\n        self.assertEqual(text.slugify(\"This is a test.\"), \"this-is-a-test\")\n        self.assertEqual(text.slugify(\"This is a test.\", allow_unicode=True), \"this-is-a-test\")\n        self.assertEqual(text.slugify(\"This is a test with spaces and --- dashes.\"), \"this-is-a-test-with-spaces-and-dashes\")\n\n    def test_camel_case_to_spaces(self):\n        self.assertEqual(text.camel_case_to_spaces(\"ThisIsATest\"), \"this is a test\")\n        self.assertEqual(text.camel_case_to_spaces(\"thisIsAlreadyFine\"), \"this is already fine\")\n\n\n\n"], "sample_127": ["\nimport unittest\nfrom sympy.core.symbol import symbols\nfrom sympy.functions.elementary.miscellaneous import sqrt\nfrom sympy.functions.elementary.exponential import exp\nfrom sympy.functions.elementary.trigonometric import sin, asin\nfrom sympy.functions.elementary.hyperbolic import cosh\nfrom sympy.functions.special.gamma_functions import gamma\nfrom sympy.integrals.integrals import Integral\nfrom sympy.matrices import Matrix\nfrom sympy.printing.latex import (\n    latex, translate, greek_letters_set, tex_greek_dictionary, modifier_dict,\n    LatexPrinter, other_symbols\n)\nfrom sympy import pi, I, oo, Rational, S\nfrom sympy.abc import x, y, mu, r, tau\nfrom sympy.physics.units import meter\n\nclass TestLatex(unittest.TestCase):\n\n    def test_latex_basic(self):\n        self.assertEqual(latex(x + y), 'x + y')\n        self.assertEqual(latex(x*y), 'x y')\n\n    def test_latex_power(self):\n        self.assertEqual(latex(x**2), 'x^{2}')\n        self.assertEqual(latex(x**-2), 'x^{-2}')\n        self.assertEqual(latex(x**(1/2)), 'x^{\\frac{1}{2}}')\n        self.assertEqual(latex(x**(Rational(1,2))), 'x^{\\frac{1}{2}}')\n        self.assertEqual(latex(x**(Rational(-1,2))), 'x^{- \\frac{1}{2}}')\n\n    def test_latex_trig(self):\n        self.assertEqual(latex(sin(x)), '\\\\sin{x}')\n        self.assertEqual(latex(asin(x)), '\\\\operatorname{asin}{x}')\n        self.assertEqual(latex(cosh(x)), '\\\\cosh{x}')\n\n    def test_latex_functions(self):\n        self.assertEqual(latex(sqrt(x)), '\\\\sqrt{x}')\n        self.assertEqual(latex(exp(x)), '\\\\exp{x}')\n        self.assertEqual(latex(gamma(x)), '\\\\Gamma{x}')\n\n    def test_latex_constants(self):\n        self.assertEqual(latex(pi), '\\\\pi')\n        self.assertEqual(latex(I), 'i')\n        self.assertEqual(latex(oo), '\\\\infty')\n\n    def test_latex_complex(self):\n        self.assertEqual(latex(2 + 3*I), '2 + 3 i')\n\n    def test_latex_rational(self):\n        self.assertEqual(latex(Rational(1,2)), '\\\\frac{1}{2}')\n\n    def test_latex_integral(self):\n        self.assertEqual(latex(Integral(x, x)), '\\\\int x \\, dx')\n\n    def test_latex_matrix(self):\n        M = Matrix([[1, 2], [3, 4]])\n        self.assertEqual(latex(M), '\\\\begin{bmatrix}1 & 2 \\\\\\\\ 3 & 4 \\\\end{bmatrix}')\n\n    def test_latex_mode(self):\n        self.assertEqual(latex(x + y, mode='inline'), '$x + y$')\n\n    def test_latex_symbol_names(self):\n        self.assertEqual(latex(x, symbol_names={x:'x_i'}), 'x_i')\n\n\n    def test_latex_greek_letters(self):\n        for letter in greek_letters_set:\n            self.assertEqual(latex(letter), '\\\\' + letter)\n            self.assertEqual(translate(letter), '\\\\' + letter)\n            \n    def test_latex_modifiers(self):\n        self.assertEqual(latex(x.hat), '\\\\hat{x}')\n        self.assertEqual(latex(x.dot), '\\\\dot{x}')\n        self.assertEqual(latex((x.hat).dot), '\\\\dot{\\\\hat{x}}')\n        self.assertEqual(latex(x.hat.dot.prime), '\\\\dot{\\\\hat{x}}^{\\prime}')\n\n\n    def test_latex_translate(self):\n        self.assertEqual(translate(\"alphahatdotprime\"), \"{\\\\dot{\\\\hat{\\\\alpha}}}'\")\n\n    def test_latex_other_symbols(self):\n        for symbol in other_symbols:\n            self.assertEqual(latex(symbol), '\\\\' + symbol)\n            \n\nif __name__ == '__main__':\n    unittest.main()\n\n"], "sample_91": ["\nimport os\nfrom io import StringIO\nfrom unittest import mock\nfrom unittest.mock import patch\n\nimport pytest\n\nfrom pylint.reporters.text import (\n    ANSI_COLORS,\n    ANSI_END,\n    ANSI_PREFIX,\n    ANSI_STYLES,\n    ColorMappingDict,\n    ColorizedTextReporter,\n    MessageStyle,\n    ParseableTextReporter,\n    TextReporter,\n    TITLE_UNDERLINES,\n    VSTextReporter,\n    _colorize_ansi,\n    _get_ansi_code,\n)\nfrom pylint.message import Message\nfrom pylint.lint import PyLinter\n\n\n@pytest.fixture\ndef reporter(request):\n    if request.param == \"text\":\n        return TextReporter()\n    elif request.param == \"parseable\":\n        return ParseableTextReporter()\n    elif request.param == \"msvs\":\n        return VSTextReporter()\n    elif request.param == \"colorized\":\n        return ColorizedTextReporter()\n    else:\n        raise ValueError(f\"Unknown reporter type: {request.param}\")\n\n\n@pytest.mark.parametrize(\"reporter\", [\"text\", \"parseable\", \"msvs\", \"colorized\"])\ndef test_reporter_init(reporter):\n    # Test the initialization of different reporter types\n    assert isinstance(reporter(), type(eval(reporter.capitalize() + \"Reporter\")))\n\n@pytest.mark.parametrize(\"reporter\", [\"text\", \"parseable\", \"msvs\"])\ndef test_handle_message(reporter, monkeypatch):\n    # Test message handling for basic reporters\n    msg = Message(\"test-module\", 1, 1, \"C0001\", \"Test message\", \"test-category\")\n    rep = reporter()\n    with patch(\"builtins.print\") as mock_print:\n        rep.handle_message(msg)\n        mock_print.assert_called_once()\n\n@pytest.mark.parametrize(\n    \"reporter_type, expected_string\",\n     [\n       (\"text\", \"test-module:1:1: C0001: Test message (test-category)\"),\n        (\"parseable\", \"test-module:1: [C0001(test-category), test-category] Test message\"),\n        (\"msvs\", \"test-module(1): [C0001(test-category), test-category] Test message\"),\n     ]\n)\ndef test_reporter_string_format(reporter_type, expected_string):\n    # Test the formatting of the output string based on reporter type\n    msg = Message(\"test-module\", 1, 1, \"C0001\", \"Test message\", \"test-category\")\n    rep = eval(reporter_type.capitalize() + \"Reporter\")()\n    with patch(\"builtins.print\") as mock_print:\n        rep.handle_message(msg)\n        mock_print.assert_called_once_with(expected_string)\n\ndef test_colorized_reporter_init():\n\n    # Test initialization of ColorizedTextReporter with custom color mapping\n\n    custom_color_mapping = {\"I\": MessageStyle(\"green\", (\"bold\",))}\n    reporter = ColorizedTextReporter(color_mapping=custom_color_mapping)\n    assert reporter.color_mapping == custom_color_mapping\n\n\n\ndef test_colorized_reporter_handle_message():\n    # Test colorization of messages in ColorizedTextReporter\n\n    msg = Message(\"test-module\", 1, 1, \"C0001\", \"Test message\", \"test-category\")\n    reporter = ColorizedTextReporter()\n\n    with patch(\"builtins.print\") as mock_print:\n        reporter.handle_message(msg)\n        mock_print.assert_called_once()\n        # Check if the output string contains ANSI escape codes\n        assert ANSI_PREFIX in mock_print.call_args.args[0]\n        assert ANSI_END in mock_print.call_args.args[0]\n\ndef test_colorize_ansi(capsys):\n    # Test colorize_ansi function with different parameters\n    # Test with MessageStyle object\n    msg_style = MessageStyle(\"red\", (\"bold\",))\n    assert colorize_ansi(\"Test message\", msg_style) == f\"{ANSI_PREFIX}1;31mTest message{ANSI_END}\"\n\n    # Test with deprecated color and style arguments\n    assert colorize_ansi(\"Test message\", color=\"red\", style=\"bold\") == f\"{ANSI_PREFIX}1;31mTest message{ANSI_END}\"\n\n    # Test with no color or style\n    assert colorize_ansi(\"Test message\") == \"Test message\"\n\ndef test_get_ansi_code():\n    # Test _get_ansi_code function\n    assert _get_ansi_code(MessageStyle(\"red\")) == f\"{ANSI_PREFIX}31m{ANSI_END}\"\n    assert _get_ansi_code(MessageStyle(\"red\", (\"bold\",))) == f\"{ANSI_PREFIX}1;31m{ANSI_END}\"\n\n@pytest.mark.parametrize(\"color_name\", list(ANSI_COLORS.keys()))\ndef test_ansi_color_codes(color_name):\n    # Test that all ANSI color codes are valid\n    assert _get_ansi_code(MessageStyle(color_name)) == f\"{ANSI_PREFIX}{ANSI_COLORS[color_name]}m{ANSI_END}\"\n@pytest.mark.parametrize(\"style_name\", list(ANSI_STYLES.keys()))\ndef test_ansi_style_codes(style_name):\n    # Test that all ANSI style codes are valid\n    assert _get_ansi_code(MessageStyle(None, (style_name,))) == f\"{ANSI_PREFIX}{ANSI_STYLES[style_name]}m{ANSI_END}\"\n\ndef test_register(monkeypatch):\n    linter = mock.Mock(spec=PyLinter)\n    register(linter)\n    linter.register_reporter.assert_has_calls(\n        [\n            mock.call(TextReporter),\n            mock.call(ParseableTextReporter),\n            mock.call(VSTextReporter),\n            mock.call(ColorizedTextReporter),\n        ]\n    )\n\n\n\n"], "sample_120": ["\nimport pytest\n\nfrom sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\nfrom sympy.matrices import MutableSparseMatrix, MutableDenseMatrix\nfrom sympy.matrices.sparse import SparseMatrix\nfrom sympy.core.numbers importRational, Integer\nfrom sympy.abc import x, y, z\nfrom sympy import Eq\n\ndef test_SparseMatrix_creation():\n    assert SparseMatrix([[1, 0, 0], [0, 0, 1], [0, 1, 0]]) == SparseMatrix.eye(3)\n    assert SparseMatrix(3, 3, {}) == zeros(3)\n    assert SparseMatrix(range(9), (3, 3)) == Matrix(range(9), (3, 3))\n\ndef test_SparseMatrix_properties():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    assert A.rows == 2\n    assert A.cols == 2\n    assert A.shape == (2, 2)\n    assert A.is_square\n\ndef test_SparseMatrix_arithmetic():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    B = SparseMatrix([[5, 6], [7, 8]])\n    assert A + B == Matrix([[6, 8], [10, 12]])\n    assert A - B == Matrix([[-4, -4], [-4, -4]])\n    assert A * B == Matrix([[19, 22], [43, 50]])\n    assert 2 * A == Matrix([[2, 4], [6, 8]])\n\ndef test_SparseMatrix_scalar_operations():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    assert 2 * A == Matrix([[2, 4], [6, 8]])\n    assert A / 2 == Matrix([[0.5, 1], [1.5, 2]])\n\ndef test_SparseMatrix_transpose():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    assert A.T == SparseMatrix([[1, 3], [2, 4]])\n\ndef test_SparseMatrix_inverse():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    assert A.inv() == Matrix([[-2, 1], [1.5, -0.5]])\n\ndef test_SparseMatrix_determinant():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    assert A.det() == -2\n\ndef test_SparseMatrix_row_operations():\n    A = SparseMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    A.row_op(0, lambda v, j: v + 2 * A[1, j])  \n    assert A == SparseMatrix([[9, 12, 15], [4, 5, 6], [7, 8, 9]])\n\ndef test_SparseMatrix_col_operations():\n    A = SparseMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    A.col_op(1, lambda v, i: v * 2)\n    assert A == SparseMatrix([[1, 4, 3], [4, 10, 6], [7, 16, 9]])\n\ndef test_SparseMatrix_row_join():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    B = SparseMatrix([[5, 6], [7, 8]])\n    assert A.row_join(B) == SparseMatrix([[1, 2, 5, 6], [3, 4, 7, 8]])\n\ndef test_SparseMatrix_col_join():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    B = SparseMatrix([[5, 6], [7, 8]])\n    assert A.col_join(B) == SparseMatrix([[1, 2, 5, 6], [3, 4, 7, 8]])\n\n\n\ndef test_SparseMatrix_copyin():\n\n    A = SparseMatrix([[1, 2], [3, 4]])\n    A.copyin_list((0, 0), [5, 6])\n    assert A == SparseMatrix([[5, 6], [3, 4]])\n    A.copyin_matrix((1, 1), SparseMatrix([[7, 8], [9, 10]]))\n    assert A == SparseMatrix([[5, 6], [3, 7]])\n    \ndef test_SparseMatrix_delete_rows_cols():\n    A = SparseMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    A.row_del(1)\n    assert A == SparseMatrix([[1, 2, 3], [7, 8, 9]])\n    A.col_del(2)\n    assert A == SparseMatrix([[1, 2], [7, 8]])\n\ndef test_SparseMatrix_copy():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    B = A.copy()\n    assert A == B\n    \ndef test_SparseMatrix_solve():\n    A = SparseMatrix([[1, 2], [3, 4]])\n    b = Matrix([5, 11])\n    x = A.solve(b)\n    assert x == Matrix([1, 2])\n\ndef test_SparseMatrix_LDL():\n    A = SparseMatrix([[4, 12], [12, 37]])\n    L, D, P = A.LDLdecomposition()\n    assert L * D * L.T == A\n\ndef test_SparseMatrix_cholesky():\n    A = SparseMatrix([[25, 15, -5], [15, 18, 0], [-5, 0, 11]])\n    L = A.cholesky()\n    assert L * L.T == A\n\ndef test_SparseMatrix_liupc():\n    A = SparseMatrix([[1, 0, 3, 2],\n                     [0, 0, 1, 0],\n                     [4, 0, 0, 5],\n                     [0, 6, 7, 0]])\n    R, parent = A.liupc()\n    assert R == [[0], [], [0], [1, 2]]\n\ndef test_SparseMatrix_row_list():\n\n    A = SparseMatrix([[1, 0, 3],\n                     [0, 0, 1],\n                     [4, 0, 0]])\n    assert A.row_list() == [(0, 0, 1), (0, 2, 3), (1, 2, 1), (2, 0, 4)]\n\n\n\ndef test_SparseMatrix_solve_least_squares():\n    A = SparseMatrix([[1, 2], [2, 3], [3, 4]])\n    b = Matrix([8, 14, 18])\n    x = A.solve_least_squares(b)\n    assert x.n().evalf() == Matrix([5/3, 10/3])\n\ndef test_SparseMatrix_from_Matrix():\n\n    M = Matrix([[1, 2], [3, 4]])\n    S = SparseMatrix(M)\n\n    assert S.rows == M.rows\n    assert S.cols == M.cols\n\n    for i, j in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        assert S[i, j] == M[i, j]\n\n\n\n"], "sample_82": ["\nimport logging\nimport pytest\nimport sys\nfrom io import StringIO\nfrom contextlib import contextmanager\nfrom _pytest.logging import (\n    LogCaptureHandler,\n    LogCaptureFixture,\n    get_option_ini,\n    catching_logs,\n    LoggingPlugin,\n    ColoredLevelFormatter,\n    _LiveLoggingStreamHandler,\n)\nfrom _pytest.config import Config\n\n# Example test case structure\n@pytest.fixture\ndef caplog(request):\n    return LogCaptureFixture(request.node)\n\ndef test_logcapture_handler_basic(caplog):\n    log = logging.getLogger(__name__)\n    log.info(\"Test message\")\n    assert caplog.text == \"INFO:__main__:Test message\\n\"\n\ndef test_logcapture_handler_level(caplog):\n    log = logging.getLogger(__name__)\n    log.debug(\"Debug message\")\n    log.info(\"Info message\")\n    assert \"Debug message\" not in caplog.text\n    assert \"Info message\" in caplog.text\n\ndef test_logcapture_fixture_clear(caplog):\n    log = logging.getLogger(__name__)\n    log.info(\"First message\")\n    caplog.clear()\n    log.info(\"Second message\")\n    assert \"First message\" not in caplog.text\n    assert \"Second message\" in caplog.text\n\ndef test_logcapture_fixture_records(caplog):\n    log = logging.getLogger(__name__)\n    log.warning(\"First warning\")\n    log.error(\"An error\")\n    assert len(caplog.records) == 2\n    assert caplog.records[0].levelno == logging.WARNING\n    assert caplog.records[1].levelno == logging.ERROR\n\ndef test_logcapture_fixture_set_level(caplog):\n    log = logging.getLogger(__name__)\n    log.setLevel(logging.ERROR)\n    with caplog.at_level(logging.DEBUG):\n        log.debug(\"This should not be captured\")\n    log.error(\"This should be captured\")\n    assert \"This should not be captured\" not in caplog.text\n    assert \"This should be captured\" in caplog.text\n\ndef test_get_option_ini_default(monkeypatch):\n    config = Config()\n    with monkeypatch.context() as m:\n        m.setattr(config, \"getoption\", lambda name: None)\n        m.setattr(config, \"getini\", lambda name: \"default\")\n        assert get_option_ini(config, \"option_name\") == \"default\"\n\ndef test_get_option_ini_getoption_takes_precedence(monkeypatch):\n    config = Config()\n    with monkeypatch.context() as m:\n        m.setattr(config, \"getoption\", lambda name: \"getoption_value\")\n        m.setattr(config, \"getini\", lambda name: \"ini_value\")\n        assert get_option_ini(config, \"option_name\") == \"getoption_value\"\n\ndef test_colored_level_formatter(caplog):\n    log = logging.getLogger(__name__)\n    handler = LogCaptureHandler()\n    formatter = ColoredLevelFormatter(create_terminal_writer(Config()),\n                                     \"{levelname} {message}\",\n                                     datefmt=\"[%X]\")\n    handler.setFormatter(formatter)\n    log.debug('Debug message')\n    log.warning('Warning message')\n    assert \"\\x1b[36mDEBUG\\x1b[0m Debug message\" in caplog.text\n    assert \"\\x1b[33mWARNING\\x1b[0m Warning message\" in caplog.text\n\ndef test_live_logging_stream_handler(caplog):\n    class MockTerminalReporter:\n        def write(self, text):\n            caplog.text += text\n        def section(self, text, sep=\"-\", bold=True):\n            caplog.text += f\"{text}\\n\"\n    stream = StringIO()\n    capture_manager = contextmanager(lambda: iter([])) # Mock capture_manager\n    handler = _LiveLoggingStreamHandler(MockTerminalReporter(), capture_manager)\n    handler.set_when(\"call\")\n    record = logging.makeLogRecord({\"msg\": \"Test\", 'levelno': logging.DEBUG})\n    handler.emit(record)\n    assert caplog.text.startswith(\"\\nlive log call\\nDEBUG:Test\\n\")\n\ndef test_logging_plugin_setup():\n    config = Config()\n    plugin = LoggingPlugin(config)\n    assert isinstance(plugin.formatter, logging.Formatter)\n    assert plugin.log_level is not None\n\n\n\n"], "sample_123": ["\nimport unittest\nfrom sympy.printing.latex import (latex, translate, greek_letters_set, tex_greek_dictionary)\nfrom sympy.printing.latex import LatexPrinter\nfrom sympy.printing.latex import other_symbols\n\nclass TestLatexPrinter(unittest.TestCase):\n    def test_latex_basic(self):\n        self.assertEqual(latex(1), '1')\n        self.assertEqual(latex(x), 'x')\n        self.assertEqual(latex(x**2), 'x^{2}')\n        self.assertEqual(latex(x + 2), 'x + 2')\n        self.assertEqual(latex(x*y), 'x y')\n        self.assertEqual(latex(2*x), '2 x')\n        self.assertEqual(latex(x/y), 'x / y')\n\n    def test_latex_functions(self):\n        self.assertEqual(latex(sin(x)), '\\\\sin{x}')\n        self.assertEqual(latex(cos(x)), '\\\\cos{x}')\n        self.assertEqual(latex(tan(x)), '\\\\tan{x}')\n        self.assertEqual(latex(exp(x)), '\\\\exp{x}')\n        self.assertEqual(latex(log(x)), '\\\\log{x}')\n\n    def test_latex_greek(self):\n        self.assertEqual(latex(pi), '\\\\pi')\n        self.assertEqual(latex(alpha), '\\\\alpha')\n        self.assertEqual(latex(beta), '\\\\beta')\n        self.assertEqual(latex(gamma), '\\\\gamma')\n\n    def test_latex_matrix(self):\n        mat = Matrix([[1, 2], [3, 4]])\n        self.assertEqual(latex(mat), '\\\\left[ \\\\begin{matrix} 1 & 2 \\\\\\\\ 3 & 4 \\\\end{matrix} \\\\right]')\n\n    def test_latex_translate(self):\n        self.assertEqual(translate('alpha'), '\\\\alpha')\n        self.assertEqual(translate('alphahatdotprime'), \"{\\\\dot{\\\\hat{\\\\alpha}}}'\")\n\n    def test_latex_settings(self):\n        self.assertEqual(latex(x**2, fold_frac_powers=True), 'x^{2}')\n        self.assertEqual(latex(3*x**2/y, mode='inline', fold_short_frac=True), '3 x^{2} / y')\n        self.assertEqual(latex(sin(x), inv_trig_style='full'), '\\\\arcsin{x}') \n\n    def test_latex_other_symbols(self):\n        self.assertEqual(latex(Integral(x,x)), '\\\\int x \\, dx')\n        self.assertEqual(latex(Sum(x, (x,1,n))), '\\\\sum_{x=1}^{n} x')\n\n    def test_latex_custom_symbol_names(self):\n        self.assertEqual(latex(x**2, symbol_names={x:'x_i'}), 'x_i^{2}')\n\n    def test_latex_containers(self):\n        self.assertEqual(latex([2/x, y], mode='inline'), '$\\left [ 2 / x, \\quad y\\right ]$')\n\n    def test_latex_ln_notation(self):\n        self.assertEqual(latex(log(10), ln_notation=True), '\\\\ln{\\left (10 \\right )}')\n"], "sample_43": ["\nfrom django.db import (\n    IntegrityError,\n    connection,\n    migrations,\n    models,\n    transaction,\n)\nfrom django.db.migrations.state import ModelState, ProjectState\nfrom django.db.migrations.operations.models import (\n    AddField,\n    AlterField,\n    RenameField,\n    RemoveField,\n    CreateModel,\n    DeleteModel,\n    RenameModel,\n    AlterModelTable,\n    AlterUniqueTogether,\n    AlterIndexTogether,\n    AlterOrderWithRespectTo,\n    AlterModelOptions,\n    AlterModelManagers,\n    AddIndex,\n    RemoveIndex,\n    AddConstraint,\n    RemoveConstraint,\n)\nfrom django.test import TestCase\n\n\nclass TestModelsOperations(TestCase):\n    \n    def test_add_field(self):\n        # Test basic AddField operation\n        pass\n\n    # Add more tests for AddField\n    def test_add_field_default(self):\n        pass\n    \n    def test_add_field_db_column(self):\n        pass\n    \n    def test_add_field_null(self):\n        pass\n\n    def test_alter_field(self):\n        # Test basic AlterField operation\n        pass\n\n    # Add more tests for AlterField\n    def test_alter_field_rename(self):\n        pass\n\n    def test_alter_field_type(self):\n        pass\n\n     def test_alter_field_nullity(self):\n        pass\n\n    def test_rename_field(self):\n        # Test basic RenameField operation\n        pass\n\n    def test_remove_field(self):\n        # Test basic RemoveField operation\n        pass\n\n    def test_create_model(self):\n        # Test basic CreateModel operation\n        pass\n\n    def test_delete_model(self):\n        # Test basic DeleteModel operation\n        pass\n\n    def test_rename_model(self):\n        # Test basic RenameModel operation\n        pass\n\n    def test_alter_model_table(self):\n        # Test basic AlterModelTable operation\n        pass\n\n    def test_alter_unique_together(self):\n        # Test basic AlterUniqueTogether operation\n        pass\n\n    def test_alter_index_together(self):\n        # Test basic AlterIndexTogether operation\n        pass\n\n    def test_alter_order_with_respect_to(self):\n        # Test basic AlterOrderWithRespectTo operation\n        pass\n\n    def test_alter_model_options(self):\n        # Test basic AlterModelOptions operation\n        pass\n\n    def test_alter_model_managers(self):\n        # Test basic AlterModelManagers operation\n        pass\n\n    def test_add_index(self):\n        # Test basic AddIndex operation\n        pass\n\n    def test_remove_index(self):\n        # Test basic RemoveIndex operation\n        pass\n\n    def test_add_constraint(self):\n        # Test basic AddConstraint operation\n        pass \n    \n    def test_remove_constraint(self):\n        # Test basic RemoveConstraint operation\n        pass\n"], "sample_62": ["\nimport unittest\n\nfrom django.template.defaultfilters import (\n    add,\n    addslashes,\n    capfirst,\n    center,\n    cut,\n    date,\n    default,\n    default_if_none,\n    dictsort,\n    dictsortreversed,\n    divisibleby,\n    escape,\n    escapejs,\n    filesizeformat,\n    first,\n    floatformat,\n    force_escape,\n    get_digit,\n    iriencode,\n    join,\n    length,\n    length_is,\n    linenumbers,\n    lower,\n    ljust,\n    make_list,\n    pluralize,\n    phone2numeric,\n    pprint,\n    random,\n    removetags,\n    rjust,\n    safe,\n    safeseq,\n    slice,\n    slugify,\n    stringformat,\n    striptags,\n    time,\n    timesince,\n    timeuntil,\n    title,\n    truncatechars,\n    truncatechars_html,\n    truncatewords,\n    truncatewords_html,\n    upper,\n    urlencode,\n    urlize,\n    urlizetrunc,\n    wordcount,\n    wordwrap,\n    yesno,\n)\nfrom django.utils.safestring import mark_safe\n\nclass DefaultFiltersTests(unittest.TestCase):\n\n    def test_add(self):\n        self.assertEqual(add(5, 3), 8)\n\n    def test_addslashes(self):\n        self.assertEqual(addslashes('\"I\\'m here\"'), '\\\\\"I\\\\\\'m here\\\\\"')\n\n    def test_capfirst(self):\n        self.assertEqual(capfirst(\"hello world\"), \"Hello world\")\n\n    def test_center(self):\n        self.assertEqual(center(\"hello\", 10), \"  hello   \")\n\n    def test_cut(self):\n        self.assertEqual(cut(\"hello world\", \"world\"), \"hello \")\n\n    def test_date(self):\n        self.assertEqual(date(\"2023-10-26\"), \"2023-10-26\")\n        self.assertEqual(date(\"2023-10-26\", \"jS F Y\"), \"26th October 2023\")\n\n    def test_default(self):\n        self.assertEqual(default(None, \"default\"), \"default\")\n        self.assertEqual(default(\"not none\", \"default\"), \"not none\")\n\n    def test_default_if_none(self):\n        self.assertEqual(default_if_none(None, \"default\"), \"default\")\n        self.assertEqual(default_if_none(\"not none\", \"default\"), \"not none\")\n\n    def test_dictsort(self):\n        self.assertEqual(dictsort([{ 'name': 'alice', 'age': 20 }, { 'name': 'bob', 'age': 30 }], 'name'), [{ 'name': 'alice', 'age': 20 }, { 'name': 'bob', 'age': 30 }])\n\n    def test_dictsortreversed(self):\n        self.assertEqual(dictsortreversed([{ 'name': 'alice', 'age': 20 }, { 'name': 'bob', 'age': 30 }], 'age'), [{ 'name': 'bob', 'age': 30 }, { 'name': 'alice', 'age': 20 }])\n\n    def test_divisibleby(self):\n        self.assertTrue(divisibleby(10, 2))\n        self.assertFalse(divisibleby(10, 3))\n\n    def test_escape(self):\n        self.assertEqual(escape(\"<script>alert('hi')</script>\"), \"&lt;script&gt;alert(&#39;hi&#39;)&lt;/script&gt;\")\n\n    def test_escapejs(self):\n        self.assertEqual(escapejs(\"<script>alert('hi')</script>\"), \"\\\\x3Cscript\\\\x3Ealert('hi')\\\\x3C/script\\\\x3E\")\n\n    def test_filesizeformat(self):\n        self.assertEqual(filesizeformat(1024), \"1 KB\")\n        self.assertEqual(filesizeformat(1024 * 1024), \"1 MB\")\n\n    def test_first(self):\n        self.assertEqual(first([1, 2, 3]), 1)\n\n    def test_floatformat(self):\n        self.assertEqual(floatformat(3.14159, 2), \"3.14\")\n\n    def test_force_escape(self):\n        self.assertEqual(force_escape(\"<script>alert('hi')</script>\"), \"&lt;script&gt;alert(&#39;hi&#39;)&lt;/script&gt;\")\n\n    def test_get_digit(self):\n        self.assertEqual(get_digit(12345, 1), 5)\n        self.assertEqual(get_digit(12345, 3), 3)\n\n    def test_iriencode(self):\n        self.assertEqual(iriencode(\"https://example.com/a b\"), \"https://example.com/a%20b\")\n\n    def test_join(self):\n        self.assertEqual(join([\"one\", \"two\"], \"-\"), \"one-two\")\n\n    def test_length(self):\n        self.assertEqual(length([1, 2, 3]), 3)\n\n    def test_length_is(self):\n        self.assertTrue(length_is([1, 2, 3], 3))\n        self.assertFalse(length_is([1, 2, 3], 2))\n\n    def test_linenumbers(self):\n        self.assertEqual(linenumbers(\"Line 1\\nLine 2\"), \"<p>1. Line 1<br>2. Line 2</p>\")\n\n    def test_lower(self):\n        self.assertEqual(lower(\"Hello World\"), \"hello world\")\n\n    def test_ljust(self):\n        self.assertEqual(ljust(\"hello\", 10), \"hello     \")\n\n    def test_make_list(self):\n        self.assertEqual(make_list(\"hello\"), ['h', 'e', 'l', 'l', 'o'])\n\n    def test_pluralize(self):\n        self.assertEqual(pluralize(1), \"\")\n        self.assertEqual(pluralize(2, \"es\"), \"es\")\n\n    def test_phone2numeric(self):\n        self.assertEqual(phone2numeric(\"1-800-555-1212\"), \"18005551212\")\n\n    def test_pprint(self):\n        self.assertEqual(pprint([1, 2, 3]), \"[1, 2, 3]\")\n\n    def test_random(self):\n        random_list = [1, 2, 3]\n        self.assertIn(random(random_list), random_list)\n\n    def test_removetags(self):\n        self.assertEqual(removetags(\"<p>Hello <b>world</b>!</p>\"), \"Hello world!\")\n\n    def test_rjust(self):\n        self.assertEqual(rjust(\"hello\", 10), \"     hello\")\n\n    def test_safe(self):\n        self.assertEqual(safe(\"hello\"), mark_safe(\"hello\"))\n\n    def test_safeseq(self):\n        self.assertEqual(safeseq([\"hello\"]), [mark_safe(\"hello\")])\n\n    def test_slice(self):\n        self.assertEqual(slice([1, 2, 3, 4, 5], \"1:4\"), [2, 3, 4])\n\n    def test_slugify(self):\n        self.assertEqual(slugify(\"Hello World!\"), \"hello-world\")\n\n    def test_stringformat(self):\n        self.assertEqual(stringformat(\"Hello, %s!\", \"world\"), \"Hello, world!\")\n\n    def test_striptags(self):\n        self.assertEqual(striptags(\"<p>Hello <b>world</b>!</p>\"), \"Hello world!\")\n\n    def test_time(self):\n        self.assertEqual(time(\"2023-10-26 10:00:00\"), \"10:00:00\")\n        self.assertEqual(time(\"2023-10-26 10:00:00\", \"H:i A\"), \"10:00 AM\")\n        self.assertEqual(time(\"2023-10-26\"), \"00:00:00\")\n\n    def test_timesince(self):\n        self.assertEqual(timesince(\"2023-10-26\"), \"now\")\n\n    def test_timeuntil(self):\n        self.assertEqual(timeuntil(\"2023-10-26\"), \"0:00\")\n\n    def test_title(self):\n        self.assertEqual(title(\"hello world\"), \"Hello World\")\n\n    def test_truncatechars(self):\n        self.assertEqual(truncatechars(\"hello world\", 5), \"hello\")\n\n    def test_truncatechars_html(self):\n        self.assertEqual(truncatechars_html(\"<p>hello world</p>\", 5), \"<p>hello</p>\")\n\n    def test_truncatewords(self):\n        self.assertEqual(truncatewords(\"hello world\", 1), \"hello\")\n\n    def test_truncatewords_html(self):\n        self.assertEqual(truncatewords_html(\"<p>hello world</p>\", 1), \"<p>hello</p>\")\n\n    def test_upper(self):\n        self.assertEqual(upper(\"Hello World\"), \"HELLO WORLD\")\n\n    def test_urlencode(self):\n        self.assertEqual(urlencode({\"key\": \"value\"}), \"key=value\")\n\n    def test_urlize(self):\n        self.assertEqual(urlize(\"http://www.example.com\"), \"<a href=\\\"http://www.example.com\\\">http://www.example.com</a>\")\n\n    def test_urlizetrunc(self):\n        self.assertEqual(urlizetrunc(\"http://www.example.com/long/url\", 20), \"<a href=\\\"http://www.example.com/long/url\\\">http://www.example.com/long...</a>\")\n\n    def test_wordcount(self):\n        self.assertEqual(wordcount(\"hello world\"), 2)\n\n    def test_wordwrap(self):\n        self.assertEqual(wordwrap(\"hello world\", 5), \"hello\\nworld\")\n\n\n"], "sample_105": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline, FeatureUnion, make_pipeline, make_union\nfrom sklearn.exceptions import NotFittedError\n\nclass TestPipeline(unittest.TestCase):\n\n    def test_pipeline_simple(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('clf', LogisticRegression())])\n        pipe.fit(X, y)\n        self.assertEqual(pipe.predict([[0, 0]]), [0])\n\n    def test_pipeline_named_steps(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('clf', LogisticRegression())],\n                        verbose=True)\n        pipe.fit(X, y)\n\n        self.assertTrue(hasattr(pipe, 'named_steps'))\n        self.assertEqual(pipe.named_steps['scaler'], pipe.steps[0][1])\n        self.assertEqual(pipe.named_steps['clf'], pipe.steps[1][1])\n\n    def test_pipeline_memory(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        from joblib import Memory\n        memory = Memory(cachedir='.')\n\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('clf', LogisticRegression())],\n                        memory=memory)\n        pipe.fit(X, y)\n\n        # Check if fit is cached\n        pipe.fit(X, y)\n\n    def test_pipeline_clone(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('clf', LogisticRegression())])\n        pipe.fit(X, y)\n        pipe_clone = pipe.clone()\n\n        # Check if clone has the same steps and parameters\n        self.assertListEqual(pipe.steps, pipe_clone.steps)\n        self.assertEqual(pipe.get_params(), pipe_clone.get_params())\n        self.assertFalse(pipe_clone.steps[0][1] is pipe.steps[0][1])\n\n    def test_pipeline_inheritance(self):\n        class MyPipeline(Pipeline):\n            def __init__(self, steps, verbose=False):\n                super().__init__(steps, verbose=verbose)\n            \n\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = MyPipeline([('scaler', StandardScaler()),\n                         ('clf', LogisticRegression())])\n        pipe.fit(X, y)\n\n    def test_pipeline_fit_transform(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('pca', PCA(n_components=1))])\n        Xt = pipe.fit_transform(X)\n        self.assertEqual(Xt.shape, (3, 1))\n\n    def test_pipeline_transform(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('pca', PCA(n_components=1))])\n        pipe.fit(X)\n        Xt = pipe.transform(X)\n        self.assertEqual(Xt.shape, (3, 1))\n\n    def test_pipeline_predict(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('clf', LogisticRegression())])\n        pipe.fit(X, y)\n        y_pred = pipe.predict(X)\n        self.assertEqual(len(y_pred), 3)\n\n    def test_pipeline_predict_proba(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('clf', LogisticRegression())])\n        pipe.fit(X, y)\n        y_proba = pipe.predict_proba(X)\n        self.assertEqual(y_proba.shape, (3, 2))\n\n    def test_pipeline_score(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('clf', LogisticRegression())])\n        pipe.fit(X, y)\n        score = pipe.score(X, y)\n        self.assertGreaterEqual(score, 0)\n        self.assertLessEqual(score, 1)\n    \n    def test_pipeline_empty_steps(self):\n        pipe = Pipeline([])\n        with self.assertRaises(TypeError):\n            pipe.fit(np.array([[1, 2]]), np.array([0]))\n\n    def test_pipeline_not_fitted(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        pipe = Pipeline([('scaler', StandardScaler()),\n                         ('clf', LogisticRegression())])\n\n        with self.assertRaises(NotFittedError):\n            pipe.predict(X)\n\nclass TestFeatureUnion(unittest.TestCase):\n    def test_featureunion_simple(self):\n        X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        union = FeatureUnion([(\"pca\", PCA(n_components=1)),\n                              (\"scaler\", StandardScaler())])\n        Xt = union.fit_transform(X)\n        self.assertEqual(Xt.shape, (3, 2))\n \n\n    def test_featureunion_weights(self):\n        X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        union = FeatureUnion([(\"pca\", PCA(n_components=1)),\n                              (\"scaler\", StandardScaler())],\n                            transformer_weights={\"pca\": 2, \"scaler\": 1})\n        Xt = union.fit_transform(X)\n\n    def test_featureunion_drop(self):\n        X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        union = FeatureUnion([(\"pca\", PCA(n_components=1)),\n                              (\"drop\", 'drop'),\n                              (\"scaler\", StandardScaler())])\n        Xt = union.fit_transform(X)\n        self.assertEqual(Xt.shape, (3, 2))\n\n    def test_featureunion_named_steps(self):\n        X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        union = FeatureUnion([(\"pca\", PCA(n_components=1)),\n                              (\"scaler\", StandardScaler())],\n                        verbose=True)\n        union.fit(X)\n\n        self.assertTrue(hasattr(union, 'named_transformer_list'))\n\n    def test_featureunion_get_feature_names(self):\n        X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        union = FeatureUnion([(\"pca\", PCA(n_components=1)),\n                              (\"scaler\", StandardScaler())])\n        names = union.get_feature_names()\n        self.assertEqual(names, ['pca__component_0', 'scaler__feature_0',\n                                 'scaler__feature_1'])\n\n\n\n\n"], "sample_47": ["\nimport datetime\nimport io\nimport os\nimport unittest\n\nfrom django.conf import settings\nfrom django.http import HttpRequest, HttpResponse\nfrom django.template import Template\nfrom django.test import SimpleTestCase\nfrom django.utils import timezone\nfrom django.utils.http import http_date\nfrom django.utils.translation import gettext_lazy\n\nfrom django.views.static import (\n    directory_index,\n    serve,\n    was_modified_since,\n)\n\n\nclass StaticViewsTests(SimpleTestCase):\n    def setUp(self):\n        settings.MEDIA_ROOT = os.path.join(os.path.dirname(__file__), 'test_data')\n        settings.STATIC_URL = '/static/'\n\n    def test_serve_file(self):\n        request = HttpRequest()\n        response = serve(request, 'test.txt', document_root=settings.MEDIA_ROOT)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'text/plain')\n\n    def test_serve_file_not_modified(self):\n        request = HttpRequest()\n        request.META['HTTP_IF_MODIFIED_SINCE'] = http_date(\n            (datetime.datetime.now() - datetime.timedelta(days=1)).timestamp()\n        )\n        response = serve(request, 'test.txt', document_root=settings.MEDIA_ROOT)\n        self.assertEqual(response.status_code, 304)\n\n    def test_serve_directory(self):\n        request = HttpRequest()\n        with self.assertRaises(Http404):\n            serve(request, 'testdir/', document_root=settings.MEDIA_ROOT, show_indexes=False)\n\n    def test_serve_directory_with_index(self):\n        request = HttpRequest()\n        response = serve(request, 'testdir/', document_root=settings.MEDIA_ROOT, show_indexes=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertIn(b'Index of testdir/', response.content)\n\n    def test_directory_index_template(self):\n        request = HttpRequest()\n        response = serve(request, 'testdir/', document_root=settings.MEDIA_ROOT, show_indexes=True)\n        self.assertIn(b'Index of testdir/', response.content)\n\n    def test_was_modified_since_modified(self):\n        self.assertTrue(was_modified_since(http_date(\n            (datetime.datetime.now() - datetime.timedelta(days=2)).timestamp()\n        ), (datetime.datetime.now() - datetime.timedelta(days=1)).timestamp()))\n\n    def test_was_modified_since_not_modified(self):\n        self.assertFalse(was_modified_since(http_date(\n            (datetime.datetime.now() - datetime.timedelta(days=1)).timestamp()\n        ), (datetime.datetime.now() - datetime.timedelta(days=1)).timestamp()))\n"], "sample_86": ["\nfrom _pytest.junitxml import LogXML\nfrom _pytest.junitxml import mangle_test_address\nfrom _pytest import junitxml\nfrom _pytest.junitxml import bin_xml_escape\nimport pytest\nimport os\n\ndef test_mangle_test_address():\n    assert mangle_test_address(\"test_function\") == [\"test_function\"]\n    assert mangle_test_address(\"module.test_function\") == [\"module\", \"test_function\"]\n    assert mangle_test_address(\"module.test_function[param1]\") == [\"module\", \"test_function[param1]\"]\n    assert mangle_test_address(\"path/to/module.test_function\") == [\"path.to.module\", \"test_function\"]\n\ndef test_bin_xml_escape():\n    assert bin_xml_escape(\"<xml>\") == \"#x3Cxml#x3E\"\n    assert bin_xml_escape('&') == \"#x26\"\n    assert bin_xml_escape('\"') == \"#x22\"\n    assert bin_xml_escape(\"'\") == \"#x27\"\n    assert bin_xml_escape('>') == \"#x3E\"\n    assert bin_xml_escape('<') == \"#x3C\"\n\ndef test_LogXML():\n    xml = LogXML(\"test\", None, \"suite_name\", \"no\", \"total\", \"xunit1\", True)\n    assert xml.logfile == os.path.abspath(\"test\")\n\ndef test_LogXML_initialisation():\n    with pytest.raises(TypeError):\n        LogXML(123, None, \"suite_name\", \"no\", \"total\", \"xunit1\", True)\n\ndef test_LogXML_write_captured_output():\n    xml = LogXML(\"test\", None, \"suite_name\", \"no\", \"total\", \"xunit1\", True)\n    report = pytest.TestReport( nodeid=\"test\", passed=True)\n    report = pytest.TestReport(nodeid = \"test\", passed=True, captured_stdout=\"stdout\", captured_stderr=\"stderr\", stdout=\"out\" )\n    xml._opentestcase(report)\n  \ndef test_LogXML_add_stats():\n    xml = LogXML(\"test\", None, \"suite_name\", \"no\", \"total\", \"xunit1\", True)\n    xml.add_stats('passed')\n    assert xml.stats['passed'] == 1\n\ndef test_LogXML_add_global_property():\n    xml = LogXML(\"test\", None, \"suite_name\", \"no\", \"total\", \"xunit1\", True)\n    xml.add_global_property(\"key\", \"value\")\n    assert xml.global_properties == [(\"key\", \"value\")]\n\n    with pytest.raises(TypeError):\n        xml.add_global_property(123, \"value\")\n\ndef test_LogXML__get_global_properties_node():\n    xml = LogXML(\"test\", None, \"suite_name\", \"no\", \"total\", \"xunit1\", True)\n    xml.add_global_property(\"key\", \"value\")\n    assert xml._get_global_properties_node().unicode() == '<properties><property name=\"key\" value=\"value\"/></properties>'\n\n"], "sample_159": ["\nimport unittest\nfrom sympy import S\nfrom sympy.physics.units.unitsystem import UnitSystem\nfrom sympy.physics.units.definitions.dimension_definitions import (\n    Dimension, charge, length, time, temperature, pressure, energy, mass\n)\nfrom sympy.physics.units.systems.si import dimsys_SI\nfrom sympy.physics.units.quantities import Quantity\n\nclass TestUnitSystem(unittest.TestCase):\n\n    def test_init(self):\n        unitsystem = UnitSystem(base_units=(length, time), name=\"test_system\")\n        self.assertEqual(unitsystem.name, \"test_system\")\n        self.assertEqual(unitsystem._base_units, (length, time))\n\n    def test_str(self):\n        unitsystem = UnitSystem(base_units=(length, time), name=\"test_system\")\n        self.assertEqual(str(unitsystem), \"test_system\")\n        unitsystem = UnitSystem(base_units=(length, time))\n        self.assertEqual(str(unitsystem), \"UnitSystem((length, time))\")\n\n    def test_repr(self):\n        unitsystem = UnitSystem(base_units=(length, time), name=\"test_system\")\n        self.assertEqual(repr(unitsystem), \"<UnitSystem: (length, time)>\")\n\n    def test_extend(self):\n        unitsystem = UnitSystem(base_units=(length, time), name=\"test_system\")\n        unitsystem_extended = unitsystem.extend(base=(mass,), units=(charge,))\n        self.assertEqual(unitsystem_extended.name, \"\")\n        self.assertEqual(unitsystem_extended._base_units, (length, time, mass))\n        self.assertEqual(unitsystem_extended._units, (length, time, mass, charge))\n\n    def test_get_dimension_system(self):\n        unitsystem = UnitSystem(base_units=(length, time), dimension_system=dimsys_SI)\n        self.assertEqual(unitsystem.get_dimension_system(), dimsys_SI)\n\n    def test_get_quantity_dimension(self):\n        unitsystem = UnitSystem(base_units=(length, time), dimension_system=dimsys_SI)\n        self.assertEqual(unitsystem.get_quantity_dimension(length), dimsys_SI.get_dimension_system().get_quantity_dimension(length))\n\n    def test_get_quantity_scale_factor(self):\n        unitsystem = UnitSystem(base_units=(length, time), dimension_system=dimsys_SI)\n        self.assertEqual(unitsystem.get_quantity_scale_factor(length), dimsys_SI.get_dimension_system().get_quantity_scale_factor(length))\n\n    def test_get_unit_system(self):\n        unitsystem = UnitSystem(base_units=(length, time), name=\"test_system\")\n        self.assertEqual(UnitSystem.get_unit_system(\"test_system\"), unitsystem)\n\n        with self.assertRaises(ValueError):\n            UnitSystem.get_unit_system(\"nonexistent_system\")\n\n    def test_get_default_unit_system(self):\n        self.assertEqual(UnitSystem.get_default_unit_system(), UnitSystem._unit_systems[\"SI\"])\n\n    def test_dim(self):\n        unitsystem = UnitSystem(base_units=(length, time))\n        self.assertEqual(unitsystem.dim, 2)\n\n    def test_is_consistent(self):\n        unitsystem = UnitSystem(base_units=(length, time), dimension_system=dimsys_SI)\n        self.assertEqual(unitsystem.is_consistent, dimsys_SI.is_consistent)\n\n    def test_derived_units(self):\n        unitsystem = UnitSystem(base_units=(length, time), derived_units={Dimension(1,0,0,0,0,0,0): Quantity(S(1), Dimension(1,0,0,0,0,0,0))})\n        self.assertEqual(unitsystem.derived_units, {Dimension(1,0,0,0,0,0,0): Quantity(S(1), Dimension(1,0,0,0,0,0,0))})\n\n    def test_get_dimensional_expr(self):\n        from sympy.physics.units import Quantity\n        unitsystem = UnitSystem(base_units=(length, time), dimension_system=dimsys_SI)\n        q = Quantity(\"q\", \"C\")\n        self.assertEqual(unitsystem.get_dimensional_expr(q), dimsys_SI.get_quantity_dimension(charge))\n\n    def test_get_dimensional_expr_add(self):\n        unitsystem = UnitSystem(base_units=(length, time), dimension_system=dimsys_SI)\n        expr = length + time\n        self.assertEqual(unitsystem.get_dimensional_expr(expr), dimsys_SI.get_quantity_dimension(length))\n\n    def test_collect_factor_and_dimension(self):\n        unitsystem = UnitSystem(base_units=(length, time), dimension_system=dimsys_SI)\n        q = Quantity(\"q\", \"C\", 2)\n        factor, dim = unitsystem._collect_factor_and_dimension(q)\n        self.assertEqual(factor, 2)\n        self.assertEqual(dim, dimsys_SI.get_quantity_dimension(charge))\n\n"], "sample_36": ["\nfrom django.db.models import F, Q\nfrom django.db.models.query_utils import (\n    DeferredAttribute,\n    PathInfo,\n    Q,\n    RegisterLookupMixin,\n    select_related_descend,\n    refs_expression,\n    check_rel_lookup_compatibility,\n    FilteredRelation,\n)\nfrom django.test import TestCase\n\n\nclass QueryUtilsTests(TestCase):\n\n    def test_q_combine(self):\n        q1 = Q(name__startswith='Jon')\n        q2 = Q(age__gt=30)\n        q3 = q1 & q2\n        self.assertEqual(q3.connector, Q.AND)\n        self.assertEqual(len(q3.children), 2)\n\n        q4 = Q(city='New York')\n        q5 = q3 | q4\n        self.assertEqual(q5.connector, Q.OR)\n        self.assertEqual(len(q5.children), 3)\n\n    def test_q_invert(self):\n        q1 = Q(name__startswith='Jon')\n        q2 = ~q1\n        self.assertEqual(q2.connector, Q.AND)\n        self.assertEqual(len(q2.children), 1)\n        self.assertTrue(q2.children[0].negated)\n\n    def test_deferred_attribute(self):\n        class MockModel:\n            def __init__(self, **kwargs):\n                self.__dict__.update(kwargs)\n        mock_instance = MockModel(id=1)\n        mock_field = MockModel\n\n        deferred_attr = DeferredAttribute(mock_field)\n        # First access should trigger loading\n        result = deferred_attr.__get__(mock_instance)\n        # Subsequent access should return cached value\n        self.assertEqual(result, mock_instance.id)\n\n    def test_register_lookup(self):\n        # This is a bit tricky to test directly, as it modifies a class-level\n        # attribute. We'll need to subclass a model and register a lookup.\n\n        class MockModel(object):\n            class Meta:\n                class_lookups = {}\n\n        class MockLookup:\n            lookup_name = 'mock_lookup'\n\n        MockModel.register_lookup(MockLookup())\n        self.assertIn('mock_lookup', MockModel.Meta.class_lookups)\n\n    def test_select_related_descend(self):\n        self.assertTrue(select_related_descend(None, False, {}, set()))\n\n    def test_refs_expression(self):\n        lookup_parts = ['field1', 'field2']\n        annotations = {'field1': True}\n\n        result, remainder = refs_expression(lookup_parts, annotations)\n        self.assertTrue(result)\n        self.assertEqual(remainder, ('field2',))\n\n    def test_check_rel_lookup_compatibility(self):\n        # Test case for models that match.\n\n        class ModelA(object):\n            pass\n\n        class ModelB(object):\n            pass\n\n        self.assertTrue(check_rel_lookup_compatibility(ModelA, ModelA, None))\n\n        # Test case for parent-child models.\n\n        class Parent(object):\n            pass\n\n        class Child(Parent):\n            pass\n\n\n        self.assertTrue(check_rel_lookup_compatibility(Parent, Child, None))\n\n\n\n    def test_filtered_relation(self):\n        relation = FilteredRelation('related_field', condition=Q(id=1))\n        # Test cloning\n    \n       clone_relation = relation.clone()\n       self.assertEqual(clone_relation.relation_name, relation.relation_name)\n       self.assertEqual(clone_relation.condition, relation.condition)\n\n\n\n"], "sample_26": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nfrom django.conf import settings\nfrom django.db.backends.base.creation import (\n    TEST_DATABASE_PREFIX,\n    BaseDatabaseCreation,\n)\nfrom django.db.utils import DatabaseError\nfrom django.core.management import call_command\nfrom django.core.management.base import CommandError\n\nclass BaseDatabaseCreationTests(unittest.TestCase):\n\n    def setUp(self):\n        self.connection = MagicMock()\n        self.connection.alias = 'default'\n        self.connection.settings_dict = {\n            'NAME': 'test_database',\n            'TEST': {'NAME': None, 'MIGRATE': True},\n        }\n        self.connection._nodb_cursor = MagicMock(return_value=MagicMock())\n        self.connection.ops = MagicMock()\n        self.connection.ops.quote_name = MagicMock(return_value='quoted_name')\n        self.db_creation = BaseDatabaseCreation(self.connection)\n\n    def test_create_test_db_creates_database_if_it_doesnt_exist(self):\n        self.connection._nodb_cursor().execute.side_effect = DatabaseError\n        with patch('sys.stderr', new=MagicMock()) as mock_stderr:\n            self.db_creation.create_test_db()\n        self.connection._nodb_cursor().execute.assert_called_once_with(\n            'CREATE DATABASE quoted_name'\n        )\n\n    def test_create_test_db_uses_existing_database_if_keepdb_is_true(self):\n        self.connection.settings_dict['NAME'] = 'some_database'\n        self.db_creation.create_test_db(keepdb=True)\n        self.connection.settings_dict['NAME'] == 'some_database'\n        self.connection._nodb_cursor().execute.assert_not_called()\n\n    def test_create_test_db_serializes_database_after_creation(self):\n\n        self.db_creation.create_test_db()\n        self.assertTrue(hasattr(self.connection, '_test_serialized_contents'))\n\n    def test_create_test_db_migrates_database_if_migrate_is_true(self):\n        with patch('django.core.management.call_command') as mock_call_command:\n            self.db_creation.create_test_db()\n        mock_call_command.assert_called_once_with('migrate', verbosity=0, interactive=False, database='default', run_syncdb=True)\n\n    def test_set_as_test_mirror_sets_db_name(self):\n        primary_settings_dict = {'NAME': 'primary_db'}\n        self.db_creation.set_as_test_mirror(primary_settings_dict)\n        self.assertEqual(self.connection.settings_dict['NAME'], 'primary_db')\n\n    def test_serialize_db_to_string_serializes_database_to_json(self):\n        serialized_data = self.db_creation.serialize_db_to_string()\n        self.assertEqual(type(serialized_data), str)\n        self.assertTrue('{\"model\":' in serialized_data)\n\n    def test_deserialize_db_from_string_loads_data_from_string(self):\n        serialized_data = self.db_creation.serialize_db_to_string()\n        self.db_creation.deserialize_db_from_string(serialized_data)\n\n    def test__get_test_db_name_returns_test_db_name(self):\n        self.assertEqual(self.db_creation._get_test_db_name(), 'test_test_database')\n\n    def test__get_test_db_name_returns_custom_name_from_settings(self):\n        self.connection.settings_dict['TEST']['NAME'] = 'custom_test_db'\n        self.assertEqual(self.db_creation._get_test_db_name(), 'custom_test_db')\n\n    def test__get_database_display_str_returns_formatted_string(self):\n        self.assertEqual(self.db_creation._get_database_display_str(1, 'test_database'), \"'default' ('test_database')\")\n\n    def test__execute_create_test_db(self):\n        parameters = {'dbname': 'quoted_name', 'suffix': ''}\n        with patch.object(self.connection, '_nodb_cursor') as mock_cursor:\n            self.db_creation._execute_create_test_db(mock_cursor, parameters)\n        mock_cursor.execute.assert_called_once_with('CREATE DATABASE quoted_name')\n\n    def test_clone_test_db_raises_not_implemented_error(self):\n        with self.assertRaises(NotImplementedError):\n            self.db_creation.clone_test_db('suffix')\n\n\n"], "sample_41": ["\nfrom unittest.mock import patch, Mock, MagicMock\n\nfrom django.contrib.admin.views.autocomplete import AutocompleteJsonView\nfrom django.apps import apps\nfrom django.test import RequestFactory\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.auth.models import User, Permission\nfrom django.db import models\nfrom django.http import Http404\n\nclass TestModel(models.Model):\n    name = models.CharField(max_length=100)\n\nclass TestModelAdmin(object):\n    search_fields = ['name']\n    list_per_page = 20\n\n    def __init__(self, model, admin_site):\n        self.model = model\n        self.admin_site = admin_site\n\n    def get_queryset(self, request):\n        return self.model.objects.all()\n\n    def get_search_results(self, request, queryset, search_term):\n        return queryset.filter(name__icontains=search_term), False\n\n    def get_paginator(self, request, *args, **kwargs):\n        return None\n\n    def has_view_permission(self, request, obj=None):\n        return True\n\n    def to_field_allowed(self, request, field_name):\n        return True\n\n\n\nclass AutocompleteJsonViewTests(object):\n    def setUp(self):\n        self.request_factory = RequestFactory()\n\n        self.user = User.objects.create_user('testuser', 'test@example.com', 'password')\n\n        self.admin_site = Mock()\n        self.model = TestModel\n        self.model_admin = TestModelAdmin(self.model, self.admin_site)\n        self.admin_site._registry[self.model] = self.model_admin\n        self.view = AutocompleteJsonView()\n        \n        self.view.admin_site = self.admin_site\n\n        apps.register(self.model)\n\n    def test_get_without_params(self):\n        request = self.request_factory.get('/autocomplete/')\n        with self.assertRaises(PermissionDenied):\n            self.view.get(request)\n\n    def test_get_with_invalid_params(self):\n        request = self.request_factory.get('/autocomplete/', {'app_label': 'invalid', 'model_name': 'invalid', 'field_name': 'invalid'})\n        with self.assertRaises(PermissionDenied):\n            self.view.get(request)\n\n    def test_get_with_missing_model_admin(self):\n        request = self.request_factory.get('/autocomplete/', {'app_label': self.model._meta.app_label, 'model_name': self.model._meta.model_name, 'field_name': 'name'})\n        with patch.object(self.admin_site, '_registry', {}) as mock_registry:\n            with self.assertRaises(PermissionDenied):\n                self.view.get(request)\n\n    def test_get_with_no_search_fields(self):\n        self.model_admin.search_fields = []\n        request = self.request_factory.get('/autocomplete/', {'app_label': self.model._meta.app_label, 'model_name': self.model._meta.model_name, 'field_name': 'name'})\n        with self.assertRaises(Http404):\n            self.view.get(request)\n\n    def test_get_without_permission(self):\n        self.model_admin.has_view_permission = Mock(return_value=False)\n        request = self.request_factory.get('/autocomplete/', {'app_label': self.model._meta.app_label, 'model_name': self.model._meta.model_name, 'field_name': 'name', 'term': 'test'})\n        with self.assertRaises(PermissionDenied):\n            self.view.get(request)\n\n    def test_get_success(self):\n        request = self.request_factory.get('/autocomplete/', {'app_label': self.model._meta.app_label, 'model_name': self.model._meta.model_name, 'field_name': 'name', 'term': 'test'})\n        response = self.view.get(request)\n        self.assertEqual(response.status_code, 200)\n        self.assertDictEqual(response.json(), {'results': [], 'pagination': {'more': False}})\n\n    def test_serialize_result(self):\n        obj = TestModel(name='Test Object 1')\n        obj.save()\n        result = self.view.serialize_result(obj, 'name')\n        self.assertEqual(result, {'id': '1', 'text': 'Test Object 1'})\n"], "sample_54": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.apps import AppConfig\nfrom django.db import models\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.operations import (\n    AddField,\n    AlterField,\n    RemoveField,\n    RenameField,\n    AlterModelOptions,\n    AlterUniqueTogether,\n    AlterIndexTogether,\n    AlterModelTable,\n    AddIndex,\n    RemoveIndex,\n    RenameIndex,\n)\n\n\nclass TestMigrationAutodetector(unittest.TestCase):\n    def setUp(self):\n        self.autodetector = MigrationAutodetector(\n            None, {\"test_app_label\": MagicMock(AppConfig)}\n        )\n\n    @patch(\"django.db.migrations.autodetector.MigrationAutodetector._get_dependencies_for_foreign_key\")\n    def test_generate_added_fields(self, mock_get_dependencies):\n        class TestModel(models.Model):\n            name = models.CharField(max_length=100)\n\n            class Meta:\n                app_label = \"test_app_label\"\n\n        old_model_state = MagicMock()\n        old_model_state.get_fields_with_model.return_value = []\n        self.autodetector.from_state.models = {\"test_app_label\": {\n            \u201cTestModel\u201d: old_model_state\n        }}\n\n        new_model_state = MagicMock()\n        new_model_state.get_fields_with_model.return_value = [\n            (\n                \"name\",\n                TestModel._meta.get_field(\"name\"),\n            )\n        ]\n        self.autodetector.to_state.models = {\"test_app_label\": {\n            \u201cTestModel\u201d: new_model_state\n        }}\n        mock_get_dependencies.return_value = []\n        self.autodetector.generate_added_fields()\n        self.assertEqual(len(self.autodetector.operations), 1)\n        self.assertIsInstance(self.autodetector.operations[0], AddField)\n\n    @patch(\"django.db.migrations.autodetector.MigrationAutodetector._get_dependencies_for_foreign_key\")\n    def test_generate_altered_fields_with_dependencies(self, mock_get_dependencies):\n        class TestModel(models.Model):\n            name = models.CharField(max_length=100)\n            age = models.IntegerField()\n\n\n\n            class Meta:\n                app_label = \"test_app_label\"\n\n        old_model_state = MagicMock()\n        old_model_state.get_fields_with_model.return_value = [\n            (\n                \"name\",\n                TestModel._meta.get_field(\"name\"),\n            ),\n            (\n                \"age\",\n                TestModel._meta.get_field(\"age\"),\n            ),\n        ]\n        self.autodetector.from_state.models = {\"test_app_label\": {\n            \u201cTestModel\u201d: old_model_state\n        }}\n        new_model_state = MagicMock()\n        new_model_state.get_fields_with_model.return_value = [\n            (\n                \"name\",\n                TestModel._meta.get_field(\"name\"),\n            ),\n            (\n                \"age\",\n                TestModel._meta.get_field(\"age\"),\n            ),\n        ]\n        self.autodetector.to_state.models = {\"test_app_label\": {\n            \u201cTestModel\u201d: new_model_state\n        }}\n        mock_get_dependencies.return_value = [(\"test_app_label\", \"OtherModel\", None, True)]\n        self.autodetector.generate_altered_fields()\n        self.assertEqual(len(self.autodetector.operations), 1)\n"], "sample_101": ["\nimport numpy as np\nfrom nose.tools import assert_raises\nfrom sklearn.base import clone\nfrom sklearn.datasets import make_classification, make_regression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.ensemble import VotingClassifier, VotingRegressor\n\n\ndef test_voting_classifier_fit():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    clf1 = LogisticRegression(solver='lbfgs', multi_class='multinomial', random_state=1)\n    clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n    clf3 = GaussianNB()\n    eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='hard')\n    eclf.fit(X, y)\n\n    assert hasattr(eclf, 'estimators_')\n    assert len(eclf.estimators_) == 3\n\n    eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='soft')\n    eclf.fit(X, y)\n\n    assert hasattr(eclf, 'estimators_')\n    assert len(eclf.estimators_) == 3\n\n\ndef test_voting_classifier_predict():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    clf1 = LogisticRegression(solver='lbfgs', multi_class='multinomial', random_state=1)\n    clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n    clf3 = GaussianNB()\n    eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='hard')\n    eclf.fit(X, y)\n    y_pred = eclf.predict(X)\n\n    assert len(y_pred) == len(y)\n\n    eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='soft')\n    eclf.fit(X, y)\n    y_pred_soft = eclf.predict(X)\n\n    assert len(y_pred_soft) == len(y)\n\n\ndef test_voting_classifier_predict_proba():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    clf1 = LogisticRegression(solver='lbfgs', multi_class='multinomial', random_state=1)\n    clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n    clf3 = GaussianNB()\n    eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='soft')\n    eclf.fit(X, y)\n    y_pred_proba = eclf.predict_proba(X)\n    assert y_pred_proba.shape[0] == len(y)\n\ndef test_voting_classifier_error():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    clf1 = LogisticRegression(solver='lbfgs', multi_class='multinomial', random_state=1)\n    clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n    clf3 = GaussianNB()\n    eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='hard')\n    assert_raises(NotFittedError, eclf.predict, X)\n    assert_raises(NotFittedError, eclf.predict_proba, X)\n\ndef test_voting_regressor_fit():\n    X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n    r1 = LinearRegression()\n    r2 = RandomForestRegressor(n_estimators=10, random_state=1)\n    er = VotingRegressor([('lr', r1), ('rf', r2)])\n    er.fit(X, y)\n\n    assert hasattr(er, 'estimators_')\n    assert len(er.estimators_) == 2\n\ndef test_voting_regressor_predict():\n    X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n    r1 = LinearRegression()\n    r2 = RandomForestRegressor(n_estimators=10, random_state=1)\n    er = VotingRegressor([('lr', r1), ('rf', r2)])\n    er.fit(X, y)\n    y_pred = er.predict(X)\n\n    assert len(y_pred) == len(y)\n\ndef test_voting_regressor_transform():\n    X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n    r1 = LinearRegression()\n    r2 = RandomForestRegressor(n_estimators=10, random_state=1)\n    er = VotingRegressor([('lr', r1), ('rf', r2)])\n    er.fit(X, y)\n    predictions = er.transform(X)\n\n    assert predictions.shape[0] == len(X)\n\ndef test_voting_regressor_error():\n    X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n    r1 = LinearRegression()\n    r2 = RandomForestRegressor(n_estimators=10, random_state=1)\n    er = VotingRegressor([('lr', r1), ('rf', r2)])\n    assert_raises(NotFittedError, er.predict, X)\n\n    assert_raises(NotFittedError, er.transform, X)\n\n"], "sample_106": ["\nimport unittest\nimport numpy as np\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.ensemble.iforest import _average_path_length, IsolationForest\nfrom sklearn.utils.estimator_checks import check_estimator\n\nclass TestIsolationForest(unittest.TestCase):\n    def test_iforest_basic(self):\n        X = np.random.rand(100, 2)\n        clf = IsolationForest()\n        clf.fit(X)\n        scores = clf.decision_function(X)\n        self.assertTrue(np.all(np.isfinite(scores)))\n\n    def test_iforest_contamination_auto(self):\n        X = np.random.rand(100, 2)\n        clf = IsolationForest(contamination='auto')\n        clf.fit(X)\n        self.assertTrue(clf.offset_ == -0.5)\n\n    def test_iforest_contamination_value(self):\n        X = np.random.rand(100, 2)\n        clf = IsolationForest(contamination=0.1)\n        clf.fit(X)\n        self.assertTrue(clf.offset_ != -0.5)\n\n    def test_iforest_behaviour_old(self):\n        X = np.random.rand(100, 2)\n        clf = IsolationForest(behaviour='old', contamination=0.1)\n        clf.fit(X)\n        self.assertTrue(clf.offset_ != -0.5)\n        self.assertTrue(hasattr(clf, '_threshold_'))\n\n    def test_iforest_decision_function(self):\n        X = np.random.rand(100, 2)\n        clf = IsolationForest()\n        clf.fit(X)\n        scores = clf.decision_function(X)\n        self.assertTrue(np.all(scores <= 0))\n\n    def test_iforest_predict(self):\n        X = np.random.rand(100, 2)\n        clf = IsolationForest()\n        clf.fit(X)\n        y_pred = clf.predict(X)\n        self.assertTrue(np.all(np.isin(y_pred, [-1, 1])))\n\n    def test_iforest_score_samples(self):\n        X = np.random.rand(100, 2)\n        clf = IsolationForest()\n        clf.fit(X)\n        scores = clf.score_samples(X)\n        self.assertTrue(np.all(scores <= 0))\n\n    def test_average_path_length(self):\n        n_samples_leaf = np.array([1, 2, 3, 4, 5])\n        avg_path_length = _average_path_length(n_samples_leaf)\n        self.assertTrue(np.all(avg_path_length >= 0))\n\n\n    def test_check_estimator(self):\n        check_estimator(IsolationForest())\n"], "sample_126": ["\nimport unittest\nfrom sympy import symbols, Symbol, sinh, nan, oo, zoo, pi, asinh, acosh, log, sqrt,  coth, I, cot, E, tanh, tan, cosh, cos, S, sin, Rational, atanh, acoth,  Integer, O, exp, sech, sec, csch, asech, acsch, acos, asin, expand_mul\n\nclass TestHyperbolicFunctions(unittest.TestCase):\n    def test_sinh(self):\n        self.assertEqual(sinh(0), 0)\n        self.assertEqual(sinh(S.Infinity), S.Infinity)\n        self.assertEqual(sinh(S.NegativeInfinity), S.NegativeInfinity)\n        self.assertEqual(sinh(nan), nan)\n        self.assertEqual(sinh(I), sin(I))\n\n    def test_cosh(self):\n        self.assertEqual(cosh(0), 1)\n        self.assertEqual(cosh(S.Infinity), S.Infinity)\n        self.assertEqual(cosh(S.NegativeInfinity), S.Infinity)\n        self.assertEqual(cosh(nan), nan)\n        self.assertEqual(cosh(I), cos(I))\n\n    def test_tanh(self):\n        self.assertEqual(tanh(0), 0)\n        self.assertEqual(tanh(S.Infinity), 1)\n        self.assertEqual(tanh(S.NegativeInfinity), -1)\n        self.assertEqual(tanh(nan), nan)\n        self.assertEqual(tanh(I), (sinh(I))/cosh(I))\n\n    def test_coth(self):\n        self.assertEqual(coth(0), S.Infinity)\n        self.assertEqual(coth(S.Infinity), 1)\n        self.assertEqual(coth(S.NegativeInfinity), -1)\n        self.assertEqual(coth(nan), nan)\n        self.assertEqual(coth(I), (cosh(I))/sinh(I))\n\n    def test_sech(self):\n        self.assertEqual(sech(0), 1)\n        self.assertEqual(sech(S.Infinity), 0)\n        self.assertEqual(sech(S.NegativeInfinity), 0)\n        self.assertEqual(sech(nan), nan)\n        self.assertEqual(sech(I), 2/(exp(I) + exp(-I)))\n\n    def test_csch(self):\n        self.assertEqual(csch(0), S.Infinity)\n        self.assertEqual(csch(S.Infinity), 0)\n        self.assertEqual(csch(S.NegativeInfinity), 0)\n        self.assertEqual(csch(nan), nan)\n        self.assertEqual(csch(I), 2/(exp(I) - exp(-I)))\n\n    def test_asinh(self):\n        self.assertEqual(asinh(0), 0)\n        self.assertEqual(asinh(S.Infinity), S.Infinity)\n        self.assertEqual(asinh(S.NegativeInfinity), S.NegativeInfinity)\n        self.assertEqual(asinh(nan), nan)\n\n    def test_acosh(self):\n        self.assertEqual(acosh(1), 0)\n        self.assertEqual(acosh(S.Infinity), S.Infinity)\n        self.assertEqual(acosh(nan), nan)\n        with self.assertRaises(ValueError):\n            acosh(-1)\n\n    def test_atanh(self):\n        self.assertEqual(atanh(0), 0)\n        self.assertEqual(atanh(1), S.Infinity)\n        self.assertEqual(atanh(-1), S.NegativeInfinity)\n        self.assertEqual(atanh(nan), nan)\n        with self.assertRaises(ValueError):\n            atanh(2)\n\n    def test_acoth(self):\n        self.assertEqual(acoth(1), S.Infinity)\n        self.assertEqual(acoth(-1), S.NegativeInfinity)\n        self.assertEqual(acoth(nan), nan)\n        with self.assertRaises(ValueError):\n            acoth(0)\n\n    def test_asech(self):\n        self.assertEqual(asech(1), 0)\n        self.assertEqual(asech(nan), nan)\n        with self.assertRaises(ValueError):\n            asech(0)\n        with self.assertRaises(ValueError):\n            asech(2)\n\n    def test_acsch(self):\n        self.assertEqual(acsch(1), log(1 + sqrt(2)))\n        self.assertEqual(acsch(nan), nan)\n        \n"], "sample_135": ["\nimport unittest\nfrom sympy.utilities.iterables import (\n    _partition, _set_partitions, binary_partitions, bracelets, capture, cartes,\n    common_prefix, common_suffix, connected_components, dict_merge,\n    filter_symbols, flatten, generate_bell, generate_derangements,\n    generate_involutions, generate_oriented_forest, group, has_dups, ibin,\n    iproduct, kbins, minlex, multiset, multiset_combinations,\n    multiset_partitions, multiset_permutations, necklaces, numbered_symbols,\n    ordered, partitions, permutations, postfixes, postorder_traversal, prefixes,\n    reshape, rotate_left, rotate_right, runs, sift,\n    strongly_connected_components, subsets, take, topological_sort, unflatten,\n    uniq, variations, ordered_partitions, rotations, is_palindromic,\n    permute_signs, signed_permutations\n)\nfrom sympy.utilities.enumerative import ( factoring_visitor, multiset_partitions_taocp )\n\nclass TestIterables(unittest.TestCase):\n\n    def test__partition(self):\n        self.assertEqual(list(_partition([1, 2, 3], 2)), [[[1, 2], [3]], [[1, 3], [2]], [[2, 3], [1]]])\n\n    def test__set_partitions(self):\n        self.assertEqual(list(_set_partitions([1,2,3])), [[[1, 2, 3]]])\n\n    def test_binary_partitions(self):\n        self.assertEqual(list(binary_partitions(4)), [([4], []), ([], [4]), ([2, 2], []), ([2], [2]), ([1, 1, 1, 1], [])])\n\n    def test_braceletes(self):\n        self.assertEqual(list(bracelets(4, 2)), [ [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 1],\n        [0, 1, 0, 1], [0, 1, 1, 1], [1, 1, 1, 1]] )\n\n    def test_capture(self):\n        self.assertEqual(list(capture(i for i in range(5))), [0,1,2,3,4])\n\n    # def test_cartes(self):\n    #     self.assertEqual(list(cartes()), []) # empty input\n    #\n    #     self.assertEqual(list(cartes([1, 2])), [ (1,), (2,) ])\n    #\n    #     self.assertEqual(list(cartes([1, 2], [3, 4])), [ (1, 3), (1, 4), (2, 3), (2, 4) ])\n    #\n\n    def test_common_prefix(self):\n        self.assertEqual(common_prefix(['abc', 'abcdefg', 'abcd']), 'abc')\n        self.assertEqual(common_prefix(['abc', 'defg', 'ab']), 'a')\n        self.assertEqual(common_prefix(['abc', 'a']), 'a')\n        self.assertEqual(common_prefix(['abc', 'def']), '')\n\n    def test_common_suffix(self):\n        self.assertEqual(common_suffix(['abc', 'abcdefg', 'abcd']), 'abc')\n        self.assertEqual(common_suffix(['abc', 'defg', 'ab']), 'b')\n        self.assertEqual(common_suffix(['abc', 'a']), 'c')\n        self.assertEqual(common_suffix(['abc', 'def']), '')\n\n    def test_connected_components(self):\n        self.assertEqual(connected_components([[1, 2], [2, 3], [4]]), [{1, 2, 3}, {4}])\n\n    def test_dict_merge(self):\n        self.assertEqual(dict_merge({'a': 1, 'b': 2}, {'b': 3, 'c': 4}), {'a': 1, 'b': 3, 'c': 4})\n\n    def test_filter_symbols(self):\n        from sympy import Symbol\n        self.assertEqual(list(filter_symbols([1, 2, Symbol('x')])), [Symbol('x')])\n\n    def test_flatten(self):\n        self.assertEqual(list(flatten([1, [2, [3, 4], 5], 6])), [1, 2, 3, 4, 5, 6])\n\n    def test_generate_bell(self):\n        self.assertEqual(list(generate_bell(4)), [(0, 1, 2, 3), (0, 1, 3, 2), (0, 3, 1, 2), (3, 0, 1, 2), (3, 0, 2, 1)])\n\n    def test_generate_derangements(self):\n        self.assertEqual(list(generate_derangements([0, 1, 2])), [[1, 2, 0], [2, 0, 1]])\n\n    def test_generate_involutions(self):\n        self.assertEqual(list(generate_involutions([0, 1, 2])), [(0, 2, 1), (1, 0, 2), (2, 1, 0)])\n\n    def test_generate_oriented_forest(self):\n        self.assertEqual(list(generate_oriented_forest(4))[:5], [[0, 1, 2, 3], [0, 1, 2, 2], [0, 1, 2, 1], [0, 1, 2, 0], [0, 1, 1, 1]])\n\n    def test_group(self):\n        self.assertEqual(group([1, 2, 3, 2, 1, 2]), {1: [1, 1], 2: [2, 2, 2], 3: [3]})\n\n    def test_has_dups(self):\n        self.assertTrue(has_dups([1, 2, 2, 3]))\n        self.assertFalse(has_dups([1, 2, 3]))\n\n    def test_ibin(self):\n        self.assertEqual(list(ibin(3)), [0, 1, 2])\n\n    def test_iproduct(self):\n      self.assertEqual(list(iproduct([1,2], [3,4])), [(1, 3), (1, 4), (2, 3), (2, 4)])\n\n    def test_kbins(self):\n    \n        self.assertEqual(list(kbins(list(range(5)), 2)), [[[0], [1, 2, 3, 4]], [[0, 1], [2, 3, 4]], [[0, 1, 2], [3, 4]], [[0, 1, 2, 3], [4]]])\n\n    def test_minlex(self):\n        self.assertEqual(minlex('11010011000'), '00011010011')\n\n    def test_multiset(self):\n        self.assertEqual(list(multiset([1, 1, 2, 3])), [(1, 2), (2, 1), (3, 1)])\n\n    def test_multiset_combinations(self):\n        self.assertEqual(list(multiset_combinations([1, 1, 2], 2)), [(1, 1), (1, 2), (2, 1)])\n\n    def test_multiset_partitions(self):\n        self.assertEqual(list(multiset_partitions([1, 1, 2], 2)), [[[1, 1], [2]], [[1, 2], [1]]])\n\n    def test_multiset_permutations(self):\n        self.assertEqual(list(multiset_permutations([1, 1, 2])), [(1, 1, 2), (1, 2, 1), (2, 1, 1)])\n\n    def test_necklaces(self):\n        self.assertEqual(list(necklaces(4, 2)), [(0, 0, 0, 0), (0, 0, 0, 1), (0, 0, 1, 1), (0, 1, 0, 1), (0, 1, 1, 1), (1, 1, 1, 1)])\n\n    def test_numbered_symbols(self):\n        from sympy import symbols\n        self.assertEqual(numbered_symbols('x', 3), [symbols('x_1'), symbols('x_2'), symbols('x_3')])\n\n    def test_ordered(self):\n        self.assertEqual(list(ordered([1, 2, 3])), [(1, 2, 3)])\n\n    def test_partitions(self):\n        self.assertEqual(list(partitions(4)), [(4,), (3, 1), (2, 2), (2, 1, 1), (1, 1, 1, 1)])\n\n    def test_permutations(self):\n        self.assertEqual(list(permutations([1, 2, 3])), [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)])\n    \n\n    def test_postfixes(self):\n        self.assertEqual(list(postfixes('abc')), ['c', 'bc', 'abc'])\n\n    def test_postorder_traversal(self):\n    \n      from sympy.utilities.iterables import postorder_traversal\n      # Example tree structure from https://en.wikipedia.org/wiki/Tree_traversal#Post-order\n      #\n\n      class Node:\n          def __init__(self, data):\n              self.data = data\n              self.children = []\n\n          def __repr__(self):\n              return f\"{self.data}\"\n      \n      nodeA = Node('A')\n      nodeB = Node('B')\n      nodeC = Node('C')\n      nodeD = Node('D')\n      nodeE = Node('E')\n      nodeF = Node('F')\n\n      nodeA.children = [nodeB, nodeC]\n      nodeB.children = [nodeD, nodeE]\n      nodeC.children = [nodeF]\n\n      self.assertEqual(list(postorder_traversal(nodeA)), ['D', 'E', 'B', 'F', 'C', 'A'])\n\n    def test_prefixes(self):\n        self.assertEqual(list(prefixes('abc')), ['a', 'ab', 'abc'])\n\n    def test_reshape(self):\n        self.assertEqual(reshape([1, 2, 3, 4], (2, 2)), [[1, 2], [3, 4]])\n\n    def test_rotate_left(self):\n        self.assertEqual(rotate_left([1, 2, 3]), [2, 3, 1])\n\n    def test_rotate_right(self):\n        self.assertEqual(rotate_right([1, 2, 3]), [3, 1, 2])\n\n    def test_runs(self):\n        self.assertEqual(list(runs([0, 1, 2, 2, 1, 4, 3, 2, 2])), [[0, 1, 2], [2], [1], [4], [3], [2, 2]])\n\n    def test_sift(self):\n        self.assertEqual(list(sift([1, 2, 3, 4, 5], lambda x: x % 2 ==0)), [2, 4])\n\n    def test_strongly_connected_components(self):\n        self.assertEqual(strongly_connected_components([[1, 2], [2, 3], [3, 1], [4]]), [{1, 2, 3}, {4}])\n\n    def test_subsets(self):\n        self.assertEqual(list(subsets([1, 2, 3])), [frozenset(), frozenset({1}), frozenset({2}), frozenset({3}), frozenset({1, 2}), frozenset({1, 3}), frozenset({2, 3}), frozenset({1, 2, 3})])\n\n    def test_take(self):\n    \n        self.assertEqual(list(take([1, 2, 3, 4], 2)), [1, 2])\n\n\n    def test_topological_sort(self):\n        #Example from https://en.wikipedia.org/wiki/Topological_sorting\n        self.assertEqual(list(topological_sort([('a', 'b'), ('a', 'c'), ('b', 'd'), ('c', 'e'), ('d', 'f'), ('e', 'f')])), ['a', 'b', 'c', 'd', 'e', 'f'])\n\n\n\n    def test_unflatten(self):\n        self.assertEqual(list(unflatten([1, 2, [3, 4], 5])), [1, 2, 3, 4, 5])\n\n    def test_uniq(self):\n        self.assertEqual(list(uniq([1, 2, 2, 3])), [1, 2, 3])\n\n    def test_variations(self):\n        self.assertEqual(list(variations('ABC', 2)), [('A', 'B'), ('A', 'C'), ('B', 'A'), ('B', 'C'), ('C', 'A'), ('C', 'B')])\n\n    def test_ordered_partitions(self):\n        self.assertEqual(list(ordered_partitions(3)), [(3,), (2, 1), (1, 2), (1, 1, 1)])\n\n    def test_rotations(self):\n        self.assertEqual(list(rotations([1,2,3])), [[1, 2, 3], [2, 3, 1], [3, 1, 2]])\n    \n    def test_is_palindromic(self):\n        self.assertTrue(is_palindromic('racecar'))\n        self.assertFalse(is_palindromic('hello'))\n        self.assertTrue(is_palindromic([1,2,3,2,1]))\n        self.assertFalse(is_palindromic([1,2,3,4,5]))\n\n    def test_permute_signs(self):\n      self.assertEqual(list(permute_signs((0, 1, 2))), [(0, 1, 2), (0, -1, 2), (0, 1, -2), (0, -1, -2)])\n\n    def test_signed_permutations(self):\n      self.assertEqual(list(signed_permutations((0, 1, 2))), [(0, 1, 2), (0, -1, 2), (0, 1, -2), (0, -1, -2), (0, 2, 1), (-0, 2, 1), (0, -2, 1), (-0, -2, 1), (1, 0, 2), ( -1, 0, 2),\n    (1, 0, -2), ( -1, 0, -2), (1, 2, 0), ( -1, 2, 0),\n      (1, -2, 0), (-1, -2, 0), (2, 0, 1), ( -2, 0, 1), (2, 0, -1), (-2, 0, -1), (2, 1, 0), (-2, 1, 0), (2, -1, 0), (-2, -1, 0)])\n\n\n\nif __name__ == '__main__':\n    unittest.main()\n\n\n\n"], "sample_108": ["\nimport numpy as np\nfrom sklearn.isotonic import (\n    check_increasing,\n    isotonic_regression,\n    IsotonicRegression,\n    _make_unique,\n)\nfrom sklearn.utils.validation import check_random_state\n\n\ndef test_check_increasing_decreasing():\n    rng = check_random_state(0)\n    x = rng.rand(10)\n    y = x\n    assert check_increasing(x, y) is True\n\n    y = x[::-1]\n    assert check_increasing(x, y) is False\n\n    # Test edge case where correlation is close to 0\n    y = 0.1 * rng.rand(10)\n    assert check_increasing(x, y) is True\n\n    # Test warning when confidence interval spans zero\n    y = 0.1 + 0.5 * x\n    with np.errstate(divide=\"ignore\"):\n        assert check_increasing(x, y) is True\n\n\ndef test_isotonic_regression_basic():\n    x = np.array([1, 2, 3, 4, 5])\n    y = np.array([1, 3, 2, 4, 5])\n\n    y_fit = isotonic_regression(y)\n    assert np.allclose(y_fit, [1, 3, 3, 4, 5])\n\n    y_fit = isotonic_regression(y, increasing=False)\n    assert np.allclose(y_fit, [1, 2, 3, 4, 5])\n\ndef test_isotonic_regression_weighted():\n    x = np.array([1, 2, 3, 4, 5])\n    y = np.array([1, 3, 2, 4, 5])\n\n    weights = np.array([1, 1, 2, 1, 1])\n\n    y_fit = isotonic_regression(y, sample_weight=weights)\n    assert np.allclose(y_fit, [1, 3, 3, 4, 5])\n\ndef test_isotonic_regression_bounds():\n    x = np.array([1, 2, 3, 4, 5])\n    y = np.array([1, 3, 2, 4, 5])\n\n    y_fit = isotonic_regression(y, y_min=2, y_max=4)\n    assert np.allclose(y_fit, [2, 3, 3, 4, 4])\n\ndef test_isotonic_regression_empty_input():\n    y = np.array([])\n    with np.testing.assert_raises(ValueError):\n        isotonic_regression(y)\n\ndef test_isotonic_regression_single_value():\n    y = np.array([1])\n    y_fit = isotonic_regression(y)\n    assert np.allclose(y_fit, [1])\n\ndef test_IsotonicRegression_fit_predict():\n    rng = check_random_state(0)\n    n = 100\n    x = rng.rand(n)\n    y = np.sin(x * 10) + rng.randn(n) * 0.1\n\n    model = IsotonicRegression()\n\n    model.fit(x, y)\n    y_pred = model.predict(x)\n    assert np.allclose(y_pred, model.transform(x), atol=1e-5)\n\ndef test_IsotonicRegression_out_of_bounds():\n    rng = check_random_state(0)\n    x = np.linspace(0, 1, 10)\n    y = x\n    model = IsotonicRegression()\n    model.fit(x, y)\n    \n    x_out_of_bounds = [-1, 2]\n    y_pred_clip = model.predict(x_out_of_bounds) \n    assert np.allclose(y_pred_clip, [0, 1])\n\ndef test_IsotonicRegression_auto_increasing():\n    rng = check_random_state(0)\n    n = 100\n    x = rng.rand(n)\n    y = x\n\n    model = IsotonicRegression(increasing=\"auto\")\n    model.fit(x, y)\n    assert model.increasing_\n\n\ndef test_IsotonicRegression_y_min_y_max():\n    rng = check_random_state(0)\n    n = 100\n    x = rng.rand(n)\n    y = rng.rand(n)\n    y_min = -1\n    y_max = 1\n\n    model = IsotonicRegression(y_min=y_min, y_max=y_max)\n    model.fit(x, y)\n    y_pred = model.predict(x)\n    assert np.all(y_pred >= y_min)\n    assert np.all(y_pred <= y_max)\n\n\n\n"], "sample_23": ["\nfrom django.db.backends.base.creation import (\n    TEST_DATABASE_PREFIX,\n    BaseDatabaseCreation,\n)\nfrom django.conf import settings\nfrom django.db import connections\nfrom django.test import TestCase\nfrom unittest.mock import patch, MagicMock\n\n\nclass BaseDatabaseCreationTests(TestCase):\n    def setUp(self):\n        self.connection = MagicMock()\n        self.connection.alias = 'test_alias'\n        self.connection.settings_dict = {'NAME': 'test_db', 'TEST': {'NAME': None, 'MIGRATE': False}}\n        self.connection.ops = MagicMock()\n        self.connection.ops.quote_name = MagicMock(return_value='quoted_name')\n        settings.DATABASES = {'test_alias': self.connection.settings_dict}\n\n        self.creation = BaseDatabaseCreation(self.connection)\n\n    @patch('django.core.management.call_command')\n    def test_create_test_db_no_clobber(self, mock_call_command):\n        self.creation.create_test_db(autoclobber=False)\n        mock_call_command.assert_called_once_with(\n            'migrate', verbosity=0, interactive=False, database='test_alias', run_syncdb=True\n        )\n\n    @patch('django.core.management.call_command')\n    def test_create_test_db_clobber(self, mock_call_command):\n        self.creation.create_test_db(autoclobber=True)\n        mock_call_command.assert_called_once_with(\n            'migrate', verbosity=0, interactive=False, database='test_alias', run_syncdb=True\n        )\n\n    def test_create_test_db_serialize(self):\n        self.creation.create_test_db(serialize=True)\n        self.assertEqual(self.creation.connection._test_serialized_contents, self.creation.serialize_db_to_string())\n\n    def test_create_test_db_no_serialize(self):\n        self.creation.create_test_db(serialize=False)\n        self.assertFalse(hasattr(self.creation.connection, '_test_serialized_contents'))\n\n    def test_set_as_test_mirror(self):\n        primary_settings = {'NAME': 'primary_db'}\n        self.creation.set_as_test_mirror(primary_settings)\n        self.assertEqual(self.creation.connection.settings_dict['NAME'], 'primary_db')\n\n    def test_serialize_db_to_string(self):\n        self.creation.serialize_db_to_string()\n        # TODO: Add assertions to verify the content of the serialized string\n\n    def test_deserialize_db_from_string(self):\n        data = self.creation.serialize_db_to_string()\n        self.creation.deserialize_db_from_string(data)\n        # TODO: Add assertions to verify the deserialization process\n\n    def test_get_test_db_name(self):\n        self.assertEqual(self.creation._get_test_db_name(),\n                         f'{TEST_DATABASE_PREFIX}{self.connection.settings_dict[\"NAME\"]}')\n\n    def test_get_test_db_name_custom(self):\n        self.connection.settings_dict['TEST']['NAME'] = 'custom_test_db'\n        self.assertEqual(self.creation._get_test_db_name(), 'custom_test_db')\n\n    def test_sql_table_creation_suffix(self):\n        self.assertEqual(self.creation.sql_table_creation_suffix(), '')\n\n    def test_test_db_signature(self):\n       self.assertEqual(self.creation.test_db_signature(),\n                        (self.connection.settings_dict['HOST'],\n                         self.connection.settings_dict['PORT'],\n                         self.connection.settings_dict['ENGINE'],\n                         self.creation._get_test_db_name()))\n\n    def test_destroy_test_db(self):\n        self.creation.destroy_test_db()\n\n    def test_clone_test_db(self):\n        self.creation.clone_test_db(suffix='clone1')\n\n\n"], "sample_122": ["\nimport unittest\nfrom sympy import (Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr)\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt\nfrom sympy.core.numbers import (igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse)\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom sympy import pi\nfrom mpmath.libmp.libmpf import fnan\nfrom sympy import Pi\n\nclass TestNumbers(unittest.TestCase):\n\n    def test_Rational(self):\n        self.assertEqual(Rational(1, 2) + Rational(1, 3), Rational(5, 6))\n        self.assertEqual(Rational(1, 2) * Rational(1, 3), Rational(1, 6))\n        self.assertEqual(Rational(1, 2) / Rational(1, 3), Rational(3, 2))\n\n    def test_Integer(self):\n        self.assertEqual(Integer(1) + Integer(2), Integer(3))\n        self.assertEqual(Integer(1) * Integer(2), Integer(2))\n        self.assertEqual(Integer(1) / Integer(2), Rational(1, 2))\n\n    def test_Float(self):\n        self.assertAlmostEqual(Float(1.2) + Float(2.3), Float(3.5))\n        self.assertAlmostEqual(Float(1.2) * Float(2.3), Float(2.76))\n        self.assertAlmostEqual(Float(1.2) / Float(2.3), Float(0.5217391304347826))\n\n    def test_I(self):\n        self.assertEqual(I * I, -1)\n        self.assertEqual(I + I, 2*I)\n\n    def test_oo(self):\n        self.assertEqual(oo + 1, oo)\n        self.assertEqual(1 + oo, oo)\n        self.assertEqual(oo - 1, oo)\n\n    def test_nan(self):\n        self.assertTrue(nan is nan)\n\n    def test_pi(self):\n        self.assertAlmostEqual(pi, 3.141592653589793)\n\n    def test_E(self):\n        self.assertAlmostEqual(E, 2.718281828459045)\n\n    def test_GoldenRatio(self):\n        self.assertAlmostEqual(GoldenRatio, 1.618033988749895)\n\n    def test_EulerGamma(self):\n        self.assertAlmostEqual(EulerGamma, 0.5772156649015329)\n\n    def test_Catalan(self):\n        self.assertAlmostEqual(Catalan, 0.9159655941772190)\n\n    def test_isqrt(self):\n        self.assertEqual(isqrt(9), 3)\n\n    def test_integer_nthroot(self):\n        self.assertEqual(integer_nthroot(8, 3), 2)\n\n    def test_igcd(self):\n        self.assertEqual(igcd(12, 18), 6)\n\n    def test_ilcm(self):\n        self.assertEqual(ilcm(12, 18), 36)\n\n    def test_igcdex(self):\n        self.assertEqual(igcdex(12, 18), (6, 2, -1))\n\n    def test_mpf_norm(self):\n        self.assertEqual(mpf_norm(1.2345), 1.2345)\n\n    def test_comp(self):\n        self.assertEqual(comp(1, 2), -1)\n        self.assertEqual(comp(2, 1), 1)\n        self.assertEqual(comp(1, 1), 0)\n\n    def test_mod_inverse(self):\n        self.assertEqual(mod_inverse(3, 7), 5)\n\n    def test_sympify_fractions(self):\n        self.assertEqual(sympify(fractions.Fraction(1, 2)), Rational(1, 2))\n\n    def test_sympify_complex(self):\n        self.assertEqual(sympify(complex(1, 2)), 1 + 2*I)\n\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_98": ["\nimport unittest\nimport numpy as np\nfrom scipy import sparse as sp\nfrom sklearn.utils.testing import assert_array_equal\nfrom sklearn.utils.testing import assert_raises\nfrom sklearn.utils.testing import raises\n\nfrom sklearn.preprocessing.label import LabelBinarizer\nfrom sklearn.preprocessing.label import MultiLabelBinarizer\nfrom sklearn.preprocessing.label import LabelEncoder\n\nclass TestLabelBinarizer(unittest.TestCase):\n\n    def test_fit_transform(self):\n        lb = LabelBinarizer()\n        y = [0, 1, 2, 0, 1]\n        expected = np.array([[1, 0, 0],\n                            [0, 1, 0],\n                            [0, 0, 1],\n                            [1, 0, 0],\n                            [0, 1, 0]])\n        assert_array_equal(lb.fit_transform(y), expected)\n\n    def test_transform(self):\n        lb = LabelBinarizer()\n        lb.fit([0, 1, 2])\n        y = [0, 1, 2, 0, 1]\n        expected = np.array([[1, 0, 0],\n                            [0, 1, 0],\n                            [0, 0, 1],\n                            [1, 0, 0],\n                            [0, 1, 0]])\n        assert_array_equal(lb.transform(y), expected)\n\n    def test_inverse_transform(self):\n        lb = LabelBinarizer()\n        lb.fit([0, 1, 2])\n        y = np.array([[1, 0, 0],\n                      [0, 1, 0],\n                      [0, 0, 1]])\n        assert_array_equal(lb.inverse_transform(y), [0, 1, 2])\n\n    def test_sparse_output(self):\n        lb = LabelBinarizer(sparse_output=True)\n        y = [0, 1, 2, 0, 1]\n        expected = sp.csr_matrix([[1, 0, 0],\n                                [0, 1, 0],\n                                [0, 0, 1],\n                                [1, 0, 0],\n                                [0, 1, 0]])\n        assert_array_equal(lb.fit_transform(y).toarray(), expected.toarray())\n        \n\n    def test_pos_label(self):\n        lb = LabelBinarizer(neg_label=-1, pos_label=1)\n        lb.fit([0, 1, 2])\n        y = [0, 1, 2, 0, 1]\n        expected = np.array([[-1, 0, 0],\n                            [0, 1, 0],\n                            [0, 0, 1],\n                            [-1, 0, 0],\n                            [0, 1, 0]])\n        assert_array_equal(lb.transform(y), expected)\n\nclass TestMultiLabelBinarizer(unittest.TestCase):\n\n    def test_fit_transform(self):\n        mlb = MultiLabelBinarizer()\n        y = [[1, 2], [3,], [1, 2, 3]]\n        expected = np.array([[1, 1, 0],\n                            [0, 0, 1],\n                            [1, 1, 1]])\n\n        assert_array_equal(mlb.fit_transform(y), expected)\n\n    def test_transform(self):\n        mlb = MultiLabelBinarizer()\n        mlb.fit([[1, 2], [3,], [1, 2, 3]])\n        y = [[1, 2], [3,], [1, 2, 3]]\n        expected = np.array([[1, 1, 0],\n                            [0, 0, 1],\n                            [1, 1, 1]])\n        assert_array_equal(mlb.transform(y), expected)\n\n    def test_inverse_transform(self):\n        mlb = MultiLabelBinarizer()\n        mlb.fit([[1, 2], [3,], [1, 2, 3]])\n        y = np.array([[1, 1, 0],\n                      [0, 0, 1],\n                      [1, 1, 1]])\n        assert_array_equal(mlb.inverse_transform(y), [[1, 2], [3,], [1, 2, 3]])\n\n    def test_sparse_output(self):\n        mlb = MultiLabelBinarizer(sparse_output=True)\n        y = [[1, 2], [3,], [1, 2, 3]]\n        expected = sp.csr_matrix([[1, 1, 0],\n                                [0, 0, 1],\n                                [1, 1, 1]])\n        assert_array_equal(mlb.fit_transform(y).toarray(), expected.toarray())\n\n    def test_classes(self):\n        mlb = MultiLabelBinarizer(classes=[1, 2, 3, 4])\n        y = [[1, 2], [3,], [1, 2, 3]]\n        expected = np.array([[1, 1, 0, 0],\n                            [0, 0, 1, 0],\n                            [1, 1, 1, 0]])\n        assert_array_equal(mlb.fit_transform(y), expected)\n\nclass TestLabelEncoder(unittest.TestCase):\n\n    def test_fit_transform(self):\n       le = LabelEncoder()\n       y = ['a', 'b', 'a', 'c']\n       expected = np.array([0, 1, 0, 2])\n       assert_array_equal(le.fit_transform(y), expected)\n\n    def test_inverse_transform(self):\n       le = LabelEncoder()\n       le.fit(['a', 'b', 'a', 'c'])\n       y = np.array([0, 1, 0, 2])\n       assert_array_equal(le.inverse_transform(y), ['a', 'b', 'a', 'c'])\n\n    def test_classes_(self):\n       le = LabelEncoder()\n       y = ['a', 'b', 'a', 'c']\n       le.fit(y)\n       assert_array_equal(le.classes_, ['a', 'b', 'c'])\n\n   \n\ndef test_label_binarize_multiclass():\n    y = [1, 2, 3, 4, 5]\n    expected = np.array([[0, 1, 0, 0, 0],\n                        [0, 0, 1, 0, 0],\n                        [0, 0, 0, 1, 0],\n                        [0, 0, 0, 0, 1],\n                        [0, 0, 0, 0, 1]])\n    assert_array_equal(label_binarize(y, classes=[1, 2, 3, 4, 5]), expected)\n\ndef test_label_binarize_binary():\n    y = [0, 1, 0, 1]\n    expected = np.array([[1, 0],\n                        [0, 1],\n                        [1, 0],\n                        [0, 1]])\n    assert_array_equal(label_binarize(y, classes=[0, 1]), expected)\n\ndef test_label_binarize_multilabel():\n    y = [[1, 2], [3,], [1, 2, 3]]\n    expected = np.array([[1, 1, 0],\n                        [0, 0, 1],\n                        [1, 1, 1]])\n    assert_array_equal(label_binarize(y, classes=[1, 2, 3]), expected)\n\ndef test_inverse_binarize_thresholding_binary():\n    y = np.array([[0.9, 0.1],[0.2, 0.8]])\n    expected = [0, 1]\n    assert_array_equal(_inverse_binarize_thresholding(y, 'binary', [0,1], 0.5), expected)\n\ndef test_inverse_binarize_thresholding_multiclass():\n    y = np.array([[0.9, 0.1, 0.],\n                  [0., 0.2, 0.8],\n                  [0.5, 0.4, 0.1]])\n    \n    expected = [0, 2, 0]\n    assert_array_equal(_inverse_binarize_thresholding(y, 'multiclass', [0,1,2], 0.5), expected)\n\ndef test_inverse_binarize_thresholding_multilabel():\n    y = np.array([[0.9, 0.1, 0.],\n                  [0., 0.2, 0.8],\n                  [0.5, 0.4, 0.1]])\n    expected = [[0, 1],\n                [2],\n                [0, 1, 2]]\n    assert_array_equal(_inverse_binarize_thresholding(y, 'multilabel-indicator', [0,1,2], 0.5), expected)\n\ndef test_inverse_binarize_multiclass():\n\n    y = np.array([[1, 0, 0],\n                  [0, 1, 0],\n                  [0, 0, 1],\n                  [1, 1, 0]])\n\n    expected = [0, 1, 2, 0]\n    assert_array_equal(_inverse_binarize_multiclass(y, [0,1,2]), expected)\n"], "sample_144": ["\nimport pytest\nfrom sympy import (\n    Eq, sqrt, sin, cos, exp, log, pi, S, I,\n    Symbol, symbols, Matrix,\n    Integer, Float, Rational, Function, Piecewise,\n    Sum, Product, Integral,\n    lambdify, diff, integrate, solve,\n    solve,\n    Piecewise,\n    ImmutableMatrix,\n    eye\n)\nfrom sympy.printing.pycode import (\n    pycode, NumPyPrinter, SciPyPrinter,\n    MpmathPrinter, PythonCodePrinter, SymPyPrinter\n)\n\n# Setup\nx, y, z, t = symbols('x y z t')\n\ndef test_basic_arithmetic():\n    assert pycode(x + y) == 'x + y'\n    assert pycode(x - y) == 'x - y'\n    assert pycode(x * y) == 'x*y'\n    assert pycode(x / y) == 'x/y'\n    assert pycode(x**y) == 'x**y'\n    assert pycode(x**2 + 2*x*y + y**2) == '(x**2) + 2*x*y + (y**2)'\n\ndef test_functions():\n    assert pycode(sin(x)) == 'math.sin(x)'\n    assert pycode(cos(x)) == 'math.cos(x)'\n    assert pycode(exp(x)) == 'math.exp(x)'\n    assert pycode(log(x)) == 'math.log(x)'\n    assert pycode(sqrt(x)) == 'math.sqrt(x)'\n\ndef test_constants():\n    assert pycode(pi) == 'math.pi'\n    assert pycode(S.Infinity) == 'float(\"inf\")'\n    assert pycode(S.NegativeInfinity) == 'float(\"-inf\")'\n    assert pycode(I) == '1j'\n\ndef test_matrices():\n    M = Matrix([[1, 2], [3, 4]])\n    assert pycode(M) == 'Matrix([[1, 2], [3, 4]])'\ndef test_complex_numbers():\n    assert pycode(2 + 3*I) == '(2 + 3j)'\n\ndef test_tuples():\n    assert pycode((x, y)) == '(x, y)'\n\n\ndef test_numpy_printing():\n    printer = NumPyPrinter()\n    assert printer.doprint(x + y) == 'x + y'\n    assert printer.doprint(sin(x)) == 'numpy.sin(x)'\n    assert printer.doprint(eye(3)) == 'numpy.eye(3)'\n    assert printer.doprint(\n        Matrix([[1, 2], [3, 4]]).T\n    ) == 'numpy.array([[1, 3], [2, 4]])'\n\ndef test_scipy_printing():\n    printer = SciPyPrinter()\n    assert printer.doprint(x + y) == 'x + y'\n    assert printer.doprint(\n        sin(x)\n    ) == 'numpy.sin(x)'\n    assert printer.doprint(\n        gamma(x)\n    ) == 'scipy.special.gamma(x)'\n    assert printer.doprint(\n        eye(3)\n    ) == 'numpy.eye(3)'\n    \ndef test_mpmath_printing():\n    printer = MpmathPrinter()\n    assert printer.doprint(x + y) == 'x + y'\n    assert printer.doprint(sin(x)) == 'mpmath.sin(x)'\n    assert printer.doprint(pi) == 'mpmath.pi'\n    assert printer.doprint(Float(1.23)) == 'mpf(\"1.23\")'\n\ndef test_sympy_printing():\n    printer = SymPyPrinter()\n    assert printer.doprint(x + y) == 'sympy.Add(x, y)'\n    assert printer.doprint(sin(x)) == 'sympy.sin(x)'\n    assert printer.doprint(pi) == 'sympy.pi'\n\n\n\ndef test_piecewise():\n    expr = Piecewise((x, x < 0), (y, True))\n    assert pycode(expr) == 'Piecewise((x, x < 0), (y, True))'\n\ndef test_lambdify():\n    f = lambdify(x, x**2, \"numpy\")\n    assert f(2) == 4\n\n    f = lambdify((x, y), x + y, \"numpy\")\n    assert f(1, 2) == 3\n\ndef test_solve():\n    x = Symbol('x')\n    eq = Eq(x**2 - 4, 0)\n    assert set(solve(eq, x)) == {2, -2}\n\ndef test_integrate():\n    x = Symbol('x')\n    assert integrate(x**2, x) == x**3/3\n"], "sample_17": ["\nfrom datetime import datetime, timedelta\nfrom unittest.mock import patch\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.tokens import PasswordResetTokenGenerator, default_token_generator\nfrom django.utils.timezone import now\n\n\nclass PasswordResetTokenGeneratorTests(TestCase):\n\n    def test_make_token(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        token = default_token_generator.make_token(user)\n        self.assertIsInstance(token, str)\n\n    def test_check_token_valid(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        token = default_token_generator.make_token(user)\n        self.assertTrue(default_token_generator.check_token(user, token))\n\n    def test_check_token_invalid_user(self):\n        user1 = User.objects.create_user(username='testuser1', password='password')\n        user2 = User.objects.create_user(username='testuser2', password='password')\n        token = default_token_generator.make_token(user1)\n        self.assertFalse(default_token_generator.check_token(user2, token))\n\n    def test_check_token_invalid_token(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        self.assertFalse(default_token_generator.check_token(user, 'invalid-token'))\n\n    def test_check_token_expired(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        token = default_token_generator.make_token(user)\n        with patch('django.utils.timezone.now') as mock_now:\n            mock_now.return_value = now() + timedelta(days=settings.PASSWORD_RESET_TIMEOUT + 1)\n            self.assertFalse(default_token_generator.check_token(user, token))\n\n    def test_check_token_legacy_format(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        token = default_token_generator.make_token(user)\n        \n        # Manually modify the token to simulate a legacy format\n        parts = token.split('-')\n        parts[1] = parts[1][:32]  # Truncate the hash to simulate legacy length\n        token = '-'.join(parts)\n        \n        # Assuming the legacy check is implemented correctly\n        self.assertTrue(default_token_generator.check_token(user, token))\n\n    def test_make_token_with_timestamp(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        timestamp = 1678886400  # Example timestamp\n        token = default_token_generator._make_token_with_timestamp(user, timestamp)\n        self.assertIsInstance(token, str)\n\n    def test_make_hash_value(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        timestamp = 1678886400\n        hash_value = default_token_generator._make_hash_value(user, timestamp)\n        self.assertIsInstance(hash_value, str)\n\n    def test_num_seconds(self):\n        dt = datetime(2023, 3, 15, 10, 0, 0)\n        seconds = default_token_generator._num_seconds(dt)\n        self.assertIsInstance(seconds, int)\n\n    def test_now(self):\n        now_time = default_token_generator._now()\n        self.assertIsInstance(now_time, datetime)\n\n\n\n"], "sample_25": ["\nfrom django.db import models, connection\nfrom django.db.models import Q, F, Count, Prefetch\nfrom django.db.models.query import (\n    RawQuerySet, QuerySet, Prefetch,\n    RelatedPopulator, get_related_populators,\n)\nfrom django.test import TestCase, skipUnlessDBFeature\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\nclass Book(models.Model):\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n    title = models.CharField(max_length=100)\n\nclass Article(models.Model):\n    title = models.CharField(max_length=100)\n    book = models.ForeignKey(Book, on_delete=models.CASCADE, null=True)\n\nclass Comment(models.Model):\n    article = models.ForeignKey(Article, on_delete=models.CASCADE)\n    text = models.TextField()\n\nclass MyQuerySet(QuerySet):\n    def my_custom_filter(self):\n        return self.filter(title__startswith='My')\n\nclass MyModel(models.Model):\n    objects = MyQuerySet.as_manager()\n\nclass QuerySetTests(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        cls.author1 = Author.objects.create(name='Author 1')\n        cls.author2 = Author.objects.create(name='Author 2')\n        cls.book1 = Book.objects.create(author=cls.author1, title='Book 1')\n        cls.book2 = Book.objects.create(author=cls.author2, title='Book 2')\n        cls.article1 = Article.objects.create(title='Article 1', book=cls.book1)\n        cls.article2 = Article.objects.create(title='Article 2', book=cls.book2)\n\n    def test_select_related_single_level(self):\n        books = Book.objects.select_related('author')\n        self.assertTrue(all(book.author is not None for book in books))\n\n    def test_prefetch_related(self):\n        books = Book.objects.prefetch_related('article_set__comment_set')\n        self.assertTrue(all(book.article_set.all() is not None for book in books))\n\n    def test_prefetch_related_empty(self):\n        books = Book.objects.prefetch_related('article_set__comment_set')\n        self.assertTrue(all(book.article_set.all() is not None for book in books))\n\n    def test_prefetch_related_nested(self):\n        books = Book.objects.prefetch_related('author__article_set')\n        self.assertTrue(all(book.author.article_set.all() is not None for book in books))\n\n    def test_custom_manager(self):\n        qs = MyModel.objects.create(title='My Title')\n        self.assertEqual(qs.my_custom_filter().count(), 1)\n\n    def test_raw_query_set(self):\n        with connection.cursor() as cursor:\n            cursor.execute(\"INSERT INTO django_tests_author (name) VALUES (%s)\", ('Author 3',))\n        author = Author.objects.raw('SELECT * FROM django_tests_author WHERE name = %s', ('Author 3',)).get()\n        self.assertEqual(author.name, 'Author 3')\n\n    def test_prefetch_related_with_annotation(self):\n        books = Book.objects.annotate(num_articles=Count('article')).prefetch_related(\n            Prefetch('article_set', queryset=Article.objects.filter(title__startswith='Article'))\n        )\n        for book in books:\n            self.assertEqual(len(book.article_set.all()), book.num_articles)\n\n    def test_prefetch_related_with_complex_filter(self):\n        qs = Book.objects.prefetch_related(Prefetch('article_set', queryset=Article.objects.filter(\n            Q(title__startswith='Article') | Q(book__author__name='Author 1'))))\n        self.assertTrue(all(book.article_set.all() is not None for book in qs))\n\n    def test_prefetch_related_deep(self):\n        qs = Book.objects.prefetch_related(\n            Prefetch('article_set', queryset=Article.objects.prefetch_related('comment_set'))\n        )\n        self.assertTrue(all(book.article_set.all() is not None for book in qs))\n\n    \n\n"], "sample_39": ["\nfrom unittest import mock\nfrom django.conf import settings\nfrom django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\nfrom django.urls import (\n    NoReverseMatch,\n    Resolver404,\n    ResolverMatch,\n    URLPattern,\n    URLResolver,\n    get_callable,\n    get_resolver,\n    include,\n    path,\n    re_path,\n    resolve,\n    reverse,\n    reverse_lazy,\n)\n\nfrom django.urls.converters import register_converter\n\nclass TestURLResolver:\n\n    def test_resolver_match(self):\n        resolver = URLResolver(RegexPattern(r'^/'), [\n            URLPattern(RegexPattern(r'^some/(?P<pk>\\d+)/$'), 'some_view', name='some-view'),\n            URLPattern(RegexPattern(r'^other/$'), 'other_view', name='other-view'),\n        ])\n        match = resolver.resolve('/some/1/')\n        self.assertEqual(match.func, 'some_view')\n        self.assertEqual(match.args, ())\n        self.assertEqual(match.kwargs, {'pk': '1'})\n        self.assertEqual(match.url_name, 'some-view')\n\n    def test_reverse(self):\n        resolver = URLResolver(RegexPattern(r'^'), [\n            URLPattern(RegexPattern(r'^some/(?P<pk>\\d+)/$'), 'some_view', name='some-view'),\n        ])\n        self.assertEqual(resolver.reverse('some-view', args=[1]), '/some/1/')\n\n    \n\n    def test_reverse_with_namespace(self):\n\n        resolver = URLResolver(RegexPattern(r'^'), [\n            URLResolver(RegexPattern(r'^app/'), [\n                URLPattern(RegexPattern(r'^view/(?P<pk>\\d+)/$'), 'app.views.some_view', name='some-view'),\n            ], namespace='app'),\n\n        ])\n\n        self.assertEqual(resolver.reverse('app:some-view', args=[1]), '/app/view/1/')\n\n\n\n    def test_empty_url_patterns(self):\n        resolver = URLResolver(RegexPattern(r'^/'), [])\n\n        with self.assertRaises(Resolver404):\n            resolver.resolve('/some/path/')\n\n    def test_reverse_missing_view(self):\n        resolver = URLResolver(RegexPattern(r'^/'), [])\n\n        with self.assertRaises(NoReverseMatch):\n            resolver.reverse('nonexistent_view')\n\n    def test_resolver_with_include(self):\n        # Create a sub-resolver\n        sub_resolver = URLResolver(RegexPattern(r'^subpath/'), [\n            URLPattern(RegexPattern(r'^view/'), 'included_view', name='included-view'),\n        ])\n\n        # Create the main resolver, including the sub-resolver\n        resolver = URLResolver(RegexPattern(r'^/'), [\n            include(sub_resolver),\n        ])\n\n        match = resolver.resolve('/subpath/view/')\n        self.assertEqual(match.func, 'included_view')\n\n    def test_resolver_with_namespace_include(self):\n        # Create a sub-resolver with a namespace\n        sub_resolver = URLResolver(RegexPattern(r'^'), [\n            URLPattern(RegexPattern(r'^view/'), 'included_view', name='included-view'),\n        ], namespace='sub_namespace')\n\n        # Create the main resolver, including the sub-resolver\n        resolver = URLResolver(RegexPattern(r'^/'), [\n            include(sub_resolver)\n        ])\n\n        match = resolver.resolve('/view/')\n        self.assertEqual(match.func, 'included_view')\n        self.assertEqual(match.url_name, 'sub_namespace:included-view')\n\n    def test_default_kwargs(self):\n        resolver = URLResolver(RegexPattern(r'^/'), [\n            URLPattern(RegexPattern(r'^view/$'), 'some_view', default_kwargs={'param': 'value'}),\n        ])\n\n        match = resolver.resolve('/view/')\n        self.assertEqual(match.kwargs, {'param': 'value'})\n\n    def test_resolver_with_language_prefix(self):\n\n        settings.LANGUAGE_CODE = 'en'\n        resolver = URLResolver(\n            RegexPattern(r'^'), [\n                URLPattern(RegexPattern(r'^en/view/$'), 'view', name='view'),\n            ]\n        )\n        match = resolver.resolve('/en/view/')\n        self.assertEqual(match.func, 'view')\n\n    def test_url_pattern_name_with_colon(self):\n        with self.assertRaises(Warning):\n            URLPattern(RegexPattern(r'^/'), 'view:name')\n\n    def test_check_pattern_startswith_slash(self):\n\n        with self.assertRaises(Warning) as cm:\n            URLPattern(RegexPattern(r'/view/'), 'view')\n        self.assertIn(\"Your URL pattern '/view/' has a route beginning with a '/'. Remove this slash as it is unnecessary.\", cm.exception.args[0])\n\n\n\n    def test_route_pattern_regex_with_dollar(self):\n        with self.assertRaises(ImproperlyConfigured) as cm:\n            RoutePattern(route=r'^view/$')\n\n        self.assertIn(\"'view/' uses a route ending with a '$'. Remove it to avoid problems including URLs or use include() to handle the trailing slash.\", cm.exception.args[0])\n\n    def test_route_pattern_regex_with_invalid_converter(self):\n        with self.assertRaises(ImproperlyConfigured) as cm:\n            RoutePattern(route=r'^view/<invalid_converter:pk>/$')\n        self.assertIn(\"URL route 'view/<invalid_converter:pk>/$' uses invalid converter 'invalid_converter'.\", cm.exception.args[0])\n\n    def test_locale_prefix_pattern(self):\n        settings.LANGUAGE_CODE = 'en'\n        pattern = LocalePrefixPattern()\n        \n        self.assertEqual(pattern.language_prefix, 'en/')\n\n        \n        settings.LANGUAGE_CODE = 'fr'\n\n        pattern = LocalePrefixPattern()\n        self.assertEqual(pattern.language_prefix, 'fr/')\n\n    def test_named_groups_in_regex(self):\n        resolver = URLResolver(RegexPattern(r'^/'), [\n\n            URLPattern(RegexPattern(r'^users/(?P<pk>\\d+)/$'), 'user_detail', name='user_detail'),\n        ])\n        match = resolver.resolve('/users/1/')\n        self.assertEqual(match.kwargs['pk'], '1')\n\n    def test_get_resolver_with_urlconf(self):\n        \n        resolver = get_resolver(None)\n        self.assertEqual(resolver.__class__, URLResolver)\n\n    def test_urlresolver_populate(self):\n        resolver = URLResolver(RegexPattern(r'^/'), [\n            URLPattern(RegexPattern(r'^view/$'), 'some_view', name='some-view'),\n\n        ])\n        resolver._populate()\n\n        self.assertEqual(resolver._reverse_dict, {\n            'some-view': [\n                (RegexPattern(r'^view/$'), r'^view/$', {}, {})\n            ],\n\n        })\n\n\n\n"], "sample_58": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nfrom django.core.management.base import (\n    BaseCommand,\n    CommandError,\n    AppCommand,\n    LabelCommand,\n)\nfrom django.core.management.color import no_style\nfrom django.core.management.utils import get_random_secret_key\nfrom django.apps import apps\nfrom django.db import DEFAULT_DB_ALIAS\n\nclass TestBaseCommand(unittest.TestCase):\n\n    def test_create_parser(self):\n        command = BaseCommand()\n        parser = command.create_parser(\"manage.py\", \"testcommand\")\n        self.assertIsNotNone(parser)\n\n    def test_add_base_argument(self):\n        command = BaseCommand()\n        parser = command.create_parser(\"manage.py\", \"testcommand\")\n        command.add_base_argument(parser, \"--test\", action=\"store_true\")\n        self.assertIn(\"--test\", [arg for arg in parser._actions])\n\n    def test_print_help(self):\n        command = BaseCommand()\n        command.print_help(\"manage.py\", \"testcommand\")\n\n    def test_run_from_argv(self):\n        command = BaseCommand()\n        command._called_from_command_line = True\n        with patch('sys.argv', ['manage.py', 'testcommand']):\n            command.run_from_argv([])\n\n    def test_execute(self):\n        command = BaseCommand()\n        command.execute()\n\n    def test_check(self):\n        command = BaseCommand()\n        command.check(tags=[Tags.migrations])\n\n    def test_check_migrations(self):\n        command = BaseCommand()\n        command.check_migrations()\n\n    def test_handle(self):\n        command = BaseCommand()\n        with self.assertRaises(NotImplementedError):\n            command.handle()\n\nclass TestAppCommand(unittest.TestCase):\n\n    def test_add_arguments(self):\n        command = AppCommand()\n        parser = command.create_parser(\"manage.py\", \"testcommand\")\n        self.assertIn(\"args\", [arg for arg in parser._actions])\n\n    def test_handle(self):\n        command = AppCommand()\n        with self.assertRaises(NotImplementedError):\n            command.handle(\"test_app\")\n\n    def test_handle_app_config(self):\n        command = AppCommand()\n        with self.assertRaises(NotImplementedError):\n            command.handle_app_config(MagicMock())\nclass TestLabelCommand(unittest.TestCase):\n\n    def test_add_arguments(self):\n        command = LabelCommand()\n        parser = command.create_parser(\"manage.py\", \"testcommand\")\n        self.assertIn(\"args\", [arg for arg in parser._actions])\n\n    def test_handle(self):\n        command = LabelCommand()\n        with self.assertRaises(NotImplementedError):\n            command.handle(\"test_label\")\n\n    def test_handle_label(self):\n        command = LabelCommand()\n        with self.assertRaises(NotImplementedError):\n            command.handle_label(\"test_label\")\n\n"], "sample_107": ["\nimport numpy as np\nfrom numpy.testing import assert_allclose, assert_array_equal\nfrom sklearn.metrics.cluster import homogeneity_score\nfrom sklearn.metrics.cluster import completeness_score\nfrom sklearn.metrics.cluster import v_measure_score\nfrom sklearn.metrics.cluster import adjusted_mutual_info_score\nfrom sklearn.metrics.cluster import normalized_mutual_info_score\nfrom sklearn.metrics.cluster import mutual_info_score\nfrom sklearn.metrics.cluster import fowlkes_mallows_score\nfrom sklearn.metrics.cluster import entropy\nfrom sklearn.utils.estimator_checks import check_clusterings\n\n\ndef test_homogeneity_completeness_v_measure():\n    labels_true = np.array([0, 0, 1, 1, 2, 2])\n    labels_pred = np.array([0, 0, 1, 1, 2, 2])\n    homo = homogeneity_score(labels_true, labels_pred)\n    assert_allclose(homo, 1.0)\n\n    labels_pred = np.array([0, 1, 0, 1, 2, 2])\n    comp = completeness_score(labels_true, labels_pred)\n    assert_allclose(comp, 1.0)\n\n    v_measure = v_measure_score(labels_true, labels_pred)\n    assert_allclose(v_measure, 1.0)\n\ndef test_adjusted_mutual_info_score():\n    labels_true = [1, 1, 1, 2, 2, 2]\n    labels_pred = [1, 1, 2, 2, 2, 1]\n    ami = adjusted_mutual_info_score(labels_true, labels_pred)\n    assert_allclose(ami, 0.25)\n\ndef test_normalized_mutual_info_score():\n    labels_true = np.array([0, 0, 1, 1, 2, 2])\n    labels_pred = np.array([0, 0, 1, 1, 2, 2])\n    nmi = normalized_mutual_info_score(labels_true, labels_pred)\n    assert_allclose(nmi, 1.0)\n\n    labels_pred = np.array([0, 1, 0, 1, 2, 2])\n    nmi = normalized_mutual_info_score(labels_true, labels_pred)\n    assert_allclose(nmi, 0.6666666666666666)\n\ndef test_mutual_info_score():\n    labels_true = [1, 1, 1, 2, 2, 2]\n    labels_pred = [1, 1, 2, 2, 2, 1]\n    mi = mutual_info_score(labels_true, labels_pred)\n    assert_allclose(mi, 0.4182737735163924)\n\ndef test_fowlkes_mallows_score():\n    labels_true = [0, 0, 1, 1, 2, 2]\n    labels_pred = [0, 0, 1, 1, 2, 2]\n    fmi = fowlkes_mallows_score(labels_true, labels_pred)\n    assert_allclose(fmi, 1.0)\n\ndef test_entropy():\n    labels = np.array([0, 0, 1, 1, 2, 2])\n    ent = entropy(labels)\n    assert_allclose(ent, 1.0986122886681096)\n\n    labels = np.array([0, 0, 0])\n    ent = entropy(labels)\n    assert_allclose(ent, 0)\n\ndef test_check_clusterings():\n    labels_true = [0, 0, 1, 1, 2, 2]\n    labels_pred = [0, 0, 1, 1, 2, 2]\n    check_clusterings(labels_true, labels_pred)\n\n"], "sample_146": ["\nfrom sympy.core.function import (\n    expand, expand_log, expand_mul, expand_power_base, expand_power_exp,\n    expand_trig, expand_complex, expand_basic, expand_rational, Function,\n    count_ops, nfloat, _coeff_isneg)\nfrom sympy.core.symbol import symbols, Symbol, Dummy\nfrom sympy.core.expr import Expr\nfrom sympy.core.numbers import Integer, Rational, Float\nfrom sympy.testing.pytest import raises \nfrom sympy.functions import sin, cos, log, exp\nfrom sympy.abc import x, y, z\nfrom sympy.matrices import Matrix\n\ndef test_expand_mul():\n    assert expand_mul(x*(x+1)) == x**2 + x\n    assert expand_mul((x+1)*(x+2)) == x**2 + 3*x + 2\n    assert expand_mul((x+1)*(x+2)*(x+3)) == x**3 + 6*x**2 + 11*x + 6\n    assert expand_mul(x*(y + 1)) == x*y + x\n\ndef test_expand_power_base():\n    assert expand_power_base((x*y)**2) == x**2*y**2\n    assert expand_power_base((2*x)**y) == 2**y*x**y\n    assert expand_power_base((x*y)**z) == x**z*y**z\n\ndef test_expand_power_exp():\n    assert expand_power_exp(x**(y + 2)) == x**2*x**y\n\ndef test_expand_log():\n    assert expand_log(log(x*y)) == log(x) + log(y)\n    assert expand_log(exp(x+y)) == exp(x)*exp(y)\n\ndef test_expand_trig():\n    assert expand_trig(sin(x+y)) == sin(x)*cos(y) + sin(y)*cos(x)\n    assert expand_trig(cos(x+y)) == cos(x)*cos(y) - sin(x)*sin(y)\n\ndef test_expand_complex():\n    assert expand_complex(exp(z)) == cos(im(z)) + I*sin(im(z))*exp(re(z))\n    assert expand_complex(sqrt(I)) == sqrt(2)/2 + sqrt(2)*I/2\n\ndef test_count_ops():\n    assert count_ops(x + y) == 1\n    assert count_ops(x*y) == 1\n    assert count_ops(x**2) == 1\n\ndef test_nfloat():\n    assert nfloat(x**4 + x/2 + cos(3.141592653589793/3) + 1 + sqrt(y)) == x**4 + 0.5*x + sqrt(y) + 1.5\n\ndef test_nfloat_exponent():\n    assert nfloat(x**4 + sqrt(y), exponent=True) == x**4.0 + y**0.5\n    \ndef test_expand_basic():\n    assert expand_basic((x+y)**2) == x**2 + 2*x*y + y**2\n\ndef test_expand_rational():\n    assert expand_rational((x+1)/(x-1)) == 1 + 2/(x-1)\n\n\n\n"], "sample_35": ["\nfrom unittest.mock import patch, mock_open\nfrom django.core.management import CommandError, call_command\nfrom django.utils.datastructures import OrderedSet\n\nfrom django.core.management.commands.shell import Command\n\nclass ShellCommandTests(unittest.TestCase):\n\n    def test_no_interface_specified_defaults_to_shells(self):\n        with patch('django.core.management.commands.shell.Command.ipython'), \\\n             patch('django.core.management.commands.shell.Command.bpython'), \\\n             patch('django.core.management.commands.shell.Command.python'):\n             call_command('shell')\n\n    @patch('django.core.management.commands.shell.Command.ipython')\n    def test_interface_ipython(self, mock_ipython):\n        call_command('shell', interface='ipython')\n        mock_ipython.assert_called_once_with({})\n\n    @patch('django.core.management.commands.shell.Command.bpython')\n    def test_interface_bpython(self, mock_bpython):\n        call_command('shell', interface='bpython')\n        mock_bpython.assert_called_once_with({})\n\n    @patch('django.core.management.commands.shell.Command.python')\n    def test_interface_python(self, mock_python):\n        call_command('shell', interface='python')\n        mock_python.assert_called_once_with({})\n\n    def test_command_execution(self):\n        with patch('sys.stdin.isatty', return_value=False), \\\n             patch('sys.stdin.read', return_value='print(\"Hello world!\")'), \\\n             patch('builtins.exec') as mock_exec:\n             call_command('shell', command='print(\"Hello world!\")')\n             mock_exec.assert_called_once_with('print(\"Hello world!\")', globals())\n\n    def test_stdin_execution(self):\n        with patch('sys.platform', 'linux'), \\\n             patch('select.select', return_value=([sys.stdin], [], [])), \\\n             patch('sys.stdin.read', return_value='print(\"Hello from stdin!\")'), \\\n             patch('builtins.exec') as mock_exec:\n             call_command('shell')\n             mock_exec.assert_called_once_with('print(\"Hello from stdin!\")', globals())\n\n    @patch('os.environ.get', return_value='/path/to/pythonstartup')\n    @patch('os.path.isfile', return_value=True)\n    @patch('builtins.open', new_callable=mock_open, read_data='print(\"Hello from pythonstartup!\")')\n    def test_python_startup_file_executes(self, mock_open, mock_isfile, mock_get):\n        with patch('django.core.management.commands.shell.Command.python') as mock_python:\n           call_command('shell')\n           mock_python.assert_called_once_with({'no_startup': False})\n \n    @patch('os.environ.get', return_value=None)\n    @patch('os.path.expanduser', return_value='/path/to/.pythonrc.py')\n    @patch('os.path.isfile', return_value=True)\n    @patch('builtins.open', new_callable=mock_open, read_data='print(\"Hello from .pythonrc.py!\")')\n    def test_pythonrc_file_executes(self, mock_open, mock_isfile, mock_expanduser, mock_get):\n        with patch('django.core.management.commands.shell.Command.python') as mock_python:\n           call_command('shell')\n           mock_python.assert_called_once_with({'no_startup': False})\n\n    @patch('os.environ.get', return_value=None)\n    @patch('os.path.expanduser', return_value='/path/to/.pythonrc.py')\n    @patch('os.path.isfile', return_value=False)\n    def test_pythonrc_file_not_found(self, mock_isfile, mock_expanduser, mock_get):\n        with patch('django.core.management.commands.shell.Command.python') as mock_python:\n           call_command('shell')\n           mock_python.assert_called_once_with({'no_startup': False})\n \n\n\n"], "sample_79": ["\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nimport pytest\n\nfrom xarray.core.formatting import (\n    format_timestamp,\n    format_timedelta,\n    format_item,\n    format_items,\n    format_array_flat,\n    inline_dask_repr,\n    inline_sparse_repr,\n    inline_variable_array_repr,\n    summarize_variable,\n    _summarize_coord_multiindex,\n    _summarize_coord_levels,\n    summarize_datavar,\n    summarize_coord,\n    summarize_attr,\n    EMPTY_REPR,\n    _get_col_items,\n    _calculate_col_width,\n    _mapping_repr,\n    data_vars_repr,\n    attrs_repr,\n    coords_repr,\n    indexes_repr,\n    dim_summary,\n    unindexed_dims_repr,\n    set_numpy_options,\n    limit_lines,\n    short_numpy_repr,\n    short_data_repr,\n    array_repr,\n    dataset_repr,\n    diff_dim_summary,\n    _diff_mapping_repr,\n    diff_coords_repr,\n    diff_data_vars_repr,\n    diff_attrs_repr,\n    _compat_to_str,\n    diff_array_repr,\n    diff_dataset_repr,\n)\n\n# Test Helpers\n\ndef _make_Dataset():\n    data = {'foo': (('x', 'y'), np.arange(6).reshape(2, 3)),\n            'bar': ('x', [1, 2])}\n\n    return Dataset(data, coords={'x': [0, 1], 'y': [0, 1, 2]})\n\ndef _make_DataArray():\n    return DataArray(\n        np.arange(10).reshape(2, 5),\n        dims=['x', 'y'],\n        coords={'x': [0, 1], 'y': list('abcde')})\n\ndef _make_Variable():\n    return Variable([\"time\", 'space'], np.arange(12).reshape(4, 3), {'units': 'm/s'})\n\ndef _make_Attrs():\n    return {'description': 'This is my dataset',\n            'history': 'created on 2020-02-29'}\n\n# Unit Tests\n\n\ndef test_format_timestamp():\n    assert format_timestamp(np.datetime64(\"2020-01-01\")) == \"2020-01-01\"\n    assert format_timestamp(pd.Timestamp(\"2020-01-01\")) == \"2020-01-01\"\n\ndef test_format_timedelta():\n    assert format_timedelta(np.timedelta64(1, 'D')) == \"1 days\"\n    assert format_timedelta(pd.Timedelta('1 days')) == \"1 days\"\n\ndef test_format_item():\n    assert format_item(\"hello\") == \"hello\"\n    assert format_item(1.2345, timedelta_format=\"datetime\") == \"1.2345\"\n\ndef test_format_items():\n    assert format_items([1, 2, 3]) == ['1', '2', '3']\n\ndef test_format_array_flat():\n    arr = np.arange(10)\n    assert format_array_flat(arr, max_width=10) == \"0 1 2 3 4 5 ... 7 8 9\"\n\ndef test_inline_dask_repr():\n    import dask.array as da\n    arr = da.zeros((10, 10))\n    assert inline_dask_repr(arr) == \"dask.array<chunksize=(10, 10)>\"\n\ndef test_inline_sparse_repr():\n    import sparse\n    matrix = sparse.COO((np.array([0, 1, 2]), np.array([0, 1, 2])), np.array([1, 2, 3]), shape=(3, 3))\n    assert inline_sparse_repr(matrix) == \"<COO: nnz=3, fill_value=0>\"\n\ndef test_inline_variable_array_repr():\n    var = Variable(['x'], np.arange(5))\n    assert inline_variable_array_repr(var, 10) == \"0 1 2 3 4\"\n\ndef test_summarize_variable():\n    var = Variable(['x', 'y'], np.arange(6).reshape(2, 3))\n    assert summarize_variable('var', var, col_width=10) == \"    var (x, y) int64 0 1 2\\n    3 4 5\"\n\ndef test_summarize_coord():\n    coord = Coord('coord', np.arange(3))\n    assert summarize_coord('coord', coord.to_index_variable(), col_width=10) == \"    *coord int64 0 1 2\"\n\ndef test_summarize_attr():\n    assert summarize_attr(\"my_attr\", \"Hello World\", col_width=10) == \"    my_attr: Hello World\"\n\ndef test_coords_repr():\n\n    ds = Dataset({'data': (('x', 'y'), np.arange(6).reshape(2, 3))},\n                 coords={'x': [0, 1], 'y': [0, 1, 2]})\n    assert coords_repr(ds.coords, col_width=10) == \"Coordinates:\\n\" \\\n                                                   \"    *x: 0, 1\\n\" \\\n                                                   \"    *y: 0, 1, 2\"\n\ndef test_indexes_repr():\n    idx = {'index1': range(10), 'index2': ['a', 'b', 'c']}\n\n    assert indexes_repr(idx) == \"index1: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\\nindex2: a, b, c\"\n\ndef test_dim_summary():\n    assert dim_summary({'x': 2, 'y': 3}) == \"x: 2, y: 3\"\n\ndef test_unindexed_dims_repr():\n    assert unindexed_dims_repr({'x': 2, 'y': 3}, {'x': [0, 1]}) == \"Dimensions without coordinates: y\"\n\ndef test_short_numpy_repr():\n    arr = np.arange(10).reshape(2, 5)\n    assert short_numpy_repr(arr) == \"array([[0, 1, 2, 3, 4],\\n       [5, 6, 7, 8, 9]])\"\n\ndef test_short_data_repr():\n    arr = np.arange(10).reshape(2, 5)\n    assert short_data_repr(arr) == \"array([[0, 1, 2, 3, 4],\\n       [5, 6, 7, 8, 9]])\"\n\ndef test_array_repr():\n    arr = DataArray(\n        np.arange(10).reshape(2, 5),\n        dims=['x', 'y'],\n        coords={'x': [0, 1], 'y': list('abcde')},\n         attrs={'my_attr': 'some value'})\n\n    assert \"xarray.DataArray\" in array_repr(arr)\n    assert \"dims=('x', 'y')\" in array_repr(arr)\n\ndef test_dataset_repr():\n    ds = _make_Dataset()\n\n    assert \"xarray.Dataset\" in dataset_repr(ds)\n    assert \"data_vars\" in dataset_repr(ds)\n\ndef test_diff_dim_summary():\n    ds1 = _make_Dataset()\n    ds2 = ds1.rename_dims({'x': 'z'})\n\n    assert diff_dim_summary(ds1, ds2) == \"Differing dimensions:\\n    ({'x': 2, 'y': 3}) != ({'z': 2, 'y': 3})\"\n\ndef test_diff_mapping_repr():\n\n    a = {'x': 1, 'y': 2}\n\n\n\ndef test_diff_array_repr():\n    a = _make_DataArray()\n    b = _make_DataArray()\n\n    assert \"not equal\" in diff_array_repr(a, b, 'equals')\n\n\ndef test_diff_dataset_repr():\n    a = _make_Dataset()\n    b = _make_Dataset()\n\n    assert \"not equal\" in diff_dataset_repr(a, b, 'equals')\n"], "sample_134": ["\nfrom sympy.geometry import Point, Point2D, Line, Circle, Polygon, Segment, convex_hull, intersection, centroid\nfrom sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\nfrom sympy.utilities.pytest import raises\nfrom sympy.utilities.iterables import subsets\nimport pytest\n\ndef test_idiff():\n    x, y, a = symbols('x y a')\n    circ = x**2 + y**2 - 4\n    assert idiff(circ, y, x) == -x/y\n    assert idiff(circ, y, x, 2).simplify() == -(x**2 + y**2)/y**3\n    assert idiff(x + a + y, y, x) == -1\n    assert idiff(x + a + y, [y, a], x) == -Derivative(a, x) - 1\n\ndef test_intersection():\n    x, y = symbols('x y')\n    p1 = Point(0,0)\n    p2 = Point(1,1)\n    l1 = Line(p1, p2)\n    l2 = Line((0,1), (1,0))\n    c1 = Circle(p1, 1)\n\n    assert intersection(l1, l2) == [Point(0.5,0.5)]\n    assert intersection(l1, p1) == [p1]\n\n    assert intersection(c1, l1) == [Point(0,0)]\n    assert intersection(c1, c1.center) == []  \n    assert intersection(c1, l2) == [Point(0.5, 0.8660254037844386)]\n\n    assert intersection(l1, l2, pairwise=True) == [Point(0.5,0.5)]\n    assert intersection(c1, l1, l2, pairwise=True) == [Point(0,0), Point(0.5, 0.8660254037844386)]\n\ndef test_centroid():\n    p1 = Point(0, 0)\n    p2 = Point(1, 0)\n    p3 = Point(1, 1)\n    t = Polygon(p1, p2, p3)\n    assert centroid(t) == Point2D(2/3, 1/3)\n    assert centroid(p1, p2) == Point2D(1/2, 0)\n    assert centroid(p1, p2, p3) == Point2D(2/3, 1/3)\n\ndef test_closest_points():\n    p1 = Point(0,0)\n    p2 = Point(1,1)\n    p3 = Point(2,0)\n    p4 = Point(2,2)\n    p5 = Point(0,2)\n    assert closest_points(p1, p2, p3) == {frozenset({p1, p3})}\n    assert closest_points(p1, p2, p3, p4) == {frozenset({p1, p3})}\n    assert closest_points(p1, p2, p3, p4, p5) == {frozenset({p1, p3})}\n    assert closest_points([p1, p2, p3, p4, p5]) == {frozenset({p1, p3})}\n\ndef test_farthest_points():\n    p1 = Point(0,0)\n    p2 = Point(1,1)\n    p3 = Point(2,0)\n    p4 = Point(2,2)\n    p5 = Point(0,2)\n    assert farthest_points(p1, p2, p3) == {frozenset({p1, p3})}\n    assert farthest_points(p1, p2, p3, p4) == {frozenset({p1, p4})}\n    assert farthest_points(p1, p2, p3, p4, p5) == {frozenset({p1, p4})}\n    assert farthest_points([p1, p2, p3, p4, p5]) == {frozenset({p1, p4})}\n\ndef test_convex_hull():\n    p1 = Point(1,1)\n    p2 = Point(1,2)\n    p3 = Point(3,1)\n    p4 = Point(-5, 2)\n    p5 = Point(15, 4)\n\n    assert convex_hull(p1, p2, p3, p4, p5) == Polygon(Point2D(-5, 2), Point2D(1, 1), Point2D(3, 1), Point2D(15, 4))\n\n    assert convex_hull(p1, p2, polygon=False) == ([Point2D(-5, 2), Point2D(15, 4)], [Point2D(-5, 2), Point2D(1, 1), Point2D(3, 1), Point2D(15, 4)])\n\n@pytest.mark.xfail\ndef test_convex_hull_3d():\n    p1 = Point3D(1,1,1)\n    p2 = Point3D(1,2,1)\n    p3 = Point3D(3,1,1)\n    p4 = Point3D(-5, 2,1)\n    p5 = Point3D(15, 4,1)\n    with raises(NotImplementedError):\n        convex_hull(p1, p2, p3, p4, p5)\n\n\ndef test_are_coplanar():\n    p1 = Point3D(0,0,0)\n    p2 = Point3D(1,0,0)\n    p3 = Point3D(0,1,0)\n    p4 = Point3D(0,0,1)\n    l1 = Line3D(p1, p2)\n    l2 = Line3D(p1, p3)\n    assert are_coplanar(p1, p2, p3) == True\n    assert are_coplanar(p1, p2, p4) == False\n\n    assert are_coplanar(l1, l2) == True\n    \ndef test_are_similar():\n    c1 = Circle(Point(0,0), 1)\n    c2 = Circle(Point(1,1), 1)\n    t1 = Triangle(Point(0,0), Point(1,0), Point(0,1))\n\n    assert are_similar(c1, c2) == True\n    assert are_similar(t1, t1) == True\n    assert are_similar(c1, t1) == False\n\ndef test_ordered_points():\n    p1 = Point2D(1, 0)\n    p2 = Point2D(0, 1)\n    p3 = Point2D(0, 0)\n    assert _ordered_points((p1, p2, p3)) == (p3, p1, p2)\n"], "sample_150": ["\nimport sympy\nfrom sympy.abc import x, y, z\nfrom sympy.functions import sin, cos, exp\nfrom sympy.utilities.lambdify import lambdify, implemented_function, lambdastr\n\ndef test_lambdify_basics():\n    f = lambdify(x, x**2)\n    assert f(2) == 4\n\n    f = lambdify(x, sin(x))\n    assert f(sympy.pi/2) == 1\n\ndef test_lambdify_multiple_args():\n    f = lambdify((x, y), x + y)\n    assert f(1, 2) == 3\n\ndef test_lambdify_nested_args():\n    f = lambdify((x, (y, z)), x + y + z)\n    assert f(1, (2, 3)) == 6\n\ndef test_lambdify_iterable_arg():\n    f = lambdify(x, [sin(x), cos(x)])\n    assert f(sympy.pi/4) == [sympy.sqrt(2)/2, sympy.sqrt(2)/2]\n\ndef test_lambdify_matrix():\n    from sympy.matrices import Matrix\n    A = Matrix([[1, 2], [3, 4]])\n    f = lambdify(x, A*x)\n    assert f([1, 2]) == [5, 11]\n\ndef test_lambdify_with_function():\n    f = implemented_function('myfunc', lambda x: x**2)\n    g = lambdify(x, myfunc(x))\n    assert g(2) == 4\n\ndef test_lambdastr_simple():\n    assert lambdastr(x, x**2) == 'lambda x: (x**2)'\n\ndef test_lambdastr_multiple_args():\n    assert lambdastr((x, y), x + y) == 'lambda x,y: (x + y)'\n\ndef test_lambdastr_nested_args():\n    assert lambdastr((x, (y, z)), x + y + z) ==\\\n    'lambda _0,_1: (lambda x,y,z: (x + y + z))(_0,_1[0],_1[1])'\n\ndef test_lambdastr_iterable_arg():\n    assert lambdastr(x, [x, sin(x)]) == 'lambda x: ([x, sin(x)])'\n\ndef test_lambdify_numpy():\n    f = lambdify(x, sin(x), 'numpy')\n    assert f(sympy.pi/2) == 1\n\ndef test_lambdify_scipy():\n    f = lambdify(x, sin(x), 'scipy')\n    assert f(sympy.pi/2) == 1\n\ndef test_lambdify_math():\n    f = lambdify(x, sin(x), 'math')\n    assert f(sympy.pi/2) == 1\n\ndef test_lambdify_tensorflow():\n    try:\n        import tensorflow as tf \n        f = lambdify(x, sin(x), 'tensorflow')\n        assert f(tf.constant(sympy.pi/2)).numpy() == 1\n    except ImportError:\n        pass\n\ndef test_lambdify_dummify():\n    from sympy.functions import Function\n\n    f = Function('f')\n    g = lambdify(x, f(x), 'numpy', dummify=True)\n    assert callable(g)\n\ndef test_lambdify_cse():\n    f = lambdify(x, sin(x)**2 + cos(x)**2, 'numpy', cse=True)\n    assert f(0) == 1\n    \n\n"], "sample_141": ["\nfrom sympy import symbols, MatrixSymbol, Matrix, ZeroMatrix, Identity, DiagMatrix, eye, simplify, init_printing\nfrom sympy.matrices.expressions.blockmatrix import ( block_collapse, bc_matmul, bc_block_plus_ident, BlockDiagMatrix, BlockMatrix, bc_dist, bc_matadd, bc_transpose, bc_inverse, blockcut, reblock_2x2, deblock)\nfrom sympy.matrices.expressions import (MatrixSymbol, Identity, Inverse, trace, Transpose, det, ZeroMatrix)\nfrom sympy.functions import transpose\nfrom sympy.testing.pytest import raises\nfrom sympy.matrices import eye, Matrix, ShapeError\n\ndef test_block_collapse_simple():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    C = BlockMatrix([[Identity(n), Z]])\n\n    assert block_collapse(C*B) == Matrix([[X, Z + Z*Y]])\n\ndef test_block_collapse_matmul():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', n, m)\n    Z = MatrixSymbol('Z', m, m)\n\n    B = BlockMatrix([[X]])\n    C = BlockMatrix([[Y, Z]])\n    assert block_collapse(B*C) == BlockMatrix([[X*Y, X*Z]])\n\ndef test_block_collapse_add():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', n, n)\n    Z = MatrixSymbol('Z', n, n)\n\n    B = BlockMatrix([[X]])\n    C = BlockMatrix([[Y]])\n    D = BlockMatrix([[Z]])\n    assert block_collapse(B + C + D) == BlockMatrix([[X + Y + Z]])\n\ndef test_block_collapse_inverse():\n    n = symbols('n')\n    X = MatrixSymbol('X', n, n)\n    B = BlockDiagMatrix(X)\n    assert block_collapse(Inverse(B)) == BlockDiagMatrix(Inverse(X))\n\ndef test_block_collapse_transpose():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    Z = MatrixSymbol('Z', n, m)\n\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert block_collapse(Transpose(B)) == BlockMatrix([[Transpose(X), Transpose(Z)], [ZeroMatrix(n, m), Transpose(Y)]])\n\ndef test_bc_matmul_scalar():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', n, m)\n    A = 2\n\n    B = BlockMatrix([[X, Y]])\n    assert bc_matmul(A*B) == BlockMatrix([[A*X, A*Y]])\n\ndef test_bc_matmul_BlockDiagMatrix():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n\n    B = BlockDiagMatrix(X, Y)\n    C = BlockMatrix([[X, ZeroMatrix(n, m)],\n                    [ZeroMatrix(m, n), Y]])\n    assert bc_matmul(B*C) == BlockMatrix([[X*X, ZeroMatrix(n, m)],\n                                         [ZeroMatrix(m, n), Y*Y]])\n\n\ndef test_bc_dist():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', n, m)\n    A = 2\n    B = BlockMatrix([[X, Y]])\n    assert bc_dist(A*B) == BlockMatrix([[A*X, A*Y]])\n\ndef test_bc_block_plus_ident():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    I = Identity(n)\n\n    B = BlockMatrix([[X, ZeroMatrix(n, m)], [ZeroMatrix(m, n), Y]])\n    C = B + I\n\n    assert block_collapse(C) == BlockMatrix([[X + I, ZeroMatrix(n, m)], [ZeroMatrix(m, n), Y]])\n\ndef test_bc_matadd():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', n, n)\n    Z = MatrixSymbol('Z', n, n)\n\n    B = BlockMatrix([[X]])\n    C = BlockMatrix([[Y]])\n    D = BlockMatrix([[Z]])\n    assert bc_matadd(B + C + D) == BlockMatrix([[X + Y + Z]])\n\ndef test_block_diagmat():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n\n    B = BlockDiagMatrix(X, Y)\n    assert B.shape == (n + m, n + m)\n\ndef test_block_diagmat_eval_inverse():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n\n    B = BlockDiagMatrix(X, Y)\n    assert B.eval_inverse() == BlockDiagMatrix(Inverse(X), Inverse(Y))\n\ndef test_blockcut_simple():\n    M = Matrix(4, 4, range(16))\n    B = blockcut(M, (2, 2), (2, 2))\n    assert isinstance(B, BlockMatrix)\n    assert (B.blocks[0, 0] == Matrix([[0, 1], [4, 5]]))\n\ndef test_blockcut_empty():\n    M = Matrix(4, 4, range(16))\n    B = blockcut(M, (2, 1, 1), (2, 1, 1))\n    assert isinstance(B, BlockMatrix)\n    assert B.blocks[0, 0] == Matrix([[0]])\n    assert B.blocks[0, 1] == Matrix([[1]\n\n\n\ndef test_deblock_simple():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n\n    B = BlockMatrix([[X, ZeroMatrix(n, m)], [ZeroMatrix(m, n), Y]])\n    assert deblock(B) == B\n\ndef test_deblock_nested():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n\n    B = BlockMatrix([[BlockMatrix([[X]])]])\n\n    assert deblock(B) == BlockMatrix([[X]])\n\ndef test_reblock_2x2_simple():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n\n    B = BlockMatrix([[X, ZeroMatrix(n, m)], [ZeroMatrix(m, n), Y]])\n    assert reblock_2x2(B) == BlockMatrix([[X, ZeroMatrix(n, m)], [ZeroMatrix(m, n), Y]])\n\ndef test_reblock_2x2_nested():\n    n, m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n\n    B = BlockMatrix([[BlockMatrix([[X]]) , ZeroMatrix(n, m)], [ZeroMatrix(m, n), BlockMatrix([[Y]])]])\n    assert reblock_2x2(B) == BlockMatrix([[X, ZeroMatrix(n, m)], [ZeroMatrix(m, n), Y]])\n\ndef test_bounds():\n    assert bounds((1, 10, 50)) == [(0, 1), (1, 11), (11, 61)]\n"], "sample_149": ["\nfrom sympy.testing.pytest import raises\nfrom sympy.functions.elementary.trigonometric import sin, cos\nfrom sympy.matrices.dense import Matrix\nfrom sympy.simplify import simplify\nfrom sympy.tensor.array import Array\nfrom sympy.tensor.array.dense_ndim_array import ( ImmutableDenseNDimArray, MutableDenseNDimArray)\nfrom sympy.tensor.array.sparse_ndim_array import ( ImmutableSparseNDimArray, MutableSparseNDimArray)\nfrom sympy.abc import x, y, z\n\ndef test_ArrayKind():\n    assert ArrayKind().kind == Kind\n\ndef test_ArrayKind_union():\n    assert ArrayKind._union([ArrayKind(NumberKind), ArrayKind(Kind)]) == ArrayKind()\n\ndef test_NDimArray_new():\n    a = MutableDenseNDimArray.zeros(2, 3, 4)\n    assert isinstance(a, MutableDenseNDimArray)\n    assert a.shape == (2, 3, 4)\n\ndef test_NDimArray_parse_index():\n    a = MutableDenseNDimArray.zeros(2, 3)\n    assert a._parse_index(3) == 3\n    assert a._parse_index((1, 2)) == 5\n\ndef test_NDimArray_get_tuple_index():\n    a = MutableDenseNDimArray.zeros(2, 3)\n    assert a._get_tuple_index(3) == (1, 0)\n\ndef test_NDimArray_check_symbolic_index():\n    a = MutableDenseNDimArray.zeros(2, 3)\n    assert a._check_symbolic_index(1) is None\n    assert isinstance(a._check_symbolic_index(x), (NoneType))\n\ndef test_NDimArray_setter_iterable_check():\n    a = MutableDenseNDimArray.zeros(2, 3)\n    with raises(NotImplementedError):\n        a._setter_iterable_check([1, 2, 3])\n\ndef test_NDimArray_scan_iterable_shape():\n    assert MutableDenseNDimArray._scan_iterable_shape([1, 2, 3]) == ([1, 2, 3], ())\n    assert MutableDenseNDimArray._scan_iterable_shape([[1, 2], [3, 4]]) == ([1, 2, 3, 4], (2, 2))\n\ndef test_NDimArray_handle_ndarray_creation_inputs():\n    assert MutableDenseNDimArray._handle_ndarray_creation_inputs(shape=(2, 3), iterable=[1, 2, 3, 4, 5, 6]) == ((2, 3), [1, 2, 3, 4, 5, 6])\n    assert MutableDenseNDimArray._handle_ndarray_creation_inputs(iterable=[[1, 2], [3, 4]], shape=(2, 2)) == ((2, 2), [1, 2, 3, 4])\n    assert MutableDenseNDimArray._handle_ndarray_creation_inputs(iterable=Matrix([[1, 2], [3, 4]])) == ((2, 2), [1, 2, 3, 4])\n\ndef test_NDimArray_len():\n    a = MutableDenseNDimArray.zeros(2, 3)\n    assert len(a) == 6\n\ndef test_NDimArray_shape():\n    a = MutableDenseNDimArray.zeros(2, 3)\n    assert a.shape == (2, 3)\n\ndef test_NDimArray_rank():\n    a = MutableDenseNDimArray.zeros(2, 3, 4)\n    assert a.rank() == 3\n\ndef test_NDimArray_diff():\n    a = ImmutableDenseNDimArray([[x, y], [1, x*y]])\n    assert a.diff(x) == ImmutableDenseNDimArray([[1, 0], [0, y]])\n\ndef test_NDimArray_eval_derivative():\n    a = ImmutableDenseNDimArray([[x, y], [1, x*y]])\n    assert a._eval_derivative(x) == ImmutableDenseNDimArray([[1, 0], [0, y]])\n\ndef test_NDimArray_eval_derivative_n_times():\n    a = ImmutableDenseNDimArray([[x, y], [1, x*y]])\n    assert a._eval_derivative_n_times(x, 2) == ImmutableDenseNDimArray([[0, 0], [0, 2*y]])\n\n\n\ndef test_NDimArray_applyfunc():\n    m = ImmutableDenseNDimArray([i*2+j for i in range(2) for j in range(2)], (2, 2))\n    assert m.applyfunc(lambda i: 2*i) == ImmutableDenseNDimArray([0, 2, 4, 6], (2, 2))\n\ndef test_NDimArray_sympystr():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert str(a) == \"[[1, 2], [3, 4]]\"\n\ndef test_NDimArray_tolist():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.tolist() == [[1, 2], [3, 4]]\n\ndef test_NDimArray_add():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    b = MutableDenseNDimArray([4, 3, 2, 1], (2, 2))\n    assert (a + b) == MutableDenseNDimArray([5, 5, 5, 5], (2, 2))\n\ndef test_NDimArray_sub():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    b = MutableDenseNDimArray([4, 3, 2, 1], (2, 2))\n    assert (a - b) == MutableDenseNDimArray([-3, -1, 1, 3], (2, 2))\n\ndef test_NDimArray_mul():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert (a * 2) == MutableDenseNDimArray([2, 4, 6, 8], (2, 2))\n\ndef test_NDimArray_rmul():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert (2 * a) == MutableDenseNDimArray([2, 4, 6, 8], (2, 2))\n\ndef test_NDimArray_truediv():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert (a / 2) == MutableDenseNDimArray([0.5, 1, 1.5, 2], (2, 2))\n\ndef test_NDimArray_rtruediv():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    with raises(NotImplementedError):\n        2 / a\n\ndef test_NDimArray_neg():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert (-a) == MutableDenseNDimArray([-1, -2, -3, -4], (2, 2))\n\ndef test_NDimArray_iter():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert list(a) == [MutableDenseNDimArray([1, 2], ()), MutableDenseNDimArray([3, 4], ())]\n\n\n\ndef test_NDimArray_eq():\n    a = MutableDenseNDimArray.zeros(2, 3)\n    b = MutableDenseNDimArray.zeros(2, 3)\n    assert a == b\n\ndef test_NDimArray_ne():\n    a = MutableDenseNDimArray.zeros(2, 3)\n    b = MutableDenseNDimArray.zeros(2, 3)\n    assert not a != b\n\ndef test_NDimArray_eval_transpose():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.transpose() == ImmutableDenseNDimArray([[1, 3], [2, 4]], (2, 2))\n\ndef test_NDimArray_transpose():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.transpose() == ImmutableDenseNDimArray([[1, 3], [2, 4]], (2, 2))\n\ndef test_NDimArray_eval_conjugate():\n    a = MutableDenseNDimArray([1, 2 + 3*I, 4], (3,))\n    assert a._eval_conjugate() == MutableDenseNDimArray([1, 2 - 3*I, 4], (3,))\n\ndef test_NDimArray_conjugate():\n    a = MutableDenseNDimArray([1, 2 + 3*I, 4], (3,))\n    assert  a.conjugate() == MutableDenseNDimArray([1, 2 - 3*I, 4], (3,))\n\ndef test_NDimArray_eval_adjoint():\n    a = MutableDenseNDimArray([1, 2 + 3*I, 4], (3,))\n    assert a._eval_adjoint() == a.conjugate().transpose()\n\ndef test_NDimArray_adjoint():\n    a = MutableDenseNDimArray([1, 2 + 3*I, 4], (3,))\n    assert a.adjoint() == a.conjugate().transpose()\n\ndef test_NDimArray_slice_expand():\n    a = MutableDenseNDimArray([1,2,3,4], (2,2))\n    assert a._slice_expand(slice(0,2,1),2) == [0, 1]\n\ndef test_NDimArray_get_slice_data_for_array_access():\n    a = MutableDenseNDimArray([1,2,3,4], (2,2))\n    sl_factors, eindices = a._get_slice_data_for_array_access((slice(0,2,1),slice(0,2,1)))\n    assert sl_factors == [ [0, 1], [0,1] ]\n\n\ndef test_NDimArray_get_slice_data_for_array_assignment():\n    a = MutableDenseNDimArray([1,2,3,4], (2,2))\n    value = MutableDenseNDimArray([1,2], (2,))\n    sl_factors, eindices, slice_offsets = a._get_slice_data_for_array_assignment((slice(0,2,1),0), value)\n\ndef test_NDimArray_check_special_bounds():\n\n    with raises (ValueError):\n        MutableDenseNDimArray._check_special_bounds([1,2,3],())\n\ndef test_NDimArray_check_index_for_getitem():\n    a = MutableDenseNDimArray([1,2,3,4], (2,2))\n    a._check_index_for_getitem(0)\n    a._check_index_for_getitem((0, 0))\n\ndef test_ImmutableNDimArray_as_immutable():\n    a = MutableDenseNDimArray.zeros(2, 3)\n    assert a.as_immutable() == ImmutableDenseNDimArray.zeros(2, 3)\n\n\n\n"], "sample_104": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nimport numpy as np\nfrom sklearn.feature_selection.mutual_info_ import (mutual_info_regression, mutual_info_classif,\n                                                   _compute_mi_cc, _compute_mi_cd, _estimate_mi,\n                                                   _iterate_columns)\nfrom sklearn.utils.random import check_random_state\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.utils.validation import check_X_y\nfrom scipy.sparse import csr_matrix\n\nclass TestMutualInfo(unittest.TestCase):\n\n    def test_mutual_info_regression_dense(self):\n        rng = check_random_state(0)\n        X = rng.randn(100, 5)\n        y = rng.randn(100)\n        mi = mutual_info_regression(X, y)\n\n    def test_mutual_info_regression_sparse(self):\n        rng = check_random_state(0)\n        X = csr_matrix(rng.randn(100, 5))\n        y = rng.randn(100)\n        mi = mutual_info_regression(X, y)\n\n    def test_mutual_info_classif_dense(self):\n        rng = check_random_state(0)\n        X = rng.randn(100, 5)\n        y = rng.randint(0, 2, size=100)\n        mi = mutual_info_classif(X, y)\n\n    def test_mutual_info_classif_sparse(self):\n        rng = check_random_state(0)\n        X = csr_matrix(rng.randn(100, 5))\n        y = rng.randint(0, 2, size=100)\n        mi = mutual_info_classif(X, y)\n\n    def test_compute_mi_cc(self):\n        rng = check_random_state(0)\n        x = rng.randn(100)\n        y = rng.randn(100)\n        mi = _compute_mi_cc(x, y, n_neighbors=3)\n\n    def test_compute_mi_cd(self):\n        rng = check_random_state(0)\n        c = rng.randn(100)\n        d = rng.randint(0, 2, size=100)\n        mi = _compute_mi_cd(c, d, n_neighbors=3)\n    @patch('sklearn.feature_selection.mutual_info_.NearestNeighbors')\n    def test_estimate_mi(self, mock_nn):\n        rng = check_random_state(0)\n        X = rng.randn(100, 5)\n        y = rng.randn(100)\n\n        mock_instance = Mock()\n        mock_instance.fit.return_value = None\n        mock_nn.return_value = mock_instance\n        _estimate_mi(X, y, discrete_features='auto', n_neighbors=3)\n    def test_iterate_columns(self):\n        X = np.array([[1, 2, 3],\n                     [4, 5, 6],\n                     [7, 8, 9]])\n        for i, x in enumerate(_iterate_columns(X)):\n            self.assertTrue(np.array_equal(x, X[:, i]))\n\n    def test_iterate_columns_sparse(self):\n        X = csr_matrix([[1, 0, 3],\n                      [0, 5, 0],\n                      [7, 0, 9]])\n        for i, x in enumerate(_iterate_columns(X)):\n            self.assertTrue(np.array_equal(x, X.getcol(i).toarray().flatten()))\n\n\n\n"], "sample_7": ["\nimport re\nfrom unittest import mock\n\nfrom django.core.exceptions import ValidationError\nfrom django.test import SimpleTestCase\n\nfrom django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator\n\n\nclass UsernameValidatorTests(SimpleTestCase):\n\n    def test_ascii_username_validator_valid(self):\n        validator = ASCIIUsernameValidator()\n        self.assertIsNone(validator('test_user'))\n        self.assertIsNone(validator('test.user'))\n        self.assertIsNone(validator('test_user123'))\n        self.assertIsNone(validator('test-user'))\n        self.assertIsNone(validator('test_user+'))\n        self.assertIsNone(validator('test_user_'))\n        self.assertIsNone(validator('test_user@example.com'))\n\n    def test_ascii_username_validator_invalid(self):\n        validator = ASCIIUsernameValidator()\n        with self.assertRaisesMessage(ValidationError, validator.message):\n            validator('test user')\n        with self.assertRaisesMessage(ValidationError, validator.message):\n            validator('test\u30e6\u30fc\u30b6\u30fc')\n\n    def test_unicode_username_validator_valid(self):\n        validator = UnicodeUsernameValidator()\n        self.assertIsNone(validator('test_user'))\n        self.assertIsNone(validator('test.user'))\n        self.assertIsNone(validator('test_user123'))\n        self.assertIsNone(validator('test-user'))\n        self.assertIsNone(validator('test_user+'))\n        self.assertIsNone(validator('test_user_'))\n        self.assertIsNone(validator('test_user@example.com'))\n        self.assertIsNone(validator('test\u30e6\u30fc\u30b6\u30fc'))\n\n    def test_unicode_username_validator_invalid(self):\n        validator = UnicodeUsernameValidator()\n        with self.assertRaisesMessage(ValidationError, validator.message):\n            validator('test user')\n\n\n\n"], "sample_138": ["\nimport unittest\nfrom sympy.utilities.iterables import (\n    _partition, _set_partitions, binary_partitions, bracelets, capture, cartes,\n    common_prefix, common_suffix, connected_components, dict_merge,\n    filter_symbols, flatten, generate_bell, generate_derangements,\n    generate_involutions, generate_oriented_forest, group, has_dups, ibin,\n    iproduct, kbins, minlex, multiset, multiset_combinations,\n    multiset_partitions, multiset_permutations, necklaces, numbered_symbols,\n    ordered, partitions, permutations, postfixes, postorder_traversal, prefixes,\n    reshape, rotate_left, rotate_right, runs, sift,\n    strongly_connected_components, subsets, take, topological_sort, unflatten,\n    uniq, variations, ordered_partitions, rotations, is_palindromic\n)\nfrom sympy.utilities.enumerative import (\n    factoring_visitor, multiset_partitions_taocp\n)\n\nclass TestIterableUtilities(unittest.TestCase):\n\n    def test__partition(self):\n        self.assertEqual(list(_partition([1, 2, 3, 4], 2)), [[[1, 2], [3, 4]], [[1, 3], [2, 4]], [[1, 4], [2, 3]]])\n\n    def test__set_partitions(self):\n        self.assertEqual(list(_set_partitions([1, 2, 3])), [[[1, 2, 3]], [[1, 2], [3]], [[1, 3], [2]], [[2, 3], [1]], [[1], [2], [3]]])\n\n    def test_binary_partitions(self):\n        self.assertEqual(list(binary_partitions(4)), [\n            (4, 0), (3, 1), (2, 2), (1, 3), (0, 4)\n        ])\n\n    def test_bracelets(self):\n        self.assertEqual(list(bracelets(4, 2)), [\n            [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 1],\n            [0, 1, 0, 1], [0, 1, 1, 1], [1, 1, 1, 1]\n        ])\n\n    def test_capture(self):\n        self.assertEqual(capture(lambda x: x*2, [1, 2, 3]), [2, 4, 6])\n        \n    def test_cartes(self):\n        self.assertEqual(list(cartes([1, 2], [3, 4])), [(1, 3), (1, 4), (2, 3), (2, 4)])\n\n    def test_common_prefix(self):\n        self.assertEqual(common_prefix(['apple', 'apricot']), 'ap')\n        self.assertEqual(common_prefix(['apple', 'banana']), '')\n\n    def test_common_suffix(self):\n        self.assertEqual(common_suffix(['apple', 'pineapple']), 'le')\n        self.assertEqual(common_suffix(['apple', 'banana']), '')\n\n    def test_connected_components(self):\n        self.assertEqual(connected_components([[1,2],[2,3], [4,5], [5,4]]), [[1, 2, 3], [4, 5]])\n\n    def test_dict_merge(self):\n        d1 = {'a': 1, 'b': 2}\n        d2 = {'b': 3, 'c': 4}\n        self.assertEqual(dict_merge(d1, d2), {'a': 1, 'b': 3, 'c': 4})\n\n    def test_filter_symbols(self):\n        from sympy import symbols\n        x, y, z = symbols('x y z')\n        self.assertEqual(list(filter_symbols([x*y, 2, z+1])), [x*y, z+1])\n\n    def test_flatten(self):\n        self.assertEqual(list(flatten([1, [2, [3, 4], 5]])), [1, 2, 3, 4, 5])\n\n    def test_generate_bell(self):\n        self.assertEqual(list(generate_bell(3)), [(0, 1, 2), (0, 2, 1), (2, 0, 1), (2, 1, 0), (1, 0, 2), (1, 2, 0)])\n\n    def test_generate_derangements(self):\n        self.assertEqual(list(generate_derangements([0, 1, 2])), [[1, 2, 0], [2, 0, 1]])\n\n    def test_generate_involutions(self):\n        self.assertEqual(list(generate_involutions([0, 1, 2])), [[0, 1, 2], [0, 2, 1], [1, 0, 2], [1, 2, 0], [2, 0, 1], [2, 1, 0]])\n\n    def test_generate_oriented_forest(self):\n        self.assertEqual(list(generate_oriented_forest(4))[:5], [[0, 1, 2, 3], [0, 1, 2, 2], [0, 1, 2, 1], [0, 1, 2, 0], [0, 1, 1, 1]])\n\n    def test_group(self):\n        self.assertEqual(list(group([1, 1, 2, 3, 3, 3])), [(1, [1, 1]), (2, [2]), (3, [3, 3, 3])])\n\n    def test_has_dups(self):\n        self.assertTrue(has_dups([1, 2, 2, 3]))\n        self.assertFalse(has_dups([1, 2, 3]))\n\n    def test_ibin(self):\n        self.assertEqual(list(ibin(3)), [(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)])\n\n    def test_iproduct(self):\n        self.assertEqual(list(iproduct([1, 2], [3, 4])), [(1, 3), (1, 4), (2, 3), (2, 4)])\n\n    def test_kbins(self):\n        self.assertEqual(list(kbins([0, 1, 2, 3], 2)), [[[0], [1, 2, 3]], [[0, 1], [2, 3]], [[0, 1, 2], [3]], [[0, 1, 2, 3], []]])\n\n    def test_minlex(self):\n        self.assertEqual(list(minlex([1, 2, 0])), [0, 1, 2])\n\n    def test_multiset(self):\n        self.assertEqual(list(multiset([1, 1, 2, 2, 3])), [1, 1, 2, 2, 3])\n\n    def test_multiset_combinations(self):\n        self.assertEqual(list(multiset_combinations([1, 1, 2], 2)), [(1, 1), (1, 2), (2, 1)])\n\n    def test_multiset_partitions(self):\n        self.assertEqual(list(multiset_partitions([1, 1, 2])), [[[1, 1, 2], []], [[1, 2], [1]], [[1, 1], [2]]])\n\n    def test_multiset_permutations(self):\n        self.assertEqual(list(multiset_permutations([1, 1, 2])), [(1, 1, 2), (1, 2, 1), (2, 1, 1)])\n\n    def test_necklaces(self):\n        self.assertEqual(list(necklaces(3, 2)), [(0, 0), (0, 1), (1, 0), (1, 1)])\n\n    def test_numbered_symbols(self):\n        from sympy import symbols\n        self.assertEqual(list(numbered_symbols('x', 3)), [x0, x1, x2])\n\n    def test_ordered(self):\n        self.assertEqual(list(ordered([1, 2, 3, 4])), [(1, 2, 3, 4)])\n\n    def test_partitions(self):\n        self.assertEqual(list(partitions(4)), [(4,), (3, 1), (2, 2), (2, 1, 1), (1, 1, 1, 1)])\n\n    def test_permutations(self):\n        self.assertEqual(list(permutations([1, 2, 3])), [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)])\n\n    def test_postfixes(self):\n        self.assertEqual(list(postfixes('abc')), ['c', 'bc', 'abc'])\n\n    def test_postorder_traversal(self):\n        self.assertEqual(list(postorder_traversal([1, 2, [3, 4]])), [4, 3, 2, 1])\n\n    def test_prefixes(self):\n        self.assertEqual(list(prefixes('abc')), ['a', 'ab', 'abc'])\n\n    def test_reshape(self):\n        self.assertEqual(list(reshape((1, 2, 3, 4), (2, 2))), [[1, 2], [3, 4]])\n\n    def test_rotate_left(self):\n        self.assertEqual(rotate_left([1, 2, 3]), [2, 3, 1])\n\n    def test_rotate_right(self):\n        self.assertEqual(rotate_right([1, 2, 3]), [3, 1, 2])\n\n    def test_runs(self):\n        self.assertEqual(list(runs([1, 2, 2, 3, 2, 2])), [[1], [2, 2], [3], [2, 2]])\n\n    def test_sift(self):\n        self.assertEqual(list(sift([1, 2, 3, 4, 5], lambda x: x % 2 == 0)), [2, 4])\n\n    def test_strongly_connected_components(self):\n        self.assertEqual(strongly_connected_components([[1, 2], [2, 3], [3, 1]]), [[1, 2, 3]])\n\n    def test_subsets(self):\n        self.assertEqual(list(subsets([1, 2, 3])), [\n            [], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]\n        ])\n\n    def test_take(self):\n        self.assertEqual(list(take([1, 2, 3, 4], 2)), [1, 2])\n\n    def test_topological_sort(self):\n        self.assertEqual(list(topological_sort([1, [2], [3, 2]])), [1, 3, 2])\n\n    def test_unflatten(self):\n        self.assertEqual(unflatten([1, 2, 3, 4], [2, 2]), [[1, 2], [3, 4]])\n\n    def test_uniq(self):\n        self.assertEqual(list(uniq([1, 2, 2, 3, 1])), [1, 2, 3])\n\n    def test_variations(self):\n        self.assertEqual(list(variations([1, 2, 3], 2)), [(1, 2), (1, 3), (2, 1),\n        (2, 3), (3, 1), (3, 2)])\n    \n    def test_ordered_partitions(self):\n        self.assertEqual(list(ordered_partitions(4)), [(4,), (3, 1), (2, 2), (2, 1, 1), (1, 1, 1, 1)])\n    \n    def test_rotations(self):\n        self.assertEqual(list(rotations([1,2,3])), [[1, 2, 3], [2, 3, 1], [3, 1, 2]])\n\n    def test_is_palindromic(self):\n        self.assertTrue(is_palindromic('racecar'))\n        self.assertFalse(is_palindromic('apple'))\n\n"], "sample_0": ["\nfrom django.forms.widgets import (\n    DateTimeBaseInput, Textarea, CheckboxInput, CheckboxSelectMultiple,\n    SelectDateWidget, \n    NullBooleanSelect, SelectMultiple, TextInput, \n    RadioSelect, RadioSelect, SplitDateTimeWidget, \n    SplitHiddenDateTimeWidget, ClearableFileInput, FileInput,\n    HiddenInput, Select,\n    Widget,\n)\nfrom django.core.exceptions import ValidationError\nfrom django.utils.safestring import mark_safe\nfrom django.utils import timezone\nfrom datetime import datetime\nimport re\n\ndef test_TextInput():\n    widget = TextInput()\n    assert widget.render('name', 'value') == '<input type=\"text\" name=\"name\" value=\"value\" id=\"id_name\">'\n    \ndef test_TextInput_empty():\n    widget = TextInput()\n    assert widget.render('name', '') == '<input type=\"text\" name=\"name\" id=\"id_name\">'\n\ndef test_Textarea():\n    widget = Textarea()\n    assert widget.render('name', 'value') == '<textarea name=\"name\" id=\"id_name\">value</textarea>'\n\ndef test_CheckboxInput():\n    widget = CheckboxInput()\n    assert widget.render('name', True) == '<input type=\"checkbox\" name=\"name\" id=\"id_name\" checked=\"checked\">'\n    assert widget.render('name', False) == '<input type=\"checkbox\" name=\"name\" id=\"id_name\">'\n    assert widget.render('name', '') == '<input type=\"checkbox\" name=\"name\" id=\"id_name\">'\n\ndef test_CheckboxSelectMultiple():\n    widget = CheckboxSelectMultiple()\n    assert widget.render('name', ['a', 'b']) == (\n        '<ul>'\n        '<li><label for=\"id_name_0\"><input type=\"checkbox\" name=\"name\" value=\"a\" id=\"id_name_0\"> a</label></li>'\n        '<li><label for=\"id_name_1\"><input type=\"checkbox\" name=\"name\" value=\"b\" id=\"id_name_1\" checked=\"checked\"> b</label></li>'\n        '</ul>'\n    )\n\ndef test_SelectDateWidget():\n    widget = SelectDateWidget()\n    context = widget.get_context('name', datetime(2023, 10, 26))\n    assert context['widget']['subwidgets'][0]['widget']['attrs']['name'] == 'name_year'\n\ndef test_NullBooleanSelect():\n    widget = NullBooleanSelect()\n    assert widget.render('name', True) == (\n        '<select name=\"name\" id=\"id_name\">'\n        '<option value=\"true\">Yes</option>'\n        '<option value=\"false\">No</option>'\n        '<option value=\"unknown\" selected>Unknown</option>'\n        '</select>'\n    )\n\ndef test_SelectMultiple():\n    widget = SelectMultiple()\n    assert widget.render('name', ['a', 'b']) == (\n        '<select multiple=\"multiple\" name=\"name\" id=\"id_name\">'\n        '<option value=\"a\" selected>a</option>'\n        '<option value=\"b\" selected>b</option>'\n        '</select>'\n    )\n\ndef test_RadioSelect():\n    widget = RadioSelect()\n    assert widget.render('name', 'a') == (\n        '<ul>'\n        '<li><label for=\"id_name_0\"><input type=\"radio\" name=\"name\" value=\"a\" id=\"id_name_0\" checked=\"checked\"> a</label></li>'\n        '<li><label for=\"id_name_1\"><input type=\"radio\" name=\"name\" value=\"b\" id=\"id_name_1\"> b</label></li>'\n        '</ul>'\n    )\n\ndef test_SplitDateTimeWidget():\n    widget = SplitDateTimeWidget()\n    assert widget.render('name', datetime(2023, 10, 26, 10, 30)) == (\n        '<div>'\n        '<input type=\"text\" name=\"name_0\" value=\"2023-10-26\" id=\"id_name_0\">'\n        '<input type=\"text\" name=\"name_1\" value=\"10:30:00\" id=\"id_name_1\">'\n        '</div>'\n    )\n\ndef test_SplitHiddenDateTimeWidget():\n    widget = SplitHiddenDateTimeWidget()\n    assert widget.render('name', datetime(2023, 10, 26, 10, 30)) == (\n        '<input type=\"hidden\" name=\"name_0\" value=\"2023-10-26\" id=\"id_name_0\">'\n        '<input type=\"hidden\" name=\"name_1\" value=\"10:30:00\" id=\"id_name_1\">'\n    )\n\ndef test_HiddenInput():\n    widget = HiddenInput()\n    assert widget.render('name', 'value') == '<input type=\"hidden\" name=\"name\" value=\"value\" id=\"id_name\">'\n\ndef test_Select():\n    widget = Select()\n    assert widget.render('name', 'a') == (\n        '<select name=\"name\" id=\"id_name\">'\n        '<option value=\"a\" selected>a</option>'\n        '<option value=\"b\">b</option>'\n        '</select>'\n    )\n"], "sample_66": ["\nimport datetime\nimport decimal\nimport enum\nimport functools\nimport os\nimport re\nimport types\nfrom pathlib import PurePath\n\nfrom django.conf import settings\nfrom django.db import models\nfrom django.db.migrations.operations.base import Operation\nfrom django.db.migrations.serializer import (\n    BaseSequenceSerializer,\n    BaseSerializer,\n    BaseSimpleSerializer,\n    ChoicesSerializer,\n    DateTimeSerializer,\n    DatetimeDatetimeSerializer,\n    DecimalSerializer,\n    DeconstructableSerializer,\n    DictionarySerializer,\n    EnumSerializer,\n    FloatSerializer,\n    FrozensetSerializer,\n    FunctionTypeSerializer,\n    FunctoolsPartialSerializer,\n    IterableSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    PathLikeSerializer,\n    PathSerializer,\n    RegexSerializer,\n    SequenceSerializer,\n    SetSerializer,\n    SettingsReferenceSerializer,\n    TupleSerializer,\n    TypeSerializer,\n    UUIDSerializer,\n    serializer_factory,\n)\n\nfrom django.utils.version import PY311\n\nMY_UUID = uuid.uuid4()\n\n# We need to define some toy models for testing.\n\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass AnotherModel(models.Model):\n    my_model = models.ForeignKey(MyModel, on_delete=models.CASCADE)\n\nclass TestSerializer:\n    def test_base_serializer(self):\n        serializer = BaseSerializer(1)\n        with self.assertRaises(NotImplementedError):\n            serializer.serialize()\n\n    def test_base_sequence_serializer(self):\n        serializer = BaseSequenceSerializer([1, 2, 3])\n        with self.assertRaises(NotImplementedError):\n            serializer._format()\n        with self.assertRaises(NotImplementedError):\n            serializer.serialize()\n\n    def test_base_unordered_sequence_serializer(self):\n        serializer = BaseUnorderedSequenceSerializer([3, 1, 2])\n        assert isinstance(serializer.value, list)\n        assert sorted(serializer.value) == [1, 2, 3]\n\n    def test_base_simple_serializer(self):\n        serializer = BaseSimpleSerializer(1)\n        serialized, imports = serializer.serialize()\n        assert serialized == \"1\"\n        assert imports == set()\n\n    def test_choices_serializer(self):\n        serializer = ChoicesSerializer(models.Field.choices)\n        serialized, imports = serializer.serialize()\n        assert isinstance(serialized, str)\n\n    def test_datetime_serializer(self):\n        now = datetime.datetime.now()\n        serializer = DateTimeSerializer(now.date())\n        serialized, imports = serializer.serialize()\n        assert serialized == repr(now.date())\n        assert imports == {\"import datetime\"}\n\n    def test_datetimedatetime_serializer(self):\n        now = datetime.datetime.now()\n        serializer = DatetimeDatetimeSerializer(now)\n        serialized, imports = serializer.serialize()\n        assert serialized == repr(now.astimezone(datetime.timezone.utc))\n        assert imports == [\"import datetime\"]\n\n    def test_decimal_serializer(self):\n        serializer = DecimalSerializer(decimal.Decimal(\"1.23\"))\n        serialized, imports = serializer.serialize()\n        assert serialized == \"Decimal('1.23')\"\n        assert imports == {\"from decimal import Decimal\"}\n\n    def test_deconstructable_serializer(self):\n        class MyClass(models.Model):\n            pass\n        \n        field = models.OneToOneField(MyClass, on_delete=models.CASCADE)\n        serializer = DeconstructableSerializer(field.deconstruct())\n        serialized, imports = serializer.serialize()\n        assert isinstance(serialized, str)\n\n    def test_dictionary_serializer(self):\n        serializer = DictionarySerializer({\n            \"key1\": \"value1\",\n            \"key2\": \"value2\"\n        })\n        serialized, imports = serializer.serialize()\n        assert isinstance(serialized, str)\n\n    def test_enum_serializer(self):\n\n\n        class MyEnum(enum.Enum):\n            CHOICE1 = 1\n            CHOICE2 = 2\n\n        serializer = EnumSerializer(MyEnum.CHOICE1)\n        serialized, imports = serializer.serialize()\n        assert isinstance(serialized, str)\n\n    def test_float_serializer(self):\n        \n        serializer = FloatSerializer(3.14)\n        serialized, imports = serializer.serialize()\n        assert serialized == '3.14'\n        assert imports == set()\n\n    def test_frozenset_serializer(self):\n        serializer = FrozensetSerializer(frozenset([1, 2, 3]))\n        serialized, imports = serializer.serialize()\n        assert serialized == \"frozenset([1, 2, 3])\"\n\n    def test_function_type_serializer(self):\n\n        def my_function(x):\n            return x + 1\n        serializer = FunctionTypeSerializer(my_function)\n        serialized, imports = serializer.serialize()\n        assert isinstance(serialized, str)\n\n    def test_functools_partial_serializer(self):\n        def my_function(a, b):\n            return a + b\n        partial_function = functools.partial(my_function, 1)\n\n        serializer = FunctoolsPartialSerializer(partial_function)\n        serialized, imports = serializer.serialize()\n        assert isinstance(serialized, str)\n\n    def test_iterable_serializer(self):\n        serializer = IterableSerializer([1, 2, 3])\n        serialized, imports = serializer.serialize()\n        assert serialized == \"(1, 2, 3)\"\n\n    def test_modelfield_serializer(self):\n        field = models.CharField(max_length=100)\n        serializer = ModelFieldSerializer(field.deconstruct())\n        serialized, imports = serializer.serialize()\n\n\n        assert isinstance(serialized, str)\n\n    def test_modelmanager_serializer(self):\n        mgr = MyModel.objects\n        serializer = ModelManagerSerializer(mgr.deconstruct())\n        serialized, imports = serializer.serialize()\n        assert isinstance(serialized, str)\n\n\n\n    def test_operation_serializer(self):\n\n\n        class MyOperation(Operation):\n            def __init__(self):\n                pass\n\n            def describe(self):\n                return \"\"\n\n        serializer = OperationSerializer(MyOperation())\n        serialized, imports = serializer.serialize()\n\n        assert isinstance(serialized, str)\n\n    def test_pathlike_serializer(self):\n        serializer = PathLikeSerializer(\"/path/to/file\")\n        serialized, imports = serializer.serialize()\n\n        assert serialized == \"'/path/to/file'\"\n\n    def test_path_serializer(self):\n        serializer = PathSerializer(PurePath(\"/path/to/file\"))\n        serialized, imports = serializer.serialize()\n\n        assert serialized == \"pathlib.Pure('/path/to/file')\"\n\n    def test_regex_serializer(self):\n        # Regex with default implicit flags\n        regex = re.compile(r\"[a-zA-Z]+\")\n        serializer = RegexSerializer(regex)\n        serialized, imports = serializer.serialize()\n        assert isinstance(serialized, str)\n\n        # Regex without default implicit flags\n        regex = re.compile(r\"[a-zA-Z]+\", re.IGNORECASE)\n        serializer = RegexSerializer(regex)\n        serialized, imports = serializer.serialize()\n        assert isinstance(serialized, str)\n\n    def test_sequence_serializer(self):\n        serializer = SequenceSerializer([1, 2, 3])\n        serialized, imports = serializer.serialize()\n        assert serialized == \"[1, 2, 3]\"\n    \n    def test_set_serializer(self):\n\n        serializer = SetSerializer({1, 2, 3})\n        serialized, imports = serializer.serialize()\n\n        assert serialized == \"{1, 2, 3}\"\n\n        serializer = SetSerializer(set())\n        serialized, imports = serializer.serialize()\n        assert serialized == \"set()\"\n\n\n\n    def test_settings_reference_serializer(self):\n        serializer = SettingsReferenceSerializer(settings.DEBUG)\n        serialized, imports = serializer.serialize()\n\n        assert serialized == \"settings.DEBUG\"\n\n    def test_tuple_serializer(self):\n        serializer = TupleSerializer((1, 2, 3))\n        serialized, imports = serializer.serialize()\n        assert serialized == \"(1, 2, 3)\"\n    \n    def test_type_serializer(self):\n        serializer = TypeSerializer(int)\n        serialized, imports = serializer.serialize()\n\n    def test_uuid_serializer(self):\n        serializer = UUIDSerializer(MY_UUID)\n        serialized, imports = serializer.serialize()\n        assert isinstance(serialized, str)\n\n\n\n"], "sample_76": ["\nimport pytest\nfrom numpy.testing import assert_array_almost_equal\n\nfrom seaborn._stats.regression import PolyFit\n\ndef _make_data(n, noise=0.1):\n    x = np.linspace(-2, 2, n)\n    y = x**2 + np.random.randn(n) * noise\n    return pd.DataFrame({'x': x, 'y': y})\n\ndef test_polyfit_basic():\n    data = _make_data(20)\n    stat = PolyFit(order=2)\n    result = stat(data, groupby=lambda x: x['x'], orient='x').reset_index()\n    assert len(result) == stat.gridsize\n\ndef test_polyfit_high_order():\n    data = _make_data(20)\n    stat = PolyFit(order=5)\n    result = stat(data, groupby=lambda x: x['x'], orient='x').reset_index()\n    assert len(result) == stat.gridsize\n\ndef test_polyfit_low_points():\n    data = _make_data(3)\n    stat = PolyFit(order=2)\n    result = stat(data, groupby=lambda x: x['x'], orient='x').reset_index()\n    assert len(result) == 0\n\n    \ndef test_polyfit_groupby():\n    data = pd.concat([_make_data(20), _make_data(20)], ignore_index=True)\n    stat = PolyFit(order=2)\n    result = stat(data, groupby=lambda x: x['x'] // 1.5, orient='x').reset_index()\n    assert len(result) == stat.gridsize * 2 \n\n"], "sample_78": ["\nimport click\nfrom click.testing import CliRunner\nfrom unittest.mock import patch, MagicMock\nimport os\nimport sys\nfrom io import StringIO\nfrom flask import Flask, current_app\nfrom flask.cli import AppGroup, FlaskGroup, NoAppException\n\n# Replace with actual imports from your src/flask/cli.py\nfrom flask.cli import (\n    _app_option,\n    _debug_option,\n    _env_file_option,\n    CertParamType,\n    _validate_key,\n    SeparatedPathType,\n    load_dotenv,\n    prepare_import,\n    locate_app,\n    get_debug_flag,\n    with_appcontext,\n    ScriptInfo,\n    run_command,\n    shell_command,\n    routes_command,\n)\n\nrunner = CliRunner()\n\ndef test_app_option():\n    result = runner.invoke(cli, [\"--app\", \"my_app\"])\n    assert result.exit_code == 0\n\ndef test_debug_option():\n    result = runner.invoke(cli, [\"--debug\"])\n    assert result.exit_code == 0\n    assert os.environ.get(\"FLASK_DEBUG\") == '1'\n\ndef test_env_file_option():\n    with patch(\"dotenv.load_dotenv\") as mock_load_dotenv:\n        result = runner.invoke(cli, [\"--env-file\", \"test.env\"])\n        assert result.exit_code == 0\n        mock_load_dotenv.assert_called_once_with(\"test.env\")\n\ndef test_cert_param_type():\n    cert_type = CertParamType()\n    assert cert_type.convert(\"my_cert.pem\", None, None) == \"my_cert.pem\"\n    assert cert_type.convert(\"adhoc\", None, None) == \"adhoc\"\n\n    with pytest.raises(click.BadParameter):\n        cert_type.convert(\"invalid_cert\", None, None)\n\ndef test_validate_key():\n    ctx = click.Context(click.Command(name=\"run\"))\n    ctx.params[\"cert\"] = \"my_cert.pem\"\n    \n    _validate_key(ctx, click.Parameter(name=\"key\"), \"my_key.pem\")\n    assert ctx.params[\"cert\"] == (\"my_cert.pem\", \"my_key.pem\")\n    \n    with pytest.raises(click.BadParameter):\n        _validate_key(ctx, click.Parameter(name=\"key\"), None)\n\ndef test_separated_path_type():\n    path_type = SeparatedPathType()\n    assert path_type.convert(\"path1:path2;path3\", None, None) == [\"path1\", \"path2\", \"path3\"]\n\ndef test_load_dotenv():\n    with patch(\"dotenv.find_dotenv\", return_value=\"/path/to/.env\"):\n        load_dotenv()\n        assert os.environ.get(\"FLASK_ENV\") is not None \n\ndef test_prepare_import():\n    assert prepare_import(\"my_app\") == [\"my_app\"]\n    assert prepare_import(\"my_package.my_app\") == [\"my_package\", \"my_app\"]\n    assert prepare_import(\"./my_app\") == [os.getcwd(), \"my_app\"]\n\n\ndef test_locate_app():\n    with patch(\"sys.path\", [os.getcwd()]):\n        app = locate_app(\"my_app\")\n        assert app is None\n\ndef test_get_debug_flag():\n    os.environ[\"FLASK_DEBUG\"] = \"1\"\n    assert get_debug_flag() is True\n\ndef test_with_appcontext():\n    app = Flask(__name__)\n    with app.app_context():\n        assert current_app == app\n\ndef test_script_info():\n    info = ScriptInfo(create_app=lambda: Flask(__name__))\n    assert info.app_import_path is None\n\ndef test_run_command():\n    with patch(\"flask.cli.run_simple\") as mock_run_simple:\n        result = runner.invoke(cli, [\"run\", \"--host\", \"localhost\"])\n        assert result.exit_code == 0\n        mock_run_simple.assert_called_once()\n\ndef test_shell_command():\n    with patch(\"code.interact\") as mock_interact:\n        result = runner.invoke(cli, [\"shell\"])\n        assert result.exit_code == 0\n        mock_interact.assert_called_once()\n    \ndef test_routes_command():\n    app = Flask(__name__)\n    with app.app_context():\n        result = runner.invoke(cli, [\"routes\"])\n        assert result.exit_code == 0\n\n\n\n"], "sample_50": ["\nfrom django.test import SimpleTestCase\nfrom django.forms.models import (\n    BaseModelFormSet,\n    BaseInlineFormSet,\n    InlineForeignKeyField,\n    ModelChoiceField,\n    ModelChoiceIterator,\n    ModelMultipleChoiceField,\n    modelformset_factory,\n    inlineformset_factory,\n    _get_foreign_key,\n)\nfrom django.core.exceptions import ValidationError\nfrom django.db import models\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n    \n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n\nclass Article(models.Model):\n    headline = models.CharField(max_length=200)\n    content = models.TextField()\n\nclass Writer(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass TestInlineForeignKeyField(SimpleTestCase):\n\n    def test_init(self):\n        parent_instance = Author.objects.create(name=\"Test Author\")\n        field = InlineForeignKeyField(parent_instance, fk_name='author')\n        self.assertEqual(field.parent_instance, parent_instance)\n\n    def test_clean_valid(self):\n        parent_instance = Author.objects.create(name=\"Test Author\")\n        field = InlineForeignKeyField(parent_instance, fk_name='author')\n        value = parent_instance.pk\n        self.assertEqual(field.clean(value), parent_instance)\n\n    def test_clean_invalid(self):\n        parent_instance = Author.objects.create(name=\"Test Author\")\n        field = InlineForeignKeyField(parent_instance, fk_name='author')\n        with self.assertRaises(ValidationError):\n            field.clean(1000)\n\n    def test_has_changed(self):\n        parent_instance = Author.objects.create(name=\"Test Author\")\n        field = InlineForeignKeyField(parent_instance, fk_name='author')\n        self.assertFalse(field.has_changed(\"\", parent_instance.pk))\n\nclass TestModelChoiceIterator(SimpleTestCase):\n\n    def test_iter(self):\n        Author.objects.create(name='Test Author')\n        field = ModelChoiceField(queryset=Author.objects.all())\n        iterator = field.iterator\n        self.assertTrue(next(iterator) is None)\n\nclass TestModelChoiceField(SimpleTestCase):\n\n    def test_prepare_value(self):\n        author = Author.objects.create(name='Test Author')\n        field = ModelChoiceField(queryset=Author.objects.all())\n        self.assertEqual(field.prepare_value(author), author.pk)\n\n    def test_to_python(self):\n        author = Author.objects.create(name='Test Author')\n        field = ModelChoiceField(queryset=Author.objects.all())\n        self.assertEqual(field.to_python(author.pk), author)\n\n    def test_validate(self):\n        author = Author.objects.create(name='Test Author')\n        field = ModelChoiceField(queryset=Author.objects.all())\n        field.validate(author.pk)\n\nclass TestModelMultipleChoiceField(SimpleTestCase):\n    def test_to_python(self):\n        Author.objects.create(name='Test Author 1')\n        Author.objects.create(name='Test Author 2')\n        field = ModelMultipleChoiceField(queryset=Author.objects.all())\n        self.assertEqual(field.to_python([1, 2]), list(Author.objects.all()))\n\n\n\nclass TestBaseModelFormSet(SimpleTestCase):\n\n    def test_initial_form_count(self):\n        formset = modelformset_factory(Book, fields=['title'])\n        self.assertEqual(formset().initial_form_count(), 0)\n\nclass TestBaseInlineFormSet(SimpleTestCase):\n\n    def test_get_default_prefix(self):\n        formset = inlineformset_factory(\n            Book,\n            Author,\n            fields=['name']\n        )\n        self.assertEqual(formset.get_default_prefix(), 'author')\n\nclass TestModelformsetFactory(SimpleTestCase):\n\n    def test_create_formset(self):\n        formset = modelformset_factory(Book, fields=['title'])\n        self.assertTrue(formset)\n\nclass TestInlineFormsetFactory(SimpleTestCase):\n\n    def test_create_formset(self):\n        formset = inlineformset_factory(Book, Author, fields=['name'])\n        self.assertTrue(formset)\n\nclass TestGetForeignKey(SimpleTestCase):\n\n    def test_get_foreign_key(self):\n        fk = _get_foreign_key(Book, Author)\n        self.assertEqual(fk.related_name, 'book_set')\n"], "sample_80": ["\nimport pytest\nimport numpy as np\nimport pandas as pd\nfrom xarray import DataArray, Dataset, Variable, concat\n\ndef test_concat_datasets_identical():\n    data1 = Dataset({'a': (('x', 'y'), np.ones((2, 3))), 'b': 2},\n                    coords={'x': [0, 1], 'y': ['a', 'b', 'c']})\n    data2 = Dataset({'a': (('x', 'y'), np.ones((2, 3)) * 2), 'b': 2},\n                    coords={'x': [0, 1], 'y': ['a', 'b', 'c']})\n\n    expected = Dataset({'a': (('dim_0', 'x', 'y'), np.concatenate([data1['a'].values, data2['a'].values])), 'b': 2},\n                       coords={'x': [0, 1], 'y': ['a', 'b', 'c'], 'dim_0': [0, 1]})\n    actual = concat([data1, data2], dim='dim_0', compat='identical')\n\n    assert actual.equals(expected)\n\ndef test_concat_datasets_different_compat():\n    data1 = Dataset({'a': (('x', 'y'), np.ones((2, 3))), 'b': 2},\n                    coords={'x': [0, 1], 'y': ['a', 'b', 'c']})\n    data2 = Dataset({'a': (('x', 'y'), np.ones((2, 3)) * 2), 'b': 3},\n                    coords={'x': [0, 1], 'y': ['a', 'b', 'c']})\n\n    expected = Dataset({'a': (('dim_0', 'x', 'y'), np.concatenate([data1['a'].values, data2['a'].values])), 'b': (('dim_0',), [2, 3])},\n                       coords={'x': [0, 1], 'y': ['a', 'b', 'c'], 'dim_0': [0, 1]})\n\n    actual = concat([data1, data2], dim='dim_0', compat='equals')\n\n    assert actual.equals(expected)\n\ndef test_concat_datasets_diff_coords():\n    data1 = Dataset({'a': (('x', 'y'), np.ones((2, 3))), 'b': 2},\n                    coords={'x': [0, 1], 'y': ['a', 'b', 'c']})\n    data2 = Dataset({'a': (('x', 'y'), np.ones((2, 3)) * 2), 'b': 2},\n                    coords={'x': [2, 3], 'y': ['a', 'b', 'c']})\n\n    expected = Dataset({'a': (('dim_0', 'x', 'y'), np.concatenate([data1['a'].values, data2['a'].values])), 'b': 2},\n                       coords={'x': [0, 1, 2, 3], 'y': ['a', 'b', 'c'], 'dim_0': [0, 1]})\n\n    actual = concat([data1, data2], dim='dim_0')\n\n    assert actual.equals(expected)\n\n\ndef test_concat_dataarrays():\n    data1 = DataArray(np.ones((2, 3)), coords={'x': [0, 1], 'y': ['a', 'b', 'c']})\n    data2 = DataArray(np.ones((2, 3)) * 2, coords={'x': [0, 1], 'y': ['a', 'b', 'c']})\n    expected = DataArray(np.concatenate([data1.values, data2.values]), coords={'dim_0': [0, 1], 'x': [0, 1], 'y': ['a', 'b', 'c']})\n    actual = concat([data1, data2], dim='dim_0')\n\n    assert actual.equals(expected)\n\ndef test_concat_diff_dataarrays_same_name():\n    data1 = DataArray(np.ones((2, 3)), coords={'x': [0, 1], 'y': ['a', 'b', 'c']}, name='data')\n    data2 = DataArray(np.ones((2, 3)) * 2, coords={'x': [0, 1], 'y': ['a', 'b', 'c']}, name='data')\n    with pytest.raises(ValueError):\n        concat([data1, data2], dim='dim_0')\n\ndef test_concat_empty_datasets():\n    data1 = Dataset({'a': (('x',), np.array([]))})\n    data2 = Dataset({'a': (('x',), np.array([]))})\n\n    actual = concat([data1, data2], dim='dim_0')\n\n    assert (actual['a'].shape == (0,))\n\n\ndef test_concat_datasets_with_different_dims():\n    data1 = Dataset({'a': (('x',), np.arange(3))})\n    data2 = Dataset({'a': (('y',), np.arange(4))})\n\n    with pytest.raises(ValueError):\n        concat([data1, data2], dim='dim_0')\n\n   \n\ndef test_concat_datasets_with_data_vars_coord_conflict():\n    data1 = Dataset({'a': (('x',), np.arange(3))}, coords={'x': np.array([0, 1, 2])})\n    data2 = Dataset({'a': (('x',), np.arange(3))}, coords={'x': np.array(['a', 'b', 'c'])})\n\n    expected = Dataset({'a': (('dim_0', 'x'), np.concatenate([np.arange(3), np.arange(3)])), 'x': ('x', np.array([0, 1, 2, 'a', 'b', 'c']))},\n                       coords={'dim_0': [0, 1]})\n    actual = concat([data1, data2], dim='dim_0', compat='no_conflicts')\n\n    assert actual.equals(expected)\n"], "sample_44": ["\nimport unittest\nfrom django.db import migrations\nfrom django.apps import apps\nfrom django.db.migrations.executor import MigrationExecutor\nfrom django.db.migrations.loader import MigrationLoader\nfrom django.db.migrations.recorder import MigrationRecorder\nfrom django.db.backends.dummy.base import DatabaseWrapper\n\nclass TestMigrationExecutor(unittest.TestCase):\n\n    def setUp(self):\n        self.connection = DatabaseWrapper()\n        self.migration_loader = MigrationLoader(self.connection)\n        self.migration_recorder = MigrationRecorder(self.connection)\n        self.executor = MigrationExecutor(self.connection)\n\n    def test_migration_plan_empty(self):\n        plan = self.executor.migration_plan([], clean_start=False)\n        self.assertEqual(plan, [])\n\n    def test_migration_plan_clean_start(self):\n        # Test a simple scenario with one migration\n        migration = migrations.Migration(\"test_app\", \"0001_initial\")\n        self.migration_loader.graph.nodes[migration] = migration\n        plan = self.executor.migration_plan([('test_app', '0001_initial')], clean_start=True)\n        self.assertEqual(plan, [(migration, False)])\n\n    def test_migration_plan_unapply_all(self):\n        # Test unapplying everything in an app\n        migration = migrations.Migration(\"test_app\", \"0001_initial\")\n        self.migration_loader.graph.nodes[migration] = migration\n        plan = self.executor.migration_plan([('test_app', None)], clean_start=False)\n        self.assertEqual(plan, [(migration, True)])\n\n    def test_migration_plan_applied_migration(self):\n        # Test a scenario where a migration is already applied\n        migration = migrations.Migration(\"test_app\", \"0001_initial\")\n        self.migration_loader.graph.nodes[migration] = migration\n        self.migration_recorder.record_applied('test_app', '0001_initial')\n        plan = self.executor.migration_plan([('test_app', '0001_initial')], clean_start=False)\n        self.assertEqual(plan, [])\n\n    def test_migration_plan_replaced_migration(self):\n        # Test a scenario with replaced migrations\n        migration1 = migrations.Migration(\"test_app\", \"0001_initial\")\n        migration2 = migrations.Migration(\"test_app\", \"0002_alteration\")\n        self.migration_loader.graph.nodes[migration1] = migration1\n        self.migration_loader.graph.nodes[migration2] = migration2\n        migration2.replaces = [('test_app', '0001_initial')]\n\n        self.migration_recorder.record_applied('test_app', '0001_initial')\n        plan = self.executor.migration_plan([('test_app', '0002_alteration')], clean_start=False)\n        self.assertEqual(plan, [(migration2, False)])\n\n    def test_create_project_state(self):\n        # Test creating a project state\n        self.executor._create_project_state()\n\n    def test_migrate_empty(self):\n        # Test migrating with an empty list of targets\n        state = self.executor.migrate([], clean_start=False)\n\n    def test_migrate_clean_start(self):\n        # Test migrating with clean_start=True\n        migration = migrations.Migration(\"test_app\", \"0001_initial\")\n        self.migration_loader.graph.nodes[migration] = migration\n        state = self.executor.migrate([('test_app', '0001_initial')], clean_start=True)\n\n    def test_migrate_unapply(self):\n        # Test unapplying a migration\n        migration = migrations.Migration(\"test_app\", \"0001_initial\")\n        self.migration_loader.graph.nodes[migration] = migration\n        self.migration_recorder.record_applied('test_app', '0001_initial')\n        state = self.executor.migrate([('test_app', '0001_initial')], clean_start=False)\n\n    def test_apply_migration(self):\n        # Test applying a migration\n        migration = migrations.Migration(\"test_app\", \"0001_initial\")\n        self.migration_loader.graph.nodes[migration] = migration\n        state = self.executor.apply_migration(None, migration)\n\n    def test_unapply_migration(self):\n        # Test unapplying a migration\n        migration = migrations.Migration(\"test_app\", \"0001_initial\")\n        self.migration_loader.graph.nodes[migration] = migration\n        state = self.executor.unapply_migration(None, migration)\n\n    def test_record_migration(self):\n        # Test recording a migration as applied\n        migration = migrations.Migration(\"test_app\", \"0001_initial\")\n        self.executor.record_migration(migration)\n\n    def test_check_replacements(self):\n        # Test checking for replaced migrations\n        self.executor.check_replacements()\n\n    def test_detect_soft_applied(self):\n        # Test detecting implicitly applied migrations\n        migration = migrations.Migration(\"test_app\", \"0001_initial\")\n        self.executor.detect_soft_applied(None, migration) \n\n\n\n"], "sample_32": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.dispatch import Signal, receiver\nfrom django.conf import settings\nfrom django.utils.deprecation import RemovedInDjango40Warning\n\n\nclass SignalTests(unittest.TestCase):\n\n    def setUp(self):\n        self.signal = Signal()\n        self.sender = object()\n\n    def test_connect_disconnect(self):\n        receiver = MagicMock()\n        self.signal.connect(receiver, sender=self.sender)\n        self.assertTrue(self.signal.has_listeners(self.sender))\n        self.signal.disconnect(receiver, sender=self.sender)\n        self.assertFalse(self.signal.has_listeners(self.sender))\n\n    def test_connect_disconnect_dispatch_uid(self):\n        receiver1 = MagicMock()\n        receiver2 = MagicMock()\n        self.signal.connect(receiver1, sender=self.sender, dispatch_uid='1')\n        self.signal.connect(receiver2, sender=self.sender, dispatch_uid='2')\n\n        self.assertTrue(self.signal.has_listeners(self.sender))\n        self.signal.disconnect(dispatch_uid='1')\n        self.assertTrue(self.signal.has_listeners(self.sender))\n        self.signal.disconnect(dispatch_uid='2')\n        self.assertFalse(self.signal.has_listeners(self.sender))\n\n    def test_connect_duplicate_dispatch_uid(self):\n        receiver = MagicMock()\n        self.signal.connect(receiver, sender=self.sender, dispatch_uid='1')\n        with self.assertRaises(ValueError):\n            self.signal.connect(receiver, sender=self.sender, dispatch_uid='1')\n\n    def test_send(self):\n        receiver = MagicMock()\n        self.signal.connect(receiver, sender=self.sender)\n        self.signal.send(self.sender, key='value')\n        receiver.assert_called_once_with(signal=self.signal, sender=self.sender, key='value')\n\n    def test_send_robust(self):\n        receiver = MagicMock()\n        self.signal.connect(receiver, sender=self.sender)\n        self.signal.send_robust(self.sender, key='value')\n        receiver.assert_called_once_with(signal=self.signal, sender=self.sender, key='value')\n\n    def test_send_robust_error(self):\n        def error_receiver(sender, **kwargs):\n            raise ValueError('Error')\n        self.signal.connect(error_receiver, sender=self.sender)\n        responses = self.signal.send_robust(self.sender, key='value')\n        self.assertEqual(len(responses), 1)\n        self.assertRaises(ValueError, lambda: responses[0][1])\n\n    def test_receiver_decorator(self):\n        @receiver(self.signal, sender=self.sender)\n        def receiver_func(sender, **kwargs):\n            pass\n        self.assertTrue(self.signal.has_listeners(self.sender))\n\n        @receiver([self.signal, Signal()], sender=self.sender)\n        def receiver_func2(sender, **kwargs):\n            pass\n        self.assertTrue(self.signal.has_listeners(self.sender))\n\n    def test_receiver_decorator_multiple_signals(self):\n        signal2 = Signal()\n        @receiver([self.signal, signal2], sender=self.sender)\n        def receiver_func(sender, **kwargs):\n            pass\n        self.assertTrue(self.signal.has_listeners(self.sender))\n        self.assertTrue(signal2.has_listeners(self.sender))\n\n    def test_providing_args_deprecation(self):\n        with patch('django.utils.deprecation.warnings') as mock_warnings:\n            Signal(providing_args='foo')\n            mock_warnings.warn.assert_called_once()\n\n    def test_weak_reference(self):\n        class WeakReceiver:\n            pass\n        receiver = WeakReceiver()\n        self.signal.connect(receiver, sender=self.sender)\n        del receiver\n        self.assertFalse(self.signal.has_listeners(self.sender))\n\n    def test_caching(self):\n        self.signal = Signal(use_caching=True)\n        receiver = MagicMock()\n        self.signal.connect(receiver, sender=self.sender)\n        self.assertTrue(self.signal.has_listeners(self.sender))\n\n\n\n"], "sample_136": ["\nfrom sympy import symbols, sin, cos, pi\nfrom sympy.physics.vector import dynamicsymbols, Point, ReferenceFrame\nfrom sympy.physics.vector import init_vprinting\n\ninit_vprinting(pretty_print=False)\n\ndef test_point_instantiation():\n    p1 = Point('p1')\n    assert p1.name == 'p1'\n\ndef test_set_pos():\n    N = ReferenceFrame('N')\n    p1 = Point('p1')\n    p2 = Point('p2')\n    p1.set_pos(p2, 10 * N.x)\n    assert p1.pos_from(p2) == 10 * N.x\n\ndef test_set_vel():\n    N = ReferenceFrame('N')\n    p1 = Point('p1')\n    q1 = dynamicsymbols('q1')\n    p1.set_vel(N, q1*N.x)\n    assert p1.vel(N) == q1*N.x\n\ndef test_set_acc():\n    N = ReferenceFrame('N')\n    p1 = Point('p1')\n    q1 = dynamicsymbols('q1')\n    p1.set_acc(N, q1*N.x)\n    assert p1.acc(N) == q1*N.x\n\ndef test_locatenew():\n    N = ReferenceFrame('N')\n    p1 = Point('p1')\n    p2 = p1.locatenew('p2', 10 * N.x)\n    assert p2.pos_from(p1) == 10 * N.x\n\ndef test_v1pt_theory():\n    N = ReferenceFrame('N')\n    B = ReferenceFrame('B')\n    B.set_ang_vel(N, 5*B.y)\n    O = Point('O')\n    P = O.locatenew('P', 1*B.x)\n    q = dynamicsymbols('q')\n    qd = dynamicsymbols('q',1)\n    P.set_vel(B, qd * B.x)\n    O.set_vel(N, 0)\n    P.v1pt_theory(O, N, B)\n    assert P.vel(N) == qd*B.x + 5*P.pos_from(O).cross(B.y)\n\ndef test_v2pt_theory():\n    N = ReferenceFrame('N')\n    B = ReferenceFrame('B')\n    O = Point('O')\n    P = O.locatenew('P', 10*B.x)\n    q = dynamicsymbols('q')\n    qd = dynamicsymbols('q', 1)\n    O.set_vel(N, 5*N.x)\n    P.v2pt_theory(O, N, B)\n    assert P.vel(N) == 5*N.x + 10*(qd*B.x).cross(B.y)\n\ndef test_a1pt_theory():\n    N = ReferenceFrame('N')\n    B = ReferenceFrame('B')\n    B.set_ang_vel(N, 5*B.y)\n    O = Point('O')\n    P = O.locatenew('P', 1*B.x)\n    q = dynamicsymbols('q')\n    qd = dynamicsymbols('q', 1)\n    q2d = dynamicsymbols('q2', 1)\n    P.set_vel(B, qd * B.x + q2d * B.y)\n    O.set_vel(N, 0)\n    P.a1pt_theory(O, N, B)\n    assert P.acc(N) == (-25*q + qd**2)*B.x + q2d**2*B.y - 10*qd*B.z\n\ndef test_a2pt_theory():\n    N = ReferenceFrame('N')\n    B = ReferenceFrame('B')\n    O = Point('O')\n    P = O.locatenew('P', 10*B.x)\n    q = dynamicsymbols('q')\n    qd = dynamicsymbols('q',1)\n    O.set_vel(N, 5*N.x)\n    P.a2pt_theory(O, N, B)\n    assert P.acc(N) == -10*qd**2*B.x + 10*qdd*B.y\n\ndef test_pos_from():\n    N = ReferenceFrame('N')\n    p1 = Point('p1')\n    p2 = Point('p2')\n    p1.set_pos(p2, 10*N.x)\n    assert p1.pos_from(p2) == 10*N.x\n\ndef test_partial_velocity():\n    N = ReferenceFrame('N')\n    A = ReferenceFrame('A')\n    p = Point('p')\n    u1, u2 = dynamicsymbols('u1 u2')\n    p.set_vel(N, u1 * N.x + u2 * A.y)\n    assert p.partial_velocity(N, u1) == N.x\n    assert p.partial_velocity(N, u1, u2) == (N.x, A.y)\n\ndef test_simple_velocity():\n    N = ReferenceFrame('N')\n    p1 = Point('p1')\n    p1.set_vel(N, 10 * N.x)\n    assert p1.vel(N) == 10*N.x\n\ndef test_chained_velocity():\n    N = ReferenceFrame('N')\n    p1 = Point('p1')\n    p2 = Point('p2')\n    p3 = Point('p3')\n    p2.set_pos(p1, 10*N.x)\n    p3.set_pos(p2, 10*N.y)\n    p1.set_vel(N, 5*N.x)\n    assert p3.vel(N) == 5*N.x\n\ndef test_acceleration_chain():\n    N = ReferenceFrame('N')\n    p1 = Point('p1')\n    p2 = Point('p2')\n    p3 = Point('p3')\n    p2.set_pos(p1, 10*N.x)\n    p3.set_pos(p2, 10*N.y)\n    p1.set_vel(N, 5*N.x)\n    p1.set_acc(N, 10*N.x)\n    assert p3.acc(N) == 10*N.x\n\ndef test_complex_velocity():\n    N = ReferenceFrame('N')\n    A = ReferenceFrame('A')\n    p = Point('p')\n    u1, u2 = dynamicsymbols('u1 u2')\n    p.set_vel(N, u1 * N.x + u2 * A.y)\n    assert p.vel(N) == u1*N.x + u2*A.y\n\n\n\n"], "sample_3": ["\nimport os\nimport sys\nimport threading\nimport unittest\nfrom unittest import mock\n\nfrom django.utils import autoreload\nfrom django.utils.autoreload import (\n    BaseReloader,\n    StatReloader,\n    WatchmanReloader,\n    WatchmanUnavailable,\n    file_changed,\n    get_reloader,\n    trigger_reload,\n)\nfrom django.apps import apps\n\nfrom pathlib import Path\n\n\nclass ReloaderTestCase(unittest.TestCase):\n    def setUp(self):\n        self.reloader = StatReloader()\n\n    def test_check_availability(self):\n        with mock.patch('django.utils.autoreload.StatReloader.check_availability', return_value=True):\n            StatReloader.check_availability()\n        with self.assertRaises(WatchmanUnavailable):\n            with mock.patch('django.utils.autoreload.pywatchman', None):\n                WatchmanReloader.check_availability()\n\n    def test_get_reloader(self):\n        with mock.patch('django.utils.autoreload.pywatchman', None):\n            self.assertIsInstance(get_reloader(), StatReloader)\n\n    def test_trigger_reload(self):\n        with mock.patch('sys.exit') as mock_exit:\n            trigger_reload('test.py')\n            mock_exit.assert_called_once_with(3)\n\n    def test_run(self):\n        self.reloader.extra_files.add(Path('/path/to/test_file.py'))\n        main_thread = threading.Thread(target=lambda: None)\n        with mock.patch('django.urls.get_resolver') as resolver_mock:\n            resolver_mock.urlconf_module = mock.MagicMock()\n            with mock.patch('django.utils.autoreload.BaseReloader.wait_for_apps_ready', return_value=True):\n                self.reloader.run(main_thread)\n            self.assertTrue(self.reloader.should_stop)\n\n\nclass WatchmanReloaderTestCase(unittest.TestCase):\n\n    @mock.patch('django.utils.autoreload.pywatchman')\n    def test_check_availability_watchman_not_installed(self, mock_watchman):\n        mock_watchman.client = None\n        with self.assertRaises(WatchmanUnavailable):\n            WatchmanReloader.check_availability()\n\n    @mock.patch('django.utils.autoreload.pywatchman')\n    def test_check_availability_watchman_version_too_low(self, mock_watchman):\n        mock_watchman.client = mock.MagicMock()\n        mock_watchman.client.capabilityCheck.return_value = {'version': '4.8.0'}\n        with self.assertRaises(WatchmanUnavailable):\n            WatchmanReloader.check_availability()\n\n    @mock.patch('django.utils.autoreload.pywatchman')\n    def test_check_availability_watchman_version_ok(self, mock_watchman):\n        mock_watchman.client = mock.MagicMock()\n        mock_watchman.client.capabilityCheck.return_value = {'version': '4.10.0'}\n        WatchmanReloader.check_availability()\n\n    def test_watch_dir_invalid_directory(self):\n        reloader = WatchmanReloader()\n        with self.assertRaises(ValueError):\n            reloader.watch_dir('invalid', '*.py')\n    \n    @mock.patch('django.utils.autoreload.WatchmanReloader._watch_root')\n    def test_watch_dir_missing_directory(self, mock_watch_root):\n        reloader = WatchmanReloader()\n        mock_watch_root.return_value = (None, None)\n        reloader.watch_dir(Path('/path/to/missing/dir'), '*.py')\n        mock_watch_root.assert_called_once_with(Path('/path/to/missing/dir'))\n\nclass FileChangedSignalTestCase(unittest.TestCase):\n    def test_file_changed_signal(self):\n        def handler(sender, file_path, **kwargs):\n            self.file_path = file_path\n\n        file_changed.connect(handler)\n        autoreload.notify_file_changed('test.py')\n        self.assertEqual(self.file_path, 'test.py')\n\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_112": ["\nimport numpy as np\nfrom sklearn.cluster import AffinityPropagation\nfrom sklearn.cluster._affinity_propagation import (\n    _equal_similarities_and_preferences, affinity_propagation\n)\nfrom sklearn.metrics import euclidean_distances\n\n\ndef test_equal_similarities_and_preferences():\n    # Test case 1: All similarities and preferences are equal\n    S = np.array([[1, 1, 1],\n                  [1, 1, 1],\n                  [1, 1, 1]])\n    preference = 1\n    assert _equal_similarities_and_preferences(S, preference)\n\n    # Test case 2: Similarities are equal, preferences are different\n    S = np.array([[1, 1, 1],\n                  [1, 1, 1],\n                  [1, 1, 1]])\n    preference = np.array([1, 2, 3])\n    assert not _equal_similarities_and_preferences(S, preference)\n\n    # Test case 3: Similarities are different, preferences are equal\n    S = np.array([[1, 2, 3],\n                  [2, 1, 2],\n                  [3, 2, 1]])\n    preference = 1\n    assert not _equal_similarities_and_preferences(S, preference)\n\ndef test_affinity_propagation_basic():\n    # Test with small sample data\n    X = np.array([[1, 2], [1, 4], [1, 0],\n                  [4, 2], [4, 4], [4, 0]])\n    cluster_centers_indices, labels = affinity_propagation(\n        euclidean_distances(X, squared=True), preference=-50\n    )\n    assert len(cluster_centers_indices) == 2\n\ndef test_affinity_propagation_convergence():\n    # Test with data that converges quickly\n    X = np.array([[1, 2], [1, 3], [1, 4],\n                  [2, 2], [2, 3], [2, 4]])\n    cluster_centers_indices, labels, n_iter = affinity_propagation(\n        euclidean_distances(X, squared=True), preference=0, return_n_iter=True\n    )\n    assert n_iter <= 15\n\ndef test_affinity_propagation_no_convergence():\n    # Test with data that does not converge\n    X = np.array([[1, 1], [1, 1], [1, 1],\n                  [2, 2], [2, 2], [2, 2]])\n    cluster_centers_indices, labels, n_iter = affinity_propagation(\n        euclidean_distances(X, squared=True), preference=0, return_n_iter=True\n    )\n    assert n_iter == 200\n\ndef test_affinity_propagation_precomputed():\n    # Test with precomputed affinity matrix\n    S = np.array([[-10, 2, 3],\n                    [2, -10, 2],\n                    [3, 2, -10]])\n    cluster_centers_indices, labels = affinity_propagation(S)\n    assert len(cluster_centers_indices) > 0\n\ndef test_AffinityPropagation_class():\n    # Test the AffinityPropagation class\n    X = np.array([[1, 2], [1, 4], [1, 0],\n                  [4, 2], [4, 4], [4, 0]])\n    clustering = AffinityPropagation().fit(X)\n    assert len(clustering.cluster_centers_indices_) == 2\n\ndef test_AffinityPropagation_predict():\n    # Test the predict method\n    X = np.array([[1, 2], [1, 4], [1, 0],\n                  [4, 2], [4, 4], [4, 0]])\n    clustering = AffinityPropagation().fit(X)\n    predictions = clustering.predict([[0, 0], [4, 4]])\n    assert len(predictions) == 2\n"], "sample_118": ["\nfrom sympy import KroneckerDelta, diff, Piecewise, And\nfrom sympy import Sum\nfrom sympy.core import S, symbols, Add, Mul\nfrom sympy.functions import transpose, sin, cos, sqrt\nfrom sympy.simplify import simplify\nfrom sympy.matrices import (Identity, ImmutableMatrix, Inverse, MatAdd, MatMul, MatPow, Matrix, MatrixExpr, MatrixSymbol, ShapeError, ZeroMatrix, SparseMatrix, Transpose, Adjoint)\nfrom sympy.matrices.expressions.matexpr import MatrixElement, MatrixSymbol\nfrom sympy.utilities.pytest import raises\n\ndef test_MatrixSymbol_basic():\n    # Test basic functionality of MatrixSymbol\n    A = MatrixSymbol('A', 2, 2)\n    assert A.shape == (2, 2)\n    assert A.name == 'A'\n    assert isinstance(A, MatrixExpr)\n    assert not isinstance(A, ImmutableMatrix)\n\ndef test_MatrixSymbol_subs():\n    # Test substitution in MatrixSymbol\n    A = MatrixSymbol('A', 2, 3)\n    assert A._subs(2,3) == A \n    assert A._subs(S.Symbol('x'), S.Symbol('y')) == MatrixSymbol('A', 2, 3) \n\ndef test_MatrixElement():\n    # Test MatrixElement creation and access\n    A = MatrixSymbol('A', 3, 3)\n    x = MatrixElement(A, 1, 2)\n    assert x.parent == A\n    assert x.i == 1\n    assert x.j == 2\n\ndef test_MatrixElement_doit():\n    # Test MatrixElement.doit for symbolic and numerical matrices\n    x = MatrixSymbol('x', 3, 3)\n    y = MatrixElement(x, 1, 1)\n    assert y.doit() == y \n    \ndef test_Identity():\n    # Test Identity matrix\n    I = Identity(3)\n    assert I.rows == 3\n    assert I.cols == 3\n    assert I._entry(1, 1) == S.One\n    assert I * MatrixSymbol('A', 3, 3) == MatrixSymbol('A', 3, 3)\n    assert I.is_Identity\n\ndef test_ZeroMatrix():\n    # Test ZeroMatrix\n    Z = ZeroMatrix(2, 3)\n    assert Z.rows == 2\n    assert Z.cols == 3\n    assert Z._entry(0, 1) == S.Zero\n    assert Z * MatrixSymbol('A', 3, 2) == ZeroMatrix(2, 2) \n    assert Z.is_ZeroMatrix\n    assert bool(Z) == False\n\n\n\ndef test_MatrixExpr_add():\n    # Test MatrixExpr addition\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = A + B\n    assert isinstance(C, MatAdd)\n    assert C.args == (A, B)\n    assert C.doit(deep=True).shape == (2, 2)\n    \n\ndef test_MatrixExpr_mul():\n    # Test MatrixExpr multiplication\n    A = MatrixSymbol('A', 2, 3)\n    B = MatrixSymbol('B', 3, 2)\n    C = A * B\n    assert isinstance(C, MatMul)\n    assert C.args == (A, B)\n    assert C.shape == (2, 2)\n\ndef test_MatrixExpr_pow():\n    # Test MatrixExpr power\n    A = MatrixSymbol('A', 2, 2)\n    assert A**2 == MatPow(A, 2)\n    assert A**-1 == Inverse(A)\n    assert A**0 == Identity(2)\n    \n\ndef test_MatrixExpr_transpose():\n    # Test MatrixExpr transpose\n    A = MatrixSymbol('A', 2, 3)\n    assert A.T == Transpose(A)\n\n\ndef test_MatrixExpr_conjugate():\n    # Test MatrixExpr conjugate\n    A = MatrixSymbol('A', 2, 3)\n    assert A.conjugate() == Adjoint(Transpose(A))\n\ndef test_MatrixExpr_errors():\n    A = MatrixSymbol('A', 2, 3)\n    B = MatrixSymbol('B', 3, 4)\n    raises(ShapeError, lambda: A*B)\n    raises(NotImplementedError, lambda: A / B)\n\n\n\n"], "sample_4": ["\nimport os\nimport warnings\n\nimport numpy as np\nfrom astropy.io import fits\nfrom astropy.wcs import WCS, Sip, FITSFixedWarning\nfrom astropy.wcs._wcs import _WcsValidateResults, WCSError\nfrom astropy.tests.helper import pytest\n\nfrom ... import wcs\nfrom .. import _wcs\n\n\ndef test_wcs_from_header():\n    hdulist = fits.open(os.path.join(os.path.dirname(__file__),\n                                    'test_data/example.fits'))\n    wcs_obj = wcs.WCS(hdulist[0].header)\n    assert wcs_obj.wcs.naxis == 2\n    assert wcs_obj.wcs.ctype[0] == 'RA---TAN'\n\ndef test_wcs_from_header_no_naxis():\n    header = fits.Header({'CTYPE1': 'RA---TAN'})\n    with pytest.raises(WcsError):\n        wcs.WCS(header)\n\ndef test_wcs_from_header_empty():\n    header = fits.Header()\n    with pytest.raises(WcsError):\n        wcs.WCS(header)\n    \ndef test_wcs_from_header_keysel():\n    hdulist = fits.open(os.path.join(os.path.dirname(__file__),\n                                    'test_data/example.fits'))\n    wcs_obj = wcs.WCS(hdulist[0].header, keysel=['binary'])\n    assert wcs_obj.wcs.naxis == 2\n\ndef test_wcs_from_header_fix():\n    header = fits.Header({'CTYPE1': 'RA---TAN'})\n    wcs_obj = wcs.WCS(header, fix=True)\n    assert wcs_obj.wcs.naxis == 1\n\ndef test_wcs_to_header():\n    hdulist = fits.open(os.path.join(os.path.dirname(__file__),\n                                    'test_data/example.fits'))\n    wcs_obj = wcs.WCS(hdulist[0].header)\n    header = wcs_obj.to_header()\n    assert header['CTYPE1'] == 'RA---TAN'\n\ndef test_wcs_to_header_relax():\n    header = fits.Header({'CTYPE1': 'RA---TAN'})\n    wcs_obj = wcs.WCS(header)\n    header = wcs_obj.to_header(relax=True)\n    assert header['CTYPE1'] == 'RA---TAN'\n\n\ndef test_wcs_slicing():\n    hdulist = fits.open(os.path.join(os.path.dirname(__file__),\n                                    'test_data/example.fits'))\n    wcs_obj = wcs.WCS(hdulist[0].header)\n    sliced_wcs = wcs_obj.slice([(slice(None), slice(None))])\n    assert sliced_wcs.wcs.naxis == 2\n\ndef test_wcs_sub():\n    hdulist = fits.open(os.path.join(os.path.dirname(__file__),\n                                    'test_data/example.fits'))\n    wcs_obj = wcs.WCS(hdulist[0].header)\n    sub_wcs = wcs_obj.sub([1,2])\n    assert sub_wcs.wcs.naxis == 2\n\n\n\n\ndef test_wcs_axis_types():\n    hdulist = fits.open(os.path.join(os.path.dirname(__file__),\n                                    'test_data/example.fits'))\n    wcs_obj = wcs.WCS(hdulist[0].header)\n\n    result = wcs_obj.get_axis_types()\n    assert result[0]['coordinate_type'] is None\n    assert result[1]['coordinate_type'] == 'celestial'\n\n\n\ndef test_wcs_celestial():\n    hdulist = fits.open(os.path.join(os.path.dirname(__file__),\n                                    'test_data/example.fits'))\n    wcs_obj = wcs.WCS(hdulist[0].header)\n\n    celestial_wcs = wcs_obj.celestial\n\n    assert celestial_wcs.naxis == 2\n    assert celestial_wcs.wcs.ctype[0] == 'RA---TAN'\n\ndef test_wcs_is_celestial():\n    hdulist = fits.open(os.path.join(os.path.dirname(__file__),\n                                    'test_data/example.fits'))\n    wcs_obj = wcs.WCS(hdulist[0].header)\n    assert wcs_obj.is_celestial\n\ndef test_wcs_has_celestial():\n    hdulist = fits.open(os.path.join(os.path.dirname(__file__),\n                                    'test_data/example.fits'))\n    wcs_obj = wcs.WCS(hdulist[0].header)\n\n    assert wcs_obj.has_celestial\n\ndef test_wcs_pixel_scale_matrix():\n    hdulist = fits.open(os.path.join(os.path.dirname(__file__),\n                                    'test_data/example.fits'))\n    wcs_obj = wcs.WCS(hdulist[0].header)\n\n    pixel_scale_matrix = wcs_obj.pixel_scale_matrix\n    assert pixel_scale_matrix.shape == (2, 2)\n\n\n\ndef test_wcs_find_all_wcs():\n    hdulist = fits.open(os.path.join(os.path.dirname(__file__),\n                                    'test_data/example.fits'))\n    wcses = wcs.find_all_wcs(hdulist[0].header)\n\n    assert len(wcses) == 1\n\n\n\ndef test_wcs_validate():\n    hdulist = fits.open(os.path.join(os.path.dirname(__file__),\n                                    'test_data/example.fits'))\n\n    results = wcs.validate(hdulist)\n\n    assert isinstance(results, _WcsValidateResults)\n\n\n\n"], "sample_20": ["\nfrom django.core.checks import Error, Warning\nfrom django.core.checks.model_checks import (\n    _check_lazy_references,\n    _check_model,\n    _check_managers,\n    _check_fields,\n    _check_m2m_through_same_relationship,\n    _check_id_field,\n    _check_field_name_clashes,\n    _check_column_name_clashes,\n    _check_model_name_db_lookup_clashes,\n    _check_property_name_related_field_accessor_clashes,\n    _check_single_primary_key,\n    _check_index_together,\n    _check_unique_together,\n    _check_indexes,\n    _check_ordering,\n    _check_constraints,\n)\nfrom django.db import connection, connections, models\nfrom django.db.models import CheckConstraint, UniqueConstraint\nfrom django.db.models.base import ModelBase\nfrom django.db.models.functions import Lower\nfrom django.db.models.signals import post_init\nfrom django.test import TestCase, mock\nfrom django.utils import timezone\n\n\nclass TestModelBase(TestCase):\n\n    def test_check(self):\n        class TestModel(models.Model):\n            name = models.CharField(max_length=255)\n\n        # Test basic checks\n        errors = TestModel._meta._check_model()\n        self.assertEqual(len(errors), 0)\n\n    def test_check_lazy_references(self):\n        class LazyRefModel(models.Model):\n            pass\n\n        class TestModel(models.Model):\n            lazy_ref = models.ForeignKey(LazyRefModel, on_delete=models.CASCADE)\n\n        # Test lazy reference check\n        errors = _check_lazy_references(TestModel)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_managers(self):\n\n        class TestModel(models.Model):\n            objects = models.Manager()\n\n        errors = _check_managers(TestModel)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_fields_invalid_type(self):\n        class TestModel(models.Model):\n            invalid_field = 'not a field type'\n\n        errors = _check_fields(TestModel)\n        self.assertEqual(len(errors), 1)\n\n    def test_check_m2m_through_same_relationship(self):\n        class ThroughModel(models.Model):\n            model1 = models.ForeignKey('Model1', on_delete=models.CASCADE)\n            model2 = models.ForeignKey('Model2', on_delete=models.CASCADE)\n\n        class Model1(models.Model):\n            m2m_field = models.ManyToManyField('Model2', through=ThroughModel)\n\n        class Model2(models.Model):\n            pass\n\n        errors = _check_m2m_through_same_relationship([Model1], connections)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_id_field(self):\n        # Valid ID field\n        class TestModel(models.Model):\n            id = models.AutoField(primary_key=True)\n\n        errors = _check_id_field(TestModel)\n        self.assertEqual(len(errors), 0)\n\n        # Invalid ID field\n        class TestModel2(models.Model):\n            id = models.CharField(max_length=255)\n\n        errors = _check_id_field(TestModel2)\n        self.assertEqual(len(errors), 1)\n\n    def test_check_field_name_clashes(self):\n        class ParentModel(models.Model):\n            parent_field = models.CharField(max_length=255)\n\n        class ChildModel(ParentModel):\n            parent_field = models.IntegerField()\n\n        errors = _check_field_name_clashes(ChildModel)\n        self.assertEqual(len(errors), 1)\n\n    def test_check_column_name_clashes(self):\n        class TestModel(models.Model):\n            field1 = models.CharField(max_length=255, db_column='column_name')\n            field2 = models.CharField(max_length=255, db_column='column_name')\n\n        errors = _check_column_name_clashes(TestModel)\n        self.assertEqual(len(errors), 1)\n\n    def test_check_model_name_db_lookup_clashes(self):\n        class TestModel(models.Model):\n            pass\n\n        errors = _check_model_name_db_lookup_clashes(TestModel)\n        self.assertEqual(len(errors), 0)\n\n        class _Model(models.Model):\n            pass\n\n        errors = _check_model_name_db_lookup_clashes(_Model)\n        self.assertEqual(len(errors), 1)\n\n    def test_check_property_name_related_field_accessor_clashes(self):\n        class RelatedModel(models.Model):\n            related_field = models.CharField(max_length=255)\n\n        class TestModel(models.Model):\n            related = models.ForeignKey(RelatedModel, on_delete=models.CASCADE)\n\n            @property\n            def related_field(self):\n                return self.related\n\n        errors = _check_property_name_related_field_accessor_clashes(TestModel)\n        self.assertEqual(len(errors), 1)\n\n    def test_check_single_primary_key(self):\n        class TestModel(models.Model):\n            id = models.AutoField(primary_key=True)\n            another_id = models.AutoField(primary_key=True)\n\n        errors = _check_single_primary_key(TestModel)\n        self.assertEqual(len(errors), 1)\n\n    def test_check_index_together(self):\n        class TestModel(models.Model):\n            field1 = models.CharField(max_length=255)\n            field2 = models.CharField(max_length=255)\n\n            class Meta:\n                index_together = [('field1', 'field2')]\n\n        errors = _check_index_together(TestModel)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_unique_together(self):\n        class TestModel(models.Model):\n            field1 = models.CharField(max_length=255)\n            field2 = models.CharField(max_length=255)\n\n            class Meta:\n                unique_together = [('field1', 'field2')]\n\n        errors = _check_unique_together(TestModel)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_ordering(self):\n        class TestModel(models.Model):\n            field1 = models.CharField(max_length=255)\n\n            class Meta:\n                ordering = ('field1',)\n\n        errors = _check_ordering(TestModel)\n        self.assertEqual(len(errors), 0)\n\n\n\n    def test_check_constraints(self):\n        class TestModel(models.Model):\n            field1 = models.CharField(max_length=255)\n\n            class Meta:\n                constraints = [\n                    models.UniqueConstraint(fields=['field1'], name='unique_field1'),\n                ]\n\n        errors = _check_constraints(TestModel, connections)\n        self.assertEqual(len(errors), 0)\n\n\n\n"], "sample_130": ["\nimport unittest\nfrom sympy import ( symbols, lambdify, sqrt, sin, cos, tan, pi, acos, acosh, Rational, Float, Matrix, Lambda, Piecewise, exp, Integral, oo, I, Abs, Function, true, false, And, Or, Not, ITE, Min, Max, floor, diff, IndexedBase, Sum, DotProduct, Eq, Dummy, sinc)\nfrom sympy.utilities.lambdify import implemented_function\nfrom sympy.utilities.lambdify import MATH_TRANSLATIONS\nfrom sympy.utilities.lambdify import MPMATH_TRANSLATIONS\nfrom sympy.utilities.lambdify import NUMPY_TRANSLATIONS\nfrom sympy.utilities.lambdify import TENSORFLOW_TRANSLATIONS\nfrom sympy.testing.pytest import raises\n\nclass TestLambdify(unittest.TestCase):\n\n    def test_simple_lambdify(self):\n        x = symbols('x')\n        f = lambdify(x, x**2)\n        self.assertEqual(f(4), 16)\n\n    def test_multivar_lambdify(self):\n        x, y = symbols('x y')\n        f = lambdify((x, y), x + y)\n        self.assertEqual(f(2, 3), 5)\n\n    def test_lambda_function(self):\n        x = symbols('x')\n        f = lambdify(x, Lambda(x, x**2))\n        self.assertEqual(f(4), 16)\n\n    def test_piecewise_lambdify(self):\n        x = symbols('x')\n        f = lambdify(x, Piecewise((0, x < 0), (x, x >= 0)))\n        self.assertEqual(f(-1), 0)\n        self.assertEqual(f(1), 1)\n\n    def test_implemented_function(self):\n        x = symbols('x')\n        f = implemented_function('f', lambda x: x + 1)\n        self.assertEqual(f(2), 3)\n\n    def test_matrix_lambdify(self):\n        x, y = symbols('x y')\n        A = Matrix([[x, y], [y, x]])\n        f = lambdify((x, y), A)\n        self.assertTrue((f(1, 2) == Matrix([[1, 2], [2, 1]])).all())\n\n    def test_indexed_lambdify(self):\n        x = symbols('x')\n        f = lambdify(x, x[1:])\n        self.assertEqual(f([1, 2, 3]), [2, 3])\n\n    def test_nested_lambdify(self):\n        x, y = symbols('x y')\n        f = lambdify((x, y), (x + y) * sin(x))\n        self.assertAlmostEqual(f(1, 2), 3 * sin(1))\n\n    def test_tensorflow_lambdify(self):\n        import tensorflow as tf\n        x = symbols('x')\n        f = lambdify(x, x**2, 'tensorflow')\n        result = f(tf.constant(2.0))\n        self.assertEqual(result.numpy(), 4.0)\n\n    def test_math_imported(self):\n        x = symbols('x')\n        f = lambdify(x, sin(x))\n        self.assertEqual(f(pi/2), 1)\n\n    def test_numpy_imported(self):\n        x = symbols('x')\n        f = lambdify(x, sin(x), 'numpy')\n        self.assertAlmostEqual(f(pi/2), 1)\n\n    def test_mpmath_imported(self):\n        x = symbols('x')\n        f = lambdify(x, sin(x), 'mpmath')\n        self.assertAlmostEqual(f(pi/2), 1, precision=10)\n\n    def test_module_not_found(self):\n        x = symbols('x')\n        with raises(ImportError):\n            lambdify(x, x**2, 'nonexistent_module')\n\n    def test_invalid_modules(self):\n        x = symbols('x')\n        with raises(ValueError):\n            lambdify(x, x**2, 'math, numpy, nonexistent_module')\n\n    def test_tensorflow_with_tensorflow_imported(self):\n        import tensorflow as tf\n        x = symbols('x')\n        f = lambdify(x, x**2, 'tensorflow')\n        result = f(tf.constant(2.0))\n        self.assertEqual(result.numpy(), 4.0)\n\n    def test_lambdify_str(self):\n        x = symbols('x')\n        f = lambdify(x, 'x**2')\n        self.assertEqual(f(4), 16)\n\n    def test_lambdify_with_dummy_variables(self):\n        x, y = symbols('x y')\n        f = lambdify(x, (x + y)**2)\n        self.assertEqual(f(2), 9)\n\n    def test_lambdify_with_constant_args(self):\n        x = symbols('x')\n        f = lambdify((x, 2), x + 2)\n        self.assertEqual(f(5), 7)\n\n    def test_lambdify_with_nested_functions(self):\n        x = symbols('x')\n        f = lambdify(x, sin(x**2))\n        self.assertAlmostEqual(f(1), sin(1))\n\n    def test_lambdify_with_complex_numbers(self):\n        x = symbols('x')\n        f = lambdify(x, x**I)\n\n        self.assertAlmostEqual(f(2).real, 0.2809)\n        self.assertAlmostEqual(f(2).imag, 0.9589)\n"], "sample_11": ["\nfrom unittest.mock import patch, ANY, MagicMock\nfrom django.http import HttpRequest, HttpResponse, HttpResponseNotFound\nfrom django.conf import settings\nfrom django.urls import resolve\nfrom django.template import Context, Engine\nfrom django.utils import timezone\nfrom django.views.debug import (\n    CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n    Path as DebugPath, cleanse_setting, default_urlconf, technical_404_response,\n    technical_500_response, get_exception_reporter_filter,\n    get_safe_settings, SafeExceptionReporterFilter\n)\nimport sys\nimport traceback\n\ndef mock_setting(name, value):\n    settings.__dict__[name] = value\n\nclass MockSettings:\n    pass\n\nclass TestDjangoViewsDebug:\n\n    def setup_method(self):\n        self.request = HttpRequest()\n        self.request.method = 'GET'\n        self.request.path = '/some/path/'\n        self.request.POST = {}\n        self.request.FILES = {}\n        self.request.COOKIES = {}\n\n        self.settings = MockSettings()\n\n        self.exception_reporter = ExceptionReporter\n\n    def test_cleanse_setting(self):\n        assert cleanse_setting('SECRET_KEY', 'mysecretkey') == CLEANSED_SUBSTITUTE\n        assert cleanse_setting('DEBUG', True) == True\n        assert cleanse_setting('ALLOWED_HOSTS', ['example.com']) == ['example.com']\n        settings_dict = {'SECRET_KEY': 'mysecretkey'}\n        assert cleanse_setting('SECRET_KEY', settings_dict) == CLEANSED_SUBSTITUTE\n\n    def test_get_safe_settings(self):\n        mock_setting('SECRET_KEY', 'mysecretkey')\n        mock_setting('DEBUG', True)\n        mock_setting('ALLOWED_HOSTS', ['example.com'])\n        safe_settings = get_safe_settings()\n        assert safe_settings['SECRET_KEY'] == CLEANSED_SUBSTITUTE\n        assert safe_settings['DEBUG'] == True\n        assert safe_settings['ALLOWED_HOSTS'] == ['example.com']\n\n    @patch('django.views.debug.sys.exc_info', return_value=(Exception, Exception(), traceback.extract_stack()))\n    def test_technical_500_response_ajax(self, mock_sys_exc_info):\n        response = technical_500_response(self.request, Exception, Exception(), None)\n        assert isinstance(response, HttpResponse)\n        assert response.status_code == 500\n        assert response['Content-Type'] == 'text/plain; charset=utf-8'\n\n    @patch('django.views.debug.sys.exc_info', return_value=(Exception, Exception(), traceback.extract_stack()))\n    def test_technical_500_response_html(self, mock_sys_exc_info):\n        response = technical_500_response(self.request, Exception, Exception(), None)\n        assert isinstance(response, HttpResponse)\n        assert response.status_code == 500\n        assert response['Content-Type'] == 'text/html'\n\n    def test_get_exception_reporter_filter(self):\n        with patch('django.views.debug.get_default_exception_reporter_filter') as mock_get_default_exception_reporter_filter:\n            mock_get_default_exception_reporter_filter.return_value = MagicMock()\n            filter = get_exception_reporter_filter(self.request)\n            assert filter == mock_get_default_exception_reporter_filter.return_value\n\n    def test_exception_reporter_filter_is_active(self):\n        self.request.request.exc_reporter_filter = SafeExceptionReporterFilter()\n        filter = get_exception_reporter_filter(self.request)\n        assert filter.is_active(self.request) == False\n\n    def test_safe_exception_reporter_filter_get_post_parameters(self):\n        self.request.POST = {'sensitive_param': 'sensitive_value'}\n        filter = SafeExceptionReporterFilter()\n\n        # Test non-sensitive parameters\n        result = filter.get_post_parameters(self.request)\n        assert result == {'sensitive_param': 'sensitive_value'}\n\n        # Test sensitive parameters\n        self.request.request.sensitive_post_parameters = ['sensitive_param']\n        result = filter.get_post_parameters(self.request)\n        assert result == {'sensitive_param': CLEANSED_SUBSTITUTE}\n\n        # Test all sensitive parameters\n        self.request.request.sensitive_post_parameters = '__ALL__'\n        result = filter.get_post_parameters(self.request)\n        assert result == {}\n\n    def test_safe_exception_reporter_filter_get_cleansed_multivaluedict(self):\n        filter = SafeExceptionReporterFilter()\n        multivaluedict = MultiValueDict({'sensitive_param': ['sensitive_value1', 'sensitive_value2']})\n        self.request.request.sensitive_post_parameters = ['sensitive_param']\n        result = filter.get_cleansed_multivaluedict(self.request, multivaluedict)\n        assert result == MultiValueDict({'sensitive_param': [CLEANSED_SUBSTITUTE, CLEANSED_SUBSTITUTE]})\n\n    def test_get_traceback_frames(self):\n        exception_reporter = ExceptionReporter(self.request, Exception, Exception(), None)\n        frames = exception_reporter.get_traceback_frames()\n        assert isinstance(frames, list)\n\n        # Additional test cases can be added here with mocked traceback and exception data\n\n\n    def test_default_urlconf(self):\n        response = default_urlconf(self.request)\n        assert isinstance(response, HttpResponse)\n        assert response.status_code == 200\n        assert response['Content-Type'] == 'text/html'\n\n    def test_technical_404_response(self):\n        exception = Exception('Not Found')\n        response = technical_404_response(self.request, exception)\n        assert isinstance(response, HttpResponseNotFound)\n        assert response.status_code == 404\n        assert response['Content-Type'] == 'text/html'\n\n"], "sample_10": ["\nimport unittest\nfrom django.conf import settings\nfrom django.core.checks.translation import (\n    check_language_settings_consistent,\n    check_setting_language_code,\n    check_setting_languages,\n    check_setting_languages_bidi,\n)\nfrom django.utils.translation import get_supported_language_variant\n\nclass TranslationChecksTests(unittest.TestCase):\n\n    def test_check_setting_language_code_valid(self):\n        settings.LANGUAGE_CODE = 'en-us'\n        errors = check_setting_language_code(None)\n        self.assertEqual(errors, [])\n\n    def test_check_setting_language_code_invalid_type(self):\n        settings.LANGUAGE_CODE = 123\n        errors = check_setting_language_code(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'translation.E001')\n\n    def test_check_setting_language_code_invalid_format(self):\n        settings.LANGUAGE_CODE = 'invalid-code'\n        errors = check_setting_language_code(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'translation.E001')\n\n    def test_check_setting_languages_valid(self):\n        settings.LANGUAGES = [('en', 'English'), ('fr', 'French')]\n        errors = check_setting_languages(None)\n        self.assertEqual(errors, [])\n\n    def test_check_setting_languages_invalid_type(self):\n        settings.LANGUAGES = [('en', 'English'), (123, 'French')]\n        errors = check_setting_languages(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'translation.E002')\n\n    def test_check_setting_languages_invalid_format(self):\n        settings.LANGUAGES = [('invalid-code', 'French')]\n        errors = check_setting_languages(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'translation.E002')\n\n    def test_check_setting_languages_bidi_valid(self):\n        settings.LANGUAGES_BIDI = ['ar', 'he']\n        errors = check_setting_languages_bidi(None)\n        self.assertEqual(errors, [])\n\n    def test_check_setting_languages_bidi_invalid_type(self):\n        settings.LANGUAGES_BIDI = [123]\n        errors = check_setting_languages_bidi(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'translation.E003')\n\n    def test_check_setting_languages_bidi_invalid_format(self):\n        settings.LANGUAGES_BIDI = ['invalid-code']\n        errors = check_setting_languages_bidi(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'translation.E003')\n\n    def test_check_language_settings_consistent_valid(self):\n        settings.LANGUAGE_CODE = 'en'\n        settings.LANGUAGES = [('en', 'English')]\n        errors = check_language_settings_consistent(None)\n        self.assertEqual(errors, [])\n\n    def test_check_language_settings_consistent_invalid(self):\n        settings.LANGUAGE_CODE = 'fr'\n        settings.LANGUAGES = [('en', 'English')]\n        errors = check_language_settings_consistent(None)\n        self.assertEqual(len(errors), 1)\n\n"], "sample_1": ["\nimport datetime\nimport io\nimport json\nimport os\nimport re\nimport sys\nimport time\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom urllib.parse import quote\n\nfrom django.conf import settings\nfrom django.core.exceptions import DisallowedRedirect, Http404\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom django.http import (\n    BadHeaderError, HttpResponse, HttpResponseBase, HttpResponseNotAllowed,\n    HttpResponseNotModified, HttpResponsePermanentRedirect,\n    HttpResponseRedirect, JsonResponse, StreamingHttpResponse, FileResponse,\n)\nfrom django.http.cookies import SimpleCookie\n\nsettings.configure(\n    SECRET_KEY='test',\n    DEBUG=True,\n    ALLOWED_HOSTS=['*'],\n    DEFAULT_CHARSET='utf-8',\n)\n\nclass HttpResponseTests(unittest.TestCase):\n\n    def test_init(self):\n        response = HttpResponse()\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response._reason_phrase, 'OK')\n        self.assertEqual(response.charset, settings.DEFAULT_CHARSET)\n        self.assertEqual(response['Content-Type'], 'text/html; charset=%s' % settings.DEFAULT_CHARSET)\n\n    def test_reason_phrase(self):\n        response = HttpResponse()\n        self.assertEqual(response.reason_phrase, 'OK')\n        response.reason_phrase = 'Test Reason'\n        self.assertEqual(response.reason_phrase, 'Test Reason')\n\n    def test_charset(self):\n        response = HttpResponse()\n        response['Content-Type'] = 'text/html; charset=latin-1'\n        self.assertEqual(response.charset, 'latin-1')\n\n    def test_serialize_headers(self):\n        response = HttpResponse()\n        response['Content-Type'] = 'text/plain'\n        response['X-Test'] = 'Hello, world!'\n        serialized = response.serialize_headers()\n        self.assertIn(b'Content-Type: text/plain', serialized)\n        self.assertIn(b'X-Test: Hello, world!', serialized)\n\n    def test_convert_to_charset(self):\n        response = HttpResponse()\n        value = 'test'\n        converted = response._convert_to_charset(value, 'ascii')\n        self.assertEqual(converted, value)\n        value = 'test\u00e7'\n        converted = response._convert_to_charset(value, 'latin-1')\n        self.assertEqual(converted, value)\n        value = 'test\u00e7'\n        with self.assertRaises(UnicodeEncodeError):\n            response._convert_to_charset(value, 'ascii')\n\n    def test_setitem(self):\n        response = HttpResponse()\n        response['Content-Type'] = 'text/html; charset=utf-8'\n        self.assertEqual(response['Content-Type'], 'text/html; charset=utf-8')\n\n    def test_delitem(self):\n        response = HttpResponse()\n        response['Content-Type'] = 'text/html; charset=utf-8'\n        del response['Content-Type']\n        self.assertFalse('Content-Type' in response)\n\n    def test_getitem(self):\n        response = HttpResponse()\n        response['Content-Type'] = 'text/html; charset=utf-8'\n        self.assertEqual(response['Content-Type'], 'text/html; charset=utf-8')\n\n    def test_has_header(self):\n        response = HttpResponse()\n        response['Content-Type'] = 'text/html; charset=utf-8'\n        self.assertTrue(response.has_header('content-type'))\n        self.assertFalse(response.has_header('x-not-existing-header'))\n\n    def test_items(self):\n        response = HttpResponse()\n        response['Content-Type'] = 'text/html; charset=utf-8'\n        response['X-Test'] = 'Hello, world!'\n        items = list(response.items())\n        self.assertEqual(len(items), 2)\n\n    def test_get(self):\n        response = HttpResponse()\n        response['Content-Type'] = 'text/html; charset=utf-8'\n        self.assertEqual(response.get('content-type'), ('Content-Type', 'text/html; charset=utf-8'))\n        self.assertIsNone(response.get('x-not-existing-header'))\n\n    def test_set_cookie(self):\n        response = HttpResponse()\n        response.set_cookie('test', 'value')\n        cookie = response.cookies['test']\n        self.assertEqual(cookie.value, 'value')\n        self.assertEqual(cookie['expires'], '')\n\n    def test_set_cookie_expires(self):\n        response = HttpResponse()\n\n        # datetime object\n        expires = datetime.datetime.now() + datetime.timedelta(days=1)\n        response.set_cookie('test', 'value', expires=expires)\n        cookie = response.cookies['test']\n        self.assertEqual(cookie['expires'], http_date(expires))\n        self.assertEqual(cookie['max-age'], 86400)\n\n    def test_set_cookie_max_age(self):\n        response = HttpResponse()\n        response.set_cookie('test', 'value', max_age=3600)\n        cookie = response.cookies['test']\n        self.assertEqual(cookie['max-age'], 3600)\n        self.assertEqual(cookie['expires'], '')\n\n    def test_set_cookie_path(self):\n        response = HttpResponse()\n        response.set_cookie('test', 'value', path='/path')\n        cookie = response.cookies['test']\n        self.assertEqual(cookie['path'], '/path')\n\n    def test_set_cookie_domain(self):\n        response = HttpResponse()\n        response.set_cookie('test', 'value', domain='django.com')\n        cookie = response.cookies['test']\n        self.assertEqual(cookie['domain'], '.django.com')\n\n    def test_set_cookie_secure(self):\n        response = HttpResponse()\n        response.set_cookie('test', 'value', secure=True)\n        cookie = response.cookies['test']\n        self.assertTrue(cookie['secure'])\n\n    def test_set_cookie_httponly(self):\n        response = HttpResponse()\n        response.set_cookie('test', 'value', httponly=True)\n        cookie = response.cookies['test']\n        self.assertTrue(cookie['httponly'])\n\n    def test_set_cookie_samesite(self):\n        response = HttpResponse()\n        response.set_cookie('test', 'value', samesite='Lax')\n        cookie = response.cookies['test']\n        self.assertEqual(cookie['samesite'], 'Lax')\n\n    def test_setdefault_new_header(self):\n        response = HttpResponse()\n        response.setdefault('X-Test', 'Hello world!')\n        self.assertEqual(response['X-Test'], 'Hello world!')\n\n    def test_setdefault_existing_header(self):\n        response = HttpResponse()\n        response['X-Test'] = 'Original Value'\n        response.setdefault('X-Test', 'Hello world!')\n        self.assertEqual(response['X-Test'], 'Original Value')\n\n\n    def test_delete_cookie(self):\n        response = HttpResponse()\n        response.set_cookie('test', 'value')\n        response.delete_cookie('test')\n        self.assertFalse('test' in response.cookies)\n\n    def test_make_bytes(self):\n        response = HttpResponse()\n        self.assertEqual(response.make_bytes('test'), b'test')\n        self.assertEqual(response.make_bytes(b'test'), b'test')\n        self.assertEqual(response.make_bytes('test'.encode('utf-8')), b'test')\n\n    def test_close(self):\n        response = HttpResponse()\n        response._closable_objects = [MagicMock()]\n        response.close()\n        response._closable_objects[0].close.assert_called_once()\n\n    def test_streaming_content(self):\n        response = StreamingHttpResponse()\n        response._set_streaming_content(['hello', 'world', ''])\n        self.assertEqual(b''.join(response.streaming_content), b'helloworld')\n\n    def test_file_response(self):\n        with patch('django.http.FileResponse.set_headers') as mock_set_headers:\n            file_obj = MagicMock()\n            response = FileResponse(file_obj)\n            response._set_streaming_content(file_obj)\n            mock_set_headers.assert_called_once_with(file_obj)\n\n    def test_redirect_response(self):\n        response = HttpResponseRedirect('/test/')\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response['Location'], 'http://testserver/test/')\n\n    def test_permanent_redirect_response(self):\n        response = HttpResponsePermanentRedirect('/test/')\n        self.assertEqual(response.status_code, 301)\n        self.assertEqual(response['Location'], 'http://testserver/test/')\n\n    def test_not_modified(self):\n        response = HttpResponseNotModified()\n        self.assertTrue(response.has_header('Cache-Control'))\n        self.assertEqual(response.status_code, 304)\n        with self.assertRaises(AttributeError):\n            response.content = 'test'\n\n    def test_bad_request(self):\n        response = HttpResponseBadRequest()\n        self.assertEqual(response.status_code, 400)\n\n    def test_not_found(self):\n        response = HttpResponseNotFound()\n        self.assertEqual(response.status_code, 404)\n\n\n\n"], "sample_69": ["\nimport unittest\nfrom io import StringIO\nimport matplotlib.artist as martist\nfrom matplotlib import pyplot as plt\nimport numpy as np\nfrom matplotlib.testing.compare import compare_images\n\nclass TestArtist(unittest.TestCase):\n\n    def test_artist_init(self):\n        artist = martist.Artist()\n        self.assertIsNone(artist.figure)\n        self.assertIsNone(artist.axes)\n\n    def test_artist_properties(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n\n        self.assertEqual(line.get_color(), 'b')\n        self.assertEqual(line.get_linewidth(), 1.5)\n        self.assertEqual(line.get_linestyle(), '-')\n\n        line.set_color('r')\n        line.set_linewidth(3)\n        line.set_linestyle('--')\n        self.assertEqual(line.get_color(), 'r')\n        self.assertEqual(line.get_linewidth(), 3)\n        self.assertEqual(line.get_linestyle(), '--')\n\n\n    def test_getp_setp(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n\n        # Get property\n        self.assertEqual(martist.getp(line, 'color'), 'b')\n\n        # Set property\n        martist.setp(line, color='r')\n        self.assertEqual(martist.getp(line, 'color'), 'r')\n\n        # Set multiple properties\n        martist.setp(line, linewidth=3, linestyle='--')\n        self.assertEqual(martist.getp(line, 'linewidth'), 3)\n        self.assertEqual(martist.getp(line, 'linestyle'), '--')\n\n    def test_getp_setp_multiple_artists(self):\n        fig, ax = plt.subplots()\n        line1, = ax.plot([1, 2, 3], [4, 5, 6])\n        line2, = ax.plot([1, 2, 3], [7, 8, 9])\n\n        martist.setp([line1, line2], color='g')\n        self.assertEqual(martist.getp(line1, 'color'), 'g')\n        self.assertEqual(martist.getp(line2, 'color'), 'g')\n\n    def test_setp_file(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        output = StringIO()\n        martist.setp(line, 'linestyle', file=output)\n        self.assertIn('linestyle: {', output.getvalue())\n\n    def test_kwdoc(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        docstring = martist.kwdoc(line)\n        self.assertIn('color', docstring)\n        self.assertIn('linewidth', docstring)\n\n    def test_artist_properties_after_drawing(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        fig.canvas.draw()\n        self.assertEqual(line.get_color(), 'b')\n\n    def test_artist_visibility(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        self.assertTrue(line.get_visible())\n        line.set_visible(False)\n        self.assertFalse(line.get_visible())\n\n    def test_artist_zorder(self):\n        fig, ax = plt.subplots()\n        line1, = ax.plot([1, 2, 3], [4, 5, 6])\n        line2, = ax.plot([1, 2, 3], [7, 8, 9])\n        self.assertEqual(line1.get_zorder(), 1)\n        self.assertEqual(line2.get_zorder(), 2)\n        line1.set_zorder(3)\n        self.assertEqual(line1.get_zorder(), 3)\n\n    def test_artist_transform(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        self.assertIsNotNone(line.get_transform())\n\n    def test_artist_clip_box(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        self.assertIsNone(line.get_clip_box())\n\n        line.set_clip_box(ax.bbox)\n        self.assertEqual(line.get_clip_box(), ax.bbox)\n\n    def test_artist_label(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6], label='My Line')\n        self.assertEqual(line.get_label(), 'My Line')\n\n    def test_artist_picker(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        self.assertFalse(line.get_picker())\n        line.set_picker(True)\n        self.assertTrue(line.get_picker())\n\n    def test_artist_figure_axes(self):\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n        self.assertEqual(line.figure, fig)\n        self.assertEqual(line.axes, ax)\n\n\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_56": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nfrom django.forms import (\n    CharField,\n    IntegerField,\n    Form,\n    ValidationError,\n)\nfrom django.forms.formsets import (\n    BaseFormSet,\n    ManagementForm,\n    formset_factory,\n    all_valid,\n    INITIAL_FORM_COUNT,\n    MAX_NUM_FORM_COUNT,\n    MIN_NUM_FORM_COUNT,\n    TOTAL_FORM_COUNT,\n)\nfrom django.forms.widgets import HiddenInput\nfrom django.forms.utils import ErrorList\n\n\nclass MyForm(Form):\n    name = CharField(max_length=100)\n    age = IntegerField()\n\n\nclass TestFormSet(BaseFormSet):\n    form = MyForm\n    extra = 1\n\nclass TestFormsetFactory(unittest.TestCase):\n\n    def test_formset_factory_creates_formset_class(self):\n        FormSet = formset_factory(MyForm)\n        self.assertTrue(issubclass(FormSet, BaseFormSet))\n        self.assertEqual(FormSet.form, MyForm)\n\n\n    def test_formset_factory_defaults(self):\n        FormSet = formset_factory(MyForm)\n        self.assertEqual(FormSet.extra, 1)\n        self.assertFalse(FormSet.can_order)\n        self.assertFalse(FormSet.can_delete)\n        self.assertEqual(FormSet.max_num, 1000)\n        self.assertEqual(FormSet.min_num, 0)\n        self.assertEqual(FormSet.absolute_max, 2000)\n        self.assertTrue(FormSet.can_delete_extra)\n\n    def test_formset_factory_custom_settings(self):\n        FormSet = formset_factory(\n            MyForm,\n            extra=3,\n            can_order=True,\n            can_delete=True,\n            max_num=5,\n            validate_max=True,\n            min_num=2,\n            validate_min=True,\n            absolute_max=10,\n            can_delete_extra=False\n        )\n\n        self.assertEqual(FormSet.extra, 3)\n        self.assertTrue(FormSet.can_order)\n        self.assertTrue(FormSet.can_delete)\n        self.assertEqual(FormSet.max_num, 5)\n        self.assertEqual(FormSet.min_num, 2)\n        self.assertEqual(FormSet.absolute_max, 10)\n        self.assertFalse(FormSet.can_delete_extra)\n\n    def test_all_valid_returns_true_if_all_formsets_are_valid(self):\n        formset1 = TestFormSet(data={'form-0-name': ['test'], 'form-0-age': [21]})\n        formset2 = TestFormSet(data={'form-0-name': ['test2'], 'form-0-age': [30]})\n        self.assertTrue(all_valid([formset1, formset2]))\n\n    def test_all_valid_returns_false_if_any_formset_is_invalid(self):\n        formset1 = TestFormSet(data={'form-0-name': ['test'], 'form-0-age': [21]})\n        formset2 = TestFormSet(data={'form-0-name': ['test2'], 'form-0-age': ['invalid']})\n        self.assertFalse(all_valid([formset1, formset2]))\n \n\nclass TestBaseFormSet(unittest.TestCase):\n    def setUp(self):\n        self.formset = TestFormSet(data={'form-0-name': ['test'], 'form-0-age': [21]})\n\n    def test_total_form_count(self):\n        self.assertEqual(self.formset.total_form_count(), 1)\n\n    def test_initial_form_count(self):\n        self.assertEqual(self.formset.initial_form_count(), 0)\n\n    def test_management_form(self):\n        management_form = self.formset.management_form\n        self.assertIsInstance(management_form, ManagementForm)\n\n    @patch('django.forms.formsets.ManagementForm.full_clean')\n    def test_clean(self, mock_full_clean):\n\n        self.formset.clean()\n        mock_full_clean.assert_called_once()\n\n    def test_is_valid(self):\n        self.assertTrue(self.formset.is_valid())\n\n    def test_has_changed(self):\n        self.assertFalse(self.formset.has_changed())\n\n \n    def test_add_fields(self):\n        form = MagicMock()\n        self.formset.add_fields(form, 0)\n        form.fields.assert_contains_key(TOTAL_FORM_COUNT)\n        form.fields.assert_contains_key(INITIAL_FORM_COUNT)\n        form.fields.assert_contains_key(MIN_NUM_FORM_COUNT)\n        form.fields.assert_contains_key(MAX_NUM_FORM_COUNT)\n\n    def test_initial_forms(self):\n        self.assertEqual(len(self.formset.initial_forms), 0)\n\n    def test_empty_form(self):\n        empty_form = self.formset.empty_form\n        self.assertIsInstance(empty_form, MyForm)\n\n    def test_get_context(self):\n\n        context = self.formset.get_context()\n        self.assertIn('formset', context)\n        self.assertEqual(context['formset'], self.formset)\n\n    \n    def test_errors(self):\n        self.formset.forms[0].errors={'name': ['Error']}\n        self.assertEqual(len(self.formset.errors), 1)\n\n"], "sample_29": ["\nimport json\nfrom unittest import skipUnless\n\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.db import connections, models\nfrom django.db.models import F, Q\nfrom django.db.models.fields.json import (\n    CaseInsensitiveMixin,\n    CompiledKeyTransform,\n    DataContains,\n    HasKey,\n    HasKeys,\n    HasAnyKeys,\n    JSONExact,\n    JSONField,\n    KeyTransform,\n    KeyTransformExact,\n    KeyTransformIContains,\n    KeyTransformIExact,\n    KeyTransformIn,\n    KeyTransformIsNull,\n    KeyTransformRegex,\n    KeyTransformStartsWith,\n    KeyTransformTextLookupMixin,\n    ContainedBy,\n    KeyTransformLt,\n    KeyTransformLte,\n    KeyTransformGt,\n    KeyTransformGte,\n)\n\nfrom . import PostgreSQLJSONTestMixin, MySQLJSONTestMixin, OracleJSONTestMixin\n\ntry:\n    from django.contrib.postgres.fields import JSONField as PostgresJSONField\nexcept ImportError:\n    PostgresJSONField = None\n\nclass CustomJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, models.Model):\n            return str(obj.pk)\n        return super().default(obj)\n\nclass CustomJSONDecoder:\n\n    def decode(self, json_string):\n        decoded = json.loads(json_string)\n        if isinstance(decoded, dict):\n            for key, value in decoded.items():\n                if isinstance(value, str) and value.isdigit():\n                    decoded[key] = int(value)\n        return decoded\n\nclass JSONModel(models.Model):\n    data = JSONField(encoder=CustomJSONEncoder)\n    nullable_data = JSONField(null=True, blank=True, encoder=CustomJSONEncoder)\n\nclass NullableJSONModel(models.Model):\n    data = JSONField(null=True, blank=True)\n\nclass RelatedJSONModel(models.Model):\n    related = models.ForeignKey(JSONModel, on_delete=models.CASCADE)\n    data = JSONField(encoder=CustomJSONEncoder)\n\nclass TestJSONField(PostgreSQLJSONTestMixin, MySQLJSONTestMixin, OracleJSONTestMixin):\n\n    def setUp(self):\n        if PostgresJSONField is not None:\n            self.json_field_class = PostgresJSONField\n        else:\n            self.json_field_class = JSONField\n\n        self.model = JSONModel\n        self.instance = self.model.objects.create(data={'key1': 'value1', 'key2': [1, 2, 3]})\n        self.nullable_instance = NullableJSONModel.objects.create(data={'key1': 'value1'})\n\n    def test_creation(self):\n\n        obj = self.model.objects.create(data={'key1': 'value1'})\n        self.assertEqual(\n            obj.data,\n            {'key1': 'value1'},\n        )\n\n    def test_lookup_exact(self):\n        self.assertEqual(self.model.objects.filter(data={'key1': 'value1'}).count(), 1)\n        self.assertEqual(self.model.objects.filter(data__key1='value1').count(), 1)\n\n\n\n    def test_lookup_exact_null(self):\n        self.assertEqual(self.model.objects.filter(data__isnull=True).count(), 0)\n\n        self.instance.data = None\n        self.instance.save()\n        self.assertEqual(self.model.objects.filter(data__isnull=True).count(), 1)\n        self.assertEqual(self.model.objects.filter(data__isnull=False).count(), 0)\n\n    def test_lookup_in(self):\n        self.model.objects.create(data={'key1': 'value1', 'key2': 'value2'})\n        self.assertEqual(self.model.objects.filter(data__key1__in=['value1', 'value2']).count(), 2)\n\n    def test_lookup_contains(self):\n\n        self.assertEqual(self.model.objects.filter(data__contains={'key1': 'value1'}).count(), 1)\n\n    def test_lookup_contained_by(self):\n        self.assertEqual(\n            self.model.objects.filter(data__contained_by={'key1': 'value1', 'key2': [1, 2, 3]}).count(), 1\n        )\n        self.assertEqual(\n            self.model.objects.filter(data__contained_by={'key1': 'value1'}).count(), 1\n        )\n\n    def test_lookup_has_key(self):\n\n        self.assertEqual(self.model.objects.filter(data__key1__isnull=False).count(), 1)\n        self.assertEqual(self.model.objects.filter(data__has_key='key1').count(), 1)\n\n    def test_lookup_has_keys(self):\n        self.assertEqual(self.model.objects.filter(data__has_keys=['key1', 'key2']).count(), 1)\n\n    def test_lookup_has_any_keys(self):\n        self.assertEqual(self.model.objects.filter(data__has_any_keys=['key1', 'key3']).count(), 1)\n\n    def test_lookup_isnull(self):\n        self.assertEqual(self.model.objects.filter(data__isnull=False).count(), 1)\n        self.assertEqual(self.model.objects.filter(data__isnull=True).count(), 0)\n        self.assertEqual(self.model.objects.filter(data__key1__isnull=False).count(), 1)\n        self.nullable_instance.data = None\n        self.nullable_instance.save()\n        self.assertEqual(self.model.objects.filter(data__isnull=True).count(), 1)\n        self.assertEqual(self.nullable_instance.data, None)\n\n    def test_lookup_startswith(self):\n        self.assertEqual(self.model.objects.filter(data__key1__startswith='value').count(), 1)\n\n    def test_lookup_endswith(self):\n        self.assertEqual(self.model.objects.filter(data__key1__endswith='value1').count(), 1)\n\n    def test_lookup_regex(self):\n        self.assertEqual(self.model.objects.filter(data__key1__regex='value1').count(), 1)\n\n    def test_lookup_iexact(self):\n        self.assertEqual(self.model.objects.filter(data__key1__iexact='VALUE1').count(), 1)\n\n    def test_lookup_icontains(self):\n        self.assertEqual(self.model.objects.filter(data__icontains={'key1': 'VALUE1'}).count(), 1)\n\n    def test_lookup_iendswith(self):\n        self.assertEqual(self.model.objects.filter(data__key1__iendswith='VALUE1').count(), 1)\n\n    def test_lookup_iregex(self):\n        self.assertEqual(self.model.objects.filter(data__key1__iregex='value1').count(), 1)\n\n    def test_lookup_istartswith(self):\n        self.assertEqual(self.model.objects.filter(data__key1__istartswith='value').count(), 1)\n\n    def test_lookup_lt(self):\n\n        self.assertEqual(self.model.objects.filter(data__key2__lt=2).count(), 1)\n\n    def test_lookup_lte(self):\n        self.assertEqual(self.model.objects.filter(data__key2__lte=2).count(), 2)\n\n    def test_lookup_gt(self):\n        self.assertEqual(self.model.objects.filter(data__key2__gt=1).count(), 2)\n\n    def test_lookup_gte(self):\n        self.assertEqual(self.model.objects.filter(data__key2__gte=1).count(), 3)\n\n    def test_ordering(self):\n        # Test ordering by a key in the JSONField\n        self.model.objects.create(data={'key1': 'value2'})\n        self.model.objects.create(data={'key1': 'value3'})\n        self.assertEqual(list(self.model.objects.order_by('data__key1')[0:2].values_list('data__key1', flat=True)), ['value1', 'value2'])\n\n\n    def test_values(self):\n        self.assertEqual(list(self.model.objects.values('data__key1')), [{'data__key1': 'value1'}])\n\n    def test_values_list(self):\n\n        self.assertEqual(\n\n            list(self.model.objects.values_list('data__key1', flat=True)),\n            ['value1'],\n        )\n\n\n\n    def test_related_field(self):\n        related_instance = RelatedJSONModel.objects.create(related=self.instance, data={'key1': 'value1'})\n        self.assertEqual(related_instance.related.data, {'key1': 'value1', 'key2': [1, 2, 3]})\n\n    def test_custom_encoder_decoder(self):\n        custom_encoder = CustomJSONEncoder\n        custom_decoder = CustomJSONDecoder\n\n        class CustomJSONModel(models.Model):\n            data = JSONField(encoder=custom_encoder, decoder=custom_decoder)\n\n        obj = CustomJSONModel.objects.create(data={'key1': {'pk': 1}, 'key2': 2})\n        self.assertEqual(obj.data['key1'], 1)\n        self.assertEqual(obj.data['key2'], 2)\n\n    def test_f_expressions(self):\n        self.assertEqual(self.model.objects.annotate(key1_length=F('data__key1')).filter(key1_length=7).count(), 1)\n\n    def test_q_objects(self):\n        q = Q(data__key1='value1') | Q(data__key2=[1, 2, 3])\n        self.assertEqual(self.model.objects.filter(q).count(), 1)\n\n    def test_empty_string_validation(self):\n        with self.assertRaises(ValidationError) as e:\n            self.model.objects.create(data='')\n        self.assertEqual(str(e.exception), 'Value must be valid JSON.')\n\n\n\n    def test_default_value(self):\n        \n        self.model.objects.create(\n            data={'key1': 'value1', 'key2': [1, 2, 3]},\n            nullable_data={'key1': 'value1'},\n        )\n\n        self.assertEqual (self.model.objects.filter(nullable_data__key1='value1').count(), 1)\n        # Make sure default\n        # is not used\n        self.assertEqual(self.model.objects.filter(nullable_data__isnull=True).count(), 0)\n        self.assertEqual(self.model.objects.filter(nullable_data__isnull=False).count(), 1)\n\n    def test_subquery(self):\n\n        RelatedJSONModel.objects.create(related=self.instance, data={'key1': 'value1'})\n        self.assertEqual(\n            self.model.objects.filter(relatedjsonmodel__data__key1='value1').count(), 1\n        )\n        \n\n    def test_database_values(self):\n\n        # Test accessing database values using F expressions\n        obj = self.model.objects.create(data={'key1': 'value1', 'key2': [1, 2, 3]})\n        if connections[self.using].vendor == 'postgres':\n            self.assertEqual(\n\n                connections[self.using].ops.db_type_lookup_cast_jsonb_to_text(\n                    obj.data,\n                    field=self.model._meta.get_field('data'),\n\n                )\n                ,\n                '{\"key1\": \"value1\", \"key2\": [1, 2, 3]}',\n            )\n\n    \n\n    def test_custom_lookup(self):\n        self.model.objects.create(data={'key1': 'hello', 'key2': 'world'})\n        self.assertEqual(self.model.objects.filter(data__key1__icontains='hello').count(), 1)\n\n    def test_update_json(self):\n        # Test updating a JSONField using F expressions\n        self.instance.data = {'key1': 'value2', 'key2': [4, 5, 6]}\n        self.instance.save()\n        self.assertEqual(self.instance.data, {'key1': 'value2', 'key2': [4, 5, 6]})\n\n    def test_delete_json_key(self):\n        self.instance.data.pop('key2')\n        self.instance.save()\n        self.assertEqual(self.instance.data, {'key1': 'value1'})\n\n    def test_set_json_key(self):\n\n        self.instance.data['key3'] = 'value3'\n        self.instance.save()\n        self.assertEqual(self.instance.data, {'key1': 'value1', 'key2': [1, 2, 3], 'key3': 'value3'})\n\n\n\n    def test_empty_objects(self):\n        self.assertEqual(self.model.objects.filter(data__isnull=True).count(), 0)\n\n    def test_migration_operations(\n        self\n    ):\n        skipUnless(connections[self.using].features.supports_json_field)\n\n        # ... (add tests to verify migration operations)\n        pass\n\n"], "sample_77": ["\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.offsetbox import (AnchoredOffsetbox, AnnotationBbox, AnchoredText,\n                                  DrawingArea, HPacker, OffsetImage, PaddedBox,\n                                  TextArea, VPacker, DraggableAnnotation,\n                                  DraggableOffsetBox)\nfrom matplotlib.patches import FancyBboxPatch\n\ndef test_AnchoredOffsetbox():\n    fig, ax = plt.subplots()\n    text = \"Hello, world!\"\n\n    # Create a simple text box\n    a = AnchoredText(text, loc=\"upper left\", borderpad=0.5, frameon=True)\n    ax.add_artist(a)\n\n    # Create an image box with an offset\n    img = np.random.rand(10, 10)\n    imagebox = OffsetImage(img, zoom=0.5)\n\n    # Create an AnchoredOffsetbox with the imagebox\n    ao = AnchoredOffsetbox(imagebox, loc=\"upper right\", borderpad=0.5, frameon=True)\n    ax.add_artist(ao)\n\n    plt.show()\n\ndef test_AnnotationBbox():\n    fig, ax = plt.subplots()\n    xy = (0.5, 0.5)\n    xybox = (0.7, 0.7)\n\n\n    # Create an AnnotationBbox with arrow and box\n    bbox_props = dict(boxstyle=\"round,pad=0.3\", fc=\"white\", ec=\"black\", lw=0.7)\n    ab = AnnotationBbox(\"Test\", xy, xybox,\n                        xycoords='data',\n                        boxcoords=\"data\",\n                        arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3\"),\n                        bboxprops=bbox_props\n                        )\n    ax.add_artist(ab)\n    plt.show()\n\ndef test_AnchoredText():\n    fig, ax = plt.subplots()\n    \n    # Create an AnchoredText with some extra styling\n    at = AnchoredText(\"This is Text\", \n                     loc='upper left', \n                     prop=dict(size=12, color='red', rotation=45),\n                     bbox_to_anchor=(0.5, -0.05),\n                     bbox_transform=ax.transAxes,\n                     )\n    \n    ax.add_artist(at)\n    plt.show()\n    \ndef test_DrawingArea():\n    fig, ax = plt.subplots()\n\n    da = DrawingArea(1, 1, 0, 0)\n    # Add something to the drawing area\n    rect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, fc=\"blue\")\n    da.add_artist(rect)\n\n    # Create an AnchoredOffsetbox with the DrawingArea\n    ao = AnchoredOffsetbox(da, loc=\"lower center\", borderpad=0.5, frameon=True)\n    ax.add_artist(ao)\n    plt.show()\n\ndef test_HPacker():\n    fig, ax = plt.subplots()\n\n    # Create some boxes\n    box1 = TextArea(\"Box 1\")\n    box2 = TextArea(\"Box 2\")\n    box3 = TextArea(\"Box 3\")\n\n    # Create a horizontal packer\n    packer = HPacker(pad=0, sep=5)\n\n    packer.append(box1, min_size=10, max_size=20)\n    packer.append(box2)\n    packer.append(box3)\n\n    # Create an AnchoredOffsetbox with the packer\n    ao = AnchoredOffsetbox(packer, loc=\"upper left\", borderpad=0.5)\n    ax.add_artist(ao)\n    plt.show()\n\ndef test_OffsetImage():\n    fig, ax = plt.subplots()\n\n    # Load an image\n    image = plt.imread('test_image.png')\n\n    # Create an OffsetImage\n    oi = OffsetImage(image, zoom=0.5)\n\n    # Create an AnchoredOffsetbox with the OffsetImage\n    ao = AnchoredOffsetbox(oi, loc=\"upper right\", borderpad=0.5, frameon=True)\n    ax.add_artist(ao)\n    plt.show()\n\ndef test_PaddedBox():\n    fig, ax = plt.subplots()\n    text = \"Hello, world!\"\n\n    # Create a TextArea\n    ta = TextArea(text)\n    \n    # Create a padded box\n    pb = PaddedBox(ta, pad=0.5)\n    \n    # Add the padded box to the axes\n    ax.add_artist(pb)\n\n    plt.show()\n\ndef test_TextArea():\n    fig, ax = plt.subplots()\n\n    ta = TextArea(\"Hello, world!\", minimumdescent=False)\n    \n    # Add the TextArea to the axes\n    ax.add_artist(ta)\n\n    plt.show()\n\ndef test_VPacker():\n    fig, ax = plt.subplots()\n\n    # Create some boxes\n    box1 = TextArea(\"Box 1\")\n    box2 = TextArea(\"Box 2\")\n    box3 = TextArea(\"Box 3\")\n\n    # Create a vertical packer\n    packer = VPacker(pad=0, sep=5)\n\n    packer.append(box1, min_size=10, max_size=20)\n    packer.append(box2)\n    packer.append(box3)\n\n    # Create an AnchoredOffsetbox with the packer\n    ao = AnchoredOffsetbox(packer, loc=\"upper left\", borderpad=0.5)\n    ax.add_artist(ao)\n    plt.show()\n\ndef test_DraggableAnnotation():\n    fig, ax = plt.subplots()\n    \n    # Create an AnnotationBbox\n    ab = AnnotationBbox(\"Test\", (0.5, 0.5), (0.7, 0.7),\n                        xycoords='data',\n                        boxcoords=\"data\",\n                        arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3\"),\n                        )\n    ax.add_artist(ab)\n        \n\n    # Create a DraggableAnnotation\n    draggable_annotation = DraggableAnnotation(ab)\n\n    plt.show()\n\ndef test_DraggableOffsetBox():\n    fig, ax = plt.subplots()\n\n    # Create an offsetbox\n    offsetbox = OffsetImage(np.array([[1, 2], [3, 4]]), zoom=0.5)\n    \n    # Create a DraggableOffsetBox\n    draggable_offsetbox = DraggableOffsetBox(ax.artists[0], offsetbox)\n    \n    plt.show()\n    \n\n# Helper function to create a simple FancyBboxPatch\ndef _create_fancy_bbox_patch(x, y):\n    patch = FancyBboxPatch((x, y), width=0.1, height=0.1, \n                           boxstyle=\"round,pad=0.2\", \n                           fc=\"blue\", ec=\"red\",\n                           mutation_scale=20,\n                           )\n    return patch\n    \ndef test__get_packed_offsets():\n\n\n\n\n    fig, ax = plt.subplots()\n\n"], "sample_114": ["\nimport unittest\nfrom unittest.mock import patch\n\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.compose import (ColumnTransformer, make_column_transformer,\n                             make_column_selector)\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.preprocessing import FunctionTransformer, OneHotEncoder, StandardScaler\nfrom sklearn.tests import assert_array_equal\n\n\nclass MockTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self, name=None):\n        self.name = name\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        return X\n\nclass TestColumnTransformer(unittest.TestCase):\n\n    def test_init(self):\n        ct = ColumnTransformer(\n            transformers=[\n                ('num', StandardScaler(), ['a']),\n            ],\n            remainder='passthrough',\n        )\n        self.assertEqual(ct.transformers, [('num', StandardScaler(), ['a'])])\n        self.assertEqual(ct.remainder, 'passthrough')\n        self.assertFalse(ct.sparse_output_)\n\n    def test_fit_transform_simple(self):\n        X = [['a', 1], ['b', 2], ['c', 3]]\n        ct = ColumnTransformer(\n            transformers=[\n                ('num', StandardScaler(), [1]),\n            ],\n            remainder='passthrough',\n        )\n        ct.fit(X)\n        Xt = ct.transform(X)\n\n        self.assertEqual(Xt.shape, (3, 2))\n\n    def test_sparse_output(self):\n        X = [['a', 1], ['b', 2], ['c', 3]]\n        ct = ColumnTransformer(\n            transformers=[\n                ('num', StandardScaler(), [1]),\n            ],\n            remainder='passthrough',\n            sparse_threshold=0\n        )\n\n        ct.fit(X)\n        Xt = ct.transform(X)\n\n        self.assertFalse(sparse.issparse(Xt))\n\n          \n    def test_fit_transform_passthrough(self):\n        X = [['a', 1], ['b', 2], ['c', 3]]\n        ct = ColumnTransformer(\n            transformers=[('num', StandardScaler(), [1])],\n            remainder='passthrough'\n        )\n        ct.fit(X)\n        Xt = ct.transform(X)\n\n        self.assertEqual(Xt.shape, (3, 2))\n\n    def test_fit_transform_remainder_drop(self):\n        X = [['a', 1], ['b', 2], ['c', 3]]\n        ct = ColumnTransformer(\n            transformers=[('num', StandardScaler(), [1])],\n            remainder='drop'\n        )\n        ct.fit(X)\n        Xt = ct.transform(X)\n\n        self.assertEqual(Xt.shape, (3, 1))\n    def test_fit_transform_remainder_transformer(self):\n        X = [['a', 1], ['b', 2], ['c', 3]]\n        ct = ColumnTransformer(\n            transformers=[('num', StandardScaler(), [1])],\n            remainder=MockTransformer()\n        )\n        ct.fit(X)\n        Xt = ct.transform(X)\n\n        self.assertEqual(Xt.shape, (3, 2))\n\n    def test_fit_transform_with_pandas_dataframe(self):\n        import pandas as pd\n        X = pd.DataFrame({'col1': ['a', 'b', 'c'], 'col2': [1, 2, 3]})\n        ct = ColumnTransformer(\n            transformers=[('num', StandardScaler(), ['col2'])],\n            remainder='passthrough'\n        )\n        ct.fit(X)\n\n        Xt = ct.transform(X)\n        self.assertEqual(Xt.shape, (3, 2))\n\n    def test_transform_before_fit(self):\n        ct = ColumnTransformer([('std', StandardScaler(), [0])])\n        with self.assertRaises(NotFittedError):\n            ct.transform([[1, 2, 3]])\n\n    def test_error_invalid_remainder(self):\n        with self.assertRaises(ValueError):\n            ColumnTransformer(transformers=[], remainder=\"invalid_value\")\n\n    def test_feature_names_out_transformer_names(self):\n        ct = ColumnTransformer(\n            transformers=[\n                ('num', StandardScaler(), ['a']),\n            ],\n            remainder='passthrough',\n            verbose_feature_names_out=True,\n        )\n        ct.fit([[1, 2], [3, 4]])\n        self.assertEqual(\n            ct.get_feature_names_out(['a']), ['num__a', 'remainder__0']\n        )\n\n    def test_feature_names_out_transformer_names_no_transformation(self):\n        ct = ColumnTransformer(\n            transformers=[],\n            remainder='passthrough',\n            verbose_feature_names_out=True,\n        )\n        ct.fit([[1, 2], [3, 4]])\n        self.assertEqual(ct.get_feature_names_out(['a', 'b']), ['a', 'b'])\n\n    def test_feature_names_out_transformer_names_duplicate_names(self):\n        ct = ColumnTransformer(\n            transformers=[\n                ('num1', StandardScaler(), ['a']),\n                ('num2', StandardScaler(), ['b']),\n            ],\n            remainder='passthrough',\n            verbose_feature_names_out=True,\n        )\n        ct.fit([[1, 2], [3, 4]])\n        with self.assertRaises(ValueError):\n            ct.get_feature_names_out(['a', 'b'])\n\n    def test_feature_names_out_no_transformer_names(self):\n        ct = ColumnTransformer(\n            transformers=[\n                (StandardScaler(), ['a']),\n            ],\n            remainder='passthrough',\n            verbose_feature_names_out=False,\n        )\n        ct.fit([[1, 2], [3, 4]])\n        self.assertEqual(ct.get_feature_names_out(['a']), ['a', 'remainder__0'])\n\n\n\n    def test_make_column_transformer(self):\n        ct = make_column_transformer((StandardScaler(), ['num']),\n                                    (OneHotEncoder(), ['cat']))\n        self.assertIsInstance(ct, ColumnTransformer)\n\n    def test_make_column_selector(self):\n\n        ct = make_column_transformer(\n            (StandardScaler(), make_column_selector(dtype_include=np.number), ),\n            (OneHotEncoder(), make_column_selector(dtype_include=object)))\n        self.assertIsInstance(ct, ColumnTransformer)\n\n        \n\n"], "sample_85": ["\nimport os\nimport platform\nimport sys\nimport traceback\nfrom typing import Any\nfrom typing import Dict\nfrom typing import List\nfrom typing import Optional\n\nfrom _pytest.mark.evaluate import compiled_eval\nfrom _pytest.mark.evaluate import MarkEvaluator\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import TEST_OUTCOME\n\ndef test_compiled_eval():\n    d = {\"a\": 1}\n    assert compiled_eval(\"a + 1\", d) == 2\n\ndef test_MarkEvaluator__bool__():\n    item = Item.from_parent(None, name=\"test_func\")\n    mark_evaluator = MarkEvaluator(item, name=\"mark\")\n    assert not mark_evaluator\n\ndef test_MarkEvaluator_wasvalid():\n    item = Item.from_parent(None, name=\"test_func\")\n    mark_evaluator = MarkEvaluator(item, name=\"mark\")\n    assert mark_evaluator.wasvalid()\n\ndef test_MarkEvaluator_invalidraise():\n    item = Item.from_parent(None, name=\"test_func\")\n    mark_evaluator = MarkEvaluator(item, name=\"mark\")\n    mark_evaluator._marks = [Mark(name=\"mark\", args=(ValueError,))]\n    assert mark_evaluator.invalidraise(TypeError) is True\n    assert mark_evaluator.invalidraise(ValueError) is False\n\ndef test_MarkEvaluator_istrue():\n    item = Item.from_parent(None, name=\"test_func\")\n    mark_evaluator = MarkEvaluator(item, name=\"mark\")\n    mark_evaluator._marks = [Mark(name=\"mark\", args=(\"True\",))]\n    assert mark_evaluator.istrue()\n\ndef test_MarkEvaluator_istrue_syntax_error():\n    item = Item.from_parent(None, name=\"test_func\")\n    mark_evaluator = MarkEvaluator(item, name=\"mark\")\n    mark_evaluator._marks = [Mark(name=\"mark\", args=(\"2 +\",))]\n    with pytest.raises(fail):\n        mark_evaluator.istrue()\n\ndef test_MarkEvaluator__getglobals():\n    item = Item.from_parent(None, name=\"test_func\")\n    mark_evaluator = MarkEvaluator(item, name=\"mark\")\n    item.obj.__globals__ = {\"a\": 1}\n    d = mark_evaluator._getglobals()\n    assert d[\"os\"] == os\n    assert d[\"sys\"] == sys\n    assert d[\"platform\"] == platform\n    assert d[\"a\"] == 1\n\ndef test_MarkEvaluator__istrue_empty_marks():\n    item = Item.from_parent(None, name=\"test_func\")\n    mark_evaluator = MarkEvaluator(item, name=\"mark\")\n    assert not mark_evaluator._istrue()\n\ndef test_MarkEvaluator_get():\n    item = Item.from_parent(None, name=\"test_func\")\n    mark_evaluator = MarkEvaluator(item, name=\"mark\")\n    mark_evaluator._mark = Mark(name=\"mark\", kwargs={\"reason\": \"test\"})\n    assert mark_evaluator.get(\"reason\") == \"test\"\n\ndef test_MarkEvaluator_getexplanation():\n    item = Item.from_parent(None, name=\"test_func\")\n    mark_evaluator = MarkEvaluator(item, name=\"mark\")\n    mark_evaluator._mark = Mark(name=\"mark\", kwargs={\"reason\": \"test\"})\n    mark_evaluator.expr = \"test\"\n    assert mark_evaluator.getexplanation() == \"test\"\n"], "sample_73": ["\nimport unittest\nfrom matplotlib.figure import Figure\nfrom mpl_toolkits.axes_grid1 import (axes_size as Size, ImageGrid)\nimport numpy as np\n\nclass TestImageGrid(unittest.TestCase):\n\n    def test_ImageGrid_creation(self):\n        fig = Figure()\n        grid = ImageGrid(fig, 111, (2, 2),\n                         share_all=True, aspect=False)\n        self.assertEqual(len(grid.axes_all), 4)\n\n    def test_ImageGrid_label_mode(self):\n        fig = Figure()\n        grid = ImageGrid(fig, 111, (2, 2), label_mode=\"L\")\n        self.assertEqual(len(grid.axes_all), 4)\n\n    def test_ImageGrid_cbar_mode_single(self):\n        fig = Figure()\n        grid = ImageGrid(fig, 111, (2, 2), cbar_mode=\"single\", cbar_location=\"right\")\n        self.assertEqual(len(grid.cbar_axes), 1)\n\n    def test_ImageGrid_cbar_mode_each(self):\n        fig = Figure()\n        grid = ImageGrid(fig, 111, (2, 2), cbar_mode=\"each\", cbar_location=\"right\")\n        self.assertEqual(len(grid.cbar_axes), 4)\n\n    def test_ImageGrid_cbar_mode_edge(self):\n        fig = Figure()\n        grid = ImageGrid(fig, 111, (2, 2), cbar_mode=\"edge\", cbar_location=\"right\")\n        self.assertEqual(len(grid.cbar_axes), 2)\n\n    def test_ImageGrid_cbar_size(self):\n        fig = Figure()\n        grid = ImageGrid(fig, 111, (2, 2), cbar_size=\"10%\")\n        self.assertIsInstance(grid._colorbar_size, Size.Fixed)\n\n    def test_ImageGrid_colorbar_pad(self):\n        fig = Figure()\n        grid = ImageGrid(fig, 111, (2, 2), cbar_pad=0.2)\n        self.assertEqual(grid._colorbar_pad, 0.2)\n\n    def test_ImageGrid_colorbar_set_cax(self):\n        fig = Figure()\n        grid = ImageGrid(fig, 111, (2, 2), cbar_set_cax=False)\n        for ax in grid.axes_all:\n            self.assertFalse(hasattr(ax, 'cax'))\n\n\n"], "sample_121": ["\nimport unittest\nfrom typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar,\n                   Union)\nfrom sphinx.util.typing import (get_type_hints, is_system_TypeVar, restify, stringify,\n                               DirectiveOption, TextlikeNode, NoneType, PathMatcher,\n                               RoleFunction, TitleGetter, Inventory, ForwardRef)\nfrom typing import ForwardRef  # type: ignore\nfrom typing import Annotated  # type: ignore\nfrom sphinx.util.inspect import safe_getattr\n\nclass TestTyping(unittest.TestCase):\n    def test_get_type_hints(self):\n        def func(a: int, b: str = 'Hello') -> str:\n            return a + b\n\n        hints = get_type_hints(func)\n        self.assertEqual(hints['a'], int)\n        self.assertEqual(hints['b'], str)\n        self.assertEqual(hints['return'], str)\n\n        class MyClass:\n            def __init__(self, x: int, y: str):\n                self.x = x\n                self.y = y\n\n        hints = get_type_hints(MyClass)\n        self.assertEqual(hints['__init__']['x'], int)\n        self.assertEqual(hints['__init__']['y'], str)\n\n        def broken_func():\n            pass\n        self.assertEqual(get_type_hints(broken_func), {})\n\n    def test_is_system_TypeVar(self):\n        self.assertTrue(is_system_TypeVar(TypeVar('T')))\n        self.assertFalse(is_system_TypeVar(TypeVar('MyType', int, str)))\n\n    def test_restify(self):\n        self.assertEqual(restify(int), ':class:`int`')\n        self.assertEqual(restify(list), ':class:`list`')\n        self.assertEqual(restify(Dict[str, int]), ':class:`dict`\\\\ [:class:`str`, :class:`int`]')\n        self.assertEqual(restify(Union[int, str]),\n                         ':obj:`Union`\\\\ [:class:`int`, :class:`str`]')\n        self.assertEqual(restify(Optional[str]), ':obj:`Optional`\\\\ [:class:`str`]')\n        self.assertEqual(restify(Callable[[int], str]), ':class:`Callable`\\\\ [[\\\\ :class:`int`], :class:`str`]')\n\n    def test_stringify(self):\n        self.assertEqual(stringify(int), 'int')\n        self.assertEqual(stringify(list), 'list')\n        self.assertEqual(stringify(Dict[str, int]), 'dict[str, int]')\n        self.assertEqual(stringify(Union[int, str]), 'Union[int, str]')\n        self.assertEqual(stringify(Optional[str]), 'Optional[str]')\n        self.assertEqual(stringify(Callable[[int], str]), 'Callable[[int], str]')\n        self.assertEqual(stringify(Annotated[str, 'test']), 'Annotated[str, test]')\n"], "sample_31": ["\nfrom django.db import models\nfrom django.db.models import ProtectedError, RestrictedError\nfrom django.db.models.deletion import (CASCADE, PROTECT, RESTRICT, SET, SET_NULL,\n                                      SET_DEFAULT, DO_NOTHING, Collector,\n                                      get_candidate_relations_to_delete)\nfrom django.db.models.signals import pre_delete\nfrom django.test import TestCase, override_settings\nfrom django.test.utils import CaptureQueriesContext\n\nclass A(models.Model):\n    name = models.CharField(max_length=100)\n\nclass B(models.Model):\n    a = models.ForeignKey(A, models.CASCADE, related_name='bs')\n    name = models.CharField(max_length=100)\n\nclass C(models.Model):\n    b = models.ForeignKey(B, models.CASCADE, null=True, related_name='cs')\n\nclass D(models.Model):\n    b = models.ForeignKey(B, models.SET_NULL, null=True, related_name='ds')\n\nclass E(models.Model):\n    b = models.ForeignKey(B, models.PROTECT, related_name='es')\n\nclass F(models.Model):\n    b = models.ForeignKey(B, models.RESTRICT, related_name='fs')\n\nclass MyModel(models.Model):\n    field = models.CharField(max_length=100)\n\nclass G(models.Model):\n    mymodel = models.ForeignKey(MyModel, models.CASCADE, related_name='gs')\n\nclass H(models.Model):\n    g = models.ForeignKey(G, models.CASCADE, related_name='hs')\n\nclass I(models.Model):\n    h = models.ForeignKey(H, models.CASCADE, related_name='is')\n\nclass J(models.Model):\n    i = models.ForeignKey(I, models.CASCADE, related_name='js')\n\nclass K(models.Model):\n    j = models.ForeignKey(J, models.CASCADE, related_name='ks')\n\nclass L(models.Model):\n    k = models.ForeignKey(K, models.CASCADE, related_name='ls')\n\nclass M(models.Model):\n    l = models.ForeignKey(L, models.SET, related_name='ms')\n\nclass N(models.Model):\n    m = models.ForeignKey(M, models.SET_DEFAULT, default='default', related_name='ns')\n\nclass O(models.Model):\n    n = models.ForeignKey(N, models.DO_NOTHING, related_name='os')\n\nclass P(models.Model):\n    o = models.OneToOneField(O, models.CASCADE, related_name='p')\n\nclass Q(models.Model):\n    o = models.ForeignKey(O, models.CASCADE, related_name='qs')\n\nclass R(models.Model):\n    q = models.ForeignKey(Q, models.CASCADE, related_name='rs')\n    name = models.CharField(max_length=100)\n\nclass S(models.Model):\n    r = models.ForeignKey(R, models.CASCADE, related_name='ss')\n\nclass T(models.Model):\n    s = models.ForeignKey(S, models.CASCADE, related_name='ts')\n\nclass U(models.Model):\n    t = models.ForeignKey(T, models.CASCADE, related_name='us')\n\nclass V(models.Model):\n    u = models.ForeignKey(U, models.CASCADE, related_name='vs')\n\nclass W(models.Model):\n    v = models.ForeignKey(V, models.CASCADE, related_name='ws')\n\nclass X(models.Model):\n    w = models.ForeignKey(W, models.CASCADE, related_name='xs')\n\nclass Y(models.Model):\n    x = models.ForeignKey(X, models.CASCADE, related_name='ys')\n\nclass Z(models.Model):\n    y = models.ForeignKey(Y, models.CASCADE, related_name='zs')\n\nclass AA(models.Model):\n    z = models.ForeignKey(Z, models.CASCADE, related_name='aas')\n\nclass BB(models.Model):\n    aa = models.ForeignKey(AA, models.CASCADE, related_name='bbs')\n\nclass CC(models.Model):\n    bb = models.ForeignKey(BB, models.CASCADE, related_name='ccs')\n\nclass DD(models.Model):\n    cc = models.ForeignKey(CC, models.CASCADE, related_name='dds')\n\nclass EE(models.Model):\n    dd = models.ForeignKey(DD, models.CASCADE, related_name='ees')\n\nclass FF(models.Model):\n    ee = models.ForeignKey(EE, models.CASCADE, related_name='ffs')\nclass GG(models.Model):\n    ff = models.ForeignKey(FF, models.CASCADE, related_name='ggs')\nclass HH(models.Model):\n    gg = models.ForeignKey(GG, models.CASCADE, related_name='hhs')\nclass II(models.Model):\n    hh = models.ForeignKey(HH, models.CASCADE, related_name='iis')\nclass JJ(models.Model):\n    ii = models.ForeignKey(II, models.CASCADE, related_name='jjs')\n\nclass MyClass(models.Model):\n    parent = models.ForeignKey('self', models.CASCADE, related_name='children',\n                              null=True, blank=True)\n\n\nclass MyOtherClass(models.Model):\n    myclass = models.ForeignKey(MyClass, models.CASCADE, related_name='other_classes')\n\nclass TestDeletion(TestCase):\n\n    def test_cascade_delete(self):\n        a = A.objects.create(name='a')\n        b = B.objects.create(a=a, name='b')\n        c = C.objects.create(b=b)\n        d = D.objects.create(b=b)\n        e = E.objects.create(b=b)\n        f = F.objects.create(b=b)\n        a.delete()\n        self.assertEqual(B.objects.count(), 0)\n        self.assertEqual(C.objects.count(), 0)\n        self.assertEqual(D.objects.count(), 0)\n        self.assertRaises(E.DoesNotExist, lambda: E.objects.get(id=e.id))\n        self.assertRaises(F.DoesNotExist, lambda: F.objects.get(id=f.id))\n\n    def test_set_null_delete(self):\n        a = A.objects.create(name='a')\n        b = B.objects.create(a=a, name='b')\n        d = D.objects.create(b=b)\n        a.delete()\n        self.assertEqual(B.objects.count(), 0)\n        self.assertEqual(D.objects.count(), 0)\n\n    def test_set_default_delete(self):\n        a = A.objects.create(name='a')\n        b = B.objects.create(a=a, name='b')\n        m = M.objects.create(l= L.objects.create(k=K.objects.create(j=J.objects.create(i=I.objects.create(h=H.objects.create(g=G.objects.create(mymodel=MyModel.objects.create(field='test'))))))) )\n        n = N.objects.create(m=m)\n        a.delete()\n        self.assertEqual(N.objects.get(id=n.id).m_id, 'default')\n\n    def test_do_nothing_delete(self):\n        a = A.objects.create(name='a')\n        b = B.objects.create(a=a, name='b')\n        o = O.objects.create()\n        p = P.objects.create(o=o)\n        q = Q.objects.create(o=o)\n        o.delete()\n        self.assertRaises(O.DoesNotExist, lambda: O.objects.get(id=o.id))\n        self.assertRaises(P.DoesNotExist, lambda: P.objects.get(id=p.id))\n        self.assertRaises(Q.DoesNotExist, lambda: Q.objects.get(id=q.id))\n\n    def test_delete_with_signals(self):\n        def my_pre_delete_handler(sender, instance, **kwargs):\n            instance.name = instance.name + '_deleted'\n        pre_delete.connect(my_pre_delete_handler, sender=A)\n        a = A.objects.create(name='a')\n        a.delete()\n        self.assertEqual(A.objects.count(), 0)\n        self.assertEqual(a.name, 'a_deleted')\n        pre_delete.disconnect(my_pre_delete_handler, sender=A)\n\n    def test_related_objects(self):\n        a = A.objects.create(name='a')\n        b = B.objects.create(a=a, name='b')\n        c = C.objects.create(b=b)\n        collector = Collector(using='default')\n        collector.collect([a])\n        self.assertEqual(len(collector.data), 1)\n        self.assertTrue(A in collector.data)\n        self.assertEqual(len(collector.data[A]), 1)\n\n    def test_collect_related_objects(self):\n        a = A.objects.create(name='a')\n        b = B.objects.create(a=a, name='b')\n        c = C.objects.create(b=b)\n        collector = Collector(using='default')\n        collector.collect([a], collect_related=True)\n        self.assertEqual(len(collector.data), 3)\n        self.assertTrue(A in collector.data)\n        self.assertTrue(B in collector.data)\n        self.assertTrue(C in collector.data)\n        self.assertEqual(len(collector.data[A]), 1)\n        self.assertEqual(len(collector.data[B]), 1)\n        self.assertEqual(len(collector.data[C]), 1)\n\n    def test_delete_with_related_objects(self):\n        a = A.objects.create(name='a')\n        b = B.objects.create(a=a, name='b')\n        c = C.objects.create(b=b)\n        a.delete()\n\n    def test_delete_with_null_related_objects(self):\n        a = A.objects.create(name='a')\n        b = B.objects.create(a=a, name='b')\n        d = D.objects.create(b=b)\n        a.delete()\n        self.assertEqual(D.objects.count(), 0)\n\n    def test_delete_with_protected_objects(self):\n        a = A.objects.create(name='a')\n        b = B.objects.create(a=a, name='b')\n        c = C.objects.create(b=b)\n        e = E.objects.create(b=b)\n        with self.assertRaises(ProtectedError):\n            a.delete()\n\n    def test_delete_with_restricted_objects(self):\n        a = A.objects.create(name='a')\n        b = B.objects.create(a=a, name='b')\n        f = F.objects.create(b=b)\n        with self.assertRaises(RestrictedError):\n            a.delete()\n\n    def test_delete_with_custom_delete_method(self):\n        class MyModel(models.Model):\n            field = models.CharField(max_length=100)\n\n            def delete(self, *args, **kwargs):\n                # Simulate some custom deletion logic\n                pass\n        obj = MyModel.objects.create(field='test')\n        obj.delete()\n        self.assertEqual(MyModel.objects.count(), 0)\n\n\n    def test_fast_delete(self):\n\n        with override_settings(DATABASE_ENGINE='sqlite3'):\n            a = A.objects.create(name='a')\n            b = B.objects.create(a=a, name='b')\n            c = C.objects.create(b=b)\n            d = D.objects.create(b=b)\n            e = E.objects.create(b=b)\n            f = F.objects.create(b=b)\n            collector = Collector(using='default')\n            collector.collect([a], collect_related=True)\n\n            collector.delete()\n            self.assertEqual(A.objects.count(), 0)\n            self.assertEqual(B.objects.count(), 0)\n            self.assertEqual(C.objects.count(), 0)\n            self.assertEqual(D.objects.count(), 0)\n            self.assertEqual(E.objects.count(), 0)\n            self.assertEqual(F.objects.count(), 0)\n\n\n\n    def test_delete_cascade_delete_related(self):\n        a = A.objects.create(name='a')\n        b = B.objects.create(a=a, name='b')\n        b.delete()\n        self.assertEqual(A.objects.count(), 0)\n        self.assertEqual(B.objects.count(), 0)\n"], "sample_109": ["\nimport unittest\nfrom unittest import mock\n\nfrom sklearn.utils._pprint import _EstimatorPrettyPrinter, KeyValTuple, \\\n    KeyValTupleParam, _safe_repr, _changed_params\nfrom sklearn.base import BaseEstimator\nfrom sklearn._config import get_config\n\nclass MockEstimator(BaseEstimator):\n    def __init__(self, param1=1, param2=\"a\"):\n        self.param1 = param1\n        self.param2 = param2\n\n    def get_params(self, deep=True):\n        return {'param1': self.param1, 'param2': self.param2}\n\nclass TestEstimatorPrettyPrinter(unittest.TestCase):\n\n    def test_changed_params(self):\n        estimator = MockEstimator(param1=2, param2=\"b\")\n        self.assertEqual(_changed_params(estimator), {\"param1\": 2,\n                                                     \"param2\": \"b\"})\n        estimator = MockEstimator()\n        self.assertEqual(_changed_params(estimator), {})\n\n    def test__safe_repr_estimator(self):\n        estimator = MockEstimator(param1=2, param2=\"b\")\n        repr_str, readable, recursive = _safe_repr(estimator, {}, 10, 0)\n        self.assertEqual(repr_str, \"MockEstimator(param1=2, param2='b')\")\n        self.assertTrue(readable)\n        self.assertFalse(recursive)\n\n    def test__safe_repr_dict(self):\n        d = {'a': 1, 'b': 2}\n        repr_str, readable, recursive = _safe_repr(d, {}, 10, 0)\n        self.assertEqual(repr_str, \"{'a': 1, 'b': 2}\")\n        self.assertTrue(readable)\n        self.assertFalse(recursive)\n    \n    def test__safe_repr_list(self):\n        l = [1, 2, 3]\n        repr_str, readable, recursive = _safe_repr(l, {}, 10, 0)\n        self.assertEqual(repr_str, \"[1, 2, 3]\")\n        self.assertTrue(readable)\n        self.assertFalse(recursive)\n\n    def test_estimator_pretty_printer_compact(self):\n        estimator = MockEstimator(param1=2, param2=\"b\")\n        printer = _EstimatorPrettyPrinter(compact=True)\n        repr_str = printer.pformat(estimator)\n        self.assertIn(\"MockEstimator(\", repr_str)\n        self.assertIn(\"param1=2\", repr_str)\n        self.assertIn(\"param2='b'\", repr_str)\n\n    def test_estimator_pretty_printer_non_compact(self):\n        estimator = MockEstimator(param1=2, param2=\"b\")\n        printer = _EstimatorPrettyPrinter(compact=False)\n        repr_str = printer.pformat(estimator)\n        self.assertIn(\"MockEstimator(\", repr_str)\n        self.assertIn(\"param1=2\", repr_str)\n        self.assertIn(\"param2='b'\", repr_str)\n\n    def test_key_val_tuple(self):\n       kvt = KeyValTuple(('a', 1))\n       self.assertEqual(repr(kvt), \"('a', 1)\")\n       kvt = KeyValTupleParam(('a', 1))\n       self.assertEqual(repr(kvt), \"('a', 1)\")\n\n    def test_ellipsis(self):\n        with mock.patch.object(get_config, \n                             'get', \n                             return_value={'print_changed_only': False}):\n            # Test ellipsis for long lists\n            l = list(range(11))\n            printer = _EstimatorPrettyPrinter(n_max_elements_to_show=5)\n            repr_str = printer.pformat(l)\n            self.assertIn('[0, 1, 2, 3, 4, ...]', repr_str)\n            # Test ellipsis for long dicts\n            d = dict(zip(range(11), range(11)))\n            repr_str = printer.pformat(d)\n            self.assertIn('{0: 0, 1: 1, 2: 2, 3: 3, 4: 4, ...}', repr_str)\n\n\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_19": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock, ANY\nfrom django.db import models, connection, migrations\nfrom django.db.models.fields.related import (\n    ManyToManyField, ManyToManyDescriptor, ManyToManyRel,\n\n)\nfrom django.db.models.fields import Field\nfrom django.core.checks import Error, Warning as DjangoWarning\nfrom django.core import exceptions\n\n\nclass ModelA(models.Model):\n    name = models.CharField(max_length=20)\n\nclass ModelB(models.Model):\n    name = models.CharField(max_length=20)\n\nclass ModelC(models.Model):\n    name = models.CharField(max_length=20)\n    friends = models.ManyToManyField('self')\n\nclass TestManyToManyField(unittest.TestCase):\n\n    def test_check_unique(self):\n        field = ManyToManyField(ModelA)\n        self.assertEqual(field._check_unique(), [\n            Error(\n                'ManyToManyFields cannot be unique.',\n                obj=field,\n                id='fields.E330',\n            )\n        ])\n\n    @patch('django.db.models.fields.related.lazy_related_operation')\n    def test_contribute_to_class_no_through_abstract_model(self, mock_lazy_related):\n        class AbstractModel(models.Model):\n            abstract = True\n            many_to_many = ManyToManyField(ModelA)\n        AbstractModel._meta.db_table = 'abstract_model'\n        AbstractModel._meta.app_label = 'test_app'\n        AbstractModel._meta.object_name = 'AbstractModel'\n\n        AbstractModel.many_to_many.contribute_to_class(AbstractModel, 'many_to_many')\n        mock_lazy_related.assert_not_called()\n\n    @patch('django.db.models.fields.related.lazy_related_operation')\n    def test_contribute_to_class_no_through_swapped_model(self, mock_lazy_related):\n        class SwappedModel(models.Model):\n            pass\n        SwappedModel._meta.swapped = True\n        SwappedModel._meta.db_table = 'swapped_model'\n        SwappedModel._meta.app_label = 'test_app'\n        SwappedModel._meta.object_name = 'SwappedModel'\n\n        SwappedModel.many_to_many = ManyToManyField(ModelA)\n        SwappedModel.many_to_many.contribute_to_class(SwappedModel, 'many_to_many')\n        mock_lazy_related.assert_not_called()\n\n\n    def test_deconstruct_to_string(self):\n        field = ManyToManyField(ModelA)\n        name, path, args, kwargs = field.deconstruct()\n        self.assertEqual(name, 'ManyToManyField')\n        self.assertEqual(path, 'django.db.models.fields.related')\n        self.assertEqual(args, [])\n        self.assertEqual(kwargs, {'to': 'tests.ModelA'})\n    \n    def test_deconstruct_to_string_with_through_model(self):\n        class ThroughModel(models.Model):\n            pass\n        field = ManyToManyField(\n            ModelA,\n            through=ThroughModel,\n        )\n        name, path, args, kwargs = field.deconstruct()\n        self.assertEqual(name, 'ManyToManyField')\n        self.assertEqual(path, 'django.db.models.fields.related')\n        self.assertEqual(args, [])\n        self.assertEqual(kwargs, {'to': 'tests.ModelA', 'through': 'tests.ThroughModel'})\n    \n    def test_deconstruct_to_string_with_through_string(self):\n        field = ManyToManyField(\n            ModelA,\n            through='tests.ThroughModel',\n        )\n        name, path, args, kwargs = field.deconstruct()\n        self.assertEqual(name, 'ManyToManyField')\n        self.assertEqual(path, 'django.db.models.fields.related')\n        self.assertEqual(args, [])\n        self.assertEqual(kwargs, {'to': 'tests.ModelA', 'through': 'tests.ThroughModel'})\n\n\n    def test_get_m2m_related_name(self):\n        field = ManyToManyField(ModelA, related_name='related_objects')\n        self.assertEqual(field.remote_field.related_name, 'related_objects') \n\n    def test_get_m2m_attname(self):\n        field = ManyToManyField(ModelA)\n        model = ModelC()\n        setattr(model, field.name, field)\n        self.assertEqual(model.get_m2m_attribute_name(), 'friends')\n\n    def test_get_m2m_db_table(self):\n        field = ManyToManyField(ModelA)\n        self.assertEqual(field._get_m2m_db_table(\n            models.apps.get_model('tests', 'ModelC')._meta), \"modelc_manytomany\")\n\n    def test_m2m_db_table_with_custom_table(self):\n        field = ManyToManyField(ModelA, db_table='custom_table')\n        self.assertEqual(field._get_m2m_db_table(\n            models.apps.get_model('tests', 'ModelC')._meta),\n            'custom_table',\n        )\n\n    def test_m2m_descriptor_get_create_object(self):\n        field = ManyToManyField(ModelA)\n        model = ModelC()\n        setattr(model, field.name, field)\n        descriptor = ManyToManyDescriptor(field.remote_field, reverse=False)\n        relationship_manager = descriptor.__get__(model, ModelC)\n        obj = relationship_manager.create(name='new_object')\n        self.assertEqual(obj.name, 'new_object')\n\n    def test_m2m_descriptor_get_add_object(self):\n        field = ManyToManyField(ModelA)\n        model = ModelC()\n        setattr(model, field.name, field)\n        descriptor = ManyToManyDescriptor(field.remote_field, reverse=False)\n        relationship_manager = descriptor.__get__(model, ModelC)\n        obj = ModelA.objects.create(name='existing_object')\n        relationship_manager.add(obj)\n        self.assertTrue(obj in model.friends.all())\n\n    def test_set_attributes_from_rel(self):\n        field = ManyToManyField(ModelA)\n        field.set_attributes_from_rel()\n        self.assertIsNotNone(field.remote_field.model)\n\n    def test_value_from_object(self):\n        field = ManyToManyField(ModelA)\n        model = ModelC()\n        setattr(model, field.name, field)\n        self.assertEqual(field.value_from_object(model), [])\n\n    \n\n    @patch('django.db.models.fields.related.lazy_related_operation')\n    def test_contribute_to_class(self, mock_lazy_related):\n        field = ManyToManyField(ModelA)\n        class ModelD(models.Model):\n            pass\n        field.contribute_to_class(ModelD, 'm2m_field')\n        mock_lazy_related.assert_called_once()\n        \n        # Test if the related name is correctly set for symmetrical relations\n        field.remote_field.symmetrical = True\n        field.remote_field.model = ModelD\n        field.contribute_to_class(ModelD, 'm2m_field')\n        self.assertEqual(field.remote_field.related_name, 'm2m_field_rel_+')\n\n    @patch('django.db.models.fields.related.lazy_related_operation')\n    def test_contribute_to_related_class_hidden(self, mock_lazy_related):\n        field= ManyToManyField(ModelA)\n        field.remote_field.is_hidden = True\n        class ModelD(models.Model):\n            m2m_field = field\n        field.contribute_to_related_class(ModelD, field.remote_field)\n        self.assertTrue('_modelD_m2m_field_+' in dir(ModelA))\n    \n    \n\n    def test_m2m_reverse(self):\n        model1 = ModelA.objects.create(name='model1')\n        model2 = ModelB.objects.create(name='model2')\n        model1.related_objects.add(model2)\n        self.assertEqual(model2.related_objects.all(), [model1])\n    \n    def test_formfield(self):\n        field = ManyToManyField(ModelA)\n        formfield = field.formfield()\n        self.assertEqual(formfield.queryset, ModelA._default_manager)\n        self.assertEqual(formfield.form_class, forms.ModelMultipleChoiceField)\n\n        # Test initial with callable\n        def initial_callable():\n            return [ModelA.objects.get(name='test')]\n        formfield = field.formfield(initial=initial_callable)\n        self.assertEqual(formfield.initial, [1])\n\n\n\n"], "sample_24": ["\nimport unittest\nfrom unittest.mock import patch\n\nfrom django.apps import AppConfig\nfrom django.db import models\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.migration import Migration\n\nclass TestMigrationAutodetector(unittest.TestCase):\n    def setUp(self):\n        self.autodetector = MigrationAutodetector(None)\n\n    def test_no_changes(self):\n        # Test case where no changes are detected\n        from_state = [\n            models.ModelMeta()\n        ]\n        to_state = [\n            models.ModelMeta()\n        ]\n        changes = self.autodetector.detect_changes(from_state, to_state)\n        self.assertEqual(changes, {})\n\n    @patch('django.db.migrations.autodetector.Migration')\n    def test_simple_field_addition(self, mock_migration):\n        # Test case where a new field is added to a model\n        class Model(models.Model):\n            pass\n\n        from_state = [\n            models.ModelMeta()\n        ]\n        to_state = [\n            models.ModelMeta(\n                fields=[models.CharField(name='new_field', max_length=100)]\n            )\n        ]\n        changes = self.autodetector.detect_changes(from_state, to_state)\n        self.assertEqual(len(changes), 1)\n        self.assertIn('app_label', changes)\n        mock_migration.assert_called_once()\n\n    @patch('django.db.migrations.autodetector.Migration')\n    def test_field_removal(self, mock_migration):\n        # Test case where an existing field is removed from a model\n        class Model(models.Model):\n            old_field = models.CharField(max_length=100)\n        \n        from_state = [\n            models.ModelMeta(\n                fields=[models.CharField(name='old_field', max_length=100)]\n            )\n        ]\n        to_state = [\n            models.ModelMeta()\n        ]\n        changes = self.autodetector.detect_changes(from_state, to_state)\n        self.assertEqual(len(changes), 1)\n        self.assertIn('app_label', changes)\n        mock_migration.assert_called_once()\n\n    @patch('django.db.migrations.autodetector.Migration')\n    def test_field_modification(self, mock_migration):\n        # Test case where an existing field is modified\n        class Model(models.Model):\n            old_field = models.CharField(max_length=100)\n        \n        from_state = [\n            models.ModelMeta(\n                fields=[models.CharField(name='old_field', max_length=100)]\n            )\n        ]\n        to_state = [\n            models.ModelMeta(\n                fields=[models.CharField(name='old_field', max_length=200)]\n            )\n        ]\n        changes = self.autodetector.detect_changes(from_state, to_state)\n        self.assertEqual(len(changes), 1)\n        self.assertIn('app_label', changes)\n        mock_migration.assert_called_once()\n\n    @patch('django.db.migrations.autodetector.Migration')\n    def test_model_addition(self, mock_migration):\n        # Test case where a new model is added\n        from_state = [\n            models.ModelMeta()\n        ]\n        to_state = [\n            models.ModelMeta(),\n            models.ModelMeta(model=models.Model)\n        ]\n        changes = self.autodetector.detect_changes(from_state, to_state)\n        self.assertEqual(len(changes), 1)\n        self.assertIn('app_label', changes)\n        mock_migration.assert_called_once()\n\n    @patch('django.db.migrations.autodetector.Migration')\n    def test_model_removal(self, mock_migration):\n        # Test case where an existing model is removed\n        class Model(models.Model):\n            pass\n        \n        from_state = [\n            models.ModelMeta(model=Model)\n        ]\n        to_state = [\n            models.ModelMeta()\n        ]\n        changes = self.autodetector.detect_changes(from_state, to_state)\n        self.assertEqual(len(changes), 1)\n        self.assertIn('app_label', changes)\n        mock_migration.assert_called_once()\n\n    @patch('django.db.migrations.autodetector.Migration')\n    def test_database_creation(self, mock_migration):\n        # Test case where the initial database is being created\n        from_state = []\n        to_state = [\n            models.ModelMeta()\n        ]\n        changes = self.autodetector.detect_changes(from_state, to_state)\n        self.assertEqual(len(changes), 1)\n        self.assertIn('app_label', changes)\n        mock_migration.assert_called_once()\n\n\n\n"], "sample_125": ["\nfrom sympy.polys.polyoptions import ( Options, Expand, Gens, Wrt, Sort, Order, Field, Greedy, Domain, Split, Gaussian, Extension, Modulus, Symmetric, Strict, Auto, Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\nfrom sympy.polys.orderings import lex\nfrom sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\nfrom sympy.polys.polyerrors import OptionError, GeneratorsError\n\ndef test_Options_init():\n    opts = Options((x, y, z), {'domain': 'ZZ'})\n    assert opts.gens == (x, y, z)\n    assert opts.domain == ZZ\n    assert opts.expand is True\n\n    opts = Options((x, y, z), {'domain': 'ZZ', 'expand': False})\n    assert opts.expand is False\n\n    opts = Options((x, y, z), {'gens': (x, y)})\n    assert opts.gens == (x, y)\n\n    with pytest.raises(OptionError):\n      Options((x, y, z), {'gens': (x, y), 'gens': (x,)})\n\n    with pytest.raises(OptionError):\n      Options((x, y, z), {'domain': 'ZZ', 'gens': (x,)})\n\ndef test_Options_clone():\n    opts = Options((x, y, z), {'domain': 'ZZ', 'expand': False})\n    opts2 = opts.clone({'expand': True})\n    assert opts2.expand is True\n    assert opts2.domain == opts.domain\n\ndef test_Options_args():\n    opts = Options((x, y), {'domain': 'ZZ', 'expand': False, 'wrt': 'x'})\n    assert opts.args == {'domain': 'ZZ', 'expand': False, 'wrt': 'x'}\n\ndef test_Options_flags():\n    opts = Options((x, y), {'domain': 'ZZ', 'expand': False, 'formal': True})\n    assert opts.flags.formal is True\n\ndef test_Expand():\n    opts = Options((x,), {'expand': True})\n    assert opts.expand is True\n\ndef test_Gens():\n    opts = Options((x, y), {'gens': (x, y)})\n    assert opts.gens == (x, y)\n\n    with pytest.raises(GeneratorsError):\n      Options((x, y), {'gens': (x, x)})\n\ndef test_Wrt():\n    opts = Options((x, y), {'wrt': 'x'})\n    assert opts.wrt == ['x']\n    \n    opts = Options((x, y), {'wrt': 'x,y'})\n    assert opts.wrt == ['x', 'y']\n\ndef test_Sort():\n    opts = Options((x, y), {'sort': 'x>y'})\n    assert opts.sort == ['x', 'y']\n\ndef test_Order():\n    opts = Options((x, y), {'order': 'lex'})\n    assert opts.order == lex\n\ndef test_Field():\n    opts = Options((x, y), {'field': True})\n    assert opts.field is True\n\ndef test_Greedy():\n    opts = Options((x, y), {'greedy': True})\n    assert opts.greedy is True\n\ndef test_Domain():\n    opts = Options((x, y), {'domain': ZZ})\n    assert opts.domain == ZZ\n\n    opts = Options((x, y), {'domain': 'QQ[x,y]'})\n    assert opts.domain == QQ.poly_ring(x,y)\n\n    opts = Options((x, y), {'domain': 'ZZ(x,y)'})\n    assert opts.domain == ZZ.frac_field(x, y)\n    \n    with pytest.raises(OptionError):\n      Options((x, y), {'domain': 'invalid'})\n\ndef test_Split():\n    opts = Options((x, y), {'split': True})\n    assert opts.split is True\n\ndef test_Gaussian():\n    opts = Options((x, y), {'gaussian': True})\n    assert opts.gaussian is True\n\n\ndef test_Extension():\n    opts = Options((x, y), {'extension': 'I'})\n    assert opts.extension == {'I'}\n\ndef test_Modulus():\n    opts = Options((x, y), {'modulus': '5'})\n    assert opts.modulus == 5\n\n\ndef test_Symmetric():\n    opts = Options((x, y), {'symmetric': True})\n    assert opts.symmetric is True\n\n\ndef test_Strict():\n    opts = Options((x, y), {'strict': True})\n    assert opts.strict is True\n\n\n\ndef test_Auto():\n    opts = Options((x, y), {'auto': True})\n    assert opts.auto is True\n\n\n\ndef test_Frac():\n    opts = Options((x, y), {'frac': True})\n    assert opts.frac is True\n\n\n\ndef test_Formal():\n    opts = Options((x, y), {'formal': True})\n    assert opts.formal is True\n\n\n\ndef test_Polys():\n    opts = Options((x, y), {'polys': True})\n    assert opts.polys is True\n\n\n\ndef test_Include():\n    opts = Options((x, y), {'include': True})\n    assert opts.include is True\n\n\n\ndef test_All():\n    opts = Options((x, y), {'all': True})\n    assert opts.all is True\n\n\n\ndef test_Gen():\n    opts = Options((x, y), {'gen': x})\n    assert opts.gen == x\n\n\n\ndef test_Series():\n    opts = Options((x, y), {'series': True})\n    assert opts.series is True\n\n\n\ndef test_Symbols():\n    opts = Options((x, y), {'symbols': [x]})\n    assert list(opts.symbols) == [x]\n\n\n\ndef test_Method():\n    opts = Options((x, y), {'method': 'test'})\n    assert opts.method == 'test'\n\n\n\ndef test_build_options():\n    opts = build_options((x, y, z), {'domain': 'ZZ'})\n    assert opts.gens == (x, y, z)\n    assert opts.domain == ZZ\n\ndef test_allowed_flags():\n    allowed_flags({'domain': ZZ}, ['frac'])\n    with pytest.raises(FlagError):\n      allowed_flags({'domain': ZZ, 'frac': True}, [])\n\ndef test_set_defaults():\n    opts = set_defaults(Options((x, y), {'domain': 'ZZ'}), frac=True)\n    assert opts['defaults']['frac'] == True\n\n"], "sample_151": ["\nfrom sympy import Point, Point2D, Point3D\nfrom sympy.geometry.entity import GeometryEntity\nfrom sympy.geometry.line import Line, Line3D\nfrom sympy.geometry.plane import Plane\nfrom sympy.core.symbol import symbols\nfrom sympy.functions.elementary.miscellaneous import sqrt\nfrom sympy.core.numbers import Rational, pi\n\ndef test_Point_creation():\n    assert Point(1, 2) == Point(1, 2)\n    assert Point(1, 2, 3).dim == 3\n    assert Point([1, 2]) == Point(1, 2)\n    assert Point(1.0, 2.0) == Point(1, 2)\n    assert Point([1.0, 2.0]).is_Rational\n\ndef test_Point2D_creation():\n    assert Point2D(1, 2) == Point2D(1, 2)\n    assert Point2D([1, 2]) == Point2D(1, 2)\n\ndef test_Point3D_creation():\n    assert Point3D(1, 2, 3) == Point3D(1, 2, 3)\n    assert Point3D([1, 2, 3]) == Point3D(1, 2, 3)\n\ndef test_Point_eq():\n    assert Point(1, 2) == Point(1, 2)\n    assert Point(1, 2) != Point(2, 1)\n\ndef test_Point2D_eq():\n    assert Point2D(1, 2) == Point2D(1, 2)\n    assert Point2D(1, 2) != Point2D(2, 1)\n\ndef test_Point3D_eq():\n    assert Point3D(1, 2, 3) == Point3D(1, 2, 3)\n    assert Point3D(1, 2, 3) != Point3D(2, 1, 3)\n\ndef test_Point_add():\n    p1 = Point(1, 2)\n    p2 = Point(3, 4)\n    assert p1 + p2 == Point(4, 6)\n\ndef test_Point2D_add():\n    p1 = Point2D(1, 2)\n    p2 = Point2D(3, 4)\n    assert p1 + p2 == Point2D(4, 6)\n\ndef test_Point3D_add():\n    p1 = Point3D(1, 2, 3)\n    p2 = Point3D(3, 4, 5)\n    assert p1 + p2 == Point3D(4, 6, 8)\n\ndef test_Point_sub():\n    p1 = Point(1, 2)\n    p2 = Point(3, 4)\n    assert p1 - p2 == Point(-2, -2)\n\ndef test_Point2D_sub():\n    p1 = Point2D(1, 2)\n    p2 = Point2D(3, 4)\n    assert p1 - p2 == Point2D(-2, -2)\n\ndef test_Point3D_sub():\n    p1 = Point3D(1, 2, 3)\n    p2 = Point3D(3, 4, 5)\n    assert p1 - p2 == Point3D(-2, -2, -2)\n\ndef test_Point_distance():\n    p1 = Point(1, 2)\n    p2 = Point(4, 6)\n    assert p1.distance(p2) == 5\n\ndef test_Point2D_distance():\n    p1 = Point2D(1, 2)\n    p2 = Point2D(4, 6)\n    assert p1.distance(p2) == 5\n\ndef test_Point3D_distance():\n    p1 = Point3D(1, 2, 3)\n    p2 = Point3D(4, 6, 8)\n    assert p1.distance(p2) == 7\n\ndef test_Point_rotate():\n    p = Point(1, 0)\n    assert p.rotate(pi/2) == Point(0, 1)\n\ndef test_Point2D_rotate():\n    p = Point2D(1, 0)\n    assert p.rotate(pi/2) == Point2D(0, 1)\n\ndef test_Point3D_rotate():\n    pass  # Implement if possible\n\ndef test_Point_scale():\n    p = Point(1, 2)\n    assert p.scale(2) == Point(2, 4)\n\ndef test_Point2D_scale():\n    p = Point2D(1, 2)\n    assert p.scale(2) == Point2D(2, 4)\n\ndef test_Point3D_scale():\n    p = Point3D(1, 2, 3)\n    assert p.scale(2) == Point3D(2, 4, 6)\n\ndef test_Point_translate():\n    p = Point(1, 2)\n    assert p.translate(3, 4) == Point(4, 6)\n\ndef test_Point2D_translate():\n    p = Point2D(1, 2)\n    assert p.translate(3, 4) == Point2D(4, 6)\n\ndef test_Point3D_translate():\n    p = Point3D(1, 2, 3)\n    assert p.translate(3, 4, 5) == Point3D(4, 6, 8)\n\ndef test_Point_midpoint():\n    p1 = Point(1, 2)\n    p2 = Point(3, 4)\n    assert p1.midpoint(p2) == Point(2, 3)\n\ndef test_Point2D_midpoint():\n    p1 = Point2D(1, 2)\n    p2 = Point2D(3, 4)\n    assert p1.midpoint(p2) == Point2D(2, 3)\n\ndef test_Point3D_midpoint():\n    p1 = Point3D(1, 2, 3)\n    p2 = Point3D(3, 4, 5)\n    assert p1.midpoint(p2) == Point3D(2, 3, 4)\n\ndef test_Point_intersection():\n    l1 = Line(Point(0, 0), Point(1, 1))\n    l2 = Line(Point(0, 1), Point(1, 0))\n    p = l1.intersection(l2)[0]\n    assert isinstance(p, Point)\n\ndef test_Point2D_intersection():\n    l1 = Line(Point2D(0, 0), Point2D(1, 1))\n    l2 = Line(Point2D(0, 1), Point2D(1, 0))\n    p = l1.intersection(l2)[0]\n    assert isinstance(p, Point2D)\n\ndef test_Point3D_intersection():\n    l1 = Line3D(Point3D(0, 0, 0), Point3D(1, 1, 1))\n    l2 = Line3D(Point3D(0, 1, 1), Point3D(1, 0, 1))\n    p = l1.intersection(l2)\n    assert p is None\n\ndef test_Point_is_collinear():\n\n    p1 = Point(0, 0)\n    p2 = Point(1, 1)\n    p3 = Point(2, 2)\n    assert Point.is_collinear(p1, p2, p3)\n\ndef test_Point2D_is_collinear():\n    p1 = Point2D(0, 0)\n    p2 = Point2D(1, 1)\n    p3 = Point2D(2, 2)\n    assert Point2D.is_collinear(p1, p2, p3)\n\ndef test_Point3D_is_collinear():\n    p1 = Point3D(0, 0, 0)\n    p2 = Point3D(1, 1, 1)\n    p3 = Point3D(2, 2, 2)\n    assert Point3D.are_collinear(p1, p2, p3)\n\n\n\n"], "sample_74": ["\nimport io\nimport copy\nimport pathlib\nimport numpy as np\nfrom numpy.testing import assert_array_equal\nimport pytest\n\nfrom matplotlib.artist import Artist\nfrom matplotlib.axes import Axes, Subplot\nfrom matplotlib.backend_bases import (\n    FigureCanvasBase, KeyEvent, LocationEvent, MouseButton, MouseEvent,\n    NavigationToolbar2, RendererBase\n)\nfrom matplotlib.figure import Figure\nfrom matplotlib.image import FigureImage,imread\nfrom matplotlib.patches import Rectangle\nfrom matplotlib.transforms import BboxBase\n\n# For testing tight_layout\nfrom matplotlib.tests.conftest import mpl_test_png_baseline\n\nclass TestFigure:\n\n    def test_figaspect(self):\n        width, height = figaspect(2.)\n        assert width / height == 1 / 2\n\n    def test_figure_init(self):\n        fig = Figure()\n        assert fig.dpi == mpl.rcParams['figure.dpi']\n        assert fig.figsize == mpl.rcParams['figure.figsize']\n        assert fig.patch.get_facecolor() == mpl.rcParams['figure.facecolor']\n        assert fig.patch.get_edgecolor() == mpl.rcParams['figure.edgecolor']\n        fig2 = Figure(figsize=(5, 5))\n        assert fig2.figsize == (5, 5)\n\n    def test_set_size_inches(self):\n        fig = Figure()\n        fig.set_size_inches(10, 5)\n        assert fig.get_size_inches() == (10, 5)\n\n    def test_get_dpi(self):\n        fig = Figure()\n        assert fig.get_dpi() == mpl.rcParams['figure.dpi']\n\n    def test_set_dpi(self):\n        fig = Figure()\n        fig.set_dpi(100)\n        assert fig.get_dpi() == 100\n\n    def test_add_axes(self):\n        fig = Figure()\n        ax = fig.add_axes((0.1, 0.1, 0.8, 0.8))\n        assert isinstance(ax, Axes)\n        assert ax.get_position() == (0.1, 0.1, 0.8, 0.8)\n\n    def test_add_subplot(self):\n        fig = Figure()\n        ax = fig.add_subplot(111)\n        assert isinstance(ax, Axes)\n        assert ax.get_position().get_points().tolist() == [\n            [0.125, 0.11],\n            [0.9, 0.88]\n        ]\n\n    def test_delaxes(self):\n        fig = Figure()\n        ax = fig.add_axes((0.1, 0.1, 0.8, 0.8))\n        fig.delaxes(ax)\n        assert len(fig.axes) == 0\n\n    def test_clear(self):\n        fig = Figure()\n        fig.add_axes((0.1, 0.1, 0.8, 0.8))\n        fig.clear()\n        assert len(fig.axes) == 0\n\n    def test_savefig(self):\n        fig = Figure()\n        ax = fig.add_subplot(111)\n        ax.plot([1, 2, 3], [4, 5, 6])\n        # Save to a buffer instead of a file.\n        buf = io.BytesIO()\n        fig.savefig(buf, format='png')\n\n    def test_savefig_dpi(self):\n        fig = Figure()\n        ax = fig.add_subplot(111)\n        ax.plot([1, 2, 3], [4, 5, 6])\n        buf = io.BytesIO()\n        fig.savefig(buf, format='png', dpi=100)\n\n    def test_savefig_transparent(self):\n        fig = Figure()\n        ax = fig.add_subplot(111)\n        ax.plot([1, 2, 3], [4, 5, 6])\n        buf = io.BytesIO()\n        fig.savefig(buf, format='png', transparent=True)\n        # Check that the image is transparent.\n\n        # Note this is a very basic check\n\n        data = np.frombuffer(buf.getvalue(), dtype=np.uint8)\n        if len(data) == 0:\n            assert False\n        \n\n        img = imread(buf)\n        assert img.shape[2] == 4  \n\n    def test_canvas(self):\n        fig = Figure()\n        assert isinstance(fig.canvas, FigureCanvasBase)\n\n    def test_contains(self):\n        fig = Figure()\n        ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n        assert fig.contains(ax)\n\n    def test_get_children(self):\n        fig = Figure()\n        ax = fig.add_subplot(111)\n        children = fig.get_children()\n        assert ax in children\n\n    def test_get_tightbbox(self):\n        # This test requires a renderer.\n        fig = Figure()\n        ax = fig.add_subplot(111)\n        ax.plot([1, 2, 3], [4, 5, 6])\n        renderer = fig.canvas.get_renderer()\n        bbox = fig.get_tightbbox(renderer)\n        assert isinstance(bbox, BboxBase)\n\n    def test_tight_layout(self):\n        fig = Figure()\n        ax1 = fig.add_subplot(211)\n        ax2 = fig.add_subplot(212)\n\n        # Add some artists to the subplot\n        ax1.plot([1, 2, 3], [4, 5, 6])\n        ax2.plot([1, 2, 3], [4, 5, 6])\n\n        fig.tight_layout()\n\n        # Check if subplots are close to each other.\n        assert abs(ax1.get_position().ymin - ax2.get_position().ymax) < 0.1\n\n    def test_show(self):\n        # This test is skipped because it requires a GUI backend.\n        pass\n\n    def test_add_artist(self):\n        fig = Figure()\n\n        class TestArtist(Artist):\n            pass\n\n        artist = TestArtist()\n        fig.add_artist(artist)\n\n    def test_draw_artist(self):\n        fig = Figure()\n        ax = fig.add_subplot(111)\n\n        artist = Rectangle((0, 0), 1, 1, facecolor='red')\n        ax.add_artist(artist)\n        fig.draw(renderer=None)\n\n    def test_ginput(self):\n        fig = Figure()\n        ax = fig.add_subplot(111)\n\n        clicks = fig.ginput(\n            n=3, timeout=-1,\n            show_clicks=True,\n            mouse_add=MouseButton.LEFT,\n            mouse_pop=MouseButton.RIGHT,\n            mouse_stop=MouseButton.MIDDLE\n        )\n\n        assert len(clicks) == 3\n"], "sample_14": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch, call\nfrom django.utils import autoreload\nfrom django.utils.autoreload import StatReloader, WatchmanReloader, WatchmanUnavailable, get_reloader, get_child_arguments\nfrom django.core.management.base import BaseCommand\nfrom django.apps import apps\nfrom django.urls import get_resolver\nfrom django.conf import settings\nimport os\nimport sys\nimport time\nimport threading\nfrom pathlib import Path\nimport signal\n\nclass TestAutoreload(unittest.TestCase):\n\n    def setUp(self):\n        self.reloader = autoreload.StatReloader()\n        self.django_main_thread = threading.Thread()\n        self.reloader.directory_globs = defaultdict(set)\n        self.reloader.extra_files = set()\n\n    def test_check_errors(self):\n        def raiser():\n            raise Exception('Intentional error')\n        with patch('django.utils.autoreload.check_errors',\n                   side_effect=raiser):\n            \n            autoreload.check_errors(raiser)()\n            self.assertEqual(len(autoreload._exception[1]), 1)\n            self.assertEqual(autoreload._exception[1].args[0], 'Intentional error')\n        autoreload._exception = None\n        autoreload.check_errors(lambda x: x)()\n       \n    @patch('django.utils.autoreload.sys.exit')\n    def test_trigger_reload(self, mock_exit):\n        autoreload.trigger_reload('/path/to/file.py')\n        mock_exit.assert_called_once_with(3)\n\n    @patch('os.environ', {'DJANGO_AUTORELOAD_ENV': 'true'})\n    @patch('subprocess.call', return_value=0)\n    @patch('django.utils.autoreload.get_child_arguments', return_value=['python', '-m', 'django', 'runserver'])\n    def test_restart_with_reloader(self, mock_get_args, mock_subprocess_call, mock_os_environ):\n        autoreload.restart_with_reloader()\n        mock_subprocess_call.assert_called_once_with(['python', '-m', 'django', 'runserver'], env={'DJANGO_AUTORELOAD_ENV': 'true'}, close_fds=False) \n\n    def test_iter_all_python_module_files_basic(self):\n        sys.modules['django.__main__'] = MagicMock(spec=ModuleType)\n        sys.modules['django.__main__'].__file__ = \"/path/to/django/__main__.py\"\n\n        sys.modules['some.module'] = MagicMock(spec=ModuleType)\n        sys.modules['some.module'].__file__ = \"/path/to/some/module.py\"\n        \n        result = list(autoreload.iter_all_python_module_files())\n        self.assertEqual([Path(\"/path/to/django/__main__.py\").resolve().absolute(), Path(\"/path/to/some/module.py\").resolve().absolute()], result)\n\n    def test_iter_all_python_module_files_exclude_nonmodule(self):\n        sys.modules['some.type'] = type('SomeType', (), {})\n\n        result = list(autoreload.iter_all_python_module_files())\n        self.assertEqual([], result)\n\n    def test_iter_modules_and_files(self):\n        sys.modules['module1'] = MagicMock()\n        sys.modules['module1'].__file__ = '/path/to/module1.py'\n        sys.modules['module2'] = MagicMock()\n        sys.modules['module2'].__spec__ = MagicMock()\n        sys.modules['module2'].__spec__.origin = '/path/to/module2.py'\n\n        result = autoreload.iter_modules_and_files(list(sys.modules.values()), set())\n        self.assertEqual(result, frozenset({Path('/path/to/module1.py').resolve().absolute(), Path('/path/to/module2.py').resolve().absolute()}))\n\n    def test_common_roots(self):\n        paths = [\n            Path('/path/to/some/dir1/file.txt'),\n            Path('/path/to/some/dir2/file.txt'),\n            Path('/path/to/another/dir/file.txt')\n        ]\n        result = list(autoreload.common_roots(paths))\n        self.assertEqual(result, [Path('/path/to')])\n\n    def test_sys_path_directories(self):\n        sys.path.append('/path/to/some/dir')\n        result = list(autoreload.sys_path_directories())\n        self.assertEqual(result, [Path('/path/to/some/dir').resolve().absolute()])\n\n    @patch('django.utils.autoreload.sys.argv', ['python', '-m', 'django', 'runserver'])\n    def test_get_child_arguments(self):\n        result = autoreload.get_child_arguments()\n        self.assertEqual(result, ['python', '-Wignore', '-m', 'django', 'runserver'])\n\n    def test_watch_dir(self):\n        self.reloader.watch_dir(Path('/path/to/dir'), '*.py')\n        self.assertEqual(self.reloader.directory_globs[Path('/path/to/dir')], {'*.py'})\n\n    def test_watch_file(self):\n        self.reloader.watch_file(Path('/path/to/file.py'))\n        self.assertIn(Path('/path/to/file.py'), self.reloader.extra_files)\n\n    def test_watched_files(self):\n        self.reloader.watch_dir(Path('/path/to/dir'), '*.py')\n        self.reloader.watch_file(Path('/path/to/file.py'))\n        watched_files = list(self.reloader.watched_files())\n        self.assertIn(Path('/path/to/file.py'), watched_files)\n        self.assertIn(Path('/path/to/dir'), watched_files)\n        \n        \n        \n    @patch('django.utils.autoreload.apps.ready_event')\n    @patch('django.utils.autoreload.threading.Event')\n    def test_wait_for_apps_ready(self, mock_Event, mock_ready_event):\n      mock_event = mock_Event()\n      mock_ready_event.wait.return_value = True\n      django_main_thread = MagicMock()\n      django_main_thread.is_alive.return_value = True\n      result = self.reloader.wait_for_apps_ready(apps, django_main_thread)\n      self.assertTrue(result)\n\n    def test_run(self):\n        apps.ready_event = MagicMock()\n        apps.ready_event.wait.return_value = True\n        get_resolver.urlconf_module = MagicMock()\n\n        self.reloader.run(self.django_main_thread) \n\n    def test_run_loop(self):\n      self.reloader._stop_condition = MagicMock(is_set=MagicMock(return_value=False))\n      self.reloader.tick = MagicMock(return_value=iter([]))\n      self.reloader.run_loop()\n      self.assertEqual(self.reloader._stop_condition.is_set.call_count, 1)\n\n    def test_tick(self):\n        with patch.object(self.reloader, 'should_stop', return_value=False) as mock_should_stop:\n            self.reloader.tick()\n            mock_should_stop.assert_has_calls([call()])\n\n    def test_notify_file_changed(self):\n        self.reloader.notify_file_changed(Path('/path/to/file.py'))    \n    \n    @patch('django.utils.autoreload.sys.exit', return_value=None)\n    def test_trigger_reload_from_notify_file_changed_false(self, mock_sys_exit):\n        self.reloader.notify_file_changed(Path('/path/to/file.py'))\n        mock_sys_exit.assert_called_once_with(3)\n\n\n\nclass TestWatchmanReloader(unittest.TestCase):\n\n    def setUp(self):\n        self.reloader = autoreload.WatchmanReloader()\n        self.django_main_thread = threading.Thread()\n\n    @patch('pywatchman.client')\n    def test_client(self, mock_client):\n        client = self.reloader.client\n        mock_client.assert_called_once_with(timeout=5)\n        \n    \n\n    def test_watch_root_doesnt_exist(self):\n        path = Path('/path/to/nonexistent/dir')\n        result = self.reloader._watch_root(path)\n        self.assertIsNone(result)\n\n    def test__get_clock(self):\n        with patch('pywatchman.client') as mock_client:\n            mock_client.return_value.query.return_value = {'clock': '123'}\n            clock = self.reloader._get_clock(Path('/path/to/dir'))\n            self.assertEqual(clock, '123')\n\n    def test__subscribe(self):\n        with patch('pywatchman.client') as mock_client:\n            mock_client.return_value.query.return_value = {'watch': 'watch_id', 'relative_path': 'relative'}\n            self.reloader._subscribe(Path('/path/to/dir'), 'name', ['expression'])\n            mock_client.return_value.query.assert_called_once_with('subscribe', '/path/to/dir', 'name', {'expression': ['expression'], 'fields': ['name'], 'since': '123', 'dedup_results': True, 'relative_root': 'relative'})\n\n    def test_watched_roots(self):\n        self.reloader.directory_globs[Path('/path/to/dir')] = ['*.py']\n        self.reloader.extra_files.add(Path('/path/to/file.py'))\n\n        watched_files = [\n            Path('/path/to/file.py'),\n        ]\n        roots = self.reloader.watched_roots(watched_files)\n\n        self.assertEqual(roots, frozenset({Path('/path/to/dir'), Path('/path/to').resolve().absolute()}))\n\n    @patch('pywatchman.client')\n    def test_update_watches(self, mock_watchman_client):\n        self.reloader.directory_globs[Path('/path/to/dir')] = ['*.py']\n        self.reloader.extra_files.add(Path('/path/to/file.py'))\n\n\n        mock_watchman_client.return_value.query.return_value = {'watch': 'watch_id', 'relative_path': 'relative'}\n        self.reloader._watch_root = MagicMock()\n\n        self.reloader._update_watches()\n        self.reloader._watch_root.assert_called()\n\n    def test_check_server_status_raises(self):\n        with self.assertRaises(WatchmanUnavailable):\n            self.reloader.check_server_status(Exception('Watchman unavailable')) \n\n    def test_check_availability(self):\n        with patch('pywatchman.client') as mock_client:\n            mock_client.side_effect = Exception('Watchman unavailable')\n            with self.assertRaises(WatchmanUnavailable):\n                autoreload.WatchmanReloader.check_availability()\n\n    def test_get_reloader(self):\n        with patch('pywatchman.client', return_value=MagicMock()) as mock_client:\n            result = autoreload.get_reloader()\n            self.assertTrue(isinstance(result, autoreload.WatchmanReloader))\n        with patch('pywatchman.client', side_effect=Exception('Watchman unavailable')):\n            result = autoreload.get_reloader()\n            self.assertTrue(isinstance(result, autoreload.StatReloader))\n\nclass TestRunWithReloader(unittest.TestCase):\n\n    def setUp(self):\n        self.reloader = MagicMock()\n    @patch('django.utils.autoreload.get_reloader', return_value=self.reloader)\n    @patch('django.utils.autoreload.run_with_reloader')\n    def test_run_with_reloader(self, mock_run_with_reloader, mock_get_reloader):\n        autoreload.run_with_reloader(lambda x: x)\n        self.assertEqual(mock_run_with_reloader.call_count, 1)\n\n    @patch('django.utils.autoreload.sys.exit')\n    @patch('os.environ', {'DJANGO_AUTORELOAD_ENV': 'true'})\n    def test_run_with_reloader_with_env_var(self, mock_exit, mock_os_environ): \n        mock_reloader = MagicMock()\n        with patch('django.utils.autoreload.get_reloader', return_value=mock_reloader) as mock_get_reloader: \n            autoreload.run_with_reloader(lambda x: x)\n            mock_get_reloader.assert_called_once_with()\n\n"], "sample_67": ["\nfrom unittest import mock\nfrom django.core.cache import cache\nfrom django.core.cache.backends.filebased import FileBasedCache\nfrom django.core.cache.utils import make_key\nfrom django.test import SimpleTestCase, override_settings, TestCase\nfrom django.utils.cache import get_cache_key\nfrom django.utils.crypto import md5\nimport os\nimport tempfile\nimport pickle\n\nclass FileBasedCacheTests(TestCase):\n\n    @override_settings(CACHES={\n        'default': {\n            'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',\n            'LOCATION': tempfile.mkdtemp(),\n            'TIMEOUT': DEFAULT_TIMEOUT,\n        }\n    })\n    def test_basic_operations(self):\n        cache.set('test_key', 'test_value')\n        self.assertEqual(cache.get('test_key'), 'test_value')\n        cache.delete('test_key')\n        self.assertIsNone(cache.get('test_key'))\n\n    def test_expired_cache_entry(self):\n        cache = FileBasedCache(LOCATION=tempfile.mkdtemp(), OPTIONS={})\n        key = 'test_key'\n        cache.set(key, 'test_value', timeout=0)\n        self.assertIsNone(cache.get(key))\n\n    def test_get_with_default(self):\n        cache = FileBasedCache(LOCATION=tempfile.mkdtemp(), OPTIONS={})\n        self.assertEqual(cache.get('nonexistent_key', 'default_value'), 'default_value')\n\n    def test_add_existing_key(self):\n        cache = FileBasedCache(LOCATION=tempfile.mkdtemp(), OPTIONS={})\n        cache.set('test_key', 'old_value')\n        self.assertFalse(cache.add('test_key', 'new_value'))\n        self.assertEqual(cache.get('test_key'), 'old_value')\n\n    def test_touch_existing_key(self):\n        cache = FileBasedCache(LOCATION=tempfile.mkdtemp(), OPTIONS={})\n        cache.set('test_key', 'test_value', timeout=1)\n        time.sleep(2)  # Ensure cache entry is expired\n        self.assertTrue(cache.touch('test_key', timeout=5))\n        self.assertEqual(cache.get('test_key'), 'test_value')\n\n    def test_touch_nonexistent_key(self):\n        cache = FileBasedCache(LOCATION=tempfile.mkdtemp(), OPTIONS={})\n        self.assertFalse(cache.touch('nonexistent_key'))\n\n    def test_has_key_existing_key(self):\n        cache = FileBasedCache(LOCATION=tempfile.mkdtemp(), OPTIONS={})\n        cache.set('test_key', 'test_value')\n        self.assertTrue(cache.has_key('test_key'))\n\n    def test_has_key_nonexistent_key(self):\n        cache = FileBasedCache(LOCATION=tempfile.mkdtemp(), OPTIONS={})\n        self.assertFalse(cache.has_key('nonexistent_key'))\n\n    def test_cull(self):\n        cache = FileBasedCache(LOCATION=tempfile.mkdtemp(), OPTIONS={'MAX_ENTRIES': 10, 'CULL_FREQUENCY': 2})\n        for i in range(20):\n            cache.set(f'key_{i}', i)\n        self.assertEqual(len(cache._list_cache_files()), 10)\n\n    def test_clear(self):\n        cache = FileBasedCache(LOCATION=tempfile.mkdtemp(), OPTIONS={})\n        cache.set('test_key', 'test_value')\n        cache.clear()\n        self.assertEqual(len(cache._list_cache_files()), 0)\n\n    def test_key_to_file(self):\n        cache = FileBasedCache(LOCATION=tempfile.mkdtemp(), OPTIONS={})\n        key = 'test_key'\n        expected_file_path = os.path.join(cache._dir, md5(key.encode(), usedforsecurity=False).hexdigest() + '.djcache')\n        self.assertEqual(cache._key_to_file(key), expected_file_path)\n\n    def test_get_backend_timeout(self):\n        cache = FileBasedCache(LOCATION=tempfile.mkdtemp(), OPTIONS={})\n        timeout = 300\n        self.assertEqual(cache.get_backend_timeout(timeout), timeout)\n\n    @mock.patch('os.makedirs')\n    def test_createdir(self, mock_makedirs):\n        cache = FileBasedCache(LOCATION=tempfile.mkdtemp(), OPTIONS={})\n        cache._createdir()\n        mock_makedirs.assert_called_once_with(cache._dir, 0o700, exist_ok=True)\n\n    def test_is_expired(self):\n        cache = FileBasedCache(LOCATION=tempfile.mkdtemp(), OPTIONS={})\n        with tempfile.NamedTemporaryFile(mode='w+b', delete=False) as f:\n            f.write(pickle.dumps(0))  # Expired\n            f.seek(0)\n            self.assertTrue(cache._is_expired(f))\n            f.close()\n            # Modify the file to test a non-expired cache entry\n            with open(f.name, 'w+b') as f:\n                f.write(pickle.dumps(time.time() + 100))\n                f.seek(0)\n                self.assertFalse(cache._is_expired(f))\n\n\n\n"], "sample_51": ["\nimport os\nimport tempfile\nimport shutil\n\nfrom unittest import mock\n\nfrom django.conf import settings\nfrom django.core.management import call_command\nfrom django.template import engines\nfrom django.template.backends.django import DjangoTemplates\nfrom django.test import TestCase\nfrom django.utils._os import to_path\nfrom django.utils.autoreload import autoreload_started\n\nfrom django.template import autoreload\n\nclass AutoreloadTests(TestCase):\n    def setUp(self):\n        # Create a temporary directory for tests\n        self.temp_dir = tempfile.mkdtemp()\n        settings.TEMPLATES = [\n            {\n                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                'DIRS': [self.temp_dir],\n                'APP_DIRS': True,\n                'OPTIONS': {\n                    'context_processors': [\n                        'django.template.context_processors.debug',\n                        'django.template.context_processors.request',\n                        'django.contrib.auth.context_processors.auth',\n                        'django.contrib.messages.context_processors.messages',\n                    ],\n                },\n            },\n        ]\n\n    def tearDown(self):\n        shutil.rmtree(self.temp_dir)\n\n    def test_get_template_directories(self):\n        # Create a mock template loader with a get_dirs method\n        class MockLoader:\n            def get_dirs(self):\n                return ['mock_dir1', 'mock_dir2']\n\n        # Add the mock loader to a mock DjangoTemplates engine\n        mock_engine = mock.MagicMock(spec=DjangoTemplates)\n        mock_engine.template_loaders = [MockLoader()]\n\n        # Create a mock template backend using the mock engine\n        mock_backend = mock.MagicMock(spec=engines.Engine)\n        mock_backend.engine = mock_engine\n\n        # Add the mock backend to the engines.all() list\n        engines.all = mock.MagicMock(return_value=[mock_backend])\n\n        # Call get_template_directories and assert the expected directories\n        directories = autoreload.get_template_directories()\n        expected_directories = {Path(self.temp_dir) / 'mock_dir1', Path(self.temp_dir) / 'mock_dir2'}\n        self.assertEqual(directories, expected_directories)\n\n    def test_reset_loaders(self):\n        # Create a mock template loader with a reset method\n        class MockLoader:\n            def reset(self):\n                pass\n\n        # Add the mock loader to a mock DjangoTemplates engine\n        mock_engine = mock.MagicMock(spec=DjangoTemplates)\n        mock_engine.template_loaders = [MockLoader()]\n\n        # Create a mock template backend using the mock engine\n        mock_backend = mock.MagicMock(spec=engines.Engine)\n        mock_backend.engine = mock_engine\n\n        # Add the mock backend to the engines.all() list\n        engines.all = mock.MagicMock(return_value=[mock_backend])\n\n        # Call reset_loaders to ensure the reset method is called\n        autoreload.reset_loaders()\n        mock_loader.reset.assert_called_once()\n\n    def test_watch_for_template_changes(self):\n        # Mock the autoreload_started signal\n        with mock.patch('django.utils.autoreload.autoreload_started') as mock_signal:\n            # Create a mock sender for the signal\n            mock_sender = mock.Mock()\n            mock_signal.send.return_value = None\n\n            # Call watch_for_template_changes\n            autoreload.watch_for_template_changes(mock_sender)\n\n            # Assert that the watch_dir method is called for each template directory\n            mock_sender.watch_dir.assert_has_calls([\n                mock.call(Path(self.temp_dir), '**/*'),\n            ])\n\n    def test_template_changed(self):\n        # Mock the file changed signal\n        with mock.patch('django.utils.autoreload.file_changed') as mock_signal:\n            # Create a mock sender for the signal\n            mock_sender = mock.Mock()\n            mock_signal.send.return_value = None\n\n            # Create a file path within the template directory (self.temp_dir)\n            file_path = Path(self.temp_dir) / 'test_template.html'\n            file_path.parent.mkdir(parents=True, exist_ok=True)\n            file_path.touch()\n\n            # Call template_changed\n            result = autoreload.template_changed(mock_sender, str(file_path))\n\n            # Assert that reset_loaders is called and the function returns True\n            autoreload.reset_loaders.assert_called_once()\n            self.assertTrue(result)\n\n    def test_template_changed_with_python_file(self):\n        # Mock the file changed signal\n        with mock.patch('django.utils.autoreload.file_changed') as mock_signal:\n            # Create a mock sender for the signal\n            mock_sender = mock.Mock()\n            mock_signal.send.return_value = None\n\n            # Create a file path within the project directory (not within self.temp_dir) with .py extension\n            file_path = Path(os.getcwd()) / 'test_script.py'\n            file_path.parent.mkdir(parents=True, exist_ok=True)\n            file_path.touch()\n\n            # Call template_changed\n            result = autoreload.template_changed(mock_sender, str(file_path))\n\n            # Assert that reset_loaders is not called and the function returns False\n            autoreload.reset_loaders.assert_not_called()\n            self.assertFalse(result)\n"], "sample_102": ["\nimport unittest\nfrom sklearn.neighbors.nca import NeighborhoodComponentsAnalysis\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.exceptions import ConvergenceWarning\nimport numpy as np\nfrom scipy.optimize import minimize\n\nclass TestNeighborhoodComponentsAnalysis(unittest.TestCase):\n    def test_init(self):\n        nca = NeighborhoodComponentsAnalysis()\n        self.assertEqual(nca.n_components, None)\n        self.assertEqual(nca.init, 'auto')\n        self.assertFalse(nca.warm_start)\n        self.assertEqual(nca.max_iter, 50)\n        self.assertEqual(nca.tol, 1e-5)\n        self.assertIsNone(nca.callback)\n        self.assertEqual(nca.verbose, 0)\n        self.assertIsNone(nca.random_state)\n\n    def test_fit_transform_simple(self):\n        X, y = load_iris(return_X_y=True)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                        stratify=y, test_size=0.7,\n                                                        random_state=42)\n        nca = NeighborhoodComponentsAnalysis(random_state=42)\n        X_transformed = nca.fit_transform(X_train, y_train)\n        self.assertEqual(X_transformed.shape[0], X_train.shape[0])\n        self.assertEqual(X_transformed.shape[1], nca.n_components)\n\n    def test_transform_before_fit(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis()\n        with self.assertRaises(ValueError):\n            nca.transform(X)\n\n    def test_n_components_too_large(self):\n        X, y = load_iris(return_X_y=True)\n        with self.assertRaises(ValueError):\n            nca = NeighborhoodComponentsAnalysis(n_components=X.shape[1] + 1)\n            nca.fit(X, y)\n\n    def test_warm_start(self):\n        X, y = load_iris(return_X_y=True)\n        nca = NeighborhoodComponentsAnalysis(n_components=2, warm_start=True)\n        nca.fit(X[:100], y[:100])\n        nca.fit(X, y)\n\n    def test_callback(self):\n        X, y = load_iris(return_X_y=True)\n        callback_called = False\n\n        def callback(transformation, n_iter):\n            nonlocal callback_called\n            callback_called = True\n\n        nca = NeighborhoodComponentsAnalysis(callback=callback)\n        nca.fit(X, y)\n\n        self.assertTrue(callback_called)\n\n    def test_loss_grad_lbfgs(self):\n        n_components = 3\n        n_samples = 5\n        n_features = 4\n        X = np.random.rand(n_samples, n_features)\n        same_class_mask = np.random.randint(2, size=(n_samples, n_samples))\n        transformation = np.random.rand(n_components, n_features)\n        nca = NeighborhoodComponentsAnalysis()\n\n        loss, grad = nca._loss_grad_lbfgs(transformation.ravel(), X,\n                                          same_class_mask)\n\n        # Ensure the loss and gradient have expected shapes\n        self.assertIsInstance(loss, float) \n        self.assertEqual(grad.shape, (n_components * n_features,))\n\n    def test_init_options(self):\n        X, y = load_iris(return_X_y=True)\n        # Test 'pca', 'lda', 'identity', 'random', and 'auto'\n\n        nca = NeighborhoodComponentsAnalysis(init='pca')\n        nca.fit(X, y)\n\n        nca = NeighborhoodComponentsAnalysis(init='lda')\n        nca.fit(X, y)\n\n        nca = NeighborhoodComponentsAnalysis(init='identity')\n        nca.fit(X, y)\n\n        nca = NeighborhoodComponentsAnalysis(init='random')\n        nca.fit(X, y)\n\n        nca = NeighborhoodComponentsAnalysis(init='auto')\n        nca.fit(X, y)\n\n        with self.assertRaises(ValueError):\n            nca = NeighborhoodComponentsAnalysis(init='invalid')\n            nca.fit(X, y)\n\n        # Test numpy array initialization\n        transformation = np.random.rand(2, X.shape[1]) \n        nca = NeighborhoodComponentsAnalysis(init=transformation)\n        nca.fit(X, y)\n\n        with self.assertRaises(ValueError):\n            # Wrong shape for numpy array init\n            transformation = np.random.rand(3, X.shape[1] - 1)\n            nca = NeighborhoodComponentsAnalysis(init=transformation)\n            nca.fit(X, y)\n\n    def test_convergence_warning(self):\n        X, y = load_iris(return_X_y=True)\n\n        # Force convergence failure by setting max_iter to a very low value\n        nca = NeighborhoodComponentsAnalysis(max_iter=1)\n\n        with self.assertLogs('sklearn.neighbors.nca', level='WARNING') as cm:\n            nca.fit(X, y)\n\n        self.assertIn('NCA did not converge', cm.output[0])\n\n\n\n"], "sample_60": ["\nfrom django.db import models\nfrom django.db.models import F\nfrom django.db.models.query import (\n    BaseIterable,\n    Prefetch,\n    RawModelIterable,\n    RawQuerySet,\n    RelatedPopulator,\n    prefetch_related_objects,\n)\nfrom django.test import TestCase\nfrom django.test.utils import isolate_Signals\n\nclass QuerySetTests(TestCase):\n  \n\n    def test_prefetch_related_objects_empty(self):\n        prefetch_related_objects([], 'foo')\n\n    def test_prefetch_related_objects_single(self):\n\n        class MyModel(models.Model):\n            pass\n\n        model = MyModel()\n        prefetch_related_objects([model], 'foo')\n\n    def test_prefetch_related_objects_list(self):\n\n        class MyModel(models.Model):\n            pass\n\n        models = [MyModel() for _ in range(3)]\n        prefetch_related_objects(models, 'foo')\n\n    def test_prefetch_related_objects_nested(self):\n        class A(models.Model):\n            pass\n\n        class B(models.Model):\n            a = models.ForeignKey(A, on_delete=models.CASCADE)\n\n        a = A()\n        b = B(a=a)\n        prefetch_related_objects([b], 'a__foo')\n\n\n\n    def test_related_populator(self):\n        class A(models.Model):\n            pass\n\n        class B(models.Model):\n            a = models.ForeignKey(A, on_delete=models.CASCADE)\n\n        a = A()\n        b = B(a=a)\n\n        # Mocking related populators.\n        class MockRelatedPopulator:\n            def populate(self, row, from_obj):\n                pass\n\n        related_populators = [MockRelatedPopulator()]\n        populator = RelatedPopulator({'model': B, 'local_setter': None, 'remote_setter': None}, None, None)\n        populator.related_populators = related_populators\n        populator.populate(['data'], a)\n\n    def test_rawqueryset_iterator(self):\n        class MyModel(models.Model):\n            pass\n        qs = MyModel.objects.raw('SELECT * FROM my_model')\n        it = qs.iterator()\n        next(it)\n        qs._result_cache = [object()]\n        next(it)\n"], "sample_59": ["\nimport unittest\n\nfrom django.contrib.auth.forms import (\n    AdminPasswordChangeForm,\n    AuthenticationForm,\n    PasswordChangeForm,\n    PasswordResetForm,\n    ReadOnlyPasswordHashField,\n    ReadOnlyPasswordHashWidget,\n    SetPasswordForm,\n    UserChangeForm,\n    UserCreationForm,\n)\nfrom django.forms import forms\nfrom django.forms.fields import CharField, Field, IntegerField\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.hashers import make_password\nfrom django.core.exceptions import ValidationError\nfrom django.test import TestCase\n\nfrom unittest.mock import patch\n\nclass UserCreationFormTest(TestCase):\n    def test_password_mismatch(self):\n        form_data = {'username': 'testuser', 'password1': 'password', 'password2': 'different'}\n        form = UserCreationForm(data=form_data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['password2'], [\n            'The two password fields didn\u2019t match.'\n        ])\n    \n    def test_valid_password(self):\n        form_data = {'username': 'testuser', 'password1': 'password', 'password2': 'password'}\n        form = UserCreationForm(data=form_data)\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertTrue(user.check_password('password'))\n\nclass UserChangeFormTest(TestCase):\n    def test_password_field(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        form = UserChangeForm(instance=user)\n        self.assertTrue(isinstance(form.fields['password'], ReadOnlyPasswordHashField))\n    \nclass AuthenticationFormTest(TestCase):\n    def test_valid_login(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        form_data = {'username': 'testuser', 'password': 'password'}\n        form = AuthenticationForm(data=form_data)\n        user_cache = form.get_user()\n\n        self.assertEqual(user_cache, user)\n\n    def test_invalid_login(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        form_data = {'username': 'wronguser', 'password': 'password'}\n\n        form = AuthenticationForm(data=form_data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors, {'username': ['Please enter a correct testuser and password. Note that both fields may be case-sensitive.']})\n\n    \nclass PasswordResetFormTest(TestCase):\n    def test_get_users(self):\n        user = User.objects.create_user(email='test@example.com', username='testuser', password='password')\n        \n        with patch('django.contrib.auth.forms.PasswordResetForm.get_users') as mock_get_users:\n            mock_get_users.return_value = [user]\n            form = PasswordResetForm({'email': 'test@example.com'})\n\n            self.assertEqual(form.get_users('test@example.com'), [user])\n    \n\nclass SetPasswordFormTest(TestCase):\n    def test_password_mismatch(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        form = SetPasswordForm(user, {'new_password1': 'password', 'new_password2': 'different'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['new_password2'], [\n            'The two password fields didn\u2019t match.'\n        ])\n\n    def test_valid_passwords(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        form = SetPasswordForm(user, {'new_password1': 'newpassword', 'new_password2': 'newpassword'})\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertTrue(user.check_password('newpassword'))\n\nclass PasswordChangeFormTest(TestCase):\n    def test_invalid_old_password(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        form = PasswordChangeForm(user, {'old_password': 'wrongpassword', 'new_password1': 'newpassword', 'new_password2': 'newpassword'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['old_password'], [\n            'Your old password was entered incorrectly. Please enter it again.'\n        ])\n    \n    def test_valid_password_change(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        form = PasswordChangeForm(user, {'old_password': 'password', 'new_password1': 'newpassword', 'new_password2': 'newpassword'})\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertTrue(user.check_password('newpassword'))\n\nclass AdminPasswordChangeFormTest(TestCase):\n    def test_password_mismatch(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        form = AdminPasswordChangeForm(user, {'password1': 'password', 'password2': 'different'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['password2'], [\n            'The two password fields didn\u2019t match.'\n        ])\n    \n    def test_valid_password_change(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        form = AdminPasswordChangeForm(user, {'password1': 'newpassword', 'password2': 'newpassword'}) \n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertTrue(user.check_password('newpassword'))\n\n\n\n"], "sample_89": ["\nfrom _pytest.skipping import evaluate_skip_marks\nfrom _pytest.skipping import evaluate_xfail_marks\nfrom _pytest.skipping import pytest_runtest_setup\nfrom _pytest.skipping import pytest_runtest_call\nfrom _pytest.skipping import pytest_report_teststatus\nfrom _pytest.skipping import pytest_runtest_makereport\nfrom _pytest.compat import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    from typing import Type\n\nimport pytest\nfrom _pytest.nodes import Item\nfrom _pytest.config import Config\nfrom _pytest.outcomes import Skip\nfrom _pytest.outcomes import xfail\nfrom _pytest.outcomes import Fail\n\ndef test_evaluate_skip_marks_unconditional():\n    item = Item.from_parent(None, name=\"test_func\")\n    item._store = {}\n    mark = pytest.mark.skip(\"reason\")\n    item.iter_markers = lambda name: [mark] if name == \"skip\" else []\n    skip_result = evaluate_skip_marks(item)\n    assert skip_result.reason == \"reason\"\n\ndef test_evaluate_skip_marks_skipif_unconditional():\n    item = Item.from_parent(None, name=\"test_func\")\n    item._store = {}\n    mark = pytest.mark.skipif(True, reason=\"reason\")\n    item.iter_markers = lambda name: [mark] if name == \"skipif\" else []\n    skip_result = evaluate_skip_marks(item)\n    assert skip_result.reason == \"reason\"\n\ndef test_evaluate_skip_marks_skipif_conditional_true():\n    item = Item.from_parent(None, name=\"test_func\")\n    item._store = {}\n    mark = pytest.mark.skipif(True, reason=\"reason\")\n    item.iter_markers = lambda name: [mark] if name == \"skipif\" else []\n    skip_result = evaluate_skip_marks(item)\n    assert skip_result.reason == \"reason\"\n\ndef test_evaluate_skip_marks_skipif_conditional_false():\n    item = Item.from_parent(None, name=\"test_func\")\n    item._store = {}\n    mark = pytest.mark.skipif(False, reason=\"reason\")\n    item.iter_markers = lambda name: [mark] if name == \"skipif\" else []\n\n    skip_result = evaluate_skip_marks(item)\n    assert skip_result is None\n\ndef test_evaluate_skip_marks_multiple_skipif():\n    item = Item.from_parent(None, name=\"test_func\")\n    item._store = {}\n    mark1 = pytest.mark.skipif(False, reason=\"reason1\")\n    mark2 = pytest.mark.skipif(True, reason=\"reason2\")\n\n    item.iter_markers = lambda name: [mark1, mark2] if name == \"skipif\" else []\n    skip_result = evaluate_skip_marks(item)\n    assert skip_result.reason == \"reason2\"\n\ndef test_evaluate_xfail_marks_unconditional():\n    item = Item.from_parent(None, name=\"test_func\")\n    item._store = {}\n    mark = pytest.mark.xfail(\"reason\")\n    item.iter_markers = lambda name: [mark] if name == \"xfail\" else []\n\n    xfail_result = evaluate_xfail_marks(item)\n    assert xfail_result.reason == \"reason\"\n    assert xfail_result.run == True\n    assert xfail_result.strict == False\n    assert xfail_result.raises is None\n\ndef test_evaluate_xfail_marks_xfail_conditional_true():\n    item = Item.from_parent(None, name=\"test_func\")\n    item._store = {}\n    mark = pytest.mark.xfail(True, reason=\"reason\")\n    item.iter_markers = lambda name: [mark] if name == \"xfail\" else []\n    xfail_result = evaluate_xfail_marks(item)\n    assert xfail_result.reason == \"reason\"\n    assert xfail_result.run == True\n    assert xfail_result.strict == False\n    assert xfail_result.raises is None\n\ndef test_evaluate_xfail_marks_xfail_conditional_false():\n    item = Item.from_parent(None, name=\"test_func\")\n    item._store = {}\n    mark = pytest.mark.xfail(False, reason=\"reason\")\n    item.iter_markers = lambda name: [mark] if name == \"xfail\" else []\n    xfail_result = evaluate_xfail_marks(item)\n    assert xfail_result is None\n\ndef test_evaluate_xfail_marks_multiple_xfail():\n    item = Item.from_parent(None, name=\"test_func\")\n    item._store = {}\n    mark1 = pytest.mark.xfail(False, reason=\"reason1\")\n    mark2 = pytest.mark.xfail(True, reason=\"reason2\")\n    item.iter_markers = lambda name: [mark1, mark2] if name == \"xfail\" else []\n    xfail_result = evaluate_xfail_marks(item)\n    assert xfail_result.reason == \"reason2\"\n    assert xfail_result.run == True\n    assert xfail_result.strict == False\n    assert xfail_result.raises is None\n\ndef test_evaluate_xfail_marks_raises():\n    item = Item.from_parent(None, name=\"test_func\")\n    item._store = {}\n    mark = pytest.mark.xfail(raises=(ValueError,), reason=\"reason\")\n    item.iter_markers = lambda name: [mark] if name == \"xfail\" else []\n    xfail_result = evaluate_xfail_marks(item)\n    assert xfail_result.reason == \"reason\"\n    assert xfail_result.run == True\n    assert xfail_result.strict == False\n    assert xfail_result.raises == (ValueError,)\n\n\n\ndef test_pytest_runtest_setup_skip(monkeypatch):\n    item = Item.from_parent(None, name=\"test_func\")\n    item._store = {}\n\n    def fake_mark(name):\n        if name == \"skipif\":\n            return [pytest.mark.skipif(True, reason=\"reason\")]\n        return []\n\n    item.iter_markers = fake_mark\n    monkeypatch.setattr(item, \"config\", Config())\n\n    pytest_runtest_setup(item)\n    assert item._store[skipped_by_mark_key] == True\n\ndef test_pytest_runtest_setup_xfail(monkeypatch):\n    item = Item.from_parent(None, name=\"test_func\")\n    item._store = {}\n\n    def fake_mark(name):\n        if name == \"xfail\":\n            return [pytest.mark.xfail(True, reason=\"reason\")]\n        return []\n\n    item.iter_markers = fake_mark\n    monkeypatch.setattr(item, \"config\", Config())\n\n    pytest_runtest_setup(item)\n    assert item._store[xfailed_key].reason == \"reason\"\n\ndef test_pytest_runtest_call_xfail_not_run(monkeypatch, mocker):\n\n    item = Item.from_parent(None, name=\"test_func\")\n    item._store = {}\n    call = mocker.Mock()\n    call.excinfo = None\n    item.config = mocker.Mock()\n    item.config.option = mocker.Mock()\n    item.config.option.runxfail = False\n\n    def fake_mark(name):\n        if name == \"xfail\":\n            return [pytest.mark.xfail(\n                True, run=False, reason=\"reason\")]\n        return []\n\n    item.iter_markers = fake_mark\n    with pytest.raises(xfail.Exception) as excinfo:\n        pytest_runtest_call(item)\n\n    assert excinfo.value.msg == \"[NOTRUN] reason\"\n\ndef test_pytest_report_teststatus_passed(monkeypatch):\n    report = mocker.Mock()\n    report.passed = True\n    report.wasxfail = \"reason\"\n\n    status = pytest_report_teststatus(report)\n    assert status == (\"xpassed\", \"X\", \"XPASS\")\n\ndef test_pytest_report_teststatus_skipped(monkeypatch):\n    report = mocker.Mock()\n    report.skipped = True\n    report.wasxfail = \"reason\"\n\n    status = pytest_report_teststatus(report)\n    assert status == (\"xfailed\", \"x\", \"XFAIL\")\n\ndef test_pytest_runtest_makereport_unexpectedsuccess(monkeypatch, mocker):\n\n    item = Item.from_parent(None, name=\"test_func\")\n    call = mocker.Mock()\n    call.excinfo = None\n    call_info = mocker.Mock(return_value=call)\n    item._store = {}\n    item._store[unexpectedsuccess_key] = \"reason\"\n    report = mocker.Mock()\n    report.when = \"call\"\n    report.outcome = \"passed\"\n\n    pytest_runtest_makereport(item, call_info)\n\n    assert report.outcome == \"failed\"\n    assert report.longrepr == \"Unexpected success: reason\"\n"], "sample_142": ["\nfrom sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt, atan, atan2, nan, Symbol, re, im, sign, arg, MatrixSymbol, MatrixElement, ZeroMatrix)\nfrom sympy.assumptions.refine import refine, handlers_dict\nfrom sympy.core.logic import fuzzy_not\n\ndef test_refine_abs():\n    x = Symbol('x', real=True)\n    y = Symbol('y', real=True)\n\n    assert refine(Abs(x), Q.real(x)) == x\n    assert refine(Abs(x), Q.positive(x)) == x\n    assert refine(Abs(x), Q.negative(x)) == -x\n    assert refine(Abs(Abs(x)), Q.real(x)) == x\n    assert refine(Abs(x*y), Q.positive(x)&Q.positive(y)) == x*y\n    assert refine(Abs(x*y), Q.negative(x)&Q.positive(y)) == -x*y\n\ndef test_refine_Pow():\n    x = Symbol('x', real=True)\n    y = Symbol('y')\n\n    assert refine((-1)**x, Q.real(x)) is None\n    assert refine((-1)**x, Q.even(x)) == 1\n    assert refine((-1)**x, Q.odd(x)) == -1\n    assert refine((-1)**(x+y), Q.even(x)) == (-1)**y\n    assert refine((-1)**(x+y+2), Q.odd(x)) == (-1)**(y + 1)\n    assert refine((-1)**(x+3), True) == (-1)**(x + 1)\n\ndef test_refine_atan2():\n    x = Symbol('x', real=True)\n    y = Symbol('y', real=True)\n\n    assert refine(atan2(y,x), Q.real(y) & Q.positive(x)) == atan(y/x)\n    assert refine(atan2(y,x), Q.negative(y) & Q.negative(x)) == atan(y/x) - pi\n    assert refine(atan2(y,x), Q.positive(y) & Q.negative(x)) == atan(y/x) + pi\n    assert refine(atan2(y,x), Q.zero(y) & Q.negative(x)) == pi\n    assert refine(atan2(y,x), Q.positive(y) & Q.zero(x)) == pi/2\n    assert refine(atan2(y,x), Q.negative(y) & Q.zero(x)) == -pi/2\n    assert refine(atan2(y,x), Q.zero(y) & Q.zero(x)) == nan\n\ndef test_refine_re():\n    x = Symbol('x')\n\n    assert refine(re(x), Q.real(x)) == x\n    assert refine(re(x), Q.imaginary(x)) == 0\n\ndef test_refine_im():\n    x = Symbol('x')\n\n    assert refine(im(x), Q.real(x)) == 0\n    assert refine(im(x), Q.imaginary(x)) == -I*x\n\ndef test_refine_arg():\n    x = Symbol('x', real=True)\n\n    assert refine(arg(x), Q.positive(x)) == 0\n    assert refine(arg(x), Q.negative(x)) == pi\n\ndef test_refine_sign():\n    x = Symbol('x', real=True)\n    y = Symbol('y', imaginary = True)\n\n    assert refine(sign(x), Q.positive(x) & Q.nonzero(x)) == 1\n    assert refine(sign(x), Q.negative(x) & Q.nonzero(x)) == -1\n    assert refine(sign(x), Q.zero(x)) == 0\n    assert refine(sign(y), Q.positive(im(y))) == I\n    assert refine(sign(y), Q.negative(im(y))) == -I\n\ndef test_refine_matrixelement():\n    X = MatrixSymbol('X', 3, 3)\n\n    assert refine(X[0, 1], Q.symmetric(X)) == X[0, 1]\n    assert refine(X[1, 0], Q.symmetric(X)) == X[0, 1]\n\n"], "sample_16": ["\nfrom django.core.exceptions import (\n    FieldDoesNotExist,\n    AppRegistryNotReady,\n    ObjectDoesNotExist,\n    MultipleObjectsReturned,\n    SuspiciousOperation,\n    SuspiciousMultipartForm,\n    SuspiciousFileOperation,\n    DisallowedHost,\n    DisallowedRedirect,\n    TooManyFieldsSent,\n    RequestDataTooBig,\n    RequestAborted,\n    PermissionDenied,\n    ViewDoesNotExist,\n    MiddlewareNotUsed,\n    ImproperlyConfigured,\n    FieldError,\n    ValidationError,\n    EmptyResultSet,\n    SynchronousOnlyOperation,\n)\n\ndef test_field_does_not_exist():\n    try:\n        raise FieldDoesNotExist()\n    except FieldDoesNotExist as e:\n        assert str(e) == \"The requested model field does not exist\"\n\ndef test_app_registry_not_ready():\n    try:\n        raise AppRegistryNotReady()\n    except AppRegistryNotReady as e:\n        assert str(e) == \"The django.apps registry is not populated yet\"\n\ndef test_object_does_not_exist():\n    try:\n        raise ObjectDoesNotExist()\n    except ObjectDoesNotExist as e:\n        assert str(e) == \"The requested object does not exist\"\n\ndef test_multiple_objects_returned():\n    try:\n        raise MultipleObjectsReturned()\n    except MultipleObjectsReturned as e:\n        assert str(e) == \"The query returned multiple objects when only one was expected.\"\n\ndef test_suspicious_operation():\n    try:\n        raise SuspiciousOperation(\"Some SuspiciousOperation\")\n    except SuspiciousOperation as e:\n        assert str(e) == \"Some SuspiciousOperation\"\n\ndef test_suspicious_multipart_form():\n    try:\n        raise SuspiciousMultipartForm(\"Some SuspiciousMultipartForm\")\n    except SuspiciousMultipartForm as e:\n        assert str(e) == \"Some SuspiciousMultipartForm\"\n\ndef test_suspicious_file_operation():\n    try:\n        raise SuspiciousFileOperation(\"Some SuspiciousFileOperation\")\n    except SuspiciousFileOperation as e:\n        assert str(e) == \"Some SuspiciousFileOperation\"\n\ndef test_disallowed_host():\n    try:\n        raise DisallowedHost(\"Some DisallowedHost\")\n    except DisallowedHost as e:\n        assert str(e) == \"Some DisallowedHost\"\n\ndef test_disallowed_redirect():\n    try:\n        raise DisallowedRedirect(\"Some DisallowedRedirect\")\n    except DisallowedRedirect as e:\n        assert str(e) == \"Some DisallowedRedirect\"\n\ndef test_too_many_fields_sent():\n    try:\n        raise TooManyFieldsSent(\"Some TooManyFieldsSent\")\n    except TooManyFieldsSent as e:\n        assert str(e) == \"Some TooManyFieldsSent\"\n\ndef test_request_data_too_big():\n    try:\n        raise RequestDataTooBig(\"Some RequestDataTooBig\")\n    except RequestDataTooBig as e:\n        assert str(e) == \"Some RequestDataTooBig\"\n\ndef test_request_aborted():\n    try:\n        raise RequestAborted(\"Some RequestAborted\")\n    except RequestAborted as e:\n        assert str(e) == \"Some RequestAborted\"\n\ndef test_permission_denied():\n    try:\n        raise PermissionDenied(\"Some PermissionDenied\")\n    except PermissionDenied as e:\n        assert str(e) == \"Some PermissionDenied\"\n\ndef test_view_does_not_exist():\n    try:\n        raise ViewDoesNotExist(\"Some ViewDoesNotExist\")\n    except ViewDoesNotExist as e:\n        assert str(e) == \"Some ViewDoesNotExist\"\n\ndef test_middleware_not_used():\n    try:\n        raise MiddlewareNotUsed(\"Some MiddlewareNotUsed\")\n    except MiddlewareNotUsed as e:\n        assert str(e) == \"Some MiddlewareNotUsed\"\n\ndef test_improperly_configured():\n    try:\n        raise ImproperlyConfigured(\"Some ImproperlyConfigured\")\n    except ImproperlyConfigured as e:\n        assert str(e) == \"Some ImproperlyConfigured\"\n\ndef test_field_error():\n    try:\n        raise FieldError(\"Some FieldError\")\n    except FieldError as e:\n        assert str(e) == \"Some FieldError\"\n\ndef test_validation_error_message():\n    try:\n        raise ValidationError(\"Some ValidationError\")\n    except ValidationError as e:\n        assert str(e) == \"Some ValidationError\"\n\ndef test_validation_error_list():\n    try:\n        raise ValidationError([\"Error1\", \"Error2\"])\n    except ValidationError as e:\n        assert list(e) == [\"Error1\", \"Error2\"]\n\ndef test_validation_error_dict():\n    try:\n        raise ValidationError({\"field1\": [\"Error1\"], \"field2\": [\"Error2\"]})\n    except ValidationError as e:\n        assert dict(e) == {\"field1\": [\"Error1\"], \"field2\": [\"Error2\"]}\n\ndef test_empty_result_set():\n    try:\n        raise EmptyResultSet(\"Some EmptyResultSet\")\n    except EmptyResultSet as e:\n        assert str(e) == \"Some EmptyResultSet\"\n\ndef test_synchronous_only_operation():\n    try:\n        raise SynchronousOnlyOperation(\"Some SynchronousOnlyOperation\")\n    except SynchronousOnlyOperation as e:\n        assert str(e) == \"Some SynchronousOnlyOperation\"\n\n"], "sample_128": ["\nfrom sympy import (Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr)\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt, integer_log\nfrom sympy.core.numbers import (igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse)\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom sympy import pi\nfrom mpmath.libmp.libmpf import fnan\nfrom sympy import Pi\n\nimport mpmath\n\ndef test_sympify_fractions():\n    assert sympify(fractions.Fraction(3, 4)) == Rational(3, 4)\n\ndef test_sympify_mpz():\n    assert sympify(gmpy2.mpz(123)) == Integer(123)\n\ndef test_sympify_mpq():\n    assert sympify(gmpy2.mpq(1, 4)) == Rational(1, 4)\n\ndef test_sympify_mpmath():\n    assert sympify(mpmath.mpf(1.5)) == Float(\"1.5\")\n    assert sympify(mpmath.mpc(1, 2)) == 1 + 2*S.ImaginaryUnit\n\ndef test_complex():\n    assert sympify(complex(1, 2)) == 1 + 2*S.ImaginaryUnit\n    assert sympify(complex(2, 0)) == 2\n\ndef test_integers():\n    assert sympify(0) == S.Zero\n    assert sympify(1) == S.One\n    assert sympify(-1) == S.NegativeOne\n    assert sympify(10) == Integer(10)\n\ndef test_rationals():\n    assert sympify(1/2) == Rational(1, 2)\n\ndef test_real_numbers():\n    assert sympify(1.5) == Float(\"1.5\")\n\ndef test_infinity():\n    assert sympify(float('inf')) == oo\n\ndef test_negative_infinity():\n    assert sympify(float('-inf')) == -oo\n\ndef test_NaN():\n    assert math.isnan(sympify(float('nan'))) == True\n\ndef test_pi():\n    assert sympify('pi') == pi\n    assert sympify(pi) == pi\n\ndef test_e():\n    assert sympify('e') == E\n    assert sympify(E) == E\n\ndef test_imaginary_unit():\n    assert sympify('I') == I\n\ndef test_golden_ratio():\n    assert sympify('GoldenRatio') == GoldenRatio\n\ndef test_euler_gamma():\n    assert sympify('EulerGamma') == EulerGamma\n\ndef test_catalan():\n    assert sympify('Catalan') == Catalan\n\ndef test_factorial():\n    assert sympify('factorial(5)') == factorial(5)\n\ndef test_sqrt():\n    assert sympify('sqrt(4)') == 2\n\ndef test_fibonacci():\n    assert sympify('fibonacci(5)') == fibonacci(5)\n\ndef test_sin():\n    assert sympify('sin(pi/2)') == 1\n\ndef test_cos():\n    assert sympify('cos(0)') == 1\n\ndef test_exp():\n    assert sympify('exp(1)') == E\n\ndef test_log():\n    assert sympify('log(10)') == log(10)\n\ndef test_latex():\n    assert latex(pi) == r\"\\pi\"\n    assert latex(E) == r\"e\"\n    assert latex(I) == r\"i\"\n\ndef test_comparison():\n    assert (1 > 0) == True\n    assert (1 < 0) == False\n    assert (1 >= 1) == True\n    assert (1 <= 1) == True\n\ndef test_add():\n    assert (1 + 2) == 3\n\ndef test_mul():\n    assert (2 * 3) == 6\n\ndef test_pow():\n    assert (2 ** 3) == 8\n\n\n"], "sample_137": ["\nimport pytest\nfrom sympy import Add, Mul, Pow, sympify, symbols\nfrom sympy.physics.units import (\n    speed_of_light, meter, gram, second, day,\n    mile, newton, kilogram, atomic_mass_constant,\n    kilometer, centimeter, gravitational_constant, hbar,\n    UnitSystem, convert_to, quantity_simplify, check_dimensions\n)\n\n\ndef test_convert_to_basic():\n    assert convert_to(mile, kilometer) == 25146*kilometer/15625\n    assert convert_to(speed_of_light, meter/second) == 299792458*meter/second\n    assert convert_to(day, second) == 86400*second\n    assert convert_to(3*newton, kilogram*meter/second**2) == 3*kilogram*meter/second**2\n    assert convert_to(atomic_mass_constant, gram).n() == pytest.approx(1.660539060e-24 * gram)\n\ndef test_convert_to_multiple_units():\n    assert convert_to(speed_of_light, [meter, second]) == 299792458*meter/second\n    assert convert_to(3*newton, [centimeter, gram, second]) == 300000*centimeter*gram/second**2\n\ndef test_convert_to_planck_units():\n    assert convert_to(atomic_mass_constant, [gravitational_constant, speed_of_light, hbar]).n() == pytest.approx(7.62963085040767e-20*gravitational_constant**(-0.5)*hbar**0.5*speed_of_light**0.5)\n\ndef test_convert_to_add():\n    expr = kilometer + 2*mile\n    assert convert_to(expr, meter) == 1000*meter + 3218.688*meter\n\ndef test_quantity_simplify_basic():\n    x = symbols('x')\n    assert quantity_simplify(x*kilometer*centimeter) == 100*x*meter**2/3\n    assert quantity_simplify(kilometer - 3*meter) == 1000*meter/3 - 3*meter\n    assert quantity_simplify(2*kilogram + 1000*gram) == 3*kilogram\n\ndef test_quantity_simplify_prefixes():\n    assert quantity_simplify(kilometer) == kilometer\n    assert quantity_simplify(1e3*meter) == kilometer\n\ndef test_check_dimensions_basic():\n    with pytest.raises(ValueError):\n        check_dimensions(meter + 2)\n\n    assert check_dimensions(2*meter) == 2*meter\n    assert check_dimensions(kilometer/second) == kilometer/second\n\ndef test_check_dimensions_add():\n    expr = kilometer + 2*meter\n    with pytest.raises(ValueError):\n        check_dimensions(expr)\n\n    assert check_dimensions(2*meter + 3*kilometer) == 3002*meter\n\ndef test_check_dimensions_mul():\n    expr = 2 * meter * (kilogram/second**2)\n    assert check_dimensions(expr) == 2 * meter * (kilogram/second**2)\n\ndef test_check_dimensions_pow():\n    expr = meter ** 2\n    assert check_dimensions(expr) == meter ** 2\n\n\n\n"], "sample_70": ["\nimport unittest\nfrom matplotlib.legend import Legend, DraggableLegend\nfrom matplotlib.axes import Axes\nfrom matplotlib.figure import Figure\nfrom matplotlib.lines import Line2D\nfrom matplotlib.patches import Patch, Rectangle\nfrom matplotlib.collections import PatchCollection\nfrom matplotlib.text import Text\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nclass TestLegend(unittest.TestCase):\n\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n\n    def test_init(self):\n        legend = Legend(self.ax, loc='upper right')\n\n    def test_legend_handles(self):\n        line1, = self.ax.plot([1,2,3], [4,5,6], label='Line 1')\n        line2, = self.ax.plot([1,2,3], [7,8,9], label='Line 2')\n        legend = self.ax.legend()\n        self.assertEqual(len(legend.legendHandles), 2)\n        self.assertIn(line1, legend.legendHandles)\n        self.assertIn(line2, legend.legendHandles)\n\n    def test_legend_labels(self):\n        line1, = self.ax.plot([1,2,3], [4,5,6], label='Line 1')\n        line2, = self.ax.plot([1,2,3], [7,8,9], label='Line 2')\n        legend = self.ax.legend()\n        self.assertEqual(len(legend.texts), 2)\n        self.assertEqual(legend.texts[0].get_text(), 'Line 1')\n        self.assertEqual(legend.texts[1].get_text(), 'Line 2')\n\n    def test_custom_handler(class self):\n        class MyHandler(object):\n            def legend_artist(self, legend, orig_handle, fontsize, xdescent, ydescent):\n                return plt.Rectangle((0, 0), 1, 1, color='red')\n        class MyArtist(Patch):\n             pass\n        artist = MyArtist()\n        legend = Legend(self.ax, handler_map={MyArtist: MyHandler()})\n        legend._init_legend_box([artist], ['My Label'], markerfirst=True)\n        self.assertIsInstance(legend._legend_box.children[0].children[0],\n                             plt.Rectangle)\n    def test_draggable(self):\n        line1, = self.ax.plot([1,2,3], [4,5,6], label='Line 1')\n        legend = self.ax.legend(draggable=True)\n        self.assertIsInstance(legend._draggable, DraggableLegend)\n    def test_set_title(self):\n        legend = self.ax.legend()\n        legend.set_title('My Title')\n        self.assertEqual(legend._legend_title_box._text.get_text(), 'My Title')\n\n    def test_set_draggable(self):\n        line1, = self.ax.plot([1,2,3], [4,5,6], label='Line 1')\n        legend = self.ax.legend()\n        legend.set_draggable(True)\n        self.assertIsInstance(legend._draggable, DraggableLegend)\n\n    def test_set_frame_on(self):\n        legend = self.ax.legend()\n        legend.set_frame_on(False)\n        self.assertFalse(legend.legendPatch.get_visible())\n\n    def test_get_bbox_to_anchor(self):\n        legend = self.ax.legend()\n        bbox = legend.get_bbox_to_anchor()\n        self.assertEqual(bbox, self.ax.bbox)\n\n    def test_set_bbox_to_anchor(self):\n        legend = self.ax.legend()\n        legend.set_bbox_to_anchor((0.5, 0.5))\n        bbox = legend.get_bbox_to_anchor()\n        self.assertEqual(bbox.x0, 0.5)\n        self.assertEqual(bbox.y0, 0.5)\n\n    def test_get_handles(self):\n        line1, = self.ax.plot([1,2,3], [4,5,6], label='Line 1')\n        line2, = self.ax.plot([1,2,3], [7,8,9], label='Line 2')\n        handles = Legend.get_legend_handles(self.ax)\n        self.assertIn(line1, handles)\n        self.assertIn(line2, handles)\n\n    def test_get_labels(self):\n        line1, = self.ax.plot([1,2,3], [4,5,6], label='Line 1')\n        line2, = self.ax.plot([1,2,3], [7,8,9], label='Line 2')\n        _, labels = Legend.get_legend_handles_labels(self.ax)\n        self.assertEqual(labels, ['Line 1', 'Line 2'])\n\n    def test__parse_legend_args(self):\n        line1, = self.ax.plot([1,2,3], [4,5,6], label='Line 1')\n        line2, = self.ax.plot([1,2,3], [7,8,9], label='Line 2')\n        handles, labels, extra_args, kwargs = Legend._parse_legend_args(\n            [self.ax], ['Line 1', 'Line 2'])\n\n        self.assertEqual(handles, [line1, line2])\n        self.assertEqual(labels, ['Line 1', 'Line 2'])\n\n\n    # add more test cases as needed\n\nif __name__ == \"__main__\":\n   unittest.main()\n"], "sample_129": ["\nimport unittest\nfrom sympy import (Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr)\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt\nfrom sympy.core.numbers import (igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse)\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom sympy import pi\nfrom mpmath.libmp.libmpf import fnan\nfrom sympy import Pi\n\nclass TestNumbers(unittest.TestCase):\n\n    def test_Rational(self):\n        self.assertEqual(Rational(1,2), Rational(1,2))\n        self.assertEqual(Rational(1,2) + Rational(1,2), S.One)\n        self.assertEqual(Rational(1,2) * Rational(1,2), Rational(1,4))\n\n    def test_Integer(self):\n        self.assertEqual(Integer(1) + Integer(2), S.Three)\n        self.assertEqual(Integer(2) * Integer(3), S.Six)\n\n    def test_Float(self):\n        self.assertEqual(Float(1.0) + Float(2.0), Float(3.0))\n        self.assertEqual(Float(2.0) * Float(3.0), Float(6.0))\n\n    def test_I(self):\n        self.assertEqual(I*I, -S.One)\n\n    def test_Infinity(self):\n        self.assertEqual(oo + oo, oo)\n        self.assertEqual(oo - oo, nan)\n\n    def test_NaN(self):\n        self.assertTrue(nan is nan)\n        self.assertFalse(nan == nan)\n\n    def test_Pi(self):\n        self.assertEqual(pi, Pi)\n        self.assertTrue(pi.is_irrational)\n\n    def test_E(self):\n        self.assertEqual(E, exp(S.One))\n\n    def test_GoldenRatio(self):\n        self.assertEqual(GoldenRatio.expand(func=True), S.Half + sqrt(5)/2)\n\n\n\n"], "sample_27": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.conf import settings\nfrom django.http import Http404, HttpResponse, HttpResponseNotFound\nfrom django.template import Context, Engine, TemplateDoesNotExist\nfrom django.template.defaultfilters import pprint\nfrom django.urls import resolve\nfrom django.utils import timezone\nfrom django.utils.datastructures import MultiValueDict\nfrom django.utils.encoding import force_str\nfrom django.utils.module_loading import import_string\nfrom django.utils.regex_helper import _lazy_re_compile\nfrom django.utils.version import get_docs_version\n\n# Minimal Django templates engine to render the error templates\n# regardless of the project's TEMPLATES setting. Templates are\n# read directly from the filesystem so that the error handler\n# works even if the template loader is broken.\nDEBUG_ENGINE = Engine(\n    debug=True,\n    libraries={'i18n': 'django.templatetags.i18n'},\n)\n\nCURRENT_DIR = Path(__file__).parent\n\n\nclass CallableSettingWrapper:\n    \"\"\"\n    Object to wrap callable appearing in settings.\n    * Not to call in the debug page (#21345).\n    * Not to break the debug page if the callable forbidding to set attributes\n      (#23070).\n    \"\"\"\n    def __init__(self, callable_setting):\n        self._wrapped = callable_setting\n\n    def __repr__(self):\n        return repr(self._wrapped)\n\n\ndef technical_500_response(request, exc_type, exc_value, tb, status_code=500):\n    \"\"\"\n    Create a technical server error response. The last three arguments are\n    the values returned from sys.exc_info() and friends.\n    \"\"\"\n    reporter = get_exception_reporter_class(request)(request, exc_type, exc_value, tb)\n    if request.accepts('text/html'):\n        html = reporter.get_traceback_html()\n        return HttpResponse(html, status=status_code, content_type='text/html')\n    else:\n        text = reporter.get_traceback_text()\n        return HttpResponse(text, status=status_code, content_type='text/plain; charset=utf-8')\n\n\n@functools.lru_cache()\ndef get_default_exception_reporter_filter():\n    # Instantiate the default filter for the first time and cache it.\n    return import_string(settings.DEFAULT_EXCEPTION_REPORTER_FILTER)()\n\n\ndef get_exception_reporter_filter(request):\n    default_filter = get_default_exception_reporter_filter()\n    return getattr(request, 'exception_reporter_filter', default_filter)\n\n\ndef get_exception_reporter_class(request):\n    default_exception_reporter_class = import_string(settings.DEFAULT_EXCEPTION_REPORTER)\n    return getattr(request, 'exception_reporter_class', default_exception_reporter_class)\n\n\nclass SafeExceptionReporterFilter:\n    \"\"\"\n    Use annotations made by the sensitive_post_parameters and\n    sensitive_variables decorators to filter out sensitive information.\n    \"\"\"\n    cleansed_substitute = '********************'\n    hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, recursively cleanse the keys in that dictionary.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting('', v) for v in value]\n            elif isinstance(value, tuple):\n                cleansed = tuple([self.cleanse_setting('', v) for v in value])\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n\n    def get_safe_settings(self):\n        \"\"\"\n        Return a dictionary of the settings module with values of sensitive\n        settings replaced with stars (*********).\n        \"\"\"\n        settings_dict = {}\n        for k in dir(settings):\n            if k.isupper():\n                settings_dict[k] = self.cleanse_setting(k, getattr(settings, k))\n        return settings_dict\n\n    def get_safe_request_meta(self, request):\n        \"\"\"\n        Return a dictionary of request.META with sensitive values redacted.\n        \"\"\"\n        if not hasattr(request, 'META'):\n            return {}\n        return {k: self.cleanse_setting(k, v) for k, v in request.META.items()}\n\n    def is_active(self, request):\n        \"\"\"\n        This filter is to add safety in production environments (i.e. DEBUG\n        is False). If DEBUG is True then your site is not safe anyway.\n        This hook is provided as a convenience to easily activate or\n        deactivate the filter on a per request basis.\n        \"\"\"\n        return settings.DEBUG is False\n\n    def get_cleansed_multivaluedict(self, request, multivaluedict):\n        \"\"\"\n        Replace the keys in a MultiValueDict marked as sensitive with stars.\n        This mitigates leaking sensitive POST parameters if something like\n        request.POST['nonexistent_key'] throws an exception (#21098).\n        \"\"\"\n        sensitive_post_parameters = getattr(request, 'sensitive_post_parameters', [])\n        if self.is_active(request) and sensitive_post_parameters:\n            multivaluedict = multivaluedict.copy()\n            for param in sensitive_post_parameters:\n                if param in multivaluedict:\n                    multivaluedict[param] = self.cleansed_substitute\n        return multivaluedict\n\n    def get_post_parameters(self, request):\n        \"\"\"\n        Replace the values of POST parameters marked as sensitive with\n        stars (*********).\n        \"\"\"\n        if request is None:\n            return {}\n        else:\n            sensitive_post_parameters = getattr(request, 'sensitive_post_parameters', [])\n            if self.is_active(request) and sensitive_post_parameters:\n                cleansed = request.POST.copy()\n                if sensitive_post_parameters == '__ALL__':\n                    # Cleanse all parameters.\n                    for k in cleansed:\n                        cleansed[k] = self.cleansed_substitute\n                    return cleansed\n                else:\n                    # Cleanse only the specified parameters.\n                    for param in sensitive_post_parameters:\n                        if param in cleansed:\n                            cleansed[param] = self.cleansed_substitute\n                    return cleansed\n            else:\n                return request.POST\n\n    def cleanse_special_types(self, request, value):\n        try:\n            # If value is lazy or a complex object of another kind, this check\n            # might raise an exception. isinstance checks that lazy\n            # MultiValueDicts will have a return value.\n            is_multivalue_dict = isinstance(value, MultiValueDict)\n        except Exception as e:\n            return '{!r} while evaluating {!r}'.format(e, value)\n\n        if is_multivalue_dict:\n            # Cleanse MultiValueDicts (request.POST is the one we usually care about)\n            value = self.get_cleansed_multivaluedict(request, value)\n        return value\n\n    def get_traceback_frame_variables(self, request, tb_frame):\n        \"\"\"\n        Replace the values of variables marked as sensitive with\n        stars (*********).\n        \"\"\"\n        # Loop through the frame's callers to see if the sensitive_variables\n        # decorator was used.\n        current_frame = tb_frame.f_back\n        sensitive_variables = None\n        while current_frame is not None:\n            if (current_frame.f_code.co_name == 'sensitive_variables_wrapper' and\n                    'sensitive_variables_wrapper' in current_frame.f_locals):\n                # The sensitive_variables decorator was used, so we take note\n                # of the sensitive variables' names.\n                wrapper = current_frame.f_locals['sensitive_variables_wrapper']\n                sensitive_variables = getattr(wrapper, 'sensitive_variables', None)\n                break\n            current_frame = current_frame.f_back\n\n        cleansed = {}\n        if self.is_active(request) and sensitive_variables:\n            if sensitive_variables == '__ALL__':\n                # Cleanse all variables\n                for name in tb_frame.f_locals:\n                    cleansed[name] = self.cleansed_substitute\n            else:\n                # Cleanse specified variables\n                for name, value in tb_frame.f_locals.items():\n                    if name in sensitive_variables:\n                        value = self.cleansed_substitute\n                    else:\n                        value = self.cleanse_special_types(request, value)\n                    cleansed[name] = value\n        else:\n            # Potentially cleanse the request and any MultiValueDicts if they\n            # are one of the frame variables.\n            for name, value in tb_frame.f_locals.items():\n                cleansed[name] = self.cleanse_special_types(request, value)\n\n        return cleansed.items()\n\n\nclass ExceptionReporter:\n    \"\"\"Organize and coordinate reporting on exceptions.\"\"\"\n    def __init__(self, request, exc_type, exc_value, tb, is_email=False):\n        self.request = request\n        self.filter = get_exception_reporter_filter(self.request)\n        self.exc_type = exc_type\n        self.exc_value = exc_value\n        self.tb = tb\n        self.is_email = is_email\n\n        self.template_info = getattr(self.exc_value, 'template_debug', None)\n        self.template_does_not_exist = False\n        self.postmortem = None\n\n    def get_traceback_data(self):\n        \"\"\"Return a dictionary containing traceback information.\"\"\"\n        if self.exc_type and issubclass(self.exc_type, TemplateDoesNotExist):\n            self.template_does_not_exist = True\n            self.postmortem = self.exc_value.chain or [self.exc_value]\n\n        frames = self.get_traceback_frames()\n        for i, frame in enumerate(frames):\n            if 'vars' in frame:\n                frame_vars = []\n                for k, v in frame['vars']:\n                    v = pprint(v)\n                    # Trim large blobs of data\n                    if len(v) > 4096:\n                        v = '%s\u2026 <trimmed %d bytes string>' % (v[0:4096], len(v))\n                    frame_vars.append((k, v))\n                frame['vars'] = frame_vars\n            frames[i] = frame\n\n        unicode_hint = ''\n        if self.exc_type and issubclass(self.exc_type, UnicodeError):\n            start = getattr(self.exc_value, 'start', None)\n            end = getattr(self.exc_value, 'end', None)\n            if start is not None and end is not None:\n                unicode_str = self.exc_value.args[1]\n                unicode_hint = force_str(\n                    unicode_str[max(start - 5, 0):min(end + 5, len(unicode_str))],\n                    'ascii', errors='replace'\n                )\n        from django import get_version\n\n        if self.request is None:\n            user_str = None\n        else:\n            try:\n                user_str = str(self.request.user)\n            except Exception:\n                # request.user may raise OperationalError if the database is\n                # unavailable, for example.\n                user_str = '[unable to retrieve the current user]'\n\n        c = {\n            'is_email': self.is_email,\n            'unicode_hint': unicode_hint,\n            'frames': frames,\n            'request': self.request,\n            'request_meta': self.filter.get_safe_request_meta(self.request),\n            'user_str': user_str,\n            'filtered_POST_items': list(self.filter.get_post_parameters(self.request).items()),\n            'settings': self.filter.get_safe_settings(),\n            'sys_executable': sys.executable,\n            'sys_version_info': '%d.%d.%d' % sys.version_info[0:3],\n            'server_time': timezone.now(),\n            'django_version_info': get_version(),\n            'sys_path': sys.path,\n            'template_info': self.template_info,\n            'template_does_not_exist': self.template_does_not_exist,\n            'postmortem': self.postmortem,\n        }\n        if self.request is not None:\n            c['request_GET_items'] = self.request.GET.items()\n            c['request_FILES_items'] = self.request.FILES.items()\n            c['request_COOKIES_items'] = self.request.COOKIES.items()\n        # Check whether exception info is available\n        if self.exc_type:\n            c['exception_type'] = self.exc_type.__name__\n        if self.exc_value:\n            c['exception_value'] = str(self.exc_value)\n        if frames:\n            c['lastframe'] = frames[-1]\n        return c\n\n    def get_traceback_html(self):\n        \"\"\"Return HTML version of debug 500 HTTP error page.\"\"\"\n        with Path(CURRENT_DIR, 'templates', 'technical_500.html').open(encoding='utf-8') as fh:\n            t = DEBUG_ENGINE.from_string(fh.read())\n        c = Context(self.get_traceback_data(), use_l10n=False)\n        return t.render(c)\n\n    def get_traceback_text(self):\n        \"\"\"Return plain text version of debug 500 HTTP error page.\"\"\"\n        with Path(CURRENT_DIR, 'templates', 'technical_500.txt').open(encoding='utf-8') as fh:\n            t = DEBUG_ENGINE.from_string(fh.read())\n        c = Context(self.get_traceback_data(), autoescape=False, use_l10n=False)\n        return t.render(c)\n\n    def _get_source(self, filename, loader, module_name):\n        source = None\n        if hasattr(loader, 'get_source'):\n            try:\n                source = loader.get_source(module_name)\n            except ImportError:\n                pass\n            if source is not None:\n                source = source.splitlines()\n        if source is None:\n            try:\n                with open(filename, 'rb') as fp:\n                    source = fp.read().splitlines()\n            except OSError:\n                pass\n        return source\n\n    def _get_lines_from_file(self, filename, lineno, context_lines, loader=None, module_name=None):\n        \"\"\"\n        Return context_lines before and after lineno from file.\n        Return (pre_context_lineno, pre_context, context_line, post_context).\n        \"\"\"\n        source = self._get_source(filename, loader, module_name)\n        if source is None:\n            return None, [], None, []\n\n        # If we just read the source from a file, or if the loader did not\n        # apply tokenize.detect_encoding to decode the source into a\n        # string, then we should do that ourselves.\n        if isinstance(source[0], bytes):\n            encoding = 'ascii'\n            for line in source[:2]:\n                # File coding may be specified. Match pattern from PEP-263\n                # (https://www.python.org/dev/peps/pep-0263/)\n                match = re.search(br'coding[:=]\\s*([-\\w.]+)', line)\n                if match:\n                    encoding = match.group(1).decode('ascii')\n                    break\n            source = [str(sline, encoding, 'replace') for sline in source]\n\n        lower_bound = max(0, lineno - context_lines)\n        upper_bound = lineno + context_lines\n\n        try:\n            pre_context = source[lower_bound:lineno]\n            context_line = source[lineno]\n            post_context = source[lineno + 1:upper_bound]\n        except IndexError:\n            return None, [], None, []\n        return lower_bound, pre_context, context_line, post_context\n\n    def get_traceback_frames(self):\n        def explicit_or_implicit_cause(exc_value):\n            explicit = getattr(exc_value, '__cause__', None)\n            implicit = getattr(exc_value, '__context__', None)\n            return explicit or implicit\n\n        # Get the exception and all its causes\n        exceptions = []\n        exc_value = self.exc_value\n        while exc_value:\n            exceptions.append(exc_value)\n            exc_value = explicit_or_implicit_cause(exc_value)\n            if exc_value in exceptions:\n                # Avoid infinite loop if there's a cyclic reference (#29393).\n                break\n                \n\n        frames = []\n        # No exceptions were supplied to ExceptionReporter\n        if not exceptions:\n            return frames\n\n        # In case there's just one exception, try the other exception.\n        exc_value = exceptions.pop()\n        tb = exc_value.__traceback__\n\n        while tb is not None:\n            # Support for __traceback_hide__ which is used by a few libraries\n            # to hide internal frames.\n            if tb.tb_frame.f_locals.get('__traceback_hide__'):\n                tb = tb.tb_next\n                continue\n            filename = tb.tb_frame.f_code.co_filename\n            function = tb.tb_frame.f_code.co_name\n            lineno = tb.tb_lineno - 1\n            loader = tb.tb_frame.f_globals.get('__loader__')\n            module_name = tb.tb_frame.f_globals.get('__name__') or ''\n\n            pre_context_lineno, pre_context, context_line, post_context = self._get_lines_from_file(\n                filename, lineno, 7, loader, module_name\n            )\n            if pre_context_lineno is None:\n                pre_context_lineno = lineno\n                pre_context = []\n                context_line = '<source code not available>'\n                post_context = []\n            frames.append({\n                'exc_cause': explicit_or_implicit_cause(exc_value),\n                'exc_cause_explicit': getattr(exc_value, '__cause__', True),\n                'tb': tb,\n                'type': 'django' if module_name.startswith('django.') else 'user',\n                'filename': filename,\n                'function': function,\n                'lineno': lineno + 1,\n                'vars': self.filter.get_traceback_frame_variables(self.request, tb.tb_frame),\n                'id': id(tb),\n                'pre_context_lineno': pre_context_lineno + 1,\n                'pre_context': pre_context,\n                'context_line': context_line,\n                'post_context': post_context,\n\n            })\n            tb = tb.tb_next\n\n        return frames\n\n\ndef technical_404_response(request, exception):\n    \"\"\"Create a technical 404 error response.\"\"\"\n    try:\n        error_url = exception.args[0]['path']\n    except (IndexError, TypeError, KeyError):\n        error_url = request.path_info[1:]  # Trim leading slash\n\n    try:\n        tried = exception.args[0]['tried']\n    except (IndexError, TypeError, KeyError):\n        tried = []\n    else:\n        if (not tried or (                  # empty URLconf\n            request.path == '/' and\n            len(tried) == 1 and             # default URLconf\n            len(tried[0]) == 1 and\n            getattr(tried[0][0], 'app_name', '') == getattr(tried[0][0], 'namespace', '') == 'admin'\n        )):\n            return default_urlconf(request)\n\n    urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)\n\n    \n    with Path(CURRENT_DIR, 'templates', 'technical_404.html').open(encoding='utf-8') as fh:\n        t = DEBUG_ENGINE.from_string(fh.read())\n\n    reporter_filter = get_default_exception_reporter_filter()\n    c = Context({\n        'urlconf': urlconf,\n        'root_urlconf': settings.ROOT_URLCONF,\n        'request_path': error_url,\n        'urlpatterns': tried,\n        'reason': str(exception),\n        'settings': reporter_filter.get_safe_settings(),\n        \n    })\n    return HttpResponseNotFound(t.render(c), content_type='text/html')\n\nclass TestExceptionReporting(unittest.TestCase):\n    def test_safe_settings(self):\n        safe_settings = SafeExceptionReporterFilter().get_safe_settings()\n        self.assertIsNotNone(safe_settings)\n\n    def test_get_cleansed_multivaluedict(self):\n        request = MagicMock()\n        request.POST = {'key1': 'value1', 'key2': 'sensitive'}\n        sensitive_post_parameters = ['key2']\n        filter = SafeExceptionReporterFilter()\n        cleaned_post = filter.get_cleansed_multivaluedict(request, request.POST)\n        self.assertEqual(cleaned_post['key1'], 'value1')\n        self.assertEqual(cleaned_post['key2'], '********************')\n\n    def test_get_post_parameters(self):\n        request = MagicMock()\n        request.POST = {'key1': 'value1', 'key2': 'sensitive'}\n        sensitive_post_parameters = ['key2']\n        filter = SafeExceptionReporterFilter()\n        cleaned_post = filter.get_post_parameters(request)\n        self.assertEqual(cleaned_post['key1'], 'value1')\n        self.assertEqual(cleaned_post['key2'], '********************')\n\n\n\n    def test_get_traceback_frames(self):\n        tb_frame = MagicMock()\n        tb_frame.f_code = MagicMock()\n        tb_frame.f_code.co_filename = 'my_file.py'\n        tb_frame.f_code.co_name = 'my_function'\n        tb_frame.f_lineno = 10\n        tb = MagicMock()\n        tb.tb_frame = tb_frame\n        \n        reporter = ExceptionReporter(None, None, None, tb)\n        frames = reporter.get_traceback_frames()\n        self.assertEqual(len(frames), 1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_72": ["\nfrom django.contrib.admin.checks import (\n    BaseModelAdminChecks,\n    InlineModelAdminChecks,\n    must_be,\n    must_inherit_from,\n    refer_to_missing_field,\n)\nfrom django.contrib.admin.options import BaseModelAdmin, InlineModelAdmin\nfrom django.db import models\nfrom django.core.checks import Error\nfrom django.core.exceptions import ValidationError\n\n\nclass Model(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass MyModelAdmin(BaseModelAdmin):\n    list_display = [\"name\"]\n    list_filter = [\"name\"]\n    search_fields = [\"name\"]\n    save_as = True\n    save_on_top = True\n\nclass RelatedModel(models.Model):\n    parent_model = models.ForeignKey(Model, on_delete=models.CASCADE)\n\nclass MyInlineModelAdmin(InlineModelAdmin):\n    model = RelatedModel\n    fk_name = 'parent_model'\n    extra = 1\n\nclass TestAdminChecks(object):\n\n    def test_base_model_admin_checks(self):\n        checks = BaseModelAdminChecks().check(MyModelAdmin)\n        self.assertEqual(len(checks), 0)\n\n    def test_base_model_admin_checks_errors(self):\n        bad_admin = BaseModelAdmin()\n        bad_admin.model = None\n        checks = BaseModelAdminChecks().check(bad_admin)\n        self.assertEqual(len(checks), 1)\n        self.assertIsInstance(checks[0], Error)\n\n    def test_base_model_admin_checks_prepopulated_fields(self):\n        bad_admin = BaseModelAdmin()\n        bad_admin.model = Model\n        bad_admin.prepopulated_fields = {\"name\": \"invalid_field\"}\n        checks = BaseModelAdminChecks().check(bad_admin)\n        self.assertEqual(len(checks), 1)\n\n    def test_inline_model_admin_checks(self):\n        checks = InlineModelAdminChecks().check(MyInlineModelAdmin)\n        self.assertEqual(len(checks), 0)\n\n    def test_inline_model_admin_checks_errors(self):\n        bad_inline = MyInlineModelAdmin()\n        bad_inline.model = None\n        checks = InlineModelAdminChecks().check(bad_inline)\n        self.assertEqual(len(checks), 1)\n        self.assertIsInstance(checks[0], Error)\n\n    def test_must_be(self):\n        result = must_be(\"an integer\", \"option\", BaseModelAdmin, \"admin.E101\")\n        self.assertIsInstance(result[0], Error)\n        self.assertEqual(result[0].msg, \"The value of 'option' must be an integer.\")\n        self.assertEqual(result[0].id, \"admin.E101\")\n\n    def test_must_inherit_from(self):\n        result = must_inherit_from(\n            parent=\"BaseModelAdmin\", option=\"option\", obj=BaseModelAdmin, id=\"admin.E101\"\n        )\n        self.assertIsInstance(result[0], Error)\n        self.assertEqual(result[0].msg, \"The value of 'option' must inherit from 'BaseModelAdmin'.\")\n        self.assertEqual(result[0].id, \"admin.E101\")\n\n    def test_refer_to_missing_field(self):\n        result = refer_to_missing_field(\"invalid_field\", \"option\", BaseModelAdmin, \"admin.E101\")\n        self.assertIsInstance(result[0], Error)\n        self.assertEqual(result[0].msg, \"The value of 'option' refers to 'invalid_field', which is not a field of 'Model'.\")\n        self.assertEqual(result[0].id, \"admin.E101\")\n"], "sample_30": ["\nfrom django.contrib.admin.options import (\n    BaseModelAdmin, InlineModelAdmin,\n    StackedInline, TabularInline,\n)\nfrom django.contrib.admin.checks import AdminSiteChecks\nfrom django.contrib.auth.models import User\nfrom django.db import models\nfrom django.test import SimpleTestCase, TestCase\nfrom django.test.client import RequestFactory\nfrom django.urls import reverse\n\nclass MockModel(models.Model):\n    name = models.CharField(max_length=100)\n\nclass MockInlineModel(models.Model):\n    parent = models.ForeignKey(MockModel, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n\nclass MockModelAdmin(BaseModelAdmin):\n    model = MockModel\n    inlines = [MockInlineAdmin]\n\nclass MockInlineAdmin(InlineModelAdmin):\n    model = MockInlineModel\n\nclass AdminOptionsTests(TestCase):\n\n    def setUp(self):\n        self.rf = RequestFactory()\n\n    def test_basemodeladmin_get_model_perms(self):\n        admin = MockModelAdmin(MockModel, AdminSiteChecks())\n        perms = admin.get_model_perms(None)\n        self.assertEqual(set(perms), {'add', 'change', 'delete', 'view'})\n\n    def test_inlineModelAdmin_get_formset(self):\n        admin = MockInlineAdmin(MockInlineModel, AdminSiteChecks())\n        formset = admin.get_formset(self.rf.get('/'))\n        self.assertIsNotNone(formset)\n\n    def test_inlineModelAdmin_has_add_permission(self):\n        admin = MockInlineAdmin(MockInlineModel, AdminSiteChecks())\n        request = self.rf.get('/')\n        request.user = User()\n        self.assertTrue(admin.has_add_permission(request))\n\n    def test_stackedinline_template(self):\n        admin = StackedInline(MockInlineModel, AdminSiteChecks())\n        self.assertEqual(admin.template, 'admin/edit_inline/stacked.html')\n\n    def test_tabularinline_template(self):\n        admin = TabularInline(MockInlineModel, AdminSiteChecks())\n        self.assertEqual(admin.template, 'admin/edit_inline/tabular.html')\n\n\n\n"], "sample_38": ["\nimport datetime\nimport decimal\nimport enum\nimport functools\nimport os\nimport pathlib\nimport re\nimport types\nimport uuid\n\nfrom django.conf import settings\nfrom django.db import models\nfrom django.db. migrations.operations.base import Operation\nfrom django.utils import timezone\nfrom django.utils.functional import LazyObject, Promise\nfrom django.utils.version import get_docs_version\n\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    BaseSequenceSerializer,\n    BaseSimpleSerializer,\n    ChoicesSerializer,\n    DateTimeSerializer,\n    DatetimeDatetimeSerializer,\n    DecimalSerializer,\n    DeconstructableSerializer,\n    DictionarySerializer,\n    EnumSerializer,\n    FloatSerializer,\n    FrozensetSerializer,\n    FunctionTypeSerializer,\n    FunctoolsPartialSerializer,\n    IterableSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    PathLikeSerializer,\n    PathSerializer,\n    RegexSerializer,\n    SequenceSerializer,\n    SettingsReferenceSerializer,\n    SetSerializer,\n    TypeSerializer,\n    UUIDSerializer,\n    serializer_factory,\n)\n\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n    enum_field = models.CharField(choices=[(c, c) for c in 'abc'])\n\n\nclass MyManager(models.Manager):\n    pass\n\nclass MyEnum(enum.Enum):\n    FOO = 'foo'\n    BAR = 'bar'\n\ndef _test_function():\n    pass\n\nclass TestSerializer:\n    def test_base_serializer(self):\n        serializer = BaseSerializer(1)\n        with self.assertRaises(NotImplementedError):\n            serializer.serialize()\n\n    def test_base_sequence_serializer(self):\n        serializer = BaseSequenceSerializer(range(3))\n        with self.assertRaises(NotImplementedError):\n            serializer._format()\n\n    def test_base_simple_serializer(self):\n        serializer = BaseSimpleSerializer(1)\n        string, imports = serializer.serialize()\n        self.assertEqual(string, '1')\n        self.assertEqual(imports, set())\n\n    def test_choices_serializer(self):\n        choices = models.Choices([('a', 'A'), ('b', 'B')])\n        serializer = ChoicesSerializer(choices)\n        string, imports = serializer.serialize()\n        self.assertEqual(string, repr(serializer_factory(choices.value).serialize()[0]))\n        self.assertEqual(imports, getattr(serializer_factory(choices.value), 'serialize', lambda: set())())\n\n    def test_datetime_serializer(self):\n        serializer = DateTimeSerializer(datetime.date.today())\n        string, imports = serializer.serialize()\n        self.assertEqual(import_from(string), 'datetime')\n\n    def test_datetimedatetime_serializer(self):\n        now = timezone.now()\n        serializer = DatetimeDatetimeSerializer(now)\n        string, imports = serializer.serialize()\n        self.assertEqual(string, repr(now).replace('<UTC>', 'utc'))\n        self.assertEqual(imports, {'import datetime', 'from django.utils.timezone import utc'})\n\n    def test_decimal_serializer(self):\n        serializer = DecimalSerializer(decimal.Decimal('1.23'))\n        string, imports = serializer.serialize()\n        self.assertEqual(string, \"Decimal('1.23')\") \n        self.assertEqual(imports, {\"from decimal import Decimal\"})\n\n    def test_deconstructable_serializer(self):\n        class MyModel:\n            def deconstruct(self):\n                return 'path.to.MyModel', (), {}\n\n        serializer = DeconstructableSerializer(MyModel())\n        string, imports = serializer.serialize()\n        self.assertEqual(string, 'path.to.MyModel()')\n        self.assertEqual(imports, {'import path.to'})\n\n    def test_dictionary_serializer(self):\n        serializer = DictionarySerializer({'a': 1, 'b': 2})\n        string, imports = serializer.serialize()\n        self.assertEqual(string, \"{'a': 1, 'b': 2}\")\n        self.assertEqual(imports, set())\n\n    def test_enum_serializer(self):\n        serializer = EnumSerializer(MyEnum.FOO)\n        string, imports = serializer.serialize()\n        self.assertEqual(string, f\"'MyEnum.FOO'\")\n        self.assertEqual(imports, {'import MyEnum'})\n\n    def test_float_serializer(self):\n        serializer = FloatSerializer(1.23)\n        string, imports = serializer.serialize()\n        self.assertEqual(string, \"1.23\")\n        self.assertEqual(imports, set())\n        serializer = FloatSerializer(float('inf'))\n        string, imports = serializer.serialize()\n        self.assertEqual(string, \"float('inf')\")\n        self.assertEqual(imports, set())\n\n    def test_frozenset_serializer(self):\n        serializer = FrozensetSerializer(frozenset([1, 2]))\n        string, imports = serializer.serialize()\n        self.assertEqual(string, \"frozenset([1, 2])\")\n        self.assertEqual(imports, set())\n\n    def test_function_type_serializer(self):\n        def my_function():\n            pass\n\n        serializer = FunctionTypeSerializer(my_function)\n        string, imports = serializer.serialize()\n        self.assertEqual(string, f\"'{__name__}.my_function'\")\n        self.assertEqual(imports, {'import __name__' })\n\n    def test_functools_partial_serializer(self):\n        def my_function(a, b):\n            return a + b\n\n        partial = functools.partial(my_function, 1)\n        serializer = FunctoolsPartialSerializer(partial)\n        string, imports = serializer.serialize()\n        self.assertEqual(string, \"functools.partial(<function my_function at 0x...>, 1)\")\n        self.assertEqual(imports, {'import functools'})\n\n    def test_iterable_serializer(self):\n        serializer = IterableSerializer([1, 2, 3])\n        string, imports = serializer.serialize()\n        self.assertEqual(string, \"(1, 2, 3)\")\n        self.assertEqual(imports, set())\n\n    def test_model_field_serializer(self):\n        field = MyModel._meta.get_field('name')\n        serializer = ModelFieldSerializer(field)\n        string, imports = serializer.serialize()\n        self.assertIn('models', string)\n        self.assertIn('CharField', string)\n\n    def test_model_manager_serializer(self):\n        manager = MyModel.objects\n        serializer = ModelManagerSerializer(manager)\n        string, imports = serializer.serialize()\n        self.assertIn('models.Manager', string)\n        \n    def test_operation_serializer(self):\n        operation = Operation('test')\n        serializer = OperationSerializer(operation)\n        string, imports = serializer.serialize()\n        self.assertEqual(string, str(operation))\n        self.assertEqual(imports, {})\n\n    def test_pathlike_serializer(self):\n        serializer = PathLikeSerializer(os.path.join('a', 'b'))\n        string, imports = serializer.serialize()\n        self.assertEqual(string, repr(os.path.join('a', 'b')))\n        self.assertEqual(imports, {})\n\n    def test_path_serializer(self):\n        serializer = PathSerializer(pathlib.Path('a'))\n        string, imports = serializer.serialize()\n        self.assertEqual(string, \"pathlib.Pure'a'\") \n        self.assertEqual(imports, {'import pathlib'})\n\n    def test_regex_serializer(self):\n        regex = re.compile(r'[0-9]+')\n        serializer = RegexSerializer(regex)\n        string, imports = serializer.serialize()\n        self.assertEqual(import_from(string), 're.compile')\n        self.assertIn('r\\'[0-9]+\\'', string)\n        self.assertEqual(imports, {'import re'})\n\n    def test_sequence_serializer(self):\n        serializer = SequenceSerializer([1, 2, 3])\n        string, imports = serializer.serialize()\n        self.assertEqual(string, \"[1, 2, 3]\")\n        self.assertEqual(imports, set())\n\n    def test_set_serializer(self):\n        serializer = SetSerializer({1, 2, 3})\n        string, imports = serializer.serialize()\n        self.assertEqual(string, \"{1, 2, 3}\")\n        self.assertEqual(imports, set())\n\n    def test_settings_reference_serializer(self):\n        serializer = SettingsReferenceSerializer(settings.DEBUG)\n        string, imports = serializer.serialize()\n        self.assertEqual(string, \"settings.DEBUG\")\n        self.assertEqual(imports, {\"from django.conf import settings\"})\n\n    def test_tuple_serializer(self):\n        serializer = TupleSerializer((1, 2, 3))\n        string, imports = serializer.serialize()\n        self.assertEqual(string, \"(1, 2, 3)\")\n        self.assertEqual(imports, set())\n\n    def test_type_serializer(self):\n        serializer = TypeSerializer(int)\n        string, imports = serializer.serialize()\n        self.assertEqual(string, 'int')\n        self.assertEqual(imports, set())\n\n    def test_uuid_serializer(self):\n        serializer = UUIDSerializer(uuid.UUID('00000000-0000-0000-0000-000000000000'))\n        string, imports = serializer.serialize()\n        self.assertEqual(string, \"uuid.UUID('00000000-0000-0000-0000-000000000000')\")\n        self.assertEqual(imports, {'import uuid'})\n\ndef import_from(string):\n    return string.split('.')[0]\n"], "sample_139": ["\nfrom sympy.matrices.expressions.blockmatrix import ( block_collapse, bc_matmul, bc_block_plus_ident, BlockDiagMatrix, BlockMatrix, bc_dist, bc_matadd, bc_transpose, bc_inverse, blockcut, reblock_2x2, deblock)\nfrom sympy.matrices.expressions import (MatrixSymbol, Identity, Inverse, trace, Transpose, det, ZeroMatrix)\nfrom sympy.functions import transpose\nfrom sympy import (Matrix, symbols, init_printing, eye)\nfrom sympy.testing.pytest import raises\n\nn, m, l = symbols('n m l')\nX = MatrixSymbol('X', n, n)\nY = MatrixSymbol('Y', m, m)\nZ = MatrixSymbol('Z', n, m)\n\ndef test_BlockMatrix_creation():\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n    assert B.shape == (n+m, n+l) \n    assert B.blockshape == (2,2)\n    assert B.rowblocksizes == [n, m]\n    assert B.colblocksizes == [n, l]\n    \ndef test_BlockMatrix_simple_operations():\n    C = BlockMatrix([[Identity(n), Z]])\n    assert C*B == block_collapse(C*B) \n\ndef test_block_collapse_simple_multiplication():\n    C = BlockMatrix([[Identity(n), Z]])\n    assert block_collapse(C*B) == BlockMatrix([[X, Z + Z*Y]])\n\ndef test_BlockDiagMatrix_creation():\n    diag = BlockDiagMatrix(X, Y)\n    assert diag.shape == (n+m, n+m)\n\ndef test_BlockDiagMatrix_inverse():\n    diag = BlockDiagMatrix(X, Y)\n    assert diag.inverse() == BlockDiagMatrix(X.inverse(), Y.inverse())\n\ndef test_BlockDiagMatrix_transpose():\n\n    diag = BlockDiagMatrix(X, Y)\n    assert diag.transpose() == BlockDiagMatrix(X.transpose(), Y.transpose())\n\ndef test_blockcut():\n    M = Matrix(4,4,range(16))\n    B = blockcut(M, (1,3),(1,3))\n    assert (B.blocks[0,1]) == Matrix([[1,2,3]])\n\ndef test_bounds():\n    assert bounds((1,10,50)) == [(0,1),(1,11),(11,61)]\n\ndef test_reblock_2x2():\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n    assert reblock_2x2(B).blockshape == (2,2)\n    \n\ndef test_deblock():\n   B = BlockMatrix([[X, Z], [ZeroMatrix(m,n), Y]])\n   assert deblock(B) == B\n   \ndef test_bc_matmul():\n\n    assert bc_matmul(MatMul(2, [X,Y])) == MatMul(2, [X, Y])\n\ndef test_bc_dist():\n    assert bc_dist(MatMul(2, [X,Y])) == MatMul(2, [X, Y])\n    \ndef test_bc_matadd():\n    assert bc_matadd(MatAdd(X,Y)) == MatAdd(X,Y)\n    \n\ndef test_bc_block_plus_ident():\n\n    assert bc_block_plus_ident(MatAdd(X, Identity(n))) == MatAdd(Identity(n) + X, Identity(n))\n\ndef test_bc_transpose():\n    assert bc_transpose(Transpose(X)) == Transpose(X)\n    \n\ndef test_bc_inverse():\n\n    assert bc_inverse(Inverse(X)) == Inverse(X)\n\n\n\n"], "sample_33": ["\nfrom django.test import SimpleTestCase\nfrom django.forms import (\n    BooleanField, CharField, ChoiceField, DateField, DateTimeField, DecimalField, EmailField, FileField, FloatField,\n    Form, GenericIPAddressField, IntegerField, ModelChoiceField, ModelMultipleChoiceField, MultipleChoiceField, RegexField,\n    SplitDateTimeField, TimeField, URLField, utils,\n)\nfrom django.forms.models import (\n    BaseModelFormSet, BaseInlineFormSet, InlineForeignKeyField, inlineformset_factory, modelform_defines_fields,\n    modelformset_factory, \n)\nfrom django.db import models\nfrom unittest.mock import patch\n\nclass ChoiceModel(models.Model):\n    name = models.CharField(max_length=100)\n    \n\nclass TestModelsForms(SimpleTestCase):\n    def test_modelform_defines_fields(self):\n        class MyForm(Form):\n            pass\n        self.assertFalse(modelform_defines_fields(MyForm))\n        class MyModelForm(Form):\n            class Meta:\n                fields = ['name']\n        self.assertTrue(modelform_defines_fields(MyModelForm))\n\n    @patch('django.forms.models.get_default_prefix')\n    def test_base_inline_formset_get_default_prefix(self, mock_get_default_prefix):\n        mock_get_default_prefix.return_value = 'prefix'\n        class MyInlineFormSet(BaseInlineFormSet):\n            pass\n        formset = MyInlineFormSet(None, None, None)\n        self.assertEqual(formset.get_default_prefix(), 'prefix')\n    \n    \n    def test_modelformset_factory(self):\n        formset = modelformset_factory(ChoiceModel)\n        self.assertIsNotNone(formset)\n\n    def test_inlineformset_factory(self):\n        formset = inlineformset_factory(ChoiceModel, ChoiceModel, fk_name='name')\n        self.assertIsNotNone(formset)\n\n    def test_modelchoicefield(self):\n      \n        choices = ChoiceModel.objects.all()\n        field = ModelChoiceField(queryset=choices)\n        self.assertEqual(field.widget.__class__, Select)\n\n    def test_modelmultiplechoicefield(self):\n        choices = ChoiceModel.objects.all()\n        field = ModelMultipleChoiceField(queryset=choices)\n        self.assertEqual(field.widget.__class__, SelectMultiple)\n\n    def test_inlineforeignkeyfield(self):\n        parent_instance = ChoiceModel.objects.create(name=\"Parent\")\n        field = InlineForeignKeyField(parent_instance)\n        self.assertEqual(field.parent_instance, parent_instance)\n\n"], "sample_158": ["\nfrom sympy.parsing.mathematica import parse_mathematica, MathematicaParser\nfrom sympy import symbols, sin, cos, log, exp, sqrt, I, pi, Eq, Function\nfrom sympy import Add, Mul, Pow, Integer, Float\nimport sympy\n\ndef test_basic_arithmetic():\n    assert parse_mathematica(\"2+2\") == 4\n    assert parse_mathematica(\"2*3\") == 6\n    assert parse_mathematica(\"4/2\") == 2\n    assert parse_mathematica(\"2^3\") == 8\n\ndef test_parentheses():\n    assert parse_mathematica(\"(2+2)*3\") == 12\n    assert parse_mathematica(\"2*(3+4)\") == 14\n    assert parse_mathematica(\"2^(3+1)\") == 16\n\ndef test_functions():\n    assert parse_mathematica(\"Sin[0]\") == sin(0)\n    assert parse_mathematica(\"Cos[pi/2]\") == cos(pi/2)\n    assert parse_mathematica(\"Log[10,100]\") == log(100,10)\n    assert parse_mathematica(\"Exp[1]\") == exp(1)\n    assert parse_mathematica(\"Sqrt[9]\") == sqrt(9)\n\ndef test_symbols():\n    x = symbols('x')\n    assert parse_mathematica(\"x+2\") == x + 2\n    assert parse_mathematica(\"2*x\") == 2*x\n    assert parse_mathematica(\"x^2\") == x**2\n\ndef test_complex_numbers():\n    assert parse_mathematica(\"2 + 3 I\") == 2 + 3*I\n    assert parse_mathematica(\"I^2\") == -1\n\ndef test_constants():\n    assert parse_mathematica(\"Pi\") == pi\n    assert parse_mathematica(\"I\") == I\n\ndef test_equations():\n    x = symbols('x')\n    assert parse_mathematica(\"x == 2\") == Eq(x, 2)\n\ndef test_nested_functions():\n    assert parse_mathematica(\"Sin[Cos[0]]\") == sin(cos(0))\n    assert parse_mathematica(\"Log[Exp[1]]\") == log(exp(1))\n\ndef test_compound_expressions():\n    x = symbols('x')\n    assert parse_mathematica(\"x + 1; x^2\") == [x + 1, x**2]\n"], "sample_97": ["\nimport os\nimport platform\nimport sys\nfrom typing import Optional\n\nimport pytest\n\nfrom _pytest.compat import TYPE_CHECKING\nfrom _pytest.config import Config\nfrom _pytest.config import Parser\nfrom _pytest.mark.structures import Mark\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import skip\nfrom _pytest.outcomes import xfail\nfrom _pytest.reports import BaseReport\n\nif TYPE_CHECKING:\n    from typing import Type\n\n\ndef test_evaluate_skip_marks_unconditional_skip():\n    item = Item.from_parent(None, None)\n    item._store[skipped_by_mark_key] = False\n    mark = Mark(\"skip\", args=(\"reason\",))\n    item.iter_markers = lambda name: (mark,) if name == \"skipelse\"\n    result = evaluate_skip_marks(item)\n    assert result == \"reason\"\n\n\ndef test_evaluate_skip_marks_skipif_true():\n    item = Item.from_parent(None, None)\n    item._store[skipped_by_mark_key] = False\n    mark = Mark(\"skipif\", args=(True,), kwargs={\"reason\": \"reason\"})\n    item.iter_markers = lambda name: (mark,) if name == \"skipif\"\n    result = evaluate_skip_marks(item)\n    assert result\n\ndef test_evaluate_skip_marks_skipif_false():\n    item = Item.from_parent(None, None)\n    item._store[skipped_by_mark_key] = False\n    mark = Mark(\"skipif\", args=(False,))\n    item.iter_markers = lambda name: (mark,) if name == \"skipif\"\n    result = evaluate_skip_marks(item)\n    assert result is None\n\ndef test_evaluate_xfail_marks_unconditional_xfail():\n    item = Item.from_parent(None, None)\n    mark = Mark(\"xfail\", args=(), kwargs={\"reason\": \"reason\"})\n    item.iter_markers = lambda name: (mark,) if name == \"xfail\"\n    result = evaluate_xfail_marks(item)\n    assert result is not None\n    assert result.reason == \"reason\"\n\ndef test_evaluate_xfail_marks_xfail_condition_true():\n    item = Item.from_parent(None, None)\n    mark = Mark(\"xfail\", args=(True,), kwargs={\"reason\": \"reason\"})\n    item.iter_markers = lambda name: (mark,) if name == \"xfail\"\n    result = evaluate_xfail_marks(item)\n    assert result is not None\n\ndef test_evaluate_xfail_marks_xfail_condition_false():\n    item = Item.from_parent(None, None)\n    mark = Mark(\"xfail\", args=(False,), kwargs={\"reason\": \"reason\"})\n    item.iter_markers = lambda name: (mark,) if name == \"xfail\"\n    result = evaluate_xfail_marks(item)\n    assert result is None\n\ndef test_evaluate_condition_string(capsys):\n    item = Item.from_parent(None, None)\n    mark = Mark(\"xfail\", args=(\n        \"sys.platform == 'win32'\",\n    ), kwargs={\"reason\": \"reason\"})\n\n    def mock_platform():\n        return \"win32\"\n\n    item.obj = type(\"obj\", (object,), {})()\n    item.obj.__globals__ = {\"platform\": mock_platform}\n\n    result, reason = evaluate_condition(item, mark, \"sys.platform == 'win32'\")\n    assert result\n    assert reason == \"condition: sys.platform == 'win32'\"\n\n\n\ndef test_pytest_addoption(parser: Parser) -> None:\n    pytest_addoption(parser)\n    assert parser.getgroup(\"general\").option_find(\"runxfail\")\n    assert parser.has_ini(\"xfail_strict\")\n\n\ndef test_pytest_configure():\n    config = Config()\n    pytest_configure(config)\n    assert config.option.runxfail\n\n    \ndef test_pytest_runtest_setup_skip():\n    item = Item.from_parent(None, None)\n    mark = Mark(\"skip\", args=(\"reason\",))\n    item.iter_markers = lambda name: (mark,) if name == \"skip\"\n    item._store[skipped_by_mark_key] = False\n\n    pytest_runtest_setup(item)\n    assert item._store[skipped_by_mark_key] == True\n\ndef test_pytest_runtest_setup_xfail():\n    item = Item.from_parent(None, None)\n    mark = Mark(\"xfail\", args=(), kwargs={\"reason\": \"reason\"})\n    item.iter_markers = lambda name: (mark,) if name == \"xfail\"\n\n    pytest_runtest_setup(item)\n    assert item._store[xfailed_key].reason == \"reason\"\ndef test_pytest_runtest_call():\n    item = Item.from_parent(None, None)\n    mark = Mark(\"xfail\", args=(), kwargs={\"reason\": \"reason\"})\n    item.iter_markers = lambda name: (mark,) if name == \"xfail\"\n\n    xfailed = item._store.get(xfailed_key, None)\n    if xfailed is None:\n        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n    assert xfailed.reason == \"reason\"\n\n\n\ndef test_pytest_report_teststatus():\n    report = BaseReport(when=\"call\", outcome=\"passed\")\n    report.wasxfail = \"reason\"\n    status = pytest_report_teststatus(report)\n    assert status[0] == \"xpassed\"\n    assert status[1] == \"X\"\n    assert status[2] == \"XPASS\"\n\n\n\n"], "sample_28": ["\nimport datetime\nimport decimal\nfrom unittest import TestCase\n\nfrom django.contrib.admin.utils import (\n    FieldIsAForeignKeyColumnName,\n    NestedObjects,\n    display_for_field,\n    display_for_value,\n    flatten,\n    flatten_fieldsets,\n    label_for_field,\n    lookup_field,\n    quote,\n    unquote,\n    get_fields_from_path,\n    reverse_field_path,\n    lookup_needs_distinct,\n    prepare_lookup_value,\n    get_deleted_objects,\n    model_format_dict,\n    model_ngettext,\n)\nfrom django.contrib.auth import get_user_model\nfrom django.db import models\nfrom django.db.models.fields import (\n    AutoField,\n    BooleanField,\n    CharField,\n    DateField,\n    DateTimeField,\n    DecimalField,\n    ForeignKey,\n    JSONField,\n    ManyToManyField,\n    OneToOneField,\n)\nfrom django.test import SimpleTestCase\nfrom django.utils import timezone\nfrom django.utils.translation import activate\n\nUser = get_user_model()\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)\n    publish_date = models.DateTimeField(null=True, blank=True)\n    is_active = models.BooleanField(default=True)\n    tags = models.ManyToManyField(\n        \"Tag\",\n        related_name=\"posts\",\n        blank=True,\n    )\n    decimal_field = models.DecimalField(max_digits=5, decimal_places=2, default=0)\n\n    def __str__(self):\n        return self.title\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=50)\n\n    def __str__(self):\n        return self.name\n\nclass Comment(models.Model):\n    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name=\"comments\")\n    content = models.TextField()\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n    value = models.IntegerField()\n\nclass NestedObjectsTests(TestCase):\n\n    def test_nested_objects(self):\n        # Create some objects\n        post1 = Post.objects.create(title=\"Post 1\", author=User.objects.create_user('john'), content=\"Content 1\")\n        tag1 = Tag.objects.create(name=\"Tag 1\")\n        post1.tags.add(tag1)\n        post2 = Post.objects.create(title=\"Post 2\", author=User.objects.create_user('jane'), content=\"Content 2\")\n        tag2 = Tag.objects.create(name=\"Tag 2\")\n        post2.tags.add(tag2)\n\n        collector = NestedObjects()\n        collector.collect([post1, post2])\n\n        # Assert that the nested objects are correctly collected\n\n        # Check that the root objects are post1 and post2\n        self.assertEqual(len(collector.edges.get(None,())), 2)\n        self.assertIn(post1, collector.edges.get(None,()))\n        self.assertIn(post2, collector.edges.get(None,()))\n\n        # Check that tag1 is related to post1\n        self.assertIn(post1, collector.edges.get(tag1, ()))\n\n        # Check that tag2 is related to post2\n\n        self.assertIn(post2, collector.edges.get(tag2, ()))\n\nclass LookupNeedsDistinctTests(TestCase):\n    def test_lookup_needs_distinct(self):\n        # Create a model with a ManyToManyField\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n            tags = models.ManyToManyField(Tag)\n\n        opts = MyModel._meta\n        self.assertTrue(lookup_needs_distinct(opts, \"tags\"))\n\nclass PrepareLookupValueTests(TestCase):\n    def test_prepare_lookup_value(self):\n        self.assertEqual(prepare_lookup_value('title__in', \"apple,banana\"), ['apple', 'banana'])\n        self.assertEqual(prepare_lookup_value('title__isnull', \"True\"), False)\n        self.assertEqual(prepare_lookup_value('title__isnull', \"\"), False)\n        self.assertEqual(prepare_lookup_value('title__isnull', \"false\"), False)\n        self.assertEqual(prepare_lookup_value('title__isnull', \"0\"), False)\n\nclass GetDeletedObjectsTests(TestCase):\n    def test_get_deleted_objects(self):\n        user = User.objects.create_user('test')\n\n        post1 = Post.objects.create(title=\"Post 1\", author=user)\n        tag1 = Tag.objects.create(name=\"Tag 1\")\n        post1.tags.add(tag1)\n        comment1 = Comment.objects.create(post=post1, content=\"Comment 1\")\n\n        deleted_objects, _, _, _ = get_deleted_objects([post1], None, None)\n\n        self.assertEqual(len(deleted_objects), 2)\n        self.assertIn(f'{post1}: {post1}', deleted_objects)\n\nclass ModelFormatDictTests(TestCase):\n    def test_model_format_dict(self):\n        self.assertEqual(model_format_dict(Post), {'verbose_name': 'post', 'verbose_name_plural': 'posts'})\n        self.assertEqual(model_format_dict(Post.objects.all()), {'verbose_name': 'post', 'verbose_name_plural': 'posts'})\n\nclass ModelNgmtextTests(TestCase):\n    def test_model_ngettext(self):\n        activate('en')\n        self.assertEqual(model_ngettext(Post), 'post')\n        self.assertEqual(model_ngettext(Post.objects.all()), 'posts')\n\nclass UtilityTests(SimpleTestCase):\n    def setUp(self):\n        self.user = User.objects.create_user('testuser')\n        self.post = Post.objects.create(title=\"My post\", content=\"Some content\", author=self.user)\n        self.tag = Tag.objects.create(name=\"Technology\")\n        self.post.tags.add(self.tag)\n\n    def test_flatten(self):\n        self.assertEqual(flatten([1, [2, 3], 4]), [1, 2, 3, 4])\n        self.assertEqual(flatten((1, (2, 3), 4)), [1, 2, 3, 4])\n\n    def test_flatten_fieldsets(self):\n        fieldsets = (\n            (None, {'fields': ('title', 'content')}),\n            ('Other', {'fields': ('author', 'tags')}),\n        )\n        self.assertEqual(flatten_fieldsets(fieldsets), ['title', 'content', 'author', 'tags'])\n\n    def test_quote(self):\n        self.assertEqual(quote('This is a string'), 'This%20is%20a%20string')\n        self.assertEqual(quote('This is a string with / and :'), 'This%20is%20a%20string%20with%20%2F%20and%20%3A')\n\n    def test_unquote(self):\n        self.assertEqual(unquote('This%20is%20a%20string'), 'This is a string')\n        self.assertEqual(unquote('This%20is%20a%20string%20with%20%2F%20and%20%3A'), 'This is a string with / and :')\n\n    def test_label_for_field(self):\n        self.assertEqual(label_for_field('title', Post), 'Title')\n        self.assertEqual(label_for_field('author', Post), 'Author')\n        self.assertEqual(label_for_field('created_at', Post), 'Created at')\n\n        # Test case for a Callable field\n        def my_callable(obj):\n            return \"My Callable Field\"\n\n        self.assertEqual(label_for_field(my_callable, Post), 'My Callable Field')\n\n        # Test case for a Custom property\n        class MyPost:\n            @property\n            def my_property(self):\n                return \"My Property\"\n        self.assertEqual(label_for_field('my_property', MyPost()), 'My Property')\n\n    def test_lookup_field(self):\n        f, attr, value = lookup_field('title', self.post)\n        self.assertEqual(f.name, 'title')\n        self.assertEqual(attr, None)\n        self.assertEqual(value, 'My post')\n\n    def test_display_for_field_boolean(self):\n        self.assertEqual(display_for_field(True, BooleanField(), ''), '<span class=\"icon-yes\">Yes</span>')\n\n    def test_display_for_field_null(self):\n        self.assertEqual(display_for_field(None, CharField(), '--'))\n\n    def test_display_for_field_datetime(self):\n        self.post.created_at = timezone.now()\n        display_value = display_for_field(self.post.created_at, DateTimeField(), '')\n        self.assertIsInstance(display_value, str)\n        self.assertEqual(\n            display_value,\n            localize(self.post.created_at).strftime('%Y-%m-%d %H:%M:%S')\n        )\n\n    def test_display_for_field_date(self):\n        self.post.publish_date = datetime.date.today()\n        display_value = display_for_field(self.post.publish_date, DateField(), '')\n        self.assertIsInstance(display_value, str)\n        self.assertEqual(display_value, localize(self.post.publish_date).strftime('%Y-%m-%d'))\n\n    def test_display_for_field_decimal(self):\n        self.post.decimal_field = decimal.Decimal('12.34')\n        display_value = display_for_field(self.post.decimal_field, DecimalField(), '')\n        self.assertEqual(display_value, '12.34')\n\n    def test_display_for_field_integer(self):\n        self.assertEqual(display_for_field(123, IntegerField(), ''), '123')\n\n    def test_display_for_field_filefield(self):\n        self.post.content = 'some content'\n        self.post.save()\n        display_value = display_for_field(self.post.content.url, FileField(), '')\n        self.assertIn('<a href=\"', display_value)\n        self.assertIn('\">', display_value)\n\n    def test_display_for_field_jsonfield(self):\n        self.post.content = {'key': 'value'}\n        self.post.save()\n        display_value = display_for_field(self.post.content, JSONField(), '')\n        self.assertEqual(display_value, str({'key': 'value'}))\n\n    def test_display_for_value_boolean(self):\n        self.assertEqual(display_for_value(True, '', boolean=True), '<span class=\"icon-yes\">Yes</span>')\n\n    def test_display_for_value_null(self):\n        self.assertEqual(display_for_value(None, '--'), '--')\n\n    def test_display_for_value_datetime(self):\n        self.post.created_at = timezone.now()\n        display_value = display_for_value(self.post.created_at, '')\n        self.assertIsInstance(display_value, str)\n        self.assertEqual(\n            display_value,\n            localize(self.post.created_at).strftime('%Y-%m-%d %H:%M:%S')\n        )\n\n    def test_display_for_value_list(self):\n        self.assertEqual(display_for_value([1, 2, 3], ', '), '1, 2, 3')\n\n\n\n"], "sample_53": ["\nimport unittest\n\nfrom django.conf import settings\nfrom django.core.checks.templates import (\n    E001,\n    E002,\n    E003,\n    check_for_template_tags_with_the_same_name,\n    check_setting_app_dirs_loaders,\n    check_string_if_invalid_is_string,\n)\n\nclass TemplatesChecksTests(unittest.TestCase):\n\n    def test_check_setting_app_dirs_loaders_app_dirs_true_loaders_present(self):\n        settings.TEMPLATES = [\n            {\n                'APP_DIRS': True,\n                'OPTIONS': {'loaders': ['django.template.loaders.filesystem.Loader']}\n            }\n        ]\n        errors = check_setting_app_dirs_loaders({}, {})\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, E001.id)\n\n    def test_check_setting_app_dirs_loaders_app_dirs_false_loaders_present(self):\n        settings.TEMPLATES = [\n            {\n                'APP_DIRS': False,\n                'OPTIONS': {'loaders': ['django.template.loaders.filesystem.Loader']}\n            }\n        ]\n        errors = check_setting_app_dirs_loaders({}, {})\n        self.assertEqual(len(errors), 0)\n\n    def test_check_setting_app_dirs_loaders_app_dirs_true_no_loaders(self):\n        settings.TEMPLATES = [\n            {\n                'APP_DIRS': True,\n                'OPTIONS': {}\n            }\n        ]\n        errors = check_setting_app_dirs_loaders({}, {})\n        self.assertEqual(len(errors), 0)\n\n    def test_check_string_if_invalid_is_string(self):\n        settings.TEMPLATES = [\n            {\n                'OPTIONS': {'string_if_invalid': 'This is a string'}\n            }\n        ]\n        errors = check_string_if_invalid_is_string({}, {})\n        self.assertEqual(len(errors), 0)\n\n\n    def test_check_string_if_invalid_is_not_string(self):\n        settings.TEMPLATES = [\n            {\n                'OPTIONS': {'string_if_invalid': 123}\n            }\n        ]\n        errors = check_string_if_invalid_is_string({}, {})\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, E002.id)\n\n    def test_check_for_template_tags_with_the_same_name_no_duplicates(self):\n        settings.TEMPLATES = [\n            {'OPTIONS': {'libraries': {'library1': 'path1'}}},\n            {'OPTIONS': {'libraries': {'library2': 'path2'}}}\n        ]\n        errors = check_for_template_tags_with_the_same_name({}, {})\n        self.assertEqual(len(errors), 0)\n\n    def test_check_for_template_tags_with_the_same_name_duplicates(self):\n        settings.TEMPLATES = [\n            {'OPTIONS': {'libraries': {'library1': 'path1'}}},\n            {'OPTIONS': {'libraries': {'library1': 'path2'}}}\n        ]\n        errors = check_for_template_tags_with_the_same_name({}, {})\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, E003.id)\n\n\n\n"], "sample_124": ["\nimport unittest\nimport numpy as np\nfrom sklearn.utils.multiclass import unique_labels\nfrom sklearn.utils.multiclass import is_multilabel\nfrom sklearn.utils.multiclass import type_of_target\nfrom sklearn.utils.multiclass import class_distribution\nfrom sklearn.utils.multiclass import check_classification_targets\nfrom sklearn.utils.multiclass import _ovr_decision_function\n\nclass TestMulticlass(unittest.TestCase):\n\n    def test_unique_labels_empty(self):\n        self.assertEqual(unique_labels([]).shape[0], 0)\n\n    def test_unique_labels_single(self):\n        self.assertTrue(\n            np.array_equal(unique_labels([1]), np.array([1]))\n        )\n\n    def test_unique_labels_multiple(self):\n        self.assertTrue(\n            np.array_equal(unique_labels([1, 2, 1, 3]), np.array([1, 2, 3]))\n        )\n\n    def test_unique_labels_array(self):\n        self.assertTrue(\n            np.array_equal(\n                unique_labels(np.array([1, 2, 1, 3])), np.array([1, 2, 3])\n            )\n        )\n\n    def test_unique_labels_multilabel(self):\n        y = np.array([[0, 1], [1, 1], [0, 0]])\n        self.assertTrue(\n            np.array_equal(unique_labels(y), np.array([0, 1]))\n        )\n\n    def test_is_multilabel_empty(self):\n        self.assertFalse(is_multilabel([]))\n\n    def test_is_multilabel_single_label(self):\n        self.assertFalse(is_multilabel([1, 2, 1]))\n        self.assertFalse(is_multilabel(np.array([1, 2, 1])))\n\n    def test_is_multilabel_multilabel(self):\n        self.assertTrue(is_multilabel([[1, 0], [0, 0]]))\n        self.assertTrue(is_multilabel(np.array([[1, 0], [0, 0]])))\n\n    def test_is_multilabel_mixed(self):\n        self.assertFalse(is_multilabel([[1], [0, 1], [0]]))\n        self.assertFalse(is_multilabel(np.array([[1], [0, 1], [0]])))\n\n    def test_type_of_target_binary(self):\n        self.assertEqual(type_of_target([0, 1]), \"binary\")\n\n    def test_type_of_target_multiclass(self):\n        self.assertEqual(type_of_target([1, 2, 1, 3]), \"multiclass\")\n\n    def test_type_of_target_multiclass_multioutput(self):\n        self.assertEqual(\n            type_of_target(np.array([[1, 2], [3, 1]])), \"multiclass-multioutput\"\n        )\n\n\n    def test_type_of_target_multilabel_indicator(self):\n        self.assertEqual(\n            type_of_target([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), \"multilabel-indicator\"\n        )\n\n    def test_type_of_target_continuous(self):\n        self.assertEqual(type_of_target([1.2, 2.3, 1.0]), \"continuous\")\n\n    def test_type_of_target_continuous_multioutput(self):\n        self.assertEqual(\n            type_of_target(np.array([[1.2, 2.3], [1.0, 2.5]])),\n            \"continuous-multioutput\",\n        )\n\n    def test_type_of_target_unknown(self):\n        self.assertEqual(type_of_target([[[1, 2], [3, 4]]]), \"unknown\")\n\n    def test_class_distribution(self):\n        y = np.array([[0, 1], [1, 0], [0, 1]])\n        classes, n_classes, class_prior = class_distribution(y)\n        self.assertEqual(classes, [np.array([0, 1]), np.array([0, 1])])\n        self.assertEqual(n_classes, [2, 2])\n        self.assertEqual(class_prior, [np.array([0.66666667, 0.33333333]), np.array([0.66666667, 0.33333333])])\n\n    def test_class_distribution_with_sample_weight(self):\n        y = np.array([[0, 1], [1, 0], [0, 1]])\n        sample_weight = np.array([1, 2, 1])\n        classes, n_classes, class_prior = class_distribution(y, sample_weight)\n        self.assertEqual(classes, [np.array([0, 1]), np.array([0, 1])])\n        self.assertEqual(n_classes, [2, 2])\n        self.assertEqual(class_prior, [np.array([0.6, 0.4]), np.array([0.6, 0.4])])\n\n    def test_check_classification_targets(self):\n        check_classification_targets([\"a\", \"b\", \"a\"])\n        check_classification_targets(np.array([1, 2, 1]))\n        check_classification_targets(np.array([[1, 2], [3, 1]]))\n        with self.assertRaises(ValueError):\n            check_classification_targets(np.array([[1, 2], [3, \"a\"]]))\n\n\n\n    def test__ovr_decision_function_basic(self):\n        predictions = np.array([[0, 1], [1, 0]])\n        confidences = np.array([[0.1, 0.9], [0.8, 0.2]])\n        n_classes = 3\n        decision_function = _ovr_decision_function(\n            predictions, confidences, n_classes\n        )\n\n        # Expected votes with tie breaking based on confidence\n        expected_votes = np.array([[0.66666667, 0.33333333],\n                                   [0.33333333, 0.66666667]])\n        self.assertTrue(np.allclose(decision_function, expected_votes))\n\n"], "sample_5": ["\nimport datetime\nimport decimal\nimport functools\nimport re\nimport uuid\nfrom unittest import TestCase\n\nfrom django.conf import settings\nfrom django.db import models\nfrom django.db.migrations.operations.base import Operation\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    ChoicesSerializer,\n    DateTimeSerializer,\n    DatetimeDatetimeSerializer,\n    DecimalSerializer,\n    DeconstructableSerializer,\n    DictionarySerializer,\n    EnumSerializer,\n    FloatSerializer,\n    FrozensetSerializer,\n    FunctionTypeSerializer,\n    FunctoolsPartialSerializer,\n    IterableSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    RegexSerializer,\n    SequenceSerializer,\n    SetSerializer,\n    SettingsReferenceSerializer,\n    TupleSerializer,\n    TypeSerializer,\n    UUIDSerializer,\n    serializer_factory,\n)\nfrom django.utils.functional import LazyObject, Promise\nfrom django.utils.timezone import utc\n\n# Mock settings\nsettings.configure(DATABASES={\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n    }\n})\n\nclass TestSerializer(TestCase):\n    def test_base_serializer(self):\n        class MockSerializer(BaseSerializer):\n            def serialize(self):\n                return 'mock', set()\n        serializer = MockSerializer(None)\n        self.assertEqual(serializer.serialize(), ('mock', set()))\n\n    def test_base_sequence_serializer(self):\n        serializer = SequenceSerializer([1, 2, 3])\n        self.assertEqual(serializer.serialize(), ('[1, 2, 3]', set()))\n\n    def test_base_simple_serializer(self):\n        serializer = BaseSimpleSerializer(1)\n        self.assertEqual(serializer.serialize(), ('1', set()))\n\n    def test_choices_serializer(self):\n        serializer = ChoicesSerializer(models.Choices([('A', 'A'), ('B', 'B')]))\n        self.assertEqual(serializer.serialize()[0], 'models.Choices([(\\'A\\', \\'A\\'), (\\'B\\', \\'B\\')])')\n        self.assertEqual(serializer.serialize()[1], {'import django.db.models'})\n\n    def test_datetime_serializer(self):\n        serializer = DateTimeSerializer(datetime.date.today())\n        self.assertEqual(serializer.serialize(), (repr(datetime.date.today()), {'import datetime'}))\n\n    def test_datetime_datetime_serializer(self):\n        dt = datetime.datetime.now()\n        serializer = DatetimeDatetimeSerializer(dt)\n        self.assertEqual(serializer.serialize()[0], repr(dt).replace('<UTC>', 'utc'))\n        self.assertEqual(serializer.serialize()[1], ['import datetime', \"from django.utils.timezone import utc\"])\n\n    def test_decimal_serializer(self):\n        serializer = DecimalSerializer(decimal.Decimal(\"1.23\"))\n        self.assertEqual(serializer.serialize(), (repr(decimal.Decimal(\"1.23\")), {\"from decimal import Decimal\"}))\n\n    def test_deconstructable_serializer(self):\n        mock_obj = type('MockObject', (), {'deconstruct': lambda self: ('path.to.object', (1,), {})})()\n        serializer = DeconstructableSerializer(mock_obj)\n        self.assertEqual(serializer.serialize(), ('path.to.object(1)', {'import path.to.object'}))\n\n    def test_dictionary_serializer(self):\n        serializer = DictionarySerializer({'a': 1, 'b': 2})\n        self.assertEqual(serializer.serialize(), (\"{'a': 1, 'b': 2}\", set()))\n\n    def test_enum_serializer(self):\n        class MyEnum(enum.Enum):\n            VALUE = 1\n        serializer = EnumSerializer(MyEnum.VALUE)\n        self.assertEqual(serializer.serialize(), (\"'MyEnum.VALUE'\", {'import MyEnum'}))\n\n    def test_float_serializer(self):\n        serializer = FloatSerializer(1.23)\n        self.assertEqual(serializer.serialize(), ('1.23', set()))\n\n        serializer = FloatSerializer(float('inf'))\n        self.assertEqual(serializer.serialize()[0], 'float(\"inf\")')\n\n        serializer = FloatSerializer(float('nan'))\n        self.assertEqual(serializer.serialize()[0], 'float(\"nan\")')\n\n    def test_frozenset_serializer(self):\n        serializer = FrozensetSerializer(frozenset([1, 2, 3]))\n        self.assertEqual(serializer.serialize(), ('frozenset([1, 2, 3])', set()))\n\n    def test_function_type_serializer(self):\n        def my_function():\n            pass\n        serializer = FunctionTypeSerializer(my_function)\n        self.assertEqual(serializer.serialize(), ('<module>.my_function', {'import <module>'}))\n\n    def test_functools_partial_serializer(self):\n        def my_function(a, b, c=1):\n            return a + b + c\n        partial_function = functools.partial(my_function, 1, c=3)\n        serializer = FunctoolsPartialSerializer(partial_function)\n        self.assertEqual(serializer.serialize()[0], \n                         'functools.partial(<module>.my_function, 1, c=3)')\n        self.assertEqual(serializer.serialize()[1], {'import functools', 'import <module>'})\n\n    def test_iterable_serializer(self):\n        serializer = IterableSerializer((1, 2, 3))\n        self.assertEqual(serializer.serialize(), ('(1, 2, 3)', set()))\n\n    def test_model_field_serializer(self):\n        field = models.CharField(max_length=100)\n        serializer = ModelFieldSerializer(field)\n        self.assertEqual(serializer.serialize()[0], serializer_factory(field.deconstruct())[0])\n\n    def test_model_manager_serializer(self):\n        manager = models.Manager()\n        serializer = ModelManagerSerializer(manager)\n        self.assertEqual(serializer.serialize()[0], serializer_factory(manager.deconstruct())[0])\n\n    def test_operation_serializer(self):\n        op = models.CreateModel()\n        serializer = OperationSerializer(op)\n        self.assertEqual(serializer.serialize()[0], serializer_factory(op).serialize()[0].rstrip(','))\n\n    def test_regex_serializer(self):\n        pattern = re.compile(r'\\d+')\n        serializer = RegexSerializer(pattern)\n        self.assertEqual(serializer.serialize()[0], 're.compile(\\'\\\\\\\\d+\\', 0)')\n\n    def test_settings_reference_serializer(self):\n        setting = settings.DEBUG\n        serializer = SettingsReferenceSerializer(setting)\n        self.assertEqual(serializer.serialize(), (\"settings.DEBUG\", {\"from django.conf import settings\"}))\n\n    def test_tuple_serializer(self):\n\n        serializer = TupleSerializer((1, 2, 3))\n        self.assertEqual(serializer.serialize(), ('(1, 2, 3)', set()))\n\n    def test_type_serializer(self):\n        serializer = TypeSerializer(int)\n        self.assertEqual(serializer.serialize(), ('int', set()))\n\n        serializer = TypeSerializer(type(None))\n        self.assertEqual(serializer.serialize(), ('type(None)', set()))\n\n    def test_uuid_serializer(self):\n        serializer = UUIDSerializer(uuid.uuid4())\n        self.assertEqual(serializer.serialize()[0], 'uuid.%s' % repr(uuid.uuid4()))\n        self.assertEqual(serializer.serialize()[1], {'import uuid'})\n"], "sample_75": ["\nimport numpy as np\nimport pandas as pd\nimport pytest\n\nfrom seaborn._core.scales import (\n    Nominal,\n    Ordinal,\n    Discrete,\n    Continuous,\n    Temporal,\n    PseudoAxis,\n    _make_identity_transforms,\n    _make_logit_transforms,\n    _make_log_transforms,\n    _make_symlog_transforms,\n    _make_sqrt_transforms,\n    _make_power_transforms,\n)\n\n# Test data\n\ndata = pd.Series([1, 2, 3, 4, 5], name=\"x\")\n\n# Helpers\n\ndef assert_array_equal(a, b):\n    assert np.allclose(a, b)\n\n# ----------------------------------------------------------------------------------- #\n\n\nclass TestNominal:\n    def test_setup(self):\n        scale = Nominal()\n        axis = PseudoAxis(scale)\n\n        assert_array_equal(scale._pipeline([1, 2, 3]), [1, 2, 3])\n\n        scale = Nominal(order=['b', 'a', 'c'])\n        axis = PseudoAxis(scale)\n        assert_array_equal(scale._pipeline(['a', 'b', 'c']), ['a', 'b', 'c'])\n\n    def test_tick(self):\n        scale = Nominal()\n        scale = scale.tick()\n\n        assert scale.get_tick_params() == {}\n\n    def test_label(self):\n        scale = Nominal()\n        scale = scale.label()\n\n        assert scale.get_label_params() == {}\n\n# ----------------------------------------------------------------------------------- #\n\nclass TestContinuous:\n    def test_setup(self):\n        scale = Continuous()\n        axis = PseudoAxis(scale)\n\n        assert_array_equal(scale._pipeline(data), data)\n\n    def test_tick(self):\n        scale = Continuous()\n\n        scale = scale.tick(locator=mpl.ticker.FixedLocator([1, 2, 3]))\n        assert scale.get_tick_params() == {\"locator\": mpl.ticker.FixedLocator([1, 2, 3])}\n\n        scale = scale.tick(at=[1, 2, 3])\n        assert scale.get_tick_params() == {\"locator\": None, \"at\": [1, 2, 3]}\n\n    def test_label(self):\n        scale = Continuous()\n\n        scale = scale.label(formatter=mpl.ticker.StrMethodFormatter(\"{x:.2f}\"))\n        assert scale.get_label_params() == {\"formatter\": mpl.ticker.StrMethodFormatter(\"{x:.2f}\")}\n\nclass TestTemporal:\n    def test_setup(self):\n        scale = Temporal()\n        axis = PseudoAxis(scale)\n\n    def test_tick(self):\n        scale = Temporal()\n        scale = scale.tick(upto=5)\n\n        assert scale.get_tick_params() == {\"locator\": None, \"upto\": 5}\n\n    def test_label(self):\n        scale = Temporal()\n        scale = scale.label(concise=True)\n        assert scale.get_label_params() == {\"formatter\": None, \"concise\": True}\n\n# ----------------------------------------------------------------------------------- #\n\nclass TestPseudoAxis:\n    def test_set_view_interval(self):\n        axis = PseudoAxis(Continuous())\n        axis.set_view_interval(0, 10)\n        assert axis.get_view_interval() == (0, 10)\n\n    def test_set_data_interval(self):\n        axis = PseudoAxis(Continuous())\n        axis.set_data_interval(0, 10)\n        assert axis.get_data_interval() == (0, 10)\n\n# ----------------------------------------------------------------------------------- #\n\nclass TestTransforms:\n    def test_identity(self):\n        forward, inverse = _make_identity_transforms()\n        assert_array_equal(forward([1, 2, 3]), [1, 2, 3])\n        assert_array_equal(inverse([1, 2, 3]), [1, 2, 3])\n\n    def test_logit(self):\n        forward, inverse = _make_logit_transforms()\n        x = np.array([0.1, 0.5, 0.9])\n        assert_array_equal(forward(x), np.log(x) - np.log(1 - x))\n        assert_array_equal(inverse(forward(x)), x)\n\n    def test_log(self):\n        forward, inverse = _make_log_transforms()\n        x = np.array([1, 10, 100])\n        assert_array_equal(forward(x), np.log(x))\n        assert_array_equal(inverse(forward(x)), x)\n\n    def test_Symlog(self):\n        forward, inverse = _make_symlog_transforms()\n\n        x = np.array([-10, -1, 0, 1, 10])\n        assert_array_equal(forward(x), np.sign(x) * np.log(1 + np.abs(np.divide(x, 1))))\n\n        assert_array_equal(inverse(forward(x)), x)\n\n    def test_sqrt(self):\n        forward, inverse = _make_sqrt_transforms()\n\n        x = np.array([-4, -1, 0, 1, 4])\n        assert_array_equal(forward(x), np.sign(x) * np.sqrt(np.abs(x)))\n        assert_array_equal(inverse(forward(x)), x)\n\n    def test_power(self):\n       forward, inverse = _make_power_transforms(2)\n\n\n    \n\n"], "sample_45": ["\nfrom django.utils.decorators import (\n    classonlymethod,\n    method_decorator,\n    _multi_decorate,\n    _update_method_wrapper,\n    decorator_from_middleware,\n    decorator_from_middleware_with_args,\n    make_middleware_decorator,\n    sync_and_async_middleware,\n    sync_only_middleware,\n    async_only_middleware,\n)\nfrom functools import partial, update_wrapper, wraps\nimport unittest\n\n\nclass DecoratorsTests(unittest.TestCase):\n\n    def test_classonlymethod(self):\n        class MyClass:\n            @classonlymethod\n            def my_method(cls):\n                return \"Class method\"\n\n        self.assertEqual(MyClass.my_method(), \"Class method\")\n        with self.assertRaises(AttributeError):\n            MyClass().my_method()\n\n    def test_method_decorator(self):\n        def my_decorator(func):\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs) + \" - Decorated\"\n            return wrapper\n\n        class MyClass:\n            @method_decorator(my_decorator)\n            def my_method(self):\n                return \"Original\"\n\n        self.assertEqual(MyClass().my_method(), \"Original - Decorated\")\n\n        @method_decorator(my_decorator, name='my_other_method')\n        def my_other_method(self):\n            return \"Original\"\n\n        self.assertEqual(my_other_method(MyClass()), \"Original - Decorated\")\n\n        with self.assertRaises(ValueError):\n            @method_decorator(my_decorator, name='nonexistent_method')\n            class AnotherClass:\n                pass\n\n    def test_multi_decorate(self):\n        def dec1(func):\n            def wrapper(*args, **kwargs):\n                return \"Dec1-\" + func(*args, **kwargs)\n            return wrapper\n\n        def dec2(func):\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs) + \"-Dec2\"\n            return wrapper\n\n        @method_decorator([dec1, dec2])\n        def my_func():\n            return \"Original\"\n\n        self.assertEqual(my_func(), \"Dec1-Original-Dec2\")\n\n    def test_decorator_from_middleware(self):\n\n        class TestMiddleware:\n            def __init__(self, get_response):\n                self.get_response = get_response\n\n            def __call__(self, request):\n                return self.get_response(request)\n\n        middleware_decorator = decorator_from_middleware(TestMiddleware)\n\n        @middleware_decorator\n        def my_view(request):\n            return \"Original\"\n\n        self.assertEqual(my_view({\"PATH_INFO\": \"/\"}), \"Original\")\n\n    def test_decorator_from_middleware_with_args(self):\n\n        class TestMiddleware:\n            def __init__(self, get_response, arg1, arg2):\n                self.get_response = get_response\n                self.arg1 = arg1\n                self.arg2 = arg2\n\n            def __call__(self, request):\n                return self.get_response(request)\n\n        middleware_decorator = decorator_from_middleware_with_args(TestMiddleware)\n\n        @middleware_decorator(\"test\", 123)\n        def my_view(request):\n            return \"Original\"\n\n        self.assertEqual(my_view({\"PATH_INFO\": \"/\"}), \"Original\")\n\n"], "sample_154": ["\nimport pytest\n\nfrom sympy import (\n    symbols, Eq, Poly, S,\n    solve, groebner,\n    ZZ,QQ,\n)\nfrom sympy.abc import x, y, z\nfrom sympy.solvers.polysys import (solve_poly_system, solve_triangulated, solve_biquadratic, SolveFailed)\n\ndef test_solve_poly_system_linear():\n    x, y = symbols('x y')\n    F = [Eq(x + y, 2), Eq(x - y, 0)]\n    sol = solve_poly_system(F, x, y)\n    assert sol == [(1, 1)]\n\ndef test_solve_poly_system_quadratic():\n    x, y = symbols('x y')\n    F = [Eq(x**2 + y, 2), Eq(x - y, 0)]\n    sol = solve_poly_system(F, x, y)\n    assert sol == [(S(2)/2, S(2)/2)]\n\ndef test_solve_poly_system_no_solution():\n    x, y = symbols('x y')\n    F = [Eq(x**2 + y, 2), Eq(x - y, 1)]\n    sol = solve_poly_system(F, x, y)\n    assert sol == []\n\ndef test_solve_poly_system_biquadratic():\n    x, y = symbols('x y')\n    p = Poly(y**2 - 4 + x, y, x)\n    q = Poly(y*2 + 3*x - 7, y, x)\n    opt = Options((x, y), {'domain': 'ZZ'})\n    sol = solve_poly_system([p, q], x, y)\n    assert sol == [(1/3, 3), (41/27, 11/9)]\n\ndef test_solve_poly_system_no_solution_biquadratic():\n    x, y = symbols('x y')\n    p = Poly(y**2 + x**2 - 4, y, x)\n    q = Poly(y - x, y, x)\n    opt = Options((x, y), {'domain': 'ZZ'})\n    sol = solve_poly_system([p, q], x, y)\n    assert sol == []\n\ndef test_solve_biquadratic_no_solution():\n    x, y = symbols('x y')\n    p = Poly(x**2 + y**2 - 1, x, y)\n    q = Poly(x + y - 2, x, y)\n    opt = Options((x, y), {'domain': 'ZZ'})\n    with pytest.raises(SolveFailed):\n        solve_biquadratic(p, q, opt)\n\ndef test_solve_triangulated_example():\n    x, y, z = symbols('x y z')\n    F = [x**2 + y + z - 1, x + y**2 + z - 1, x + y + z**2 - 1]\n    sol = solve_triangulated(F, x, y, z)\n    assert sol == [(0, 0, 1), (0, 1, 0), (1, 0, 0)]\n\ndef test_solve_triangulated_no_solution():\n    x, y = symbols('x y')\n    F = [x**2 + y - 2, x**2 - y + 1]\n    sol = solve_triangulated(F, x, y)\n    assert sol == []\n\n\n"], "sample_99": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.ridge import Ridge\nfrom sklearn.linear_model.ridge import RidgeCV\nfrom sklearn.linear_model.ridge import RidgeClassifier\nfrom sklearn.linear_model.ridge import RidgeClassifierCV\nfrom sklearn.datasets import make_regression\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold\n\nclass TestRidge(unittest.TestCase):\n\n    def test_ridge_fit(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n        ridge = Ridge(alpha=1.0)\n        ridge.fit(X, y)\n        self.assertTrue(ridge.coef_.shape[0] == X.shape[1])\n        self.assertTrue(ridge.intercept_ is not None)\n\n    def test_ridge_predict(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n        ridge = Ridge(alpha=1.0)\n        ridge.fit(X, y)\n        predictions = ridge.predict(X)\n        self.assertTrue(predictions.shape[0] == X.shape[0])\n\n    def test_ridgecv_fit(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n        ridgecv = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridgecv.fit(X, y)\n        self.assertTrue(ridgecv.alpha_ in ridgecv.alphas)\n\n    def test_ridgeclassifier_fit(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n        ridge_classifier = RidgeClassifier(alpha=1.0)\n        ridge_classifier.fit(X, y)\n        self.assertTrue(ridge_classifier.coef_.shape[1] == X.shape[1])\n        self.assertTrue(ridge_classifier.intercept_ is not None)\n\n    def test_ridgeclassifier_predict(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n        ridge_classifier = RidgeClassifier(alpha=1.0)\n        ridge_classifier.fit(X, y)\n        predictions = ridge_classifier.predict(X)\n        self.assertTrue(predictions.shape[0] == X.shape[0])\n\n    def test_ridgeclassifiercv(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n        ridge_classifier_cv = RidgeClassifierCV(alphas=np.logspace(-3, 3, 7))\n        ridge_classifier_cv.fit(X, y)\n        self.assertTrue(ridge_classifier_cv.alpha_ in ridge_classifier_cv.alphas)\n\n    def test_ridge_scoring(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n        ridge = Ridge(alpha=1.0, scoring='neg_mean_squared_error')\n        ridge.fit(X, y)\n        self.assertTrue(ridge.score(X, y) < 0)\n\n    def test_gridsearchcv(self):\n        X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n        param_grid = {'alpha': np.logspace(-3, 3, 7)}\n        grid_search = GridSearchCV(estimator=Ridge(), param_grid=param_grid, cv=KFold(n_splits=5))\n        grid_search.fit(X, y)\n        self.assertTrue(grid_search.best_params_['alpha'] in param_grid['alpha'])\n"], "sample_65": ["\nimport unittest\nfrom decimal import Decimal\n\nfrom django.conf import settings\nfrom django.utils.numberformat import format as nformat\n\nclass NumberFormatTests(unittest.TestCase):\n\n    def test_format_integer(self):\n        self.assertEqual(nformat(12345, '.', 0, 0, ',', False), '12345')\n        self.assertEqual(nformat(12345, ',', 0, 0, '.', False), '12345')\n        \n    def test_format_float(self):\n        self.assertEqual(nformat(12345.6789, '.', 2, 0, ',', False), '12345.68')\n        self.assertEqual(nformat(12345.6789, ',', 2, 0, '.', False), '12345,68')\n\n    def test_format_decimal(self):\n        self.assertEqual(nformat(Decimal('12345.6789'), '.', 2, 0, ',', False), '12345.68')\n        self.assertEqual(nformat(Decimal('12345.6789'), ',', 2, 0, '.', False), '12345,68')\n        \n    def test_format_grouping(self):\n        self.assertEqual(nformat(1234567890, '.', 0, 3, ',', False), '1,234,567,890')\n        self.assertEqual(nformat(1234567890, ',', 0, 3, '.', False), '1.234.567.890')\n\n    def test_format_force_grouping(self):\n        self.assertEqual(nformat(1234567, '.', 0, 0, ',', True), '1,234,567')\n        self.assertEqual(nformat(1234567, ',', 0, 0, '.', True), '1.234.567')\n        \n    def test_format_negative_number(self):\n        self.assertEqual(nformat(-12345.6789, '.', 2, 0, ',', False), '-12345.68')\n        self.assertEqual(nformat(-12345.6789, ',', 2, 0, '.', False), '-12345,68')\n\n    def test_format_large_float(self):\n        self.assertEqual(nformat(12345678901234567890.1234567890, '.', 2, 0, ',', False), '12345678901234567890.12')\n        self.assertEqual(nformat(12345678901234567890.1234567890, ',', 2, 0, '.', False), '12345678901234567890,12')\n\n    def test_format_scientific_notation(self):\n        self.assertEqual(nformat(12345678901234567890.1234567890, '.', 2, 0, ',', False, use_l10n=False), '1.23e+21')\n        self.assertEqual(nformat(12345678901234567890.1234567890, ',', 2, 0, '.', False, use_l10n=False), '1,23e+21')\n\n    def test_format_none(self):\n        self.assertEqual(nformat(None, '.', 2, 0, ',', False), None)\n\n    def test_format_empty_string(self):\n        self.assertEqual(nformat('', '.', 2, 0, ',', False), '')\n\n    def test_format_l10n(self):\n        original_use_l10n = settings.USE_L10N\n        original_use_thousand_separator = settings.USE_THOUSAND_SEPARATOR\n        settings.USE_L10N = True\n        settings.USE_THOUSAND_SEPARATOR = True\n\n        self.assertEqual(nformat(1234567890, '.', 0, 0, ',', False), '1,234,567,890')\n        self.assertEqual(nformat(1234567890, ',', 0, 0, '.', False), '1.234.567.890')\n\n        settings.USE_L10N = original_use_l10n\n        settings.USE_THOUSAND_SEPARATOR = original_use_thousand_separator\n        \n    def test_format_non_uniform_grouping(self):\n        self.assertEqual(nformat(1234567890, '.', 0, (3, 2, 0), ',', False), '1,234,56,7890')\n"], "sample_63": ["\nimport datetime\nimport decimal\nimport enum\nimport functools\nimport os\nimport pathlib\nimport re\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.conf import settings\nfrom django.db import models\nfrom django.db.migrations.operations.base import Operation\nfrom django.db.migrations.serializer import (\n    BaseSequenceSerializer,\n    BaseSerializer,\n    ChoicesSerializer,\n    COMPILED_REGEX_TYPE,\n    DateTimeSerializer,\n    DatetimeDatetimeSerializer,\n    DecimalSerializer,\n    DeconstructableSerializer,\n    DictionarySerializer,\n    EnumSerializer,\n    FloatSerializer,\n    FrozensetSerializer,\n    FunctionTypeSerializer,\n    FunctoolsPartialSerializer,\n    IterableSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    PathLikeSerializer,\n    PathSerializer,\n    RegexSerializer,\n    SequenceSerializer,\n    SetSerializer,\n    SettingsReferenceSerializer,\n    Serializer,\n    TupleSerializer,\n    TypeSerializer,\n    UUIDSerializer,\n)\nfrom django.utils import timezone\n\nsettings.configure()\n\n\nclass TestSerializer(unittest.TestCase):\n    def test_base_serializer(self):\n        class TestSerializer(BaseSerializer):\n            def serialize(self):\n                return \"test\", set()\n\n        s = TestSerializer(\"test_value\")\n        self.assertEqual(s.serialize(), (\"test\", set()))\n\n    def test_base_sequence_serializer(self):\n        s = BaseSequenceSerializer([1, 2, 3])\n        with self.assertRaises(NotImplementedError):\n            s._format()\n        s = BaseSequenceSerializer([1, 2, 3])\n\n    def test_base_simple_serializer(self):\n        s = BaseSimpleSerializer(\"test_value\")\n        self.assertEqual(s.serialize(), (\"'test_value'\", set()))\n\n    def test_choices_serializer(self):\n        choices = models.Choices([(1, \"One\"), (2, \"Two\")])\n        s = ChoicesSerializer(choices)\n        self.assertEqual(s.serialize(), serializer_factory(choices.value).serialize())\n\n    def test_datetime_serializer(self):\n        s = DateTimeSerializer(datetime.date(2023, 10, 26))\n        self.assertEqual(s.serialize(), (repr(datetime.date(2023, 10, 26)), {\"import datetime\"}))\n        \n    def test_datetime_datetime_serializer(self):\n        # Test with and without timezone information\n        naive_datetime = datetime.datetime(2023, 10, 26, 10, 0, 0)\n        aware_datetime = timezone.make_aware(naive_datetime)\n        \n        s = DatetimeDatetimeSerializer(naive_datetime)\n        self.assertEqual(s.serialize(), (repr(naive_datetime), {\"import datetime\"}))\n\n        s = DatetimeDatetimeSerializer(aware_datetime)\n        self.assertEqual(s.serialize(), (repr(aware_datetime.astimezone(timezone.utc)), {\"import datetime\"}))\n\n    def test_decimal_serializer(self):\n        s = DecimalSerializer(decimal.Decimal(\"1.23\"))\n        self.assertEqual(s.serialize(), (repr(decimal.Decimal(\"1.23\")), {\"from decimal import Decimal\"}))\n\n    def test_deconstructable_serializer(self):\n        class TestDeconstructable(object):\n            def deconstruct(self):\n                return \"path.to.module\", [], {}\n\n        s = DeconstructableSerializer(TestDeconstructable())\n        self.assertEqual(\n            s.serialize(), (\"path.to.module()\", {\"import path.to.module\"})\n        )\n   \n    def test_dictionary_serializer(self):\n        s = DictionarySerializer({\"key\": \"value\"})\n        self.assertEqual(\n            s.serialize(), (\"{'key': 'value'}\", set())\n        )\n    \n    def test_enum_serializer(self):\n        class TestEnum(enum.Enum):\n            ONE = 1\n            TWO = 2\n\n        s = EnumSerializer(TestEnum.ONE)\n        self.assertEqual(\n            s.serialize(), (\"test_module.TestEnum.ONE\", {\"import test_module\"}),\n        )\n\n    def test_float_serializer(self):\n        s = FloatSerializer(3.14)\n        self.assertEqual(s.serialize(), (\"3.14\", set()))\n        s = FloatSerializer(float(\"inf\"))\n        self.assertEqual(s.serialize(), (\"float('inf')\", set()))\n        s = FloatSerializer(float(\"nan\"))\n        self.assertEqual(s.serialize(), (\"float('nan')\", set()))\n\n    def test_frozenset_serializer(self):\n        s = FrozensetSerializer(frozenset([1, 2, 3]))\n        self.assertEqual(s.serialize(), (\"frozenset([1, 2, 3])\", set()))\n    \n    def test_function_type_serializer(self):\n\n        def my_function():\n            pass\n\n        s = FunctionTypeSerializer(my_function)\n        self.assertEqual(\n            s.serialize(), (\"__main__.my_function\", {\"import __main__\"})\n        )\n\n    def test_functools_partial_serializer(self):\n        def my_function(a, b, c=3):\n            return a + b + c\n\n        partial_func = functools.partial(my_function, 1, c=4)\n        s = FunctoolsPartialSerializer(partial_func)\n\n        self.assertEqual(\n            s.serialize(),\n            (\"functools.partial(my_function, 1, c=4)\", \n             {\"import functools\", \"import __main__\"}),\n        )\n\n    def test_iterable_serializer(self):\n        s = IterableSerializer([1, 2, 3])\n        self.assertEqual(s.serialize(), (\"(1, 2, 3)\", set()))\n        s = IterableSerializer([])\n        self.assertEqual(s.serialize(), (\"()\", set()))\n        s = IterableSerializer((1,))\n        self.assertEqual(s.serialize(), (\"(1,)\", set()))\n\n    def test_model_field_serializer(self):\n        field = models.CharField(\n            max_length=100, primary_key=True, verbose_name=\"Test Field\"\n        )\n        s = ModelFieldSerializer(field)\n        self.assertEqual(\n            s.serialize(), (f'django.db.models.CharField(max_length=100, primary_key=True, verbose_name=\\\\\"Test Field\\\\\")', {'from django.db import models'})\n        )\n\n    def test_model_manager_serializer(self):\n        class TestManager(models.Manager):\n            pass\n\n        manager = TestManager()\n        s = ModelManagerSerializer(manager)\n        self.assertEqual(\n            s.serialize(), (\"test_module.TestManager()\", {\"import test_module\"}),\n        )\n\n    def test_operation_serializer(self):\n        # TODO: This requires mocking Django's migration system to create a sample Operation\n        pass\n\n    def test_pathlike_serializer(self):\n        s = PathLikeSerializer(os.path.join(\"path\", \"to\", \"file\"))\n        self.assertEqual(s.serialize(), (\"'path/to/file'\", set()))\n\n    def test_path_serializer(self):\n        s = PathSerializer(pathlib.Path(\"path/to/file\"))\n        self.assertEqual(s.serialize(), (\"pathlib.Path('path/to/file')\", {\"import pathlib\"}))\n        s = PathSerializer(pathlib.PurePath(\"path/to/file\"))\n        self.assertEqual(s.serialize(), (\"pathlib.PurePath('path/to/file')\", {\"import pathlib\"}))\n\n    def test_regex_serializer(self):\n        s = RegexSerializer(re.compile(r\"^test$\"))\n        self.assertEqual(s.serialize(), (\"re.compile('^test$')\", {\"import re\"}))\n\n    def test_sequence_serializer(self):\n        s = SequenceSerializer([1, 2, 3])\n        self.assertEqual(s.serialize(), (\"[1, 2, 3]\", set()))\n\n    def test_set_serializer(self):\n        s = SetSerializer({1, 2, 3})\n        self.assertEqual(s.serialize(), (\"{1, 2, 3}\", set()))\n        s = SetSerializer(set())\n        self.assertEqual(s.serialize(), (\"set()\", set()))\n\n    def test_settings_reference_serializer(self):\n        s = SettingsReferenceSerializer(settings.DEBUG)\n\n        self.assertEqual(\n            s.serialize(), (\"settings.DEBUG\", {\"from django.conf import settings\"})\n        )\n    \n    def test_tuple_serializer(self):\n        s = TupleSerializer((1, 2, 3))\n        self.assertEqual(s.serialize(), (\"(1, 2, 3)\", set()))\n        s = TupleSerializer((1,))\n        self.assertEqual(s.serialize(), \"(1,)\", set())\n    \n    def test_type_serializer(self):\n        s = TypeSerializer(int)\n        self.assertEqual(s.serialize(), (\"int\", set()))\n        s = TypeSerializer(type(None))\n        self.assertEqual(s.serialize(), (\"type(None)\", set()))\n\n    def test_uuid_serializer(self):\n        s = UUIDSerializer(uuid.UUID(\"a1b2c3d4-e5f6-7890-1234-567890abcdef\"))\n        self.assertEqual(\n            s.serialize(), (\"uuid.UUID('a1b2c3d4-e5f6-7890-1234-567890abcdef')\", {\"import uuid\"})\n        )\n\n    \n    def test_serializer_factory(self):\n        with self.assertRaises(ValueError):\n            serializer_factory(object())\n\n        class CustomSerializer(BaseSerializer):\n            def serialize(self):\n                return \"custom\", set()\n\n        Serializer.register(type(object()), CustomSerializer)\n\n        s = serializer_factory(object())\n        self.assertEqual(s.serialize(), (\"custom\", set()))\n\n        Serializer.unregister(type(object()))\n"], "sample_111": ["\nimport unittest\nimport warnings\nimport numpy as np\nfrom sklearn.svm.base import BaseSVC\nfrom sklearn.svm import SVC, LinearSVC, NuSVC\nfrom sklearn.datasets import make_classification, make_blobs\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n\nclass TestBaseSVC(unittest.TestCase):\n\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, n_features=20,\n                                              random_state=0)\n\n    def test_BaseSVC_init(self):\n        with self.assertRaises(TypeError):\n            SVC(kernel='invalid_kernel')\n        with self.assertRaises(ValueError):\n            SVC(C=-1)\n        with self.assertRaises(ValueError):\n            SVC(decision_function_shape='invalid_shape')\n        with self.assertRaises(ValueError):\n            SVC(class_weight='invalid_weight')\n\n    def test_BaseSVC_fit(self):\n        svc = SVC(random_state=0)\n        svc.fit(self.X, self.y)\n\n        self.assertTrue(hasattr(svc, 'support_'))\n        self.assertTrue(hasattr(svc, 'support_vectors_'))\n\n        with self.assertRaises(NotFittedError):\n            svc.predict(self.X)\n\n    def test_BaseSVC_predict(self):\n        svc = SVC(random_state=0)\n        svc.fit(self.X, self.y)\n        y_pred = svc.predict(self.X)\n        self.assertEqual(len(y_pred), len(self.y))\n        self.assertEqual(y_pred.shape[0], self.X.shape[0])\n\n    def test_BaseSVC_decision_function(self):\n        svc = SVC(random_state=0)\n        svc.fit(self.X, self.y)\n\n        decision_function = svc.decision_function(self.X)\n        self.assertTrue(decision_function.shape[0] == len(self.y))\n\n    def test_BaseSVC_predict_proba(self):\n        svc = SVC(probability=True, random_state=0)\n        svc.fit(self.X, self.y)\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\", UndefinedMetricWarning)\n            y_proba = svc.predict_proba(self.X)\n        self.assertTrue(y_proba.shape[0] == len(self.y))\n        self.assertTrue(y_proba.shape[1] == len(svc.classes_))\n\n    def test_BaseSVC_predict_log_proba(self):\n        svc = SVC(probability=True, random_state=0)\n        svc.fit(self.X, self.y)\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\", UndefinedMetricWarning)\n            y_log_proba = svc.predict_log_proba(self.X)\n        self.assertTrue(y_log_proba.shape[0] == len(self.y))\n        self.assertTrue(y_log_proba.shape[1] == len(svc.classes_))\n\n    def test_LinearSVC_fit(self):\n        X, y = make_blobs(n_samples=100, n_features=20, centers=2,random_state=0)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n        linear_svc = LinearSVC(random_state=0)\n        linear_svc.fit(X_train, y_train)\n        y_pred = linear_svc.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n\n        self.assertGreater(accuracy, 0.9)\n\n    def test_NuSVC_fit(self):\n        X, y = make_classification(n_samples=100, n_features=20)\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n        nu_svc = NuSVC(random_state=0)\n        nu_svc.fit(X_train, y_train)\n\n        y_pred = nu_svc.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n\n        self.assertGreater(accuracy, 0.8)\n"], "sample_57": ["\nimport unittest\nfrom unittest.mock import patch\n\nfrom django.utils.html import (\n    ConditionalEscape,\n    Urlizer,\n    avoid_wrapping,\n    conditional_escape,\n    escape,\n    escapejs,\n    format_html,\n    html_safe,\n    json_script,\n    linebreaks,\n    smart_urlquote,\n    strip_spaces_between_tags,\n    strip_tags,\n    urlize,\n)\n\nclass HTMLUtilsTests(unittest.TestCase):\n\n    def test_conditional_escape(self):\n        self.assertEqual(conditional_escape(\"Hello, world!\"), \"Hello, world!\")\n        self.assertEqual(conditional_escape(mark_safe(\"<b>Hello, world!</b>\")), \"<b>Hello, world!</b>\")\n        self.assertEqual(conditional_escape(\"<script>alert('XSS!')</script>\"), \"&lt;script&gt;alert(&#39;XSS!&#39;)&lt;/script&gt;\")\n\n    def test_escape(self):\n        self.assertEqual(escape(\"Hello, world!\"), \"Hello, world!\")\n        self.assertEqual(escape(\"<script>alert('XSS!')</script>\"), \"&lt;script&gt;alert(&#39;XSS!&#39;)&lt;/script&gt;\")\n\n    def test_escapejs(self):\n        self.assertEqual(escapejs(\"Hello, world!\"), \"Hello, world!\")\n        self.assertEqual(escapejs(\"<script>alert('XSS!')</script>\"), \"\\\\u003Cscript\\\\u003Ealert(\\\\u0027XSS!\\\\u0027)\\\\u003C/script\\\\u003E\")\n\n    def test_format_html(self):\n        self.assertEqual(format_html(\"Hello, {}!\", \"world\"), \"Hello, world!\")\n        self.assertEqual(format_html(\"<b>{}</b>\", mark_safe(\"<strong>Hello, world!</strong>\")), \"<b><strong>Hello, world!</strong></b>\")\n\n    def test_format_html_join(self):\n        self.assertEqual(format_html_join('\\n', \"<li>{} {}</li>\", ((u\"John\", u\"Doe\"), (u\"Jane\", u\"Doe\"))), \"<li>John Doe</li>\\n<li>Jane Doe</li>\")\n\n    def test_html_safe(self):\n        @html_safe\n        class MyClass:\n            def __str__(self):\n                return \"Hello, world!\"\n        \n        obj = MyClass()\n        self.assertEqual(str(obj), \"Hello, world!\")\n        self.assertTrue(isinstance(str(obj), SafeString))\n\n    def test_json_script(self):\n        self.assertEqual(json_script({\"hello\": \"world\"}), '<script type=\"application/json\">{\"hello\": \"world\"}</script>')\n        self.assertEqual(json_script({\"hello\": \"world\"}, element_id=\"my_script\"), '<script id=\"my_script\" type=\"application/json\">{\"hello\": \"world\"}</script>')\n\n    def test_linebreaks(self):\n        self.assertEqual(linebreaks(\"Hello\\nworld\"), \"<p>Hello</p>\\n<p>world</p>\")\n        self.assertEqual(linebreaks(\"Hello\\n\\nworld\\n\\n!\"), \"<p>Hello</p>\\n\\n<p>world</p>\\n\\n<p>!</p>\")\n\n    def test_smart_urlquote(self):\n        self.assertEqual(smart_urlquote(\"http://example.com\"), \"http://example.com\")\n        self.assertEqual(smart_urlquote(\"https://example.com\"), \"https://example.com\")\n        self.assertEqual(smart_urlquote(\"www.example.com\"), \"http://www.example.com\")\n        self.assertEqual(smart_urlquote(\"example.com\"), \"http://example.com\")\n        self.assertEqual(smart_urlquote(\"http://example.com?q=hello world\"), \"http://example.com?q=hello%20world\")\n        self.assertEqual(smart_urlquote(\"example.com/path?q=hello world\"), \"http://example.com/path?q=hello%20world\")\n\n    def test_strip_spaces_between_tags(self):\n        self.assertEqual(strip_spaces_between_tags(\"<p>Hello</p> <p>world</p>\"), \"<p>Hello</p><p>world</p>\")\n\n    def test_strip_tags(self):\n        self.assertEqual(strip_tags(\"Hello, <b>world!</b>\"), \"Hello, world!\")\n\n    def test_urlize(self):\n        self.assertEqual(urlize(\"http://example.com\"), '<a href=\"http://example.com\">http://example.com</a>')\n        self.assertEqual(urlize(\"www.example.com\"), '<a href=\"http://www.example.com\">www.example.com</a>')\n        self.assertEqual(urlize(\"example.com\"), '<a href=\"http://example.com\">example.com</a>')\n        self.assertEqual(urlize(\"Hello, world! http://example.com\"), \"Hello, world! <a href=\\\"http://example.com\\\">http://example.com</a>\")\n\n\n    def test_urlizer_simple(self):\n        urlizer_inst = Urlizer()\n        self.assertEqual(urlizer_inst(\"Hello, world! http://example.com\"), \"Hello, world! <a href=\\\"http://example.com\\\">http://example.com</a>\")\n\n    def test_avoid_wrapping(self):\n        self.assertEqual(avoid_wrapping(\"Hello, world!\"), \"Hello, world!\")\n \n\n"], "sample_22": ["\nfrom django.db.models import (\n    AutoField,\n    Avg,\n    BinaryField,\n    BooleanField,\n    Case,\n    CharField,\n    Count,\n    DateField,\n    DateTimeField,\n    DecimalField,\n    DurationField,\n    Exists,\n    Expression,\n    ExpressionList,\n    ExpressionWrapper,\n    F,\n    FloatField,\n    Func,\n    IntegerField,\n    Max,\n    Min,\n    Model,\n    OrderBy,\n    OuterRef,\n    Q,\n    StdDev,\n    Subquery,\n    Sum,\n    TimeField,\n    UUIDField,\n    Value,\n    Variance,\n    When,\n)\nfrom django.db.models.expressions import (\n    Col,\n    Combinable,\n    CombinedExpression,\n    RawSQL,\n    Ref,\n)\nfrom django.db.models.sql.datastructures import Join\nfrom django.db.models.sql.query import (\n    Query,\n    WhereNode,\n    ExtraWhere,\n    JoinPromoter,\n    add_to_dict,\n    get_order_dir,\n    is_reverse_o2o,\n)\nfrom django.db import connections, DEFAULT_DB_ALIAS\nimport warnings\n\n\nclass MyModel(Model):\n    field1 = CharField(max_length=10)\n    field2 = IntegerField()\n\n    class Meta:\n        app_label = 'test_app'\n\nclass TestQueryMethods:\n\n    def test_add_select(self):\n        q = Query(MyModel)\n        q.add_select(MyModel.field1)\n        assert q.select == (MyModel.field1,)\n\n    def test_add_select_field_names(self):\n        q = Query(MyModel)\n        q.add_select(['field1', 'field2'])\n        assert q.select == (MyModel.field1, MyModel.field2)\n\n    def test_add_ordering(self):\n        q = Query(MyModel)\n        q.add_ordering('field1')\n        assert q.order_by == ('field1',)\n\n    def test_add_ordering_lookup(self):\n        q = Query(MyModel)\n        q.add_ordering('-field1')\n        assert q.order_by == ('-field1',)\n\n    def test_add_filtering(self):\n        q = Query(MyModel)\n        q.where.add(Q(field1='value'), AND)\n        assert q.where.children\n\n    def test_add_extra(self):\n        q = Query(MyModel)\n        q.add_extra({'extra_field': 'value'})\n        assert q.extra\n\n    def test_set_select(self):\n        q = Query(MyModel)\n        q.set_select('field1')\n        assert q.select == (MyModel.field1,)\n\n    def test_set_group_by(self):\n        q = Query(MyModel)\n        q.set_group_by(True)\n        assert q.group_by == MyModel._meta.concrete_fields\n\n    def test_set_annotation_mask(self):\n        q = Query(MyModel)\n        q.set_annotation_mask(['field1'])\n        assert q.annotation_select_mask == {'field1'}\n\n    def test_set_extra_mask(self):\n        q = Query(MyModel)\n        q.set_extra_mask(['extra_field'])\n        assert q.extra_select_mask == {'extra_field'}\n\n    def test_set_values(self):\n        q = Query(MyModel)\n        q.set_values(['field1'])\n        assert q.values_select == ('field1',)\n\n    def test_get_loaded_field_names(self):\n        q = Query(MyModel)\n        q.add_deferred_loading(['field1'])\n        assert q.get_loaded_field_names() == {MyModel._meta.model.__name__: {'field2'}}\n\n    def test_get_order_dir(self):\n        assert get_order_dir('field1') == ('field1', 'ASC')\n        assert get_order_dir('-field1') == ('field1', 'DESC')\n\n    def test_is_reverse_o2o(self):\n        assert is_reverse_o2o(MyModel._meta.get_field('field1')) is False\n        # Replace this with a model that has a reverse-o2o relationship\n\n    def test_add_to_dict(self):\n        data = {}\n        add_to_dict(data, 'key', 'value')\n        assert data == {'key': {'value'}}\n\n    def test_JoinPromoter_add_votes(self):\n        promoter = JoinPromoter('AND', 2, False)\n        promoter.add_votes(['table1'])\n        assert promoter.votes == Counter({'table1': 1})\n\n    def test_JoinPromoter_update_join_types(self):\n        # Requires a Query object with joins and a mock database connection.\n        pass\n    \n\n\n\n"], "sample_71": ["\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.testing.decorators import image_comparison\nimport matplotlib.colors as mcolors\nfrom matplotlib.colorbar import Colorbar, make_axes, make_axes_gridspec\nfrom matplotlib.ticker import FixedLocator, LogFormatter\nfrom matplotlib.transforms import Bbox\n\n\n@image_comparison(baseline_images=['colorbar_orientation'],\n                  extensions=['png'])\ndef test_colorbar_orientation():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, orientation='horizontal')\n\n\n@image_comparison(baseline_images=['colorbar_ticklocation'],\n                  extensions=['png'])\ndef test_colorbar_ticklocation():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, ticklocation='right')\n\n\n@image_comparison(baseline_images=['colorbar_extend'],\n                  extensions=['png'])\ndef test_colorbar_extend():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis', vmin=0, vmax=5)\n    fig.colorbar(im, extend='both')\n\n\n@image_comparison(baseline_images=['colorbar_label'],\n                  extensions=['png'])\ndef test_colorbar_label():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, label='My Colorbar')\n\n\n@image_comparison(baseline_images=['colorbar_ticks'],\n                  extensions=['png'])\ndef test_colorbar_ticks():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, ticks=[1, 2, 3])\n\n\n@image_comparison(baseline_images=['colorbar_format'],\n                  extensions=['png'])\ndef test_colorbar_format():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, format='%.2f')\n\n\n@image_comparison(baseline_images=['colorbar_log'],\n                  extensions=['png'])\ndef test_colorbar_log():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis', norm=mcolors.LogNorm())\n    fig.colorbar(im)\n\n\ndef test_colorbar_fraction():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, fraction=0.1)\n\ndef test_colorbar_shrink():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, shrink=0.5)\n\ndef test_colorbar_pad():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, pad=0.2)\n\ndef test_colorbar_aspect():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, aspect=2)\n\ndef test_colorbar_anchor():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, anchor=(0, 0))\n\ndef test_colorbar_panchor():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, panchor=(1, 0))\n\ndef test_colorbar_boundaries():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, boundaries=[0, 1, 2, 3, 4])\n\ndef test_colorbar_extendfrac():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, extendfrac=0.1)\n\ndef test_colorbar_spacing():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, spacing='proportional')\n\ndef test_colorbar_ticks_locators():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, ticks=FixedLocator([1, 2, 3]))\n\ndef test_colorbar_ticks_formatters():\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]], cmap='viridis')\n    fig.colorbar(im, format=LogFormatter())\n\n\ndef test_make_axes_basic():\n    fig, ax = plt.subplots()\n    cax, kwargs = make_axes(ax, location='right')\n\ndef test_make_axes_gridspec():\n    fig, ax = plt.subplots()\n    cax, kwargs = make_axes_gridspec(ax, location='right')\n    \n    \n    \n\n"], "sample_9": ["\nimport io\nimport pytest\n\nfrom astropy.io.ascii.qdp import (\n    _get_lines_from_file,\n    _read_table_qdp,\n    _write_table_qdp,\n    QDPHeader,\n    QDPData,\n    QDP,\n    _line_type,\n    _get_type_from_list_of_lines,\n    _interpret_err_lines,\n    _understand_err_col,\n)\nfrom astropy.table import Table\nfrom astropy.utils.data import get_pkg_data_filename\n\ndef test__line_type():\n    assert _line_type(\" 21345.45\") == \"data,1\"\n    assert _line_type(\" 21345.45 1.53e-3 1e-3 .04 NO nan\") == \"data,6\"\n    assert _line_type(\" 21345.45,1.53e-3,1e-3,.04,NO,nan\", delimiter=\",\") == \"data,6\"\n    assert _line_type(\" 21345.45 ! a comment to disturb\") == \"data,1\"\n    assert _line_type(\"NO NO NO NO NO\") == \"new\"\n    assert _line_type(\"NO,NO,NO,NO,NO\", delimiter=\",\") == \"new\"\n    assert _line_type(\"N O N NOON OON O\") == \"new\"\n    with pytest.raises(ValueError):\n        _line_type(\" some non-comment gibberish\")\n\n\ndef test__get_type_from_list_of_lines():\n    lines = [\"543 12 456.0\", \"23\"]\n    types, ncol = _get_type_from_list_of_lines(lines)\n    assert types == [\"data,3\", \"data,1\"]\n    assert ncol == 3\n\n    lines = [\"! A comment\", \"543 12 456.0\"]\n    types, ncol = _get_type_from_list_of_lines(lines)\n    assert types == [\"comment\", \"data,3\"]\n    assert ncol == 3\n\n    lines.append(\"23\")\n    with pytest.raises(ValueError):\n        _get_type_from_list_of_lines(lines)\n\ndef test__interpret_err_lines():\n\n    colnames = _interpret_err_lines(None, 2)\n    assert colnames == [\"col1\", \"col2\"]\n\n    colnames = _interpret_err_lines({'terr': [1]}, 3)\n    assert colnames == [\"col1\", \"col1_perr\", \"col1_nerr\", \"col2\"]\n\n    colnames = _interpret_err_lines({'serr': [2]}, 3)\n    assert colnames == [\"col1\", \"col2\", \"col2_err\", \"col3\"]\n\n\ndef test__understand_err_col():\n    colnames = ['a', 'a_err', 'b', 'b_perr', 'b_nerr']\n    serr, terr = _understand_err_col(colnames)\n    assert np.allclose(serr, [1])\n    assert np.allclose(terr, [2])\n\n    colnames = ['a', 'a_nerr']\n    with pytest.raises(ValueError):\n        _understand_err_col(colnames)\n\n    colnames = ['a', 'a_perr']\n\n    with pytest.raises(ValueError):\n        _understand_err_col(colnames)\n\n\n\ndef test__get_lines_from_file():\n    filename = get_pkg_data_filename('data/qdp_data.qdp')\n    lines = _get_lines_from_file(filename)\n    assert len(lines) == 14\n    assert lines[0].startswith(\"!\")\n\n\n\ndef test__read_table_qdp():\n\n    filename = get_pkg_data_filename('data/qdp_data.qdp')\n    table = _read_table_qdp(filename)\n    assert len(table) == 3\n    assert table['col1'][0] == 53000.5\n    assert table['col1_perr'][0] == 0.25\n\n\n    filename = get_pkg_data_filename('data/qdp_data.qdp')\n    table = _read_table_qdp(filename, table_id=1)\n    assert len(table) == 3\n    assert table['col1'][0] == 54000.5\n    assert table['col1_perr'][0] == 1.25\n\ndef test__write_table_qdp():\n    table = Table({'col1': [1,2,3], 'col2': [4,5,6], 'col3': [7,8,9]})\n    output_string = _write_table_qdp(table)\n\n    assert output_string[0] == '! Initial comments line 1'\n\n\ndef test_QDP():\n\n    t = Table.read(get_pkg_data_filename('data/qdp_data.qdp'), format='ascii.qdp', table_id=1)\n    assert t['col1'][0] == 54000.5\n    assert t['col1_nerr'][0] == -1.5\n\n    t.write('test_qdp.qdp')\n\n\n\n"], "sample_115": ["\nimport unittest\nfrom unittest.mock import MagicMock\nimport numpy as np\n\nfrom sklearn.utils._set_output import _wrap_in_pandas_container\nfrom sklearn.utils._set_output import _safe_set_output\nfrom sklearn.utils._set_output import _SetOutputMixin\nfrom sklearn.utils._set_output import _get_output_config\nfrom sklearn.utils._set_output import _wrap_method_output\nfrom sklearn.utils._set_output import _auto_wrap_is_configured\nfrom sklearn.utils.testing import assert_array_equal\nfrom pandas import DataFrame\n\n\nclass TestSetOutputMixin(unittest.TestCase):\n\n    def test_set_output_transform_default(self):\n        class TestEstimator(_SetOutputMixin):\n            def __init__(self):\n                self._sklearn_output_config = {}\n            def transform(self, X):\n                return X\n\n        estimator = TestEstimator()\n        estimator.set_output(transform=\"default\")\n        self.assertEqual(estimator._sklearn_output_config[\"transform\"], \"default\")\n\n    def test_set_output_transform_pandas(self):\n        class TestEstimator(_SetOutputMixin):\n            def __init__(self):\n                self._sklearn_output_config = {}\n            def transform(self, X):\n                return X\n            def get_feature_names_out(self):\n                return [\"feature1\"]\n        estimator = TestEstimator()\n        estimator.set_output(transform=\"pandas\")\n        self.assertEqual(estimator._sklearn_output_config[\"transform\"], \"pandas\")\n\n    def test_set_output_transform_none(self):\n        class TestEstimator(_SetOutputMixin):\n            def __init__(self):\n                self._sklearn_output_config = {}\n            def transform(self, X):\n                return X\n        estimator = TestEstimator()\n        estimator.set_output(transform=None)\n        self.assertFalse(\"transform\" in estimator._sklearn_output_config)\n\n    def test_wrap_method_output(self):\n        class TestEstimator(_SetOutputMixin):\n            def __init__(self):\n                self._sklearn_output_config = {\"transform\": \"pandas\"}\n            def get_feature_names_out(self):\n                return [\"feature1\"]\n            def transform(self, X):\n                return X\n        estimator = TestEstimator()\n        wrapped_transform = _wrap_method_output(estimator.transform, \"transform\")\n        data = np.array([[1, 2], [3, 4]])\n        result = wrapped_transform(estimator, data)\n        self.assertIsInstance(result, DataFrame)\n        assert_array_equal(result.values, data)\n\n    def test_auto_wrap_is_configured(self):\n        class TestEstimator(_SetOutputMixin):\n          def get_feature_names_out(self):\n              return [\"feature1\"]\n        estimator = TestEstimator()\n        estimator._sklearn_auto_wrap_output_keys = {\"transform\"}\n        self.assertTrue(_auto_wrap_is_configured(estimator))\n\n        \nclass TestWrapInPandasContainer(unittest.TestCase):\n    def test_wrap_in_pandas_container_dataframe(self):\n        data = DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        result = _wrap_in_pandas_container(data, columns=None, index=None)\n        self.assertIs(result, data)\n\n    def test_wrap_in_pandas_container_ndarray_no_columns(self):\n        data = np.array([[1, 2], [3, 4]])\n        result = _wrap_in_pandas_container(data, columns=None, index=None)\n        self.assertIsInstance(result, DataFrame)\n        assert_array_equal(result.values, data)\n\n    def test_wrap_in_pandas_container_ndarray_with_columns(self):\n        data = np.array([[1, 2], [3, 4]])\n        result = _wrap_in_pandas_container(data, columns=['a', 'b'], index=None)\n        self.assertIsInstance(result, DataFrame)\n        assert_array_equal(result.values, data)\n        self.assertEqual(list(result.columns), ['a', 'b'])\n\n\n\nclass TestGetOutputConfig(unittest.TestCase):\n    def test_get_output_config_global(self):\n        method = \"transform\"\n        config = _get_output_config(method)\n        self.assertEqual(config[\"dense\"], \"default\")\n\nclass TestSafeSetOutput(unittest.TestCase):\n    def test_safe_set_output_no_transform(self):\n        class EstimatorMock:\n            pass\n        estimator = EstimatorMock()\n        _safe_set_output(estimator, transform=\"pandas\")\n\n    def test_safe_set_output_transform(self):\n        class EstimatorMock:\n            def transform(self, X):\n                return X\n            def set_output(self, *, transform):\n                self.transform_config = transform\n        estimator = EstimatorMock()\n        _safe_set_output(estimator, transform=\"pandas\")\n        self.assertEqual(estimator.transform_config, \"pandas\")\n"], "sample_116": ["\nimport unittest\nfrom sympy import symbols, Eq, sin, cos, tan, MatrixSymbol, Matrix, IndexedBase, Idx, Piecewise, ccode, Function\nfrom sympy.printing.ccode import CCodePrinter\nfrom sympy.core.compatibility import range\n\nclass TestCCodePrinter(unittest.TestCase):\n    def test_basic_symbols(self):\n        x = symbols('x')\n        self.assertEqual(ccode(x), 'x')\n\n    def test_integers(self):\n        self.assertEqual(ccode(1), '1')\n        self.assertEqual(ccode(10), '10')\n\n    def test_floats(self):\n        self.assertEqual(ccode(1.5), '1.5')\n        self.assertEqual(ccode(1.0/3.0), '1.0L/3.0L')\n\n    def test_rationals(self):\n        self.assertEqual(ccode(1/2), '1.0L/2.0L')\n\n    def test_powers(self):\n        x = symbols('x')\n        self.assertEqual(ccode(x**2), 'pow(x, 2)')\n        self.assertEqual(ccode(x**0.5), 'sqrt(x)')\n        self.assertEqual(ccode(2**x), 'pow(2, x)')\n\n    def test_trigonometric_functions(self):\n        x = symbols('x')\n        self.assertEqual(ccode(sin(x)), 'sin(x)')\n        self.assertEqual(ccode(cos(x)), 'cos(x)')\n        self.assertEqual(ccode(tan(x)), 'tan(x)')\n\n    def test_matrix_symbol(self):\n        A = MatrixSymbol('A', 2, 2)\n        self.assertEqual(ccode(A), 'double A[2][2];')\n\n    def test_matrix(self):\n        A = Matrix([[1, 2], [3, 4]])\n        self.assertEqual(ccode(A), 'double A[2][2] = {{1, 2}, {3, 4}};')\n\n    def test_indexed(self):\n        i = symbols('i')\n        x = IndexedBase('x', shape=(5,))\n        self.assertEqual(ccode(x[i]), 'x[i]')\n\n    def test_piecewise(self):\n        x = symbols('x')\n        pw = Piecewise((x + 1, x > 0), (x, True))\n        self.assertEqual(ccode(pw), 'if (x > 0) {\\n'\n                                   '    x + 1;\\n'\n                                   '} else {\\n'\n                                   '   x;\\n'\n                                   '}')\n\n    def test_function(self):\n        f = Function('f')\n        x = symbols('x')\n        self.assertEqual(ccode(f(x)), 'f(x)')\n\n    def test_assign_to(self):\n        x = symbols('x')\n        y = symbols('y')\n\n        self.assertEqual(ccode(x + 1, assign_to=y), 'y = x + 1;')\n        self.assertEqual(ccode(sin(x), assign_to=y), 'y = sin(x);')\n\n    def test_dereference(self):\n        x = symbols('x')\n        printer = CCodePrinter(dereference=[x])\n        self.assertEqual(printer.doprint(x), '(*x)')\n\n    def test_indexed_with_loops(self):\n        i = Idx('i', 3)\n        A = IndexedBase('A', shape=(3,))\n        expr = Eq(A[i], i**2)\n\n        code = ccode(expr, contract=True)\n        expected = 'for (int i=0; i<3; i++){\\n' \\\n                   '   A[i] = pow(i, 2);\\n' \\\n                   '}'\n        self.assertEqual(code, expected)\n\n    def test_user_functions(self):\n        x = symbols('x')\n        custom_functions = {'my_func': 'MY_FUNC'}\n        printer = CCodePrinter(user_functions=custom_functions)\n        self.assertEqual(printer.doprint(Function('my_func')(x)), 'MY_FUNC(x)')\n\n"], "sample_2": ["\nimport numpy as np\nfrom astropy.modeling import models\n\nfrom astropy.modeling.separable import (_coord_matrix, is_separable, _cdot, _cstack, _arith_oper, separability_matrix)\nfrom astropy.modeling.mappings import Mapping\n\ndef test_coord_matrix_model():\n    shift = models.Shift(1)\n    coord_mat = _coord_matrix(shift, 'left', shift.n_outputs)\n    assert np.array_equal(coord_mat, np.array([[1, 0], [0, 0]]))\n\ndef test_coord_matrix_mapping():\n    mapping = Mapping([0, 1, 0, 1])\n    coord_mat = _coord_matrix(mapping, 'left', mapping.n_outputs)\n    assert np.array_equal(coord_mat, np.array([[1, 0, 0, 0],\n                                              [0, 1, 0, 0],\n                                              [0, 0, 0, 0],\n                                              [0, 0, 0, 1]]))\n\ndef test_is_separable_simple():\n    shift = models.Shift(1)\n    assert np.array_equal(is_separable(shift), np.array([True]))\ndef test_is_separable_compound():\n    shift1 = models.Shift(1)\n    shift2 = models.Shift(2)\n    compound_model = shift1 & shift2\n    assert np.array_equal(is_separable(compound_model), np.array([True, True]))\n\ndef test_is_separable_not_separable():\n    shift1 = models.Shift(1)\n    rotate = models.Rotation2D(30)\n    compound_model = shift1 | rotate\n    assert np.array_equal(is_separable(compound_model), np.array([False, False]))\n\ndef test_separability_matrix_simple():\n    shift = models.Shift(1)\n    assert np.array_equal(separability_matrix(shift), np.array([[True, False]]))\n\ndef test_separability_matrix_compound_separable():\n    shift1 = models.Shift(1)\n    shift2 = models.Shift(2)\n    compound_model = shift1 & shift2\n    assert np.array_equal(separability_matrix(compound_model), np.array([[True, False], [False, True]]))\n\ndef test_separability_matrix_compound_not_separable():\n    shift1 = models.Shift(1)\n    rotate = models.Rotation2D(30)\n    compound_model = shift1 | rotate\n    assert np.array_equal(separability_matrix(compound_model), np.array([[True, True], [True, True]]))\n\ndef test_cdot():\n    left = np.array([[1, 0],\n                    [0, 1]])\n    right = np.array([[0, 1], [1, 0]])\n    assert np.array_equal(_cdot(left, right), np.array([[0, 1], [1, 0]]))\n\ndef test_cstack():\n    left = np.array([[1, 0],\n                   [0, 1]])\n    right = np.array([[0, 1], [1, 0]])\n    assert np.array_equal(_cstack(left, right), np.array([[1, 0, 0, 1],\n                                                         [0, 1, 1, 0]]))\n\ndef test_arith_oper():\n    left = np.array([[1, 0], [0, 1]])\n    right = np.array([[0, 1], [1, 0]])\n    assert np.array_equal(_arith_oper(left, right), np.ones((2, 2)))\n\n"], "sample_64": ["\nfrom django.contrib.admin.templatetags.admin_modify import (\n    prepopulated_fields_js,\n    submit_row,\n    change_form_object_tools_tag,\n    cell_count,\n    prepopulated_fields_js_tag,\n    submit_row_tag,\n)\nfrom django.template import Context\nfrom django.forms import ModelForm\nfrom django.contrib.admin.widgets import RelatedFieldWidgetWrapper\n\nclass MockInlineAdminForm:\n    def __init__(self, *args, **kwargs):\n        self.original = None\n        self.prepopulated_fields = []\n        self.formset = kwargs.get('formset', None)\n\nclass MockModelForm:\n    def __init__(self, *args, **kwargs):\n        self.prepopulated_fields = kwargs.get('prepopulated_fields', [])\n        self.field = kwargs.get('field', None)\n\n        \ndef test_prepopulated_fields_js():\n    context = Context({'adminform': MockModelForm(prepopulated_fields=[{'field': MockModelForm(field='test'), 'dependencies': []}])})\n    prepopulated_fields_js(context)\n    assert 'prepopulated_fields_json' in context\n\ndef test_submit_row():\n    context = Context({\n        'add': True,\n        'change': False,\n        'is_popup': False,\n        'save_as': False,\n        'has_add_permission': True,\n        'has_change_permission': False,\n        'has_view_permission': True,\n        'has_editable_inline_admin_formsets': False,\n    })\n    submit_row(context)\n    assert 'show_save_and_add_another' in context\n\ndef test_cell_count():\n    mock_form = MockInlineAdminForm(formset={'can_delete': True})\n    mock_form.formset = {'can_delete': True}\n    assert cell_count(mock_form) == 2\n\n\n\n"], "sample_88": ["\nfrom _pytest import nodes\nfrom _pytest.mark.structures import MarkDecorator\nfrom _pytest.warning_types import PytestWarning\n\nimport pytest\nimport py\n\ndef test_Collector_collect():\n    collector = nodes.Collector(\"example\", None)\n    with pytest.raises(NotImplementedError):\n        collector.collect()\n\ndef test_Collector_repr_failure():\n    collector = nodes.Collector(\"example\", None)\n    excinfo = pytest.ExceptionInfo(Exception())\n    collector._repr_failure_py(excinfo)\n\ndef test_Node_warn():\n    node = nodes.Node(\"example\", None)\n    with pytest.raises(ValueError):\n        node.warn(\"wrong_type\")\n\n    warning = PytestWarning(\"some message\")\n    node.warn(warning)\n\ndef test_Node_nodeid():\n    node = nodes.Node(\"example\", None)\n    assert node.nodeid == \"example\"\n    parent_node = nodes.Node(\"parent\", None)\n    child_node = nodes.Node(\"child\", parent_node)\n    assert child_node.nodeid == \"parent::child\"\n\ndef test_Node_add_marker():\n    node = nodes.Node(\"example\", None)\n    node.add_marker(\"mark1\")\n    assert node.own_markers == [MarkDecorator(\"mark1\").mark]\n\ndef test_Node_iter_markers():\n    node = nodes.Node(\"example\", None)\n    node.add_marker(\"mark1\")\n    for mark in node.iter_markers():\n        assert mark.name == \"mark1\"\n    node.add_marker(\"mark2\")\n    marks = list(node.iter_markers())\n    assert len(marks) == 2\n    assert any(mark.name == \"mark2\" for mark in marks)\n\ndef test_Node_get_closest_marker():\n    node = nodes.Node(\"example\", None)\n    node.add_marker(\"mark1\")\n    node.add_marker(\"mark2\")\n    assert node.get_closest_marker(\"mark2\") == MarkDecorator(\"mark2\").mark\n    assert node.get_closest_marker(\"mark3\") is None\n\ndef test_Node_listextrakeywords():\n    node = nodes.Node(\"example\", None)\n    node.extra_keyword_matches.add(\"keyword1\")\n    assert len(node.listextrakeywords()) == 1\n\ndef test_Node_listnames():\n    node = nodes.Node(\"example\", None)\n    parent_node = nodes.Node(\"parent\", None)\n    node.parent = parent_node\n    assert node.listnames() == [\"parent\", \"example\"]\n\ndef test_Node_addfinalizer():\n    node = nodes.Node(\"example\", None)\n    def fin():\n        pass\n    node.addfinalizer(fin)\n   \n\ndef test_Node_getparent():\n    node = nodes.Node(\"example\", None)\n    parent_node = nodes.Node(\"parent\", None)\n    node.parent = parent_node\n    assert node.getparent(nodes.Node) == parent_node\n\ndef test_Node_from_parent():\n    parent = nodes.Node(\"parent\", None)\n    child = nodes.Node.from_parent(parent, name='child')\n    assert child.name == \"child\"\n\ndef test_fscollector_from_parent():\n    parent = nodes.FSCollector(py.path.local('.'), None)\n    child = nodes.FSCollector.from_parent(parent, fspath=py.path.local('test'))\n    assert child.name == \"test\"\n\ndef test_File_runtest():\n    file_node = nodes.File(\"test_file.py\", None)\n    with pytest.raises(NotImplementedError):\n        file_node.runtest()\n\n\n"], "sample_8": ["\nimport unittest\nfrom datetime import datetime\nfrom django.utils.http import (\n    base36_to_int,\n    escape_leading_slashes,\n    http_date,\n    int_to_base36,\n    is_safe_url,\n    is_same_domain,\n    parse_etags,\n    parse_http_date,\n    quote_etag,\n    url_has_allowed_host_and_scheme,\n    urlencode,\n    urlquote,\n    urlquote_plus,\n    urlsafe_base64_decode,\n    urlsafe_base64_encode,\n    urlunquote,\n    urlunquote_plus,\n)\n\nclass HttpUtilsTests(unittest.TestCase):\n\n    def test_base36_to_int(self):\n        self.assertEqual(base36_to_int('0'), 0)\n        self.assertEqual(base36_to_int('1'), 1)\n        self.assertEqual(base36_to_int('a'), 10)\n        self.assertEqual(base36_to_int('z'), 35)\n        self.assertEqual(base36_to_int('10'), 36)\n        self.assertEqual(base36_to_int('ff'), 255)\n        self.assertRaises(ValueError, base36_to_int, '1000000000000')\n\n    def test_int_to_base36(self):\n        self.assertEqual(int_to_base36(0), '0')\n        self.assertEqual(int_to_base36(1), '1')\n        self.assertEqual(int_to_base36(10), 'a')\n        self.assertEqual(int_to_base36(35), 'z')\n        self.assertEqual(int_to_base36(36), '10')\n        self.assertEqual(int_to_base36(255), 'ff')\n        self.assertRaises(ValueError, int_to_base36, -1)\n\n    def test_http_date(self):\n        epoch = 1234567890\n        self.assertEqual(http_date(epoch), formatdate(epoch, usegmt=True))\n\n    def test_parse_http_date(self):\n        self.assertEqual(parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT'), 783878977)\n        self.assertEqual(parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT'), 783878977)\n        self.assertEqual(parse_http_date('Sun Nov  6 08:49:37 1994'), 783878977)\n\n    def test_parse_http_date_safe(self):\n        self.assertEqual(parse_http_date_safe('Sun, 06 Nov 1994 08:49:37 GMT'), 783878977)\n        self.assertIsNone(parse_http_date_safe('invalid date'))\n\n    def test_urlsafe_base64_encode(self):\n        self.assertEqual(urlsafe_base64_encode(b'hello'), 'aGVsbG8')\n\n    def test_urlsafe_base64_decode(self):\n        self.assertEqual(urlsafe_base64_decode('aGVsbG8'), b'hello')\n\n    def test_parse_etags(self):\n        self.assertEqual(parse_etags('*'), ['*'])\n        self.assertEqual(parse_etags('\"etag1\", \"etag2\"'), ['etag1', 'etag2'])\n        self.assertEqual(parse_etags('\"etag1\",'), ['etag1'])\n\n    def test_quote_etag(self):\n        self.assertEqual(quote_etag('\"etag\"'), '\"etag\"')\n        self.assertEqual(quote_etag('etag'), '\"etag\"')\n\n    def test_is_same_domain(self):\n        self.assertTrue(is_same_domain('example.com', 'example.com'))\n        self.assertTrue(is_same_domain('example.com', '.example.com'))\n        self.assertTrue(is_same_domain('foo.example.com', '.example.com'))\n        self.assertFalse(is_same_domain('example.org', 'example.com'))\n\n    def test_url_has_allowed_host_and_scheme(self):\n        self.assertTrue(url_has_allowed_host_and_scheme('https://example.com/path', allowed_hosts={'example.com'}, require_https=True))\n        self.assertFalse(url_has_allowed_host_and_scheme('http://example.com/path', allowed_hosts={'example.com'}, require_https=True))\n        self.assertTrue(url_has_allowed_host_and_scheme('http://example.com/path', allowed_hosts={'example.com'}, require_https=False))\n        self.assertFalse(url_has_allowed_host_and_scheme('http://badhost.com/path', allowed_hosts={'example.com'}, require_https=False))\n        self.assertFalse(url_has_allowed_host_and_scheme('', allowed_hosts={'example.com'}, require_https=False))\n\n\n    def test_urlencode(self):\n\n        self.assertEqual(\n            urlencode({'key1': 'value1', 'key2': 'value2'}),\n            'key1=value1&key2=value2',\n        )\n\n        self.assertEqual(\n            urlencode({'key1': ['value1', 'value2'], 'key2': 'value2'}),\n            'key1=value1&key1=value2&key2=value2',\n        )\n\n    def test_urlquote(self):\n        self.assertEqual(urlquote('http://example.com'), 'http%3A%2F%2Fexample.com')\n\n    def test_urlquote_plus(self):\n        self.assertEqual(urlquote_plus('http://example.com/path?query=string'), 'http%3A%2F%2Fexample.com%2Fpath%3Fquery%3Dstring')\n\n    def test_urlunquote(self):\n        self.assertEqual(urlunquote('http%3A%2F%2Fexample.com'), 'http://example.com')\n\n    def test_urlunquote_plus(self):\n        self.assertEqual(urlunquote_plus('http%3A%2F%2Fexample.com%2Fpath%3Fquery%3Dstring'), 'http://example.com/path?query=string')\n\n    def test_escape_leading_slashes(self):\n        self.assertEqual(escape_leading_slashes('/path/to/resource'), '/%2Fpath/to/resource')\n        self.assertEqual(escape_leading_slashes('http://example.com'), 'http://example.com')\n\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_156": ["\nimport unittest\nfrom sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo,  kibi\nfrom sympy.physics.units import meter, Unit\n\nclass TestPrefixes(unittest.TestCase):\n\n    def test_prefix_creation(self):\n        self.assertEqual(kilo.name, 'kilo')\n        self.assertEqual(kilo.abbrev, 'k')\n        self.assertEqual(kilo.scale_factor, 1000)\n        self.assertEqual(kilo.base, 10)\n\n        self.assertEqual(kibi.name, 'kibi')\n        self.assertEqual(kibi.abbrev, 'Ki')\n        self.assertEqual(kibi.scale_factor, 1024)\n        self.assertEqual(kibi.base, 2)\n\n    def test_prefix_multiplication(self):\n        self.assertEqual(kilo * meter, 1000*meter)\n        self.assertEqual(kibi * meter, 1024*meter)\n        self.assertEqual(kilo * kilo, 1000000)\n\n    def test_prefix_division(self):\n        self.assertEqual(kilo / meter, 1000 / meter)\n        self.assertEqual(kibi / meter, 1024 / meter)\n        self.assertEqual(kilo / kilo, 1)\n\n    def test_prefix_unit(self):\n        prefixes = {'k': PREFIXES['k'], 'm': PREFIXES['m'], 'c': PREFIXES['c']}\n        prefixed_units = prefix_unit(meter, prefixes)\n        self.assertIn(meter*1000, prefixed_units)\n        self.assertIn(meter/100, prefixed_units)\n        self.assertEqual(len(prefixed_units), 3)\n\n    def test_prefix_latex(self):\n        self.assertEqual(str(kilo), 'k')\n        self.assertEqual(kilo._latex(None), r'\\text{k}')\n        self.assertEqual(str(micro), 'mu')\n        self.assertEqual(micro._latex(None), r'\\mu')\n\n\n"], "sample_95": ["\nfrom _pytest.tmpdir import get_user\nfrom _pytest.tmpdir import TempdirFactory\nfrom _pytest.tmpdir import TempPathFactory\nfrom _pytest.tmpdir import pytest_configure\nfrom _pytest.tmpdir import tmpdir_factory\nfrom _pytest.tmpdir import tmp_path_factory\nfrom _pytest.tmpdir import _mk_tmp\nfrom _pytest.tmpdir import tmpdir\nfrom _pytest.tmpdir import tmp_path\nfrom pathlib import Path\nfrom _pytest.config import Config\nfrom _pytest.monkeypatch import MonkeyPatch\n\nimport os\nimport tempfile\nimport pytest\n\n\ndef test_get_user():\n    # Mock getpass.getuser()\n    with patch('getpass.getuser', return_value='testuser'):\n        assert get_user() == 'testuser'\n\ndef test_get_user_error():\n    # Simulate getpass.getuser() raising KeyError\n    with patch('getpass.getuser', side_effect=KeyError):\n        assert get_user() is None\n\ndef test_temp_path_factory_from_config():\n    config = Config()\n    config.option.basetemp = Path('/tmp/test_basetemp')\n    factory = TempPathFactory.from_config(config, _ispytest=True)\n    assert factory._given_basetemp == Path('/tmp/test_basetemp')\n\ndef test_temp_path_factory_mktemp_numbered():\n    factory = TempPathFactory(_given_basetemp=Path('/tmp'), trace=None, _basetemp=None)\n    temp_dir = factory.mktemp('test', numbered=True)\n    assert temp_dir.name.startswith('test-')\n\ndef test_temp_path_factory_mktemp_not_numbered():\n    factory = TempPathFactory(_given_basetemp=Path('/tmp'), trace=None, _basetemp=None)\n    temp_dir = factory.mktemp('test', numbered=False)\n    assert temp_dir.name == 'test'\n\ndef test_temp_path_factory_getbasetemp_existing():\n    factory = TempPathFactory(_given_basetemp=Path('/tmp/test_basetemp'), trace=None, _basetemp=None)\n    basetemp = factory.getbasetemp()\n    assert basetemp == Path('/tmp/test_basetemp')\n\ndef test_temp_path_factory_getbasetemp_default():\n    factory = TempPathFactory(None, trace=None, _basetemp=None)\n    basetemp = factory.getbasetemp()\n    assert basetemp.name.startswith('pytest-')\n\ndef test_tempdir_factory_mktemp():\n    tmppath_factory = TempPathFactory(_given_basetemp=Path('/tmp'), trace=None, _basetemp=None)\n    tempdir_factory = TempdirFactory(tmppath_factory, _ispytest=True)\n    temp_dir = tempdir_factory.mktemp('test', numbered=True)\n    assert isinstance(temp_dir, py.path.local)\n\ndef test_tempdir_factory_getbasetemp():\n    tmppath_factory = TempPathFactory(_given_basetemp=Path('/tmp'), trace=None, _basetemp=None)\n    tempdir_factory = TempdirFactory(tmppath_factory, _ispytest=True)\n    basetemp = tempdir_factory.getbasetemp()\n    assert isinstance(basetemp, py.path.local)\n\ndef test_pytest_configure():\n    config = Config()\n    pytest_configure(config)\n    assert hasattr(config, '_tmpdirhandler')\n\ndef test_tmpdir_factory_fixture():\n    with pytest.FixtureScope(\"session\") as fixture:\n         factory = tmpdir_factory(fixture)\n         assert isinstance(factory, TempdirFactory)\n\ndef test_tmp_path_factory_fixture():\n    with pytest.FixtureScope(\"session\") as fixture:\n         factory = tmp_path_factory(fixture)\n         assert isinstance(factory, TempPathFactory)\n\ndef test_mk_tmp():\n    request = MockRequest()\n    request.node.name = \"test_function\"\n    factory = TempPathFactory(_given_basetemp=Path('/tmp'), trace=None, _basetemp=None)\n    temp_dir = _mk_tmp(request, factory)\n    assert temp_dir.name.startswith('test_function_')\n\ndef test_tmpdir_fixture():\n    with pytest.FixtureScope(\"session\") as fixture:\n         tmpdir(fixture)\n\ndef test_tmp_path_fixture():\n    with pytest.FixtureScope(\"session\") as fixture:\n         tmp_path(fixture, TempPathFactory(None, trace=None, _basetemp=None))\n\n\n\nclass MockRequest:\n\n    def __init__(self):\n        self.node = MockNode()\n\nclass MockNode:\n\n    def __init__(self):\n        self.name = \"test_function\"\n\n"], "sample_48": ["\nfrom django.db.backends.ddl_references import (\n    Columns, Expressions, ForeignKeyName, IndexName, Statement, Table,\n)\n\ndef test_table():\n    table = Table('test_table', lambda x: x)\n    assert str(table) == 'test_table'\n    \n    table.rename_table_references('test_table', 'new_table')\n    assert str(table) == 'new_table'\n\ndef test_columns():\n    columns = Columns('test_table', ['col1', 'col2'], lambda x: x)\n    assert str(columns) == 'col1, col2'\n\ndef test_index_name():\n    index = IndexName('test_table', ['col1', 'col2'], 'idx', lambda t, c, s: f'{t}_{\"_\".join(c)}_{s}')\n    assert str(index) == 'test_table_col1_col2_idx'\n\ndef test_index_columns():\n    index = IndexColumns('test_table', ['col1', 'col2'], lambda x: x)\n    assert str(index) == 'col1, col2'\n\ndef test_foreign_key_name():\n    fk = ForeignKeyName('table1', ['col1'], 'table2', ['col2'], 'fk_{to_table}_{to_column}', lambda t, c, s: f'{t}_{\"_\".join(c)}_{s}')\n    assert str(fk) == 'table1_col1_fk_table2_col2'\n\n\ndef test_statement():\n    table = Statement('CREATE TABLE %(table)s (%(columns)s)', table=Table('test_table', lambda x: x), columns=Columns('test_table', ['col1', 'col2'], lambda x: x))\n    assert str(table) == 'CREATE TABLE test_table (col1, col2)'\n\ndef test_expressions():\n    expressions = Expressions('test_table', 'SELECT id FROM test_table', None, lambda x: x)\n    assert str(expressions) == 'SELECT id FROM test_table'\n\n"], "sample_37": ["\nfrom django.contrib.auth.forms import (\n    AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm,\n    PasswordResetForm, ReadOnlyPasswordHashField, ReadOnlyPasswordHashWidget,\n    SetPasswordForm, UserChangeForm, UserCreationForm,\n)\nfrom django.forms import forms\nfrom django.forms.fields import CharField, Field, IntegerField\nfrom django.test import SimpleTestCase\nfrom django.contrib.auth.models import User\nfrom django.core.exceptions import ValidationError\nfrom django.contrib.auth.hashers import (\n    UNUSABLE_PASSWORD_PREFIX, identify_hasher, make_password, check_password\n)\nfrom unittest.mock import patch\nfrom django.contrib.sites.shortcuts import get_current_site\nfrom django.core.mail import EmailMultiAlternatives\n\nclass AuthenticationFormTests(SimpleTestCase):\n    def test_authentication_form_basic(self):\n        form = AuthenticationForm()\n        self.assertIsInstance(form.fields['username'], forms.CharField)\n        self.assertIsInstance(form.fields['password'], forms.CharField)\n\n    def test_authentication_form_with_request(self):\n        request = object()\n        form = AuthenticationForm(request)\n        self.assertEqual(form.request, request)\n\nclass UserCreationFormTests(SimpleTestCase):\n    def test_user_creation_form_basic(self):\n        form = UserCreationForm()\n        self.assertTrue(isinstance(form.fields[\"password1\"], forms.CharField))\n\n    @patch('django.contrib.auth.hashers.make_password')\n    def test_user_creation_form_save(self, mock_make_password):\n        form = UserCreationForm(data={'username': 'testuser', 'password1': 'password', 'password2': 'password'})\n        self.assertTrue(form.is_valid())\n        mock_make_password.assert_called_once_with('password')\n\nclass PasswordResetFormTests(SimpleTestCase):\n    def test_password_reset_form_basic(self):\n        form = PasswordResetForm()\n        self.assertTrue(isinstance(form.fields[\"email\"], forms.EmailField))\n\nclass SetPasswordFormTests(SimpleTestCase):\n    def test_set_password_form_basic(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        form = SetPasswordForm(user)\n        self.assertTrue(isinstance(form.fields[\"new_password1\"], forms.CharField))\n\nclass PasswordChangeFormTests(SimpleTestCase):\n    def test_password_change_form_basic(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        form = PasswordChangeForm(user)\n        self.assertTrue(isinstance(form.fields[\"old_password\"], forms.CharField))\n\nclass AdminPasswordChangeFormTests(SimpleTestCase):\n    def test_admin_password_change_form_basic(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        form = AdminPasswordChangeForm(user)\n\n# Tests for ReadOnlyPasswordHashWidget and ReadOnlyPasswordHashField\n\nclass ReadOnlyPasswordHashTests(SimpleTestCase):\n\n    def test_read_only_password_hash_widget(self):\n        widget = ReadOnlyPasswordHashWidget()\n\n        # Test rendering with a valid hash\n        hashed_password = make_password('password')\n        context = widget.get_context('password', hashed_password, {})\n        self.assertIn({'label': 'Password'}, context['summary'])\n\n        # Test rendering with an invalid hash\n        context = widget.get_context('password', 'invalid_hash', {})\n        self.assertIn({'label': 'Invalid password format or unknown hashing algorithm.'}, context['summary'])\n\n        # Test rendering with no hash\n        context = widget.get_context('password', None, {})\n        self.assertIn({'label': 'No password set.'}, context['summary'])\n\n    def test_read_only_password_hash_field(self):\n        field = ReadOnlyPasswordHashField()\n        self.assertTrue(field.widget, ReadOnlyPasswordHashWidget)\n        self.assertFalse(field.required)\n        self.assertTrue(field.disabled)\n\n\nclass UserChangeFormTests(SimpleTestCase):\n    def test_user_change_form_basic(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        form = UserChangeForm(instance=user)\n        self.assertTrue(isinstance(form.fields[\"password\"], ReadOnlyPasswordHashField))\n\n# Additional tests (optional)\n\n# You can add more tests to cover edge cases and specific functionalities\n# for each form.\n# For example, you can test error handling, form validation, and form\n# submission logic.\n\n\n"], "sample_52": ["\nfrom django.db import IntegrityError, connection, migrations, models\nfrom django.db.migrations.operations.models import (\n    AddIndex,\n    AlterModelOptions,\n    AlterModelTable,\n    AlterUniqueTogether,\n    RenameModel,\n    RemoveIndex,\n    RenameIndex,\n    )\nfrom django.db.migrations.state import ModelState, ProjectState\nfrom django.db.models.functions import Abs\n\nclass FoodManager(models.Manager):\n    pass\n\nclass FoodQuerySet(models.QuerySet):\n    pass\n\nclass UnicodeModel(models.Model):\n    name = models.CharField(max_length=255)\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=255)\n    data = models.TextField()\n\nclass MyOtherModel(models.Model):\n    name = models.CharField(max_length=255)\n\ndef test_rename_model():\n    # Test renaming a model\n    old_app_label = \"myapp\"\n    old_model_name = \"MyModel\"\n    new_model_name = \"RenamedModel\"\n\n    # Create initial state\n    initial_state = ProjectState()\n    initial_state.add_model(\n        ModelState(\n            app_label=old_app_label,\n            name=old_model_name,\n            fields=[\n                models.Field(\n                    name=\"name\",\n                    model=None,\n                    field=models.CharField(max_length=255),\n                ),\n            ],\n        )\n    )\n\n    # Apply RenameModel operation\n    rename_op = RenameModel(old_model_name, new_model_name)\n    new_state = migrations.apply_migration(initial_state, rename_op)\n\n    # Assert that the model name has been changed\n    assert (\n        new_state.models[old_app_label, new_model_name]\n        == initial_state.models[old_app_label, old_model_name]\n    )\n\n    # Check that the old model name is removed from the state\n    assert old_model_name not in new_state.models[old_app_label]\n    \ndef test_alter_model_table_operation():\n    # Test altering the table name of a model\n    app_label = \"myapp\"\n    old_model_name = \"MyModel\"\n    new_table_name = \"new_table_name\"\n\n    # Create initial state\n    initial_state = ProjectState()\n    initial_state.add_model(\n        ModelState(\n            app_label=app_label,\n            name=old_model_name,\n            fields=[\n                models.Field(\n                    name=\"name\",\n                    model=None,\n                    field=models.CharField(max_length=255),\n                ),\n            ],\n        )\n    )\n\n    # Apply AlterModelTable operation\n    alter_table_op = AlterModelTable(old_model_name, new_table_name)\n    new_state = migrations.apply_migration(initial_state, alter_table_op)\n\n    # Assert that the model's table name has been changed\n    assert new_state.models[app_label, old_model_name]._meta.db_table == new_table_name\n\ndef test_alter_unique_together_operation():\n    # Test altering the unique_together constraint of a model\n    app_label = \"myapp\"\n    model_name = \"MyModel\"\n    old_unique_together = []\n    new_unique_together = [(\"name\", \"data\")] \n\n    # Create initial state\n    initial_state = ProjectState()\n    initial_state.add_model(\n        ModelState(\n            app_label=app_label,\n            name=model_name,\n            fields=[\n                models.Field(\n                    name=\"name\",\n                    model=None,\n                    field=models.CharField(max_length=255),\n                ),\n                models.Field(\n                    name=\"data\",\n                    model=None,\n                    field=models.TextField(),\n                ),\n            ],\n            unique_together=old_unique_together,\n        )\n    )\n\n    # Apply AlterUniqueTogether operation\n    alter_unique_together_op = AlterUniqueTogether(model_name, new_unique_together)\n    new_state = migrations.apply_migration(initial_state, alter_unique_together_op)\n\n    # Assert that the model's unique_together constraint has been changed\n    assert new_state.models[app_label, model_name]._meta.unique_together == new_unique_together\n\ndef test_add_index_operation():\n    # Test adding an index to a model\n    app_label = \"myapp\"\n    model_name = \"MyModel\"\n\n    # Create initial state\n    initial_state = ProjectState()\n    initial_state.add_model(\n        ModelState(\n            app_label=app_label,\n            name=model_name,\n            fields=[\n                models.Field(\n                    name=\"name\",\n                    model=None,\n                    field=models.CharField(max_length=255),\n                ),\n            ],\n        )\n    )\n\n    # Define the index to be added\n    index = models.Index(fields=[\"name\"])\n\n    # Apply AddIndex operation\n    add_index_op = AddIndex(model_name, index)\n    new_state = migrations.apply_migration(initial_state, add_index_op)\n\n    # Assert that the index has been added to the model\n    assert index in new_state.models[app_label, model_name]._meta.indexes\n\ndef test_remove_index_operation():\n    # Test removing an index from a model\n    app_label = \"myapp\"\n    model_name = \"MyModel\"\n    index_name = \"name_idx\"\n\n    # Create initial state with an index\n    initial_state = ProjectState()\n    initial_state.add_model(\n        ModelState(\n            app_label=app_label,\n            name=model_name,\n            fields=[\n                models.Field(\n                    name=\"name\",\n                    model=None,\n                    field=models.CharField(max_length=255),\n                ),\n            ],\n        indexes=[models.Index(fields=[\"name\"], name=index_name)],\n    )\n\n    # Apply RemoveIndex operation\n    remove_index_op = RemoveIndex(model_name, index_name)\n    new_state = migrations.apply_migration(initial_state, remove_index_op)\n\n    # Assert that the index has been removed from the model\n    assert index_name not in [i.name for i in new_state.models[app_label, model_name]._meta.indexes]\n\ndef test_rename_index_operation():\n    # Test renaming an index on a model\n    app_label = \"myapp\"\n    model_name = \"MyModel\"\n    old_index_name = \"old_name_idx\"\n    new_index_name = \"new_name_idx\"\n\n    # Create initial state with an index\n    initial_state = ProjectState()\n    initial_state.add_model(\n        ModelState(\n            app_label=app_label,\n            name=model_name,\n            fields=[\n                models.Field(\n                    name=\"name\",\n                    model=None,\n                    field=models.CharField(max_length=255),\n                ),\n            ],\n        indexes=[models.Index(fields=[\"name\"], name=old_index_name)],\n    )\n\n\n    # Apply RenameIndex operation\n    rename_index_op = RenameIndex(model_name, new_index_name, old_name=old_index_name)\n    new_state = migrations.apply_migration(initial_state, rename_index_op)\n\n    # Assert that the index has been renamed\n\n    assert new_index_name in [i.name for i in new_state.models[app_label, model_name]._meta.indexes]\n    assert old_index_name not in [i.name for i in new_state.models[app_label, model_name]._meta.indexes]\n\ndef test_alter_model_options_operation():\n    # Test altering model options\n    app_label = \"myapp\"\n    model_name = \"MyModel\"\n\n    # Create initial state\n    initial_state = ProjectState()\n    initial_state.add_model(\n        ModelState(\n            app_label=app_label,\n            name=model_name,\n            fields=[\n                models.Field(\n                    name=\"name\",\n                    model=None,\n                    field=models.CharField(max_length=255),\n                ),\n            ],\n        )\n    )\n\n    # Define new options\n    new_options = {\"verbose_name\": \"My custom model\", \"ordering\": [\"name\"]}\n\n    # Apply AlterModelOptions operation\n    alter_options_op = AlterModelOptions(model_name, new_options)\n    new_state = migrations.apply_migration(initial_state, alter_options_op)\n\n    # Assert that the model options have been changed\n    assert new_state.models[app_label, model_name]._meta.verbose_name == \"My custom model\"\n    assert new_state.models[app_label, model_name]._meta.ordering == [\"name\"]\n\n"], "sample_81": ["\nimport numpy as np\nimport pandas as pd\nimport pytest\nfrom xarray import DataArray, Dataset\n\nfrom xarray.core.groupby import (\n    DataArrayGroupBy,\n    DatasetGroupBy,\n    GroupBy,\n    _consolidate_slices,\n    _unique_and_monotonic,\n)\n\nfrom xarray.testing import assert_array_equal, assert_allclose\nimport xarray.tests as tests\n\nclass TestGroupBy:\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        self.data = {\n            \"a\": [1, 2, 3, 4, 5],\n            \"b\": [6, 7, 8, 9, 10],\n            \"c\": [\"a\", \"b\", \"a\", \"b\", \"c\"],\n        }\n        self.ds = Dataset({\"foo\": (\"x\", self.data[\"a\"]), \"bar\": (\"x\", self.data[\"b\"])},\n                   coords={\"c\": self.data[\"c\"]})\n        self.da = DataArray(self.data[\"a\"], dims=[\"x\"], coords={\"c\": self.data[\"c\"]})\n\n    def test_groupby_Dataset(self):\n        grouped = self.ds.groupby(\"c\")\n        assert isinstance(grouped, DatasetGroupBy)\n\n    def test_groupby_DataArray(self):\n        grouped = self.da.groupby(\"c\")\n        assert isinstance(grouped, DataArrayGroupBy)\n        assert list(grouped.groups.keys())==list({'a', 'b', 'c'})\n\n    def test_groupby_returns(self):\n        expected = self.ds.where(self.ds[\"c\"] == \"a\")\n        grouped = self.ds.groupby(\"c\").get_group(\"a\")\n        assert_identical(grouped, expected)\n\n    def test_groupby_empty(self):\n        ds = self.ds.where(self.ds[\"c\"] == \"d\")\n        grouped = ds.groupby(\"c\")\n        assert len(list(grouped.groups.keys())) == 0\n\n    def test_groupby_empty_group(self):\n        ds = self.ds.copy()\n        ds['c'].values = ['a', 'b', 'a', 'b', 'b']\n        grouped = ds.groupby('c')\n        assert 'c' not in grouped.groups\n\n    def test_groupby_multiindex(self):\n        ds = self.ds\n        ds[\"c2\"] = (\"x\", [\"A\", \"B\", \"A\", \"B\", \"C\"])\n        grouped = ds.groupby([\"c\", \"c2\"])\n        assert isinstance(grouped, DatasetGroupBy)\n\n    def test_groupby_object_dtype(self):\n        ds = self.ds.copy()\n        ds['c'] = ds['c'].astype(object)\n        grouped = ds.groupby('c')\n        assert isinstance(grouped, DatasetGroupBy)\n\n    def test_groupby_empty_dim(self):\n        ds = self.ds.isel(x=[0, 1])\n        with pytest.raises(ValueError):\n            ds.groupby('c')\n\n    def test_groupby_reducer(self):\n        res = self.ds.groupby(\"c\").mean()\n        expected = self.ds.groupby(\"c\").apply(lambda x: x.mean())\n        assert_identical(res, expected)\n\n    def test_groupby_reducer_existing(self):\n        ds = self.ds.assign(mean_foo=('x', self.data[\"a\"]))\n        res = ds.groupby(\"c\").mean()\n        ex = ds.groupby(\"c\").apply(lambda x: x.mean())\n        assert_identical(res, ex)\n\n    def test_groupby_apply(self):\n        def func(x):\n            return x * 2\n\n        res = self.ds.groupby(\"c\").apply(func)\n        assert_identical(res, self.ds * 2)\n\n    def test_groupby_map_apply_compat(self):\n\n        def func(x):\n            return x * 2\n        res = self.ds.groupby(\"c\").map(func)\n        assert_identical(res, self.ds * 2)\n\n        res = self.ds.groupby(\"c\").apply(func)\n        assert_identical(res, self.ds * 2)\n\n    def test_groupby_quantile(self):\n        res = self.ds.groupby('c').quantile(0.5)\n        assert_identical(\n            res,self.ds.groupby('c').apply(lambda x: x.quantile(0.5))\n        )\n\n    def test_groupby_quantile_multi(self):\n        res = self.ds.groupby('c').quantile([0.25, 0.5, 0.75])\n        assert_identical(\n            res, self.ds.groupby('c').apply(lambda x: x.quantile([0.25, 0.5, 0.75]))\n        )\n\n    def test_groupby_first_last(self):\n        res_first = self.ds.groupby(\"c\").first()\n        res_last = self.ds.groupby(\"c\").last()\n\n        assert_identical(res_first, self.ds.isel(x=[0, 1, 2]))\n        assert_identical(res_last, self.ds.isel(x=[0, 1, 4]))\n\n\nclass TestGroupByReductions:\n    def test_groupby_sum(self):\n        res = self.ds.groupby(\"c\").sum()\n        expected = self.ds.groupby(\"c\").apply(np.sum)\n        assert_identical(res, expected)\n\n    def test_groupby_mean(self):\n        res = self.ds.groupby(\"c\").mean()\n        expected = self.ds.groupby(\"c\").apply(np.mean)\n        assert_identical(res, expected)\n\n    def test_groupby_min(self):\n        res = self.ds.groupby(\"c\").min()\n        expected = self.ds.groupby(\"c\").apply(np.min)\n        assert_identical(res, expected)\n\n    def test_groupby_max(self):\n        res = self.ds.groupby(\"c\").max()\n        expected = self.ds.groupby(\"c\").apply(np.max)\n        assert_identical(res, expected)\n\n    def test_groupby_std(self):\n        res = self.ds.groupby(\"c\").std()\n        expected = self.ds.groupby(\"c\").apply(np.std)\n        assert_allclose(res, expected)\n\n    def test_groupby_var(self):\n        res = self.ds.groupby(\"c\").var()\n        expected = self.ds.groupby(\"c\").apply(np.var)\n        assert_allclose(res, expected)\n\n\n\nclass TestGroupByMissingValues:\n    def test_groupby_missing_values(self):\n        ds = self.ds.copy()\n        ds[\"foo\"][1] = np.nan\n        res = ds.groupby(\"c\").sum()\n        expected = ds.where(~np.isnan(ds[\"foo\"])).groupby(\"c\").sum()\n        assert_identical(res, expected)\n\n    def test_groupby_dropna(self):\n        ds = self.ds.copy()\n        ds[\"foo\"][1] = np.nan\n        res = ds.groupby(\"c\", dropna=True).sum()\n        expected = ds.where(~np.isnan(ds[\"foo\"])).groupby(\"c\").sum()\n        assert_identical(res, expected)\n\n    def test_groupby_skipna(self):\n        ds = self.ds.copy()\n        ds[\"foo\"][1] = np.nan\n        res = ds.groupby(\"c\").sum(skipna=True)\n        expected = ds.groupby(\"c\").apply(lambda x: x.sum(skipna=True))\n        assert_identical(res, expected)\n\n    def test_groupby_keep_attrs(self):\n        ds = self.ds.copy()\n        ds.attrs['foo'] = 'bar'\n        res = ds.groupby('c').sum(keep_attrs=True)\n        assert res.attrs == ds.attrs\n\n\n\n"], "sample_157": ["\nfrom sympy.physics.units.unitsystem import UnitSystem\nfrom sympy.physics.units.definitions.dimension_definitions import ( Dimension, charge, length, time, temperature, pressure, energy, mass )\nfrom sympy.physics.units.quantities import Quantity\nfrom sympy.physics.units.systems.si import dimsys_SI\nfrom sympy import S\n\ndef test_UnitSystem_init():\n    units = (Quantity(mass, \"kg\"), Quantity(length, \"m\"), Quantity(time, \"s\"))\n    us = UnitSystem(units, name=\"test_system\")\n    assert us.name == \"test_system\"\n    assert us.dim == len(units)\n\ndef test_UnitSystem_str():\n    units = (Quantity(mass, \"kg\"), Quantity(length, \"m\"), Quantity(time, \"s\"))\n    us = UnitSystem(units, name=\"test_system\")\n    assert str(us) == \"test_system\"\n\ndef test_UnitSystem_repr():\n    units = (Quantity(mass, \"kg\"), Quantity(length, \"m\"), Quantity(time, \"s\"))\n    us = UnitSystem(units, name=\"test_system\")\n    assert repr(us) == \"<UnitSystem: (Quantity(mass, 'kg'), Quantity(length, 'm'), Quantity(time, 's'))>\"\n\ndef test_UnitSystem_extend():\n    units = (Quantity(mass, \"kg\"), Quantity(length, \"m\"), Quantity(time, \"s\"))\n    us = UnitSystem(units, name=\"test_system\")\n\n    new_units = (Quantity(temperature, \"K\"),)\n    extended_us = us.extend(new_units, name=\"extended_test_system\")\n    assert extended_us.name == \"extended_test_system\"\n    assert extended_us.dim == len(units) + len(new_units)\n\ndef test_UnitSystem_get_dimension_system():\n    units = (Quantity(mass, \"kg\"), Quantity(length, \"m\"), Quantity(time, \"s\"))\n    us = UnitSystem(units, name=\"test_system\", dimension_system=dimsys_SI)\n    assert us.get_dimension_system() == dimsys_SI\n\ndef test_UnitSystem_get_quantity_dimension():\n    units = (Quantity(mass, \"kg\"), Quantity(length, \"m\"), Quantity(time, \"s\"))\n    us = UnitSystem(units, name=\"test_system\", dimension_system=dimsys_SI)\n    assert us.get_quantity_dimension(Quantity(mass, \"kg\")) == dimsys_SI.get_dimension(Quantity(mass, \"kg\"))\n\ndef test_UnitSystem_get_quantity_scale_factor():\n    units = (Quantity(mass, \"kg\"), Quantity(length, \"m\"), Quantity(time, \"s\"))\n    us = UnitSystem(units, name=\"test_system\", dimension_system=dimsys_SI)\n    assert us.get_quantity_scale_factor(Quantity(mass, \"kg\")) == S.One\n\ndef test_UnitSystem_get_unit_system():\n    units = (Quantity(mass, \"kg\"), Quantity(length, \"m\"), Quantity(time, \"s\"))\n    us = UnitSystem(units, name=\"test_system\")\n    assert UnitSystem.get_unit_system(us) == us\n\ndef test_UnitSystem_get_default_unit_system():\n    assert UnitSystem.get_default_unit_system().name == \"SI\"\n\ndef test_UnitSystem_is_consistent():\n    units = (Quantity(mass, \"kg\"), Quantity(length, \"m\"), Quantity(time, \"s\"))\n    us = UnitSystem(units, name=\"test_system\", dimension_system=dimsys_SI)\n    assert us.is_consistent\n\ndef test_UnitSystem_derived_units():\n    units = (Quantity(mass, \"kg\"), Quantity(length, \"m\"), Quantity(time, \"s\"))\n    derived_units = {Dimension(mass): Quantity(mass, \"g\"), Dimension(length): Quantity(length, \"cm\")}\n    us = UnitSystem(units, name=\"test_system\", dimension_system=dimsys_SI, derived_units=derived_units)\n    assert us.derived_units == derived_units\n\ndef test_UnitSystem_get_dimensional_expr():\n    units = (Quantity(mass, \"kg\"), Quantity(length, \"m\"), Quantity(time, \"s\"))\n    us = UnitSystem(units, name=\"test_system\", dimension_system=dimsys_SI)\n    assert us.get_dimensional_expr(Quantity(mass, \"kg\")) == Quantity(mass, \"kg\").dimension\n\ndef test_UnitSystem_collect_factor_and_dimension():\n    units = (Quantity(mass, \"kg\"), Quantity(length, \"m\"), Quantity(time, \"s\"))\n    us = UnitSystem(units, name=\"test_system\", dimension_system=dimsys_SI)\n    factor, dim = us._collect_factor_and_dimension(Quantity(mass, \"kg\")*Quantity(length, \"m\"))\n    assert factor == S.One and dim == Quantity(mass, \"kg\").dimension*Quantity(length, \"m\").dimension\n\ndef test_UnitSystem_get_units_non_prefixed():\n    units = (Quantity(mass, \"kg\"), Quantity(length, \"m\"), Quantity(time, \"s\"))\n    us = UnitSystem(units, name=\"test_system\")\n    assert len(us.get_units_non_prefixed()) == len(units)\n\n"], "sample_110": ["\nimport numpy as np\nfrom sklearn.model_selection._split import KFold\nfrom sklearn.model_selection._split import StratifiedKFold\nfrom sklearn.model_selection._split import GroupKFold\nfrom sklearn.model_selection._split import TimeSeriesSplit\nfrom sklearn.model_selection._split import LeaveOneOut\nfrom sklearn.model_selection._split import LeaveOneGroupOut\nfrom sklearn.model_selection._split import LeavePOut\nfrom sklearn.model_selection._split import LeavePGroupsOut\nfrom sklearn.model_selection._split import ShuffleSplit\nfrom sklearn.model_selection._split import GroupShuffleSplit\nfrom sklearn.model_selection._split import StratifiedShuffleSplit\nfrom sklearn.model_selection._split import PredefinedSplit\nfrom sklearn.model_selection._split import check_cv\nfrom sklearn.model_selection._split import train_test_split\nfrom sklearn.model_selection._split import RepeatedKFold\nfrom sklearn.model_selection._split import RepeatedStratifiedKFold\nfrom sklearn.model_selection._split import _validate_shuffle_split\nfrom sklearn.model_selection._split import _build_repr\n\ndef test_KFold():\n    kf = KFold(n_splits=5)\n    X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    for train_index, test_index in kf.split(X):\n        print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n\ndef test_StratifiedKFold():\n    X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    y = np.array([0, 0, 1, 1])\n    skf = StratifiedKFold(n_splits=2)\n    for train_index, test_index in skf.split(X, y):\n        print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n\ndef test_GroupKFold():\n    X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    y = np.array([0, 0, 1, 1])\n    groups = np.array([1, 1, 2, 2])\n    gkfold = GroupKFold(n_splits=2)\n    for train_index, test_index in gkfold.split(X, y, groups):\n        print(\"TRAIN:\", train_index, \"TEST:\", test_index)\ndef test_TimeSeriesSplit():\n    X = np.arange(20).reshape((20, 1))\n    tscv = TimeSeriesSplit(n_splits=5)\n    for train_index, test_index in tscv.split(X):\n        print(\"TRAIN:\", train_index, \"TEST:\", test_index)\ndef test_LeaveOneOut():\n    X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    loo = LeaveOneOut()\n    for train_index, test_index in loo.split(X):\n        print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n\ndef test_LeaveOneGroupOut():\n    X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    groups = np.array([1, 1, 2, 2])\n    logo = LeaveOneGroupOut()\n    for train_index, test_index in logo.split(X, groups):\n        print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n\ndef test_LeavePOut():\n    X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    lpo = LeavePOut(p=2)\n    for train_index, test_index in lpo.split(X):\n        print(\"TRAIN:\", train_index, \"TEST:\", test_i\nndex)\n\ndef test_LeavePGroupsOut():\n    X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    groups = np.array([1, 1, 2, 2])\n    lpgo = LeavePGroupsOut(n_groups=2)\n    for train_index, test_index in lpgo.split(X, groups):\n        print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n\ndef test_ShuffleSplit():\n    X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    ss = ShuffleSplit(n_splits=5, test_size=0.25)\n    for train_index, test_index in ss.split(X):\n        print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n\ndef test_GroupShuffleSplit():\n    X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    y = np.array([0, 0, 1, 1])\n    groups = np.array([1, 1, 2, 2])\n    gss = GroupShuffleSplit(n_splits=2, test_size=0.5, random_state=0)\n    for train_index, test_index in gss.split(X, groups=groups):\n        print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n\ndef test_StratifiedShuffleSplit():\n    X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    y = np.array([0, 0, 1, 1])\n    sss = StratifiedShuffleSplit(n_splits=5, test_size=0.25, random_state=0)\n    for train_index, test_index in sss.split(X, y):\n        print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n\ndef test_PredefinedSplit():\n    X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    y = np.array([0, 0, 1, 1])\n    test_fold = [0, 1, -1, 1]\n    ps = PredefinedSplit(test_fold)\n    for train_index, test_index in ps.split():\n        print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n\ndef test_check_cv():\n    cv1 = check_cv(cv=5)\n    cv2 = check_cv(cv=KFold(n_splits=5))\n    cv3 = check_cv(cv=[(1, 2), (3, 4)])\n\ndef test_train_test_split():\n    X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    y = np.array([0, 0, 1, 1])\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n    print(X_train)\n    print(y_train)\n    print(X_test)\n    print(y_test)\n\ndef test_RepeatedKFold():\n    X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    rkf = RepeatedKFold(n_splits=5, n_repeats=2, random_state=42)\n    for train_index, test_index in rkf.split(X):\n        print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n\ndef test_RepeatedStratifiedKFold():\n    X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    y = np.array([0, 0, 1, 1])\n    rskf = RepeatedStratifiedKFold(n_splits=5, n_repeats=2, random_state=42)\n    for train_index, test_index in rskf.split(X, y):\n        print(\"TRAIN:\", train_index, \"TEST:\", test_index)\ndef test__validate_shuffle_split():\n    n_samples = 10\n    n_train, n_test = _validate_shuffle_split(n_samples, test_size=0.25)\ndef test__build_repr():\n    class MyClass:\n        def __init__(self, a, b):\n            self.a = a\n            self.b = b\n    obj = MyClass(1, 2)\n    repr_str = _build_repr(obj)\n    print(repr_str)\n"]}, "raw_scored_generations": {"sample_5": [false], "sample_13": [false], "sample_0": [false], "sample_8": [true], "sample_10": [true], "sample_2": [true], "sample_11": [true], "sample_15": [false], "sample_6": [false], "sample_3": [true], "sample_7": [true], "sample_9": [false], "sample_14": [false], "sample_12": [false], "sample_1": [false], "sample_4": [false], "sample_31": [false], "sample_24": [false], "sample_18": [true], "sample_20": [false], "sample_19": [true], "sample_23": [false], "sample_26": [true], "sample_21": [true], "sample_22": [true], "sample_17": [false], "sample_16": [false], "sample_28": [false], "sample_27": [false], "sample_25": [false], "sample_30": [false], "sample_34": [false], "sample_35": [false], "sample_29": [false], "sample_32": [true], "sample_36": [false], "sample_40": [false], "sample_39": [true], "sample_33": [false], "sample_37": [false], "sample_41": [true], "sample_42": [true], "sample_38": [false], "sample_45": [true], "sample_50": [false], "sample_48": [false], "sample_44": [false], "sample_46": [true], "sample_51": [false], "sample_43": [true], "sample_49": [false], "sample_52": [false], "sample_47": [true], "sample_57": [false], "sample_55": [false], "sample_54": [false], "sample_56": [true], "sample_53": [false], "sample_63": [false], "sample_58": [true], "sample_65": [true], "sample_72": [true], "sample_62": [false], "sample_67": [false], "sample_69": [false], "sample_59": [true], "sample_61": [true], "sample_70": [false], "sample_64": [true], "sample_60": [false], "sample_66": [false], "sample_71": [false], "sample_68": [true], "sample_78": [true], "sample_77": [true], "sample_74": [false], "sample_79": [true], "sample_73": [false], "sample_75": [false], "sample_76": [false], "sample_91": [false], "sample_81": [false], "sample_80": [false], "sample_84": [false], "sample_83": [false], "sample_82": [true], "sample_86": [true], "sample_87": [true], "sample_85": [true], "sample_95": [false], "sample_89": [false], "sample_88": [false], "sample_97": [false], "sample_94": [false], "sample_93": [false], "sample_90": [false], "sample_99": [false], "sample_92": [true], "sample_98": [false], "sample_96": [false], "sample_101": [false], "sample_105": [false], "sample_100": [true], "sample_106": [false], "sample_102": [false], "sample_104": [false], "sample_103": [false], "sample_112": [true], "sample_111": [false], "sample_109": [false], "sample_114": [false], "sample_108": [true], "sample_110": [true], "sample_124": [false], "sample_107": [false], "sample_121": [false], "sample_117": [true], "sample_119": [false], "sample_116": [false], "sample_118": [true], "sample_120": [false], "sample_122": [false], "sample_126": [false], "sample_129": [false], "sample_130": [false], "sample_113": [false], "sample_125": [false], "sample_115": [false], "sample_128": [false], "sample_123": [false], "sample_139": [true], "sample_133": [false], "sample_134": [false], "sample_136": [true], "sample_131": [false], "sample_132": [false], "sample_141": [true], "sample_127": [false], "sample_144": [false], "sample_138": [false], "sample_135": [false], "sample_147": [false], "sample_142": [false], "sample_140": [true], "sample_137": [false], "sample_145": [true], "sample_148": [false], "sample_153": [false], "sample_143": [false], "sample_154": [false], "sample_151": [true], "sample_152": [false], "sample_150": [true], "sample_158": [true], "sample_149": [true], "sample_155": [false], "sample_157": [true], "sample_146": [false], "sample_156": [false], "sample_159": [false]}}