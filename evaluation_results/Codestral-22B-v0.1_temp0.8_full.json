{"raw_generations": {"sample_200": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.core.mail.message import EmailMessage, EmailMultiAlternatives, BadHeaderError, sanitize_address\nfrom email import message_from_bytes\n\nclass TestEmailMessage(unittest.TestCase):\n    def setUp(self):\n        self.subject = 'Test Subject'\n        self.body = 'Test Body'\n        self.from_email = 'from@example.com'\n        self.to = ['to@example.com']\n        self.cc = ['cc@example.com']\n        self.bcc = ['bcc@example.com']\n        self.reply_to = ['reply@example.com']\n        self.headers = {'X-Test': 'Test'}\n        self.attachments = [('test.txt', 'Test Attachment', 'text/plain')]\n\n    def test_email_message_init(self):\n        email = EmailMessage(\n            subject=self.subject,\n            body=self.body,\n            from_email=self.from_email,\n            to=self.to,\n            bcc=self.bcc,\n            headers=self.headers,\n            cc=self.cc,\n            reply_to=self.reply_to,\n            attachments=self.attachments\n        )\n        self.assertEqual(email.subject, self.subject)\n        self.assertEqual(email.body, self.body)\n        self.assertEqual(email.from_email, self.from_email)\n        self.assertEqual(email.to, self.to)\n        self.assertEqual(email.bcc, self.bcc)\n        self.assertEqual(email.extra_headers, self.headers)\n        self.assertEqual(email.cc, self.cc)\n        self.assertEqual(email.reply_to, self.reply_to)\n        self.assertEqual(len(email.attachments), 1)\n\n    def test_email_message_message(self):\n        email = EmailMessage(\n            subject=self.subject,\n            body=self.body,\n            from_email=self.from_email,\n            to=self.to,\n            headers=self.headers\n        )\n        msg = email.message()\n        self.assertEqual(msg['Subject'], self.subject)\n        self.assertEqual(msg['From'], self.from_email)\n        self.assertEqual(msg['To'], ', '.join(self.to))\n        self.assertEqual(msg['X-Test'], 'Test')\n\n    def test_email_message_recipients(self):\n        email = EmailMessage(\n            subject=self.subject,\n            body=self.body,\n            from_email=self.from_email,\n            to=self.to,\n            cc=self.cc,\n            bcc=self.bcc\n        )\n        recipients = email.recipients()\n        self.assertEqual(recipients, self.to + self.cc + self.bcc)\n\n    @patch('django.core.mail.message.SafeMIMEMultipart')\n    def test_email_message_attach(self, mock_mime):\n        email = EmailMessage(\n            subject=self.subject,\n            body=self.body,\n            from_email=self.from_email,\n            to=self.to\n        )\n        email.attach(filename='test.txt', content='Test Attachment', mimetype='text/plain')\n        self.assertEqual(len(email.attachments), 1)\n        email._create_attachments(mock_mime)\n        mock_mime.attach.assert_called_once()\n\nclass TestEmailMultiAlternatives(unittest.TestCase):\n    def setUp(self):\n        self.subject = 'Test Subject'\n        self.body = 'Test Body'\n        self.from_email = 'from@example.com'\n        self.to = ['to@example.com']\n        self.alternatives = [('<p>Test Alternative</p>', 'text/html')]\n\n    def test_email_multi_alternatives_init(self):\n        email = EmailMultiAlternatives(\n            subject=self.subject,\n            body=self.body,\n            from_email=self.from_email,\n            to=self.to,\n            alternatives=self.alternatives\n        )\n        self.assertEqual(email.subject, self.subject)\n        self.assertEqual(email.body, self.body)\n        self.assertEqual(email.from_email, self.from_email)\n        self.assertEqual(email.to, self.to)\n        self.assertEqual(email.alternatives, self.alternatives)\n\n    @patch('django.core.mail.message.SafeMIMEMultipart')\n    def test_email_multi_alternatives_attach_alternative(self, mock_mime):\n        email = EmailMultiAlternatives(\n            subject=self.subject,\n            body=self.body,\n            from_email=self.from_email,\n            to=self.to\n        )\n        email.attach_alternative(content='<p>Test Alternative</p>', mimetype='text/html')\n        self.assertEqual(len(email.alternatives), 1)\n        email._create_alternatives(mock_mime)\n        mock_mime.attach.assert_called_once()\n\nclass TestSanitizeAddress(unittest.TestCase):\n    def test_sanitize_address_valid(self):\n        addr = ('Test User', 'test@example.com')\n        result = sanitize_address(addr, 'utf-8')\n        self.assertEqual(result, 'Test User <test@example.com>')\n\n    def test_sanitize_address_invalid(self):\n        addr = ('Test User', 'invalid_email')\n        with self.assertRaises(ValueError):\n            sanitize_address(addr, 'utf-8')\n\nclass TestBadHeaderError(unittest.TestCase):\n    def test_bad_header_error(self):\n        with self.assertRaises(BadHeaderError):\n            raise BadHeaderError('Test Error')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1010": ["\nimport unittest\nfrom sympy import (S, Symbol, symbols, factorial, factorial2, binomial, rf, ff, gamma, polygamma, EulerGamma, O, pi, nan, oo, zoo, simplify, expand_func, Product, Mul, Piecewise, Mod, Eq, sqrt, Poly)\nfrom sympy.functions.combinatorial.factorials import subfactorial\n\nclass TestFactorialFunctions(unittest.TestCase):\n    def setUp(self):\n        self.n = Symbol('n', integer=True)\n        self.k = Symbol('k', integer=True)\n        self.x = Symbol('x')\n\n    def test_factorial(self):\n        self.assertEqual(factorial(0), 1)\n        self.assertEqual(factorial(5), 120)\n        self.assertEqual(factorial(-2), zoo)\n        self.assertEqual(factorial(S(1)/2), factorial(S(1)/2))\n\n    def test_subfactorial(self):\n        self.assertEqual(subfactorial(0), 1)\n        self.assertEqual(subfactorial(1), 0)\n        self.assertEqual(subfactorial(5), 44)\n        self.assertEqual(subfactorial(self.n + 1), subfactorial(self.n + 1))\n\n    def test_factorial2(self):\n        self.assertEqual(factorial2(5), 15)\n        self.assertEqual(factorial2(-1), 1)\n        self.assertEqual(factorial2(-5), 1/3)\n\n    def test_rf(self):\n        self.assertEqual(rf(1, 5), 120)\n        self.assertEqual(rf(self.x, 5), self.x * (self.x + 1) * (self.x + 2) * (self.x + 3) * (self.x + 4))\n\n    def test_ff(self):\n        self.assertEqual(ff(5, 5), 120)\n        self.assertEqual(ff(self.x, 5), self.x * (self.x - 1) * (self.x - 2) * (self.x - 3) * (self.x - 4))\n\n    def test_binomial(self):\n        self.assertEqual(binomial(15, 8), 6435)\n        self.assertEqual(binomial(self.n, -1), 0)\n\n    def test_rewrite_as_gamma(self):\n        self.assertEqual(rf(self.x, self.k).rewrite(gamma), gamma(self.x + self.k) / gamma(self.x))\n        self.assertEqual(ff(self.x, self.k).rewrite(gamma), (-1)**self.k * gamma(self.k - self.x) / gamma(-self.x))\n\n    def test_rewrite_as_FallingFactorial(self):\n        self.assertEqual(rf(self.x, self.k).rewrite(ff), ff(self.x + self.k - 1, self.k))\n        self.assertEqual(ff(self.x, self.k).rewrite(rf), rf(self.x - self.k + 1, self.k))\n\n    def test_rewrite_as_factorial(self):\n        self.assertEqual(rf(self.n, self.k).rewrite(factorial), factorial(self.k + self.n - 1) / factorial(self.n - 1))\n        self.assertEqual(ff(self.n, self.k).rewrite(factorial), factorial(self.n) / factorial(self.n - self.k))\n\n    def test_rewrite_as_binomial(self):\n        self.assertEqual(rf(self.x, self.k).rewrite(binomial), factorial(self.k) * binomial(self.x + self.k - 1, self.k))\n        self.assertEqual(ff(self.x, self.k).rewrite(binomial), factorial(self.k) * binomial(self.x, self.k))\n\n    def test_is_integer(self):\n        self.assertTrue(rf(self.n, self.k)._eval_is_integer())\n        self.assertTrue(ff(self.n, self.k)._eval_is_integer())\n\n    def test_expand_func(self):\n        self.assertEqual(expand_func(binomial(self.n, 3)), self.n * (self.n - 2) * (self.n - 1) / 6)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_55": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django import forms\nfrom django.contrib.admin.helpers import *\n\nclass TestAdminHelpers(unittest.TestCase):\n\n    def setUp(self):\n        self.form = Mock()\n        self.fieldsets = []\n        self.prepopulated_fields = {}\n        self.model_admin = Mock()\n\n    def test_action_form(self):\n        action_form = ActionForm()\n        self.assertIsInstance(action_form.fields['action'], forms.ChoiceField)\n        self.assertIsInstance(action_form.fields['select_across'], forms.BooleanField)\n\n    def test_admin_form(self):\n        admin_form = AdminForm(self.form, self.fieldsets, self.prepopulated_fields, model_admin=self.model_admin)\n        self.assertEqual(admin_form.form, self.form)\n        self.assertEqual(admin_form.fieldsets, self.fieldsets)\n\n    # Add more test cases for AdminField, AdminReadonlyField, InlineAdminFormSet, InlineAdminForm, InlineFieldset, AdminErrorList as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_742": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing.data import StandardScaler\n\nclass TestStandardScaler(unittest.TestCase):\n    def setUp(self):\n        self.scaler = StandardScaler()\n\n    def test_fit(self):\n        X = np.array([[0, 0], [1, 1], [2, 2]])\n        self.scaler.fit(X)\n        self.assertTrue(np.allclose(self.scaler.mean_, np.array([1, 1])))\n        self.assertTrue(np.allclose(self.scaler.var_, np.array([1, 1])))\n\n    def test_transform(self):\n        X = np.array([[0, 0], [1, 1], [2, 2]])\n        self.scaler.fit(X)\n        X_transformed = self.scaler.transform(X)\n        expected_output = np.array([[-1, -1], [0, 0], [1, 1]])\n        self.assertTrue(np.allclose(X_transformed, expected_output))\n\n    def test_inverse_transform(self):\n        X = np.array([[0, 0], [1, 1], [2, 2]])\n        self.scaler.fit(X)\n        X_transformed = self.scaler.transform(X)\n        X_inverse_transformed = self.scaler.inverse_transform(X_transformed)\n        self.assertTrue(np.allclose(X_inverse_transformed, X))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_916": ["\nimport unittest\nimport ast\nfrom sphinx.pycode import ast as sphinx_ast\n\nclass TestSphinxAst(unittest.TestCase):\n\n    def test_parse(self):\n        code = \"x = 1 + 2\"\n        tree = sphinx_ast.parse(code)\n        self.assertIsInstance(tree, ast.AST)\n\n    def test_unparse(self):\n        tree = ast.parse(\"x = 1 + 2\")\n        code = sphinx_ast.unparse(tree)\n        self.assertEqual(code, \"x = 1 + 2\")\n\n    def test_unparse_arguments(self):\n        node = ast.arguments(args=[ast.arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])\n        args = sphinx_ast.unparse_arguments(node)\n        self.assertEqual(args, \"x\")\n\n    def test_unparse_not_implemented(self):\n        class NotImplementedNode(ast.AST):\n            pass\n        with self.assertRaises(NotImplementedError):\n            sphinx_ast.unparse(NotImplementedNode())\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1059": ["\nimport unittest\nfrom sympy import symbols, sin, cos, tan, pi, Piecewise, Eq, sqrt, Matrix, eye, BlockMatrix, Identity, S\nfrom sympy.printing.pycode import pycode, MpmathPrinter, NumPyPrinter, PythonCodePrinter, SciPyPrinter\n\nclass TestPythonCodePrinter(unittest.TestCase):\n\n    def setUp(self):\n        self.x = symbols('x')\n\n    def test_pycode(self):\n        result = pycode(tan(self.x) + 1)\n        self.assertEqual(result, 'math.tan(x) + 1')\n\n    def test_MpmathPrinter(self):\n        printer = MpmathPrinter()\n        result = printer._print_Float(S(1.5))\n        self.assertEqual(result, 'mpmath.mpf((1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))')\n\n    def test_NumPyPrinter(self):\n        printer = NumPyPrinter()\n        result = printer._print_Piecewise(Piecewise((0, Eq(self.x, 0)), (1, True)))\n        self.assertEqual(result, 'numpy.select([numpy.equal(x, 0)], [0], default=numpy.nan)')\n\n    def test_SciPyPrinter(self):\n        printer = SciPyPrinter()\n        result = printer._print_SparseMatrix(Matrix([[0, 0], [0, 1]]))\n        self.assertEqual(result, 'scipy.sparse.coo_matrix([1], ([1], [1]), shape=(2, 2))')\n\n    def test_SymPyPrinter(self):\n        printer = PythonCodePrinter()\n        result = printer._print_Function(sin(self.x))\n        self.assertEqual(result, 'sympy.sin(x)')\n\n    def test_MatrixOperations(self):\n        mat1 = Matrix([[1, 2], [3, 4]])\n        mat2 = Matrix([[5, 6], [7, 8]])\n        printer = NumPyPrinter()\n        result = printer._print_MatMul(mat1 * mat2)\n        self.assertEqual(result, '(numpy.array([[1, 2], [3, 4]]).dot(numpy.array([[5, 6], [7, 8]])))')\n        result = printer._print_MatPow(mat1, 2)\n        self.assertEqual(result, 'numpy.linalg.matrix_power(numpy.array([[1, 2], [3, 4]]), 2)')\n        result = printer._print_Inverse(mat1)\n        self.assertEqual(result, 'numpy.linalg.inv(numpy.array([[1, 2], [3, 4]]))')\n        result = printer._print_Identity(Identity(3))\n        self.assertEqual(result, 'numpy.eye(3)')\n        result = printer._print_BlockMatrix(BlockMatrix([[mat1, mat2], [mat2, mat1]]))\n        self.assertEqual(result, 'numpy.block([[numpy.array([[1, 2], [3, 4]]), numpy.array([[5, 6], [7, 8]])], [numpy.array([[5, 6], [7, 8]]), numpy.array([[1, 2], [3, 4]])]])')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_703": ["\nimport pytest\nfrom _pytest.python import Class, Function, PyCollector\nfrom _pytest.nodes import Collector, Item\nfrom _pytest.outcomes import skip\nfrom unittest.mock import Mock, patch\nfrom typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    import unittest\n\nimport src._pytest.unittest as unittest_plugin\n\n@pytest.fixture\ndef mock_collector():\n    return Mock(spec=PyCollector)\n\n@pytest.fixture\ndef mock_class():\n    return Mock(spec=Class)\n\n@pytest.fixture\ndef mock_item():\n    return Mock(spec=Item)\n\n@pytest.fixture\ndef mock_unit_test_case():\n    return Mock(spec=unittest.TestCase)\n\ndef test_pytest_pycollect_makeitem_no_unittest(mock_collector):\n    result = unittest_plugin.pytest_pycollect_makeitem(mock_collector, \"name\", object())\n    assert result is None\n\ndef test_pytest_pycollect_makeitem_not_subclass(mock_collector):\n    with patch.dict(\"sys.modules\", {\"unittest\": Mock()}):\n        result = unittest_plugin.pytest_pycollect_makeitem(mock_collector, \"name\", object())\n        assert result is None\n\ndef test_pytest_pycollect_makeitem_valid(mock_collector):\n    with patch.dict(\"sys.modules\", {\"unittest\": Mock(TestCase=unittest.TestCase)}):\n        result = unittest_plugin.pytest_pycollect_makeitem(mock_collector, \"name\", unittest.TestCase)\n        assert isinstance(result, unittest_plugin.UnitTestCase)\n\ndef test_unit_test_case_collect(mock_class, mock_unit_test_case):\n    with patch.object(unittest_plugin, \"TestLoader\", autospec=True) as mock_loader:\n        mock_loader.return_value.getTestCaseNames.return_value = [\"test_method\"]\n        mock_unit_test_case.__test__ = True\n        mock_class.obj = mock_unit_test_case\n        results = list(unittest_plugin.UnitTestCase.collect(mock_class))\n        assert len(results) == 1\n        assert isinstance(results[0], unittest_plugin.TestCaseFunction)\n\ndef test_unit_test_case_collect_skipped(mock_class, mock_unit_test_case):\n    with patch.object(unittest_plugin, \"_is_skipped\", return_value=True):\n        mock_class.obj = mock_unit_test_case\n        results = list(unittest_plugin.UnitTestCase.collect(mock_class))\n        assert len(results) == 0\n\ndef test_test_case_function_setup(mock_item, mock_unit_test_case):\n    with patch.object(unittest_plugin, \"getimfunc\", return_value=Mock()):\n        mock_item.parent = Mock(spec=unittest_plugin.UnitTestCase)\n        mock_item.parent.obj = mock_unit_test_case\n        mock_item.name = \"test_method\"\n        unittest_plugin.TestCaseFunction.setup(mock_item)\n        assert mock_item._testcase is not None\n\ndef test_test_case_function_teardown(mock_item):\n    mock_item._explicit_tearDown = Mock()\n    unittest_plugin.TestCaseFunction.teardown(mock_item)\n    mock_item._explicit_tearDown.assert_called_once()\n\n# Add more test cases as needed to cover the remaining functions and edge cases\n"], "sample_488": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.apps.registry import Apps, AppConfig\nfrom django.core.exceptions import AppRegistryNotReady, ImproperlyConfigured\n\nclass TestApps(unittest.TestCase):\n\n    def setUp(self):\n        self.apps = Apps()\n\n    def test_populate_with_duplicate_app_labels(self):\n        app_config1 = AppConfig('app1', 'App One')\n        app_config2 = AppConfig('app1', 'App Two')\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.apps.populate([app_config1, app_config2])\n\n    def test_populate_with_duplicate_app_names(self):\n        app_config1 = AppConfig('app1', 'Same Name')\n        app_config2 = AppConfig('app2', 'Same Name')\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.apps.populate([app_config1, app_config2])\n\n    def test_check_apps_ready(self):\n        with self.assertRaises(AppRegistryNotReady):\n            self.apps.check_apps_ready()\n\n    def test_check_models_ready(self):\n        with self.assertRaises(AppRegistryNotReady):\n            self.apps.check_models_ready()\n\n    @patch('django.apps.registry.AppConfig.create')\n    @patch('django.apps.registry.AppConfig.import_models')\n    @patch('django.apps.registry.AppConfig.ready')\n    def test_populate_success(self, mock_ready, mock_import_models, mock_create):\n        app_config = MagicMock(spec=AppConfig)\n        app_config.label = 'app1'\n        app_config.name = 'App One'\n        mock_create.return_value = app_config\n\n        self.apps.populate(['app1'])\n\n        self.assertTrue(self.apps.apps_ready)\n        self.assertTrue(self.apps.models_ready)\n        self.assertTrue(self.apps.ready)\n        mock_import_models.assert_called_once()\n        mock_ready.assert_called_once()\n\n    @patch('django.apps.registry.AppConfig.get_models')\n    def test_get_models(self, mock_get_models):\n        app_config = MagicMock(spec=AppConfig)\n        app_config.get_models.return_value = ['Model1', 'Model2']\n        self.apps.app_configs = {'app1': app_config}\n\n        self.apps.models_ready = True\n        models = self.apps.get_models()\n\n        self.assertEqual(models, ['Model1', 'Model2'])\n\n    @patch('django.apps.registry.AppConfig.get_model')\n    def test_get_model(self, mock_get_model):\n        app_config = MagicMock(spec=AppConfig)\n        self.apps.get_app_config = MagicMock(return_value=app_config)\n\n        self.apps.models_ready = True\n        model = self.apps.get_model('app1', 'Model1')\n\n        self.assertEqual(model, mock_get_model.return_value)\n\n    def test_register_model_with_duplicate(self):\n        model1 = MagicMock()\n        model1._meta.model_name = 'Model1'\n        model1._meta.app_label = 'app1'\n        self.apps.register_model('app1', model1)\n\n        model2 = MagicMock()\n        model2._meta.model_name = 'Model1'\n        model2._meta.app_label = 'app1'\n\n        with self.assertRaises(RuntimeError):\n            self.apps.register_model('app1', model2)\n\n    def test_set_available_apps(self):\n        app_config1 = MagicMock(spec=AppConfig)\n        app_config1.name = 'app1'\n        app_config2 = MagicMock(spec=AppConfig)\n        app_config2.name = 'app2'\n        self.apps.app_configs = {'app1': app_config1, 'app2': app_config2}\n\n        self.apps.set_available_apps(['app1'])\n        self.assertEqual(list(self.apps.app_configs.keys()), ['app1'])\n\n    def test_unset_available_apps(self):\n        app_config1 = MagicMock(spec=AppConfig)\n        app_config1.name = 'app1'\n        app_config2 = MagicMock(spec=AppConfig)\n        app_config2.name = 'app2'\n        self.apps.app_configs = {'app1': app_config1, 'app2': app_config2}\n        self.apps.stored_app_configs = [self.apps.app_configs]\n\n        self.apps.unset_available_apps()\n        self.assertEqual(self.apps.app_configs, {'app1': app_config1, 'app2': app_config2})\n\n    @patch('django.apps.registry.Apps.populate')\n    def test_set_installed_apps(self, mock_populate):\n        self.apps.ready = True\n\n        self.apps.set_installed_apps(['app1', 'app2'])\n        mock_populate.assert_called_once_with(['app1', 'app2'])\n\n    @patch('django.apps.registry.Apps.clear_cache')\n    def test_unset_installed_apps(self, mock_clear_cache):\n        app_config1 = MagicMock(spec=AppConfig)\n        app_config1.name = 'app1'\n        app_config2 = MagicMock(spec=AppConfig)\n        app_config2.name = 'app2'\n        self.apps.stored_app_configs = [{'app1': app_config1, 'app2': app_config2}]\n\n        self.apps.unset_installed_apps()\n        self.assertEqual(self.apps.app_configs, {'app1': app_config1, 'app2': app_config2})\n        self.assertTrue(self.apps.apps_ready)\n        self.assertTrue(self.apps.models_ready)\n        self.assertTrue(self.apps.ready)\n        mock_clear_cache.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_572": ["\nimport unittest\nimport numpy as np\nfrom seaborn._statistics import KDE, Histogram, ECDF, EstimateAggregator, _validate_errorbar_arg, _no_scipy\n\nclass TestStatistics(unittest.TestCase):\n    def setUp(self):\n        self.x1 = np.random.normal(0, 1, 100)\n        self.x2 = np.random.normal(0, 1, 100)\n        self.weights = np.random.uniform(0, 1, 100)\n\n    def test_kde_univariate(self):\n        kde = KDE()\n        density, support = kde(self.x1)\n        self.assertEqual(len(density), kde.gridsize)\n        self.assertEqual(len(support), kde.gridsize)\n\n    def test_kde_bivariate(self):\n        kde = KDE()\n        density, support = kde(self.x1, self.x2)\n        self.assertEqual(density.shape, (kde.gridsize, kde.gridsize))\n        self.assertEqual(len(support), 2)\n        self.assertEqual(len(support[0]), kde.gridsize)\n        self.assertEqual(len(support[1]), kde.gridsize)\n\n    def test_histogram_univariate(self):\n        histogram = Histogram()\n        hist, bin_edges = histogram(self.x1)\n        self.assertEqual(len(hist), len(bin_edges) - 1)\n\n    def test_histogram_bivariate(self):\n        histogram = Histogram()\n        hist, bin_edges = histogram(self.x1, self.x2)\n        self.assertEqual(hist.shape, (len(bin_edges[0]) - 1, len(bin_edges[1]) - 1))\n\n    def test_ecdf_univariate(self):\n        ecdf = ECDF()\n        y, x = ecdf(self.x1)\n        self.assertEqual(len(y), len(x))\n\n    def test_ecdf_bivariate(self):\n        ecdf = ECDF()\n        with self.assertRaises(NotImplementedError):\n            ecdf(self.x1, self.x2)\n\n    def test_estimate_aggregator(self):\n        aggregator = EstimateAggregator(np.mean)\n        result = aggregator(pd.DataFrame({'var': self.x1}), 'var')\n        self.assertIn('var', result)\n        self.assertIn('varmin', result)\n        self.assertIn('varmax', result)\n\n    def test_validate_errorbar_arg(self):\n        method, level = _validate_errorbar_arg('ci')\n        self.assertEqual(method, 'ci')\n        self.assertEqual(level, 95)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_416": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.db.backends.postgresql.client import DatabaseClient\n\nclass TestDatabaseClient(unittest.TestCase):\n    def test_settings_to_cmd_args_env_minimal(self):\n        settings_dict = {}\n        parameters = []\n        args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n        self.assertEqual(args, [\"psql\", \"postgres\"])\n        self.assertIsNone(env)\n\n    def test_settings_to_cmd_args_env_full(self):\n        settings_dict = {\n            \"HOST\": \"localhost\",\n            \"PORT\": 5432,\n            \"NAME\": \"mydb\",\n            \"USER\": \"myuser\",\n            \"PASSWORD\": \"mypass\",\n            \"OPTIONS\": {\n                \"passfile\": \"/tmp/pgpass\",\n                \"service\": \"myservice\",\n                \"sslmode\": \"require\",\n                \"sslrootcert\": \"/etc/ssl/cert.pem\",\n                \"sslcert\": \"/etc/ssl/client-cert.pem\",\n                \"sslkey\": \"/etc/ssl/client-key.pem\"\n            }\n        }\n        parameters = [\"-c\", \"mycommand\"]\n        args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n        self.assertEqual(args, [\"psql\", \"-U\", \"myuser\", \"-h\", \"localhost\", \"-p\", \"5432\", \"-c\", \"mycommand\", \"mydb\"])\n        self.assertEqual(env, {\n            \"PGPASSWORD\": \"mypass\",\n            \"PGSERVICE\": \"myservice\",\n            \"PGSSLMODE\": \"require\",\n            \"PGSSLROOTCERT\": \"/etc/ssl/cert.pem\",\n            \"PGSSLCERT\": \"/etc/ssl/client-cert.pem\",\n            \"PGSSLKEY\": \"/etc/ssl/client-key.pem\",\n            \"PGPASSFILE\": \"/tmp/pgpass\"\n        })\n\n    @patch('django.db.backends.postgresql.client.signal')\n    def test_runshell(self, mock_signal):\n        mock_signal.SIGINT = 2\n        mock_signal.SIG_IGN = 1\n        mock_signal.getsignal.return_value = 'original_handler'\n        client = DatabaseClient()\n        client.runshell([])\n        mock_signal.signal.assert_any_call(2, 1)\n        mock_signal.signal.assert_any_call(2, 'original_handler')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1114": ["\nimport unittest\nfrom sympy import symbols, S, pi, I, Union, Interval, FiniteSet, Range, Lambda, Symbol, oo\nfrom sympy.sets.fancysets import ImageSet, normalize_theta_set, ComplexRegion\nfrom sympy.sets.sets import ProductSet\n\nclass TestFancySets(unittest.TestCase):\n\n    def setUp(self):\n        self.x = symbols('x')\n        self.y = symbols('y')\n        self.n = Symbol('n', integer=True)\n\n    def test_ImageSet(self):\n        f = Lambda(self.x, self.x**2)\n        N = S.Naturals\n        squares = ImageSet(f, N)\n        self.assertTrue(4 in squares)\n        self.assertFalse(5 in squares)\n\n    def test_Range(self):\n        r = Range(3)\n        self.assertEqual(list(r), [0, 1, 2])\n        r = Range(-3, 3, -1)\n        self.assertEqual(list(r), [-3, -2, -1, 0, 1, 2])\n\n    def test_normalize_theta_set(self):\n        theta = Interval(9*pi/2, 5*pi)\n        self.assertEqual(normalize_theta_set(theta), Interval(pi/2, pi))\n\n    def test_ComplexRegion(self):\n        a = Interval(2, 3)\n        b = Interval(4, 6)\n        c = Interval(1, 8)\n        c1 = ComplexRegion(a*b)\n        self.assertTrue(2.5 + 4.5*I in c1)\n        self.assertFalse(2.5 + 6.5*I in c1)\n\n        r = Interval(0, 1)\n        theta = Interval(0, 2*S.Pi)\n        c2 = ComplexRegion(r*theta, polar=True)\n        self.assertTrue(0.5 + 0.5*I in c2)\n        self.assertFalse(1 + 2*I in c2)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_7": ["\nimport unittest\nfrom astropy import units as u\nfrom astropy.modeling.parameters import Parameter, InputParameterError\n\nclass TestParameter(unittest.TestCase):\n\n    def test_init(self):\n        p = Parameter(name='test', default=1.0, unit=u.m, fixed=True)\n        self.assertEqual(p.name, 'test')\n        self.assertEqual(p.value, 1.0)\n        self.assertEqual(p.unit, u.m)\n        self.assertTrue(p.fixed)\n\n    def test_value_setter(self):\n        p = Parameter(name='test', default=1.0, unit=u.m)\n        p.value = 2.0\n        self.assertEqual(p.value, 2.0)\n        with self.assertRaises(InputParameterError):\n            p.value = 'invalid'\n\n    def test_unit_setter(self):\n        p = Parameter(name='test', default=1.0, unit=u.m)\n        p.unit = u.cm\n        self.assertEqual(p.unit, u.cm)\n        with self.assertRaises(ValueError):\n            p.unit = None\n\n    def test_quantity(self):\n        p = Parameter(name='test', default=1.0, unit=u.m)\n        self.assertEqual(p.quantity, 1.0 * u.m)\n        p.quantity = 2.0 * u.cm\n        self.assertEqual(p.value, 0.02)\n        self.assertEqual(p.unit, u.m)\n\n    def test_fixed_setter(self):\n        p = Parameter(name='test', fixed=False)\n        p.fixed = True\n        self.assertTrue(p.fixed)\n        with self.assertRaises(ValueError):\n            p.fixed = 'invalid'\n\n    def test_tied_setter(self):\n        p = Parameter(name='test', tied=False)\n        p.tied = lambda model: 2.0\n        self.assertTrue(callable(p.tied))\n        with self.assertRaises(TypeError):\n            p.tied = 'invalid'\n\n    def test_bounds_setter(self):\n        p = Parameter(name='test', bounds=(0, 1))\n        p.bounds = (0, 2)\n        self.assertEqual(p.bounds, (0, 2))\n        with self.assertRaises(TypeError):\n            p.bounds = ('invalid', 2)\n\n    def test_min_setter(self):\n        p = Parameter(name='test', min=0)\n        p.min = -1\n        self.assertEqual(p.min, -1)\n        self.assertEqual(p.max, None)\n\n    def test_max_setter(self):\n        p = Parameter(name='test', max=1)\n        p.max = 2\n        self.assertEqual(p.min, None)\n        self.assertEqual(p.max, 2)\n\n    def test_validator(self):\n        p = Parameter(name='test', default=1.0)\n        @p.validator\n        def validate_test(model, value):\n            if value < 0:\n                raise InputParameterError(\"Value must be positive\")\n        p.validate(2.0)\n        with self.assertRaises(InputParameterError):\n            p.validate(-1.0)\n\n    def test_copy(self):\n        p = Parameter(name='test', default=1.0, unit=u.m, fixed=True)\n        p_copy = p.copy(name='test_copy')\n        self.assertEqual(p_copy.name, 'test_copy')\n        self.assertEqual(p_copy.value, 1.0)\n        self.assertEqual(p_copy.unit, u.m)\n        self.assertTrue(p_copy.fixed)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1029": ["\nimport unittest\nfrom sympy import Add, Mul, Rational, Symbol, Integer, Matrix, S, Integers, Naturals, Naturals0, Reals, true, false, nan, Sum2, Function, AppliedPredicate, Predicate, WildFunction, AlgebraicNumber, PolyRing, FracField, PolyElement, FracElement, FractionField, PolynomialRing, DMP, FiniteExtension, ExtElem\nfrom sympy.printing.repr import ReprPrinter, srepr\n\nclass TestReprPrinter(unittest.TestCase):\n    def setUp(self):\n        self.printer = ReprPrinter()\n\n    def test_add(self):\n        expr = Add(Symbol('x'), Symbol('y'))\n        self.assertEqual(srepr(expr), \"Add(Symbol('x'), Symbol('y'))\")\n\n    def test_mul(self):\n        expr = Mul(Symbol('x'), Symbol('y'))\n        self.assertEqual(srepr(expr), \"Mul(Symbol('x'), Symbol('y'))\")\n\n    def test_rational(self):\n        expr = Rational(1, 2)\n        self.assertEqual(srepr(expr), \"Rational(1, 2)\")\n\n    def test_integer(self):\n        expr = Integer(10)\n        self.assertEqual(srepr(expr), \"Integer(10)\")\n\n    def test_matrix(self):\n        expr = Matrix([[1, 2], [3, 4]])\n        self.assertEqual(srepr(expr), \"Matrix([[1, 2], [3, 4]])\")\n\n    def test_sets(self):\n        self.assertEqual(srepr(Integers), \"Integers\")\n        self.assertEqual(srepr(Naturals), \"Naturals\")\n        self.assertEqual(srepr(Naturals0), \"Naturals0\")\n        self.assertEqual(srepr(Reals), \"Reals\")\n\n    def test_boolean(self):\n        self.assertEqual(srepr(true), \"true\")\n        self.assertEqual(srepr(false), \"false\")\n\n    def test_nan(self):\n        self.assertEqual(srepr(S.NaN), \"nan\")\n\n    def test_sum2(self):\n        expr = Sum2(Symbol('f'), (Symbol('i'), Symbol('a'), Symbol('b')))\n        self.assertEqual(srepr(expr), \"Sum2(Symbol('f'), (Symbol('i'), Symbol('a'), Symbol('b')))\")\n\n    def test_function(self):\n        expr = Function('f')(Symbol('x'))\n        self.assertEqual(srepr(expr), \"Function('f')(Symbol('x'))\")\n\n    def test_predicate(self):\n        expr = AppliedPredicate(Predicate('P'), Symbol('x'))\n        self.assertEqual(srepr(expr), \"AppliedPredicate(Predicate('P'), Symbol('x'))\")\n\n    def test_wildfunction(self):\n        expr = WildFunction('f')\n        self.assertEqual(srepr(expr), \"WildFunction('f')\")\n\n    def test_algebraicnumber(self):\n        expr = AlgebraicNumber(Symbol('x'), [1, -1, 1])\n        self.assertEqual(srepr(expr), \"AlgebraicNumber(Symbol('x'), [1, -1, 1])\")\n\n    def test_polyring(self):\n        expr = PolyRing(Symbol('x'), Integers, order='lex')\n        self.assertEqual(srepr(expr), \"PolyRing([Symbol('x')], Integers, 'lex')\")\n\n    def test_fracfield(self):\n        expr = FracField(Symbol('x'), Integers, order='lex')\n        self.assertEqual(srepr(expr), \"FracField([Symbol('x')], Integers, 'lex')\")\n\n    def test_polyelement(self):\n        ring = PolyRing(Symbol('x'), Integers, order='lex')\n        expr = PolyElement(ring, {(1,): 2, (2,): 3})\n        self.assertEqual(srepr(expr), \"PolyElement(PolyRing([Symbol('x')], Integers, 'lex'), [((1,), 2), ((2,), 3)])\")\n\n    def test_fracelement(self):\n        field = FracField(Symbol('x'), Integers, order='lex')\n        expr = FracElement(field, {(1,): 2}, {(1,): 3})\n        self.assertEqual(srepr(expr), \"FracElement(FracField([Symbol('x')], Integers, 'lex'), [((1,), 2)], [((1,), 3)])\")\n\n    def test_fractionfield(self):\n        expr = FractionField(Integers)\n        self.assertEqual(srepr(expr), \"FractionField(Integers)\")\n\n    def test_polynomialring(self):\n        expr = PolynomialRing(Integers, Symbol('x'), Symbol('y'))\n        self.assertEqual(srepr(expr), \"PolynomialRing(Integers, Symbol('x'), Symbol('y'))\")\n\n    def test_dmp(self):\n        expr = DMP([[1, 2], [3, 4]], Integers)\n        self.assertEqual(srepr(expr), \"DMP([[1, 2], [3, 4]], Integers)\")\n\n    def test_extensionelement(self):\n        ext = FiniteExtension(PolyRing(Symbol('x'), Integers, order='lex'), [1, -1, 1])\n        expr = ExtElem([1, 2, 3], ext)\n        self.assertEqual(srepr(expr), \"ExtElem([1, 2, 3], FiniteExtension(PolyRing([Symbol('x')], Integers, 'lex'), [1, -1, 1]))\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_738": ["\nimport unittest\nfrom sklearn.feature_extraction.text import strip_tags, strip_accents_unicode, strip_accents_ascii, HashingVectorizer, CountVectorizer, TfidfTransformer, TfidfVectorizer, ENGLISH_STOP_WORDS\n\nclass TestTextFeatureExtraction(unittest.TestCase):\n    def setUp(self):\n        self.text = \"This is a <b>sample</b> text with accents: r\u00e9sum\u00e9.\"\n        self.corpus = [\n            'This is the first document.',\n            'This document is the second document.',\n            'And this is the third one.',\n            'Is this the first document?',\n        ]\n\n    def test_strip_tags(self):\n        result = strip_tags(self.text)\n        self.assertEqual(result, \"This is a sample text with accents: r\u00e9sum\u00e9.\")\n\n    def test_strip_accents_unicode(self):\n        result = strip_accents_unicode(self.text)\n        self.assertEqual(result, \"This is a sample text with accents: resume.\")\n\n    def test_strip_accents_ascii(self):\n        result = strip_accents_ascii(self.text)\n        self.assertEqual(result, \"This is a sample text with accents: resume.\")\n\n    def test_hashing_vectorizer(self):\n        vectorizer = HashingVectorizer(n_features=20)\n        X = vectorizer.transform(self.corpus)\n        self.assertEqual(X.shape, (4, 20))\n\n    def test_count_vectorizer(self):\n        vectorizer = CountVectorizer()\n        X = vectorizer.fit_transform(self.corpus)\n        self.assertEqual(X.shape, (4, 10))\n\n    def test_tfidf_transformer(self):\n        vectorizer = CountVectorizer()\n        X = vectorizer.fit_transform(self.corpus)\n        transformer = TfidfTransformer()\n        tfidf = transformer.fit_transform(X)\n        self.assertEqual(tfidf.shape, (4, 10))\n\n    def test_tfidf_vectorizer(self):\n        vectorizer = TfidfVectorizer()\n        X = vectorizer.fit_transform(self.corpus)\n        self.assertEqual(X.shape, (4, 10))\n\n    def test_english_stop_words(self):\n        self.assertIsInstance(ENGLISH_STOP_WORDS, frozenset)\n        self.assertTrue('the' in ENGLISH_STOP_WORDS)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_272": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.migrations.executor import MigrationExecutor\nfrom django.db.migrations import Migration\n\nclass TestMigrationExecutor(unittest.TestCase):\n    @patch('django.db.migrations.executor.MigrationLoader')\n    @patch('django.db.migrations.executor.MigrationRecorder')\n    def setUp(self, MockMigrationLoader, MockMigrationRecorder):\n        self.connection = MagicMock()\n        self.executor = MigrationExecutor(self.connection)\n        self.loader = MockMigrationLoader.return_value\n        self.recorder = MockMigrationRecorder.return_value\n\n    def test_migration_plan(self):\n        targets = [('test_app', '0001_initial')]\n        self.loader.applied_migrations = {('test_app', '0001_initial'): Migration('test_app', '0001_initial')}\n        self.loader.graph.root_nodes.return_value = []\n        self.loader.graph.backwards_plan.return_value = []\n        self.loader.graph.forwards_plan.return_value = []\n\n        plan = self.executor.migration_plan(targets)\n        self.assertEqual(plan, [])\n\n    def test_migrate(self):\n        targets = [('test_app', '0001_initial')]\n        self.loader.applied_migrations = {('test_app', '0001_initial'): Migration('test_app', '0001_initial')}\n        self.loader.graph.leaf_nodes.return_value = []\n        self.loader.graph.root_nodes.return_value = []\n        self.loader.graph.backwards_plan.return_value = []\n        self.loader.graph.forwards_plan.return_value = []\n\n        state = self.executor.migrate(targets)\n        self.assertEqual(state, self.executor._create_project_state(with_applied_migrations=True))\n\n    def test_apply_migration(self):\n        state = MagicMock()\n        migration = Migration('test_app', '0001_initial')\n        self.executor.apply_migration(state, migration)\n        self.recorder.record_applied.assert_called_once_with('test_app', '0001_initial')\n\n    def test_unapply_migration(self):\n        state = MagicMock()\n        migration = Migration('test_app', '0001_initial')\n        self.executor.unapply_migration(state, migration)\n        self.recorder.record_unapplied.assert_called_once_with('test_app', '0001_initial')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_234": ["\nfrom django.test import TestCase\nfrom django.db.models import QuerySet, EmptyQuerySet, RawQuerySet, Prefetch\nfrom django.db.models.query import normalize_prefetch_lookups, prefetch_related_objects, get_prefetcher, prefetch_one_level, RelatedPopulator, get_related_populators\nfrom django.db.models import Model\nfrom unittest.mock import MagicMock, patch\n\nclass TestQuerySetMethods(TestCase):\n    def setUp(self):\n        # Create a mock model for testing\n        self.mock_model = MagicMock(spec=Model)\n        self.mock_model._meta.pk.attname = 'id'\n        self.mock_model._meta.fields = [MagicMock(attname='id')]  # Add more fields as needed\n\n    def test_normalize_prefetch_lookups(self):\n        lookups = ['field1', Prefetch('field2')]\n        normalized_lookups = normalize_prefetch_lookups(lookups)\n        self.assertEqual(len(normalized_lookups), 2)\n        self.assertIsInstance(normalized_lookups[0], Prefetch)\n        self.assertIsInstance(normalized_lookups[1], Prefetch)\n\n    def test_prefetch_related_objects(self):\n        model_instances = [MagicMock(spec=self.mock_model)]\n        related_lookups = ['field1']\n        prefetch_related_objects(model_instances, *related_lookups)\n        # Add assertions to verify the behavior\n\n    # Add more test methods for other functions as needed\n\nclass TestPrefetch(TestCase):\n    def test_prefetch_init_and_methods(self):\n        lookup = 'field1'\n        queryset = MagicMock(spec=QuerySet)\n        to_attr = 'attr1'\n        prefetch = Prefetch(lookup, queryset, to_attr)\n        self.assertEqual(prefetch.prefetch_through, lookup)\n        self.assertEqual(prefetch.prefetch_to, f'{lookup}__{to_attr}')\n        self.assertEqual(prefetch.queryset, queryset)\n        self.assertEqual(prefetch.to_attr, to_attr)\n\n    # Add more test methods for other Prefetch methods as needed\n\n# Add more test classes for other parts of the code as needed\n"], "sample_311": ["\nimport unittest\nfrom django.utils.tree import Node\n\nclass TestNode(unittest.TestCase):\n    def setUp(self):\n        self.node1 = Node(['a', 'b'], 'AND')\n        self.node2 = Node(['c', 'd'], 'OR')\n\n    def test_init(self):\n        self.assertEqual(self.node1.children, ['a', 'b'])\n        self.assertEqual(self.node1.connector, 'AND')\n        self.assertFalse(self.node1.negated)\n\n    def test_new_instance(self):\n        new_node = self.node1._new_instance()\n        self.assertIsInstance(new_node, Node)\n        self.assertEqual(new_node.children, [])\n        self.assertEqual(new_node.connector, 'DEFAULT')\n        self.assertFalse(new_node.negated)\n\n    def test_str(self):\n        self.assertEqual(str(self.node1), '(AND: a, b)')\n        self.node1.negate()\n        self.assertEqual(str(self.node1), '(NOT (AND: a, b))')\n\n    def test_len(self):\n        self.assertEqual(len(self.node1), 2)\n\n    def test_bool(self):\n        self.assertTrue(self.node1)\n\n    def test_contains(self):\n        self.assertTrue('a' in self.node1)\n        self.assertFalse('c' in self.node1)\n\n    def test_eq(self):\n        self.assertNotEqual(self.node1, self.node2)\n        self.assertEqual(self.node1, Node(['a', 'b'], 'AND'))\n\n    def test_hash(self):\n        self.assertEqual(hash(self.node1), hash(Node(['a', 'b'], 'AND')))\n\n    def test_add(self):\n        self.node1.add('c', 'OR')\n        self.assertEqual(str(self.node1), '(OR: (AND: a, b), c)')\n\n    def test_negate(self):\n        self.node1.negate()\n        self.assertTrue(self.node1.negated)\n        self.node1.negate()\n        self.assertFalse(self.node1.negated)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_584": ["\nimport unittest\nfrom xarray import Dataset, concat, combine_by_coords, combine_nested, auto_combine\nfrom xarray.core.combine import (_new_tile_id, _check_shape_tile_ids, _combine_all_along_first_dim,\n                                 _combine_nd, _infer_concat_order_from_positions, _infer_concat_order_from_coords)\n\nclass TestCombine(unittest.TestCase):\n    def setUp(self):\n        self.ds1 = Dataset({'temperature': (('x', 'y'), [[11.04, 23.57], [20.77, 18.56]])},\n                           coords={'x': [0, 1], 'y': [0, 1]})\n        self.ds2 = Dataset({'temperature': (('x', 'y'), [[6.97, 8.13], [7.42, 5.90]])},\n                           coords={'x': [2, 3], 'y': [2, 3]})\n\n    def test_combine_by_coords(self):\n        combined = combine_by_coords([self.ds2, self.ds1])\n        self.assertEqual(combined.dims, {'x': 4, 'y': 4})\n\n    def test_combine_nested(self):\n        ds_grid = [[self.ds1, Dataset({'temperature': (('x', 'y'), [[12, 13], [14, 15]])},\n                                      coords={'x': [0, 1], 'y': [2, 3]})],\n                    [Dataset({'temperature': (('x', 'y'), [[16, 17], [18, 19]])},\n                             coords={'x': [2, 3], 'y': [0, 1]}),\n                     self.ds2]]\n        combined = combine_nested(ds_grid, concat_dim=['x', 'y'])\n        self.assertEqual(combined.dims, {'x': 4, 'y': 4})\n\n    def test_auto_combine(self):\n        combined = auto_combine([self.ds2, self.ds1])\n        self.assertEqual(combined.dims, {'x': 4, 'y': 4})\n\n    def test_new_tile_id(self):\n        single_id_ds_pair = ((1, 2, 3), self.ds1)\n        new_id = _new_tile_id(single_id_ds_pair)\n        self.assertEqual(new_id, (2, 3))\n\n    def test_check_shape_tile_ids(self):\n        combined_tile_ids = {(1, 2): self.ds1, (3, 4): self.ds2}\n        _check_shape_tile_ids(combined_tile_ids)\n\n    def test_combine_all_along_first_dim(self):\n        combined_ids = {(1, 2): self.ds1, (1, 3): self.ds2}\n        new_combined_ids = _combine_all_along_first_dim(combined_ids, dim='y', data_vars='all',\n                                                        coords='different', compat='no_conflicts')\n        self.assertEqual(new_combined_ids, {(2,): concat([self.ds1, self.ds2], dim='y')})\n\n    def test_combine_nd(self):\n        combined_ids = {(1, 2): self.ds1, (1, 3): self.ds2}\n        combined = _combine_nd(combined_ids, concat_dims=['y'], data_vars='all', coords='different')\n        self.assertEqual(combined.dims, {'x': 2, 'y': 4})\n\n    def test_infer_concat_order_from_positions(self):\n        datasets = [self.ds1, self.ds2]\n        combined_ids = _infer_concat_order_from_positions(datasets)\n        self.assertEqual(combined_ids, {(0,): self.ds1, (1,): self.ds2})\n\n    def test_infer_concat_order_from_coords(self):\n        datasets = [self.ds1, self.ds2]\n        combined_ids, concat_dims = _infer_concat_order_from_coords(datasets)\n        self.assertEqual(combined_ids, {(0,): self.ds1, (1,): self.ds2})\n        self.assertEqual(concat_dims, ['x'])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1138": ["\nimport unittest\nfrom sympy import symbols, sin, cos, sqrt, pi, cot, tan, cosh, sinh\nfrom sympy.simplify.fu import fu, TR0, TR1, TR2, TR3, TR4, TR5, TR6, TR7, TR8, TR9, TR10, TR10i, TR11, TR12, TR13, TR2i, TRmorrie, TR14, TR15, TR16, TR12i, TR111, TR22, process_common_addends, trig_split, as_f_sign_1, hyper_as_trig, sincos_to_sum\n\nclass TestFuFunctions(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_TR0(self):\n        self.assertEqual(TR0(sin(self.x) + 2*sin(self.x)), 3*sin(self.x))\n\n    def test_TR1(self):\n        self.assertEqual(TR1(1/cos(self.x)), sec(self.x))\n\n    def test_TR2(self):\n        self.assertEqual(TR2(tan(self.x)), sin(self.x)/cos(self.x))\n\n    # Add more tests for other functions in a similar manner...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_329": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    SequenceSerializer,\n    DictionarySerializer,\n    ChoicesSerializer,\n    DatetimeDatetimeSerializer,\n    DecimalSerializer,\n    DeconstructableSerializer,\n    EnumSerializer,\n    FloatSerializer,\n    FrozensetSerializer,\n    FunctionTypeSerializer,\n    FunctoolsPartialSerializer,\n    IterableSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    PathLikeSerializer,\n    PathSerializer,\n    RegexSerializer,\n    SetSerializer,\n    SettingsReferenceSerializer,\n    TupleSerializer,\n    TypeSerializer,\n    UUIDSerializer,\n    serializer_factory\n)\nfrom django.db import models\nfrom django.conf import SettingsReference\nfrom django.utils.functional import Promise\nfrom django.utils.timezone import utc\nimport datetime\nimport decimal\nimport enum\nimport functools\nimport os\nimport pathlib\nimport re\nimport types\nimport uuid\n\nclass TestSerializer(unittest.TestCase):\n    def test_base_serializer(self):\n        with self.assertRaises(NotImplementedError):\n            BaseSerializer('test').serialize()\n\n    def test_sequence_serializer(self):\n        seq_serializer = SequenceSerializer([1, 2, 3])\n        self.assertEqual(seq_serializer.serialize(), ('[1, 2, 3]', set()))\n\n    def test_dictionary_serializer(self):\n        dict_serializer = DictionarySerializer({'a': 1, 'b': 2})\n        self.assertEqual(dict_serializer.serialize(), ('{\"a\": 1, \"b\": 2}', set()))\n\n    def test_choices_serializer(self):\n        class TestChoices(models.Choices):\n            A = 'A'\n        choices_serializer = ChoicesSerializer(TestChoices.A)\n        self.assertEqual(choices_serializer.serialize(), (\"'A'\", set()))\n\n    # More tests for other serializers can be added similarly...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1170": ["\nimport unittest\nfrom sympy import symbols, Eq, S, Rational, Integer, Float, oo, zoo, E, I, pi, Catalan, EulerGamma, GoldenRatio, TribonacciConstant, FiniteSet, Derivative, Dict, Lambda, Limit, RandomDomain, Dummy, Integral, Interval, AccumulationBounds, Inverse, LatticeOp, MatrixBase, MatrixElement, MatrixSlice, DeferredVector, NaN, NegativeInfinity, Order, Ordinal, Cycle, Permutation, Subs, TensorIndex, TensorHead, Tensor, TensMul, TensAdd, ArraySymbol, ArrayElement, PermutationGroup, PolyRing, FracField, FreeGroupElement, GaussianElement, PolyElement, FracElement, Poly, UniversalSet, AlgebraicNumber, Pow, UnevaluatedExpr, MatPow, Integers, Naturals, Naturals0, Rationals, Reals, Complexes, EmptySet, EmptySequence, Sum, Symbol, Identity, ZeroMatrix, OneMatrix, Predicate, Transpose, Uniform, Quantity, Quaternion, Dimension, Wild, WildFunction, WildDot, WildPlus, WildStar, Zero, DMP, DMF, Object, IdentityMorphism, NamedMorphism, Category, Manifold, Patch, CoordSystem, BaseScalarField, BaseVectorField, Differential, Tr, AppliedBinaryRelation\nfrom sympy.printing import sstr, sstrrepr, StrPrinter\nfrom sympy.core.sympify import SympifyError\nfrom sympy.matrices import Matrix\n\nclass TestStrPrinter(unittest.TestCase):\n    def setUp(self):\n        self.printer = StrPrinter()\n        self.a, self.b = symbols('a b')\n\n    def test_print_Add(self):\n        self.assertEqual(self.printer._print_Add(self.a + self.b), 'a + b')\n\n    def test_print_BooleanTrue(self):\n        self.assertEqual(self.printer._print_BooleanTrue(True), 'True')\n\n    def test_print_BooleanFalse(self):\n        self.assertEqual(self.printer._print_BooleanFalse(False), 'False')\n\n    # Add more test cases for other methods in the StrPrinter class\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_19": ["\nimport unittest\nimport numpy as np\nimport astropy.units as u\nfrom astropy.units.quantity import Quantity, isclose, allclose\n\nclass TestQuantity(unittest.TestCase):\n    def setUp(self):\n        self.q1 = Quantity(2.5, unit=u.m)\n        self.q2 = Quantity(3.5, unit=u.m)\n        self.q3 = Quantity(2.5, unit=u.m)\n        self.q4 = Quantity(5, unit=u.cm)\n        self.q5 = Quantity(250, unit=u.cm)\n\n    def test_init(self):\n        self.assertEqual(self.q1.value, 2.5)\n        self.assertEqual(self.q1.unit, u.m)\n\n    def test_equality(self):\n        self.assertEqual(self.q1, self.q3)\n        self.assertNotEqual(self.q1, self.q2)\n\n    def test_conversion(self):\n        self.assertEqual(self.q4.to(u.m), self.q1)\n        self.assertEqual(self.q5.to(u.m), self.q2)\n\n    def test_arithmetic(self):\n        self.assertEqual(self.q1 + self.q4, self.q2)\n        self.assertEqual(self.q2 - self.q1, self.q4)\n        self.assertEqual(self.q1 * 2, self.q5)\n        self.assertEqual(self.q5 / 2, self.q1)\n\n    def test_isclose(self):\n        self.assertTrue(isclose(self.q1, self.q3))\n        self.assertFalse(isclose(self.q1, self.q2))\n\n    def test_allclose(self):\n        self.assertTrue(allclose(self.q1, self.q3))\n        self.assertFalse(allclose(self.q1, self.q2))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_184": ["\nfrom unittest import TestCase\nfrom unittest.mock import MagicMock, patch\nfrom django.db import models\nfrom django.db.models.base import Model\n\nclass ModelTests(TestCase):\n    def setUp(self):\n        self.Model = Model\n\n    def test_model_init(self):\n        class TestModel(self.Model):\n            name = models.CharField(max_length=200)\n\n        model = TestModel(name='Test')\n        self.assertEqual(model.name, 'Test')\n\n    def test_model_save(self):\n        class TestModel(self.Model):\n            name = models.CharField(max_length=200)\n\n        model = TestModel(name='Test')\n        model.save = MagicMock(return_value=None)\n        model.save_base = MagicMock(return_value=None)\n        model.save()\n        model.save_base.assert_called_once()\n\n    def test_model_delete(self):\n        class TestModel(self.Model):\n            name = models.CharField(max_length=200)\n\n        model = TestModel(name='Test')\n        model.pk = 1\n        model.delete = MagicMock(return_value=None)\n        with patch('django.db.models.base.Collector') as mock_collector:\n            instance = mock_collector.return_value\n            instance.delete.return_value = None\n            model.delete()\n            mock_collector.assert_called_once()\n\n    def test_model_clean(self):\n        class TestModel(self.Model):\n            name = models.CharField(max_length=200)\n\n        model = TestModel(name='Test')\n        model.clean = MagicMock(return_value=None)\n        model.clean_fields = MagicMock(return_value=None)\n        model.validate_unique = MagicMock(return_value=None)\n        model.full_clean()\n        model.clean.assert_called_once()\n        model.clean_fields.assert_called_once()\n        model.validate_unique.assert_called_once()\n"], "sample_39": ["\nimport unittest\nfrom astropy.wcs import WCS, find_all_wcs, validate\nfrom astropy.io import fits\nimport numpy as np\n\nclass TestWCS(unittest.TestCase):\n\n    def setUp(self):\n        self.header = fits.Header.fromtext(\"\"\"\n        SIMPLE  =                    T / conforms to FITS standard\n        BITPIX  =                   16 / array data type\n        NAXIS   =                    2 / number of array dimensions\n        NAXIS1  =                  200 / length of dimension 1\n        NAXIS2  =                  200 / length of dimension 2\n        CRPIX1  =                 100.0 / Reference pixel along dimension 1\n        CRPIX2  =                 100.0 / Reference pixel along dimension 2\n        CRVAL1  =                  30.0 / Right ascension at reference pixel\n        CRVAL2  =                  45.0 / Declination at reference pixel\n        CDELT1  =                 -0.05 / Degrees per pixel along dimension 1\n        CDELT2  =                  0.05 / Degrees per pixel along dimension 2\n        CTYPE1  = 'RA---TAN'           / Right ascension, gnomonic projection\n        CTYPE2  = 'DEC--TAN'           / Declination, gnomonic projection\n        END\n        \"\"\")\n\n    def test_wcs_init(self):\n        w = WCS(self.header)\n        self.assertIsInstance(w, WCS)\n\n    def test_wcs_pix2world(self):\n        w = WCS(self.header)\n        ra, dec = w.all_pix2world([100], [100], 1)\n        self.assertAlmostEqual(ra[0], 30.0, places=5)\n        self.assertAlmostEqual(dec[0], 45.0, places=5)\n\n    def test_wcs_world2pix(self):\n        w = WCS(self.header)\n        x, y = w.all_world2pix([30.0], [45.0], 1)\n        self.assertAlmostEqual(x[0], 100.0, places=5)\n        self.assertAlmostEqual(y[0], 100.0, places=5)\n\n    def test_find_all_wcs(self):\n        wcses = find_all_wcs(self.header)\n        self.assertIsInstance(wcses, list)\n        self.assertIsInstance(wcses[0], WCS)\n\n    def test_validate(self):\n        results = validate(self.header)\n        self.assertIsInstance(results, validate._WcsValidateResults)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_45": ["\nfrom django.test import TestCase\nfrom django.db.models import DateTimeField\nfrom django.db.models.functions import ExtractYear, ExtractMonth, TruncYear, TruncMonth, Now\nfrom django.utils import timezone\nfrom datetime import datetime\n\nclass DateTimeFunctionsTest(TestCase):\n    def setUp(self):\n        self.date_time = timezone.make_aware(datetime(2022, 3, 15, 12, 30, 45), timezone.get_current_timezone())\n\n    def test_extract_year(self):\n        year = ExtractYear(DateTimeField('date_time'))\n        self.assertEqual(year.resolve_expression().output_field, IntegerField())\n\n    def test_extract_month(self):\n        month = ExtractMonth(DateTimeField('date_time'))\n        self.assertEqual(month.resolve_expression().output_field, IntegerField())\n\n    def test_trunc_year(self):\n        trunc_year = TruncYear(DateTimeField('date_time'))\n        self.assertEqual(trunc_year.resolve_expression().output_field, DateTimeField())\n\n    def test_trunc_month(self):\n        trunc_month = TruncMonth(DateTimeField('date_time'))\n        self.assertEqual(trunc_month.resolve_expression().output_field, DateTimeField())\n\n    def test_now(self):\n        now = Now()\n        self.assertEqual(now.output_field, DateTimeField())\n"], "sample_686": ["\nimport pytest\nfrom _pytest import deprecated\n\ndef test_deprecated_plugins():\n    assert \"pytest_catchlog\" in deprecated.DEPRECATED_EXTERNAL_PLUGINS\n    assert \"pytest_capturelog\" in deprecated.DEPRECATED_EXTERNAL_PLUGINS\n    assert \"pytest_faulthandler\" in deprecated.DEPRECATED_EXTERNAL_PLUGINS\n\ndef test_funcargnames():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.FUNCARGNAMES\n\ndef test_fillfuncargs():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.FILLFUNCARGS\n\ndef test_result_log():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.RESULT_LOG\n\ndef test_fixture_positional_arguments():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.FIXTURE_POSITIONAL_ARGUMENTS\n\ndef test_node_use_from_parent():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.NODE_USE_FROM_PARENT.format(\"TestName\")\n\ndef test_junit_xml_default_family():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.JUNIT_XML_DEFAULT_FAMILY\n\ndef test_collect_directory_hook():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.COLLECT_DIRECTORY_HOOK\n\ndef test_pytest_collect_module():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.PYTEST_COLLECT_MODULE.format(\"TestName\")\n\ndef test_terminalwriter_writer():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.TERMINALWRITER_WRITER\n\ndef test_minus_k_dash():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.MINUS_K_DASH\n\ndef test_minus_k_colon():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.MINUS_K_COLON\n\ndef test_warning_captured_hook():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.WARNING_CAPTURED_HOOK\n\ndef test_fscollector_gethookproxy_isinitpath():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.FSCOLLECTOR_GETHOOKPROXY_ISINITPATH\n"], "sample_391": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db import models\nfrom django.db.migrations.operations.models import (\n    CreateModel, DeleteModel, RenameModel, AlterModelTable,\n    AlterUniqueTogether, AlterIndexTogether, AlterOrderWithRespectTo,\n    AlterModelOptions, AlterModelManagers, AddIndex, RemoveIndex,\n    AddConstraint, RemoveConstraint\n)\nfrom django.db.migrations.state import ModelState\nfrom django.db.migrations.utils import resolve_relation\n\nclass TestModelOperations(unittest.TestCase):\n    def setUp(self):\n        self.app_label = 'test_app'\n        self.model_name = 'TestModel'\n        self.operation = CreateModel(self.model_name, [('name', models.CharField(max_length=100))])\n        self.state = Mock()\n        self.schema_editor = Mock()\n        self.from_state = Mock()\n        self.to_state = Mock()\n\n    def test_create_model_state_forwards(self):\n        self.operation.state_forwards(self.app_label, self.state)\n        self.state.add_model.assert_called_once_with(ModelState(self.app_label, self.model_name, self.operation.fields, self.operation.options, self.operation.bases, self.operation.managers))\n\n    def test_delete_model_state_forwards(self):\n        operation = DeleteModel(self.model_name)\n        operation.state_forwards(self.app_label, self.state)\n        self.state.remove_model.assert_called_once_with(self.app_label, self.model_name.lower())\n\n    def test_rename_model_state_forwards(self):\n        new_name = 'NewTestModel'\n        operation = RenameModel(self.model_name, new_name)\n        operation.state_forwards(self.app_label, self.state)\n        self.state.rename_model.assert_called_once_with(self.app_label, self.model_name, new_name)\n\n    # Add more tests for AlterModelTable, AlterUniqueTogether, AlterIndexTogether, AlterOrderWithRespectTo, AlterModelOptions, AlterModelManagers, AddIndex, RemoveIndex, AddConstraint, RemoveConstraint\n\n    # Example test for AlterModelTable\n    def test_alter_model_table_state_forwards(self):\n        new_table = 'new_table'\n        operation = AlterModelTable(self.model_name, new_table)\n        operation.state_forwards(self.app_label, self.state)\n        self.state.alter_model_options.assert_called_once_with(self.app_label, self.model_name.lower(), {\"db_table\": new_table})\n\n    # You can add more tests for other methods like database_forwards, database_backwards, describe, migration_name_fragment, references_model, reduce, deconstruct, etc.\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_687": ["\nimport os\nimport sys\nimport unittest\nimport tempfile\nfrom pathlib import Path\nfrom _pytest.pathlib import (\n    get_lock_path,\n    ensure_reset_dir,\n    rm_rf,\n    find_prefixed,\n    extract_suffixes,\n    find_suffixes,\n    parse_num,\n    make_numbered_dir,\n    create_cleanup_lock,\n    register_cleanup_lock_removal,\n    maybe_delete_a_numbered_dir,\n    ensure_deletable,\n    try_cleanup,\n    cleanup_candidates,\n    cleanup_numbered_dir,\n    make_numbered_dir_with_cleanup,\n    resolve_from_str,\n    fnmatch_ex,\n    parts,\n    symlink_or_skip,\n    import_path,\n    resolve_package_path,\n    absolutepath,\n    commonpath,\n    bestrelpath,\n    ImportMode,\n)\n\nclass TestPathlibFunctions(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = tempfile.TemporaryDirectory()\n\n    def tearDown(self):\n        self.temp_dir.cleanup()\n\n    def test_get_lock_path(self):\n        path = Path(self.temp_dir.name)\n        self.assertEqual(get_lock_path(path), path.joinpath(\".lock\"))\n\n    def test_ensure_reset_dir(self):\n        path = Path(self.temp_dir.name) / \"test_dir\"\n        path.mkdir()\n        ensure_reset_dir(path)\n        self.assertTrue(path.is_dir())\n        self.assertEqual(len(os.listdir(path)), 0)\n\n    def test_rm_rf(self):\n        path = Path(self.temp_dir.name) / \"test_dir\"\n        path.mkdir()\n        (path / \"file\").touch()\n        rm_rf(path)\n        self.assertFalse(path.exists())\n\n    def test_find_prefixed(self):\n        path = Path(self.temp_dir.name)\n        (path / \"prefix1\").mkdir()\n        (path / \"prefix2\").mkdir()\n        (path / \"noprefix\").mkdir()\n        result = list(find_prefixed(path, \"prefix\"))\n        self.assertEqual(len(result), 2)\n\n    def test_extract_suffixes(self):\n        paths = [Path(\"prefix1\"), Path(\"prefix2\")]\n        result = list(extract_suffixes(paths, \"prefix\"))\n        self.assertEqual(result, [\"1\", \"2\"])\n\n    def test_find_suffixes(self):\n        path = Path(self.temp_dir.name)\n        (path / \"prefix1\").mkdir()\n        (path / \"prefix2\").mkdir()\n        result = list(find_suffixes(path, \"prefix\"))\n        self.assertEqual(result, [\"1\", \"2\"])\n\n    def test_parse_num(self):\n        self.assertEqual(parse_num(\"123\"), 123)\n        self.assertEqual(parse_num(\"abc\"), -1)\n\n    def test_make_numbered_dir(self):\n        path = Path(self.temp_dir.name)\n        result = make_numbered_dir(path, \"prefix\")\n        self.assertTrue(result.is_dir())\n        self.assertEqual(result.name, \"prefix1\")\n\n    def test_create_cleanup_lock(self):\n        path = Path(self.temp_dir.name)\n        lock_path = create_cleanup_lock(path)\n        self.assertTrue(lock_path.is_file())\n\n    def test_register_cleanup_lock_removal(self):\n        path = Path(self.temp_dir.name)\n        lock_path = create_cleanup_lock(path)\n        register_cleanup_lock_removal(lock_path)\n        self.assertTrue(lock_path.is_file())\n        # Test that the lock is removed on exit\n\n    def test_maybe_delete_a_numbered_dir(self):\n        path = Path(self.temp_dir.name) / \"prefix1\"\n        path.mkdir()\n        maybe_delete_a_numbered_dir(path)\n        self.assertFalse(path.exists())\n\n    def test_ensure_deletable(self):\n        path = Path(self.temp_dir.name) / \"prefix1\"\n        path.mkdir()\n        self.assertTrue(ensure_deletable(path, 0))\n\n    def test_try_cleanup(self):\n        path = Path(self.temp_dir.name) / \"prefix1\"\n        path.mkdir()\n        try_cleanup(path, 0)\n        self.assertFalse(path.exists())\n\n    def test_cleanup_candidates(self):\n        path = Path(self.temp_dir.name)\n        (path / \"prefix1\").mkdir()\n        (path / \"prefix2\").mkdir()\n        result = list(cleanup_candidates(path, \"prefix\", 1))\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0].name, \"prefix1\")\n\n    def test_cleanup_numbered_dir(self):\n        path = Path(self.temp_dir.name)\n        (path / \"prefix1\").mkdir()\n        (path / \"prefix2\").mkdir()\n        cleanup_numbered_dir(path, \"prefix\", 1, 0)\n        self.assertFalse((path / \"prefix1\").exists())\n\n    def test_make_numbered_dir_with_cleanup(self):\n        path = Path(self.temp_dir.name)\n        result = make_numbered_dir_with_cleanup(path, \"prefix\", 1, 0)\n        self.assertTrue(result.is_dir())\n        self.assertTrue((path / \"prefix1\").exists())\n        self.assertTrue((path / \"prefix1/.lock\").is_file())\n\n    def test_resolve_from_str(self):\n        rootpath = Path(self.temp_dir.name)\n        input_str = \"subdir\"\n        result = resolve_from_str(input_str, rootpath)\n        self.assertEqual(result, rootpath / input_str)\n\n    def test_fnmatch_ex(self):\n        pattern = \"tests/**/doc/test*.py\"\n        path = \"tests/foo/bar/doc/test_foo.py\"\n        self.assertTrue(fnmatch_ex(pattern, path))\n\n    def test_parts(self):\n        s = \"a/b/c/d\"\n        result = parts(s)\n        self.assertEqual(result, {\"a\", \"a/b\", \"a/b/c\", \"a/b/c/d\"})\n\n    def test_symlink_or_skip(self):\n        src = Path(self.temp_dir.name) / \"src\"\n        dst = Path(self.temp_dir.name) / \"dst\"\n        src.touch()\n        symlink_or_skip(src, dst)\n        self.assertTrue(dst.is_symlink())\n\n    def test_import_path(self):\n        path = Path(self.temp_dir.name) / \"test_module.py\"\n        with open(path, \"w\") as f:\n            f.write(\"def test_function():\\n    return True\")\n        mod = import_path(path, mode=ImportMode.importlib)\n        self.assertTrue(mod.test_function())\n\n    def test_resolve_package_path(self):\n        path = Path(self.temp_dir.name) / \"package/__init__.py\"\n        path.parent.mkdir()\n        path.touch()\n        result = resolve_package_path(path)\n        self.assertEqual(result, path.parent)\n\n    def test_absolutepath(self):\n        path = \"relative/path\"\n        result = absolutepath(path)\n        self.assertEqual(result, Path(os.path.abspath(path)))\n\n    def test_commonpath(self):\n        path1 = Path(\"/a/b/c\")\n        path2 = Path(\"/a/d/e\")\n        result = commonpath(path1, path2)\n        self.assertEqual(result, Path(\"/a\"))\n\n    def test_bestrelpath(self):\n        directory = Path(\"/a/b/c\")\n        dest = Path(\"/a/d/e\")\n        result = bestrelpath(directory, dest)\n        self.assertEqual(result, \"../../d/e\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_888": ["\nimport unittest\nimport numpy as np\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.ensemble._iforest import _average_path_length\n\nclass TestIsolationForest(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.X = np.random.rand(100, 5)\n\n    def test_isolation_forest_fit_predict(self):\n        clf = IsolationForest(n_estimators=10, random_state=0)\n        clf.fit(self.X)\n        y_pred = clf.predict(self.X)\n        self.assertEqual(len(y_pred), self.X.shape[0])\n        self.assertTrue(np.all(np.isin(y_pred, [-1, 1])))\n\n    def test_isolation_forest_decision_function(self):\n        clf = IsolationForest(n_estimators=10, random_state=0)\n        clf.fit(self.X)\n        scores = clf.decision_function(self.X)\n        self.assertEqual(len(scores), self.X.shape[0])\n\n    def test_average_path_length(self):\n        n_samples_leaf = np.array([1, 2, 3, 4, 5])\n        avg_path_length = _average_path_length(n_samples_leaf)\n        self.assertEqual(len(avg_path_length), len(n_samples_leaf))\n        self.assertEqual(avg_path_length[0], 0.0)\n        self.assertEqual(avg_path_length[1], 1.0)\n        self.assertIsInstance(avg_path_length[2], float)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1148": ["\nimport unittest\nfrom sympy import MatrixSymbol, Identity, Add, MatMul, Sum, Mul, MatrixElement, KroneckerDelta, Dummy, symbols, S, MatrixBase, Inverse\n\nclass TestMatrixExpr(unittest.TestCase):\n    def setUp(self):\n        self.A = MatrixSymbol('A', 3, 4)\n        self.B = MatrixSymbol('B', 4, 3)\n        self.C = MatrixSymbol('C', 2, 2)\n\n    def test_shape(self):\n        self.assertEqual(self.A.shape, (3, 4))\n        self.assertEqual(self.B.shape, (4, 3))\n\n    def test_matrix_element(self):\n        self.assertEqual(self.A[0, 0], MatrixElement(self.A, 0, 0))\n\n    def test_matrix_multiplication(self):\n        self.assertEqual(2*self.A*self.B, MatMul(S(2), self.A, self.B))\n\n    def test_matrix_addition(self):\n        self.assertEqual(self.A + self.B, MatAdd(self.A, self.B))\n\n    def test_identity_multiplication(self):\n        self.assertEqual(self.A*Identity(3), self.A)\n\n    def test_matrix_derivative(self):\n        x = MatrixSymbol('x', 2, 1)\n        y = self.C.diff(x)\n        self.assertEqual(y.shape, (2, 2))\n\n    def test_matrix_element_derivative(self):\n        x = MatrixSymbol('x', 2, 2)\n        y = MatrixElement(x, 0, 0).diff(MatrixElement(x, 1, 1))\n        self.assertEqual(y, KroneckerDelta(0, 1, (0, 1)))\n\n    def test_matrix_from_index_summation(self):\n        i, j, k, N = symbols('i j k N')\n        expr = Sum(self.A[i, j]*self.B[j, k], (j, 0, N-1))\n        self.assertEqual(self.A.from_index_summation(expr), self.A*self.B)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_799": ["\nimport unittest\nfrom sklearn.datasets import load_iris\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import Pipeline, FeatureUnion, make_pipeline, make_union\nfrom sklearn.model_selection import GridSearchCV\n\nclass TestPipeline(unittest.TestCase):\n    def setUp(self):\n        self.iris = load_iris()\n        self.X = self.iris.data\n        self.y = self.iris.target\n\n    def test_pipeline(self):\n        clf = make_pipeline(PCA(n_components=2), SVC(gamma='auto'))\n        clf.fit(self.X, self.y)\n        prediction = clf.predict(self.X)\n        self.assertEqual(len(prediction), len(self.y))\n\n    def test_pipeline_with_params(self):\n        clf = make_pipeline(PCA(n_components=2), SVC(gamma='auto'))\n        param_grid = {'svc__C': [1, 10, 100], 'svc__gamma': [0.001, 0.0001]}\n        grid_search = GridSearchCV(clf, param_grid, cv=5)\n        grid_search.fit(self.X, self.y)\n        self.assertIsNotNone(grid_search.best_estimator_)\n\n    def test_feature_union(self):\n        union = FeatureUnion([(\"pca\", PCA(n_components=2))])\n        X_transformed = union.fit_transform(self.X)\n        self.assertEqual(X_transformed.shape[1], 2)\n\n    def test_make_union(self):\n        union = make_union(PCA(n_components=2), PCA(n_components=1))\n        X_transformed = union.fit_transform(self.X)\n        self.assertEqual(X_transformed.shape[1], 3)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1088": ["\nimport unittest\nfrom sympy import symbols, Add, Mul, S, Rational, Symbol, Dummy\nfrom sympy.core.exprtools import decompose_power, Factors, Term, _gcd_terms, gcd_terms, factor_terms, factor_nc, _mask_nc, _monotonic_sign\n\nclass TestExprtools(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_decompose_power(self):\n        self.assertEqual(decompose_power(self.x), (self.x, 1))\n        self.assertEqual(decompose_power(self.x**2), (self.x, 2))\n        self.assertEqual(decompose_power(self.x**(2*self.y)), (self.x**self.y, 2))\n        self.assertEqual(decompose_power(self.x**(2*self.y/3)), (self.x**(self.y/3), 2))\n\n    def test_Factors(self):\n        f = Factors((self.x*self.y**2).as_powers_dict())\n        self.assertEqual(f.factors, {self.x: 1, self.y: 2})\n        self.assertEqual(f.gens, frozenset({self.x, self.y}))\n\n    def test_Term(self):\n        t = Term(self.x*self.y**2)\n        self.assertEqual(t.coeff, self.x)\n        self.assertEqual(t.numer.factors, {self.y: 2})\n        self.assertEqual(t.denom.factors, {})\n\n    def test_gcd_terms(self):\n        self.assertEqual(gcd_terms(self.x + self.y, self.x - self.y), self.x)\n\n    def test_factor_terms(self):\n        self.assertEqual(factor_terms(self.x*self.y + self.x*self.y), self.x*self.y)\n\n    def test_factor_nc(self):\n        A = Symbol('A', commutative=False)\n        self.assertEqual(factor_nc((self.x**2 + 2*A*self.x + A**2).expand()), (self.x + A)**2)\n\n    def test_mask_nc(self):\n        A = Symbol('A', commutative=False)\n        B = Symbol('B', commutative=False)\n        self.assertEqual(_mask_nc((A*self.x + B*self.y).expand())[0], A*self.x + B*self.y)\n\n    def test_monotonic_sign(self):\n        self.assertEqual(_monotonic_sign(self.x + 1), 1)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_649": ["\nimport pytest\nimport warnings\nimport inspect\nfrom _pytest import warning_types\n\n@pytest.fixture\ndef sample_function():\n    def func():\n        pass\n    return func\n\ndef test_PytestWarning():\n    warning = warning_types.PytestWarning(\"Test warning\")\n    assert issubclass(warning_types.PytestWarning, UserWarning)\n    assert str(warning) == \"Test warning\"\n\ndef test_PytestAssertRewriteWarning():\n    warning = warning_types.PytestAssertRewriteWarning(\"Test assert rewrite warning\")\n    assert issubclass(warning_types.PytestAssertRewriteWarning, warning_types.PytestWarning)\n    assert str(warning) == \"Test assert rewrite warning\"\n\ndef test_PytestCacheWarning():\n    warning = warning_types.PytestCacheWarning(\"Test cache warning\")\n    assert issubclass(warning_types.PytestCacheWarning, warning_types.PytestWarning)\n    assert str(warning) == \"Test cache warning\"\n\ndef test_PytestConfigWarning():\n    warning = warning_types.PytestConfigWarning(\"Test config warning\")\n    assert issubclass(warning_types.PytestConfigWarning, warning_types.PytestWarning)\n    assert str(warning) == \"Test config warning\"\n\ndef test_PytestCollectionWarning():\n    warning = warning_types.PytestCollectionWarning(\"Test collection warning\")\n    assert issubclass(warning_types.PytestCollectionWarning, warning_types.PytestWarning)\n    assert str(warning) == \"Test collection warning\"\n\ndef test_PytestDeprecationWarning():\n    warning = warning_types.PytestDeprecationWarning(\"Test deprecation warning\")\n    assert issubclass(warning_types.PytestDeprecationWarning, warning_types.PytestWarning)\n    assert issubclass(warning_types.PytestDeprecationWarning, DeprecationWarning)\n    assert str(warning) == \"Test deprecation warning\"\n\ndef test_PytestRemovedIn8Warning():\n    warning = warning_types.PytestRemovedIn8Warning(\"Test removal warning\")\n    assert issubclass(warning_types.PytestRemovedIn8Warning, warning_types.PytestDeprecationWarning)\n    assert str(warning) == \"Test removal warning\"\n\ndef test_PytestReturnNotNoneWarning():\n    warning = warning_types.PytestReturnNotNoneWarning(\"Test return warning\")\n    assert issubclass(warning_types.PytestReturnNotNoneWarning, warning_types.PytestDeprecationWarning)\n    assert str(warning) == \"Test return warning\"\n\ndef test_PytestExperimentalApiWarning():\n    warning = warning_types.PytestExperimentalApiWarning(\"Test experimental warning\")\n    assert issubclass(warning_types.PytestExperimentalApiWarning, warning_types.PytestWarning)\n    assert issubclass(warning_types.PytestExperimentalApiWarning, FutureWarning)\n    assert str(warning) == \"Test experimental warning\"\n\n    simple_warning = warning_types.PytestExperimentalApiWarning.simple(\"test_api\")\n    assert str(simple_warning) == \"test_api is an experimental api that may change over time\"\n\ndef test_PytestUnhandledCoroutineWarning():\n    warning = warning_types.PytestUnhandledCoroutineWarning(\"Test unhandled coroutine warning\")\n    assert issubclass(warning_types.PytestUnhandledCoroutineWarning, warning_types.PytestReturnNotNoneWarning)\n    assert str(warning) == \"Test unhandled coroutine warning\"\n\ndef test_PytestUnknownMarkWarning():\n    warning = warning_types.PytestUnknownMarkWarning(\"Test unknown mark warning\")\n    assert issubclass(warning_types.PytestUnknownMarkWarning, warning_types.PytestWarning)\n    assert str(warning) == \"Test unknown mark warning\"\n\ndef test_PytestUnraisableExceptionWarning():\n    warning = warning_types.PytestUnraisableExceptionWarning(\"Test unraisable exception warning\")\n    assert issubclass(warning_types.PytestUnraisableExceptionWarning, warning_types.PytestWarning)\n    assert str(warning) == \"Test unraisable exception warning\"\n\ndef test_PytestUnhandledThreadExceptionWarning():\n    warning = warning_types.PytestUnhandledThreadExceptionWarning(\"Test unhandled thread exception warning\")\n    assert issubclass(warning_types.PytestUnhandledThreadExceptionWarning, warning_types.PytestWarning)\n    assert str(warning) == \"Test unhandled thread exception warning\"\n\ndef test_UnformattedWarning():\n    unformatted_warning = warning_types.UnformattedWarning(warning_types.PytestWarning, \"Test {} warning\")\n    warning = unformatted_warning.format(\"formatted\")\n    assert issubclass(warning_types.PytestWarning, warning)\n    assert str(warning) == \"Test formatted warning\"\n\ndef test_warn_explicit_for(sample_function):\n    with warnings.catch_warnings(record=True) as w:\n        warning_types.warn_explicit_for(sample_function, warning_types.PytestWarning(\"Test warning\"))\n    assert len(w) == 1\n    assert issubclass(w[-1].category, warning_types.PytestWarning)\n    assert str(w[-1].message) == \"Test warning\"\n"], "sample_359": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db import models\nfrom django.db.migrations.operations.models import (\n    CreateModel, DeleteModel, RenameModel, AlterModelTable, AlterUniqueTogether, AlterIndexTogether,\n    AlterOrderWithRespectTo, AlterModelOptions, AlterModelManagers, AddIndex, RemoveIndex,\n    AddConstraint, RemoveConstraint,\n)\n\nclass TestModelOperations(unittest.TestCase):\n    @patch('django.db.migrations.operations.models.ModelState')\n    @patch('django.db.migrations.operations.models.schema_editor')\n    def test_create_model(self, mock_schema_editor, mock_model_state):\n        operation = CreateModel('TestModel', [('name', models.CharField(max_length=50))])\n        state = MagicMock()\n        operation.state_forwards('app_label', state)\n        state.add_model.assert_called_once()\n\n        operation.database_forwards('app_label', mock_schema_editor, MagicMock(), MagicMock())\n        mock_schema_editor.create_model.assert_called_once()\n\n        operation.database_backwards('app_label', mock_schema_editor, MagicMock(), MagicMock())\n        mock_schema_editor.delete_model.assert_called_once()\n\n    @patch('django.db.migrations.operations.models.schema_editor')\n    def test_delete_model(self, mock_schema_editor):\n        operation = DeleteModel('TestModel')\n        state = MagicMock()\n        operation.state_forwards('app_label', state)\n        state.remove_model.assert_called_once_with('app_label', 'testmodel')\n\n        operation.database_forwards('app_label', mock_schema_editor, MagicMock(), MagicMock())\n        mock_schema_editor.delete_model.assert_called_once()\n\n        operation.database_backwards('app_label', mock_schema_editor, MagicMock(), MagicMock())\n        mock_schema_editor.create_model.assert_called_once()\n\n    @patch('django.db.migrations.operations.models.schema_editor')\n    def test_rename_model(self, mock_schema_editor):\n        operation = RenameModel('OldModel', 'NewModel')\n        state = MagicMock()\n        operation.state_forwards('app_label', state)\n        state.rename_model.assert_called_once_with('app_label', 'OldModel', 'NewModel')\n\n        # Test database_forwards and database_backwards methods similarly\n\n    @patch('django.db.migrations.operations.models.schema_editor')\n    def test_alter_model_table(self, mock_schema_editor):\n        operation = AlterModelTable('TestModel', 'new_table')\n        state = MagicMock()\n        operation.state_forwards('app_label', state)\n        state.alter_model_options.assert_called_once_with('app_label', 'testmodel', {'db_table': 'new_table'})\n\n        # Test database_forwards and database_backwards methods similarly\n\n    @patch('django.db.migrations.operations.models.schema_editor')\n    def test_alter_unique_together(self, mock_schema_editor):\n        operation = AlterUniqueTogether('TestModel', {('field1', 'field2')})\n        state = MagicMock()\n        operation.state_forwards('app_label', state)\n        state.alter_model_options.assert_called_once_with('app_label', 'testmodel', {'unique_together': {('field1', 'field2')}})\n\n        # Test database_forwards and database_backwards methods similarly\n\n    @patch('django.db.migrations.operations.models.schema_editor')\n    def test_alter_index_together(self, mock_schema_editor):\n        operation = AlterIndexTogether('TestModel', {('field1', 'field2')})\n        state = MagicMock()\n        operation.state_forwards('app_label', state)\n        state.alter_model_options.assert_called_once_with('app_label', 'testmodel', {'index_together': {('field1', 'field2')}})\n\n        # Test database_forwards and database_backwards methods similarly\n\n    @patch('django.db.migrations.operations.models.schema_editor')\n    def test_alter_order_with_respect_to(self, mock_schema_editor):\n        operation = AlterOrderWithRespectTo('TestModel', 'field1')\n        state = MagicMock()\n        operation.state_forwards('app_label', state)\n        state.alter_model_options.assert_called_once_with('app_label', 'testmodel', {'order_with_respect_to': 'field1'})\n\n        # Test database_forwards and database_backwards methods similarly\n\n    @patch('django.db.migrations.operations.models.schema_editor')\n    def test_alter_model_options(self, mock_schema_editor):\n        operation = AlterModelOptions('TestModel', {'verbose_name': 'New Verbose Name'})\n        state = MagicMock()\n        operation.state_forwards('app_label', state)\n        state.alter_model_options.assert_called_once_with('app_label', 'testmodel', {'verbose_name': 'New Verbose Name'}, operation.ALTER_OPTION_KEYS)\n\n    @patch('django.db.migrations.operations.models.schema_editor')\n    def test_alter_model_managers(self, mock_schema_editor):\n        operation = AlterModelManagers('TestModel', [('new_manager', models.Manager())])\n        state = MagicMock()\n        operation.state_forwards('app_label', state)\n        state.alter_model_managers.assert_called_once_with('app_label', 'testmodel', [('new_manager', models.Manager())])\n\n    @patch('django.db.migrations.operations.models.schema_editor')\n    def test_add_index(self, mock_schema_editor):\n        operation = AddIndex('TestModel', models.Index(fields=['field1'], name='index_name'))\n        state = MagicMock()\n        operation.state_forwards('app_label', state)\n        state.add_index.assert_called_once()\n\n        operation.database_forwards('app_label', mock_schema_editor, MagicMock(), MagicMock())\n        mock_schema_editor.add_index.assert_called_once()\n\n        operation.database_backwards('app_label', mock_schema_editor, MagicMock(), MagicMock())\n        mock_schema_editor.remove_index.assert_called_once()\n\n    @patch('django.db.migrations.operations.models.schema_editor')\n    def test_remove_index(self, mock_schema_editor):\n        operation = RemoveIndex('TestModel', 'index_name')\n        state = MagicMock()\n        operation.state_forwards('app_label', state)\n        state.remove_index.assert_called_once_with('app_label', 'testmodel', 'index_name')\n\n        operation.database_forwards('app_label', mock_schema_editor, MagicMock(), MagicMock())\n        mock_schema_editor.remove_index.assert_called_once()\n\n        operation.database_backwards('app_label', mock_schema_editor, MagicMock(), MagicMock())\n        mock_schema_editor.add_index.assert_called_once()\n\n    @patch('django.db.migrations.operations.models.schema_editor')\n    def test_add_constraint(self, mock_schema_editor):\n        operation = AddConstraint('TestModel', models.CheckConstraint(check=models.Q(field1__gt=0), name='constraint_name'))\n        state = MagicMock()\n        operation.state_forwards('app_label', state)\n        state.add_constraint.assert_called_once()\n\n        operation.database_forwards('app_label', mock_schema_editor, MagicMock(), MagicMock())\n        mock_schema_editor.add_constraint.assert_called_once()\n\n        operation.database_backwards('app_label', mock_schema_editor, MagicMock(), MagicMock())\n        mock_schema_editor.remove_constraint.assert_called_once()\n\n    @patch('django.db.migrations.operations.models.schema_editor')\n    def test_remove_constraint(self, mock_schema_editor):\n        operation = RemoveConstraint('TestModel', 'constraint_name')\n        state = MagicMock()\n        operation.state_forwards('app_label', state)\n        state.remove_constraint.assert_called_once_with('app_label', 'testmodel', 'constraint_name')\n\n        operation.database_forwards('app_label', mock_schema_editor, MagicMock(), MagicMock())\n        mock_schema_editor.remove_constraint.assert_called_once()\n\n        operation.database_backwards('app_label', mock_schema_editor, MagicMock(), MagicMock())\n        mock_schema_editor.add_constraint.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_14": ["\nimport unittest\nimport numpy as np\nfrom astropy import units as u\nfrom astropy.coordinates import Angle, Latitude, Longitude\n\nclass TestAngles(unittest.TestCase):\n    def setUp(self):\n        self.angle_deg = Angle(45, unit=u.deg)\n        self.angle_rad = Angle(np.pi/4, unit=u.rad)\n\n    def test_angle_init(self):\n        self.assertEqual(self.angle_deg, self.angle_rad)\n\n    def test_angle_string_init(self):\n        self.assertEqual(Angle('1h15m'), Angle('67.5d'))\n\n    def test_angle_tuple_init(self):\n        self.assertEqual(Angle((1, 15, 0), unit=u.degree), Angle('67.5d'))\n\n    def test_angle_quantity_init(self):\n        self.assertEqual(Angle(np.arange(1, 8), unit=u.deg), Angle([1, 2, 3, 4, 5, 6, 7], unit=u.deg))\n\n    def test_angle_conversion(self):\n        self.assertAlmostEqual(self.angle_deg.radian, np.pi/4, places=5)\n\n    def test_angle_wrap_at(self):\n        self.assertEqual(Angle('361d').wrap_at('360d'), Angle('1d'))\n\n    def test_angle_is_within_bounds(self):\n        self.assertTrue(Angle('45d').is_within_bounds('0d', '90d'))\n\n    def test_latitude_init(self):\n        self.assertRaises(ValueError, Latitude, '91d')\n\n    def test_longitude_init(self):\n        self.assertEqual(Longitude('361d'), Longitude('1d'))\n\n    def test_longitude_wrap_angle(self):\n        longitude = Longitude('370d', wrap_angle='360d')\n        self.assertEqual(longitude, Longitude('10d', wrap_angle='360d'))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_465": ["\nfrom unittest import TestCase\nfrom unittest.mock import MagicMock, patch\nfrom django.contrib.admin.options import (\n    HORIZONTAL, VERTICAL, ModelAdmin, TabularInline, get_content_type_for_model\n)\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.test import RequestFactory\nfrom django.db import models\n\nclass TestAdminOptions(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.model = models.Model\n        self.admin_site = MagicMock()\n\n    def test_get_content_type_for_model(self):\n        obj = self.model()\n        with patch('django.contrib.contenttypes.models.ContentType.objects.get_for_model') as mock_get_for_model:\n            mock_get_for_model.return_value = ContentType.objects.get_for_model(obj)\n            result = get_content_type_for_model(obj)\n            mock_get_for_model.assert_called_once_with(obj, for_concrete_model=False)\n            self.assertEqual(result, ContentType.objects.get_for_model(obj))\n\n    def test_model_admin_init(self):\n        model_admin = ModelAdmin(self.model, self.admin_site)\n        self.assertEqual(model_admin.model, self.model)\n        self.assertEqual(model_admin.opts, self.model._meta)\n        self.assertEqual(model_admin.admin_site, self.admin_site)\n\n    def test_tabular_inline_template(self):\n        tabular_inline = TabularInline(self.model, self.admin_site)\n        self.assertEqual(tabular_inline.template, \"admin/edit_inline/tabular.html\")\n\n    def test_model_admin_get_form(self):\n        request = self.factory.get('/')\n        model_admin = ModelAdmin(self.model, self.admin_site)\n        form = model_admin.get_form(request)\n        self.assertIsInstance(form, type)\n\n    def test_model_admin_get_urls(self):\n        model_admin = ModelAdmin(self.model, self.admin_site)\n        urls = model_admin.get_urls()\n        self.assertIsInstance(urls, list)\n\n    def test_model_admin_get_object(self):\n        request = self.factory.get('/')\n        model_admin = ModelAdmin(self.model, self.admin_site)\n        obj = model_admin.get_object(request, 1)\n        self.assertIsNone(obj)\n\n    # Add more test methods as needed to cover other functionalities\n"], "sample_273": ["\nfrom unittest.mock import MagicMock, patch\n\nfrom django.db import models\nfrom django.db.models import base\nfrom django.test import TestCase\nfrom django.test.utils import isolate_apps\n\nclass TestModel(models.Model):\n    name = models.CharField(max_length=100)\n\nclass TestModelBase(TestCase):\n    @isolate_apps(\"base\")\n    def test_model_creation(self):\n        class TestModel(models.Model, metaclass=base.ModelBase):\n            name = models.CharField(max_length=100)\n\n        self.assertEqual(TestModel._meta.model_name, \"testmodel\")\n        self.assertIsInstance(TestModel._meta.pk, models.AutoField)\n\n    @isolate_apps(\"base\")\n    def test_model_save(self):\n        instance = TestModel(name=\"Test\")\n        instance.save()\n        self.assertIsNotNone(instance.pk)\n\n    @isolate_apps(\"base\")\n    def test_model_delete(self):\n        instance = TestModel.objects.create(name=\"Test\")\n        instance.delete()\n        self.assertEqual(TestModel.objects.count(), 0)\n\n    @isolate_apps(\"base\")\n    @patch(\"django.db.models.base.connections\")\n    def test_check_indexes_with_unsupported_database(self, mock_connections):\n        mock_connection = MagicMock()\n        mock_connection.features = MagicMock(supports_expression_indexes=False)\n        mock_connections.__getitem__.return_value = mock_connection\n\n        class TestModel(models.Model, metaclass=base.ModelBase):\n            name = models.CharField(max_length=100)\n            indexes = [models.Index(models.F(\"name\").upper())]\n\n        errors = TestModel.check(databases=[\"default\"])\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], base.checks.Warning)\n        self.assertEqual(errors[0].id, \"models.W043\")\n"], "sample_1053": ["\nimport unittest\nfrom sympy import symbols, tan, Matrix, I, Piecewise, Eq, Ne, Lt, Le, Gt, Ge, Rational, Mod, Sum, Abs, N\nfrom sympy.printing.pycode import pycode, MpmathPrinter, NumPyPrinter, SciPyPrinter\n\nclass TestPycodePrinter(unittest.TestCase):\n    def setUp(self):\n        self.x = symbols('x')\n\n    def test_pycode(self):\n        self.assertEqual(pycode(tan(self.x) + 1), 'math.tan(x) + 1')\n\n    def test_MpmathPrinter(self):\n        self.assertEqual(MpmathPrinter().doprint(Rational(1, 2)), 'mpmath.mpf(1)/mpmath.mpf(2)')\n\n    def test_NumPyPrinter(self):\n        self.assertEqual(NumPyPrinter().doprint(Matrix([[1, I], [1, 0]])), 'numpy.array([[1, 1j], [1, 0]])')\n\n    def test_SciPyPrinter(self):\n        self.assertEqual(SciPyPrinter().doprint(Piecewise((1, Eq(self.x, 0)), (self.x, True))), 'numpy.select([numpy.equal(x, 0), True], [1, x], default=numpy.nan)')\n\n    def test_Relational(self):\n        self.assertEqual(NumPyPrinter().doprint(Eq(self.x, 0)), 'numpy.equal(x, 0)')\n        self.assertEqual(NumPyPrinter().doprint(Ne(self.x, 0)), 'numpy.not_equal(x, 0)')\n        self.assertEqual(NumPyPrinter().doprint(Lt(self.x, 0)), 'numpy.less(x, 0)')\n        self.assertEqual(NumPyPrinter().doprint(Le(self.x, 0)), 'numpy.less_equal(x, 0)')\n        self.assertEqual(NumPyPrinter().doprint(Gt(self.x, 0)), 'numpy.greater(x, 0)')\n        self.assertEqual(NumPyPrinter().doprint(Ge(self.x, 0)), 'numpy.greater_equal(x, 0)')\n\n    def test_Mod(self):\n        self.assertEqual(NumPyPrinter().doprint(Mod(self.x, 2)), 'numpy.mod(x, 2)')\n\n    def test_Sum(self):\n        self.assertEqual(NumPyPrinter().doprint(Sum(self.x**i, (i, 1, 3))), '(builtins.sum((x**i) for i in range(1, 3+1)))')\n\n    def test_Abs(self):\n        self.assertEqual(NumPyPrinter().doprint(Abs(self.x)), 'numpy.abs(x)')\n\n    def test_N(self):\n        self.assertEqual(NumPyPrinter().doprint(N(self.x, 2)), 'numpy.float64(x)')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_798": ["\nimport unittest\nimport numpy as np\nfrom numpy.testing import assert_almost_equal, assert_array_equal\nfrom sklearn.datasets import make_blobs\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.ensemble.iforest import _average_path_length\n\nclass TestIsolationForest(unittest.TestCase):\n\n    def setUp(self):\n        self.X, _ = make_blobs(n_samples=300, centers=1, random_state=0, cluster_std=0.30)\n        self.X_anomaly = np.random.uniform(low=-1, high=1, size=(50, 2))\n\n    def test_fit_predict(self):\n        model = IsolationForest(n_estimators=10, max_samples='auto', random_state=0)\n        model.fit(self.X)\n        predictions = model.predict(self.X_anomaly)\n        self.assertEqual(len(predictions), 50)\n        self.assertTrue(np.all(np.isin(predictions, [-1, 1])))\n\n    def test_decision_function(self):\n        model = IsolationForest(n_estimators=10, max_samples='auto', random_state=0)\n        model.fit(self.X)\n        scores = model.decision_function(self.X_anomaly)\n        self.assertEqual(len(scores), 50)\n\n    def test_score_samples(self):\n        model = IsolationForest(n_estimators=10, max_samples='auto', random_state=0)\n        model.fit(self.X)\n        scores = model.score_samples(self.X_anomaly)\n        self.assertEqual(len(scores), 50)\n\n    def test_average_path_length(self):\n        n_samples_leaf = np.array([1, 2, 3, 4, 5])\n        expected_result = np.array([0., 1., 1.31729787, 1.78348133, 2.03873802])\n        result = _average_path_length(n_samples_leaf)\n        assert_almost_equal(result, expected_result)\n\n    def test_average_path_length_shape(self):\n        n_samples_leaf = np.array([[1, 2, 3], [4, 5, 6]])\n        expected_result = np.array([[0., 1., 1.31729787], [1.78348133, 2.03873802, 2.19722458]])\n        result = _average_path_length(n_samples_leaf)\n        assert_almost_equal(result, expected_result)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_52": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.forms.models import (\n    ModelForm, BaseModelForm, modelform_factory, BaseModelFormSet,\n    modelformset_factory, BaseInlineFormSet, inlineformset_factory,\n    InlineForeignKeyField, ModelChoiceField, ModelMultipleChoiceField,\n    modelform_defines_fields,\n)\nfrom django.forms import ChoiceField, ValidationError\nfrom django.core.exceptions import ImproperlyConfigured, FieldError\nfrom django.db.models import Model, CharField, IntegerField, ForeignKey, AutoField\n\nclass TestDjangoFormsModels(unittest.TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            name = CharField(max_length=50)\n            value = IntegerField()\n\n        class TestForm(ModelForm):\n            class Meta:\n                model = TestModel\n                fields = ['name']\n\n        self.TestModel = TestModel\n        self.TestForm = TestForm\n\n    def test_model_form(self):\n        form = self.TestForm()\n        self.assertIsInstance(form, BaseModelForm)\n\n    def test_modelform_factory(self):\n        Form = modelform_factory(self.TestModel, fields=['name'])\n        form = Form()\n        self.assertIsInstance(form, ModelForm)\n\n    def test_model_form_set(self):\n        formset = modelformset_factory(self.TestModel, fields=['name'])\n        formset_instance = formset()\n        self.assertIsInstance(formset_instance, BaseModelFormSet)\n\n    def test_inline_form_set(self):\n        class ParentModel(Model):\n            pass\n\n        formset = inlineformset_factory(ParentModel, self.TestModel, fields=['name'])\n        formset_instance = formset()\n        self.assertIsInstance(formset_instance, BaseInlineFormSet)\n\n    def test_inline_foreign_key_field(self):\n        parent_instance = self.TestModel(name='test', value=1)\n        field = InlineForeignKeyField(parent_instance)\n        self.assertEqual(field.clean(1), parent_instance)\n\n    def test_model_choice_field(self):\n        queryset = self.TestModel.objects.all()\n        field = ModelChoiceField(queryset)\n        self.assertIsInstance(field, ChoiceField)\n\n    def test_model_multiple_choice_field(self):\n        queryset = self.TestModel.objects.all()\n        field = ModelMultipleChoiceField(queryset)\n        self.assertIsInstance(field, ChoiceField)\n\n    def test_modelform_defines_fields(self):\n        self.assertTrue(modelform_defines_fields(self.TestForm))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_723": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing.label import LabelBinarizer, MultiLabelBinarizer, LabelEncoder, label_binarize, _inverse_binarize_thresholding, _inverse_binarize_multiclass\n\nclass TestLabelFunctions(unittest.TestCase):\n\n    def test_LabelBinarizer(self):\n        lb = LabelBinarizer()\n        y = [1, 2, 6, 4, 2]\n        lb.fit(y)\n        self.assertEqual(list(lb.classes_), [1, 2, 4, 6])\n        self.assertTrue(np.array_equal(lb.transform([1, 6]), np.array([[1, 0, 0, 0], [0, 0, 0, 1]])))\n        self.assertTrue(np.array_equal(lb.inverse_transform(lb.transform(y)), y))\n\n    def test_MultiLabelBinarizer(self):\n        mlb = MultiLabelBinarizer()\n        y = [(1, 2), (3,)]\n        self.assertTrue(np.array_equal(mlb.fit_transform(y), np.array([[1, 1, 0], [0, 0, 1]])))\n        self.assertTrue(np.array_equal(mlb.classes_, np.array([1, 2, 3])))\n        self.assertTrue(np.array_equal(mlb.inverse_transform(mlb.transform(y)), y))\n\n    def test_LabelEncoder(self):\n        le = LabelEncoder()\n        y = [1, 2, 2, 6]\n        le.fit(y)\n        self.assertTrue(np.array_equal(le.classes_, np.array([1, 2, 6])))\n        self.assertTrue(np.array_equal(le.transform([1, 1, 2, 6]), np.array([0, 0, 1, 2])))\n        self.assertTrue(np.array_equal(le.inverse_transform([0, 0, 1, 2]), y))\n\n    def test_label_binarize(self):\n        y = [1, 6]\n        classes = [1, 2, 4, 6]\n        self.assertTrue(np.array_equal(label_binarize(y, classes), np.array([[1, 0, 0, 0], [0, 0, 0, 1]])))\n\n    def test_inverse_binarize_thresholding(self):\n        y = np.array([[0.1, 0.8], [0.6, 0.3]])\n        classes = [1, 2]\n        output_type = 'binary'\n        threshold = 0.5\n        self.assertTrue(np.array_equal(_inverse_binarize_thresholding(y, output_type, classes, threshold), np.array([2, 1])))\n\n    def test_inverse_binarize_multiclass(self):\n        y = np.array([[0.1, 0.8], [0.6, 0.3]])\n        classes = [1, 2]\n        self.assertTrue(np.array_equal(_inverse_binarize_multiclass(y, classes), np.array([2, 1])))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1023": ["\nimport unittest\nfrom sympy import symbols, S, Mod, Add, Mul, nan, oo, zoo\n\nclass TestMod(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_eval_numbers(self):\n        self.assertEqual(Mod(5, 3), 2)\n\n    def test_eval_expressions(self):\n        self.assertEqual(Mod(self.x**2, self.y).subs({self.x: 5, self.y: 6}), 1)\n\n    def test_eval_zero_division(self):\n        with self.assertRaises(ZeroDivisionError):\n            Mod(self.x, 0)\n\n    def test_eval_infinity_nan(self):\n        self.assertEqual(Mod(oo, self.y), nan)\n        self.assertEqual(Mod(zoo, self.y), nan)\n        self.assertEqual(Mod(nan, self.y), nan)\n\n    def test_eval_add(self):\n        self.assertEqual(Mod(self.x + self.y, self.y), Mod(self.x, self.y))\n\n    def test_eval_mul(self):\n        self.assertEqual(Mod(self.x * self.y, self.y), Mod(self.x, self.y) * self.y)\n\n    def test_eval_is_integer(self):\n        self.assertTrue(Mod(S.One, S.One).is_integer)\n\n    def test_eval_is_nonnegative(self):\n        self.assertTrue(Mod(self.x, self.y).is_nonnegative)\n\n    def test_eval_is_nonpositive(self):\n        self.assertTrue(Mod(self.x, -self.y).is_nonpositive)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_441": ["\nfrom django.test import TestCase\nfrom django.contrib.auth.forms import (\n    UserCreationForm, UserChangeForm, AuthenticationForm,\n    PasswordResetForm, SetPasswordForm, PasswordChangeForm,\n    AdminPasswordChangeForm\n)\nfrom django.contrib.auth.models import User\n\nclass TestAuthForms(TestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n\n    def test_user_creation_form(self):\n        data = {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n        }\n        form = UserCreationForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_user_change_form(self):\n        data = {\n            'username': 'testuser',\n        }\n        form = UserChangeForm(data, instance=self.user)\n        self.assertTrue(form.is_valid())\n\n    def test_authentication_form(self):\n        data = {\n            'username': 'testuser',\n            'password': 'testpassword',\n        }\n        form = AuthenticationForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_password_reset_form(self):\n        data = {\n            'email': self.user.email,\n        }\n        form = PasswordResetForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_set_password_form(self):\n        data = {\n            'new_password1': 'newpassword',\n            'new_password2': 'newpassword',\n        }\n        form = SetPasswordForm(self.user, data)\n        self.assertTrue(form.is_valid())\n\n    def test_password_change_form(self):\n        data = {\n            'old_password': 'testpassword',\n            'new_password1': 'newpassword',\n            'new_password2': 'newpassword',\n        }\n        form = PasswordChangeForm(self.user, data)\n        self.assertTrue(form.is_valid())\n\n    def test_admin_password_change_form(self):\n        data = {\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n        }\n        form = AdminPasswordChangeForm(self.user, data)\n        self.assertTrue(form.is_valid())\n"], "sample_522": ["\nimport unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.testing.decorators import image_comparison\nfrom mpl_toolkits.mplot3d import art3d\n\nclass TestArt3D(unittest.TestCase):\n    def setUp(self):\n        self.fig = plt.figure()\n        self.ax = self.fig.add_subplot(111, projection='3d')\n\n    def test_norm_angle(self):\n        self.assertEqual(art3d._norm_angle(0), 0)\n        self.assertEqual(art3d._norm_angle(180), 180)\n        self.assertEqual(art3d._norm_angle(-180), -180)\n        self.assertEqual(art3d._norm_angle(360), 0)\n        self.assertEqual(art3d._norm_angle(-360), 0)\n        self.assertEqual(art3d._norm_angle(540), 180)\n        self.assertEqual(art3d._norm_angle(-540), -180)\n\n    def test_norm_text_angle(self):\n        self.assertEqual(art3d._norm_text_angle(0), 0)\n        self.assertEqual(art3d._norm_text_angle(90), 90)\n        self.assertEqual(art3d._norm_text_angle(-90), -90)\n        self.assertEqual(art3d._norm_text_angle(180), -90)\n        self.assertEqual(art3d._norm_text_angle(-180), 90)\n        self.assertEqual(art3d._norm_text_angle(270), -90)\n        self.assertEqual(art3d._norm_text_angle(-270), 90)\n\n    def test_get_dir_vector(self):\n        np.testing.assert_array_equal(art3d.get_dir_vector('x'), np.array((1, 0, 0)))\n        np.testing.assert_array_equal(art3d.get_dir_vector('y'), np.array((0, 1, 0)))\n        np.testing.assert_array_equal(art3d.get_dir_vector('z'), np.array((0, 0, 1)))\n        np.testing.assert_array_equal(art3d.get_dir_vector(None), np.array((0, 0, 0)))\n        np.testing.assert_array_equal(art3d.get_dir_vector((1, 2, 3)), np.array((1, 2, 3)))\n        with self.assertRaises(ValueError):\n            art3d.get_dir_vector('invalid')\n\n    def test_text_3d(self):\n        text = art3d.Text3D(0, 0, 0, 'test')\n        self.ax.add_artist(text)\n        text.set_position_3d((1, 2, 3))\n        text.set_z(4)\n        np.testing.assert_array_equal(text.get_position_3d(), (1, 2, 4))\n\n    # Add more tests for Line3D, Patch3D, PathPatch3D, Patch3DCollection, Path3DCollection, Poly3DCollection,\n    # _path_to_3d_segment, _paths_to_3d_segments, _get_patch_verts, and juggle_axes here...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_490": ["\nfrom django.test import TestCase\nfrom django.db.models import F, Q\nfrom django.db.models.constraints import BaseConstraint, CheckConstraint, Deferrable, UniqueConstraint\nfrom django.core.exceptions import ValidationError\n\nclass TestBaseConstraint(TestCase):\n    def test_base_constraint_init(self):\n        # Test the initialization of BaseConstraint\n        bc = BaseConstraint(name=\"test_constraint\")\n        self.assertEqual(bc.name, \"test_constraint\")\n\nclass TestCheckConstraint(TestCase):\n    def test_check_constraint_init(self):\n        # Test the initialization of CheckConstraint\n        cc = CheckConstraint(check=Q(price__gt=0), name=\"price_positive\")\n        self.assertEqual(cc.name, \"price_positive\")\n\nclass TestDeferrable(TestCase):\n    def test_deferrable_enum(self):\n        # Test the Deferrable enum\n        self.assertEqual(str(Deferrable.DEFERRED), \"deferred\")\n        self.assertEqual(str(Deferrable.IMMEDIATE), \"immediate\")\n\nclass TestUniqueConstraint(TestCase):\n    def test_unique_constraint_init(self):\n        # Test the initialization of UniqueConstraint\n        uc = UniqueConstraint(fields=[\"name\"], name=\"unique_name\")\n        self.assertEqual(uc.name, \"unique_name\")\n\n    def test_unique_constraint_validate(self):\n        # Test the validate method of UniqueConstraint\n        uc = UniqueConstraint(fields=[\"name\"], name=\"unique_name\")\n        with self.assertRaises(ValidationError):\n            uc.validate(model=None, instance=None)\n"], "sample_141": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.core.serializers.base import Deserializer, DeserializedObject, DeserializationError, M2MDeserializationError\nfrom django.db import models\n\nclass TestBaseSerializer(unittest.TestCase):\n\n    def setUp(self):\n        self.mock_stream = Mock()\n\n    def test_deserializer_init(self):\n        deserializer = Deserializer(self.mock_stream)\n        self.assertEqual(deserializer.stream, self.mock_stream)\n\n    def test_deserializer_iter(self):\n        deserializer = Deserializer(self.mock_stream)\n        self.assertEqual(iter(deserializer), deserializer)\n\n    def test_deserializer_next_not_implemented(self):\n        deserializer = Deserializer(self.mock_stream)\n        with self.assertRaises(NotImplementedError):\n            next(deserializer)\n\nclass TestDeserializedObject(unittest.TestCase):\n\n    def setUp(self):\n        self.mock_obj = Mock(spec=models.Model)\n        self.mock_obj._meta = Mock()\n        self.mock_obj._meta.app_label = 'test_app'\n        self.mock_obj._meta.model_name = 'test_model'\n        self.mock_obj.pk = 1\n\n    def test_deserialized_object_repr(self):\n        deserialized_obj = DeserializedObject(self.mock_obj)\n        self.assertEqual(repr(deserialized_obj), \"<DeserializedObject: test_app.test_model(pk=1)>\")\n\n    def test_deserialized_object_save(self):\n        deserialized_obj = DeserializedObject(self.mock_obj)\n        deserialized_obj.save()\n        self.mock_obj.save_base.assert_called_once()\n\n    @patch('django.core.serializers.base.deserialize_m2m_values')\n    @patch('django.core.serializers.base.deserialize_fk_value')\n    def test_deserialized_object_save_deferred_fields(self, mock_deserialize_fk_value, mock_deserialize_m2m_values):\n        mock_field = Mock(spec=models.Field)\n        mock_field.remote_field = Mock(spec=models.ManyToManyRel)\n        deserialized_obj = DeserializedObject(self.mock_obj, deferred_fields={'field': 'value'})\n        deserialized_obj.save_deferred_fields()\n        mock_deserialize_m2m_values.assert_called_once()\n        self.mock_obj.save.assert_called_once()\n\n    @patch('django.core.serializers.base.deserialize_m2m_values')\n    @patch('django.core.serializers.base.deserialize_fk_value')\n    def test_deserialized_object_save_deferred_fields_error(self, mock_deserialize_fk_value, mock_deserialize_m2m_values):\n        mock_deserialize_m2m_values.side_effect = M2MDeserializationError('error', 'pk')\n        mock_field = Mock(spec=models.Field)\n        mock_field.remote_field = Mock(spec=models.ManyToManyRel)\n        deserialized_obj = DeserializedObject(self.mock_obj, deferred_fields={'field': 'value'})\n        with self.assertRaises(DeserializationError):\n            deserialized_obj.save_deferred_fields()\n"], "sample_626": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nfrom xarray.core.indexing import (\n    NumpyIndexingAdapter,\n    DaskIndexingAdapter,\n    PandasIndexingAdapter,\n    PandasMultiIndexingAdapter,\n    OuterIndexer,\n    VectorizedIndexer,\n    BasicIndexer,\n    create_mask,\n    posify_mask_indexer,\n    is_fancy_indexer,\n    explicit_indexing_adapter,\n    IndexingSupport,\n)\n\nclass TestExplicitIndexing(unittest.TestCase):\n    def setUp(self):\n        self.np_array = np.arange(24).reshape(2, 3, 4)\n        self.pd_index = pd.Index([\"a\", \"b\", \"c\", \"d\"])\n        self.pd_multi_index = pd.MultiIndex.from_product([[0, 1], [\"a\", \"b\"]], names=[\"n\", \"c\"])\n\n    def test_numpy_indexing_adapter(self):\n        adapter = NumpyIndexingAdapter(self.np_array)\n        self.assertTrue(np.array_equal(adapter[BasicIndexer((0, slice(None), 1))], self.np_array[0, :, 1]))\n        self.assertTrue(np.array_equal(adapter[OuterIndexer((np.array([0, 1]), np.array([1, 2])))] , self.np_array[[0, 1], [1, 2], :]))\n        self.assertTrue(np.array_equal(adapter[VectorizedIndexer((np.array([0, 1]), np.array([1, 2]), np.array([3, 2])))] , self.np_array[np.array([0, 1]), np.array([1, 2]), np.array([3, 2])]))\n\n    def test_pandas_indexing_adapter(self):\n        adapter = PandasIndexingAdapter(self.pd_index)\n        self.assertEqual(adapter[BasicIndexer((1,))], \"b\")\n        self.assertTrue(np.array_equal(adapter[OuterIndexer((np.array([0, 2]),))], pd.Index([\"a\", \"c\"]).values))\n\n    def test_pandas_multi_indexing_adapter(self):\n        adapter = PandasMultiIndexingAdapter(self.pd_multi_index, level=\"n\")\n        self.assertEqual(adapter[BasicIndexer((1,))], 1)\n\n    def test_create_mask(self):\n        indexer = OuterIndexer((np.array([0, -1, 2]), np.array([1, 2, -1])))\n        mask = create_mask(indexer, self.np_array.shape)\n        self.assertTrue(np.array_equal(mask, np.array([[False, False, True], [True, False, False]])))\n\n    def test_posify_mask_indexer(self):\n        indexer = OuterIndexer((np.array([0, -1, 2]), np.array([1, 2, -1])))\n        new_indexer = posify_mask_indexer(indexer)\n        self.assertTrue(np.array_equal(new_indexer.tuple, (np.array([0, 1, 2]), np.array([1, 2, 2]))))\n\n    def test_is_fancy_indexer(self):\n        self.assertFalse(is_fancy_indexer(0))\n        self.assertFalse(is_fancy_indexer(slice(None)))\n        self.assertFalse(is_fancy_indexer(np.array([1, 2])))\n        self.assertFalse(is_fancy_indexer([1, 2]))\n        self.assertTrue(is_fancy_indexer(np.array([[1, 2], [3, 4]])))\n        self.assertTrue(is_fancy_indexer([[1, 2], [3, 4]]))\n\n    def test_explicit_indexing_adapter(self):\n        key = OuterIndexer((np.array([0, 1]), np.array([1, 2])))\n        result = explicit_indexing_adapter(key, self.np_array.shape, IndexingSupport.OUTER, self.np_array.__getitem__)\n        self.assertTrue(np.array_equal(result, self.np_array[[0, 1], [1, 2], :]))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_205": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.migrations.loader import MigrationLoader\n\nclass TestMigrationLoader(unittest.TestCase):\n    def setUp(self):\n        self.loader = MigrationLoader(connection=None, load=False)\n\n    def test_migrations_module(self):\n        app_label = 'test_app'\n        module_name, explicit = MigrationLoader.migrations_module(app_label)\n        self.assertEqual(module_name, 'test_app.migrations')\n        self.assertFalse(explicit)\n\n    @patch('django.db.migrations.loader.import_module')\n    def test_load_disk(self, mock_import_module):\n        mock_import_module.return_value = MagicMock(__path__=['test'])\n        self.loader.load_disk()\n        self.assertIsNotNone(self.loader.disk_migrations)\n\n    # Add more tests for other methods in MigrationLoader class\n"], "sample_987": ["\nimport unittest\nfrom sympy import symbols, Eq, S, Rational, Add, BooleanTrue, BooleanFalse, Not, And, Or, AppliedPredicate, Basic, BlockMatrix, Catalan, ComplexInfinity, Derivative, Dict, RandomDomain, Dummy, EulerGamma, Exp1, ExprCondPair, FiniteSet, Function, GeometryEntity, GoldenRatio, ImaginaryUnit, Infinity, Integral, Interval, AccumulationBounds, Inverse, Lambda, LatticeOp, Limit, MatMul, HadamardProduct, MatAdd, NaN, NegativeInfinity, Normal, Order, Cycle, Permutation, TensorIndex, TensorHead, Tensor, TensMul, TensAdd, PermutationGroup, PDF, Pi, PolyRing, FracField, FreeGroupElement, PolyElement, FracElement, Poly, ProductSet, AlgebraicNumber, Pow, UnevaluatedExpr, MatPow, ImmutableDenseNDimArray, ImmutableSparseNDimArray, Integers, Naturals, Naturals0, Reals, int, mpz, Float, Relational, ComplexRootOf, RootSum, GroebnerBasis, Sample, frozenset, Sum, Symbol, Identity, ZeroMatrix, Predicate, Transpose, Uniform, Union, Complement, Quantity, Dimension, Wild, WildFunction, Zero, DMP, DMF, Object, IdentityMorphism, NamedMorphism, Category, BaseScalarField, BaseVectorField, Differential, Tr\nfrom sympy.printing import sstr, sstrrepr, StrPrinter\n\nclass TestStrPrinter(unittest.TestCase):\n    def setUp(self):\n        self.printer = StrPrinter()\n        self.a, self.b = symbols('a b')\n\n    def test_sstr(self):\n        self.assertEqual(sstr(Eq(self.a + self.b, 0)), 'Eq(a + b, 0)')\n\n    def test_sstrrepr(self):\n        self.assertEqual(sstrrepr(Eq(self.a + self.b, 0)), \"'Eq(a + b, 0)'\")\n\n    def test_print_Add(self):\n        self.assertEqual(self.printer._print_Add(self.a + self.b), 'a + b')\n\n    def test_print_BooleanTrue(self):\n        self.assertEqual(self.printer._print_BooleanTrue(BooleanTrue()), 'True')\n\n    def test_print_BooleanFalse(self):\n        self.assertEqual(self.printer._print_BooleanFalse(BooleanFalse()), 'False')\n\n    def test_print_Not(self):\n        self.assertEqual(self.printer._print_Not(Not(self.a)), '~a')\n\n    def test_print_And(self):\n        self.assertEqual(self.printer._print_And(And(self.a, self.b)), 'a & b')\n\n    def test_print_Or(self):\n        self.assertEqual(self.printer._print_Or(Or(self.a, self.b)), 'a | b')\n\n    def test_print_AppliedPredicate(self):\n        self.assertEqual(self.printer._print_AppliedPredicate(AppliedPredicate(Q.prime, 5)), 'prime(5)')\n\n    def test_print_Basic(self):\n        self.assertEqual(self.printer._print_Basic(Basic(self.a, self.b)), 'Basic(a, b)')\n\n    def test_print_BlockMatrix(self):\n        self.assertEqual(self.printer._print_BlockMatrix(BlockMatrix([[self.a, self.b], [self.a, self.b]])), 'Matrix([[a, b], [a, b]])')\n\n    def test_print_Catalan(self):\n        self.assertEqual(self.printer._print_Catalan(Catalan()), 'Catalan')\n\n    def test_print_ComplexInfinity(self):\n        self.assertEqual(self.printer._print_ComplexInfinity(ComplexInfinity()), 'zoo')\n\n    def test_print_Derivative(self):\n        self.assertEqual(self.printer._print_Derivative(Derivative(self.a, self.b)), 'Derivative(a, b)')\n\n    def test_print_Dict(self):\n        self.assertEqual(self.printer._print_Dict(Dict({self.a: 1, self.b: 2})), '{a: 1, b: 2}')\n\n    def test_print_RandomDomain(self):\n        self.assertEqual(self.printer._print_RandomDomain(RandomDomain([self.a], {self.a > 0})), 'Domain: (a > 0)')\n\n    def test_print_Dummy(self):\n        self.assertEqual(self.printer._print_Dummy(Dummy('x')), '_x')\n\n    def test_print_EulerGamma(self):\n        self.assertEqual(self.printer._print_EulerGamma(EulerGamma()), 'EulerGamma')\n\n    def test_print_Exp1(self):\n        self.assertEqual(self.printer._print_Exp1(Exp1()), 'E')\n\n    def test_print_ExprCondPair(self):\n        self.assertEqual(self.printer._print_ExprCondPair(ExprCondPair(self.a, self.a > 0)), '(a, a > 0)')\n\n    def test_print_FiniteSet(self):\n        self.assertEqual(self.printer._print_FiniteSet(FiniteSet(1, 2, 3)), '{1, 2, 3}')\n\n    def test_print_Function(self):\n        self.assertEqual(self.printer._print_Function(Function('f')(self.a)), 'f(a)')\n\n    def test_print_GeometryEntity(self):\n        self.assertEqual(self.printer._print_GeometryEntity(GeometryEntity('point', 0, 0)), 'point')\n\n    def test_print_GoldenRatio(self):\n        self.assertEqual(self.printer._print_GoldenRatio(GoldenRatio()), 'GoldenRatio')\n\n    def test_print_ImaginaryUnit(self):\n        self.assertEqual(self.printer._print_ImaginaryUnit(ImaginaryUnit()), 'I')\n\n    def test_print_Infinity(self):\n        self.assertEqual(self.printer._print_Infinity(Infinity()), 'oo')\n\n    def test_print_Integral(self):\n        self.assertEqual(self.printer._print_Integral(Integral(self.a, (self.x, 0, 1))), 'Integral(a, (x, 0, 1))')\n\n    def test_print_Interval(self):\n        self.assertEqual(self.printer._print_Interval(Interval(0, 1)), 'Interval(0, 1)')\n\n    def test_print_AccumulationBounds(self):\n        self.assertEqual(self.printer._print_AccumulationBounds(AccumulationBounds(0, 1)), 'AccumBounds(0, 1)')\n\n    def test_print_Inverse(self):\n        self.assertEqual(self.printer._print_Inverse(Inverse(self.a)), 'a^-1')\n\n    def test_print_Lambda(self):\n        self.assertEqual(self.printer._print_Lambda(Lambda(self.a, self.a**2)), 'Lambda(a, a**2)')\n\n    def test_print_LatticeOp(self):\n        self.assertEqual(self.printer._print_LatticeOp(LatticeOp(self.a, self.b)), 'LatticeOp(a, b)')\n\n    def test_print_Limit(self):\n        self.assertEqual(self.printer._print_Limit(Limit(self.a, self.x, 0)), 'Limit(a, x, 0)')\n\n    def test_print_list(self):\n        self.assertEqual(self.printer._print_list([self.a, self.b]), '[a, b]')\n\n    def test_print_MatMul(self):\n        self.assertEqual(self.printer._print_MatMul(MatMul(self.a, self.b)), 'a*b')\n\n    def test_print_HadamardProduct(self):\n        self.assertEqual(self.printer._print_HadamardProduct(HadamardProduct(self.a, self.b)), 'a.*b')\n\n    def test_print_MatAdd(self):\n        self.assertEqual(self.printer._print_MatAdd(MatAdd(self.a, self.b)), 'a + b')\n\n    def test_print_NaN(self):\n        self.assertEqual(self.printer._print_NaN(NaN()), 'nan')\n\n    def test_print_NegativeInfinity(self):\n        self.assertEqual(self.printer._print_NegativeInfinity(NegativeInfinity()), '-oo')\n\n    def test_print_Normal(self):\n        self.assertEqual(self.printer._print_Normal(Normal(self.a, self.b)), 'Normal(a, b)')\n\n    def test_print_Order(self):\n        self.assertEqual(self.printer._print_Order(Order(self.a, self.b)), 'O(a, b)')\n\n    def test_print_Cycle(self):\n        self.assertEqual(self.printer._print_Cycle(Cycle((0, 1, 2))), '(0 1 2)')\n\n    def test_print_Permutation(self):\n        self.assertEqual(self.printer._print_Permutation(Permutation([0, 1, 2])), 'Permutation([0, 1, 2])')\n\n    def test_print_TensorIndex(self):\n        self.assertEqual(self.printer._print_TensorIndex(TensorIndex('i', 3)), 'i')\n\n    def test_print_TensorHead(self):\n        self.assertEqual(self.printer._print_TensorHead(TensorHead('T', [2, 2])), 'T')\n\n    def test_print_Tensor(self):\n        self.assertEqual(self.printer._print_Tensor(Tensor(self.a, TensorHead('T', [2, 2]), [TensorIndex('i', 2), TensorIndex('j', 2)])), 'T(i, j)')\n\n    def test_print_TensMul(self):\n        self.assertEqual(self.printer._print_TensMul(TensMul(Tensor(self.a, TensorHead('T', [2, 2]), [TensorIndex('i', 2), TensorIndex('j', 2)]), Tensor(self.b, TensorHead('T', [2, 2]), [TensorIndex('k', 2), TensorIndex('l', 2)]))), 'T(i, j)*T(k, l)')\n\n    def test_print_TensAdd(self):\n        self.assertEqual(self.printer._print_TensAdd(TensAdd(Tensor(self.a, TensorHead('T', [2, 2]), [TensorIndex('i', 2), TensorIndex('j', 2)]), Tensor(self.b, TensorHead('T', [2, 2]), [TensorIndex('i', 2), TensorIndex('j', 2)]))), 'T(i, j) + T(i, j)')\n\n    def test_print_PermutationGroup(self):\n        self.assertEqual(self.printer._print_PermutationGroup(PermutationGroup([Permutation([0, 1, 2]), Permutation([0, 2, 1])])), 'PermutationGroup([\\n    (0 1 2),\\n    (0 2 1)\\n])')\n\n    def test_print_PDF(self):\n        self.assertEqual(self.printer._print_PDF(PDF(self.a, (self.x, -1, 1))), 'PDF(a, (x, -1, 1))')\n\n    def test_print_Pi(self):\n        self.assertEqual(self.printer._print_Pi(Pi()), 'pi')\n\n    def test_print_PolyRing(self):\n        self.assertEqual(self.printer._print_PolyRing(PolyRing([self.a, self.b], S.Reals, lex)), 'Polynomial ring in a, b over ZZ with lex order')\n\n    def test_print_FracField(self):\n        self.assertEqual(self.printer._print_FracField(FracField([self.a, self.b], S.Reals, lex)), 'Rational function field in a, b over ZZ with lex order')\n\n    def test_print_FreeGroupElement(self):\n        self.assertEqual(self.printer._print_FreeGroupElement(FreeGroupElement('x')), 'x')\n\n    def test_print_PolyElement(self):\n        self.assertEqual(self.printer._print_PolyElement(PolyElement(Poly(self.a, self.x), self.x)), 'a*x')\n\n    def test_print_FracElement(self):\n        self.assertEqual(self.printer._print_FracElement(FracElement(1, 2)), '1/2')\n\n    def test_print_Poly(self):\n        self.assertEqual(self.printer._print_Poly(Poly(self.a*self.x**2 + self.b*self.x + 1, self.x, domain='ZZ')), 'Poly(a*x**2 + b*x + 1, x, domain=ZZ)')\n\n    def test_print_ProductSet(self):\n        self.assertEqual(self.printer._print_ProductSet(ProductSet(FiniteSet(1, 2), FiniteSet(3, 4))), '{1, 2} x {3, 4}')\n\n    def test_print_AlgebraicNumber(self):\n        self.assertEqual(self.printer._print_AlgebraicNumber(AlgebraicNumber(Poly(self.x**2 - 2), alias='sqrt(2)')), 'sqrt(2)')\n\n    def test_print_Pow(self):\n        self.assertEqual(self.printer._print_Pow(self.a**2), 'a**2')\n\n    def test_print_UnevaluatedExpr(self):\n        self.assertEqual(self.printer._print_UnevaluatedExpr(UnevaluatedExpr(self.a)), 'a')\n\n    def test_print_MatPow(self):\n        self.assertEqual(self.printer._print_MatPow(MatPow(self.a, 2)), 'a**2')\n\n    def test_print_ImmutableDenseNDimArray(self):\n        self.assertEqual(self.printer._print_ImmutableDenseNDimArray(ImmutableDenseNDimArray([[1, 2], [3, 4]])), 'ImmutableDenseNDimArray([[1, 2], [3, 4]])')\n\n    def test_print_ImmutableSparseNDimArray(self):\n        self.assertEqual(self.printer._print_ImmutableSparseNDimArray(ImmutableSparseNDimArray([[1, 2], [3, 4]])), 'ImmutableSparseNDimArray([[1, 2], [3, 4]])')\n\n    def test_print_Integer(self):\n        self.assertEqual(self.printer._print_Integer(S(1)), '1')\n\n    def test_print_Integers(self):\n        self.assertEqual(self.printer._print_Integers(S.Integers), 'S.Integers')\n\n    def test_print_Naturals(self):\n        self.assertEqual(self.printer._print_Naturals(S.Naturals), 'S.Naturals')\n\n    def test_print_Naturals0(self):\n        self.assertEqual(self.printer._print_Naturals0(S.Naturals0), 'S.Naturals0')\n\n    def test_print_Reals(self):\n        self.assertEqual(self.printer._print_Reals(S.Reals), 'S.Reals')\n\n    def test_print_int(self):\n        self.assertEqual(self.printer._print_int(1), '1')\n\n    def test_print_mpz(self):\n        self.assertEqual(self.printer._print_mpz(mpz(1)), '1')\n\n    def test_print_Rational(self):\n        self.assertEqual(self.printer._print_Rational(Rational(1, 2)), '1/2')\n\n    def test_print_PythonRational(self):\n        self.assertEqual(self.printer._print_PythonRational(fractions.Fraction(1, 2)), '1/2')\n\n    def test_print_Fraction(self):\n        self.assertEqual(self.printer._print_Fraction(Fraction(1, 2)), '1/2')\n\n    def test_print_mpq(self):\n        self.assertEqual(self.printer._print_mpq(mpq(1, 2)), '1/2')\n\n    def test_print_Float(self):\n        self.assertEqual(self.printer._print_Float(Float(1.23)), '1.23')\n\n    def test_print_Relational(self):\n        self.assertEqual(self.printer._print_Relational(Eq(self.a, self.b)), 'Eq(a, b)')\n\n    def test_print_ComplexRootOf(self):\n        self.assertEqual(self.printer._print_ComplexRootOf(ComplexRootOf(self.a**2 - 2, 1)), 'CRootOf(a**2 - 2, 1)')\n\n    def test_print_RootSum(self):\n        self.assertEqual(self.printer._print_RootSum(RootSum(self.a**2 - 2)), 'RootSum(a**2 - 2)')\n\n    def test_print_GroebnerBasis(self):\n        self.assertEqual(self.printer._print_GroebnerBasis(GroebnerBasis([self.a**2 - self.b, self.b**2 - self.c], [self.a, self.b, self.c], order='lex', domain='ZZ')), 'GroebnerBasis([a**2 - b, b**2 - c], a, b, c, domain=ZZ, order=lex)')\n\n    def test_print_Sample(self):\n        self.assertEqual(self.printer._print_Sample(Sample([self.a, self.b, self.c])), 'Sample([a, b, c])')\n\n    def test_print_set(self):\n        self.assertEqual(self.printer._print_set({self.a, self.b, self.c}), '{a, b, c}')\n\n    def test_print_frozenset(self):\n        self.assertEqual(self.printer._print_frozenset(frozenset({self.a, self.b, self.c})), 'frozenset({a, b, c})')\n\n    def test_print_Sum(self):\n        self.assertEqual(self.printer._print_Sum(Sum(self.a, (self.i, 1, self.n))), 'Sum(a, (i, 1, n))')\n\n    def test_print_Symbol(self):\n        self.assertEqual(self.printer._print_Symbol(self.a), 'a')\n\n    def test_print_Identity(self):\n        self.assertEqual(self.printer._print_Identity(Identity(3)), 'I')\n\n    def test_print_ZeroMatrix(self):\n        self.assertEqual(self.printer._print_ZeroMatrix(ZeroMatrix(3, 3)), '0')\n\n    def test_print_Predicate(self):\n        self.assertEqual(self.printer._print_Predicate(Q.prime), 'Q.prime')\n\n    def test_print_str(self):\n        self.assertEqual(self.printer._print_str('test'), 'test')\n\n    def test_print_tuple(self):\n        self.assertEqual(self.printer._print_tuple((self.a, self.b)), '(a, b)')\n\n    def test_print_Transpose(self):\n        self.assertEqual(self.printer._print_Transpose(Transpose(self.a)), 'a.T')\n\n    def test_print_Uniform(self):\n        self.assertEqual(self.printer._print_Uniform(Uniform(0, 1)), 'Uniform(0, 1)')\n\n    def test_print_Union(self):\n        self.assertEqual(self.printer._print_Union(Union(FiniteSet(1, 2), FiniteSet(3, 4))), 'Union({1, 2}, {3, 4})')\n\n    def test_print_Complement(self):\n        self.assertEqual(self.printer._print_Complement(Complement(FiniteSet(1, 2, 3), FiniteSet(2, 3))), '{1, 2, 3} \\\\ {2, 3}')\n\n    def test_print_Quantity(self):\n        self.assertEqual(self.printer._print_Quantity(Quantity('meter')), 'meter')\n\n    def test_print_Dimension(self):\n        self.assertEqual(self.printer._print_Dimension(Dimension(3)), '3')\n\n    def test_print_Wild(self):\n        self.assertEqual(self.printer._print_Wild(Wild('x')), 'x_')\n\n    def test_print_WildFunction(self):\n        self.assertEqual(self.printer._print_WildFunction('f')(self.x), 'f_(x)')\n\n    def test_print_Zero(self):\n        self.assertEqual(self.printer._print_Zero(S.Zero), '0')\n\n    def test_print_DMP(self):\n        self.assertEqual(self.printer._print_DMP(DMP([[1, 2], [3, 4]], [self.x, self.y], ZZ)), 'DMP([[1, 2], [3, 4]], [x, y], ZZ)')\n\n    def test_print_DMF(self):\n        self.assertEqual(self.printer._print_DMF(DMF([[1, 2], [3, 4]], [self.x, self.y], ZZ)), 'DMF([[1, 2], [3, 4]], [x, y], ZZ)')\n\n    def test_print_Object(self):\n        self.assertEqual(self.printer._print_Object(Object('test')), 'Object(\"test\")')\n\n    def test_print_IdentityMorphism(self):\n        self.assertEqual(self.printer._print_IdentityMorphism(IdentityMorphism(FiniteSet(1, 2, 3))), 'IdentityMorphism({1, 2, 3})')\n\n    def test_print_NamedMorphism(self):\n        self.assertEqual(self.printer._print_NamedMorphism(NamedMorphism(FiniteSet(1, 2, 3), FiniteSet(4, 5, 6), 'f')), 'NamedMorphism({1, 2, 3}, {4, 5, 6}, \"f\")')\n\n    def test_print_Category(self):\n        self.assertEqual(self.printer._print_Category(Category('Test')), 'Category(\"Test\")')\n\n    def test_print_BaseScalarField(self):\n        self.assertEqual(self.printer._print_BaseScalarField(BaseScalarField(3, 'x', 'y', 'z')), 'z')\n\n    def test_print_BaseVectorField(self):\n        self.assertEqual(self.printer._print_BaseVectorField(BaseVectorField(3, 'x', 'y', 'z')), 'e_z')\n\n    def test_print_Differential(self):\n        self.assertEqual(self.printer._print_Differential(Differential(BaseScalarField(3, 'x', 'y', 'z'))), 'dz')\n\n    def test_print_Tr(self):\n        self.assertEqual(self.printer._print_Tr(Tr(Matrix([[1, 2], [3, 4]]))), 'Tr(Matrix([[1, 2], [3, 4]]))')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_422": ["\nfrom django.db import models\nfrom django.db.models.fields.related_descriptors import ForwardManyToOneDescriptor, ReverseOneToOneDescriptor, ReverseManyToOneDescriptor, ManyToManyDescriptor\nfrom django.test import TestCase\n\nclass TestForwardManyToOneDescriptor(TestCase):\n    def setUp(self):\n        # Set up test models and data\n\n    def test_get_object(self):\n        # Test the get_object method\n\n    def test_set_object(self):\n        # Test the __set__ method\n\nclass TestReverseOneToOneDescriptor(TestCase):\n    def setUp(self):\n        # Set up test models and data\n\n    def test_get_object(self):\n        # Test the __get__ method\n\n    def test_set_object(self):\n        # Test the __set__ method\n\nclass TestReverseManyToOneDescriptor(TestCase):\n    def setUp(self):\n        # Set up test models and data\n\n    def test_get_queryset(self):\n        # Test the __get__ method\n\n    def test_set_queryset(self):\n        # Test the __set__ method\n\nclass TestManyToManyDescriptor(TestCase):\n    def setUp(self):\n        # Set up test models and data\n\n    def test_get_queryset(self):\n        # Test the get_queryset method\n\n    def test_add_objects(self):\n        # Test the add method\n\n    def test_remove_objects(self):\n        # Test the remove method\n\n    def test_clear_objects(self):\n        # Test the clear method\n\n    def test_set_objects(self):\n        # Test the set method\n"], "sample_1100": ["\nimport unittest\nfrom sympy import Pow, S, symbols, sin, pi, exp, sqrt, log, I, oo, zoo, Integer\n\nclass TestPow(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n\n    def test_init(self):\n        self.assertEqual(Pow(2, 3), 8)\n        self.assertEqual(Pow(self.x, 2), self.x**2)\n        self.assertEqual(Pow(S.ImaginaryUnit, 2), -1)\n\n    def test_as_base_exp(self):\n        self.assertEqual(Pow(2, 3).as_base_exp(), (2, 3))\n        self.assertEqual(Pow(self.x, 2).as_base_exp(), (self.x, 2))\n        self.assertEqual(Pow(1/self.x, 2).as_base_exp(), (self.x, -2))\n\n    def test_eval_is_integer(self):\n        self.assertTrue(Pow(2, 3).is_integer)\n        self.assertFalse(Pow(2, self.x).is_integer)\n        self.assertTrue(Pow(-1, 3).is_integer)\n\n    def test_eval_is_extended_real(self):\n        self.assertTrue(Pow(2, 3).is_extended_real)\n        self.assertFalse(Pow(self.x, self.y).is_extended_real)\n        self.assertTrue(Pow(sin(self.x), 2).is_extended_real)\n\n    def test_eval_is_complex(self):\n        self.assertFalse(Pow(2, 3).is_complex)\n        self.assertTrue(Pow(self.x, I).is_complex)\n\n    def test_eval_is_finite(self):\n        self.assertTrue(Pow(2, 3).is_finite)\n        self.assertFalse(Pow(self.x, -1).is_finite)\n\n    def test_eval_evalf(self):\n        self.assertEqual(Pow(2, 3).evalf(), 8.0)\n\n    def test_eval_derivative(self):\n        self.assertEqual(Pow(self.x, self.y).diff(self.x), self.y*self.x**(self.y - 1))\n\n    def test_eval_rewrite_as_exp(self):\n        self.assertEqual(Pow(self.x, self.y)._eval_rewrite_as_exp(self.x, self.y), exp(self.y*log(self.x)))\n\n    def test_as_numer_denom(self):\n        self.assertEqual(Pow(self.x, -1).as_numer_denom(), (1, self.x))\n\n    def test_as_content_primitive(self):\n        self.assertEqual(Pow(2*self.x, 2).as_content_primitive(), (4, Pow(self.x, 2)))\n\n    def test_eval_nseries(self):\n        self.assertEqual(Pow(1 + self.x, 2)._eval_nseries(self.x, 3, logx=None), 1 + 2*self.x - self.x**2 + O(self.x**3))\n\n    def test_eval_as_leading_term(self):\n        self.assertEqual(Pow(self.x, self.y)._eval_as_leading_term(self.x), self.x**self.y)\n\n    def test_is_constant(self):\n        self.assertTrue(Pow(2, 3).is_constant())\n        self.assertFalse(Pow(self.x, 2).is_constant())\n\n    def test_eval_difference_delta(self):\n        self.assertEqual(Pow(self.x, self.y)._eval_difference_delta(self.n, self.step), (self.x**(self.y.subs(self.n, self.n + self.step)) - 1)*self.x**self.y)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_226": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom io import StringIO\nfrom django.db.backends.base.creation import BaseDatabaseCreation\n\nclass TestBaseDatabaseCreation(unittest.TestCase):\n\n    def setUp(self):\n        self.connection = MagicMock()\n        self.database_creation = BaseDatabaseCreation(self.connection)\n\n    def test_create_test_db(self):\n        with patch('django.core.management.call_command') as mock_call_command:\n            self.database_creation.create_test_db(verbosity=1, autoclobber=False, serialize=True, keepdb=False)\n            mock_call_command.assert_called()\n\n    def test_serialize_db_to_string(self):\n        self.database_creation.serialize_db_to_string()\n        self.connection.constraint_checks_disabled.assert_called()\n\n    def test_deserialize_db_from_string(self):\n        data = '{\"model\": \"test.model\", \"pk\": 1, \"fields\": {}}'\n        self.database_creation.deserialize_db_from_string(data)\n        self.connection.check_constraints.assert_called()\n\n    def test_get_test_db_name(self):\n        self.connection.settings_dict = {'TEST': {'NAME': ''}, 'NAME': 'test_db'}\n        self.assertEqual(self.database_creation._get_test_db_name(), 'test_test_db')\n\n    def test_execute_create_test_db(self):\n        cursor = MagicMock()\n        parameters = {'dbname': 'test_db', 'suffix': ''}\n        self.database_creation._execute_create_test_db(cursor, parameters)\n        cursor.execute.assert_called()\n\n    def test_destroy_test_db(self):\n        with patch.object(self.database_creation, '_destroy_test_db') as mock_destroy:\n            self.database_creation.destroy_test_db(old_database_name='old_db', verbosity=1, keepdb=False)\n            mock_destroy.assert_called()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_729": ["\nimport unittest\nimport numpy as np\nfrom scipy import sparse\nfrom sklearn.preprocessing.imputation import Imputer\n\nclass TestImputer(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2, np.nan], [3, np.nan, 5], [7, 8, 9]])\n        self.X_sparse = sparse.csr_matrix(self.X)\n\n    def test_mean_strategy(self):\n        imputer = Imputer(missing_values=np.nan, strategy='mean')\n        imputer.fit(self.X)\n        result = imputer.transform(self.X)\n        expected = np.array([[1, 2, 5], [3, 5.5, 5], [7, 8, 9]])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_median_strategy(self):\n        imputer = Imputer(missing_values=np.nan, strategy='median')\n        imputer.fit(self.X)\n        result = imputer.transform(self.X)\n        expected = np.array([[1, 2, 8], [3, 5, 5], [7, 8, 9]])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_most_frequent_strategy(self):\n        imputer = Imputer(missing_values=np.nan, strategy='most_frequent')\n        imputer.fit(self.X)\n        result = imputer.transform(self.X)\n        expected = np.array([[1, 2, 2], [3, 3, 5], [7, 8, 9]])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_sparse_data(self):\n        imputer = Imputer(missing_values=np.nan, strategy='mean')\n        imputer.fit(self.X_sparse)\n        result = imputer.transform(self.X_sparse).toarray()\n        expected = np.array([[1, 2, 5], [3, 5.5, 5], [7, 8, 9]])\n        np.testing.assert_array_almost_equal(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_856": ["\nimport unittest\nimport numpy as np\nfrom sklearn.dummy import DummyClassifier, DummyRegressor\nfrom sklearn.exceptions import NotFittedError\n\nclass TestDummyClassifier(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[0], [1], [2], [3]])\n        self.y = np.array([0, 1, 1, 0])\n        self.sample_weight = np.array([1, 1, 2, 1])\n\n    def test_fit(self):\n        clf = DummyClassifier(strategy=\"stratified\")\n        clf.fit(self.X, self.y, sample_weight=self.sample_weight)\n        self.assertEqual(clf.n_outputs_, 1)\n        self.assertEqual(clf.n_classes_[0], 2)\n        self.assertTrue(np.allclose(clf.class_prior_[0], [0.4, 0.6]))\n\n    def test_predict(self):\n        clf = DummyClassifier(strategy=\"most_frequent\")\n        clf.fit(self.X, self.y)\n        y_pred = clf.predict(self.X)\n        self.assertTrue(np.all(y_pred == 1))\n\n    def test_predict_proba(self):\n        clf = DummyClassifier(strategy=\"prior\")\n        clf.fit(self.X, self.y)\n        y_proba = clf.predict_proba(self.X)\n        self.assertTrue(np.allclose(y_proba, [[0.6], [0.6], [0.6], [0.6]]))\n\n    def test_predict_log_proba(self):\n        clf = DummyClassifier(strategy=\"prior\")\n        clf.fit(self.X, self.y)\n        y_log_proba = clf.predict_log_proba(self.X)\n        self.assertTrue(np.allclose(y_log_proba, [[np.log(0.6)], [np.log(0.6)], [np.log(0.6)], [np.log(0.6)]]))\n\n    def test_score(self):\n        clf = DummyClassifier(strategy=\"most_frequent\")\n        clf.fit(self.X, self.y)\n        score = clf.score(self.X, self.y)\n        self.assertEqual(score, 0.5)\n\n    def test_not_fitted(self):\n        clf = DummyClassifier()\n        with self.assertRaises(NotFittedError):\n            clf.predict(self.X)\n\nclass TestDummyRegressor(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[0], [1], [2], [3]])\n        self.y = np.array([0, 1, 2, 3])\n        self.sample_weight = np.array([1, 1, 2, 1])\n\n    def test_fit(self):\n        reg = DummyRegressor(strategy=\"mean\")\n        reg.fit(self.X, self.y, sample_weight=self.sample_weight)\n        self.assertEqual(reg.n_outputs_, 1)\n        self.assertTrue(np.allclose(reg.constant_, [1.75]))\n\n    def test_predict(self):\n        reg = DummyRegressor(strategy=\"constant\", constant=5)\n        reg.fit(self.X, self.y)\n        y_pred = reg.predict(self.X)\n        self.assertTrue(np.all(y_pred == 5))\n\n    def test_score(self):\n        reg = DummyRegressor(strategy=\"mean\")\n        reg.fit(self.X, self.y)\n        score = reg.score(self.X, self.y)\n        self.assertLess(score, 1.0)\n\n    def test_not_fitted(self):\n        reg = DummyRegressor()\n        with self.assertRaises(NotFittedError):\n            reg.predict(self.X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_956": ["\nimport unittest\nfrom unittest.mock import patch\nfrom sphinx.cmd import quickstart as qs\n\nclass TestQuickstart(unittest.TestCase):\n    def test_is_path(self):\n        with self.assertRaises(qs.ValidationError):\n            qs.is_path('/nonexistent/path')\n\n    def test_nonempty(self):\n        with self.assertRaises(qs.ValidationError):\n            qs.nonempty('')\n        self.assertEqual(qs.nonempty('test'), 'test')\n\n    def test_boolean(self):\n        self.assertTrue(qs.boolean('Y'))\n        self.assertTrue(qs.boolean('YES'))\n        self.assertFalse(qs.boolean('N'))\n        self.assertFalse(qs.boolean('NO'))\n        with self.assertRaises(qs.ValidationError):\n            qs.boolean('invalid')\n\n    @patch('builtins.input', side_effect=['test'])\n    def test_do_prompt(self, mock_input):\n        self.assertEqual(qs.do_prompt('Test prompt'), 'test')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1062": ["\nimport unittest\nfrom sympy import symbols, sin, cos, pi\nfrom sympy.simplify.fu import fu, TR0, TR1, TR2, TR3, TR4, TR5, TR6, TR7, TR8, TR9, TR10, TR10i, TR11, TR12, TR13, TR2i, TRmorrie, TR14, TR15, TR16, TR12i, TR111, TR22, L, trig_split, as_f_sign_1, hyper_as_trig\n\nclass TestFuSimplification(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_TR0(self):\n        expr = 2*sin(self.x) + 3*sin(self.x)\n        self.assertEqual(TR0(expr), 5*sin(self.x))\n\n    def test_TR1(self):\n        expr = 2/cos(self.x) + 3/sec(self.y)\n        self.assertEqual(TR1(expr), 2/cos(self.x) + 3*cos(self.y))\n\n    def test_TR2(self):\n        expr = tan(self.x) + cot(self.y)\n        self.assertEqual(TR2(expr), sin(self.x)/cos(self.x) + cos(self.y)/sin(self.y))\n\n    # Add more tests for other TR functions...\n\n    def test_L(self):\n        expr = sin(self.x) + cos(self.y)\n        self.assertEqual(L(expr), 2)\n\n    def test_fu(self):\n        expr = sin(50)**2 + cos(50)**2 + sin(pi/6)\n        self.assertEqual(fu(expr), 3/2)\n\n    def test_trig_split(self):\n        a, b = cos(self.x), cos(self.y)\n        self.assertEqual(trig_split(a, b), (1, 1, 1, self.x, self.y, True))\n\n    # Add more tests for other functions...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_301": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.models.sql.query import Query\nfrom django.db.models.fields import Field\nfrom django.db.models.query_utils import Q\n\nclass TestQuery(unittest.TestCase):\n    def setUp(self):\n        self.query = Query(MagicMock())\n\n    def test_get_meta(self):\n        self.query.get_meta()\n        self.query.model._meta.assert_called_once()\n\n    def test_clone(self):\n        cloned_query = self.query.clone()\n        self.assertIsNot(self.query, cloned_query)\n        self.assertEqual(self.query.model, cloned_query.model)\n\n    def test_add_filter(self):\n        self.query.add_filter(('name', 'test'))\n        self.assertEqual(self.query.where.children[0].children[0].rhs, 'test')\n\n    def test_add_q(self):\n        q_obj = Q(name='test')\n        self.query.add_q(q_obj)\n        self.assertEqual(self.query.where.children[0].children[0].rhs, 'test')\n\n    def test_build_filter(self):\n        filter_expr = ('name', 'test')\n        clause, _ = self.query.build_filter(filter_expr)\n        self.assertEqual(clause.children[0].rhs, 'test')\n\n    def test_resolve_ref(self):\n        self.query.resolve_ref('name')\n        self.query.annotations.get.assert_called_once_with('name')\n\n    def test_add_select_col(self):\n        col = MagicMock(spec=Field)\n        self.query.add_select_col(col, 'name')\n        self.assertIn(col, self.query.select)\n        self.assertIn('name', self.query.values_select)\n\n    def test_set_limits(self):\n        self.query.set_limits(low=0, high=10)\n        self.assertEqual(self.query.low_mark, 0)\n        self.assertEqual(self.query.high_mark, 10)\n\n    def test_set_empty(self):\n        self.query.set_empty()\n        self.assertTrue(self.query.is_empty())\n\n    def test_clear_limits(self):\n        self.query.set_limits(low=0, high=10)\n        self.query.clear_limits()\n        self.assertEqual(self.query.low_mark, 0)\n        self.assertIsNone(self.query.high_mark)\n\n    def test_add_fields(self):\n        self.query.add_fields(['name'])\n        self.assertIsInstance(self.query.select[0], Field)\n\n    def test_add_ordering(self):\n        self.query.add_ordering('name')\n        self.assertIn('name', self.query.order_by)\n\n    def test_clear_ordering(self):\n        self.query.add_ordering('name')\n        self.query.clear_ordering(force_empty=True)\n        self.assertEqual(self.query.order_by, ())\n        self.assertEqual(self.query.extra_order_by, ())\n        self.assertFalse(self.query.default_ordering)\n\n    def test_set_group_by(self):\n        self.query.add_fields(['name'])\n        self.query.set_group_by()\n        self.assertEqual(self.query.group_by, self.query.select)\n\n    def test_add_extra(self):\n        self.query.add_extra(select={'extra': '1'}, select_params=None, where=None, params=None, tables=None, order_by=None)\n        self.assertIn('extra', self.query.extra)\n\n    def test_add_deferred_loading(self):\n        self.query.add_deferred_loading(['name'])\n        self.assertIn('name', self.query.deferred_loading[0])\n\n    def test_add_immediate_loading(self):\n        self.query.add_immediate_loading(['name'])\n        self.assertIn('name', self.query.deferred_loading[0])\n\n    def test_set_annotation_mask(self):\n        self.query.set_annotation_mask(['name'])\n        self.assertIn('name', self.query.annotation_select_mask)\n\n    def test_append_annotation_mask(self):\n        self.query.set_annotation_mask(['name'])\n        self.query.append_annotation_mask(['age'])\n        self.assertIn('name', self.query.annotation_select_mask)\n        self.assertIn('age', self.query.annotation_select_mask)\n\n    def test_set_extra_mask(self):\n        self.query.set_extra_mask(['extra'])\n        self.assertIn('extra', self.query.extra_select_mask)\n\n    def test_set_values(self):\n        self.query.set_values(['name'])\n        self.assertIn('name', self.query.values_select)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1042": ["\nimport unittest\nfrom sympy import Rational, Symbol, Float, I, sqrt, cbrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, TribonacciConstant, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt, integer_log\nfrom sympy.core.numbers import igcd, ilcm, igcdex, seterr, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse\nfrom sympy.polys.domains.groundtypes import PythonRational\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom mpmath import mpq\nfrom sympy.polys.numberfields import to_number_field\nfrom sympy import pi\nfrom mpmath.libmp.libmpf import fnan\nfrom sympy import Pi\n\nclass TestNumbers(unittest.TestCase):\n    def test_Rational(self):\n        self.assertEqual(Rational(1, 2) + Rational(1, 3), Rational(5, 6))\n        self.assertEqual(Rational(1, 2) * Rational(1, 3), Rational(1, 6))\n\n    def test_Float(self):\n        self.assertAlmostEqual(Float(3.14159).evalf(3), 3.142)\n\n    def test_Integer(self):\n        self.assertEqual(Integer(10) + Integer(5), Integer(15))\n\n    def test_Symbol(self):\n        x = Symbol('x')\n        self.assertEqual(x + x, 2*x)\n\n    def test_I(self):\n        self.assertEqual(I * I, -1)\n\n    def test_sqrt(self):\n        self.assertEqual(sqrt(4), 2)\n\n    def test_cbrt(self):\n        self.assertAlmostEqual(cbrt(8), 2.0)\n\n    def test_oo(self):\n        self.assertTrue(oo > 1000000000)\n\n    def test_nan(self):\n        self.assertFalse(nan == nan)\n\n    def test_pi(self):\n        self.assertAlmostEqual(pi.evalf(), 3.14159, places=5)\n\n    def test_E(self):\n        self.assertAlmostEqual(E.evalf(), 2.71828, places=5)\n\n    def test_factorial(self):\n        self.assertEqual(factorial(5), 120)\n\n    def test_Catalan(self):\n        self.assertIsInstance(Catalan, Number)\n\n    def test_EulerGamma(self):\n        self.assertIsInstance(EulerGamma, Number)\n\n    def test_GoldenRatio(self):\n        self.assertIsInstance(GoldenRatio, Number)\n\n    def test_TribonacciConstant(self):\n        self.assertIsInstance(TribonacciConstant, Number)\n\n    def test_cos(self):\n        self.assertAlmostEqual(cos(pi), -1)\n\n    def test_exp(self):\n        self.assertAlmostEqual(exp(1).evalf(), 2.71828, places=5)\n\n    def test_Number(self):\n        self.assertTrue(isinstance(Number(1), Number))\n\n    def test_zoo(self):\n        self.assertTrue(zoo == zoo)\n\n    def test_log(self):\n        self.assertAlmostEqual(log(E).evalf(), 1)\n\n    def test_Mul(self):\n        self.assertEqual(Mul(2, 3), 6)\n\n    def test_Pow(self):\n        self.assertEqual(Pow(2, 3), 8"], "sample_1070": ["\nimport unittest\nfrom sympy import symbols, sympify, Mul, Add, S\nfrom sympy.physics.units import meter, second, kilogram, newton, speed_of_light, day, newton, gram, atomic_mass_constant, kilometer, centimeter, gravitational_constant, hbar\nfrom sympy.physics.units.util import convert_to, dim_simplify, check_dimensions, quantity_simplify\nfrom sympy.utilities.pytest import warns_deprecated_sympy, raises\n\nclass TestUnitUtil(unittest.TestCase):\n    def setUp(self):\n        self.x = symbols('x')\n        self.m, self.s, self.kg = meter, second, kilogram\n\n    def test_convert_to(self):\n        self.assertEqual(convert_to(self.m, self.m), self.m)\n        self.assertEqual(convert_to(self.m, self.km), self.km/1000)\n        self.assertEqual(convert_to(speed_of_light, self.m/self.s), sympify('299792458*meter/second'))\n        self.assertEqual(convert_to(day, self.s), sympify('86400*second'))\n        self.assertEqual(convert_to(3*newton, self.kg*self.m/self.s**2), sympify('3*kilogram*meter/second**2'))\n\n    def test_dim_simplify(self):\n        with warns_deprecated_sympy():\n            self.assertEqual(dim_simplify(self.m + self.m), 2*self.m)\n            with raises(ValueError):\n                dim_simplify(self.m + self.s)\n\n    def test_check_dimensions(self):\n        self.assertEqual(check_dimensions(self.m + self.m), 2*self.m)\n        with raises(ValueError):\n            check_dimensions(self.m + self.s)\n\n    def test_quantity_simplify(self):\n        self.assertEqual(quantity_simplify(self.x*self.m + self.x*self.m), 2*self.x*self.m)\n        self.assertEqual(quantity_simplify(atomic_mass_constant), sympify('1.660539060e-24*gram'))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_467": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.forms.widgets import (\n    Media,\n    Widget,\n    TextInput,\n    NumberInput,\n    EmailInput,\n    URLInput,\n    PasswordInput,\n    HiddenInput,\n    MultipleHiddenInput,\n    FileInput,\n    ClearableFileInput,\n    Textarea,\n    DateInput,\n    DateTimeInput,\n    TimeInput,\n    CheckboxInput,\n    Select,\n    NullBooleanSelect,\n    SelectMultiple,\n    RadioSelect,\n    CheckboxSelectMultiple,\n    MultiWidget,\n    SplitDateTimeWidget,\n    SplitHiddenDateTimeWidget,\n    SelectDateWidget,\n)\n\nclass TestWidgets(unittest.TestCase):\n\n    def test_media_property(self):\n        class TestWidget(Widget):\n            class Media:\n                css = {'all': ('test.css',)}\n        widget = TestWidget()\n        self.assertEqual(widget.media._css, {'all': ['test.css']})\n\n    def test_text_input(self):\n        widget = TextInput()\n        self.assertEqual(widget.input_type, 'text')\n\n    def test_number_input(self):\n        widget = NumberInput()\n        self.assertEqual(widget.input_type, 'number')\n\n    def test_email_input(self):\n        widget = EmailInput()\n        self.assertEqual(widget.input_type, 'email')\n\n    # Add similar tests for URLInput, PasswordInput, HiddenInput, MultipleHiddenInput, etc.\n\n    def test_clearable_file_input(self):\n        widget = ClearableFileInput()\n        self.assertTrue(widget.format_value(True))\n        self.assertFalse(widget.format_value(False))\n\n    # Add similar tests for Textarea, DateInput, DateTimeInput, TimeInput, CheckboxInput, Select, etc.\n\n    def test_multi_widget(self):\n        widget = MultiWidget(widgets=[TextInput(), NumberInput()])\n        self.assertEqual(len(widget.widgets), 2)\n\n    # Add similar tests for SplitDateTimeWidget, SplitHiddenDateTimeWidget, SelectDateWidget, etc.\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_594": ["\nimport unittest\nimport numpy as np\nimport xarray as xr\nfrom xarray.core import formatting_html as fh\n\nclass TestFormattingHTML(unittest.TestCase):\n    def setUp(self):\n        self.data = np.random.rand(3, 4)\n        self.coords = {'x': ('x', np.arange(3)), 'y': ('y', np.arange(4))}\n        self.ds = xr.Dataset(data_vars={'var': (('x', 'y'), self.data)}, coords=self.coords)\n        self.da = self.ds['var']\n\n    def test_short_data_repr_html(self):\n        result = fh.short_data_repr_html(self.data)\n        self.assertIsInstance(result, str)\n        self.assertIn(\"<pre>\", result)\n        self.assertIn(\"</pre>\", result)\n\n    def test_format_dims(self):\n        result = fh.format_dims(self.ds.dims, self.ds.coords)\n        self.assertIsInstance(result, str)\n        self.assertIn(\"<ul class='xr-dim-list'>\", result)\n        self.assertIn(\"</ul>\", result)\n\n    def test_summarize_attrs(self):\n        result = fh.summarize_attrs(self.ds.attrs)\n        self.assertIsInstance(result, str)\n        self.assertIn(\"<dl class='xr-attrs'>\", result)\n        self.assertIn(\"</dl>\", result)\n\n    def test_summarize_variable(self):\n        result = fh.summarize_variable('var', self.da)\n        self.assertIsInstance(result, str)\n        self.assertIn(\"class='xr-var-name'\", result)\n        self.assertIn(\"class='xr-var-dims'\", result)\n        self.assertIn(\"class='xr-var-dtype'\", result)\n\n    def test_array_repr(self):\n        result = fh.array_repr(self.da)\n        self.assertIsInstance(result, str)\n        self.assertIn(\"class='xr-header'\", result)\n        self.assertIn(\"class='xr-array-name'\", result)\n        self.assertIn(\"class='xr-array-wrap'\", result)\n\n    def test_dataset_repr(self):\n        result = fh.dataset_repr(self.ds)\n        self.assertIsInstance(result, str)\n        self.assertIn(\"class='xr-header'\", result)\n        self.assertIn(\"class='xr-obj-type'\", result)\n        self.assertIn(\"class='xr-sections'\", result)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_713": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\n\nclass TestEncoders(unittest.TestCase):\n    def setUp(self):\n        self.X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        self.X_transformed_onehot = np.array([[1., 0., 1., 0., 0.], [0., 1., 0., 0., 1.]])\n        self.X_transformed_ordinal = np.array([[1., 0.], [0., 2.]])\n\n    def test_onehot_encoder(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        self.assertEqual(enc.categories_, [np.array(['Female', 'Male']), np.array([1, 2, 3])])\n        np.testing.assert_array_equal(enc.transform(self.X).toarray(), self.X_transformed_onehot)\n        np.testing.assert_array_equal(enc.inverse_transform(self.X_transformed_onehot), np.array(self.X))\n\n    def test_ordinal_encoder(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        self.assertEqual(enc.categories_, [np.array(['Female', 'Male']), np.array([1, 2, 3])])\n        np.testing.assert_array_equal(enc.transform(self.X), self.X_transformed_ordinal)\n        np.testing.assert_array_equal(enc.inverse_transform(self.X_transformed_ordinal), np.array(self.X))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_108": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.urls import resolvers\n\nclass TestDjangoResolvers(unittest.TestCase):\n    def setUp(self):\n        self.mock_settings = MagicMock()\n        self.mock_settings.ROOT_URLCONF = 'test_root_urlconf'\n        self.mock_settings.APPEND_SLASH = True\n        self.mock_settings.LANGUAGE_CODE = 'en-us'\n        self.mock_get_language = MagicMock(return_value='en-us')\n        self.mock_import_module = MagicMock()\n        self.mock_inspect = MagicMock()\n\n        self.patcher1 = patch('django.urls.resolvers.settings', self.mock_settings)\n        self.patcher2 = patch('django.urls.resolvers.get_language', self.mock_get_language)\n        self.patcher3 = patch('django.urls.resolvers.import_module', self.mock_import_module)\n        self.patcher4 = patch('django.urls.resolvers.inspect', self.mock_inspect)\n\n        self.patcher1.start()\n        self.patcher2.start()\n        self.patcher3.start()\n        self.patcher4.start()\n\n    def tearDown(self):\n        self.patcher1.stop()\n        self.patcher2.stop()\n        self.patcher3.stop()\n        self.patcher4.stop()\n\n    def test_get_resolver(self):\n        resolver = resolvers.get_resolver()\n        self.assertIsInstance(resolver, resolvers.URLResolver)\n\n    def test_RegexPattern_match(self):\n        pattern = resolvers.RegexPattern(r'^test/(?P<pk>\\d+)/$')\n        match = pattern.match('test/123/')\n        self.assertEqual(match, ('', (), {'pk': '123'}))\n\n    def test_RoutePattern_match(self):\n        pattern = resolvers.RoutePattern(r'test/<int:pk>/')\n        match = pattern.match('test/123/')\n        self.assertEqual(match, ('', (), {'pk': 123}))\n\n    def test_URLPattern_resolve(self):\n        callback = MagicMock()\n        pattern = resolvers.RoutePattern(r'test/<int:pk>/')\n        url_pattern = resolvers.URLPattern(pattern, callback)\n        match = url_pattern.resolve('test/123/')\n        self.assertIsInstance(match, resolvers.ResolverMatch)\n\n    def test_URLResolver_resolve(self):\n        pattern = resolvers.RegexPattern(r'^')\n        url_resolver = resolvers.URLResolver(pattern, 'test_urlconf_name')\n        with self.assertRaises(resolvers.Resolver404):\n            url_resolver.resolve('test/')\n\n    def test_URLResolver_reverse(self):\n        pattern = resolvers.RegexPattern(r'^')\n        url_resolver = resolvers.URLResolver(pattern, 'test_urlconf_name')\n        url_resolver._populated = True\n        url_resolver.reverse_dict = {'test_view': [([(r'^test/(?P<pk>\\d+)/$', ['pk'], {}, {})], r'^test/(?P<pk>\\d+)/$', {}, {'pk': '<int>'})]}\n        url = url_resolver.reverse('test_view', kwargs={'pk': 123})\n        self.assertEqual(url, 'test/123/')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_531": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom matplotlib.figure import Figure\n\nclass TestFigureMethods(unittest.TestCase):\n\n    def setUp(self):\n        self.figure = Figure()\n\n    def test_figimage(self):\n        X = [[1, 2], [3, 4]]\n        image = self.figure.figimage(X)\n        self.assertEqual(image.get_array().tolist(), X)\n\n    def test_set_size_inches(self):\n        self.figure.set_size_inches(5, 4)\n        self.assertEqual(self.figure.get_size_inches().tolist(), [5, 4])\n\n    def test_set_dpi(self):\n        self.figure.set_dpi(100)\n        self.assertEqual(self.figure.get_dpi(), 100)\n\n    def test_add_axes(self):\n        ax = self.figure.add_axes([0.1, 0.1, 0.8, 0.8])\n        self.assertIn(ax, self.figure.axes)\n\n    def test_add_subplot(self):\n        ax = self.figure.add_subplot(111)\n        self.assertIn(ax, self.figure.axes)\n\n    @patch('matplotlib.figure.Figure.savefig')\n    def test_savefig(self, mock_savefig):\n        self.figure.savefig('test.png')\n        mock_savefig.assert_called_with('test.png')\n\n    @patch('matplotlib.figure.Figure.draw_artist')\n    def test_draw_artist(self, mock_draw_artist):\n        mock_artist = MagicMock()\n        self.figure.draw_artist(mock_artist)\n        mock_draw_artist.assert_called_with(mock_artist)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_932": ["\nimport unittest\nfrom unittest.mock import patch\nfrom docutils.statemachine import StringList\nfrom sphinx.util.rst import append_epilog, escape, heading, prepend_prolog, textwidth\n\nclass TestRSTFunctions(unittest.TestCase):\n    def test_escape(self):\n        self.assertEqual(escape(\"Hello, World!\"), \"Hello\\\\, World\\\\!\")\n        self.assertEqual(escape(\"^Top-Level\"), \"\\\\^Top\\\\-Level\")\n        self.assertEqual(escape(\".StartingDot\"), \"\\\\.StartingDot\")\n\n    def test_textwidth(self):\n        self.assertEqual(textwidth(\"Hello, World!\"), 13)\n        self.assertEqual(textwidth(\"\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c\uff01\"), 16)\n        self.assertEqual(textwidth(\"\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c\uff01\", \"WF\"), 16)\n        self.assertEqual(textwidth(\"\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c\uff01\", \"WFA\"), 20)\n\n    def test_heading(self):\n        env = unittest.mock.Mock()\n        env.language = \"en\"\n        self.assertEqual(heading(env, \"Title\", 1), \"Title\\n======\")\n        self.assertEqual(heading(env, \"Subtitle\", 2), \"Subtitle\\n--------\")\n        self.assertEqual(heading(env, \"Sub-Subtitle\", 3), \"Sub-Subtitle\\n~~~~~~~~~~~~~~~\")\n\n    def test_prepend_prolog(self):\n        content = StringList()\n        prepend_prolog(content, \".. Prolog::\\n    This is a test.\")\n        self.assertEqual(content[0], \".. Prolog::\")\n        self.assertEqual(content[1], \"    This is a test.\")\n\n    def test_append_epilog(self):\n        content = StringList()\n        append_epilog(content, \".. Epilog::\\n    This is a test.\")\n        self.assertEqual(content[0], \".. Epilog::\")\n        self.assertEqual(content[1], \"    This is a test.\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_590": ["\nimport unittest\nfrom xarray import DataArray, Dataset, Variable, concat\nimport numpy as np\n\nclass TestConcat(unittest.TestCase):\n    def setUp(self):\n        self.da1 = DataArray(np.random.rand(3, 4), dims=('x', 'y'))\n        self.da2 = DataArray(np.random.rand(3, 4), dims=('x', 'y'))\n        self.ds1 = Dataset({'a': self.da1, 'b': ('x', np.arange(3))})\n        self.ds2 = Dataset({'a': self.da2, 'b': ('x', np.arange(3))})\n\n    def test_concat_dataarrays(self):\n        result = concat([self.da1, self.da2], dim='x')\n        self.assertEqual(result.shape, (6, 4))\n\n    def test_concat_datasets(self):\n        result = concat([self.ds1, self.ds2], dim='x')\n        self.assertEqual(result.shape, (6,))\n        self.assertEqual(set(result.data_vars), {'a'})\n        self.assertEqual(set(result.coords), {'x', 'y', 'b'})\n\n    def test_concat_invalid_compat(self):\n        with self.assertRaises(ValueError):\n            concat([self.ds1, self.ds2], dim='x', compat='invalid')\n\n    def test_concat_dataarray_invalid_data_vars(self):\n        with self.assertRaises(ValueError):\n            concat([self.da1, self.da2], dim='x', data_vars='invalid')\n\n    def test_concat_datasets_different_data_vars(self):\n        ds3 = self.ds2.copy()\n        ds3['c'] = ('x', np.arange(3))\n        result = concat([self.ds1, ds3], dim='x', data_vars='different')\n        self.assertEqual(set(result.data_vars), {'a', 'c'})\n\n    def test_concat_datasets_different_coords(self):\n        ds3 = self.ds2.copy()\n        ds3['c'] = ('x', np.arange(3))\n        result = concat([self.ds1, ds3], dim='x', coords='different')\n        self.assertEqual(set(result.coords), {'x', 'y', 'b', 'c'})\n\n    def test_concat_datasets_override_compat(self):\n        ds3 = self.ds2.copy()\n        ds3['b'] = ('x', np.arange(3, 6))\n        result = concat([self.ds1, ds3], dim='x', compat='override')\n        self.assertTrue(np.array_equal(result['b'].values, np.arange(6)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_550": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom matplotlib.axes._base import Axes\nfrom matplotlib.figure import Figure\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg\n\nclass TestAxes(unittest.TestCase):\n\n    def setUp(self):\n        self.figure = Figure()\n        self.ax = self.figure.add_subplot(111)\n\n    def test_init(self):\n        self.assertIsInstance(self.ax, Axes)\n\n    def test_add_patch(self):\n        patch = Mock()\n        self.ax.add_patch(patch)\n        self.assertIn(patch, self.ax.patches)\n\n    def test_get_legend(self):\n        self.ax.legend_ = Mock()\n        self.assertEqual(self.ax.get_legend(), self.ax.legend_)\n\n    def test_get_images(self):\n        image = Mock()\n        self.ax.images = [image]\n        self.assertEqual(self.ax.get_images(), [image])\n\n    def test_get_lines(self):\n        line = Mock()\n        self.ax.lines = [line]\n        self.assertEqual(self.ax.get_lines(), [line])\n\n    def test_axis_method_wrappers(self):\n        self.ax.xaxis = Mock()\n        self.ax.yaxis = Mock()\n        self.ax.get_xaxis()\n        self.ax.get_yaxis()\n        self.ax.xaxis.get_gridlines.assert_called_once()\n        self.ax.yaxis.get_gridlines.assert_called_once()\n        self.ax.xaxis.get_ticklines.assert_called_once()\n        self.ax.yaxis.get_ticklines.assert_called_once()\n\n    @patch('matplotlib.axes._base.cbook.silent_list')\n    def test_get_children(self, mock_silent_list):\n        self.ax.get_children()\n        mock_silent_list.assert_called()\n\n    @patch('matplotlib.axes._base.mtransforms.Bbox.contains')\n    def test_contains(self, mock_contains):\n        mouseevent = Mock()\n        self.ax.contains(mouseevent)\n        mock_contains.assert_called()\n\n    @patch('matplotlib.axes._base.martist._get_tightbbox_for_layout_only')\n    def test_get_tightbbox(self, mock_get_tightbbox):\n        renderer = Mock()\n        self.ax.get_tightbbox(renderer)\n        mock_get_tightbbox.assert_called()\n\n    @patch('matplotlib.axes._base.Axes.add_subplot')\n    def test_make_twin_axes(self, mock_add_subplot):\n        self.ax._make_twin_axes()\n        mock_add_subplot.assert_called()\n\n    def test_twinx(self):\n        twin_ax = self.ax.twinx()\n        self.assertIsInstance(twin_ax, Axes)\n        self.assertNotEqual(self.ax.get_shared_x_axes().get_siblings(self.ax),\n                            self.ax.get_shared_x_axes().get_siblings(twin_ax))\n\n    def test_twiny(self):\n        twin_ax = self.ax.twiny()\n        self.assertIsInstance(twin_ax, Axes)\n        self.assertNotEqual(self.ax.get_shared_y_axes().get_siblings(self.ax),\n                            self.ax.get_shared_y_axes().get_siblings(twin_ax))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1151": ["\nimport unittest\nfrom sympy import Symbol, S, Mod, nan\n\nclass TestMod(unittest.TestCase):\n\n    def setUp(self):\n        self.x = Symbol('x')\n        self.y = Symbol('y')\n\n    def test_basic_modulo(self):\n        self.assertEqual(Mod(7, 3), 1)\n        self.assertEqual(Mod(10, 2), 0)\n\n    def test_symbolic_modulo(self):\n        self.assertEqual(Mod(self.x, self.y), Mod(self.x, self.y))\n        self.assertEqual(Mod(self.x, 2).subs(self.x, 5), 1)\n\n    def test_zero_divisor(self):\n        with self.assertRaises(ZeroDivisionError):\n            Mod(5, 0)\n\n    def test_non_finite_numbers(self):\n        self.assertTrue(Mod(S.Infinity, 3).is_nan)\n        self.assertTrue(Mod(nan, 3).is_nan)\n\n    def test_modulo_of_zero(self):\n        self.assertEqual(Mod(0, 5), 0)\n        self.assertEqual(Mod(0, self.y), 0)\n\n    def test_modulo_of_equal_values(self):\n        self.assertEqual(Mod(5, 5), 0)\n        self.assertEqual(Mod(-5, -5), 0)\n\n    def test_modulo_of_multiples(self):\n        self.assertEqual(Mod(6, 2), 0)\n        self.assertEqual(Mod(-6, 2), 0)\n\n    def test_modulo_of_addition(self):\n        self.assertEqual(Mod(self.x + self.y, 2), Mod(self.x + self.y, 2))\n        self.assertEqual(Mod(self.x + 1, 2).subs(self.x, 2), 1)\n\n    def test_modulo_of_multiplication(self):\n        self.assertEqual(Mod(self.x * self.y, 2), Mod(self.x * self.y, 2))\n        self.assertEqual(Mod(self.x * 3, 2).subs(self.x, 2), 0)\n\n    def test_modulo_of_integer(self):\n        self.assertEqual(Mod(7, 2), 1)\n        self.assertEqual(Mod(6, 1), 0)\n\n    def test_modulo_properties(self):\n        self.assertTrue(Mod(self.x, self.y).is_integer)\n        self.assertTrue(Mod(self.x, 2).is_nonnegative)\n        self.assertTrue(Mod(self.x, -2).is_nonpositive)\n\n    def test_rewrite_as_floor(self):\n        self.assertEqual(Mod(self.x, self.y)._eval_rewrite_as_floor(self.x, self.y), self.x - self.y*floor(self.x/self.y))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1098": ["\nimport unittest\nfrom sympy import symbols, S\nfrom sympy.tensor.tensor import TensorIndexType, TensorHead\nfrom sympy.tensor.toperators import PartialDerivative\n\nclass TestPartialDerivative(unittest.TestCase):\n    def setUp(self):\n        self.L = TensorIndexType(\"L\")\n        self.A = TensorHead(\"A\", [self.L])\n        self.i, self.j = symbols(\"i j\")\n\n    def test_init(self):\n        expr = PartialDerivative(self.A(self.i), self.A(self.j))\n        self.assertEqual(expr.get_indices(), [self.i, -self.j])\n\n    def test_contract_indices(self):\n        expr = PartialDerivative(self.A(self.i), self.A(self.i))\n        self.assertEqual(expr.get_indices(), [self.L(0), -self.L(0)])\n\n    def test_doit(self):\n        expr = PartialDerivative(self.A(self.i), self.A(self.j))\n        self.assertEqual(expr.doit(), PartialDerivative(self.A(self.i), self.A(self.j)))\n\n    def test_expand_partial_derivative(self):\n        expr = PartialDerivative(self.A(self.i) * self.A(self.j), self.i)\n        self.assertEqual(expr._expand_partial_derivative(), PartialDerivative(self.A(self.i), self.i) * self.A(self.j) + self.A(self.i) * PartialDerivative(self.A(self.j), self.i))\n\n    def test_perform_derivative(self):\n        expr = PartialDerivative(self.i * self.j, self.i)\n        self.assertEqual(expr._perform_derivative(), self.j)\n\n    def test_replace_indices(self):\n        expr = PartialDerivative(self.A(self.i), self.A(self.j))\n        self.assertEqual(expr._replace_indices({self.i: self.j}), PartialDerivative(self.A(self.j), self.A(-self.j)))\n\n    def test_extract_data(self):\n        expr = PartialDerivative(self.A(self.i), self.A(self.j))\n        self.assertEqual(expr._extract_data({self.i: 0, self.j: 1}), ([self.i, -self.j], ...))  # Add appropriate array data for this test\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_861": ["\nimport unittest\nfrom sklearn.datasets import make_classification\nfrom sklearn.feature_selection import SelectKBest, f_regression\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import Pipeline, FeatureUnion, make_pipeline, make_union\nfrom sklearn.exceptions import NotFittedError\n\nclass TestSklearnPipeline(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n\n    def test_pipeline(self):\n        anova_filter = SelectKBest(f_regression, k=5)\n        clf = SVC(kernel='linear')\n        anova_svm = Pipeline([('anova', anova_filter), ('svc', clf)])\n        anova_svm.fit(self.X, self.y)\n        self.assertTrue(hasattr(anova_svm, 'named_steps'))\n        self.assertEqual(anova_svm.named_steps['anova'], anova_filter)\n        self.assertEqual(anova_svm.named_steps['svc'], clf)\n        self.assertEqual(anova_svm.predict(self.X).shape, (self.X.shape[0],))\n\n    def test_feature_union(self):\n        transformer = FeatureUnion([(\"transformer1\", SelectKBest(k=5)), (\"transformer2\", SelectKBest(k=10))])\n        transformer.fit(self.X, self.y)\n        self.assertTrue(hasattr(transformer, 'transformer_list'))\n        self.assertEqual(len(transformer.transformer_list), 2)\n        self.assertEqual(transformer.transform(self.X).shape[0], self.X.shape[0])\n\n    def test_make_pipeline(self):\n        pipeline = make_pipeline(SelectKBest(k=5), SVC(kernel='linear'))\n        pipeline.fit(self.X, self.y)\n        self.assertTrue(hasattr(pipeline, 'steps'))\n        self.assertEqual(len(pipeline.steps), 2)\n        self.assertEqual(pipeline.predict(self.X).shape, (self.X.shape[0],))\n\n    def test_make_union(self):\n        union = make_union(SelectKBest(k=5), SelectKBest(k=10))\n        union.fit(self.X, self.y)\n        self.assertTrue(hasattr(union, 'transformer_list'))\n        self.assertEqual(len(union.transformer_list), 2)\n        self.assertEqual(union.transform(self.X).shape[0], self.X.shape[0])\n\n    def test_pipeline_errors(self):\n        with self.assertRaises(TypeError):\n            Pipeline([('step1', 'not an estimator')])\n        with self.assertRaises(TypeError):\n            Pipeline([('step1', SVC(kernel='linear')), ('step2', 'not an estimator')])\n        with self.assertRaises(ValueError):\n            Pipeline([('step1', SelectKBest(k=5))]).fit(self.X, self.y, invalid_param=1)\n        with self.assertRaises(NotFittedError):\n            Pipeline([('step1', SelectKBest(k=5))]).predict(self.X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_206": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.core.files import File, temp\nfrom django.core.files.base import ContentFile\nfrom django.core.files.storage import default_storage\nfrom django.core.files.uploadedfile import TemporaryUploadedFile\nfrom django.db import models\nfrom django.db.models.fields.files import FieldFile, FileField, ImageField\n\nclass TestFileField(unittest.TestCase):\n    def setUp(self):\n        class TestModel(models.Model):\n            test_file = FileField(upload_to='test_files/')\n\n        self.TestModel = TestModel\n        self.instance = TestModel()\n        self.field = TestModel._meta.get_field('test_file')\n\n    def test_field_file_init(self):\n        field_file = FieldFile(self.instance, self.field, 'test.txt')\n        self.assertEqual(field_file.name, 'test.txt')\n        self.assertEqual(field_file.instance, self.instance)\n        self.assertEqual(field_file.field, self.field)\n        self.assertEqual(field_file.storage, self.field.storage)\n        self.assertTrue(field_file._committed)\n\n    def test_field_file_save(self):\n        field_file = FieldFile(self.instance, self.field, 'test.txt')\n        content = ContentFile('Test content')\n        field_file.save('test.txt', content)\n        self.assertEqual(field_file.name, 'test_files/test.txt')\n        self.assertEqual(self.instance.test_file.name, 'test_files/test.txt')\n        self.assertTrue(field_file._committed)\n\n    def test_field_file_delete(self):\n        self.instance.test_file = ContentFile('Test content')\n        self.instance.save()\n        self.instance.test_file.delete()\n        self.assertIsNone(self.instance.test_file.name)\n        self.assertFalse(self.instance.test_file._committed)\n\nclass TestImageField(unittest.TestCase):\n    def setUp(self):\n        class TestModel(models.Model):\n            test_image = ImageField(upload_to='test_images/')\n\n        self.TestModel = TestModel\n        self.instance = TestModel()\n        self.field = TestModel._meta.get_field('test_image')\n\n    def test_image_field_formfield(self):\n        form_field = self.field.formfield()\n        self.assertEqual(form_field.max_length, self.field.max_length)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_532": ["\nimport unittest\nimport numpy as np\nfrom matplotlib.contour import ContourSet, QuadContourSet\nfrom matplotlib import pyplot as plt\nfrom matplotlib import cm\n\nclass TestContourMethods(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.x = np.linspace(-5, 5, 100)\n        self.y = np.linspace(-5, 5, 100)\n        self.X, self.Y = np.meshgrid(self.x, self.y)\n        self.Z = np.sin(self.X) + np.cos(self.Y)\n\n    def test_contour_set_initialization(self):\n        cs = ContourSet(self.ax, [1], [[np.array([[0, 0], [1, 1]])]], [[1, 1]])\n        self.assertEqual(cs.levels, [1])\n\n    def test_quad_contour_set_initialization(self):\n        qcs = QuadContourSet(self.ax, self.X, self.Y, self.Z, levels=[1])\n        self.assertIsNotNone(qcs._contour_generator)\n\n    def test_contour_set_change_alpha(self):\n        cs = ContourSet(self.ax, [1], [[np.array([[0, 0], [1, 1]])]], [[1, 1]], alpha=0.5)\n        self.assertEqual(cs.alpha, 0.5)\n        cs.set_alpha(0.8)\n        self.assertEqual(cs.alpha, 0.8)\n\n    def test_quad_contour_set_color_mapping(self):\n        qcs = QuadContourSet(self.ax, self.X, self.Y, self.Z, levels=[1], cmap=cm.viridis)\n        self.assertIsNotNone(qcs.cmap)\n\n    # Add more test cases as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_566": ["\nimport unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom lib.matplotlib.figure import Figure\n\nclass TestFigureMethods(unittest.TestCase):\n\n    def setUp(self):\n        self.fig = Figure()\n\n    def test_figure_size_inches(self):\n        self.fig.set_size_inches(5, 4)\n        self.assertEqual(self.fig.get_size_inches(), (5, 4))\n\n    def test_figure_dpi(self):\n        self.fig.set_dpi(200)\n        self.assertEqual(self.fig.get_dpi(), 200)\n\n    def test_add_subplot(self):\n        ax = self.fig.add_subplot(111)\n        self.assertIsInstance(ax, plt.Axes)\n\n    def test_subplots_adjust(self):\n        self.fig.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)\n        self.assertEqual(self.fig.subplotpars.left, 0.1)\n        self.assertEqual(self.fig.subplotpars.right, 0.9)\n        self.assertEqual(self.fig.subplotpars.top, 0.9)\n        self.assertEqual(self.fig.subplotpars.bottom, 0.1)\n\n    def test_savefig(self):\n        self.fig.savefig('test.png')\n        # Add assertion to check if the file is created\n\n    def test_tight_layout(self):\n        self.fig.tight_layout()\n        # Add assertion to check if the layout is adjusted\n\n    def test_clear(self):\n        self.fig.clear()\n        self.assertEqual(len(self.fig.axes), 0)\n\n    def test_figimage(self):\n        data = np.random.rand(10, 10)\n        im = self.fig.figimage(data)\n        self.assertIsInstance(im, plt.FigureImage)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_985": ["\nimport unittest\nfrom sympy import symbols, sinh, nan, oo, zoo, pi, asinh, acosh, log, sqrt, coth, I, cot, E, tanh, tan, cosh, cos, S, sin, Rational, atanh, acoth, Integer, O, exp, sech, sec, csch, asech, acsch, acos, asin, expand_mul\n\nclass TestHyperbolicFunctions(unittest.TestCase):\n\n    def setUp(self):\n        self.x = symbols('x')\n\n    def test_sinh_evaluation(self):\n        self.assertEqual(sinh(0), S.Zero)\n        self.assertEqual(sinh(1), sinh(S(1)))\n        self.assertEqual(sinh(oo), oo)\n        self.assertEqual(sinh(-oo), -oo)\n        self.assertEqual(sinh(zoo), zoo)\n        self.assertEqual(sinh(nan), nan)\n        self.assertEqual(sinh(I), I*sin(1))\n        self.assertEqual(sinh(asinh(self.x)), self.x)\n        self.assertEqual(sinh(acosh(self.x)), sqrt((self.x - 1) * (self.x + 1)))\n        self.assertEqual(sinh(atanh(self.x)), self.x/sqrt(1 - self.x**2))\n        self.assertEqual(sinh(acoth(self.x)), 1/(sqrt((self.x - 1) * (self.x + 1))))\n\n    def test_cosh_evaluation(self):\n        self.assertEqual(cosh(0), S.One)\n        self.assertEqual(cosh(1), cosh(S(1)))\n        self.assertEqual(cosh(oo), oo)\n        self.assertEqual(cosh(-oo), oo)\n        self.assertEqual(cosh(zoo), zoo)\n        self.assertEqual(cosh(nan), nan)\n        self.assertEqual(cosh(I), cos(1))\n        self.assertEqual(cosh(asinh(self.x)), sqrt(1 + self.x**2))\n        self.assertEqual(cosh(acosh(self.x)), self.x)\n        self.assertEqual(cosh(atanh(self.x)), 1/sqrt(1 - self.x**2))\n        self.assertEqual(cosh(acoth(self.x)), self.x/sqrt((self.x - 1) * (self.x + 1)))\n\n    # Add more test cases for tanh, coth, csch, sech, asinh, acosh, atanh, acoth, asech, acsch\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_831": ["\nimport unittest\nfrom sklearn.datasets import load_iris\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz, plot_tree, export_text\nimport os\nimport tempfile\n\nclass TestDecisionTreeExport(unittest.TestCase):\n    def setUp(self):\n        self.iris = load_iris()\n        self.clf = DecisionTreeClassifier(random_state=0)\n        self.clf.fit(self.iris.data, self.iris.target)\n\n    def test_export_graphviz(self):\n        with tempfile.NamedTemporaryFile(delete=False) as temp:\n            temp_name = temp.name\n        try:\n            export_graphviz(self.clf, out_file=temp_name)\n            with open(temp_name, 'r') as f:\n                content = f.read()\n                self.assertTrue(content.startswith('digraph Tree {'))\n        finally:\n            os.remove(temp_name)\n\n    def test_plot_tree(self):\n        annotations = plot_tree(self.clf)\n        self.assertIsInstance(annotations, list)\n\n    def test_export_text(self):\n        report = export_text(self.clf)\n        self.assertIsInstance(report, str)\n        self.assertTrue(len(report) > 0)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_8": ["\nimport numpy as np\nimport numpy.ma as ma\nfrom astropy.utils.masked.function_helpers import (\n    array_equal, array_equiv, array_str, array2string,\n    apply_over_axes, bincount, block, broadcast_arrays,\n    broadcast_to, choose, concatenate, copyto, count_nonzero,\n    datetime_as_string, dispatched_function, empty_like,\n    fill_diagonal, fliplr, flipud, fix, full_like, geomspace,\n    gradient, hstack, iscomplex, isneginf, isposinf, lexsort,\n    linspace, logspace, msort, nan_to_num, nancumprod, nancumsum,\n    nanmedian, nanprod, nansum, outer, packbits, place,\n    quantile, percentile, roll, rollaxis, rot90, searchsorted,\n    sinc, sort_complex, trapz, triu, tril, unpackbits, unwrap,\n    vdot, vstack, where, zeros_like, ones_like\n)\nfrom numpy.testing import assert_array_equal\n\ndef test_array_equal():\n    a1 = ma.array([1, 2, ma.masked])\n    a2 = ma.array([1, 2, 3])\n    assert array_equal(a1, a2) == False\n    assert array_equal(a1, a1) == True\n\ndef test_array_equiv():\n    a1 = ma.array([1, 2, ma.masked])\n    a2 = ma.array([1, 2, 3])\n    assert array_equiv(a1, a2) == False\n    assert array_equiv(a1, a1) == True\n\n# Add more tests for other functions in the same format...\n"], "sample_912": ["\nimport unittest\nimport ast\nfrom sphinx.pycode import ast as sphinx_ast\n\nclass TestSphinxAst(unittest.TestCase):\n    def test_parse(self):\n        code = \"x = 1 + 2\"\n        parsed_code = sphinx_ast.parse(code)\n        self.assertIsInstance(parsed_code, ast.Module)\n\n    def test_unparse(self):\n        node = ast.parse(\"x = 1 + 2\").body[0].value\n        unparsed_code = sphinx_ast.unparse(node)\n        self.assertEqual(unparsed_code, \"1 + 2\")\n\n    def test_unparse_arguments(self):\n        node = ast.parse(\"def f(x, y=2, *args, z=3, **kwargs): pass\").body[0].args\n        unparsed_args = sphinx_ast.unparse_arguments(node)\n        self.assertEqual(unparsed_args, \"x, y=2, *args, z=3, **kwargs\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_161": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db import models\nfrom django.db.models import fields\nfrom django.db.models.fields.related import (\n    ForeignKey, OneToOneField, ManyToManyField,\n    ForeignObject, create_many_to_many_intermediary_model,\n    lazy_related_operation, resolve_relation, RelatedField,\n    ManyToManyDescriptor, ReverseManyToOneDescriptor,\n    ReverseOneToOneDescriptor, ForwardManyToOneDescriptor,\n    ForwardOneToOneDescriptor,\n)\nfrom django.core.checks import Error, Warning as DjangoWarning\n\nclass TestRelatedFields(unittest.TestCase):\n    def setUp(self):\n        self.mock_model = Mock(spec=models.Model)\n        self.mock_model._meta = Mock()\n        self.mock_model._meta.model_name = 'mock_model'\n        self.mock_model._meta.pk = Mock()\n        self.mock_model._meta.pk.name = 'pk'\n        self.mock_related_model = Mock(spec=models.Model)\n        self.mock_related_model._meta = Mock()\n        self.mock_related_model._meta.model_name = 'mock_related_model'\n        self.mock_related_model._meta.pk = Mock()\n        self.mock_related_model._meta.pk.name = 'pk'\n\n    def test_resolve_relation(self):\n        self.assertEqual(resolve_relation(self.mock_model, 'self'), self.mock_model)\n        self.assertEqual(resolve_relation(self.mock_model, 'RelatedModel'), 'mock_model.RelatedModel')\n        self.assertEqual(resolve_relation(self.mock_model, self.mock_related_model), self.mock_related_model)\n\n    def test_lazy_related_operation(self):\n        # Add your tests here\n\n    def test_related_field_check(self):\n        # Add your tests here\n\n    def test_foreign_key_init(self):\n        fk = ForeignKey(self.mock_related_model, on_delete=models.CASCADE)\n        self.assertEqual(fk.remote_field.model, self.mock_related_model)\n        self.assertEqual(fk.remote_field.on_delete, models.CASCADE)\n\n    # Add more tests for other classes and methods as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_504": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colorbar import Colorbar, make_axes, make_axes_gridspec\n\nclass TestColorbar(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.mappable = Mock(spec=mpl.cm.ScalarMappable)\n        self.mappable.cmap = plt.cm.viridis\n        self.mappable.norm = plt.Normalize(0, 1)\n        self.mappable.get_array.return_value = np.arange(100).reshape(10, 10)\n        self.mappable.autoscale_None = Mock()\n\n    def test_colorbar_init(self):\n        colorbar = Colorbar(self.ax, self.mappable)\n        self.assertEqual(colorbar.ax, self.ax)\n        self.assertEqual(colorbar.mappable, self.mappable)\n\n    def test_colorbar_update_normal(self):\n        colorbar = Colorbar(self.ax, self.mappable)\n        norm = plt.Normalize(0, 2)\n        mappable = Mock(spec=mpl.cm.ScalarMappable)\n        mappable.norm = norm\n        colorbar.update_normal(mappable)\n        self.assertEqual(colorbar.norm, norm)\n\n    def test_colorbar_draw_all(self):\n        colorbar = Colorbar(self.ax, self.mappable)\n        colorbar.draw_all()\n        self.assertIsNotNone(colorbar.solids)\n\n    def test_make_axes(self):\n        cax, kwargs = make_axes(self.ax)\n        self.assertIsInstance(cax, mpl.axes.Axes)\n\n    def test_make_axes_gridspec(self):\n        cax, kwargs = make_axes_gridspec(self.ax)\n        self.assertIsInstance(cax, mpl.axes.SubplotBase)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1171": ["\nimport unittest\nfrom sympy import symbols, S, pi, I, oo, Interval, FiniteSet, Union\nfrom sympy.sets.fancysets import ImageSet, Range, normalize_theta_set, ComplexRegion\nfrom sympy.sets.sets import ProductSet, Contains\nfrom sympy.sets.conditionset import ConditionSet\nfrom sympy.core.containers import Tuple\nfrom sympy.core.function import Lambda\nfrom sympy.core.logic import fuzzy_and\nfrom sympy.core.relational import Eq\nfrom sympy.core.singleton import Singleton\nfrom sympy.core.symbol import Dummy, symbols\n\nclass TestFancySets(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_ImageSet(self):\n        f = Lambda((self.x, self.y), self.x**2 + self.y**2)\n        base_set = ProductSet(Interval(0, 1), Interval(0, 1))\n        image_set = ImageSet(f, base_set)\n        self.assertIsInstance(image_set, ImageSet)\n        self.assertIn(0, image_set)\n        self.assertIn(1, image_set)\n        self.assertNotIn(2, image_set)\n\n    def test_Range(self):\n        r = Range(0, 10, 2)\n        self.assertEqual(r.start, 0)\n        self.assertEqual(r.stop, 10)\n        self.assertEqual(r.step, 2)\n        self.assertIn(2, r)\n        self.assertNotIn(3, r)\n\n    def test_normalize_theta_set(self):\n        theta = Interval(0, 10*pi)\n        normalized_theta = normalize_theta_set(theta)\n        self.assertEqual(normalized_theta, Interval(0, 2*pi))\n\n    def test_ComplexRegion(self):\n        c = ComplexRegion(Interval(0, 1) * Interval(0, 2*pi), polar=True)\n        self.assertIn(0.5 + 0.5*I, c)\n        self.assertNotIn(1 + 2*I, c)\n\n    def test_Complexes(self):\n        self.assertIsInstance(S.Complexes, Singleton)\n        self.assertIn(1 + I, S.Complexes)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_472": ["\nimport unittest\nfrom django.core.paginator import Paginator, PageNotAnInteger, EmptyPage\n\nclass TestPaginator(unittest.TestCase):\n    def setUp(self):\n        self.objects = list(range(100))\n        self.paginator = Paginator(self.objects, 10)\n\n    def test_init(self):\n        self.assertEqual(self.paginator.object_list, self.objects)\n        self.assertEqual(self.paginator.per_page, 10)\n        self.assertEqual(self.paginator.orphans, 0)\n        self.assertTrue(self.paginator.allow_empty_first_page)\n\n    def test_validate_number(self):\n        self.assertEqual(self.paginator.validate_number(1), 1)\n        self.assertEqual(self.paginator.validate_number(10), 10)\n        with self.assertRaises(PageNotAnInteger):\n            self.paginator.validate_number('a')\n        with self.assertRaises(PageNotAnInteger):\n            self.paginator.validate_number(10.5)\n        with self.assertRaises(EmptyPage):\n            self.paginator.validate_number(0)\n        with self.assertRaises(EmptyPage):\n            self.paginator.validate_number(11)\n\n    def test_get_page(self):\n        self.assertEqual(self.paginator.get_page(1).number, 1)\n        self.assertEqual(self.paginator.get_page('a').number, 1)\n        self.assertEqual(self.paginator.get_page(11).number, 10)\n\n    def test_page(self):\n        self.assertEqual(len(self.paginator.page(1)), 10)\n        self.assertEqual(len(self.paginator.page(10)), 10)\n        self.assertEqual(len(self.paginator.page(11)), 0)\n\n    def test_count(self):\n        self.assertEqual(self.paginator.count, 100)\n\n    def test_num_pages(self):\n        self.assertEqual(self.paginator.num_pages, 10)\n\n    def test_page_range(self):\n        self.assertEqual(list(self.paginator.page_range), list(range(1, 11)))\n\n    def test_get_elided_page_range(self):\n        self.assertEqual(list(self.paginator.get_elided_page_range(1)), list(range(1, 11)))\n        self.assertEqual(list(self.paginator.get_elided_page_range(5)), [1, 2, 3, 4, 5, 6, 7, '\u2026', 10])\n        self.assertEqual(list(self.paginator.get_elided_page_range(10)), list(range(1, 11)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_902": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics import average_precision_score, coverage_error, label_ranking_average_precision_score, label_ranking_loss, roc_auc_score\n\nclass TestMetricsRanking(unittest.TestCase):\n    def setUp(self):\n        self.y_true = np.array([0, 0, 1, 1])\n        self.y_scores = np.array([0.1, 0.4, 0.35, 0.8])\n        self.y_true_multi = np.array([[1, 0, 0], [0, 0, 1]])\n        self.y_score_multi = np.array([[0.75, 0.5, 1], [1, 0.2, 0.1]])\n\n    def test_average_precision_score(self):\n        result = average_precision_score(self.y_true, self.y_scores)\n        self.assertAlmostEqual(result, 0.833, places=3)\n\n    def test_coverage_error(self):\n        result = coverage_error(self.y_true_multi, self.y_score_multi)\n        self.assertAlmostEqual(result, 1.5, places=3)\n\n    def test_label_ranking_average_precision_score(self):\n        result = label_ranking_average_precision_score(self.y_true_multi, self.y_score_multi)\n        self.assertAlmostEqual(result, 0.41666, places=5)\n\n    def test_label_ranking_loss(self):\n        result = label_ranking_loss(self.y_true_multi, self.y_score_multi)\n        self.assertAlmostEqual(result, 0.15, places=2)\n\n    def test_roc_auc_score(self):\n        result = roc_auc_score(self.y_true, self.y_scores)\n        self.assertAlmostEqual(result, 0.75, places=2)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_983": ["\nimport unittest\nfrom sympy import symbols, Max, Min, S, Symbol, oo, Heaviside, Piecewise, Eq\n\nclass TestMiscellaneousFunctions(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n        self.p = Symbol('p', positive=True)\n        self.n = Symbol('n', negative=True)\n\n    def test_max_function(self):\n        self.assertEqual(Max(self.x, -2), Max(self.x, -2))\n        self.assertEqual(Max(self.x, -2).subs(self.x, 3), 3)\n        self.assertEqual(Max(self.p, -2), self.p)\n        self.assertEqual(Max(self.x, self.y), Max(self.x, self.y))\n        self.assertEqual(Max(self.n, 8, self.p, 7, -oo), Max(8, self.p))\n        self.assertEqual(Max(1, self.x, oo), oo)\n\n    def test_max_fdiff(self):\n        self.assertEqual(Max(self.x, self.y).fdiff(1), Heaviside(self.x - self.y))\n        self.assertEqual(Max(self.x, self.y, self.z).fdiff(2), Heaviside(self.y - Max(self.x, self.z)))\n\n    def test_max_rewrite_as_Heaviside(self):\n        self.assertEqual(Max(self.x, self.y).rewrite(Heaviside), self.x*Heaviside(self.x - self.y) + self.y*Heaviside(self.y - self.x))\n\n    def test_max_rewrite_as_Piecewise(self):\n        self.assertEqual(Max(self.x, self.y).rewrite(Piecewise), Piecewise((self.x, self.x >= self.y), (self.y, True)))\n\n    def test_min_function(self):\n        self.assertEqual(Min(self.x, -2), Min(self.x, -2))\n        self.assertEqual(Min(self.x, -2).subs(self.x, 3), -2)\n        self.assertEqual(Min(self.p, -3), -3)\n        self.assertEqual(Min(self.x, self.y), Min(self.x, self.y))\n        self.assertEqual(Min(self.n, 8, self.p, -7, self.p, oo), Min(self.n, -7))\n\n    def test_min_fdiff(self):\n        self.assertEqual(Min(self.x, self.y).fdiff(1), Heaviside(self.y - self.x))\n        self.assertEqual(Min(self.x, self.y, self.z).fdiff(2), Heaviside(Min(self.x, self.z) - self.y))\n\n    def test_min_rewrite_as_Heaviside(self):\n        self.assertEqual(Min(self.x, self.y).rewrite(Heaviside), self.x*Heaviside(self.y - self.x) + self.y*Heaviside(self.x - self.y))\n\n    def test_min_rewrite_as_Piecewise(self):\n        self.assertEqual(Min(self.x, self.y).rewrite(Piecewise), Piecewise((self.x, self.x <= self.y), (self.y, True)))\n\n    def test_max_is_positive(self):\n        self.assertTrue(Max(1, 2).is_positive)\n        self.assertFalse(Max(-1, 2).is_positive)\n\n    def test_max_is_nonnegative(self):\n        self.assertTrue(Max(1, 2).is_nonnegative)\n        self.assertFalse(Max(-1, 2).is_nonnegative)\n\n    def test_max_is_negative(self):\n        self.assertFalse(Max(1, 2).is_negative)\n        self.assertTrue(Max(-1, -2).is_negative)\n\n    def test_min_is_positive(self):\n        self.assertFalse(Min(1, 2).is_positive)\n        self.assertTrue(Min(1, -2).is_positive)\n\n    def test_min_is_nonnegative(self):\n        self.assertTrue(Min(1, 2).is_nonnegative)\n        self.assertFalse(Min(1, -2).is_nonnegative)\n\n    def test_min_is_negative(self):\n        self.assertTrue(Min(-1, -2).is_negative)\n        self.assertFalse(Min(1, -2).is_negative)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_942": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom typing import List, Dict, Any\nfrom docutils import nodes\nfrom sphinx import addnodes\nfrom sphinx.builders import Builder\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.domains.python import (PythonDomain, PythonModuleIndex, _parse_annotation, _pseudo_parse_arglist, py_sig_re,\n                                   ObjectEntry, ModuleEntry, ObjectDescription, PyObject, PyFunction, PyDecoratorFunction,\n                                   PyVariable, PyClasslike, PyMethod, PyClassMethod, PyStaticMethod, PyDecoratorMethod,\n                                   PyAttribute, PyXRefRole, filter_meta_fields, builtin_resolver, setup)\nfrom sphinx.testing.util import SphinxTestCase\n\nclass TestPythonDomain(SphinxTestCase):\n    def setUp(self):\n        super().setUp()\n        self.env = MagicMock(spec=BuildEnvironment)\n        self.domain = PythonDomain(self.env)\n\n    def test_note_object(self):\n        self.domain.note_object('test_object', 'function', 'node_id')\n        self.assertEqual(self.domain.objects['test_object'], ObjectEntry(self.env.docname, 'node_id', 'function', False))\n\n    def test_note_module(self):\n        self.domain.note_module('test_module', 'node_id', 'synopsis', 'platform', True)\n        self.assertEqual(self.domain.modules['test_module'], ModuleEntry(self.env.docname, 'node_id', 'synopsis', 'platform', True))\n\n    def test_clear_doc(self):\n        self.domain.objects['test_object'] = ObjectEntry('test_docname', 'node_id', 'function', False)\n        self.domain.modules['test_module'] = ModuleEntry('test_docname', 'node_id', 'synopsis', 'platform', False)\n        self.domain.clear_doc('test_docname')\n        self.assertNotIn('test_object', self.domain.objects)\n        self.assertNotIn('test_module', self.domain.modules)\n\n    # Add more tests for other methods and functions in the PythonDomain class\n\nclass TestPythonModuleIndex(unittest.TestCase):\n    def test_generate(self):\n        # Test the generate method of the PythonModuleIndex class\n        # Mock the necessary objects and attributes and assert the expected results\n        pass\n\n# Add more test classes for other functions and modules in the sphinx.domains.python module\n"], "sample_826": ["\nimport unittest\nfrom unittest.mock import patch\nimport numpy as np\nfrom sklearn.cluster import SpectralClustering\nfrom sklearn.cluster.spectral import discretize, spectral_clustering\n\nclass TestSpectralClustering(unittest.TestCase):\n    def setUp(self):\n        self.data = np.array([[1, 1], [2, 1], [1, 0], [4, 7], [3, 5], [3, 6]])\n        self.affinity_matrix = np.array([[1, 0, 0, 0, 0, 0],\n                                         [0, 1, 0, 0, 0, 0],\n                                         [0, 0, 1, 0, 0, 0],\n                                         [0, 0, 0, 1, 0, 0],\n                                         [0, 0, 0, 0, 1, 0],\n                                         [0, 0, 0, 0, 0, 1]])\n\n    def test_discretize(self):\n        labels = discretize(self.data)\n        self.assertEqual(len(labels), self.data.shape[0])\n\n    def test_spectral_clustering(self):\n        labels = spectral_clustering(self.affinity_matrix, n_clusters=2)\n        self.assertEqual(len(labels), self.affinity_matrix.shape[0])\n\n    def test_SpectralClustering(self):\n        clustering = SpectralClustering(n_clusters=2, random_state=0).fit(self.data)\n        self.assertEqual(len(clustering.labels_), self.data.shape[0])\n\n        clustering = SpectralClustering(n_clusters=2, affinity='precomputed', random_state=0).fit(self.affinity_matrix)\n        self.assertEqual(len(clustering.labels_), self.affinity_matrix.shape[0])\n\n    def test_invalid_assign_labels(self):\n        with self.assertRaises(ValueError):\n            spectral_clustering(self.affinity_matrix, n_clusters=2, assign_labels='invalid')\n\n    @patch('sklearn.cluster.spectral.k_means')\n    def test_k_means_failure(self, mock_k_means):\n        mock_k_means.side_effect = Exception('k_means failed')\n        with self.assertRaises(Exception):\n            spectral_clustering(self.affinity_matrix, n_clusters=2, assign_labels='kmeans')\n\n    @patch('sklearn.cluster.spectral.np.linalg.svd')\n    def test_svd_failure(self, mock_svd):\n        mock_svd.side_effect = np.linalg.LinAlgError('SVD did not converge')\n        with self.assertRaises(np.linalg.LinAlgError):\n            discretize(self.data)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_435": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.contrib.auth.forms import (\n    AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm, PasswordResetForm,\n    ReadOnlyPasswordHashField, ReadOnlyPasswordHashWidget, SetPasswordForm,\n    UserChangeForm, UserCreationForm,\n)\nfrom django.contrib.auth.models import User\n\nclass TestDjangoAuthForms(unittest.TestCase):\n\n    def setUp(self):\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n\n    def test_user_creation_form(self):\n        data = {'username': 'newuser', 'password1': 'newpassword', 'password2': 'newpassword'}\n        form = UserCreationForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_user_change_form(self):\n        data = {'username': 'testuser', 'password': 'testpassword'}\n        form = UserChangeForm(data, instance=self.user)\n        self.assertTrue(form.is_valid())\n\n    def test_authentication_form(self):\n        data = {'username': 'testuser', 'password': 'testpassword'}\n        form = AuthenticationForm(data)\n        self.assertTrue(form.is_valid())\n\n    @patch('django.contrib.auth.forms.authenticate')\n    def test_authentication_form_invalid(self, mock_authenticate):\n        mock_authenticate.return_value = None\n        data = {'username': 'testuser', 'password': 'wrongpassword'}\n        form = AuthenticationForm(data)\n        self.assertFalse(form.is_valid())\n\n    def test_password_reset_form(self):\n        data = {'email': self.user.email}\n        form = PasswordResetForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_set_password_form(self):\n        data = {'new_password1': 'newpassword', 'new_password2': 'newpassword'}\n        form = SetPasswordForm(self.user, data)\n        self.assertTrue(form.is_valid())\n\n    def test_password_change_form(self):\n        data = {'old_password': 'testpassword', 'new_password1': 'newpassword', 'new_password2': 'newpassword'}\n        form = PasswordChangeForm(self.user, data)\n        self.assertTrue(form.is_valid())\n\n    def test_admin_password_change_form(self):\n        data = {'password1': 'newpassword', 'password2': 'newpassword'}\n        form = AdminPasswordChangeForm(self.user, data)\n        self.assertTrue(form.is_valid())\n\n    def test_read_only_password_hash_field(self):\n        field = ReadOnlyPasswordHashField()\n        self.assertEqual(field.widget, ReadOnlyPasswordHashWidget)\n\n    def test_read_only_password_hash_widget(self):\n        widget = ReadOnlyPasswordHashWidget()\n        self.assertEqual(widget.read_only, True)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1136": ["\nimport unittest\nfrom sympy import symbols, S\nfrom sympy.polys.domains.expressiondomain import ExpressionDomain, Expression\n\nx = symbols('x')\n\nclass TestExpressionDomain(unittest.TestCase):\n\n    def setUp(self):\n        self.domain = ExpressionDomain()\n\n    def test_addition(self):\n        a = Expression(x + 2)\n        b = Expression(3*x - 1)\n        result = self.domain.add(a, b)\n        self.assertEqual(result.ex, 4*x + 1)\n\n    def test_subtraction(self):\n        a = Expression(x + 2)\n        b = Expression(3*x - 1)\n        result = self.domain.sub(a, b)\n        self.assertEqual(result.ex, -2*x + 3)\n\n    def test_multiplication(self):\n        a = Expression(x + 2)\n        b = Expression(3*x - 1)\n        result = self.domain.mul(a, b)\n        self.assertEqual(result.ex, 3*x**2 + 5*x - 2)\n\n    def test_power(self):\n        a = Expression(x + 2)\n        n = Expression(2)\n        result = self.domain.pow(a, n)\n        self.assertEqual(result.ex, (x + 2)**2)\n\n    def test_division(self):\n        a = Expression(3*x - 1)\n        b = Expression(x + 2)\n        result = self.domain.div(a, b)\n        self.assertEqual(result.ex, (3*x - 1)/(x + 2))\n\n    def test_equality(self):\n        a = Expression(x + 2)\n        b = Expression(x + 2)\n        self.assertTrue(self.domain.eq(a, b))\n\n    def test_inequality(self):\n        a = Expression(x + 2)\n        b = Expression(x + 3)\n        self.assertTrue(self.domain.ne(a, b))\n\n    def test_conversion_from_sympy(self):\n        a = self.domain.from_sympy(x + 2)\n        self.assertIsInstance(a, Expression)\n        self.assertEqual(a.ex, x + 2)\n\n    def test_conversion_to_sympy(self):\n        a = Expression(x + 2)\n        sympy_obj = self.domain.to_sympy(a)\n        self.assertEqual(sympy_obj, x + 2)\n\n    def test_gcd(self):\n        a = Expression(2*x + 4)\n        b = Expression(3*x + 6)\n        result = self.domain.gcd(a, b)\n        self.assertEqual(result.ex, x + 2)\n\n    def test_lcm(self):\n        a = Expression(2*x + 4)\n        b = Expression(3*x + 6)\n        result = self.domain.lcm(a, b)\n        self.assertEqual(result.ex, 6*x + 12)\n\n    def test_numer_denom(self):\n        a = Expression((3*x - 1)/(x + 2))\n        self.assertEqual(self.domain.numer(a).ex, 3*x - 1)\n        self.assertEqual(self.domain.denom(a).ex, x + 2)\n\n    def test_abs(self):\n        a = Expression(-x - 2)\n        self.assertEqual(abs(a).ex, x + 2)\n\n    def test_neg(self):\n        a = Expression(x + 2)\n        self.assertEqual(-a.ex, -x - 2)\n\n    def test_bool(self):\n        a = Expression(0)\n        b = Expression(x)\n        self.assertFalse(bool(a))\n        self.assertTrue(bool(b))\n\n    def test_is_positive(self):\n        a = Expression(x + 2)\n        self.assertTrue(self.domain.is_positive(a))\n\n    def test_is_negative(self):\n        a = Expression(-x - 2)\n        self.assertTrue(self.domain.is_negative(a))\n\n    def test_is_nonpositive(self):\n        a = Expression(x - 2)\n        self.assertTrue(self.domain.is_nonpositive(a))\n\n    def test_is_nonnegative(self):\n        a = Expression(x + 2)\n        self.assertTrue(self.domain.is_nonnegative(a))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_705": ["\nfrom pathlib import Path\nimport pytest\nimport _pytest.pytester as pytester_mod\nfrom _pytest.config import ExitCode\nfrom _pytest.config import PytestPluginManager\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import CwdSnapshot\nfrom _pytest.pytester import HookRecorder\nfrom _pytest.pytester import LineMatcher\nfrom _pytest.pytester import Pytester\nfrom _pytest.pytester import SysModulesSnapshot\nfrom _pytest.pytester import SysPathsSnapshot\nfrom _pytest.pytester import Testdir\nfrom _pytest._code.source import Source\n\n@pytest.fixture\ndef pytester(tmp_path, request):\n    return Pytester(request, tmp_path)\n\ndef test_pytester_init(pytester):\n    assert pytester.path.exists()\n    assert pytester._name == request.function.__name__\n    assert pytester.plugins == []\n    assert pytester._request == request\n\ndef test_pytester_finalize(pytester):\n    pytester._finalize()\n    # Add assertions to verify the changes made by _finalize()\n\ndef test_pytester_makefile(pytester):\n    filename = pytester.makefile(\".txt\", \"line1\", \"line2\")\n    assert filename.exists()\n    assert filename.read_text() == \"line1\\nline2\"\n\ndef test_pytester_makepyfile(pytester):\n    filename = pytester.makepyfile(\"import os\")\n    assert filename.exists()\n    assert filename.read_text() == \"import os\"\n\ndef test_pytester_syspathinsert(pytester):\n    pytester.syspathinsert()\n    assert pytester.path in sys.path\n\ndef test_pytester_mkdir(pytester):\n    dirname = pytester.mkdir(\"test_dir\")\n    assert dirname.exists()\n    assert dirname.is_dir()\n\ndef test_pytester_mkpydir(pytester):\n    dirname = pytester.mkpydir(\"test_package\")\n    assert dirname.exists()\n    assert dirname.is_dir()\n    assert (dirname / \"__init__.py\").exists()\n\n# Add more test functions to cover other methods and classes in pytester.py\n"], "sample_1044": ["\nimport unittest\nfrom sympy import Symbol, I\nfrom sympy.core.assumptions import StdFactKB, _ask, as_property\n\nclass TestAssumptions(unittest.TestCase):\n    def setUp(self):\n        self.x = Symbol('x', real=True)\n        self.y = Symbol('y')\n\n    def test_stdfactkb(self):\n        kb = StdFactKB({'real': True})\n        self.assertEqual(kb.get('real'), True)\n        self.assertEqual(kb.get('complex'), True)\n        self.assertEqual(kb.get('imaginary'), None)\n\n    def test_ask(self):\n        self.assertEqual(_ask('real', self.x), True)\n        self.assertEqual(_ask('complex', self.x), True)\n        self.assertEqual(_ask('imaginary', self.x), False)\n        self.assertEqual(_ask('rational', self.x), None)\n\n    def test_as_property(self):\n        self.assertEqual(as_property('real'), 'is_real')\n        self.assertEqual(as_property('complex'), 'is_complex')\n\n    def test_symbol_properties(self):\n        self.assertEqual(self.x.is_real, True)\n        self.assertEqual(self.x.is_complex, True)\n        self.assertEqual(self.x.is_imaginary, False)\n        self.assertEqual(self.x.is_rational, None)\n\n        self.assertEqual(I.is_real, False)\n        self.assertEqual(I.is_complex, True)\n        self.assertEqual(I.is_imaginary, True)\n        self.assertEqual(I.is_algebraic, True)\n        self.assertEqual(I.is_prime, False)\n\n    def test_fact_implications(self):\n        self.assertEqual(self.y.is_real, None)\n        self.y._assumptions['rational'] = True\n        self.assertEqual(self.y.is_real, True)\n        self.assertEqual(self.y.is_complex, True)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1193": ["\nimport unittest\nfrom sympy import Point, Point2D, Line, Polygon, Segment, convex_hull, intersection, centroid, Point3D, Line3D, S\nfrom sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points, are_coplanar\nfrom sympy.abc import x, y, a\nfrom sympy.core.function import Derivative\n\nclass TestGeometryUtil(unittest.TestCase):\n    def test_idiff(self):\n        circ = x**2 + y**2 - 4\n        self.assertEqual(idiff(circ, y, x), -x/y)\n        self.assertEqual(idiff(circ, y, x, 2).simplify(), (-x**2 - y**2)/y**3)\n        self.assertEqual(idiff(x + a + y, y, x), -1)\n        self.assertEqual(idiff(x + a + y, [y, a], x), -Derivative(a, x) - 1)\n\n    def test_closest_points(self):\n        points = [Point2D(1, 1), Point2D(1, 2), Point2D(3, 1), Point2D(-5, 2), Point2D(15, 4)]\n        self.assertEqual(closest_points(*points), {(Point2D(1, 1), Point2D(3, 1))})\n\n    def test_farthest_points(self):\n        points = [Point2D(1, 1), Point2D(1, 2), Point2D(3, 1), Point2D(-5, 2), Point2D(15, 4)]\n        self.assertEqual(farthest_points(*points), {(Point2D(-5, 2), Point2D(15, 4))})\n\n    def test_ordered_points(self):\n        points = [Point2D(1, 2), Point2D(3, 1), Point2D(-5, 2), Point2D(1, 1)]\n        self.assertEqual(_ordered_points(points), (Point2D(-5, 2), Point2D(1, 1), Point2D(1, 2), Point2D(3, 1)))\n\n    def test_are_coplanar(self):\n        a = Line3D(Point3D(5, 0, 0), Point3D(1, -1, 1))\n        b = Line3D(Point3D(0, -2, 0), Point3D(3, 1, 1))\n        c = Line3D(Point3D(0, -1, 0), Point3D(5, -1, 9))\n        self.assertFalse(are_coplanar(a, b, c))\n\n        pts = [Point3D(0, 0, 0), Point3D(1, 0, 0), Point3D(0, 1, 0)]\n        self.assertTrue(are_coplanar(*pts))\n\n    def test_convex_hull(self):\n        points = [Point2D(1, 1), Point2D(1, 2), Point2D(3, 1), Point2D(-5, 2), Point2D(15, 4)]\n        self.assertEqual(convex_hull(*points), Polygon(Point2D(-5, 2), Point2D(1, 1), Point2D(3, 1), Point2D(15, 4)))\n\n    def test_intersection(self):\n        c = Circle((0, 1), 1)\n        self.assertEqual(intersection(c, c.center), [])\n        right = Line((0, 0), (1, 0))\n        up = Line((0, 0), (0, 1))\n        self.assertEqual(intersection(c, right, up), [Point2D(0, 0)])\n        self.assertEqual(intersection(c, right, up, pairwise=True), [Point2D(0, 0), Point2D(0, 2)])\n        left = Line((1, 0), (0, 0))\n        self.assertEqual(intersection(right, left), [Segment(Point2D(0, 0), Point2D(1, 0))])\n\n    def test_centroid(self):\n        p = Polygon((0, 0), (10, 0), (10, 10))\n        q = p.translate(0, 20)\n        self.assertEqual(centroid(p, q), Point2D(20/3, 40/3))\n        p, q = Segment((0, 0), (2, 0)), Segment((0, 0), (2, 2))\n        self.assertEqual(centroid(p, q), Point2D(1, 2 - S.One/S.Two))\n        self.assertEqual(centroid(Point(0, 0), Point(2, 0)), Point2D(1, 0))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_672": ["\nimport logging\nimport pytest\nfrom unittest.mock import MagicMock, patch\nfrom _pytest.config import Config\nfrom _pytest.nodes import Item\nfrom _pytest.capture import CaptureManager\nfrom _pytest.terminal import TerminalReporter\nfrom src._pytest.logging import LogCaptureFixture, LoggingPlugin, _LiveLoggingStreamHandler, catching_logs\n\n@pytest.fixture\ndef mock_item():\n    return MagicMock(spec=Item)\n\n@pytest.fixture\ndef mock_config():\n    return MagicMock(spec=Config)\n\n@pytest.fixture\ndef mock_capture_manager():\n    return MagicMock(spec=CaptureManager)\n\n@pytest.fixture\ndef mock_terminal_reporter():\n    return MagicMock(spec=TerminalReporter)\n\ndef test_LogCaptureFixture_init(mock_item):\n    log_capture_fixture = LogCaptureFixture(mock_item)\n    assert log_capture_fixture._item == mock_item\n    assert log_capture_fixture._initial_log_levels == {}\n\ndef test_LogCaptureFixture_finalize(mock_item):\n    log_capture_fixture = LogCaptureFixture(mock_item)\n    log_capture_fixture._initial_log_levels = {\"root\": logging.WARNING}\n    log_capture_fixture._finalize()\n    root_logger = logging.getLogger()\n    assert root_logger.level == logging.WARNING\n\ndef test_LogCaptureFixture_set_level(mock_item):\n    log_capture_fixture = LogCaptureFixture(mock_item)\n    log_capture_fixture.set_level(logging.INFO, \"root\")\n    root_logger = logging.getLogger(\"root\")\n    assert root_logger.level == logging.INFO\n\ndef test_LoggingPlugin_init(mock_config):\n    logging_plugin = LoggingPlugin(mock_config)\n    assert logging_plugin._config == mock_config\n\ndef test_LiveLoggingStreamHandler_init(mock_terminal_reporter, mock_capture_manager):\n    live_logging_stream_handler = _LiveLoggingStreamHandler(mock_terminal_reporter, mock_capture_manager)\n    assert live_logging_stream_handler.capture_manager == mock_capture_manager\n    assert live_logging_stream_handler.stream == mock_terminal_reporter\n\ndef test_catching_logs():\n    handler = logging.StreamHandler()\n    level = logging.INFO\n    with catching_logs(handler, level=level) as h:\n        assert h in logging.getLogger().handlers\n        assert logging.getLogger().level <= level\n    assert h not in logging.getLogger().handlers\n"], "sample_1115": ["\nimport unittest\nfrom sympy import S, symbols, diag\nfrom sympy.tensor.tensor import TensorIndexType, tensor_indices, TensorHead, TensorSymmetry, Tensor\n\nclass TestTensorOperations(unittest.TestCase):\n    def setUp(self):\n        self.L = TensorIndexType(\"L\")\n        self.i, self.j = tensor_indices(\"i j\", self.L)\n        self.A = TensorHead(\"A\", [self.L])\n        self.repl = {}\n        self.repl[self.L] = diag(1, -1, -1, -1)\n        self.repl[self.A(self.i)] = [1, 2, 3, 4]\n\n    def test_tensor_replace_with_arrays(self):\n        expr = self.A(self.i)\n        result = expr.replace_with_arrays(self.repl, [self.i])\n        self.assertEqual(result, [1, 2, 3, 4])\n\n    def test_tensor_multiply_and_replace_with_arrays(self):\n        expr = self.A(self.i) * self.A(self.j)\n        result = expr.replace_with_arrays(self.repl)\n        self.assertEqual(result, [[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16]])\n\n    def test_tensor_contract_and_replace_with_arrays(self):\n        expr = self.A(self.i) * self.A(-self.i)\n        result = expr.replace_with_arrays(self.repl)\n        self.assertEqual(result, -30)\n\n    def test_tensor_symmetrize_and_replace_with_arrays(self):\n        H = TensorHead(\"H\", [self.L, self.L])\n        a, b, c, d = symbols(\"a b c d\")\n        expr = H(self.i, self.j) / 2 + H(self.j, self.i) / 2\n        repl = {H(self.i, self.j): [[a, b], [c, d]]}\n        result = expr.replace_with_arrays(repl)\n        self.assertEqual(result, [[a, b / 2 + c / 2], [b / 2 + c / 2, d]])\n\n    def test_tensor_antisymmetrize_and_replace_with_arrays(self):\n        H = TensorHead(\"H\", [self.L, self.L])\n        a, b, c, d = symbols(\"a b c d\")\n        expr = H(self.i, self.j) / 2 - H(self.j, self.i) / 2\n        repl = {H(self.i, self.j): [[a, b], [c, d]]}\n        result = expr.replace_with_arrays(repl)\n        self.assertEqual(result, [[0, b / 2 - c / 2], [-b / 2 + c / 2, 0]])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_466": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.db.migrations import Migration\nfrom django.db.migrations.writer import MigrationWriter, OperationWriter\n\nclass TestMigrationWriter(unittest.TestCase):\n    def setUp(self):\n        self.migration = Migration('test_app', '0001_initial')\n        self.writer = MigrationWriter(self.migration)\n\n    def test_operation_writer(self):\n        operation = Mock()\n        operation.deconstruct.return_value = ('TestOperation', [], {})\n        operation_writer = OperationWriter(operation)\n        self.assertIsInstance(operation_writer.serialize(), tuple)\n\n    def test_migration_writer(self):\n        self.assertIsInstance(self.writer.as_string(), str)\n\n    @patch('django.db.migrations.writer.MigrationLoader.migrations_module')\n    def test_basedir(self, mock_migrations_module):\n        mock_migrations_module.return_value = ('test_app.migrations', None)\n        self.assertEqual(self.writer.basedir, '/path/to/test_app/migrations')\n\n    def test_filename(self):\n        self.assertEqual(self.writer.filename, '0001_initial.py')\n\n    @patch('django.db.migrations.writer.serializer_factory')\n    def test_serialize(self, mock_serializer_factory):\n        mock_serializer = Mock()\n        mock_serializer.serialize.return_value = 'serialized_value'\n        mock_serializer_factory.return_value = mock_serializer\n        self.assertEqual(MigrationWriter.serialize('value'), 'serialized_value')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_486": ["\nfrom django.test import TestCase\nfrom django.forms import ValidationError\nfrom django.forms.models import (\n    ModelForm,\n    ModelChoiceField,\n    ModelMultipleChoiceField,\n    modelform_factory,\n    modelformset_factory,\n    inlineformset_factory,\n    _get_foreign_key,\n    ModelChoiceIteratorValue,\n    ModelChoiceIterator,\n    InlineForeignKeyField,\n)\nfrom myapp.models import MyModel  # replace with your actual model\n\nclass TestModelsForms(TestCase):\n    def setUp(self):\n        # Create test data\n        self.my_model_instance = MyModel.objects.create(...)\n\n    def test_model_form(self):\n        # Test ModelForm\n        form = ModelForm(instance=self.my_model_instance)\n        self.assertIsInstance(form, ModelForm)\n\n    def test_model_choice_field(self):\n        # Test ModelChoiceField\n        field = ModelChoiceField(queryset=MyModel.objects.all())\n        self.assertIsInstance(field, ModelChoiceField)\n\n    def test_model_multiple_choice_field(self):\n        # Test ModelMultipleChoiceField\n        field = ModelMultipleChoiceField(queryset=MyModel.objects.all())\n        self.assertIsInstance(field, ModelMultipleChoiceField)\n\n    def test_modelform_factory(self):\n        # Test modelform_factory\n        Form = modelform_factory(MyModel)\n        self.assertTrue(issubclass(Form, ModelForm))\n\n    # Add more tests for modelformset_factory, inlineformset_factory, _get_foreign_key,\n    # ModelChoiceIteratorValue, ModelChoiceIterator, and InlineForeignKeyField\n\n    # Don't forget to test error scenarios as well\n\n    def test_invalid_choice(self):\n        # Test Invalid Choice Error\n        field = ModelChoiceField(queryset=MyModel.objects.all())\n        with self.assertRaises(ValidationError):\n            field.clean('invalid_choice')\n"], "sample_403": ["\nfrom django.db import connection\nfrom django.db.migrations.operations import models\nfrom django.db.migrations.state import ProjectState\nfrom django.db import models as db_models\nfrom django.test import TestCase\nfrom unittest.mock import MagicMock\n\nclass TestModelOperations(TestCase):\n    def setUp(self):\n        self.state = ProjectState()\n        self.operation = models.CreateModel(\"TestModel\", [(\"name\", db_models.CharField(max_length=50))])\n        self.operation.state_forwards(\"test_app\", self.state)\n\n    def test_create_model(self):\n        self.assertTrue(self.state.models[\"test_app\", \"testmodel\"])\n        self.assertEqual(self.state.models[\"test_app\", \"testmodel\"].name, \"TestModel\")\n\n    def test_delete_model(self):\n        delete_operation = models.DeleteModel(\"TestModel\")\n        delete_operation.state_forwards(\"test_app\", self.state)\n        self.assertFalse(self.state.models.get(\"test_app\", \"testmodel\"))\n\n    def test_rename_model(self):\n        rename_operation = models.RenameModel(\"TestModel\", \"NewTestModel\")\n        rename_operation.state_forwards(\"test_app\", self.state)\n        self.assertFalse(self.state.models.get(\"test_app\", \"testmodel\"))\n        self.assertTrue(self.state.models[\"test_app\", \"newtestmodel\"])\n\n    def test_alter_model_table(self):\n        alter_operation = models.AlterModelTable(\"TestModel\", \"new_table_name\")\n        self.assertEqual(self.state.models[\"test_app\", \"testmodel\"].options[\"db_table\"], \"new_table_name\")\n\n    def test_alter_unique_together(self):\n        alter_operation = models.AlterUniqueTogether(\"TestModel\", {(\"name\",)})\n        alter_operation.state_forwards(\"test_app\", self.state)\n        self.assertEqual(self.state.models[\"test_app\", \"testmodel\"].options[\"unique_together\"], {(\"name\",)})\n\n    def test_alter_index_together(self):\n        alter_operation = models.AlterIndexTogether(\"TestModel\", {(\"name\",)})\n        alter_operation.state_forwards(\"test_app\", self.state)\n        self.assertEqual(self.state.models[\"test_app\", \"testmodel\"].options[\"index_together\"], {(\"name\",)})\n\n    def test_alter_order_with_respect_to(self):\n        alter_operation = models.AlterOrderWithRespectTo(\"TestModel\", \"other_model\")\n        alter_operation.state_forwards(\"test_app\", self.state)\n        self.assertEqual(self.state.models[\"test_app\", \"testmodel\"].options[\"order_with_respect_to\"], \"other_model\")\n\n    def test_alter_model_options(self):\n        alter_operation = models.AlterModelOptions(\"TestModel\", {\"verbose_name\": \"New Test Model\"})\n        alter_operation.state_forwards(\"test_app\", self.state)\n        self.assertEqual(self.state.models[\"test_app\", \"testmodel\"].options[\"verbose_name\"], \"New Test Model\")\n\n    def test_alter_model_managers(self):\n        alter_operation = models.AlterModelManagers(\"TestModel\", [(\"custom_manager\", MagicMock())])\n        alter_operation.state_forwards(\"test_app\", self.state)\n        self.assertEqual(self.state.models[\"test_app\", \"testmodel\"].managers, [(\"custom_manager\", MagicMock())])\n\n    def test_add_index(self):\n        add_index_operation = models.AddIndex(\"TestModel\", db_models.Index(fields=[\"name\"], name=\"test_index\"))\n        add_index_operation.state_forwards(\"test_app\", self.state)\n        self.assertEqual(len(self.state.models[\"test_app\", \"testmodel\"].options[\"indexes\"]), 1)\n\n    def test_remove_index(self):\n        add_index_operation = models.AddIndex(\"TestModel\", db_models.Index(fields=[\"name\"], name=\"test_index\"))\n        add_index_operation.state_forwards(\"test_app\", self.state)\n        remove_index_operation = models.RemoveIndex(\"TestModel\", \"test_index\")\n        remove_index_operation.state_forwards(\"test_app\", self.state)\n        self.assertEqual(len(self.state.models[\"test_app\", \"testmodel\"].options[\"indexes\"]), 0)\n\n    def test_rename_index(self):\n        add_index_operation = models.AddIndex(\"TestModel\", db_models.Index(fields=[\"name\"], name=\"test_index\"))\n        add_index_operation.state_forwards(\"test_app\", self.state)\n        rename_index_operation = models.RenameIndex(\"TestModel\", \"new_test_index\", old_name=\"test_index\")\n        rename_index_operation.state_forwards(\"test_app\", self.state)\n        self.assertEqual(self.state.models[\"test_app\", \"testmodel\"].options[\"indexes\"][0].name, \"new_test_index\")\n\n    def test_add_constraint(self):\n        add_constraint_operation = models.AddConstraint(\"TestModel\", db_models.UniqueConstraint(fields=[\"name\"], name=\"test_constraint\"))\n        add_constraint_operation.state_forwards(\"test_app\", self.state)\n        self.assertEqual(len(self.state.models[\"test_app\", \"testmodel\"].options[\"constraints\"]), 1)\n\n    def test_remove_constraint(self):\n        add_constraint_operation = models.AddConstraint(\"TestModel\", db_models.UniqueConstraint(fields=[\"name\"], name=\"test_constraint\"))\n        add_constraint_operation.state_forwards(\"test_app\", self.state)\n        remove_constraint_operation = models.RemoveConstraint(\"TestModel\", \"test_constraint\")\n        remove_constraint_operation.state_forwards(\"test_app\", self.state)\n        self.assertEqual(len(self.state.models[\"test_app\", \"testmodel\"].options[\"constraints\"]), 0)\n"], "sample_1140": ["\nimport unittest\nfrom sympy import symbols, sqrt, sin, cos, pi, I, E, exp, log, pretty, Integer, Rational, symbols, S\nfrom sympy.printing.pretty import pretty_print, pprint\nfrom sympy.printing.pretty.pretty import PrettyPrinter\nfrom sympy.printing.str import sstr\nfrom sympy.matrices import Matrix, MatrixSymbol\nfrom sympy.functions.special.tensor_functions import KroneckerDelta\nfrom sympy.functions.special.gamma_functions import gamma\nfrom sympy.functions.special.zeta_functions import lerchphi\nfrom sympy.functions.special.beta_functions import beta\nfrom sympy.functions.special.delta_functions import DiracDelta\nfrom sympy.functions.special.error_functions import Chi\nfrom sympy.functions.elementary.piecewise import Piecewise\nfrom sympy.functions.elementary.miscellaneous import Lamda\nfrom sympy.functions.elementary.exponential import ExpBase\nfrom sympy.functions.elementary.trigonometric import airyai, airybi, airyaiprime, airybiprime, fresnels, fresnelc\nfrom sympy.functions.elementary.hyperbolic import LambertW\nfrom sympy.functions.elementary.functions import Heaviside\nfrom sympy.sets import FiniteSet, Range, Interval, AccumulationBounds, ImageSet, ConditionSet, ComplexRegion, ProductSet, Union, Intersection, SymmetricDifference, Complement\nfrom sympy.logic.boolalg import And, Or, Xor, Nand, Nor, Implies, Equivalent, Not\nfrom sympy.core.relational import Eq, Ne, Lt, Le, Gt, Ge, Equality\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Rational, Integer\nfrom sympy.core.add import Add\nfrom sympy.core.mul import Mul\nfrom sympy.core.power import Pow\nfrom sympy.core.function import Function, UndefinedFunction\nfrom sympy.core.containers import Tuple, Dict\nfrom sympy.core.evalf import N\nfrom sympy.core.relational import Relational\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Rational\nfrom sympy.core.expr import Expr\nfrom sympy.core.basic import Basic\nfrom sympy.core.exprtools import factor_terms\nfrom sympy.core.function import AppliedUndef\nfrom sympy.physics.units import Quantity\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Integer\nfrom sympy.core.power import Pow\nfrom sympy.core.expr import Expr\nfrom sympy.core.function import Function\nfrom sympy.core.numbers import Number\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Integer\nfrom sympy.core.relational import Equality\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Integer, Rational\nfrom sympy.core.function import Function\nfrom sympy.core.numbers import Number\nfrom sympy.core.relational import Relational\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Rational\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Integer\nfrom sympy.core.relational import Relational\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Integer\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Rational\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Integer\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Rational\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Integer\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Integer\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Integer\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import Integer\nfrom sympy.core.symbol import Symbol\nfrom sympy.core.numbers import"], "sample_685": ["\nimport pytest\nfrom _pytest.skipping import evaluate_skip_marks, evaluate_xfail_marks, pytest_runtest_setup\nfrom _pytest.nodes import Item\nfrom _pytest.mark import Mark\n\n@pytest.fixture\ndef mock_item():\n    class MockItem(Item):\n        def __init__(self, markers=[]):\n            self.markers = markers\n\n        def iter_markers(self, name):\n            return [mark for mark in self.markers if mark.name == name]\n\n    return MockItem\n\ndef test_evaluate_skip_marks_unconditional_skip(mock_item):\n    mark = Mark('skip', args=(), kwargs={})\n    mock_item.markers = [mark]\n    assert evaluate_skip_marks(mock_item).reason == \"unconditional skip\"\n\ndef test_evaluate_skip_marks_skipif_condition_true(mock_item):\n    mark = Mark('skipif', args=(), kwargs={'condition': 'True'})\n    mock_item.markers = [mark]\n    assert evaluate_skip_marks(mock_item).reason == \"condition: True\"\n\ndef test_evaluate_skip_marks_no_skip_marks(mock_item):\n    assert evaluate_skip_marks(mock_item) is None\n\ndef test_evaluate_xfail_marks_unconditional_xfail(mock_item):\n    mark = Mark('xfail', args=(), kwargs={})\n    mock_item.markers = [mark]\n    assert evaluate_xfail_marks(mock_item).reason == \"\"\n\ndef test_evaluate_xfail_marks_xfail_condition_true(mock_item):\n    mark = Mark('xfail', args=(), kwargs={'condition': 'True'})\n    mock_item.markers = [mark]\n    assert evaluate_xfail_marks(mock_item).reason == \"condition: True\"\n\ndef test_evaluate_xfail_marks_no_xfail_marks(mock_item):\n    assert evaluate_xfail_marks(mock_item) is None\n\ndef test_pytest_runtest_setup_skip(mock_item, mocker):\n    mark = Mark('skip', args=(), kwargs={})\n    mock_item.markers = [mark]\n    mock_skip = mocker.patch('_pytest.skipping.skip')\n    pytest_runtest_setup(mock_item)\n    mock_skip.assert_called_once()\n\ndef test_pytest_runtest_setup_no_skip(mock_item, mocker):\n    mock_skip = mocker.patch('_pytest.skipping.skip')\n    pytest_runtest_setup(mock_item)\n    mock_skip.assert_not_called()\n"], "sample_676": ["\nimport pytest\nimport _pytest.nodes\nfrom _pytest.mark.evaluate import MarkEvaluator, compiled_eval\n\nclass MockItem:\n    def __init__(self):\n        self.config = {}\n        self.marks = []\n\n    def iter_markers(self, name):\n        return [mark for mark in self.marks if mark.name == name]\n\n@pytest.fixture\ndef mock_item():\n    return MockItem()\n\ndef test_compiled_eval():\n    d = {'a': 5}\n    assert compiled_eval('a + 1', d) == 6\n\ndef test_MarkEvaluator_init(mock_item):\n    evaluator = MarkEvaluator(mock_item, 'test_mark')\n    assert evaluator.item == mock_item\n    assert evaluator._marks is None\n    assert evaluator._mark is None\n    assert evaluator._mark_name == 'test_mark'\n\ndef test_MarkEvaluator_bool_true(mock_item):\n    mock_item.marks.append(_pytest.nodes.Mark('test_mark', condition='True'))\n    evaluator = MarkEvaluator(mock_item, 'test_mark')\n    assert bool(evaluator) is True\n\ndef test_MarkEvaluator_bool_false(mock_item):\n    mock_item.marks.append(_pytest.nodes.Mark('test_mark', condition='False'))\n    evaluator = MarkEvaluator(mock_item, 'test_mark')\n    assert bool(evaluator) is False\n\ndef test_MarkEvaluator_wasvalid(mock_item):\n    evaluator = MarkEvaluator(mock_item, 'test_mark')\n    assert evaluator.wasvalid() is True\n    evaluator.exc = Exception()\n    assert evaluator.wasvalid() is False\n\ndef test_MarkEvaluator_istrue_true(mock_item):\n    mock_item.marks.append(_pytest.nodes.Mark('test_mark', condition='True'))\n    evaluator = MarkEvaluator(mock_item, 'test_mark')\n    assert evaluator.istrue() is True\n\ndef test_MarkEvaluator_istrue_false(mock_item):\n    mock_item.marks.append(_pytest.nodes.Mark('test_mark', condition='False'))\n    evaluator = MarkEvaluator(mock_item, 'test_mark')\n    assert evaluator.istrue() is False\n\ndef test_MarkEvaluator_get(mock_item):\n    mock_item.marks.append(_pytest.nodes.Mark('test_mark', attr1='value1'))\n    evaluator = MarkEvaluator(mock_item, 'test_mark')\n    evaluator._mark = mock_item.marks[0]\n    assert evaluator.get('attr1') == 'value1'\n    assert evaluator.get('attr2') is None\n\ndef test_MarkEvaluator_getexplanation(mock_item):\n    mock_item.marks.append(_pytest.nodes.Mark('test_mark', reason='Test reason'))\n    evaluator = MarkEvaluator(mock_item, 'test_mark')\n    evaluator._mark = mock_item.marks[0]\n    assert evaluator.getexplanation() == 'Test reason'\n"], "sample_344": ["\nfrom django.test import TestCase\nfrom django.db import models\nfrom django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation\nfrom django.contrib.contenttypes.models import ContentType\n\nclass DummyModel(models.Model):\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey('content_type', 'object_id')\n\nclass RelatedDummyModel(models.Model):\n    dummy = GenericRelation(DummyModel)\n\nclass GenericForeignKeyTests(TestCase):\n    def setUp(self):\n        self.dummy_model = DummyModel.objects.create(\n            content_type=ContentType.objects.get_for_model(RelatedDummyModel),\n            object_id=1\n        )\n\n    def test_get_content_type(self):\n        ct = self.dummy_model.content_object.get_content_type(obj=self.dummy_model)\n        self.assertEqual(ct.model_class(), RelatedDummyModel)\n\n    def test_get(self):\n        obj = self.dummy_model.content_object\n        self.assertIsInstance(obj, RelatedDummyModel)\n\n    def test_set(self):\n        related_obj = RelatedDummyModel.objects.create()\n        self.dummy_model.content_object = related_obj\n        self.dummy_model.save()\n        self.assertEqual(self.dummy_model.content_object, related_obj)\n\nclass GenericRelationTests(TestCase):\n    def setUp(self):\n        self.related_obj = RelatedDummyModel.objects.create()\n        self.dummy_model = DummyModel.objects.create(\n            content_type=ContentType.objects.get_for_model(RelatedDummyModel),\n            object_id=self.related_obj.id\n        )\n\n    def test_add(self):\n        self.related_obj.dummy.add(self.dummy_model)\n        self.assertEqual(self.related_obj.dummy.count(), 1)\n\n    def test_remove(self):\n        self.related_obj.dummy.add(self.dummy_model)\n        self.related_obj.dummy.remove(self.dummy_model)\n        self.assertEqual(self.related_obj.dummy.count(), 0)\n\n    def test_clear(self):\n        self.related_obj.dummy.add(self.dummy_model)\n        self.related_obj.dummy.clear()\n        self.assertEqual(self.related_obj.dummy.count(), 0)\n"], "sample_1060": ["\nimport unittest\nfrom sympy import Symbol, S, pi, sqrt, gamma, exp, Sum, RisingFactorial, binomial, factorial, diff, Dummy, conjugate, hyper, cos, jacobi, jacobi_normalized, gegenbauer, chebyshevt, chebyshevu, chebyshevt_root, chebyshevu_root, legendre, assoc_legendre, hermite, laguerre, assoc_laguerre\n\nclass TestPolynomials(unittest.TestCase):\n\n    def setUp(self):\n        self.x = Symbol('x')\n        self.n = Symbol('n', integer=True, nonnegative=True)\n        self.a = Symbol('a')\n        self.b = Symbol('b')\n\n    def test_jacobi(self):\n        self.assertEqual(jacobi(0, self.a, self.b, self.x), 1)\n        self.assertEqual(jacobi(1, self.a, self.b, self.x), (self.a - self.b + self.x*(self.a + self.b + 1))/2)\n        self.assertEqual(jacobi(self.n, self.a, self.a, self.x), RisingFactorial(self.a + 1, self.n)/RisingFactorial(2*self.a + 1, self.n) * gegenbauer(self.n, self.a + S.Half, self.x))\n        self.assertEqual(jacobi(self.n, 0, 0, self.x), legendre(self.n, self.x))\n        self.assertEqual(jacobi(self.n, S.Half, S.Half, self.x), RisingFactorial(3*S.Half, self.n)/factorial(self.n + 1) * chebyshevu(self.n, self.x))\n        self.assertEqual(jacobi(self.n, -S.Half, -S.Half, self.x), RisingFactorial(S.Half, self.n)/factorial(self.n) * chebyshevt(self.n, self.x))\n        self.assertEqual(jacobi(self.n, self.a, self.b, -self.x), (-1)**self.n * jacobi(self.n, self.b, self.a, self.x))\n        self.assertEqual(jacobi(self.n, self.a, self.b, 0), (2**(-self.n) * gamma(self.a + self.n + 1) / (gamma(self.a + 1) * factorial(self.n)) *\n                        hyper([-self.b - self.n, -self.n], [self.a + 1], -1)))\n        self.assertEqual(jacobi(self.n, self.a, self.b, 1), RisingFactorial(self.a + 1, self.n)/factorial(self.n))\n        self.assertEqual(conjugate(jacobi(self.n, self.a, self.b, self.x)), jacobi(self.n, self.a.conjugate(), self.b.conjugate(), self.x.conjugate()))\n\n    def test_jacobi_normalized(self):\n        nfactor = (S(2)**(self.a + self.b + 1) * (gamma(self.n + self.a + 1) * gamma(self.n + self.b + 1))\n                   / (2*self.n + self.a + self.b + 1) / (factorial(self.n) * gamma(self.n + self.a + self.b + 1)))\n        self.assertEqual(jacobi_normalized(self.n, self.a, self.b, self.x), jacobi(self.n, self.a, self.b, self.x) / sqrt(nfactor))\n\n    def test_gegenbauer(self):\n        self.assertEqual(gegenbauer(0, self.a, self.x), 1)\n        self.assertEqual(gegenbauer(1, self.a, self.x), 2*self.a*self.x)\n        self.assertEqual(gegenbauer(self.n, self.a, -self.x), (-1)**self.n * gegenbauer(self.n, self.a, self.x))\n        self.assertEqual(gegenbauer(self.n, self.a, 0), 2**self.n * sqrt(pi) * gamma(self.a + S.Half*self.n) /\n                        (gamma((1 - self.n)/2) * gamma(self.n + 1) * gamma(self.a)))\n        self.assertEqual(gegenbauer(self.n, self.a, 1), gamma(2*self.a + self.n) / (gamma(2*self.a) * gamma(self.n + 1)))\n        self.assertEqual(conjugate(gegenbauer(self.n, self.a, self.x)), gegenbauer(self.n, self.a.conjugate(), self.x.conjugate()))\n\n    def test_chebyshevt(self):\n        self.assertEqual(chebyshevt(0, self.x), 1)\n        self.assertEqual(chebyshevt(1, self.x), self.x)\n        self.assertEqual(chebyshevt(2, self.x), 2*self.x**2 - 1)\n        self.assertEqual(chebyshevt(self.n, -self.x), (-1)**self.n * chebyshevt(self.n, self.x))\n        self.assertEqual(chebyshevt(-self.n, self.x), chebyshevt(self.n, self.x))\n        self.assertEqual(chebyshevt(self.n, 0), cos(pi*self.n/2))\n        self.assertEqual(chebyshevt(self.n, -1), (-1)**self.n)\n        self.assertEqual(diff(chebyshevt(self.n, self.x), self.x), self.n * chebyshevu(self.n - 1, self.x))\n\n    def test_chebyshevu(self):\n        self.assertEqual(chebyshevu(0, self.x), 1)\n        self.assertEqual(chebyshevu(1, self.x), 2*self.x)\n        self.assertEqual(chebyshevu(2, self.x), 4*self.x**2 - 1)\n        self.assertEqual(chebyshevu(self.n, -self.x), (-1)**self.n * chebyshevu(self.n, self.x))\n        self.assertEqual(chebyshevu(-self.n, self.x), -chebyshevu(self.n - 2, self.x))\n        self.assertEqual(chebyshevu(self.n, 0), cos(pi*self.n/2))\n        self.assertEqual(chebyshevu(self.n, 1), self.n + 1)\n        self.assertEqual(diff(chebyshevu(self.n, self.x), self.x), (-self.x*chebyshevu(self.n, self.x) + (self.n + 1)*chebyshevt(self.n + 1, self.x))/(self.x**2 - 1))\n\n    def test_chebyshevt_root(self):\n        self.assertEqual(chebyshevt_root(3, 2), -sqrt(3)/2)\n        self.assertEqual(chebyshevt(3, chebyshevt_root(3, 2)), 0)\n\n    def test_chebyshevu_root(self):\n        self.assertEqual(chebyshevu_root(3, 2), -sqrt(2)/2)\n        self.assertEqual(chebyshevu(3, chebyshevu_root(3, 2)), 0)\n\n    def test_legendre(self):\n        self.assertEqual(legendre(0, self.x), 1)\n        self.assertEqual(legendre(1, self.x), self.x)\n        self.assertEqual(legendre(2, self.x), 3*self.x**2/2 - 1/2)\n        self.assertEqual(legendre(self.n, -self.x), (-1)**self.n * legendre(self.n, self.x))\n        self.assertEqual(legendre(-self.n, self.x), legendre(self.n - 1, self.x))\n        self.assertEqual(legendre(self.n, 0), sqrt(pi)/(gamma(S.Half - self.n/2)*gamma(S.One + self.n/2)))\n        self.assertEqual(legendre(self.n, 1), 1)\n        self.assertEqual(diff(legendre(self.n, self.x), self.x), self.n/(self.x**2 - 1)*(self.x*legendre(self.n, self.x) - legendre(self.n - 1, self.x)))\n\n    def test_assoc_legendre(self):\n        self.assertEqual(assoc_legendre(0, 0, self.x), 1)\n        self.assertEqual(assoc_legendre(1, 0, self.x), self.x)\n        self.assertEqual(assoc_legendre(1, 1, self.x), -sqrt(1 - self.x**2))\n        self.assertEqual(assoc_legendre(self.n, -self.n, self.x), (-1)**self.n * (factorial(self.n + self.n)/factorial(self.n - self.n)) * assoc_legendre(self.n, self.n, self.x))\n        self.assertEqual(assoc_legendre(self.n, 0, self.x), legendre(self.n, self.x))\n        self.assertEqual(assoc_legendre(self.n, self.n, self.x), (-1)**self.n * (1 - self.x**2)**(self.n/2) * diff(legendre(self.n, self.x), (self.x, self.n)))\n        self.assertEqual(conjugate(assoc_legendre(self.n, self.n, self.x)), assoc_legendre(self.n, self.n, self.x.conjugate()))\n\n    def test_hermite(self):\n        self.assertEqual(hermite(0, self.x), 1)\n        self.assertEqual(hermite(1, self.x), 2*self.x)\n        self.assertEqual(hermite(2, self.x), 4*self.x**2 - 2)\n        self.assertEqual(hermite(self.n, -self.x), (-1)**self.n * hermite(self.n, self.x))\n        self.assertEqual(hermite(self.n, 0), 2**self.n * sqrt(pi) / gamma((S.One - self.n)/2))\n        self.assertEqual(diff(hermite(self.n, self.x), self.x), 2*self.n*hermite(self.n - 1, self.x))\n\n    def test_laguerre(self):\n        self.assertEqual(laguerre(0, self.x), 1)\n        self.assertEqual(laguerre(1, self.x), 1 - self.x)\n        self.assertEqual(laguerre(2, self.x), self.x**2/2 - 2*self.x + 1)\n        self.assertEqual(laguerre(-self.n, self.x), exp(self.x)*laguerre(self.n - 1, -self.x))\n        self.assertEqual(laguerre(self.n, 0), 1)\n        self.assertEqual(diff(laguerre(self.n, self.x), self.x), -assoc_laguerre(self.n - 1, 1, self.x))\n\n    def test_assoc_laguerre(self):\n        self.assertEqual(assoc_laguerre(0, self.a, self.x), 1)\n        self.assertEqual(assoc_laguerre(1, self.a, self.x), self.a - self.x + 1)\n        self.assertEqual(assoc_laguerre(self.n, 0, self.x), laguerre(self.n, self.x))\n        self.assertEqual(assoc_laguerre(self.n, self.a, 0), binomial(self.n + self.a, self.a))\n        self.assertEqual(diff(assoc_laguerre(self.n, self.a, self.x), self.x), -assoc_laguerre(self.n - 1, self.a + 1, self.x))\n        self.assertEqual(diff(assoc_laguerre(self.n, self.a, self.x), self.a), Sum(assoc_laguerre(Dummy(\"k\"), self.a, self.x)/(self.n - self.a), (Dummy(\"k\"), 0, self.n - 1)))\n        self.assertEqual(conjugate(assoc_laguerre(self.n, self.a, self.x)), assoc_laguerre(self.n, self.a.conjugate(), self.x.conjugate()))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_142": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.core.exceptions import ImproperlyConfigured, ValidationError\nfrom django.forms import Form\nfrom django.forms.models import (\n    BaseModelForm, ModelForm, modelform_factory, BaseModelFormSet, modelformset_factory,\n    BaseInlineFormSet, inlineformset_factory, ModelChoiceField, ModelMultipleChoiceField\n)\nfrom django.db import models\n\nclass SampleModel(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n\nclass TestModelForm(unittest.TestCase):\n    def test_model_form_init(self):\n        data = {'name': 'Test Name', 'description': 'Test Description'}\n        form = ModelForm(data, model=SampleModel)\n        self.assertEqual(form.is_valid(), True)\n\n    def test_model_form_save(self):\n        data = {'name': 'Test Name', 'description': 'Test Description'}\n        form = ModelForm(data, model=SampleModel)\n        obj = form.save()\n        self.assertEqual(SampleModel.objects.count(), 1)\n        self.assertEqual(obj.name, 'Test Name')\n\n    def test_modelform_factory(self):\n        FormClass = modelform_factory(SampleModel, fields=('name',))\n        form = FormClass(data={'name': 'Test Name'})\n        self.assertEqual(form.is_valid(), True)\n\n    def test_base_model_form_set(self):\n        data = {\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '0',\n            'form-0-name': 'Test Name',\n            'form-0-description': 'Test Description',\n        }\n        formset = BaseModelFormSet(data, queryset=SampleModel.objects.none())\n        self.assertEqual(formset.is_valid(), True)\n        formset.save()\n        self.assertEqual(SampleModel.objects.count(), 1)\n\n    def test_modelformset_factory(self):\n        FormSetClass = modelformset_factory(SampleModel, fields=('name',))\n        formset = FormSetClass(data={\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '0',\n            'form-0-name': 'Test Name',\n        })\n        self.assertEqual(formset.is_valid(), True)\n        formset.save()\n        self.assertEqual(SampleModel.objects.count(), 1)\n\n    def test_base_inline_form_set(self):\n        parent_model = MagicMock()\n        data = {\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '0',\n            'form-0-name': 'Test Name',\n        }\n        formset = BaseInlineFormSet(data, instance=parent_model)\n        self.assertEqual(formset.is_valid(), True)\n        formset.save()\n        self.assertEqual(SampleModel.objects.count(), 1)\n\n    @patch('django.forms.models._get_foreign_key')\n    def test_inlineformset_factory(self, mock_get_foreign_key):\n        mock_get_foreign_key.return_value = MagicMock()\n        parent_model = MagicMock()\n        FormSetClass = inlineformset_factory(parent_model, SampleModel, fields=('name',))\n        formset = FormSetClass(data={\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '0',\n            'form-0-name': 'Test Name',\n        }, instance=parent_model)\n        self.assertEqual(formset.is_valid(), True)\n        formset.save()\n        self.assertEqual(SampleModel.objects.count(), 1)\n\nclass TestModelChoiceField(unittest.TestCase):\n    def test_model_choice_field_init(self):\n        queryset = SampleModel.objects.all()\n        field = ModelChoiceField(queryset)\n        self.assertEqual(field.queryset, queryset)\n\n    def test_model_choice_field_to_python(self):\n        queryset = SampleModel.objects.all()\n        field = ModelChoiceField(queryset)\n        obj = SampleModel.objects.create(name='Test Name', description='Test Description')\n        self.assertEqual(field.to_python(obj.pk), obj)\n\n    def test_model_multiple_choice_field_init(self):\n        queryset = SampleModel.objects.all()\n        field = ModelMultipleChoiceField(queryset)\n        self.assertEqual(field.queryset, queryset)\n\n    def test_model_multiple_choice_field_to_python(self):\n        queryset = SampleModel.objects.all()\n        field = ModelMultipleChoiceField(queryset)\n        obj = SampleModel.objects.create(name='Test Name', description='Test Description')\n        self.assertEqual(list(field.to_python([obj.pk])), [obj])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_125": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.core.exceptions import ValidationError\nfrom django.forms.fields import (\n    Field, CharField, IntegerField, FloatField, DecimalField, DateField, TimeField, DateTimeField,\n    DurationField, RegexField, EmailField, FileField, ImageField, URLField, BooleanField,\n    NullBooleanField, ChoiceField, MultipleChoiceField, ComboField, MultiValueField,\n    GenericIPAddressField, FilePathField, SplitDateTimeField, SlugField, UUIDField\n)\nfrom django.core.files.uploadedfile import SimpleUploadedFile\nimport datetime\nimport uuid\n\nclass TestFields(unittest.TestCase):\n\n    def test_field(self):\n        field = Field()\n        self.assertIsNone(field.clean(None))\n\n    def test_char_field(self):\n        field = CharField(max_length=5, min_length=2, required=True)\n        self.assertEqual(field.clean('test'), 'test')\n        self.assertRaises(ValidationError, field.clean, 'longstring')\n        self.assertRaises(ValidationError, field.clean, 'sh')\n        self.assertRaises(ValidationError, field.clean, '')\n\n    # Add more tests for other field types...\n\n    def test_integer_field(self):\n        field = IntegerField(max_value=10, min_value=1, required=True)\n        self.assertEqual(field.clean(5), 5)\n        self.assertRaises(ValidationError, field.clean, 0)\n        self.assertRaises(ValidationError, field.clean, 11)\n        self.assertRaises(ValidationError, field.clean, '')\n\n    def test_float_field(self):\n        field = FloatField(max_value=10.5, min_value=1.5, required=True)\n        self.assertEqual(field.clean(5.5), 5.5)\n        self.assertRaises(ValidationError, field.clean, 1.4)\n        self.assertRaises(ValidationError, field.clean, 10.6)\n        self.assertRaises(ValidationError, field.clean, '')\n\n    # Continue with more tests for the rest of the field types...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1008": ["\nimport unittest\nfrom sympy import symbols, sin, pi, Rational, ceiling, Abs, Matrix, MatrixSymbol, Piecewise, Function, IndexedBase, Idx, Eq\nfrom sympy.printing.octave import octave_code, OctaveCodePrinter\n\nclass TestOctaveCodePrinter(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y, self.tau = symbols(\"x, y, tau\")\n        self.A = MatrixSymbol('A', self.n, self.n)\n        self.n = symbols('n', integer=True, positive=True)\n        self.f = Function('f')\n        self.g = Function('g')\n        self.custom_functions = {\n            \"f\": \"existing_octave_fcn\",\n            \"g\": [(lambda x: x.is_Matrix, \"my_mat_fcn\"),\n                  (lambda x: not x.is_Matrix, \"my_fcn\")]\n        }\n        self.len_y = 5\n        self.y = IndexedBase('y', shape=(self.len_y,))\n        self.t = IndexedBase('t', shape=(self.len_y,))\n        self.Dy = IndexedBase('Dy', shape=(self.len_y-1,))\n        self.i = Idx('i', self.len_y-1)\n\n    def test_sin_series(self):\n        self.assertEqual(octave_code(sin(self.x).series(self.x).removeO()), 'x.^5/120 - x.^3/6 + x')\n\n    def test_rational_power(self):\n        self.assertEqual(octave_code((2*self.tau)**Rational(7, 2)), '8*sqrt(2)*tau.^(7/2)')\n\n    def test_symbol_multiplication(self):\n        self.assertEqual(octave_code(sin(pi*self.x*self.y), assign_to=\"s\"), 's = sin(pi*x.*y);')\n\n    def test_matrix_power(self):\n        self.assertEqual(octave_code(3*pi*self.A**3), '(3*pi)*A^3')\n\n    def test_matrix_assignment(self):\n        mat = Matrix([[self.x**2, sin(self.x), ceiling(self.x)]])\n        self.assertEqual(octave_code(mat, assign_to='A'), 'A = [x.^2 sin(x) ceil(x)];')\n\n    def test_piecewise(self):\n        pw = Piecewise((self.x + 1, self.x > 0), (self.x, True))\n        self.assertEqual(octave_code(pw, assign_to=self.tau), 'tau = ((x > 0).*(x + 1) + (~(x > 0)).*(x));')\n\n    def test_custom_functions(self):\n        mat = Matrix([[1, self.x]])\n        self.assertEqual(octave_code(self.f(self.x) + self.g(self.x) + self.g(mat), user_functions=self.custom_functions),\n                         'existing_octave_fcn(x) + my_fcn(x) + my_mat_fcn([1 x])')\n\n    def test_loop_expression(self):\n        e = Eq(self.Dy[self.i], (self.y[self.i+1]-self.y[self.i])/(self.t[self.i+1]-self.t[self.i]))\n        self.assertEqual(octave_code(e.rhs, assign_to=e.lhs, contract=False),\n                         'Dy(i) = (y(i + 1) - y(i))./(t(i + 1) - t(i));')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_186": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.contrib.admin import checks\nfrom django.contrib.admin.options import ModelAdmin, InlineModelAdmin\nfrom django.db import models\n\nclass TestModelAdminChecks(unittest.TestCase):\n    def setUp(self):\n        self.model_admin = ModelAdmin(Mock(), Mock())\n        self.checker = checks.ModelAdminChecks()\n\n    def test_check_save_as(self):\n        self.model_admin.save_as = True\n        self.assertEqual(self.checker._check_save_as(self.model_admin), [])\n\n        self.model_admin.save_as = \"not a boolean\"\n        self.assertEqual(self.checker._check_save_as(self.model_admin), [checks.Error(\"The value of 'save_as' must be a boolean.\", obj=self.model_admin.__class__, id='admin.E101')])\n\n    def test_check_save_on_top(self):\n        self.model_admin.save_on_top = False\n        self.assertEqual(self.checker._check_save_on_top(self.model_admin), [])\n\n        self.model_admin.save_on_top = \"not a boolean\"\n        self.assertEqual(self.checker._check_save_on_top(self.model_admin), [checks.Error(\"The value of 'save_on_top' must be a boolean.\", obj=self.model_admin.__class__, id='admin.E102')])\n\n    # Additional test methods for other functions...\n\nclass TestInlineModelAdminChecks(unittest.TestCase):\n    def setUp(self):\n        self.inline_model_admin = InlineModelAdmin(Mock(), Mock())\n        self.checker = checks.InlineModelAdminChecks()\n\n    def test_check_exclude_of_parent_model(self):\n        parent_model = Mock(spec=models.Model)\n        parent_model._meta.label = \"parent_model\"\n        fk = Mock(spec=models.ForeignKey)\n        fk.name = \"fk_name\"\n        self.inline_model_admin.exclude = [\"fk_name\"]\n        self.assertEqual(self.checker._check_exclude_of_parent_model(self.inline_model_admin, parent_model), [checks.Error(\"Cannot exclude the field 'fk_name', because it is the foreign key to the parent model 'parent_model'.\", obj=self.inline_model_admin.__class__, id='admin.E201')])\n\n    # Additional test methods for other functions...\n\n# Add more test classes for other functions as needed.\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_409": ["\nfrom unittest.mock import MagicMock, patch\nfrom django.template import TemplateSyntaxError, Variable, Token, TokenType\nfrom django.test import SimpleTestCase\nfrom django.templatetags.i18n import (\n    GetAvailableLanguagesNode,\n    GetLanguageInfoNode,\n    GetLanguageInfoListNode,\n    GetCurrentLanguageNode,\n    GetCurrentLanguageBidiNode,\n    TranslateNode,\n    BlockTranslateNode,\n    LanguageNode,\n    do_get_available_languages,\n    do_get_language_info,\n    do_get_language_info_list,\n    language_name,\n    language_name_translated,\n    language_name_local,\n    language_bidi,\n    do_get_current_language,\n    do_get_current_language_bidi,\n    do_translate,\n    do_block_translate,\n    language,\n)\n\nclass TestI18nTags(SimpleTestCase):\n    def test_get_available_languages_node(self):\n        node = GetAvailableLanguagesNode('languages')\n        context = {}\n        result = node.render(context)\n        self.assertEqual(result, '')\n        self.assertEqual(context['languages'], [('k', 'v') for k, v in settings.LANGUAGES])\n\n    def test_get_language_info_node(self):\n        mock_filter = MagicMock()\n        mock_filter.resolve.return_value = 'en'\n        node = GetLanguageInfoNode(mock_filter, 'lang_info')\n        context = {}\n        result = node.render(context)\n        self.assertEqual(result, '')\n        self.assertEqual(context['lang_info'], translation.get_language_info('en'))\n\n    def test_get_language_info_list_node(self):\n        mock_filter = MagicMock()\n        mock_filter.resolve.return_value = [('en', 'English')]\n        node = GetLanguageInfoListNode(mock_filter, 'lang_info_list')\n        context = {}\n        result = node.render(context)\n        self.assertEqual(result, '')\n        self.assertEqual(context['lang_info_list'], [translation.get_language_info('en')])\n\n    def test_get_current_language_node(self):\n        node = GetCurrentLanguageNode('current_language')\n        context = {}\n        result = node.render(context)\n        self.assertEqual(result, '')\n        self.assertEqual(context['current_language'], translation.get_language())\n\n    def test_get_current_language_bidi_node(self):\n        node = GetCurrentLanguageBidiNode('current_language_bidi')\n        context = {}\n        result = node.render(context)\n        self.assertEqual(result, '')\n        self.assertEqual(context['current_language_bidi'], translation.get_language_bidi())\n\n    def test_translate_node(self):\n        filter_expression = Variable('\"Hello, world!\"')\n        filter_expression.is_var = True\n        filter_expression.var = Variable(\"'Hello, world!'\")\n        node = TranslateNode(filter_expression, noop=False)\n        context = {}\n        result = node.render(context)\n        self.assertEqual(result, 'Hello, world!')\n\n    def test_block_translate_node(self):\n        token1 = Token(TokenType.TEXT, 'Hello, ')\n        token2 = Token(TokenType.VAR, 'name')\n        token3 = Token(TokenType.TEXT, '!')\n        extra_context = {}\n        singular = [token1, token2, token3]\n        plural = []\n        countervar = None\n        counter = None\n        message_context = None\n        node = BlockTranslateNode(extra_context, singular, plural, countervar, counter, message_context)\n        context = {'name': 'John'}\n        result = node.render(context)\n        self.assertEqual(result, 'Hello, John!')\n\n    def test_language_node(self):\n        nodelist = MagicMock()\n        mock_language = MagicMock()\n        mock_language.resolve.return_value = 'en'\n        node = LanguageNode(nodelist, mock_language)\n        context = {}\n        result = node.render(context)\n        self.assertEqual(result, nodelist.render(context))\n\n    def test_do_get_available_languages(self):\n        parser = MagicMock()\n        token = MagicMock()\n        token.contents = 'get_available_languages as languages'\n        node = do_get_available_languages(parser, token)\n        self.assertIsInstance(node, GetAvailableLanguagesNode)\n\n    def test_do_get_language_info(self):\n        parser = MagicMock()\n        token = MagicMock()\n        token.split_contents.return_value = ['get_language_info', 'for', 'en', 'as', 'lang_info']\n        node = do_get_language_info(parser, token)\n        self.assertIsInstance(node, GetLanguageInfoNode)\n\n    def test_do_get_language_info_list(self):\n        parser = MagicMock()\n        token = MagicMock()\n        token.split_contents.return_value = ['get_language_info_list', 'for', 'LANGUAGES', 'as', 'lang_info_list']\n        node = do_get_language_info_list(parser, token)\n        self.assertIsInstance(node, GetLanguageInfoListNode)\n\n    def test_do_get_current_language(self):\n        parser = MagicMock()\n        token = MagicMock()\n        token.contents = 'get_current_language as current_language'\n        node = do_get_current_language(parser, token)\n        self.assertIsInstance(node, GetCurrentLanguageNode)\n\n    def test_do_get_current_language_bidi(self):\n        parser = MagicMock()\n        token = MagicMock()\n        token.contents = 'get_current_language_bidi as current_language_bidi'\n        node = do_get_current_language_bidi(parser, token)\n        self.assertIsInstance(node, GetCurrentLanguageBidiNode)\n\n    def test_do_translate(self):\n        parser = MagicMock()\n        token = MagicMock()\n        token.split_contents.return_value = ['translate', '\"Hello, world!\"']\n        node = do_translate(parser, token)\n        self.assertIsInstance(node, TranslateNode)\n\n    def test_do_block_translate(self):\n        parser = MagicMock()\n        token = MagicMock()\n        token.split_contents.return_value = ['blocktranslate', 'with', 'name=John', 'trimmed']\n        parser.next_token.side_effect = [\n            Token(TokenType.TEXT, 'Hello, '),\n            Token(TokenType.VAR, 'name'),\n            Token(TokenType.TEXT, '!'),\n            Token(TokenType.BLOCK, 'endblocktranslate'),\n        ]\n        node = do_block_translate(parser, token)\n        self.assertIsInstance(node, BlockTranslateNode)\n\n    def test_language(self):\n        parser = MagicMock()\n        token = MagicMock()\n        token.split_contents.return_value = ['language', 'en']\n        nodelist = parser.parse.return_value\n        node = language(parser, token)\n        self.assertIsInstance(node, LanguageNode)\n\n    def test_language_name_filter(self):\n        result = language_name('en')\n        self.assertEqual(result, translation.get_language_info('en')['name'])\n\n    def test_language_name_translated_filter(self):\n        result = language_name_translated('en')\n        self.assertEqual(result, translation.gettext(translation.get_language_info('en')['name']))\n\n    def test_language_name_local_filter(self):\n        result = language_name_local('en')\n        self.assertEqual(result, translation.get_language_info('en')['name_local'])\n\n    def test_language_bidi_filter(self):\n        result = language_bidi('en')\n        self.assertEqual(result, translation.get_language_info('en')['bidi'])\n"], "sample_710": ["\nimport pytest\nimport os\nfrom pathlib import Path\nfrom typing import List, Tuple, Union\nfrom _pytest.config import Config, ExitCode\nfrom _pytest.pytester import Pytester, RunResult\n\n@pytest.fixture\ndef pytester(request, tmp_path_factory):\n    return Pytester(request, tmp_path_factory, _ispytest=True)\n\ndef test_makefile(pytester: Pytester):\n    p = pytester.makefile(\".txt\", \"line1\", \"line2\")\n    assert p.exists()\n    assert p.read_text() == \"line1\\nline2\"\n\ndef test_makepyfile(pytester: Pytester):\n    p = pytester.makepyfile(\"def test_func(): pass\")\n    assert p.exists()\n    assert p.read_text() == \"def test_func(): pass\"\n\ndef test_syspathinsert(pytester: Pytester):\n    pytester.syspathinsert()\n    assert str(pytester.path) in os.sys.path\n\ndef test_mkdir(pytester: Pytester):\n    p = pytester.mkdir(\"new_dir\")\n    assert p.exists()\n    assert p.is_dir()\n\ndef test_mkpydir(pytester: Pytester):\n    p = pytester.mkpydir(\"new_pkg\")\n    assert p.exists()\n    assert p.is_dir()\n    assert p.joinpath(\"__init__.py\").exists()\n\ndef test_parseconfig(pytester: Pytester):\n    config = pytester.parseconfig(\"--verbose\")\n    assert isinstance(config, Config)\n    assert config.option.verbose == 1\n\ndef test_runpytest_inprocess(pytester: Pytester):\n    result = pytester.runpytest_inprocess(\"--version\")\n    assert isinstance(result, RunResult)\n    assert result.ret == ExitCode.OK\n    assert \"pytest\" in result.outlines[0]\n\n# Add more tests as needed\n"], "sample_362": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.questioner import MigrationQuestioner\nfrom django.db.migrations.state import ProjectState\nfrom django.db.migrations.operations import CreateModel, DeleteModel, AddField, RemoveField\n\nclass TestMigrationAutodetector(unittest.TestCase):\n    def setUp(self):\n        self.questioner = MigrationQuestioner()\n        self.from_state = ProjectState()\n        self.to_state = ProjectState()\n        self.detector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n\n    def test_changes_no_apps(self):\n        changes = self.detector.changes({}, [], None)\n        self.assertEqual(changes, {})\n\n    def test_changes_with_apps(self):\n        graph = {'app1': ['0001_initial']}\n        self.to_state.add_model('app1', 'Model1')\n        changes = self.detector.changes(graph, ['app1'], None)\n        self.assertIn('app1', changes)\n        self.assertEqual(len(changes['app1']), 1)\n        self.assertIsInstance(changes['app1'][0].operations[0], CreateModel)\n\n    def test_generate_created_models(self):\n        self.to_state.add_model('app1', 'Model1')\n        self.detector.generate_created_models()\n        self.assertIn(('app1', 'Model1', None, True), self.detector.generated_operations['app1'][0]._auto_deps)\n\n    def test_generate_deleted_models(self):\n        self.from_state.add_model('app1', 'Model1')\n        self.detector.generate_deleted_models()\n        self.assertIn(('app1', 'Model1', None, False), self.detector.generated_operations['app1'][0]._auto_deps)\n\n    def test_generate_added_fields(self):\n        self.to_state.add_model('app1', 'Model1')\n        self.to_state.models['app1', 'Model1'].add_field('app1', 'Model1', 'field1', 'django.db.models.CharField')\n        self.detector.generate_added_fields()\n        self.assertIsInstance(self.detector.generated_operations['app1'][0], AddField)\n\n    def test_generate_removed_fields(self):\n        self.from_state.add_model('app1', 'Model1')\n        self.from_state.models['app1', 'Model1'].add_field('app1', 'Model1', 'field1', 'django.db.models.CharField')\n        self.detector.generate_removed_fields()\n        self.assertIsInstance(self.detector.generated_operations['app1'][0], RemoveField)\n\n    # Add more tests as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_661": ["\nimport pytest\nimport sys\nimport traceback\nfrom _pytest._code.code import Code, Frame, TracebackEntry, Traceback, ExceptionInfo, FormattedExcinfo\n\ndef test_Code():\n    def func():\n        x = 1\n        return x\n    code = Code(func.__code__)\n    assert code.filename == func.__code__.co_filename\n    assert code.firstlineno == func.__code__.co_firstlineno - 1\n    assert code.name == func.__code__.co_name\n    assert code.path == py.path.local(func.__code__.co_filename)\n\ndef test_Frame():\n    def func(x):\n        y = x + 1\n        return y\n    frame = Frame(func(2).f_back)\n    assert frame.lineno == func(2).f_back.f_lineno - 1\n    assert frame.f_globals == func(2).f_back.f_globals\n    assert frame.f_locals == func(2).f_back.f_locals\n    assert frame.raw == func(2).f_back\n    assert frame.code.raw == func.__code__\n\ndef test_TracebackEntry():\n    def func():\n        raise ValueError(\"Test error\")\n    try:\n        func()\n    except ValueError:\n        type, value, tb = sys.exc_info()\n        entry = TracebackEntry(tb)\n        assert entry._rawentry == tb\n        assert entry.frame.code.raw == func.__code__\n        assert entry.relline == entry.lineno - entry.frame.code.firstlineno\n\ndef test_Traceback():\n    def func():\n        raise ValueError(\"Test error\")\n    try:\n        func()\n    except ValueError:\n        type, value, tb = sys.exc_info()\n        traceback = Traceback(tb)\n        assert len(traceback) == 1\n        assert traceback[0]._rawentry == tb\n\ndef test_ExceptionInfo():\n    def func():\n        raise ValueError(\"Test error\")\n    try:\n        func()\n    except ValueError:\n        excinfo = ExceptionInfo.from_current()\n        assert excinfo.type == ValueError\n        assert str(excinfo.value) == \"Test error\"\n        assert excinfo.tb is not None\n\ndef test_FormattedExcinfo():\n    def func():\n        raise ValueError(\"Test error\")\n    try:\n        func()\n    except ValueError:\n        excinfo = ExceptionInfo.from_current()\n        formatted = FormattedExcinfo()\n        repr = formatted.repr_excinfo(excinfo)\n        assert isinstance(repr, str)\n"], "sample_76": ["\nimport unittest\nfrom unittest.mock import patch, call\nfrom django.db.backends.postgresql.client import DatabaseClient\n\nclass TestDatabaseClient(unittest.TestCase):\n    @patch('subprocess.run')\n    @patch('os.environ')\n    @patch('signal.getsignal')\n    @patch('signal.signal')\n    def test_runshell_db(self, mock_signal, mock_getsignal, mock_environ, mock_run):\n        conn_params = {\n            'host': 'localhost',\n            'port': 5432,\n            'database': 'test_db',\n            'user': 'test_user',\n            'password': 'test_password',\n            'sslmode': 'require',\n            'sslrootcert': 'root.crt',\n            'sslcert': 'client.crt',\n            'sslkey': 'client.key'\n        }\n        mock_getsignal.return_value = 'SIGINT_handler'\n        mock_environ.copy.return_value = {}\n\n        DatabaseClient.runshell_db(conn_params)\n\n        expected_args = ['psql', '-U', 'test_user', '-h', 'localhost', '-p', '5432', 'test_db']\n        expected_env = {\n            'PGPASSWORD': 'test_password',\n            'PGSSLMODE': 'require',\n            'PGSSLROOTCERT': 'root.crt',\n            'PGSSLCERT': 'client.crt',\n            'PGSSLKEY': 'client.key'\n        }\n\n        mock_run.assert_called_once_with(expected_args, check=True, env=expected_env)\n        mock_signal.assert_has_calls([\n            call(signal.SIGINT, signal.SIG_IGN),\n            call(signal.SIGINT, 'SIGINT_handler')\n        ])\n\n    @patch('django.db.backends.postgresql.client.DatabaseClient.runshell_db')\n    def test_runshell(self, mock_runshell_db):\n        client = DatabaseClient('connection')\n        client.connection = unittest.mock.Mock()\n        client.connection.get_connection_params.return_value = {'database': 'test_db'}\n\n        client.runshell()\n\n        mock_runshell_db.assert_called_once_with({'database': 'test_db'})\n"], "sample_1180": ["\nimport unittest\nfrom sympy.geometry.point import Point, Point2D, Point3D\nfrom sympy.core.numbers import Rational\nfrom sympy.core.symbol import Symbol\nfrom sympy.functions.elementary.miscellaneous import sqrt\nfrom sympy.testing.pytest import raises\n\nclass TestPoint(unittest.TestCase):\n    def setUp(self):\n        self.p1 = Point(1, 2, 3)\n        self.p2 = Point(4, 5, 6)\n        self.p3 = Point(Rational(1, 2), Rational(3, 2))\n\n    def test_point_creation(self):\n        self.assertEqual(self.p1, Point(1, 2, 3))\n        self.assertEqual(self.p3, Point(Rational(1, 2), Rational(3, 2)))\n\n    def test_point_evaluation(self):\n        self.assertEqual(Point(0.5, 0.25), Point(Rational(1, 2), Rational(1, 4)))\n        self.assertEqual(Point(0.5, 0.25, evaluate=False), Point(0.5, 0.25))\n\n    def test_point_addition(self):\n        self.assertEqual(self.p1 + self.p2, Point(5, 7, 9))\n        self.assertEqual(self.p1 + (0.1, 0.2, 0.3), Point(1.1, 2.2, 3.3))\n\n    def test_point_subtraction(self):\n        self.assertEqual(self.p1 - self.p2, Point(-3, -3, -3))\n\n    def test_point_multiplication(self):\n        self.assertEqual(self.p1 * 2, Point(2, 4, 6))\n        self.assertEqual(2 * self.p1, Point(2, 4, 6))\n\n    def test_point_division(self):\n        self.assertEqual(self.p1 / 2, Point(Rational(1, 2), 1, Rational(3, 2)))\n\n    def test_point_negation(self):\n        self.assertEqual(-self.p1, Point(-1, -2, -3))\n\n    def test_point_distance(self):\n        self.assertEqual(self.p1.distance(self.p2), sqrt(27))\n\n    def test_point_midpoint(self):\n        self.assertEqual(self.p1.midpoint(self.p2), Point(Rational(5, 2), Rational(7, 2), Rational(9, 2)))\n\n    def test_point2D_creation(self):\n        self.assertEqual(Point2D(1, 2), Point2D(1, 2))\n\n    def test_point3D_creation(self):\n        self.assertEqual(Point3D(1, 2, 3), Point3D(1, 2, 3))\n\n    def test_point_invalid_input(self):\n        with raises(TypeError):\n            Point(\"invalid\")\n        with raises(ValueError):\n            Point(1, 2, dim=1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_385": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.contrib.admin.widgets import (\n    FilteredSelectMultiple, AdminDateWidget, AdminTimeWidget, AdminSplitDateTime,\n    AdminRadioSelect, AdminFileWidget, ForeignKeyRawIdWidget, ManyToManyRawIdWidget,\n    RelatedFieldWidgetWrapper, AdminTextareaWidget, AdminTextInputWidget,\n    AdminEmailInputWidget, AdminURLFieldWidget, AdminIntegerFieldWidget,\n    AdminBigIntegerFieldWidget, AdminUUIDInputWidget, AutocompleteSelect,\n    AutocompleteSelectMultiple\n)\nfrom django import forms\nfrom django.core.validators import URLValidator\n\nclass TestWidgets(unittest.TestCase):\n    @patch('django.contrib.admin.widgets.reverse')\n    @patch('django.contrib.admin.widgets.urlencode')\n    def test_foreign_key_raw_id_widget(self, mock_urlencode, mock_reverse):\n        mock_reverse.return_value = '/admin/app/model/'\n        mock_urlencode.return_value = 'query_params'\n        rel = MagicMock()\n        admin_site = MagicMock()\n        widget = ForeignKeyRawIdWidget(rel, admin_site)\n        context = widget.get_context('name', 1, {})\n        self.assertEqual(context['related_url'], '/admin/app/model/?query_params')\n\n    # More tests for other widgets can be added in a similar manner\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_631": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom pylint.checkers import variables\n\nclass TestVariablesChecker(unittest.TestCase):\n    def setUp(self):\n        self.checker = variables.VariablesChecker()\n\n    @patch('astroid.nodes.scoped_nodes.Module.getattr')\n    def test_visit_import(self, mock_getattr):\n        mock_node = Mock()\n        mock_node.names = [('os', None)]\n        mock_module = Mock()\n        mock_module.name = 'os'\n        mock_getattr.return_value = [mock_module], None, None\n\n        self.checker.visit_import(mock_node)\n\n        mock_getattr.assert_called_once_with('os')\n\n    @patch('astroid.nodes.scoped_nodes.Module.getattr')\n    def test_visit_importfrom(self, mock_getattr):\n        mock_node = Mock()\n        mock_node.modname = 'os'\n        mock_node.names = [('path', None)]\n        mock_module = Mock()\n        mock_module.name = 'os.path'\n        mock_getattr.return_value = [mock_module], None, None\n\n        self.checker.visit_importfrom(mock_node)\n\n        mock_getattr.assert_called_once_with('os')\n\n    def test_visit_assign(self):\n        mock_node = Mock()\n        mock_node.targets = [Mock()]\n        mock_node.targets[0].itered.return_value = [Mock(), Mock()]\n        mock_node.value = Mock()\n        mock_node.value.infer.return_value = [Mock()]\n\n        self.checker.visit_assign(mock_node)\n\n        mock_node.value.infer.assert_called_once()\n\n    # Add more test methods for other functions as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_920": ["\nimport unittest\nfrom sphinx.domains.cpp import DefinitionParser, ASTDeclaration, ASTIdentifier, ASTNestedName, ASTNestedNameElement, ASTDeclSpecs, ASTDeclSpecsSimple, ASTType, ASTDeclaratorNameParamQual, ASTDeclaratorPtr, ASTDeclarator\n\nclass TestDefinitionParser(unittest.TestCase):\n\n    def test_parse_identifier(self):\n        parser = DefinitionParser(\"identifier\", location=None, config=None)\n        result = parser._parse_identifier()\n        self.assertIsInstance(result, ASTIdentifier)\n        self.assertEqual(result.name, \"identifier\")\n\n    def test_parse_nested_name(self):\n        parser = DefinitionParser(\"namespace::identifier\", location=None, config=None)\n        result = parser._parse_nested_name()\n        self.assertIsInstance(result, ASTNestedName)\n        self.assertEqual(len(result.names), 2)\n        self.assertEqual(result.names[0].identOrOp.name, \"namespace\")\n        self.assertEqual(result.names[1].identOrOp.name, \"identifier\")\n\n    def test_parse_decl_specs(self):\n        parser = DefinitionParser(\"int\", location=None, config=None)\n        result = parser._parse_decl_specs(outer=\"type\")\n        self.assertIsInstance(result, ASTDeclSpecs)\n        self.assertIsInstance(result.leftSpecs, ASTDeclSpecsSimple)\n        self.assertIsNone(result.rightSpecs)\n\n    def test_parse_type(self):\n        parser = DefinitionParser(\"int*\", location=None, config=None)\n        result = parser._parse_type(named=False, outer=\"type\")\n        self.assertIsInstance(result, ASTType)\n        self.assertIsInstance(result.declSpecs, ASTDeclSpecs)\n        self.assertIsInstance(result.declarator, ASTDeclaratorPtr)\n\n    def test_parse_declarator_name_suffix(self):\n        parser = DefinitionParser(\"identifier\", location=None, config=None)\n        result = parser._parse_declarator_name_suffix(named=True, paramMode=\"type\", typed=True)\n        self.assertIsInstance(result, ASTDeclaratorNameParamQual)\n        self.assertIsInstance(result.declId, ASTNestedName)\n\n    def test_parse_declaration(self):\n        parser = DefinitionParser(\"int identifier;\", location=None, config=None)\n        result = parser.parse_declaration(objectType=\"member\", directiveType=\"var\")\n        self.assertIsInstance(result, ASTDeclaration)\n        self.assertEqual(result.objectType, \"member\")\n        self.assertEqual(result.directiveType, \"var\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_966": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom docutils import nodes\nfrom sphinx.testing.util import SphinxTestApp\nfrom sphinx.ext.mathjax import (\n    html_visit_math, html_visit_displaymath, install_mathjax, setup, MATHJAX_URL\n)\n\nclass TestMathJaxExtension(unittest.TestCase):\n    def setUp(self):\n        self.app = SphinxTestApp(srcdir='.')\n        self.app.builder.format = 'html'\n        self.app.builder.math_renderer_name = 'mathjax'\n        self.app.config.mathjax_path = MATHJAX_URL\n        self.translator = MagicMock()\n        self.node = MagicMock()\n\n    @patch('sphinx.ext.mathjax.logger.warning')\n    def test_install_mathjax_warning(self, mock_warning):\n        self.app.config.mathjax_config = {'some': 'config'}\n        install_mathjax(self.app, 'test', 'test', {}, None)\n        mock_warning.assert_called_once()\n\n    def test_setup(self):\n        result = setup(self.app)\n        self.assertEqual(result['version'], 'sphinx.__display_version__')\n        self.assertTrue(result['parallel_read_safe'])\n\n    def test_html_visit_math(self):\n        self.node.astext.return_value = 'test'\n        html_visit_math(self.translator, self.node)\n        self.translator.body.append.assert_any_call(self.translator.starttag(self.node, 'span', '', CLASS='math notranslate nohighlight'))\n\n    def test_html_visit_displaymath(self):\n        self.node.__getitem__.side_effect = lambda key: {'nowrap': False, 'number': True}[key]\n        self.node.astext.return_value = 'test'\n        html_visit_displaymath(self.translator, self.node)\n        self.translator.body.append.assert_any_call(self.translator.starttag(self.node, 'div', CLASS='math notranslate nohighlight'))\n"], "sample_318": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.urls.resolvers import (\n    ResolverMatch,\n    get_resolver,\n    _get_cached_resolver,\n    get_ns_resolver,\n    LocaleRegexDescriptor,\n    RegexPattern,\n    _route_to_regex,\n    RoutePattern,\n    LocalePrefixPattern,\n    URLPattern,\n    URLResolver\n)\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.urls.converters import get_converter\nfrom django.utils.translation import get_language\nfrom django.conf import settings\n\nclass TestURLResolvers(unittest.TestCase):\n    def setUp(self):\n        self.mock_settings = {\n            'ROOT_URLCONF': 'test_urls',\n            'APPEND_SLASH': True,\n            'LANGUAGE_CODE': 'en-us'\n        }\n\n    @patch('django.urls.resolvers.settings', new_callable=Mock(return_value=mock_settings))\n    def test_get_resolver(self, mock_settings):\n        resolver = get_resolver()\n        self.assertIsInstance(resolver, URLResolver)\n\n    # Add more tests for other functions and classes in the resolvers.py file\n\n    def test_regex_pattern(self):\n        pattern = RegexPattern('^test/(?P<pk>[0-9]+)/$')\n        match = pattern.match('/test/123/')\n        self.assertEqual(match, ('', (), {'pk': '123'}))\n\n    # Add more tests for other functions and classes in the resolvers.py file\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_555": ["\nimport unittest\nimport numpy as np\nfrom matplotlib import patches\n\nclass TestPatches(unittest.TestCase):\n    def test_annulus(self):\n        annulus = patches.Annulus((0, 0), 2, 1)\n        self.assertIsInstance(annulus, patches.Annulus)\n        self.assertEqual(annulus.center, (0, 0))\n        self.assertEqual(annulus.width, 2)\n        self.assertEqual(annulus.height, 2)\n        self.assertEqual(annulus.angle, 0)\n\n    def test_ellipse(self):\n        ellipse = patches.Ellipse((0, 0), 2, 3)\n        self.assertIsInstance(ellipse, patches.Ellipse)\n        self.assertEqual(ellipse.center, (0, 0))\n        self.assertEqual(ellipse.width, 2)\n        self.assertEqual(ellipse.height, 3)\n        self.assertEqual(ellipse.angle, 0)\n\n    def test_patch(self):\n        patch = patches.Patch(facecolor='red', edgecolor='blue')\n        self.assertIsInstance(patch, patches.Patch)\n        self.assertEqual(patch.get_facecolor(), 'red')\n        self.assertEqual(patch.get_edgecolor(), 'blue')\n\n    def test_polygon(self):\n        vertices = np.array([[0, 0], [1, 0], [1, 1], [0, 1]])\n        polygon = patches.Polygon(vertices)\n        self.assertIsInstance(polygon, patches.Polygon)\n        np.testing.assert_array_equal(polygon.get_path().vertices, vertices)\n\n    def test_rectangle(self):\n        rectangle = patches.Rectangle((0, 0), 2, 3)\n        self.assertIsInstance(rectangle, patches.Rectangle)\n        self.assertEqual(rectangle.xy, (0, 0))\n        self.assertEqual(rectangle.get_width(), 2)\n        self.assertEqual(rectangle.get_height(), 3)\n\n    def test_fancyarrowpatch(self):\n        arrow = patches.FancyArrowPatch((0, 0), (1, 1), arrowstyle='->')\n        self.assertIsInstance(arrow, patches.FancyArrowPatch)\n        self.assertEqual(arrow._posA_posB, [(0, 0), (1, 1)])\n        self.assertEqual(arrow.get_arrowstyle(), '->')\n\n    def test_fancyarrow(self):\n        arrow = patches.FancyArrow(0, 0, 1, 1, width=0.2, head_width=0.4)\n        self.assertIsInstance(arrow, patches.FancyArrow)\n        self.assertEqual(arrow._posA_posB, [(0, 0), (1, 1)])\n        self.assertEqual(arrow.width, 0.2)\n        self.assertEqual(arrow.head_width, 0.4)\n\n    def test_boxstyle(self):\n        boxstyle = patches.BoxStyle.Round(pad=0.5)\n        self.assertIsInstance(boxstyle, patches.BoxStyle.Round)\n        self.assertEqual(boxstyle.pad, 0.5)\n\n    def test_arc(self):\n        arc = patches.Arc((0, 0), 2, 2, angle=45, theta1=0, theta2=90)\n        self.assertIsInstance(arc, patches.Arc)\n        self.assertEqual(arc.center, (0, 0))\n        self.assertEqual(arc.width, 2)\n        self.assertEqual(arc.height, "], "sample_975": ["\nimport unittest\nfrom sympy import symbols, Eq, solve_undetermined_coeffs, solve_linear_system, Matrix, solve_linear, solve, nsimplify, nsolve, sin, cos, asin, acos, S, pi, I, exp, log, CRootOf, nfloat, nroots, limit, re, im, arg, atan, atan2, sqrt, Rational, root, real_roots, Dummy, expand, factor_terms, degree, ilcm, Add, Mul, Pow, exp, log, Lambda, Piecewise, zeros, inv_quick, det_perm, det_minor, det_quick, findroot, lambdify, atan, cosh, lambdify, cos, sin, sqrt, solve, sqrt_depth\nfrom sympy.solvers.solvers import _tsolve, _invert, unrad, _solve, _solve_system, minsolve_linear_system, solve_linear_system_LU, inv_quick, det_perm, det_minor, det_quick, nsolve\n\nclass TestSolvers(unittest.TestCase):\n\n    def test_tsolve(self):\n        x = symbols('x')\n        self.assertEqual(_tsolve(3**(2*x + 5) - 4, x), [-5/2 + log(2)/log(3), (-5*log(3)/2 + log(2) + I*pi)/log(3)])\n        self.assertEqual(_tsolve(log(x) + 2*x, x), [LambertW(2)/2])\n\n    def test_invert(self):\n        x, y = symbols('x y')\n        self.assertEqual(_invert(x - 3), (3, x))\n        self.assertEqual(_invert(3), (3, 0))\n        self.assertEqual(_invert(2*cos(x) - 1), (1/2, cos(x)))\n        self.assertEqual(_invert(sqrt(x) - 3), (3, sqrt(x)))\n        self.assertEqual(_invert(sqrt(x) + y, x), (-y, sqrt(x)))\n        self.assertEqual(_invert(sqrt(x) + y, y), (-sqrt(x), y))\n        self.assertEqual(_invert(sqrt(x) + y, x, y), (0, sqrt(x) + y))\n\n    def test_unrad(self):\n        x = symbols('x')\n        self.assertEqual(unrad(sqrt(x)*x**Rational(1, 3) + 2), (x**5 - 64, []))\n        self.assertEqual(unrad(sqrt(x) + root(x + 1, 3)), (x**3 - x**2 - 2*x - 1, []))\n        eq = sqrt(x) + root(x, 3) - 2\n        self.assertEqual(unrad(eq), (_p**3 + _p**2 - 2, [_p, _p**6 - x]))\n\n    def test_solve(self):\n        x = symbols('x')\n        self.assertEqual(solve(x**2 - 1), [1, -1])\n\n    def test_solve_linear(self):\n        x, y, z = symbols('x y z')\n        self.assertEqual(solve_linear(x + y**2), (x, -y**2))\n        self.assertEqual(solve_linear(1/x - y**2), (x, y**(-2)))\n\n    def test_solve_undetermined_coeffs(self):\n        a, b, c, x = symbols('a b c x')\n        self.assertEqual(solve_undetermined_coeffs(Eq(2*a*x + a+b, x), [a, b], x), {a: 1/2, b: -1/2})\n\n    def test_solve_linear_system(self):\n        x, y, z = symbols('x y z')\n        self.assertEqual(solve_linear_system(Matrix([[1, 2, 0, 1], [3"], "sample_194": ["\nfrom unittest import TestCase\nfrom unittest.mock import Mock\nfrom django.db.models.constraints import CheckConstraint, Deferrable, UniqueConstraint\nfrom django.db.models.query_utils import Q\n\nclass TestConstraints(TestCase):\n    def setUp(self):\n        self.schema_editor = Mock()\n        self.model = Mock()\n\n    def test_check_constraint(self):\n        check = Q(age__gte=18)\n        constraint = CheckConstraint(check=check, name='age_check')\n        self.assertEqual(constraint.name, 'age_check')\n        self.assertEqual(constraint.check, check)\n        self.assertEqual(constraint.__repr__(), \"<CheckConstraint: check='(AND: ('age__gte', 18))' name='age_check'>\")\n\n        with self.assertRaises(NotImplementedError):\n            constraint.constraint_sql(self.model, self.schema_editor)\n\n        with self.assertRaises(NotImplementedError):\n            constraint.create_sql(self.model, self.schema_editor)\n\n        with self.assertRaises(NotImplementedError):\n            constraint.remove_sql(self.model, self.schema_editor)\n\n    def test_unique_constraint(self):\n        fields = ['username']\n        constraint = UniqueConstraint(fields=fields, name='username_unique')\n        self.assertEqual(constraint.name, 'username_unique')\n        self.assertEqual(constraint.fields, tuple(fields))\n        self.assertEqual(constraint.__repr__(), \"<UniqueConstraint: fields=('username',) name='username_unique'>\")\n\n        with self.assertRaises(NotImplementedError):\n            constraint.constraint_sql(self.model, self.schema_editor)\n\n        with self.assertRaises(NotImplementedError):\n            constraint.create_sql(self.model, self.schema_editor)\n\n        with self.assertRaises(NotImplementedError):\n            constraint.remove_sql(self.model, self.schema_editor)\n\n        with self.assertRaises(ValueError):\n            UniqueConstraint(fields=[], name='empty_unique')\n\n        with self.assertRaises(ValueError):\n            UniqueConstraint(fields=fields, name='invalid_condition', condition='invalid')\n\n        with self.assertRaises(ValueError):\n            UniqueConstraint(fields=fields, name='invalid_include', include='invalid')\n\n        with self.assertRaises(ValueError):\n            UniqueConstraint(fields=fields, name='invalid_opclasses', opclasses='invalid')\n\n        with self.assertRaises(ValueError):\n            UniqueConstraint(fields=fields, name='invalid_deferrable', deferrable='invalid')\n\n        with self.assertRaises(ValueError):\n            UniqueConstraint(fields=fields, name='invalid_deferrable_condition', condition=Q(), deferrable=Deferrable.DEFERRED)\n\n        with self.assertRaises(ValueError):\n            UniqueConstraint(fields=fields, name='invalid_deferrable_include', include=['field'], deferrable=Deferrable.DEFERRED)\n\n        with self.assertRaises(ValueError):\n            UniqueConstraint(fields=fields, name='invalid_deferrable_opclasses', opclasses=['class'], deferrable=Deferrable.DEFERRED)\n"], "sample_236": ["\nfrom django.test import TestCase\nfrom django.db.models import ProtectedError, RestrictedError\nfrom django.db.models.deletion import Collector\n\n# Assuming you have a Django model to use for testing\nfrom myapp.models import MyTestModel\n\nclass TestCollector(TestCase):\n    def setUp(self):\n        # Create test data\n        MyTestModel.objects.create(name=\"Test1\")\n        MyTestModel.objects.create(name=\"Test2\")\n\n    def test_add(self):\n        collector = Collector(using='default')\n        objs = MyTestModel.objects.all()\n        new_objs = collector.add(objs)\n        self.assertEqual(len(new_objs), 2)\n\n    def test_add_dependency(self):\n        collector = Collector(using='default')\n        model = MyTestModel\n        dependency = MyTestModel\n        collector.add_dependency(model, dependency)\n        self.assertIn(dependency._meta.concrete_model, collector.dependencies[model._meta.concrete_model])\n\n    # Add more tests for other methods as needed\n"], "sample_443": ["\nimport unittest\nimport tempfile\nimport shutil\nimport os\nimport pickle\nimport zlib\nimport time\n\nfrom django.core.cache.backends.filebased import FileBasedCache\n\nclass TestFileBasedCache(unittest.TestCase):\n    def setUp(self):\n        self.test_dir = tempfile.mkdtemp()\n        self.cache = FileBasedCache(self.test_dir, {})\n\n    def tearDown(self):\n        shutil.rmtree(self.test_dir)\n\n    def test_add(self):\n        self.assertTrue(self.cache.add('test_key', 'test_value'))\n        self.assertFalse(self.cache.add('test_key', 'new_value'))\n\n    def test_get(self):\n        self.cache.set('test_key', 'test_value')\n        self.assertEqual(self.cache.get('test_key'), 'test_value')\n        self.assertIsNone(self.cache.get('nonexistent_key'))\n\n    def test_set(self):\n        self.cache.set('test_key', 'test_value')\n        self.assertEqual(self.cache.get('test_key'), 'test_value')\n\n    def test_touch(self):\n        self.cache.set('test_key', 'test_value', timeout=1)\n        self.assertTrue(self.cache.touch('test_key'))\n        time.sleep(2)\n        self.assertFalse(self.cache.touch('test_key'))\n\n    def test_delete(self):\n        self.cache.set('test_key', 'test_value')\n        self.assertTrue(self.cache.delete('test_key'))\n        self.assertFalse(self.cache.delete('test_key'))\n\n    def test_has_key(self):\n        self.cache.set('test_key', 'test_value')\n        self.assertTrue(self.cache.has_key('test_key'))\n        self.assertFalse(self.cache.has_key('nonexistent_key'))\n\n    def test_cull(self):\n        self.cache._max_entries = 5\n        self.cache._cull_frequency = 2\n        for i in range(10):\n            self.cache.set(f'test_key_{i}', 'test_value')\n        self.assertEqual(len(self.cache._list_cache_files()), 5)\n\n    def test_clear(self):\n        self.cache.set('test_key', 'test_value')\n        self.cache.clear()\n        self.assertFalse(self.cache.has_key('test_key'))\n\n    def test_is_expired(self):\n        self.cache.set('test_key', 'test_value', timeout=1)\n        f = open(self.cache._key_to_file('test_key'), 'rb')\n        self.assertFalse(self.cache._is_expired(f))\n        f.close()\n        time.sleep(2)\n        f = open(self.cache._key_to_file('test_key'), 'rb')\n        self.assertTrue(self.cache._is_expired(f))\n        f.close()\n\n    def test_list_cache_files(self):\n        self.cache.set('test_key', 'test_value')\n        files = self.cache._list_cache_files()\n        self.assertEqual(len(files), 1)\n        self.assertTrue(os.path.basename(files[0]).endswith(self.cache.cache_suffix))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_213": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.http import HttpResponse\nfrom django.test import RequestFactory, override_settings\nfrom django.contrib.sessions.middleware import SessionMiddleware\n\nclass SessionMiddlewareTest(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.middleware = SessionMiddleware()\n        self.session_key = 'test_session_key'\n\n    def test_process_request(self):\n        request = self.factory.get('/', COOKIES={'sessionid': self.session_key})\n        self.middleware.process_request(request)\n        self.assertEqual(request.session.session_key, self.session_key)\n\n    @patch('django.contrib.sessions.middleware.patch_vary_headers')\n    def test_process_response_session_not_accessed(self, mock_patch_vary_headers):\n        request = self.factory.get('/')\n        response = HttpResponse()\n        request.session = Mock(accessed=False, modified=False, is_empty=Mock(return_value=False))\n        self.middleware.process_response(request, response)\n        mock_patch_vary_headers.assert_not_called()\n\n    @patch('django.contrib.sessions.middleware.patch_vary_headers')\n    def test_process_response_session_accessed(self, mock_patch_vary_headers):\n        request = self.factory.get('/')\n        response = HttpResponse()\n        request.session = Mock(accessed=True, modified=False, is_empty=Mock(return_value=False))\n        self.middleware.process_response(request, response)\n        mock_patch_vary_headers.assert_called_once_with(response, ('Cookie',))\n\n    @patch('django.contrib.sessions.middleware.patch_vary_headers')\n    def test_process_response_session_modified(self, mock_patch_vary_headers):\n        request = self.factory.get('/')\n        response = HttpResponse()\n        request.session = Mock(accessed=False, modified=True, is_empty=Mock(return_value=False))\n        self.middleware.process_response(request, response)\n        mock_patch_vary_headers.assert_called_once_with(response, ('Cookie',))\n\n    @override_settings(SESSION_SAVE_EVERY_REQUEST=True)\n    @patch('django.contrib.sessions.middleware.patch_vary_headers')\n    def test_process_response_save_every_request(self, mock_patch_vary_headers):\n        request = self.factory.get('/')\n        response = HttpResponse()\n        request.session = Mock(accessed=False, modified=False, is_empty=Mock(return_value=False))\n        self.middleware.process_response(request, response)\n        mock_patch_vary_headers.assert_called_once_with(response, ('Cookie',))\n\n    @patch('django.contrib.sessions.middleware.patch_vary_headers')\n    def test_process_response_session_empty(self, mock_patch_vary_headers):\n        request = self.factory.get('/', COOKIES={'sessionid': self.session_key})\n        response = HttpResponse()\n        request.session = Mock(accessed=False, modified=False, is_empty=Mock(return_value=True))\n        self.middleware.process_response(request, response)\n        self.assertTrue(response.cookies['sessionid']['expires'] < 0)\n        mock_patch_vary_headers.assert_called_once_with(response, ('Cookie',))\n\n    @patch('django.contrib.sessions.middleware.patch_vary_headers')\n    @patch('django.contrib.sessions.middleware.time.time', return_value=1234567890)\n    def test_process_response_session_save(self, mock_time, mock_patch_vary_headers):\n        request = self.factory.get('/')\n        response = HttpResponse()\n        request.session = Mock(accessed=False, modified=True, is_empty=Mock(return_value=False),\n                               get_expire_at_browser_close=Mock(return_value=False),\n                               get_expiry_age=Mock(return_value=3600),\n                               session_key=self.session_key)\n        self.middleware.process_response(request, response)\n        request.session.save.assert_called_once()\n        self.assertEqual(response.cookies['sessionid'].value, self.session_key)\n        self.assertEqual(response.cookies['sessionid']['max-age'], 3600)\n        self.assertEqual(response.cookies['sessionid']['expires'], 'Thu, 01 Jan 1970 13:14:09 GMT')\n\n    @patch('django.contrib.sessions.middleware.patch_vary_headers')\n    def test_process_response_session_save_exception(self, mock_patch_vary_headers):\n        request = self.factory.get('/')\n        response = HttpResponse()\n        request.session = Mock(accessed=False, modified=True, is_empty=Mock(return_value=False),\n                               save=Mock(side_effect=UpdateError))\n        with self.assertRaises(SuspiciousOperation):\n            self.middleware.process_response(request, response)\n"], "sample_298": ["\nfrom unittest import TestCase\nfrom unittest.mock import patch, MagicMock\nfrom django.db.models.sql.query import Query, JoinInfo, JoinPromoter\n\nclass TestQueryMethods(TestCase):\n\n    def setUp(self):\n        self.query = Query(MagicMock())  # Replace MagicMock() with an actual model\n\n    def test_get_meta(self):\n        self.assertEqual(self.query.get_meta(), self.query.model._meta)\n\n    def test_clone(self):\n        cloned_query = self.query.clone()\n        self.assertIsNot(cloned_query, self.query)\n        self.assertEqual(cloned_query.__dict__, self.query.__dict__)\n\n    def test_chain(self):\n        chained_query = self.query.chain()\n        self.assertIsNot(chained_query, self.query)\n        self.assertEqual(chained_query.__dict__, self.query.__dict__)\n\n    # Add more tests for other methods in the Query class\n\nclass TestJoinInfoMethods(TestCase):\n\n    def test_join_info_init(self):\n        join_info = JoinInfo('final_field', 'targets', 'opts', 'joins', 'path', 'transform_function')\n        self.assertEqual(join_info.final_field, 'final_field')\n        self.assertEqual(join_info.targets, 'targets')\n        self.assertEqual(join_info.opts, 'opts')\n        self.assertEqual(join_info.joins, 'joins')\n        self.assertEqual(join_info.path, 'path')\n        self.assertEqual(join_info.transform_function, 'transform_function')\n\n    # Add more tests for other methods in the JoinInfo class\n\nclass TestJoinPromoterMethods(TestCase):\n\n    def setUp(self):\n        self.join_promoter = JoinPromoter('connector', 2, False)\n\n    def test_add_votes(self):\n        self.join_promoter.add_votes(['table1', 'table2'])\n        self.assertEqual(self.join_promoter.votes, {'table1': 1, 'table2': 1})\n\n    # Add more tests for other methods in the JoinPromoter class\n"], "sample_156": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.core.exceptions import NON_FIELD_ERRORS, ValidationError\nfrom django.forms import forms, Field, FileField, ErrorList, MultiValueDict, Media, MediaDefiningClass, Form\nfrom django.forms.utils import ErrorDict\nfrom django.forms.widgets import MediaDefiningClass, MultiWidget, RadioSelect\nfrom django.utils.datastructures import MultiValueDict\n\nclass TestDjangoForms(unittest.TestCase):\n\n    def setUp(self):\n        class TestForm(Form):\n            test_field = CharField()\n            test_file_field = FileField()\n\n        self.form = TestForm()\n\n    def test_form_initialization(self):\n        self.assertIsInstance(self.form, Form)\n        self.assertFalse(self.form.is_bound)\n        self.assertIsInstance(self.form.data, MultiValueDict)\n        self.assertIsInstance(self.form.files, MultiValueDict)\n        self.assertIsInstance(self.form.fields, dict)\n        self.assertIsInstance(self.form.fields['test_field'], CharField)\n        self.assertIsInstance(self.form.fields['test_file_field'], FileField)\n\n    def test_form_validation(self):\n        data = {'test_field': 'test_value', 'test_file_field': ''}\n        form = TestForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_form_errors(self):\n        form = TestForm({})\n        form.full_clean()\n        self.assertTrue(form.errors)\n        self.assertIn('test_field', form.errors)\n        self.assertIn('test_file_field', form.errors)\n\n    def test_form_media(self):\n        self.assertIsInstance(self.form.media, Media)\n\n    def test_form_hidden_fields(self):\n        hidden_fields = self.form.hidden_fields()\n        self.assertIsInstance(hidden_fields, list)\n\n    def test_form_visible_fields(self):\n        visible_fields = self.form.visible_fields()\n        self.assertIsInstance(visible_fields, list)\n        self.assertGreater(len(visible_fields), 0)\n\n    def test_form_changed_data(self):\n        form = TestForm({'test_field': 'new_value'})\n        self.assertEqual(form.changed_data, ['test_field'])\n\n    def test_form_add_error(self):\n        self.form.add_error('test_field', 'Test error')\n        self.assertIn('test_field', self.form.errors)\n        self.assertEqual(self.form.errors['test_field'], ['Test error'])\n\n    def test_form_has_error(self):\n        self.form.add_error('test_field', 'Test error')\n        self.assertTrue(self.form.has_error('test_field'))\n\n    def test_form_has_changed(self):\n        form = TestForm({'test_field': 'new_value'})\n        self.assertTrue(form.has_changed())\n\n    def test_form_is_multipart(self):\n        self.assertTrue(self.form.is_multipart())\n\n    def test_form_get_initial_for_field(self):\n        initial_value = self.form.get_initial_for_field(self.form.fields['test_field'], 'test_field')\n        self.assertEqual(initial_value, self.form.fields['test_field'].initial)\n\n    def test_form_clean(self):\n        cleaned_data = self.form.clean()\n        self.assertEqual(cleaned_data, {})\n\n    def test_form_clean_fields(self):\n        data = {'test_field': 'test_value', 'test_file_field': ''}\n        form = TestForm(data)\n        form._clean_fields()\n        self.assertIn('test_field', form.cleaned_data)\n        self.assertIn('test_file_field', form.cleaned_data)\n\n    def test_form_clean_form(self):\n        cleaned_data = self.form.clean()\n        self.form._clean_form()\n        self.assertEqual(self.form.cleaned_data, cleaned_data)\n\n    def test_form_post_clean(self):\n        self.form._post_clean()\n        # No specific assertions for this method as it does nothing\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_453": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.migrations.operations.models import (\n    CreateModel, DeleteModel, RenameModel, AlterModelTable, AlterModelTableComment,\n    AlterUniqueTogether, AlterIndexTogether, AlterOrderWithRespectTo,\n    AlterModelOptions, AlterModelManagers, AddIndex, RemoveIndex, RenameIndex,\n    AddConstraint, RemoveConstraint\n)\nfrom django.db import models\n\nclass TestModelOperations(unittest.TestCase):\n    def setUp(self):\n        self.app_label = \"test_app\"\n        self.name = \"TestModel\"\n        self.fields = [(\"field1\", models.CharField(max_length=20))]\n        self.options = {\"verbose_name\": \"Test Model\"}\n        self.bases = (models.Model,)\n        self.managers = []\n\n    def test_create_model(self):\n        create_model = CreateModel(self.name, self.fields, self.options, self.bases, self.managers)\n        self.assertEqual(create_model.name, self.name)\n        self.assertEqual(create_model.fields, self.fields)\n\n    def test_delete_model(self):\n        delete_model = DeleteModel(self.name)\n        self.assertEqual(delete_model.name, self.name)\n\n    def test_rename_model(self):\n        new_name = \"NewTestModel\"\n        rename_model = RenameModel(self.name, new_name)\n        self.assertEqual(rename_model.old_name, self.name)\n        self.assertEqual(rename_model.new_name, new_name)\n\n    def test_alter_model_table(self):\n        new_table = \"new_table\"\n        alter_model_table = AlterModelTable(self.name, new_table)\n        self.assertEqual(alter_model_table.name, self.name)\n        self.assertEqual(alter_model_table.table, new_table)\n\n    # Add more tests for AlterModelTableComment, AlterUniqueTogether, AlterIndexTogether,\n    # AlterOrderWithRespectTo, AlterModelOptions, AlterModelManagers, AddIndex, RemoveIndex,\n    # RenameIndex, AddConstraint, RemoveConstraint following the same pattern\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1120": ["\nimport unittest\nfrom sympy import MatrixSymbol, Identity, Symbol, ZeroMatrix, OneMatrix, MatrixElement, S, KroneckerDelta, Sum\nfrom sympy.matrices.expressions.matexpr import MatMul, MatAdd, Transpose, Inverse, _matrix_derivative\n\nclass TestMatrixExpr(unittest.TestCase):\n\n    def setUp(self):\n        self.A = MatrixSymbol('A', 3, 4)\n        self.B = MatrixSymbol('B', 4, 3)\n        self.I = Identity(3)\n        self.Z = ZeroMatrix(3, 4)\n        self.O = OneMatrix(2, 2)\n\n    def test_matrix_symbol_init(self):\n        self.assertEqual(self.A.shape, (3, 4))\n        self.assertEqual(self.A.name, 'A')\n\n    def test_identity_init(self):\n        self.assertEqual(self.I.rows, 3)\n        self.assertEqual(self.I.cols, 3)\n        self.assertEqual(self.I.shape, (3, 3))\n        self.assertTrue(self.I.is_square)\n\n    def test_zero_matrix_init(self):\n        self.assertEqual(self.Z.shape, (3, 4))\n\n    def test_one_matrix_init(self):\n        self.assertEqual(self.O.shape, (2, 2))\n\n    def test_matrix_element_init(self):\n        self.assertEqual(self.A[1, 2], MatrixElement(self.A, 1, 2))\n\n    def test_matmul_init(self):\n        self.assertEqual((self.A * self.B).args, (self.A, self.B))\n\n    def test_matadd_init(self):\n        self.assertEqual((self.A + self.B).args, (self.A, self.B))\n\n    def test_transpose_init(self):\n        self.assertEqual(self.A.T.args, (self.A,))\n\n    def test_inverse_init(self):\n        self.assertEqual(self.A.I.args, (self.A,))\n\n    def test_matrix_derivative(self):\n        x = Symbol('x')\n        expr = MatrixElement(self.A, x, 0)\n        deriv = _matrix_derivative(expr, x)\n        self.assertEqual(deriv, KroneckerDelta(x, x, (0, 2)) * self.A[0, 0])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_35": ["\nimport unittest\nimport numpy as np\nfrom astropy import units as u\nfrom astropy.units import cgs\nfrom astropy.units.core import _normalize_equivalencies, _flatten_units_collection, _UnitRegistry, get_current_unit_registry\nfrom astropy.units.core import UnitBase, NamedUnit, IrreducibleUnit, UnrecognizedUnit, CompositeUnit, Unit\nfrom astropy.units.core import def_unit, _condition_arg, dimensionless_unscaled, one\n\nclass TestUnitsCore(unittest.TestCase):\n    def setUp(self):\n        self.registry = get_current_unit_registry()\n\n    def test_normalize_equivalencies(self):\n        equivalencies = [(u.m, u.s, lambda x: x, lambda x: x),\n                         (u.kg, None, lambda x: x, lambda x: x)]\n        normalized = _normalize_equivalencies(equivalencies)\n        self.assertEqual(len(normalized), 2)\n\n    def test_flatten_units_collection(self):\n        units = [u.m, u.s, [u.kg, u.J], {u.Hz: 'hertz'}]\n        flattened = _flatten_units_collection(units)\n        self.assertEqual(len(flattened), 4)\n\n    def test_unit_registry(self):\n        registry = _UnitRegistry()\n        self.assertIsInstance(registry, _UnitRegistry)\n\n    def test_get_current_unit_registry(self):\n        registry = get_current_unit_registry()\n        self.assertIsInstance(registry, _UnitRegistry)\n\n    def test_unit_base_operations(self):\n        self.assertEqual(u.m * u.s, u.m * u.s)\n        self.assertEqual(u.m / u.s, u.m / u.s)\n        self.assertEqual(u.m ** 2, u.m ** 2)\n        self.assertEqual(u.m ** -1, u.m ** -1)\n\n    def test_def_unit(self):\n        new_unit = def_unit('newton', represents=u.kg * u.m / u.s**2)\n        self.assertEqual(new_unit, u.N)\n\n    def test_condition_arg(self):\n        self.assertEqual(_condition_arg(5), 5)\n        self.assertTrue(np.array_equal(_condition_arg([1, 2, 3]), np.array([1, 2, 3])))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_369": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.db.migrations.executor import MigrationExecutor\nfrom django.db.migrations.loader import MigrationLoader\nfrom django.db.migrations.recorder import MigrationRecorder\nfrom django.db.migrations.state import ProjectState\n\nclass TestMigrationExecutor(unittest.TestCase):\n\n    def setUp(self):\n        self.connection = Mock()\n        self.migration_executor = MigrationExecutor(self.connection)\n\n    def test_init(self):\n        self.assertIsInstance(self.migration_executor.loader, MigrationLoader)\n        self.assertIsInstance(self.migration_executor.recorder, MigrationRecorder)\n        self.assertIsNone(self.migration_executor.progress_callback)\n\n    def test_create_project_state(self):\n        state = self.migration_executor._create_project_state(with_applied_migrations=True)\n        self.assertIsInstance(state, ProjectState)\n\n    # Add more tests as needed\n"], "sample_997": ["\nimport unittest\nfrom sympy import Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt\nfrom sympy.core.numbers import igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom sympy import pi\nfrom mpmath.libmp.libmpf import fnan\nfrom sympy import Pi\n\nclass TestNumbers(unittest.TestCase):\n    def test_rational(self):\n        self.assertEqual(Rational(3, 4).p, 3)\n        self.assertEqual(Rational(3, 4).q, 4)\n\n    def test_float(self):\n        self.assertEqual(Float(3.14)._mpf_, mpf_norm((0, '3140000000000000000000000000', 21, 28), 15))\n\n    def test_imaginary_unit(self):\n        self.assertEqual(I * I, -1)\n\n    def test_pi(self):\n        self.assertEqual(Pi.evalf(), Float('3.141592653589793'))\n\n    def test_euler_gamma(self):\n        self.assertEqual(EulerGamma.evalf(), Float('0.5772156649015329'))\n\n    def test_catalan(self):\n        self.assertEqual(Catalan.evalf(), Float('0.915965594177219'))\n\n    def test_golden_ratio(self):\n        self.assertEqual(GoldenRatio.evalf(), Float('1.618033988749895'))\n\n    def test_integer(self):\n        self.assertEqual(Integer(123).p, 123)\n\n    def test_symbol(self):\n        x = Symbol('x')\n        self.assertEqual(x.name, 'x')\n\n    def test_number_symbol(self):\n        self.assertEqual(pi.is_real, True)\n\n    def test_number_operations(self):\n        self.assertEqual(Rational(3, 4) + Rational(1, 2), Rational(5, 4))\n        self.assertEqual(Rational(3, 4) * Rational(1, 2), Rational(3, 8))\n\n    def test_igcd(self):\n        self.assertEqual(igcd(12, 18), 6)\n\n    def test_ilcm(self):\n        self.assertEqual(ilcm(12, 18), 36)\n\n    def test_integer_nthroot(self):\n        self.assertEqual(integer_nthroot(8, 3), (2, True))\n\n    def test_isqrt(self):\n        self.assertEqual(isqrt(25), 5)\n\n    # Add more tests for other functions and classes in numbers.py\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_339": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.forms import Form\nfrom django.forms.models import ModelForm, modelform_factory\nfrom django.db import models\n\nclass SimpleModel(models.Model):\n    name = models.CharField(max_length=100)\n\nclass SimpleModelForm(ModelForm):\n    class Meta:\n        model = SimpleModel\n        fields = ['name']\n\nclass TestModelForms(unittest.TestCase):\n    def test_model_form_initialization(self):\n        data = {'name': 'Test Name'}\n        form = SimpleModelForm(data=data)\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.cleaned_data['name'], 'Test Name')\n\n    def test_modelform_factory(self):\n        FormClass = modelform_factory(SimpleModel, fields=['name'])\n        form = FormClass(data={'name': 'Factory Test Name'})\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.cleaned_data['name'], 'Factory Test Name')\n\n    @patch('django.forms.models.modelform_factory')\n    def test_modelformset_factory(self, mock_modelform_factory):\n        from django.forms.models import modelformset_factory\n        mock_modelform_factory.return_value = SimpleModelForm\n        FormSet = modelformset_factory(SimpleModel, form=SimpleModelForm, extra=2)\n        formset = FormSet(data={\n            'form-TOTAL_FORMS': '2',\n            'form-INITIAL_FORMS': '0',\n            'form-0-name': 'Set Name 1',\n            'form-1-name': 'Set Name 2',\n        })\n        self.assertTrue(formset.is_valid())\n        self.assertEqual(len(formset.cleaned_data), 2)\n\n    @patch('django.forms.models.modelform_factory')\n    def test_inlineformset_factory(self, mock_modelform_factory):\n        from django.forms.models import inlineformset_factory\n        mock_modelform_factory.return_value = SimpleModelForm\n        ParentModel = models.Model\n        FormSet = inlineformset_factory(ParentModel, SimpleModel, form=SimpleModelForm, extra=2)\n        formset = FormSet(instance=ParentModel(), data={\n            'form-TOTAL_FORMS': '2',\n            'form-INITIAL_FORMS': '0',\n            'form-0-name': 'Inline Name 1',\n            'form-1-name': 'Inline Name 2',\n        })\n        self.assertTrue(formset.is_valid())\n        self.assertEqual(len(formset.cleaned_data), 2)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_598": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nfrom xarray.core import formatting\n\nclass TestFormatting(unittest.TestCase):\n\n    def setUp(self):\n        self.array = np.random.rand(5, 5)\n        self.dataset = xr.Dataset({'data': (('x', 'y'), self.array)},\n                                  coords={'x': ('x', np.arange(5)),\n                                          'y': ('y', np.arange(5))})\n\n    def test_pretty_print(self):\n        result = formatting.pretty_print('test', 10)\n        self.assertEqual(len(result), 10)\n        self.assertEqual(result[:4], 'test')\n\n    def test_maybe_truncate(self):\n        result = formatting.maybe_truncate('test', 3)\n        self.assertEqual(result, '...')\n\n    def test_wrap_indent(self):\n        result = formatting.wrap_indent('test\\ntext', '> ', 3)\n        self.assertEqual(result, '> test\\n   text')\n\n    def test_format_timestamp(self):\n        result = formatting.format_timestamp(pd.Timestamp('2022-01-01T12:00:00'))\n        self.assertEqual(result, '2022-01-01T12:00:00')\n\n    def test_format_timedelta(self):\n        result = formatting.format_timedelta(pd.Timedelta(days=1))\n        self.assertEqual(result, '1 days 00:00:00')\n\n    def test_format_item(self):\n        result = formatting.format_item(1.23456789)\n        self.assertEqual(result, '1.2346')\n\n    def test_format_items(self):\n        result = formatting.format_items([1, 2, 3])\n        self.assertEqual(result, ['1', '2', '3'])\n\n    def test_format_array_flat(self):\n        result = formatting.format_array_flat(self.array, 20)\n        self.assertTrue(len(result) <= 20)\n\n    def test_summarize_variable(self):\n        result = formatting.summarize_variable('data', self.dataset['data'], 10)\n        self.assertTrue(isinstance(result, str))\n\n    def test_summarize_attr(self):\n        result = formatting.summarize_attr('attr', 'value', 10)\n        self.assertTrue(isinstance(result, str))\n\n    def test_data_vars_repr(self):\n        result = formatting.data_vars_repr(self.dataset.data_vars)\n        self.assertTrue(isinstance(result, str))\n\n    def test_coords_repr(self):\n        result = formatting.coords_repr(self.dataset.coords)\n        self.assertTrue(isinstance(result, str))\n\n    def test_array_repr(self):\n        result = formatting.array_repr(self.dataset['data'])\n        self.assertTrue(isinstance(result, str))\n\n    def test_dataset_repr(self):\n        result = formatting.dataset_repr(self.dataset)\n        self.assertTrue(isinstance(result, str))\n\n    def test_diff_dataset_repr(self):\n        dataset2 = self.dataset.copy()\n        dataset2['data'].values[0, 0] = 1\n        result = formatting.diff_dataset_repr(self.dataset, dataset2, 'equals')\n        self.assertTrue(isinstance(result, str))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_396": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.models.sql.query import Query\n\nclass TestQueryMethods(unittest.TestCase):\n\n    def setUp(self):\n        self.query = Query(None)\n\n    def test_get_count(self):\n        self.query.get_count('default')\n        self.assertEqual(self.query.annotations, {'__count': 1})\n\n    def test_has_filters(self):\n        self.assertFalse(self.query.has_filters())\n        self.query.add_filter('name', 'test')\n        self.assertTrue(self.query.has_filters())\n\n    @patch('django.db.models.sql.query.Query.get_compiler')\n    def test_has_results(self, mock_get_compiler):\n        mock_compiler = Mock()\n        mock_compiler.has_results.return_value = True\n        mock_get_compiler.return_value = mock_compiler\n        self.assertTrue(self.query.has_results('default'))\n\n    @patch('django.db.models.sql.query.Query.get_compiler')\n    def test_explain(self, mock_get_compiler):\n        mock_compiler = Mock()\n        mock_compiler.explain_query.return_value = ['EXPLAIN PLAN']\n        mock_get_compiler.return_value = mock_compiler\n        self.assertEqual(self.query.explain('default'), 'EXPLAIN PLAN')\n\n    def test_combine(self):\n        other_query = Query(None)\n        self.query.combine(other_query, 'AND')\n        self.assertEqual(self.query.combinator, 'AND')\n\n    def test_table_alias(self):\n        alias, created = self.query.table_alias('test')\n        self.assertTrue(created)\n        self.assertEqual(alias, 'test')\n        alias, created = self.query.table_alias('test')\n        self.assertFalse(created)\n        self.assertEqual(alias, 'test')\n\n    def test_join(self):\n        join = Mock()\n        join.table_name = 'test'\n        join.join_type = None\n        join.nullable = False\n        alias = self.query.join(join)\n        self.assertEqual(alias, 'test')\n        self.assertEqual(self.query.alias_map[alias], join)\n\n    def test_add_filter(self):\n        self.query.add_filter('name', 'test')\n        self.assertEqual(self.query.where.children[0].children[0].rhs, 'test')\n\n    def test_add_q(self):\n        q = Q(name='test')\n        self.query.add_q(q)\n        self.assertEqual(self.query.where.children[0].children[0].rhs, 'test')\n\n    def test_build_filter(self):\n        filter_expr = ('name', 'test')\n        clause, _ = self.query.build_filter(filter_expr)\n        self.assertEqual(clause.children[0].rhs, 'test')\n\n    def test_set_limits(self):\n        self.query.set_limits(low=0, high=10)\n        self.assertEqual(self.query.low_mark, 0)\n        self.assertEqual(self.query.high_mark, 10)\n\n    def test_clear_limits(self):\n        self.query.set_limits(low=0, high=10)\n        self.query.clear_limits()\n        self.assertEqual(self.query.low_mark, 0)\n        self.assertEqual(self.query.high_mark, None)\n\n    def test_is_sliced(self):\n        self.assertFalse(self.query.is_sliced)\n        self.query.set_limits(low=0, high=10)\n        self.assertTrue(self.query.is_sliced)\n\n    def test_has_limit_one(self):\n        self.assertFalse(self.query.has_limit_one())\n        self.query.set_limits(low=0,"], "sample_994": ["\nimport unittest\nfrom sympy import symbols, Rational, pi, sin, asin, Integral, Matrix\nfrom sympy.printing.latex import latex, translate, LatexPrinter, greek_letters_set, tex_greek_dictionary, other_symbols\n\nclass TestLatexPrinter(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.mu, self.tau = symbols('x y mu tau')\n\n    def test_translate(self):\n        self.assertEqual(translate('alphahatdotprime'), \"{\\\\dot{\\\\hat{\\\\alpha}}}'\")\n\n    def test_latex(self):\n        self.assertEqual(latex((2*self.tau)**Rational(7,2)), '8 \\\\sqrt{2} \\\\tau^{\\\\frac{7}{2}}')\n\n    def test_latex_modes(self):\n        self.assertEqual(latex((2*self.mu)**Rational(7,2), mode='plain'), '8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}')\n        self.assertEqual(latex((2*self.tau)**Rational(7,2), mode='inline'), '$8 \\\\sqrt{2} \\\\tau^{7 / 2}$')\n        self.assertEqual(latex((2*self.mu)**Rational(7,2), mode='equation*'), '\\\\begin{equation*}8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}\\\\end{equation*}')\n        self.assertEqual(latex((2*self.mu)**Rational(7,2), mode='equation'), '\\\\begin{equation}8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}\\\\end{equation}')\n\n    def test_latex_options(self):\n        self.assertEqual(latex((2*self.tau)**Rational(7,2), fold_frac_powers=True), '8 \\\\sqrt{2} \\\\tau^{7/2}')\n        self.assertEqual(latex((2*self.tau)**sin(Rational(7,2)), fold_func_brackets=True), '\\\\left(2 \\\\tau\\\\right)^{\\\\sin {\\\\frac{7}{2}}}')\n        self.assertEqual(latex(3*self.x**2/self.y, fold_short_frac=True), '3 x^{2} / y')\n        self.assertEqual(latex(Integral(self.tau, self.tau)/2/pi, long_frac_ratio=0), '\\\\frac{1}{2 \\\\pi} \\\\int \\\\tau\\\\, d\\\\tau')\n\n    def test_latex_symbol_names(self):\n        self.assertEqual(latex(self.x**2, symbol_names={self.x:'x_i'}), 'x_i^{2}')\n\n    def test_latex_containers(self):\n        self.assertEqual(latex([2/self.x, self.y], mode='inline'), '$\\\\left [ 2 / x, \\\\quad y\\\\right ]$')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1195": ["\nimport unittest\nfrom sympy.physics.hep.gamma_matrices import GammaMatrix as G, LorentzIndex, kahane_simplify, gamma_trace, _simplify_single_line, simplify_gamma_expression\nfrom sympy import S, TensorIndex, tensor_indices, tensor_heads\n\nclass TestGammaMatrices(unittest.TestCase):\n\n    def setUp(self):\n        self.i0, self.i1, self.i2, self.i3, self.i4, self.i5 = tensor_indices('i0:6', LorentzIndex)\n        self.p, self.q = tensor_heads('p, q', [LorentzIndex])\n\n    def test_kahane_simplify(self):\n        ta = G(self.i0)*G(-self.i0)\n        self.assertEqual(kahane_simplify(ta), 4)\n\n        tb = G(self.i0)*G(self.i1)*G(-self.i0)\n        self.assertEqual(kahane_simplify(tb), -2*G(self.i1))\n\n        tc = G(self.i0)*G(self.i1)\n        self.assertEqual(kahane_simplify(tc), tc)\n\n    def test_gamma_trace(self):\n        ps = self.p(self.i0)*G(-self.i0)\n        qs = self.q(self.i0)*G(-self.i0)\n        self.assertEqual(gamma_trace(ps*ps), 4*self.p(self.i0)*self.p(-self.i0))\n        self.assertEqual(gamma_trace(ps*qs + ps*ps), 4*self.p(self.i0)*self.p(-self.i0) + 4*self.p(self.i0)*self.q(-self.i0))\n\n    def test_simplify_single_line(self):\n        self.assertEqual(_simplify_single_line(G(self.i0)*G(self.i1)*self.p(-self.i1)*G(-self.i0)), 2*G(self.i0)*self.p(-self.i0))\n\n    def test_simplify_gamma_expression(self):\n        self.assertEqual(simplify_gamma_expression(G(self.i0)*G(self.i1)*self.p(-self.i1)*G(-self.i0)), 2*G(self.i0)*self.p(-self.i0))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_49": ["\nimport unittest\nfrom django.forms.widgets import Media, MediaDefiningClass, Widget, Input, TextInput, NumberInput, EmailInput, URLInput, PasswordInput, HiddenInput, MultipleHiddenInput, FileInput, ClearableFileInput, Textarea, DateTimeBaseInput, DateInput, TimeInput, CheckboxInput, ChoiceWidget, Select, NullBooleanSelect, SelectMultiple, RadioSelect, CheckboxSelectMultiple, MultiWidget, SplitDateTimeWidget, SplitHiddenDateTimeWidget, SelectDateWidget\n\nclass TestWidgets(unittest.TestCase):\n    def setUp(self):\n        self.widget = Widget()\n        self.input_widget = Input()\n        self.text_input_widget = TextInput()\n        self.number_input_widget = NumberInput()\n        self.email_input_widget = EmailInput()\n        self.url_input_widget = URLInput()\n        self.password_input_widget = PasswordInput()\n        self.hidden_input_widget = HiddenInput()\n        self.multiple_hidden_input_widget = MultipleHiddenInput()\n        self.file_input_widget = FileInput()\n        self.clearable_file_input_widget = ClearableFileInput()\n        self.textarea_widget = Textarea()\n        self.date_time_base_input_widget = DateTimeBaseInput()\n        self.date_input_widget = DateInput()\n        self.time_input_widget = TimeInput()\n        self.checkbox_input_widget = CheckboxInput()\n        self.choice_widget = ChoiceWidget()\n        self.select_widget = Select()\n        self.null_boolean_select_widget = NullBooleanSelect()\n        self.select_multiple_widget = SelectMultiple()\n        self.radio_select_widget = RadioSelect()\n        self.checkbox_select_multiple_widget = CheckboxSelectMultiple()\n        self.multi_widget = MultiWidget([TextInput(), TextInput()])\n        self.split_date_time_widget = SplitDateTimeWidget()\n        self.split_hidden_date_time_widget = SplitHiddenDateTimeWidget()\n        self.select_date_widget = SelectDateWidget()\n\n    def test_widget_init(self):\n        self.assertIsInstance(self.widget, Widget)\n        self.assertEqual(self.widget.attrs, {})\n\n    def test_input_widget_init(self):\n        self.assertIsInstance(self.input_widget, Input)\n        self.assertEqual(self.input_widget.input_type, None)\n\n    def test_text_input_widget_init(self):\n        self.assertIsInstance(self.text_input_widget, TextInput)\n        self.assertEqual(self.text_input_widget.input_type, 'text')\n\n    def test_number_input_widget_init(self):\n        self.assertIsInstance(self.number_input_widget, NumberInput)\n        self.assertEqual(self.number_input_widget.input_type, 'number')\n\n    def test_email_input_widget_init(self):\n        self.assertIsInstance(self.email_input_widget, EmailInput)\n        self.assertEqual(self.email_input_widget.input_type, 'email')\n\n    def test_url_input_widget_init(self):\n        self.assertIsInstance(self.url_input_widget, URLInput)\n        self.assertEqual(self.url_input_widget.input_type, 'url')\n\n    def test_password_input_widget_init(self):\n        self.assertIsInstance(self.password_input_widget, PasswordInput)\n        self.assertEqual(self.password_input_widget.input_type, 'password')\n        self.assertFalse(self.password_input_widget.render_value)\n\n    def test_hidden_input_widget_init(self):\n        self.assertIsInstance(self.hidden_input_widget, HiddenInput)\n        self.assertEqual(self.hidden_input_widget.input_type, 'hidden')\n\n    def test_multiple_hidden_input_widget_init(self):\n        self.assertIsInstance(self.multiple_hidden_input_widget, MultipleHiddenInput)\n        self.assertEqual(self.multiple_hidden_input_widget.input_type, 'hidden')\n\n    def test_file_input_widget_init(self):\n        self.assertIsInstance(self.file_input_widget, FileInput)\n        self.assertEqual(self.file_input_widget.input_type, 'file')\n\n    def test_clearable_file_input_widget_init(self):\n        self.assertIsInstance(self.clearable_file_input_widget, ClearableFileInput)\n        self.assertEqual(self.clearable_file_input_widget.input_type, 'file')\n\n    def test_textarea_widget_init(self):\n        self.assertIsInstance(self.textarea_widget, Textarea)\n\n    def test_date_time_base_input_widget_init(self):\n        self.assertIsInstance(self.date_time_base_input_widget, DateTimeBaseInput)\n        self.assertEqual(self.date_time_base_input_widget.input_type, 'text')\n\n    def test_date_input_widget_init(self):\n        self.assertIsInstance(self.date_input_widget, DateInput)\n        self.assertEqual(self.date_input_widget.input_type, 'text')\n\n    def test_time_input_widget_init(self):\n        self.assertIsInstance(self.time_input_widget, TimeInput)\n        self.assertEqual(self.time_input_widget.input_type, 'text')\n\n    def test_checkbox_input_widget_init(self):\n        self.assertIsInstance(self.checkbox_input_widget, CheckboxInput)\n        self.assertEqual(self.checkbox_input_widget.input_type, 'checkbox')\n\n    def test_choice_widget_init(self):\n        self.assertIsInstance(self.choice_widget, ChoiceWidget)\n        self.assertEqual(self.choice_widget.input_type, None)\n\n    def test_select_widget_init(self):\n        self.assertIsInstance(self.select_widget, Select)\n        self.assertEqual(self.select_widget.input_type, 'select')\n\n    def test_null_boolean_select_widget_init(self):\n        self.assertIsInstance(self.null_boolean_select_widget, NullBooleanSelect)\n        self.assertEqual(self.null_boolean_select_widget.input_type, 'select')\n\n    def test_select_multiple_widget_init(self):\n        self.assertIsInstance(self.select_multiple_widget, SelectMultiple)\n        self.assertEqual(self.select_multiple_widget.input_type, 'select')\n\n    def test_radio_select_widget_init(self):\n        self.assertIsInstance(self.radio_select_widget, RadioSelect)\n        self.assertEqual(self.radio_select_widget.input_type, 'radio')\n\n    def test_checkbox_select_multiple_widget_init(self):\n        self.assertIsInstance(self.checkbox_select_multiple_widget, CheckboxSelectMultiple)\n        self.assertEqual(self.checkbox_select_multiple_widget.input_type, 'checkbox')\n\n    def test_multi_widget_init(self):\n        self.assertIsInstance(self.multi_widget, MultiWidget)\n\n    def test_split_date_time_widget_init(self):\n        self.assertIsInstance(self.split_date_time_widget, SplitDateTimeWidget)\n\n    def test_split_hidden_date_time_widget_init(self):\n        self.assertIsInstance(self.split_hidden_date_time_widget, SplitHiddenDateTimeWidget)\n\n    def test_select_date_widget_init(self):\n        self.assertIsInstance(self.select_date_widget, SelectDateWidget)\n\n    # Add more tests for other methods and functionalities as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_991": ["\nimport unittest\nfrom sympy import Symbol, S, cos, sin, pi, exp, log, atan, Abs, re, im, floor, ceiling, Integral, Sum, Product, bernoulli\nfrom sympy.core.evalf import evalf, evalf_add, evalf_mul, evalf_pow, evalf_trig, evalf_log, evalf_atan, evalf_abs, evalf_re, evalf_im, evalf_floor, evalf_ceiling, evalf_integral, evalf_sum, evalf_prod, evalf_bernoulli\n\nclass TestEvalf(unittest.TestCase):\n\n    def setUp(self):\n        self.x = Symbol('x')\n\n    def test_evalf_add(self):\n        result = evalf_add(self.x + 1, 15, {})\n        self.assertIsNotNone(result)\n\n    def test_evalf_mul(self):\n        result = evalf_mul(self.x * 2, 15, {})\n        self.assertIsNotNone(result)\n\n    def test_evalf_pow(self):\n        result = evalf_pow(self.x ** 2, 15, {})\n        self.assertIsNotNone(result)\n\n    def test_evalf_trig(self):\n        result = evalf_trig(cos(self.x), 15, {})\n        self.assertIsNotNone(result)\n        result = evalf_trig(sin(self.x), 15, {})\n        self.assertIsNotNone(result)\n\n    def test_evalf_log(self):\n        result = evalf_log(log(self.x), 15, {})\n        self.assertIsNotNone(result)\n\n    def test_evalf_atan(self):\n        result = evalf_atan(atan(self.x), 15, {})\n        self.assertIsNotNone(result)\n\n    def test_evalf_abs(self):\n        result = evalf_abs(Abs(self.x), 15, {})\n        self.assertIsNotNone(result)\n\n    def test_evalf_re(self):\n        result = evalf_re(re(self.x), 15, {})\n        self.assertIsNotNone(result)\n\n    def test_evalf_im(self):\n        result = evalf_im(im(self.x), 15, {})\n        self.assertIsNotNone(result)\n\n    def test_evalf_floor(self):\n        result = evalf_floor(floor(self.x), 15, {})\n        self.assertIsNotNone(result)\n\n    def test_evalf_ceiling(self):\n        result = evalf_ceiling(ceiling(self.x), 15, {})\n        self.assertIsNotNone(result)\n\n    def test_evalf_integral(self):\n        result = evalf_integral(Integral(self.x, (self.x, 0, 1)), 15, {})\n        self.assertIsNotNone(result)\n\n    def test_evalf_sum(self):\n        result = evalf_sum(Sum(self.x**n, (n, 0, 10)), 15, {})\n        self.assertIsNotNone(result)\n\n    def test_evalf_prod(self):\n        result = evalf_prod(Product(self.x**n, (n, 1, 10)), 15, {})\n        self.assertIsNotNone(result)\n\n    def test_evalf_bernoulli(self):\n        result = evalf_bernoulli(bernoulli(5), 15, {})\n        self.assertIsNotNone(result)\n"], "sample_542": ["\nimport unittest\nfrom unittest.mock import Mock\nimport matplotlib\nmatplotlib.use('Agg')  # Use non-interactive backend\nfrom matplotlib.text import Text, Annotation, OffsetFrom, _AnnotationBase\nfrom matplotlib.transforms import Affine2D, BboxTransformTo, Transform, Bbox\nfrom matplotlib.font_manager import FontProperties\n\nclass TestText(unittest.TestCase):\n\n    def setUp(self):\n        self.text = Text(0, 0, 'Test')\n\n    def test_get_rotation(self):\n        self.assertEqual(self.text.get_rotation(), 0)\n        self.text.set_rotation(45)\n        self.assertEqual(self.text.get_rotation(), 45)\n\n    def test_set_color(self):\n        self.text.set_color('red')\n        self.assertEqual(self.text.get_color(), 'red')\n\n    def test_set_fontproperties(self):\n        font = FontProperties(family='Arial', size=12)\n        self.text.set_fontproperties(font)\n        self.assertEqual(self.text.get_fontproperties(), font)\n\n    def test_set_position(self):\n        self.text.set_position((1, 1))\n        self.assertEqual(self.text.get_position(), (1, 1))\n\n    def test_set_text(self):\n        self.text.set_text('New Test')\n        self.assertEqual(self.text.get_text(), 'New Test')\n\n    def test_set_usetex(self):\n        self.text.set_usetex(True)\n        self.assertTrue(self.text.get_usetex())\n\n    def test_set_parse_math(self):\n        self.text.set_parse_math(False)\n        self.assertFalse(self.text.get_parse_math())\n\nclass TestAnnotation(unittest.TestCase):\n\n    def setUp(self):\n        self.annotation = Annotation('Test', (0, 0))\n\n    def test_get_position_xy(self):\n        renderer = Mock()\n        renderer.points_to_pixels.return_value = 1\n        self.annotation.axes = Mock()\n        self.annotation.axes.transData = Mock()\n        self.annotation.axes.transData.transform.return_value = (0, 0)\n        self.assertEqual(self.annotation._get_position_xy(renderer), (0, 0))\n\n    def test_set_annotation_clip(self):\n        self.annotation.set_annotation_clip(True)\n        self.assertTrue(self.annotation.get_annotation_clip())\n\nclass TestOffsetFrom(unittest.TestCase):\n\n    def setUp(self):\n        self.offset_from = OffsetFrom(Mock(), (0, 0))\n\n    def test_set_unit(self):\n        self.offset_from.set_unit('pixels')\n        self.assertEqual(self.offset_from.get_unit(), 'pixels')\n\nclass TestAnnotationBase(unittest.TestCase):\n\n    def setUp(self):\n        self.annotation_base = _AnnotationBase((0, 0))\n\n    def test_get_xy_transform(self):\n        renderer = Mock()\n        renderer.points_to_pixels.return_value = 1\n        self.annotation_base.axes = Mock()\n        self.annotation_base.axes.transData = Mock()\n        self.assertIsInstance(self.annotation_base._get_xy_transform(renderer, 'data'), Transform)\n\n    def test_set_annotation_clip(self):\n        self.annotation_base.set_annotation_clip(True)\n        self.assertTrue(self.annotation_base.get_annotation_clip())\n"], "sample_334": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.forms import Form, CharField, ValidationError\nfrom django.forms.widgets import TextInput\nfrom django.forms.utils import ErrorList\n\nclass TestBaseForm(unittest.TestCase):\n    def setUp(self):\n        class SampleForm(Form):\n            name = CharField(max_length=100, widget=TextInput)\n\n        self.form = SampleForm\n\n    def test_form_initialization(self):\n        form = self.form()\n        self.assertFalse(form.is_bound)\n        self.assertEqual(len(form.fields), 1)\n\n    def test_form_validation(self):\n        form = self.form(data={'name': 'Test Name'})\n        self.assertTrue(form.is_valid())\n\n        form = self.form(data={'name': ''})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['name'], [str(ValidationError('This field is required.'))])\n\n    def test_form_errors_property(self):\n        form = self.form(data={'name': ''})\n        self.assertEqual(type(form.errors), ErrorList)\n\n    def test_form_add_error(self):\n        form = self.form(data={'name': 'Test Name'})\n        form.add_error('name', 'Custom error message')\n        self.assertEqual(form.errors['name'], ['Custom error message'])\n\n    def test_form_has_error(self):\n        form = self.form(data={'name': ''})\n        self.assertTrue(form.has_error('name'))\n        self.assertFalse(form.has_error('non_existent_field'))\n\n    def test_form_full_clean(self):\n        form = self.form(data={'name': 'Test Name'})\n        form.full_clean()\n        self.assertEqual(form.cleaned_data, {'name': 'Test Name'})\n\n    def test_form_has_changed(self):\n        form = self.form(data={'name': 'Test Name'})\n        self.assertTrue(form.has_changed())\n\n    def test_form_media(self):\n        form = self.form()\n        self.assertEqual(str(form.media), '<link />')\n\n    def test_form_is_multipart(self):\n        form = self.form()\n        self.assertFalse(form.is_multipart())\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_836": ["\nimport unittest\nimport numpy as np\nfrom sklearn.datasets import make_classification, make_regression\nfrom sklearn.ensemble import AdaBoostClassifier, AdaBoostRegressor\nfrom sklearn.metrics import accuracy_score, r2_score\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\n\nclass TestWeightBoosting(unittest.TestCase):\n\n    def setUp(self):\n        np.random.seed(0)\n        self.X_class, self.y_class = make_classification(n_samples=100, n_features=20, n_informative=10, random_state=0)\n        self.X_reg, self.y_reg = make_regression(n_samples=100, n_features=20, n_informative=10, random_state=0)\n\n    def test_AdaBoostClassifier(self):\n        clf = AdaBoostClassifier(n_estimators=50, random_state=0)\n        clf.fit(self.X_class, self.y_class)\n        self.assertIsNotNone(clf.feature_importances_)\n        self.assertIsNotNone(clf.predict(self.X_class))\n        self.assertIsNotNone(clf.predict_proba(self.X_class))\n        self.assertIsNotNone(clf.decision_function(self.X_class))\n        self.assertTrue(0 <= clf.score(self.X_class, self.y_class) <= 1)\n\n    def test_AdaBoostRegressor(self):\n        regr = AdaBoostRegressor(n_estimators=50, random_state=0)\n        regr.fit(self.X_reg, self.y_reg)\n        self.assertIsNotNone(regr.feature_importances_)\n        self.assertIsNotNone(regr.predict(self.X_reg))\n        self.assertTrue(0 <= regr.score(self.X_reg, self.y_reg) <= 1)\n\n    def test_AdaBoostClassifier_staged_predict(self):\n        clf = AdaBoostClassifier(n_estimators=50, random_state=0)\n        clf.fit(self.X_class, self.y_class)\n        for y_pred in clf.staged_predict(self.X_class):\n            self.assertTrue(all(y in clf.classes_ for y in y_pred))\n\n    def test_AdaBoostRegressor_staged_predict(self):\n        regr = AdaBoostRegressor(n_estimators=50, random_state=0)\n        regr.fit(self.X_reg, self.y_reg)\n        for y_pred in regr.staged_predict(self.X_reg):\n            self.assertTrue(np.issubdtype(y_pred.dtype, np.number))\n\n    def test_AdaBoostClassifier_sample_weight(self):\n        sample_weight = np.random.rand(self.X_class.shape[0])\n        clf = AdaBoostClassifier(n_estimators=50, random_state=0)\n        clf.fit(self.X_class, self.y_class, sample_weight=sample_weight)\n        self.assertIsNotNone(clf.predict(self.X_class))\n\n    def test_AdaBoostRegressor_sample_weight(self):\n        sample_weight = np.random.rand(self.X_reg.shape[0])\n        regr = AdaBoostRegressor(n_estimators=50, random_state=0)\n        regr.fit(self.X_reg, self.y_reg, sample_weight=sample_weight)\n        self.assertIsNotNone(regr.predict(self.X_reg))\n\n    def test_AdaBoostClassifier_custom_base_estimator(self):\n        base_estimator = DecisionTreeClassifier(max_depth=2)\n        clf = AdaBoostClassifier(n_estimators=50, base_estimator=base_estimator, random_state=0)\n        clf.fit(self.X_class, self.y_class)\n        self.assertIsNotNone(clf.predict(self.X_class))\n\n    def test_AdaBoostRegressor_custom_base_estimator(self):\n        base_estimator = DecisionTreeRegressor(max_depth=2)\n        regr = AdaBoostRegressor(n_estimators=50, base_estimator=base_estimator, random_state=0)\n        regr.fit(self.X_reg, self.y_reg)\n        self.assertIsNotNone(regr.predict(self.X_reg))\n\n    def test_AdaBoostClassifier_invalid_algorithm(self):\n        with self.assertRaises(ValueError):\n            clf = AdaBoostClassifier(n_estimators=50, algorithm='invalid', random_state=0)\n\n    def test_AdaBoostRegressor_invalid_loss(self):\n        with self.assertRaises(ValueError):\n            regr = AdaBoostRegressor(n_estimators=50, loss='invalid', random_state=0)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_305": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.models import Query, Value, UUIDField\nfrom django.db.models.lookups import Exact, IExact, In, Contains, IContains, StartsWith, IStartsWith, EndsWith, IEndsWith, Range, IsNull, Regex, IRegex, YearExact, YearGt, YearGte, YearLt, YearLte, UUIDIExact, UUIDContains, UUIDIContains, UUIDStartsWith, UUIDIStartsWith, UUIDEndsWith, UUIDIEndsWith\n\nclass TestLookups(unittest.TestCase):\n    def setUp(self):\n        self.connection = Mock()\n        self.compiler = Mock()\n\n    def test_exact(self):\n        lookup = Exact(Mock(), 'test')\n        result = lookup.as_sql(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_iexact(self):\n        lookup = IExact(Mock(), 'test')\n        result = lookup.process_rhs(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_in(self):\n        lookup = In(Mock(), [1, 2, 3])\n        result = lookup.process_rhs(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_contains(self):\n        lookup = Contains(Mock(), 'test')\n        result = lookup.get_rhs_op(self.connection, 'test')\n        self.assertIsNotNone(result)\n\n    def test_icontains(self):\n        lookup = IContains(Mock(), 'test')\n        result = lookup.process_rhs(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_startswith(self):\n        lookup = StartsWith(Mock(), 'test')\n        result = lookup.get_rhs_op(self.connection, 'test')\n        self.assertIsNotNone(result)\n\n    def test_istartswith(self):\n        lookup = IStartsWith(Mock(), 'test')\n        result = lookup.process_rhs(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_endswith(self):\n        lookup = EndsWith(Mock(), 'test')\n        result = lookup.get_rhs_op(self.connection, 'test')\n        self.assertIsNotNone(result)\n\n    def test_iendswith(self):\n        lookup = IEndsWith(Mock(), 'test')\n        result = lookup.process_rhs(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_range(self):\n        lookup = Range(Mock(), (1, 10))\n        result = lookup.get_rhs_op(self.connection, (1, 10))\n        self.assertIsNotNone(result)\n\n    def test_isnull(self):\n        lookup = IsNull(Mock(), True)\n        result = lookup.as_sql(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_regex(self):\n        lookup = Regex(Mock(), 'test')\n        result = lookup.as_sql(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_iregex(self):\n        lookup = IRegex(Mock(), 'test')\n        result = lookup.as_sql(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_year_exact(self):\n        lookup = YearExact(Mock(), 2022)\n        result = lookup.get_bound_params(20220101, 20221231)\n        self.assertIsNotNone(result)\n\n    def test_year_gt(self):\n        lookup = YearGt(Mock(), 2022)\n        result = lookup.get_bound_params(20230101, 20231231)\n        self.assertIsNotNone(result)\n\n    def test_year_gte(self):\n        lookup = YearGte(Mock(), 2022)\n        result = lookup.get_bound_params(20220101, 20221231)\n        self.assertIsNotNone(result)\n\n    def test_year_lt(self):\n        lookup = YearLt(Mock(), 2022)\n        result = lookup.get_bound_params(20210101, 20211231)\n        self.assertIsNotNone(result)\n\n    def test_year_lte(self):\n        lookup = YearLte(Mock(), 2022)\n        result = lookup.get_bound_params(20220101, 20221231)\n        self.assertIsNotNone(result)\n\n    def test_uuidiexact(self):\n        lookup = UUIDIExact(Mock(), '123e4567-e89b-12d3-a456-426614174000')\n        result = lookup.process_rhs(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_uuidcontains(self):\n        lookup = UUIDContains(Mock(), '123e4567-e89b-12d3-a456-426614174000')\n        result = lookup.process_rhs(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_uuidicontains(self):\n        lookup = UUIDIContains(Mock(), '123e4567-e89b-12d3-a456-426614174000')\n        result = lookup.process_rhs(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_uuidstartswith(self):\n        lookup = UUIDStartsWith(Mock(), '123e4567-e89b-12d3-a456-426614174000')\n        result = lookup.process_rhs(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_uuidistartswith(self):\n        lookup = UUIDIStartsWith(Mock(), '123e4567-e89b-12d3-a456-426614174000')\n        result = lookup.process_rhs(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_uuidendswith(self):\n        lookup = UUIDEndsWith(Mock(), '123e4567-e89b-12d3-a456-426614174000')\n        result = lookup.process_rhs(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\n    def test_uuidiendswith(self):\n        lookup = UUIDIEndsWith(Mock(), '123e4567-e89b-12d3-a456-426614174000')\n        result = lookup.process_rhs(self.compiler, self.connection)\n        self.assertIsNotNone(result)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_963": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom docutils import nodes\nfrom sphinx.domains.python import (PythonDomain, PythonModuleIndex, _parse_annotation, _pseudo_parse_arglist, py_sig_re)\nfrom sphinx.environment import BuildEnvironment\n\nclass TestPythonDomain(unittest.TestCase):\n    def setUp(self):\n        self.env = Mock(spec=BuildEnvironment)\n\n    def test_parse_annotation(self):\n        annotation = \"List[str]\"\n        result = _parse_annotation(annotation, self.env)\n        self.assertIsInstance(result, list)\n        self.assertIsInstance(result[0], nodes.Text)\n\n    def test_pseudo_parse_arglist(self):\n        arglist = \"arg1, arg2, [arg3=default]\"\n        signode = Mock()\n        _pseudo_parse_arglist(signode, arglist)\n        self.assertIsInstance(signode.__getitem__.call_args[0][0], nodes.desc_parameterlist)\n\n    def test_py_sig_re(self):\n        sig = \"func(arg1, arg2=default)\"\n        match = py_sig_re.match(sig)\n        self.assertIsNotNone(match)\n        self.assertEqual(match.group(1), None)\n        self.assertEqual(match.group(2), \"func\")\n        self.assertEqual(match.group(3), \"arg1, arg2=default\")\n        self.assertEqual(match.group(4), None)\n\n# Add more test cases for other functions and classes in python.py\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_768": ["\nimport unittest\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\nimport numpy as np\n\nclass TestEncoders(unittest.TestCase):\n\n    def setUp(self):\n        self.X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        self.X_test = [['Female', 3], ['Male', 1]]\n        self.y = [0, 1]\n\n    def test_one_hot_encoder_fit(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        self.assertEqual(len(enc.categories_), 2)\n        self.assertIsInstance(enc.categories_[0], np.ndarray)\n        self.assertIsInstance(enc.categories_[1], np.ndarray)\n\n    def test_one_hot_encoder_transform(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        transformed = enc.transform(self.X_test).toarray()\n        self.assertEqual(transformed.shape, (2, 5))\n\n    def test_one_hot_encoder_inverse_transform(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        transformed = enc.transform(self.X_test).toarray()\n        inverse_transformed = enc.inverse_transform(transformed)\n        self.assertEqual(inverse_transformed.tolist(), self.X_test)\n\n    def test_one_hot_encoder_get_feature_names(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        feature_names = enc.get_feature_names()\n        self.assertEqual(len(feature_names), 5)\n        self.assertIsInstance(feature_names, np.ndarray)\n\n    def test_ordinal_encoder_fit(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        self.assertEqual(len(enc.categories_), 2)\n        self.assertIsInstance(enc.categories_[0], np.ndarray)\n        self.assertIsInstance(enc.categories_[1], np.ndarray)\n\n    def test_ordinal_encoder_transform(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        transformed = enc.transform(self.X_test)\n        self.assertEqual(transformed.shape, (2, 2))\n\n    def test_ordinal_encoder_inverse_transform(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        transformed = enc.transform(self.X_test)\n        inverse_transformed = enc.inverse_transform(transformed)\n        self.assertEqual(inverse_transformed.tolist(), self.X_test)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_945": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom docutils import nodes\nfrom sphinx.testing.util import SphinxTestApp\nfrom sphinx.domains.python import PythonDomain, PythonModuleIndex, _parse_annotation, _pseudo_parse_arglist, py_sig_re\nfrom sphinx.environment import BuildEnvironment\n\nclass TestPythonDomain(unittest.TestCase):\n\n    def setUp(self):\n        self.app = SphinxTestApp()\n        self.app.builder.env = BuildEnvironment()\n        self.domain = PythonDomain(self.app.env)\n\n    def test_parse_annotation(self):\n        annotation = \"List[int]\"\n        env = MagicMock()\n        result = _parse_annotation(annotation, env)\n        self.assertIsInstance(result, list)\n\n    def test_pseudo_parse_arglist(self):\n        signode = MagicMock()\n        arglist = \"arg1, arg2=[1, 2], *args, **kwargs\"\n        _pseudo_parse_arglist(signode, arglist)\n        self.assertIsInstance(signode, MagicMock)\n\n    def test_py_sig_re(self):\n        sig = \"module.function(arg1, arg2=2)\"\n        match = py_sig_re.match(sig)\n        self.assertIsNotNone(match)\n\n    @patch('sphinx.domains.python.logger')\n    def test_python_module_index_generate(self, mock_logger):\n        index = PythonModuleIndex(self.domain)\n        docnames = ['module1', 'module2']\n        self.domain.data['modules'] = {'module1': ('doc1', 'id1', 'synopsis1', 'platform1', False),\n                                       'module2': ('doc2', 'id2', 'synopsis2', 'platform2', True)}\n        content, collapse = index.generate(docnames)\n        self.assertIsInstance(content, list)\n        self.assertIsInstance(collapse, bool)\n\n    def test_note_object(self):\n        self.domain.note_object('obj1', 'function', 'id1')\n        self.assertIn('obj1', self.domain.objects)\n\n    def test_note_module(self):\n        self.domain.note_module('module1', 'id1', 'synopsis1', 'platform1', False)\n        self.assertIn('module1', self.domain.modules)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_961": ["\nimport unittest\nfrom unittest.mock import patch\nfrom sphinx.ext.autodoc import mock\n\nclass TestMock(unittest.TestCase):\n    def test_mock_object_init(self):\n        obj = mock._MockObject()\n        self.assertEqual(obj.__qualname__, obj.__name__)\n\n    def test_mock_object_len(self):\n        obj = mock._MockObject()\n        self.assertEqual(len(obj), 0)\n\n    def test_mock_object_contains(self):\n        obj = mock._MockObject()\n        self.assertFalse(\"key\" in obj)\n\n    def test_mock_object_iter(self):\n        obj = mock._MockObject()\n        self.assertEqual(list(iter(obj)), [])\n\n    def test_mock_object_getitem(self):\n        obj = mock._MockObject()\n        self.assertIsInstance(obj[\"key\"], mock._MockObject)\n\n    def test_mock_object_getattr(self):\n        obj = mock._MockObject()\n        self.assertIsInstance(obj.attr, mock._MockObject)\n\n    def test_mock_object_call(self):\n        obj = mock._MockObject()\n        call = obj()\n        self.assertIsInstance(call, mock._MockObject)\n        self.assertEqual(call.__sphinx_decorator_args__, ())\n\n    def test_mock_module_getattr(self):\n        module = mock._MockModule(\"test_module\")\n        self.assertIsInstance(module.attr, mock._MockObject)\n\n    def test_mock_finder(self):\n        finder = mock.MockFinder([\"test_module\"])\n        spec = finder.find_spec(\"test_module\", None)\n        self.assertIsNotNone(spec)\n        self.assertIsInstance(spec.loader, mock.MockLoader)\n\n    def test_mock_context_manager(self):\n        with patch(\"sys.meta_path\") as meta_path_mock:\n            with mock.mock([\"test_module\"]):\n                self.assertEqual(len(meta_path_mock.insert.call_args_list), 1)\n            self.assertEqual(len(meta_path_mock.remove.call_args_list), 1)\n\n    def test_ismock(self):\n        self.assertTrue(mock.ismock(mock._MockObject()))\n        self.assertTrue(mock.ismock(mock._MockModule(\"test_module\")))\n        self.assertFalse(mock.ismock(object()))\n\n    def test_undecorate(self):\n        obj = mock._MockObject()\n        self.assertEqual(mock.undecorate(obj), obj)\n\n        decorated_obj = obj()\n        decorated_obj.__sphinx_decorator_args__ = (\"original_obj\",)\n        self.assertEqual(mock.undecorate(decorated_obj), \"original_obj\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1019": ["\nimport unittest\nfrom sympy import symbols, lambdify, sqrt, sin, cos, Matrix, Function, Piecewise\nfrom sympy.utilities.lambdify import implemented_function, _imp_namespace, _module_present, _get_namespace\n\nx, y = symbols('x y')\n\nclass TestLambdify(unittest.TestCase):\n    def test_simple_expression(self):\n        f = lambdify(x, x**2)\n        self.assertEqual(f(2), 4)\n\n    def test_multiple_arguments(self):\n        f = lambdify((x, y), sqrt(x*y))\n        self.assertEqual(f(4, 9), 6.0)\n\n    def test_matrix_expression(self):\n        f = lambdify(x, Matrix([x, x + 1]))\n        self.assertEqual(f(2), Matrix([[2], [3]]))\n\n    def test_function_implementation(self):\n        f = implemented_function(Function('f'), lambda x: x+1)\n        func = lambdify(x, f(x))\n        self.assertEqual(func(4), 5)\n\n    def test_imp_namespace(self):\n        f = implemented_function(Function('f'), lambda x: x+1)\n        g = implemented_function(Function('g'), lambda x: x*10)\n        namespace = _imp_namespace(f(g(x)))\n        self.assertIn('f', namespace)\n        self.assertIn('g', namespace)\n\n    def test_module_present(self):\n        self.assertTrue(_module_present('math', ['math', 'numpy']))\n        self.assertFalse(_module_present('tensorflow', ['math', 'numpy']))\n\n    def test_get_namespace(self):\n        namespace = _get_namespace('math')\n        self.assertIn('sin', namespace)\n        self.assertIn('cos', namespace)\n\n    def test_piecewise_expression(self):\n        f = lambdify(x, Piecewise((x, x <= 1), (1/x, x > 1)))\n        self.assertEqual(f(0), 0)  # This will raise ZeroDivisionError if not handled correctly\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_459": ["\nfrom django.test import TestCase\nfrom django.db import models, connection\nfrom django.db.models import F, Q, Value\nfrom django.db.models.functions import ExtractIsoYear\nfrom django.db.models.lookups import (\n    Exact, IExact, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual,\n    IntegerFieldExact, IntegerGreaterThan, IntegerGreaterThanOrEqual,\n    IntegerLessThan, IntegerLessThanOrEqual, In, Contains, IContains,\n    StartsWith, IStartsWith, EndsWith, IEndsWith, Range, IsNull, Regex, IRegex,\n    YearExact, YearGt, YearGte, YearLt, YearLte, UUIDIExact, UUIDContains,\n    UUIDIContains, UUIDStartsWith, UUIDIStartsWith, UUIDEndsWith, UUIDIEndsWith\n)\n\nclass TestLookups(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        cls.field = models.CharField(max_length=100)\n        cls.uuid_field = models.UUIDField()\n        cls.integer_field = models.IntegerField()\n        cls.datetime_field = models.DateTimeField()\n\n    def test_exact(self):\n        lookup = Exact(self.field, 'test')\n        self.assertEqual(lookup.lookup_name, 'exact')\n\n    # ... more tests for other lookup classes ...\n\n    def test_year_exact(self):\n        lookup = YearExact(ExtractIsoYear('date_field'), 2022)\n        self.assertEqual(lookup.lookup_name, 'exact')\n\n    # ... more tests for year lookup classes ...\n\n    def test_uuid_iexact(self):\n        lookup = UUIDIExact(self.uuid_field, '123e4567-e89b-12d3-a456-426614174000')\n        self.assertEqual(lookup.lookup_name, 'iexact')\n\n    # ... more tests for UUID lookup classes ...\n"], "sample_527": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nimport numpy as np\nfrom matplotlib.figure import Figure\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas\n\nclass TestFigure(unittest.TestCase):\n\n    def setUp(self):\n        self.figure = Figure()\n        self.canvas = FigureCanvas(self.figure)\n\n    def test_init(self):\n        self.assertIsInstance(self.figure, Figure)\n\n    def test_set_size_inches(self):\n        self.figure.set_size_inches(5, 5)\n        self.assertEqual(self.figure.get_size_inches().tolist(), [5.0, 5.0])\n\n    def test_set_dpi(self):\n        self.figure.set_dpi(200)\n        self.assertEqual(self.figure.get_dpi(), 200)\n\n    def test_add_subplot(self):\n        ax = self.figure.add_subplot(111)\n        self.assertIn(ax, self.figure.axes)\n\n    def test_figimage(self):\n        data = np.random.rand(10, 10)\n        img = self.figure.figimage(data)\n        self.assertIn(img, self.figure.images)\n\n    def test_savefig(self):\n        with patch('matplotlib.figure.Figure.savefig') as mock_savefig:\n            self.figure.savefig('test.png')\n            mock_savefig.assert_called_once()\n\n    def test_ginput(self):\n        with patch('matplotlib.figure.Figure.ginput') as mock_ginput:\n            mock_ginput.return_value = [(0, 0), (1, 1)]\n            clicks = self.figure.ginput(n=2)\n            self.assertEqual(clicks, [(0, 0), (1, 1)])\n\n    def test_waitforbuttonpress(self):\n        with patch('matplotlib.figure.Figure.waitforbuttonpress') as mock_waitforbuttonpress:\n            mock_waitforbuttonpress.return_value = True\n            result = self.figure.waitforbuttonpress(timeout=1)\n            self.assertEqual(result, True)\n\n    def test_tight_layout(self):\n        self.figure.add_subplot(111)\n        self.figure.tight_layout()\n        # Add assertions to verify the tight layout\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_782": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing import KBinsDiscretizer\n\nclass TestKBinsDiscretizer(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[-2, 1, -4, -1],\n                           [-1, 2, -3, -0.5],\n                           [0, 3, -2, 0.5],\n                           [1, 4, -1, 2]])\n\n    def test_fit_transform(self):\n        est = KBinsDiscretizer(n_bins=3, encode='ordinal', strategy='uniform')\n        est.fit(self.X)\n        Xt = est.transform(self.X)\n        expected_Xt = np.array([[0., 0., 0., 0.],\n                               [1., 1., 1., 0.],\n                               [2., 2., 2., 1.],\n                               [2., 2., 2., 2.]])\n        np.testing.assert_array_equal(Xt, expected_Xt)\n\n    def test_inverse_transform(self):\n        est = KBinsDiscretizer(n_bins=3, encode='ordinal', strategy='uniform')\n        est.fit(self.X)\n        Xt = est.transform(self.X)\n        Xinv = est.inverse_transform(Xt)\n        expected_Xinv = np.array([[-1.5, 1.5, -3.5, -0.5],\n                                  [-0.5, 2.5, -2.5, -0.5],\n                                  [0.5, 3.5, -1.5, 0.5],\n                                  [0.5, 3.5, -1.5, 1.5]])\n        np.testing.assert_array_almost_equal(Xinv, expected_Xinv)\n\n    def test_invalid_encode(self):\n        with self.assertRaises(ValueError):\n            KBinsDiscretizer(n_bins=5, encode='invalid')\n\n    def test_invalid_strategy(self):\n        with self.assertRaises(ValueError):\n            KBinsDiscretizer(n_bins=5, strategy='invalid')\n\n    def test_constant_feature(self):\n        X = np.zeros((10, 2))\n        est = KBinsDiscretizer(n_bins=3, encode='ordinal', strategy='uniform')\n        est.fit(X)\n        Xt = est.transform(X)\n        expected_Xt = np.zeros((10, 2))\n        np.testing.assert_array_equal(Xt, expected_Xt)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_387": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.test import RequestFactory\nfrom django.contrib.admin.options import ModelAdmin\nfrom django.contrib.auth.models import User\n\nclass TestModelAdmin(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.modeladmin = ModelAdmin(User, Mock())\n\n    def test_get_object(self):\n        request = self.factory.get('/admin/auth/user/')\n        user = User.objects.create_user(username='testuser', password='testpassword')\n        obj = self.modeladmin.get_object(request, user.pk)\n        self.assertEqual(obj, user)\n\n    def test_get_changelist_instance(self):\n        request = self.factory.get('/admin/auth/user/')\n        changelist = self.modeladmin.get_changelist_instance(request)\n        self.assertIsNotNone(changelist)\n\n    def test_get_form(self):\n        request = self.factory.get('/admin/auth/user/add/')\n        form = self.modeladmin.get_form(request)\n        self.assertIsNotNone(form)\n\n    @patch('django.contrib.admin.options.ModelAdmin.save_model')\n    def test_save_model(self, mock_save_model):\n        request = self.factory.post('/admin/auth/user/add/')\n        form = self.modeladmin.get_form(request)()\n        obj = form.save(commit=False)\n        self.modeladmin.save_model(request, obj, form, True)\n        mock_save_model.assert_called_once_with(request, obj, form, True)\n\n    def test_has_module_permission(self):\n        request = self.factory.get('/admin/auth/user/')\n        request.user = User.objects.create_user(username='testuser', password='testpassword', is_staff=True)\n        has_permission = self.modeladmin.has_module_permission(request)\n        self.assertTrue(has_permission)\n\n    @patch('django.contrib.admin.options.ModelAdmin.delete_model')\n    def test_delete_model(self, mock_delete_model):\n        request = self.factory.post('/admin/auth/user/1/delete/')\n        user = User.objects.create_user(username='testuser', password='testpassword')\n        self.modeladmin.delete_model(request, user)\n        mock_delete_model.assert_called_once_with(request, user)\n"], "sample_660": ["\nimport pytest\nimport io\nimport os\nimport sys\nfrom _pytest import capture\nfrom _pytest.capture import _get_multicapture, CaptureManager, MultiCapture, DontReadFromInput, _py36_windowsconsoleio_workaround\n\n@pytest.fixture\ndef mock_config():\n    class MockConfig:\n        class MockPluginManager:\n            def getplugin(self, name):\n                if name == \"capturemanager\":\n                    return CaptureManager(\"fd\")\n\n        pluginmanager = MockPluginManager()\n        known_args_namespace = type('Namespace', (), {'capture': 'fd'})()\n\n    return MockConfig()\n\n@pytest.fixture\ndef mock_request(mock_config):\n    class MockRequest:\n        config = mock_config\n        fixturename = \"capsys\"\n\n    return MockRequest()\n\ndef test_get_multicapture():\n    assert isinstance(_get_multicapture(\"fd\"), MultiCapture)\n    assert isinstance(_get_multicapture(\"sys\"), MultiCapture)\n    assert isinstance(_get_multicapture(\"no\"), MultiCapture)\n    assert isinstance(_get_multicapture(\"tee-sys\"), MultiCapture)\n    with pytest.raises(ValueError):\n        _get_multicapture(\"invalid\")\n\ndef test_capture_manager_init():\n    capman = CaptureManager(\"fd\")\n    assert capman._method == \"fd\"\n    assert capman._global_capturing is None\n    assert capman._capture_fixture is None\n\ndef test_capture_manager_is_capturing(mock_config):\n    capman = CaptureManager(\"fd\")\n    assert capman.is_capturing() == \"global\"\n    capman = CaptureManager(\"no\")\n    assert capman.is_capturing() == False\n\ndef test_capture_manager_start_global_capturing(mock_config):\n    capman = CaptureManager(\"fd\")\n    capman.start_global_capturing()\n    assert isinstance(capman._global_capturing, MultiCapture)\n\ndef test_dont_read_from_input():\n    dont_read = DontReadFromInput()\n    with pytest.raises(IOError):\n        dont_read.read()\n    with pytest.raises(IOError):\n        dont_read.readline()\n    with pytest.raises(IOError):\n        dont_read.readlines()\n    with pytest.raises(IOError):\n        next(dont_read)\n    with pytest.raises(io.UnsupportedOperation):\n        dont_read.fileno()\n    assert dont_read.isatty() == False\n    dont_read.close()\n\ndef test_py36_windowsconsoleio_workaround(monkeypatch):\n    class MockStream:\n        class MockBuffer:\n            raw = None\n        buffer = MockBuffer()\n\n    monkeypatch.setattr(sys, 'platform', 'win32')\n    monkeypatch.setattr(sys, 'version_info', (3, 6))\n    _py36_windowsconsoleio_workaround(MockStream())\n"], "sample_27": ["\nimport unittest\nfrom astropy.io.fits import HDUList, Header, ImageHDU, TableHDU, BinTableHDU\nfrom astropy.io.fits.diff import FITSDiff, HDUDiff, HeaderDiff, ImageDataDiff, TableDataDiff\nimport numpy as np\n\nclass TestDiffFunctions(unittest.TestCase):\n\n    def setUp(self):\n        self.header_a = Header()\n        self.header_b = Header()\n        self.header_a['SIMPLE'] = True\n        self.header_b['SIMPLE'] = True\n        self.header_a['BITPIX'] = -32\n        self.header_b['BITPIX'] = -32\n        self.header_a['NAXIS'] = 2\n        self.header_b['NAXIS'] = 2\n        self.header_a['NAXIS1'] = 100\n        self.header_b['NAXIS1'] = 100\n        self.header_a['NAXIS2'] = 100\n        self.header_b['NAXIS2'] = 100\n        self.data_a = np.random.rand(100, 100)\n        self.data_b = np.random.rand(100, 100)\n\n    def test_header_diff(self):\n        diff = HeaderDiff(self.header_a, self.header_b)\n        self.assertTrue(diff.identical)\n\n        self.header_b['BITPIX'] = -64\n        diff = HeaderDiff(self.header_a, self.header_b)\n        self.assertFalse(diff.identical)\n        self.assertEqual(diff.diff_keyword_values['BITPIX'], [(-32, -64)])\n\n    def test_image_data_diff(self):\n        diff = ImageDataDiff(self.data_a, self.data_b)\n        self.assertFalse(diff.identical)\n        self.assertLess(diff.diff_ratio, 1.0)\n\n    def test_table_data_diff(self):\n        data_a = np.array([(1, 'a'), (2, 'b'), (3, 'c')], dtype=[('id', 'i4'), ('value', 'S1')])\n        data_b = np.array([(1, 'a'), (2, 'b'), (3, 'd')], dtype=[('id', 'i4'), ('value', 'S1')])\n        hdu_a = TableHDU(data=data_a)\n        hdu_b = TableHDU(data=data_b)\n        diff = TableDataDiff(hdu_a.data, hdu_b.data)\n        self.assertFalse(diff.identical)\n        self.assertEqual(diff.diff_values, [('VALUE', 2), (b'c', b'd')])\n\n    def test_hdu_diff(self):\n        hdu_a = ImageHDU(data=self.data_a, header=self.header_a)\n        hdu_b = ImageHDU(data=self.data_b, header=self.header_b)\n        diff = HDUDiff(hdu_a, hdu_b)\n        self.assertFalse(diff.identical)\n        self.assertFalse(diff.diff_headers.identical)\n        self.assertFalse(diff.diff_data.identical)\n\n    def test_fits_diff(self):\n        hdul_a = HDUList([ImageHDU(data=self.data_a, header=self.header_a)])\n        hdul_b = HDUList([ImageHDU(data=self.data_b, header=self.header_b)])\n        diff = FITSDiff(hdul_a, hdul_b)\n        self.assertFalse(diff.identical)\n        self.assertEqual(len(diff.diff_hdus), 1)\n        self.assertFalse(diff.diff_hdus[0][1].identical)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_673": ["\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom _pytest.doctest import _get_checker, _is_mocked, _is_setup_py, _patch_unwrap_mock_aware, DoctestItem, DoctestModule, DoctestTextfile\n\ndef test_get_checker():\n    checker = _get_checker()\n    assert checker is not None\n\ndef test_is_mocked():\n    obj = Mock()\n    assert _is_mocked(obj)\n\ndef test_is_setup_py():\n    path = Mock()\n    path.basename = \"setup.py\"\n    path.read_binary.return_value = b\"setuptools\"\n    assert _is_setup_py(path)\n\n@patch('inspect.unwrap')\ndef test_patch_unwrap_mock_aware(mock_unwrap):\n    with _patch_unwrap_mock_aware():\n        assert inspect.unwrap is not mock_unwrap\n\ndef test_DoctestItem_setup():\n    item = DoctestItem('name', Mock(), dtest=Mock())\n    item.fixture_request = Mock()\n    item.fixture_request.getfixturevalue.return_value = {}\n    item.setup()\n    assert item.dtest.globs['getfixture'] == item.fixture_request.getfixturevalue\n\n# Similarly, write unit tests for other functions and classes\n"], "sample_711": ["\nimport unittest\nimport pytest\nfrom _pytest.python import Module\nfrom _pytest.python import Class\nfrom _pytest.python import Function\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import Item\nfrom _pytest.runner import CallInfo\nfrom _pytest.outcomes import exit, fail, skip, xfail\nfrom _pytest.scope import Scope\nfrom _pytest.config import hookimpl\nimport _pytest.unittest as unit\n\nclass TestUnitTestCase:\n    def setup_method(self):\n        self.module = Module.from_parent(collector=None, name='test_module')\n        self.cls = type('TestClass', (object,), {})\n        self.instance = self.cls()\n        self.request = FixtureRequest(node=self.module, function=None, config=None, session=None)\n\n    def test_collect(self):\n        # Test that collect method returns the expected items\n        # This test case will be more complex and will need to mock the unittest.TestCase and unittest.TestLoader classes\n        pass\n\n    def test_inject_setup_teardown_fixtures(self):\n        # Test that the _inject_setup_teardown_fixtures method correctly injects the setup and teardown fixtures\n        unit._inject_setup_teardown_fixtures(self.cls)\n        assert hasattr(self.cls, '__pytest_class_setup')\n        assert hasattr(self.cls, '__pytest_method_setup')\n\n    def test_make_xunit_fixture(self):\n        # Test that the _make_xunit_fixture function correctly returns a fixture function\n        fixture = unit._make_xunit_fixture(self.cls, 'setup_method', 'teardown_method', None, Scope.Function, True)\n        assert callable(fixture)\n\nclass TestTestCaseFunction:\n    def setup_method(self):\n        self.parent = Class.from_parent(collector=None, name='test_class', obj=type('TestClass', (unittest.TestCase,), {}))\n        self.function = TestCaseFunction.from_parent(self.parent, name='test_method')\n        self.request = FixtureRequest(node=self.parent, function=None, config=None, session=None)\n\n    def test_setup(self):\n        # Test that the setup method correctly sets up the test case function\n        self.function.setup()\n        assert self.function._testcase is not None\n        assert self.function._obj is not None\n\n    def test_teardown(self):\n        # Test that the teardown method correctly tears down the test case function\n        self.function.teardown()\n        assert self.function._testcase is None\n        assert self.function._obj is None\n\n    def test_addexcinfo(self):\n        # Test that the _addexcinfo method correctly adds exception info to the test case function\n        try:\n            raise ValueError('test exception')\n        except ValueError:\n            self.function._addexcinfo(sys.exc_info())\n        assert self.function._excinfo is not None\n\nclass TestPytestPlugin:\n    def test_pytest_pycollect_makeitem(self):\n        # Test that the pytest_pycollect_makeitem hook correctly returns a UnitTestCase object\n        obj = type('TestClass', (unittest.TestCase,), {})\n        item = unit.pytest_pycollect_makeitem(self.module, 'test_class', obj)\n        assert isinstance(item, UnitTestCase)\n\n    def test_pytest_runtest_makereport(self):\n        # Test that the pytest_runtest_makereport hook correctly sets the excinfo attribute of the call object\n        item = TestCaseFunction.from_parent(self.parent, name='test_method')\n        item._excinfo = ['test_excinfo']\n        call = CallInfo[None].from_call(lambda: None, 'call')\n        unit.pytest_runtest_makereport(item, call)\n        assert call.excinfo == 'test_excinfo'\n"], "sample_832": ["\nimport unittest\nfrom sklearn.neighbors.nca import NeighborhoodComponentsAnalysis\nimport numpy as np\nfrom sklearn.exceptions import ConvergenceWarning\n\nclass TestNeighborhoodComponentsAnalysis(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [1, 1], [2, 2], [3, 3], [4, 4]])\n        self.y = np.array([1, 1, 1, 1, 2, 2, 2, 2])\n\n    def test_fit(self):\n        nca = NeighborhoodComponentsAnalysis(random_state=42)\n        nca.fit(self.X, self.y)\n        self.assertTrue(hasattr(nca, 'components_'))\n        self.assertTrue(hasattr(nca, 'n_iter_'))\n\n    def test_transform(self):\n        nca = NeighborhoodComponentsAnalysis(random_state=42)\n        nca.fit(self.X, self.y)\n        X_transformed = nca.transform(self.X)\n        self.assertEqual(X_transformed.shape, (self.X.shape[0], self.X.shape[1]))\n\n    def test_invalid_init(self):\n        with self.assertRaises(ValueError):\n            nca = NeighborhoodComponentsAnalysis(init='invalid')\n\n    def test_warm_start(self):\n        nca = NeighborhoodComponentsAnalysis(warm_start=True, random_state=42)\n        nca.fit(self.X, self.y)\n        with self.assertRaises(ValueError):\n            nca.fit(self.X[:4], self.y[:4])\n\n    def test_callback(self):\n        def callback(transformation, n_iter):\n            callback.n_iter = n_iter\n        callback.n_iter = 0\n        nca = NeighborhoodComponentsAnalysis(callback=callback, max_iter=2, random_state=42)\n        nca.fit(self.X, self.y)\n        self.assertEqual(callback.n_iter, 2)\n\n    def test_convergence_warning(self):\n        nca = NeighborhoodComponentsAnalysis(max_iter=0, random_state=42)\n        with self.assertWarns(ConvergenceWarning):\n            nca.fit(self.X, self.y)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_679": ["\nimport os\nimport shutil\nimport tempfile\nimport time\nfrom pathlib import Path\nimport unittest\nfrom unittest.mock import patch\n\n# Import the functions to be tested\nfrom _pytest.pathlib import ensure_deletable, get_lock_path, maybe_delete_a_numbered_dir, create_cleanup_lock, register_cleanup_lock_removal, try_cleanup, cleanup_candidates, make_numbered_dir_with_cleanup, fnmatch_ex, parts\n\nclass TestPathlibFunctions(unittest.TestCase):\n    def setUp(self):\n        self.test_dir = tempfile.mkdtemp()\n\n    def tearDown(self):\n        shutil.rmtree(self.test_dir)\n\n    def test_get_lock_path(self):\n        path = Path(self.test_dir)\n        lock_path = get_lock_path(path)\n        self.assertEqual(lock_path, path.joinpath(\".lock\"))\n\n    def test_ensure_deletable(self):\n        path = Path(self.test_dir)\n        self.assertTrue(ensure_deletable(path, time.time() + 1000))\n\n    def test_maybe_delete_a_numbered_dir(self):\n        path = Path(self.test_dir + \"/test_dir\")\n        path.mkdir()\n        maybe_delete_a_numbered_dir(path)\n        self.assertFalse(path.exists())\n\n    def test_create_cleanup_lock(self):\n        path = Path(self.test_dir)\n        lock_path = create_cleanup_lock(path)\n        self.assertTrue(lock_path.exists())\n\n    @patch('os.getpid', return_value=12345)\n    def test_register_cleanup_lock_removal(self, mock_getpid):\n        path = Path(self.test_dir + \"/.lock\")\n        path.touch()\n        register_cleanup_lock_removal(path)\n        self.assertFalse(path.exists())\n\n    def test_try_cleanup(self):\n        path = Path(self.test_dir + \"/test_dir\")\n        path.mkdir()\n        try_cleanup(path, time.time() - 1000)\n        self.assertFalse(path.exists())\n\n    def test_cleanup_candidates(self):\n        path = Path(self.test_dir)\n        for i in range(5):\n            (path / f'test_dir{i}').mkdir()\n        candidates = list(cleanup_candidates(path, 'test_dir', 3))\n        self.assertEqual(len(candidates), 2)\n\n    def test_fnmatch_ex(self):\n        self.assertTrue(fnmatch_ex(\"tests/**/doc/test*.py\", \"tests/foo/bar/doc/test_foo.py\"))\n\n    def test_parts(self):\n        self.assertEqual(parts(\"a/b/c\"), {\"a\", \"a/b\", \"a/b/c\"})\n\n# You can add more tests for other functions in a similar manner\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_635": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nimport astroid\n\nfrom pylint.extensions._check_docs_utils import (\n    space_indentation,\n    get_setters_property_name,\n    get_setters_property,\n    returns_something,\n    possible_exc_types,\n    docstringify,\n    Docstring,\n    SphinxDocstring,\n    EpytextDocstring,\n    GoogleDocstring,\n    NumpyDocstring,\n)\n\nclass TestDocUtils(unittest.TestCase):\n    def setUp(self):\n        self.node = Mock()\n\n    def test_space_indentation(self):\n        self.assertEqual(space_indentation(\"    hello\"), 4)\n        self.assertEqual(space_indentation(\"hello\"), 0)\n\n    def test_get_setters_property_name(self):\n        self.node.decorators = Mock()\n        self.node.decorators.nodes = [\n            Mock(attrname=\"setter\", expr=Mock(name=\"property_name\"))\n        ]\n        self.assertEqual(get_setters_property_name(self.node), \"property_name\")\n\n    def test_get_setters_property(self):\n        with patch(\"pylint.checkers.utils.node_frame_class\") as mock_node_frame_class:\n            mock_node_frame_class.return_value = Mock(getattr=Mock(return_value=[Mock()]))\n            self.assertEqual(get_setters_property(self.node), Mock())\n\n    def test_returns_something(self):\n        return_node = Mock(value=Mock(value=\"return_value\"))\n        self.assertTrue(returns_something(return_node))\n        return_node = Mock(value=None)\n        self.assertFalse(returns_something(return_node))\n\n    def test_possible_exc_types(self):\n        # Add tests here for possible_exc_types function\n        pass\n\n    def test_docstringify(self):\n        # Add tests here for docstringify function\n        pass\n\n    # Add more test methods for other functions...\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1156": ["\nimport unittest\nfrom sympy import symbols, sinh, nan, oo, zoo, pi, asinh, acosh, log, sqrt, coth, I, cot, E, tanh, tan, cosh, cos, S, sin, Rational, atanh, acoth, Integer, O, exp, sech, sec, csch, asech, acsch, acos, asin, expand_mul, AccumBounds, im, re, expand_trig\n\nx, y = symbols('x y')\n\nclass TestHyperbolicFunctions(unittest.TestCase):\n    def test_sinh(self):\n        self.assertEqual(sinh(x).diff(x), cosh(x))\n        self.assertEqual(sinh(x).inverse(), asinh)\n        self.assertEqual(sinh(nan), nan)\n        self.assertEqual(sinh(oo), oo)\n        self.assertEqual(sinh(-oo), -oo)\n        self.assertEqual(sinh(0), 0)\n        self.assertEqual(sinh(I*y), I*sin(y))\n        self.assertEqual(sinh(x + I*pi/2), sinh(I*pi/2)*cosh(x) + cosh(I*pi/2)*sinh(x))\n        self.assertEqual(sinh(asinh(x)), x)\n        self.assertEqual(sinh(acosh(x)), sqrt(x - 1) * sqrt(x + 1))\n        self.assertEqual(sinh(atanh(x)), x/sqrt(1 - x**2))\n        self.assertEqual(sinh(acoth(x)), 1/(sqrt(x - 1) * sqrt(x + 1)))\n\n    def test_cosh(self):\n        self.assertEqual(cosh(x).diff(x), sinh(x))\n        self.assertEqual(cosh(nan), nan)\n        self.assertEqual(cosh(oo), oo)\n        self.assertEqual(cosh(-oo), oo)\n        self.assertEqual(cosh(0), 1)\n        self.assertEqual(cosh(I*y), cos(y))\n        self.assertEqual(cosh(x + I*pi/2), cosh(x)*cosh(I*pi/2) + sinh(x)*sinh(I*pi/2))\n        self.assertEqual(cosh(asinh(x)), sqrt(1 + x**2))\n        self.assertEqual(cosh(acosh(x)), x)\n        self.assertEqual(cosh(atanh(x)), 1/sqrt(1 - x**2))\n        self.assertEqual(cosh(acoth(x)), x/(sqrt(x - 1) * sqrt(x + 1)))\n\n    def test_tanh(self):\n        self.assertEqual(tanh(x).diff(x), 1 - tanh(x)**2)\n        self.assertEqual(tanh(x).inverse(), atanh)\n        self.assertEqual(tanh(nan), nan)\n        self.assertEqual(tanh(oo), 1)\n        self.assertEqual(tanh(-oo), -1)\n        self.assertEqual(tanh(0), 0)\n        self.assertEqual(tanh(I*y), I*tan(y))\n        self.assertEqual(tanh(x + I*pi/2), tanh(I*pi/2)*coth(x) + coth(I*pi/2)*tanh(x))\n        self.assertEqual(tanh(asinh(x)), x/sqrt(1 + x**2))\n        self.assertEqual(tanh(acosh(x)), sqrt(x - 1) * sqrt(x + 1) / x)\n        self.assertEqual(tanh(atanh(x)), x)\n        self.assertEqual(tanh(acoth(x)), 1/x)\n\n    def test_coth(self):\n        self.assertEqual(coth(x).diff(x), -1/sinh(x)**2)\n        self.assertEqual(coth(x).inverse(), acoth)\n        self.assertEqual(coth(nan), nan)\n        self.assertEqual(coth(oo), 1)\n        self.assertEqual(coth(-oo), -1)\n        self.assertEqual(coth(0), zoo)\n        self.assertEqual(coth(I*y), I*cot(y))\n        self.assertEqual(coth(x + I*pi/2), coth(I*pi/2)*coth(x) + cot(I*pi/2)*tanh(x))\n        self.assertEqual(coth(asinh(x)), sqrt(1 + x**2)/x)\n        self.assertEqual(coth(acosh(x)), x/(sqrt(x - 1) * sqrt(x + 1)))\n        self.assertEqual(coth(atanh(x)), 1/x)\n        self.assertEqual(coth(acoth(x)), x)\n\n    # Add more tests for csch, sech, asinh, acosh, atanh, acoth, asech, and acsch\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_739": ["\nimport unittest\nfrom sklearn.model_selection._search import ParameterGrid, ParameterSampler, fit_grid_point, GridSearchCV, RandomizedSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import make_scorer, accuracy_score\nimport numpy as np\n\nclass TestSearchFunctions(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n        self.y = np.array([0, 0, 1, 1])\n        self.estimator = LogisticRegression()\n        self.scorer = make_scorer(accuracy_score)\n        self.parameters = {'C': [1, 10]}\n        self.train = np.array([True, True, False, False])\n        self.test = np.array([False, False, True, True])\n\n    def test_parameter_grid(self):\n        grid = ParameterGrid(self.parameters)\n        self.assertEqual(len(list(grid)), 2)\n\n    def test_parameter_sampler(self):\n        sampler = ParameterSampler(self.parameters, n_iter=10)\n        self.assertEqual(len(list(sampler)), 10)\n\n    def test_fit_grid_point(self):\n        scores, _, _ = fit_grid_point(self.X, self.y, self.estimator, self.parameters, self.train, self.test, self.scorer, verbose=0)\n        self.assertIsInstance(scores, float)\n\n    def test_grid_search_cv(self):\n        clf = GridSearchCV(self.estimator, self.parameters)\n        clf.fit(self.X, self.y)\n        self.assertIsNotNone(clf.best_estimator_)\n\n    def test_randomized_search_cv(self):\n        clf = RandomizedSearchCV(self.estimator, self.parameters, n_iter=10)\n        clf.fit(self.X, self.y)\n        self.assertIsNotNone(clf.best_estimator_)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_434": ["\nfrom django.test import RequestFactory, TestCase\nfrom django.views.generic.base import TemplateView, RedirectView, View\nfrom django.urls import reverse\n\nclass TemplateViewTest(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_get(self):\n        request = self.factory.get('/')\n        response = TemplateView.as_view(template_name=\"test_template.html\")(request)\n        self.assertEqual(response.status_code, 200)\n\nclass RedirectViewTest(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_get_redirect_url(self):\n        view = RedirectView()\n        view.url = \"/redirect/%(id)s/\"\n        self.assertEqual(view.get_redirect_url(id=1), \"/redirect/1/\")\n\n    def test_get(self):\n        view = RedirectView()\n        view.url = \"/redirect/\"\n        request = self.factory.get('/')\n        response = view.get(request)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response.url, \"/redirect/\")\n\nclass ViewTest(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_dispatch(self):\n        request = self.factory.get('/')\n        view = View()\n        view.setup(request)\n        response = view.dispatch(request)\n        self.assertEqual(response.status_code, 405)  # Method Not Allowed\n\n    def test_options(self):\n        request = self.factory.options('/')\n        view = View()\n        view.setup(request)\n        response = view.dispatch(request)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Allow'], 'GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS, TRACE')\n"], "sample_528": ["\nimport unittest\nimport matplotlib.pyplot as plt\nimport matplotlib.legend as mlegend\nimport matplotlib.lines as mlines\nimport matplotlib.patches as mpatches\n\nclass TestLegend(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n\n    def test_legend_creation(self):\n        line1 = mlines.Line2D([0, 1], [0, 1], label=\"Line 1\")\n        self.ax.add_line(line1)\n        legend = self.ax.legend()\n        self.assertIsInstance(legend, mlegend.Legend)\n\n    def test_legend_handles_labels(self):\n        line1 = mlines.Line2D([0, 1], [0, 1], label=\"Line 1\")\n        line2 = mlines.Line2D([0, 1], [1, 0], label=\"Line 2\")\n        self.ax.add_line(line1)\n        self.ax.add_line(line2)\n        handles, labels = self.ax.get_legend_handles_labels()\n        self.assertEqual(len(handles), 2)\n        self.assertEqual(len(labels), 2)\n        self.assertEqual(labels, [\"Line 1\", \"Line 2\"])\n\n    def test_legend_custom_handles_labels(self):\n        blue_patch = mpatches.Patch(color='blue', label='Blue')\n        red_patch = mpatches.Patch(color='red', label='Red')\n        self.ax.legend(handles=[blue_patch, red_patch], labels=[\"Blue\", \"Red\"])\n        handles, labels = self.ax.get_legend_handles_labels()\n        self.assertEqual(len(handles), 2)\n        self.assertEqual(len(labels), 2)\n        self.assertEqual(labels, [\"Blue\", \"Red\"])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1145": ["\nimport unittest\nfrom sympy import Q, Abs, Pow, atan2, re, im, arg, sign, MatrixSymbol, MatrixElement, Symbol, S, pi, I, nan\nfrom sympy.assumptions.refine import refine, refine_abs, refine_Pow, refine_atan2, refine_re, refine_im, refine_arg, refine_sign, refine_matrixelement\n\nclass TestRefine(unittest.TestCase):\n    def test_refine_abs(self):\n        self.assertEqual(refine_abs(Abs(Symbol('x')), Q.real(Symbol('x'))), Symbol('x'))\n        self.assertEqual(refine_abs(Abs(Symbol('x')), Q.positive(Symbol('x'))), Symbol('x'))\n        self.assertEqual(refine_abs(Abs(Symbol('x')), Q.negative(Symbol('x'))), -Symbol('x'))\n\n    def test_refine_Pow(self):\n        self.assertEqual(refine_Pow((-1)**Symbol('x'), Q.real(Symbol('x'))), (-1)**Symbol('x'))\n        self.assertEqual(refine_Pow((-1)**Symbol('x'), Q.even(Symbol('x'))), 1)\n        self.assertEqual(refine_Pow((-1)**Symbol('x'), Q.odd(Symbol('x'))), -1)\n\n    def test_refine_atan2(self):\n        self.assertEqual(refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.real(Symbol('y')) & Q.positive(Symbol('x'))), atan(Symbol('y')/Symbol('x')))\n        self.assertEqual(refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.negative(Symbol('y')) & Q.negative(Symbol('x'))), atan(Symbol('y')/Symbol('x')) - pi)\n        self.assertEqual(refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.positive(Symbol('y')) & Q.negative(Symbol('x'))), atan(Symbol('y')/Symbol('x')) + pi)\n        self.assertEqual(refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.zero(Symbol('y')) & Q.negative(Symbol('x'))), pi)\n        self.assertEqual(refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.positive(Symbol('y')) & Q.zero(Symbol('x'))), pi/2)\n        self.assertEqual(refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.negative(Symbol('y')) & Q.zero(Symbol('x'))), -pi/2)\n        self.assertEqual(refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.zero(Symbol('y')) & Q.zero(Symbol('x'))), nan)\n\n    def test_refine_re(self):\n        self.assertEqual(refine_re(re(Symbol('x')), Q.real(Symbol('x'))), Symbol('x'))\n        self.assertEqual(refine_re(re(Symbol('x')), Q.imaginary(Symbol('x'))), 0)\n\n    def test_refine_im(self):\n        self.assertEqual(refine_im(im(Symbol('x')), Q.real(Symbol('x'))), 0)\n        self.assertEqual(refine_im(im(Symbol('x')), Q.imaginary(Symbol('x'))), -I*Symbol('x'))\n\n    def test_refine_arg(self):\n        self.assertEqual(refine_arg(arg(Symbol('x')), Q.positive(Symbol('x'))), 0)\n        self.assertEqual(refine_arg(arg(Symbol('x')), Q.negative(Symbol('x'))), pi)\n\n    def test_refine_sign(self):\n        self.assertEqual(refine_sign(sign(Symbol('x')), Q.positive(Symbol('x')) & Q.nonzero(Symbol('x'))), 1)\n        self.assertEqual(refine_sign(sign(Symbol('x')), Q.negative(Symbol('x')) & Q.nonzero(Symbol('x'))), -1)\n        self.assertEqual(refine_sign(sign(Symbol('x')), Q.zero(Symbol('x'))), 0)\n        self.assertEqual(refine_sign(sign(Symbol('y')), Q.positive(im(Symbol('y')))), I)\n        self.assertEqual(refine_sign(sign(Symbol('y')), Q.negative(im(Symbol('y')))), -I)\n\n    def test_refine_matrixelement(self):\n        X = MatrixSymbol('X', 3, 3)\n        self.assertEqual(refine_matrixelement(X[0, 1], Q.symmetric(X)), X[0, 1])\n        self.assertEqual(refine_matrixelement(X[1, 0], Q.symmetric(X)), X[0, 1])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_602": ["\nimport os\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom pathlib import Path\nimport numpy as np\nimport xarray as xr\nfrom xarray.backends import api\n\nclass TestApi(unittest.TestCase):\n    def setUp(self):\n        self.ds = xr.Dataset({'var1': ('dim1', np.random.rand(10))}, coords={'dim1': np.arange(10)})\n        self.path = 'test.nc'\n        self.gz_path = 'test.gz'\n        self.remote_path = 'http://test.com/data.nc'\n\n    def tearDown(self):\n        if os.path.exists(self.path):\n            os.remove(self.path)\n        if os.path.exists(self.gz_path):\n            os.remove(self.gz_path)\n\n    def test_get_default_engine(self):\n        with patch('xarray.backends.api.is_remote_uri', return_value=False):\n            engine = api._get_default_engine(self.path)\n            self.assertEqual(engine, 'netcdf4')\n\n        with patch('xarray.backends.api.is_remote_uri', return_value=True):\n            engine = api._get_default_engine(self.remote_path)\n            self.assertEqual(engine, 'netcdf4')\n\n        engine = api._get_default_engine(self.gz_path)\n        self.assertEqual(engine, 'scipy')\n\n    def test_normalize_path(self):\n        path = api._normalize_path('~/test.nc')\n        self.assertEqual(path, os.path.abspath(os.path.expanduser('~/test.nc')))\n\n        path = api._normalize_path(Path('test.nc'))\n        self.assertEqual(path, 'test.nc')\n\n    # Add more tests for other functions as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1161": ["\nimport unittest\nfrom sympy import symbols, Eq, Sum, sin, cos, pi, Rational\nfrom sympy.printing import sstr, sstrrepr, StrPrinter\nfrom sympy.core.symbol import Str\n\nclass TestStrPrinter(unittest.TestCase):\n    def setUp(self):\n        self.a, self.b = symbols('a b')\n        self.printer = StrPrinter({\"order\": None})\n\n    def test_sstr(self):\n        self.assertEqual(sstr(Eq(self.a + self.b, 0)), 'Eq(a + b, 0)')\n\n    def test_sstrrepr(self):\n        self.assertEqual(sstrrepr(Str('test')), 'Str(\"test\")')\n\n    def test_print_symbol(self):\n        self.assertEqual(self.printer._print_Symbol(self.a), 'a')\n\n    def test_print_add(self):\n        self.assertEqual(self.printer._print_Add(self.a + self.b), 'a + b')\n\n    def test_print_rational(self):\n        self.assertEqual(self.printer._print_Rational(Rational(1, 2)), '1/2')\n\n    def test_print_sum(self):\n        self.assertEqual(self.printer._print_Sum(Sum(sin(self.a*self.b), (self.b, 0, pi))), 'Sum(sin(a*b), (b, 0, pi))')\n\n    def test_print_cos(self):\n        self.assertEqual(self.printer._print_Function(cos(self.a)), 'cos(a)')\n\n    def test_print_str(self):\n        self.assertEqual(self.printer._print_Str(Str('test')), 'test')\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_71": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.models import Model, ForeignKey, CASCADE, PROTECT, SET, SET_NULL, SET_DEFAULT, DO_NOTHING\nfrom django.db.models.deletion import Collector, ProtectedError\n\nclass TestCollector(unittest.TestCase):\n    def setUp(self):\n        # Create test models\n        class TestModel1(Model):\n            pass\n\n        class TestModel2(Model):\n            test_model1 = ForeignKey(TestModel1, on_delete=CASCADE)\n\n        class TestModel3(Model):\n            test_model1 = ForeignKey(TestModel1, on_delete=PROTECT)\n\n        class TestModel4(Model):\n            test_model1 = ForeignKey(TestModel1, on_delete=SET(value))\n\n        class TestModel5(Model):\n            test_model1 = ForeignKey(TestModel1, on_delete=SET_NULL)\n\n        class TestModel6(Model):\n            test_model1 = ForeignKey(TestModel1, on_delete=SET_DEFAULT, default=1)\n\n        class TestModel7(Model):\n            test_model1 = ForeignKey(TestModel1, on_delete=DO_NOTHING)\n\n        self.TestModel1 = TestModel1\n        self.TestModel2 = TestModel2\n        self.TestModel3 = TestModel3\n        self.TestModel4 = TestModel4\n        self.TestModel5 = TestModel5\n        self.TestModel6 = TestModel6\n        self.TestModel7 = TestModel7\n\n    def test_add(self):\n        collector = Collector(using='default')\n        obj = self.TestModel1()\n        new_objs = collector.add([obj])\n        self.assertEqual(new_objs, [obj])\n\n    def test_add_field_update(self):\n        collector = Collector(using='default')\n        obj = self.TestModel1()\n        collector.add_field_update(self.TestModel1._meta.get_field('id'), 2, [obj])\n        self.assertIn(self.TestModel1, collector.field_updates)\n\n    @patch('django.db.models.signals')\n    def test_can_fast_delete(self, mock_signals):\n        mock_signals.pre_delete.has_listeners.return_value = False\n        mock_signals.post_delete.has_listeners.return_value = False\n        mock_signals.m2m_changed.has_listeners.return_value = False\n        collector = Collector(using='default')\n        obj = self.TestModel1()\n        self.assertTrue(collector.can_fast_delete(obj))\n\n    def test_collect_with_fast_delete(self):\n        collector = Collector(using='default')\n        obj = self.TestModel1()\n        collector.collect([obj])\n        self.assertIn(obj, collector.fast_deletes)\n\n    def test_collect_with_cascade(self):\n        collector = Collector(using='default')\n        obj1 = self.TestModel1()\n        obj2 = self.TestModel2(test_model1=obj1)\n        collector.collect([obj1])\n        self.assertIn(obj2, collector.data[self.TestModel2])\n\n    def test_collect_with_protect(self):\n        collector = Collector(using='default')\n        obj1 = self.TestModel1()\n        obj3 = self.TestModel3(test_model1=obj1)\n        with self.assertRaises(ProtectedError):\n            collector.collect([obj1])\n\n    def test_delete(self):\n        collector = Collector(using='default')\n        obj = self.TestModel1()\n        collector.add([obj])\n        deleted_count, _ = collector.delete()\n        self.assertEqual(deleted_count, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_808": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics.pairwise import euclidean_distances, manhattan_distances, haversine_distances, linear_kernel, chi2_kernel, additive_chi2_kernel, polynomial_kernel, rbf_kernel, laplacian_kernel, sigmoid_kernel, cosine_similarity, cosine_distances, pairwise_distances, pairwise_distances_chunked, pairwise_distances_argmin_min, pairwise_distances_argmin, pairwise_kernels, check_pairwise_arrays, check_paired_arrays, paired_distances, paired_euclidean_distances, paired_manhattan_distances\n\nclass TestPairwiseMetrics(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4], [5, 6]])\n        self.Y = np.array([[7, 8], [9, 10], [11, 12]])\n\n    def test_euclidean_distances(self):\n        result = euclidean_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (3, 3))\n\n    def test_manhattan_distances(self):\n        result = manhattan_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (3, 3))\n\n    def test_haversine_distances(self):\n        result = haversine_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (3, 3))\n\n    def test_linear_kernel(self):\n        result = linear_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (3, 3))\n\n    def test_chi2_kernel(self):\n        result = chi2_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (3, 3))\n\n    def test_additive_chi2_kernel(self):\n        result = additive_chi2_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (3, 3))\n\n    def test_polynomial_kernel(self):\n        result = polynomial_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (3, 3))\n\n    def test_rbf_kernel(self):\n        result = rbf_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (3, 3))\n\n    def test_laplacian_kernel(self):\n        result = laplacian_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (3, 3))\n\n    def test_sigmoid_kernel(self):\n        result = sigmoid_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (3, 3))\n\n    def test_cosine_similarity(self):\n        result = cosine_similarity(self.X, self.Y)\n        self.assertEqual(result.shape, (3, 3))\n\n    def test_cosine_distances(self):\n        result = cosine_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (3, 3))\n\n    def test_pairwise_distances(self):\n        result = pairwise_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (3, 3))\n\n    def test_pairwise_distances_chunked(self):\n        gen = pairwise_distances_chunked(self.X, self.Y)\n        for chunk in gen:\n            self.assertEqual(chunk.shape[1], 3)\n\n    def test_pairwise_distances_argmin_min(self):\n        indices, values = pairwise_distances_argmin_min(self.X, self.Y)\n        self.assertEqual(len(indices), 3)\n        self.assertEqual(len(values), 3)\n\n    def test_pairwise_distances_argmin(self):\n        indices = pairwise_distances_argmin(self.X, self.Y)\n        self.assertEqual(len(indices), 3)\n\n    def test_pairwise_kernels(self):\n        result = pairwise_kernels(self.X, self.Y)\n        self.assertEqual(result.shape, (3, 3))\n\n    def test_check_pairwise_arrays(self):\n        X, Y = check_pairwise_arrays(self.X, self.Y)\n        self.assertEqual(X.shape, (3, 2))\n        self.assertEqual(Y.shape, (3, 2))\n\n    def test_check_paired_arrays(self):\n        X, Y = check_paired_arrays(self.X, self.Y)\n        self.assertEqual(X.shape, (3, 2))\n        self.assertEqual(Y.shape, (3, 2))\n\n    def test_paired_distances(self):\n        result = paired_distances(self.X, self.Y)\n        self.assertEqual(len(result), 3)\n\n    def test_paired_euclidean_distances(self):\n        result = paired_euclidean_distances(self.X, self.Y)\n        self.assertEqual(len(result), 3)\n\n    def test_paired_manhattan_distances(self):\n        result = paired_manhattan_distances(self.X, self.Y)\n        self.assertEqual(len(result), 3)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_483": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.contrib.admin import checks\nfrom django.core import checks as django_checks\nfrom django.db import models\n\nclass TestModelAdminChecks(unittest.TestCase):\n    @patch('django.contrib.admin.checks.BaseModelAdminChecks._check_autocomplete_fields')\n    @patch('django.contrib.admin.checks.BaseModelAdminChecks._check_raw_id_fields')\n    @patch('django.contrib.admin.checks.BaseModelAdminChecks._check_fields')\n    @patch('django.contrib.admin.checks.BaseModelAdminChecks._check_fieldsets')\n    @patch('django.contrib.admin.checks.BaseModelAdminChecks._check_exclude')\n    @patch('django.contrib.admin.checks.BaseModelAdminChecks._check_form')\n    @patch('django.contrib.admin.checks.BaseModelAdminChecks._check_filter_vertical')\n    @patch('django.contrib.admin.checks.BaseModelAdminChecks._check_filter_horizontal')\n    @patch('django.contrib.admin.checks.BaseModelAdminChecks._check_radio_fields')\n    @patch('django.contrib.admin.checks.BaseModelAdminChecks._check_prepopulated_fields')\n    @patch('django.contrib.admin.checks.BaseModelAdminChecks._check_view_on_site_url')\n    @patch('django.contrib.admin.checks.BaseModelAdminChecks._check_ordering')\n    @patch('django.contrib.admin.checks.BaseModelAdminChecks._check_readonly_fields')\n    def test_base_model_admin_checks(self, *mocks):\n        model_admin = MagicMock()\n        base_model_admin_checks = checks.BaseModelAdminChecks()\n        base_model_admin_checks.check(model_admin)\n        for mock in mocks:\n            mock.assert_called_once_with(model_admin)\n\n    # More tests can be added for other methods and classes similarly\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_10": ["\nimport unittest\nimport numpy as np\nfrom astropy.table import Table\n\nclass TestTable(unittest.TestCase):\n    def setUp(self):\n        self.data = {'a': [1, 2, 3], 'b': ['x', 'y', 'z']}\n        self.table = Table(self.data)\n\n    def test_init(self):\n        self.assertEqual(self.table['a'].tolist(), self.data['a'])\n        self.assertEqual(self.table['b'].tolist(), self.data['b'])\n\n    def test_add_column(self):\n        self.table.add_column([4, 5, 6], name='c')\n        self.assertEqual(self.table['c'].tolist(), [4, 5, 6])\n\n    def test_remove_column(self):\n        self.table.remove_column('b')\n        self.assertNotIn('b', self.table.colnames)\n\n    def test_add_row(self):\n        self.table.add_row([4, 'w'])\n        self.assertEqual(self.table['a'].tolist(), [1, 2, 3, 4])\n        self.assertEqual(self.table['b'].tolist(), ['x', 'y', 'z', 'w'])\n\n    def test_remove_row(self):\n        self.table.remove_row(1)\n        self.assertEqual(self.table['a'].tolist(), [1, 3])\n        self.assertEqual(self.table['b'].tolist(), ['x', 'z'])\n\n    def test_len(self):\n        self.assertEqual(len(self.table), 3)\n\n    def test_index_column(self):\n        self.assertEqual(self.table.index_column('b'), 1)\n\n    def test_replace_column(self):\n        self.table.replace_column('a', [4, 5, 6])\n        self.assertEqual(self.table['a'].tolist(), [4, 5, 6])\n\n    def test_keep_columns(self):\n        self.table.keep_columns('a')\n        self.assertEqual(self.table.colnames, ['a'])\n\n    def test_rename_column(self):\n        self.table.rename_column('a', 'x')\n        self.assertEqual(self.table.colnames, ['x', 'b'])\n\n    def test_argsort(self):\n        self.assertEqual(self.table.argsort('a').tolist(), [0, 1, 2])\n\n    def test_sort(self):\n        self.table.sort('a')\n        self.assertEqual(self.table['a'].tolist(), [1, 2, 3])\n\n    def test_reverse(self):\n        self.table.reverse()\n        self.assertEqual(self.table['a'].tolist(), [3, 2, 1])\n\n    def test_copy(self):\n        table_copy = self.table.copy()\n        self.assertEqual(self.table, table_copy)\n        self.assertIsNot(self.table, table_copy)\n\n    def test_values_equal(self):\n        table_copy = self.table.copy()\n        self.assertTrue(self.table.values_equal(table_copy).all())\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_717": ["\nimport unittest\nimport os\nimport shutil\nfrom tempfile import mkdtemp\nfrom sklearn.datasets import fetch_lfw_pairs, fetch_lfw_people\n\nclass TestLFWDataset(unittest.TestCase):\n    def setUp(self):\n        self.temp_dir = mkdtemp()\n\n    def tearDown(self):\n        shutil.rmtree(self.temp_dir)\n\n    def test_fetch_lfw_people(self):\n        data = fetch_lfw_people(data_home=self.temp_dir)\n        self.assertIsNotNone(data.data)\n        self.assertIsNotNone(data.images)\n        self.assertIsNotNone(data.target)\n        self.assertIsNotNone(data.target_names)\n        self.assertIsNotNone(data.DESCR)\n\n    def test_fetch_lfw_pairs(self):\n        data = fetch_lfw_pairs(data_home=self.temp_dir)\n        self.assertIsNotNone(data.data)\n        self.assertIsNotNone(data.pairs)\n        self.assertIsNotNone(data.target)\n        self.assertIsNotNone(data.target_names)\n        self.assertIsNotNone(data.DESCR)\n\n    def test_fetch_lfw_pairs_with_subset(self):\n        data = fetch_lfw_pairs(subset='test', data_home=self.temp_dir)\n        self.assertIsNotNone(data.data)\n        self.assertIsNotNone(data.pairs)\n        self.assertIsNotNone(data.target)\n        self.assertIsNotNone(data.target_names)\n        self.assertIsNotNone(data.DESCR)\n\n    def test_fetch_lfw_pairs_invalid_subset(self):\n        with self.assertRaises(ValueError):\n            fetch_lfw_pairs(subset='invalid', data_home=self.temp_dir)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_139": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.http import HttpRequest\nfrom django.views.decorators.debug import sensitive_variables, sensitive_post_parameters\n\nclass TestDjangoDecorators(unittest.TestCase):\n\n    def setUp(self):\n        self.mock_func = MagicMock()\n        self.mock_view = MagicMock()\n        self.request = HttpRequest()\n\n    def test_sensitive_variables_with_args(self):\n        decorator = sensitive_variables('user', 'password')\n        wrapped_func = decorator(self.mock_func)\n        wrapped_func()\n        self.assertEqual(wrapped_func.sensitive_variables, ('user', 'password'))\n\n    def test_sensitive_variables_without_args(self):\n        decorator = sensitive_variables()\n        wrapped_func = decorator(self.mock_func)\n        wrapped_func()\n        self.assertEqual(wrapped_func.sensitive_variables, '__ALL__')\n\n    def test_sensitive_variables_as_decorator(self):\n        with self.assertRaises(TypeError):\n            @sensitive_variables\n            def some_function():\n                pass\n\n    def test_sensitive_post_parameters_with_args(self):\n        decorator = sensitive_post_parameters('password', 'credit_card')\n        wrapped_view = decorator(self.mock_view)\n        wrapped_view(self.request)\n        self.assertEqual(self.request.sensitive_post_parameters, ('password', 'credit_card'))\n\n    def test_sensitive_post_parameters_without_args(self):\n        decorator = sensitive_post_parameters()\n        wrapped_view = decorator(self.mock_view)\n        wrapped_view(self.request)\n        self.assertEqual(self.request.sensitive_post_parameters, '__ALL__')\n\n    def test_sensitive_post_parameters_as_decorator(self):\n        with self.assertRaises(TypeError):\n            @sensitive_post_parameters\n            def some_view(request):\n                pass\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_972": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nimport logging\nfrom docutils import nodes\nfrom sphinx.util import logging as sphinx_logging\n\nclass TestSphinxLogging(unittest.TestCase):\n    def setUp(self):\n        self.app = MagicMock()\n        self.app.env.doc2path.return_value = 'path/to/doc'\n        self.app.warningiserror = False\n        self.app.config.suppress_warnings = []\n\n    def test_getLogger(self):\n        logger = sphinx_logging.getLogger('test')\n        self.assertIsInstance(logger, sphinx_logging.SphinxLoggerAdapter)\n\n    def test_convert_serializable(self):\n        record = logging.LogRecord('name', logging.INFO, 'pathname', 0, 'message', None, None)\n        record.location = nodes.Node()\n        sphinx_logging.convert_serializable([record])\n        self.assertIsInstance(record.location, str)\n\n    @patch('logging.LoggerAdapter.log')\n    def test_SphinxLoggerAdapter_log(self, mock_log):\n        logger = sphinx_logging.SphinxLoggerAdapter(logging.getLogger('test'), {})\n        logger.log('INFO', 'message')\n        mock_log.assert_called_with(logging.INFO, 'message')\n\n    @patch('logging.LoggerAdapter.log')\n    def test_SphinxLoggerAdapter_verbose(self, mock_log):\n        logger = sphinx_logging.SphinxLoggerAdapter(logging.getLogger('test'), {})\n        logger.verbose('message')\n        mock_log.assert_called_with(sphinx_logging.VERBOSE, 'message')\n\n    def test_is_suppressed_warning(self):\n        self.assertTrue(sphinx_logging.is_suppressed_warning('type', 'subtype', ['type.subtype']))\n        self.assertTrue(sphinx_logging.is_suppressed_warning('type', 'subtype', ['type.*']))\n        self.assertFalse(sphinx_logging.is_suppressed_warning('type', 'subtype', ['type.another_subtype']))\n\n    def test_WarningSuppressor(self):\n        suppressor = sphinx_logging.WarningSuppressor(self.app)\n        record = logging.LogRecord('name', logging.WARNING, 'pathname', 0, 'message', None, None)\n        record.type = 'type'\n        record.subtype = 'subtype'\n        self.app.config.suppress_warnings = ['type.subtype']\n        self.assertFalse(suppressor.filter(record))\n        self.app.config.suppress_warnings = []\n        self.assertTrue(suppressor.filter(record))\n\n    # Add more tests for WarningIsErrorFilter, DisableWarningIsErrorFilter, MessagePrefixFilter, OnceFilter, SphinxLogRecordTranslator, InfoLogRecordTranslator, WarningLogRecordTranslator, get_node_location, ColorizeFormatter, SafeEncodingWriter, and LastMessagesWriter classes as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_382": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom pathlib import Path\nfrom django.template import engines, autoreload\nfrom django.template.backends.django import DjangoTemplates\nfrom django.template.loaders.filesystem import Loader as FileSystemLoader\nfrom django.utils.autoreload import autoreload_started, file_changed\n\nclass TestTemplateAutoreload(unittest.TestCase):\n    def setUp(self):\n        self.mock_backend = MagicMock(spec=DjangoTemplates)\n        self.mock_backend.engine.dirs = ['/test/dir1', '/test/dir2']\n        self.mock_backend.engine.template_loaders = [FileSystemLoader(template_dirs=['/test/dir3', '/test/dir4'])]\n        engines.all = MagicMock(return_value=[self.mock_backend])\n        self.cwd = Path.cwd()\n\n    def test_get_template_directories(self):\n        directories = autoreload.get_template_directories()\n        self.assertEqual(directories, {self.cwd / '/test/dir1', self.cwd / '/test/dir2', self.cwd / '/test/dir3', self.cwd / '/test/dir4'})\n\n    def test_reset_loaders(self):\n        autoreload.reset_loaders()\n        self.mock_backend.engine.template_loaders[0].reset.assert_called_once()\n\n    @patch('django.template.autoreload.get_template_directories')\n    def test_watch_for_template_changes(self, mock_get_template_directories):\n        mock_sender = MagicMock()\n        mock_get_template_directories.return_value = [self.cwd / '/test/dir1']\n        autoreload.watch_for_template_changes(mock_sender)\n        mock_sender.watch_dir.assert_called_once_with(self.cwd / '/test/dir1', '**/*')\n\n    @patch('django.template.autoreload.get_template_directories')\n    @patch('django.template.autoreload.reset_loaders')\n    def test_template_changed(self, mock_reset_loaders, mock_get_template_directories):\n        mock_get_template_directories.return_value = [self.cwd / '/test/dir1']\n        result = autoreload.template_changed(None, self.cwd / '/test/dir1/test.html')\n        mock_reset_loaders.assert_called_once()\n        self.assertTrue(result)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_642": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom pylint.config.utils import _convert_option_to_argument, _preprocess_options, _init_hook\nfrom pylint.lint.run import Run\nfrom pylint.config.exceptions import ArgumentPreprocessingError\n\nclass TestUtils(unittest.TestCase):\n\n    def test_convert_option_to_argument(self):\n        optdict = {\n            'action': 'store',\n            'default': 0,\n            'type': int,\n            'help': 'Test help',\n            'group': 'Test group'\n        }\n        arg = _convert_option_to_argument('test', optdict)\n        self.assertEqual(arg.flags, ['--test'])\n        self.assertEqual(arg.default, 0)\n\n    def test_preprocess_options(self):\n        run = Run([''])\n        args = ['--init-hook', 'test_code', '--verbose', '--rcfile', 'test.rc', 'file.py']\n        processed_args = _preprocess_options(run, args)\n        self.assertEqual(processed_args, ['file.py'])\n\n    def test_init_hook(self):\n        run = Mock()\n        _init_hook(run, 'test_code')\n        run.exec.assert_called_once_with('test_code')\n\n    def test_preprocess_options_exception(self):\n        run = Run([''])\n        args = ['--verbose', 'invalid_value']\n        with self.assertRaises(ArgumentPreprocessingError):\n            _preprocess_options(run, args)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_420": ["\nfrom django.test import TestCase\nfrom django.forms import ModelForm, ValidationError\nfrom django.db import models\nfrom django.forms.models import ModelFormMetaclass, construct_instance, fields_for_model, model_to_dict, modelform_factory, BaseModelFormSet, modelformset_factory, BaseInlineFormSet, inlineformset_factory\nfrom unittest.mock import MagicMock, patch\n\n# Dummy model for testing\nclass TestModel(models.Model):\n    test_field = models.CharField(max_length=200)\n\n# Dummy form for testing\nclass TestForm(ModelForm):\n    class Meta:\n        model = TestModel\n        fields = ['test_field']\n\n# Unit tests\nclass TestModelsForms(TestCase):\n    def test_ModelFormMetaclass(self):\n        class TestFormWithMeta(metaclass=ModelFormMetaclass):\n            class Meta:\n                model = TestModel\n                fields = ['test_field']\n\n        self.assertEqual(TestFormWithMeta.base_fields['test_field'].__class__.__name__, 'CharField')\n\n    def test_construct_instance(self):\n        form = TestForm({'test_field': 'test value'})\n        instance = construct_instance(form, TestModel())\n        self.assertEqual(instance.test_field, 'test value')\n\n    def test_fields_for_model(self):\n        fields = fields_for_model(TestModel)\n        self.assertEqual(fields['test_field'].__class__.__name__, 'CharField')\n\n    def test_model_to_dict(self):\n        instance = TestModel(test_field='test value')\n        data = model_to_dict(instance)\n        self.assertEqual(data['test_field'], 'test value')\n\n    def test_modelform_factory(self):\n        Form = modelform_factory(TestModel, fields=['test_field'])\n        self.assertTrue(issubclass(Form, ModelForm))\n\n    def test_BaseModelFormSet(self):\n        # Testing BaseModelFormSet is a bit complex as it involves formsets and queries,\n        # so we'll just check that the class can be instantiated without errors\n        try:\n            formset = BaseModelFormSet(model=TestModel)\n        except Exception as e:\n            self.fail(f\"BaseModelFormSet raised an exception: {e}\")\n\n    def test_modelformset_factory(self):\n        # Similar to BaseModelFormSet, testing modelformset_factory is complex,\n        # so we'll just check that the function returns a formset without errors\n        try:\n            FormSet = modelformset_factory(TestModel, fields=['test_field'])\n            formset = FormSet()\n        except Exception as e:\n            self.fail(f\"modelformset_factory raised an exception: {e}\")\n\n    def test_BaseInlineFormSet(self):\n        # Testing BaseInlineFormSet is also complex, so we'll just check that the class can be instantiated without errors\n        try:\n            formset = BaseInlineFormSet(model=TestModel)\n        except Exception as e:\n            self.fail(f\"BaseInlineFormSet raised an exception: {e}\")\n\n    def test_inlineformset_factory(self):\n        # Similar to BaseInlineFormSet, testing inlineformset_factory is complex,\n        # so we'll just check that the function returns a formset without errors\n        try:\n            FormSet = inlineformset_factory(TestModel, TestModel, fields=['test_field'])\n            formset = FormSet()\n        except Exception as e:\n            self.fail(f\"inlineformset_factory raised an exception: {e}\")\n"], "sample_31": ["\nimport unittest\nfrom unittest.mock import patch, mock_open\nfrom astropy.cosmology import FlatLambdaCDM\nfrom astropy.cosmology.io.latex import _FORMAT_TABLE, write_latex\n\nclass TestLatexModule(unittest.TestCase):\n    def setUp(self):\n        self.cosmology = FlatLambdaCDM(H0=70, Om0=0.3)\n\n    def test_write_latex(self):\n        # Test that the function writes to the file\n        mocked_file = mock_open()\n        with patch('builtins.open', mocked_file):\n            write_latex(self.cosmology, 'test.tex')\n            mocked_file.assert_called_once_with('test.tex', 'w')\n\n        # Test that the function raises ValueError for invalid format\n        with self.assertRaises(ValueError):\n            write_latex(self.cosmology, 'test.tex', format='invalid')\n\n        # Test that the function uses LaTeX names for the parameters when latex_names is True\n        with patch('builtins.open', mock_open()) as m:\n            write_latex(self.cosmology, 'test.tex')\n            m.assert_called_once_with('test.tex', 'w')\n            m().write.assert_any_call(_FORMAT_TABLE['H0'] + ' ')\n\n    def test_format_table(self):\n        # Test that _FORMAT_TABLE contains the expected keys\n        self.assertEqual(set(_FORMAT_TABLE.keys()), {'H0', 'Om0', 'Ode0', 'Tcmb0', 'Neff', 'm_nu', 'Ob0', 'w0', 'wa', 'wz', 'wp', 'zp'})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_64": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.http import HttpResponse, HttpResponseRedirect, JsonResponse, StreamingHttpResponse\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom django.core.exceptions import DisallowedRedirect\n\nclass TestHttpResponse(unittest.TestCase):\n    def test_init(self):\n        response = HttpResponse('test content')\n        self.assertEqual(response.content, b'test content')\n        self.assertEqual(response.status_code, 200)\n\n    def test_content_setter(self):\n        response = HttpResponse()\n        response.content = 'new content'\n        self.assertEqual(response.content, b'new content')\n\n    # Add more tests for other methods and properties as needed\n\nclass TestHttpResponseRedirect(unittest.TestCase):\n    def test_init_valid_url(self):\n        response = HttpResponseRedirect('/redirect-url')\n        self.assertEqual(response.url, '/redirect-url')\n\n    def test_init_invalid_url(self):\n        with self.assertRaises(DisallowedRedirect):\n            HttpResponseRedirect('javascript:alert(\"XSS\")')\n\n    # Add more tests for other methods and properties as needed\n\nclass TestJsonResponse(unittest.TestCase):\n    def test_init_with_dict(self):\n        response = JsonResponse({'key': 'value'})\n        self.assertEqual(response.content, b'{\"key\": \"value\"}')\n\n    def test_init_with_non_dict(self):\n        with self.assertRaises(TypeError):\n            JsonResponse('invalid data')\n\n    # Add more tests for other methods and properties as needed\n\nclass TestStreamingHttpResponse(unittest.TestCase):\n    def test_init_with_iterable(self):\n        response = StreamingHttpResponse(['chunk1', 'chunk2'])\n        self.assertEqual(b''.join(response.streaming_content), b'chunk1chunk2')\n\n    # Add more tests for other methods and properties as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_690": ["\nimport pytest\nimport warnings\n\nfrom _pytest import deprecated\n\ndef test_check_ispytest():\n    with pytest.warns(deprecated.PRIVATE):\n        deprecated.check_ispytest(False)\n\ndef test_no_warning_check_ispytest():\n    with pytest.warns(None) as record:\n        deprecated.check_ispytest(True)\n    assert len(record) == 0\n\ndef test_argument_percent_default_warning():\n    with pytest.warns(deprecated.ARGUMENT_PERCENT_DEFAULT):\n        warnings.warn(deprecated.ARGUMENT_PERCENT_DEFAULT.msg)\n\ndef test_argument_type_str_warning():\n    with pytest.warns(deprecated.ARGUMENT_TYPE_STR):\n        warnings.warn(deprecated.ARGUMENT_TYPE_STR.msg.format(typ=\"str\", names=\"test\"))\n\n# Add more tests for the other deprecated functionalities as needed\n"], "sample_159": ["\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.auth.checks import check_models_permissions, check_user_model\nfrom django.core import checks\nfrom django.test import SimpleTestCase, override_settings\n\nclass TestAuthChecks(SimpleTestCase):\n    @override_settings(AUTH_USER_MODEL='auth.User')\n    def test_check_user_model_with_default_user(self):\n        errors = check_user_model()\n        self.assertEqual(errors, [])\n\n    @override_settings(AUTH_USER_MODEL='custom_auth.CustomUser')\n    def test_check_user_model_with_custom_user(self):\n        # Assuming you have a custom user model and it's correctly configured\n        User = get_user_model()\n        User.REQUIRED_FIELDS = 'not_a_list'\n        errors = check_user_model()\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'auth.E001')\n\n        User.REQUIRED_FIELDS = [User.USERNAME_FIELD]\n        errors = check_user_model()\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'auth.E002')\n\n        User._meta.get_field(User.USERNAME_FIELD).unique = False\n        errors = check_user_model()\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'auth.W004')\n\n    def test_check_models_permissions(self):\n        # Assuming you have some models with permissions defined\n        errors = check_models_permissions()\n        self.assertEqual(errors, [])\n"], "sample_1082": ["\nimport unittest\nfrom sympy import symbols, sinh, cosh, tanh, coth, asinh, acosh, atanh, acoth, sech, csch, asech, acsch, S, I, pi, sqrt, log, exp, nan, oo, zoo\n\nclass TestHyperbolicFunctions(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_sinh(self):\n        self.assertEqual(sinh(0), 0)\n        self.assertEqual(sinh(S.Infinity), S.Infinity)\n        self.assertEqual(sinh(S.NegativeInfinity), S.NegativeInfinity)\n        self.assertEqual(sinh(nan), nan)\n        self.assertEqual(sinh(S.ComplexInfinity), nan)\n        self.assertEqual(sinh(I*pi/2), I*sin(pi/2))\n        self.assertEqual(sinh(self.x + I*pi/2).expand(), sinh(self.x)*cosh(I*pi/2) + cosh(self.x)*sinh(I*pi/2))\n        self.assertEqual(sinh(asinh(self.x)), self.x)\n        self.assertEqual(sinh(acosh(self.x)), sqrt((self.x - 1)*(self.x + 1)))\n        self.assertEqual(sinh(atanh(self.x)), self.x/sqrt(1 - self.x**2))\n        self.assertEqual(sinh(acoth(self.x)), 1/sqrt((self.x - 1)*(self.x + 1)))\n\n    def test_cosh(self):\n        self.assertEqual(cosh(0), 1)\n        self.assertEqual(cosh(S.Infinity), S.Infinity)\n        self.assertEqual(cosh(S.NegativeInfinity), S.Infinity)\n        self.assertEqual(cosh(nan), nan)\n        self.assertEqual(cosh(S.ComplexInfinity), nan)\n        self.assertEqual(cosh(I*pi/2), cos(pi/2))\n        self.assertEqual(cosh(self.x + I*pi/2).expand(), cosh(self.x)*cosh(I*pi/2) + sinh(self.x)*sinh(I*pi/2))\n        self.assertEqual(cosh(asinh(self.x)), sqrt(1 + self.x**2))\n        self.assertEqual(cosh(acosh(self.x)), self.x)\n        self.assertEqual(cosh(atanh(self.x)), 1/sqrt(1 - self.x**2))\n        self.assertEqual(cosh(acoth(self.x)), self.x/sqrt((self.x - 1)*(self.x + 1)))\n\n    def test_tanh(self):\n        self.assertEqual(tanh(0), 0)\n        self.assertEqual(tanh(S.Infinity), 1)\n        self.assertEqual(tanh(S.NegativeInfinity), -1)\n        self.assertEqual(tanh(nan), nan)\n        self.assertEqual(tanh(S.ComplexInfinity), nan)\n        self.assertEqual(tanh(I*pi/2), I*tan(pi/2))\n        self.assertEqual(tanh(self.x + I*pi/2), coth(self.x))\n        self.assertEqual(tanh(asinh(self.x)), self.x/sqrt(1 + self.x**2))\n        self.assertEqual(tanh(acosh(self.x)), sqrt((self.x - 1)/(self.x + 1)))\n        self.assertEqual(tanh(atanh(self.x)), self.x)\n        self.assertEqual(tanh(acoth(self.x)), 1/self.x)\n\n    def test_coth(self):\n        self.assertEqual(coth(0), S.ComplexInfinity)\n        self.assertEqual(coth(S.Infinity), 1)\n        self.assertEqual(coth(S.NegativeInfinity), -1)\n        self.assertEqual(coth(nan), nan)\n        self.assertEqual(coth(S.ComplexInfinity), nan)\n        self.assertEqual(coth(I*pi/2), -I*cot(pi/2))\n        self.assertEqual(coth(self.x + I*pi/2), tanh(self.x))\n        self.assertEqual(coth(asinh(self.x)), sqrt(1 + self.x**2)/self.x)\n        self.assertEqual(coth(acosh(self.x)), self.x/sqrt((self.x - 1)*(self.x + 1)))\n        self.assertEqual(coth(atanh(self.x)), 1/self.x)\n        self.assertEqual(coth(acoth(self.x)), self.x)\n\n    def test_sech(self):\n        self.assertEqual(sech(0), 1)\n        self.assertEqual(sech(S.Infinity), 0)\n        self.assertEqual(sech(S.NegativeInfinity), 0)\n        self.assertEqual(sech(nan), nan)\n        self.assertEqual(sech(S.ComplexInfinity), nan)\n        self.assertEqual(sech(I*pi/2), -I*csch(pi/2))\n        self.assertEqual(sech(asech(self.x)), self.x)\n\n    def test_csch(self):\n        self.assertEqual(csch(0), S.ComplexInfinity)\n        self.assertEqual(csch(S.Infinity), 0)\n        self.assertEqual(csch(S.NegativeInfinity), 0)\n        self.assertEqual(csch(nan), nan)\n        self.assertEqual(csch(S.ComplexInfinity), nan)\n        self.assertEqual(csch(I*pi/2), -I*sec(pi/2))\n        self.assertEqual(csch(acsch(self.x)), self.x)\n\n    def test_asech(self):\n        self.assertEqual(asech(0), S.Infinity)\n        self.assertEqual(asech(1), 0)\n        self.assertEqual(asech(-1), I*pi)\n        self.assertEqual(asech(nan), nan)\n        self.assertEqual(asech(S.ComplexInfinity), nan)\n        self.assertEqual(asech(sqrt(2)), I*pi/4)\n        self.assertEqual(asech(S.ImaginaryUnit), -I*pi/2 + log(1 + sqrt(2)))\n\n    def test_acsch(self):\n        self.assertEqual(acsch(0), S.ComplexInfinity)\n        self.assertEqual(acsch(1), log(1 + sqrt(2)))\n        self.assertEqual(acsch(-1), -log(1 + sqrt(2)))\n        self.assertEqual(acsch(nan), nan)\n        self.assertEqual(acsch(S.ComplexInfinity), 0)\n        self.assertEqual(acsch(sqrt(2)), -I*pi/4)\n        self.assertEqual(acsch(S.ImaginaryUnit), -I*pi/2)\n\n    def test_asinh(self):\n        self.assertEqual(asinh(0), 0)\n        self.assertEqual(asinh(1), log(sqrt(2) + 1))\n        self.assertEqual(asinh(-1), log(sqrt(2) - 1))\n        self.assertEqual(asinh(nan), nan)\n        self.assertEqual(asinh(S.ComplexInfinity), S.ComplexInfinity)\n        self.assertEqual(asinh(I), I*log(I + 1))\n        self.assertEqual(asinh(sinh(self.x)), self.x)\n\n    def test_acosh(self):\n        self.assertEqual(acosh(1), 0)\n        self.assertEqual(acosh(nan), nan)\n        self.assertEqual(acosh(S.ComplexInfinity), S.ComplexInfinity)\n        self.assertEqual(acosh(S.ImaginaryUnit*S.Infinity), S.Infinity + I*pi/2)\n        self.assertEqual(acosh(-S.ImaginaryUnit*S.Infinity), S.Infinity - I*pi/2)\n        self.assertEqual(acosh(sqrt(2)/2), pi/4)\n        self.assertEqual(acosh(I*sqrt(2)/2), pi/4*I)\n        self.assertEqual(acosh(cosh(self.x)), self.x)\n\n    def test_atanh(self):\n        self.assertEqual(atanh(0), 0)\n        self.assertEqual(atanh(1), S.Infinity)\n        self.assertEqual(atanh(-1), S.NegativeInfinity)\n        self.assertEqual(atanh(nan), nan)\n        self.assertEqual(atanh(S.ComplexInfinity), I*pi/2)\n        self.assertEqual(atanh(-S.ComplexInfinity), -I*pi/2)\n        self.assertEqual(atanh(I), I*log((1 + I)/2))\n        self.assertEqual(atanh(tanh(self.x)), self.x)\n\n    def test_acoth(self):\n        self.assertEqual(acoth(1), S.Infinity)\n        self.assertEqual(acoth(-1), S.NegativeInfinity)\n        self.assertEqual(acoth(nan), nan)\n        self.assertEqual(acoth(S.ComplexInfinity), 0)\n        self.assertEqual(acoth(-S.ComplexInfinity), 0)\n        self.assertEqual(acoth(I), I*log((I + 1)/2))\n        self.assertEqual(acoth(coth(self.x)), self.x)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_846": ["\nimport unittest\nimport numpy as np\nfrom sklearn.multioutput import MultiOutputRegressor, MultiOutputClassifier, ClassifierChain, RegressorChain\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.exceptions import NotFittedError\n\nclass TestMultioutput(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [2, 3], [3, 4]])\n        self.y = np.array([[1, 2], [2, 3], [3, 4]])\n        self.y_clf = np.array([[0, 1], [0, 1], [1, 0]])\n        self.estimator = LinearRegression()\n        self.estimator_clf = LogisticRegression()\n\n    def test_multioutput_regressor(self):\n        mor = MultiOutputRegressor(self.estimator)\n        mor.fit(self.X, self.y)\n        self.assertIsNotNone(mor.estimators_)\n        y_pred = mor.predict(self.X)\n        self.assertEqual(y_pred.shape, self.y.shape)\n\n    def test_multioutput_classifier(self):\n        moc = MultiOutputClassifier(self.estimator_clf)\n        moc.fit(self.X, self.y_clf)\n        self.assertIsNotNone(moc.estimators_)\n        self.assertIsNotNone(moc.classes_)\n        y_pred = moc.predict(self.X)\n        self.assertEqual(y_pred.shape, self.y_clf.shape)\n\n    def test_classifier_chain(self):\n        cc = ClassifierChain(self.estimator_clf)\n        cc.fit(self.X, self.y_clf)\n        self.assertIsNotNone(cc.estimators_)\n        self.assertIsNotNone(cc.classes_)\n        y_pred = cc.predict(self.X)\n        self.assertEqual(y_pred.shape, self.y_clf.shape)\n\n    def test_regressor_chain(self):\n        rc = RegressorChain(self.estimator)\n        rc.fit(self.X, self.y)\n        self.assertIsNotNone(rc.estimators_)\n        y_pred = rc.predict(self.X)\n        self.assertEqual(y_pred.shape, self.y.shape)\n\n    def test_not_fitted_error(self):\n        mor = MultiOutputRegressor(self.estimator)\n        with self.assertRaises(NotFittedError):\n            mor.predict(self.X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_473": ["\nimport io\nimport unittest\nfrom unittest.mock import AsyncMock, MagicMock, patch\n\nfrom django.core.handlers.asgi import ASGIHandler, ASGIRequest\nfrom django.http import HttpResponse, HttpResponseBadRequest, HttpResponseServerError\n\nclass TestASGIRequest(unittest.TestCase):\n    def setUp(self):\n        self.scope = {\n            \"type\": \"http\",\n            \"method\": \"GET\",\n            \"path\": \"/test\",\n            \"headers\": [(b\"Content-Type\", b\"text/plain\")],\n        }\n        self.body_file = io.BytesIO(b\"Test content\")\n\n    def test_init(self):\n        request = ASGIRequest(self.scope, self.body_file)\n        self.assertEqual(request.method, \"GET\")\n        self.assertEqual(request.path, \"/test\")\n        self.assertEqual(request.META[\"CONTENT_TYPE\"], \"text/plain\")\n\n    def test_get_property(self):\n        request = ASGIRequest(self.scope, self.body_file)\n        self.assertEqual(request.GET, {})\n\n    def test_post_and_files_properties(self):\n        self.scope[\"method\"] = \"POST\"\n        self.scope[\"headers\"].append((b\"Content-Type\", b\"application/x-www-form-urlencoded\"))\n        self.body_file = io.BytesIO(b\"key1=value1&key2=value2\")\n        request = ASGIRequest(self.scope, self.body_file)\n        self.assertEqual(request.POST[\"key1\"], \"value1\")\n        self.assertEqual(request.FILES, {})\n\n    def test_cookies_property(self):\n        self.scope[\"headers\"].append((b\"Cookie\", b\"cookie1=value1; cookie2=value2\"))\n        request = ASGIRequest(self.scope, self.body_file)\n        self.assertEqual(request.COOKIES[\"cookie1\"], \"value1\")\n        self.assertEqual(request.COOKIES[\"cookie2\"], \"value2\")\n\nclass TestASGIHandler(unittest.IsolatedAsyncioTestCase):\n    def setUp(self):\n        self.handler = ASGIHandler()\n        self.scope = {\n            \"type\": \"http\",\n            \"method\": \"GET\",\n            \"path\": \"/test\",\n            \"headers\": [],\n        }\n        self.receive = AsyncMock()\n        self.send = AsyncMock()\n\n    async def test_call_with_invalid_type(self):\n        self.scope[\"type\"] = \"websocket\"\n        with self.assertRaises(ValueError):\n            await self.handler(self.scope, self.receive, self.send)\n\n    async def test_call_with_valid_type(self):\n        self.receive.return_value = {\"type\": \"http.disconnect\"}\n        await self.handler(self.scope, self.receive, self.send)\n\n    @patch('django.core.handlers.asgi.ASGIHandler.run_get_response')\n    @patch('django.core.handlers.asgi.ASGIHandler.send_response')\n    async def test_handle(self, mock_send_response, mock_run_get_response):\n        mock_run_get_response.return_value = HttpResponse()\n        await self.handler.handle(self.scope, self.receive, self.send)\n        mock_send_response.assert_called_once()\n\n    @patch('django.core.handlers.asgi.ASGIRequest')\n    async def test_create_request_with_unicode_decode_error(self, mock_request):\n        mock_request.side_effect = UnicodeDecodeError(\"test\", b\"test\", 1, 2, \"test\")\n        request, response = self.handler.create_request(self.scope, self.body_file)\n        self.assertIsNone(request)\n        self.assertIsInstance(response, HttpResponseBadRequest)\n\n    @patch('django.core.handlers.asgi.ASGIRequest')\n    def test_create_request_with_request_data_too_big(self, mock_request):\n        from django.core.exceptions import RequestDataTooBig\n        mock_request.side_effect = RequestDataTooBig()\n        request, response = self.handler.create_request(self.scope, self.body_file)\n        self.assertIsNone(request)\n        self.assertEqual(response.status_code, 413)\n\n    def test_handle_uncaught_exception(self):\n        request = MagicMock()\n        resolver = MagicMock()\n        exc_info = (TypeError, TypeError(\"Test exception\"), None)\n        response = self.handler.handle_uncaught_exception(request, resolver, exc_info)\n        self.assertIsInstance(response, HttpResponseServerError)\n        self.assertEqual(response.status_code, 500)\n        self.assertEqual(response[\"Content-Type\"], \"text/plain\")\n\n    async def test_send_response(self):\n        response = HttpResponse(\"Test content\")\n        await self.handler.send_response(response, self.send)\n        self.send.assert_called()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_746": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing import FunctionTransformer\n\nclass TestFunctionTransformer(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4]])\n        self.y = np.array([0, 1])\n\n    def test_identity_transform(self):\n        ft = FunctionTransformer()\n        ft.fit(self.X)\n        transformed = ft.transform(self.X)\n        np.testing.assert_array_equal(transformed, self.X)\n\n    def test_custom_transform(self):\n        def custom_func(X):\n            return X * 2\n\n        ft = FunctionTransformer(func=custom_func)\n        ft.fit(self.X)\n        transformed = ft.transform(self.X)\n        np.testing.assert_array_equal(transformed, self.X * 2)\n\n    def test_custom_inverse_transform(self):\n        def custom_func(X):\n            return X * 2\n\n        def custom_inverse_func(X):\n            return X / 2\n\n        ft = FunctionTransformer(func=custom_func, inverse_func=custom_inverse_func)\n        ft.fit(self.X)\n        inverse_transformed = ft.inverse_transform(ft.transform(self.X))\n        np.testing.assert_array_equal(inverse_transformed, self.X)\n\n    def test_pass_y_transform(self):\n        def custom_func(X, y):\n            return X + y.reshape(-1, 1)\n\n        ft = FunctionTransformer(func=custom_func, pass_y=True)\n        ft.fit(self.X, self.y)\n        transformed = ft.transform(self.X, self.y)\n        np.testing.assert_array_equal(transformed, self.X + self.y.reshape(-1, 1))\n\n    def test_kw_args_transform(self):\n        def custom_func(X, multiplier=1):\n            return X * multiplier\n\n        ft = FunctionTransformer(func=custom_func, kw_args={'multiplier': 3})\n        ft.fit(self.X)\n        transformed = ft.transform(self.X)\n        np.testing.assert_array_equal(transformed, self.X * 3)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1184": ["\nimport unittest\nfrom sympy import symbols, pi, I, sqrt, Matrix, NotImplementedError\nfrom sympy.physics.optics.gaussopt import (\n    RayTransferMatrix, FreeSpace, FlatRefraction, CurvedRefraction, FlatMirror,\n    CurvedMirror, ThinLens, GeometricRay, BeamParameter, waist2rayleigh,\n    rayleigh2waist, geometric_conj_ab, geometric_conj_af, gaussian_conj,\n    conjugate_gauss_beams,\n)\n\nclass TestGaussOpt(unittest.TestCase):\n\n    def setUp(self):\n        self.wavelen = symbols('wavelen')\n        self.z = symbols('z')\n        self.z_r = symbols('z_r')\n        self.w = symbols('w')\n        self.n = symbols('n')\n        self.d = symbols('d')\n        self.n1 = symbols('n1')\n        self.n2 = symbols('n2')\n        self.R = symbols('R')\n        self.h = symbols('h')\n        self.angle = symbols('angle')\n        self.f = symbols('f')\n        self.s_in = symbols('s_in')\n        self.waist_in = symbols('waist_in')\n        self.waist_out = symbols('waist_out')\n\n    def test_RayTransferMatrix(self):\n        mat = RayTransferMatrix(1, 2, 3, 4)\n        self.assertEqual(mat.A, 1)\n        self.assertEqual(mat.B, 2)\n        self.assertEqual(mat.C, 3)\n        self.assertEqual(mat.D, 4)\n\n        with self.assertRaises(ValueError):\n            RayTransferMatrix(1, 2, 3)\n\n    def test_FreeSpace(self):\n        fs = FreeSpace(self.d)\n        self.assertEqual(fs.A, 1)\n        self.assertEqual(fs.B, self.d)\n        self.assertEqual(fs.C, 0)\n        self.assertEqual(fs.D, 1)\n\n    def test_FlatRefraction(self):\n        fr = FlatRefraction(self.n1, self.n2)\n        self.assertEqual(fr.A, 1)\n        self.assertEqual(fr.B, 0)\n        self.assertEqual(fr.C, 0)\n        self.assertEqual(fr.D, self.n1 / self.n2)\n\n    def test_CurvedRefraction(self):\n        cr = CurvedRefraction(self.R, self.n1, self.n2)\n        self.assertEqual(cr.A, 1)\n        self.assertEqual(cr.B, 0)\n        self.assertEqual(cr.C, (self.n1 - self.n2) / (self.R * self.n2))\n        self.assertEqual(cr.D, self.n1 / self.n2)\n\n    def test_FlatMirror(self):\n        fm = FlatMirror()\n        self.assertEqual(fm.A, 1)\n        self.assertEqual(fm.B, 0)\n        self.assertEqual(fm.C, 0)\n        self.assertEqual(fm.D, 1)\n\n    def test_CurvedMirror(self):\n        cm = CurvedMirror(self.R)\n        self.assertEqual(cm.A, 1)\n        self.assertEqual(cm.B, 0)\n        self.assertEqual(cm.C, -2 / self.R)\n        self.assertEqual(cm.D, 1)\n\n    def test_ThinLens(self):\n        tl = ThinLens(self.f)\n        self.assertEqual(tl.A, 1)\n        self.assertEqual(tl.B, 0)\n        self.assertEqual(tl.C, -1 / self.f)\n        self.assertEqual(tl.D, 1)\n\n    def test_GeometricRay(self):\n        gr = GeometricRay(self.h, self.angle)\n        self.assertEqual(gr.height, self.h)\n        self.assertEqual(gr.angle, self.angle)\n\n        with self.assertRaises(ValueError):\n            GeometricRay(self.h)\n\n    def test_BeamParameter(self):\n        bp = BeamParameter(self.wavelen, self.z, z_r=self.z_r, n=self.n)\n        self.assertEqual(bp.q, self.z + I * self.z_r)\n\n        bp = BeamParameter(self.wavelen, self.z, w=self.w)\n        self.assertEqual(bp.z_r, waist2rayleigh(self.w, self.wavelen, self.n))\n\n        with self.assertRaises(ValueError):\n            BeamParameter(self.wavelen, self.z)\n\n    def test_waist2rayleigh(self):\n        z_r = waist2rayleigh(self.w, self.wavelen, self.n)\n        self.assertEqual(z_r, self.w ** 2 * self.n * pi / self.wavelen)\n\n    def test_rayleigh2waist(self):\n        w = rayleigh2waist(self.z_r, self.wavelen)\n        self.assertEqual(w, sqrt(self.z_r / pi * self.wavelen))\n\n    def test_geometric_conj_ab(self):\n        a, b = symbols('a b')\n        f = geometric_conj_ab(a, b)\n        self.assertEqual(f, a * b / (a + b))\n\n    def test_geometric_conj_af(self):\n        f = geometric_conj_af(self.a, self.f)\n        self.assertEqual(f, -geometric_conj_ab(self.a, -self.f))\n\n    def test_gaussian_conj(self):\n        s_out, z_r_out, m = gaussian_conj(self.s_in, self.z_r, self.f)\n        self.assertEqual(s_out, 1 / (-1 / (self.s_in + self.z_r ** 2 / (self.s_in - self.f)) + 1 / self.f))\n        self.assertEqual(m, 1 / sqrt((1 - (self.s_in / self.f) ** 2) + (self.z_r / self.f) ** 2))\n        self.assertEqual(z_r_out, self.z_r / ((1 - (self.s_in / self.f) ** 2) + (self.z_r / self.f) ** 2))\n\n    def test_conjugate_gauss_beams(self):\n        s_in, s_out, f = conjugate_gauss_beams(self.wavelen, self.waist_in, self.waist_out, f=self.f)\n        self.assertEqual(s_in, self.f * (1 - sqrt(1 / (self.waist_out / self.waist_in) ** 2 - waist2rayleigh(self.waist_in, self.wavelen) ** 2 / self.f ** 2)))\n        self.assertEqual(s_out, gaussian_conj(s_in, waist2rayleigh(self.waist_in, self.wavelen), self.f)[0])\n        self.assertEqual(f, self.f)\n\n        with self.assertRaises(ValueError):\n            conjugate_gauss_beams(self.wavelen, self.waist_in, self.waist_out)\n\n        with self.assertRaises(NotImplementedError):\n            conjugate_gauss_beams(self.wavelen, self.waist_in, self.waist_out, dist=self.f)\n\n        with self.assertRaises(NotImplementedError):\n            conjugate_gauss_beams(self.wavelen, self.waist_in, self.waist_out, s_in=self.s_in)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_360": ["\nfrom django.test import RequestFactory, TestCase\nfrom django.http import HttpResponse\nfrom django.core.cache import cache\nfrom django.middleware.cache import UpdateCacheMiddleware, FetchFromCacheMiddleware, CacheMiddleware\nfrom unittest.mock import Mock\n\nclass CacheMiddlewareTestCase(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.get_response = Mock(return_value=HttpResponse())\n\n    def test_update_cache_middleware(self):\n        middleware = UpdateCacheMiddleware(self.get_response)\n        request = self.factory.get('/')\n        request._cache_update_cache = True\n        response = HttpResponse('Test response')\n        middleware.process_response(request, response)\n        self.assertEqual(cache.get('GET:/'), response)\n\n    def test_fetch_from_cache_middleware(self):\n        middleware = FetchFromCacheMiddleware(self.get_response)\n        request = self.factory.get('/')\n        cache_key = 'GET:/'\n        cache.set(cache_key, 'Cached response')\n        response = middleware.process_request(request)\n        self.assertEqual(response, 'Cached response')\n\n    def test_cache_middleware(self):\n        middleware = CacheMiddleware(self.get_response)\n        request = self.factory.get('/')\n        response = middleware.process_request(request)\n        self.assertIsNone(response)\n        response = middleware.process_response(request, HttpResponse('Test response'))\n        self.assertEqual(cache.get('GET:/'), response)\n"], "sample_1144": ["\nimport unittest\nfrom sympy import (Rational, Float, I, sqrt, cbrt, oo, nan, pi, E, Integer, S, factorial,\n                   Catalan, EulerGamma, GoldenRatio, TribonacciConstant, cos, exp, Number, zoo, log,\n                   Mul, Pow, Tuple, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci,\n                   RealField, sympify, srepr, Dummy, Sum)\nfrom sympy.core.numbers import (igcd, ilcm, igcdex, seterr, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse)\nfrom sympy.core.power import integer_nthroot, isqrt, integer_log\nfrom mpmath.rational import mpq\nfrom sympy.polys.numberfields import to_number_field\nfrom mpmath.libmp.libmpf import fnan\n\nclass TestNumbers(unittest.TestCase):\n\n    def setUp(self):\n        self.r1 = Rational(1, 2)\n        self.f1 = Float(3.14)\n        self.i = I\n        self.p = pi\n        self.e = E\n        self.n1 = Integer(5)\n        self.g = GoldenRatio\n        self.t = TribonacciConstant\n        self.c = Catalan\n        self.eg = EulerGamma\n\n    def test_rational(self):\n        self.assertEqual(self.r1.__str__(), '1/2')\n        self.assertEqual(self.r1.limit_denominator(10), Rational(1, 2))\n\n    def test_float(self):\n        self.assertAlmostEqual(self.f1.__float__(), 3.14)\n        self.assertEqual(self.f1.limit_denominator(10), Rational(157, 50))\n\n    def test_imaginary_unit(self):\n        self.assertEqual(self.i.__abs__(), S.One)\n        self.assertEqual(self.i._eval_power(2), -S.One)\n\n    def test_pi(self):\n        self.assertGreater(self.p, S.Three)\n        self.assertLess(self.p, S.Four)\n        self.assertTrue(self.p.is_irrational)\n\n    def test_e(self):\n        self.assertEqual(exp(1), self.e)\n        self.assertEqual(log(self.e), S.One)\n\n    def test_integer(self):\n        self.assertEqual(self.n1.__int__(), 5)\n        self.assertEqual(self.n1._eval_power(2), 25)\n\n    def test_golden_ratio(self):\n        self.assertGreater(self.g, S.One)\n        self.assertTrue(self.g.is_irrational)\n\n    def test_tribonacci_constant(self):\n        self.assertGreater(self.t, S.One)\n        self.assertTrue(self.t.is_irrational)\n\n    def test_catalan(self):\n        self.assertGreater(self.c, S.Zero)\n        self.assertLess(self.c, S.One)\n\n    def test_euler_gamma(self):\n        self.assertGreater(self.eg, S.Zero)\n        self.assertLess(self.eg, S.One)\n\n    def test_igcd(self):\n        self.assertEqual(igcd(15, 20), 5)\n\n    def test_ilcm(self):\n        self.assertEqual(ilcm(15, 20), 60)\n\n    def test_igcdex(self):\n        self.assertEqual(igcdex(15, 20), (5, -1, 1))\n\n    def test_seterr(self):\n        with self.assertRaises(ValueError):\n            seterr(divide='invalid')\n\n    def test_igcd2(self):\n        self.assertEqual(igcd"], "sample_1006": ["\nimport unittest\nfrom sympy import symbols\nfrom sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n\nclass TestVector(unittest.TestCase):\n    def setUp(self):\n        self.N = ReferenceFrame('N')\n        self.q1 = dynamicsymbols('q1')\n        self.A = self.N.orientnew('A', 'Axis', [self.q1, self.N.y])\n        self.v1 = 2 * self.N.x + 3 * self.N.y + 4 * self.N.z\n        self.v2 = 5 * self.A.x + 6 * self.A.y + 7 * self.A.z\n\n    def test_addition(self):\n        result = self.v1 + self.v2\n        expected = 2 * self.N.x + 3 * self.N.y + 4 * self.N.z + 5 * self.A.x.express(self.N) + 6 * self.A.y.express(self.N) + 7 * self.A.z.express(self.N)\n        self.assertEqual(result, expected)\n\n    def test_subtraction(self):\n        result = self.v1 - self.v2\n        expected = 2 * self.N.x + 3 * self.N.y + 4 * self.N.z - 5 * self.A.x.express(self.N) - 6 * self.A.y.express(self.N) - 7 * self.A.z.express(self.N)\n        self.assertEqual(result, expected)\n\n    def test_multiplication(self):\n        result = 2 * self.v1\n        expected = 4 * self.N.x + 6 * self.N.y + 8 * self.N.z\n        self.assertEqual(result, expected)\n\n    def test_division(self):\n        result = self.v1 / 2\n        expected = self.N.x + (3/2) * self.N.y + 2 * self.N.z\n        self.assertEqual(result, expected)\n\n    def test_dot_product(self):\n        result = dot(self.v1, self.v2)\n        expected = 2 * 5 + 3 * 6 + 4 * 7\n        self.assertEqual(result, expected)\n\n    def test_cross_product(self):\n        result = self.v1 ^ self.v2\n        expected = 3 * 7 * self.N.z - 4 * 6 * self.N.y + 2 * 7 * self.N.y - 3 * 5 * self.N.z - 2 * 6 * self.N.x + 4 * 5 * self.N.x\n        self.assertEqual(result, expected)\n\n    def test_magnitude(self):\n        result = self.v1.magnitude()\n        expected = symbols('sqrt(29)')\n        self.assertEqual(result, expected)\n\n    def test_normalize(self):\n        result = self.v1.normalize()\n        expected = self.v1 / self.v1.magnitude()\n        self.assertEqual(result, expected)\n\n    def test_express(self):\n        result = self.v2.express(self.N)\n        expected = 5 * self.A.x.express(self.N) + 6 * self.A.y.express(self.N) + 7 * self.A.z.express(self.N)\n        self.assertEqual(result, expected)\n\n    def test_subs(self):\n        result = self.v1.subs(self.q1, 0)\n        expected = 2 * self.N.x + 3 * self.N.y + 4 * self.N.z\n        self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_250": ["\nfrom datetime import date, datetime, timedelta\nimport pytz\nfrom django.test import SimpleTestCase\nfrom django.utils import dateformat, timezone\nfrom django.utils.dateformat import DateFormat, TimeFormat, format, time_format\n\nclass DateFormatTests(SimpleTestCase):\n    def test_date_format(self):\n        dt = datetime(2022, 3, 14, 12, 30, 0)\n        df = DateFormat(dt)\n        self.assertEqual(df.format('jS F Y H:i'), '14th March 2022 12:30')\n\n    def test_time_format(self):\n        dt = datetime(2022, 3, 14, 12, 30, 0)\n        tf = TimeFormat(dt)\n        self.assertEqual(tf.format('g:i a'), '12:30 p.m.')\n\n    def test_date_time_format(self):\n        dt = datetime(2022, 3, 14, 12, 30, 0)\n        self.assertEqual(format(dt, 'jS F Y H:i'), '14th March 2022 12:30')\n\n    def test_time_only_format(self):\n        t = datetime.now().time()\n        self.assertEqual(time_format(t, 'g:i a'), time_format(datetime.now(), 'g:i a'))\n\n    def test_date_only_format(self):\n        d = date(2022, 3, 14)\n        df = DateFormat(d)\n        self.assertEqual(df.format('jS F Y'), '14th March 2022')\n\n    def test_timezone_format(self):\n        dt = datetime(2022, 3, 14, 12, 30, 0, tzinfo=pytz.timezone('Europe/London'))\n        tf = TimeFormat(dt)\n        self.assertEqual(tf.format('T'), 'BST')\n\n    def test_invalid_format_specifier(self):\n        d = date(2022, 3, 14)\n        df = DateFormat(d)\n        with self.assertRaises(TypeError):\n            df.format('jS F Y H:i')\n\n    def test_format_with_escaped_characters(self):\n        dt = datetime(2022, 3, 14, 12, 30, 0)\n        df = DateFormat(dt)\n        self.assertEqual(df.format('j\\\\S F Y H\\\\:i'), '14\\\\S March 2022 12\\\\:30')\n\n    def test_format_with_unicode_characters(self):\n        dt = datetime(2022, 3, 14, 12, 30, 0)\n        df = DateFormat(dt)\n        self.assertEqual(df.format('jS F Y \u00e0 H:i'), '14th March 2022 \u00e0 12:30')\n"], "sample_0": ["\nimport unittest\nfrom io import StringIO\nimport numpy as np\nfrom astropy.table import Table\nfrom astropy.io.ascii.ecsv import Ecsv, DELIMITERS\n\nclass TestEcsv(unittest.TestCase):\n    def setUp(self):\n        self.table = Table([(1, 2, 3), ('a', 'b', 'c')], names=('a', 'b'))\n\n    def test_delimiters(self):\n        self.assertIn(' ', DELIMITERS)\n        self.assertIn(',', DELIMITERS)\n\n    def test_read_write(self):\n        with StringIO() as f:\n            self.table.write(f, format='ascii.ecsv')\n            f.seek(0)\n            table2 = Table.read(f, format='ascii.ecsv')\n        self.assertEqual(self.table, table2)\n\n    def test_invalid_delimiter(self):\n        with self.assertRaises(ValueError):\n            Ecsv().write(self.table, format='ascii.ecsv', delimiter='\\t')\n\n    def test_invalid_datatype(self):\n        self.table['a'].dtype = 'datetime64'\n        with self.assertRaises(ValueError):\n            Ecsv().write(self.table, format='ascii.ecsv')\n\n    def test_invalid_json(self):\n        self.table['a'] = np.array(['[1, 2, 3', 'a', 'c'], dtype='str')\n        with self.assertRaises(ValueError):\n            Ecsv().read(self.table)\n"], "sample_570": ["\nimport unittest\nimport numpy as np\nfrom seaborn._statistics import KDE, Histogram, ECDF, EstimateAggregator, _validate_errorbar_arg\n\nclass TestStatistics(unittest.TestCase):\n    def setUp(self):\n        self.data = np.random.normal(size=100)\n        self.weights = np.ones(100)\n\n    def test_kde_univariate(self):\n        kde = KDE()\n        density, support = kde(self.data)\n        self.assertEqual(len(density), kde.gridsize)\n        self.assertEqual(len(support), kde.gridsize)\n        self.assertGreater(density.sum(), 0)\n\n    def test_kde_bivariate(self):\n        kde = KDE()\n        density, support = kde(self.data, self.data)\n        self.assertEqual(density.shape, (kde.gridsize, kde.gridsize))\n        self.assertEqual(len(support), 2)\n        self.assertEqual(len(support[0]), kde.gridsize)\n        self.assertEqual(len(support[1]), kde.gridsize)\n\n    def test_histogram_univariate(self):\n        hist = Histogram()\n        hist_values, bin_edges = hist(self.data)\n        self.assertEqual(len(hist_values), len(bin_edges) - 1)\n\n    def test_histogram_bivariate(self):\n        hist = Histogram()\n        hist_values, bin_edges = hist(self.data, self.data)\n        self.assertEqual(hist_values.shape, (len(bin_edges[0]) - 1, len(bin_edges[1]) - 1))\n\n    def test_ecdf_univariate(self):\n        ecdf = ECDF()\n        cdf_values, x_values = ecdf(self.data)\n        self.assertEqual(len(cdf_values), len(x_values))\n        self.assertTrue(np.all(cdf_values >= 0) and np.all(cdf_values <= 1))\n\n    def test_ecdf_bivariate(self):\n        ecdf = ECDF()\n        with self.assertRaises(NotImplementedError):\n            ecdf(self.data, self.data)\n\n    def test_estimate_aggregator(self):\n        agg = EstimateAggregator(np.mean, errorbar=\"ci\")\n        result = agg(dict(var=self.data), \"var\")\n        self.assertIn(\"var\", result)\n        self.assertIn(\"varmin\", result)\n        self.assertIn(\"varmax\", result)\n        self.assertGreater(result[\"varmax\"], result[\"varmin\"])\n\n    def test_validate_errorbar_arg(self):\n        method, level = _validate_errorbar_arg(\"ci\")\n        self.assertEqual(method, \"ci\")\n        self.assertEqual(level, 95)\n\n        method, level = _validate_errorbar_arg((\"se\", 2))\n        self.assertEqual(method, \"se\")\n        self.assertEqual(level, 2)\n\n        with self.assertRaises(ValueError):\n            _validate_errorbar_arg(\"invalid_method\")\n\n        with self.assertRaises(TypeError):\n            _validate_errorbar_arg((\"se\", \"invalid_level\"))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_795": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing.data import QuantileTransformer\n\nclass TestQuantileTransformer(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]])\n        self.qt = QuantileTransformer(n_quantiles=10, random_state=0)\n\n    def test_fit(self):\n        self.qt.fit(self.X)\n        self.assertEqual(self.qt.n_quantiles_, 10)\n        self.assertEqual(self.qt.quantiles_.shape, (10, 2))\n\n    def test_transform(self):\n        self.qt.fit(self.X)\n        transformed_X = self.qt.transform(self.X)\n        self.assertEqual(transformed_X.shape, (3, 2))\n\n    def test_inverse_transform(self):\n        self.qt.fit(self.X)\n        transformed_X = self.qt.transform(self.X)\n        inverse_transformed_X = self.qt.inverse_transform(transformed_X)\n        np.testing.assert_almost_equal(inverse_transformed_X, self.X, decimal=2)\n\n    def test_sparse_input(self):\n        sparse_X = sparse.csr_matrix(self.X)\n        self.qt.fit(sparse_X)\n        transformed_sparse_X = self.qt.transform(sparse_X)\n        self.assertEqual(transformed_sparse_X.shape, (3, 2))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_530": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nimport numpy as np\nimport matplotlib as mpl\nfrom matplotlib.offsetbox import (AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n                                  OffsetImage, TextArea, _get_packed_offsets, HPacker, VPacker)\nfrom matplotlib.text import Text\nfrom matplotlib.transforms import Affine2D, TransformedBbox, Bbox\nfrom matplotlib.backend_bases import RendererBase\n\nclass TestOffsetBox(unittest.TestCase):\n\n    def setUp(self):\n        self.renderer = MagicMock(spec=RendererBase)\n        self.renderer.points_to_pixels.return_value = 1.0\n\n    def test_offsetbox_init(self):\n        box = OffsetBox()\n        self.assertIsNone(box.axes)\n        self.assertIsNone(box.figure)\n        self.assertEqual(box.get_children(), [])\n        self.assertEqual(box.get_offset(0, 0, 0, 0, self.renderer), (0, 0))\n\n    def test_textarea_get_extent(self):\n        textarea = TextArea(\"Test\")\n        textarea.set_transform(Affine2D())\n        textarea.set_offset((0, 0))\n        w, h, xd, yd = textarea.get_extent(self.renderer)\n        self.assertIsInstance(w, float)\n        self.assertIsInstance(h, float)\n        self.assertIsInstance(xd, float)\n        self.assertIsInstance(yd, float)\n\n    def test_drawingarea_get_extent(self):\n        drawingarea = DrawingArea(width=100, height=100)\n        drawingarea.set_transform(Affine2D())\n        drawingarea.set_offset((0, 0))\n        w, h, xd, yd = drawingarea.get_extent(self.renderer)\n        self.assertEqual(w, 100.0)\n        self.assertEqual(h, 100.0)\n        self.assertEqual(xd, 0.0)\n        self.assertEqual(yd, 0.0)\n\n    # Add more tests for other classes and methods as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1000": ["\nimport unittest\nfrom sympy import symbols, Product, factorial, S, oo, pi, gamma, simplify, exp, Sum, log, cos, RisingFactorial, Rational, Function, sqrt\n\nclass TestProduct(unittest.TestCase):\n    def setUp(self):\n        self.i, self.k, self.m, self.n, self.a, self.b, self.x = symbols('i k m n a b x', integer=True)\n\n    def test_product_evaluation(self):\n        self.assertEqual(Product(self.k, (self.k, 1, self.m)).doit(), factorial(self.m))\n        self.assertEqual(Product(self.k**2, (self.k, 1, self.m)).doit(), factorial(self.m)**2)\n\n    def test_wallis_product(self):\n        W = Product(2*self.i/(2*self.i-1) * 2*self.i/(2*self.i+1), (self.i, 1, oo))\n        W2 = Product(2*self.i/(2*self.i-1)*2*self.i/(2*self.i+1), (self.i, 1, self.n))\n        Pe = (pi*self.x * Product(1 - self.x**2/self.k**2, (self.k, 1, self.n))).subs(self.x, pi/2).doit().rewrite(gamma)\n        self.assertEqual(W.doit(), W)\n        self.assertEqual(W2.doit(), 2**(-2*self.n)*4**self.n*factorial(self.n)**2/(RisingFactorial(S(1)/2, self.n)*RisingFactorial(S(3)/2, self.n)))\n        self.assertEqual(simplify(Pe), sin(pi**2/2)*gamma(self.n + 1 + pi/2)*gamma(self.n - pi/2 + 1)/gamma(self.n + 1)**2)\n\n    def test_empty_product(self):\n        self.assertEqual(Product(self.i, (self.i, self.n, self.n-1)).doit(), 1)\n\n    def test_product_rewrite(self):\n        self.assertEqual(Product(self.x, (self.i, self.a, self.b))._eval_rewrite_as_Sum(), exp(Sum(log(self.x), (self.i, self.a, self.b))))\n\n    def test_product_is_convergent(self):\n        self.assertTrue(Product(cos(pi/self.n), (self.n, 1, oo)).is_convergent())\n        self.assertFalse(Product(exp(-self.n**2), (self.n, 1, oo)).is_convergent())\n\n    def test_product_reverse_order(self):\n        P = Product(self.x, (self.x, self.a, self.b))\n        Pr = P.reverse_order(self.x)\n        self.assertEqual(Pr.doit(), 1/RisingFactorial(self.b + 1, self.a - self.b - 1))\n        self.assertEqual(simplify(Pr.doit()), gamma(self.b + 1)/gamma(self.a))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_893": ["\nimport unittest\nimport numpy as np\nfrom sklearn.cluster import MiniBatchKMeans\n\nclass TestMiniBatchKMeans(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[1, 2], [1, 4], [1, 0],\n                           [4, 2], [4, 0], [4, 4],\n                           [4, 5], [0, 1], [2, 2],\n                           [3, 2], [5, 5], [1, -1]])\n\n    def test_fit(self):\n        kmeans = MiniBatchKMeans(n_clusters=2, random_state=0, batch_size=6, max_iter=10)\n        kmeans.fit(self.X)\n        self.assertIsNotNone(kmeans.cluster_centers_)\n        self.assertEqual(kmeans.cluster_centers_.shape, (2, 2))\n\n    def test_predict(self):\n        kmeans = MiniBatchKMeans(n_clusters=2, random_state=0, batch_size=6, max_iter=10).fit(self.X)\n        predictions = kmeans.predict([[0, 0], [4, 4]])\n        self.assertEqual(len(predictions), 2)\n\n    def test_partial_fit(self):\n        kmeans = MiniBatchKMeans(n_clusters=2, random_state=0, batch_size=6)\n        kmeans.partial_fit(self.X[0:6,:])\n        kmeans.partial_fit(self.X[6:12,:])\n        self.assertIsNotNone(kmeans.cluster_centers_)\n        self.assertEqual(kmeans.cluster_centers_.shape, (2, 2))\n\n    def test_labels_inertia_minibatch(self):\n        kmeans = MiniBatchKMeans(n_clusters=2, random_state=0, batch_size=6, max_iter=10).fit(self.X)\n        labels, inertia = kmeans._labels_inertia_minibatch(self.X, sample_weight=None)\n        self.assertEqual(len(labels), self.X.shape[0])\n        self.assertIsInstance(inertia, float)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1137": ["\nimport unittest\nfrom sympy.physics.units import (amount_of_substance, convert_to, find_unit, volume, kilometer, joule)\nfrom sympy.physics.units.util import quantity_simplify, check_dimensions, _get_conversion_matrix_for_expr\nfrom sympy import symbols, S\nfrom sympy.physics.units import UnitSystem, Dimension, Quantity\nfrom sympy.physics.units.systems.si import SI\n\nclass TestUnitUtil(unittest.TestCase):\n\n    def setUp(self):\n        self.unit_system = SI()\n\n    def test_quantity_simplify(self):\n        x = symbols('x', dimension=volume)\n        expr = 2 * amount_of_substance * x\n        simplified = quantity_simplify(expr)\n        self.assertEqual(simplified, 2 * x)\n\n    def test_check_dimensions(self):\n        x = symbols('x', dimension=volume)\n        expr = 2 * amount_of_substance + x\n        with self.assertRaises(ValueError):\n            check_dimensions(expr)\n\n    def test_convert_to(self):\n        expr = 2 * kilometer\n        converted = convert_to(expr, joule)\n        self.assertEqual(converted, 2 * kilometer)\n\n    def test_get_conversion_matrix_for_expr(self):\n        expr = 2 * kilometer\n        target_units = [joule]\n        result = _get_conversion_matrix_for_expr(expr, target_units, self.unit_system)\n        self.assertIsNone(result)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_285": ["\nimport os\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.conf import settings\nfrom django.core.checks import Error, Warning\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.core.files.storage import FileSystemStorage\nfrom django.contrib.staticfiles.finders import (\n    BaseFinder,\n    FileSystemFinder,\n    AppDirectoriesFinder,\n    BaseStorageFinder,\n    DefaultStorageFinder,\n    find,\n    get_finder,\n)\n\nclass TestBaseFinder(unittest.TestCase):\n    def test_check_not_implemented(self):\n        with self.assertRaises(NotImplementedError):\n            BaseFinder().check()\n\n    def test_find_not_implemented(self):\n        with self.assertRaises(NotImplementedError):\n            BaseFinder().find('path')\n\n    def test_list_not_implemented(self):\n        with self.assertRaises(NotImplementedError):\n            BaseFinder().list([])\n\nclass TestFileSystemFinder(unittest.TestCase):\n    @patch('django.contrib.staticfiles.finders.settings.STATICFILES_DIRS', [('/static/', '/path/')])\n    def test_file_system_finder(self):\n        finder = FileSystemFinder()\n        self.assertIsInstance(finder.storages['/path/'], FileSystemStorage)\n\n    @patch('django.contrib.staticfiles.finders.settings.STATICFILES_DIRS', [('/static/', '/path/')])\n    @patch('django.contrib.staticfiles.finders.settings.STATIC_ROOT', '/path/')\n    def test_file_system_finder_check_error(self):\n        finder = FileSystemFinder()\n        errors = finder.check()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Error)\n\n    @patch('django.contrib.staticfiles.finders.settings.STATICFILES_DIRS', [('/static/', '/nonexistent/')])\n    def test_file_system_finder_check_warning(self):\n        finder = FileSystemFinder()\n        errors = finder.check()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Warning)\n\nclass TestAppDirectoriesFinder(unittest.TestCase):\n    @patch('django.contrib.staticfiles.finders.apps.get_app_configs')\n    def test_app_directories_finder(self, mock_get_app_configs):\n        mock_get_app_configs.return_value = [Mock(name='app1', path='/app1/')]\n        finder = AppDirectoriesFinder()\n        self.assertIsInstance(finder.storages['app1'], FileSystemStorage)\n\nclass TestBaseStorageFinder(unittest.TestCase):\n    def test_base_storage_finder_improperly_configured(self):\n        with self.assertRaises(ImproperlyConfigured):\n            BaseStorageFinder()\n\nclass TestDefaultStorageFinder(unittest.TestCase):\n    @patch('django.contrib.staticfiles.finders.default_storage')\n    def test_default_storage_finder(self, mock_default_storage):\n        mock_default_storage.base_location = '/path/'\n        finder = DefaultStorageFinder()\n        self.assertEqual(finder.storage, mock_default_storage)\n\n    @patch('django.contrib.staticfiles.finders.default_storage')\n    def test_default_storage_finder_improperly_configured(self, mock_default_storage):\n        mock_default_storage.base_location = None\n        with self.assertRaises(ImproperlyConfigured):\n            DefaultStorageFinder()\n\nclass TestFind(unittest.TestCase):\n    @patch('django.contrib.staticfiles.finders.get_finders')\n    def test_find(self, mock_get_finders):\n        mock_get_finders.return_value = [Mock(find=lambda path, all=False: '/path/to/file')]\n        result = find('path/to/file')\n        self.assertEqual(result, '/path/to/file')\n\n    @patch('django.contrib.staticfiles.finders.get_finders')\n    def test_find_all(self, mock_get_finders):\n        mock_get_finders.return_value = [Mock(find=lambda path, all=False: ['/path/to/file1', '/path/to/file2'])]\n        result = find('path/to/file', all=True)\n        self.assertEqual(result, ['/path/to/file1', '/path/to/file2'])\n\nclass TestGetFinder(unittest.TestCase):\n    def test_get_finder(self):\n        finder = get_finder('django.contrib.staticfiles.finders.BaseFinder')\n        self.assertIsInstance(finder, BaseFinder)\n\n    def test_get_finder_improperly_configured(self):\n        with self.assertRaises(ImproperlyConfigured):\n            get_finder('django.contrib.staticfiles.finders.NonExistentFinder')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1150": ["\nimport unittest\nfrom sympy import symbols, S, I, pi, oo, Interval, FiniteSet, ProductSet, Union, Lambda\nfrom sympy.sets.fancysets import ImageSet, Range, normalize_theta_set, ComplexRegion, CartesianComplexRegion, PolarComplexRegion, Complexes\n\nclass TestFancySets(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_image_set(self):\n        f = Lambda(self.x, self.x**2)\n        s = S.Naturals\n        image_set = ImageSet(f, s)\n        self.assertTrue(4 in image_set)\n        self.assertFalse(5 in image_set)\n\n    def test_range(self):\n        r = Range(0, 10, 2)\n        self.assertEqual(list(r), [0, 2, 4, 6, 8])\n\n    def test_normalize_theta_set(self):\n        theta = Interval(9*pi/2, 5*pi)\n        normalized_theta = normalize_theta_set(theta)\n        self.assertEqual(normalized_theta, Interval(pi/2, pi))\n\n    def test_complex_region(self):\n        a = Interval(2, 3)\n        b = Interval(4, 6)\n        c = Interval(1, 8)\n        c1 = ComplexRegion(a*b)\n        self.assertTrue(2.5 + 4.5*I in c1)\n        self.assertFalse(2.5 + 6.5*I in c1)\n        r = Interval(0, 1)\n        theta = Interval(0, 2*pi)\n        c2 = ComplexRegion(r*theta, polar=True)\n        self.assertTrue(0.5 + 0.5*I in c2)\n        self.assertFalse(1 + 2*I in c2)\n\n    def test_cartesian_complex_region(self):\n        unit_disk = ComplexRegion(Interval(0, 1)*Interval(0, 2*pi), polar=True)\n        upper_half_unit_disk = ComplexRegion(Interval(0, 1)*Interval(0, pi), polar=True)\n        intersection = unit_disk.intersect(upper_half_unit_disk)\n        self.assertEqual(intersection, upper_half_unit_disk)\n\n    def test_polar_complex_region(self):\n        r = Interval(0, 1)\n        theta = Interval(0, pi)\n        upper_half_plane = ComplexRegion(r*theta, polar=True)\n        self.assertTrue(1 + I in upper_half_plane)\n        self.assertFalse(1 - I in upper_half_plane)\n\n    def test_complexes(self):\n        self.assertTrue(1 + I in S.Complexes)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_492": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.db.migrations.writer import MigrationWriter, OperationWriter\nfrom django.db.migrations import Operation\n\nclass TestMigrationWriter(unittest.TestCase):\n\n    def setUp(self):\n        self.migration = MagicMock()\n        self.migration.operations = [Operation()]\n        self.migration.dependencies = []\n        self.migration.replaces = None\n        self.migration.initial = False\n\n        self.writer = MigrationWriter(self.migration)\n\n    def test_as_string(self):\n        result = self.writer.as_string()\n        self.assertIsInstance(result, str)\n\n    def test_serialize(self):\n        result, _ = self.writer.serialize(\"test_value\")\n        self.assertEqual(result, \"test_value\")\n\n    def test_basedir(self):\n        with patch('django.db.migrations.writer.MigrationLoader.migrations_module', return_value=('test_app', None)):\n            with patch('django.db.migrations.writer.import_module', return_value=MagicMock()):\n                with patch('django.db.migrations.writer.module_dir', return_value='/test/path'):\n                    result = self.writer.basedir\n                    self.assertEqual(result, '/test/path')\n\nclass TestOperationWriter(unittest.TestCase):\n\n    def setUp(self):\n        self.operation = Operation()\n        self.writer = OperationWriter(self.operation)\n\n    def test_serialize(self):\n        result, _ = self.writer.serialize()\n        self.assertIsInstance(result, str)\n\n    def test_indent(self):\n        self.writer.indent()\n        self.assertEqual(self.writer.indentation, 3)\n\n    def test_unindent(self):\n        self.writer.unindent()\n        self.assertEqual(self.writer.indentation, 1)\n\n    def test_feed(self):\n        self.writer.feed(\"test_line\")\n        self.assertIn(\"    test_line\", self.writer.buff)\n\n    def test_render(self):\n        self.writer.buff = [\"test_line1\", \"test_line2\"]\n        result = self.writer.render()\n        self.assertEqual(result, \"test_line1\\ntest_line2\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_943": ["\nimport unittest\nfrom inspect import Parameter, Signature\nfrom sphinx.util import inspect\nfrom sphinx.util.inspect import (\n    stringify_signature, is_builtin_class_method, ispartial, getdoc, isfunction, isclassmethod,\n    isstaticmethod, signature_from_str, unwrap\n)\n\nclass TestSphinxInspect(unittest.TestCase):\n    def test_stringify_signature(self):\n        sig = Signature([Parameter('param1', Parameter.POSITIONAL_OR_KEYWORD, annotation=int),\n                         Parameter('param2', Parameter.POSITIONAL_OR_KEYWORD, default='default')],\n                        return_annotation=None)\n        self.assertEqual(stringify_signature(sig), '(param1: int, param2=\\'default\\')')\n\n    def test_is_builtin_class_method(self):\n        self.assertTrue(is_builtin_class_method(int, '__init__'))\n\n    def test_ispartial(self):\n        from functools import partial\n        partial_func = partial(int, base=2)\n        self.assertTrue(ispartial(partial_func))\n\n    def test_getdoc(self):\n        def test_func():\n            \"\"\"This is a test function.\"\"\"\n            pass\n\n        self.assertEqual(getdoc(test_func), \"This is a test function.\")\n\n    def test_isfunction(self):\n        def test_func():\n            pass\n\n        self.assertTrue(isfunction(test_func))\n\n    def test_isclassmethod(self):\n        class TestClass:\n            @classmethod\n            def test_method(cls):\n                pass\n\n        self.assertTrue(isclassmethod(TestClass.test_method))\n\n    def test_isstaticmethod(self):\n        class TestClass:\n            @staticmethod\n            def test_method():\n                pass\n\n        self.assertTrue(isstaticmethod(TestClass.test_method))\n\n    def test_signature_from_str(self):\n        sig = signature_from_str('(param1: int, param2=\\'default\\')')\n        self.assertEqual(str(sig), '(param1: int, param2=\\'default\\')')\n\n    def test_unwrap(self):\n        def inner_func():\n            pass\n\n        outer_func = unwrap(inner_func)\n        self.assertEqual(outer_func, inner_func)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1176": ["\nimport unittest\nfrom sympy.core.numbers import (Number, Integer, Rational, Float, EulerGamma, Catalan, TribonacciConstant, GoldenRatio)\n\nclass TestNumbers(unittest.TestCase):\n\n    def test_Number(self):\n        self.assertIsInstance(Number(), Number)\n\n    def test_Integer(self):\n        self.assertEqual(Integer(3), 3)\n        self.assertEqual(Integer('3'), 3)\n        self.assertEqual(Integer(3.0), 3)\n\n    def test_Rational(self):\n        self.assertEqual(Rational(1, 2), 0.5)\n        self.assertEqual(Rational('1/2'), 0.5)\n        self.assertEqual(Rational(1.5), 1.5)\n\n    def test_Float(self):\n        self.assertAlmostEqual(Float(1.5), 1.5)\n        self.assertAlmostEqual(Float('1.5'), 1.5)\n        self.assertAlmostEqual(Float(Rational(1, 2)), 0.5)\n\n    def test_EulerGamma(self):\n        self.assertIsInstance(EulerGamma, Number)\n\n    def test_Catalan(self):\n        self.assertIsInstance(Catalan, Number)\n\n    def test_TribonacciConstant(self):\n        self.assertIsInstance(TribonacciConstant, Number)\n\n    def test_GoldenRatio(self):\n        self.assertIsInstance(GoldenRatio, Number)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_254": ["\nfrom django.contrib.admin import ModelAdmin, TabularInline\nfrom django.contrib.auth.models import User\nfrom django.test import TestCase, Client\nfrom django.urls import reverse\n\nclass TestModelAdmin(TestCase):\n    def setUp(self):\n        self.client = Client()\n        self.user = User.objects.create_superuser(\n            username='admin',\n            password='admin123',\n            email='admin@example.com'\n        )\n        self.client.force_login(self.user)\n\n    def test_model_admin_str(self):\n        model_admin = ModelAdmin(User, admin_site=None)\n        self.assertEqual(str(model_admin), 'auth.ModelAdmin')\n\n    def test_model_admin_urls(self):\n        model_admin = ModelAdmin(User, admin_site=None)\n        urls = model_admin.get_urls()\n        self.assertEqual(len(urls), 5)\n\n    def test_model_admin_permissions(self):\n        model_admin = ModelAdmin(User, admin_site=None)\n        self.assertTrue(model_admin.has_add_permission(None))\n        self.assertTrue(model_admin.has_change_permission(None))\n        self.assertTrue(model_admin.has_delete_permission(None))\n        self.assertTrue(model_admin.has_view_permission(None))\n\n    def test_tabular_inline_str(self):\n        class UserInline(TabularInline):\n            model = User\n        inline = UserInline(parent_model=User, admin_site=None)\n        self.assertEqual(str(inline), 'user')\n\n    def test_tabular_inline_media(self):\n        class UserInline(TabularInline):\n            model = User\n        inline = UserInline(parent_model=User, admin_site=None)\n        media = inline.media\n        self.assertIn('admin/js/jquery.init.js', media._js)\n\n    # Add more tests as needed\n"], "sample_664": ["\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom _pytest.python import FunctionDefinition, Package, Class, Instance, Function, Metafunc, idmaker\n\ndef test_FunctionDefinition():\n    config = Mock()\n    definition = FunctionDefinition(name=\"test_func\", parent=None, config=config)\n    with pytest.raises(RuntimeError):\n        definition.runtest()\n    assert definition.setup == definition.runtest\n\ndef test_Package_collect():\n    fspath = Mock()\n    parent = Mock()\n    config = Mock()\n    session = Mock()\n    package = Package(fspath, parent, config, session)\n    with patch(\"_pytest.python.Package._collectfile\") as mock_collectfile:\n        result = list(package.collect())\n        mock_collectfile.assert_called()\n\ndef test_Class_collect():\n    parent = Mock()\n    parent.obj = lambda: Mock()\n    config = Mock()\n    session = Mock()\n    cls = Class(name=\"TestClass\", parent=parent, config=config, session=session)\n    with patch(\"_pytest.python.Class._inject_setup_class_fixture\"), \\\n         patch(\"_pytest.python.Class._inject_setup_method_fixture\"):\n        result = list(cls.collect())\n        assert isinstance(result[0], Instance)\n\ndef test_Function_setup():\n    parent = Mock()\n    parent.newinstance = Mock()\n    config = Mock()\n    session = Mock()\n    fixtureinfo = Mock()\n    function = Function(name=\"test_func\", parent=parent, config=config, session=session, fixtureinfo=fixtureinfo)\n    function.setup()\n    parent.newinstance.assert_called_once()\n\ndef test_Metafunc_parametrize():\n    definition = Mock()\n    fixtureinfo = Mock()\n    config = Mock()\n    metafunc = Metafunc(definition, fixtureinfo, config)\n    metafunc.parametrize(argnames=[\"arg1\", \"arg2\"], argvalues=[(1, 2), (3, 4)], indirect=False)\n    assert len(metafunc._calls) == 2\n\ndef test_idmaker():\n    argnames = [\"arg1\", \"arg2\"]\n    parametersets = [Mock(values=[1, 2], id=None)]\n    ids = idmaker(argnames, parametersets)\n    assert ids == [\"arg10-arg20\"]\n"], "sample_58": ["\nfrom django.test import TestCase\nfrom django.contrib.auth.forms import UserCreationForm, UserChangeForm, AuthenticationForm, PasswordResetForm, SetPasswordForm, PasswordChangeForm, AdminPasswordChangeForm\nfrom django.contrib.auth.models import User\n\nclass TestAuthForms(TestCase):\n\n    def setUp(self):\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n\n    def test_UserCreationForm_valid(self):\n        form = UserCreationForm(data={'username': 'newuser', 'password1': 'newpassword', 'password2': 'newpassword'})\n        self.assertTrue(form.is_valid())\n\n    def test_UserCreationForm_password_mismatch(self):\n        form = UserCreationForm(data={'username': 'newuser', 'password1': 'newpassword', 'password2': 'mismatchpassword'})\n        self.assertFalse(form.is_valid())\n\n    def test_UserChangeForm_valid(self):\n        form = UserChangeForm(instance=self.user, data={'username': 'testuser'})\n        self.assertTrue(form.is_valid())\n\n    def test_AuthenticationForm_valid(self):\n        form = AuthenticationForm(data={'username': 'testuser', 'password': 'testpassword'})\n        self.assertTrue(form.is_valid())\n\n    def test_AuthenticationForm_invalid(self):\n        form = AuthenticationForm(data={'username': 'testuser', 'password': 'wrongpassword'})\n        self.assertFalse(form.is_valid())\n\n    def test_PasswordResetForm_valid(self):\n        form = PasswordResetForm(data={'email': self.user.email})\n        self.assertTrue(form.is_valid())\n\n    def test_SetPasswordForm_valid(self):\n        form = SetPasswordForm(user=self.user, data={'new_password1': 'newpassword', 'new_password2': 'newpassword'})\n        self.assertTrue(form.is_valid())\n\n    def test_PasswordChangeForm_valid(self):\n        form = PasswordChangeForm(user=self.user, data={'old_password': 'testpassword', 'new_password1': 'newpassword', 'new_password2': 'newpassword'})\n        self.assertTrue(form.is_valid())\n\n    def test_AdminPasswordChangeForm_valid(self):\n        form = AdminPasswordChangeForm(user=self.user, data={'password1': 'newpassword', 'password2': 'newpassword'})\n        self.assertTrue(form.is_valid())\n"], "sample_569": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom seaborn import regression\n\nclass TestRegression(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.x = np.random.rand(100)\n        self.y = 2 * self.x + np.random.randn(100)\n        self.data = pd.DataFrame({'x': self.x, 'y': self.y})\n\n    def test_regplot(self):\n        ax = regression.regplot(x=self.x, y=self.y)\n        self.assertIsInstance(ax, plt.Axes)\n\n    def test_regplot_dataframe(self):\n        ax = regression.regplot(x='x', y='y', data=self.data)\n        self.assertIsInstance(ax, plt.Axes)\n\n    def test_regplot_no_regression(self):\n        ax = regression.regplot(x=self.x, y=self.y, fit_reg=False)\n        self.assertIsInstance(ax, plt.Axes)\n\n    def test_regplot_no_scatter(self):\n        ax = regression.regplot(x=self.x, y=self.y, scatter=False)\n        self.assertIsInstance(ax, plt.Axes)\n\n    def test_regplot_x_estimator(self):\n        ax = regression.regplot(x=self.x, y=self.y, x_estimator=np.mean)\n        self.assertIsInstance(ax, plt.Axes)\n\n    def test_regplot_x_bins(self):\n        ax = regression.regplot(x=self.x, y=self.y, x_bins=5)\n        self.assertIsInstance(ax, plt.Axes)\n\n    def test_lmplot(self):\n        g = regression.lmplot(x='x', y='y', data=self.data)\n        self.assertIsInstance(g, regression.FacetGrid)\n\n    def test_lmplot_hue(self):\n        self.data['hue'] = np.random.choice(['A', 'B'], 100)\n        g = regression.lmplot(x='x', y='y', hue='hue', data=self.data)\n        self.assertIsInstance(g, regression.FacetGrid)\n\n    def test_lmplot_col(self):\n        self.data['col'] = np.random.choice(['A', 'B'], 100)\n        g = regression.lmplot(x='x', y='y', col='col', data=self.data)\n        self.assertIsInstance(g, regression.FacetGrid)\n\n    def test_lmplot_row(self):\n        self.data['row'] = np.random.choice(['A', 'B'], 100)\n        g = regression.lmplot(x='x', y='y', row='row', data=self.data)\n        self.assertIsInstance(g, regression.FacetGrid)\n\n    def test_residplot(self):\n        ax = regression.residplot(x=self.x, y=self.y)\n        self.assertIsInstance(ax, plt.Axes)\n\n    def test_residplot_lowess(self):\n        ax = regression.residplot(x=self.x, y=self.y, lowess=True)\n        self.assertIsInstance(ax, plt.Axes)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_482": ["\nimport unittest\nfrom datetime import datetime\nfrom decimal import Decimal\nfrom unittest.mock import patch\n\nfrom django.utils.safestring import SafeData\n\nfrom django.template.defaultfilters import (\n    stringfilter, escapejs_filter, json_script, floatformat, iriencode, linenumbers,\n    lower, make_list, slugify, stringformat, title, truncatechars, truncatechars_html,\n    truncatewords, truncatewords_html, upper, urlencode, urlize, urlizetrunc,\n    wordcount, wordwrap, ljust, rjust, center, cut, escape_filter, escapeseq,\n    force_escape, linebreaks_filter, linebreaksbr, safe, safeseq, striptags, dictsort,\n    dictsortreversed, first, join, last, length, length_is, random, slice_filter,\n    unordered_list, add, get_digit, date, time, timesince_filter, timeuntil_filter,\n    default, default_if_none, divisibleby, yesno, filesizeformat, pluralize,\n    phone2numeric_filter, pprint,\n)\n\nclass TestDefaultFilters(unittest.TestCase):\n    def test_stringfilter_decorator(self):\n        @stringfilter\n        def test_func(value):\n            return value\n\n        self.assertEqual(test_func(123), '123')\n        self.assertEqual(test_func(SafeData('test')), 'test')\n\n    def test_escapejs_filter(self):\n        self.assertEqual(escapejs_filter('test'), '\\\\u0074\\\\u0065\\\\u0073\\\\u0074')\n\n    def test_json_script(self):\n        self.assertEqual(json_script({'key': 'value'}), '<script type=\"application/json\">{\"key\": \"value\"}</script>')\n\n    def test_floatformat(self):\n        self.assertEqual(floatformat(34.23234, 2), '34.23')\n        self.assertEqual(floatformat(34.00000, 2), '34')\n        self.assertEqual(floatformat(34.26000, 2), '34.26')\n\n    # Add more tests for other filters...\n\n    # ...\n\n    def test_unordered_list(self):\n        data = ['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]\n        expected_output = '<li>States\\n<ul>\\n\\t<li>Kansas\\n\\t<ul>\\n\\t\\t<li>Lawrence</li>\\n\\t\\t<li>Topeka</li>\\n\\t</ul>\\n\\t</li>\\n\\t<li>Illinois</li>\\n</ul>\\n</li>'\n        self.assertEqual(unordered_list(data), expected_output)\n\n    # Add more tests for other filters...\n\n    # ...\n\n    def test_pluralize(self):\n        self.assertEqual(pluralize(0), 's')\n        self.assertEqual(pluralize(1), '')\n        self.assertEqual(pluralize(2), 's')\n        self.assertEqual(pluralize(0, 'es'), 'es')\n        self.assertEqual(pluralize(1, 'es'), '')\n        self.assertEqual(pluralize(2, 'es'), 'es')\n        self.assertEqual(pluralize(0, 'y,ies'), 'ies')\n        self.assertEqual(pluralize(1, 'y,ies'), 'y')\n        self.assertEqual(pluralize(2, 'y,ies'), 'ies')\n\n    def test_phone2numeric_filter(self):\n        self.assertEqual(phone2numeric_filter('123-456-7890'), '1234567890')\n\n    def test_pprint(self):\n        self.assertEqual(pprint({'key': 'value'}), \"{'key': 'value'}\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_848": ["\nimport unittest\nfrom sklearn.datasets import samples_generator\nimport numpy as np\n\nclass TestSamplesGenerator(unittest.TestCase):\n    def setUp(self):\n        self.random_state = 42\n\n    def test_make_classification(self):\n        X, y = samples_generator.make_classification(n_samples=100, n_features=20, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 20))\n        self.assertEqual(y.shape, (100,))\n\n    def test_make_multilabel_classification(self):\n        X, Y = samples_generator.make_multilabel_classification(n_samples=100, n_features=20, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 20))\n        self.assertEqual(Y.shape, (100, 5))\n\n    def test_make_hastie_10_2(self):\n        X, y = samples_generator.make_hastie_10_2(n_samples=100, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 10))\n        self.assertEqual(y.shape, (100,))\n\n    def test_make_regression(self):\n        X, y = samples_generator.make_regression(n_samples=100, n_features=10, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 10))\n        self.assertEqual(y.shape, (100,))\n\n    def test_make_blobs(self):\n        X, y = samples_generator.make_blobs(n_samples=100, n_features=2, centers=3, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 2))\n        self.assertEqual(y.shape, (100,))\n\n    def test_make_friedman1(self):\n        X, y = samples_generator.make_friedman1(n_samples=100, n_features=10, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 10))\n        self.assertEqual(y.shape, (100,))\n\n    def test_make_friedman2(self):\n        X, y = samples_generator.make_friedman2(n_samples=100, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 4))\n        self.assertEqual(y.shape, (100,))\n\n    def test_make_friedman3(self):\n        X, y = samples_generator.make_friedman3(n_samples=100, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 4))\n        self.assertEqual(y.shape, (100,))\n\n    def test_make_low_rank_matrix(self):\n        X = samples_generator.make_low_rank_matrix(n_samples=100, n_features=100, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 100))\n\n    def test_make_moons(self):\n        X, y = samples_generator.make_moons(n_samples=100, noise=0.1, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 2))\n        self.assertEqual(y.shape, (100,))\n\n    def test_make_circles(self):\n        X, y = samples_generator.make_circles(n_samples=100, noise=0.1, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 2))\n        self.assertEqual(y.shape, (100,))\n\n    def test_make_sparse_coded_signal(self):\n        Y, D, X = samples_generator.make_sparse_coded_signal(n_samples=100, n_components=5, n_features=20, n_nonzero_coefs=3, random_state=self.random_state)\n        self.assertEqual(Y.shape, (20, 100))\n        self.assertEqual(D.shape, (20, 5))\n        self.assertEqual(X.shape, (5, 100))\n\n    def test_make_sparse_uncorrelated(self):\n        X, y = samples_generator.make_sparse_uncorrelated(n_samples=100, n_features=10, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 10))\n        self.assertEqual(y.shape, (100,))\n\n    def test_make_spd_matrix(self):\n        X = samples_generator.make_spd_matrix(n_dim=5, random_state=self.random_state)\n        self.assertEqual(X.shape, (5, 5))\n\n    def test_make_swiss_roll(self):\n        X, t = samples_generator.make_swiss_roll(n_samples=100, noise=0.1, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 3))\n        self.assertEqual(t.shape, (100,))\n\n    def test_make_s_curve(self):\n        X, t = samples_generator.make_s_curve(n_samples=100, noise=0.1, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 3))\n        self.assertEqual(t.shape, (100,))\n\n    def test_make_biclusters(self):\n        X, rows, cols = samples_generator.make_biclusters(shape=(100, 20), n_clusters=3, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 20))\n        self.assertEqual(rows.shape, (3, 100))\n        self.assertEqual(cols.shape, (3, 20))\n\n    def test_make_checkerboard(self):\n        X, rows, cols = samples_generator.make_checkerboard(shape=(100, 20), n_clusters=2, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 20))\n        self.assertEqual(rows.shape, (4, 100))\n        self.assertEqual(cols.shape, (4, 20))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_436": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock, call\nfrom django.core.management.commands.runserver import Command\nfrom django.core.management.base import CommandError\nfrom django.conf import settings\n\nclass TestRunserverCommand(unittest.TestCase):\n    def setUp(self):\n        self.command = Command()\n\n    def test_valid_port(self):\n        options = {\"no_color\": False, \"addrport\": \"8000\", \"use_ipv6\": False, \"use_threading\": True, \"use_reloader\": False, \"skip_checks\": True}\n        self.command.handle(**options)\n        self.assertEqual(self.command.port, \"8000\")\n\n    def test_invalid_port(self):\n        options = {\"no_color\": False, \"addrport\": \"abc\", \"use_ipv6\": False, \"use_threading\": True, \"use_reloader\": False, \"skip_checks\": True}\n        with self.assertRaises(CommandError):\n            self.command.handle(**options)\n\n    def test_valid_ipv6_address(self):\n        options = {\"no_color\": False, \"addrport\": \"[::1]:8000\", \"use_ipv6\": False, \"use_threading\": True, \"use_reloader\": False, \"skip_checks\": True}\n        self.command.handle(**options)\n        self.assertEqual(self.command.addr, \"::1\")\n\n    def test_invalid_ipv6_address(self):\n        options = {\"no_color\": False, \"addrport\": \"127.0.0.1:8000\", \"use_ipv6\": True, \"use_threading\": True, \"use_reloader\": False, \"skip_checks\": True}\n        with self.assertRaises(CommandError):\n            self.command.handle(**options)\n\n    def test_debug_false_without_allowed_hosts(self):\n        settings.DEBUG = False\n        settings.ALLOWED_HOSTS = []\n        options = {\"no_color\": False, \"addrport\": \"8000\", \"use_ipv6\": False, \"use_threading\": True, \"use_reloader\": False, \"skip_checks\": True}\n        with self.assertRaises(CommandError):\n            self.command.handle(**options)\n\n    @patch('django.core.management.commands.runserver.run')\n    def test_run_server(self, mock_run):\n        options = {\"no_color\": False, \"addrport\": \"8000\", \"use_ipv6\": False, \"use_threading\": True, \"use_reloader\": False, \"skip_checks\": True}\n        self.command.run(**options)\n        mock_run.assert_called_once_with(self.command.addr, int(self.command.port), self.command.get_handler(), ipv6=self.command.use_ipv6, threading=True, server_cls=self.command.server_cls)\n\n    @patch('django.core.management.commands.runserver.autoreload.run_with_reloader')\n    def test_run_server_with_reloader(self, mock_reloader):\n        options = {\"no_color\": False, \"addrport\": \"8000\", \"use_ipv6\": False, \"use_threading\": True, \"use_reloader\": True, \"skip_checks\": True}\n        self.command.run(**options)\n        mock_reloader.assert_called_once_with(self.command.inner_run, **options)\n"], "sample_15": ["\nimport unittest\nimport numpy as np\nfrom astropy import units as u\nfrom astropy.units import Quantity\nfrom astropy.units.quantity_helper import UnitsError\n\nclass TestQuantity(unittest.TestCase):\n    def setUp(self):\n        self.q1 = Quantity(2, unit=u.m)\n        self.q2 = Quantity(3, unit=u.m)\n        self.q3 = Quantity(2, unit=u.s)\n        self.array = np.array([1, 2, 3])\n\n    def test_addition(self):\n        result = self.q1 + self.q2\n        self.assertEqual(result.value, 5)\n        self.assertEqual(result.unit, u.m)\n\n    def test_subtraction(self):\n        result = self.q1 - self.q2\n        self.assertEqual(result.value, -1)\n        self.assertEqual(result.unit, u.m)\n\n    def test_multiplication(self):\n        result = self.q1 * self.q2\n        self.assertEqual(result.value, 6)\n        self.assertEqual(result.unit, u.m ** 2)\n\n    def test_division(self):\n        result = self.q1 / self.q2\n        self.assertEqual(result.value, 2/3)\n        self.assertEqual(result.unit, u.dimensionless_unscaled)\n\n    def test_incompatible_units(self):\n        with self.assertRaises(UnitsError):\n            result = self.q1 + self.q3\n\n    def test_array_operation(self):\n        result = self.q1 + self.array\n        np.testing.assert_array_equal(result.value, np.array([3, 4, 5]))\n        self.assertEqual(result.unit, u.m)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_534": ["\nimport unittest\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib.contour import ContourSet, QuadContourSet\n\nclass TestContourSet(unittest.TestCase):\n\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.x = np.linspace(0, 10, 100)\n        self.y = np.linspace(0, 10, 100)\n        self.X, self.Y = np.meshgrid(self.x, self.y)\n        self.Z = np.sin(self.X) + np.cos(self.Y)\n\n    def test_contour_levels(self):\n        cs = self.ax.contour(self.X, self.Y, self.Z, levels=np.linspace(-1, 1, 5))\n        self.assertEqual(len(cs.levels), 5)\n\n    def test_contourf_levels(self):\n        cf = self.ax.contourf(self.X, self.Y, self.Z, levels=np.linspace(-1, 1, 5))\n        self.assertEqual(len(cf.levels), 5)\n\n    def test_contour_colors(self):\n        cs = self.ax.contour(self.X, self.Y, self.Z, colors='r')\n        self.assertEqual(cs.collections[0].get_edgecolor()[0][0], (1, 0, 0, 1))\n\n    def test_contourf_colors(self):\n        cf = self.ax.contourf(self.X, self.Y, self.Z, colors='b')\n        self.assertEqual(cf.collections[0].get_facecolor()[0][0], (0, 0, 1, 1))\n\n    # Add more test methods as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_271": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.utils import autoreload\n\nclass TestAutoreload(unittest.TestCase):\n    def setUp(self):\n        self.mock_sys = Mock()\n        self.mock_django = Mock()\n        self.mock_django.apps = Mock()\n        self.mock_django.apps.ready_event = Mock()\n        self.mock_django.urls = Mock()\n        self.mock_django.urls.get_resolver = Mock()\n\n    @patch('django.utils.autoreload.sys', new_callable=lambda: self.mock_sys)\n    @patch('django.utils.autoreload.django', new=self.mock_django)\n    def test_stat_reloader(self, mock_sys, mock_django):\n        reloader = autoreload.StatReloader()\n        self.assertIsInstance(reloader, autoreload.BaseReloader)\n        self.assertTrue(autoreload.StatReloader.check_availability())\n\n    @patch('django.utils.autoreload.sys', new_callable=lambda: self.mock_sys)\n    @patch('django.utils.autoreload.django', new=self.mock_django)\n    def test_watchman_reloader(self, mock_sys, mock_django):\n        reloader = autoreload.WatchmanReloader()\n        self.assertIsInstance(reloader, autoreload.BaseReloader)\n        with self.assertRaises(autoreload.WatchmanUnavailable):\n            autoreload.WatchmanReloader.check_availability()\n\n    @patch('django.utils.autoreload.sys', new_callable=lambda: self.mock_sys)\n    @patch('django.utils.autoreload.django', new=self.mock_django)\n    def test_get_reloader(self, mock_sys, mock_django):\n        with patch('django.utils.autoreload.WatchmanReloader.check_availability', side_effect=autoreload.WatchmanUnavailable):\n            reloader = autoreload.get_reloader()\n            self.assertIsInstance(reloader, autoreload.StatReloader)\n\n    @patch('django.utils.autoreload.sys', new_callable=lambda: self.mock_sys)\n    @patch('django.utils.autoreload.django', new=self.mock_django)\n    def test_start_django(self, mock_sys, mock_django):\n        reloader = autoreload.StatReloader()\n        main_func = Mock()\n        autoreload.start_django(reloader, main_func)\n        self.mock_sys.exit.assert_not_called()\n\n    @patch('django.utils.autoreload.sys', new_callable=lambda: self.mock_sys)\n    @patch('django.utils.autoreload.django', new=self.mock_django)\n    def test_run_with_reloader(self, mock_sys, mock_django):\n        main_func = Mock()\n        autoreload.run_with_reloader(main_func)\n        self.mock_sys.exit.assert_not_called()\n"], "sample_427": ["\nimport unittest\nfrom django.forms import Form, IntegerField\nfrom django.forms.formsets import BaseFormSet, formset_factory, all_valid\n\nclass TestForm(Form):\n    field = IntegerField()\n\nclass TestFormSet(unittest.TestCase):\n    def test_base_formset(self):\n        TestFormSet = formset_factory(TestForm)\n        formset = TestFormSet()\n        self.assertIsInstance(formset, BaseFormSet)\n        self.assertEqual(len(formset), 1)  # Default extra form\n\n    def test_formset_factory(self):\n        TestFormSet = formset_factory(TestForm, extra=3)\n        formset = TestFormSet()\n        self.assertEqual(len(formset), 3)\n\n    def test_all_valid(self):\n        TestFormSet = formset_factory(TestForm)\n        formset1 = TestFormSet({'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '0', 'form-0-field': '1'})\n        formset2 = TestFormSet({'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '0', 'form-0-field': '2'})\n        self.assertTrue(all_valid([formset1, formset2]))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_671": ["\nimport pytest\nfrom _pytest._io.saferepr import _pformat_dispatch, saferepr, SafeRepr\n\nclass TestException(Exception):\n    def __repr__(self):\n        raise NotImplementedError(\"Test Exception\")\n\ndef test_pformat_dispatch():\n    obj = TestException()\n    assert \"NotImplementedError('Test Exception')\" in _pformat_dispatch(obj)\n\ndef test_saferepr():\n    obj = TestException()\n    assert \"NotImplementedError\" in saferepr(obj)\n\ndef test_SafeRepr():\n    obj = TestException()\n    sr = SafeRepr(240)\n    assert \"NotImplementedError\" in sr.repr(obj)\n\ndef test_SafeRepr_maxsize():\n    obj = \"a\" * 300\n    sr = SafeRepr(100)\n    assert len(sr.repr(obj)) <= 100\n\ndef test_SafeRepr_instance():\n    obj = TestException()\n    sr = SafeRepr(240)\n    assert \"NotImplementedError\" in sr.repr_instance(obj, 0)\n\ndef test_SafeRepr_exception():\n    class BadRepr:\n        def __repr__(self):\n            raise Exception(\"Test Exception\")\n    obj = BadRepr()\n    sr = SafeRepr(240)\n    assert \"Exception\" in sr.repr(obj)\n"], "sample_1067": ["\nimport unittest\nfrom sympy import symbols, MatrixSymbol, sin, cos, pi, E, I, oo, zoo, nan, sqrt, Integral, Sum, Add, Mul, Derivative, Function, Symbol, Rational, Abs, And, Or, Xor, Not, Implies, Equivalent, BooleanTrue, BooleanFalse, S, Range, Min, Max, exp, re, im, sinh, cosh, tanh, coth, sech, csch, asinh, acosh, atanh, acoth, asech, acsch, expint, Ei, erf, erfc, erfi, erfcinv, gamma, loggamma, lowergamma, uppergamma, polygamma, zeta, dirichlet_eta, lerchphi, multigammaln, bernoulli, harmonic, fibonacci, bell, tribonacci, lucas, stirlings1, stirlings2, factorial, factorial2, subfactorial, binomial, bernoulli_polynomial, bernoulli_polynomial_zero, euler_polynomial, genocchi, genocchi_old, fibonacci_polynomial, falling_factorial, bell_polynomial, bernstein_poly, genocchi_old, partition, integer_partition, npartitions, bell_number, stirling, euler_number, cyclotomic_poly, zetzeros, euler_totient, carmichael, multiplicative_order, totient_n, li, si, ci, shi, chi, ei, E1, li_polylog, hyper, meijerg, appellf1, appellf2, appellf3, appellf4, hermite, chebyshevu, chebyshevt, legendre, assoc_legendre, laguerre, assoc_laguerre, spherical_harmonic, besselj, bessely, besseli, besselk, hankel1, hankel2, airyai, airybi, airyaiprime, airybiprime, besselj_zeros, bessely_zeros, besseli_zeros, besselk_zeros, jacobi_normalized, gegenbauer, chebyshev_t, chebyshev_u, hermite_polynomials, zernike, zernike_root, jacobi_poly, jacobi_symbol, jacobi_matrix, ylm, ylm_c, krawtchouk, genocchi, kronecker_delta, levicivita, bernoulli_number, bernoulli_polynomial, euler_number, euler_polynomial, harmonic_number, stirling_number1, stirling_number2, partitions, bell_number, fibonacci_number, tribonacci_number, lucas_number, binomial_coefficient, genocchi, cyclotomic, bell, faulhaber_polynomial, fibonacci_q, fibonacci_q_polynomial, bell_polynomial, central_binomial, lc, lcm, gcd, totient, pollard_rho, pollard_pm1, multiplicative_order, is_primitive_root, primitive_root, discrete_log, jacobi_symbol, legendre_symbol, kronecker_symbol, znorder, zptwo, zp_galois_period, zp_primitive_root, zp_quadratic_residues, zp_nthroot, zp_sqrt, zp_log, zp_ilog, zp_ilog_mod, zp_exp, zp_pow, zp_factorial, zp_binomial, zp_perfect_power, zp_nthroot_mod, zp_li, zp_li_inv, zp_li_inversion, zp_euler, zp_euler_phi, zp_mobius, zp_divisors, zp_divisor_sigma, zp_prime_pi, zp_prime_pi_inv, zp_prime_pi_inversion, zp_prime_omega, zp_prime_omega_inv, zp_prime_omega_inversion, zp_prime_omega_lower, zp_prime_omega_upper, zp_prime_pi_lower, zp_prime_pi_upper, zp_prime_omega_prime_pi_inversion, zp_prime_omega_prime_pi_upper, zp_prime_omega_prime_pi_lower, zp_primorial, zp_primoratio, zp_primorial_inversion, zp_primorial_inv, zp_primorial_upper, zp_primorial_lower, zp_primorial_pi, zp_primorial_pi_inv, zp_primorial_pi_inversion, zp_primorial_pi_upper, zp_primorial_pi_lower, zp_primorial_phi, zp_primorial_phi_inv, zp_primorial_phi_inversion, zp_primorial_phi_upper, zp_primorial_phi_lower, zp_primorial_psi, zp_primorial_psi_inv, zp_primorial_psi_inversion, zp_primorial_psi_upper, zp_primorial_psi_lower, zp_li_inversion_lower, zp_li_inversion_upper, zp_li_lower, zp_li_upper, zp_euler_phi_inversion_lower, zp_euler_phi_inversion_upper, zp_euler_phi_lower, zp_euler_phi_upper, zp_euler_inversion_lower, zp_euler_inversion_upper, zp_euler_lower, zp_euler_upper, zp_mobius_lower, zp_mobius_upper, zp_divisor_sigma_lower, zp_divisor_sigma_upper, zp_divisors_count_lower, zp_divisors_count_upper, zp_divisors_sigma_lower, zp_divisors_sigma_upper, zp_divisors_sum_lower, zp_divisors_sum_upper, zp_prime_pi_lower_bound, zp_prime_pi_upper_bound, zp_prime_pi_lower_sum, zp_prime_pi_upper_sum, zp_prime_pi_lower_sum_inv, zp_prime_pi_upper_sum_inv, zp_prime_pi_lower_sum_inv_sum, zp_prime_pi_upper_sum_inv_sum, zp_prime_omega_lower_bound, zp_prime_omega_upper_bound, zp_prime_omega_lower_sum, zp_prime_omega_upper_sum, zp_prime_omega_lower_sum_inv, zp_prime_omega_upper_sum_inv, zp_prime_omega_lower_sum_inv_sum, zp_prime_omega_upper_sum_inv_sum, zp_primorial_lower_bound, zp_primorial_upper_bound, zp_primorial_lower_sum, zp_primorial_upper_sum, zp_primorial_lower_sum_inv, zp_primorial_upper_sum_inv, zp_primorial_lower_sum_inv_sum, zp_primorial_upper_sum_inv_sum, zp_primorial_pi_lower_bound, zp_primorial_pi_upper_bound, zp_primorial_pi_lower_sum, zp_primorial_pi_upper_sum, zp_primorial_pi_lower_sum_inv, zp_primorial_pi_upper_sum_inv, zp_primorial_pi_lower_sum_inv_sum, zp_primorial_pi_upper_sum_inv_sum, zp_primorial_phi_lower_bound, zp_primorial_phi_upper_bound, zp_primorial_phi_lower_sum, zp_primorial_phi_upper_sum, zp_primorial_phi_lower_sum_inv, zp_primorial_phi_upper_sum_inv, zp_primorial_phi_lower_sum_inv_sum, zp_primorial_phi_upper_sum_inv_sum, zp_primorial_psi_lower_bound, zp_primorial_psi_upper_bound, zp_primorial_psi_lower_sum, zp_primorial_psi_upper_sum, zp_primorial_psi_lower_sum_inv, zp_primorial_psi_upper_sum_inv, zp_primorial_psi_lower_sum_inv_sum, zp_primorial_psi_upper_sum_inv_sum\n\nfrom sympy.printing.mathml import mathml, MathMLContentPrinter, MathMLPresentationPrinter\n\nclass TestMathMLPrinter(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n\n    def test_mathml_content_printer(self):\n        printer = MathMLContentPrinter()\n        self.assertEqual(printer.doprint(self.x + self.y), '<apply><plus/><ci>x</ci><ci>y</ci></apply>')\n        self.assertEqual(printer.doprint(sin(self.x)), '<apply><sin/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(cos(self.x)), '<apply><cos/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(pi), '<pi/>')\n        self.assertEqual(printer.doprint(E), '<exponentiale/>')\n        self.assertEqual(printer.doprint(I), '<imaginaryi/>')\n        self.assertEqual(printer.doprint(oo), '<infinity/>')\n        self.assertEqual(printer.doprint(zoo), '<notanumber/>')\n        self.assertEqual(printer.doprint(nan), '<notanumber/>')\n        self.assertEqual(printer.doprint(sqrt(2)), '<apply><root><degree><cn>2</cn></degree><cn>2</cn></root></apply>')\n        self.assertEqual(printer.doprint(Integral(self.x, (self.x, 0, 1))), '<apply><int><bvar><ci>x</ci></bvar><lowlimit><cn>0</cn></lowlimit><uplimit><cn>1</cn></uplimit><ci>x</ci></int></apply>')\n        self.assertEqual(printer.doprint(Sum(self.x, (self.x, 0, 1))), '<apply><sum><bvar><ci>x</ci></bvar><lowlimit><cn>0</cn></lowlimit><uplimit><cn>1</cn></uplimit><ci>x</ci></sum></apply>')\n        self.assertEqual(printer.doprint(Derivative(sin(self.x), self.x)), '<apply><diff><bvar><ci>x</ci></bvar><ci>x</ci></diff><apply><sin/><ci>x</ci></apply></apply>')\n        self.assertEqual(printer.doprint(Function('f')(self.x)), '<apply><ci>f</ci><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(Symbol('alpha')), '<ci>alpha</ci>')\n        self.assertEqual(printer.doprint(Rational(1, 2)), '<apply><divide><cn>1</cn><cn>2</cn></divide></apply>')\n        self.assertEqual(printer.doprint(Abs(self.x)), '<apply><abs><ci>x</ci></abs></apply>')\n        self.assertEqual(printer.doprint(And(self.x, self.y)), '<apply><and/><ci>x</ci><ci>y</ci></apply>')\n        self.assertEqual(printer.doprint(Or(self.x, self.y)), '<apply><or/><ci>x</ci><ci>y</ci></apply>')\n        self.assertEqual(printer.doprint(Xor(self.x, self.y)), '<apply><xor/><ci>x</ci><ci>y</ci></apply>')\n        self.assertEqual(printer.doprint(Not(self.x)), '<apply><not><ci>x</ci></not></apply>')\n        self.assertEqual(printer.doprint(Implies(self.x, self.y)), '<apply><implies/><ci>x</ci><ci>y</ci></apply>')\n        self.assertEqual(printer.doprint(Equivalent(self.x, self.y)), '<apply><equivalent/><ci>x</ci><ci>y</ci></apply>')\n        self.assertEqual(printer.doprint(BooleanTrue()), '<true/>')\n        self.assertEqual(printer.doprint(BooleanFalse()), '<false/>')\n        self.assertEqual(printer.doprint(S.Zero), '<cn>0</cn>')\n        self.assertEqual(printer.doprint(S.One), '<cn>1</cn>')\n        self.assertEqual(printer.doprint(S.Infinity), '<infinity/>')\n        self.assertEqual(printer.doprint(S.NegativeInfinity), '<apply><minus/><infinity/></apply>')\n        self.assertEqual(printer.doprint(S.ComplexInfinity), '<infinity/>')\n        self.assertEqual(printer.doprint(S.NaN), '<notanumber/>')\n        self.assertEqual(printer.doprint(S.EmptySet), '<emptyset/>')\n        self.assertEqual(printer.doprint(S.UniversalSet), '<ci>universalset</ci>')\n        self.assertEqual(printer.doprint(Range(10)), '<list><cn>0</cn><cn>1</cn><cn>2</cn><cn>3</cn><cn>4</cn><cn>5</cn><cn>6</cn><cn>7</cn><cn>8</cn><cn>9</cn></list>')\n        self.assertEqual(printer.doprint(Min(self.x, self.y)), '<apply><min/><ci>x</ci><ci>y</ci></apply>')\n        self.assertEqual(printer.doprint(Max(self.x, self.y)), '<apply><max/><ci>x</ci><ci>y</ci></apply>')\n        self.assertEqual(printer.doprint(exp(self.x)), '<apply><exp/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(re(self.x)), '<apply><re><ci>x</ci></re></apply>')\n        self.assertEqual(printer.doprint(im(self.x)), '<apply><im><ci>x</ci></im></apply>')\n        self.assertEqual(printer.doprint(sinh(self.x)), '<apply><sinh/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(cosh(self.x)), '<apply><cosh/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(tanh(self.x)), '<apply><tanh/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(coth(self.x)), '<apply><coth/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(sech(self.x)), '<apply><sech/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(csch(self.x)), '<apply><csch/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(asinh(self.x)), '<apply><arcsinh/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(acosh(self.x)), '<apply><arccosh/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(atanh(self.x)), '<apply><arctanh/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(acoth(self.x)), '<apply><arccoth/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(asech(self.x)), '<apply><arcsech/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(acsch(self.x)), '<apply><arccsch/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(expint(self.x)), '<apply><expint/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(Ei(self.x)), '<apply><Ei><ci>x</ci></Ei></apply>')\n        self.assertEqual(printer.doprint(erf(self.x)), '<apply><erf/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(erfc(self.x)), '<apply><erfc/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(erfi(self.x)), '<apply><erfi/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(erfcinv(self.x)), '<apply><erfcinv/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(gamma(self.x)), '<apply><gamma/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(loggamma(self.x)), '<apply><loggamma/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(lowergamma(self.x, self.y)), '<apply><lowergamma/><ci>x</ci><ci>y</ci></apply>')\n        self.assertEqual(printer.doprint(uppergamma(self.x, self.y)), '<apply><uppergamma/><ci>x</ci><ci>y</ci></apply>')\n        self.assertEqual(printer.doprint(polygamma(self.x, self.y)), '<apply><polygamma/><ci>x</ci><ci>y</ci></apply>')\n        self.assertEqual(printer.doprint(zeta(self.x)), '<apply><zeta/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(dirichlet_eta(self.x)), '<apply><dirichlet_eta/><ci>x</ci></apply>')\n        self.assertEqual(printer.doprint(lerchphi(self.x, self.y, self.z)), '<apply><lerchphi/><ci>x</ci><ci>y</ci><ci>z</ci></apply>')\n\n    def test_mathml_presentation_printer(self):\n        printer = MathMLPresentationPrinter()\n        self.assertEqual(printer.doprint(self.x + self.y), '<mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow>')\n        self.assertEqual(printer.doprint(sin(self.x)), '<mrow><mi>sin</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(cos(self.x)), '<mrow><mi>cos</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(pi), '<mi>&#x3C0;</mi>')\n        self.assertEqual(printer.doprint(E), '<mi>&#x212F;</mi>')\n        self.assertEqual(printer.doprint(I), '<mi>&#x2148;</mi>')\n        self.assertEqual(printer.doprint(oo), '<mi>&#x221E;</mi>')\n        self.assertEqual(printer.doprint(zoo), '<mi>&#x221E;</mi>')\n        self.assertEqual(printer.doprint(nan), '<mi>NaN</mi>')\n        self.assertEqual(printer.doprint(sqrt(2)), '<msqrt><mn>2</mn></msqrt>')\n        self.assertEqual(printer.doprint(Integral(self.x, (self.x, 0, 1))), '<mrow><msubsup><mo>&#x222B;</mo><mi>x</mi><mn>0</mn><mn>1</mn></msubsup><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mo>&dd;</mo><mi>x</mi></mrow>')\n        self.assertEqual(printer.doprint(Sum(self.x, (self.x, 0, 1))), '<mrow><munderover><mo>&#x2211;</mo><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow><mn>1</mn></munderover><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(Derivative(sin(self.x), self.x)), '<mrow><mfrac><mrow><mo>&dd;</mo><mi>d</mi></mrow><mi>x</mi></mfrac><mo>&#x2061;</mo><mrow><mo>(</mo><mi>sin</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(Function('f')(self.x)), '<mrow><mi>f</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(Symbol('alpha')), '<mi>&#x3B1;</mi>')\n        self.assertEqual(printer.doprint(Rational(1, 2)), '<mfrac><mn>1</mn><mn>2</mn></mfrac>')\n        self.assertEqual(printer.doprint(Abs(self.x)), '<mrow><mo>|</mo><mi>x</mi><mo>|</mo></mrow>')\n        self.assertEqual(printer.doprint(And(self.x, self.y)), '<mrow><mi>x</mi><mo>&#x2227;</mo><mi>y</mi></mrow>')\n        self.assertEqual(printer.doprint(Or(self.x, self.y)), '<mrow><mi>x</mi><mo>&#x2228;</mo><mi>y</mi></mrow>')\n        self.assertEqual(printer.doprint(Xor(self.x, self.y)), '<mrow><mi>x</mi><mo>&#x22BB;</mo><mi>y</mi></mrow>')\n        self.assertEqual(printer.doprint(Not(self.x)), '<mrow><mo>&#xAC;</mo><mfenced><mi>x</mi></mfenced></mrow>')\n        self.assertEqual(printer.doprint(Implies(self.x, self.y)), '<mrow><mi>x</mi><mo>&#x21D2;</mo><mi>y</mi></mrow>')\n        self.assertEqual(printer.doprint(Equivalent(self.x, self.y)), '<mrow><mi>x</mi><mo>&#x21D4;</mo><mi>y</mi></mrow>')\n        self.assertEqual(printer.doprint(BooleanTrue()), '<mi>True</mi>')\n        self.assertEqual(printer.doprint(BooleanFalse()), '<mi>False</mi>')\n        self.assertEqual(printer.doprint(S.Zero), '<mn>0</mn>')\n        self.assertEqual(printer.doprint(S.One), '<mn>1</mn>')\n        self.assertEqual(printer.doprint(S.Infinity), '<mi>&#x221E;</mi>')\n        self.assertEqual(printer.doprint(S.NegativeInfinity), '<mrow><mo>-</mo><mi>&#x221E;</mi></mrow>')\n        self.assertEqual(printer.doprint(S.ComplexInfinity), '<mrow><mover><mn>&#x221E;</mn><mo>~</mo></mover></mrow>')\n        self.assertEqual(printer.doprint(S.NaN), '<mi>NaN</mi>')\n        self.assertEqual(printer.doprint(S.EmptySet), '<mo>&#x2205;</mo>')\n        self.assertEqual(printer.doprint(S.UniversalSet), '<mo>&#x1D54C;</mo>')\n        self.assertEqual(printer.doprint(Range(10)), '<mrow><mo>{</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>9</mn><mo>}</mo></mrow>')\n        self.assertEqual(printer.doprint(Min(self.x, self.y)), '<mrow><mi>min</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(Max(self.x, self.y)), '<mrow><mi>max</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(exp(self.x)), '<mrow><msup><mi>&#x212F;</mi><mi>x</mi></msup></mrow>')\n        self.assertEqual(printer.doprint(re(self.x)), '<mrow><mrow mathvariant=\"fraktur\">R</mrow><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(im(self.x)), '<mrow><mrow mathvariant=\"fraktur\">I</mrow><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(sinh(self.x)), '<mrow><mi>sinh</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(cosh(self.x)), '<mrow><mi>cosh</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(tanh(self.x)), '<mrow><mi>tanh</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(coth(self.x)), '<mrow><mi>coth</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(sech(self.x)), '<mrow><mi>sech</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(csch(self.x)), '<mrow><mi>csch</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(asinh(self.x)), '<mrow><mi>arcsinh</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(acosh(self.x)), '<mrow><mi>arccosh</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(atanh(self.x)), '<mrow><mi>arctanh</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(acoth(self.x)), '<mrow><mi>arccoth</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(asech(self.x)), '<mrow><mi>arcsech</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(acsch(self.x)), '<mrow><mi>arccsch</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(expint(self.x)), '<mrow><msub><mi>E</mi><mi>x</mi></msub></mrow>')\n        self.assertEqual(printer.doprint(Ei(self.x)), '<mrow><mi>Ei</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(erf(self.x)), '<mrow><mi>erf</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(erfc(self.x)), '<mrow><mi>erfc</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(erfi(self.x)), '<mrow><mi>erfi</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(erfcinv(self.x)), '<mrow><mi>erfcinv</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(gamma(self.x)), '<mrow><mi>&#x3B3;</mi><mo>&#x2061;</mo><mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow>')\n        self.assertEqual(printer.doprint(loggamma(self.x)), '<mrow><mi>"], "sample_1046": ["\nimport unittest\nfrom sympy import IndexedBase, Idx, Indexed, Symbol, S, symbols, oo, Matrix\n\nclass TestIndexed(unittest.TestCase):\n    def setUp(self):\n        self.A = IndexedBase('A')\n        self.i, self.j = symbols('i j', cls=Idx)\n        self.x = IndexedBase('x')\n        self.n, self.m = symbols('n m', integer=True)\n\n    def test_indexed_creation(self):\n        a_ij = self.A[self.i, self.j]\n        self.assertEqual(a_ij.base, self.A)\n        self.assertEqual(a_ij.indices, (self.i, self.j))\n        self.assertEqual(a_ij.rank, 2)\n\n    def test_indexed_shape(self):\n        self.assertEqual(self.A[self.i, self.j].shape, (self.n, self.m))\n        self.assertEqual(self.A[self.i, self.j, self.i].shape, (self.n, self.m, self.n))\n\n    def test_indexed_ranges(self):\n        self.assertEqual(self.A[self.i, self.j].ranges, [(0, self.n - 1), (0, self.m - 1)])\n        self.assertEqual(self.A[self.i].ranges, [(0, self.n - 1)])\n\n    def test_indexed_derivative(self):\n        a_ij = self.A[self.i, self.j]\n        self.assertEqual(a_ij.diff(self.A[self.i, self.j]), S.One)\n        self.assertEqual(a_ij.diff(self.x[self.i, self.j]), S.Zero)\n\n    def test_idx_creation(self):\n        idx = Idx('q')\n        self.assertEqual(idx.label, Symbol('q', integer=True))\n        self.assertIsNone(idx.lower)\n        self.assertIsNone(idx.upper)\n\n        idx = Idx(self.i, (self.n, self.m))\n        self.assertEqual(idx.lower, self.n)\n        self.assertEqual(idx.upper, self.m)\n\n        idx = Idx(self.i, self.n)\n        self.assertEqual(idx.lower, 0)\n        self.assertEqual(idx.upper, self.n - 1)\n\n    def test_idx_comparison(self):\n        i = Idx('i', 5)\n        j = Idx('j', 3)\n        self.assertTrue(i <= j)\n        self.assertFalse(i >= j)\n        self.assertTrue(i < j)\n        self.assertFalse(i > j)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1073": ["\nimport unittest\nfrom sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\nfrom sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match, _sqrtdenest0, _sqrtdenest_rec, _sqrt_numeric_denest, _sqrt_symbolic_denest, sqrt_biquadratic_denest, _denester, _sqrt_ratcomb\n\nclass TestSqrtDenest(unittest.TestCase):\n    def test_sqrt_match(self):\n        expr = 1 + sqrt(2) + sqrt(2)*sqrt(3) + 2*sqrt(1+sqrt(5))\n        result = _sqrt_match(expr)\n        self.assertEqual(result, [1 + sqrt(2) + sqrt(6), 2, 1 + sqrt(5)])\n\n    def test_sqrtdenest0(self):\n        expr = sqrt(5 + 2 * sqrt(6))\n        result = _sqrtdenest0(expr)\n        self.assertEqual(result, sqrt(2) + sqrt(3))\n\n    def test_sqrtdenest_rec(self):\n        expr = sqrt(-72*sqrt(2) + 158*sqrt(5) + 498)\n        result = _sqrtdenest_rec(expr)\n        self.assertEqual(result, -sqrt(10) + sqrt(2) + 9 + 9*sqrt(5))\n\n    def test_sqrt_numeric_denest(self):\n        a, b, r, d2 = 16 - 2*sqrt(29), 2, -10*sqrt(29) + 55, 300 - 4*sqrt(29)\n        result = _sqrt_numeric_denest(a, b, r, d2)\n        self.assertEqual(result, sqrt(11 - 2*sqrt(29)) + sqrt(5))\n\n    def test_sqrt_symbolic_denest(self):\n        a, b, r = 16 - 2*sqrt(29), 2, -10*sqrt(29) + 55\n        result = _sqrt_symbolic_denest(a, b, r)\n        self.assertEqual(result, sqrt(11 - 2*sqrt(29)) + sqrt(5))\n\n    def test_sqrt_biquadratic_denest(self):\n        expr = sqrt((2*sqrt(2) + 4)*sqrt(2 + sqrt(2)) + 5*sqrt(2) + 8)\n        a, b, r = _sqrt_match(expr**2)\n        d2 = a**2 - b**2*r\n        result = sqrt_biquadratic_denest(expr, a, b, r, d2)\n        self.assertEqual(result, sqrt(2) + sqrt(sqrt(2) + 2) + 2)\n\n    def test_sqrt_ratcomb(self):\n        cs = [1, 1, -1]\n        args = [sqrt(1+sqrt(3)), sqrt(3+3*sqrt(3)), sqrt(10+6*sqrt(3))]\n        result = _sqrt_ratcomb(cs, args)\n        self.assertEqual(result, 0)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1026": ["\nimport unittest\nfrom sympy import symbols, Poly\nfrom sympy.polys.polytools import degree, degree_list, total_degree, LC, LM, LT, pdiv, prem, pquo, pexquo, div, rem, quo, exquo, half_gcdex, gcdex, invert, subresultants, resultant, discriminant, terms_gcd, cofactors, gcd, gcd_list, lcm, lcm_list, trunc, monic, content, primitive, compose, decompose, sturm, gff_list, sqf_norm, sqf_part, sqf_list, sqf, factor_list, factor, intervals, refine_root, count_roots, real_roots, nroots, ground_roots, nth_power_roots_poly, cancel, reduced, groebner, GroebnerBasis, is_zero_dimensional\n\nclass TestPolyTools(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_degree(self):\n        self.assertEqual(degree(self.x**2 + self.y*self.x + 1, self.x), 2)\n        self.assertEqual(degree(self.x**2 + self.y*self.x + 1, self.y), 1)\n        self.assertEqual(degree(0, self.x), -oo)\n\n    # Add more test methods for other functions in polytools.py\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_394": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.contrib.admin import options\nfrom django.contrib.admin import AdminSite, ModelAdmin\nfrom django.http import HttpRequest\nfrom .models import Actor\n\nclass TestModelAdmin(unittest.TestCase):\n\n    def setUp(self):\n        self.model_admin = options.ModelAdmin(Actor, AdminSite())\n        self.request = HttpRequest()\n        self.request.method = 'GET'\n        self.request.user = MagicMock()\n\n    def test_get_model_perms(self):\n        self.request.user.has_perm.return_value = True\n        perms = self.model_admin.get_model_perms(self.request)\n        self.assertEqual(perms, {'add': True, 'change': True, 'delete': True, 'view': True})\n\n    def test_get_queryset(self):\n        queryset = self.model_admin.get_queryset(self.request)\n        self.assertIsNotNone(queryset)\n\n    def test_get_form(self):\n        form = self.model_admin.get_form(self.request)\n        self.assertIsNotNone(form)\n\n    def test_has_view_permission(self):\n        self.request.user.has_perm.return_value = True\n        has_view_permission = self.model_admin.has_view_permission(self.request)\n        self.assertTrue(has_view_permission)\n\n    def test_has_add_permission(self):\n        self.request.user.has_perm.return_value = True\n        has_add_permission = self.model_admin.has_add_permission(self.request)\n        self.assertTrue(has_add_permission)\n\n    def test_has_change_permission(self):\n        self.request.user.has_perm.return_value = True\n        has_change_permission = self.model_admin.has_change_permission(self.request, None)\n        self.assertTrue(has_change_permission)\n\n    def test_has_delete_permission(self):\n        self.request.user.has_perm.return_value = True\n        has_delete_permission = self.model_admin.has_delete_permission(self.request, None)\n        self.assertTrue(has_delete_permission)\n\n    def test_has_module_permission(self):\n        self.request.user.has_module_perms.return_value = True\n        has_module_permission = self.model_admin.has_module_permission(self.request)\n        self.assertTrue(has_module_permission)\n\n    # Add more tests as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_85": ["\nimport unittest\nfrom django.utils.http import (\n    base36_to_int, int_to_base36, urlsafe_base64_encode, urlsafe_base64_decode,\n    parse_etags, quote_etag, is_same_domain, is_safe_url, http_date, parse_http_date,\n    urlencode, urlquote, urlquote_plus, urlunquote, urlunquote_plus, escape_leading_slashes,\n)\n\nclass TestHttpUtils(unittest.TestCase):\n\n    def test_base36_to_int(self):\n        self.assertEqual(base36_to_int('10'), 36)\n        self.assertEqual(base36_to_int('z'), 35)\n        with self.assertRaises(ValueError):\n            base36_to_int('zzzzzzzzzzzzzzzzzz')\n\n    def test_int_to_base36(self):\n        self.assertEqual(int_to_base36(36), '10')\n        self.assertEqual(int_to_base36(35), 'z')\n        with self.assertRaises(ValueError):\n            int_to_base36(-1)\n\n    def test_urlsafe_base64_encode_decode(self):\n        self.assertEqual(urlsafe_base64_decode(urlsafe_base64_encode('test')), b'test')\n\n    def test_parse_etags(self):\n        self.assertEqual(parse_etags('\"abc\", \"def\"'), ['\"abc\"', '\"def\"'])\n        self.assertEqual(parse_etags('W/\"abc\"'), ['W/\"abc\"'])\n        self.assertEqual(parse_etags('*'), ['*'])\n\n    def test_quote_etag(self):\n        self.assertEqual(quote_etag('abc'), '\"abc\"')\n        self.assertEqual(quote_etag('\"abc\"'), '\"abc\"')\n\n    def test_is_same_domain(self):\n        self.assertTrue(is_same_domain('example.com', 'example.com'))\n        self.assertTrue(is_same_domain('sub.example.com', '.example.com'))\n        self.assertFalse(is_same_domain('example.com', 'sub.example.com'))\n\n    def test_is_safe_url(self):\n        self.assertTrue(is_safe_url('http://example.com', {'example.com'}))\n        self.assertFalse(is_safe_url('http://example.com', {'sub.example.com'}))\n\n    def test_http_date(self):\n        self.assertIsInstance(http_date(), str)\n\n    def test_parse_http_date(self):\n        self.assertIsInstance(parse_http_date('Wed, 21 Oct 2015 07:28:00 GMT'), int)\n\n    def test_urlencode(self):\n        self.assertEqual(urlencode({'key': 'value'}), 'key=value')\n        self.assertEqual(urlencode({'key': ['value1', 'value2']}), 'key=value1&key=value2')\n\n    def test_urlquote(self):\n        self.assertEqual(urlquote('http://example.com'), 'http%3A//example.com')\n\n    def test_urlquote_plus(self):\n        self.assertEqual(urlquote_plus('http://example.com'), 'http%3A%2F%2Fexample.com')\n\n    def test_urlunquote(self):\n        self.assertEqual(urlunquote('http%3A//example.com'), 'http://example.com')\n\n    def test_urlunquote_plus(self):\n        self.assertEqual(urlunquote_plus('http%3A%2F%2Fexample.com'), 'http://example.com')\n\n    def test_escape_leading_slashes(self):\n        self.assertEqual(escape_leading_slashes('//example.com'), '/%2Fexample.com')\n        self.assertEqual(escape_leading_slashes('http://example.com'), 'http://example.com')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_192": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.core.exceptions import ValidationError\nfrom django.forms import Form\nfrom django.forms.formsets import BaseFormSet, formset_factory, all_valid\nfrom django.forms.fields import IntegerField, BooleanField\nfrom django.forms.utils import ErrorList\n\nclass TestForm(Form):\n    field1 = IntegerField()\n\nclass TestFormSet(BaseFormSet):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.form = TestForm\n\nclass TestFormSetTests(unittest.TestCase):\n    def setUp(self):\n        self.FormSet = formset_factory(TestForm, formset=TestFormSet)\n\n    def test_total_form_count(self):\n        formset = self.FormSet()\n        self.assertEqual(formset.total_form_count(), 1)\n\n    def test_initial_form_count(self):\n        formset = self.FormSet(initial=[{}, {}])\n        self.assertEqual(formset.initial_form_count(), 2)\n\n    def test_forms(self):\n        formset = self.FormSet(data={'form-TOTAL_FORMS': '2', 'form-INITIAL_FORMS': '1'})\n        self.assertEqual(len(formset.forms), 2)\n\n    def test_is_valid(self):\n        formset = self.FormSet(data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '1', 'form-0-field1': '1'})\n        self.assertTrue(formset.is_valid())\n\n    def test_cleaned_data(self):\n        formset = self.FormSet(data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '1', 'form-0-field1': '1'})\n        self.assertEqual(formset.cleaned_data, [{'field1': 1}])\n\n    def test_deleted_forms(self):\n        formset = self.FormSet(data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '1', 'form-0-DELETE': 'on'})\n        self.assertEqual(len(formset.deleted_forms), 1)\n\n    def test_ordered_forms(self):\n        formset = self.FormSet(data={'form-TOTAL_FORMS': '2', 'form-INITIAL_FORMS': '2', 'form-0-ORDER': '2', 'form-1-ORDER': '1'})\n        self.assertEqual(formset.ordered_forms[0].prefix, 'form-1')\n\n    def test_non_form_errors(self):\n        formset = self.FormSet(data={'form-TOTAL_FORMS': '1001', 'form-INITIAL_FORMS': '1'})\n        self.assertEqual(len(formset.non_form_errors()), 1)\n\n    def test_errors(self):\n        formset = self.FormSet(data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '1'})\n        self.assertEqual(formset.errors[0]['field1'][0], 'This field is required.')\n\n    def test_total_error_count(self):\n        formset = self.FormSet(data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '1'})\n        self.assertEqual(formset.total_error_count(), 1)\n\n    def test_all_valid(self):\n        formset1 = self.FormSet(data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '1', 'form-0-field1': '1'})\n        formset2 = self.FormSet(data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '1', 'form-0-field1': '2'})\n        self.assertTrue(all_valid([formset1, formset2]))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_643": ["\nimport io\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom pylint.reporters.text import TextReporter, ParseableTextReporter, VSTextReporter, ColorizedTextReporter\nfrom pylint.message import Message\n\nclass TestTextReporters(unittest.TestCase):\n\n    def setUp(self):\n        self.output = io.StringIO()\n        self.message = Message('test_msg', 1, 'test_symbol', 'test_msg_id', 'test_module', 'test_obj', (1, 2), (3, 4))\n\n    def test_text_reporter(self):\n        reporter = TextReporter(self.output)\n        reporter.handle_message(self.message)\n        self.assertIn('test_msg', self.output.getvalue())\n\n    def test_parseable_text_reporter(self):\n        reporter = ParseableTextReporter(self.output)\n        reporter.handle_message(self.message)\n        self.assertIn('test_msg', self.output.getvalue())\n\n    def test_vs_text_reporter(self):\n        reporter = VSTextReporter(self.output)\n        reporter.handle_message(self.message)\n        self.assertIn('test_msg', self.output.getvalue())\n\n    @patch('os.environ', {'TERM': 'xterm-256color'})\n    def test_colorized_text_reporter(self):\n        reporter = ColorizedTextReporter(self.output)\n        reporter.handle_message(self.message)\n        self.assertIn('test_msg', self.output.getvalue())\n\n    @patch('os.environ', {'TERM': 'unknown'})\n    @patch('sys.platform', 'win32')\n    @patch('colorama.AnsiToWin32')\n    def test_colorized_text_reporter_windows(self, mock_ansi_to_win32):\n        reporter = ColorizedTextReporter(self.output)\n        reporter.handle_message(self.message)\n        self.assertIn('test_msg', self.output.getvalue())\n        mock_ansi_to_win32.assert_called_once()\n\n    def test_on_set_current_module(self):\n        reporter = TextReporter(self.output)\n        reporter.linter = MagicMock()\n        reporter.linter.config.msg_template = '{path}:{line}:{column}: {msg_id}: {msg} ({symbol})'\n        reporter.on_set_current_module('test_module', 'test_filepath')\n        self.assertEqual(reporter._template, reporter.linter.config.msg_template)\n        self.assertEqual(reporter._fixed_template, reporter.linter.config.msg_template)\n\n    def test_write_message(self):\n        reporter = TextReporter(self.output)\n        reporter.write_message(self.message)\n        self.assertIn('test_msg', self.output.getvalue())\n\n    def test_get_decoration(self):\n        reporter = ColorizedTextReporter(self.output)\n        decoration = reporter._get_decoration('E')\n        self.assertEqual(decoration.color, 'red')\n        self.assertEqual(decoration.style, ('bold',))\n\n    def test_get_decoration_default(self):\n        reporter = ColorizedTextReporter(self.output)\n        decoration = reporter._get_decoration('unknown')\n        self.assertIsNone(decoration.color)\n        self.assertEqual(decoration.style, ())\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1040": ["\nimport unittest\nfrom sympy import symbols, Integral, sin, cos, Matrix, Sum\nfrom sympy.printing.mathml import MathMLContentPrinter, MathMLPresentationPrinter\n\nclass TestMathMLPrinters(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n        self.content_printer = MathMLContentPrinter()\n        self.presentation_printer = MathMLPresentationPrinter()\n\n    def test_print_symbol(self):\n        self.assertEqual(self.content_printer._print_Symbol(self.x).tagName, 'ci')\n        self.assertEqual(self.presentation_printer._print_Symbol(self.x).tagName, 'mi')\n\n    def test_print_integral(self):\n        integral = Integral(sin(self.x), (self.x, 0, self.y))\n        self.assertEqual(self.content_printer._print_Integral(integral).tagName, 'apply')\n        self.assertEqual(self.presentation_printer._print_Integral(integral).tagName, 'mrow')\n\n    def test_print_sum(self):\n        sum_expr = Sum(self.x**self.y, (self.y, 1, self.x))\n        self.assertEqual(self.content_printer._print_Sum(sum_expr).tagName, 'apply')\n        self.assertEqual(self.presentation_printer._print_Sum(sum_expr).tagName, 'mrow')\n\n    def test_print_matrix(self):\n        matrix = Matrix([[self.x, self.y], [sin(self.x), cos(self.y)]])\n        self.assertEqual(self.content_printer._print_MatrixBase(matrix).tagName, 'matrix')\n        self.assertEqual(self.presentation_printer._print_MatrixBase(matrix).tagName, 'mfenced')\n\n    def test_print_rational(self):\n        self.assertEqual(self.content_printer._print_Rational(self.x/2).tagName, 'apply')\n        self.assertEqual(self.presentation_printer._print_Rational(self.x/2).tagName, 'mfrac')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_581": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom flask import Flask\nfrom src.flask.blueprints import Blueprint, BlueprintSetupState\n\nclass TestBlueprint(unittest.TestCase):\n    def setUp(self):\n        self.app = Flask(__name__)\n        self.bp = Blueprint('test_bp', __name__)\n\n    def test_init(self):\n        with self.assertRaises(ValueError):\n            Blueprint('', __name__)\n        with self.assertRaises(ValueError):\n            Blueprint('test.bp', __name__)\n\n    def test_make_setup_state(self):\n        state = self.bp.make_setup_state(self.app, {})\n        self.assertIsInstance(state, BlueprintSetupState)\n\n    def test_record(self):\n        @self.bp.record\n        def test_record_func(state):\n            pass\n        self.assertEqual(len(self.bp.deferred_functions), 1)\n\n    def test_record_once(self):\n        called = []\n        @self.bp.record_once\n        def test_record_once_func(state):\n            called.append(True)\n        self.bp.register(self.app, {})\n        self.assertEqual(len(called), 1)\n        self.bp.register(self.app, {})\n        self.assertEqual(len(called), 1)\n\n    def test_register_blueprint(self):\n        bp2 = Blueprint('test_bp2', __name__)\n        self.bp.register_blueprint(bp2)\n        self.assertEqual(len(self.bp._blueprints), 1)\n\n    def test_register(self):\n        @self.bp.route('/')\n        def test_route():\n            pass\n        self.bp.register(self.app, {})\n        self.assertIn('test_bp.test_route', self.app.view_functions)\n\n    def test_add_url_rule(self):\n        self.bp.add_url_rule('/test', 'test_endpoint')\n        self.app.register_blueprint(self.bp, url_prefix='/bp')\n        self.assertIn('/bp/test', self.app.url_map._rules_by_endpoint)\n\n    def test_app_template_filter(self):\n        @self.bp.app_template_filter('test_filter')\n        def test_filter(value):\n            return value\n        self.bp.register(self.app, {})\n        self.assertIn('test_filter', self.app.jinja_env.filters)\n\n    def test_app_template_test(self):\n        @self.bp.app_template_test('test_test')\n        def test_test(value):\n            return value\n        self.bp.register(self.app, {})\n        self.assertIn('test_test', self.app.jinja_env.tests)\n\n    def test_app_template_global(self):\n        @self.bp.app_template_global('test_global')\n        def test_global():\n            return 'test'\n        self.bp.register(self.app, {})\n        self.assertIn('test_global', self.app.jinja_env.globals)\n\n    def test_before_app_request(self):\n        called = []\n        @self.bp.before_app_request\n        def test_before_request():\n            called.append(True)\n        self.bp.register(self.app, {})\n        with self.app.test_request_context():\n            self.app.preprocess_request()\n        self.assertEqual(len(called), 1)\n\n    # Add more tests for other methods and edge cases as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_992": ["\nimport unittest\nfrom sympy.combinatorics.free_groups import free_group, FreeGroup, FreeGroupElement\nfrom sympy import Symbol, S\n\nclass TestFreeGroups(unittest.TestCase):\n\n    def setUp(self):\n        self.F, self.x, self.y, self.z = free_group(\"x, y, z\")\n\n    def test_free_group_creation(self):\n        self.assertIsInstance(self.F, FreeGroup)\n        self.assertEqual(self.F.rank, 3)\n        self.assertEqual(self.F.symbols, (Symbol('x'), Symbol('y'), Symbol('z')))\n\n    def test_free_group_element_creation(self):\n        elm = self.x**2 * self.y**-1\n        self.assertIsInstance(elm, FreeGroupElement)\n        self.assertEqual(elm.array_form, ((self.x, 2), (self.y, -1)))\n\n    def test_free_group_identity(self):\n        self.assertEqual(self.F.identity, FreeGroupElement())\n\n    def test_free_group_order(self):\n        self.assertEqual(self.F.order(), S.Infinity)\n\n    def test_free_group_contains(self):\n        self.assertTrue(self.F.contains(self.x**3 * self.y**2))\n        self.assertFalse(self.F.contains(self.x**-2))\n\n    def test_free_group_element_order(self):\n        self.assertEqual(self.F.identity.order(), 1)\n        self.assertEqual((self.x**2 * self.y**-2 * self.x**-2).order(), S.Infinity)\n\n    def test_free_group_element_inverse(self):\n        self.assertEqual((self.x * self.y).inverse(), self.y**-1 * self.x**-1)\n\n    def test_free_group_element_commutator(self):\n        self.assertEqual(self.x.commutator(self.y), self.x**-1 * self.y**-1 * self.x * self.y)\n\n    def test_free_group_element_eliminate_word(self):\n        self.assertEqual((self.x**2 * self.y**-2 * self.x).eliminate_word(self.x), self.y**-2)\n\n    def test_free_group_element_len(self):\n        self.assertEqual(len(self.x**2 * self.y**-3 * self.x), 6)\n\n    def test_free_group_element_eq(self):\n        self.assertEqual(self.x**2 * self.y, self.x**2 * self.y)\n        self.assertNotEqual(self.x**2 * self.y, self.x * self.y**2)\n\n    def test_free_group_element_lt(self):\n        self.assertTrue(self.y**2 < self.x**2)\n        self.assertFalse(self.x < self.x.inverse())\n\n    def test_free_group_element_exponent_sum(self):\n        self.assertEqual((self.x**2 * self.y**3).exponent_sum(self.x), 2)\n        self.assertEqual((self.x**2 * self.y**4 * self.x**-3).exponent_sum(self.x), -1)\n\n    def test_free_group_element_generator_count(self):\n        self.assertEqual((self.x**2 * self.y**3).generator_count(self.x), 2)\n        self.assertEqual((self.x**2 * self.y**4 * self.x**-3).generator_count(self.x), 5)\n\n    def test_free_group_element_subword(self):\n        self.assertEqual((self.x**5 * self.y * self.x**2 * self.y**-4 * self.x).subword(2, 6), self.x**3 * self.y)\n\n    def test_free_group_element_is_dependent(self):\n        self.assertTrue((self.x**4 * self.y**-3).is_dependent(self.x**4 * self.y**-2))\n        self.assertFalse((self.x**2 * self.y**-1).is_dependent(self.x * self.y))\n\n    def test_free_group_element_contains_generators(self):\n        self.assertEqual((self.x**2 * self.y**-1).contains_generators(), {self.x, self.y})\n        self.assertEqual((self.x**3 * self.z).contains_generators(), {self.x, self.z})\n\n    def test_free_group_element_cyclic_subword(self):\n        self.assertEqual((self.x * self.y * self.x * self.y * self.x).cyclic_subword(2, 4), self.x * self.y * self.x * self.y)\n\n    def test_free_group_element_cyclic_conjugates(self):\n        self.assertEqual((self.x * self.y * self.x * self.y * self.x).cyclic_conjugates(),\n                         {self.x * self.y * self.x**2 * self.y, self.x**2 * self.y * self.x * self.y,\n                          self.y * self.x * self.y * self.x**2, self.y * self.x**2 * self.y * self.x,\n                          self.x * self.y * self.x * self.y * self.x})\n\n    def test_free_group_element_is_cyclic_conjugate(self):\n        self.assertTrue((self.x**2 * self.y**5).is_cyclic_conjugate(self.x * self.y**5 * self.x))\n        self.assertFalse((self.x**-1 * self.y**5 * self.x**-1).is_cyclic_conjugate(self.x * self.y**5 * self.x))\n\n    def test_free_group_element_number_syllables(self):\n        self.assertEqual((self.x**3 * self.y * self.x**-1).number_syllables(), 3)\n\n    def test_free_group_element_exponent_syllable(self):\n        self.assertEqual((self.x**5 * self.y * self.x**2 * self.y**-4 * self.x).exponent_syllable(2), 2)\n\n    def test_free_group_element_generator_syllable(self):\n        self.assertEqual((self.x**5 * self.y * self.x**2 * self.y**-4 * self.x).generator_syllable(3), self.y)\n\n    def test_free_group_element_sub_syllables(self):\n        self.assertEqual((self.x**5 * self.y * self.x**2 * self.y**-4 * self.x).sub_syllables(1, 2), self.y)\n\n    def test_free_group_element_substituted_word(self):\n        self.assertEqual((self.x**5 * self.y * self.x**2 * self.y**-4 * self.x).substituted_word(2, 5, self.z), self.x**5 * self.z * self.y**-4 * self.x)\n\n    def test_free_group_element_is_cyclically_reduced(self):\n        self.assertFalse((self.x**2 * self.y**-1 * self.x**-1).is_cyclically_reduced())\n        self.assertTrue((self.y * self.x**2 * self.y**2).is_cyclically_reduced())\n\n    def test_free_group_element_identity_cyclic_reduction(self):\n        self.assertEqual((self.x**2 * self.y**2 * self.x**-1).identity_cyclic_reduction(), self.x * self.y**2)\n\n    def test_free_group_element_cyclic_reduction(self):\n        self.assertEqual((self.x**-3 * self.y**-1 * self.x**5).cyclic_reduction(), self.y**-1 * self.x**2)\n\n    def test_free_group_element_power_of(self):\n        self.assertTrue(((self.x * self.y)**2).power_of(self.x * self.y))\n        self.assertTrue((self.x**-3 * self.y**-2 * self.x**3).power_of(self.x**-3 * self.y * self.x**3))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_187": ["\nimport unittest\nfrom django.utils import text\n\nclass TextUtilsTest(unittest.TestCase):\n    def test_capfirst(self):\n        self.assertEqual(text.capfirst('hello'), 'Hello')\n        self.assertEqual(text.capfirst(''), '')\n        self.assertEqual(text.capfirst(None), None)\n\n    def test_wrap(self):\n        self.assertEqual(text.wrap('Hello, world!', 5), 'Hello,\\nworld!')\n        self.assertEqual(text.wrap('Hello, world!', 100), 'Hello, world!')\n\n    def test_truncator_chars(self):\n        truncator = text.Truncator('Hello, world!')\n        self.assertEqual(truncator.chars(5), 'Hello\u2026')\n\n    def test_truncator_words(self):\n        truncator = text.Truncator('Hello, world!')\n        self.assertEqual(truncator.words(1), 'Hello\u2026')\n\n    def test_get_valid_filename(self):\n        self.assertEqual(text.get_valid_filename(\"john's portrait in 2004.jpg\"),\n                         'johns_portrait_in_2004.jpg')\n\n    def test_get_text_list(self):\n        self.assertEqual(text.get_text_list(['a', 'b', 'c', 'd']),\n                         'a, b, c or d')\n\n    def test_normalize_newlines(self):\n        self.assertEqual(text.normalize_newlines('Hello\\r\\nworld\\r'),\n                         'Hello\\nworld\\n')\n\n    def test_phone2numeric(self):\n        self.assertEqual(text.phone2numeric('1-800-CALL-NOW'), '1-800-2255-669')\n\n    def test_smart_split(self):\n        self.assertEqual(list(text.smart_split(r'This is \"a person\\'s\" test.')),\n                         ['This', 'is', '\"a person\\\\\\'s\"', 'test.'])\n\n    def test_unescape_entities(self):\n        self.assertEqual(text.unescape_entities('&quot;Hello, world!&quot;'),\n                         '\"Hello, world!\"')\n\n    def test_unescape_string_literal(self):\n        self.assertEqual(text.unescape_string_literal('\"Hello, \\\\\"world\\\\\"!\"'),\n                         'Hello, \"world\"!')\n\n    def test_slugify(self):\n        self.assertEqual(text.slugify('Hello, world!'), 'hello-world')\n\n    def test_camel_case_to_spaces(self):\n        self.assertEqual(text.camel_case_to_spaces('HelloWorld'), 'hello world')\n\n    def test_format_lazy(self):\n        self.assertEqual(text.format_lazy('{0} {1}', 'Hello', 'world!'), 'Hello world!')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_103": ["\nfrom django.test import TestCase\nfrom django.db.models import Avg, Count, Max, Min, StdDev, Sum, Variance\nfrom django.db.models import F, Q, Value\nfrom django.db.models.expressions import Star\nfrom django.db.models.fields import IntegerField\nfrom django.core.exceptions import FieldError, ValueError\nfrom unittest.mock import Mock\n\nclass AggregateTests(TestCase):\n    def test_avg(self):\n        avg = Avg('field')\n        self.assertEqual(avg.function, 'AVG')\n        self.assertEqual(avg.name, 'Avg')\n        self.assertTrue(avg.allow_distinct)\n\n    def test_count(self):\n        count = Count('field')\n        self.assertEqual(count.function, 'COUNT')\n        self.assertEqual(count.name, 'Count')\n        self.assertIsInstance(count.output_field, IntegerField)\n        self.assertTrue(count.allow_distinct)\n\n        count = Count('*', filter=Q(id__gt=0))\n        with self.assertRaises(ValueError):\n            count = Count(Star(), filter=Q(id__gt=0))\n\n    def test_max(self):\n        max_val = Max('field')\n        self.assertEqual(max_val.function, 'MAX')\n        self.assertEqual(max_val.name, 'Max')\n\n    def test_min(self):\n        min_val = Min('field')\n        self.assertEqual(min_val.function, 'MIN')\n        self.assertEqual(min_val.name, 'Min')\n\n    def test_stddev(self):\n        stddev = StdDev('field')\n        self.assertEqual(stddev.function, 'STDDEV_POP')\n        self.assertEqual(stddev.name, 'StdDev')\n\n        stddev = StdDev('field', sample=True)\n        self.assertEqual(stddev.function, 'STDDEV_SAMP')\n\n    def test_sum(self):\n        sum_val = Sum('field')\n        self.assertEqual(sum_val.function, 'SUM')\n        self.assertEqual(sum_val.name, 'Sum')\n        self.assertTrue(sum_val.allow_distinct)\n\n    def test_variance(self):\n        variance = Variance('field')\n        self.assertEqual(variance.function, 'VAR_POP')\n        self.assertEqual(variance.name, 'Variance')\n\n        variance = Variance('field', sample=True)\n        self.assertEqual(variance.function, 'VAR_SAMP')\n\n    def test_resolve_expression(self):\n        avg = Avg(Sum('field'))\n        with self.assertRaises(FieldError):\n            avg.resolve_expression()\n\n    def test_as_sql(self):\n        avg = Avg('field', filter=Q(id__gt=0))\n        compiler = Mock()\n        connection = Mock()\n        connection.features.supports_aggregate_filter_clause = True\n        avg.as_sql(compiler, connection)\n        connection.features.supports_aggregate_filter_clause = False\n        avg.as_sql(compiler, connection)\n"], "sample_984": ["\nimport unittest\nfrom sympy.matrices import SparseMatrix, Matrix\nfrom sympy import symbols, eye, zeros, ShapeError\n\nclass TestSparseMatrix(unittest.TestCase):\n    def setUp(self):\n        self.A = SparseMatrix(((1, 2), (3, 4)))\n        self.B = SparseMatrix(((5, 6), (7, 8)))\n        self.C = SparseMatrix(((1, 0, 0), (0, 1, 0)))\n        self.D = SparseMatrix(((0, 0, 0), (0, 0, 1)))\n        self.E = SparseMatrix(3, 3, lambda i, j: i*2+j)\n\n    def test_init(self):\n        self.assertEqual(self.A._smat, {(0, 0): 1, (0, 1): 2, (1, 0): 3, (1, 1): 4})\n        self.assertEqual(self.C._smat, {(0, 0): 1, (1, 1): 1})\n\n    def test_eq(self):\n        self.assertEqual(self.A, self.A)\n        self.assertNotEqual(self.A, self.B)\n\n    def test_getitem(self):\n        self.assertEqual(self.A[0, 0], 1)\n        self.assertEqual(self.A[1, 1], 4)\n        self.assertEqual(self.A[1], 3)\n        self.assertEqual(self.A[:, 0], [1, 3])\n\n    def test_transpose(self):\n        self.assertEqual(self.A.T, SparseMatrix(((1, 3), (2, 4))))\n\n    def test_add(self):\n        self.assertEqual(self.A + self.B, SparseMatrix(((6, 8), (10, 12))))\n        self.assertEqual(self.A + self.C, self.A)\n\n    def test_multiply(self):\n        self.assertEqual(self.A * self.B, SparseMatrix(((19, 22), (43, 50))))\n        self.assertEqual(self.A * self.C, self.A.row(0).T)\n\n    def test_applyfunc(self):\n        self.assertEqual(self.E.applyfunc(lambda i: 2*i), SparseMatrix(((0, 2, 4), (2, 4, 6), (4, 6, 8))))\n\n    def test_cholesky(self):\n        A = SparseMatrix(((25,15,-5),(15,18,0),(-5,0,11)))\n        self.assertEqual(A.cholesky(), SparseMatrix(((5, 0, 0), (3, 3, 0), (-1, 1, 3))))\n\n    def test_liupc(self):\n        S = SparseMatrix([[1, 0, 3, 2], [0, 0, 1, 0], [4, 0, 0, 5], [0, 6, 7, 0]])\n        self.assertEqual(S.liupc(), ([[0], [], [0], [1, 2]], [4, 3, 4, 4]))\n\n    def test_nnz(self):\n        self.assertEqual(self.A.nnz(), 4)\n        self.assertEqual(self.C.nnz(), 2)\n\n    def test_LDLdecomposition(self):\n        A = SparseMatrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n        L, D = A.LDLdecomposition()\n        self.assertEqual(L, SparseMatrix(((1, 0, 0), (3/5, 1, 0), (-1/5, 1/3, 1))))\n        self.assertEqual(D, SparseMatrix(((25, 0, 0), (0, 9, 0), (0, 0, 9))))\n\n    def test_row_structure_symbolic_cholesky(self):\n        S = SparseMatrix([[1, 0, 3, 2], [0, 0, 1, 0], [4, 0, 0, 5], [0, 6, 7, 0]])\n        self.assertEqual(S.row_structure_symbolic_cholesky(), [[0], [], [0], [1, 2]])\n\n    def test_scalar_multiply(self):\n        self.assertEqual(self.C.scalar_multiply(2), SparseMatrix(((2, 0, 0), (0, 2, 0))))\n\n    def test_solve_least_squares(self):\n        A = Matrix([1, 2, 3])\n        B = Matrix([2, 3, 4])\n        S = SparseMatrix(A.row_join(B))\n        r = S*Matrix([2, 3])\n        xy = S.solve_least_squares(r)\n        self.assertEqual(xy, Matrix([[5/3], [10/3]]))\n\n    def test_solve(self):\n        A = SparseMatrix(((1, 2), (3, 4)))\n        b = Matrix([5, 6])\n        x = A.solve(b)\n        self.assertEqual(x, Matrix([-1, 3/2]))\n\n    def test_row_list(self):\n        self.assertEqual(self.A.row_list(), [(0, 0, 1), (0, 1, 2), (1, 0, 3), (1, 1, 4)])\n\n    def test_col_list(self):\n        self.assertEqual(self.A.col_list(), [(0, 0, 1), (1, 0, 3), (0, 1, 2), (1, 1, 4)])\n\n    def test_col_join(self):\n        self.assertEqual(self.A.col_join(self.B), SparseMatrix(((1, 2, 5, 6), (3, 4, 7, 8))))\n\n    def test_row_join(self):\n        self.assertEqual(self.A.row_join(self.B), SparseMatrix(((1, 2, 5, 6), (3, 4, 7, 8))))\n\n    def test_row_del(self):\n        A = self.A.copy()\n        A.row_del(0)\n        self.assertEqual(A, SparseMatrix(((3, 4))))\n\n    def test_col_del(self):\n        A = self.A.copy()\n        A.col_del(0)\n        self.assertEqual(A, SparseMatrix(((2), (4))))\n\n    def test_row_swap(self):\n        A = self.A.copy()\n        A.row_swap(0, 1)\n        self.assertEqual(A, SparseMatrix(((3, 4), (1, 2))))\n\n    def test_col_swap(self):\n        A = self.A.copy()\n        A.col_swap(0, 1)\n        self.assertEqual(A, SparseMatrix(((2, 1), (4, 3))))\n\n    def test_fill(self):\n        A = self.C.copy()\n        A.fill(2)\n        self.assertEqual(A, SparseMatrix(((2, 2, 2), (2, 2, 2))))\n\n    def test_copyin_matrix(self):\n        A = self.A.copy()\n        A.copyin_matrix((0, 1), Matrix([[5], [6]]))\n        self.assertEqual(A, SparseMatrix(((1, 5), (3, 6))))\n\n    def test_copyin_list(self):\n        A = self.A.copy()\n        A.copyin_list((0, 1), [5, 6])\n        self.assertEqual(A, SparseMatrix(((1, 5), (3, 6))))\n\n    def test_row_op(self):\n        A = self.A.copy()\n        A.row_op(0, lambda v, j: v + 2)\n        self.assertEqual(A, SparseMatrix(((3, 4), (3, 4))))\n\n    def test_col_op(self):\n        A = self.A.copy()\n        A.col_op(0, lambda v, i: v + 2)\n        self.assertEqual(A, SparseMatrix(((3, 2), (5, 4))))\n\n    def test_zip_row_op(self):\n        A = self.A.copy()\n        A.zip_row_op(0, 1, lambda v, u: v + u)\n        self.assertEqual(A, SparseMatrix(((4, 6), (3, 4))))\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_60": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.contrib.admin import ModelAdmin, InlineModelAdmin, StackedInline, TabularInline\nfrom django.contrib.admin.sites import AdminSite\nfrom django.db import models\n\nclass TestModelAdmin(unittest.TestCase):\n    class TestModel(models.Model):\n        test_field = models.CharField(max_length=100)\n\n    def setUp(self):\n        self.model_admin = ModelAdmin(self.TestModel, AdminSite())\n\n    def test_get_form(self):\n        request = MagicMock()\n        form = self.model_admin.get_form(request)\n        self.assertIsInstance(form, type)\n\n    def test_get_changelist_form(self):\n        request = MagicMock()\n        form = self.model_admin.get_changelist_form(request)\n        self.assertIsInstance(form, type)\n\n    # Add more tests as needed...\n\nclass TestInlineModelAdmin(unittest.TestCase):\n    class ParentModel(models.Model):\n        pass\n\n    class ChildModel(models.Model):\n        parent = models.ForeignKey(ParentModel, on_delete=models.CASCADE)\n\n    def setUp(self):\n        self.inline_model_admin = InlineModelAdmin(self.ParentModel, AdminSite())\n        self.inline_model_admin.model = self.ChildModel\n        self.inline_model_admin.fk_name = 'parent'\n\n    def test_get_formset(self):\n        request = MagicMock()\n        formset = self.inline_model_admin.get_formset(request)\n        self.assertIsInstance(formset, type)\n\n    # Add more tests as needed...\n\nclass TestStackedInline(unittest.TestCase):\n    def test_template(self):\n        stacked_inline = StackedInline(ModelAdmin.model, AdminSite())\n        self.assertEqual(stacked_inline.template, 'admin/edit_inline/stacked.html')\n\nclass TestTabularInline(unittest.TestCase):\n    def test_template(self):\n        tabular_inline = TabularInline(ModelAdmin.model, AdminSite())\n        self.assertEqual(tabular_inline.template, 'admin/edit_inline/tabular.html')\n"], "sample_1204": ["\nimport unittest\nfrom sympy.combinatorics.perm_groups import PermutationGroup, _orbit_transversal, Coset, SymmetricPermutationGroup\nfrom sympy.combinatorics import Permutation\n\nclass TestPermutationGroup(unittest.TestCase):\n\n    def setUp(self):\n        self.a = Permutation([0, 2, 1])\n        self.b = Permutation([1, 0, 2])\n        self.G = PermutationGroup([self.a, self.b])\n\n    def test_init(self):\n        self.assertEqual(self.G.degree, 3)\n        self.assertEqual(self.G.generators, [self.a, self.b])\n\n    def test_orbit(self):\n        self.assertEqual(self.G.orbit(0), {0, 1, 2})\n\n    def test_orbit_transversal(self):\n        self.assertEqual(_orbit_transversal(3, [self.a, self.b], 0, False),\n                         [(0, self.a), (1, self.b), (2, self.a*self.b)])\n\n    def test_coset(self):\n        cst = Coset(self.a, self.G, dir=\"+\")\n        self.assertTrue(cst.is_right_coset)\n        self.assertFalse(cst.is_left_coset)\n        self.assertEqual(cst.as_list(), [self.a*self.a, self.a*self.b])\n\n    def test_symmetric_permutation_group(self):\n        SG = SymmetricPermutationGroup(4)\n        self.assertEqual(SG.degree, 4)\n        self.assertEqual(SG.order(), 24)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_432": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.contrib.admin.options import ModelAdmin, InlineModelAdmin, StackedInline, TabularInline\nfrom django.test import RequestFactory\nfrom django.contrib.auth.models import User\nfrom django.contrib.admin.sites import AdminSite\nfrom django.http import HttpRequest\n\nclass TestModelAdmin(unittest.TestCase):\n\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n        self.model_admin = ModelAdmin(User, AdminSite())\n\n    def test_get_object(self):\n        request = self.factory.get('/admin')\n        request.user = self.user\n        obj = self.model_admin.get_object(request, self.user.id)\n        self.assertEqual(obj, self.user)\n\n    def test_get_queryset(self):\n        request = self.factory.get('/admin')\n        request.user = self.user\n        queryset = self.model_admin.get_queryset(request)\n        self.assertEqual(queryset.model, User)\n\n    def test_has_add_permission(self):\n        request = self.factory.get('/admin')\n        request.user = self.user\n        self.assertFalse(self.model_admin.has_add_permission(request))\n\n    def test_has_change_permission(self):\n        request = self.factory.get('/admin')\n        request.user = self.user\n        self.assertFalse(self.model_admin.has_change_permission(request, self.user))\n\n    def test_has_delete_permission(self):\n        request = self.factory.get('/admin')\n        request.user = self.user\n        self.assertFalse(self.model_admin.has_delete_permission(request, self.user))\n\n    def test_has_view_permission(self):\n        request = self.factory.get('/admin')\n        request.user = self.user\n        self.assertFalse(self.model_admin.has_view_permission(request, self.user))\n\nclass TestInlineModelAdmin(unittest.TestCase):\n\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n        self.inline_model_admin = InlineModelAdmin(User, AdminSite())\n\n    def test_get_formset(self):\n        request = self.factory.get('/admin')\n        request.user = self.user\n        formset = self.inline_model_admin.get_formset(request)\n        self.assertIsNotNone(formset)\n\n    def test_has_add_permission(self):\n        request = self.factory.get('/admin')\n        request.user = self.user\n        self.assertFalse(self.inline_model_admin.has_add_permission(request, self.user))\n\n    def test_has_change_permission(self):\n        request = self.factory.get('/admin')\n        request.user = self.user\n        self.assertFalse(self.inline_model_admin.has_change_permission(request, self.user))\n\n    def test_has_delete_permission(self):\n        request = self.factory.get('/admin')\n        request.user = self.user\n        self.assertFalse(self.inline_model_admin.has_delete_permission(request, self.user))\n\n    def test_has_view_permission(self):\n        request = self.factory.get('/admin')\n        request.user = self.user\n        self.assertFalse(self.inline_model_admin.has_view_permission(request, self.user))\n\nclass TestStackedInline(unittest.TestCase):\n\n    def test_template(self):\n        self.assertEqual(StackedInline.template, \"admin/edit_inline/stacked.html\")\n\nclass TestTabularInline(unittest.TestCase):\n\n    def test_template(self):\n        self.assertEqual(TabularInline.template, \"admin/edit_inline/tabular.html\")\n"], "sample_758": ["\nimport unittest\nfrom unittest.mock import Mock\nimport numpy as np\nfrom scipy import sparse\nfrom sklearn.base import BaseEstimator, clone, is_classifier, is_regressor, is_outlier_detector\nfrom sklearn.base import ClassifierMixin, RegressorMixin, OutlierMixin\n\nclass TestBase(unittest.TestCase):\n    def test_first_and_last_element(self):\n        arr = np.array([1, 2, 3])\n        sparse_arr = sparse.csr_matrix(arr)\n        self.assertEqual(BaseEstimator._first_and_last_element(arr), (1, 3))\n        self.assertEqual(BaseEstimator._first_and_last_element(sparse_arr), (1, 3))\n\n    def test_clone(self):\n        mock_estimator = Mock()\n        mock_estimator.get_params.return_value = {}\n        cloned_estimator = clone(mock_estimator)\n        self.assertIsInstance(cloned_estimator, Mock)\n\n    def test_is_classifier(self):\n        classifier = ClassifierMixin()\n        self.assertTrue(is_classifier(classifier))\n\n    def test_is_regressor(self):\n        regressor = RegressorMixin()\n        self.assertTrue(is_regressor(regressor))\n\n    def test_is_outlier_detector(self):\n        outlier_detector = OutlierMixin()\n        self.assertTrue(is_outlier_detector(outlier_detector))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_536": ["\nimport unittest\nimport matplotlib.widgets as widgets\nimport matplotlib.pyplot as plt\nfrom matplotlib.testing.widgets import do_event, mock_event, get_ax\n\nclass TestWidgets(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n\n    def test_Button(self):\n        button = widgets.Button(self.ax, 'Test')\n        self.assertEqual(button.label.get_text(), 'Test')\n\n    def test_CheckButtons(self):\n        labels = ['Test1', 'Test2']\n        check = widgets.CheckButtons(self.ax, labels, [True, False])\n        self.assertEqual([label.get_text() for label in check.labels], labels)\n        self.assertEqual(check.get_status(), [True, False])\n\n    def test_RadioButtons(self):\n        labels = ['Test1', 'Test2']\n        radio = widgets.RadioButtons(self.ax, labels)\n        self.assertEqual([label.get_text() for label in radio.labels], labels)\n        self.assertEqual(radio.value_selected, 'Test1')\n\n    def test_Slider(self):\n        slider = widgets.Slider(self.ax, 'Test', 0, 10, valinit=5)\n        self.assertEqual(slider.val, 5)\n\n    def test_SpanSelector(self):\n        def onselect(vmin, vmax):\n            pass\n        span = widgets.SpanSelector(self.ax, onselect, 'horizontal')\n        self.assertEqual(span.direction, 'horizontal')\n\n    def test_RectangleSelector(self):\n        def onselect(eclick, erelease):\n            pass\n        rect = widgets.RectangleSelector(self.ax, onselect)\n        self.assertIsNone(rect.geometry)\n\n    def test_EllipseSelector(self):\n        def onselect(eclick, erelease):\n            pass\n        ellipse = widgets.EllipseSelector(self.ax, onselect)\n        self.assertIsNone(ellipse.geometry)\n\n    def test_LassoSelector(self):\n        def onselect(verts):\n            pass\n        lasso = widgets.LassoSelector(self.ax, onselect)\n        self.assertIsNone(lasso.verts)\n\n    def test_PolygonSelector(self):\n        def onselect(verts):\n            pass\n        poly = widgets.PolygonSelector(self.ax, onselect)\n        self.assertEqual(poly.verts, [(0, 0)])\n\n    def test_MultiCursor(self):\n        multi = widgets.MultiCursor(self.canvas, [self.ax], useblit=True)\n        self.assertTrue(multi.visible)\n        self.assertTrue(multi.useblit)\n\n    def test_Cursor(self):\n        cursor = widgets.Cursor(self.ax)\n        self.assertTrue(cursor.visible)\n\n    def test_SubplotTool(self):\n        toolfig = plt.figure()\n        tool = widgets.SubplotTool(self.fig, toolfig)\n        self.assertIsInstance(tool, widgets.SubplotTool)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_619": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nfrom xarray.coding.times import (\n    _encode_datetime_with_cftime,\n    _should_cftime_be_used,\n    cftime_to_nptime,\n    decode_cf_datetime,\n    encode_cf_datetime,\n    to_timedelta_unboxed,\n)\n\nclass TestTimes(unittest.TestCase):\n    def setUp(self):\n        self.dates = np.array(['2000-01-01', '2000-01-02', '2000-01-03'], dtype='datetime64[ns]')\n        self.units = 'days since 2000-01-01'\n        self.calendar = 'standard'\n\n    def test_encode_datetime_with_cftime(self):\n        encoded_dates = _encode_datetime_with_cftime(self.dates, self.units, self.calendar)\n        self.assertEqual(encoded_dates.shape, self.dates.shape)\n        self.assertTrue(np.isclose(encoded_dates, np.array([0, 1, 2])).all())\n\n    def test_should_cftime_be_used(self):\n        use_cftime = _should_cftime_be_used(self.dates, self.calendar, None)\n        self.assertFalse(use_cftime)\n\n    def test_cftime_to_nptime(self):\n        cftime_dates = decode_cf_datetime(np.array([0, 1, 2]), self.units, self.calendar)\n        nptime_dates = cftime_to_nptime(cftime_dates)\n        self.assertTrue((nptime_dates == self.dates).all())\n\n    def test_decode_cf_datetime(self):\n        decoded_dates = decode_cf_datetime(np.array([0, 1, 2]), self.units, self.calendar)\n        self.assertTrue((decoded_dates == self.dates).all())\n\n    def test_encode_cf_datetime(self):\n        encoded_dates, encoded_units, encoded_calendar = encode_cf_datetime(self.dates)\n        self.assertEqual(encoded_units, self.units)\n        self.assertEqual(encoded_calendar, self.calendar)\n        self.assertTrue(np.isclose(encoded_dates, np.array([0, 1, 2])).all())\n\n    def test_to_timedelta_unboxed(self):\n        timedeltas = pd.to_timedelta(np.array([1, 2, 3], dtype='timedelta64[D]'))\n        unboxed_timedeltas = to_timedelta_unboxed(timedeltas)\n        self.assertTrue(np.array_equal(unboxed_timedeltas, np.array([86400000000000, 172800000000000, 259200000000000], dtype='timedelta64[ns]')))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_822": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier, VotingRegressor\nfrom sklearn.exceptions import NotFittedError\n\nclass TestVotingClassifier(unittest.TestCase):\n    def setUp(self):\n        self.clf1 = LogisticRegression(solver='lbfgs', multi_class='multinomial', random_state=1)\n        self.clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n        self.clf3 = GaussianNB()\n        self.X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n        self.y = np.array([1, 1, 1, 2, 2, 2])\n\n    def test_fit(self):\n        eclf = VotingClassifier(estimators=[('lr', self.clf1), ('rf', self.clf2), ('gnb', self.clf3)])\n        eclf.fit(self.X, self.y)\n        self.assertIsInstance(eclf.estimators_, list)\n        self.assertEqual(len(eclf.estimators_), 3)\n\n    def test_predict(self):\n        eclf = VotingClassifier(estimators=[('lr', self.clf1), ('rf', self.clf2), ('gnb', self.clf3)])\n        eclf.fit(self.X, self.y)\n        predictions = eclf.predict(self.X)\n        self.assertEqual(len(predictions), len(self.y))\n\n    def test_predict_proba(self):\n        eclf = VotingClassifier(estimators=[('lr', self.clf1), ('rf', self.clf2), ('gnb', self.clf3)], voting='soft')\n        eclf.fit(self.X, self.y)\n        probabilities = eclf.predict_proba(self.X)\n        self.assertEqual(probabilities.shape, (len(self.y), len(np.unique(self.y))))\n\nclass TestVotingRegressor(unittest.TestCase):\n    def setUp(self):\n        self.r1 = LinearRegression()\n        self.r2 = RandomForestRegressor(n_estimators=10, random_state=1)\n        self.X = np.array([[1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36]])\n        self.y = np.array([2, 6, 12, 20, 30, 42])\n\n    def test_fit(self):\n        er = VotingRegressor([('lr', self.r1), ('rf', self.r2)])\n        er.fit(self.X, self.y)\n        self.assertIsInstance(er.estimators_, list)\n        self.assertEqual(len(er.estimators_), 2)\n\n    def test_predict(self):\n        er = VotingRegressor([('lr', self.r1), ('rf', self.r2)])\n        er.fit(self.X, self.y)\n        predictions = er.predict(self.X)\n        self.assertEqual(len(predictions), len(self.y))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_446": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.template.defaultfilters import (\n    addslashes, capfirst, escapejs_filter, floatformat, iriencode, linenumbers, lower,\n    make_list, slugify, stringformat, title, truncatechars, truncatechars_html,\n    truncatewords, truncatewords_html, upper, urlencode, urlize, urlizetrunc, wordcount,\n    wordwrap, ljust, rjust, center, cut, escape_filter, force_escape, linebreaks_filter,\n    linebreaksbr, safe, safeseq, striptags, dictsort, dictsortreversed, first, join,\n    last, length, length_is, random, slice_filter, unordered_list, add, get_digit, date,\n    time, timesince_filter, timeuntil_filter, default, default_if_none, divisibleby,\n    yesno, filesizeformat, pluralize, phone2numeric_filter, pprint\n)\nfrom django.utils.safestring import SafeData, mark_safe\n\nclass TestDefaultFilters(unittest.TestCase):\n    def test_addslashes(self):\n        self.assertEqual(addslashes('test'), 'test')\n        self.assertEqual(addslashes(\"test's\"), \"test\\\\'s\")\n\n    # More tests for other functions...\n\n    def test_yesno(self):\n        self.assertEqual(yesno(True), 'yes')\n        self.assertEqual(yesno(False), 'no')\n        self.assertEqual(yesno(None), 'maybe')\n\n    # More tests for other functions...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_350": ["\nfrom django.test import TestCase\nfrom django.db.models.query import QuerySet, RawQuerySet, prefetch_related_objects, Prefetch\nfrom django.db.models import Model, CharField, ForeignKey\nfrom django.db import connections\n\nclass TestQuerySet(TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            name = CharField(max_length=200)\n\n        self.qs = QuerySet(model=TestModel)\n\n    def test_queryset_repr(self):\n        self.assertTrue(repr(self.qs).startswith('<QuerySet'))\n\n    def test_queryset_len(self):\n        self.assertEqual(len(self.qs), 0)\n\n    def test_queryset_iter(self):\n        self.assertEqual(list(self.qs), [])\n\n    def test_queryset_bool(self):\n        self.assertFalse(bool(self.qs))\n\n    def test_queryset_getitem(self):\n        with self.assertRaises(IndexError):\n            self.qs[0]\n\n    def test_queryset_and_or(self):\n        qs1 = self.qs.filter(name='test1')\n        qs2 = self.qs.filter(name='test2')\n        self.assertIsInstance(qs1 & qs2, QuerySet)\n        self.assertIsInstance(qs1 | qs2, QuerySet)\n\nclass TestRawQuerySet(TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            name = CharField(max_length=200)\n\n        self.rqs = RawQuerySet(raw_query='SELECT * FROM testmodel', model=TestModel)\n\n    def test_rawqueryset_iter(self):\n        self.assertEqual(list(self.rqs), [])\n\nclass TestPrefetchRelatedObjects(TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            name = CharField(max_length=200)\n\n        class RelatedModel(Model):\n            test_model = ForeignKey(TestModel, on_delete=CASCADE)\n\n        self.qs = QuerySet(model=TestModel)\n        self.instances = [TestModel(name='test')]\n\n    def test_prefetch_related_objects(self):\n        prefetch_related_objects(self.instances, Prefetch('relatedmodel_set'))\n        self.assertTrue(hasattr(self.instances[0], '_prefetched_objects_cache'))\n\nclass TestDatabaseFeatures(TestCase):\n    def test_database_features(self):\n        db_features = connections['default'].features\n        self.assertIsInstance(db_features.can_return_rows_from_bulk_insert, bool)\n        self.assertIsInstance(db_features.supports_select_for_update_with_limit, bool)\n"], "sample_849": ["\nimport unittest\nfrom sklearn.feature_extraction.text import strip_tags, strip_accents_unicode, strip_accents_ascii, HashingVectorizer, CountVectorizer, TfidfTransformer, TfidfVectorizer\n\nclass TestTextFeatureExtraction(unittest.TestCase):\n\n    def setUp(self):\n        self.corpus = [\n            'This is the first document.',\n            'This document is the second document.',\n            'And this is the third one.',\n            'Is this the first document?',\n        ]\n\n    def test_strip_tags(self):\n        text = \"<html>This is a test</html>\"\n        self.assertEqual(strip_tags(text), \" This is a test \")\n\n    def test_strip_accents_unicode(self):\n        text = \"r\u00e9sum\u00e9\"\n        self.assertEqual(strip_accents_unicode(text), \"resume\")\n\n    def test_strip_accents_ascii(self):\n        text = \"r\u00e9sum\u00e9\"\n        self.assertEqual(strip_accents_ascii(text), \"resume\")\n\n    def test_hashing_vectorizer(self):\n        vectorizer = HashingVectorizer(n_features=2**4)\n        X = vectorizer.fit_transform(self.corpus)\n        self.assertEqual(X.shape, (4, 16))\n\n    def test_count_vectorizer(self):\n        vectorizer = CountVectorizer()\n        X = vectorizer.fit_transform(self.corpus)\n        self.assertEqual(len(vectorizer.get_feature_names()), 9)\n\n    def test_tfidf_transformer(self):\n        count_vectorizer = CountVectorizer()\n        tfidf_transformer = TfidfTransformer()\n        X_counts = count_vectorizer.fit_transform(self.corpus)\n        X_tfidf = tfidf_transformer.fit_transform(X_counts)\n        self.assertEqual(X_tfidf.shape, (4, 9))\n\n    def test_tfidf_vectorizer(self):\n        vectorizer = TfidfVectorizer()\n        X = vectorizer.fit_transform(self.corpus)\n        self.assertEqual(len(vectorizer.get_feature_names()), 9)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_484": ["\nfrom django.test import TestCase\nfrom django.db.models import Value, F\nfrom django.db.models.functions import (\n    Concat, Left, Length, Lower, LPad, LTrim,\n    MD5, Ord, Repeat, Replace, Right, RPad,\n    RTrim, SHA1, SHA224, SHA256, SHA384, SHA512,\n    StrIndex, Substr, Trim, Upper,\n)\nfrom django.db.models.functions.text import Chr\nfrom django.db.models import CharField, IntegerField\n\nclass TextFunctionsTests(TestCase):\n    def test_chr_function(self):\n        chr_func = Chr(65)\n        self.assertEqual(chr_func.as_sql(), ('CHAR(65 USING utf16)', []))\n\n    def test_concat_function(self):\n        concat_func = Concat(Value('Hello'), Value(' World'))\n        self.assertEqual(concat_func.as_sql(), (\"('Hello' || ' World')\", []))\n\n    def test_left_function(self):\n        left_func = Left(Value('Hello'), 3)\n        self.assertEqual(left_func.as_sql(), (\"SUBSTRING('Hello', 1, 3)\", []))\n\n    def test_length_function(self):\n        length_func = Length(Value('Hello'))\n        self.assertEqual(length_func.as_sql(), (\"CHAR_LENGTH('Hello')\", []))\n\n    def test_lower_function(self):\n        lower_func = Lower(Value('HELLO'))\n        self.assertEqual(lower_func.as_sql(), (\"LOWER('HELLO')\", []))\n\n    # Continue with other functions...\n"], "sample_82": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.urls.resolvers import RegexPattern, RoutePattern, get_resolver, URLPattern, URLResolver\n\nclass TestDjangoURLResolvers(unittest.TestCase):\n    def setUp(self):\n        self.mock_settings = Mock()\n        self.mock_settings.ROOT_URLCONF = 'test.urls'\n        self.mock_settings.APPEND_SLASH = True\n        self.mock_settings.LANGUAGE_CODE = 'en'\n        self.mock_import_module = patch('django.urls.resolvers.import_module')\n        self.mock_import_module.start()\n\n    def tearDown(self):\n        self.mock_import_module.stop()\n\n    def test_regex_pattern_match(self):\n        pattern = RegexPattern(r'^test/(?P<pk>\\d+)/$')\n        match = pattern.match('/test/123/')\n        self.assertEqual(match, ('', (), {'pk': '123'}))\n\n    def test_route_pattern_match(self):\n        pattern = RoutePattern(route='test/<int:pk>/')\n        match = pattern.match('/test/123/')\n        self.assertEqual(match, ('', (), {'pk': 123}))\n\n    def test_url_pattern_resolve(self):\n        pattern = RegexPattern(r'^test/(?P<pk>\\d+)/$')\n        view = Mock()\n        url_pattern = URLPattern(pattern, view)\n        resolver_match = url_pattern.resolve('/test/123/')\n        self.assertEqual(resolver_match.func, view)\n\n    def test_url_resolver_resolve(self):\n        pattern = RegexPattern(r'^test/')\n        url_pattern = URLPattern(pattern, Mock())\n        resolver = URLResolver(pattern, urlconf_name='test.urls', url_patterns=[url_pattern])\n        resolver_match = resolver.resolve('/test/')\n        self.assertIsNotNone(resolver_match)\n\n    def test_get_resolver(self):\n        with patch('django.urls.resolvers.settings', self.mock_settings):\n            resolver = get_resolver()\n            self.assertIsInstance(resolver, URLResolver)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_418": ["\nimport unittest\nfrom django.template.defaultfilters import (\n    addslashes,\n    capfirst,\n    escapejs_filter,\n    json_script,\n    floatformat,\n    iriencode,\n    linenumbers,\n    lower,\n    make_list,\n    slugify,\n    stringformat,\n    title,\n    truncatechars,\n    truncatechars_html,\n    truncatewords,\n    truncatewords_html,\n    upper,\n    urlencode,\n    urlize,\n    urlizetrunc,\n    wordcount,\n    wordwrap,\n    ljust,\n    rjust,\n    center,\n    cut,\n    escape_filter,\n    force_escape,\n    linebreaks_filter,\n    linebreaksbr,\n    safe,\n    safeseq,\n    striptags,\n    dictsort,\n    dictsortreversed,\n    first,\n    join,\n    last,\n    length,\n    length_is,\n    random,\n    slice_filter,\n    unordered_list,\n    add,\n    get_digit,\n    date,\n    time,\n    timesince_filter,\n    timeuntil_filter,\n    default,\n    default_if_none,\n    divisibleby,\n    yesno,\n    filesizeformat,\n    pluralize,\n    phone2numeric_filter,\n    pprint,\n)\nfrom django.utils.safestring import SafeData\n\nclass TestDefaultFilters(unittest.TestCase):\n\n    def test_addslashes(self):\n        self.assertEqual(addslashes('Hello, World!\"\\'\\\\'), 'Hello\\\\,\\\\ World\\\\!\\\\\"\\\\\\\\\\\\\\\\')\n\n    def test_capfirst(self):\n        self.assertEqual(capfirst('hello'), 'Hello')\n\n    # Add more tests for each filter...\n\n    # Example test for a filter that takes arguments\n    def test_floatformat(self):\n        self.assertEqual(floatformat(34.23234, 2), '34.23')\n\n    # Example test for a filter that might return SafeData\n    def test_urlize(self):\n        self.assertIsInstance(urlize('Visit https://www.example.com'), SafeData)\n\n    # Example test for a filter that requires setup\n    def test_join(self):\n        self.assertEqual(join(['a', 'b', 'c'], ', '), 'a, b, c')\n\n    # Add more tests as needed...\n"], "sample_748": ["\nimport unittest\nfrom unittest.mock import patch\nimport numpy as np\nfrom sklearn.model_selection._search import GridSearchCV, RandomizedSearchCV, ParameterGrid, ParameterSampler\nfrom sklearn.base import BaseEstimator\nfrom sklearn.dummy import DummyClassifier\n\nclass TestSklearnModelSelection(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n        self.y = np.array([0, 1, 0, 1])\n        self.estimator = DummyClassifier()\n        self.param_grid = {'strategy': ['stratified', 'uniform']}\n        self.param_distributions = {'strategy': ['stratified', 'uniform']}\n\n    def test_parameter_grid(self):\n        grid = ParameterGrid(self.param_grid)\n        self.assertEqual(len(grid), 2)\n        self.assertEqual(list(grid), [{'strategy': 'stratified'}, {'strategy': 'uniform'}])\n\n    def test_parameter_sampler(self):\n        sampler = ParameterSampler(self.param_distributions, n_iter=5, random_state=42)\n        samples = list(sampler)\n        self.assertEqual(len(samples), 5)\n\n    @patch('sklearn.model_selection._search.check_cv')\n    @patch('sklearn.model_selection._search._check_multimetric_scoring')\n    @patch('sklearn.model_selection._search._fit_and_score')\n    @patch('sklearn.model_selection._search.clone')\n    @patch('sklearn.model_selection._search.Parallel')\n    def test_grid_search_cv(self, mock_parallel, mock_clone, mock_fit_and_score, mock_check_multimetric_scoring, mock_check_cv):\n        mock_check_cv.return_value.get_n_splits.return_value = 2\n        mock_check_multimetric_scoring.return_value = ({'score': None}, False)\n        mock_fit_and_score.return_value = ([0.8, 0.9], 2, 1.0, 0.1)\n        mock_clone.return_value = self.estimator\n        mock_parallel.return_value = [mock_fit_and_score.return_value]\n        grid_search = GridSearchCV(self.estimator, self.param_grid)\n        grid_search.fit(self.X, self.y)\n        self.assertEqual(grid_search.best_score_, 0.9)\n        self.assertEqual(grid_search.best_params_, {'strategy': 'uniform'})\n\n    @patch('sklearn.model_selection._search.check_cv')\n    @patch('sklearn.model_selection._search._check_multimetric_scoring')\n    @patch('sklearn.model_selection._search._fit_and_score')\n    @patch('sklearn.model_selection._search.clone')\n    @patch('sklearn.model_selection._search.Parallel')\n    def test_randomized_search_cv(self, mock_parallel, mock_clone, mock_fit_and_score, mock_check_multimetric_scoring, mock_check_cv):\n        mock_check_cv.return_value.get_n_splits.return_value = 2\n        mock_check_multimetric_scoring.return_value = ({'score': None}, False)\n        mock_fit_and_score.return_value = ([0.8, 0.9], 2, 1.0, 0.1)\n        mock_clone.return_value = self.estimator\n        mock_parallel.return_value = [mock_fit_and_score.return_value]\n        random_search = RandomizedSearchCV(self.estimator, self.param_distributions, n_iter=2, random_state=42)\n        random_search.fit(self.X, self.y)\n        self.assertIn(random_search.best_params_['strategy'], ['stratified', 'uniform'])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_756": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.logistic import LogisticRegression, logistic_regression_path, LogisticRegressionCV, _logistic_loss_and_grad, _logistic_grad_hess, _multinomial_grad_hess, _logistic_loss, _log_reg_scoring_path\nfrom sklearn.datasets import make_classification\n\nclass TestLogisticRegression(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, n_features=20, random_state=42)\n\n    def test_logistic_regression_fit(self):\n        model = LogisticRegression()\n        model.fit(self.X, self.y)\n        self.assertIsNotNone(model.coef_)\n        self.assertIsNotNone(model.intercept_)\n\n    def test_logistic_regression_path(self):\n        coefs, Cs, n_iter = logistic_regression_path(self.X, self.y)\n        self.assertIsInstance(coefs, list)\n        self.assertIsInstance(Cs, np.ndarray)\n        self.assertIsInstance(n_iter, np.ndarray)\n\n    def test_logistic_regression_cv_fit(self):\n        model = LogisticRegressionCV()\n        model.fit(self.X, self.y)\n        self.assertIsNotNone(model.coef_)\n        self.assertIsNotNone(model.intercept_)\n        self.assertIsNotNone(model.Cs_)\n        self.assertIsNotNone(model.coefs_paths_)\n        self.assertIsNotNone(model.scores_)\n        self.assertIsNotNone(model.C_)\n\n    def test_logistic_loss_and_grad(self):\n        w = np.random.randn(self.X.shape[1])\n        loss, grad = _logistic_loss_and_grad(w, self.X, self.y, alpha=1.0)\n        self.assertIsInstance(loss, float)\n        self.assertIsInstance(grad, np.ndarray)\n\n    def test_logistic_grad_hess(self):\n        w = np.random.randn(self.X.shape[1])\n        grad, hessp = _logistic_grad_hess(w, self.X, self.y, alpha=1.0)\n        self.assertIsInstance(grad, np.ndarray)\n        self.assertIsInstance(hessp, callable)\n\n    def test_multinomial_grad_hess(self):\n        # Assuming multinomial case\n        w = np.random.randn(len(np.unique(self.y)) * self.X.shape[1])\n        grad, hessp = _multinomial_grad_hess(w, self.X, self.y, alpha=1.0)\n        self.assertIsInstance(grad, np.ndarray)\n        self.assertIsInstance(hessp, callable)\n\n    def test_logistic_loss(self):\n        w = np.random.randn(self.X.shape[1])\n        loss = _logistic_loss(w, self.X, self.y, alpha=1.0)\n        self.assertIsInstance(loss, float)\n\n    def test_log_reg_scoring_path(self):\n        train = np.random.choice(range(len(self.X)), size=int(len(self.X)*0.8), replace=False)\n        test = np.setdiff1d(range(len(self.X)), train)\n        coefs, Cs, scores, n_iter = _log_reg_scoring_path(self.X, self.y, train, test)\n        self.assertIsInstance(coefs, list)\n        self.assertIsInstance(Cs, np.ndarray)\n        self.assertIsInstance(scores, np.ndarray)\n        self.assertIsInstance(n_iter, np.ndarray)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1207": ["\nimport unittest\nfrom sympy.parsing.sympy_parser import parse_expr, standard_transformations, T, TokenError\nfrom sympy import symbols, Integer, Float, I, Eq\n\nclass TestSymPyParser(unittest.TestCase):\n\n    def setUp(self):\n        self.x = symbols('x')\n        self.y = symbols('y')\n\n    def test_parse_expr_standard_transformations(self):\n        self.assertEqual(parse_expr(\"1/2\"), 1/2)\n        self.assertIsInstance(parse_expr(\"1/2\"), Integer)\n\n        self.assertEqual(parse_expr(\".3\"), 0.3)\n        self.assertIsInstance(parse_expr(\".3\"), Float)\n\n        self.assertEqual(parse_expr(\"1+2j\"), 1+2j)\n        self.assertIsInstance(parse_expr(\"1+2j\"), complex)\n\n        self.assertEqual(parse_expr(\"3x\"), 3*self.x)\n\n    def test_parse_expr_implicit_multiplication(self):\n        self.assertEqual(parse_expr(\"2x\", transformations=T[:6]), 2*self.x)\n\n    def test_parse_expr_rationalize(self):\n        self.assertEqual(parse_expr(\".3\", transformations=T[3, 11]), 3/10)\n\n    def test_parse_expr_custom_transformations(self):\n        transformations = (standard_transformations + (T[6],))\n        self.assertEqual(parse_expr(\"1^2\", transformations=transformations), 1**2)\n\n    def test_parse_expr_invalid_syntax(self):\n        with self.assertRaises(SyntaxError):\n            parse_expr(\"invalid_syntax\")\n\n    def test_parse_expr_equals_sign(self):\n        transformations = (standard_transformations + (T[9],))\n        self.assertEqual(parse_expr(\"1=2\", transformations=transformations), Eq(1, 2))\n\n    def test_parse_expr_nested_equals_sign(self):\n        transformations = (standard_transformations + (T[9],))\n        self.assertEqual(parse_expr(\"(1=2)=False\", transformations=transformations), Eq(Eq(1, 2), False))\n\n    def test_parse_expr_function_exponentiation(self):\n        transformations = (standard_transformations + (T[10],))\n        self.assertEqual(parse_expr(\"sin**2(x)\", transformations=transformations), Eq(sin(x)**2))\n\n    def test_parse_expr_lambda_notation(self):\n        transformations = (standard_transformations + (T[0],))\n        self.assertEqual(parse_expr(\"lambda x: x**2\", transformations=transformations), Lambda((self.x,), self.x**2))\n\n    def test_parse_expr_factorial_notation(self):\n        self.assertEqual(parse_expr(\"3!\"), 6)\n\n    def test_parse_expr_repeated_decimals(self):\n        self.assertEqual(parse_expr(\"0.2[1]\", transformations=T[:3]), 0.2111)\n\n    def test_parse_expr_evaluate_false(self):\n        self.assertEqual(parse_expr(\"2+3\", evaluate=False), Add(Integer(2), Integer(3)))\n\n    def test_parse_expr_evaluate_false_complex(self):\n        self.assertEqual(parse_expr(\"1+2j\", evaluate=False), Add(Integer(1), Mul(Integer(2), I)))\n\n    def test_parse_expr_evaluate_false_function(self):\n        self.assertEqual(parse_expr(\"sin(x)\", evaluate=False), sin(self.x))\n\n    def test_parse_expr_evaluate_false_equals_sign(self):\n        transformations = (standard_transformations + (T[9],))\n        self.assertEqual(parse_expr(\"1=2\", transformations=transformations, evaluate=False), Eq(Integer(1), Integer(2)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_754": ["\nimport unittest\nimport numpy as np\nfrom sklearn.impute import SimpleImputer, IterativeImputer, MissingIndicator\n\nclass TestImpute(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2, np.nan],\n                           [3, np.nan, 5],\n                           [6, 7, 8]])\n        self.X_with_str = np.array([['a', 2, ''],\n                                    [3, '', 5],\n                                    ['a', 7, 'b']], dtype=object)\n\n    def test_SimpleImputer(self):\n        imp = SimpleImputer(missing_values=np.nan, strategy='mean')\n        imp.fit(self.X)\n        result = imp.transform(self.X)\n        expected = np.array([[1, 2, 5],\n                             [3, 4.5, 5],\n                             [6, 7, 8]])\n        np.testing.assert_array_equal(result, expected)\n\n        imp = SimpleImputer(missing_values='', strategy='most_frequent')\n        imp.fit(self.X_with_str)\n        result = imp.transform(self.X_with_str)\n        expected = np.array([['a', 2, 'a'],\n                             [3, 'a', 5],\n                             ['a', 7, 'b']], dtype=object)\n        np.testing.assert_array_equal(result, expected)\n\n    def test_IterativeImputer(self):\n        imp = IterativeImputer(max_iter=10, random_state=0)\n        imp.fit(self.X)\n        result = imp.transform(self.X)\n        # Since the result is stochastic, we can't check for equality, but we can check for shape\n        self.assertEqual(result.shape, self.X.shape)\n\n    def test_MissingIndicator(self):\n        ind = MissingIndicator()\n        ind.fit(self.X)\n        result = ind.transform(self.X)\n        expected = np.array([[False, False, True],\n                             [False, True, False],\n                             [False, False, False]])\n        np.testing.assert_array_equal(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_675": ["\nimport logging\nimport pytest\nfrom _pytest.nodes import Node\nfrom _pytest.logging import LogCaptureHandler, LogCaptureFixture, catching_logs, get_log_level_for_setting, _FileHandler, _LiveLoggingStreamHandler, _LiveLoggingNullHandler\n\ndef test_log_capture_handler():\n    handler = LogCaptureHandler()\n    logger = logging.getLogger(\"test_logger\")\n    logger.addHandler(handler)\n    logger.setLevel(logging.INFO)\n    logger.info(\"Test log message\")\n    assert len(handler.records) == 1\n    assert handler.records[0].getMessage() == \"Test log message\"\n    handler.reset()\n    assert len(handler.records) == 0\n\ndef test_log_capture_fixture():\n    class MockNode(Node):\n        def __init__(self):\n            super().__init__(\"mock_node\", config=None, session=None)\n\n    node = MockNode()\n    fixture = LogCaptureFixture(node)\n    fixture.set_level(logging.INFO)\n    logger = logging.getLogger(\"test_logger\")\n    logger.info(\"Test log message\")\n    assert len(fixture.records) == 1\n    assert fixture.records[0].getMessage() == \"Test log message\"\n    fixture.clear()\n    assert len(fixture.records) == 0\n\ndef test_catching_logs():\n    handler = LogCaptureHandler()\n    with catching_logs(handler, level=logging.INFO):\n        logger = logging.getLogger(\"test_logger\")\n        logger.info(\"Test log message\")\n    assert len(handler.records) == 1\n    assert handler.records[0].getMessage() == \"Test log message\"\n\ndef test_get_log_level_for_setting(config):\n    config.addinivalue_line(\"log_level\", \"INFO\")\n    assert get_log_level_for_setting(config, \"log_level\") == logging.INFO\n\ndef test_file_handler():\n    with open(\"test.log\", \"w\") as f:\n        handler = _FileHandler(f.name)\n        logger = logging.getLogger(\"test_logger\")\n        logger.addHandler(handler)\n        logger.setLevel(logging.INFO)\n        logger.info(\"Test log message\")\n        handler.flush()\n        handler.close()\n    with open(\"test.log\", \"r\") as f:\n        assert \"Test log message\" in f.read()\n\ndef test_live_logging_stream_handler():\n    class MockTerminalReporter:\n        def __init__(self):\n            self.output = \"\"\n\n        def write(self, s):\n            self.output += s\n\n    class MockCaptureManager:\n        def global_and_fixture_disabled(self):\n            return nullcontext()\n\n    reporter = MockTerminalReporter()\n    capture_manager = MockCaptureManager()\n    handler = _LiveLoggingStreamHandler(reporter, capture_manager)\n    logger = logging.getLogger(\"test_logger\")\n    logger.addHandler(handler)\n    logger.setLevel(logging.INFO)\n    logger.info(\"Test log message\")\n    assert \"Test log message\" in reporter.output\n\ndef test_live_logging_null_handler():\n    handler = _LiveLoggingNullHandler()\n    handler.reset()\n    handler.set_when(\"test\")\n    assert True  # No exceptions raised, test passes\n"], "sample_704": ["\nimport pytest\nimport warnings\nfrom _pytest import deprecated\n\ndef test_fillfuncargs():\n    with pytest.warns(deprecated.PytestDeprecationWarning) as record:\n        deprecated.FILLFUNCARGS.format(name='test')\n    assert len(record) == 1\n    assert 'test is deprecated' in str(record[0].message)\n\ndef test_pytest_collect_module():\n    with pytest.warns(deprecated.PytestDeprecationWarning) as record:\n        deprecated.PYTEST_COLLECT_MODULE.format(name='module')\n    assert len(record) == 1\n    assert 'pytest.collect.module was moved' in str(record[0].message)\n\ndef test_yield_fixture():\n    with pytest.warns(deprecated.PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.YIELD_FIXTURE)\n    assert len(record) == 1\n    assert '@pytest.yield_fixture is deprecated' in str(record[0].message)\n\ndef test_minus_k_dash():\n    with pytest.warns(deprecated.PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.MINUS_K_DASH)\n    assert len(record) == 1\n    assert 'The `-k \\'-expr\\'` syntax to -k is deprecated' in str(record[0].message)\n\ndef test_minus_k_colon():\n    with pytest.warns(deprecated.PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.MINUS_K_COLON)\n    assert len(record) == 1\n    assert 'The `-k \\'expr:\\'` syntax to -k is deprecated' in str(record[0].message)\n\ndef test_warning_captured_hook():\n    with pytest.warns(deprecated.PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.WARNING_CAPTURED_HOOK)\n    assert len(record) == 1\n    assert 'The pytest_warning_captured is deprecated' in str(record[0].message)\n\ndef test_warning_cmdline_preparse_hook():\n    with pytest.warns(deprecated.PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.WARNING_CMDLINE_PREPARSE_HOOK)\n    assert len(record) == 1\n    assert 'The pytest_cmdline_preparse hook is deprecated' in str(record[0].message)\n\n# Add more tests for the remaining deprecated constants and functions\n"], "sample_1061": ["\nimport unittest\nfrom sympy import symbols, S\nfrom sympy.core.power import Pow, integer_nthroot, integer_log, isqrt\n\nclass TestPowerFunctions(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n\n    def test_isqrt(self):\n        self.assertEqual(isqrt(16), 4)\n        self.assertEqual(isqrt(26), 5)\n        self.assertRaises(ValueError, isqrt, -1)\n\n    def test_integer_nthroot(self):\n        self.assertEqual(integer_nthroot(16, 2), (4, True))\n        self.assertEqual(integer_nthroot(26, 2), (5, False))\n        self.assertRaises(ValueError, integer_nthroot, -1, 2)\n        self.assertRaises(ValueError, integer_nthroot, 16, -2)\n\n    def test_integer_log(self):\n        self.assertEqual(integer_log(125, 5), (3, True))\n        self.assertEqual(integer_log(17, 9), (1, False))\n        self.assertEqual(integer_log(4, -2), (2, True))\n        self.assertEqual(integer_log(-125, -5), (3, True))\n        self.assertRaises(ValueError, integer_log, 0, 2)\n        self.assertRaises(ValueError, integer_log, 2, 1)\n\n    def test_Pow_init(self):\n        self.assertEqual(Pow(self.x, self.y), self.x**self.y)\n        self.assertEqual(Pow(self.x, self.z), self.x**self.z)\n        self.assertIsInstance(Pow(self.x, self.y), Pow)\n\n    def test_Pow_properties(self):\n        p = Pow(self.x, self.y)\n        self.assertEqual(p.base, self.x)\n        self.assertEqual(p.exp, self.y)\n\n    def test_Pow_eval(self):\n        self.assertEqual(Pow(2, 3), 8)\n        self.assertEqual(Pow(S.NaN, 2), S.NaN)\n        self.assertEqual(Pow(S.Zero, -1), S.ComplexInfinity)\n        self.assertEqual(Pow(S.One, -1), S.One)\n        self.assertEqual(Pow(S.One, S.ComplexInfinity), S.NaN)\n        self.assertEqual(Pow(S.One, S.Zero), S.One)\n        self.assertEqual(Pow(S.One, self.y), S.One)\n        self.assertEqual(Pow(self.x, S.Zero), S.One)\n        self.assertEqual(Pow(self.x, S.One), self.x)\n        self.assertEqual(Pow(-S.Infinity, -1), S.Zero)\n        self.assertEqual(Pow(-S.One, -1), -S.One)\n        self.assertEqual(Pow(S.Infinity, -1), S.Zero)\n        self.assertEqual(Pow(S.Zero, S.Infinity), S.Zero)\n        self.assertEqual(Pow(S.Zero, -S.Infinity), S.ComplexInfinity)\n        self.assertEqual(Pow(S.Infinity, S.Infinity), S.Infinity)\n        self.assertEqual(Pow(S.Infinity, -S.Infinity), S.Zero)\n        self.assertEqual(Pow(-S.Infinity, S.Infinity), S.ComplexInfinity)\n        self.assertEqual(Pow(-S.Infinity, -S.Infinity), S.ComplexInfinity)\n        self.assertEqual(Pow(S.Infinity, S.I), S.NaN)\n        self.assertEqual(Pow(-S.Infinity, S.I), S.NaN)\n        self.assertEqual(Pow(S.Infinity, 1 + S.I), S.ComplexInfinity)\n        self.assertEqual(Pow(-S.Infinity, 1 + S.I), S.ComplexInfinity)\n        self.assertEqual(Pow(S.Infinity, -1 + S.I), S.Zero)\n        self.assertEqual(Pow(-S.Infinity, -1 + S.I), S.Zero)\n\n    # Add more test methods as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1133": ["\nimport unittest\nfrom sympy import symbols, pi, S, Matrix, Ray3D, Plane, Point3D\nfrom sympy.physics.optics.utils import (refraction_angle, fresnel_coefficients, deviation,\n                                        brewster_angle, critical_angle, lens_makers_formula,\n                                        mirror_formula, lens_formula, hyperfocal_distance, transverse_magnification)\n\nclass TestOpticsUtils(unittest.TestCase):\n    def setUp(self):\n        self.n1, self.n2 = symbols('n1, n2')\n        self.n = Matrix([0, 0, 1])\n        self.P = Plane(Point3D(0, 0, 0), normal_vector=[0, 0, 1])\n        self.r1 = Ray3D(Point3D(-1, -1, 1), Point3D(0, 0, 0))\n\n    def test_refraction_angle(self):\n        self.assertEqual(refraction_angle(self.r1, 1, 1, self.n), Matrix([[1], [1], [-1]]))\n        self.assertEqual(refraction_angle(self.r1, self.n1, self.n2, plane=self.P),\n                         Ray3D(Point3D(0, 0, 0), Point3D(self.n1/self.n2, self.n1/self.n2, -(3*self.n1**2/(3*self.n2**2) - 2).evalf().sqrt())))\n        self.assertAlmostEqual(refraction_angle(pi/6, 1.2, 1.5), 0.41152, places=5)\n\n    def test_fresnel_coefficients(self):\n        self.assertEqual(fresnel_coefficients(0.3, 1, 2),\n                         [0.317843553417859, -0.348645229818821, 0.658921776708929, 0.651354770181179])\n        self.assertEqual(fresnel_coefficients(0.6, 2, 1),\n                         [-0.235625382192159 - 0.971843958291041*S.ImaginaryUnit, 0.816477005968898 - 0.577377951366403*S.ImaginaryUnit])\n\n    def test_deviation(self):\n        self.assertEqual(deviation(self.r1, 1, 1, self.n), 0)\n        self.assertEqual(deviation(0.1, 1.2, 1.5), -0.02005)\n\n    def test_brewster_angle(self):\n        self.assertAlmostEqual(brewster_angle(1, 1.33), 0.926093295503462)\n\n    def test_critical_angle(self):\n        self.assertAlmostEqual(critical_angle(1.33, 1), 0.850908514477849)\n\n    def test_lens_makers_formula(self):\n        self.assertAlmostEqual(lens_makers_formula(1.33, 1, 10, -10), 15.1515151515151)\n        self.assertEqual(lens_makers_formula(1.2, 1, 10, S.Infinity), 50.0000000000000)\n        self.assertAlmostEqual(lens_makers_formula(1.33, 1, 10, -10, d=1), 15.3418463277618)\n\n    def test_mirror_formula(self):\n        f, u, v = symbols('f, u, v')\n        self.assertEqual(mirror_formula(focal_length=f, u=u), f*u/(-f + u))\n        self.assertEqual(mirror_formula(focal_length=f, v=v), f*v/(-f + v))\n        self.assertEqual(mirror_formula(u=u, v=v), u*v/(u + v))\n\n    def test_lens_formula(self):\n        f, u, v = symbols('f, u, v')\n        self.assertEqual(lens_formula(focal_length=f, u=u), f*u/(f + u))\n        self.assertEqual(lens_formula(focal_length=f, v=v), f*v/(f - v))\n        self.assertEqual(lens_formula(u=u, v=v), u*v/(u - v))\n\n    def test_hyperfocal_distance(self):\n        self.assertAlmostEqual(hyperfocal_distance(0.5, 8, 0.0033), 9.47, places=2)\n\n    def test_transverse_magnification(self):\n        self.assertEqual(transverse_magnification(30, 15), -2)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_252": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.db import connection\nfrom django.db.models import Field, Lookup, Transform\nfrom django.db.models.fields.json import (\n    JSONField, DataContains, ContainedBy, HasKey, HasKeys, HasAnyKeys, JSONExact,\n    KeyTransform, KeyTextTransform, KeyTransformFactory, KeyTransformTextLookupMixin,\n    KeyTransformIsNull, KeyTransformIn, KeyTransformExact, KeyTransformIExact,\n    KeyTransformIContains, KeyTransformStartsWith, KeyTransformIStartsWith,\n    KeyTransformEndsWith, KeyTransformIEndsWith, KeyTransformRegex, KeyTransformIRegex,\n    KeyTransformLt, KeyTransformLte, KeyTransformGt, KeyTransformGte,\n    CaseInsensitiveMixin, compile_json_path\n)\n\nclass TestJSONField(unittest.TestCase):\n    def setUp(self):\n        self.field = JSONField()\n\n    def test_init(self):\n        field = JSONField(encoder=Mock(), decoder=Mock())\n        self.assertIsInstance(field.encoder, Mock)\n        self.assertIsInstance(field.decoder, Mock)\n\n    def test_check(self):\n        connection.features.supports_json_field = False\n        errors = self.field.check(databases=['default'])\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'fields.E180')\n\n    def test_from_db_value(self):\n        self.assertEqual(self.field.from_db_value('{\"key\": \"value\"}', None, None), {\"key\": \"value\"})\n\n    def test_get_internal_type(self):\n        self.assertEqual(self.field.get_internal_type(), 'JSONField')\n\n    def test_get_prep_value(self):\n        self.assertEqual(self.field.get_prep_value({\"key\": \"value\"}), '{\"key\": \"value\"}')\n\n    def test_get_transform(self):\n        transform = self.field.get_transform('key')\n        self.assertIsInstance(transform, KeyTransformFactory)\n        self.assertEqual(transform().key_name, 'key')\n\n    def test_validate(self):\n        self.assertIsNone(self.field.validate({\"key\": \"value\"}, None))\n\n    def test_formfield(self):\n        formfield = self.field.formfield()\n        self.assertEqual(formfield.form_class.__name__, 'JSONField')\n\nclass TestLookups(unittest.TestCase):\n    def setUp(self):\n        self.lhs = KeyTransform('key', Field())\n        self.rhs = 'value'\n\n    def test_DataContains(self):\n        lookup = DataContains(self.lhs, self.rhs)\n        sql, params = lookup.as_sql(None, connection)\n        self.assertEqual(sql, 'JSON_CONTAINS(%s, %s)')\n\n    def test_ContainedBy(self):\n        lookup = ContainedBy(self.lhs, self.rhs)\n        sql, params = lookup.as_sql(None, connection)\n        self.assertEqual(sql, 'JSON_CONTAINS(%s, %s)')\n\n    def test_HasKey(self):\n        lookup = HasKey(self.lhs, self.rhs)\n        sql, params = lookup.as_sql(None, connection)\n        self.assertEqual(sql, 'JSON_CONTAINS_PATH(%s, \\'one\\', %s)')\n\n    def test_HasKeys(self):\n        lookup = HasKeys(self.lhs, [self.rhs])\n        sql, params = lookup.as_sql(None, connection)\n        self.assertEqual(sql, 'JSON_CONTAINS_PATH(%s, \\'one\\', %s)')\n\n    def test_HasAnyKeys(self):\n        lookup = HasAnyKeys(self.lhs, [self.rhs])\n        sql, params = lookup.as_sql(None, connection)\n        self.assertEqual(sql, 'JSON_CONTAINS_PATH(%s, \\'one\\', %s)')\n\n    def test_JSONExact(self):\n        lookup = JSONExact(self.lhs, self.rhs)\n        sql, params = lookup.process_lhs(None, connection)\n        self.assertEqual(sql, 'JSON_EXTRACT(%s, \\'$)\\'')\n\n    def test_KeyTransformExact(self):\n        lookup = KeyTransformExact(self.lhs, self.rhs)\n        sql, params = lookup.as_sql(None, connection)\n        self.assertEqual(sql, 'JSON_EXTRACT(%s, %s) = %s')\n\nclass TestTransforms(unittest.TestCase):\n    def setUp(self):\n        self.transform = KeyTransform('key', Field())\n\n    def test_as_sql(self):\n        sql, params = self.transform.as_sql(None, connection)\n        self.assertEqual(sql, '(%s -> %s)')\n\n    def test_lookup_hit(self):\n        lookup = KeyTransformIn(self.transform, ['value'])\n        sql, params = lookup.as_sql(None, connection)\n        self.assertEqual(sql, '(%s -> %s) IN (%s)')\n\nclass TestMiscellaneous(unittest.TestCase):\n    def test_compile_json_path(self):\n        path = compile_json_path(['key1', 'key2'])\n        self.assertEqual(path, '$.\\\"key1\\\".\\\"key2\\\"')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_357": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.migrations import operations\nfrom django.db.migrations.autodetector import MigrationAutodetector\n\nclass TestMigrationAutodetector(unittest.TestCase):\n    def setUp(self):\n        self.from_state = Mock()\n        self.to_state = Mock()\n        self.questioner = Mock()\n        self.autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n\n    def test_check_dependency(self):\n        operation = operations.CreateModel('TestModel')\n        dependency = ('app_label', 'TestModel', None, True)\n        self.assertTrue(self.autodetector.check_dependency(operation, dependency))\n\n    def test_add_operation(self):\n        self.autodetector.add_operation('app_label', operations.CreateModel('TestModel'))\n        self.assertIn('app_label', self.autodetector.generated_operations)\n\n    @patch('django.db.migrations.autodetector.MigrationOptimizer.optimize')\n    def test_optimize_migrations(self, mock_optimize):\n        self.autodetector.migrations = {'app_label': [Mock()]}\n        self.autodetector._optimize_migrations()\n        mock_optimize.assert_called()\n\n    def test_arrange_for_graph(self):\n        changes = {'app_label': [Mock(name='test_migration', dependencies=[])]}\n        graph = Mock()\n        graph.leaf_nodes.return_value = [('app_label', '0001_initial')]\n        arranged_changes = self.autodetector.arrange_for_graph(changes, graph)\n        self.assertEqual(arranged_changes['app_label'][0].name, '0002_test_migration')\n\n    def test_trim_to_apps(self):\n        changes = {'app_label1': [Mock()], 'app_label2': [Mock()]}\n        trimmed_changes = self.autodetector._trim_to_apps(changes, {'app_label1'})\n        self.assertIn('app_label1', trimmed_changes)\n        self.assertNotIn('app_label2', trimmed_changes)\n\n    def test_parse_number(self):\n        self.assertEqual(MigrationAutodetector.parse_number('0001_initial'), 1)\n        self.assertEqual(MigrationAutodetector.parse_number('0001_squashed_0004'), 4)\n        self.assertIsNone(MigrationAutodetector.parse_number('no_number'))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_266": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.migrations.loader import MigrationLoader\nfrom django.db.migrations.graph import MigrationGraph\nfrom django.db.migrations.recorder import MigrationRecorder\nfrom django.apps import apps\nfrom django.conf import settings\n\nclass TestMigrationLoader(unittest.TestCase):\n    @patch('django.db.migrations.loader.MigrationRecorder')\n    @patch('django.apps.apps.get_app_configs')\n    @patch('django.db.migrations.loader.pkgutil.iter_modules')\n    @patch('django.db.migrations.loader.import_module')\n    def setUp(self, mock_import_module, mock_iter_modules, mock_get_app_configs, mock_migration_recorder):\n        self.mock_import_module = mock_import_module\n        self.mock_iter_modules = mock_iter_modules\n        self.mock_get_app_configs = mock_get_app_configs\n        self.mock_migration_recorder = mock_migration_recorder\n\n        self.connection = MagicMock()\n        self.loader = MigrationLoader(self.connection, load=False)\n\n    def test_load_disk(self):\n        # Mock the return values of the methods used in load_disk\n        self.mock_get_app_configs.return_value = [MagicMock(label='test_app')]\n        self.mock_iter_modules.return_value = [(None, 'test_migration', False)]\n        self.mock_import_module.return_value.Migration = MagicMock()\n\n        self.loader.load_disk()\n\n        self.assertIsNotNone(self.loader.disk_migrations)\n        self.assertIn(('test_app', 'test_migration'), self.loader.disk_migrations)\n\n    def test_build_graph(self):\n        # Mock the return values of the methods used in build_graph\n        self.loader.load_disk = MagicMock()\n        self.mock_migration_recorder.return_value.applied_migrations.return_value = {}\n\n        self.loader.build_graph()\n\n        self.assertIsInstance(self.loader.graph, MigrationGraph)\n        self.assertIsNotNone(self.loader.applied_migrations)\n\n    def test_check_consistent_history(self):\n        # Mock the return values of the methods used in check_consistent_history\n        self.loader.graph = MigrationGraph()\n        self.loader.replacements = {}\n        self.mock_migration_recorder.return_value.applied_migrations.return_value = {'test_app': 'test_migration'}\n\n        with self.assertRaises(Exception):\n            self.loader.check_consistent_history(self.connection)\n\n    def test_detect_conflicts(self):\n        # Mock the return values of the methods used in detect_conflicts\n        self.loader.graph = MigrationGraph()\n        self.loader.graph.leaf_nodes = MagicMock(return_value=[('test_app', 'test_migration1'), ('test_app', 'test_migration2')])\n\n        conflicts = self.loader.detect_conflicts()\n\n        self.assertIn('test_app', conflicts)\n        self.assertIn('test_migration1', conflicts['test_app'])\n        self.assertIn('test_migration2', conflicts['test_app'])\n\n    def test_project_state(self):\n        # Mock the return values of the methods used in project_state\n        self.loader.graph = MigrationGraph()\n        self.loader.unmigrated_apps = {'test_app'}\n\n        state = self.loader.project_state()\n\n        self.assertIsNotNone(state)\n\n    def test_collect_sql(self):\n        # Mock the return values of the methods used in collect_sql\n        self.loader.graph = MigrationGraph()\n        self.loader.connection = MagicMock()\n        self.loader.project_state = MagicMock(return_value=MagicMock())\n        migration = MagicMock(app_label='test_app', name='test_migration', atomic=True)\n        migration.apply = MagicMock(return_value=MagicMock())\n        plan = [(migration, False)]\n\n        sql = self.loader.collect_sql(plan)\n\n        self.assertIsInstance(sql, list)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_688": ["\nimport pytest\nimport logging\nfrom _pytest.logging import LogCaptureFixture, LogCaptureHandler, catching_logs, caplog_records_key\nfrom _pytest.nodes import Node\n\ndef test_log_capture_fixture_setup():\n    item = Node(\"test_node\")\n    fixture = LogCaptureFixture(item)\n    assert fixture._item == item\n    assert fixture._initial_handler_level is None\n    assert fixture._initial_logger_levels == {}\n\ndef test_log_capture_fixture_handler():\n    item = Node(\"test_node\")\n    fixture = LogCaptureFixture(item)\n    handler = fixture.handler\n    assert isinstance(handler, LogCaptureHandler)\n\ndef test_log_capture_fixture_clear():\n    item = Node(\"test_node\")\n    fixture = LogCaptureFixture(item)\n    fixture.clear()\n    assert len(fixture.handler.records) == 0\n    assert fixture.handler.stream.getvalue() == ''\n\ndef test_log_capture_fixture_set_level():\n    item = Node(\"test_node\")\n    fixture = LogCaptureFixture(item)\n    fixture.set_level(logging.INFO)\n    assert logging.getLogger().level == logging.INFO\n    assert fixture.handler.level == logging.INFO\n\ndef test_log_capture_fixture_at_level():\n    item = Node(\"test_node\")\n    fixture = LogCaptureFixture(item)\n    with fixture.at_level(logging.DEBUG, \"test_logger\"):\n        assert logging.getLogger(\"test_logger\").level == logging.DEBUG\n        assert fixture.handler.level == logging.DEBUG\n    assert logging.getLogger(\"test_logger\").level != logging.DEBUG\n    assert fixture.handler.level != logging.DEBUG\n\ndef test_catching_logs_context_manager():\n    handler = LogCaptureHandler()\n    with catching_logs(handler, logging.INFO):\n        logger = logging.getLogger()\n        assert logger.level == logging.INFO\n        assert handler in logger.handlers\n    assert logger.level != logging.INFO\n    assert handler not in logger.handlers\n\ndef test_caplog_fixture(caplog):\n    logger = logging.getLogger()\n    logger.warning(\"Test warning\")\n    assert \"Test warning\" in caplog.text\n"], "sample_274": ["\nfrom django.test import TestCase\nfrom django.forms import ModelForm, formset_factory, modelform_factory, modelformset_factory, inlineformset_factory\nfrom django.forms.models import ModelChoiceField, ModelMultipleChoiceField\nfrom django.db import models\n\nclass DummyModel(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\nclass DummyForm(ModelForm):\n    class Meta:\n        model = DummyModel\n        fields = ['name', 'age']\n\nclass TestModelForm(TestCase):\n    def test_model_form_initialization(self):\n        data = {'name': 'John', 'age': 30}\n        form = DummyForm(data=data)\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.cleaned_data['name'], 'John')\n        self.assertEqual(form.cleaned_data['age'], 30)\n\n    def test_model_form_save(self):\n        data = {'name': 'Jane', 'age': 25}\n        form = DummyForm(data=data)\n        self.assertTrue(form.is_valid())\n        instance = form.save()\n        self.assertEqual(instance.name, 'Jane')\n        self.assertEqual(instance.age, 25)\n\n    def test_model_form_factory(self):\n        DummyFormFactory = modelform_factory(DummyModel, fields=('name',))\n        data = {'name': 'Doe'}\n        form = DummyFormFactory(data=data)\n        self.assertTrue(form.is_valid())\n        self.assertEqual(form.cleaned_data['name'], 'Doe')\n\n    def test_modelformset_factory(self):\n        DummyFormSet = modelformset_factory(DummyModel, fields=('name',))\n        data = {'form-TOTAL_FORMS': '2', 'form-INITIAL_FORMS': '0',\n                'form-0-name': 'Alice', 'form-1-name': 'Bob'}\n        formset = DummyFormSet(data=data)\n        self.assertTrue(formset.is_valid())\n        instances = formset.save()\n        self.assertEqual(len(instances), 2)\n        self.assertEqual(instances[0].name, 'Alice')\n        self.assertEqual(instances[1].name, 'Bob')\n\n    def test_inlineformset_factory(self):\n        class ParentModel(models.Model):\n            pass\n\n        class ChildModel(models.Model):\n            parent = models.ForeignKey(ParentModel, on_delete=models.CASCADE)\n            name = models.CharField(max_length=100)\n\n        ChildFormSet = inlineformset_factory(ParentModel, ChildModel, fields=('name',))\n        parent = ParentModel.objects.create()\n        data = {'child_set-TOTAL_FORMS': '2', 'child_set-INITIAL_FORMS': '0',\n                'child_set-0-name': 'Child1', 'child_set-1-name': 'Child2'}\n        formset = ChildFormSet(instance=parent, data=data)\n        self.assertTrue(formset.is_valid())\n        instances = formset.save()\n        self.assertEqual(len(instances), 2)\n        self.assertEqual(instances[0].name, 'Child1')\n        self.assertEqual(instances[1].name, 'Child2')\n\n    def test_model_choice_field(self):\n        queryset = DummyModel.objects.all()\n        field = ModelChoiceField(queryset=queryset)\n        self.assertEqual(len(field.choices), queryset.count() + 1)  # +1 for the empty label\n\n    def test_model_multiple_choice_field(self):\n        queryset = DummyModel.objects.all()\n        field = ModelMultipleChoiceField(queryset=queryset)\n        self.assertEqual(len(field.choices), queryset.count())\n"], "sample_616": ["\nimport unittest\nimport numpy as np\nimport xarray as xr\nfrom xarray.core.computation import (\n    _UFuncSignature, apply_ufunc, broadcast_compat_data, collect_dict_values,\n    join_dict_keys, ordered_set_intersection, ordered_set_union, result_name,\n    unified_dim_sizes\n)\n\nclass TestComputation(unittest.TestCase):\n\n    def setUp(self):\n        self.data = xr.DataArray(np.arange(12).reshape(3, 4), dims=('x', 'y'))\n\n    def test_UFuncSignature(self):\n        signature = _UFuncSignature([['x'], ['y']], [['z']])\n        self.assertEqual(str(signature), '(x),(y)->(z)')\n\n    def test_apply_ufunc(self):\n        result = apply_ufunc(np.sin, self.data)\n        self.assertIsInstance(result, xr.DataArray)\n        self.assertTrue(np.allclose(result.values, np.sin(self.data.values)))\n\n    def test_broadcast_compat_data(self):\n        broadcasted_data = broadcast_compat_data(self.data.variable, ('x',), ('y',))\n        self.assertEqual(broadcasted_data.shape, (3, 4))\n\n    def test_collect_dict_values(self):\n        objects = [{'a': 1, 'b': 2}, {'a': 3, 'b': 4}]\n        keys = ['a', 'b']\n        result = collect_dict_values(objects, keys)\n        self.assertEqual(result, [[1, 3], [2, 4]])\n\n    def test_join_dict_keys(self):\n        objects = [{'a': 1, 'b': 2}, {'a': 3, 'c': 4}]\n        result = join_dict_keys(objects, how='inner')\n        self.assertEqual(list(result), ['a'])\n\n    def test_ordered_set_intersection(self):\n        all_keys = [['a', 'b', 'c'], ['b', 'c', 'd']]\n        result = ordered_set_intersection(all_keys)\n        self.assertEqual(result, ['b', 'c'])\n\n    def test_ordered_set_union(self):\n        all_keys = [['a', 'b', 'c'], ['b', 'c', 'd']]\n        result = ordered_set_union(all_keys)\n        self.assertEqual(result, ['a', 'b', 'c', 'd'])\n\n    def test_result_name(self):\n        objects = [xr.DataArray(name='a'), xr.DataArray(name='a')]\n        result = result_name(objects)\n        self.assertEqual(result, 'a')\n\n    def test_unified_dim_sizes(self):\n        variables = [self.data.variable]\n        result = unified_dim_sizes(variables)\n        self.assertEqual(result, {'x': 3, 'y': 4})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_762": ["\nimport unittest\nimport numpy as np\nimport scipy.sparse as sp\nfrom sklearn.exceptions import NotFittedError, DataConversionWarning, ValueWarning\nfrom sklearn.utils.validation import (as_float_array, check_array, check_symmetric, check_X_y,\n                                      has_fit_parameter, check_is_fitted, check_consistent_length,\n                                      assert_all_finite, check_memory, check_non_negative,\n                                      LARGE_SPARSE_SUPPORTED, _num_samples)\n\nclass TestValidationFunctions(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4]])\n        self.y = np.array([1, 2])\n        self.sparse_X = sp.csr_matrix(self.X)\n        self.large_sparse_X = sp.csr_matrix(self.X, dtype=np.int64)\n        self.estimator = DummyEstimator()\n\n    def test_as_float_array(self):\n        result = as_float_array(self.X)\n        self.assertEqual(result.dtype, np.float64)\n\n    def test_check_array(self):\n        result = check_array(self.X)\n        self.assertEqual(result.shape, (2, 2))\n\n    # Add more tests for other functions...\n\nclass DummyEstimator:\n    def fit(self, X, y):\n        pass\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_123": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.utils.cache import (\n    patch_cache_control, get_max_age, set_response_etag,\n    get_conditional_response, patch_response_headers,\n    add_never_cache_headers, patch_vary_headers, has_vary_header,\n    get_cache_key, learn_cache_key,\n)\nfrom django.http import HttpResponse\nfrom django.conf import settings\nfrom django.core.cache import caches\n\nclass TestDjangoCacheUtils(unittest.TestCase):\n    def setUp(self):\n        self.response = HttpResponse()\n\n    def test_patch_cache_control(self):\n        patch_cache_control(self.response, max_age=3600, public=True)\n        self.assertEqual(self.response['Cache-Control'], 'max-age=3600, public')\n\n    def test_get_max_age(self):\n        self.response['Cache-Control'] = 'max-age=3600'\n        self.assertEqual(get_max_age(self.response), 3600)\n\n    def test_set_response_etag(self):\n        self.response.content = b'content'\n        set_response_etag(self.response)\n        self.assertEqual(self.response['ETag'], '\"5ebe2294ecd0e0f08eab7690d2a6ee69\"')\n\n    def test_get_conditional_response(self):\n        response = get_conditional_response(Mock(META={}))\n        self.assertIsNone(response)\n\n    def test_patch_response_headers(self):\n        patch_response_headers(self.response, cache_timeout=3600)\n        self.assertIn('Expires', self.response)\n        self.assertEqual(self.response['Cache-Control'], 'max-age=3600')\n\n    def test_add_never_cache_headers(self):\n        add_never_cache_headers(self.response)\n        self.assertEqual(self.response['Cache-Control'], 'max-age=0, no-cache, no-store, must-revalidate, private')\n\n    def test_patch_vary_headers(self):\n        patch_vary_headers(self.response, ['Accept-Language'])\n        self.assertEqual(self.response['Vary'], 'Accept-Language')\n\n    def test_has_vary_header(self):\n        self.response['Vary'] = 'Accept-Language'\n        self.assertTrue(has_vary_header(self.response, 'Accept-Language'))\n\n    @patch('django.utils.cache.get_language')\n    @patch('django.utils.cache.get_current_timezone_name')\n    def test_i18n_cache_key_suffix(self, mock_get_current_timezone_name, mock_get_language):\n        mock_get_language.return_value = 'en-us'\n        mock_get_current_timezone_name.return_value = 'UTC'\n        settings.USE_I18N = True\n        settings.USE_L10N = True\n        settings.USE_TZ = True\n        request = Mock(build_absolute_uri=Mock(return_value='http://example.com'))\n        cache_key = 'views.decorators.cache.cache_page.prefix.GET.3a15f96053c50363644f58898a742f8c.e3b0c44298fc1c149afbf4c8996fb924'\n        self.assertEqual(get_cache_key(request, key_prefix='prefix'), cache_key)\n\n    def test_learn_cache_key(self):\n        self.response['Vary'] = 'Accept-Language'\n        request = Mock(build_absolute_uri=Mock(return_value='http://example.com'))\n        cache_key = learn_cache_key(request, self.response, key_prefix='prefix', cache=caches['default'])\n        self.assertEqual(cache_key, 'views.decorators.cache.cache_page.prefix.GET.3a15f96053c50363644f58898a742f8c.e3b0c44298fc1c149afbf4c8996fb924')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1012": ["\nimport unittest\nfrom sympy import Symbol, sin, cos, tan, pi, Matrix, SparseMatrix, eye, exp, erf, erfc, gamma, loggamma, GoldenRatio\nfrom sympy.printing.pycode import MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n\nclass TestPythonCodePrinter(unittest.TestCase):\n    def setUp(self):\n        self.x = Symbol('x')\n        self.printer = PythonCodePrinter()\n\n    def test_print_sin(self):\n        self.assertEqual(self.printer._print(sin(self.x)), \"math.sin(x)\")\n\n    def test_print_cos(self):\n        self.assertEqual(self.printer._print(cos(self.x)), \"math.cos(x)\")\n\n    def test_print_tan(self):\n        self.assertEqual(self.printer._print(tan(self.x)), \"math.tan(x)\")\n\n    def test_print_pi(self):\n        self.assertEqual(self.printer._print(pi), \"math.pi\")\n\n    def test_print_matrix(self):\n        self.assertEqual(self.printer._print(Matrix([[1, 2], [3, 4]])), \"Matrix([[1, 2], [3, 4]])\")\n\n    def test_print_sparse_matrix(self):\n        self.assertEqual(self.printer._print(SparseMatrix(eye(3))), \"Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\")\n\nclass TestNumPyPrinter(unittest.TestCase):\n    def setUp(self):\n        self.x = Symbol('x')\n        self.printer = NumPyPrinter()\n\n    def test_print_exp(self):\n        self.assertEqual(self.printer._print(exp(self.x)), \"numpy.exp(x)\")\n\n    def test_print_erf(self):\n        self.assertEqual(self.printer._print(erf(self.x)), \"scipy.special.erf(x)\")\n\n    def test_print_erfc(self):\n        self.assertEqual(self.printer._print(erfc(self.x)), \"scipy.special.erfc(x)\")\n\n    def test_print_gamma(self):\n        self.assertEqual(self.printer._print(gamma(self.x)), \"scipy.special.gamma(x)\")\n\n    def test_print_loggamma(self):\n        self.assertEqual(self.printer._print(loggamma(self.x)), \"scipy.special.gammaln(x)\")\n\nclass TestSciPyPrinter(unittest.TestCase):\n    def setUp(self):\n        self.x = Symbol('x')\n        self.printer = SciPyPrinter()\n\n    def test_print_golden_ratio(self):\n        self.assertEqual(self.printer._print(GoldenRatio), \"scipy.constants.golden_ratio\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_699": ["\nimport pytest\nimport warnings\nfrom _pytest import deprecated\nfrom _pytest.warning_types import PytestDeprecationWarning, UnformattedWarning\n\ndef test_check_ispytest():\n    with pytest.warns(deprecated.PRIVATE):\n        deprecated.check_ispytest(False)\n    with pytest.warns(None) as record:\n        deprecated.check_ispytest(True)\n    assert len(record) == 0\n\ndef test_deprecation_warnings():\n    with pytest.warns(PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.FILLFUNCARGS.format(name=\"test\"), stacklevel=2)\n    assert len(record) == 1\n    assert \"test is deprecated\" in str(record[-1].message)\n\n    with pytest.warns(PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.PYTEST_COLLECT_MODULE.format(name=\"test\"), stacklevel=2)\n    assert len(record) == 1\n    assert \"pytest.collect.test was moved\" in str(record[-1].message)\n\n    with pytest.warns(PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.YIELD_FIXTURE, stacklevel=2)\n    assert len(record) == 1\n    assert \"@pytest.yield_fixture is deprecated\" in str(record[-1].message)\n\n    # ... continue testing for other deprecation warnings in a similar manner\n\ndef test_unformatted_warnings():\n    with pytest.warns(PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.ARGUMENT_TYPE_STR.format(typ=\"str\", names=\"test\"), stacklevel=2)\n    assert len(record) == 1\n    assert \"`type` argument to addoption() is the string 'str'\" in str(record[-1].message)\n\n    # ... continue testing for other unformatted warnings in a similar manner\n"], "sample_689": ["\nimport pytest\nfrom _pytest import deprecated\nimport warnings\n\ndef test_deprecation_warnings():\n    with pytest.warns(deprecated.PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.FILLFUNCARGS.format(name='test_name'), category=deprecated.PytestDeprecationWarning)\n    assert len(record) == 1\n    assert 'test_name' in str(record[0].message)\n\n    with pytest.warns(deprecated.PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.PYTEST_COLLECT_MODULE.format(name='test_name'), category=deprecated.PytestDeprecationWarning)\n    assert len(record) == 1\n    assert 'test_name' in str(record[0].message)\n\n    with pytest.warns(deprecated.PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.MINUS_K_DASH, category=deprecated.PytestDeprecationWarning)\n    assert len(record) == 1\n\n    with pytest.warns(deprecated.PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.MINUS_K_COLON, category=deprecated.PytestDeprecationWarning)\n    assert len(record) == 1\n\n    with pytest.warns(deprecated.PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.WARNING_CAPTURED_HOOK, category=deprecated.PytestDeprecationWarning)\n    assert len(record) == 1\n\n    with pytest.warns(deprecated.PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.FSCOLLECTOR_GETHOOKPROXY_ISINITPATH, category=deprecated.PytestDeprecationWarning)\n    assert len(record) == 1\n\n    with pytest.warns(deprecated.PytestDeprecationWarning) as record:\n        warnings.warn(deprecated.STRICT_OPTION, category=deprecated.PytestDeprecationWarning)\n    assert len(record) == 1\n\ndef test_deprecated_external_plugins():\n    assert 'pytest_catchlog' in deprecated.DEPRECATED_EXTERNAL_PLUGINS\n    assert 'pytest_capturelog' in deprecated.DEPRECATED_EXTERNAL_PLUGINS\n    assert 'pytest_faulthandler' in deprecated.DEPRECATED_EXTERNAL_PLUGINS\n"], "sample_312": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.contrib.admin import AdminSite, ModelAdmin\nfrom django.contrib.admin.sites import AlreadyRegistered, NotRegistered\nfrom django.db.models.base import ModelBase\n\nclass TestAdminSite(unittest.TestCase):\n    def setUp(self):\n        self.site = AdminSite()\n        self.model = MagicMock(spec=ModelBase)\n        self.model._meta.swapped = False\n        self.model._meta.abstract = False\n        self.model._meta.app_label = 'test'\n        self.model._meta.model_name = 'testmodel'\n\n    def test_register(self):\n        self.site.register(self.model)\n        self.assertIn(self.model, self.site._registry)\n\n        with self.assertRaises(AlreadyRegistered):\n            self.site.register(self.model)\n\n    def test_unregister(self):\n        self.site.register(self.model)\n        self.site.unregister(self.model)\n        self.assertNotIn(self.model, self.site._registry)\n\n        with self.assertRaises(NotRegistered):\n            self.site.unregister(self.model)\n\n    def test_is_registered(self):\n        self.assertFalse(self.site.is_registered(self.model))\n        self.site.register(self.model)\n        self.assertTrue(self.site.is_registered(self.model))\n\n    def test_has_permission(self):\n        request = MagicMock()\n        request.user.is_active = True\n        request.user.is_staff = True\n        self.assertTrue(self.site.has_permission(request))\n\n    @patch('django.contrib.admin.sites.update_wrapper')\n    def test_get_urls(self, mock_update_wrapper):\n        urls = self.site.get_urls()\n        self.assertIsInstance(urls, list)\n        self.assertTrue(mock_update_wrapper.called)\n\n    @patch('django.contrib.admin.sites.TemplateResponse')\n    def test_index(self, mock_template_response):\n        request = MagicMock()\n        self.site.index(request)\n        self.assertTrue(mock_template_response.called)\n\n    @patch('django.contrib.admin.sites.TemplateResponse')\n    def test_app_index(self, mock_template_response):\n        request = MagicMock()\n        self.site.register(self.model)\n        self.site.app_index(request, 'test')\n        self.assertTrue(mock_template_response.called)\n\n    @patch('django.contrib.admin.sites.TemplateResponse')\n    def test_password_change(self, mock_template_response):\n        request = MagicMock()\n        self.site.password_change(request)\n        self.assertTrue(mock_template_response.called)\n\n    @patch('django.contrib.admin.sites.TemplateResponse')\n    def test_password_change_done(self, mock_template_response):\n        request = MagicMock()\n        self.site.password_change_done(request)\n        self.assertTrue(mock_template_response.called)\n\n    @patch('django.contrib.admin.sites.JavaScriptCatalog.as_view')\n    def test_i18n_javascript(self, mock_javascript_catalog):\n        request = MagicMock()\n        self.site.i18n_javascript(request)\n        self.assertTrue(mock_javascript_catalog.called)\n\n    @patch('django.contrib.auth.views.LogoutView.as_view')\n    def test_logout(self, mock_logout_view):\n        request = MagicMock()\n        self.site.logout(request)\n        self.assertTrue(mock_logout_view.called)\n\n    @patch('django.contrib.auth.views.LoginView.as_view')\n    def test_login(self, mock_login_view):\n        request = MagicMock()\n        self.site.login(request)\n        self.assertTrue(mock_login_view.called)\n\n    @patch('django.contrib.admin.views.autocomplete.AutocompleteJsonView.as_view')\n    def test_autocomplete_view(self, mock_autocomplete_view):\n        request = MagicMock()\n        self.site.autocomplete_view(request)\n        self.assertTrue(mock_autocomplete_view.called)\n\n    def test_catch_all_view(self):\n        request = MagicMock()\n        with self.assertRaises(Http404):\n            self.site.catch_all_view(request, 'invalid-url')\n\n    def test_each_context(self):\n        request = MagicMock()\n        context = self.site.each_context(request)\n        self.assertIsInstance(context, dict)\n\n    def test_get_app_list(self):\n        request = MagicMock()\n        app_list = self.site.get_app_list(request)\n        self.assertIsInstance(app_list, list)\n\n    def test_add_action(self):\n        def test_action(modeladmin, request, queryset):\n            pass\n\n        self.site.add_action(test_action)\n        self.assertIn('test_action', self.site._actions)\n        self.assertIn('test_action', self.site._global_actions)\n\n    def test_disable_action(self):\n        def test_action(modeladmin, request, queryset):\n            pass\n\n        self.site.add_action(test_action)\n        self.site.disable_action('test_action')\n        self.assertNotIn('test_action', self.site._actions)\n\n    def test_get_action(self):\n        def test_action(modeladmin, request, queryset):\n            pass\n\n        self.site.add_action(test_action)\n        action = self.site.get_action('test_action')\n        self.assertEqual(action, test_action)\n\n    def test_actions(self):\n        def test_action(modeladmin, request, queryset):\n            pass\n\n        self.site.add_action(test_action)\n        actions = self.site.actions\n        self.assertIsInstance(actions, dict)\n\n    @patch('django.contrib.admin.sites.HttpResponseRedirect')\n    def test_admin_view_with_permission(self, mock_redirect):\n        def test_view(request):\n            pass\n\n        request = MagicMock()\n        request.user.is_active = True\n        request.user.is_staff = True\n        view = self.site.admin_view(test_view)\n        view(request)\n        self.assertFalse(mock_redirect.called)\n\n    @patch('django.contrib.admin.sites.HttpResponseRedirect')\n    def test_admin_view_without_permission(self, mock_redirect):\n        def test_view(request):\n            pass\n\n        request = MagicMock()\n        request.user.is_active = False\n        request.user.is_staff = False\n        view = self.site.admin_view(test_view)\n        view(request)\n        self.assertTrue(mock_redirect.called)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_733": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.coordinate_descent import Lasso, LassoCV, ElasticNet, ElasticNetCV, MultiTaskLasso, MultiTaskElasticNet, MultiTaskElasticNetCV, MultiTaskLassoCV\nfrom sklearn.datasets import make_regression\nfrom sklearn.model_selection import train_test_split\n\nclass TestCoordinateDescent(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_regression(n_samples=100, n_features=5, random_state=42)\n        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.X, self.y, random_state=42)\n\n    def test_lasso(self):\n        lasso = Lasso(alpha=0.1)\n        lasso.fit(self.X_train, self.y_train)\n        self.assertIsNotNone(lasso.coef_)\n        self.assertIsNotNone(lasso.intercept_)\n\n    def test_lasso_cv(self):\n        lasso_cv = LassoCV()\n        lasso_cv.fit(self.X_train, self.y_train)\n        self.assertIsNotNone(lasso_cv.alpha_)\n        self.assertIsNotNone(lasso_cv.coef_)\n        self.assertIsNotNone(lasso_cv.intercept_)\n\n    def test_elastic_net(self):\n        enet = ElasticNet(alpha=0.1, l1_ratio=0.5)\n        enet.fit(self.X_train, self.y_train)\n        self.assertIsNotNone(enet.coef_)\n        self.assertIsNotNone(enet.intercept_)\n\n    def test_elastic_net_cv(self):\n        enet_cv = ElasticNetCV()\n        enet_cv.fit(self.X_train, self.y_train)\n        self.assertIsNotNone(enet_cv.alpha_)\n        self.assertIsNotNone(enet_cv.l1_ratio_)\n        self.assertIsNotNone(enet_cv.coef_)\n        self.assertIsNotNone(enet_cv.intercept_)\n\n    def test_multi_task_lasso(self):\n        X_multi_task = np.hstack([self.X, self.X])\n        y_multi_task = np.column_stack([self.y, self.y])\n        mt_lasso = MultiTaskLasso(alpha=0.1)\n        mt_lasso.fit(X_multi_task, y_multi_task)\n        self.assertIsNotNone(mt_lasso.coef_)\n        self.assertIsNotNone(mt_lasso.intercept_)\n\n    def test_multi_task_elastic_net(self):\n        X_multi_task = np.hstack([self.X, self.X])\n        y_multi_task = np.column_stack([self.y, self.y])\n        mt_enet = MultiTaskElasticNet(alpha=0.1, l1_ratio=0.5)\n        mt_enet.fit(X_multi_task, y_multi_task)\n        self.assertIsNotNone(mt_enet.coef_)\n        self.assertIsNotNone(mt_enet.intercept_)\n\n    def test_multi_task_elastic_net_cv(self):\n        X_multi_task = np.hstack([self.X, self.X])\n        y_multi_task = np.column_stack([self.y, self.y])\n        mt_enet_cv = MultiTaskElasticNetCV()\n        mt_enet_cv.fit(X_multi_task, y_multi_task)\n        self.assertIsNotNone(mt_enet_cv.alpha_)\n        self.assertIsNotNone(mt_enet_cv.l1_ratio_)\n        self.assertIsNotNone(mt_enet_cv.coef_)\n        self.assertIsNotNone(mt_enet_cv.intercept_)\n\n    def test_multi_task_lasso_cv(self):\n        X_multi_task = np.hstack([self.X, self.X])\n        y_multi_task = np.column_stack([self.y, self.y])\n        mt_lasso_cv = MultiTaskLassoCV()\n        mt_lasso_cv.fit(X_multi_task, y_multi_task)\n        self.assertIsNotNone(mt_lasso_cv.alpha_)\n        self.assertIsNotNone(mt_lasso_cv.coef_)\n        self.assertIsNotNone(mt_lasso_cv.intercept_)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_568": ["\nimport unittest\nfrom unittest.mock import patch\nimport numpy as np\nfrom matplotlib import cbook, colors as mcolors\nfrom matplotlib.text import Text\nfrom matplotlib.lines import Line2D\nfrom matplotlib.patches import Patch\nfrom matplotlib.path import Path\nfrom matplotlib.collections import Collection, LineCollection, PatchCollection, PathCollection\nfrom mpl_toolkits.mplot3d import art3d\n\nclass TestArt3D(unittest.TestCase):\n\n    def setUp(self):\n        self.xs = np.array([1, 2, 3])\n        self.ys = np.array([4, 5, 6])\n        self.zs = np.array([7, 8, 9])\n\n    def test_get_dir_vector(self):\n        self.assertTrue(np.array_equal(art3d.get_dir_vector('x'), np.array((1, 0, 0))))\n        self.assertTrue(np.array_equal(art3d.get_dir_vector('y'), np.array((0, 1, 0))))\n        self.assertTrue(np.array_equal(art3d.get_dir_vector('z'), np.array((0, 0, 1))))\n        self.assertTrue(np.array_equal(art3d.get_dir_vector(None), np.array((0, 0, 0))))\n        self.assertTrue(np.array_equal(art3d.get_dir_vector((1, 2, 3)), np.array((1, 2, 3))))\n        with self.assertRaises(ValueError):\n            art3d.get_dir_vector('invalid')\n\n    def test_text_2d_to_3d(self):\n        text = Text(0, 0, 'test')\n        art3d.text_2d_to_3d(text, z=1, zdir='y')\n        self.assertIsInstance(text, art3d.Text3D)\n        self.assertEqual(text.get_position_3d(), (0, 0, 1))\n\n    def test_line_2d_to_3d(self):\n        line = Line2D([], [])\n        art3d.line_2d_to_3d(line, zs=2, zdir='z')\n        self.assertIsInstance(line, art3d.Line3D)\n        self.assertEqual(line.get_data_3d(), ([], [], []))\n\n    # Add more tests for other functions and classes as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_398": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.forms import AuthenticationForm, SetPasswordForm\nfrom django.contrib.auth.views import (\n    LoginView,\n    LogoutView,\n    PasswordResetView,\n    PasswordResetConfirmView,\n    PasswordChangeView,\n)\nfrom django.http import HttpRequest\nfrom django.test import RequestFactory, TestCase, Client\nfrom django.urls import reverse\n\nclass TestAuthViews(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n\n    def test_login_view(self):\n        request = self.factory.post('/login/', {'username': 'testuser', 'password': 'testpassword'})\n        response = LoginView.as_view()(request)\n        self.assertEqual(response.status_code, 302)\n\n    def test_logout_view(self):\n        request = self.factory.post('/logout/')\n        request.user = self.user\n        response = LogoutView.as_view()(request)\n        self.assertEqual(response.status_code, 302)\n\n    @patch('django.contrib.auth.views.default_token_generator.make_token')\n    def test_password_reset_view(self, mock_make_token):\n        mock_make_token.return_value = 'testtoken'\n        request = self.factory.post('/password_reset/', {'email': 'testuser@test.com'})\n        response = PasswordResetView.as_view()(request)\n        self.assertEqual(response.status_code, 302)\n\n    @patch('django.contrib.auth.views.default_token_generator.check_token')\n    def test_password_reset_confirm_view(self, mock_check_token):\n        mock_check_token.return_value = True\n        request = self.factory.post('/reset/<uidb64>/<token>/', {'new_password1': 'newpassword', 'new_password2': 'newpassword'})\n        response = PasswordResetConfirmView.as_view()(request, uidb64='testuidb64', token='testtoken')\n        self.assertEqual(response.status_code, 302)\n\n    def test_password_change_view(self):\n        request = self.factory.post('/password_change/', {'old_password': 'testpassword', 'new_password1': 'newpassword', 'new_password2': 'newpassword'})\n        request.user = self.user\n        response = PasswordChangeView.as_view()(request)\n        self.assertEqual(response.status_code, 302)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_439": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.forms import Form, CharField, IntegerField, ValidationError\nfrom django.core.exceptions import NON_FIELD_ERRORS\nfrom django.forms.utils import ErrorList\n\nclass TestBaseForm(unittest.TestCase):\n    def setUp(self):\n        class SimpleForm(Form):\n            name = CharField(max_length=100)\n            age = IntegerField()\n\n        self.FormClass = SimpleForm\n\n    def test_form_initialization(self):\n        form = self.FormClass()\n        self.assertFalse(form.is_bound)\n        self.assertEqual(len(form.fields), 2)\n\n    def test_form_validation(self):\n        form = self.FormClass(data={'name': 'John', 'age': 25})\n        self.assertTrue(form.is_valid())\n\n        form = self.FormClass(data={'name': 'John', 'age': 'invalid'})\n        self.assertFalse(form.is_valid())\n\n    def test_add_error(self):\n        form = self.FormClass()\n        form.add_error('name', 'This is a test error.')\n        self.assertTrue(form.has_error('name'))\n\n        form.add_error(None, 'This is a non-field error.')\n        self.assertTrue(form.has_error(NON_FIELD_ERRORS))\n\n    def test_clean_method(self):\n        class CustomForm(self.FormClass):\n            def clean(self):\n                cleaned_data = super().clean()\n                if cleaned_data['age'] < 18:\n                    raise ValidationError(\"You must be at least 18 years old.\")\n                return cleaned_data\n\n        form = CustomForm(data={'name': 'John', 'age': 25})\n        self.assertTrue(form.is_valid())\n\n        form = CustomForm(data={'name': 'John', 'age': 17})\n        self.assertFalse(form.is_valid())\n\n    def test_has_changed(self):\n        form = self.FormClass(data={'name': 'John', 'age': 25}, initial={'name': 'John', 'age': 25})\n        self.assertFalse(form.has_changed())\n\n        form = self.FormClass(data={'name': 'Jane', 'age': 25}, initial={'name': 'John', 'age': 25})\n        self.assertTrue(form.has_changed())\n\n    def test_media(self):\n        form = self.FormClass()\n        self.assertEqual(str(form.media), '<style type=\"text/css\"></style>')\n\n    def test_is_multipart(self):\n        form = self.FormClass()\n        self.assertFalse(form.is_multipart())\n\n        class FileForm(self.FormClass):\n            file = FileField()\n\n        form = FileForm()\n        self.assertTrue(form.is_multipart())\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_693": ["\nimport pytest\nfrom _pytest.config import Config\nfrom _pytest.nodes import Item\nfrom _pytest.mark import Mark\nfrom _pytest.skipping import evaluate_skip_marks, evaluate_xfail_marks, pytest_runtest_setup, Skip, Xfail\n\n@pytest.fixture\ndef item():\n    config = Config.fromdict({})\n    item = Item.from_parent(config, name=\"test_item\")\n    return item\n\ndef test_evaluate_skip_marks(item):\n    item.add_marker(Mark(\"skip\", reason=\"test skip\"))\n    skip_result = evaluate_skip_marks(item)\n    assert isinstance(skip_result, Skip)\n    assert skip_result.reason == \"test skip\"\n\ndef test_evaluate_skip_marks_no_skip(item):\n    skip_result = evaluate_skip_marks(item)\n    assert skip_result is None\n\ndef test_evaluate_xfail_marks(item):\n    item.add_marker(Mark(\"xfail\", reason=\"test xfail\", run=True, strict=True))\n    xfail_result = evaluate_xfail_marks(item)\n    assert isinstance(xfail_result, Xfail)\n    assert xfail_result.reason == \"test xfail\"\n    assert xfail_result.run == True\n    assert xfail_result.strict == True\n\ndef test_evaluate_xfail_marks_no_xfail(item):\n    xfail_result = evaluate_xfail_marks(item)\n    assert xfail_result is None\n\ndef test_pytest_runtest_setup(item):\n    item.add_marker(Mark(\"skip\", reason=\"test skip\"))\n    with pytest.raises(pytest.skip.Exception):\n        pytest_runtest_setup(item)\n\ndef test_pytest_runtest_setup_no_skip(item):\n    pytest_runtest_setup(item)\n    assert item._store[xfailed_key] is None\n"], "sample_97": ["\nfrom django.test import TestCase\nfrom django.core.checks import Error\nfrom django.contrib.admin.checks import (\n    BaseModelAdminChecks, ModelAdminChecks, InlineModelAdminChecks,\n    must_be, must_inherit_from, refer_to_missing_field\n)\nfrom django.contrib.admin.options import InlineModelAdmin\nfrom django.db import models\n\n# Create a simple model for testing\nclass TestModel(models.Model):\n    name = models.CharField(max_length=200)\n\nclass TestInlineModel(models.Model):\n    test_model = models.ForeignKey(TestModel, on_delete=models.CASCADE)\n\n# Create a simple model admin for testing\nclass TestModelAdmin(BaseModelAdminChecks):\n    model = TestModel\n\n# Create a simple inline model admin for testing\nclass TestInlineModelAdmin(InlineModelAdmin):\n    model = TestInlineModel\n    fk_name = 'test_model'\n\nclass TestBaseModelAdminChecks(TestCase):\n    def setUp(self):\n        self.checker = BaseModelAdminChecks()\n        self.admin_obj = TestModelAdmin()\n\n    def test_must_be(self):\n        errors = must_be('a boolean', 'test_option', self.admin_obj, 'admin.E000')\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Error)\n\n    # Add more tests for other methods in BaseModelAdminChecks\n\nclass TestModelAdminChecks(TestCase):\n    def setUp(self):\n        self.checker = ModelAdminChecks()\n        self.admin_obj = TestModelAdmin()\n\n    def test_save_as(self):\n        self.admin_obj.save_as = 'not a boolean'\n        errors = self.checker._check_save_as(self.admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Error)\n\n    # Add more tests for other methods in ModelAdminChecks\n\nclass TestInlineModelAdminChecks(TestCase):\n    def setUp(self):\n        self.checker = InlineModelAdminChecks()\n        self.inline_obj = TestInlineModelAdmin(TestModel, None)\n\n    def test_extra(self):\n        self.inline_obj.extra = 'not an integer'\n        errors = self.checker._check_extra(self.inline_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Error)\n\n    # Add more tests for other methods in InlineModelAdminChecks\n"], "sample_304": ["\nimport unittest\nfrom django.core.validators import (\n    BaseValidator, DecimalValidator, EmailValidator, FileExtensionValidator,\n    MaxLengthValidator, MaxValueValidator, MinLengthValidator, MinValueValidator,\n    ProhibitNullCharactersValidator, RegexValidator, URLValidator, int_list_validator,\n    validate_comma_separated_integer_list, validate_email, validate_image_file_extension,\n    validate_integer, validate_ipv4_address, validate_ipv6_address, validate_ipv46_address,\n    validate_slug, validate_unicode_slug,\n)\nfrom django.core.exceptions import ValidationError\nfrom decimal import Decimal\n\nclass TestValidators(unittest.TestCase):\n\n    def test_regex_validator(self):\n        validator = RegexValidator(regex=r'^[a-z]+$')\n        self.assertIsNone(validator('test'))\n        with self.assertRaises(ValidationError):\n            validator('123')\n\n    def test_url_validator(self):\n        validator = URLValidator()\n        self.assertIsNone(validator('http://example.com'))\n        with self.assertRaises(ValidationError):\n            validator('invalid url')\n\n    # Add more tests for other validators in a similar way...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1051": ["\nimport unittest\nfrom sympy import symbols, Matrix\nfrom sympy.utilities.codegen import make_routine, InputArgument, OutputArgument, InOutArgument\n\nclass TestCodegen(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y, self.f, self.g = symbols('x y f g')\n\n    def test_make_routine(self):\n        r = make_routine('test', [self.f, self.g, self.x + self.y, Matrix([[self.x, 2]])])\n\n        input_args = [a for a in r.arguments if isinstance(a, InputArgument)]\n        self.assertEqual(len(input_args), 2)\n        self.assertIn(self.x, [a.name for a in input_args])\n        self.assertIn(self.y, [a.name for a in input_args])\n\n        output_args = [a for a in r.arguments if isinstance(a, OutputArgument)]\n        self.assertEqual(len(output_args), 2)\n        self.assertIn(self.f, [a.name for a in output_args])\n        self.assertIn(self.g, [a.name for a in output_args])\n\n        inout_args = [a for a in r.arguments if isinstance(a, InOutArgument)]\n        self.assertEqual(len(inout_args), 0)\n\n        self.assertEqual(len(r.results), 1)\n        self.assertEqual(r.results[0].expr, Matrix([[self.x, 2]]))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_198": ["\nimport unittest\nfrom unittest.mock import patch\nfrom datetime import datetime, timedelta\nfrom django.utils import timezone\nfrom django.utils.timesince import timesince, timeuntil, TIME_STRINGS\n\nclass TestTimeSince(unittest.TestCase):\n\n    def setUp(self):\n        self.now = datetime(2022, 1, 1, 0, 0, 0, tzinfo=timezone.utc)\n\n    def test_timesince_future(self):\n        future = self.now + timedelta(minutes=5)\n        self.assertEqual(timesince(future, now=self.now), \"0 minutes\")\n\n    def test_timesince_past(self):\n        past = self.now - timedelta(minutes=5)\n        self.assertEqual(timesince(past, now=self.now), \"5 minutes\")\n\n    def test_timesince_depth(self):\n        past = self.now - timedelta(days=365*2 + 30*2 + 7*2 + 2, hours=1, minutes=1)\n        self.assertEqual(timesince(past, now=self.now, depth=1), \"2 years\")\n        self.assertEqual(timesince(past, now=self.now, depth=2), \"2 years, 2 months\")\n        self.assertEqual(timesince(past, now=self.now, depth=3), \"2 years, 2 months, 2 weeks\")\n        self.assertEqual(timesince(past, now=self.now, depth=4), \"2 years, 2 months, 2 weeks, 2 days\")\n\n    def test_timesince_leapyears(self):\n        past = datetime(2020, 2, 29, 0, 0, 0, tzinfo=timezone.utc)\n        self.assertEqual(timesince(past, now=self.now, depth=1), \"1 year\")\n\n    def test_timeuntil_past(self):\n        past = self.now - timedelta(minutes=5)\n        self.assertEqual(timeuntil(past, now=self.now), \"5 minutes\")\n\n    def test_timeuntil_future(self):\n        future = self.now + timedelta(minutes=5)\n        self.assertEqual(timeuntil(future, now=self.now), \"5 minutes\")\n\n    def test_custom_time_strings(self):\n        past = self.now - timedelta(days=1)\n        custom_time_strings = {\n            'day': \"%d d\",\n        }\n        self.assertEqual(timesince(past, now=self.now, time_strings=custom_time_strings), \"1 d\")\n\n    def test_invalid_depth(self):\n        past = self.now - timedelta(days=1)\n        with self.assertRaises(ValueError):\n            timesince(past, now=self.now, depth=0)\n\n    @patch('django.utils.timesince.datetime')\n    def test_naive_datetime(self, mock_datetime):\n        mock_datetime.now.return_value = datetime(2022, 1, 1, 0, 0, 0)\n        past = datetime(2021, 1, 1, 0, 0, 0)\n        self.assertEqual(timesince(past), \"1 year\")\n\n    @patch('django.utils.timesince.datetime')\n    def test_aware_datetime(self, mock_datetime):\n        mock_datetime.now.return_value = datetime(2022, 1, 1, 0, 0, 0, tzinfo=timezone.utc)\n        past = datetime(2021, 1, 1, 0, 0, 0, tzinfo=timezone.utc)\n        self.assertEqual(timesince(past), \"1 year\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_366": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.utils.functional import cached_property, classproperty, lazy, LazyObject, SimpleLazyObject\n\nclass TestFunctional(unittest.TestCase):\n\n    def test_cached_property(self):\n        class TestClass:\n            @cached_property\n            def test_method(self):\n                return 'test'\n\n        obj = TestClass()\n        self.assertEqual(obj.test_method, 'test')\n        self.assertEqual(obj.test_method, 'test')  # Test caching\n\n    def test_classproperty(self):\n        class TestClass:\n            @classproperty\n            def test_method(cls):\n                return 'test'\n\n        self.assertEqual(TestClass.test_method, 'test')\n\n    def test_lazy(self):\n        func = Mock(return_value='test')\n        lazy_func = lazy(func, str)\n        self.assertEqual(str(lazy_func()), 'test')\n\n    def test_lazy_object(self):\n        class TestLazyObject(LazyObject):\n            def _setup(self):\n                self._wrapped = 'test'\n\n        obj = TestLazyObject()\n        self.assertEqual(str(obj), 'test')\n\n    def test_simple_lazy_object(self):\n        func = Mock(return_value='test')\n        obj = SimpleLazyObject(func)\n        self.assertEqual(str(obj), 'test')\n"], "sample_183": ["\nfrom django.db.models.expressions import F, Expression, Func, Value, When, Case, OrderBy\nfrom django.db.models import IntegerField, CharField, BooleanField\nfrom django.test import SimpleTestCase\n\nclass TestExpressions(SimpleTestCase):\n\n    def setUp(self):\n        self.expression = F('field_name')\n        self.value_expression = Value(10)\n        self.func_expression = Func(F('field_name'), 2, function='POWER')\n        self.when_expression = When(F('field_name') > 10, then=Value('greater'))\n        self.case_expression = Case(\n            When(F('field_name') > 10, then=Value('greater')),\n            default=Value('not greater'),\n            output_field=CharField()\n        )\n        self.order_expression = OrderBy(F('field_name'), descending=True)\n\n    def test_f_expression(self):\n        self.assertEqual(str(self.expression), 'field_name')\n\n    def test_value_expression(self):\n        self.assertEqual(str(self.value_expression), '10')\n\n    def test_func_expression(self):\n        self.assertEqual(str(self.func_expression), 'POWER(field_name, 2)')\n\n    def test_when_expression(self):\n        self.assertEqual(str(self.when_expression), \"WHEN (field_name > 10) THEN 'greater'\")\n\n    def test_case_expression(self):\n        self.assertEqual(str(self.case_expression), \"CASE WHEN (field_name > 10) THEN 'greater' ELSE 'not greater'\")\n\n    def test_order_expression(self):\n        self.assertEqual(str(self.order_expression), 'field_name DESC')\n\n    def test_reverse_ordering(self):\n        self.order_expression.reverse_ordering()\n        self.assertEqual(str(self.order_expression), 'field_name ASC')\n\n    def test_expression_combination(self):\n        combined_expression = self.expression + self.value_expression\n        self.assertEqual(str(combined_expression), 'field_name + 10')\n\n    def test_expression_resolution(self):\n        resolved_expression = self.expression.resolve_expression()\n        self.assertIsInstance(resolved_expression, Expression)\n\n    def test_expression_get_source_expressions(self):\n        source_expressions = self.case_expression.get_source_expressions()\n        self.assertEqual(len(source_expressions), 2)\n        self.assertIsInstance(source_expressions[0], When)\n        self.assertIsInstance(source_expressions[1], Value)\n\n    def test_expression_set_source_expressions(self):\n        new_expression = F('new_field')\n        self.expression.set_source_expressions([new_expression])\n        self.assertEqual(str(self.expression), 'new_field')\n\n    def test_expression_get_group_by_cols(self):\n        group_by_cols = self.expression.get_group_by_cols()\n        self.assertEqual(len(group_by_cols), 1)\n        self.assertIsInstance(group_by_cols[0], F)\n\n    def test_expression_get_source_fields(self):\n        source_fields = self.func_expression.get_source_fields()\n        self.assertEqual(len(source_fields), 1)\n        self.assertIsNone(source_fields[0])\n\n    def test_expression_copy(self):\n        copied_expression = self.expression.copy()\n        self.assertEqual(str(copied_expression), str(self.expression))\n        self.assertIsNot(copied_expression, self.expression)\n\n    def test_expression_identity(self):\n        self.assertEqual(self.expression.identity, (F, ('name', 'field_name')))\n        self.assertNotEqual(self.expression.identity, self.value_expression.identity)\n"], "sample_857": ["\nimport unittest\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\nclass TestDecisionTreeClassifier(unittest.TestCase):\n\n    def setUp(self):\n        self.iris = load_iris()\n        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.iris.data, self.iris.target, random_state=42)\n        self.clf = DecisionTreeClassifier(random_state=42)\n\n    def test_fit(self):\n        self.clf.fit(self.X_train, self.y_train)\n        self.assertIsNotNone(self.clf.tree_)\n\n    def test_predict(self):\n        self.clf.fit(self.X_train, self.y_train)\n        y_pred = self.clf.predict(self.X_test)\n        self.assertEqual(len(y_pred), len(self.y_test))\n\n    def test_predict_proba(self):\n        self.clf.fit(self.X_train, self.y_train)\n        y_proba = self.clf.predict_proba(self.X_test)\n        self.assertEqual(y_proba.shape, (len(self.y_test), len(self.clf.classes_)))\n\n    def test_get_depth(self):\n        self.clf.fit(self.X_train, self.y_train)\n        depth = self.clf.get_depth()\n        self.assertIsInstance(depth, int)\n\n    def test_get_n_leaves(self):\n        self.clf.fit(self.X_train, self.y_train)\n        n_leaves = self.clf.get_n_leaves()\n        self.assertIsInstance(n_leaves, int)\n\n    def test_apply(self):\n        self.clf.fit(self.X_train, self.y_train)\n        leaves = self.clf.apply(self.X_test)\n        self.assertEqual(leaves.shape, (len(self.y_test),))\n\n    def test_decision_path(self):\n        self.clf.fit(self.X_train, self.y_train)\n        path = self.clf.decision_path(self.X_test)\n        self.assertEqual(path.shape[0], len(self.y_test))\n\n    def test_feature_importances_(self):\n        self.clf.fit(self.X_train, self.y_train)\n        feature_importances = self.clf.feature_importances_\n        self.assertEqual(len(feature_importances), self.iris.data.shape[1])\n\n    def test_ccp_alpha_validation(self):\n        with self.assertRaises(ValueError):\n            DecisionTreeClassifier(ccp_alpha=-1).fit(self.X_train, self.y_train)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1201": ["\nimport unittest\nfrom sympy.physics.units.systems.cgs import cgs_gauss, ohm, tesla, maxwell, speed_of_light, volt, second, voltage, \\\n    debye, centimeter, coulomb_constant, farad, sqrt, UnitSystem, current, charge, weber, gram, statcoulomb, gauss, S, \\\n    statvolt, oersted, statampere, coulomb, magnetic_density, magnetic_flux, One, length, erg, mass, coulombs_constant, \\\n    henry, ampere\n\nclass TestCgsGaussUnitSystem(unittest.TestCase):\n\n    def test_quantity_dimensions(self):\n        self.assertEqual(cgs_gauss.get_quantity_dimension(statcoulomb), charge)\n        self.assertEqual(cgs_gauss.get_quantity_dimension(coulomb), charge)\n        self.assertEqual(cgs_gauss.get_quantity_dimension(statampere), current)\n        self.assertEqual(cgs_gauss.get_quantity_dimension(statvolt), voltage)\n        self.assertEqual(cgs_gauss.get_quantity_dimension(volt), voltage)\n        self.assertEqual(cgs_gauss.get_quantity_dimension(gauss), magnetic_density)\n        self.assertEqual(cgs_gauss.get_quantity_dimension(tesla), magnetic_density)\n        self.assertEqual(cgs_gauss.get_quantity_dimension(maxwell), magnetic_flux)\n\n    def test_quantity_scale_factors(self):\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(statcoulomb), centimeter**(S(3)/2)*gram**(S.Half)/second)\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(statampere), statcoulomb/second)\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(statvolt), erg/statcoulomb)\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(gauss), sqrt(gram/centimeter)/second)\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(maxwell), sqrt(centimeter**3*gram)/second)\n\n    def test_si_units_in_cgs_gauss(self):\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(coulomb), 10*speed_of_light*statcoulomb)\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(ampere), 10*speed_of_light*statcoulomb/second)\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(volt), 10**6/speed_of_light*statvolt)\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(weber), 10**8*maxwell)\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(tesla), 10**4*gauss)\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(debye), One/10**18*statcoulomb*centimeter)\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(oersted), sqrt(gram/centimeter)/second)\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(ohm), 10**5/speed_of_light**2*second/centimeter)\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(farad), One/10**5*speed_of_light**2*centimeter)\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(henry), 10**5/speed_of_light**2/centimeter*second**2)\n\n    def test_coulombs_constant(self):\n        self.assertEqual(cgs_gauss.get_quantity_dimension(coulomb_constant), 1)\n        self.assertEqual(cgs_gauss.get_quantity_scale_factor(coulomb_constant), 1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_614": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nfrom xarray.core import formatting\n\nclass TestFormattingFunctions(unittest.TestCase):\n    def setUp(self):\n        self.array = np.array([1, 2, 3, 4, 5])\n        self.timestamp = pd.Timestamp('2022-01-01')\n        self.timedelta = pd.Timedelta('1 days')\n\n    def test_pretty_print(self):\n        self.assertEqual(formatting.pretty_print('test', 5), 'test ')\n        self.assertEqual(formatting.pretty_print('long_test', 5), 'long_')\n\n    def test_maybe_truncate(self):\n        self.assertEqual(formatting.maybe_truncate('short', 10), 'short')\n        self.assertEqual(formatting.maybe_truncate('long_text_long_text', 10), 'long_te...')\n\n    def test_format_item(self):\n        self.assertEqual(formatting.format_item(self.timestamp), '2022-01-01')\n        self.assertEqual(formatting.format_item(self.timedelta), '1 days 00:00:00')\n\n    # More tests for other functions can be added here...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_630": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom pylint.pyreverse.writer import DotWriter\n\nclass TestDotWriter(unittest.TestCase):\n\n    def setUp(self):\n        self.mock_config = Mock()\n        self.dot_writer = DotWriter(self.mock_config)\n\n    def test_set_printer(self):\n        file_name = \"test.dot\"\n        basename = \"test_basename\"\n\n        self.dot_writer.set_printer(file_name, basename)\n\n        self.assertEqual(self.dot_writer.file_name, file_name)\n        self.assertEqual(self.dot_writer.printer.basename, basename)\n\n    @patch('pylint.pyreverse.writer.is_exception')\n    def test_get_values(self, mock_is_exception):\n        mock_obj = Mock()\n        mock_obj.title = \"TestClass\"\n        mock_obj.shape = \"class\"\n        mock_obj.attrs = [\"attr1\", \"attr2\"]\n        mock_obj.methods = [Mock(name=\"method1\"), Mock(name=\"method2\")]\n        mock_is_exception.return_value = False\n\n        self.mock_config.only_classnames = False\n\n        result = self.dot_writer.get_values(mock_obj)\n\n        self.assertEqual(result[\"shape\"], \"record\")\n        self.assertTrue(\"TestClass\" in result[\"label\"])\n        self.assertTrue(\"attr1\" in result[\"label\"])\n        self.assertTrue(\"attr2\" in result[\"label\"])\n        self.assertTrue(\"method1()\" in result[\"label\"])\n        self.assertTrue(\"method2()\" in result[\"label\"])\n\n    @patch('pylint.pyreverse.writer.DotBackend.generate')\n    def test_close_graph(self, mock_generate):\n        self.dot_writer.printer = Mock()\n\n        self.dot_writer.close_graph()\n\n        mock_generate.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1113": ["\nimport unittest\nfrom sympy import symbols, MatrixSymbol, MatPow, BlockMatrix, Identity, ZeroMatrix, ImmutableMatrix, trace, Symbol\nfrom sympy.matrices.expressions.blockmatrix import block_collapse, reblock_2x2, bounds, blockcut\n\nclass TestBlockMatrix(unittest.TestCase):\n\n    def setUp(self):\n        self.n, self.m, self.l = symbols('n m l')\n        self.X = MatrixSymbol('X', self.n, self.n)\n        self.Y = MatrixSymbol('Y', self.m, self.m)\n        self.Z = MatrixSymbol('Z', self.n, self.m)\n\n    def test_block_collapse(self):\n        B = BlockMatrix([[self.X, self.Z], [ZeroMatrix(self.m, self.n), self.Y]])\n        C = BlockMatrix([[Identity(self.n), self.Z]])\n        result = block_collapse(C * B)\n        expected = BlockMatrix([[self.X, self.Z + self.Z * self.Y]])\n        self.assertEqual(result, expected)\n\n    def test_reblock_2x2(self):\n        B = BlockMatrix(4, 4, range(16))\n        result = reblock_2x2(B)\n        expected = BlockMatrix([[B[0, 0], BlockMatrix(B[0, 1:])], [BlockMatrix(B[1:, 0]), BlockMatrix(B[1:, 1:])]])\n        self.assertEqual(result, expected)\n\n    def test_bounds(self):\n        result = bounds((1, 10, 50))\n        expected = [(0, 1), (1, 11), (11, 61)]\n        self.assertEqual(result, expected)\n\n    def test_blockcut(self):\n        M = ImmutableMatrix(4, 4, range(16))\n        result = blockcut(M, (1, 3), (1, 3))\n        self.assertEqual(result, BlockMatrix([[MatrixSlice(M, (0, 1), (0, 1)), MatrixSlice(M, (0, 1), (1, 4))],\n                                             [MatrixSlice(M, (1, 4), (0, 1)), MatrixSlice(M, (1, 4), (1, 4))]]))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_175": ["\nfrom django.test import TestCase\nfrom django.db import models\nfrom django.db.models.deletion import Collector, ProtectedError, RestrictedError\n\n# Assuming you have models defined in a 'models' module\nfrom .models import YourModel, RelatedModel\n\nclass TestDeletion(TestCase):\n    def setUp(self):\n        # Create test instances of your models here\n        self.your_model = YourModel.objects.create(name='Test')\n        self.related_model = RelatedModel.objects.create(name='Related Test', your_model=self.your_model)\n\n    def test_collector_add(self):\n        collector = Collector(using='default')\n        new_objs = collector.add([self.your_model])\n        self.assertEqual(len(new_objs), 1)\n\n    def test_collector_can_fast_delete(self):\n        collector = Collector(using='default')\n        self.assertTrue(collector.can_fast_delete(self.your_model))\n\n    def test_protected_error(self):\n        collector = Collector(using='default')\n        with self.assertRaises(ProtectedError):\n            collector.collect([self.related_model], source=YourModel, nullable=False)\n\n    def test_restricted_error(self):\n        collector = Collector(using='default')\n        collector.add_restricted_objects(YourModel._meta.get_field('your_model'), [self.your_model])\n        with self.assertRaises(RestrictedError):\n            collector.collect([self.related_model], source=YourModel, nullable=False)\n\n    # Add more test methods as needed\n"], "sample_867": ["\nimport unittest\nimport numpy as np\nfrom sklearn.cluster import MeanShift, mean_shift, estimate_bandwidth, get_bin_seeds\n\nclass TestMeanShift(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 1], [2, 1], [1, 0], [4, 7], [3, 5], [3, 6]])\n\n    def test_estimate_bandwidth(self):\n        bandwidth = estimate_bandwidth(self.X, quantile=0.3)\n        self.assertIsInstance(bandwidth, float)\n        self.assertGreater(bandwidth, 0)\n\n    def test_mean_shift(self):\n        bandwidth = estimate_bandwidth(self.X, quantile=0.3)\n        cluster_centers, labels = mean_shift(self.X, bandwidth=bandwidth)\n        self.assertEqual(len(cluster_centers), 2)\n        self.assertEqual(len(labels), len(self.X))\n\n    def test_get_bin_seeds(self):\n        bin_size = 2.0\n        bin_seeds = get_bin_seeds(self.X, bin_size, min_bin_freq=1)\n        self.assertLessEqual(len(bin_seeds), len(self.X))\n\n    def test_mean_shift_class(self):\n        bandwidth = estimate_bandwidth(self.X, quantile=0.3)\n        ms = MeanShift(bandwidth=bandwidth)\n        ms.fit(self.X)\n        labels = ms.predict(self.X)\n        self.assertEqual(len(ms.cluster_centers_), 2)\n        self.assertEqual(len(labels), len(self.X))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_83": ["\nimport unittest\nfrom django.forms import widgets\n\nclass TestMedia(unittest.TestCase):\n    def test_media_repr(self):\n        media = widgets.Media(css={'screen': ['styles.css']}, js=['script.js'])\n        self.assertEqual(repr(media), \"Media(css={'screen': ['styles.css']}, js=['script.js'])\")\n\n    def test_media_render(self):\n        media = widgets.Media(css={'screen': ['styles.css']}, js=['script.js'])\n        self.assertEqual(str(media), '<link href=\"/static/styles.css\" type=\"text/css\" media=\"screen\" rel=\"stylesheet\">\\n<script type=\"text/javascript\" src=\"/static/script.js\"></script>')\n\n    def test_media_getitem(self):\n        media = widgets.Media(css={'screen': ['styles.css']}, js=['script.js'])\n        self.assertEqual(media['css'], widgets.Media(css={'screen': ['styles.css']}))\n        self.assertEqual(media['js'], widgets.Media(js=['script.js']))\n\n    def test_media_merge(self):\n        self.assertEqual(widgets.Media.merge(['a', 'b'], ['b', 'c']), ['a', 'b', 'c'])\n\n    def test_media_add(self):\n        media1 = widgets.Media(css={'screen': ['styles1.css']}, js=['script1.js'])\n        media2 = widgets.Media(css={'screen': ['styles2.css']}, js=['script2.js'])\n        combined = media1 + media2\n        self.assertEqual(combined['css'], widgets.Media(css={'screen': ['styles1.css', 'styles2.css']}))\n        self.assertEqual(combined['js'], widgets.Media(js=['script1.js', 'script2.js']))\n\nclass TestWidget(unittest.TestCase):\n    def test_widget_render(self):\n        widget = widgets.Widget()\n        rendered = widget.render('name', 'value')\n        self.assertIn('name', rendered)\n        self.assertIn('value', rendered)\n\nclass TestInput(unittest.TestCase):\n    def test_input_render(self):\n        input_widget = widgets.Input(attrs={'type': 'text'})\n        rendered = input_widget.render('name', 'value')\n        self.assertIn('type=\"text\"', rendered)\n\nclass TestTextInput(unittest.TestCase):\n    def test_text_input_render(self):\n        text_input = widgets.TextInput()\n        rendered = text_input.render('name', 'value')\n        self.assertIn('type=\"text\"', rendered)\n\n# Add more test cases for other widget classes...\n"], "sample_270": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.models import Model\nfrom django.db.models.base import ModelBase, _has_contribute_to_class, subclass_exception, ModelState, ModelStateFieldsCacheDescriptor\n\nclass TestModelBase(unittest.TestCase):\n    def test_has_contribute_to_class(self):\n        value = Mock()\n        value.contribute_to_class = Mock()\n        self.assertTrue(_has_contribute_to_class(value))\n\n        value = Mock()\n        self.assertFalse(_has_contribute_to_class(value))\n\n    def test_subclass_exception(self):\n        exception = subclass_exception('Name', (BaseException,), 'module', Mock())\n        self.assertEqual(exception.__module__, 'module')\n        self.assertEqual(exception.__qualname__, 'Mock.Name')\n\nclass TestModel(unittest.TestCase):\n    def test_model_init(self):\n        with patch('django.db.models.base.pre_init.send'), patch('django.db.models.base.post_init.send'):\n            model = Model()\n            self.assertIsInstance(model._state, ModelState)\n\n    def test_model_save(self):\n        with patch('django.db.models.base.Model.save_base') as mock_save_base:\n            model = Model()\n            model.save()\n            mock_save_base.assert_called_once()\n\n    def test_model_delete(self):\n        with patch('django.db.models.base.Collector') as mock_collector:\n            model = Model()\n            model.pk = 1\n            model.delete()\n            mock_collector.assert_called_once()\n\nclass TestModelState(unittest.TestCase):\n    def test_model_state_fields_cache(self):\n        model_state = ModelState()\n        self.assertIsInstance(model_state.fields_cache, ModelStateFieldsCacheDescriptor)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_75": ["\nimport unittest\nfrom django.utils.html import (\n    conditional_escape, escape, escapejs, format_html, html_safe, json_script, linebreaks,\n    smart_urlquote, strip_spaces_between_tags, strip_tags, urlize\n)\nfrom django.utils.safestring import SafeString, SafeData\n\nclass TestDjangoHTMLUtils(unittest.TestCase):\n    def test_escape(self):\n        self.assertEqual(escape(\"<html>\"), \"&lt;html&gt;\")\n\n    def test_escapejs(self):\n        self.assertEqual(escapejs(\"<html>\"), \"\\\\u003Chtml\\\\u003E\")\n\n    def test_json_script(self):\n        self.assertEqual(json_script({\"key\": \"value\"}, \"test\"), '<script id=\"test\" type=\"application/json\">{\"key\": \"value\"}</script>')\n\n    def test_conditional_escape(self):\n        self.assertEqual(conditional_escape(\"<html>\"), \"&lt;html&gt;\")\n        self.assertEqual(conditional_escape(SafeString(\"<html>\")), \"<html>\")\n\n    def test_format_html(self):\n        self.assertEqual(format_html(\"{0} {1}\", \"<html>\", \"content\"), \"&lt;html&gt; content\")\n\n    def test_linebreaks(self):\n        self.assertEqual(linebreaks(\"line1\\nline2\"), \"<p>line1<br>line2</p>\")\n\n    def test_strip_tags(self):\n        self.assertEqual(strip_tags(\"<html>content</html>\"), \"content\")\n\n    def test_strip_spaces_between_tags(self):\n        self.assertEqual(strip_spaces_between_tags(\"<html>   <body>content</body> </html>\"), \"<html><body>content</body></html>\")\n\n    def test_smart_urlquote(self):\n        self.assertEqual(smart_urlquote(\"http://example.com/path?query=value\"), \"http://example.com/path?query=value\")\n\n    def test_urlize(self):\n        self.assertEqual(urlize(\"Visit https://example.com\"), 'Visit <a href=\"https://example.com\">https://example.com</a>')\n\n    def test_html_safe(self):\n        @html_safe\n        class TestClass:\n            def __str__(self):\n                return \"<html>content</html>\"\n        self.assertIsInstance(TestClass().__html__(), str)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_352": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.core.exceptions import EmptyResultSet\nfrom django.db.models.sql.where import NothingNode, WhereNode, ExtraWhere, SubqueryConstraint\n\nclass TestWhereNodes(unittest.TestCase):\n    def setUp(self):\n        self.node = WhereNode()\n        self.node.children = []\n        self.node.connector = 'AND'\n        self.node.negated = False\n        self.compiler = MagicMock()\n        self.connection = MagicMock()\n\n    def test_nothing_node(self):\n        node = NothingNode()\n        with self.assertRaises(EmptyResultSet):\n            node.as_sql()\n\n    def test_where_node_split_having(self):\n        node = WhereNode()\n        node.contains_aggregate = True\n        where_node, having_node = node.split_having()\n        self.assertIsNone(where_node)\n        self.assertEqual(having_node, node)\n\n    def test_where_node_as_sql_empty_result(self):\n        self.compiler.compile.side_effect = EmptyResultSet\n        with self.assertRaises(EmptyResultSet):\n            self.node.as_sql(self.compiler, self.connection)\n\n    def test_where_node_as_sql_no_children(self):\n        sql, params = self.node.as_sql(self.compiler, self.connection)\n        self.assertEqual(sql, '')\n        self.assertEqual(params, [])\n\n    def test_extra_where_as_sql(self):\n        sqls = [\"id > 10\", \"name = 'Test'\"]\n        params = [\"param1\", \"param2\"]\n        node = ExtraWhere(sqls, params)\n        sql, params = node.as_sql()\n        self.assertEqual(sql, \"(id > 10) AND (name = 'Test')\")\n        self.assertEqual(params, [\"param1\", \"param2\"])\n\n    def test_subquery_constraint_as_sql(self):\n        query_object = MagicMock()\n        node = SubqueryConstraint('alias', ['col1', 'col2'], [1, 2], query_object)\n        sql, params = node.as_sql(self.compiler, self.connection)\n        query_object.set_values.assert_called_with([1, 2])\n        query_object.get_compiler.assert_called_with(connection=self.connection)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_841": ["\nimport unittest\nimport numpy as np\nfrom sklearn.cross_decomposition import pls_\n\nclass TestPLSFunctions(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[0., 0., 1.], [1.,0.,0.], [2.,2.,2.], [2.,5.,4.]])\n        self.Y = np.array([[0.1, -0.2], [0.9, 1.1], [6.2, 5.9], [11.9, 12.3]])\n\n    def test_nipals_twoblocks_inner_loop(self):\n        x_weights, y_weights, _ = pls_._nipals_twoblocks_inner_loop(self.X, self.Y)\n        self.assertEqual(x_weights.shape, (3,))\n        self.assertEqual(y_weights.shape, (2,))\n\n    def test_svd_cross_product(self):\n        u, v = pls_._svd_cross_product(self.X, self.Y)\n        self.assertEqual(u.shape, (3,))\n        self.assertEqual(v.shape, (2,))\n\n    def test_center_scale_xy(self):\n        X, Y, _, _, _, _ = pls_._center_scale_xy(self.X, self.Y)\n        self.assertTrue(np.allclose(X.mean(axis=0), np.zeros(3)))\n        self.assertTrue(np.allclose(Y.mean(axis=0), np.zeros(2)))\n\n    def test_PLSRegression_fit(self):\n        pls_reg = pls_.PLSRegression(n_components=2)\n        pls_reg.fit(self.X, self.Y)\n        self.assertEqual(pls_reg.x_scores_.shape, (4, 2))\n        self.assertEqual(pls_reg.y_scores_.shape, (4, 2))\n\n    def test_PLSCanonical_fit(self):\n        pls_can = pls_.PLSCanonical(n_components=2)\n        pls_can.fit(self.X, self.Y)\n        self.assertEqual(pls_can.x_scores_.shape, (4, 2))\n        self.assertEqual(pls_can.y_scores_.shape, (4, 2))\n\n    def test_PLSSVD_fit(self):\n        pls_svd = pls_.PLSSVD(n_components=2)\n        pls_svd.fit(self.X, self.Y)\n        self.assertEqual(pls_svd.x_scores_.shape, (4, 2))\n        self.assertEqual(pls_svd.y_scores_.shape, (4, 2))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_968": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom docutils import nodes\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.domains.python import (\n    PythonDomain, PythonModuleIndex, _parse_annotation, _pseudo_parse_arglist, py_sig_re,\n    ObjectEntry, ModuleEntry, type_to_xref, _parse_arglist, PyXRefRole, filter_meta_fields,\n    builtin_resolver, setup\n)\n\nclass TestPythonDomain(unittest.TestCase):\n    def setUp(self):\n        self.env = MagicMock(spec=BuildEnvironment)\n        self.domain = PythonDomain(self.env)\n\n    def test_note_object(self):\n        self.domain.note_object('test_object', 'class', 'node_id')\n        self.assertEqual(self.domain.objects['test_object'], ObjectEntry(self.env.docname, 'node_id', 'class', False))\n\n    def test_note_module(self):\n        self.domain.note_module('test_module', 'node_id', 'synopsis', 'platform', True)\n        self.assertEqual(self.domain.modules['test_module'], ModuleEntry(self.env.docname, 'node_id', 'synopsis', 'platform', True))\n\n    @patch('sphinx.domains.python.nodes.Text')\n    def test_type_to_xref(self, mock_text):\n        mock_text.return_value = 'test_target'\n        result = type_to_xref('test_target', self.env)\n        self.assertEqual(result['reftarget'], 'test_target')\n\n    # Add more tests for other functions in the same manner\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_791": ["\nimport unittest\nimport numpy as np\nfrom sklearn.exceptions import NotFittedError, ValueError\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\n\nclass TestEncoders(unittest.TestCase):\n\n    def setUp(self):\n        self.X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        self.X_numeric = [[0, 1], [1, 3], [1, 2]]\n        self.X_numeric_unknown = [[0, 1], [1, 3], [1, 4]]\n\n    def test_one_hot_encoder_fit(self):\n        enc = OneHotEncoder()\n        enc.fit(self.X)\n        self.assertEqual(len(enc.categories_), 2)\n\n    def test_one_hot_encoder_transform(self):\n        enc = OneHotEncoder()\n        enc.fit(self.X)\n        transformed = enc.transform([['Female', 1], ['Male', 3]]).toarray()\n        expected = np.array([[1., 0., 1., 0., 0.], [0., 1., 0., 0., 1.]])\n        np.testing.assert_array_equal(transformed, expected)\n\n    def test_one_hot_encoder_inverse_transform(self):\n        enc = OneHotEncoder()\n        enc.fit(self.X)\n        transformed = enc.transform([['Female', 1], ['Male', 2]]).toarray()\n        inverse_transformed = enc.inverse_transform(transformed)\n        expected = np.array([['Female', 1], ['Male', 2]], dtype=object)\n        np.testing.assert_array_equal(inverse_transformed, expected)\n\n    def test_one_hot_encoder_handle_unknown(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        transformed = enc.transform([['Unknown', 1], ['Male', 2]]).toarray()\n        expected = np.array([[0., 0., 1., 0., 0.], [0., 1., 0., 0., 0.]])\n        np.testing.assert_array_equal(transformed, expected)\n\n    def test_one_hot_encoder_drop(self):\n        enc = OneHotEncoder(drop='first')\n        enc.fit(self.X)\n        transformed = enc.transform([['Female', 1], ['Male', 2]]).toarray()\n        expected = np.array([[0., 0., 0.], [1., 1., 0.]])\n        np.testing.assert_array_equal(transformed, expected)\n\n    def test_ordinal_encoder_fit(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        self.assertEqual(len(enc.categories_), 2)\n\n    def test_ordinal_encoder_transform(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        transformed = enc.transform([['Female', 3], ['Male', 1]])\n        expected = np.array([[0., 2.], [1., 0.]])\n        np.testing.assert_array_equal(transformed, expected)\n\n    def test_ordinal_encoder_inverse_transform(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        transformed = enc.transform([['Female', 3], ['Male', 1]])\n        inverse_transformed = enc.inverse_transform(transformed)\n        expected = np.array([['Female', 3], ['Male', 1]], dtype=object)\n        np.testing.assert_array_equal(inverse_transformed, expected)\n\n    def test_ordinal_encoder_numeric_input(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X_numeric)\n        transformed = enc.transform(self.X_numeric)\n        expected = np.array(self.X_numeric)\n        np.testing.assert_array_equal(transformed, expected)\n\n    def test_ordinal_encoder_numeric_input_unknown(self):\n        enc = OrdinalEncoder()\n        with self.assertRaises(ValueError):\n            enc.fit(self.X_numeric_unknown)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_596": ["\nimport unittest\nfrom typing import Hashable, Any\n\nimport pandas as pd\n\nfrom xarray.core import dtypes, merge\nfrom xarray.core.dataarray import DataArray\nfrom xarray.core.dataset import Dataset\nfrom xarray.core.merge import MergeError\nfrom xarray.core.variable import Variable\n\nclass TestMergeFunctions(unittest.TestCase):\n    def setUp(self):\n        self.var1 = Variable((\"x\", \"y\"), [[1, 2], [3, 4]], attrs={\"attr1\": \"value1\"})\n        self.var2 = Variable((\"x\", \"y\"), [[5, 6], [7, 8]], attrs={\"attr1\": \"value1\"})\n        self.var3 = Variable((\"z\", \"y\"), [[9, 10], [11, 12]], attrs={\"attr1\": \"value1\"})\n        self.var4 = Variable((\"x\", \"y\"), [[13, 14], [15, 16]], attrs={\"attr1\": \"value2\"})\n\n        self.index1 = pd.Index([1, 2], name=\"x\")\n        self.index2 = pd.Index([2, 3], name=\"x\")\n\n        self.objects = [{\"var1\": self.var1, \"var3\": self.var3}, {\"var2\": self.var2, \"var3\": self.var3}]\n        self.coerced = [{\"var1\": self.var1, \"var3\": self.var3}, {\"var2\": pd.DataFrame(self.var2.data)}]\n        self.collected = {\"var1\": [(self.var1, None)], \"var2\": [(self.var2, None)], \"var3\": [(self.var3, None)]}\n        self.prioritized = {\"var3\": (self.var3, None)}\n\n    def test_broadcast_dimension_size(self):\n        variables = [self.var1, self.var2]\n        dim_lengths = merge.broadcast_dimension_size(variables)\n        self.assertEqual(dim_lengths, {\"x\": 2, \"y\": 2})\n\n    def test_unique_variable(self):\n        variables = [self.var1, self.var2]\n        unique_var = merge.unique_variable(\"var1\", variables, compat=\"identical\")\n        self.assertEqual(unique_var, self.var1)\n\n    def test_merge_collected(self):\n        variables, indexes = merge.merge_collected(self.collected, self.prioritized, compat=\"identical\")\n        self.assertEqual(variables, {\"var1\": self.var1, \"var3\": self.var3})\n\n    def test_collect_variables_and_indexes(self):\n        collected = merge.collect_variables_and_indexes(self.objects)\n        self.assertEqual(collected, self.collected)\n\n    def test_coerce_pandas_values(self):\n        coerced = merge.coerce_pandas_values(self.coerced)\n        self.assertIsInstance(coerced[1][\"var2\"], DataArray)\n\n    def test_merge_core(self):\n        result = merge.merge_core(self.objects, compat=\"identical\", join=\"outer\")\n        self.assertEqual(result.variables, {\"var1\": self.var1, \"var2\": self.var2, \"var3\": self.var3})\n\n    def test_merge(self):\n        dataset = merge.merge([self.var1, self.var2])\n        self.assertIsInstance(dataset, Dataset)\n        self.assertEqual(dataset.variables, {\"var1\": self.var1, \"var2\": self.var2})\n\n    def test_dataset_merge_method(self):\n        dataset = Dataset({\"var1\": self.var1})\n        result = merge.dataset_merge_method(dataset, {\"var2\": self.var2}, overwrite_vars=\"var2\", compat=\"identical\", join=\"outer\", fill_value=dtypes.NA)\n        self.assertEqual(result.variables, {\"var1\": self.var1, \"var2\": self.var2})\n\n    def test_dataset_update_method(self):\n        dataset = Dataset({\"var1\": self.var1})\n        result = merge.dataset_update_method(dataset, {\"var2\": self.var2})\n        self.assertEqual(result.variables, {\"var1\": self.var1, \"var2\": self.var2})\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1004": ["\nimport unittest\nfrom sympy import Symbol, Rational, sin, Integral, Matrix, pi, asin, log\nfrom sympy.printing.latex import latex, translate, greek_letters_set, tex_greek_dictionary, LatexPrinter, other_symbols\n\nclass TestLatexPrinter(unittest.TestCase):\n    def setUp(self):\n        self.x = Symbol('x')\n        self.y = Symbol('y')\n        self.mu = Symbol('mu')\n        self.tau = Symbol('tau')\n        self.r = Symbol('r')\n\n    def test_latex_output(self):\n        self.assertEqual(latex((2*self.tau)**Rational(7, 2)), '8 \\\\sqrt{2} \\\\tau^{\\\\frac{7}{2}}')\n        self.assertEqual(latex((2*self.mu)**Rational(7, 2), mode='plain'), '8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}')\n        self.assertEqual(latex((2*self.tau)**Rational(7, 2), mode='inline'), '$8 \\\\sqrt{2} \\\\tau^{7 / 2}$')\n        self.assertEqual(latex((2*self.mu)**Rational(7, 2), mode='equation*'), '\\\\begin{equation*}8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}\\\\end{equation*}')\n        self.assertEqual(latex((2*self.mu)**Rational(7, 2), mode='equation'), '\\\\begin{equation}8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}\\\\end{equation}')\n        self.assertEqual(latex((2*self.mu)**Rational(7, 2), mode='equation', itex=True), '$$8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}$$')\n        self.assertEqual(latex((2*self.tau)**sin(Rational(7, 2)), fold_func_brackets=True), '\\\\left(2 \\\\tau\\\\right)^{\\\\sin {\\\\frac{7}{2}}}')\n        self.assertEqual(latex(3*self.x**2/self.y, fold_short_frac=True), '3 x^{2} / y')\n        self.assertEqual(latex(Integral(self.r, self.r)/2/pi, long_frac_ratio=0), '\\\\frac{1}{2 \\\\pi} \\\\int r\\, dr')\n        self.assertEqual(latex((2*self.tau)**sin(Rational(7, 2)), mul_symbol=\"times\"), '\\\\left(2 \\\\times \\\\tau\\\\right)^{\\\\sin{\\\\left (\\\\frac{7}{2} \\\\right )}}')\n        self.assertEqual(latex(asin(Rational(7, 2)), inv_trig_style=\"full\"), '\\\\arcsin{\\\\left (\\\\frac{7}{2} \\\\right )}')\n        self.assertEqual(latex(asin(Rational(7, 2)), inv_trig_style=\"power\"), '\\\\sin^{-1}{\\\\left (\\\\frac{7}{2} \\\\right )}')\n        self.assertEqual(latex(Matrix(2, 1, [self.x, self.y]), mat_str=\"array\"), '\\\\left[\\\\begin{array}{c}x\\\\\\\\y\\\\end{array}\\\\right]')\n        self.assertEqual(latex(Matrix(2, 1, [self.x, self.y]), mat_delim=\"(\"), '\\\\left(\\\\begin{matrix}x\\\\\\\\y\\\\end{matrix}\\\\right)')\n        self.assertEqual(latex(self.x**2, symbol_names={self.x: 'x_i'}), 'x_i^{2}')\n        self.assertEqual(latex([2/self.x, self.y], mode='inline'), '$\\\\left [ 2 / x, \\\\quad y\\\\right ]$')\n        self.assertEqual(latex(log(10), ln_notation=True), '\\\\ln{\\\\left (10 \\\\right )}')\n\n    def test_translate(self):\n        self.assertEqual(translate('alphahatdotprime'), \"{\\\\dot{\\\\hat{\\\\alpha}}}'\")\n        self.assertEqual(translate('beta'), '\\\\beta')\n        self.assertEqual(translate('ALPHA'), '\\\\Alpha')\n        self.assertEqual(translate('sigma'), '\\\\sigma')\n        self.assertEqual(translate('Sigmabar'), '\\\\bar{\\\\Sigma}')\n        self.assertEqual(translate('lambda'), '\\\\lambda')\n        self.assertEqual(translate('Lambda'), '\\\\Lambda')\n        self.assertEqual(translate('unknown'), 'unknown')\n\n    def test_greek_letters_set(self):\n        self.assertIn('alpha', greek_letters_set)\n        self.assertIn('Beta', greek_letters_set)\n        self.assertIn('gamma', greek_letters_set)\n        self.assertNotIn('x', greek_letters_set)\n        self.assertNotIn('10', greek_letters_set)\n\n    def test_tex_greek_dictionary(self):\n        self.assertEqual(tex_greek_dictionary['Alpha'], 'A')\n        self.assertEqual(tex_greek_dictionary['Gamma'], '\\\\Gamma')\n        self.assertEqual(tex_greek_dictionary['khi'], 'X')\n        self.assertEqual(tex_greek_dictionary['varepsilon'], '\\\\varepsilon')\n\n    def test_other_symbols(self):\n        self.assertIn('aleph', other_symbols)\n        self.assertIn('beth', other_symbols)\n        self.assertIn('gimel', other_symbols)\n        self.assertNotIn('x', other_symbols)\n        self.assertNotIn('10', other_symbols)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_805": ["\nimport unittest\nfrom sklearn.utils._pprint import _EstimatorPrettyPrinter, _changed_params, _safe_repr\nfrom sklearn.base import BaseEstimator\n\nclass TestEstimatorPrettyPrinter(unittest.TestCase):\n    def setUp(self):\n        class DummyEstimator(BaseEstimator):\n            def __init__(self, param1=1, param2=2, param3=3):\n                self.param1 = param1\n                self.param2 = param2\n                self.param3 = param3\n\n        self.estimator = DummyEstimator(param1=5, param3=6)\n        self.pp = _EstimatorPrettyPrinter()\n\n    def test_changed_params(self):\n        changed_params = _changed_params(self.estimator)\n        self.assertEqual(changed_params, {'param1': 5, 'param3': 6})\n\n    def test_safe_repr(self):\n        repr_str, readable, recursive = _safe_repr(self.estimator, {}, None, 0, changed_only=True)\n        self.assertEqual(repr_str, \"DummyEstimator(param1=5, param3=6)\")\n\n    def test_format(self):\n        formatted_str = self.pp.format(self.estimator, {}, None, 0)\n        self.assertEqual(formatted_str, \"DummyEstimator(param1=5, param2=2, param3=6)\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_767": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics.cluster import silhouette_score, silhouette_samples, calinski_harabasz_score, davies_bouldin_score\nfrom sklearn.datasets import make_blobs\n\nclass TestUnsupervisedMetrics(unittest.TestCase):\n    def setUp(self):\n        self.X, self.labels = make_blobs(n_samples=150, centers=3, random_state=42)\n\n    def test_silhouette_score(self):\n        score = silhouette_score(self.X, self.labels)\n        self.assertIsInstance(score, float)\n        self.assertTrue(-1 <= score <= 1)\n\n    def test_silhouette_samples(self):\n        samples = silhouette_samples(self.X, self.labels)\n        self.assertEqual(len(samples), len(self.labels))\n        self.assertTrue(all(-1 <= s <= 1 for s in samples))\n\n    def test_calinski_harabasz_score(self):\n        score = calinski_harabasz_score(self.X, self.labels)\n        self.assertIsInstance(score, float)\n        self.assertGreater(score, 0)\n\n    def test_davies_bouldin_score(self):\n        score = davies_bouldin_score(self.X, self.labels)\n        self.assertIsInstance(score, float)\n        self.assertGreater(score, 0)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_413": ["\nfrom unittest import TestCase, mock\nfrom django.core.checks.templates import (\n    E001, E002, E003,\n    check_setting_app_dirs_loaders,\n    check_string_if_invalid_is_string,\n    check_for_template_tags_with_the_same_name,\n)\n\nclass TestTemplatesChecks(TestCase):\n\n    def setUp(self):\n        self.mock_settings = {\n            'TEMPLATES': [\n                {\n                    'APP_DIRS': True,\n                    'OPTIONS': {\n                        'loaders': ['django.template.loaders.filesystem.Loader'],\n                        'string_if_invalid': 'Invalid',\n                        'libraries': {\n                            'custom_tags': 'myapp.templatetags.custom_tags',\n                        },\n                    },\n                },\n            ],\n        }\n\n    @mock.patch('django.core.checks.templates.settings', mock_settings)\n    def test_check_setting_app_dirs_loaders(self):\n        errors = check_setting_app_dirs_loaders(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0], E001)\n\n    @mock.patch('django.core.checks.templates.settings', mock_settings)\n    def test_check_string_if_invalid_is_string(self):\n        errors = check_string_if_invalid_is_string(None)\n        self.assertEqual(len(errors), 0)\n\n        self.mock_settings['TEMPLATES'][0]['OPTIONS']['string_if_invalid'] = 123\n        errors = check_string_if_invalid_is_string(None)\n        self.assertEqual(len(errors), 1)\n        self.assertIn(E002.msg.format(123, 'int'), errors[0].msg)\n\n    @mock.patch('django.core.checks.templates.settings', mock_settings)\n    @mock.patch('django.core.checks.templates.get_template_tag_modules')\n    def test_check_for_template_tags_with_the_same_name(self, mock_get_template_tag_modules):\n        mock_get_template_tag_modules.return_value = [('custom_tags', 'django.templatetags.custom_tags')]\n        errors = check_for_template_tags_with_the_same_name(None)\n        self.assertEqual(len(errors), 1)\n        self.assertIn(E003.msg.format(repr('custom_tags'), repr('django.templatetags.custom_tags'), repr('myapp.templatetags.custom_tags')), errors[0].msg)\n"], "sample_1203": ["\nimport unittest\nfrom sympy.combinatorics import free_group, Permutation\nfrom sympy.combinatorics.perm_groups import PermutationGroup\nfrom sympy.combinatorics.fp_groups import FpGroup\nfrom sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\nfrom sympy.combinatorics.named_groups import DihedralGroup, AlternatingGroup\n\nclass TestHomomorphisms(unittest.TestCase):\n    def setUp(self):\n        self.F, self.a, self.b = free_group(\"a, b\")\n        self.G = FpGroup(self.F, [self.a**3, self.b**3, (self.a*self.b)**2])\n        self.H = AlternatingGroup(4)\n        self.D = DihedralGroup(8)\n        self.p = Permutation(0, 1, 2, 3, 4, 5, 6, 7)\n        self.P = PermutationGroup(self.p)\n\n    def test_homomorphism(self):\n        hom = homomorphism(self.G, self.H, [self.a, self.b])\n        self.assertIsInstance(hom, homomorphism)\n\n    def test_group_isomorphism(self):\n        is_iso, _ = group_isomorphism(self.G, self.H)\n        self.assertTrue(is_iso)\n\n    def test_group_isomorphism_false(self):\n        is_iso, _ = group_isomorphism(self.D, self.P)\n        self.assertFalse(is_iso)\n\n    def test_is_isomorphic(self):\n        is_iso = is_isomorphic(self.G, self.H)\n        self.assertTrue(is_iso)\n\n    def test_is_isomorphic_false(self):\n        is_iso = is_isomorphic(self.D, self.P)\n        self.assertFalse(is_iso)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_407": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.apps import apps\nfrom django.db import models\nfrom django.db.models.base import Model, ModelBase, _has_contribute_to_class\nfrom django.db.models.fields import CharField, IntegerField\nfrom django.db.models.signals import class_prepared, post_init, post_save, pre_init, pre_save\nfrom django.db.models.utils import make_model_tuple\n\nclass TestModelBase(unittest.TestCase):\n    def setUp(self):\n        self.base_classes = (Model,)\n\n    def test_new_abstract_model(self):\n        attrs = {\"__module__\": \"__main__\", \"Meta\": type(\"Meta\", (), {\"abstract\": True})}\n        model = ModelBase(\"AbstractModel\", self.base_classes, attrs)\n        self.assertTrue(model._meta.abstract)\n\n    def test_new_concrete_model(self):\n        attrs = {\"__module__\": \"__main__\", \"Meta\": type(\"Meta\", (), {})}\n        model = ModelBase(\"ConcreteModel\", self.base_classes, attrs)\n        self.assertFalse(model._meta.abstract)\n\n    def test_has_contribute_to_class(self):\n        field = IntegerField()\n        field.contribute_to_class = MagicMock()\n        self.assertTrue(_has_contribute_to_class(field))\n        self.assertFalse(_has_contribute_to_class(None))\n        self.assertFalse(_has_contribute_to_class(int))\n\n    def test_add_to_class(self):\n        class DummyModel(metaclass=ModelBase):\n            pass\n\n        field = IntegerField()\n        DummyModel.add_to_class(\"field\", field)\n        self.assertIn(\"field\", DummyModel.__dict__)\n\n    def test_prepare(self):\n        class DummyModel(metaclass=ModelBase):\n            field = IntegerField()\n\n        class_prepared.send = MagicMock()\n        DummyModel._prepare()\n        class_prepared.send.assert_called_once_with(sender=DummyModel)\n\n    def test_base_manager_and_default_manager(self):\n        class DummyModel(metaclass=ModelBase):\n            field = IntegerField()\n\n        self.assertEqual(DummyModel._base_manager, DummyModel._default_manager)\n\nclass TestModel(unittest.TestCase):\n    def setUp(self):\n        self.model = Model\n\n    def test_init(self):\n        pre_init.send = MagicMock()\n        post_init.send = MagicMock()\n        obj = self.model(field1=1, field2=2)\n        pre_init.send.assert_called_once_with(sender=self.model, args=(), kwargs={'field1': 1, 'field2': 2})\n        post_init.send.assert_called_once_with(sender=self.model, instance=obj)\n\n    def test_from_db(self):\n        db = 'default'\n        field_names = ['field1', 'field2']\n        values = [1, 2]\n        obj = self.model.from_db(db, field_names, values)\n        self.assertEqual(obj.field1, 1)\n        self.assertEqual(obj.field2, 2)\n\n    def test_save_base(self):\n        post_save.send = MagicMock()\n        obj = self.model()\n        obj.save_base(using='default')\n        post_save.send.assert_called_once_with(sender=self.model, instance=obj, created=True, update_fields=None, raw=False, using='default')\n\n    def test_delete(self):\n        obj = self.model(pk=1)\n        obj.delete = MagicMock()\n        obj.delete(using='default')\n        obj.delete.assert_called_once_with(using='default', keep_parents=False)\n\n    def test_validate_unique(self):\n        class DummyModel(metaclass=ModelBase):\n            field1 = CharField(unique=True)\n            field2 = CharField()\n\n        obj1 = DummyModel(field1='value')\n        obj2 = DummyModel(field1='value')\n        obj1.validate_unique()\n        with self.assertRaises(models.ValidationError):\n            obj2.validate_unique()\n\n    # Add more test methods for other functionalities as needed.\n"], "sample_116": ["\nfrom django.test import TestCase\nfrom django.contrib.auth.forms import (\n    UserCreationForm, UserChangeForm, AuthenticationForm, PasswordResetForm,\n    SetPasswordForm, PasswordChangeForm, AdminPasswordChangeForm,\n)\nfrom django.contrib.auth.models import User\n\nclass TestForms(TestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n\n    def test_UserCreationForm_valid(self):\n        form = UserCreationForm(data={\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n        })\n        self.assertTrue(form.is_valid())\n\n    def test_UserCreationForm_password_mismatch(self):\n        form = UserCreationForm(data={\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'differentpassword',\n        })\n        self.assertFalse(form.is_valid())\n\n    def test_UserChangeForm_valid(self):\n        form = UserChangeForm(instance=self.user, data={\n            'username': 'testuser',\n        })\n        self.assertTrue(form.is_valid())\n\n    # Add more tests for AuthenticationForm, PasswordResetForm, SetPasswordForm, PasswordChangeForm, AdminPasswordChangeForm\n"], "sample_546": ["\nimport unittest\nfrom unittest.mock import MagicMock\nimport numpy as np\nfrom matplotlib.figure import Figure, SubFigure\n\nclass TestFigure(unittest.TestCase):\n\n    def setUp(self):\n        self.figure = Figure()\n\n    def test_init(self):\n        self.assertIsInstance(self.figure, Figure)\n\n    def test_set_dpi(self):\n        self.figure.set_dpi(200)\n        self.assertEqual(self.figure.dpi, 200)\n\n    def test_get_size_inches(self):\n        size = self.figure.get_size_inches()\n        self.assertEqual(len(size), 2)\n        self.assertIsInstance(size[0], float)\n        self.assertIsInstance(size[1], float)\n\n    def test_set_size_inches(self):\n        self.figure.set_size_inches(5, 5)\n        size = self.figure.get_size_inches()\n        self.assertEqual(size[0], 5)\n        self.assertEqual(size[1], 5)\n\n    def test_add_axes(self):\n        ax = self.figure.add_axes([0, 0, 1, 1])\n        self.assertEqual(len(self.figure.axes), 1)\n\n    def test_clear(self):\n        self.figure.clear()\n        self.assertEqual(len(self.figure.axes), 0)\n\n    def test_draw(self):\n        renderer = MagicMock()\n        self.figure.draw(renderer)\n        self.assertFalse(self.figure.stale)\n\n    def test_savefig(self):\n        self.figure.savefig('test.png')\n        # Add assertion to verify file creation\n\nclass TestSubFigure(unittest.TestCase):\n\n    def setUp(self):\n        self.parent = Figure()\n        self.subplotspec = self.parent.add_subplot(111).get_subplotspec()\n        self.subfigure = SubFigure(self.parent, self.subplotspec)\n\n    def test_init(self):\n        self.assertIsInstance(self.subfigure, SubFigure)\n\n    def test_dpi_property(self):\n        self.assertEqual(self.subfigure.dpi, self.parent.dpi)\n\n    def test_set_dpi(self):\n        self.subfigure.dpi = 300\n        self.assertEqual(self.subfigure.dpi, 300)\n\n    def test_get_layout_engine(self):\n        self.assertIsNone(self.subfigure.get_layout_engine())\n\n    def test_set_layout_engine(self):\n        self.subfigure.set_layout_engine(layout='tight')\n        self.assertIsNotNone(self.subfigure.get_layout_engine())\n\n    def test_get_constrained_layout(self):\n        self.assertFalse(self.subfigure.get_constrained_layout())\n\n    def test_set_constrained_layout(self):\n        self.subfigure.set_constrained_layout(constrained=True)\n        self.assertTrue(self.subfigure.get_constrained_layout())\n"], "sample_296": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.contrib.messages.storage.cookie import CookieStorage, MessageDecoder, MessageEncoder\nfrom django.core.signing import get_cookie_signer\nfrom django.http import HttpRequest, HttpResponse\nfrom django.contrib.messages.storage.base import Message\nfrom django.utils.safestring import SafeData\n\nclass TestCookieStorage(unittest.TestCase):\n    def setUp(self):\n        self.request = HttpRequest()\n        self.response = HttpResponse()\n        self.storage = CookieStorage(self.request)\n\n    def test_encode_decode(self):\n        message = Message(level=10, message=\"Test message\", extra_tags=\"test\")\n        encoded = self.storage._encode([message])\n        self.assertIsInstance(encoded, str)\n\n        decoded = self.storage._decode(encoded)\n        self.assertIsInstance(decoded, list)\n        self.assertEqual(len(decoded), 1)\n        self.assertIsInstance(decoded[0], Message)\n        self.assertEqual(decoded[0].message, \"Test message\")\n\n    def test_store_retrieve(self):\n        message = Message(level=10, message=\"Test message\", extra_tags=\"test\")\n        self.storage._store([message], self.response)\n\n        messages, all_retrieved = self.storage._get()\n        self.assertEqual(len(messages), 1)\n        self.assertEqual(messages[0].message, \"Test message\")\n\n    def test_update_cookie(self):\n        self.storage._update_cookie(\"test_data\", self.response)\n        self.assertEqual(self.response.cookies[self.storage.cookie_name].value, \"test_data\")\n\n    def test_message_encoder(self):\n        message = Message(level=10, message=\"Test message\", extra_tags=\"test\")\n        encoder = MessageEncoder()\n        encoded = encoder.default(message)\n        self.assertIsInstance(encoded, list)\n\n        safe_message = Message(level=10, message=SafeData(\"Test message\"), extra_tags=\"test\")\n        encoded_safe = encoder.default(safe_message)\n        self.assertEqual(encoded_safe[1], 1)\n\n    def test_message_decoder(self):\n        decoder = MessageDecoder()\n        message = [MessageEncoder.message_key, 0, 10, \"Test message\", \"test\"]\n        decoded = decoder.process_messages(message)\n        self.assertIsInstance(decoded, Message)\n        self.assertEqual(decoded.message, \"Test message\")\n\n        safe_message = [MessageEncoder.message_key, 1, 10, \"Test message\", \"test\"]\n        decoded_safe = decoder.process_messages(safe_message)\n        self.assertIsInstance(decoded_safe.message, SafeData)\n"], "sample_512": ["\nimport unittest\nimport matplotlib as mpl\nfrom matplotlib import pyplot as plt\n\nclass TestPyplotMethods(unittest.TestCase):\n\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n\n    def test_figure(self):\n        fig = plt.figure()\n        self.assertIsInstance(fig, mpl.figure.Figure)\n\n    def test_gcf(self):\n        fig = plt.gcf()\n        self.assertIsInstance(fig, mpl.figure.Figure)\n\n    def test_subplot(self):\n        ax = plt.subplot(111)\n        self.assertIsInstance(ax, mpl.axes.Axes)\n\n    def test_plot(self):\n        line, = plt.plot([1, 2, 3], [1, 2, 3])\n        self.assertIsInstance(line, mpl.lines.Line2D)\n\n    def test_xlabel(self):\n        plt.xlabel('x label')\n        self.assertEqual(self.ax.get_xlabel(), 'x label')\n\n    def test_ylabel(self):\n        plt.ylabel('y label')\n        self.assertEqual(self.ax.get_ylabel(), 'y label')\n\n    def test_title(self):\n        plt.title('title')\n        self.assertEqual(self.ax.get_title(), 'title')\n\n    def test_xlim(self):\n        plt.xlim([0, 10])\n        self.assertEqual(self.ax.get_xlim(), (0, 10))\n\n    def test_ylim(self):\n        plt.ylim([0, 10])\n        self.assertEqual(self.ax.get_ylim(), (0, 10))\n\n    # Add more tests as needed to cover other functions in pyplot.py\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_3": ["\nimport unittest\nimport numpy as np\nfrom astropy.modeling.models import Shift, Scale, Rotation2D, Polynomial2D, Mapping\nfrom astropy.modeling.core import ModelDefinitionError\nfrom astropy.modeling.separable import (_coord_matrix, is_separable, _cdot, _cstack, _arith_oper, separability_matrix)\n\nclass TestSeparable(unittest.TestCase):\n    def setUp(self):\n        self.model1 = Shift(1) & Shift(2) | Scale(1) & Scale(2)\n        self.model2 = Shift(1) & Shift(2) | Rotation2D(2)\n        self.model3 = Shift(1) & Shift(2) | Mapping([0, 1, 0, 1]) | Polynomial2D(1) & Polynomial2D(2)\n        self.model4 = Shift(1) & Shift(2) | Mapping([0, 1, 0, 1])\n\n    def test_coord_matrix(self):\n        self.assertTrue(np.array_equal(_coord_matrix(self.model1.left, 'left', 2),\n                                       np.array([[1, 0], [0, 1]])))\n        self.assertTrue(np.array_equal(_coord_matrix(self.model1.right, 'right', 2),\n                                       np.array([[0, 0], [0, 0]])))\n\n    def test_is_separable(self):\n        self.assertTrue(np.array_equal(is_separable(self.model1), np.array([True, True])))\n        self.assertTrue(np.array_equal(is_separable(self.model2), np.array([False, False])))\n        self.assertTrue(np.array_equal(is_separable(self.model3), np.array([False, False])))\n        self.assertTrue(np.array_equal(is_separable(self.model4), np.array([True, True, True, True])))\n\n    def test_separability_matrix(self):\n        self.assertTrue(np.array_equal(separability_matrix(self.model1),\n                                       np.array([[True, False], [False, True]])))\n        self.assertTrue(np.array_equal(separability_matrix(self.model2),\n                                       np.array([[True, True], [True, True]])))\n        self.assertTrue(np.array_equal(separability_matrix(self.model4),\n                                       np.array([[True, False], [False, True], [True, False], [False, True]])))\n\n    def test_arith_oper(self):\n        with self.assertRaises(ModelDefinitionError):\n            _arith_oper(self.model1.left, self.model1.right)\n\n    def test_cdot(self):\n        self.assertTrue(np.array_equal(_cdot(self.model1.left, self.model1.right),\n                                       np.array([[0, 0], [0, 0]])))\n\n    def test_cstack(self):\n        self.assertTrue(np.array_equal(_cstack(self.model1.left, self.model1.right),\n                                       np.array([[1, 0, 0, 0], [0, 1, 0, 0]])))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_513": ["\nimport unittest\nimport matplotlib.pyplot as plt\nimport matplotlib.legend as mlegend\n\nclass TestLegend(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.line, = self.ax.plot([1, 2, 3], label=\"Test line\")\n        self.legend = mlegend.Legend(self.ax, [self.line], [\"Test line\"])\n\n    def test_legend_creation(self):\n        self.assertIsInstance(self.legend, mlegend.Legend)\n\n    def test_legend_handles(self):\n        self.assertEqual(len(self.legend.legendHandles), 1)\n        self.assertIs(self.legend.legendHandles[0], self.line)\n\n    def test_legend_labels(self):\n        self.assertEqual(len(self.legend.texts), 1)\n        self.assertEqual(self.legend.texts[0].get_text(), \"Test line\")\n\n    def test_legend_title(self):\n        self.legend.set_title(\"Test title\")\n        self.assertEqual(self.legend.get_title().get_text(), \"Test title\")\n\n    def test_legend_location(self):\n        self.legend._set_loc(\"upper left\")\n        self.assertEqual(self.legend._loc, 2)\n\n    def test_legend_frame(self):\n        self.assertTrue(self.legend.get_frame_on())\n        self.legend.set_frame_on(False)\n        self.assertFalse(self.legend.get_frame_on())\n\n    def test_legend_alignment(self):\n        self.legend.set_alignment(\"left\")\n        self.assertEqual(self.legend.get_alignment(), \"left\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_721": ["\nimport unittest\nimport numpy as np\nfrom scipy import sparse\nfrom sklearn.utils import validation\n\nclass TestValidation(unittest.TestCase):\n\n    def test_as_float_array(self):\n        # Testing conversion of array-like to an array of floats\n        X = np.array([[1, 2], [3, 4]], dtype=np.int32)\n        X_float = validation.as_float_array(X)\n        self.assertEqual(X_float.dtype, np.float64)\n\n    def test_check_array(self):\n        # Testing input validation for standard estimators\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([0, 1])\n        X_checked, y_checked = validation.check_X_y(X, y)\n        self.assertTrue(np.array_equal(X_checked, X))\n        self.assertTrue(np.array_equal(y_checked, y))\n\n    def test_column_or_1d(self):\n        # Testing raveling of column or 1d numpy array\n        y = np.array([[0], [1]])\n        y_raveled = validation.column_or_1d(y)\n        self.assertTrue(np.array_equal(y_raveled, np.array([0, 1])))\n\n    def test_check_random_state(self):\n        # Testing conversion of seed into a np.random.RandomState instance\n        random_state = validation.check_random_state(42)\n        self.assertIsInstance(random_state, np.random.RandomState)\n\n    def test_has_fit_parameter(self):\n        # Testing whether the estimator's fit method supports the given parameter\n        class DummyEstimator:\n            def fit(self, X, y=None):\n                pass\n        estimator = DummyEstimator()\n        self.assertTrue(validation.has_fit_parameter(estimator, \"y\"))\n\n    def test_check_symmetric(self):\n        # Testing that array is 2D, square and symmetric\n        array = np.array([[1, 2], [2, 1]])\n        array_sym = validation.check_symmetric(array)\n        self.assertTrue(np.array_equal(array_sym, array))\n\n    def test_check_is_fitted(self):\n        # Testing is_fitted validation for estimator\n        class DummyEstimator:\n            def __init__(self):\n                self.fitted_ = True\n        estimator = DummyEstimator()\n        validation.check_is_fitted(estimator, \"fitted_\")\n\n    def test_check_consistent_length(self):\n        # Testing that all arrays have consistent first dimensions\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([0, 1])\n        validation.check_consistent_length(X, y)\n\n    def test_assert_all_finite(self):\n        # Testing that X contains NaN or infinity\n        X = np.array([[1, 2], [3, np.nan]])\n        with self.assertRaises(ValueError):\n            validation.assert_all_finite(X)\n\n    def test_check_memory(self):\n        # Testing that 'memory' is joblib.Memory-like\n        memory = validation.check_memory(None)\n        self.assertIsNotNone(memory)\n\n    def test_check_non_negative(self):\n        # Testing that there is no negative value in an array\n        X = np.array([[1, 2], [3, -4]])\n        with self.assertRaises(ValueError):\n            validation.check_non_negative(X, \"Test\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_181": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.db.models.sql.query import Query, JoinPromoter\n\nclass TestQueryMethods(unittest.TestCase):\n\n    def setUp(self):\n        self.query = Query(MagicMock())\n\n    def test_add_filter(self):\n        self.query.add_filter(('field__exact', 'value'))\n        self.assertEqual(self.query.where.children[0].children[0].rhs, 'value')\n\n    def test_add_q(self):\n        q_object = MagicMock()\n        q_object.connector = 'AND'\n        q_object.negated = False\n        q_object.children = [('field__exact', 'value')]\n        self.query._add_q(q_object, set())\n        self.assertEqual(self.query.where.children[0].children[0].rhs, 'value')\n\n    def test_join_promoter_add_votes(self):\n        join_promoter = JoinPromoter('AND', 1, False)\n        join_promoter.add_votes(['table1', 'table2'])\n        self.assertEqual(join_promoter.votes['table1'], 1)\n        self.assertEqual(join_promoter.votes['table2'], 1)\n\n    def test_join_promoter_update_join_types(self):\n        join_promoter = JoinPromoter('AND', 2, False)\n        join_promoter.add_votes(['table1', 'table1'])\n        query = MagicMock()\n        join_promoter.update_join_types(query)\n        query.demote_joins.assert_called_with({'table1'})\n"], "sample_929": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom typing import Any, TypeVar, Union, Callable, Tuple, Optional, Generator\nfrom docutils import nodes\nfrom docutils.parsers.rst.states import Inliner\nfrom sphinx.util.typing import stringify, is_system_TypeVar, DirectiveOption, TextlikeNode, NoneType, PathMatcher, RoleFunction, TitleGetter, Inventory\n\nclass TestTyping(unittest.TestCase):\n\n    def test_stringify(self):\n        self.assertEqual(stringify('str'), 'str')\n        self.assertEqual(stringify(TypeVar('T')), 'T')\n        self.assertEqual(stringify(None), 'None')\n        self.assertEqual(stringify(Ellipsis), '...')\n\n    def test_is_system_TypeVar(self):\n        self.assertTrue(is_system_TypeVar(TypeVar('T')))\n\n    # Add more tests for other functions in sphinx.util.typing.py as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_617": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nimport numpy as np\nimport xarray as xr\nfrom xarray.core.computation import (\n    _UFuncSignature,\n    apply_ufunc,\n    broadcast_compat_data,\n    collect_dict_values,\n    join_dict_keys,\n    ordered_set_intersection,\n    ordered_set_union,\n    result_name,\n    unified_dim_sizes,\n    _first_of_type,\n    _all_of_type,\n    apply_dataarray_vfunc,\n    apply_dict_of_variables_vfunc,\n    apply_dataset_vfunc,\n    apply_groupby_func,\n    apply_variable_ufunc,\n    apply_array_ufunc,\n    cov,\n    corr,\n    _cov_corr,\n    cross,\n    dot,\n    where,\n    polyval,\n    _ensure_numeric,\n    _calc_idxminmax,\n    unify_chunks,\n)\n\nclass TestComputation(unittest.TestCase):\n    def setUp(self):\n        self.da = xr.DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'))\n        self.var = self.da.variable\n        self.np_array = np.array([1, 2, 3])\n        self.scalar = 5\n        self.func = lambda x, y: x + y\n\n    def test_UFuncSignature(self):\n        signature = _UFuncSignature([['x'], ['y']], [['z']])\n        self.assertEqual(str(signature), '(x),(y)->(z)')\n\n    def test_result_name(self):\n        self.assertEqual(result_name([self.da, self.da]), 'dim_0')\n\n    def test_ordered_set_union(self):\n        self.assertEqual(ordered_set_union([['a', 'b'], ['b', 'c']]), ['a', 'b', 'c'])\n\n    def test_ordered_set_intersection(self):\n        self.assertEqual(ordered_set_intersection([['a', 'b'], ['b', 'c']]), ['b'])\n\n    def test_join_dict_keys(self):\n        self.assertEqual(join_dict_keys([{'a': 1, 'b': 2}, {'b': 3, 'c': 4}], how='inner'), ['b'])\n\n    def test_collect_dict_values(self):\n        self.assertEqual(collect_dict_values([{'a': 1, 'b': 2}, {'b': 3, 'c': 4}, 5], ['a', 'b'], fill_value=None),\n                         [[1, 2, None], [None, 3, 5]])\n\n    def test_unified_dim_sizes(self):\n        self.assertEqual(unified_dim_sizes([self.var, self.var]), {'x': 2, 'y': 3})\n\n    def test_broadcast_compat_data(self):\n        self.assertTrue(np.array_equal(broadcast_compat_data(self.var, ('z',), ('x', 'y')), self.da.data))\n\n    def test_apply_ufunc(self):\n        result = apply_ufunc(self.func, self.da, self.da)\n        self.assertTrue(np.array_equal(result.data, self.da.data + self.da.data))\n\n    def test_apply_variable_ufunc(self):\n        result = apply_variable_ufunc(self.func, self.var, self.var, signature=_UFuncSignature([['x'], ['x']], [['x']]))\n        self.assertTrue(np.array_equal(result.data, self.da.data + self.da.data))\n\n    # Add more tests for other functions...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_425": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.db.migrations.serializer import *\n\nclass TestBaseSerializer(unittest.TestCase):\n    def test_serialize_method_not_implemented(self):\n        serializer = BaseSerializer('test')\n        with self.assertRaises(NotImplementedError):\n            serializer.serialize()\n\nclass TestBaseSequenceSerializer(unittest.TestCase):\n    def test_serialize_method_not_implemented(self):\n        serializer = BaseSequenceSerializer(['test'])\n        with self.assertRaises(NotImplementedError):\n            serializer._format()\n        # Testing serialize method\n        serializer_factory = Mock()\n        serializer_factory.return_value = BaseSimpleSerializer('test')\n        result = serializer.serialize()\n        self.assertEqual(result[0], '[test]')\n        self.assertEqual(result[1], set())\n\n# Add more test classes for the remaining serializers as per the coverage required.\n"], "sample_650": ["\nimport pytest\nimport os\nimport sys\nfrom io import StringIO\nfrom unittest.mock import patch, Mock\nfrom _pytest.capture import CaptureManager, CaptureFixture, SysCapture, FDCapture, MultiCapture\n\ndef test_capture_manager_init():\n    capture_manager = CaptureManager(\"fd\")\n    assert capture_manager._method == \"fd\"\n    assert capture_manager._global_capturing is None\n    assert capture_manager._current_item is None\n\n@pytest.fixture\ndef mock_config():\n    mock_config = Mock()\n    mock_pluginmanager = Mock()\n    mock_pluginmanager.getplugin.return_value = Mock()\n    mock_config.pluginmanager = mock_pluginmanager\n    return mock_config\n\n@pytest.fixture\ndef mock_request(mock_config):\n    mock_request = Mock()\n    mock_request.config = mock_config\n    return mock_request\n\ndef test_capture_fixture_init(mock_request):\n    capture_fixture = CaptureFixture(SysCapture, mock_request)\n    assert capture_fixture.captureclass == SysCapture\n    assert capture_fixture.request == mock_request\n    assert capture_fixture._capture is None\n    assert capture_fixture._captured_out == \"\"\n    assert capture_fixture._captured_err == \"\"\n\ndef test_capture_fixture_start(mock_request):\n    capture_fixture = CaptureFixture(SysCapture, mock_request)\n    capture_fixture._start()\n    assert capture_fixture._capture is not None\n    assert isinstance(capture_fixture._capture, MultiCapture)\n    assert isinstance(capture_fixture._capture.out, SysCapture)\n    assert isinstance(capture_fixture._capture.err, SysCapture)\n    assert capture_fixture._capture.in_ is None\n\ndef test_capture_fixture_close(mock_request):\n    capture_fixture = CaptureFixture(SysCapture, mock_request)\n    capture_fixture._start()\n    with patch(\"sys.stdout\", new_callable=StringIO) as mock_stdout:\n        mock_stdout.write(\"test\")\n        capture_fixture.close()\n    assert \"test\" in capture_fixture._captured_out\n    assert capture_fixture._capture is None\n\ndef test_capture_fixture_readouterr(mock_request):\n    capture_fixture = CaptureFixture(SysCapture, mock_request)\n    capture_fixture._start()\n    with patch(\"sys.stdout\", new_callable=StringIO) as mock_stdout:\n        mock_stdout.write(\"test\")\n        result = capture_fixture.readouterr()\n    assert result.out == \"test\"\n    assert result.err == \"\"\n    assert capture_fixture._captured_out == \"\"\n    assert capture_fixture._captured_err == \"\"\n\ndef test_capture_fixture_disabled(mock_request):\n    capture_fixture = CaptureFixture(SysCapture, mock_request)\n    with capture_fixture.disabled():\n        assert mock_request.config.pluginmanager.getplugin().global_and_fixture_disabled.called\n\n# Similarly, you can write tests for FDCapture, MultiCapture, etc.\n"], "sample_400": ["\nimport unittest\nfrom unittest.mock import Mock\n\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.state import ProjectState\n\nclass TestMigrationAutodetector(unittest.TestCase):\n    def setUp(self):\n        self.from_state = ProjectState()\n        self.to_state = ProjectState()\n        self.questioner = Mock()\n        self.autodetector = MigrationAutodetector(\n            self.from_state, self.to_state, self.questioner\n        )\n\n    def test_changes(self):\n        graph = {}\n        trim_to_apps = None\n        convert_apps = None\n        migration_name = None\n        changes = self.autodetector.changes(\n            graph, trim_to_apps, convert_apps, migration_name\n        )\n        self.assertEqual(changes, {})\n\n    def test_deep_deconstruct(self):\n        obj = {\"key\": \"value\"}\n        result = self.autodetector.deep_deconstruct(obj)\n        self.assertEqual(result, {\"key\": \"value\"})\n\n    # Add more tests for other methods...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_816": ["\nimport unittest\nfrom sklearn.feature_extraction.text import strip_tags, strip_accents_unicode, strip_accents_ascii, HashingVectorizer, CountVectorizer, TfidfTransformer, TfidfVectorizer, ENGLISH_STOP_WORDS\n\nclass TestTextModule(unittest.TestCase):\n    def test_strip_tags(self):\n        text = \"<p>This is a <b>sample</b> text with <i>tags</i>.</p>\"\n        stripped_text = strip_tags(text)\n        self.assertEqual(stripped_text, \"This is a sample text with tags.\")\n\n    def test_strip_accents_unicode(self):\n        text = \"r\u00e9sum\u00e9\"\n        stripped_text = strip_accents_unicode(text)\n        self.assertEqual(stripped_text, \"resume\")\n\n    def test_strip_accents_ascii(self):\n        text = \"r\u00e9sum\u00e9\"\n        stripped_text = strip_accents_ascii(text)\n        self.assertEqual(stripped_text, \"resume\")\n\n    def test_hashing_vectorizer(self):\n        corpus = [\n            'This is the first document.',\n            'This document is the second document.',\n            'And this is the third one.',\n            'Is this the first document?',\n        ]\n        vectorizer = HashingVectorizer(n_features=2**4)\n        X = vectorizer.fit_transform(corpus)\n        self.assertEqual(X.shape, (4, 16))\n\n    def test_count_vectorizer(self):\n        corpus = [\n            'This is the first document.',\n            'This document is the second document.',\n            'And this is the third one.',\n            'Is this the first document?',\n        ]\n        vectorizer = CountVectorizer()\n        X = vectorizer.fit_transform(corpus)\n        self.assertEqual(vectorizer.get_feature_names(),\n                         ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this'])\n\n    def test_tfidf_transformer(self):\n        from sklearn.datasets import fetch_20newsgroups\n        from sklearn.feature_extraction.text import CountVectorizer\n        from sklearn.feature_extraction.text import TfidfTransformer\n\n        categories = ['alt.atheism', 'talk.religion.misc', 'comp.graphics', 'sci.space']\n        newsgroups_train = fetch_20newsgroups(subset='train', categories=categories)\n\n        count_vect = CountVectorizer()\n        X_train_counts = count_vect.fit_transform(newsgroups_train.data)\n\n        tfidf_transformer = TfidfTransformer(use_idf=False)\n        X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)\n        self.assertEqual(X_train_tfidf.shape, X_train_counts.shape)\n\n    def test_tfidf_vectorizer(self):\n        corpus = [\n            'This is the first document.',\n            'This document is the second document.',\n            'And this is the third one.',\n            'Is this the first document?',\n        ]\n        vectorizer = TfidfVectorizer()\n        X = vectorizer.fit_transform(corpus)\n        self.assertEqual(vectorizer.get_feature_names(),\n                         ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this'])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_110": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.http import HttpRequest\nfrom django.contrib.admin import site\nfrom django.contrib.auth.models import User\nfrom django.contrib.admin.views.main import ChangeList\n\nclass TestChangeList(unittest.TestCase):\n    def setUp(self):\n        self.request = HttpRequest()\n        self.model_admin = site._registry[User]\n        self.model = User\n        self.list_display = ['username', 'email', 'is_staff', 'is_active']\n        self.list_display_links = ['username', 'email']\n        self.list_filter = ['is_staff', 'is_active']\n        self.date_hierarchy = None\n        self.search_fields = ['username', 'email']\n        self.list_select_related = True\n        self.list_per_page = 100\n        self.list_max_show_all = 200\n        self.list_editable = ['is_staff']\n        self.sortable_by = []\n\n    def test_init(self):\n        change_list = ChangeList(self.request, self.model, self.list_display, self.list_display_links,\n                                 self.list_filter, self.date_hierarchy, self.search_fields,\n                                 self.list_select_related, self.list_per_page, self.list_max_show_all,\n                                 self.list_editable, self.model_admin, self.sortable_by)\n        self.assertEqual(change_list.model, self.model)\n        self.assertEqual(change_list.opts, self.model._meta)\n        self.assertEqual(change_list.lookup_opts, self.model._meta)\n        # Add more assertions as needed\n\n    # Add more test methods for other methods in the ChangeList class\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_950": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom inspect import Parameter, signature\nfrom sphinx.util import inspect\nfrom sphinx.util.inspect import (TypeAliasNamespace, stringify_signature, signature_from_str,\n                                 signature_from_ast, getdoc, ispartial, isfunction, isbuiltin,\n                                 isroutine, iscoroutinefunction, isproperty, isgenericalias,\n                                 safe_getattr, object_description, is_builtin_class_method)\n\nclass TestInspect(unittest.TestCase):\n    def setUp(self):\n        # Set up any common test data here\n        pass\n\n    def test_getargspec(self):\n        def func(a, b=1, *args, c=2, d, **kwargs):\n            pass\n\n        spec = inspect.getargspec(func)\n        self.assertEqual(spec.args, ['a', 'b'])\n        self.assertEqual(spec.defaults, (1,))\n        self.assertEqual(spec.varargs, 'args')\n        self.assertEqual(spec.kwonlyargs, ['c', 'd'])\n        self.assertEqual(spec.kwonlydefaults, {'c': 2})\n        self.assertEqual(spec.varkw, 'kwargs')\n\n    def test_unwrapped(self):\n        def func():\n            pass\n\n        wrapped = MagicMock(wraps=func)\n        self.assertEqual(inspect.unwrapped(wrapped), func)\n\n    def test_unwrap_all(self):\n        def func():\n            pass\n\n        wrapped = MagicMock(wraps=func)\n        self.assertEqual(inspect.unwrap_all(wrapped), func)\n\n    def test_ispartial(self):\n        def func():\n            pass\n\n        self.assertFalse(ispartial(func))\n        self.assertTrue(ispartial(patch('os.path.exists')()))\n\n    def test_isfunction(self):\n        def func():\n            pass\n\n        self.assertTrue(isfunction(func))\n        self.assertFalse(isfunction(123))\n\n    def test_isbuiltin(self):\n        self.assertTrue(isbuiltin(len))\n        self.assertFalse(isbuiltin(123))\n\n    def test_isroutine(self):\n        def func():\n            pass\n\n        class Test:\n            def method(self):\n                pass\n\n        self.assertTrue(isroutine(func))\n        self.assertTrue(isroutine(Test().method))\n        self.assertFalse(isroutine(123))\n\n    def test_iscoroutinefunction(self):\n        async def coro_func():\n            pass\n\n        def func():\n            pass\n\n        self.assertTrue(iscoroutinefunction(coro_func))\n        self.assertFalse(iscoroutinefunction(func))\n\n    def test_isproperty(self):\n        class Test:\n            @property\n            def prop(self):\n                pass\n\n        self.assertTrue(isproperty(Test.prop))\n        self.assertFalse(isproperty(123))\n\n    def test_isgenericalias(self):\n        self.assertTrue(isgenericalias(type('T', (), {})))\n        self.assertFalse(isgenericalias(123))\n\n    def test_safe_getattr(self):\n        class Test:\n            attr = 'value'\n\n        self.assertEqual(safe_getattr(Test(), 'attr'), 'value')\n        self.assertIsNone(safe_getattr(Test(), 'nonexistent'))\n\n    def test_object_description(self):\n        self.assertEqual(object_description(123), '123')\n        self.assertEqual(object_description({'a': 1, 'b': 2}), \"{1: 2, 2: 1}\")\n\n    def test_is_builtin_class_method(self):\n        self.assertTrue(is_builtin_class_method(int, '__init__'))\n        self.assertFalse(is_builtin_class_method(int, '__non_existent__'))\n\n    def test_signature(self):\n        def func(a: int, b: str = 'default') -> bool:\n            pass\n\n        sig = inspect.signature(func)\n        self.assertEqual(str(sig), '(a: int, b: str = \\'default\\') -> bool')\n\n    def test_stringify_signature(self):\n        def func(a: int, b: str = 'default') -> bool:\n            pass\n\n        sig = inspect.signature(func)\n        self.assertEqual(stringify_signature(sig), '(a: int, b: str = \\'default\\') -> bool')\n\n    def test_signature_from_str(self):\n        sig = signature_from_str('(a: int, b: str = \\'default\\') -> bool')\n        self.assertEqual(str(sig), '(a: int, b: str = \\'default\\') -> bool')\n\n    def test_signature_from_ast(self):\n        def func(a: int, b: str = 'default') -> bool:\n            pass\n\n        ast_func = compile(inspect.getsource(func), '<string>', 'exec', flags=ast.PyCF_ONLY_AST)\n        sig = signature_from_ast(ast_func.body[0])\n        self.assertEqual(str(sig), '(a: int, b: str = \\'default\\') -> bool')\n\n    def test_getdoc(self):\n        def func():\n            \"\"\"Test docstring\"\"\"\n            pass\n\n        self.assertEqual(getdoc(func), \"Test docstring\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_785": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing import KBinsDiscretizer\n\nclass TestKBinsDiscretizer(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[-2, 1, -4,   -1],\n                           [-1, 2, -3, -0.5],\n                           [ 0, 3, -2,  0.5],\n                           [ 1, 4, -1,    2]])\n\n    def test_fit(self):\n        est = KBinsDiscretizer(n_bins=3, encode='ordinal', strategy='uniform')\n        est.fit(self.X)\n        self.assertEqual(est.n_bins_.tolist(), [3, 3, 3, 3])\n\n    def test_transform(self):\n        est = KBinsDiscretizer(n_bins=3, encode='ordinal', strategy='uniform')\n        est.fit(self.X)\n        Xt = est.transform(self.X)\n        self.assertTrue(np.all(Xt >= 0) and np.all(Xt < 3))\n\n    def test_inverse_transform(self):\n        est = KBinsDiscretizer(n_bins=3, encode='ordinal', strategy='uniform')\n        est.fit(self.X)\n        Xt = est.transform(self.X)\n        Xinv = est.inverse_transform(Xt)\n        self.assertTrue(np.allclose(Xinv, self.X, atol=1e-3))\n\n    def test_invalid_encode(self):\n        with self.assertRaises(ValueError):\n            est = KBinsDiscretizer(encode='invalid')\n\n    def test_invalid_strategy(self):\n        with self.assertRaises(ValueError):\n            est = KBinsDiscretizer(strategy='invalid')\n\n    def test_invalid_n_bins(self):\n        with self.assertRaises(ValueError):\n            est = KBinsDiscretizer(n_bins=1)\n\n    def test_constant_feature(self):\n        X = np.zeros((10, 1))\n        est = KBinsDiscretizer(n_bins=3)\n        with self.assertWarns(UserWarning):\n            est.fit(X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1081": ["\nimport unittest\nfrom sympy import Integer, Rational\nfrom sympy.ntheory.factor_ import factorint, factorrat, primefactors, divisors, divisor_sigma, divisor_count, reduced_totient, totient, core, digits, udivisors, udivisor_sigma, udivisor_count, primenu, primeomega, mersenne_prime_exponent, is_perfect, is_mersenne_prime, is_abundant, is_deficient, is_amicable\n\nclass TestFactorFunctions(unittest.TestCase):\n\n    def test_factorint(self):\n        self.assertEqual(factorint(2000), {2: 4, 5: 3})\n        self.assertEqual(factorint(65537), {65537: 1})\n        self.assertEqual(factorint(-36), {-1: 1, 2: 2, 3: 2})\n        self.assertEqual(factorint(0), {0: 1})\n\n    def test_factorrat(self):\n        self.assertEqual(factorrat(Rational(8, 9)), {2: 3, 3: -2})\n        self.assertEqual(factorrat(Rational(-1, 987)), {-1: 1, 3: -1, 7: -1, 47: -1})\n\n    def test_primefactors(self):\n        self.assertEqual(primefactors(6), [2, 3])\n        self.assertEqual(primefactors(-5), [5])\n\n    def test_divisors(self):\n        self.assertEqual(divisors(24), [1, 2, 3, 4, 6, 8, 12, 24])\n        self.assertEqual(divisor_count(24), 8)\n\n    def test_divisor_sigma(self):\n        self.assertEqual(divisor_sigma(18, 0), 6)\n        self.assertEqual(divisor_sigma(39, 1), 56)\n        self.assertEqual(divisor_sigma(12, 2), 210)\n        self.assertEqual(divisor_sigma(37), 38)\n\n    def test_reduced_totient(self):\n        self.assertEqual(reduced_totient(1), 1)\n        self.assertEqual(reduced_totient(8), 2)\n        self.assertEqual(reduced_totient(30), 4)\n\n    def test_totient(self):\n        self.assertEqual(totient(1), 1)\n        self.assertEqual(totient(25), 20)\n\n    def test_core(self):\n        self.assertEqual(core(24, 2), 6)\n        self.assertEqual(core(9424, 3), 1178)\n        self.assertEqual(core(379238), 379238)\n        self.assertEqual(core(15**11, 10), 15)\n\n    def test_digits(self):\n        self.assertEqual(digits(35), [10, 3, 5])\n        self.assertEqual(digits(27, 2), [2, 1, 1, 0, 1, 1])\n        self.assertEqual(digits(65536, 256), [256, 1, 0, 0])\n        self.assertEqual(digits(-3958, 27), [-27, 5, 11, 16])\n\n    def test_udivisor_sigma(self):\n        self.assertEqual(udivisor_sigma(18, 0), 4)\n        self.assertEqual(udivisor_sigma(74, 1), 114)\n        self.assertEqual(udivisor_sigma(36, 3), 47450)\n        self.assertEqual(udivisor_sigma(111), 152)\n\n    def test_primenu(self):\n        self.assertEqual(primenu(1), 0)\n        self.assertEqual(primenu(30), 3)\n\n    def test_primeomega(self):\n        self.assertEqual(primeomega(1), 0)\n        self.assertEqual(primeomega(20), 3)\n\n    def test_mersenne_prime_exponent(self):\n        self.assertEqual(mersenne_prime_exponent(1), 2)\n        self.assertEqual(mersenne_prime_exponent(20), 4423)\n\n    def test_is_perfect(self):\n        self.assertFalse(is_perfect(20))\n        self.assertTrue(is_perfect(6))\n\n    def test_is_mersenne_prime(self):\n        self.assertFalse(is_mersenne_prime(6))\n        self.assertTrue(is_mersenne_prime(127))\n\n    def test_is_abundant(self):\n        self.assertTrue(is_abundant(20))\n        self.assertFalse(is_abundant(15))\n\n    def test_is_deficient(self):\n        self.assertFalse(is_deficient(20))\n        self.assertTrue(is_deficient(15))\n\n    def test_is_amicable(self):\n        self.assertTrue(is_amicable(220, 284))\n        self.assertFalse(is_amicable(220, 220))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_771": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.logistic import LogisticRegression, LogisticRegressionCV\n\nclass TestLogisticRegression(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[0, 0], [1, 1], [2, 2]])\n        self.y = np.array([0, 1, 1])\n\n    def test_logistic_regression_fit(self):\n        model = LogisticRegression()\n        model.fit(self.X, self.y)\n        self.assertIsInstance(model.coef_, np.ndarray)\n        self.assertIsInstance(model.intercept_, np.ndarray)\n\n    def test_logistic_regression_cv_fit(self):\n        model = LogisticRegressionCV()\n        model.fit(self.X, self.y)\n        self.assertIsInstance(model.Cs_, np.ndarray)\n        self.assertIsInstance(model.coef_, np.ndarray)\n        self.assertIsInstance(model.intercept_, np.ndarray)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_827": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics.pairwise import euclidean_distances, manhattan_distances, haversine_distances, pairwise_distances, pairwise_kernels\n\nclass TestPairwiseMetrics(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[0, 1], [1, 1]])\n        self.Y = np.array([[0, 1], [2, 1]])\n\n    def test_euclidean_distances(self):\n        result = euclidean_distances(self.X, self.Y)\n        expected = np.array([[0., 1.], [1., np.sqrt(2)]])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_manhattan_distances(self):\n        result = manhattan_distances(self.X, self.Y)\n        expected = np.array([[0., 1.], [2., 2.]])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_haversine_distances(self):\n        X_haversine = np.array([[0, np.deg2rad(0)], [np.deg2rad(45), np.deg2rad(45)]])\n        Y_haversine = np.array([[np.deg2rad(45), np.deg2rad(45)], [np.deg2rad(90), np.deg2rad(0)]])\n        result = haversine_distances(X_haversine, Y_haversine)\n        expected = np.array([[57.29577951, 59.62773255], [57.29577951, 57.29577951]])\n        np.testing.assert_array_almost_equal(result, expected, decimal=4)\n\n    def test_pairwise_distances(self):\n        result = pairwise_distances(self.X, self.Y, metric='euclidean')\n        expected = np.array([[0., 1.], [1., np.sqrt(2)]])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_pairwise_kernels(self):\n        result = pairwise_kernels(self.X, self.Y, metric='linear')\n        expected = np.array([[2., 2.], [2., 3.]])\n        np.testing.assert_array_almost_equal(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_202": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.contrib.messages.storage.cookie import CookieStorage, MessageDecoder, MessageEncoder\nfrom django.contrib.messages.storage.base import Message\nfrom django.utils.safestring import SafeData\n\nclass TestMessageEncoder(unittest.TestCase):\n    def setUp(self):\n        self.encoder = MessageEncoder()\n\n    def test_default_with_message(self):\n        msg = Message('test message')\n        result = self.encoder.default(msg)\n        self.assertEqual(result, ['__json_message', 0, msg.level, 'test message'])\n\n    def test_default_with_safedata(self):\n        msg = Message(SafeData('safe data'))\n        result = self.encoder.default(msg)\n        self.assertEqual(result, ['__json_message', 1, msg.level, 'safe data'])\n\n    def test_default_with_extra_tags(self):\n        msg = Message('test message', extra_tags='extra')\n        result = self.encoder.default(msg)\n        self.assertEqual(result, ['__json_message', 0, msg.level, 'test message', 'extra'])\n\n    def test_default_with_non_message(self):\n        result = self.encoder.default('non message')\n        self.assertEqual(result, 'non message')\n\nclass TestMessageDecoder(unittest.TestCase):\n    def setUp(self):\n        self.decoder = MessageDecoder()\n\n    def test_process_messages_with_message(self):\n        data = ['__json_message', 0, 'info', 'test message']\n        result = self.decoder.process_messages(data)\n        self.assertIsInstance(result, Message)\n        self.assertEqual(result.level, 'info')\n        self.assertEqual(result.message, 'test message')\n\n    def test_process_messages_with_safedata(self):\n        data = ['__json_message', 1, 'info', 'safe data']\n        result = self.decoder.process_messages(data)\n        self.assertIsInstance(result, Message)\n        self.assertIsInstance(result.message, SafeData)\n\n    def test_process_messages_with_extra_tags(self):\n        data = ['__json_message', 0, 'info', 'test message', 'extra']\n        result = self.decoder.process_messages(data)\n        self.assertIsInstance(result, Message)\n        self.assertEqual(result.extra_tags, 'extra')\n\n    def test_process_messages_with_non_message(self):\n        data = 'non message'\n        result = self.decoder.process_messages(data)\n        self.assertEqual(result, 'non message')\n\nclass TestCookieStorage(unittest.TestCase):\n    def setUp(self):\n        self.storage = CookieStorage()\n        self.storage.request = MagicMock()\n        self.storage.request.COOKIES = {}\n\n    # Add more tests for CookieStorage methods\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_806": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, cohen_kappa_score, confusion_matrix, jaccard_score, matthews_corrcoef, zero_one_loss, f1_score, fbeta_score, precision_recall_fscore_support, precision_score, recall_score, balanced_accuracy_score, classification_report, hamming_loss, log_loss, hinge_loss, brier_score_loss, multilabel_confusion_matrix\n\nclass TestClassificationMetrics(unittest.TestCase):\n\n    def setUp(self):\n        self.y_true = np.array([0, 1, 2, 0, 1, 2])\n        self.y_pred = np.array([0, 2, 1, 0, 0, 1])\n\n    def test_accuracy_score(self):\n        self.assertEqual(accuracy_score(self.y_true, self.y_pred), 0.4)\n\n    def test_cohen_kappa_score(self):\n        self.assertAlmostEqual(cohen_kappa_score(self.y_true, self.y_pred), 0.0, places=2)\n\n    def test_confusion_matrix(self):\n        expected_matrix = np.array([[2, 0, 0], [0, 1, 1], [1, 0, 1]])\n        self.assertTrue(np.array_equal(confusion_matrix(self.y_true, self.y_pred), expected_matrix))\n\n    def test_jaccard_score(self):\n        self.assertAlmostEqual(jaccard_score(self.y_true, self.y_pred, average='macro'), 0.22, places=2)\n\n    def test_matthews_corrcoef(self):\n        self.assertAlmostEqual(matthews_corrcoef(self.y_true, self.y_pred), 0.0, places=2)\n\n    def test_zero_one_loss(self):\n        self.assertEqual(zero_one_loss(self.y_true, self.y_pred), 0.6)\n\n    def test_f1_score(self):\n        self.assertAlmostEqual(f1_score(self.y_true, self.y_pred, average='macro'), 0.22, places=2)\n\n    def test_fbeta_score(self):\n        self.assertAlmostEqual(fbeta_score(self.y_true, self.y_pred, beta=0.5, average='macro'), 0.24, places=2)\n\n    def test_precision_recall_fscore_support(self):\n        p, r, f, _ = precision_recall_fscore_support(self.y_true, self.y_pred, average='macro')\n        self.assertAlmostEqual(p, 0.22, places=2)\n        self.assertAlmostEqual(r, 0.33, places=2)\n        self.assertAlmostEqual(f, 0.26, places=2)\n\n    def test_precision_score(self):\n        self.assertAlmostEqual(precision_score(self.y_true, self.y_pred, average='macro'), 0.22, places=2)\n\n    def test_recall_score(self):\n        self.assertAlmostEqual(recall_score(self.y_true, self.y_pred, average='macro'), 0.33, places=2)\n\n    def test_balanced_accuracy_score(self):\n        self.assertAlmostEqual(balanced_accuracy_score(self.y_true, self.y_pred), 0.33, places=2)\n\n    def test_classification_report(self):\n        report = classification_report(self.y_true, self.y_pred, output_dict=True)\n        self.assertAlmostEqual(report['macro avg']['precision'], 0.22, places=2)\n        self.assertAlmostEqual(report['macro avg']['recall'], 0.33, places=2)\n        self.assertAlmostEqual(report['macro avg']['f1-score'], 0.26, places=2)\n\n    def test_hamming_loss(self):\n        self.assertAlmostEqual(hamming_loss(self.y_true, self.y_pred), 0.55, places=2)\n\n    def test_log_loss(self):\n        y_prob = np.array([[0.6, 0.4, 0.0], [0.1, 0.6, 0.3], [0.3, 0.4, 0.3], [0.2, 0.5, 0.3], [0.5, 0.2, 0.3], [0.3, 0.4, 0.3]])\n        self.assertAlmostEqual(log_loss(self.y_true, y_prob), 1.06, places=2)\n\n    def test_hinge_loss(self):\n        pred_decision = np.array([-1.5, 2.1, -0.7, 0.8, 1.3, -0.5])\n        self.assertAlmostEqual(hinge_loss(self.y_true, pred_decision), 1.36, places=2)\n\n    def test_brier_score_loss(self):\n        y_prob = np.array([0.1, 0.9, 0.8, 0.3, 0.6, 0.4])\n        self.assertAlmostEqual(brier_score_loss(self.y_true, y_prob), 0.37, places=2)\n\n    def test_multilabel_confusion_matrix(self):\n        y_true_multilabel = np.array([[1, 0, 1], [0, 1, 0]])\n        y_pred_multilabel = np.array([[1, 0, 0], [0, 1, 1]])\n        expected_matrix = np.array([[[1, 0], [0, 1]], [[1, 0], [0, 1]], [[0, 1], [1, 0]]])\n        self.assertTrue(np.array_equal(multilabel_confusion_matrix(y_true_multilabel, y_pred_multilabel), expected_matrix))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_63": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.http import HttpRequest, HttpResponseRedirect\nfrom django.test import RequestFactory\nfrom django.views.i18n import set_language, get_formats, JavaScriptCatalog\n\nclass TestI18nViews(unittest.TestCase):\n\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_set_language_get_request(self):\n        request = self.factory.get('/', {'next': '/test-url/', 'language': 'en'})\n        response = set_language(request)\n        self.assertIsInstance(response, HttpResponseRedirect)\n        self.assertEqual(response.url, '/test-url/')\n\n    def test_set_language_post_request(self):\n        request = self.factory.post('/', {'next': '/test-url/', 'language': 'es'})\n        request.session = {}\n        response = set_language(request)\n        self.assertIsInstance(response, HttpResponseRedirect)\n        self.assertEqual(response.url, '/es/test-url/')\n        self.assertEqual(request.session['_language'], 'es')\n\n    def test_get_formats(self):\n        formats = get_formats()\n        self.assertIsInstance(formats, dict)\n        self.assertTrue('DATE_FORMAT' in formats)\n\n    @patch('django.views.i18n.DjangoTranslation')\n    def test_javascript_catalog(self, mock_translation):\n        mock_translation_obj = MagicMock()\n        mock_translation_obj._catalog = {'key1': 'value1'}\n        mock_translation_obj._fallback = None\n        mock_translation.return_value = mock_translation_obj\n        request = self.factory.get('/')\n        response = JavaScriptCatalog.as_view()(request)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'text/javascript; charset=\"utf-8\"')\n        self.assertIn(b'\"key1\": \"value1\"', response.content)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_807": ["\nimport unittest\nimport numpy as np\nfrom sklearn.ensemble.gradient_boosting import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.datasets import make_classification, make_regression\nfrom sklearn.model_selection import train_test_split\n\nclass TestGradientBoosting(unittest.TestCase):\n    def setUp(self):\n        self.X_clf, self.y_clf = make_classification(n_samples=100, n_features=20, n_informative=2, random_state=42)\n        self.X_reg, self.y_reg = make_regression(n_samples=100, n_features=20, random_state=42)\n\n    def test_gradient_boosting_classifier(self):\n        clf = GradientBoostingClassifier(n_estimators=10, random_state=42)\n        clf.fit(self.X_clf, self.y_clf)\n        self.assertIsNotNone(clf.feature_importances_)\n        self.assertIsNotNone(clf.predict(self.X_clf))\n        self.assertIsNotNone(clf.predict_proba(self.X_clf))\n        self.assertIsNotNone(clf.predict_log_proba(self.X_clf))\n\n    def test_gradient_boosting_regressor(self):\n        reg = GradientBoostingRegressor(n_estimators=10, random_state=42)\n        reg.fit(self.X_reg, self.y_reg)\n        self.assertIsNotNone(reg.feature_importances_)\n        self.assertIsNotNone(reg.predict(self.X_reg))\n\n    def test_staged_predictions(self):\n        clf = GradientBoostingClassifier(n_estimators=10, random_state=42)\n        clf.fit(self.X_clf, self.y_clf)\n        staged_predictions = list(clf.staged_predict(self.X_clf))\n        self.assertEqual(len(staged_predictions), 10)\n        self.assertEqual(staged_predictions[-1].shape, (100,))\n\n    def test_early_stopping(self):\n        X_train, X_test, y_train, y_test = train_test_split(self.X_clf, self.y_clf, test_size=0.2, random_state=42)\n        clf = GradientBoostingClassifier(n_estimators=100, validation_fraction=0.1, n_iter_no_change=5, random_state=42)\n        clf.fit(X_train, y_train)\n        self.assertLess(clf.n_estimators_, 100)\n\n    def test_warm_start(self):\n        clf = GradientBoostingClassifier(n_estimators=10, random_state=42, warm_start=True)\n        clf.fit(self.X_clf, self.y_clf)\n        clf.n_estimators += 10\n        clf.fit(self.X_clf, self.y_clf)\n        self.assertEqual(clf.n_estimators, 20)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_547": ["\nimport unittest\nfrom matplotlib.offsetbox import (\n    AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea,\n    HPacker, OffsetBox, OffsetImage, PaddedBox, TextArea, VPacker,\n    _get_packed_offsets\n)\nimport matplotlib.pyplot as plt\nimport matplotlib.text as mtext\nfrom matplotlib.transforms import Bbox\n\nclass TestOffsetBox(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n\n    def test_offsetbox_init(self):\n        ob = OffsetBox()\n        self.assertIsInstance(ob, OffsetBox)\n\n    def test_offsetbox_set_figure(self):\n        ob = OffsetBox()\n        ob.set_figure(self.fig)\n        self.assertEqual(ob.figure, self.fig)\n\n    def test_offsetbox_set_offset(self):\n        ob = OffsetBox()\n        ob.set_offset((10, 10))\n        self.assertEqual(ob._offset, (10, 10))\n\n    def test_textarea_init(self):\n        ta = TextArea(\"Test\")\n        self.assertIsInstance(ta._text, mtext.Text)\n\n    def test_anchoredoffsetbox_init(self):\n        aob = AnchoredOffsetbox(loc=\"upper right\")\n        self.assertEqual(aob.loc, 1)\n\n    def test_get_packed_offsets(self):\n        widths = [1, 2, 3]\n        total, offsets = _get_packed_offsets(widths, None, 0, mode=\"fixed\")\n        self.assertEqual(total, 6)\n        self.assertEqual(offsets.tolist(), [0, 1, 4])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_275": ["\nfrom django.test import TestCase\nfrom django.db import models\nfrom django.db.models import QuerySet, EmptyQuerySet, RawQuerySet, Prefetch\nfrom django.db.models.query import prefetch_related_objects, get_prefetcher, prefetch_one_level\n\nclass TestQuerySet(TestCase):\n    def setUp(self):\n        class TestModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        self.queryset = QuerySet(model=TestModel)\n\n    def test_filter(self):\n        filtered_queryset = self.queryset.filter(name='test')\n        self.assertIsInstance(filtered_queryset, QuerySet)\n\n    def test_exclude(self):\n        excluded_queryset = self.queryset.exclude(name='test')\n        self.assertIsInstance(excluded_queryset, QuerySet)\n\n    def test_union(self):\n        qs1 = self.queryset.filter(name='test1')\n        qs2 = self.queryset.filter(name='test2')\n        union_queryset = qs1.union(qs2)\n        self.assertIsInstance(union_queryset, QuerySet)\n\n    def test_intersection(self):\n        qs1 = self.queryset.filter(name='test1')\n        qs2 = self.queryset.filter(name='test2')\n        intersection_queryset = qs1.intersection(qs2)\n        self.assertIsInstance(intersection_queryset, QuerySet)\n\n    def test_difference(self):\n        qs1 = self.queryset.filter(name='test1')\n        qs2 = self.queryset.filter(name='test2')\n        difference_queryset = qs1.difference(qs2)\n        self.assertIsInstance(difference_queryset, QuerySet)\n\n    def test_select_related(self):\n        related_queryset = self.queryset.select_related('name')\n        self.assertIsInstance(related_queryset, QuerySet)\n\n    def test_prefetch_related(self):\n        prefetch_queryset = self.queryset.prefetch_related('name')\n        self.assertIsInstance(prefetch_queryset, QuerySet)\n\n    def test_annotate(self):\n        annotated_queryset = self.queryset.annotate(name_length=models.Length('name'))\n        self.assertIsInstance(annotated_queryset, QuerySet)\n\n    def test_order_by(self):\n        ordered_queryset = self.queryset.order_by('name')\n        self.assertIsInstance(ordered_queryset, QuerySet)\n\n    def test_distinct(self):\n        distinct_queryset = self.queryset.distinct('name')\n        self.assertIsInstance(distinct_queryset, QuerySet)\n\n    def test_extra(self):\n        extra_queryset = self.queryset.extra(select={'name_upper': 'UPPER(name)'})\n        self.assertIsInstance(extra_queryset, QuerySet)\n\n    def test_reverse(self):\n        reversed_queryset = self.queryset.reverse()\n        self.assertIsInstance(reversed_queryset, QuerySet)\n\n    def test_defer(self):\n        deferred_queryset = self.queryset.defer('name')\n        self.assertIsInstance(deferred_queryset, QuerySet)\n\n    def test_only(self):\n        only_queryset = self.queryset.only('name')\n        self.assertIsInstance(only_queryset, QuerySet)\n\n    def test_using(self):\n        using_queryset = self.queryset.using('default')\n        self.assertIsInstance(using_queryset, QuerySet)\n\n    def test_values(self):\n        values_queryset = self.queryset.values('name')\n        self.assertIsInstance(values_queryset, QuerySet)\n\n    def test_values_list(self):\n        values_list_queryset = self.queryset.values_list('name', flat=True)\n        self.assertIsInstance(values_list_queryset, QuerySet)\n\n    def test_dates(self):\n        dates_queryset = self.queryset.dates('name', 'year')\n        self.assertIsInstance(dates_queryset, QuerySet)\n\n    def test_datetimes(self):\n        datetimes_queryset = self.queryset.datetimes('name', 'year')\n        self.assertIsInstance(datetimes_queryset, QuerySet)\n\n    def test_none(self):\n        none_queryset = self.queryset.none()\n        self.assertIsInstance(none_queryset, EmptyQuerySet)\n\n    def test_raw(self):\n        raw_queryset = self.queryset.raw('SELECT * FROM testmodel')\n        self.assertIsInstance(raw_queryset, RawQuerySet)\n\n    def test_get(self):\n        obj = TestModel.objects.create(name='test')\n        retrieved_obj = self.queryset.get(pk=obj.pk)\n        self.assertEqual(obj, retrieved_obj)\n\n    def test_create(self):\n        obj = self.queryset.create(name='test')\n        self.assertIsInstance(obj, TestModel)\n\n    def test_bulk_create(self):\n        objs = [TestModel(name='test1'), TestModel(name='test2')]\n        created_objs = self.queryset.bulk_create(objs)\n        self.assertEqual(len(created_objs), 2)\n\n    def test_bulk_update(self):\n        objs = [TestModel.objects.create(name='test1'), TestModel.objects.create(name='test2')]\n        self.queryset.bulk_update(objs, {'name': 'updated'})\n        updated_objs = TestModel.objects.all()\n        self.assertEqual(updated_objs[0].name, 'updated')\n        self.assertEqual(updated_objs[1].name, 'updated')\n\n    def test_get_or_create(self):\n        obj, created = self.queryset.get_or_create(name='test')\n        self.assertTrue(created)\n        self.assertIsInstance(obj, TestModel)\n\n    def test_update_or_create(self):\n        obj, created = self.queryset.update_or_create(name='test', defaults={'name': 'updated'})\n        self.assertTrue(created)\n        self.assertEqual(obj.name, 'updated')\n\n    def test_earliest(self):\n        TestModel.objects.create(name='test1')\n        TestModel.objects.create(name='test2')\n        earliest_obj = self.queryset.earliest('name')\n        self.assertEqual(earliest_obj.name, 'test1')\n\n    def test_latest(self):\n        TestModel.objects.create(name='test1')\n        TestModel.objects.create(name='test2')\n        latest_obj = self.queryset.latest('name')\n        self.assertEqual(latest_obj.name, 'test2')\n\n    def test_first(self):\n        TestModel.objects.create(name='test1')\n        TestModel.objects.create(name='test2')\n        first_obj = self.queryset.first()\n        self.assertEqual(first_obj.name, 'test1')\n\n    def test_last(self):\n        TestModel.objects.create(name='test1')\n        TestModel.objects.create(name='test2')\n        last_obj = self.queryset.last()\n        self.assertEqual(last_obj.name, 'test2')\n\n    def test_in_bulk(self):\n        objs = [TestModel.objects.create(name='test1'), TestModel.objects.create(name='test2')]\n        pk_list = [obj.pk for obj in objs]\n        obj_dict = self.queryset.in_bulk(pk_list)\n        self.assertEqual(len(obj_dict), 2)\n\n    def test_delete(self):\n        obj = TestModel.objects.create(name='test')\n        deleted_count, _ = self.queryset.filter(pk=obj.pk).delete()\n        self.assertEqual(deleted_count, 1)\n\n    def test_update(self):\n        obj = TestModel.objects.create(name='test')\n        updated_count = self.queryset.filter(pk=obj.pk).update(name='updated')\n        self.assertEqual(updated_count, 1)\n\n    def test_exists(self):\n        TestModel.objects.create(name='test')\n        self.assertTrue(self.queryset.exists())\n\n    def test_resolve_expression(self):\n        expr = models.ExpressionWrapper(models.F('name'), output_field=models.CharField())\n        resolved_expr = self.queryset.resolve_expression(expr)\n        self.assertIsInstance(resolved_expr, models.Expression)\n\n    def test_add_hints(self):\n        self.queryset._add_hints(instance_id=1)\n        self.assertEqual(self.queryset._hints['instance_id'], 1)\n\n    def test_has_filters(self):\n        filtered_queryset = self.queryset.filter(name='test')\n        self.assertTrue(filtered_queryset._has_filters())\n\n    def test_validate_values_are_expressions(self):\n        with self.assertRaises(TypeError):\n            self.queryset._validate_values_are_expressions(['invalid'], method_name='annotate')\n\n    def test_not_support_combined_queries(self):\n        with self.assertRaises(NotSupportedError):\n            self.queryset.union(self.queryset).filter(name='test')\n\n    def test_merge_sanity_check(self):\n        with self.assertRaises(TypeError):\n            self.queryset.merge_sanity_check(QuerySet(model=models.Model))\n\n    def test_merge_known_related_objects(self):\n        queryset1 = QuerySet(model=TestModel).filter(name='test1')\n        queryset2 = QuerySet(model=TestModel).filter(name='test2')\n        queryset1._merge_known_related_objects(queryset2)\n        self.assertEqual(queryset1._known_related_objects, queryset2._known_related_objects)\n\n    def test_chain(self):\n        chained_queryset = self.queryset._chain()\n        self.assertIsInstance(chained_queryset, QuerySet)\n\n    def test_clone(self):\n        cloned_queryset = self.queryset._clone()\n        self.assertIsInstance(cloned_queryset, QuerySet)\n\n    def test_fetch_all(self):\n        self.queryset._fetch_all()\n        self.assertIsInstance(self.queryset._result_cache, list)\n\n    def test_next_is_sticky(self):\n        sticky_queryset = self.queryset._next_is_sticky()\n        self.assertTrue(sticky_queryset._sticky_filter)\n\nclass TestRawQuerySet(TestCase):\n    def setUp(self):\n        class TestModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        self.raw_queryset = RawQuerySet(raw_query='SELECT * FROM testmodel', model=TestModel)\n\n    def test_prefetch_related(self):\n        prefetch_queryset = self.raw_queryset.prefetch_related('name')\n        self.assertIsInstance(prefetch_queryset, RawQuerySet)\n\n    def test_using(self):\n        using_queryset = self.raw_queryset.using('default')\n        self.assertIsInstance(using_queryset, RawQuerySet)\n\nclass TestPrefetch(TestCase):\n    def setUp(self):\n        self.prefetch = Prefetch('related_name')\n\n    def test_add_prefix(self):\n        self.prefetch.add_prefix('prefix')\n        self.assertEqual(self.prefetch.prefetch_through, 'prefix__related_name')\n\n    def test_get_current_prefetch_to(self):\n        current_prefetch_to = self.prefetch.get_current_prefetch_to(0)\n        self.assertEqual(current_prefetch_to, 'related_name')\n\n    def test_get_current_to_attr(self):\n        current_to_attr, as_attr = self.prefetch.get_current_to_attr(0)\n        self.assertEqual(current_to_attr, 'related_name')\n        self.assertFalse(as_attr)\n\n    def test_get_current_queryset(self):\n        queryset = QuerySet(model=models.Model)\n        self.prefetch.queryset = queryset\n        current_queryset = self.prefetch.get_current_queryset(0)\n        self.assertEqual(current_queryset, queryset)\n\nclass TestPrefetchRelatedObjects(TestCase):\n    def setUp(self):\n        class RelatedModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        class TestModel(models.Model):\n            name = models.CharField(max_length=100)\n            related = models.ForeignKey(RelatedModel, on_delete=models.CASCADE)\n\n        self.test_model_instance = TestModel.objects.create(name='test')\n        self.related_model_instance = RelatedModel.objects.create(name='related')\n        self.test_model_instance.related = self.related_model_instance\n        self.test_model_instance.save()\n\n    def test_prefetch_related_objects(self):\n        prefetch_related_objects([self.test_model_instance], 'related')\n        self.assertIn('related', self.test_model_instance._prefetched_objects_cache)\n\nclass TestGetPrefetcher(TestCase):\n    def setUp(self):\n        class RelatedModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        class TestModel(models.Model):\n            name = models.CharField(max_length=100)\n            related = models.ForeignKey(RelatedModel, on_delete=models.CASCADE)\n\n        self.test_model_instance = TestModel.objects.create(name='test')\n        self.related_model_instance = RelatedModel.objects.create(name='related')\n        self.test_model_instance.related = self.related_model_instance\n        self.test_model_instance.save()\n\n    def test_get_prefetcher(self):\n        prefetcher, descriptor, attr_found, is_fetched = get_prefetcher(self.test_model_instance, 'related', 'related')\n        self.assertIsNotNone(prefetcher)\n        self.assertTrue(attr_found)\n        self.assertTrue(is_fetched(self.test_model_instance))\n\nclass TestPrefetchOneLevel(TestCase):\n    def setUp(self):\n        class RelatedModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        class TestModel(models.Model):\n            name = models.CharField(max_length=100)\n            related = models.ForeignKey(RelatedModel, on_delete=models.CASCADE)\n\n        self.test_model_instance = TestModel.objects.create(name='test')\n        self.related_model_instance = RelatedModel.objects.create(name='related')\n        self.test_model_instance.related = self.related_model_instance\n        self.test_model_instance.save()\n\n        class TestPrefetcher:\n            def get_prefetch_queryset(self, instances, queryset):\n                rel_qs = QuerySet(model=RelatedModel).filter(id__in=[instance.related_id for instance in instances])\n                rel_obj_attr = lambda obj: obj.id\n                instance_attr = lambda obj: obj.related_id\n                single = True\n                cache_name = 'related'\n                is_descriptor = False\n                return rel_qs, rel_obj_attr, instance_attr, single, cache_name, is_descriptor\n\n        self.prefetcher = TestPrefetcher()\n        self.lookup = Prefetch('related')\n\n    def test_prefetch_one_level(self):\n        obj_list, additional_lookups = prefetch_one_level([self.test_model_instance], self.prefetcher, self.lookup, 0)\n        self.assertEqual(len(obj_list), 1)\n        self.assertEqual(len(additional_lookups), 0)\n"], "sample_1048": ["\nimport unittest\nfrom sympy import Plane, Point3D, Line3D, Symbol\nfrom sympy.abc import x, y, z, t, u, v\n\nclass TestPlane(unittest.TestCase):\n\n    def setUp(self):\n        self.plane1 = Plane(Point3D(1, 1, 1), Point3D(2, 3, 4), Point3D(2, 2, 2))\n        self.plane2 = Plane(Point3D(1, 1, 1), normal_vector=(1, 4, 7))\n        self.point = Point3D(1, 2, 3)\n        self.line = Line3D(Point3D(1, 3, 4), Point3D(2, 2, 2))\n\n    def test_contains(self):\n        self.assertTrue(self.point in self.plane1)\n        self.assertFalse(self.line in self.plane1)\n\n    def test_angle_between(self):\n        self.assertEqual(self.plane1.angle_between(self.line), -asin(sqrt(21)/6))\n\n    def test_arbitrary_point(self):\n        self.assertEqual(self.plane1.arbitrary_point(t), Point3D(1, cos(t) + 1, sin(t) + 1))\n        self.assertEqual(self.plane1.arbitrary_point(u, v), Point3D(u + 1, v + 1, 1))\n\n    def test_are_concurrent(self):\n        self.assertTrue(Plane.are_concurrent(self.plane1, self.plane2))\n\n    def test_distance(self):\n        self.assertEqual(self.plane1.distance(self.point), sqrt(3))\n        self.assertEqual(self.plane1.distance(self.line), 0)\n\n    def test_equals(self):\n        self.assertTrue(self.plane1.equals(self.plane1))\n        self.assertFalse(self.plane1.equals(self.plane2))\n\n    def test_equation(self):\n        self.assertEqual(self.plane1.equation(), -x + y - z + 1)\n        self.assertEqual(self.plane2.equation(), x + 4*y + 7*z - 12)\n\n    def test_intersection(self):\n        self.assertEqual(self.plane1.intersection(self.point), [self.point])\n        self.assertEqual(self.plane1.intersection(self.line), [Point3D(2, 2, 2)])\n\n    def test_is_coplanar(self):\n        self.assertTrue(self.plane1.is_coplanar(self.plane2))\n        self.assertTrue(self.plane1.is_coplanar(self.point))\n        self.assertFalse(self.plane1.is_coplanar(self.line))\n\n    def test_is_parallel(self):\n        self.assertTrue(self.plane1.is_parallel(self.plane2))\n        self.assertFalse(self.plane1.is_parallel(self.line))\n\n    def test_is_perpendicular(self):\n        self.assertFalse(self.plane1.is_perpendicular(self.plane2))\n        self.assertTrue(self.plane1.is_perpendicular(self.line))\n\n    def test_normal_vector(self):\n        self.assertEqual(self.plane1.normal_vector, (-1, 2, -1))\n        self.assertEqual(self.plane2.normal_vector, (1, 4, 7))\n\n    def test_p1(self):\n        self.assertEqual(self.plane1.p1, Point3D(1, 1, 1))\n\n    def test_parallel_plane(self):\n        self.assertEqual(self.plane1.parallel_plane(self.point), Plane(self.point, normal_vector=(-1, 2, -1)))\n\n    def test_perpendicular_line(self):\n        self.assertEqual(self.plane1.perpendicular_line(self.point), Line3D(self.point, Point3D(0, 2, 0)))\n\n    def test_perpendicular_plane(self):\n        self.assertEqual(self.plane1.perpendicular_plane(), Plane(Point3D(1, 1, 1), normal_vector=(0, 0, 1)))\n\n    def test_projection_line(self):\n        self.assertEqual(self.plane1.projection_line(Line3D(self.point, Point3D(2, 2, 4))), self.point)\n\n    def test_projection(self):\n        self.assertEqual(self.plane1.projection(self.point), Point3D(1, 2, 1))\n\n    def test_random_point(self):\n        self.assertIsInstance(self.plane1.random_point(), Point3D)\n\n    def test_parameter_value(self):\n        self.assertEqual(self.plane1.parameter_value(self.plane1.p1, t), self.plane1.p1)\n        self.assertEqual(self.plane1.parameter_value(self.plane1.arbitrary_point(t).subs(t, pi/4), t), {t: pi/4})\n\n    def test_ambient_dimension(self):\n        self.assertEqual(self.plane1.ambient_dimension, 3)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_163": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.forms import ModelForm, ValidationError\nfrom django.forms.models import (\n    ModelFormOptions, ModelFormMetaclass, BaseModelForm, ModelForm, modelform_factory,\n    BaseModelFormSet, modelformset_factory, BaseInlineFormSet, inlineformset_factory,\n    InlineForeignKeyField, ModelChoiceField, ModelMultipleChoiceField, modelform_defines_fields\n)\nfrom django.db import models\n\nclass TestModelsForm(unittest.TestCase):\n    class TestModel(models.Model):\n        test_field = models.CharField(max_length=10)\n\n    def setUp(self):\n        self.data = {'test_field': 'test'}\n        self.instance = self.TestModel()\n\n    def test_model_to_dict(self):\n        self.instance.test_field = 'test'\n        self.assertEqual(model_to_dict(self.instance), {'test_field': 'test'})\n\n    def test_fields_for_model(self):\n        fields = fields_for_model(self.TestModel)\n        self.assertIsInstance(fields['test_field'], CharField)\n\n    def test_model_form_options(self):\n        options = ModelFormOptions(self.TestModel)\n        self.assertEqual(options.model, self.TestModel)\n\n    def test_model_form_metaclass(self):\n        class TestForm(ModelForm):\n            class Meta:\n                model = self.TestModel\n                fields = ['test_field']\n        self.assertIn('test_field', TestForm.base_fields)\n\n    def test_base_model_form(self):\n        class TestForm(BaseModelForm):\n            class Meta:\n                model = self.TestModel\n                fields = ['test_field']\n        form = TestForm(self.data, instance=self.instance)\n        self.assertTrue(form.is_valid())\n\n    def test_model_form(self):\n        class TestForm(ModelForm):\n            class Meta:\n                model = self.TestModel\n                fields = ['test_field']\n        form = TestForm(self.data, instance=self.instance)\n        self.assertTrue(form.is_valid())\n\n    def test_modelform_factory(self):\n        TestForm = modelform_factory(self.TestModel, fields=['test_field'])\n        form = TestForm(self.data)\n        self.assertTrue(form.is_valid())\n\n    def test_base_model_form_set(self):\n        class TestFormSet(BaseModelFormSet):\n            model = self.TestModel\n        formset = TestFormSet(queryset=self.TestModel.objects.all())\n        self.assertEqual(formset.is_valid(), True)\n\n    def test_modelformset_factory(self):\n        TestFormSet = modelformset_factory(self.TestModel, fields=['test_field'])\n        formset = TestFormSet(queryset=self.TestModel.objects.all())\n        self.assertEqual(formset.is_valid(), True)\n\n    def test_base_inline_form_set(self):\n        parent_model = self.TestModel\n        model = self.TestModel\n        fk = models.ForeignKey(parent_model, on_delete=models.CASCADE)\n        fk.name = 'test_field'\n        model._meta.fields = [fk]\n        class TestFormSet(BaseInlineFormSet):\n            model = model\n            fk = fk\n        formset = TestFormSet(instance=parent_model())\n        self.assertEqual(formset.is_valid(), True)\n\n    def test_inlineformset_factory(self):\n        parent_model = self.TestModel\n        model = self.TestModel\n        fk = models.ForeignKey(parent_model, on_delete=models.CASCADE)\n        fk.name = 'test_field'\n        model._meta.fields = [fk]\n        TestFormSet = inlineformset_factory(parent_model, model)\n        formset = TestFormSet(instance=parent_model())\n        self.assertEqual(formset.is_valid(), True)\n\n    def test_inline_foreign_key_field(self):\n        field = InlineForeignKeyField(self.instance)\n        self.assertEqual(field.clean(self.instance.pk), self.instance)\n\n    def test_model_choice_field(self):\n        field = ModelChoiceField(queryset=self.TestModel.objects.all())\n        self.assertEqual(field.clean(self.instance.pk), self.instance)\n\n    def test_model_multiple_choice_field(self):\n        field = ModelMultipleChoiceField(queryset=self.TestModel.objects.all())\n        self.assertEqual(list(field.clean([self.instance.pk])), [self.instance])\n\n    def test_modelform_defines_fields(self):\n        class TestForm(ModelForm):\n            class Meta:\n                model = self.TestModel\n                fields = ['test_field']\n        self.assertTrue(modelform_defines_fields(TestForm))\n"], "sample_761": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\nfrom sklearn.exceptions import NotFittedError\n\nclass TestEncoders(unittest.TestCase):\n    def setUp(self):\n        self.X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        self.X_new = [['Male', 2], ['Female', 1]]\n\n    def test_one_hot_encoder_fit_transform(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        X_transformed = enc.transform([['Female', 1], ['Male', 4]]).toarray()\n        expected_output = np.array([[1., 0., 1., 0., 0.],\n                                    [0., 1., 0., 0., 0.]])\n        np.testing.assert_array_equal(X_transformed, expected_output)\n\n    def test_one_hot_encoder_inverse_transform(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        X_inverse = enc.inverse_transform([[0, 1, 1, 0, 0], [0, 0, 0, 1, 0]])\n        expected_output = np.array([['Male', 1],\n                                    [None, 2]], dtype=object)\n        np.testing.assert_array_equal(X_inverse, expected_output)\n\n    def test_one_hot_encoder_not_fitted(self):\n        enc = OneHotEncoder()\n        with self.assertRaises(NotFittedError):\n            enc.transform(self.X)\n\n    def test_ordinal_encoder_fit_transform(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        X_transformed = enc.transform([['Female', 3], ['Male', 1]])\n        expected_output = np.array([[0., 2.],\n                                    [1., 0.]])\n        np.testing.assert_array_equal(X_transformed, expected_output)\n\n    def test_ordinal_encoder_inverse_transform(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        X_inverse = enc.inverse_transform([[1, 0], [0, 1]])\n        expected_output = np.array([['Male', 1],\n                                    ['Female', 2]], dtype=object)\n        np.testing.assert_array_equal(X_inverse, expected_output)\n\n    def test_ordinal_encoder_not_fitted(self):\n        enc = OrdinalEncoder()\n        with self.assertRaises(NotFittedError):\n            enc.transform(self.X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_860": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.coordinate_descent import Lasso, LassoCV, ElasticNet, ElasticNetCV, MultiTaskLasso, MultiTaskElasticNet, MultiTaskElasticNetCV, MultiTaskLassoCV, lasso_path, enet_path\nfrom sklearn.datasets import make_regression\nfrom sklearn.metrics import r2_score\n\nclass TestCoordinateDescent(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_regression(n_features=2, random_state=0)\n        self.X_multi, self.y_multi = make_regression(n_features=2, n_targets=2, noise=4, random_state=0)\n\n    def test_lasso(self):\n        lasso = Lasso(alpha=0.1)\n        lasso.fit(self.X, self.y)\n        self.assertIsInstance(lasso.coef_, np.ndarray)\n        self.assertIsInstance(lasso.intercept_, float)\n\n    def test_lasso_cv(self):\n        lasso_cv = LassoCV(cv=5, random_state=0)\n        lasso_cv.fit(self.X, self.y)\n        self.assertIsInstance(lasso_cv.alpha_, float)\n        self.assertIsInstance(lasso_cv.coef_, np.ndarray)\n        self.assertIsInstance(lasso_cv.intercept_, float)\n\n    def test_elastic_net(self):\n        elastic_net = ElasticNet(alpha=0.1, l1_ratio=0.5)\n        elastic_net.fit(self.X, self.y)\n        self.assertIsInstance(elastic_net.coef_, np.ndarray)\n        self.assertIsInstance(elastic_net.intercept_, float)\n\n    def test_elastic_net_cv(self):\n        elastic_net_cv = ElasticNetCV(cv=5, random_state=0)\n        elastic_net_cv.fit(self.X, self.y)\n        self.assertIsInstance(elastic_net_cv.alpha_, float)\n        self.assertIsInstance(elastic_net_cv.l1_ratio_, float)\n        self.assertIsInstance(elastic_net_cv.coef_, np.ndarray)\n        self.assertIsInstance(elastic_net_cv.intercept_, float)\n\n    def test_multi_task_lasso(self):\n        multi_task_lasso = MultiTaskLasso(alpha=0.1)\n        multi_task_lasso.fit(self.X_multi, self.y_multi)\n        self.assertIsInstance(multi_task_lasso.coef_, np.ndarray)\n        self.assertIsInstance(multi_task_lasso.intercept_, np.ndarray)\n\n    def test_multi_task_elastic_net(self):\n        multi_task_elastic_net = MultiTaskElasticNet(alpha=0.1, l1_ratio=0.5)\n        multi_task_elastic_net.fit(self.X_multi, self.y_multi)\n        self.assertIsInstance(multi_task_elastic_net.coef_, np.ndarray)\n        self.assertIsInstance(multi_task_elastic_net.intercept_, np.ndarray)\n\n    def test_multi_task_elastic_net_cv(self):\n        multi_task_elastic_net_cv = MultiTaskElasticNetCV(cv=5, random_state=0)\n        multi_task_elastic_net_cv.fit(self.X_multi, self.y_multi)\n        self.assertIsInstance(multi_task_elastic_net_cv.alpha_, float)\n        self.assertIsInstance(multi_task_elastic_net_cv.l1_ratio_, float)\n        self.assertIsInstance(multi_task_elastic_net_cv.coef_, np.ndarray)\n        self.assertIsInstance(multi_task_elastic_net_cv.intercept_, np.ndarray)\n\n    def test_multi_task_lasso_cv(self):\n        multi_task_lasso_cv = MultiTaskLassoCV(cv=5, random_state=0)\n        multi_task_lasso_cv.fit(self.X_multi, self.y_multi)\n        self.assertIsInstance(multi_task_lasso_cv.alpha_, float)\n        self.assertIsInstance(multi_task_lasso_cv.coef_, np.ndarray)\n        self.assertIsInstance(multi_task_lasso_cv.intercept_, np.ndarray)\n\n    def test_lasso_path(self):\n        alphas, coefs, _ = lasso_path(self.X, self.y)\n        self.assertIsInstance(alphas, np.ndarray)\n        self.assertIsInstance(coefs, np.ndarray)\n\n    def test_enet_path(self):\n        alphas, coefs, _ = enet_path(self.X, self.y)\n        self.assertIsInstance(alphas, np.ndarray)\n        self.assertIsInstance(coefs, np.ndarray)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_521": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nimport numpy as np\nimport matplotlib\nfrom matplotlib.figure import Figure, SubFigure\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas\nfrom matplotlib.axes import SubplotBase\n\nclass TestFigure(unittest.TestCase):\n    def setUp(self):\n        self.figure = Figure()\n\n    def test_figure_creation(self):\n        self.assertIsInstance(self.figure, Figure)\n        self.assertIsInstance(self.figure.canvas, FigureCanvas)\n\n    def test_figure_size(self):\n        self.figure.set_size_inches(5, 4)\n        self.assertEqual(self.figure.get_size_inches(), (5, 4))\n\n    def test_add_subplot(self):\n        ax = self.figure.add_subplot(111)\n        self.assertIsInstance(ax, SubplotBase)\n\n    def test_colorbar(self):\n        mappable = Mock()\n        cbar = self.figure.colorbar(mappable)\n        self.assertIsInstance(cbar, Colorbar)\n\n    # Add more tests as needed...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_811": ["\nimport unittest\nimport numpy as np\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.datasets import make_classification, make_regression\nfrom sklearn.exceptions import NotFittedError\n\nclass TestGradientBoosting(unittest.TestCase):\n    def setUp(self):\n        self.X_class, self.y_class = make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, random_state=42)\n        self.X_reg, self.y_reg = make_regression(n_samples=100, n_features=20, n_informative=2, random_state=42)\n\n    def test_gradient_boosting_classifier(self):\n        clf = GradientBoostingClassifier(random_state=42)\n        clf.fit(self.X_class, self.y_class)\n        self.assertIsNotNone(clf.predict(self.X_class))\n        self.assertIsNotNone(clf.predict_proba(self.X_class))\n\n    def test_gradient_boosting_regressor(self):\n        reg = GradientBoostingRegressor(random_state=42)\n        reg.fit(self.X_reg, self.y_reg)\n        self.assertIsNotNone(reg.predict(self.X_reg))\n\n    def test_not_fitted_error(self):\n        clf = GradientBoostingClassifier(random_state=42)\n        with self.assertRaises(NotFittedError):\n            clf.predict(self.X_class)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_903": ["\nimport unittest\nimport numpy as np\nfrom sklearn.manifold.t_sne import _joint_probabilities, _kl_divergence\n\nclass TestTSNEFunctions(unittest.TestCase):\n    def setUp(self):\n        self.distances = np.array([0.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0], dtype=np.float32)\n        self.desired_perplexity = 30.0\n        self.verbose = 0\n\n    def test_joint_probabilities(self):\n        P = _joint_probabilities(self.distances, self.desired_perplexity, self.verbose)\n        self.assertEqual(P.shape, (6, 6))\n        self.assertTrue(np.allclose(P.sum(axis=1), 1))\n\n    def test_kl_divergence(self):\n        P = _joint_probabilities(self.distances, self.desired_perplexity, self.verbose)\n        P = P.ravel()\n        X_embedded = np.random.randn(6, 2).astype(np.float32)\n        params = X_embedded.ravel()\n        degrees_of_freedom = 1\n        n_samples = 6\n        n_components = 2\n\n        kl_divergence, grad = _kl_divergence(params, P, degrees_of_freedom, n_samples, n_components)\n        self.assertIsInstance(kl_divergence, np.float64)\n        self.assertEqual(grad.shape, (12,))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1084": ["\nimport unittest\nfrom sympy import S, symbols, Interval, FiniteSet, Range, Integers, Naturals, Reals, ImageSet, Lambda, EmptySet, Union, ProductSet\nfrom sympy.sets.conditionset import ConditionSet\nfrom sympy.sets.handlers.intersection import intersection_sets\n\nclass TestIntersectionSets(unittest.TestCase):\n    def test_intersection_condition_sets(self):\n        x = symbols('x')\n        a = ConditionSet(x, x > 0, Interval(1, 5))\n        b = ConditionSet(x, x < 10, Interval(2, 6))\n        self.assertEqual(intersection_sets(a, b), ConditionSet(x, x > 0, Interval(2, 5)))\n\n    def test_intersection_naturals_integers(self):\n        self.assertEqual(intersection_sets(Naturals, Integers), Naturals)\n\n    def test_intersection_naturals_naturals(self):\n        self.assertEqual(intersection_sets(Naturals, Naturals), Naturals)\n\n    def test_intersection_interval_naturals(self):\n        a = Interval(2, 5)\n        b = Naturals\n        self.assertEqual(intersection_sets(a, b), Interval(2, 5))\n\n    def test_intersection_integers_reals(self):\n        self.assertEqual(intersection_sets(Integers, Reals), Integers)\n\n    def test_intersection_range_interval(self):\n        a = Range(1, 10)\n        b = Interval(3, 8)\n        self.assertEqual(intersection_sets(a, b), Range(3, 9))\n\n    def test_intersection_range_naturals(self):\n        a = Range(1, 10)\n        b = Naturals\n        self.assertEqual(intersection_sets(a, b), Range(1, 10))\n\n    def test_intersection_range_range(self):\n        a = Range(1, 10, 2)\n        b = Range(3, 9, 3)\n        self.assertEqual(intersection_sets(a, b), Range(3, 10, 6))\n\n    def test_intersection_range_integers(self):\n        a = Range(1, 10)\n        b = Integers\n        self.assertEqual(intersection_sets(a, b), a)\n\n    def test_intersection_imageset_set(self):\n        x = symbols('x')\n        a = ImageSet(Lambda(x, 2*x), Interval(1, 5))\n        b = Interval(2, 12)\n        self.assertEqual(intersection_sets(a, b), ImageSet(Lambda(x, 2*x), Interval(1, 6)))\n\n    def test_intersection_productset_productset(self):\n        a = ProductSet(Interval(1, 3), Interval(2, 4))\n        b = ProductSet(Interval(2, 5), Interval(3, 6))\n        self.assertEqual(intersection_sets(a, b), ProductSet(Interval(2, 3), Interval(3, 4)))\n\n    def test_intersection_interval_interval(self):\n        a = Interval(1, 5)\n        b = Interval(2, 6)\n        self.assertEqual(intersection_sets(a, b), Interval(2, 5))\n\n    def test_intersection_emptyset_set(self):\n        a = EmptySet()\n        b = FiniteSet(1, 2, 3)\n        self.assertEqual(intersection_sets(a, b), EmptySet())\n\n    def test_intersection_finite_finite(self):\n        a = FiniteSet(1, 2, 3, 4)\n        b = FiniteSet(3, 4, 5, 6)\n        self.assertEqual(intersection_sets(a, b), FiniteSet(3, 4))\n\n    def test_intersection_integers_interval(self):\n        a = Integers\n        b = Interval(2, 5)\n        self.assertEqual(intersection_sets(a, b), Range(2, 6))\n\n    def test_intersection_naturals_interval(self):\n        a = Naturals\n        b = Interval(2, 5)\n        self.assertEqual(intersection_sets(a, b), Range(2, 6))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1132": ["\nimport unittest\nfrom sympy.utilities.iterables import *\n\nclass TestIterables(unittest.TestCase):\n\n    def test_partition(self):\n        self.assertEqual(_partition('abcde', [1, 0, 1, 2, 0]), [['b', 'e'], ['a', 'c'], ['d']])\n        self.assertEqual(_partition('abcde', [1, 0, 1, 2, 0], 3), [['b', 'e'], ['a', 'c'], ['d']])\n\n    def test_set_partitions(self):\n        self.assertEqual(list(_set_partitions(3)), [(1, [0, 0, 0]), (2, [0, 0, 1]), (2, [0, 1, 0]), (2, [0, 1, 1]), (3, [0, 1, 2])])\n\n    def test_binary_partitions(self):\n        self.assertEqual(list(binary_partitions(5)), [[4, 1], [2, 2, 1], [2, 1, 1, 1], [1, 1, 1, 1, 1]])\n\n    def test_bracelets(self):\n        self.assertEqual(list(bracelets(4, 2)), [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 1], [0, 1, 0, 1], [0, 1, 1, 1], [1, 1, 1, 1]])\n\n    def test_has_dups(self):\n        self.assertTrue(has_dups((1, 2, 1)))\n        self.assertFalse(has_dups(range(3)))\n\n    def test_uniq(self):\n        self.assertEqual(list(uniq([1, 4, 1, 5, 4, 2, 1, 2])), [1, 4, 5, 2])\n\n    def test_generate_bell(self):\n        self.assertEqual(list(generate_bell(3)), [(0, 1, 2), (0, 2, 1), (2, 0, 1), (2, 1, 0), (1, 2, 0), (1, 0, 2)])\n\n    def test_generate_involutions(self):\n        self.assertEqual(list(generate_involutions(3)), [(0, 1, 2), (0, 2, 1), (1, 0, 2), (2, 1, 0)])\n\n    def test_generate_derangements(self):\n        self.assertEqual(list(generate_derangements([0, 1, 2])), [[1, 2, 0], [2, 0, 1]])\n\n    def test_necklaces(self):\n        self.assertEqual(list(necklaces(4, 2)), [(0, 0, 0, 0), (0, 0, 0, 1), (0, 0, 1, 1), (0, 1, 0, 1), (0, 1, 1, 1), (1, 1, 1, 1)])\n\n    def test_generate_oriented_forest(self):\n        self.assertEqual(list(generate_oriented_forest(4)), [[0, 1, 2, 3], [0, 1, 2, 2], [0, 1, 2, 1], [0, 1, 2, 0], [0, 1, 1, 1], [0, 1, 1, 0], [0, 1, 0, 1], [0, 1, 0, 0], [0, 0, 0, 0]])\n\n    def test_minlex(self):\n        self.assertEqual(minlex((1, 2, 0)), (0, 1, 2))\n        self.assertEqual(minlex((1, 0, 2), directed=False), (0, 1, 2))\n\n    def test_runs(self):\n        from operator import ge\n        self.assertEqual(runs([0, 1, 2, 2, 1, 4, 3, 2, 2]), [[0, 1, 2], [2], [1, 4], [3], [2], [2]])\n        self.assertEqual(runs([0, 1, 2, 2, 1, 4, 3, 2, 2], op=ge), [[0, 1, 2, 2], [1, 4], [3], [2, 2]])\n\n    def test_kbins(self):\n        self.assertEqual(list(kbins(list(range(5)), 2)), [[[0], [1, 2, 3, 4]], [[0, 1], [2, 3, 4]], [[0, 1, 2], [3, 4]], [[0, 1, 2, 3], [4]]])\n\n    def test_permute_signs(self):\n        self.assertEqual(list(permute_signs((0, 1, 2))), [(0, 1, 2), (0, -1, 2), (0, 1, -2), (0, -1, -2)])\n\n    def test_signed_permutations(self):\n        self.assertEqual(len(list(signed_permutations((0, 1, 2)))), 24)\n\n    def test_rotations(self):\n        self.assertEqual(list(rotations([1,2,3])), [[1, 2, 3], [2, 3, 1], [3, 1, 2]])\n        self.assertEqual(list(rotations([1,2,3], -1)), [[1, 2, 3], [3, 1, 2], [2, 3, 1]])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_554": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom matplotlib.text import Text, Annotation, OffsetFrom, _AnnotationBase\nfrom matplotlib.artist import Artist\nfrom matplotlib.transforms import Transform, BboxBase, Bbox\n\nclass TestTextClass(unittest.TestCase):\n    def setUp(self):\n        self.text = Text()\n\n    def test_init(self):\n        self.assertIsInstance(self.text, Text)\n\n    def test_set_position(self):\n        self.text.set_position((1, 2))\n        self.assertEqual(self.text.get_position(), (1, 2))\n\n    # Additional tests for other methods...\n\nclass TestAnnotationClass(unittest.TestCase):\n    def setUp(self):\n        self.annotation = Annotation(\"Test\", (0, 0))\n\n    def test_init(self):\n        self.assertIsInstance(self.annotation, Annotation)\n\n    def test_set_annotation_clip(self):\n        self.annotation.set_annotation_clip(True)\n        self.assertEqual(self.annotation.get_annotation_clip(), True)\n\n    # Additional tests for other methods...\n\nclass TestOffsetFromClass(unittest.TestCase):\n    def setUp(self):\n        self.offset = OffsetFrom(Artist(), (0.5, 0.5))\n\n    def test_init(self):\n        self.assertIsInstance(self.offset, OffsetFrom)\n\n    def test_set_unit(self):\n        self.offset.set_unit(\"pixels\")\n        self.assertEqual(self.offset.get_unit(), \"pixels\")\n\n    # Additional tests for other methods...\n\nclass TestAnnotationBaseClass(unittest.TestCase):\n    def setUp(self):\n        self.annotation_base = _AnnotationBase((0, 0))\n\n    def test_init(self):\n        self.assertIsInstance(self.annotation_base, _AnnotationBase)\n\n    def test_set_annotation_clip(self):\n        self.annotation_base.set_annotation_clip(True)\n        self.assertEqual(self.annotation_base.get_annotation_clip(), True)\n\n    # Additional tests for other methods...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_188": ["\nfrom unittest import TestCase\nfrom django.db.models import fields, expressions, functions\n\nclass TestExpressions(TestCase):\n    def setUp(self):\n        self.integer_field = fields.IntegerField()\n        self.char_field = fields.CharField(max_length=10)\n\n    def test_combined_expression(self):\n        lhs = expressions.Value(5, output_field=self.integer_field)\n        rhs = expressions.Value(3, output_field=self.integer_field)\n        add_expr = expressions.CombinedExpression(lhs, expressions.CombinedExpression.ADD, rhs)\n        sub_expr = expressions.CombinedExpression(lhs, expressions.CombinedExpression.SUB, rhs)\n        self.assertEqual(str(add_expr), \"5 + 3\")\n        self.assertEqual(str(sub_expr), \"5 - 3\")\n\n    def test_f_expression(self):\n        f_expr = expressions.F('field_name')\n        self.assertEqual(f_expr.name, 'field_name')\n\n    def test_func_expression(self):\n        func_expr = expressions.Func(expressions.F('field_name'), function='UPPER')\n        self.assertEqual(func_expr.function, 'UPPER')\n        self.assertEqual(str(func_expr), \"UPPER(field_name)\")\n\n    def test_value_expression(self):\n        value_expr = expressions.Value('test', output_field=self.char_field)\n        self.assertEqual(value_expr.value, 'test')\n        self.assertEqual(value_expr.output_field, self.char_field)\n\n    def test_raw_sql_expression(self):\n        raw_sql_expr = expressions.RawSQL('SELECT * FROM table', [])\n        self.assertEqual(raw_sql_expr.sql, 'SELECT * FROM table')\n\n    def test_random_expression(self):\n        random_expr = expressions.Random()\n        self.assertEqual(random_expr.output_field, fields.FloatField())\n\n    def test_col_expression(self):\n        col_expr = expressions.Col('alias', self.integer_field)\n        self.assertEqual(col_expr.alias, 'alias')\n        self.assertEqual(col_expr.target, self.integer_field)\n\n    def test_expression_list(self):\n        expr_list = expressions.ExpressionList(expressions.F('field1'), expressions.F('field2'))\n        self.assertEqual(str(expr_list), \"field1, field2\")\n\n    def test_expression_wrapper(self):\n        wrapper_expr = expressions.ExpressionWrapper(expressions.F('field_name'), output_field=self.char_field)\n        self.assertEqual(wrapper_expr.expression, expressions.F('field_name'))\n        self.assertEqual(wrapper_expr.output_field, self.char_field)\n\n    def test_when_expression(self):\n        when_expr = expressions.When(condition=Q(id=1), then=expressions.Value('test'))\n        self.assertEqual(str(when_expr), \"WHEN (id = 1) THEN 'test'\")\n\n    def test_case_expression(self):\n        case_expr = expressions.Case(expressions.When(id=1, then=expressions.Value('test')))\n        self.assertEqual(str(case_expr), \"CASE WHEN (id = 1) THEN 'test'\")\n\n    def test_order_by_expression(self):\n        order_by_expr = expressions.OrderBy(expressions.F('field_name'), descending=True)\n        self.assertTrue(order_by_expr.descending)\n        order_by_expr.reverse_ordering()\n        self.assertFalse(order_by_expr.descending)\n\n    def test_window_expression(self):\n        window_expr = expressions.Window(expressions.F('field_name'))\n        self.assertEqual(window_expr.source_expression, expressions.F('field_name'))\n\n    def test_window_frame_expressions(self):\n        row_range_expr = expressions.RowRange(start=0, end=1)\n        value_range_expr = expressions.ValueRange(start=0, end=1)\n        self.assertEqual(row_range_expr.frame_type, 'ROWS')\n        self.assertEqual(value_range_expr.frame_type, 'RANGE')\n"], "sample_478": ["\nfrom unittest import TestCase\nfrom unittest.mock import MagicMock, patch\n\nfrom django.contrib.admin.checks import (\n    BaseModelAdminChecks,\n    InlineModelAdminChecks,\n    ModelAdminChecks,\n    _contains_subclass,\n    _issubclass,\n    check_admin_app,\n    check_dependencies,\n    must_be,\n    must_inherit_from,\n    refer_to_missing_field,\n)\nfrom django.core.checks import Error\nfrom django.db import models\nfrom django.db.models.expressions import Combinable, OrderBy\n\nclass TestUtils(TestCase):\n    def test_issubclass(self):\n        self.assertTrue(_issubclass(str, object))\n        self.assertFalse(_issubclass(123, object))\n\n    def test_contains_subclass(self):\n        with patch(\"django.contrib.admin.checks.import_string\") as mock_import_string:\n            mock_import_string.side_effect = [\"django.contrib.auth.backends.ModelBackend\", \"django.contrib.auth.backends.AllowAllUsersModelBackend\"]\n            self.assertTrue(_contains_subclass(\"django.contrib.auth.backends.ModelBackend\", [\"django.contrib.auth.backends.AllowAllUsersModelBackend\"]))\n\nclass TestChecks(TestCase):\n    def test_check_admin_app(self):\n        mock_site = MagicMock()\n        mock_site.check.return_value = []\n        with patch(\"django.contrib.admin.checks.all_sites\", [mock_site]):\n            self.assertEqual(check_admin_app([], {}), [])\n\n    def test_check_dependencies(self):\n        with patch(\"django.contrib.admin.checks.apps.is_installed\") as mock_is_installed, \\\n             patch(\"django.contrib.admin.checks.engines.all\") as mock_engines_all, \\\n             patch(\"django.contrib.admin.checks._contains_subclass\") as mock_contains_subclass:\n            mock_is_installed.return_value = True\n            mock_engines_all.return_value = []\n            mock_contains_subclass.return_value = True\n            self.assertIsInstance(check_dependencies(), list)\n\nclass TestBaseModelAdminChecks(TestCase):\n    def setUp(self):\n        self.obj = MagicMock()\n        self.checks = BaseModelAdminChecks()\n\n    def test_check(self):\n        self.assertIsInstance(self.checks.check(self.obj), list)\n\n    def test_check_autocomplete_fields(self):\n        self.obj.autocomplete_fields = []\n        self.assertEqual(self.checks._check_autocomplete_fields(self.obj), [])\n\n    # Add more tests for other methods in BaseModelAdminChecks\n\nclass TestModelAdminChecks(TestCase):\n    def setUp(self):\n        self.obj = MagicMock()\n        self.checks = ModelAdminChecks()\n\n    def test_check(self):\n        self.assertIsInstance(self.checks.check(self.obj), list)\n\n    # Add more tests for other methods in ModelAdminChecks\n\nclass TestInlineModelAdminChecks(TestCase):\n    def setUp(self):\n        self.obj = MagicMock()\n        self.checks = InlineModelAdminChecks()\n\n    def test_check(self):\n        self.assertIsInstance(self.checks.check(self.obj), list)\n\n    # Add more tests for other methods in InlineModelAdminChecks\n\nclass TestErrorMessages(TestCase):\n    def test_must_be(self):\n        obj = MagicMock()\n        error = must_be(\"an integer\", \"option\", obj, \"admin.E001\")\n        self.assertIsInstance(error[0], Error)\n\n    def test_must_inherit_from(self):\n        obj = MagicMock()\n        error = must_inherit_from(\"BaseClass\", \"option\", obj, \"admin.E002\")\n        self.assertIsInstance(error[0], Error)\n\n    def test_refer_to_missing_field(self):\n        obj = MagicMock()\n        obj.model._meta.label = \"test_model\"\n        error = refer_to_missing_field(\"missing_field\", \"option\", obj, \"admin.E003\")\n        self.assertIsInstance(error[0], Error)\n"], "sample_1102": ["\nimport unittest\nfrom sympy import symbols, Poly, sqrt\nfrom sympy.polys.polytools import to_rational_coeffs, _torational_factor_list, sqf_list, sqf, factor_list, factor, intervals, refine_root, count_roots, real_roots, nroots, ground_roots, nth_power_roots_poly, cancel, reduced, groebner, GroebnerBasis, is_zero_dimensional\n\nx = symbols('x')\n\nclass TestPolyTools(unittest.TestCase):\n\n    def test_to_rational_coeffs(self):\n        p = Poly(((x**2-1)*(x-2)).subs({x:x*(1 + sqrt(2))}), x, domain='EX')\n        result = to_rational_coeffs(p)\n        self.assertIsNotNone(result)\n\n    def test_torational_factor_list(self):\n        p = ((x**2-1)*(x-2)).subs({x:x*(1 + sqrt(2))})\n        factors = _torational_factor_list(p, x)\n        self.assertIsNotNone(factors)\n\n    def test_sqf_list(self):\n        f = 2*x**5 + 16*x**4 + 50*x**3 + 76*x**2 + 56*x + 16\n        result = sqf_list(f, x)\n        self.assertEqual(result, (2, [(x + 1, 2), (x + 2, 3)]))\n\n    def test_sqf(self):\n        f = 2*x**5 + 16*x**4 + 50*x**3 + 76*x**2 + 56*x + 16\n        result = sqf(f, x)\n        self.assertEqual(result, 2*(x + 1)**2*(x + 2)**3)\n\n    def test_factor_list(self):\n        f = 2*x**5 + 2*x**4 + 4*x**3 + 4*x**2 + 2*x + 2\n        result = factor_list(f, x)\n        self.assertEqual(result, (2, [(x + 1, 1), (x**2 + 1, 2)]))\n\n    def test_factor(self):\n        f = 2*x**5 + 2*x**4 + 4*x**3 + 4*x**2 + 2*x + 2\n        result = factor(f, x)\n        self.assertEqual(result, 2*(x + 1)*(x**2 + 1)**2)\n\n    # Add more tests for other functions...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_462": ["\nimport unittest\nfrom django.forms import CharField, IntegerField, ValidationError\n\nclass TestFormFields(unittest.TestCase):\n\n    def setUp(self):\n        self.char_field = CharField(max_length=255)\n        self.integer_field = IntegerField()\n\n    def test_char_field_clean(self):\n        value = 'test'\n        self.assertEqual(self.char_field.clean(value), value)\n\n    def test_char_field_clean_with_strip(self):\n        value = '  test  '\n        self.assertEqual(self.char_field.clean(value), 'test')\n\n    def test_char_field_clean_with_empty_value(self):\n        value = ''\n        self.assertEqual(self.char_field.clean(value), '')\n\n    def test_char_field_clean_with_exceeding_max_length(self):\n        value = 'a' * 256\n        with self.assertRaises(ValidationError):\n            self.char_field.clean(value)\n\n    def test_integer_field_clean(self):\n        value = 10\n        self.assertEqual(self.integer_field.clean(value), value)\n\n    def test_integer_field_clean_with_non_integer_value(self):\n        value = 'test'\n        with self.assertRaises(ValidationError):\n            self.integer_field.clean(value)\n\n    def test_integer_field_clean_with_empty_value(self):\n        value = ''\n        with self.assertRaises(ValidationError):\n            self.integer_field.clean(value)\n\n# Add more tests for other fields...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_633": ["\nimport unittest\nfrom unittest.mock import patch, mock_open\nfrom io import StringIO\nfrom pylint.checkers import similar\n\nclass TestSimilar(unittest.TestCase):\n    def setUp(self):\n        self.sim = similar.Similar(min_lines=3, ignore_comments=True, ignore_docstrings=True, ignore_imports=True, ignore_signatures=True)\n\n    def test_append_stream(self):\n        stream = StringIO('print(\"Hello, World!\")\\nprint(\"Hello, World!\")')\n        self.sim.append_stream('test.py', stream)\n        self.assertEqual(len(self.sim.linesets), 1)\n\n    def test_run(self):\n        with patch('builtins.print') as mock_print:\n            self.sim.linesets = [\n                similar.LineSet('test1.py', ['print(\"Hello, World!\")\\n', 'print(\"Hello, World!\")']),\n                similar.LineSet('test2.py', ['print(\"Hello, World!\")\\n', 'print(\"Hello, World!\")'])\n            ]\n            self.sim.run()\n            mock_print.assert_called_once()\n\n    def test_compute_sims(self):\n        self.sim.linesets = [\n            similar.LineSet('test1.py', ['print(\"Hello, World!\")\\n', 'print(\"Hello, World!\")']),\n            similar.LineSet('test2.py', ['print(\"Hello, World!\")\\n', 'print(\"Hello, World!\")'])\n        ]\n        sims = self.sim._compute_sims()\n        self.assertEqual(len(sims), 1)\n        self.assertEqual(sims[0][0], 2)\n\n    def test_display_sims(self):\n        with patch('builtins.print') as mock_print:\n            self.sim._display_sims([(2, {('test1.py', 1, 2), ('test2.py', 1, 2)})])\n            mock_print.assert_called_once()\n\n    def test_find_common(self):\n        lineset1 = similar.LineSet('test1.py', ['print(\"Hello, World!\")\\n', 'print(\"Hello, World!\")'])\n        lineset2 = similar.LineSet('test2.py', ['print(\"Hello, World!\")\\n', 'print(\"Hello, World!\")'])\n        common = list(self.sim._find_common(lineset1, lineset2))\n        self.assertEqual(len(common), 1)\n        self.assertEqual(common[0].cmn_lines_nb, 2)\n\n    def test_iter_sims(self):\n        self.sim.linesets = [\n            similar.LineSet('test1.py', ['print(\"Hello, World!\")\\n', 'print(\"Hello, World!\")']),\n            similar.LineSet('test2.py', ['print(\"Hello, World!\")\\n', 'print(\"Hello, World!\")'])\n        ]\n        sims = list(self.sim._iter_sims())\n        self.assertEqual(len(sims), 1)\n        self.assertEqual(sims[0].cmn_lines_nb, 2)\n\nclass TestLineSet(unittest.TestCase):\n    def test_init(self):\n        lines = ['print(\"Hello, World!\")\\n', 'print(\"Hello, World!\")']\n        lineset = similar.LineSet('test.py', lines)\n        self.assertEqual(lineset.name, 'test.py')\n        self.assertEqual(lineset._real_lines, lines)\n        self.assertEqual(len(lineset._stripped_lines), 2)\n\n    def test_str(self):\n        lineset = similar.LineSet('test.py', [])\n        self.assertEqual(str(lineset), '<Lineset for test.py>')\n\n    def test_len(self):\n        lineset = similar.LineSet('test.py', ['print(\"Hello, World!\")\\n', 'print(\"Hello, World!\")'])\n        self.assertEqual(len(lineset), 2)\n\n    def test_getitem(self):\n        lineset = similar.LineSet('test.py', ['print(\"Hello, World!\")\\n', 'print(\"Hello, World!\")'])\n        self.assertEqual(lineset[0].text, 'print(\"Hello, World!\")')\n\n    def test_lt(self):\n        lineset1 = similar.LineSet('test1.py', [])\n        lineset2 = similar.LineSet('test2.py', [])\n        self.assertTrue(lineset1 < lineset2)\n\n    def test_hash(self):\n        lineset = similar.LineSet('test.py', [])\n        self.assertEqual(hash(lineset), id(lineset))\n\n    def test_eq(self):\n        lineset1 = similar.LineSet('test.py', [])\n        lineset2 = similar.LineSet('test.py', [])\n        self.assertTrue(lineset1 == lineset2)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_933": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom sphinx.environment.adapters.indexentries import IndexEntries\n\nclass TestIndexEntries(unittest.TestCase):\n    def setUp(self):\n        self.env = Mock()\n        self.builder = Mock()\n        self.index_entries = IndexEntries(self.env)\n\n    def test_create_index_single(self):\n        domain = Mock()\n        domain.entries = {\n            'test_file': [('single', 'test word', 'test_id', 'test main', None)],\n        }\n        self.env.get_domain.return_value = domain\n        self.builder.get_relative_uri.return_value = 'test_uri'\n        result = self.index_entries.create_index(self.builder)\n        self.assertEqual(result, [('test word', [([('test main', 'test_uri')], {}, None)])])\n\n    def test_create_index_pair(self):\n        domain = Mock()\n        domain.entries = {\n            'test_file': [('pair', 'test word1 test word2', 'test_id', 'test main', None)],\n        }\n        self.env.get_domain.return_value = domain\n        self.builder.get_relative_uri.return_value = 'test_uri'\n        result = self.index_entries.create_index(self.builder)\n        self.assertEqual(result, [('test word1', [([('test main', 'test_uri')], {'test word2': [[('test main', 'test_uri')], {}, None]}, None)]),\n                                  ('test word2', [([('test main', 'test_uri')], {'test word1': [[('test main', 'test_uri')], {}, None]}, None)])])\n\n    # Add more tests for other cases (triple, see, seealso) as needed\n"], "sample_317": ["\nimport unittest\nimport datetime\nfrom django.utils import feedgenerator\n\nclass TestFeedGenerator(unittest.TestCase):\n\n    def setUp(self):\n        self.feed = feedgenerator.Rss201rev2Feed(\n            title=\"Test Feed\",\n            link=\"http://test.com\",\n            description=\"Test description\"\n        )\n\n    def test_rfc2822_date(self):\n        date = datetime.datetime(2022, 1, 1, 12, 0, 0)\n        self.assertEqual(feedgenerator.rfc2822_date(date), \"Sat, 01 Jan 2022 12:00:00 -0000\")\n\n    def test_rfc3339_date(self):\n        date = datetime.datetime(2022, 1, 1, 12, 0, 0)\n        self.assertEqual(feedgenerator.rfc3339_date(date), \"2022-01-01T12:00:00Z\")\n\n    def test_get_tag_uri(self):\n        url = \"http://test.com/test\"\n        date = datetime.datetime(2022, 1, 1, 12, 0, 0)\n        self.assertEqual(feedgenerator.get_tag_uri(url, date), \"tag:test.com,2022-01-01:/test/\")\n\n    def test_add_item(self):\n        self.feed.add_item(title=\"Test Item\", link=\"http://test.com/item\", description=\"Test description\")\n        self.assertEqual(self.feed.num_items(), 1)\n\n    def test_latest_post_date(self):\n        self.feed.add_item(title=\"Test Item 1\", link=\"http://test.com/item1\", description=\"Test description 1\", pubdate=datetime.datetime(2022, 1, 1, 12, 0, 0))\n        self.feed.add_item(title=\"Test Item 2\", link=\"http://test.com/item2\", description=\"Test description 2\", pubdate=datetime.datetime(2022, 1, 2, 12, 0, 0))\n        self.assertEqual(self.feed.latest_post_date(), datetime.datetime(2022, 1, 2, 12, 0, 0))\n\n    def test_write(self):\n        self.feed.add_item(title=\"Test Item\", link=\"http://test.com/item\", description=\"Test description\")\n        output = self.feed.writeString('utf-8')\n        self.assertIn(\"Test Feed\", output)\n        self.assertIn(\"Test Item\", output)\n"], "sample_216": ["\nfrom django.db import models\nfrom django.db.migrations.operations import utils\nfrom django.db.migrations.state import ProjectState\nfrom django.test import TestCase\n\nclass TestUtils(TestCase):\n    def setUp(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=100)\n\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            author = models.ForeignKey(Author, on_delete=models.CASCADE)\n\n        class Review(models.Model):\n            book = models.ForeignKey(Book, on_delete=models.CASCADE, through='BookReview')\n\n        class BookReview(models.Model):\n            book = models.ForeignKey(Book, on_delete=models.CASCADE)\n            reviewer = models.ForeignKey(Author, on_delete=models.CASCADE)\n\n        self.state = ProjectState()\n        self.state.add_model(Author)\n        self.state.add_model(Book)\n        self.state.add_model(Review)\n        self.state.add_model(BookReview)\n\n    def test_resolve_relation(self):\n        self.assertEqual(utils.resolve_relation(models.ForeignKey, 'test', 'author'), ('test', 'author'))\n        self.assertEqual(utils.resolve_relation('test.Author'), ('test', 'author'))\n        self.assertEqual(utils.resolve_relation('self'), ('test', 'author'))\n\n    def test_field_references(self):\n        author_field = self.state.models[('test', 'author')].fields['name']\n        self.assertFalse(utils.field_references(('test', 'author'), author_field, ('test', 'book'), 'title'))\n\n        book_field = self.state.models[('test', 'book')].fields['author']\n        self.assertTrue(utils.field_references(('test', 'book'), book_field, ('test', 'author'), 'name'))\n\n    def test_get_references(self):\n        references = list(utils.get_references(self.state, ('test', 'author')))\n        self.assertEqual(len(references), 2)\n\n    def test_field_is_referenced(self):\n        self.assertTrue(utils.field_is_referenced(self.state, ('test', 'author'), ('name',)))\n        self.assertFalse(utils.field_is_referenced(self.state, ('test', 'author'), ('title',)))\n"], "sample_1108": ["\nimport unittest\nfrom sympy import symbols, pi, sqrt, tan, exp, sin, cos, Matrix, I, Function, Piecewise, And, Or, Not, S, Rational, Infinity, oo, zoo, nan\nfrom sympy.printing.pycode import (MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter, SymPyPrinter)\n\nclass TestSympyPycode(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n        self.printer = PythonCodePrinter()\n        self.numpy_printer = NumPyPrinter()\n        self.mpmath_printer = MpmathPrinter()\n        self.scipy_printer = SciPyPrinter()\n        self.sympy_printer = SymPyPrinter()\n\n    def test_python_code_printer(self):\n        self.assertEqual(self.printer.doprint(tan(self.x) + 1), \"math.tan(x) + 1\")\n        self.assertEqual(self.printer.doprint(sqrt(self.x)), \"math.sqrt(x)\")\n        self.assertEqual(self.printer.doprint(exp(self.x)), \"math.exp(x)\")\n        self.assertEqual(self.printer.doprint(sin(self.x)), \"math.sin(x)\")\n        self.assertEqual(self.printer.doprint(cos(self.x)), \"math.cos(x)\")\n        self.assertEqual(self.printer.doprint(Matrix([[1, 2], [3, 4]])), \"Matrix([[1, 2], [3, 4]])\")\n        self.assertEqual(self.printer.doprint(I), \"1j\")\n        self.assertEqual(self.printer.doprint(Function('f')(self.x)), \"f(x)\")\n        self.assertEqual(self.printer.doprint(Piecewise((1, self.x > 0), (0, True))), \"(1 if x > 0 else None)\")\n        self.assertEqual(self.printer.doprint(And(self.x > 0, self.x < 1)), \"(x > 0 and x < 1)\")\n        self.assertEqual(self.printer.doprint(Or(self.x > 0, self.x < 1)), \"(x > 0 or x < 1)\")\n        self.assertEqual(self.printer.doprint(Not(self.x > 0)), \"not(x > 0)\")\n        self.assertEqual(self.printer.doprint(Rational(1, 2)), \"1/2\")\n        self.assertEqual(self.printer.doprint(Infinity), \"float('inf')\")\n        self.assertEqual(self.printer.doprint(-Infinity), \"float('-inf')\")\n        self.assertEqual(self.printer.doprint(oo), \"float('inf')\")\n        self.assertEqual(self.printer.doprint(-oo), \"float('-inf')\")\n        self.assertEqual(self.printer.doprint(zoo), \"float('nan')\")\n        self.assertEqual(self.printer.doprint(nan), \"float('nan')\")\n\n    def test_numpy_printer(self):\n        self.assertEqual(self.numpy_printer.doprint(tan(self.x) + 1), \"numpy.tan(x) + 1\")\n        self.assertEqual(self.numpy_printer.doprint(sqrt(self.x)), \"numpy.sqrt(x)\")\n        self.assertEqual(self.numpy_printer.doprint(exp(self.x)), \"numpy.exp(x)\")\n        self.assertEqual(self.numpy_printer.doprint(sin(self.x)), \"numpy.sin(x)\")\n        self.assertEqual(self.numpy_printer.doprint(cos(self.x)), \"numpy.cos(x)\")\n        self.assertEqual(self.numpy_printer.doprint(Matrix([[1, 2], [3, 4]])), \"numpy.array([[1, 2], [3, 4]])\")\n        self.assertEqual(self.numpy_printer.doprint(I), \"(0+1j)\")\n        self.assertEqual(self.numpy_printer.doprint(Function('f')(self.x)), \"f(x)\")\n        self.assertEqual(self.numpy_printer.doprint(Piecewise((1, self.x > 0), (0, True))), \"numpy.select([x > 0], [1], default=numpy.nan)\")\n        self.assertEqual(self.numpy_printer.doprint(And(self.x > 0, self.x < 1)), \"numpy.logical_and(x > 0, x < 1)\")\n        self.assertEqual(self.numpy_printer.doprint(Or(self.x > 0, self.x < 1)), \"numpy.logical_or(x > 0, x < 1)\")\n        self.assertEqual(self.numpy_printer.doprint(Not(self.x > 0)), \"numpy.logical_not(x > 0)\")\n        self.assertEqual(self.numpy_printer.doprint(Rational(1, 2)), \"1/2\")\n        self.assertEqual(self.numpy_printer.doprint(Infinity), \"numpy.PINF\")\n        self.assertEqual(self.numpy_printer.doprint(-Infinity), \"numpy.NINF\")\n        self.assertEqual(self.numpy_printer.doprint(oo), \"numpy.PINF\")\n        self.assertEqual(self.numpy_printer.doprint(-oo), \"numpy.NINF\")\n        self.assertEqual(self.numpy_printer.doprint(zoo), \"numpy.nan\")\n        self.assertEqual(self.numpy_printer.doprint(nan), \"numpy.nan\")\n\n    def test_mpmath_printer(self):\n        self.assertEqual(self.mpmath_printer.doprint(tan(self.x) + 1), \"mpmath.tan(x) + 1\")\n        self.assertEqual(self.mpmath_printer.doprint(sqrt(self.x)), \"mpmath.sqrt(x)\")\n        self.assertEqual(self.mpmath_printer.doprint(exp(self.x)), \"mpmath.exp(x)\")\n        self.assertEqual(self.mpmath_printer.doprint(sin(self.x)), \"mpmath.sin(x)\")\n        self.assertEqual(self.mpmath_printer.doprint(cos(self.x)), \"mpmath.cos(x)\")\n        self.assertEqual(self.mpmath_printer.doprint(Matrix([[1, 2], [3, 4]])), \"Matrix([[1, 2], [3, 4]])\")\n        self.assertEqual(self.mpmath_printer.doprint(I), \"mpmath.mpc(0, 1)\")\n        self.assertEqual(self.mpmath_printer.doprint(Function('f')(self.x)), \"f(x)\")\n        self.assertEqual(self.mpmath_printer.doprint(Piecewise((1, self.x > 0), (0, True))), \"mpmath.select([x > 0], [1], default=mpmath.nan)\")\n        self.assertEqual(self.mpmath_printer.doprint(And(self.x > 0, self.x < 1)), \"mpmath.logical_and(x > 0, x < 1)\")\n        self.assertEqual(self.mpmath_printer.doprint(Or(self.x > 0, self.x < 1)), \"mpmath.logical_or(x > 0, x < 1)\")\n        self.assertEqual(self.mpmath_printer.doprint(Not(self.x > 0)), \"mpmath.logical_not(x > 0)\")\n        self.assertEqual(self.mpmath_printer.doprint(Rational(1, 2)), \"mpmath.mpf(1)/mpmath.mpf(2)\")\n        self.assertEqual(self.mpmath_printer.doprint(Infinity), \"mpmath.inf\")\n        self.assertEqual(self.mpmath_printer.doprint(-Infinity), \"mpmath.ninf\")\n        self.assertEqual(self.mpmath_printer.doprint(oo), \"mpmath.inf\")\n        self.assertEqual(self.mpmath_printer.doprint(-oo), \"mpmath.ninf\")\n        self.assertEqual(self.mpmath_printer.doprint(zoo), \"mpmath.nan\")\n        self.assertEqual(self.mpmath_printer.doprint(nan), \"mpmath.nan\")\n\n    def test_scipy_printer(self):\n        self.assertEqual(self.scipy_printer.doprint(tan(self.x) + 1), \"numpy.tan(x) + 1\")\n        self.assertEqual(self.scipy_printer.doprint(sqrt(self.x)), \"numpy.sqrt(x)\")\n        self.assertEqual(self.scipy_printer.doprint(exp(self.x)), \"numpy.exp(x)\")\n        self.assertEqual(self.scipy_printer.doprint(sin(self.x)), \"numpy.sin(x)\")\n        self.assertEqual(self.scipy_printer.doprint(cos(self.x)), \"numpy.cos(x)\")\n        self.assertEqual(self.scipy_printer.doprint(Matrix([[1, 2], [3, 4]])), \"numpy.array([[1, 2], [3, 4]])\")\n        self.assertEqual(self.scipy_printer.doprint(I), \"(0+1j)\")\n        self.assertEqual(self.scipy_printer.doprint(Function('f')(self.x)), \"f(x)\")\n        self.assertEqual(self.scipy_printer.doprint(Piecewise((1, self.x > 0), (0, True))), \"numpy.select([x > 0], [1], default=numpy.nan)\")\n        self.assertEqual(self.scipy_printer.doprint(And(self.x > 0, self.x < 1)), \"numpy.logical_and(x > 0, x < 1)\")\n        self.assertEqual(self.scipy_printer.doprint(Or(self.x > 0, self.x < 1)), \"numpy.logical_or(x > 0, x < 1)\")\n        self.assertEqual(self.scipy_printer.doprint(Not(self.x > 0)), \"numpy.logical_not(x > 0)\")\n        self.assertEqual(self.scipy_printer.doprint(Rational(1, 2)), \"1/2\")\n        self.assertEqual(self.scipy_printer.doprint(Infinity), \"numpy.PINF\")\n        self.assertEqual(self.scipy_printer.doprint(-Infinity), \"numpy.NINF\")\n        self.assertEqual(self.scipy_printer.doprint(oo), \"numpy.PINF\")\n        self.assertEqual(self.scipy_printer.doprint(-oo), \"numpy.NINF\")\n        self.assertEqual(self.scipy_printer.doprint(zoo), \"numpy.nan\")\n        self.assertEqual(self.scipy_printer.doprint(nan), \"numpy.nan\")\n\n    def test_sympy_printer(self):\n        self.assertEqual(self.sympy_printer.doprint(tan(self.x) + 1), \"sympy.tan(x) + 1\")\n        self.assertEqual(self.sympy_printer.doprint(sqrt(self.x)), \"sympy.sqrt(x)\")\n        self.assertEqual(self.sympy_printer.doprint(exp(self.x)), \"sympy.exp(x)\")\n        self.assertEqual(self.sympy_printer.doprint(sin(self.x)), \"sympy.sin(x)\")\n        self.assertEqual(self.sympy_printer.doprint(cos(self.x)), \"sympy.cos(x)\")\n        self.assertEqual(self.sympy_printer.doprint(Matrix([[1, 2], [3, 4]])), \"Matrix([[1, 2], [3, 4]])\")\n        self.assertEqual(self.sympy_printer.doprint(I), \"I\")\n        self.assertEqual(self.sympy_printer.doprint(Function('f')(self.x)), \"f(x)\")\n        self.assertEqual(self.sympy_printer.doprint(Piecewise((1, self.x > 0), (0, True))), \"Piecewise((1, x > 0), (0, True))\")\n        self.assertEqual(self.sympy_printer.doprint(And(self.x > 0, self.x < 1)), \"And(x > 0, x < 1)\")\n        self.assertEqual(self.sympy_printer.doprint(Or(self.x > 0, self.x < 1)), \"Or(x > 0, x < 1)\")\n        self.assertEqual(self.sympy_printer.doprint(Not(self.x > 0)), \"Not(x > 0)\")\n        self.assertEqual(self.sympy_printer.doprint(Rational(1, 2)), \"Rational(1, 2)\")\n        self.assertEqual(self.sympy_printer.doprint(Infinity), \"oo\")\n        self.assertEqual(self.sympy_printer.doprint(-Infinity), \"-oo\")\n        self.assertEqual(self.sympy_printer.doprint(oo), \"oo\")\n        self.assertEqual(self.sympy_printer.doprint(-oo), \"-oo\")\n        self.assertEqual(self.sympy_printer.doprint(zoo), \"zoo\")\n        self.assertEqual(self.sympy_printer.doprint(nan), \"nan\")\n"], "sample_1032": ["\nimport unittest\nfrom sympy import symbols, S, Max, Min, sqrt, cbrt, root, real_root, Rational, I, rootof, Eq, oo, Heaviside, Piecewise\n\nclass TestMiscellaneousFunctions(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y, self.n = symbols('x y n', positive=True)\n\n    def test_sqrt(self):\n        self.assertEqual(sqrt(self.x), self.x**S.Half)\n        self.assertEqual(sqrt(self.x)**2, self.x)\n\n    def test_cbrt(self):\n        self.assertEqual(cbrt(self.x), self.x**Rational(1, 3))\n        self.assertEqual(cbrt(self.x)**3, self.x)\n\n    def test_root(self):\n        self.assertEqual(root(self.x, self.n), self.x**(1/self.n))\n        self.assertEqual(root(self.x, self.n, 2), self.x**(1/self.n) * (-1)**(2/self.n))\n\n    def test_real_root(self):\n        self.assertEqual(real_root(-8, 3), -2)\n        self.assertEqual(real_root(-32, 5), -2)\n        self.assertEqual(real_root(self.x**2 - 1, 2), Max(-1, 1))\n\n    def test_max(self):\n        self.assertEqual(Max(self.x, -2).subs(self.x, 3), 3)\n        self.assertEqual(Max(self.n, 8, self.x, 7, -oo), Max(8, self.x))\n        self.assertTrue(Max(self.x, Max(self.y, self.n)) == Max(self.x, self.y, self.n))\n\n    def test_min(self):\n        self.assertEqual(Min(self.x, -2).subs(self.x, 3), -2)\n        self.assertEqual(Min(self.n, 8, self.x, -7, self.x, oo), Min(self.n, -7))\n\n    def test_rewrite_as_Heaviside(self):\n        self.assertEqual(Max(self.x, self.y).rewrite(Heaviside), self.x*Heaviside(self.x - self.y) + self.y*Heaviside(self.y - self.x))\n        self.assertEqual(Min(self.x, self.y).rewrite(Heaviside), self.x*Heaviside(self.x - self.y) + self.y*Heaviside(self.y - self.x))\n\n    def test_rewrite_as_Piecewise(self):\n        self.assertEqual(Max(self.x, self.y).rewrite(Piecewise), Piecewise((self.x, self.x >= self.y), (self.y, True)))\n        self.assertEqual(Min(self.x, self.y).rewrite(Piecewise), Piecewise((self.x, self.x <= self.y), (self.y, True)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_363": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.contrib.admin import widgets\nfrom django.db.models import Model, CharField, UUIDField, CASCADE\nfrom django.urls import reverse, NoReverseMatch\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext as _\nfrom django.contrib.admin.sites import AdminSite\n\nclass TestWidgets(unittest.TestCase):\n\n    def setUp(self):\n        self.admin_site = AdminSite()\n\n    def test_filtered_select_multiple(self):\n        widget = widgets.FilteredSelectMultiple(\"Test\", False)\n        context = widget.get_context(\"test\", [], {})\n        self.assertEqual(context['widget']['attrs']['class'], 'selectfilter')\n\n    def test_admin_date_widget(self):\n        widget = widgets.AdminDateWidget()\n        self.assertEqual(widget.attrs['class'], 'vDateField')\n\n    # similar tests for AdminTimeWidget, AdminSplitDateTime, AdminRadioSelect, AdminFileWidget, etc.\n\n    def test_foreign_key_raw_id_widget(self):\n        rel = Mock()\n        rel.model = Model\n        rel.get_related_field.return_value = CharField()\n        widget = widgets.ForeignKeyRawIdWidget(rel, self.admin_site)\n        # add more assertions based on the expected behavior of the widget\n\n    def test_many_to_many_raw_id_widget(self):\n        rel = Mock()\n        rel.model = Model\n        widget = widgets.ManyToManyRawIdWidget(rel, self.admin_site)\n        # add more assertions based on the expected behavior of the widget\n\n    # similar tests for RelatedFieldWidgetWrapper, AdminTextareaWidget, AdminTextInputWidget, etc.\n\n    def test_admin_url_field_widget(self):\n        widget = widgets.AdminURLFieldWidget()\n        context = widget.get_context(\"test\", \"https://www.example.com\", {})\n        self.assertTrue(context['url_valid'])\n\n    # similar tests for AdminIntegerFieldWidget, AdminBigIntegerFieldWidget, AdminUUIDInputWidget, AutocompleteSelect, AutocompleteSelectMultiple\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_977": ["\nimport unittest\nfrom sympy import MatrixSymbol, Identity, ZeroMatrix, MatrixElement, Matrix, S, ShapeError, SympifyError\nfrom sympy.utilities.pytest import raises\n\nclass TestMatrixExpr(unittest.TestCase):\n    def setUp(self):\n        self.A = MatrixSymbol('A', 3, 4)\n        self.B = MatrixSymbol('B', 4, 3)\n        self.I = Identity(3)\n        self.Z = ZeroMatrix(3, 5)\n\n    def test_matrix_symbol_properties(self):\n        self.assertEqual(self.A.shape, (3, 4))\n        self.assertEqual(self.A.name, 'A')\n        self.assertEqual(self.A.free_symbols, {self.A})\n\n    def test_matrix_symbol_entry(self):\n        self.assertIsInstance(self.A[0, 0], MatrixElement)\n\n    def test_identity_properties(self):\n        self.assertEqual(self.I.rows, 3)\n        self.assertEqual(self.I.cols, 3)\n        self.assertEqual(self.I.shape, (3, 3))\n\n    def test_identity_transpose(self):\n        self.assertEqual(self.I.transpose(), self.I)\n\n    def test_identity_inverse(self):\n        self.assertEqual(self.I.inverse(), self.I)\n\n    def test_zero_matrix_properties(self):\n        self.assertEqual(self.Z.shape, (3, 5))\n\n    def test_zero_matrix_transpose(self):\n        self.assertEqual(self.Z.transpose(), ZeroMatrix(5, 3))\n\n    def test_zero_matrix_entry(self):\n        self.assertEqual(self.Z[0, 0], S.Zero)\n\n    def test_matrix_symbol_multiplication(self):\n        self.assertEqual(self.A * self.B, MatMul(self.A, self.B))\n\n    def test_matrix_symbol_addition(self):\n        self.assertEqual(self.A + self.A, MatAdd(self.A, self.A))\n\n    def test_matrix_symbol_subtraction(self):\n        self.assertEqual(self.A - self.A, MatAdd(self.A, -self.A))\n\n    def test_matrix_symbol_power(self):\n        self.assertEqual(self.I ** 2, self.I)\n        with raises(ShapeError):\n            self.Z ** 2\n\n    def test_matrix_symbol_sympify(self):\n        self.assertEqual(Matrix('A') + 1, self.A + 1)\n\n    def test_matrix_symbol_sympify_error(self):\n        with raises(SympifyError):\n            Matrix('A') + 'B'\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_263": ["\nfrom unittest.mock import patch, MagicMock\nfrom io import StringIO\nfrom django.core.management import call_command\nfrom django.core.management.commands.dumpdata import Command, ProxyModelWarning\nfrom django.test import TestCase\n\nclass TestDumpdataCommand(TestCase):\n    def setUp(self):\n        self.command = Command()\n\n    @patch('django.core.serializers.serialize')\n    def test_handle_method(self, mock_serialize):\n        out = StringIO()\n        call_command('dumpdata', 'app_label.ModelName', stdout=out)\n        self.assertTrue(mock_serialize.called)\n\n    @patch('django.core.management.commands.dumpdata.parse_apps_and_model_labels')\n    def test_parse_apps_and_model_labels_called(self, mock_parse):\n        options = {\n            'format': 'json',\n            'indent': None,\n            'database': 'default',\n            'exclude': [],\n            'output': None,\n            'traceback': False,\n            'use_natural_foreign_keys': False,\n            'use_natural_primary_keys': False,\n            'use_base_manager': False,\n            'primary_keys': None,\n        }\n        self.command.handle('app_label.ModelName', **options)\n        mock_parse.assert_called_once_with(options['exclude'])\n\n    @patch('warnings.warn')\n    def test_proxy_model_warning(self, mock_warn):\n        # Create a proxy model for testing\n        class ProxyModel(Model):\n            class Meta:\n                proxy = True\n\n        app_config = MagicMock()\n        app_config.get_model.return_value = ProxyModel\n        app_config.get_models.return_value = [ProxyModel]\n        app_list = {app_config: None}\n\n        # Call the get_objects function with the proxy model\n        list(self.command.get_objects(app_list))\n\n        # Check that a warning was raised\n        mock_warn.assert_called_with(\n            \"%s is a proxy model and won't be serialized.\" % ProxyModel._meta.label,\n            category=ProxyModelWarning,\n        )\n"], "sample_18": ["\nimport unittest\nfrom astropy.wcs import WCS\nfrom astropy.io import fits\n\nclass TestWCS(unittest.TestCase):\n    def setUp(self):\n        self.header = fits.Header.fromtext(\"\"\"\n        SIMPLE  =                    T / conforms to FITS standard\n        BITPIX  =                  -64 / array data type\n        NAXIS   =                    2 / number of array dimensions\n        NAXIS1  =                  100\n        NAXIS2  =                  100\n        CRPIX1  =                 50.5 / Reference pixel along axis 1\n        CRPIX2  =                 50.5 / Reference pixel along axis 2\n        CDELT1  =                    1 / Degrees per pixel along axis 1\n        CDELT2  =                    1 / Degrees per pixel along axis 2\n        CRVAL1  =                  205 / Right ascension at reference point\n        CRVAL2  =                  30.5 / Declination at reference point\n        CTYPE1  = 'RA---TAN'           / Right ascension, gnomonic projection\n        CTYPE2  = 'DEC--TAN'           / Declination, gnomonic projection\n        \"\"\")\n\n    def test_wcs_initialization(self):\n        w = WCS(self.header)\n        self.assertIsInstance(w, WCS)\n\n    def test_pixel_to_world(self):\n        w = WCS(self.header)\n        ra, dec = w.all_pix2world(50, 50, 0)\n        self.assertEqual(ra, 205)\n        self.assertEqual(dec, 30.5)\n\n    def test_world_to_pixel(self):\n        w = WCS(self.header)\n        x, y = w.all_world2pix(205, 30.5, 0)\n        self.assertEqual(x, 50)\n        self.assertEqual(y, 50)\n\n    def test_header_update(self):\n        w = WCS(self.header)\n        w.wcs.crval = [210, 35.5]\n        self.assertEqual(w.wcs.crval[0], 210)\n        self.assertEqual(w.wcs.crval[1], 35.5)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_30": ["\nimport unittest\nfrom astropy.io.votable.tree import Field, Resource, Table, VOTableFile\n\nclass TestVOTableFile(unittest.TestCase):\n\n    def setUp(self):\n        self.votable_file = VOTableFile()\n\n    def test_init(self):\n        self.assertIsNone(self.votable_file.ID)\n        self.assertIsNone(self.votable_file.description)\n        self.assertEqual(self.votable_file.version, '1.4')\n\n    def test_version_setter(self):\n        self.votable_file.version = '1.3'\n        self.assertEqual(self.votable_file.version, '1.3')\n        with self.assertRaises(ValueError):\n            self.votable_file.version = '2.0'\n\n    def test_coordinate_systems(self):\n        self.assertEqual(len(self.votable_file.coordinate_systems), 0)\n\n    def test_time_systems(self):\n        self.assertEqual(len(self.votable_file.time_systems), 0)\n\n    # Add more tests for other classes and methods here\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_458": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.template.defaultfilters import (\n    addslashes, capfirst, escapejs_filter, floatformat, iriencode, linenumbers,\n    lower, make_list, slugify, stringformat, title, truncatechars,\n    truncatechars_html, truncatewords, truncatewords_html, upper, urlencode,\n    urlize, urlizetrunc, wordcount, wordwrap, ljust, rjust, center, cut,\n    escape_filter, force_escape, linebreaks_filter, linebreaksbr, safe, safeseq,\n    striptags, dictsort, dictsortreversed, first, join, last, length, length_is,\n    random, slice_filter, unordered_list, add, get_digit, date, time,\n    timesince_filter, timeuntil_filter, default, default_if_none, divisibleby,\n    yesno, filesizeformat, pluralize, phone2numeric_filter, pprint\n)\nfrom django.utils.safestring import mark_safe\n\nclass DefaultFiltersTest(unittest.TestCase):\n    def test_addslashes(self):\n        self.assertEqual(addslashes('foo\"bar\\'baz'), 'foo\\\\\"bar\\\\\\'baz')\n\n    def test_capfirst(self):\n        self.assertEqual(capfirst('foo bar'), 'Foo bar')\n\n    def test_escapejs_filter(self):\n        self.assertEqual(escapejs_filter('foo<script>'), 'foo\\\\u003Cscript\\\\u003E')\n\n    # Add more tests for the remaining filters in a similar manner\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_924": ["\nimport unittest\nfrom unittest.mock import patch\nfrom importlib.machinery import ModuleSpec\nfrom sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock, MockLoader, MockFinder\n\nclass TestMockModuleAndObject(unittest.TestCase):\n    def test_mock_module_attributes(self):\n        mock_module = _MockModule('mock_module')\n        self.assertEqual(mock_module.__file__, os.devnull)\n        self.assertTrue(hasattr(mock_module, '__sphinx_mock__'))\n        self.assertTrue(hasattr(mock_module, '__getattr__'))\n        self.assertTrue(hasattr(mock_module, '__repr__'))\n\n    def test_mock_object_attributes(self):\n        mock_object = _MockObject()\n        self.assertEqual(mock_object.__qualname__, '')\n        self.assertTrue(hasattr(mock_object, '__sphinx_mock__'))\n        self.assertTrue(hasattr(mock_object, '__len__'))\n        self.assertTrue(hasattr(mock_object, '__contains__'))\n        self.assertTrue(hasattr(mock_object, '__iter__'))\n        self.assertTrue(hasattr(mock_object, '__getitem__'))\n        self.assertTrue(hasattr(mock_object, '__getattr__'))\n        self.assertTrue(hasattr(mock_object, '__call__'))\n        self.assertTrue(hasattr(mock_object, '__repr__'))\n\n    def test_mock_context_manager(self):\n        with mock(['target.module.name']):\n            self.assertIn('target.module.name', sys.modules)\n        self.assertNotIn('target.module.name', sys.modules)\n\nclass TestMockLoaderAndFinder(unittest.TestCase):\n    def test_mock_loader(self):\n        finder = MockFinder(['target.module.name'])\n        loader = MockLoader(finder)\n        spec = ModuleSpec('target.module.name', loader)\n        module = loader.create_module(spec)\n        self.assertIsInstance(module, _MockModule)\n        self.assertEqual(module.__name__, 'target.module.name')\n        self.assertIn('target.module.name', finder.mocked_modules)\n\n    def test_mock_finder(self):\n        finder = MockFinder(['target.module.name'])\n        spec = finder.find_spec('target.module.name')\n        self.assertIsInstance(spec.loader, MockLoader)\n        self.assertEqual(spec.name, 'target.module.name')\n\n    def test_mock_finder_invalidate_caches(self):\n        finder = MockFinder(['target.module.name'])\n        finder.mocked_modules.append('target.module.name')\n        sys.modules['target.module.name'] = 'mock_module'\n        finder.invalidate_caches()\n        self.assertNotIn('target.module.name', sys.modules)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_506": ["\nimport unittest\nfrom matplotlib.spines import Spines, Spine, SpinesProxy\nfrom matplotlib.axes import Axes\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.path as mpath\n\nclass TestSpines(unittest.TestCase):\n\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.spines = Spines(left=Spine.linear_spine(self.ax, 'left'),\n                             right=Spine.linear_spine(self.ax, 'right'),\n                             top=Spine.linear_spine(self.ax, 'top'),\n                             bottom=Spine.linear_spine(self.ax, 'bottom'))\n\n    def test_spines_dict_access(self):\n        self.assertIsInstance(self.spines['left'], Spine)\n        self.assertIsInstance(self.spines['right'], Spine)\n        self.assertIsInstance(self.spines['top'], Spine)\n        self.assertIsInstance(self.spines['bottom'], Spine)\n\n    def test_spines_attr_access(self):\n        self.assertIsInstance(self.spines.left, Spine)\n        self.assertIsInstance(self.spines.right, Spine)\n        self.assertIsInstance(self.spines.top, Spine)\n        self.assertIsInstance(self.spines.bottom, Spine)\n\n    def test_spines_proxy_broadcast(self):\n        self.spines[['top', 'right']].set_color('red')\n        self.assertEqual(self.spines['top'].get_edgecolor(), 'red')\n        self.assertEqual(self.spines['right'].get_edgecolor(), 'red')\n\n    def test_spines_proxy_all_spines(self):\n        self.spines[:].set_color('blue')\n        for spine in self.spines.values():\n            self.assertEqual(spine.get_edgecolor(), 'blue')\n\n    def test_spines_proxy_invalid_method(self):\n        with self.assertRaises(AttributeError):\n            self.spines[:].get_color()\n\n    def test_spines_proxy_unsupported_method(self):\n        with self.assertRaises(AttributeError):\n            self.spines['left'].set_patch_arc(0, 0, 0, 0)\n\n    def test_spines_proxy_unknown_spine(self):\n        with self.assertRaises(KeyError):\n            self.spines['unknown']\n\n    def test_spines_proxy_unsupported_slice(self):\n        with self.assertRaises(ValueError):\n            self.spines['left':'right']\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_256": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.core.servers.basehttp import (\n    WSGIServer,\n    ThreadedWSGIServer,\n    ServerHandler,\n    WSGIRequestHandler,\n    get_internal_wsgi_application,\n    is_broken_pipe_error,\n    run\n)\nfrom django.core.exceptions import ImproperlyConfigured\n\nclass TestBaseHTTP(unittest.TestCase):\n\n    def setUp(self):\n        self.mock_settings = Mock()\n        self.mock_settings.WSGI_APPLICATION = 'mock.application'\n\n    @patch('django.core.servers.basehttp.settings', new_callable=Mock)\n    @patch('django.core.servers.basehttp.get_wsgi_application')\n    @patch('django.core.servers.basehttp.import_string')\n    def test_get_internal_wsgi_application(self, mock_import_string, mock_get_wsgi_application, mock_settings):\n        mock_settings.return_value = self.mock_settings\n        mock_import_string.return_value = 'mocked_application'\n        mock_get_wsgi_application.return_value = 'mocked_default_application'\n\n        result = get_internal_wsgi_application()\n        mock_import_string.assert_called_once_with(self.mock_settings.WSGI_APPLICATION)\n        self.assertEqual(result, 'mocked_application')\n\n        mock_import_string.side_effect = ImportError()\n        self.mock_settings.WSGI_APPLICATION = None\n        result = get_internal_wsgi_application()\n        mock_get_wsgi_application.assert_called_once()\n        self.assertEqual(result, 'mocked_default_application')\n\n        self.mock_settings.WSGI_APPLICATION = 'invalid.application'\n        mock_import_string.side_effect = ImportError()\n        with self.assertRaises(ImproperlyConfigured):\n            get_internal_wsgi_application()\n\n    def test_is_broken_pipe_error(self):\n        with patch('django.core.servers.basehttp.sys.exc_info', return_value=(BrokenPipeError, None, None)):\n            self.assertTrue(is_broken_pipe_error())\n\n        with patch('django.core.servers.basehttp.sys.exc_info', return_value=(ConnectionAbortedError, None, None)):\n            self.assertTrue(is_broken_pipe_error())\n\n        with patch('django.core.servers.basehttp.sys.exc_info', return_value=(ConnectionResetError, None, None)):\n            self.assertTrue(is_broken_pipe_error())\n\n        with patch('django.core.servers.basehttp.sys.exc_info', return_value=(OSError, None, None)):\n            self.assertFalse(is_broken_pipe_error())\n\n    @patch('socketserver.TCPServer.server_bind')\n    def test_WSGIServer(self, mock_server_bind):\n        server = WSGIServer(('localhost', 8000), Mock())\n        server.server_bind()\n        mock_server_bind.assert_called_once()\n\n    @patch('socketserver.TCPServer.server_bind')\n    def test_ThreadedWSGIServer(self, mock_server_bind):\n        server = ThreadedWSGIServer(('localhost', 8000), Mock())\n        server.server_bind()\n        mock_server_bind.assert_called_once()\n\n    @patch('django.core.servers.basehttp.super')\n    def test_handle_error(self, mock_super):\n        server = WSGIServer(('localhost', 8000), Mock())\n        with patch('django.core.servers.basehttp.sys.exc_info', return_value=(OSError, None, None)):\n            server.handle_error(Mock(), Mock())\n            mock_super.assert_called_once()\n\n    # Add more test methods for ServerHandler, WSGIRequestHandler, and run\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_480": ["\nfrom unittest import mock\nfrom django.test import TestCase\nfrom django.core import exceptions, checks\nfrom django.db import NotSupportedError, connections, router\nfrom django.db.models import expressions\nfrom django.db.models.fields import TextField\nfrom django.db.models.fields.json import (\n    JSONField, DataContains, ContainedBy, HasKey, HasKeys, HasAnyKeys, JSONExact,\n    JSONIContains, KeyTransform, KeyTextTransform, KeyTransformFactory,\n    KeyTransformIsNull, KeyTransformIn, KeyTransformExact, KeyTransformIExact,\n    KeyTransformIContains, KeyTransformStartsWith, KeyTransformIStartsWith,\n    KeyTransformEndsWith, KeyTransformIEndsWith, KeyTransformRegex,\n    KeyTransformIRegex, KeyTransformLt, KeyTransformLte, KeyTransformGt,\n    KeyTransformGte\n)\n\nclass TestJSONField(TestCase):\n\n    def setUp(self):\n        self.field = JSONField()\n\n    def test_check(self):\n        with mock.patch('django.db.models.fields.json.connections') as mock_connections:\n            mock_connections['default'].features.supports_json_field = False\n            errors = self.field.check(databases=['default'])\n            self.assertEqual(len(errors), 1)\n            self.assertEqual(errors[0].id, 'fields.E180')\n\n    def test_get_db_prep_value(self):\n        value = expressions.Value('{\"key\": \"value\"}')\n        with self.assertRaises(ValueError):\n            self.field.get_db_prep_value(value, connections['default'])\n\n    # Add more tests for other methods in JSONField, KeyTransform, etc.\n\nclass TestDataContains(TestCase):\n\n    def test_as_sql(self):\n        with self.assertRaises(NotSupportedError):\n            DataContains('field', 'value').as_sql(None, connections['default'])\n\n# Add more tests for other lookup classes\n"], "sample_659": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nimport pytest\nfrom _pytest.junitxml import LogXML, mangle_test_address, _NodeReporter, _check_record_param_type\n\nclass TestJunitxml(unittest.TestCase):\n    def setUp(self):\n        self.log_xml = LogXML('/tmp/test.xml', 'test_prefix', 'test_suite', 'no', 'total', 'xunit1', True)\n        self.report = MagicMock()\n        self.report.nodeid = 'test::test_node'\n        self.report.location = ('test.py', 10)\n        self.report.longrepr = 'Test failure message'\n        self.report.passed = True\n        self.report.failed = False\n        self.report.skipped = False\n\n    def test_mangle_test_address(self):\n        self.assertEqual(mangle_test_address('test::test_node'), ['test', 'test_node'])\n\n    def test_node_reporter(self):\n        reporter = self.log_xml.node_reporter(self.report)\n        self.assertIsInstance(reporter, _NodeReporter)\n\n    def test_add_stats(self):\n        self.log_xml.add_stats('passed')\n        self.assertEqual(self.log_xml.stats['passed'], 1)\n\n    @patch('_pytest.junitxml._NodeReporter.append_pass')\n    def test_pytest_runtest_logreport(self, mock_append_pass):\n        self.log_xml.pytest_runtest_logreport(self.report)\n        mock_append_pass.assert_called_once()\n\n    def test_update_testcase_duration(self):\n        self.report.duration = 1.234\n        self.log_xml.update_testcase_duration(self.report)\n        reporter = self.log_xml.node_reporter(self.report)\n        self.assertEqual(reporter.duration, 1.234)\n\n    @patch('_pytest.junitxml._NodeReporter.append_collect_error')\n    def test_pytest_collectreport(self, mock_append_collect_error):\n        self.report.passed = False\n        self.report.failed = True\n        self.log_xml.pytest_collectreport(self.report)\n        mock_append_collect_error.assert_called_once()\n\n    def test_add_global_property(self):\n        self.log_xml.add_global_property('test_key', 'test_value')\n        self.assertEqual(self.log_xml.global_properties, [('test_key', 'test_value')])\n\n    def test_check_record_param_type(self):\n        with self.assertRaises(TypeError):\n            _check_record_param_type('test_param', 123)\n        _check_record_param_type('test_param', 'test_value')\n"], "sample_843": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nimport sys\nimport platform\nfrom sklearn.utils._show_versions import _get_sys_info, _get_deps_info, _get_blas_info\n\nclass TestShowVersions(unittest.TestCase):\n    @patch('sys.version')\n    @patch('platform.platform')\n    def test_get_sys_info(self, mock_platform, mock_sys_version):\n        mock_sys_version.replace.return_value = 'Python 3.8.5'\n        mock_platform.return_value = 'Linux-5.4.0-80-generic-x86_64-with-glibc2.29'\n\n        result = _get_sys_info()\n\n        self.assertEqual(result['python'], 'Python 3.8.5')\n        self.assertEqual(result['executable'], sys.executable)\n        self.assertEqual(result['machine'], 'Linux-5.4.0-80-generic-x86_64-with-glibc2.29')\n\n    @patch.dict(sys.modules, {'pip': Mock(__version__='21.0.1'), 'numpy': Mock(__version__='1.19.5')})\n    def test_get_deps_info(self):\n        result = _get_deps_info()\n\n        self.assertEqual(result['pip'], '21.0.1')\n        self.assertEqual(result['numpy'], '1.19.5')\n        self.assertIsNone(result['setuptools'])\n\n    @patch('sklearn._build_utils.get_blas_info')\n    def test_get_blas_info(self, mock_get_blas_info):\n        mock_get_blas_info.return_value = (['cblas'], {'define_macros': [('FOO', 'BAR')], 'library_dirs': ['/usr/lib']})\n\n        result = _get_blas_info()\n\n        self.assertEqual(result['macros'], 'FOO=BAR')\n        self.assertEqual(result['lib_dirs'], '/usr/lib')\n        self.assertEqual(result['cblas_libs'], 'cblas')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_468": ["\nimport unittest\nfrom django.db.models.sql.query import Query, JoinPromoter\n\nclass TestQueryMethods(unittest.TestCase):\n\n    def setUp(self):\n        self.query = Query(model=None)\n\n    def test_add_filter(self):\n        self.query.add_filter('field1', 'value1')\n        self.assertEqual(self.query.where.children[0].children[0].rhs, 'value1')\n\n    def test_add_q(self):\n        q_object = Q(field2='value2')\n        self.query.add_q(q_object)\n        self.assertEqual(self.query.where.children[0].children[0].rhs, 'value2')\n\n    def test_set_limits(self):\n        self.query.set_limits(low=10, high=20)\n        self.assertEqual(self.query.low_mark, 10)\n        self.assertEqual(self.query.high_mark, 20)\n\n    def test_clear_limits(self):\n        self.query.set_limits(low=10, high=20)\n        self.query.clear_limits()\n        self.assertEqual(self.query.low_mark, 0)\n        self.assertEqual(self.query.high_mark, None)\n\n    def test_clear_ordering(self):\n        self.query.add_ordering('field1')\n        self.query.clear_ordering(force=True)\n        self.assertEqual(self.query.order_by, ())\n\nclass TestJoinPromoterMethods(unittest.TestCase):\n\n    def setUp(self):\n        self.join_promoter = JoinPromoter(connector='AND', num_children=2, negated=False)\n\n    def test_add_votes(self):\n        self.join_promoter.add_votes(['table1', 'table2'])\n        self.assertEqual(self.join_promoter.votes['table1'], 1)\n        self.assertEqual(self.join_promoter.votes['table2'], 1)\n\n    def test_update_join_types(self):\n        self.join_promoter.add_votes(['table1', 'table2'])\n        query = Query(model=None)\n        query.alias_map['table1'] = query.join_class(table_name='table1', parent_alias=None, table_alias='table1', join_type='INNER', join_field=None, nullable=False, filtered_relation=None)\n        query.alias_map['table2'] = query.join_class(table_name='table2', parent_alias=None, table_alias='table2', join_type='INNER', join_field=None, nullable=False, filtered_relation=None)\n        to_demote = self.join_promoter.update_join_types(query)\n        self.assertEqual(to_demote, {'table1', 'table2'})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_267": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.db.backends.sqlite3.base import check_sqlite_version, DatabaseWrapper, SQLiteCursorWrapper, _sqlite_datetime_parse\nfrom django.core.exceptions import ImproperlyConfigured\nfrom sqlite3 import dbapi2 as Database\n\nclass TestSQLiteBackend(unittest.TestCase):\n    @patch('django.db.backends.sqlite3.base.Database.sqlite_version_info', (3, 8, 0))\n    def test_check_sqlite_version_raises_error_for_old_version(self):\n        with self.assertRaises(ImproperlyConfigured):\n            check_sqlite_version()\n\n    @patch('django.db.backends.sqlite3.base.Database.sqlite_version_info', (3, 9, 0))\n    def test_check_sqlite_version_does_not_raise_error_for_new_version(self):\n        try:\n            check_sqlite_version()\n        except ImproperlyConfigured:\n            self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n\n    @patch('django.db.backends.sqlite3.base.Database.connect')\n    def test_get_new_connection(self, mock_connect):\n        wrapper = DatabaseWrapper({'NAME': 'test.db', 'OPTIONS': {}})\n        conn = wrapper.get_new_connection({})\n        self.assertIsInstance(conn, Database.Connection)\n        mock_connect.assert_called_once()\n\n    def test_sqlite_cursor_wrapper_execute(self):\n        mock_cursor = MagicMock()\n        wrapper = SQLiteCursorWrapper(mock_cursor)\n        wrapper.execute('SELECT * FROM table WHERE id = %s', (1,))\n        mock_cursor.execute.assert_called_with('SELECT * FROM table WHERE id = ?', (1,))\n\n    def test_sqlite_datetime_parse(self):\n        dt_str = '2022-01-01 12:00:00'\n        dt = _sqlite_datetime_parse(dt_str)\n        self.assertEqual(dt.year, 2022)\n        self.assertEqual(dt.month, 1)\n        self.assertEqual(dt.day, 1)\n        self.assertEqual(dt.hour, 12)\n        self.assertEqual(dt.minute, 0)\n        self.assertEqual(dt.second, 0)\n\n    # Add more tests as needed to cover the remaining functions and classes\n"], "sample_364": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.urls.conf import include, path\nfrom django.views import View\n\nclass TestURLConf(unittest.TestCase):\n    def test_include_with_tuple(self):\n        arg = (Mock(), 'app_name')\n        result = include(arg)\n        self.assertEqual(result[1], 'app_name')\n        self.assertEqual(result[2], 'app_name')\n\n    def test_include_with_module_str(self):\n        with patch('django.urls.conf.import_module') as mock_import:\n            mock_import.return_value.urlpatterns = [Mock()]\n            result = include('module_str')\n            self.assertEqual(result[0], mock_import.return_value)\n\n    def test_path_with_callable(self):\n        view = Mock()\n        result = path('route', view)\n        self.assertEqual(result.pattern.pattern, 'route')\n        self.assertEqual(result.callback, view)\n\n    def test_path_with_include(self):\n        view = (Mock(), 'app_name', 'namespace')\n        result = path('route', view)\n        self.assertEqual(result.pattern.pattern, 'route')\n        self.assertEqual(result.urlconf_module, view[0])\n        self.assertEqual(result.app_name, 'app_name')\n        self.assertEqual(result.namespace, 'namespace')\n\n    def test_path_with_view_instance(self):\n        view = View()\n        with self.assertRaises(TypeError):\n            path('route', view)\n\n    def test_path_with_invalid_kwargs(self):\n        with self.assertRaises(TypeError):\n            path('route', Mock(), kwargs='invalid')\n\n    def test_path_with_invalid_view(self):\n        with self.assertRaises(TypeError):\n            path('route', 'invalid')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1090": ["\nimport unittest\nfrom sympy import symbols, S\nfrom sympy.core.relational import Equality, Unequality, GreaterThan, LessThan, StrictGreaterThan, StrictLessThan\n\nclass TestRelational(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_equality(self):\n        self.assertEqual(Equality(self.x, self.y), self.x == self.y)\n        self.assertEqual(Equality(self.x, self.x), S.true)\n        self.assertEqual(Equality(self.x, self.x + 1), S.false)\n\n    def test_unequality(self):\n        self.assertEqual(Unequality(self.x, self.y), self.x != self.y)\n        self.assertEqual(Unequality(self.x, self.x), S.false)\n        self.assertEqual(Unequality(self.x, self.x + 1), S.true)\n\n    def test_greater_than(self):\n        self.assertEqual(GreaterThan(self.x, self.y), self.x >= self.y)\n        self.assertEqual(GreaterThan(self.x, self.x), S.true)\n        self.assertEqual(GreaterThan(self.x, self.x + 1), S.false)\n\n    def test_less_than(self):\n        self.assertEqual(LessThan(self.x, self.y), self.x <= self.y)\n        self.assertEqual(LessThan(self.x, self.x), S.true)\n        self.assertEqual(LessThan(self.x + 1, self.x), S.false)\n\n    def test_strict_greater_than(self):\n        self.assertEqual(StrictGreaterThan(self.x, self.y), self.x > self.y)\n        self.assertEqual(StrictGreaterThan(self.x, self.x), S.false)\n        self.assertEqual(StrictGreaterThan(self.x, self.x + 1), S.false)\n\n    def test_strict_less_than(self):\n        self.assertEqual(StrictLessThan(self.x, self.y), self.x < self.y)\n        self.assertEqual(StrictLessThan(self.x, self.x), S.false)\n        self.assertEqual(StrictLessThan(self.x + 1, self.x), S.false)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_100": ["\nfrom django.test import TestCase\nfrom django.db.models import QuerySet, Model, CharField, IntegerField\n\nclass TestQuerySet(TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            char_field = CharField(max_length=10)\n            int_field = IntegerField()\n\n        self.model = TestModel\n        self.qs = QuerySet(self.model)\n\n    def test_filter(self):\n        self.model.objects.create(char_field='test', int_field=1)\n        self.model.objects.create(char_field='test', int_field=2)\n        filtered_qs = self.qs.filter(int_field=1)\n        self.assertEqual(len(filtered_qs), 1)\n        self.assertEqual(filtered_qs[0].char_field, 'test')\n        self.assertEqual(filtered_qs[0].int_field, 1)\n\n    def test_exclude(self):\n        self.model.objects.create(char_field='test', int_field=1)\n        self.model.objects.create(char_field='test', int_field=2)\n        excluded_qs = self.qs.exclude(int_field=1)\n        self.assertEqual(len(excluded_qs), 1)\n        self.assertEqual(excluded_qs[0].char_field, 'test')\n        self.assertEqual(excluded_qs[0].int_field, 2)\n\n    def test_order_by(self):\n        self.model.objects.create(char_field='test', int_field=2)\n        self.model.objects.create(char_field='test', int_field=1)\n        ordered_qs = self.qs.order_by('-int_field')\n        self.assertEqual(ordered_qs[0].int_field, 2)\n        self.assertEqual(ordered_qs[1].int_field, 1)\n\n    def test_count(self):\n        self.model.objects.create(char_field='test', int_field=1)\n        self.model.objects.create(char_field='test', int_field=2)\n        self.assertEqual(self.qs.count(), 2)\n\n    # Add more tests for other methods and edge cases as needed\n"], "sample_487": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.contrib.admin import checks\nfrom django.contrib.admin.options import ModelAdmin, InlineModelAdmin\nfrom django.db import models\nfrom django.core.checks import Error\n\nclass TestModel(models.Model):\n    field1 = models.CharField(max_length=10)\n    field2 = models.ForeignKey('self', on_delete=models.CASCADE)\n\nclass TestModelAdmin(ModelAdmin):\n    model = TestModel\n    fields = ['field1']\n    list_display = ['field1', 'non_existent_field']\n    list_filter = [('field1', MagicMock())]\n    search_fields = ['field1']\n    date_hierarchy = 'field1'\n\nclass TestInlineModelAdmin(InlineModelAdmin):\n    model = TestModel\n    fields = ['field1']\n    exclude = ['field2']\n\nclass TestChecks(unittest.TestCase):\n    def test_check_fields(self):\n        errors = checks.ModelAdminChecks()._check_fields(TestModelAdmin())\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Error)\n        self.assertEqual(errors[0].id, 'admin.E108')\n\n    def test_check_list_display(self):\n        errors = checks.ModelAdminChecks()._check_list_display(TestModelAdmin())\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Error)\n        self.assertEqual(errors[0].id, 'admin.E108')\n\n    def test_check_list_filter(self):\n        errors = checks.ModelAdminChecks()._check_list_filter(TestModelAdmin())\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Error)\n        self.assertEqual(errors[0].id, 'admin.E115')\n\n    def test_check_search_fields(self):\n        errors = checks.ModelAdminChecks()._check_search_fields(TestModelAdmin())\n        self.assertEqual(len(errors), 0)\n\n    def test_check_date_hierarchy(self):\n        errors = checks.ModelAdminChecks()._check_date_hierarchy(TestModelAdmin())\n        self.assertEqual(len(errors), 0)\n\n    def test_check_exclude_of_parent_model(self):\n        errors = checks.InlineModelAdminChecks()._check_exclude_of_parent_model(TestInlineModelAdmin(), TestModel())\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Error)\n        self.assertEqual(errors[0].id, 'admin.E201')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1183": ["\nimport unittest\nfrom sympy import symbols, field\nfrom sympy.polys.domains import ZZ\n\nclass TestRationalFunctionFields(unittest.TestCase):\n    def setUp(self):\n        self.K, self.f, self.g = field('x, y', ZZ)\n\n    def test_field_creation(self):\n        self.assertEqual(self.K.symbols, (symbols('x'), symbols('y')))\n        self.assertEqual(self.K.domain, ZZ)\n\n    def test_field_element_creation(self):\n        self.assertEqual(self.f, self.K(self.f.numer)/self.K(self.f.denom))\n        self.assertEqual(self.g, self.K(self.g.numer)/self.K(self.g.denom))\n\n    def test_addition(self):\n        self.assertEqual(self.f + self.g, (self.f.numer*self.g.denom + self.g.numer*self.f.denom)/(self.f.denom*self.g.denom))\n\n    def test_subtraction(self):\n        self.assertEqual(self.f - self.g, (self.f.numer*self.g.denom - self.g.numer*self.f.denom)/(self.f.denom*self.g.denom))\n\n    def test_multiplication(self):\n        self.assertEqual(self.f * self.g, (self.f.numer*self.g.numer)/(self.f.denom*self.g.denom))\n\n    def test_division(self):\n        self.assertEqual(self.f / self.g, (self.f.numer*self.g.denom)/(self.f.denom*self.g.numer))\n\n    def test_power(self):\n        self.assertEqual(self.f ** 2, (self.f.numer**2)/(self.f.denom**2))\n\n    def test_evaluation(self):\n        self.assertEqual(self.f.evaluate(self.K.gens[0], 2), self.f.numer.evaluate(self.K.gens[0], 2)/self.f.denom.evaluate(self.K.gens[0], 2))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_316": ["\nimport unittest\nfrom unittest.mock import Mock, patch, mock_open\nfrom django.core.files.images import ImageFile, get_image_dimensions\n\nclass TestImageFunctions(unittest.TestCase):\n    @patch('django.core.files.images.get_image_dimensions')\n    def test_image_file_width(self, mock_get_image_dimensions):\n        mock_get_image_dimensions.return_value = (100, 200)\n        image_file = ImageFile(None)\n        self.assertEqual(image_file.width, 100)\n\n    @patch('django.core.files.images.get_image_dimensions')\n    def test_image_file_height(self, mock_get_image_dimensions):\n        mock_get_image_dimensions.return_value = (100, 200)\n        image_file = ImageFile(None)\n        self.assertEqual(image_file.height, 200)\n\n    @patch('django.core.files.images.PillowImageFile.Parser')\n    def test_get_image_dimensions_file(self, MockParser):\n        mock_file = Mock()\n        mock_file.read.return_value = b''\n        mock_parser = MockParser.return_value\n        mock_parser.image = Mock()\n        mock_parser.image.size = (100, 200)\n\n        self.assertEqual(get_image_dimensions(mock_file), (100, 200))\n\n    @patch('django.core.files.images.open', new_callable=mock_open, read_data=b'')\n    @patch('django.core.files.images.PillowImageFile.Parser')\n    def test_get_image_dimensions_path(self, MockParser, mock_file):\n        mock_parser = MockParser.return_value\n        mock_parser.image = Mock()\n        mock_parser.image.size = (100, 200)\n\n        self.assertEqual(get_image_dimensions('dummy_path'), (100, 200))\n\n    @patch('django.core.files.images.open', new_callable=mock_open, read_data=b'')\n    @patch('django.core.files.images.PillowImageFile.Parser')\n    def test_get_image_dimensions_os_error(self, MockParser, mock_file):\n        mock_file.side_effect = OSError()\n\n        self.assertEqual(get_image_dimensions('dummy_path'), (None, None))\n"], "sample_524": ["\nimport unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.figure import Figure, figaspect\nfrom matplotlib.axes import SubplotBase, Axes\nfrom matplotlib.gridspec import GridSpec\nfrom matplotlib.artist import Artist\nfrom matplotlib.backend_bases import MouseButton\n\nclass TestFigure(unittest.TestCase):\n\n    def setUp(self):\n        self.fig = Figure()\n\n    def test_figimage(self):\n        data = np.random.rand(10, 10)\n        im = self.fig.figimage(data)\n        self.assertIsInstance(im, plt.FigureImage)\n\n    def test_set_size_inches(self):\n        self.fig.set_size_inches(5, 5)\n        self.assertEqual(self.fig.get_size_inches(), (5, 5))\n\n    def test_get_size_inches(self):\n        size = self.fig.get_size_inches()\n        self.assertIsInstance(size, np.ndarray)\n        self.assertEqual(len(size), 2)\n\n    def test_get_figwidth(self):\n        width = self.fig.get_figwidth()\n        self.assertIsInstance(width, float)\n\n    def test_get_figheight(self):\n        height = self.fig.get_figheight()\n        self.assertIsInstance(height, float)\n\n    def test_set_figwidth(self):\n        self.fig.set_figwidth(7)\n        self.assertEqual(self.fig.get_figwidth(), 7)\n\n    def test_set_figheight(self):\n        self.fig.set_figheight(7)\n        self.assertEqual(self.fig.get_figheight(), 7)\n\n    def test_clear(self):\n        self.fig.clear()\n        self.assertEqual(len(self.fig.axes), 0)\n\n    def test_add_axobserver(self):\n        def test_func(fig):\n            pass\n        self.fig.add_axobserver(test_func)\n        self.assertIn('_axes_change_event', self.fig._axobservers.callbacks)\n\n    def test_ginput(self):\n        # This test requires user input, so it's commented out\n        # clicks = self.fig.ginput(n=2, timeout=10)\n        # self.assertEqual(len(clicks), 2)\n        pass\n\n    def test_waitforbuttonpress(self):\n        # This test requires user input, so it's commented out\n        # result = self.fig.waitforbuttonpress(timeout=5)\n        # self.assertIn(result, [True, False, None])\n        pass\n\n    def test_figaspect(self):\n        aspect = figaspect(2.0)\n        self.assertIsInstance(aspect, np.ndarray)\n        self.assertEqual(len(aspect), 2)\n\n    def test_tight_layout(self):\n        self.fig.tight_layout()\n        # Check if tight_layout was applied correctly\n        # This is a bit tricky, so we'll just check if the figure was modified in any way\n        self.assertNotEqual(self.fig.get_tight_layout(), None)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1079": ["\nimport unittest\nfrom sympy.combinatorics.perm_groups import PermutationGroup, _orbit_transversal, _stabilizer, _orbit, _orbits\nfrom sympy.combinatorics.permutations import Permutation\n\nclass TestPermutationGroup(unittest.TestCase):\n\n    def setUp(self):\n        self.a = Permutation([0, 2, 1])\n        self.b = Permutation([1, 0, 2])\n        self.G = PermutationGroup([self.a, self.b])\n\n    def test_orbit_transversal(self):\n        result = _orbit_transversal(self.G.degree, self.G.generators, 0, False)\n        self.assertEqual(len(result), 3)\n\n    def test_stabilizer(self):\n        result = _stabilizer(self.G.degree, self.G.generators, 0)\n        self.assertEqual(len(result), 2)\n\n    def test_orbit(self):\n        result = _orbit(self.G.degree, self.G.generators, 0)\n        self.assertEqual(len(result), 3)\n\n    def test_orbits(self):\n        result = _orbits(self.G.degree, self.G.generators)\n        self.assertEqual(len(result), 1)\n\n    def test_schreier_sims(self):\n        self.G.schreier_sims()\n        self.assertIsNotNone(self.G._base)\n\n    def test_schreier_vector(self):\n        result = self.G.schreier_vector(0)\n        self.assertEqual(len(result), self.G.degree)\n\n    def test_subgroup(self):\n        H = self.G.subgroup([self.a])\n        self.assertIsInstance(H, PermutationGroup)\n\n    def test_is_transitive(self):\n        self.assertTrue(self.G.is_transitive())\n\n    def test_is_trivial(self):\n        self.assertFalse(self.G.is_trivial)\n\n    def test_is_subgroup(self):\n        H = PermutationGroup([self.a])\n        self.assertTrue(H.is_subgroup(self.G))\n\n    def test_is_normal(self):\n        H = PermutationGroup([self.a])\n        self.assertTrue(H.is_normal(self.G))\n\n    def test_order(self):\n        self.assertEqual(self.G.order(), 6)\n\n    def test_random(self):\n        result = self.G.random()\n        self.assertIsInstance(result, Permutation)\n\n    def test_make_perm(self):\n        result = self.G.make_perm(2)\n        self.assertIsInstance(result, Permutation)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_853": ["\nimport unittest\nfrom unittest.mock import patch\nimport numpy as np\nfrom scipy import sparse\nfrom sklearn import svm, datasets\nfrom sklearn.exceptions import NotFittedError, ConvergenceWarning\n\nclass TestBaseLibSVM(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = datasets.make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, random_state=42)\n        self.svc = svm.SVC(kernel='linear', random_state=42)\n\n    def test_fit(self):\n        self.svc.fit(self.X, self.y)\n        self.assertIsNotNone(self.svc.support_)\n        self.assertIsNotNone(self.svc.support_vectors_)\n        self.assertIsNotNone(self.svc._n_support)\n        self.assertIsNotNone(self.svc.dual_coef_)\n        self.assertIsNotNone(self.svc.intercept_)\n\n    def test_predict(self):\n        self.svc.fit(self.X, self.y)\n        y_pred = self.svc.predict(self.X)\n        self.assertEqual(len(y_pred), len(self.y))\n\n    def test_decision_function(self):\n        self.svc.fit(self.X, self.y)\n        decision = self.svc.decision_function(self.X)\n        self.assertEqual(decision.shape, (len(self.y),))\n\n    def test_predict_proba(self):\n        self.svc.probability = True\n        self.svc.fit(self.X, self.y)\n        proba = self.svc.predict_proba(self.X)\n        self.assertEqual(proba.shape, (len(self.y), len(np.unique(self.y))))\n\n    def test_coef_(self):\n        self.svc.fit(self.X, self.y)\n        coef = self.svc.coef_\n        self.assertEqual(coef.shape, (1, self.X.shape[1]))\n\n    def test_validate_for_predict(self):\n        with self.assertRaises(NotFittedError):\n            self.svc.predict(self.X)\n\n        self.svc.fit(self.X, self.y)\n        X_sparse = sparse.csr_matrix(self.X)\n        X_dense = self.X.toarray()\n\n        self.svc.predict(X_sparse)\n        self.svc.predict(X_dense)\n\n        with self.assertRaises(ValueError):\n            self.svc.predict(np.hstack([self.X, self.X]))\n\n    @patch('sklearn.svm.base.libsvm.predict')\n    @patch('sklearn.svm.base.libsvm_sparse.libsvm_sparse_predict')\n    def test_predict_with_mock(self, mock_predict_sparse, mock_predict_dense):\n        mock_predict_dense.return_value = np.array([1, -1, 1, -1])\n        mock_predict_sparse.return_value = np.array([1, -1, 1, -1])\n\n        self.svc.fit(self.X, self.y)\n        y_pred = self.svc.predict(self.X)\n        self.assertTrue(mock_predict_dense.called or mock_predict_sparse.called)\n        self.assertEqual(len(y_pred), len(self.y))\n\nclass TestBaseSVC(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = datasets.make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, random_state=42)\n        self.svc = svm.SVC(kernel='linear', probability=True, random_state=42)\n\n    def test_predict_proba(self):\n        self.svc.fit(self.X, self.y)\n        proba = self.svc.predict_proba(self.X)\n        self.assertEqual(proba.shape, (len(self.y), len(np.unique(self.y))))\n\n    def test_predict_log_proba(self):\n        self.svc.fit(self.X, self.y)\n        log_proba = self.svc.predict_log_proba(self.X)\n        self.assertEqual(log_proba.shape, (len(self.y), len(np.unique(self.y))))\n\n    def test_predict_with_break_ties(self):\n        self.svc.break_ties = True\n        self.svc.fit(self.X, self.y)\n        y_pred = self.svc.predict(self.X)\n        self.assertEqual(len(y_pred), len(self.y))\n\nclass TestLiblinearSolverType(unittest.TestCase):\n    def test_get_liblinear_solver_type(self):\n        self.assertEqual(svm.base._get_liblinear_solver_type('ovr', 'l1', 'squared_hinge', False), 5)\n        self.assertEqual(svm.base._get_liblinear_solver_type('ovr', 'l2', 'hinge', True), 3)\n        self.assertEqual(svm.base._get_liblinear_solver_type('crammer_singer', 'l2', 'hinge', False), 4)\n\n        with self.assertRaises(ValueError):\n            svm.base._get_liblinear_solver_type('ovr', 'l1', 'invalid_loss', False)\n            svm.base._get_liblinear_solver_type('ovr', 'invalid_penalty', 'hinge', False)\n            svm.base._get_liblinear_solver_type('ovr', 'l1', 'hinge', 'invalid_dual')\n            svm.base._get_liblinear_solver_type('invalid_multi_class', 'l1', 'hinge', False)\n\nclass TestFitLiblinear(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = datasets.make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, random_state=42)\n\n    def test_fit_liblinear(self):\n        coef, intercept, n_iter = svm.base._fit_liblinear(self.X, self.y, C=1.0, fit_intercept=True, intercept_scaling=1.0, class_weight=None,\n                                                          penalty='l2', dual=True, verbose=0, max_iter=1000, tol=1e-4, random_state=42)\n        self.assertEqual(coef.shape, (1, self.X.shape[1]))\n        self.assertEqual(intercept.shape, ())\n        self.assertGreaterEqual(n_iter, 0)\n\n    def test_fit_liblinear_with_invalid_arguments(self):\n        with self.assertRaises(ValueError):\n            svm.base._fit_liblinear(self.X, self.y, C=1.0, fit_intercept=True, intercept_scaling=-1.0, class_weight=None,\n                                    penalty='l2', dual=True, verbose=0, max_iter=1000, tol=1e-4, random_state=42)\n            svm.base._fit_liblinear(self.X, self.y, C=1.0, fit_intercept=True, intercept_scaling=1.0, class_weight=None,\n                                    penalty='l2', dual=True, verbose=0, max_iter=1000, tol=1e-4, random_state=42, multi_class='invalid_multi_class')\n            svm.base._fit_liblinear(self.X, self.y, C=1.0, fit_intercept=True, intercept_scaling=1.0, class_weight=None,\n                                    penalty='l2', dual=True, verbose=0, max_iter=1000, tol=1e-4, random_state=42, loss='invalid_loss')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1101": ["\nimport unittest\nfrom sympy.combinatorics.schur_number import schur_partition, SchurNumber\n\nclass TestSchurNumber(unittest.TestCase):\n\n    def test_schur_number(self):\n        self.assertEqual(SchurNumber(1), 1)\n        self.assertEqual(SchurNumber(2), 4)\n        self.assertEqual(SchurNumber(3), 13)\n        self.assertEqual(SchurNumber(4), 44)\n        self.assertIsInstance(SchurNumber(5), SchurNumber)\n\n    def test_schur_number_lower_bound(self):\n        self.assertEqual(SchurNumber(5).lower_bound(), 19)\n        self.assertEqual(SchurNumber(10).lower_bound(), 19682)\n\n    def test_schur_partition(self):\n        self.assertEqual(schur_partition(1), [[1]])\n        self.assertEqual(schur_partition(2), [[1, 2]])\n        self.assertEqual(schur_partition(3), [[1, 2, 3]])\n        self.assertEqual(schur_partition(4), [[1, 4], [2, 3]])\n        self.assertEqual(len(schur_partition(5)), 3)\n\n    def test_schur_partition_invalid_input(self):\n        with self.assertRaises(ValueError):\n            schur_partition('invalid')\n        with self.assertRaises(ValueError):\n            schur_partition(0)\n        with self.assertRaises(ValueError):\n            schur_partition(-1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_54": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.forms.widgets import TextInput, CheckboxInput, Select, Media, RadioSelect, SelectMultiple\n\nclass TestWidgets(unittest.TestCase):\n    def test_text_input(self):\n        widget = TextInput(attrs={'class': 'test'})\n        self.assertEqual(widget.input_type, 'text')\n        self.assertEqual(widget.template_name, 'django/forms/widgets/text.html')\n        self.assertEqual(widget.attrs, {'class': 'test', 'type': 'text'})\n\n    def test_checkbox_input(self):\n        widget = CheckboxInput(attrs={'class': 'test'})\n        self.assertEqual(widget.input_type, 'checkbox')\n        self.assertEqual(widget.template_name, 'django/forms/widgets/checkbox.html')\n        self.assertTrue(widget.check_test(True))\n        self.assertFalse(widget.check_test(False))\n        self.assertFalse(widget.check_test(None))\n        self.assertFalse(widget.check_test(''))\n\n    def test_select(self):\n        widget = Select(attrs={'class': 'test'}, choices=[(1, 'One'), (2, 'Two')])\n        self.assertEqual(widget.input_type, 'select')\n        self.assertEqual(widget.template_name, 'django/forms/widgets/select.html')\n        self.assertEqual(widget.option_template_name, 'django/forms/widgets/select_option.html')\n        self.assertEqual(widget.choices, [(1, 'One'), (2, 'Two')])\n\n    def test_media(self):\n        media = Media(css={'all': ['test.css']}, js=['test.js'])\n        self.assertEqual(media._css, {'all': ['test.css']})\n        self.assertEqual(media._js, ['test.js'])\n\n    def test_radio_select(self):\n        widget = RadioSelect(attrs={'class': 'test'}, choices=[(1, 'One'), (2, 'Two')])\n        self.assertEqual(widget.input_type, 'radio')\n        self.assertEqual(widget.template_name, 'django/forms/widgets/radio.html')\n        self.assertEqual(widget.option_template_name, 'django/forms/widgets/radio_option.html')\n        self.assertEqual(widget.choices, [(1, 'One'), (2, 'Two')])\n\n    def test_select_multiple(self):\n        widget = SelectMultiple(attrs={'class': 'test'}, choices=[(1, 'One'), (2, 'Two')])\n        self.assertEqual(widget.input_type, 'select')\n        self.assertEqual(widget.template_name, 'django/forms/widgets/select.html')\n        self.assertEqual(widget.option_template_name, 'django/forms/widgets/select_option.html')\n        self.assertEqual(widget.choices, [(1, 'One'), (2, 'Two')])\n        self.assertTrue(widget.allow_multiple_selected)\n\n    @patch('django.forms.widgets.datetime.date.today')\n    def test_select_date_widget(self, mock_date):\n        from django.forms.widgets import SelectDateWidget\n        mock_date.return_value.year = 2020\n        widget = SelectDateWidget()\n        self.assertEqual(widget.years, range(2020, 2030))\n"], "sample_657": ["\nimport io\nimport logging\nfrom unittest.mock import MagicMock, patch\n\nfrom _pytest.logging import (\n    LogCaptureHandler,\n    LogCaptureFixture,\n    PercentStyleMultiline,\n    DatetimeFormatter,\n    ColoredLevelFormatter,\n    _LiveLoggingStreamHandler,\n    _LiveLoggingNullHandler,\n    LoggingPlugin,\n    _FileHandler,\n    caplog,\n    catching_logs,\n    _remove_ansi_escape_sequences,\n    get_log_level_for_setting,\n    get_option_ini,\n    pytest_configure,\n)\n\nfrom _pytest.config import Config\nfrom _pytest.nodes import Node\nfrom _pytest.main import Session\nfrom _pytest.terminal import TerminalReporter\nfrom _pytest.capture import CaptureManager\nfrom _pytest.fixtures import FixtureRequest\n\ndef test_remove_ansi_escape_sequences():\n    text = \"\\x1b[31mThis is red text\\x1b[0m\"\n    assert _remove_ansi_escape_sequences(text) == \"This is red text\"\n\ndef test_percent_style_multiline():\n    style = PercentStyleMultiline(\"%(message)s\", auto_indent=4)\n    record = logging.LogRecord(\"name\", logging.INFO, \"pathname\", 1, \"Message\\nwith multiple\\nlines\", (), None, None)\n    formatted = style.format(record)\n    assert formatted == \"Message\\n    with multiple\\n    lines\"\n\ndef test_datetime_formatter():\n    formatter = DatetimeFormatter()\n    record = logging.LogRecord(\"name\", logging.INFO, \"pathname\", 1, \"Message\", (), None, 123.456)\n    assert \"123.456\" in formatter.formatTime(record, \"%f\")\n\ndef test_colored_level_formatter():\n    terminal_writer = MagicMock()\n    formatter = ColoredLevelFormatter(terminal_writer, \"%(levelname)s %(message)s\")\n    record = logging.LogRecord(\"name\", logging.ERROR, \"pathname\", 1, \"Error message\", (), None)\n    assert \"Error message\" in formatter.format(record)\n\n@patch('_pytest.logging.create_terminal_writer')\ndef test_logging_plugin_create_formatter(mock_create_terminal_writer):\n    config = Config()\n    plugin = LoggingPlugin(config)\n    assert isinstance(plugin._create_formatter(\"%(levelname)s %(message)s\", \"%H:%M:%S\", None), logging.Formatter)\n\ndef test_logging_plugin_disable_loggers():\n    config = Config()\n    plugin = LoggingPlugin(config)\n    plugin._disable_loggers([\"test_logger\"])\n    assert logging.getLogger(\"test_logger\").disabled\n\ndef test_logging_plugin_set_log_path():\n    config = Config()\n    plugin = LoggingPlugin(config)\n    plugin.set_log_path(\"test.log\")\n    assert isinstance(plugin.log_file_handler.stream, io.TextIOWrapper)\n\ndef test_live_logging_stream_handler():\n    terminal_reporter = MagicMock(spec=TerminalReporter)\n    capture_manager = MagicMock(spec=CaptureManager)\n    handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n    handler.set_when(\"start\")\n    handler.emit(logging.LogRecord(\"name\", logging.INFO, \"pathname\", 1, \"Message\", (), None))\n    terminal_reporter.write.assert_called_once_with(\"\\n\")\n\ndef test_live_logging_null_handler():\n    handler = _LiveLoggingNullHandler()\n    handler.reset()\n    handler.set_when(\"start\")\n    handler.handleError(logging.LogRecord(\"name\", logging.INFO, \"pathname\", 1, \"Message\", (), None))\n\ndef test_get_log_level_for_setting():\n    config = Config()\n    config.addinivalue_line(\"log_level\", \"DEBUG\")\n    assert get_log_level_for_setting(config, \"log_level\") == logging.DEBUG\n\ndef test_get_option_ini():\n    config = Config()\n    config.addinivalue_line(\"log_format\", \"%(levelname)s %(message)s\")\n    assert get_option_ini(config, \"log_format\") == \"%(levelname)s %(message)s\"\n\ndef test_caplog_fixture():\n    node = MagicMock(spec=Node)\n    request = MagicMock(spec=FixtureRequest)\n    request.node = node\n    fixture = LogCaptureFixture(request.node, _ispytest=True)\n    fixture.set_level(logging.INFO)\n    assert fixture.handler.level == logging.INFO\n\ndef test_caplog():\n    request = MagicMock(spec=FixtureRequest)\n    fixture = caplog(request)\n    assert isinstance(fixture, LogCaptureFixture)\n\ndef test_log_capture_handler():\n    handler = LogCaptureHandler()\n    record = logging.LogRecord(\"name\", logging.INFO, \"pathname\", 1, \"Message\", (), None)\n    handler.emit(record)\n    assert len(handler.records) == 1\n    handler.clear()\n    assert len(handler.records) == 0\n\ndef test_catching_logs():\n    handler = MagicMock(spec=logging.Handler)\n    with catching_logs(handler, level=logging.INFO):\n        assert logging.getLogger().level == logging.INFO\n    assert logging.getLogger().level != logging.INFO\n\ndef test_file_handler():\n    handler = _FileHandler(\"test.log\", mode=\"w\", encoding=\"UTF-8\")\n    record = logging.LogRecord(\"name\", logging.INFO, \"pathname\", 1, \"Message\", (), None)\n    handler.emit(record)\n    handler.close()\n\ndef test_pytest_configure():\n    config = Config()\n    pytest_configure(config)\n    assert config.pluginmanager.hasplugin(\"logging-plugin\")\n\ndef test_logging_plugin_pytest_sessionstart():\n    config = Config()\n    plugin = LoggingPlugin(config)\n    with plugin.pytest_sessionstart():\n        pass\n\ndef test_logging_plugin_pytest_collection():\n    config = Config()\n    plugin = LoggingPlugin(config)\n    with plugin.pytest_collection():\n        pass\n\ndef test_logging_plugin_pytest_runtestloop():\n    session = MagicMock(spec=Session)\n    config = Config()\n    plugin = LoggingPlugin(config)\n    with plugin.pytest_runtestloop(session):\n        pass\n\ndef test_logging_plugin_pytest_runtest_logstart():\n    config = Config()\n    plugin = LoggingPlugin(config)\n    plugin.pytest_runtest_logstart()\n\ndef test_logging_plugin_pytest_runtest_logreport():\n    config = Config()\n    plugin = LoggingPlugin(config)\n    plugin.pytest_runtest_logreport()\n\ndef test_logging_plugin_pytest_runtest_setup():\n    item = MagicMock(spec=Node)\n    config = Config()\n    plugin = LoggingPlugin(config)\n    with plugin.pytest_runtest_setup(item):\n        pass\n\ndef test_logging_plugin_pytest_runtest_call():\n    item = MagicMock(spec=Node)\n    config = Config()\n    plugin = LoggingPlugin(config)\n    with plugin.pytest_runtest_call(item):\n        pass\n\ndef test_logging_plugin_pytest_runtest_teardown():\n    item = MagicMock(spec=Node)\n    config = Config()\n    plugin = LoggingPlugin(config)\n    with plugin.pytest_runtest_teardown(item):\n        pass\n\ndef test_logging_plugin_pytest_runtest_logfinish():\n    config = Config()\n    plugin = LoggingPlugin(config)\n    plugin.pytest_runtest_logfinish()\n\ndef test_logging_plugin_pytest_sessionfinish():\n    config = Config()\n    plugin = LoggingPlugin(config)\n    with plugin.pytest_sessionfinish():\n        pass\n\ndef test_logging_plugin_pytest_unconfigure():\n    config = Config()\n    plugin = LoggingPlugin(config)\n    plugin.pytest_unconfigure()\n"], "sample_553": ["\nimport unittest\nfrom unittest.mock import patch\nimport matplotlib as mpl\nfrom matplotlib import animation\n\nclass TestAnimationModule(unittest.TestCase):\n    def setUp(self):\n        self.fig = mpl.figure.Figure()\n\n    def test_validate_grabframe_kwargs(self):\n        valid_kwargs = {'param1': 'value1'}\n        animation._validate_grabframe_kwargs(valid_kwargs)\n\n        invalid_kwargs = {'dpi': 300}\n        with self.assertRaises(TypeError):\n            animation._validate_grabframe_kwargs(invalid_kwargs)\n\n    def test_writers_registry(self):\n        self.assertIn('ffmpeg', animation.writers)\n        self.assertIn('pillow', animation.writers)\n        with self.assertRaises(RuntimeError):\n            animation.writers['nonexistent_writer']\n\n    def test_animation(self):\n        with patch('matplotlib.animation.Animation._step') as mock_step:\n            anim = animation.Animation(self.fig)\n            mock_step.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_669": ["\nimport pytest\nfrom _pytest.mark.expression import evaluate, ParseError\n\ndef test_empty_expression():\n    assert evaluate(\"\", lambda _: True) == False\n\ndef test_single_identifier():\n    assert evaluate(\"test_id\", lambda x: x == \"test_id\") == True\n    assert evaluate(\"test_id\", lambda x: x == \"other_id\") == False\n\ndef test_not_expression():\n    assert evaluate(\"not test_id\", lambda x: x == \"test_id\") == False\n    assert evaluate(\"not test_id\", lambda x: x == \"other_id\") == True\n\ndef test_parentheses_expression():\n    assert evaluate(\"(test_id or other_id)\", lambda x: x == \"test_id\") == True\n    assert evaluate(\"(test_id or other_id)\", lambda x: x == \"other_id\") == True\n    assert evaluate(\"(test_id and other_id)\", lambda x: x == \"test_id\") == False\n    assert evaluate(\"(test_id and test_id)\", lambda x: x == \"test_id\") == True\n\ndef test_complex_expression():\n    assert evaluate(\"(test_id or other_id) and not third_id\",\n                    lambda x: x in {\"test_id\", \"other_id\"}) == True\n    assert evaluate(\"(test_id or other_id) and not third_id\",\n                    lambda x: x == \"third_id\") == False\n\ndef test_invalid_expression():\n    with pytest.raises(ParseError):\n        evaluate(\"test_id $ other_id\", lambda _: True)\n"], "sample_1096": ["\nimport unittest\nfrom sympy import symbols, IndexedBase, Idx, Indexed, S, sympify, Matrix, Symbol, oo\nfrom sympy.tensor import IndexException, get_indices, get_contraction_structure\n\nclass TestIndexed(unittest.TestCase):\n\n    def setUp(self):\n        self.A = IndexedBase('A')\n        self.i, self.j = symbols('i j', cls=Idx)\n\n    def test_indexed_base(self):\n        self.assertEqual(str(self.A), 'A')\n        self.assertTrue(self.A.is_symbol)\n        self.assertTrue(self.A.is_commutative)\n\n    def test_idx(self):\n        idx = Idx('qwerty')\n        self.assertEqual(str(idx), 'qwerty')\n        self.assertIsNone(idx.lower)\n        self.assertIsNone(idx.upper)\n\n        idx = Idx(self.i, (self.i, self.j))\n        self.assertEqual(str(idx), 'i')\n        self.assertEqual(idx.lower, self.i)\n        self.assertEqual(idx.upper, self.j)\n\n        idx = Idx(self.i, self.j)\n        self.assertEqual(str(idx), 'i')\n        self.assertEqual(idx.lower, 0)\n        self.assertEqual(idx.upper, self.j - 1)\n\n        idx = Idx(self.i, oo)\n        self.assertEqual(str(idx), 'i')\n        self.assertEqual(idx.lower, 0)\n        self.assertEqual(idx.upper, oo)\n\n    def test_indexed(self):\n        A_ij = self.A[self.i, self.j]\n        self.assertEqual(str(A_ij), 'A[i, j]')\n        self.assertTrue(A_ij.is_symbol)\n        self.assertTrue(A_ij.is_commutative)\n        self.assertEqual(A_ij.base, self.A)\n        self.assertEqual(A_ij.indices, (self.i, self.j))\n        self.assertEqual(A_ij.rank, 2)\n\n    def test_indexed_shape(self):\n        n, m = symbols('n m', integer=True)\n        i = Idx('i', m)\n        j = Idx('j', n)\n        self.assertEqual(self.A[i, j].shape, (m, n))\n\n        dim1, dim2 = symbols('dim1 dim2', integer=True)\n        A = IndexedBase('A', shape=(dim1, 2*dim1, dim2))\n        self.assertEqual(A[i, 2, j].shape, (dim1, 2*dim1, dim2))\n\n    def test_indexed_ranges(self):\n        n, m = symbols('n m', integer=True)\n        i = Idx('i', m)\n        j = Idx('j', n)\n        self.assertEqual(self.A[i, j].ranges, [(0, m - 1), (0, n - 1)])\n\n        dim1, dim2 = symbols('dim1 dim2', integer=True)\n        A = IndexedBase('A', shape=(dim1, 2*dim1, dim2))\n        self.assertEqual(A[i, 2, j].ranges, [(0, m - 1), None, (0, n - 1)])\n\n    def test_indexed_derivative(self):\n        A_ij = self.A[self.i, self.j]\n        self.assertEqual(A_ij.diff(self.A[self.i, self.j]), S.One)\n        self.assertEqual(A_ij.diff(self.A[self.j, self.i]), S.Zero)\n\n    def test_get_indices(self):\n        dim1, dim2 = symbols('dim1 dim2', integer=True)\n        A = IndexedBase('A', shape=(dim1, 2*dim1, dim2))\n        self.assertEqual(get_indices(A[self.i, self.j, self.j]), ({self.i}, {}))\n\n    def test_get_contraction_structure(self):\n        dim1, dim2 = symbols('dim1 dim2', integer=True)\n        A = IndexedBase('A', shape=(dim1, 2*dim1, dim2))\n        self.assertEqual(get_contraction_structure(A[self.i, self.j, self.j]), {(self.j,): {A[self.i, self.j, self.j]}})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_871": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics.cluster import silhouette_score, silhouette_samples, calinski_harabasz_score, davies_bouldin_score\nfrom sklearn.metrics.cluster._unsupervised import _silhouette_reduce\n\nclass TestUnsupervisedMetrics(unittest.TestCase):\n\n    def setUp(self):\n        # Set up some data for the tests\n        self.X = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\n        self.labels = np.array([0, 0, 0, 1, 1, 1])\n\n    def test_silhouette_score(self):\n        # Test that the silhouette_score function returns a value between -1 and 1\n        score = silhouette_score(self.X, self.labels)\n        self.assertTrue(-1 <= score <= 1)\n\n    def test_silhouette_samples(self):\n        # Test that the silhouette_samples function returns an array of the correct length\n        scores = silhouette_samples(self.X, self.labels)\n        self.assertEqual(len(scores), len(self.X))\n\n    def test_silhouette_reduce(self):\n        # Test that the _silhouette_reduce function returns the correct number of intra-cluster and inter-cluster distances\n        label_freqs = np.bincount(self.labels)\n        intra_cluster_distances, inter_cluster_distances = _silhouette_reduce(self.X, 0, self.labels, label_freqs)\n        self.assertEqual(len(intra_cluster_distances), len(self.X))\n        self.assertEqual(len(inter_cluster_distances), len(self.X))\n\n    def test_calinski_harabasz_score(self):\n        # Test that the calinski_harabasz_score function returns a non-negative value\n        score = calinski_harabasz_score(self.X, self.labels)\n        self.assertGreaterEqual(score, 0)\n\n    def test_davies_bouldin_score(self):\n        # Test that the davies_bouldin_score function returns a non-negative value\n        score = davies_bouldin_score(self.X, self.labels)\n        self.assertGreaterEqual(score, 0)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_493": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.models.sql.query import Query, JoinPromoter\n\nclass TestQuery(unittest.TestCase):\n    def setUp(self):\n        self.query = Query(Mock())\n\n    def test_add_filter(self):\n        self.query.add_filter('field', 'value')\n        self.assertIn(('field', 'value'), self.query.where.children)\n\n    def test_set_limits(self):\n        self.query.set_limits(low=10, high=20)\n        self.assertEqual(self.query.low_mark, 10)\n        self.assertEqual(self.query.high_mark, 20)\n\n    def test_clear_limits(self):\n        self.query.set_limits(low=10, high=20)\n        self.query.clear_limits()\n        self.assertEqual(self.query.low_mark, 0)\n        self.assertEqual(self.query.high_mark, None)\n\n    def test_add_ordering(self):\n        self.query.add_ordering('field')\n        self.assertIn('field', self.query.order_by)\n\n    def test_clear_ordering(self):\n        self.query.add_ordering('field')\n        self.query.clear_ordering(force=True)\n        self.assertEqual(self.query.order_by, ())\n\n    def test_set_group_by(self):\n        self.query.select = ('field1', 'field2')\n        self.query.set_group_by()\n        self.assertEqual(self.query.group_by, ('field1', 'field2'))\n\n    def test_add_select_related(self):\n        self.query.add_select_related(['field1__field2'])\n        self.assertEqual(self.query.select_related, {'field1': {'field2': {}}})\n\nclass TestJoinPromoter(unittest.TestCase):\n    def setUp(self):\n        self.join_promoter = JoinPromoter(connector='AND', num_children=2, negated=False)\n\n    def test_add_votes(self):\n        self.join_promoter.add_votes(['table1', 'table2'])\n        self.assertEqual(self.join_promoter.votes, {'table1': 1, 'table2': 1})\n\n    def test_update_join_types(self):\n        self.join_promoter.votes = {'table1': 1, 'table2': 2}\n        with patch('django.db.models.sql.query.Query.promote_joins') as mock_promote:\n            with patch('django.db.models.sql.query.Query.demote_joins') as mock_demote:\n                self.join_promoter.update_join_types(Mock())\n                mock_promote.assert_called_once_with(set())\n                mock_demote.assert_called_once_with({'table2'})\n"], "sample_901": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom io import StringIO\nimport numpy as np\nfrom sklearn.tree import _export, DecisionTreeClassifier\nfrom sklearn.datasets import load_iris\n\nclass TestExportMethods(unittest.TestCase):\n\n    def setUp(self):\n        self.iris = load_iris()\n        self.clf = DecisionTreeClassifier(random_state=0)\n        self.clf.fit(self.iris.data, self.iris.target)\n\n    def test_export_graphviz(self):\n        with patch('builtins.open', Mock()) as mock_open:\n            mock_file = mock_open.return_value\n            _export.export_graphviz(self.clf, out_file='tree.dot')\n            mock_open.assert_called_once_with('tree.dot', 'w', encoding='utf-8')\n            mock_file.write.assert_called()\n\n    def test_plot_tree(self):\n        with patch('matplotlib.pyplot.gca') as mock_gca:\n            _export.plot_tree(self.clf)\n            mock_gca.assert_called_once()\n\n    def test_export_text(self):\n        report = _export.export_text(self.clf, feature_names=self.iris.feature_names)\n        self.assertIsInstance(report, str)\n        self.assertGreater(len(report), 0)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_444": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock, mock_open\nfrom io import BytesIO\nfrom django.test import override_settings\nfrom django.core.files.base import ContentFile\nfrom django.core.exceptions import ImproperlyConfigured\nfrom urllib.parse import urlsplit, urlunsplit\nimport json\n\nfrom django.contrib.staticfiles.storage import StaticFilesStorage, HashedFilesMixin, ManifestFilesMixin, ManifestStaticFilesStorage\n\nclass TestStaticFilesStorage(unittest.TestCase):\n    @patch('django.conf.settings')\n    def test_init_no_location_base_url(self, mock_settings):\n        mock_settings.STATIC_ROOT = \"/static/\"\n        mock_settings.STATIC_URL = \"/staticfiles/\"\n        sfs = StaticFilesStorage()\n        self.assertEqual(sfs.location, \"/static/\")\n        self.assertEqual(sfs.base_url, \"/staticfiles/\")\n\n    @patch('django.conf.settings')\n    def test_path_no_location(self, mock_settings):\n        mock_settings.STATIC_ROOT = None\n        mock_settings.STATIC_URL = \"/staticfiles/\"\n        sfs = StaticFilesStorage()\n        with self.assertRaises(ImproperlyConfigured):\n            sfs.path(\"test.file\")\n\nclass TestHashedFilesMixin(unittest.TestCase):\n    def test_file_hash(self):\n        hf = HashedFilesMixin()\n        content = ContentFile(b'test content')\n        self.assertEqual(hf.file_hash('test.file', content), 'a74b5ed8a12d')\n\n    def test_hashed_name(self):\n        hf = HashedFilesMixin()\n        hf.exists = MagicMock(return_value=True)\n        hf.open = MagicMock(return_value=ContentFile(b'test content'))\n        self.assertEqual(hf.hashed_name('test.file'), 'test.a74b5ed8a12d.file')\n\n    @patch('django.conf.settings')\n    def test_url(self, mock_settings):\n        mock_settings.DEBUG = True\n        hf = HashedFilesMixin()\n        hf._url = MagicMock(return_value='/static/test.a74b5ed8a12d.file')\n        self.assertEqual(hf.url('test.file'), '/static/test.file')\n\nclass TestManifestFilesMixin(unittest.TestCase):\n    @patch('django.contrib.staticfiles.storage.open', new_callable=mock_open, read_data='{\"version\": \"1.1\", \"paths\": {\"test.file\": \"test.hashed.file\"}}')\n    def test_load_manifest(self, mock_file):\n        mf = ManifestFilesMixin()\n        self.assertEqual(mf.load_manifest(), ({\"test.file\": \"test.hashed.file\"}, \"\"))\n\n    @patch('django.contrib.staticfiles.storage.open', new_callable=mock_open, read_data='{\"version\": \"1.1\", \"paths\": {\"test.file\": \"test.hashed.file\"}}')\n    def test_stored_name(self, mock_file):\n        mf = ManifestFilesMixin()\n        mf.hashed_files = {\"test.file\": \"test.hashed.file\"}\n        self.assertEqual(mf.stored_name('test.file'), 'test.hashed.file')\n\nclass TestManifestStaticFilesStorage(unittest.TestCase):\n    def test_inheritance(self):\n        self.assertTrue(issubclass(ManifestStaticFilesStorage, ManifestFilesMixin))\n        self.assertTrue(issubclass(ManifestStaticFilesStorage, StaticFilesStorage))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_668": ["\nimport pytest\nimport warnings\nfrom _pytest.deprecated import *\n\ndef test_deprecated_external_plugins():\n    assert isinstance(DEPRECATED_EXTERNAL_PLUGINS, set)\n    assert \"pytest_catchlog\" in DEPRECATED_EXTERNAL_PLUGINS\n\ndef test_funcargnames():\n    with warnings.catch_warnings(record=True) as w:\n        warnings.simplefilter(\"always\")\n        _ = FUNCARGNAMES\n        assert len(w) == 1\n        assert issubclass(w[-1].category, PytestDeprecationWarning)\n        assert \"funcargnames\" in str(w[-1].message)\n\ndef test_result_log():\n    with warnings.catch_warnings(record=True) as w:\n        warnings.simplefilter(\"always\")\n        _ = RESULT_LOG\n        assert len(w) == 1\n        assert issubclass(w[-1].category, PytestDeprecationWarning)\n        assert \"--result-log\" in str(w[-1].message)\n\ndef test_fixture_positional_arguments():\n    with warnings.catch_warnings(record=True) as w:\n        warnings.simplefilter(\"always\")\n        _ = FIXTURE_POSITIONAL_ARGUMENTS\n        assert len(w) == 1\n        assert issubclass(w[-1].category, PytestDeprecationWarning)\n        assert \"pytest.fixture()\" in str(w[-1].message)\n\ndef test_node_use_from_parent():\n    with warnings.catch_warnings(record=True) as w:\n        warnings.simplefilter(\"always\")\n        _ = NODE_USE_FROM_PARENT.format(name=\"Node\")\n        assert len(w) == 1\n        assert issubclass(w[-1].category, PytestDeprecationWarning)\n        assert \"Node.from_parent\" in str(w[-1].message)\n\ndef test_junit_xml_default_family():\n    with warnings.catch_warnings(record=True) as w:\n        warnings.simplefilter(\"always\")\n        _ = JUNIT_XML_DEFAULT_FAMILY\n        assert len(w) == 1\n        assert issubclass(w[-1].category, PytestDeprecationWarning)\n        assert \"junit_family\" in str(w[-1].message)\n\ndef test_no_print_logs():\n    with warnings.catch_warnings(record=True) as w:\n        warnings.simplefilter(\"always\")\n        _ = NO_PRINT_LOGS\n        assert len(w) == 1\n        assert issubclass(w[-1].category, PytestDeprecationWarning)\n        assert \"--no-print-logs\" in str(w[-1].message)\n"], "sample_716": ["\nimport unittest\nimport numpy as np\nfrom sklearn.utils.estimator_checks import *\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nfrom sklearn.base import clone\n\nclass TestEstimatorChecks(unittest.TestCase):\n\n    def test_check_estimator(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor(), KMeans(), PCA()]\n        for estimator in estimators:\n            check_estimator(estimator)\n\n    def test_check_estimators_sparse_data(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_estimators_sparse_data(\"test\", estimator)\n\n    def test_check_sample_weights_pandas_series(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_sample_weights_pandas_series(\"test\", estimator)\n\n    def test_check_sample_weights_list(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_sample_weights_list(\"test\", estimator)\n\n    def test_check_dtype_object(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_dtype_object(\"test\", estimator)\n\n    def test_check_complex_data(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_complex_data(\"test\", estimator)\n\n    def test_check_dict_unchanged(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_dict_unchanged(\"test\", estimator)\n\n    def test_check_dont_overwrite_parameters(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_dont_overwrite_parameters(\"test\", estimator)\n\n    def test_check_fit2d_predict1d(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_fit2d_predict1d(\"test\", estimator)\n\n    def test_check_methods_subset_invariance(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_methods_subset_invariance(\"test\", estimator)\n\n    def test_check_fit2d_1sample(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_fit2d_1sample(\"test\", estimator)\n\n    def test_check_fit2d_1feature(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_fit2d_1feature(\"test\", estimator)\n\n    def test_check_fit1d(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_fit1d(\"test\", estimator)\n\n    def test_check_transformer_general(self):\n        transformers = [PCA(), KMeans()]\n        for transformer in transformers:\n            check_transformer_general(\"test\", transformer)\n\n    def test_check_transformer_data_not_an_array(self):\n        transformers = [PCA(), KMeans()]\n        for transformer in transformers:\n            check_transformer_data_not_an_array(\"test\", transformer)\n\n    def test_check_transformers_unfitted(self):\n        transformers = [PCA(), KMeans()]\n        for transformer in transformers:\n            check_transformers_unfitted(\"test\", transformer)\n\n    def test_check_pipeline_consistency(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_pipeline_consistency(\"test\", estimator)\n\n    def test_check_fit_score_takes_y(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_fit_score_takes_y(\"test\", estimator)\n\n    def test_check_estimators_dtypes(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_estimators_dtypes(\"test\", estimator)\n\n    def test_check_estimators_empty_data_messages(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_estimators_empty_data_messages(\"test\", estimator)\n\n    def test_check_estimators_nan_inf(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_estimators_nan_inf(\"test\", estimator)\n\n    def test_check_estimators_pickle(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_estimators_pickle(\"test\", estimator)\n\n    def test_check_estimators_partial_fit_n_features(self):\n        estimators = [LogisticRegression(), SVC(), RandomForestRegressor()]\n        for estimator in estimators:\n            check_estimators_partial_fit_n_features(\"test\", estimator)\n\n    def test_check_clustering(self):\n        clusterers = [KMeans()]\n        for clusterer in clusterers:\n            check_clustering(\"test\", clusterer)\n\n    def test_check_clusterer_compute_labels_predict(self):\n        clusterers = [KMeans()]\n        for clusterer in clusterers:\n            check_clusterer_compute_labels_predict(\"test\", clusterer)\n\n    # Add more test methods for other functions as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_280": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.db.models import Avg, Count, Max, Min, StdDev, Sum, Variance\nfrom django.db.models.expressions import Value\n\nclass TestAggregates(unittest.TestCase):\n    def test_avg(self):\n        avg = Avg('field')\n        self.assertEqual(avg.name, 'Avg')\n        self.assertEqual(avg.function, 'AVG')\n        self.assertTrue(avg.allow_distinct)\n\n    def test_count(self):\n        count = Count('field')\n        self.assertEqual(count.name, 'Count')\n        self.assertEqual(count.function, 'COUNT')\n        self.assertTrue(count.allow_distinct)\n\n    def test_max(self):\n        max_agg = Max('field')\n        self.assertEqual(max_agg.name, 'Max')\n        self.assertEqual(max_agg.function, 'MAX')\n\n    def test_min(self):\n        min_agg = Min('field')\n        self.assertEqual(min_agg.name, 'Min')\n        self.assertEqual(min_agg.function, 'MIN')\n\n    def test_stddev(self):\n        stddev = StdDev('field')\n        self.assertEqual(stddev.name, 'StdDev')\n        self.assertEqual(stddev.function, 'STDDEV_POP')\n\n    def test_stddev_sample(self):\n        stddev_sample = StdDev('field', sample=True)\n        self.assertEqual(stddev_sample.function, 'STDDEV_SAMP')\n\n    def test_sum(self):\n        sum_agg = Sum('field')\n        self.assertEqual(sum_agg.name, 'Sum')\n        self.assertEqual(sum_agg.function, 'SUM')\n        self.assertTrue(sum_agg.allow_distinct)\n\n    def test_variance(self):\n        variance = Variance('field')\n        self.assertEqual(variance.name, 'Variance')\n        self.assertEqual(variance.function, 'VAR_POP')\n\n    def test_variance_sample(self):\n        variance_sample = Variance('field', sample=True)\n        self.assertEqual(variance_sample.function, 'VAR_SAMP')\n\n    def test_default_alias(self):\n        avg = Avg('field')\n        avg.resolve_expression = Mock(return_value=avg)\n        avg.name = 'Avg'\n        avg._output_field_or_none = None\n        self.assertEqual(avg.default_alias, 'field__avg')\n\n    def test_get_group_by_cols(self):\n        avg = Avg('field')\n        self.assertEqual(avg.get_group_by_cols(), [])\n\n    def test_as_sql(self):\n        avg = Avg('field')\n        compiler = Mock()\n        connection = Mock()\n        avg.as_sql(compiler, connection)\n        compiler.compile.assert_called_once()\n\n    def test_as_sql_with_filter(self):\n        avg = Avg('field', filter=Value(True))\n        compiler = Mock()\n        connection = Mock()\n        connection.features.supports_aggregate_filter_clause = True\n        avg.as_sql(compiler, connection)\n        compiler.compile.assert_called_once()\n\n    def test_as_sql_without_filter_support(self):\n        avg = Avg('field', filter=Value(True))\n        compiler = Mock()\n        connection = Mock()\n        connection.features.supports_aggregate_filter_clause = False\n        avg.as_sql(compiler, connection)\n        compiler.compile.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_954": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom sphinx.application import Sphinx\nfrom sphinx.builders.manpage import ManualPageBuilder, default_man_pages\n\nclass TestManualPageBuilder(unittest.TestCase):\n    def setUp(self):\n        self.app = Sphinx(srcdir='.', confdir='.', outdir='.', doctreedir='.')\n        self.builder = ManualPageBuilder(self.app)\n\n    def test_init(self):\n        with patch('sphinx.builders.manpage.logger') as mock_logger:\n            self.builder.init()\n            mock_logger.warning.assert_called_once()\n\n    def test_get_outdated_docs(self):\n        self.assertEqual(self.builder.get_outdated_docs(), 'all manpages')\n\n    def test_get_target_uri(self):\n        with self.assertRaises(NoUri):\n            self.builder.get_target_uri('docname')\n\n    def test_write(self):\n        with patch('sphinx.builders.manpage.ManualPageWriter') as mock_writer, \\\n                patch('sphinx.builders.manpage.OptionParser'), \\\n                patch('sphinx.builders.manpage.logger') as mock_logger, \\\n                patch('sphinx.builders.manpage.FileOutput'), \\\n                patch('sphinx.builders.manpage.ensuredir'), \\\n                patch('sphinx.builders.manpage.inline_all_toctrees') as mock_inline_toctrees, \\\n                patch('sphinx.environment.BuildEnvironment.get_doctree') as mock_get_doctree, \\\n                patch('sphinx.environment.BuildEnvironment.resolve_references'):\n            mock_inline_toctrees.return_value = MagicMock()\n            mock_get_doctree.return_value = MagicMock()\n            self.builder.write()\n            mock_logger.info.assert_called()\n            mock_writer.assert_called()\n\n    def test_finish(self):\n        self.assertIsNone(self.builder.finish())\n\nclass TestDefaultManPages(unittest.TestCase):\n    def test_default_man_pages(self):\n        config = MagicMock()\n        config.project = 'Project'\n        config.release = '1.0'\n        config.root_doc = 'index'\n        config.author = 'Author'\n        result = default_man_pages(config)\n        self.assertEqual(result, [('index', 'project', 'Project 1.0', ['Author'], 1)])\n"], "sample_367": ["\nimport unittest\nfrom unittest.mock import Mock, patch\n\nfrom django.http import HttpResponse\nfrom django.test import RequestFactory\n\nfrom django.views.decorators.cache import cache_page, cache_control, never_cache\n\nclass TestCacheDecorators(unittest.TestCase):\n\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_cache_page(self):\n        def view(request):\n            return HttpResponse('Test')\n\n        decorated_view = cache_page(60)(view)\n        request = self.factory.get('/test-url/')\n        response = decorated_view(request)\n        self.assertEqual(response.status_code, 200)\n\n    def test_cache_control(self):\n        @cache_control(max_age=60)\n        def view(request):\n            return HttpResponse('Test')\n\n        request = self.factory.get('/test-url/')\n        response = view(request)\n        self.assertEqual(response['Cache-Control'], 'max-age=60')\n\n    def test_never_cache(self):\n        @never_cache\n        def view(request):\n            return HttpResponse('Test')\n\n        request = self.factory.get('/test-url/')\n        response = view(request)\n        self.assertEqual(response['Cache-Control'], 'max-age=0, no-cache, no-store, must-revalidate, private')\n\n    def test_never_cache_raises_error(self):\n        @never_cache\n        def view(request):\n            return HttpResponse('Test')\n\n        with self.assertRaises(TypeError):\n            view('not a request')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_715": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.ridge import Ridge, RidgeClassifier, RidgeCV, RidgeClassifierCV, ridge_regression\nfrom sklearn.datasets import make_regression, make_classification\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, accuracy_score\n\nclass TestRidge(unittest.TestCase):\n    def setUp(self):\n        self.X_reg, self.y_reg = make_regression(n_samples=100, n_features=20, noise=0.1)\n        self.X_clf, self.y_clf = make_classification(n_samples=100, n_features=20, n_classes=2, random_state=42)\n        self.X_reg_train, self.X_reg_test, self.y_reg_train, self.y_reg_test = train_test_split(self.X_reg, self.y_reg, test_size=0.2, random_state=42)\n        self.X_clf_train, self.X_clf_test, self.y_clf_train, self.y_clf_test = train_test_split(self.X_clf, self.y_clf, test_size=0.2, random_state=42)\n\n    def test_ridge_regression(self):\n        coefs = ridge_regression(self.X_reg_train, self.y_reg_train, alpha=1.0)\n        self.assertEqual(coefs.shape, (20,))\n\n    def test_Ridge(self):\n        model = Ridge(alpha=1.0)\n        model.fit(self.X_reg_train, self.y_reg_train)\n        pred = model.predict(self.X_reg_test)\n        self.assertIsInstance(pred, np.ndarray)\n\n    def test_RidgeClassifier(self):\n        model = RidgeClassifier(alpha=1.0)\n        model.fit(self.X_clf_train, self.y_clf_train)\n        pred = model.predict(self.X_clf_test)\n        self.assertIsInstance(pred, np.ndarray)\n\n    def test_RidgeCV(self):\n        model = RidgeCV(alphas=[0.1, 1.0, 10.0])\n        model.fit(self.X_reg_train, self.y_reg_train)\n        pred = model.predict(self.X_reg_test)\n        self.assertIsInstance(pred, np.ndarray)\n\n    def test_RidgeClassifierCV(self):\n        model = RidgeClassifierCV(alphas=[0.1, 1.0, 10.0])\n        model.fit(self.X_clf_train, self.y_clf_train)\n        pred = model.predict(self.X_clf_test)\n        self.assertIsInstance(pred, np.ndarray)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_281": ["\nfrom django.test import RequestFactory, TestCase\nfrom django.contrib.admin.sites import AdminSite\nfrom django.contrib.admin.models import LogEntry\nfrom django.contrib.auth.models import User\nfrom django.contrib.admin.views.autocomplete import AutocompleteJsonView\nfrom django.core.exceptions import FieldDoesNotExist, PermissionDenied, Http404\nfrom unittest.mock import Mock, patch\n\nclass TestAutocompleteJsonView(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.admin_site = AdminSite()\n        self.model_admin = Mock()\n        self.admin_site.register(User, self.model_admin)\n        self.source_field = Mock()\n        self.source_field.remote_field.model = User\n        self.model_admin.get_search_fields.return_value = ['username']\n        self.model_admin.to_field_allowed.return_value = True\n\n    def test_process_request_valid_parameters(self):\n        request = self.factory.get('/autocomplete/', {'term': 'test', 'app_label': 'auth', 'model_name': 'user', 'field_name': 'id'})\n        view = AutocompleteJsonView()\n        view.admin_site = self.admin_site\n        term, model_admin, source_field, to_field_name = view.process_request(request)\n        self.assertEqual(term, 'test')\n        self.assertEqual(model_admin, self.model_admin)\n        self.assertEqual(source_field, User._meta.get_field('id'))\n\n    def test_process_request_invalid_parameters(self):\n        request = self.factory.get('/autocomplete/', {'term': 'test', 'app_label': 'invalid', 'model_name': 'user', 'field_name': 'id'})\n        view = AutocompleteJsonView()\n        view.admin_site = self.admin_site\n        with self.assertRaises(PermissionDenied):\n            view.process_request(request)\n\n    def test_process_request_missing_search_fields(self):\n        request = self.factory.get('/autocomplete/', {'term': 'test', 'app_label': 'auth', 'model_name': 'user', 'field_name': 'id'})\n        view = AutocompleteJsonView()\n        view.admin_site = self.admin_site\n        self.model_admin.get_search_fields.return_value = []\n        with self.assertRaises(Http404):\n            view.process_request(request)\n\n    def test_get_queryset(self):\n        view = AutocompleteJsonView()\n        view.request = self.factory.get('/autocomplete/', {'term': 'test', 'app_label': 'auth', 'model_name': 'user', 'field_name': 'id'})\n        view.model_admin = self.model_admin\n        view.source_field = self.source_field\n        view.term = 'test'\n        view.get_queryset()\n        self.model_admin.get_queryset.assert_called_once_with(view.request)\n        self.model_admin.get_search_results.assert_called_once_with(view.request, view.model_admin.get_queryset.return_value, 'test')\n\n    def test_has_perm(self):\n        view = AutocompleteJsonView()\n        view.model_admin = self.model_admin\n        self.assertTrue(view.has_perm(self.factory.get('/autocomplete/')))\n\n    def test_get_paginator(self):\n        view = AutocompleteJsonView()\n        view.model_admin = self.model_admin\n        view.request = self.factory.get('/autocomplete/')\n        paginator = view.get_paginator()\n        self.model_admin.get_paginator.assert_called_once_with(view.request)\n\n    @patch('django.contrib.admin.views.autocomplete.JsonResponse')\n    def test_get(self, MockJsonResponse):\n        request = self.factory.get('/autocomplete/', {'term': 'test', 'app_label': 'auth', 'model_name': 'user', 'field_name': 'id'})\n        view = AutocompleteJsonView()\n        view.admin_site = self.admin_site\n        view.model_admin = self.model_admin\n        view.source_field = self.source_field\n        view.object_list = [User.objects.create_user('testuser')]\n        view.get(request)\n        self.model_admin.get_search_results.assert_called_once_with(request, view.model_admin.get_queryset.return_value, 'test')\n        MockJsonResponse.assert_called_once()\n"], "sample_906": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom inspect import Parameter\nfrom sphinx.util import inspect\n\nclass TestInspect(unittest.TestCase):\n    def test_unwrap(self):\n        func = MagicMock()\n        func.__wrapped__ = 'wrapped function'\n        self.assertEqual(inspect.unwrap(func), 'wrapped function')\n\n    def test_unwrap_all(self):\n        func = MagicMock()\n        func.__wrapped__ = 'wrapped function'\n        self.assertEqual(inspect.unwrap_all(func), 'wrapped function')\n\n    def test_getall(self):\n        mock = MagicMock()\n        mock.__all__ = ['a', 'b', 'c']\n        self.assertEqual(inspect.getall(mock), ['a', 'b', 'c'])\n\n    def test_ispartial(self):\n        from functools import partial\n        func = partial(int, base=2)\n        self.assertTrue(inspect.ispartial(func))\n\n    def test_isfunction(self):\n        def func():\n            pass\n        self.assertTrue(inspect.isfunction(func))\n\n    def test_isbuiltin(self):\n        self.assertTrue(inspect.isbuiltin(len))\n\n    def test_isroutine(self):\n        def func():\n            pass\n        self.assertTrue(inspect.isroutine(func))\n\n    def test_iscoroutinefunction(self):\n        async def func():\n            pass\n        self.assertTrue(inspect.iscoroutinefunction(func))\n\n    def test_isproperty(self):\n        class C:\n            @property\n            def prop(self):\n                pass\n        self.assertTrue(inspect.isproperty(C.prop))\n\n    def test_getdoc(self):\n        def func():\n            \"\"\"This is a function.\"\"\"\n            pass\n        self.assertEqual(inspect.getdoc(func), \"This is a function.\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_678": ["\nimport pytest\nfrom pytest import SubRequest\nfrom io import StringIO\nfrom unittest.mock import patch, MagicMock, call\nfrom _pytest import capture\nfrom _pytest.capture import _get_multicapture\nfrom _pytest.capture import CaptureManager\nfrom _pytest.capture import MultiCapture\nfrom _pytest.capture import DontReadFromInput\nfrom _pytest.capture import _py36_windowsconsoleio_workaround\n\ndef test_get_multicapture():\n    assert isinstance(_get_multicapture(\"fd\"), MultiCapture)\n    assert isinstance(_get_multicapture(\"sys\"), MultiCapture)\n    assert isinstance(_get_multicapture(\"no\"), MultiCapture)\n    assert isinstance(_get_multicapture(\"tee-sys\"), MultiCapture)\n    with pytest.raises(ValueError):\n        _get_multicapture(\"invalid\")\n\ndef test_capture_manager_init():\n    cm = CaptureManager(\"fd\")\n    assert cm._method == \"fd\"\n    assert cm._global_capturing is None\n    assert cm._capture_fixture is None\n\ndef test_capture_manager_is_capturing():\n    cm = CaptureManager(\"fd\")\n    assert cm.is_capturing() == \"global\"\n    cm.set_fixture(MagicMock())\n    assert cm.is_capturing() == \"fixture None\"\n    cm.unset_fixture()\n    assert cm.is_capturing() == \"global\"\n    cm._method = \"no\"\n    assert cm.is_capturing() == False\n\ndef test_dont_read_from_input():\n    dri = DontReadFromInput()\n    with pytest.raises(OSError):\n        dri.read()\n\n@patch(\"sys.platform\", \"win32\")\n@patch(\"sys.version_info\", (3, 6))\n@patch(\"sys.stdout\", StringIO())\ndef test_py36_windowsconsoleio_workaround():\n    _py36_windowsconsoleio_workaround(sys.stdout)\n"], "sample_1049": ["\nimport unittest\nfrom sympy import symbols, S, pi, Lambda, Dummy, oo\nfrom sympy.sets import Interval, FiniteSet, Union\nfrom sympy.sets.fancysets import Naturals, Naturals0, Integers, Reals, ImageSet, Range, normalize_theta_set, ComplexRegion\n\nclass TestFancySets(unittest.TestCase):\n\n    def test_naturals(self):\n        self.assertTrue(5 in S.Naturals)\n        self.assertFalse(0 in S.Naturals)\n        self.assertFalse(-5 in S.Naturals)\n\n    def test_naturals0(self):\n        self.assertTrue(5 in S.Naturals0)\n        self.assertTrue(0 in S.Naturals0)\n        self.assertFalse(-5 in S.Naturals0)\n\n    def test_integers(self):\n        self.assertTrue(5 in S.Integers)\n        self.assertTrue(0 in S.Integers)\n        self.assertTrue(-5 in S.Integers)\n\n    def test_reals(self):\n        self.assertTrue(5 in S.Reals)\n        self.assertTrue(S.Pi in S.Reals)\n        self.assertFalse(S.ImaginaryUnit in S.Reals)\n\n    def test_imageset(self):\n        x = symbols('x')\n        N = S.Naturals\n        squares = ImageSet(Lambda(x, x**2), N)\n        self.assertTrue(4 in squares)\n        self.assertFalse(5 in squares)\n\n    def test_range(self):\n        self.assertEqual(list(Range(3)), [0, 1, 2])\n        self.assertEqual(list(Range(10, 0, -2)), [10, 8, 6, 4, 2])\n\n    def test_normalize_theta_set(self):\n        self.assertEqual(normalize_theta_set(Interval(9*pi/2, 5*pi)), Interval(pi/2, pi))\n        self.assertEqual(normalize_theta_set(Interval(-3*pi/2, pi/2)), Interval.Ropen(0, 2*pi))\n\n    def test_complexregion(self):\n        a = Interval(2, 3)\n        b = Interval(4, 6)\n        c1 = ComplexRegion(a*b)\n        self.assertTrue(2.5 + 4.5*S.ImaginaryUnit in c1)\n        self.assertFalse(2.5 + 6.5*S.ImaginaryUnit in c1)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1182": ["\nimport unittest\nfrom sympy import symbols, sin, tan, pi, Integral\nfrom sympy.printing.pycode import MpmathPrinter, PythonCodePrinter, pycode, SymPyPrinter\n\nclass TestPyCode(unittest.TestCase):\n\n    def setUp(self):\n        self.x = symbols('x')\n        self.printer = PythonCodePrinter()\n        self.mpmath_printer = MpmathPrinter()\n        self.sympy_printer = SymPyPrinter()\n\n    def test_python_code_printer(self):\n        self.assertEqual(self.printer.doprint(tan(self.x) + 1), \"math.tan(x) + 1\")\n\n    def test_mpmath_printer(self):\n        self.assertEqual(self.mpmath_printer.doprint(1/2), \"mpmath.mpf(1)/mpmath.mpf(2)\")\n        self.assertEqual(self.mpmath_printer.doprint(Integral(sin(self.x), (self.x, 0, pi))), \"mpmath.quad(lambda x: math.sin(x), (0, pi))\")\n\n    def test_sympy_printer(self):\n        self.assertEqual(self.sympy_printer.doprint(sin(self.x) ** 2), \"sympy.sin(x)**2\")\n\n    def test_pycode_function(self):\n        self.assertEqual(pycode(tan(self.x) + 1), \"math.tan(x) + 1\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1160": ["\nimport unittest\nfrom sympy import symbols, S, Interval, FiniteSet\nfrom sympy.sets import ConditionSet\nfrom sympy.sets.handlers.intersection import intersection_sets\n\nclass TestIntersectionSets(unittest.TestCase):\n    def setUp(self):\n        self.x = symbols('x')\n\n    def test_interval_interval(self):\n        a = Interval(1, 5)\n        b = Interval(3, 7)\n        self.assertEqual(intersection_sets(a, b), Interval(3, 5))\n\n    def test_interval_finite_set(self):\n        a = Interval(1, 5)\n        b = FiniteSet(2, 3, 6)\n        self.assertEqual(intersection_sets(a, b), FiniteSet(2, 3))\n\n    def test_finite_set_finite_set(self):\n        a = FiniteSet(1, 2, 3)\n        b = FiniteSet(2, 3, 4)\n        self.assertEqual(intersection_sets(a, b), FiniteSet(2, 3))\n\n    def test_condition_set_set(self):\n        a = ConditionSet(self.x, self.x > 0, S.Reals)\n        b = Interval(1, 5)\n        self.assertEqual(intersection_sets(a, b), ConditionSet(self.x, self.x > 0, Interval(1, 5)))\n\n    # Add more test cases as needed\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1009": ["\nimport unittest\nfrom sympy import S, Symbol, symbols, factorial, factorial2, binomial, rf, ff, gamma, polygamma, EulerGamma, oo, zoo, simplify, expand_func, Product, Mul, Piecewise, Mod, Eq, sqrt, Poly\nfrom sympy.functions.combinatorial.factorials import subfactorial\n\nclass TestCombinatorialFactorials(unittest.TestCase):\n\n    def test_factorial(self):\n        self.assertEqual(factorial(0), 1)\n        self.assertEqual(factorial(7), 5040)\n        self.assertEqual(factorial(-2), zoo)\n        self.assertEqual(factorial(Symbol('n', integer=True)), factorial(Symbol('n', integer=True)))\n        self.assertEqual(factorial(2*Symbol('n', integer=True)), factorial(2*Symbol('n', integer=True)))\n        self.assertEqual(factorial(S(1)/2), factorial(S(1)/2))\n\n    def test_subfactorial(self):\n        self.assertEqual(subfactorial(0), 1)\n        self.assertEqual(subfactorial(1), 0)\n        self.assertEqual(subfactorial(5), 44)\n        self.assertEqual(subfactorial(Symbol('n', integer=True)), subfactorial(Symbol('n', integer=True)))\n\n    def test_factorial2(self):\n        self.assertEqual(factorial2(5), 15)\n        self.assertEqual(factorial2(-1), 1)\n        self.assertEqual(factorial2(-5), 1/3)\n        self.assertEqual(factorial2(Symbol('n', integer=True)), factorial2(Symbol('n', integer=True)))\n\n    def test_rising_factorial(self):\n        self.assertEqual(rf(S.One, 5), 120)\n        self.assertEqual(rf(Symbol('x'), 0), 1)\n        self.assertEqual(rf(Symbol('x'), 5), Symbol('x')*(1 + Symbol('x'))*(2 + Symbol('x'))*(3 + Symbol('x'))*(4 + Symbol('x')))\n\n    def test_falling_factorial(self):\n        self.assertEqual(ff(5, 5), 120)\n        self.assertEqual(ff(Symbol('x'), 0), 1)\n        self.assertEqual(ff(Symbol('x'), 5), Symbol('x')*(Symbol('x')-1)*(Symbol('x')-2)*(Symbol('x')-3)*(Symbol('x')-4))\n\n    def test_binomial(self):\n        self.assertEqual(binomial(15, 8), 6435)\n        self.assertEqual(binomial(Symbol('n', integer=True, positive=True), -1), 0)\n        self.assertEqual(binomial(S(5)/4, 3), -5/128)\n        self.assertEqual(binomial(Symbol('n', integer=True), 3), binomial(Symbol('n', integer=True), 3))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_208": ["\nfrom unittest.mock import MagicMock, patch\nfrom django.test import TestCase\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.state import ProjectState\nfrom django.apps import apps\n\nclass TestMigrationAutodetector(TestCase):\n    def setUp(self):\n        self.old_state = ProjectState()\n        self.new_state = ProjectState()\n        self.questioner = MagicMock()\n\n    def test_init(self):\n        detector = MigrationAutodetector(self.old_state, self.new_state, self.questioner)\n        self.assertEqual(detector.from_state, self.old_state)\n        self.assertEqual(detector.to_state, self.new_state)\n        self.assertEqual(detector.questioner, self.questioner)\n\n    @patch('django.db.migrations.autodetector.MigrationAutodetector._detect_changes')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector._build_migration_list')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector._optimize_migrations')\n    def test_changes(self, mock_optimize, mock_build, mock_detect):\n        mock_detect.return_value = {}\n        detector = MigrationAutodetector(self.old_state, self.new_state, self.questioner)\n        detector.changes(None)\n        mock_detect.assert_called_once()\n        mock_build.assert_called_once()\n        mock_optimize.assert_called_once()\n\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_renamed_models')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector._prepare_field_lists')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector._generate_through_model_map')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_deleted_models')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_created_models')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_deleted_proxies')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_created_proxies')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_altered_options')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_altered_managers')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.create_altered_indexes')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.create_altered_constraints')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_removed_constraints')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_removed_indexes')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_renamed_fields')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_removed_fields')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_added_fields')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_altered_fields')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_altered_order_with_respect_to')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_altered_unique_together')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_altered_index_together')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_added_indexes')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_added_constraints')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_altered_db_table')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector._sort_migrations')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector._build_migration_list')\n    @patch('django.db.migrations.autodetector.MigrationAutodetector._optimize_migrations')\n    def test_detect_changes(self, mock_optimize, mock_build, mock_sort, mock_db_table,\n                            mock_constraints, mock_indexes, mock_index_together, mock_unique_together,\n                            mock_order_with_respect_to, mock_altered_fields, mock_added_fields,\n                            mock_removed_fields, mock_renamed_fields, mock_removed_indexes,\n                            mock_removed_constraints, mock_altered_constraints, mock_altered_indexes,\n                            mock_managers, mock_options, mock_proxies, mock_created_models,\n                            mock_deleted_models, mock_through_map, mock_field_lists, mock_renamed_models):\n        detector = MigrationAutodetector(self.old_state, self.new_state, self.questioner)\n        detector._detect_changes()\n        mock_renamed_models.assert_called_once()\n        mock_field_lists.assert_called_once()\n        mock_through_map.assert_called_once()\n        mock_deleted_models.assert_called_once()\n        mock_created_models.assert_called_once()\n        mock_proxies.assert_called_once()\n        mock_options.assert_called_once()\n        mock_managers.assert_called_once()\n        mock_altered_indexes.assert_called_once()\n        mock_altered_constraints.assert_called_once()\n        mock_removed_constraints.assert_called_once()\n        mock_removed_indexes.assert_called_once()\n        mock_renamed_fields.assert_called_once()\n        mock_removed_fields.assert_called_once()\n        mock_added_fields.assert_called_once()\n        mock_altered_fields.assert_called_once()\n        mock_order_with_respect_to.assert_called_once()\n        mock_unique_together.assert_called_once()\n        mock_index_together.assert_called_once()\n        mock_indexes.assert_called_once()\n        mock_constraints.assert_called_once()\n        mock_db_table.assert_called_once()\n        mock_sort.assert_called_once()\n        mock_build.assert_called_once()\n        mock_optimize.assert_called_once()\n"], "sample_233": ["\nimport unittest\nfrom unittest.mock import patch\nfrom datetime import datetime, timedelta\nfrom django.conf import settings\nfrom django.contrib.auth.tokens import PasswordResetTokenGenerator\nfrom django.contrib.auth.models import User\n\nclass TestPasswordResetTokenGenerator(unittest.TestCase):\n    def setUp(self):\n        self.token_generator = PasswordResetTokenGenerator()\n        self.user = User.objects.create_user(username='testuser', email='testuser@test.com', password='testpassword')\n\n    def test_make_token(self):\n        token = self.token_generator.make_token(self.user)\n        self.assertIsInstance(token, str)\n\n    def test_check_token(self):\n        token = self.token_generator.make_token(self.user)\n        self.assertTrue(self.token_generator.check_token(self.user, token))\n\n    def test_check_token_invalid(self):\n        token = self.token_generator._make_token_with_timestamp(self.user, 0)\n        self.assertFalse(self.token_generator.check_token(self.user, token))\n\n    @patch.object(PasswordResetTokenGenerator, '_now', return_value=datetime(2001, 1, 1) + timedelta(days=settings.PASSWORD_RESET_TIMEOUT + 1))\n    def test_check_token_expired(self, mock_now):\n        token = self.token_generator.make_token(self.user)\n        self.assertFalse(self.token_generator.check_token(self.user, token))\n\n    def test_make_hash_value(self):\n        timestamp = self.token_generator._num_seconds(datetime.now())\n        hash_value = self.token_generator._make_hash_value(self.user, timestamp)\n        self.assertIsInstance(hash_value, str)\n\n    def test_num_seconds(self):\n        dt = datetime(2001, 1, 2)\n        self.assertEqual(self.token_generator._num_seconds(dt), 86400)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_496": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom io import StringIO\nfrom argparse import ArgumentParser\nfrom django.core.management.base import BaseCommand, AppCommand, LabelCommand, CommandParser, OutputWrapper, SystemCheckError\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.db import connections\nfrom django.apps import apps\n\nclass TestBaseCommand(unittest.TestCase):\n    def setUp(self):\n        self.command = BaseCommand()\n\n    def test_create_parser(self):\n        parser = self.command.create_parser('prog_name', 'subcommand')\n        self.assertIsInstance(parser, CommandParser)\n\n    def test_handle_default_options(self):\n        options = Mock(settings='test_settings', pythonpath='/test_path')\n        with patch('os.environ.__setitem__') as mock_setitem, patch('sys.path.insert') as mock_insert:\n            handle_default_options(options)\n            mock_setitem.assert_called_once_with('DJANGO_SETTINGS_MODULE', 'test_settings')\n            mock_insert.assert_called_once_with(0, '/test_path')\n\n    def test_output_wrapper(self):\n        out = StringIO()\n        wrapper = OutputWrapper(out)\n        wrapper.write('test')\n        self.assertEqual(out.getvalue(), 'test\\n')\n\n    def test_execute(self):\n        with patch.object(self.command, 'handle') as mock_handle, patch.object(self.command, 'check') as mock_check, patch.object(self.command, 'check_migrations') as mock_check_migrations:\n            self.command.execute()\n            mock_check.assert_called_once()\n            mock_check_migrations.assert_called_once()\n            mock_handle.assert_called_once()\n\n    def test_check(self):\n        with patch.object(self.command, '_run_checks') as mock_run_checks:\n            mock_run_checks.return_value = []\n            self.command.check()\n\n    def test_check_migrations(self):\n        with patch('django.db.migrations.executor.MigrationExecutor') as mock_executor:\n            mock_executor.return_value.migration_plan.return_value = ['migration']\n            with patch.object(self.command.stdout, 'write') as mock_write:\n                self.command.check_migrations()\n                mock_write.assert_called()\n\nclass TestAppCommand(unittest.TestCase):\n    def setUp(self):\n        self.command = AppCommand()\n\n    def test_handle(self):\n        with patch.object(apps, 'get_app_config') as mock_get_app_config, patch.object(self.command, 'handle_app_config') as mock_handle_app_config:\n            mock_get_app_config.return_value = 'app_config'\n            self.command.handle('app_label')\n            mock_handle_app_config.assert_called_once_with('app_config')\n\nclass TestLabelCommand(unittest.TestCase):\n    def setUp(self):\n        self.command = LabelCommand()\n\n    def test_handle(self):\n        with patch.object(self.command, 'handle_label') as mock_handle_label:\n            self.command.handle('label')\n            mock_handle_label.assert_called_once_with('label')\n"], "sample_189": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.db.models import Field, Value, Q, DateTimeField\nfrom django.db.models.sql.query import Query\nfrom django.db.models.lookups import (\n    Exact, IExact, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual,\n    IntegerGreaterThanOrEqual, IntegerLessThan, In, Contains, IContains,\n    StartsWith, IStartsWith, EndsWith, IEndsWith, Range, IsNull, Regex, IRegex,\n    YearExact, YearGt, YearGte, YearLt, YearLte, UUIDIExact, UUIDContains,\n    UUIDIContains, UUIDStartsWith, UUIDIStartsWith, UUIDEndsWith, UUIDIEndsWith,\n)\n\nclass TestDjangoLookups(unittest.TestCase):\n    def setUp(self):\n        self.connection = Mock()\n        self.compiler = Mock()\n        self.field = Field()\n\n    def test_exact_lookup(self):\n        lookup = Exact(self.field, 'test')\n        self.assertEqual(lookup.lookup_name, 'exact')\n        self.assertEqual(lookup.get_prep_lookup(), 'test')\n\n    def test_iexact_lookup(self):\n        lookup = IExact(self.field, 'test')\n        self.assertEqual(lookup.lookup_name, 'iexact')\n\n    # Add more tests for other lookups in a similar manner...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_838": ["\nimport unittest\nimport numpy as np\nfrom scipy import sparse\nfrom sklearn.linear_model.ridge import ridge_regression, Ridge, _RidgeGCV, RidgeCV, RidgeClassifier, RidgeClassifierCV\n\nclass TestRidgeRegression(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.X = np.random.rand(10, 5)\n        self.y = np.random.rand(10)\n        self.alpha = 1.0\n\n    def test_ridge_regression_shape(self):\n        coef = ridge_regression(self.X, self.y, self.alpha)\n        self.assertEqual(coef.shape, (5,))\n\n    def test_ridge_regression_solver(self):\n        solvers = ['auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga']\n        for solver in solvers:\n            coef = ridge_regression(self.X, self.y, self.alpha, solver=solver)\n            self.assertTrue(coef.shape, (5,))\n\n    def test_ridge_regression_sparse(self):\n        X_sparse = sparse.csr_matrix(self.X)\n        coef = ridge_regression(X_sparse, self.y, self.alpha)\n        self.assertEqual(coef.shape, (5,))\n\nclass TestRidge(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.X = np.random.rand(10, 5)\n        self.y = np.random.rand(10)\n        self.alpha = 1.0\n\n    def test_ridge_fit(self):\n        model = Ridge(self.alpha)\n        model.fit(self.X, self.y)\n        self.assertEqual(model.coef_.shape, (5,))\n\nclass TestRidgeGCV(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.X = np.random.rand(10, 5)\n        self.y = np.random.rand(10)\n        self.alphas = [0.1, 1.0, 10.0]\n\n    def test_ridge_gcv_fit(self):\n        model = _RidgeGCV(self.alphas)\n        model.fit(self.X, self.y)\n        self.assertEqual(model.coef_.shape, (5,))\n\nclass TestRidgeCV(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.X = np.random.rand(10, 5)\n        self.y = np.random.rand(10)\n        self.alphas = [0.1, 1.0, 10.0]\n\n    def test_ridge_cv_fit(self):\n        model = RidgeCV(self.alphas)\n        model.fit(self.X, self.y)\n        self.assertEqual(model.coef_.shape, (5,))\n\nclass TestRidgeClassifier(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.X = np.random.rand(10, 5)\n        self.y = np.random.choice([0, 1], size=10)\n        self.alpha = 1.0\n\n    def test_ridge_classifier_fit(self):\n        model = RidgeClassifier(self.alpha)\n        model.fit(self.X, self.y)\n        self.assertEqual(model.coef_.shape, (2, 5))\n\nclass TestRidgeClassifierCV(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.X = np.random.rand(10, 5)\n        self.y = np.random.choice([0, 1], size=10)\n        self.alphas = [0.1, 1.0, 10.0]\n\n    def test_ridge_classifier_cv_fit(self):\n        model = RidgeClassifierCV(self.alphas)\n        model.fit(self.X, self.y)\n        self.assertEqual(model.coef_.shape, (2, 5))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_882": ["\nimport unittest\nimport numpy as np\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.datasets import make_classification, make_regression\nfrom sklearn.model_selection import train_test_split\n\nclass TestMLPClassifier(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, random_state=1)\n        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(\n            self.X, self.y, stratify=self.y, random_state=1\n        )\n\n    def test_mlp_classifier_fit(self):\n        clf = MLPClassifier(random_state=1, max_iter=300)\n        clf.fit(self.X_train, self.y_train)\n        self.assertIsInstance(clf.coefs_, list)\n        self.assertIsInstance(clf.intercepts_, list)\n\n    def test_mlp_classifier_predict(self):\n        clf = MLPClassifier(random_state=1, max_iter=300).fit(self.X_train, self.y_train)\n        y_pred = clf.predict(self.X_test[:5])\n        self.assertEqual(len(y_pred), 5)\n\n    def test_mlp_classifier_predict_proba(self):\n        clf = MLPClassifier(random_state=1, max_iter=300).fit(self.X_train, self.y_train)\n        y_prob = clf.predict_proba(self.X_test[:5])\n        self.assertEqual(y_prob.shape, (5, 2))\n\n    def test_mlp_classifier_partial_fit(self):\n        clf = MLPClassifier(random_state=1, max_iter=1)\n        clf.partial_fit(self.X_train[:50], self.y_train[:50], classes=np.unique(self.y))\n        clf.partial_fit(self.X_train[50:], self.y_train[50:])\n        y_pred = clf.predict(self.X_test)\n        self.assertEqual(len(y_pred), len(self.y_test))\n\nclass TestMLPRegressor(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_regression(n_samples=200, random_state=1)\n        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(\n            self.X, self.y, random_state=1\n        )\n\n    def test_mlp_regressor_fit(self):\n        regr = MLPRegressor(random_state=1, max_iter=500)\n        regr.fit(self.X_train, self.y_train)\n        self.assertIsInstance(regr.coefs_, list)\n        self.assertIsInstance(regr.intercepts_, list)\n\n    def test_mlp_regressor_predict(self):\n        regr = MLPRegressor(random_state=1, max_iter=500).fit(self.X_train, self.y_train)\n        y_pred = regr.predict(self.X_test[:2])\n        self.assertEqual(len(y_pred), 2)\n\n    def test_mlp_regressor_partial_fit(self):\n        regr = MLPRegressor(random_state=1, max_iter=1)\n        regr.partial_fit(self.X_train[:100], self.y_train[:100])\n        regr.partial_fit(self.X_train[100:], self.y_train[100:])\n        y_pred = regr.predict(self.X_test)\n        self.assertEqual(len(y_pred), len(self.y_test))\n"], "sample_144": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.contrib.admin import checks\nfrom django.core.checks import Error\nfrom django.db import models\n\nclass TestCheckAdmin(unittest.TestCase):\n\n    def setUp(self):\n        self.admin_checks = checks.ModelAdminChecks()\n        self.model_admin = MagicMock()\n\n    @patch('django.apps.apps.is_installed')\n    def test_check_dependencies(self, mock_is_installed):\n        mock_is_installed.return_value = True\n        self.assertEqual(checks.check_dependencies(), [])\n\n    def test_check_save_as(self):\n        self.model_admin.save_as = 'invalid'\n        self.assertEqual(self.admin_checks._check_save_as(self.model_admin), [Error('The value of \"save_as\" must be a boolean.', obj=self.model_admin.__class__, id='admin.E101')])\n\n    def test_check_save_on_top(self):\n        self.model_admin.save_on_top = 'invalid'\n        self.assertEqual(self.admin_checks._check_save_on_top(self.model_admin), [Error('The value of \"save_on_top\" must be a boolean.', obj=self.model_admin.__class__, id='admin.E102')])\n\n    # More tests for other methods can be added here\n\nclass TestInlineModelAdminChecks(unittest.TestCase):\n\n    def setUp(self):\n        self.inline_checks = checks.InlineModelAdminChecks()\n        self.inline_model_admin = MagicMock()\n\n    # More tests for InlineModelAdminChecks can be added here\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_479": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db import models\nfrom django.db.migrations.operations import models as models_operations\n\nclass TestModelsOperations(unittest.TestCase):\n\n    def setUp(self):\n        self.model_name = 'TestModel'\n        self.fields = [\n            ('id', models.AutoField(primary_key=True)),\n            ('name', models.CharField(max_length=50))\n        ]\n        self.options = {'verbose_name': 'Test Model'}\n        self.bases = (models.Model,)\n        self.managers = [('objects', models.Manager())]\n        self.app_label = 'test_app'\n        self.state = MagicMock()\n\n    def test_CreateModel_initialization(self):\n        create_model = models_operations.CreateModel(self.model_name, self.fields, self.options, self.bases, self.managers)\n        self.assertEqual(create_model.name, self.model_name)\n        self.assertEqual(create_model.fields, self.fields)\n        self.assertEqual(create_model.options, self.options)\n        self.assertEqual(create_model.bases, self.bases)\n        self.assertEqual(create_model.managers, self.managers)\n\n    def test_CreateModel_state_forwards(self):\n        create_model = models_operations.CreateModel(self.model_name, self.fields, self.options, self.bases, self.managers)\n        create_model.state_forwards(self.app_label, self.state)\n        self.state.add_model.assert_called_once()\n\n    def test_DeleteModel_state_forwards(self):\n        delete_model = models_operations.DeleteModel(self.model_name)\n        delete_model.state_forwards(self.app_label, self.state)\n        self.state.remove_model.assert_called_once_with(self.app_label, self.model_name.lower())\n\n    # Add more tests for RenameModel, ModelOptionOperation, AlterModelTable, AlterModelTableComment,\n    # AlterTogetherOptionOperation, AlterUniqueTogether, AlterIndexTogether, AlterOrderWithRespectTo,\n    # AlterModelOptions, AlterModelManagers, IndexOperation, AddIndex, RemoveIndex, RenameIndex,\n    # AddConstraint, RemoveConstraint, etc.\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_313": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom pathlib import Path\nfrom django.template import engines, autoreload\nfrom django.template.backends.django import DjangoTemplates\nfrom django.utils._os import to_path\nfrom django.utils.autoreload import autoreload_started, file_changed\n\nclass TestAutoreload(unittest.TestCase):\n    def setUp(self):\n        self.mock_backend = MagicMock(spec=DjangoTemplates)\n        self.mock_backend.engine.dirs = ['/test_dir']\n        self.mock_backend.engine.template_loaders = [MagicMock()]\n        self.mock_backend.engine.template_loaders[0].get_dirs.return_value = ['/test_dir_loader']\n        engines.all = MagicMock(return_value=[self.mock_backend])\n\n    def test_get_template_directories(self):\n        directories = autoreload.get_template_directories()\n        self.assertIn(Path.cwd() / to_path('/test_dir'), directories)\n        self.assertIn(Path.cwd() / to_path('/test_dir_loader'), directories)\n\n    def test_reset_loaders(self):\n        autoreload.reset_loaders()\n        self.mock_backend.engine.template_loaders[0].reset.assert_called_once()\n\n    def test_watch_for_template_changes(self):\n        sender = MagicMock()\n        autoreload.watch_for_template_changes(sender)\n        sender.watch_dir.assert_called_with(Path.cwd() / to_path('/test_dir'), '**/*')\n        sender.watch_dir.assert_called_with(Path.cwd() / to_path('/test_dir_loader'), '**/*')\n\n    def test_template_changed(self):\n        sender = MagicMock()\n        file_path = Path('/test_dir/test_file.html')\n        result = autoreload.template_changed(sender, file_path)\n        self.mock_backend.engine.template_loaders[0].reset.assert_called_once()\n        self.assertTrue(result)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_258": ["\nimport unittest\nfrom django.dispatch import Signal, receiver\n\nclass TestSignal(unittest.TestCase):\n    def setUp(self):\n        self.signal = Signal()\n        self.sender = object()\n        self.received_signals = []\n\n    def receiver_function(self, signal, sender, **kwargs):\n        self.received_signals.append((signal, sender, kwargs))\n\n    @receiver(Signal())\n    def receiver_decorator_function(self, signal, sender, **kwargs):\n        self.received_signals.append((signal, sender, kwargs))\n\n    def test_signal_send(self):\n        self.signal.connect(self.receiver_function)\n        self.signal.send(self.sender, foo='bar')\n        self.assertEqual(len(self.received_signals), 1)\n        self.assertEqual(self.received_signals[0][0], self.signal)\n        self.assertEqual(self.received_signals[0][1], self.sender)\n        self.assertEqual(self.received_signals[0][2]['foo'], 'bar')\n\n    def test_signal_disconnect(self):\n        self.signal.connect(self.receiver_function)\n        self.signal.disconnect(self.receiver_function)\n        self.signal.send(self.sender, foo='bar')\n        self.assertEqual(len(self.received_signals), 0)\n\n    def test_receiver_decorator(self):\n        self.signal.send(self.sender, foo='baz')\n        self.assertEqual(len(self.received_signals), 1)\n        self.assertEqual(self.received_signals[0][2]['foo'], 'baz')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_644": ["\nimport logging\nimport pytest\nfrom _pytest.logging import caplog_records_key, LogCaptureFixture, LogCaptureHandler, ColoredLevelFormatter, PercentStyleMultiline\nfrom _pytest.nodes import Node\nfrom _pytest.config import Config\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.compat import final\nfrom unittest.mock import MagicMock, patch\n\n@pytest.fixture\ndef mock_config():\n    return MagicMock(spec=Config)\n\n@pytest.fixture\ndef mock_node():\n    return MagicMock(spec=Node)\n\n@pytest.fixture\ndef mock_request(mock_node):\n    request = MagicMock(spec=FixtureRequest)\n    request.node = mock_node\n    return request\n\ndef test_log_capture_fixture_initialization(mock_request):\n    fixture = LogCaptureFixture(mock_request.node, _ispytest=True)\n    assert fixture._item == mock_request.node\n\ndef test_log_capture_fixture_get_records(mock_request):\n    fixture = LogCaptureFixture(mock_request.node, _ispytest=True)\n    mock_request.node.stash[caplog_records_key] = {\"setup\": [\"record1\", \"record2\"]}\n    assert fixture.get_records(\"setup\") == [\"record1\", \"record2\"]\n\ndef test_log_capture_fixture_text(mock_request):\n    fixture = LogCaptureFixture(mock_request.node, _ispytest=True)\n    fixture.handler = MagicMock(spec=LogCaptureHandler)\n    fixture.handler.stream.getvalue.return_value = \"log text\"\n    assert fixture.text == \"log text\"\n\ndef test_log_capture_fixture_records(mock_request):\n    fixture = LogCaptureFixture(mock_request.node, _ispytest=True)\n    fixture.handler = MagicMock(spec=LogCaptureHandler)\n    fixture.handler.records = [\"record1\", \"record2\"]\n    assert fixture.records == [\"record1\", \"record2\"]\n\ndef test_log_capture_fixture_record_tuples(mock_request):\n    fixture = LogCaptureFixture(mock_request.node, _ispytest=True)\n    fixture.handler = MagicMock(spec=LogCaptureHandler)\n    fixture.handler.records = [\n        MagicMock(name=\"logger1\", levelno=logging.INFO, getMessage=lambda: \"message1\"),\n        MagicMock(name=\"logger2\", levelno=logging.ERROR, getMessage=lambda: \"message2\"),\n    ]\n    assert fixture.record_tuples == [(\"logger1\", logging.INFO, \"message1\"), (\"logger2\", logging.ERROR, \"message2\")]\n\ndef test_log_capture_fixture_messages(mock_request):\n    fixture = LogCaptureFixture(mock_request.node, _ispytest=True)\n    fixture.handler = MagicMock(spec=LogCaptureHandler)\n    fixture.handler.records = [\n        MagicMock(getMessage=lambda: \"message1\"),\n        MagicMock(getMessage=lambda: \"message2\"),\n    ]\n    assert fixture.messages == [\"message1\", \"message2\"]\n\ndef test_log_capture_fixture_clear(mock_request):\n    fixture = LogCaptureFixture(mock_request.node, _ispytest=True)\n    fixture.handler = MagicMock(spec=LogCaptureHandler)\n    fixture.clear()\n    fixture.handler.clear.assert_called_once()\n\ndef test_colored_level_formatter_add_color_level():\n    formatter = ColoredLevelFormatter(MagicMock(), \"%(levelname)s %(message)s\", \"%H:%M:%S\")\n    formatter.add_color_level(logging.INFO, \"green\")\n    assert formatter._level_to_fmt_mapping[logging.INFO] == \"\\x1b[32mINFO\\x1b[0m %(message)s\"\n\ndef test_percent_style_multiline_format():\n    formatter = PercentStyleMultiline(\"%(levelname)s %(message)s\", auto_indent=4)\n    record = logging.LogRecord(\"logger\", logging.INFO, \"pathname\", 42, \"message line1\\nmessage line2\", None, None)\n    assert formatter.format(record) == \"INFO message line1\\n    message line2\"\n\n# Add more tests for other functions and classes as needed\n"], "sample_501": ["\nimport unittest\nimport matplotlib.pyplot as plt\nimport matplotlib.legend as mlegend\nimport matplotlib.lines as mlines\nimport matplotlib.patches as mpatches\n\nclass TestLegend(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.line1 = mlines.Line2D([], [], label='Line 1')\n        self.line2 = mlines.Line2D([], [], label='Line 2', color='red')\n        self.patch = mpatches.Patch(color='green', label='Patch')\n        self.ax.add_artist(self.line1)\n        self.ax.add_artist(self.line2)\n        self.ax.add_artist(self.patch)\n\n    def test_legend_creation(self):\n        legend = self.ax.legend()\n        self.assertIsInstance(legend, mlegend.Legend)\n\n    def test_legend_handles_labels(self):\n        handles, labels = mlegend._get_legend_handles_labels([self.ax])\n        self.assertEqual(handles, [self.line1, self.line2, self.patch])\n        self.assertEqual(labels, ['Line 1', 'Line 2', 'Patch'])\n\n    def test_legend_title(self):\n        legend = self.ax.legend(title='Title')\n        self.assertEqual(legend.get_title().get_text(), 'Title')\n\n    def test_legend_frame(self):\n        legend = self.ax.legend(frameon=False)\n        self.assertFalse(legend.get_frame_on())\n\n    def test_legend_draggable(self):\n        legend = self.ax.legend()\n        draggable = legend.set_draggable(True)\n        self.assertIsInstance(draggable, mlegend.DraggableLegend)\n        self.assertTrue(legend.get_draggable())\n\n    def test_legend_bbox_to_anchor(self):\n        bbox_to_anchor = (1.05, 1)\n        legend = self.ax.legend(bbox_to_anchor=bbox_to_anchor)\n        self.assertEqual(legend.get_bbox_to_anchor(), bbox_to_anchor)\n\n    def test_legend_loc(self):\n        loc = 'upper left'\n        legend = self.ax.legend(loc=loc)\n        self.assertEqual(legend._loc, mlegend.Legend.codes[loc])\n\n    def test_legend_handler_map(self):\n        handler_map = {mlines.Line2D: mlegend.HandlerLine2D()}\n        legend = self.ax.legend(handler_map=handler_map)\n        self.assertEqual(legend.get_legend_handler_map(), handler_map)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1143": ["\nimport unittest\nfrom sympy.printing.conventions import split_super_sub, requires_partial\nfrom sympy import Symbol, Derivative\n\nclass TestConventions(unittest.TestCase):\n    def test_split_super_sub(self):\n        self.assertEqual(split_super_sub('a_x^1'), ('a', ['1'], ['x']))\n        self.assertEqual(split_super_sub('var_sub1__sup_sub2'), ('var', ['sup'], ['sub1', 'sub2']))\n        self.assertEqual(split_super_sub('var123'), ('var', [], ['123']))\n\n    def test_requires_partial(self):\n        x, y, z = Symbol('x'), Symbol('y'), Symbol('z')\n        self.assertTrue(requires_partial(x + y))\n        self.assertFalse(requires_partial(x + z))\n        self.assertTrue(requires_partial(Derivative(x**2 + y**2, x, y)))\n        self.assertFalse(requires_partial(Derivative(x**2 + y**2, x)))\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_990": ["\nimport unittest\nfrom sympy import symbols, Product, factorial, oo, pi, Sum, log, exp, S, cos, RisingFactorial, gamma, simplify\n\nclass TestProduct(unittest.TestCase):\n    def setUp(self):\n        self.i, self.m, self.n, self.k, self.a, self.b = symbols('i m n k a b', integer=True)\n\n    def test_product_evaluation(self):\n        self.assertEqual(Product(self.k, (self.k, 1, self.m)).doit(), factorial(self.m))\n        self.assertEqual(Product(self.k**2, (self.k, 1, self.m)).doit(), factorial(self.m)**2)\n\n    def test_wallis_product(self):\n        W = Product(2*self.i/(2*self.i-1) * 2*self.i/(2*self.i+1), (self.i, 1, oo))\n        W2 = Product(2*self.i/(2*self.i-1)*2*self.i/(2*self.i+1), (self.i, 1, self.n))\n        self.assertEqual(W.doit(), W)\n        self.assertEqual(W2.doit(), 2**(-2*self.n)*4**self.n*factorial(self.n)**2/(RisingFactorial(1/2, self.n)*RisingFactorial(3/2, self.n)))\n\n    def test_sin_pi_over_2(self):\n        P = pi * self.x * Product(1 - self.x**2/self.k**2, (self.k, 1, self.n))\n        P = P.subs(self.x, pi/2)\n        Pe = P.doit()\n        Pe = Pe.rewrite(gamma)\n        Pe = simplify(Pe)\n        self.assertEqual(Pe, sin(pi**2/2)*gamma(self.n + 1 + pi/2)*gamma(self.n - pi/2 + 1)/gamma(self.n + 1)**2)\n\n    def test_empty_product(self):\n        self.assertEqual(Product(self.i, (self.i, self.n, self.n-1)).doit(), 1)\n\n    def test_product_with_reversed_limits(self):\n        self.assertEqual(Product(2, (self.i, 10, self.n)).doit(), 2**(self.n - 9))\n        self.assertEqual(Product(2, (self.i, 10, 5)).doit(), 1/16)\n        self.assertEqual(1/Product(2, (self.i, 6, 9)).doit(), 1/16)\n\n    def test_karr_convention(self):\n        P1 = Product(self.x, (self.i, self.a, self.b)).doit()\n        P2 = Product(self.x, (self.i, self.b+1, self.a-1)).doit()\n        self.assertEqual(simplify(P1 * P2), 1)\n\n        P1 = Product(self.i, (self.i, self.b, self.a)).doit()\n        P2 = Product(self.i, (self.i, self.a+1, self.b-1)).doit()\n        self.assertEqual(simplify(P1 * P2), 1)\n\n    def test_product_is_convergent(self):\n        self.assertEqual(Product(self.n/(self.n + 1), (self.n, 1, oo)).is_convergent(), False)\n        self.assertEqual(Product(1/self.n**2, (self.n, 1, oo)).is_convergent(), False)\n        self.assertEqual(Product(cos(pi/self.n), (self.n, 1, oo)).is_convergent(), True)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_145": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db import models, connections, router, transaction\nfrom django.db.models import NOT_PROVIDED, ExpressionWrapper, IntegerField, Max, Value, Q, FieldDoesNotExist\nfrom django.db.models.constraints import CheckConstraint, UniqueConstraint\nfrom django.db.models.deletion import CASCADE, Collector\nfrom django.db.models.fields.related import ForeignObjectRel, OneToOneField\nfrom django.db.models.functions import Coalesce\nfrom django.db.models.manager import Manager\nfrom django.db.models.query import QuerySet\nfrom django.db.models.signals import class_prepared, post_init, post_save, pre_init, pre_save\nfrom django.apps import apps\nfrom django.conf import settings\nfrom django.core.exceptions import ValidationError, ObjectDoesNotExist, MultipleObjectsReturned, FieldError\nfrom django.utils import timezone\nfrom django.utils.version import get_version\nimport warnings\nfrom . import base\n\nclass TestModel(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        class TestModel(models.Model):\n            name = models.CharField(max_length=200)\n            age = models.IntegerField()\n\n        cls.model = TestModel\n\n    def setUp(self):\n        self.instance = self.model(name='John', age=30)\n\n    def test_init(self):\n        with patch('django.db.models.base.post_init.send') as mock_post_init:\n            self.instance.__init__(name='Jane', age=25)\n            mock_post_init.assert_called_once_with(sender=self.model, instance=self.instance)\n\n    def test_from_db(self):\n        db_instance = self.model.from_db('default', self.model._meta.concrete_fields, [1, 'John', 30])\n        self.assertEqual(db_instance._state.adding, False)\n        self.assertEqual(db_instance._state.db, 'default')\n\n    def test_repr(self):\n        self.assertEqual(repr(self.instance), '<TestModel: John>')\n\n    def test_str(self):\n        self.assertEqual(str(self.instance), 'TestModel object (None)')\n\n    def test_eq(self):\n        self.assertNotEqual(self.instance, 'John')\n        self.instance.pk = 1\n        self.assertEqual(self.instance, self.model(pk=1))\n\n    def test_hash(self):\n        self.instance.pk = 1\n        self.assertEqual(hash(self.instance), hash(1))\n\n    def test_reduce(self):\n        class_id, state = self.instance.__reduce__()\n        self.assertEqual(class_id, ('django.db.models.base', 'model_unpickle'))\n\n    def test_getstate(self):\n        state = self.instance.__getstate__()\n        self.assertEqual(state, self.instance.__dict__)\n\n    def test_setstate(self):\n        state = self.instance.__dict__\n        self.instance.__setstate__(state)\n        self.assertEqual(self.instance.__dict__, state)\n\n    def test_get_pk_val(self):\n        self.instance.pk = 1\n        self.assertEqual(self.instance._get_pk_val(), 1)\n\n    def test_set_pk_val(self):\n        self.instance._set_pk_val(2)\n        self.assertEqual(self.instance.pk, 2)\n\n    def test_get_deferred_fields(self):\n        deferred_fields = self.instance.get_deferred_fields()\n        self.assertEqual(deferred_fields, {'age'})\n\n    def test_refresh_from_db(self):\n        self.instance.pk = 1\n        self.instance.age = 31\n        with patch.object(self.model._base_manager, 'get', return_value=self.model(pk=1, name='John', age=30)):\n            self.instance.refresh_from_db()\n            self.assertEqual(self.instance.age, 30)\n\n    def test_serializable_value(self):\n        self.instance.pk = 1\n        self.assertEqual(self.instance.serializable_value('name'), 'John')\n        self.assertEqual(self.instance.serializable_value('pk'), 1)\n        with self.assertRaises(FieldDoesNotExist):\n            self.instance.serializable_value('nonexistent')\n\n    def test_save(self):\n        with patch.object(self.model, '_save_base') as mock_save_base:\n            self.instance.save()\n            mock_save_base.assert_called_once()\n\n    def test_save_base(self):\n        with patch.object(self.model, '_save_parents') as mock_save_parents:\n            with patch.object(self.model, '_save_table') as mock_save_table:\n                with patch('django.db.transaction.atomic') as mock_atomic:\n                    self.instance.save_base()\n                    mock_save_parents.assert_called_once()\n                    mock_save_table.assert_called_once()\n                    mock_atomic.assert_called_once()\n\n    def test_save_table(self):\n        with patch.object(self.model, '_do_insert') as mock_do_insert:\n            with patch.object(self.model, '_do_update') as mock_do_update:\n                self.instance.save_table()\n                mock_do_update.assert_called_once()\n                mock_do_insert.assert_not_called()\n\n    def test_do_update(self):\n        base_qs = MagicMock(spec=QuerySet)\n        base_qs.filter.return_value.exists.return_value = True\n        base_qs.filter.return_value._update.return_value = 1\n        updated = self.instance._do_update(base_qs, 'default', 1, [('name', None, 'Jane')], None, False)\n        self.assertTrue(updated)\n\n    def test_do_insert(self):\n        manager = MagicMock(spec=Manager)\n        manager._insert.return_value = [1]\n        results = self.instance._do_insert(manager, 'default', self.model._meta.concrete_fields, [], False)\n        self.assertEqual(results, [1])\n\n    def test_delete(self):\n        self.instance.pk = 1\n        with patch.object(Collector, 'delete') as mock_delete:\n            self.instance.delete()\n            mock_delete.assert_called_once()\n\n    def test_get_next_or_previous_by_FIELD(self):\n        self.instance.pk = 1\n        self.instance._state.db = 'default'\n        field = self.model._meta.get_field('age')\n        with patch.object(self.model._default_manager, 'filter') as mock_filter:\n            mock_filter.return_value.order_by.return_value = [self.model(pk=2, name='Jane', age=25)]\n            next_instance = self.instance._get_next_or_previous_by_FIELD(field, True)\n            self.assertEqual(next_instance.pk, 2)\n\n    def test_get_next_or_previous_in_order(self):\n        self.instance.pk = 1\n        self.instance._meta.order_with_respect_to = 'name'\n        with patch.object(self.model._default_manager, 'filter') as mock_filter:\n            mock_filter.return_value.filter.return_value.aggregate.return_value = {'_order__max': 2}\n            next_instance = self.instance._get_next_or_previous_in_order(True)\n            self.assertEqual(next_instance.pk, 2)\n\n    def test_prepare_database_save(self):\n        self.instance.pk = 1\n        field = MagicMock(spec=ForeignObjectRel)\n        field.get_related_field.return_value = MagicMock(attname='name')\n        self.instance.name = 'John'\n        value = self.instance.prepare_database_save(field)\n        self.assertEqual(value, 'John')\n\n    def test_clean(self):\n        self.instance.clean()\n\n    def test_validate_unique(self):\n        self.instance.save()\n        with self.assertRaises(ValidationError):\n            self.model(name='John', age=30).validate_unique()\n\n    def test_date_error_message(self):\n        error_message = self.instance.date_error_message('date', 'age', 'birth_date')\n        self.assertIsInstance(error_message, ValidationError)\n\n    def test_unique_error_message(self):\n        error_message = self.instance.unique_error_message(self.model, ['name'])\n        self.assertIsInstance(error_message, ValidationError)\n\n    def test_full_clean(self):\n        self.instance.full_clean()\n\n    def test_clean_fields(self):\n        self.instance.clean_fields()\n\n    def test_check(self):\n        errors = self.model.check()\n        self.assertEqual(errors, [])\n\n    def test_check_swappable(self):\n        self.model._meta.swapped = 'nonexistent.Model'\n        errors = self.model._check_swappable()\n        self.assertEqual(len(errors), 1)\n        self.model._meta.swapped = 'django.db.models.base.TestModel'\n        errors = self.model._check_swappable()\n        self.assertEqual(errors, [])\n\n    def test_check_model(self):\n        self.model._meta.proxy = True\n        errors = self.model._check_model()\n        self.assertEqual(len(errors), 1)\n        self.model._meta.proxy = False\n        errors = self.model._check_model()\n        self.assertEqual(errors, [])\n\n    def test_check_managers(self):\n        errors = self.model._check_managers()\n        self.assertEqual(errors, [])\n\n    def test_check_fields(self):\n        errors = self.model._check_fields()\n        self.assertEqual(errors, [])\n\n    def test_check_m2m_through_same_relationship(self):\n        errors = self.model._check_m2m_through_same_relationship()\n        self.assertEqual(errors, [])\n\n    def test_check_id_field(self):\n        self.model._meta.pk = self.model._meta.get_field('id')\n        errors = self.model._check_id_field()\n        self.assertEqual(errors, [])\n\n    def test_check_field_name_clashes(self):\n        errors = self.model._check_field_name_clashes()\n        self.assertEqual(errors, [])\n\n    def test_check_column_name_clashes(self):\n        errors = self.model._check_column_name_clashes()\n        self.assertEqual(errors, [])\n\n    def test_check_model_name_db_lookup_clashes(self):\n        self.model.__name__ = 'Test_Model'\n        errors = self.model._check_model_name_db_lookup_clashes()\n        self.assertEqual(len(errors), 1)\n        self.model.__name__ = 'TestModel'\n        errors = self.model._check_model_name_db_lookup_clashes()\n        self.assertEqual(errors, [])\n\n    def test_check_property_name_related_field_accessor_clashes(self):\n        errors = self.model._check_property_name_related_field_accessor_clashes()\n        self.assertEqual(errors, [])\n\n    def test_check_single_primary_key(self):\n        errors = self.model._check_single_primary_key()\n        self.assertEqual(errors, [])\n\n    def test_check_index_together(self):\n        self.model._meta.index_together = [['name', 'age']]\n        errors = self.model._check_index_together()\n        self.assertEqual(errors, [])\n        self.model._meta.index_together = [('name', 'age')]\n        errors = self.model._check_index_together()\n        self.assertEqual(len(errors), 1)\n        self.model._meta.index_together = ['name', 'age']\n        errors = self.model._check_index_together()\n        self.assertEqual(len(errors), 1)\n\n    def test_check_unique_together(self):\n        self.model._meta.unique_together = [['name', 'age']]\n        errors = self.model._check_unique_together()\n        self.assertEqual(errors, [])\n        self.model._meta.unique_together = [('name', 'age')]\n        errors = self.model._check_unique_together()\n        self.assertEqual(len(errors), 1)\n        self.model._meta.unique_together = ['name', 'age']\n        errors = self.model._check_unique_together()\n        self.assertEqual(len(errors), 1)\n\n    def test_check_indexes(self):\n        self.model._meta.indexes = [models.Index(fields=['name', 'age'])]\n        errors = self.model._check_indexes()\n        self.assertEqual(errors, [])\n\n    def test_check_ordering(self):\n        self.model._meta.ordering = ['name', 'age']\n        errors = self.model._check_ordering()\n        self.assertEqual(errors, [])\n\n    def test_check_long_column_names(self):\n        self.model._meta.local_fields = [self.model._meta.get_field('name')]\n        settings.DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}}\n        with patch('django.db.backends.sqlite3.DatabaseWrapper.ops.max_name_length', return_value=20):\n            errors = self.model._check_long_column_names()\n            self.assertEqual(len(errors), 1)\n        settings.DATABASES = {}\n\n    def test_check_constraints(self):\n        settings.DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}}\n        with patch('django.db.backends.sqlite3.DatabaseWrapper.features.supports_table_check_constraints', False):\n            errors = self.model._check_constraints()\n            self.assertEqual(len(errors), 1)\n        settings.DATABASES = {}\n"], "sample_749": ["\nimport unittest\nimport numpy as np\nfrom sklearn.compose import ColumnTransformer, make_column_transformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.exceptions import NotFittedError\n\nclass TestColumnTransformer(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[0., 1., 2., 2.], [1., 1., 0., 1.]])\n        self.ct = ColumnTransformer(transformers=[(\"norm1\", StandardScaler(), [0, 1]),\n                                                 (\"norm2\", StandardScaler(), slice(2, 4))])\n\n    def test_fit(self):\n        self.ct.fit(self.X)\n        self.assertIsInstance(self.ct.transformers_, list)\n\n    def test_fit_transform(self):\n        X_trans = self.ct.fit_transform(self.X)\n        self.assertEqual(X_trans.shape, self.X.shape)\n\n    def test_transform_without_fit(self):\n        with self.assertRaises(NotFittedError):\n            self.ct.transform(self.X)\n\n    def test_make_column_transformer(self):\n        ct_make = make_column_transformer(([0, 1], StandardScaler()), (slice(2, 4), StandardScaler()))\n        self.assertEqual(ct_make.transformers, self.ct.transformers)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1018": ["\nimport unittest\nfrom sympy import symbols, sin, pi, Matrix, MatrixSymbol, Piecewise, Function, Rational, Eq, IndexedBase, Idx\nfrom sympy.printing.octave import octave_code\n\nclass TestOctaveCode(unittest.TestCase):\n\n    def setUp(self):\n        self.x = symbols('x')\n        self.y = symbols('y')\n        self.n = symbols('n', integer=True, positive=True)\n        self.A = MatrixSymbol('A', self.n, self.n)\n        self.f = Function('f')\n        self.g = Function('g')\n        self.len_y = 5\n        self.y = IndexedBase('y', shape=(self.len_y,))\n        self.t = IndexedBase('t', shape=(self.len_y,))\n        self.Dy = IndexedBase('Dy', shape=(self.len_y-1,))\n        self.i = Idx('i', self.len_y-1)\n\n    def test_basic_function(self):\n        self.assertEqual(octave_code(sin(self.x)), 'sin(x)')\n\n    def test_power_function(self):\n        self.assertEqual(octave_code((2*self.x)**Rational(7, 2)), '2*sqrt(2)*x.^(7/2)')\n\n    def test_matrix_operations(self):\n        self.assertEqual(octave_code(self.x**2*self.y*self.A**3), '(x.^2.*y)*A^3')\n\n    def test_matrix_assignment(self):\n        mat = Matrix([[self.x**2, sin(self.x), self.x]])\n        self.assertEqual(octave_code(mat, assign_to='A'), 'A = [x.^2 sin(x) x];')\n\n    def test_piecewise_function(self):\n        pw = Piecewise((self.x + 1, self.x > 0), (self.x, True))\n        self.assertEqual(octave_code(pw, assign_to=self.x), 'x = ((x > 0).*(x + 1) + (~(x > 0)).*(x));')\n\n    def test_custom_functions(self):\n        custom_functions = {\n            \"f\": \"existing_octave_fcn\",\n            \"g\": [(lambda x: x.is_Matrix, \"my_mat_fcn\"),\n                  (lambda x: not x.is_Matrix, \"my_fcn\")]\n        }\n        mat = Matrix([[1, self.x]])\n        self.assertEqual(octave_code(self.f(self.x) + self.g(self.x) + self.g(mat), user_functions=custom_functions),\n                         'existing_octave_fcn(x) + my_fcn(x) + my_mat_fcn([1 x])')\n\n    def test_loops(self):\n        e = Eq(self.Dy[self.i], (self.y[self.i+1]-self.y[self.i])/(self.t[self.i+1]-self.t[self.i]))\n        self.assertEqual(octave_code(e.rhs, assign_to=e.lhs, contract=False),\n                         'Dy(i) = (y(i + 1) - y(i))./(t(i + 1) - t(i));')\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_131": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.db.backends.base.creation import BaseDatabaseCreation\n\nclass TestBaseDatabaseCreation(unittest.TestCase):\n\n    @patch('django.db.backends.base.creation.call_command')\n    def setUp(self, mock_call_command):\n        self.connection = MagicMock()\n        self.connection.alias = 'default'\n        self.connection.settings_dict = {\n            'NAME': 'test_db',\n            'TEST': {\n                'NAME': '',\n                'MIGRATE': True,\n            },\n        }\n        self.db_creation = BaseDatabaseCreation(self.connection)\n\n    def test_create_test_db(self, mock_call_command):\n        self.db_creation.create_test_db()\n        mock_call_command.assert_called_with(\n            'migrate',\n            verbosity=0,\n            interactive=False,\n            database=self.connection.alias,\n            run_syncdb=True,\n        )\n\n    def test_serialize_db_to_string(self):\n        data = self.db_creation.serialize_db_to_string()\n        self.assertIsInstance(data, str)\n\n    def test_deserialize_db_from_string(self):\n        data = '[]'  # empty JSON array\n        self.db_creation.deserialize_db_from_string(data)\n        # Add assertions based on the expected behavior\n\n    @patch('django.db.backends.base.creation.input', return_value='yes')\n    def test_create_test_db_with_confirmation(self, mock_input, mock_call_command):\n        self.connection.settings_dict['TEST']['NAME'] = 'existing_db'\n        self.db_creation.create_test_db(autoclobber=False)\n        mock_input.assert_called_once()\n        mock_call_command.assert_called_with(\n            'migrate',\n            verbosity=0,\n            interactive=False,\n            database=self.connection.alias,\n            run_syncdb=True,\n        )\n\n    @patch('django.db.backends.base.creation.input', return_value='no')\n    def test_create_test_db_with_cancellation(self, mock_input, mock_call_command):\n        self.connection.settings_dict['TEST']['NAME'] = 'existing_db'\n        with self.assertRaises(SystemExit):\n            self.db_creation.create_test_db(autoclobber=False)\n        mock_input.assert_called_once()\n        mock_call_command.assert_not_called()\n\n    # Add more test methods as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_255": ["\nfrom django.test import TestCase\nfrom django.contrib.auth.forms import (\n    AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm, PasswordResetForm,\n    ReadOnlyPasswordHashField, ReadOnlyPasswordHashWidget, SetPasswordForm,\n    UserCreationForm, UserChangeForm\n)\nfrom django.contrib.auth import get_user_model\n\nUser = get_user_model()\n\nclass TestAuthForms(TestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(username='testuser', email='testuser@example.com', password='testpassword')\n\n    def test_user_creation_form(self):\n        form_data = {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n        }\n        form = UserCreationForm(data=form_data)\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertEqual(user.username, 'newuser')\n        self.assertTrue(user.check_password('newpassword'))\n\n    def test_user_change_form(self):\n        form_data = {\n            'username': 'changeduser',\n            'password': self.user.password,\n        }\n        form = UserChangeForm(instance=self.user, data=form_data)\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertEqual(user.username, 'changeduser')\n\n    def test_authentication_form(self):\n        form_data = {\n            'username': 'testuser',\n            'password': 'testpassword',\n        }\n        form = AuthenticationForm(data=form_data)\n        self.assertTrue(form.is_valid())\n        user = form.get_user()\n        self.assertEqual(user, self.user)\n\n    def test_password_reset_form(self):\n        form_data = {\n            'email': 'testuser@example.com',\n        }\n        form = PasswordResetForm(data=form_data)\n        self.assertTrue(form.is_valid())\n        # Test email sending and token generation if necessary\n\n    def test_set_password_form(self):\n        form_data = {\n            'new_password1': 'newpassword',\n            'new_password2': 'newpassword',\n        }\n        form = SetPasswordForm(user=self.user, data=form_data)\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertTrue(user.check_password('newpassword'))\n\n    def test_password_change_form(self):\n        form_data = {\n            'old_password': 'testpassword',\n            'new_password1': 'newpassword',\n            'new_password2': 'newpassword',\n        }\n        form = PasswordChangeForm(user=self.user, data=form_data)\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertTrue(user.check_password('newpassword'))\n\n    def test_admin_password_change_form(self):\n        form_data = {\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n        }\n        form = AdminPasswordChangeForm(user=self.user, data=form_data)\n        self.assertTrue(form.is_valid())\n        user = form.save()\n        self.assertTrue(user.check_password('newpassword'))\n"], "sample_331": ["\nimport unittest\nfrom django.utils.dateparse import parse_date, parse_datetime, parse_duration, parse_time\nfrom django.utils.timezone import utc\nimport datetime\n\nclass TestDateParse(unittest.TestCase):\n\n    def test_parse_date(self):\n        self.assertEqual(parse_date(\"2022-01-01\"), datetime.date(2022, 1, 1))\n        self.assertIsNone(parse_date(\"2022-13-01\"))\n        self.assertRaises(ValueError, parse_date, \"2022-02-29\")\n\n    def test_parse_time(self):\n        self.assertEqual(parse_time(\"12:34:56\"), datetime.time(12, 34, 56))\n        self.assertIsNone(parse_time(\"12:34:61\"))\n        self.assertRaises(ValueError, parse_time, \"12:34:56+05:00\")\n\n    def test_parse_datetime(self):\n        self.assertEqual(parse_datetime(\"2022-01-01T12:34:56Z\"), datetime.datetime(2022, 1, 1, 12, 34, 56, tzinfo=utc))\n        self.assertEqual(parse_datetime(\"2022-01-01 12:34:56+05:00\"), datetime.datetime(2022, 1, 1, 12, 34, 56, tzinfo=datetime.timezone(datetime.timedelta(hours=5))))\n        self.assertIsNone(parse_datetime(\"2022-01-01 12:61:56\"))\n\n    def test_parse_duration(self):\n        self.assertEqual(parse_duration(\"1 12:34:56\"), datetime.timedelta(days=1, hours=12, minutes=34, seconds=56))\n        self.assertEqual(parse_duration(\"P1DT12H34M56S\"), datetime.timedelta(days=1, hours=12, minutes=34, seconds=56))\n        self.assertEqual(parse_duration(\"12:34:56\"), datetime.timedelta(hours=12, minutes=34, seconds=56))\n        self.assertIsNone(parse_duration(\"12:61:56\"))\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_217": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.forms import widgets\nfrom django.utils.safestring import SafeData, SafeText\n\nclass TestMedia(unittest.TestCase):\n    def test_media_repr(self):\n        media = widgets.Media(css={'screen': ['styles.css']}, js=['script.js'])\n        self.assertEqual(repr(media), \"Media(css={'screen': ['styles.css']}, js=['script.js'])\")\n\n    def test_media_str(self):\n        media = widgets.Media(css={'screen': ['styles.css']}, js=['script.js'])\n        self.assertIsInstance(str(media), SafeData)\n\n    # Add more tests for Media class methods as needed\n\nclass TestWidget(unittest.TestCase):\n    def test_widget_render(self):\n        widget = widgets.Widget()\n        rendered = widget.render('name', 'value')\n        self.assertIsInstance(rendered, SafeText)\n\n    # Add more tests for Widget class methods as needed\n\n# Add more test classes for other widget classes as needed\n"], "sample_981": ["\nimport unittest\nfrom sympy.combinatorics.permutations import Permutation, Cycle\n\nclass TestPermutation(unittest.TestCase):\n    def setUp(self):\n        self.p1 = Permutation([0, 2, 1])\n        self.p2 = Permutation([[1, 2], [3, 4]])\n        self.p3 = Permutation([[4, 5, 6], [0, 1]])\n        self.p4 = Permutation(3)\n        self.p5 = Permutation([1, 2, 9])\n        self.p6 = Permutation([2, 0, 3, 1])\n\n    def test_init(self):\n        self.assertEqual(self.p1.array_form, [0, 2, 1])\n        self.assertEqual(self.p2.array_form, [0, 2, 1, 4, 3])\n        self.assertEqual(self.p3.array_form, [1, 0, 2, 3, 5, 6, 4])\n        self.assertEqual(self.p4.array_form, [0, 1, 2, 3])\n\n    def test_cyclic_form(self):\n        self.assertEqual(self.p1.cyclic_form, [[1, 2]])\n        self.assertEqual(self.p2.cyclic_form, [[1, 2], [3, 4]])\n        self.assertEqual(self.p3.cyclic_form, [[0, 1], [4, 5, 6]])\n        self.assertEqual(self.p4.cyclic_form, [])\n\n    def test_full_cyclic_form(self):\n        self.assertEqual(self.p1.full_cyclic_form, [[0], [1, 2]])\n        self.assertEqual(self.p2.full_cyclic_form, [[0], [1, 2], [3, 4]])\n        self.assertEqual(self.p3.full_cyclic_form, [[0, 1], [2], [3], [4, 5, 6]])\n        self.assertEqual(self.p4.full_cyclic_form, [[0], [1], [2], [3]])\n\n    def test_size(self):\n        self.assertEqual(self.p1.size, 3)\n        self.assertEqual(self.p2.size, 5)\n        self.assertEqual(self.p3.size, 7)\n        self.assertEqual(self.p4.size, 4)\n\n    def test_commutes_with(self):\n        self.assertFalse(self.p1.commutes_with(self.p2))\n        self.assertTrue(self.p1.commutes_with(self.p1))\n\n    def test_rank(self):\n        self.assertEqual(self.p1.rank(), 2)\n        self.assertEqual(self.p2.rank(), 12)\n        self.assertEqual(self.p3.rank(), 10)\n        self.assertEqual(self.p4.rank(), 0)\n\n    def test_cardinality(self):\n        self.assertEqual(self.p1.cardinality, 6)\n        self.assertEqual(self.p2.cardinality, 120)\n        self.assertEqual(self.p3.cardinality, 5040)\n        self.assertEqual(self.p4.cardinality, 24)\n\n    def test_inversion_vector(self):\n        self.assertEqual(self.p1.inversion_vector(), [1, 0])\n        self.assertEqual(self.p2.inversion_vector(), [0, 2, 0, 0])\n        self.assertEqual(self.p3.inversion_vector(), [1, 0, 2, 0, 0, 2])\n        self.assertEqual(self.p4.inversion_vector(), [0, 0, 0])\n\n    def test_cycle_structure(self):\n        self.assertEqual(self.p1.cycle_structure, {2: 1, 1: 1})\n        self.assertEqual(self.p2.cycle_structure, {2: 2, 1: 1})\n        self.assertEqual(self.p3.cycle_structure, {3: 1, 1: 3})\n        self.assertEqual(self.p4.cycle_structure, {1: 4})\n\n    def test_conjugate(self):\n        self.assertEqual((self.p5 ^ self.p6).array_form, [2, 1, 9, 0, 3, 4, 5, 6, 8, 7])\n\n    def test_transpositions(self):\n        self.assertEqual(self.p1.transpositions(), [(1, 2)])\n        self.assertEqual(self.p2.transpositions(), [(1, 2), (3, 4)])\n        self.assertEqual(self.p3.transpositions(), [(0, 1), (4, 6), (4, 5)])\n        self.assertEqual(self.p4.transpositions(), [])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1003": ["\nimport unittest\nfrom sympy import symbols\nfrom sympy.polys.polyoptions import Options, Domain, Expand, Gens, Wrt, Sort, Order, Field, Greedy, Symmetric, Strict, Auto, Frac, Formal, Polys, Include, All, Gen, Symbols, Method\nfrom sympy.polys.orderings import lex\nfrom sympy.polys.domains import ZZ, QQ, RR, CC, EX, FF\nfrom sympy.polys.polyerrors import OptionError, GeneratorsError\n\nclass TestPolyOptions(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n\n    def test_expand_option(self):\n        opts = Options((), {'expand': True})\n        self.assertEqual(opts.expand, True)\n        opts = Options((), {'expand': False})\n        self.assertEqual(opts.expand, False)\n\n    def test_gens_option(self):\n        opts = Options((self.x, self.y, self.z), {})\n        self.assertEqual(opts.gens, (self.x, self.y, self.z))\n\n    def test_wrt_option(self):\n        opts = Options((), {'wrt': 'x, y'})\n        self.assertEqual(opts.wrt, ['x', 'y'])\n\n    def test_sort_option(self):\n        opts = Options((), {'sort': 'x > y'})\n        self.assertEqual(opts.sort, ['x', 'y'])\n\n    def test_order_option(self):\n        opts = Options((), {'order': lex})\n        self.assertEqual(opts.order, lex)\n\n    def test_field_option(self):\n        opts = Options((), {'field': True})\n        self.assertEqual(opts.field, True)\n\n    def test_greedy_option(self):\n        opts = Options((), {'greedy': False})\n        self.assertEqual(opts.greedy, False)\n\n    def test_domain_option(self):\n        opts = Options((), {'domain': 'ZZ'})\n        self.assertEqual(opts.domain, ZZ)\n\n    def test_symmetric_option(self):\n        opts = Options((), {'symmetric': True, 'modulus': 5})\n        self.assertEqual(opts.symmetric, True)\n\n    def test_strict_option(self):\n        opts = Options((), {'strict': False})\n        self.assertEqual(opts.strict, False)\n\n    def test_auto_flag(self):\n        opts = Options((), {'domain': 'ZZ'})\n        self.assertEqual(opts.auto, False)\n\n    def test_frac_flag(self):\n        opts = Options((), {'frac': True})\n        self.assertEqual(opts.frac, True)\n\n    def test_formal_flag(self):\n        opts = Options((), {'formal': True})\n        self.assertEqual(opts.formal, True)\n\n    def test_polys_flag(self):\n        opts = Options((), {'polys': True})\n        self.assertEqual(opts.polys, True)\n\n    def test_include_flag(self):\n        opts = Options((), {'include': True})\n        self.assertEqual(opts.include, True)\n\n    def test_all_flag(self):\n        opts = Options((), {'all': True})\n        self.assertEqual(opts.all, True)\n\n    def test_gen_flag(self):\n        opts = Options((), {'gen': self.x})\n        self.assertEqual(opts.gen, self.x)\n\n    def test_symbols_flag(self):\n        symbols_gen = Symbols.default()\n        opts = Options((), {'symbols': symbols_gen})\n        self.assertEqual(opts.symbols, symbols_gen)\n\n    def test_method_flag(self):\n        opts = Options((), {'method': 'test'})\n        self.assertEqual(opts.method, 'test')\n\n    def test_invalid_option(self):\n        with self.assertRaises(OptionError):\n            Options((), {'invalid': 'option'})\n\n    def test_invalid_domain(self):\n        with self.assertRaises(OptionError):\n            Options((), {'domain': 'invalid'})\n\n    def test_invalid_gen(self):\n        with self.assertRaises(OptionError):\n            Options((), {'gen': 'invalid'})\n\n    def test_invalid_symbols(self):\n        with self.assertRaises(OptionError):\n            Options((), {'symbols': 'invalid'})\n\n    def test_invalid_method(self):\n        with self.assertRaises(OptionError):\n            Options((), {'method': 123})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_996": ["\nimport unittest\nfrom sympy.parsing.sympy_parser import parse_expr, standard_transformations, TokenError, split_symbols, implicit_multiplication, convert_equals_signs, rationalize\nfrom sympy import symbols, Float, Rational, Eq\n\nclass TestSymPyParser(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_parse_expr(self):\n        expr = parse_expr(\"2*x + 3\")\n        self.assertEqual(str(expr), \"2*x + 3\")\n\n    def test_parse_expr_with_transformations(self):\n        expr = parse_expr(\"2 x + 3\", transformations=(standard_transformations + (implicit_multiplication,)))\n        self.assertEqual(str(expr), \"2*x + 3\")\n\n    def test_parse_expr_with_rationalize(self):\n        expr = parse_expr(\"0.5\", transformations=(rationalize,))\n        self.assertEqual(expr, Rational(1, 2))\n\n    def test_parse_expr_with_equals_sign(self):\n        expr = parse_expr(\"x = 2\", transformations=(convert_equals_signs,))\n        self.assertEqual(expr, Eq(self.x, 2))\n\n    def test_parse_expr_with_split_symbols(self):\n        expr = parse_expr(\"xyz\", transformations=(split_symbols, implicit_multiplication))\n        self.assertEqual(str(expr), \"x*y*z\")\n\n    def test_parse_expr_with_invalid_syntax(self):\n        with self.assertRaises(TokenError):\n            parse_expr(\"2 ** * 3\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_558": ["\nimport unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import SubplotSpec\nfrom mpl_toolkits.axes_grid1.axes_grid import Grid, ImageGrid\n\nclass TestGrid(unittest.TestCase):\n    def setUp(self):\n        self.fig = plt.figure()\n        self.rect = (0.1, 0.1, 0.8, 0.8)\n        self.nrows_ncols = (2, 3)\n\n    def test_init(self):\n        grid = Grid(self.fig, self.rect, self.nrows_ncols)\n        self.assertEqual(len(grid), 6)\n\n    def test_get_geometry(self):\n        grid = Grid(self.fig, self.rect, self.nrows_ncols)\n        self.assertEqual(grid.get_geometry(), (2, 3))\n\n    def test_set_get_axes_pad(self):\n        grid = Grid(self.fig, self.rect, self.nrows_ncols)\n        grid.set_axes_pad((0.05, 0.05))\n        self.assertEqual(grid.get_axes_pad(), (0.05, 0.05))\n\n    def test_set_label_mode(self):\n        grid = Grid(self.fig, self.rect, self.nrows_ncols)\n        grid.set_label_mode(\"all\")\n\nclass TestImageGrid(unittest.TestCase):\n    def setUp(self):\n        self.fig = plt.figure()\n        self.rect = (0.1, 0.1, 0.8, 0.8)\n        self.nrows_ncols = (2, 3)\n\n    def test_init(self):\n        grid = ImageGrid(self.fig, self.rect, self.nrows_ncols)\n        self.assertEqual(len(grid), 6)\n\n    def test_set_label_mode(self):\n        grid = ImageGrid(self.fig, self.rect, self.nrows_ncols)\n        grid.set_label_mode(\"1\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1097": ["\nimport unittest\nfrom sympy import hyper, meijerg, S, Tuple, pi, I, exp, log, Rational, cos, sqrt, symbols, oo, Derivative, gamma, O, appellf1\nfrom sympy.series.limits import limit\nfrom sympy.testing.randtest import random_complex_number as randcplx, verify_numerically as tn, test_derivative_numerically as td\nfrom sympy import gamma, expand_func\nfrom sympy.functions.special.hyper import (HyperRep, HyperRep_atanh, HyperRep_power1, HyperRep_power2, HyperRep_log1, HyperRep_asin1, HyperRep_asin2, HyperRep_sqrts1, HyperRep_sqrts2, HyperRep_log2, HyperRep_cosasin, HyperRep_sinasin)\n\nclass TestHypergeometricFunctions(unittest.TestCase):\n    def test_hyper_constructor(self):\n        z = symbols('z')\n        h = hyper((1, 2), [3, 4], z)\n        self.assertEqual(h.args[0], (1, 2))\n        self.assertEqual(h.args[1], (3, 4))\n        self.assertEqual(h.args[2], z)\n\n    def test_meijerg_constructor(self):\n        z = symbols('z')\n        g = meijerg([1, 2], [3, 4], [5], [6], z)\n        self.assertEqual(g.args[0], ((1, 2), ()))\n        self.assertEqual(g.args[1], ((3, 4), ()))\n        self.assertEqual(g.args[2], z)\n\n    def test_hyper_evaluation(self):\n        z = symbols('z')\n        h = hyper((1, 2), [3], z)\n        self.assertEqual(h.radius_of_convergence, 1)\n        self.assertEqual(h.convergence_statement, (abs(z) < 1))\n\n    def test_meijerg_evaluation(self):\n        z = symbols('z')\n        g = meijerg([1], [2], [3], [4], z)\n        self.assertEqual(g.get_period(), 2*pi)\n\n    def test_hyper_derivative(self):\n        z = symbols('z')\n        h = hyper((1, 2), [3], z)\n        dh = h.fdiff()\n        self.assertEqual(dh, (1*2/(3*1))*hyper((2, 3), [4], z))\n\n    def test_meijerg_derivative(self):\n        z = symbols('z')\n        g = meijerg([1], [2], [3], [4], z)\n        dg = g.fdiff()\n        # Expected result can be complex and depends on the argument\n        # Verify numerically for a random complex argument\n        tn(lambda: dg.subs(z, randcplx()) - g.subs(z, randcplx()).diff(z), tol=1e-10)\n\n    def test_appellf1_derivative(self):\n        a, b1, b2, c, x, y = symbols('a b1 b2 c x y')\n        f = appellf1(a, b1, b2, c, x, y)\n        df_dx = f.fdiff(5)\n        df_dy = f.fdiff(6)\n        self.assertEqual(df_dx, (a*b1/c)*appellf1(a + 1, b1 + 1, b2, c + 1, x, y))\n        self.assertEqual(df_dy, (a*b2/c)*appellf1(a + 1, b1, b2 + 1, c + 1, x, y))\n\n    # Add more tests for other functionalities of the hypergeometric and Meijer G-functions as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_741": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, confusion_matrix, cohen_kappa_score, jaccard_similarity_score, \\\n    matthews_corrcoef, zero_one_loss, f1_score, fbeta_score, precision_recall_fscore_support, precision_score, \\\n    recall_score, classification_report, hamming_loss, log_loss, hinge_loss, brier_score_loss, _check_targets\n\nclass TestClassificationMetrics(unittest.TestCase):\n    def setUp(self):\n        self.y_true = np.array([0, 1, 2, 0, 1, 2])\n        self.y_pred = np.array([0, 2, 1, 0, 0, 1])\n        self.y_true_multi = np.array([[0, 1], [1, 1]])\n        self.y_pred_multi = np.ones((2, 2))\n        self.labels = [0, 1, 2]\n\n    def test_accuracy_score(self):\n        self.assertEqual(accuracy_score(self.y_true, self.y_pred), 0.5)\n        self.assertEqual(accuracy_score(self.y_true_multi, self.y_pred_multi, normalize=False), 1)\n\n    def test_confusion_matrix(self):\n        self.assertTrue(np.array_equal(confusion_matrix(self.y_true, self.y_pred),\n                                       np.array([[2, 0, 0], [0, 0, 1], [1, 0, 2]])))\n\n    def test_cohen_kappa_score(self):\n        self.assertAlmostEqual(cohen_kappa_score(self.y_true, self.y_pred), -0.2380952380952381)\n\n    def test_jaccard_similarity_score(self):\n        self.assertEqual(jaccard_similarity_score(self.y_true, self.y_pred), 0.5)\n        self.assertEqual(jaccard_similarity_score(self.y_true_multi, self.y_pred_multi), 0.75)\n\n    def test_matthews_corrcoef(self):\n        self.assertAlmostEqual(matthews_corrcoef(self.y_true, self.y_pred), -0.22222222222222227)\n\n    def test_zero_one_loss(self):\n        self.assertEqual(zero_one_loss(self.y_true, self.y_pred), 0.5)\n        self.assertEqual(zero_one_loss(self.y_true_multi, self.y_pred_multi, normalize=False), 1)\n\n    def test_f1_score(self):\n        self.assertAlmostEqual(f1_score(self.y_true, self.y_pred, average='macro'), 0.26666666666666666)\n\n    def test_fbeta_score(self):\n        self.assertAlmostEqual(fbeta_score(self.y_true, self.y_pred, beta=0.5, average='macro'), 0.2380952380952381)\n\n    def test_precision_recall_fscore_support(self):\n        precision, recall, fscore, _ = precision_recall_fscore_support(self.y_true, self.y_pred, average=None)\n        self.assertTrue(np.array_equal(precision, np.array([0.66666667, 0., 0.5])))\n\n    def test_precision_score(self):\n        self.assertAlmostEqual(precision_score(self.y_true, self.y_pred, average='macro'), 0.2222222222222222)\n\n    def test_recall_score(self):\n        self.assertAlmostEqual(recall_score(self.y_true, self.y_pred, average='macro'), 0.3333333333333333)\n\n    def test_classification_report(self):\n        report = classification_report(self.y_true, self.y_pred, target_names=['class 0', 'class 1', 'class 2'])\n        self.assertIsInstance(report, str)\n\n    def test_hamming_loss(self):\n        self.assertEqual(hamming_loss(self.y_true, self.y_pred), 0.25)\n        self.assertEqual(hamming_loss(self.y_true_multi, self.y_pred_multi), 0.75)\n\n    def test_log_loss(self):\n        self.assertAlmostEqual(log_loss([\"spam\", \"ham\", \"ham\", \"spam\"],\n                                        [[.1, .9], [.9, .1], [.8, .2], [.35, .65]]), 0.2161698722731282)\n\n    def test_hinge_loss(self):\n        self.assertAlmostEqual(hinge_loss([-1, 1, 1], np.array([-2.18, 2.36, 0.09])), 0.3)\n\n    def test_brier_score_loss(self):\n        self.assertAlmostEqual(brier_score_loss(np.array([0, 1, 1, 0]), np.array([0.1, 0.9, 0.8, 0.3])), 0.0375)\n\n    def test_check_targets(self):\n        y_type, y_true, y_pred = _check_targets(self.y_true, self.y_pred)\n        self.assertEqual(y_type, 'multiclass')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_244": ["\nimport unittest\nfrom django.forms import Form, IntegerField\nfrom django.forms.formsets import BaseFormSet, formset_factory, all_valid\nfrom django.forms.utils import ErrorList\n\nclass TestForm(Form):\n    number = IntegerField()\n\nclass TestFormSet(BaseFormSet):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.form = TestForm\n\nclass TestFormSetMethods(unittest.TestCase):\n    def setUp(self):\n        self.formset_class = formset_factory(TestForm, formset=TestFormSet, extra=3)\n        self.formset = self.formset_class()\n\n    def test_total_form_count(self):\n        self.assertEqual(self.formset.total_form_count(), 3)\n\n    def test_initial_form_count(self):\n        self.assertEqual(self.formset.initial_form_count(), 0)\n\n    def test_forms(self):\n        self.assertEqual(len(self.formset.forms), 3)\n\n    def test_cleaned_data(self):\n        with self.assertRaises(AttributeError):\n            self.formset.cleaned_data\n\n    def test_is_valid(self):\n        self.assertFalse(self.formset.is_valid())\n\n    def test_full_clean(self):\n        self.formset.full_clean()\n        self.assertIsInstance(self.formset._non_form_errors, ErrorList)\n\n    def test_all_valid(self):\n        formsets = [self.formset]\n        self.assertFalse(all_valid(formsets))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_886": ["\nimport unittest\nimport warnings\nfrom sklearn.utils.deprecation import deprecated, _is_deprecated\n\nclass TestDeprecation(unittest.TestCase):\n    def setUp(self):\n        warnings.simplefilter(\"ignore\", category=FutureWarning)\n\n    def test_deprecated_function(self):\n        @deprecated()\n        def old_function():\n            pass\n\n        with warnings.catch_warnings(record=True) as w:\n            old_function()\n            self.assertTrue(len(w) == 1)\n            self.assertTrue(\"Function old_function is deprecated\" in str(w[0].message))\n\n    def test_deprecated_class(self):\n        @deprecated()\n        class OldClass:\n            pass\n\n        with warnings.catch_warnings(record=True) as w:\n            OldClass()\n            self.assertTrue(len(w) == 1)\n            self.assertTrue(\"Class OldClass is deprecated\" in str(w[0].message))\n\n    def test_deprecated_property(self):\n        @deprecated(\"Property is deprecated\")\n        @property\n        def old_property(self):\n            pass\n\n        class TestClass:\n            old_property = old_property\n\n        with warnings.catch_warnings(record=True) as w:\n            TestClass().old_property\n            self.assertTrue(len(w) == 1)\n            self.assertTrue(\"Property is deprecated\" in str(w[0].message))\n\n    def test_is_deprecated(self):\n        @deprecated()\n        def old_function():\n            pass\n\n        self.assertTrue(_is_deprecated(old_function))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_264": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.contrib.messages.storage.cookie import CookieStorage, MessageDecoder, MessageEncoder, MessageSerializer, Message\nfrom django.http import HttpRequest, HttpResponse\nfrom django.test import RequestFactory\n\nclass TestCookieStorage(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.request = self.factory.get('/')\n        self.response = HttpResponse()\n        self.storage = CookieStorage(self.request)\n\n    def test_init(self):\n        self.assertIsNotNone(self.storage.signer)\n\n    def test_encode(self):\n        messages = [Message(level=20, message='Test message', extra_tags='extra')]\n        encoded = self.storage._encode(messages)\n        self.assertIsNotNone(encoded)\n\n    def test_decode(self):\n        messages = [Message(level=20, message='Test message', extra_tags='extra')]\n        encoded = self.storage._encode(messages)\n        decoded = self.storage._decode(encoded)\n        self.assertEqual(messages, decoded)\n\n    def test_store(self):\n        messages = [Message(level=20, message='Test message', extra_tags='extra')]\n        unstored_messages = self.storage._store(messages, self.response)\n        self.assertEqual(unstored_messages, [])\n\n    def test_get(self):\n        messages = [Message(level=20, message='Test message', extra_tags='extra')]\n        self.storage._store(messages, self.response)\n        request = self.factory.get('/', COOKIES={self.storage.cookie_name: self.storage._encode(messages)})\n        storage = CookieStorage(request)\n        retrieved_messages, all_retrieved = storage._get()\n        self.assertEqual(messages, retrieved_messages)\n        self.assertTrue(all_retrieved)\n\n    def test_update_cookie(self):\n        messages = [Message(level=20, message='Test message', extra_tags='extra')]\n        encoded = self.storage._encode(messages)\n        self.storage._update_cookie(encoded, self.response)\n        self.assertEqual(self.response.cookies[self.storage.cookie_name].value, encoded)\n\n    def test_legacy_hash(self):\n        hash_value = self.storage._legacy_hash('test')\n        self.assertIsNotNone(hash_value)\n\n    def test_legacy_decode(self):\n        hash_value = self.storage._legacy_hash('test')\n        decoded = self.storage._legacy_decode(f'{hash_value}$test')\n        self.assertEqual(decoded, 'test')\n\nclass TestMessageEncoder(unittest.TestCase):\n    def test_default(self):\n        encoder = MessageEncoder()\n        message = Message(level=20, message='Test message', extra_tags='extra')\n        encoded = encoder.default(message)\n        self.assertEqual(encoded, [MessageEncoder.message_key, 0, 20, 'Test message', 'extra'])\n\nclass TestMessageDecoder(unittest.TestCase):\n    def test_process_messages(self):\n        decoder = MessageDecoder()\n        encoded = [MessageEncoder.message_key, 0, 20, 'Test message', 'extra']\n        decoded = decoder.process_messages(encoded)\n        self.assertEqual(decoded.level, 20)\n        self.assertEqual(decoded.message, 'Test message')\n        self.assertEqual(decoded.extra_tags, 'extra')\n\nclass TestMessageSerializer(unittest.TestCase):\n    def test_dumps_loads(self):\n        serializer = MessageSerializer()\n        messages = [Message(level=20, message='Test message', extra_tags='extra')]\n        serialized = serializer.dumps(messages)\n        deserialized = serializer.loads(serialized)\n        self.assertEqual(messages, deserialized)\n"], "sample_130": ["\nfrom unittest.mock import Mock, patch\nfrom django.db.models.query import QuerySet, RawQuerySet\nfrom django.test import TestCase\n\nclass TestQuerySetMethods(TestCase):\n\n    def setUp(self):\n        # Set up any necessary objects or data for your tests\n        pass\n\n    def test_filter(self):\n        qs = QuerySet()\n        filtered_qs = qs.filter(field1='value1')\n        self.assertIsInstance(filtered_qs, QuerySet)\n        # Add more assertions to validate the filter method\n\n    def test_exclude(self):\n        qs = QuerySet()\n        excluded_qs = qs.exclude(field1='value1')\n        self.assertIsInstance(excluded_qs, QuerySet)\n        # Add more assertions to validate the exclude method\n\n    def test_union(self):\n        qs1 = QuerySet()\n        qs2 = QuerySet()\n        union_qs = qs1.union(qs2)\n        self.assertIsInstance(union_qs, QuerySet)\n        # Add more assertions to validate the union method\n\n    def test_intersection(self):\n        qs1 = QuerySet()\n        qs2 = QuerySet()\n        intersection_qs = qs1.intersection(qs2)\n        self.assertIsInstance(intersection_qs, QuerySet)\n        # Add more assertions to validate the intersection method\n\n    def test_difference(self):\n        qs1 = QuerySet()\n        qs2 = QuerySet()\n        difference_qs = qs1.difference(qs2)\n        self.assertIsInstance(difference_qs, QuerySet)\n        # Add more assertions to validate the difference method\n\n    def test_select_related(self):\n        qs = QuerySet()\n        selected_qs = qs.select_related('field1')\n        self.assertIsInstance(selected_qs, QuerySet)\n        # Add more assertions to validate the select_related method\n\n    def test_prefetch_related(self):\n        qs = QuerySet()\n        prefetched_qs = qs.prefetch_related('field1')\n        self.assertIsInstance(prefetched_qs, QuerySet)\n        # Add more assertions to validate the prefetch_related method\n\n    def test_annotate(self):\n        qs = QuerySet()\n        annotated_qs = qs.annotate(field1='value1')\n        self.assertIsInstance(annotated_qs, QuerySet)\n        # Add more assertions to validate the annotate method\n\n    def test_order_by(self):\n        qs = QuerySet()\n        ordered_qs = qs.order_by('field1')\n        self.assertIsInstance(ordered_qs, QuerySet)\n        # Add more assertions to validate the order_by method\n\n    def test_distinct(self):\n        qs = QuerySet()\n        distinct_qs = qs.distinct('field1')\n        self.assertIsInstance(distinct_qs, QuerySet)\n        # Add more assertions to validate the distinct method\n\n    def test_extra(self):\n        qs = QuerySet()\n        extra_qs = qs.extra(select={'field1': 'value1'})\n        self.assertIsInstance(extra_qs, QuerySet)\n        # Add more assertions to validate the extra method\n\n    def test_reverse(self):\n        qs = QuerySet()\n        reversed_qs = qs.reverse()\n        self.assertIsInstance(reversed_qs, QuerySet)\n        # Add more assertions to validate the reverse method\n\n    def test_defer(self):\n        qs = QuerySet()\n        deferred_qs = qs.defer('field1')\n        self.assertIsInstance(deferred_qs, QuerySet)\n        # Add more assertions to validate the defer method\n\n    def test_only(self):\n        qs = QuerySet()\n        only_qs = qs.only('field1')\n        self.assertIsInstance(only_qs, QuerySet)\n        # Add more assertions to validate the only method\n\n    def test_using(self):\n        qs = QuerySet()\n        using_qs = qs.using('database_alias')\n        self.assertIsInstance(using_qs, QuerySet)\n        # Add more assertions to validate the using method\n\n    def test_raw(self):\n        qs = QuerySet()\n        raw_qs = qs.raw('SELECT * FROM table')\n        self.assertIsInstance(raw_qs, RawQuerySet)\n        # Add more assertions to validate the raw method\n\n    def test_values(self):\n        qs = QuerySet()\n        values_qs = qs.values('field1')\n        self.assertIsInstance(values_qs, QuerySet)\n        # Add more assertions to validate the values method\n\n    def test_values_list(self):\n        qs = QuerySet()\n        values_list_qs = qs.values_list('field1')\n        self.assertIsInstance(values_list_qs, QuerySet)\n        # Add more assertions to validate the values_list method\n\n    def test_dates(self):\n        qs = QuerySet()\n        dates_qs = qs.dates('field1', 'kind')\n        self.assertIsInstance(dates_qs, QuerySet)\n        # Add more assertions to validate the dates method\n\n    def test_datetimes(self):\n        qs = QuerySet()\n        datetimes_qs = qs.datetimes('field1', 'kind')\n        self.assertIsInstance(datetimes_qs, QuerySet)\n        # Add more assertions to validate the datetimes method\n\n    def test_none(self):\n        qs = QuerySet()\n        none_qs = qs.none()\n        self.assertIsInstance(none_qs, QuerySet)\n        # Add more assertions to validate the none method\n\n    def test_ordered(self):\n        qs = QuerySet()\n        self.assertIsInstance(qs.ordered, bool)\n        # Add more assertions to validate the ordered property\n\n    def test_db(self):\n        qs = QuerySet()\n        self.assertIsInstance(qs.db, str)\n        # Add more assertions to validate the db property\n\n    # Add more test methods for other QuerySet methods\n\nclass TestRawQuerySetMethods(TestCase):\n\n    def setUp(self):\n        # Set up any necessary objects or data for your tests\n        pass\n\n    def test_resolve_model_init_order(self):\n        raw_qs = RawQuerySet(raw_query='SELECT * FROM table')\n        model_init_names, model_init_order, annotation_fields = raw_qs.resolve_model_init_order()\n        self.assertIsInstance(model_init_names, list)\n        self.assertIsInstance(model_init_order, list)\n        self.assertIsInstance(annotation_fields, list)\n        # Add more assertions to validate the resolve_model_init_order method\n\n    def test_prefetch_related(self):\n        raw_qs = RawQuerySet(raw_query='SELECT * FROM table')\n        prefetched_qs = raw_qs.prefetch_related('field1')\n        self.assertIsInstance(prefetched_qs, RawQuerySet)\n        # Add more assertions to validate the prefetch_related method\n\n    # Add more test methods for other RawQuerySet methods\n"], "sample_951": ["\nimport unittest\nfrom inspect import Parameter, signature\nfrom unittest.mock import Mock\nfrom sphinx.util import inspect\nfrom sphinx.util.inspect import TypeAliasNamespace, stringify_signature\n\nclass TestInspectUtils(unittest.TestCase):\n    def test_getargspec(self):\n        def func(a, b=1, *args, c=3, **kwargs):\n            pass\n\n        result = inspect.getargspec(func)\n        self.assertEqual(result.args, ['a', 'b'])\n        self.assertEqual(result.varargs, 'args')\n        self.assertEqual(result.varkw, 'kwargs')\n        self.assertEqual(result.defaults, (1,))\n        self.assertEqual(result.kwonlyargs, ['c'])\n        self.assertEqual(result.kwonlydefaults, {'c': 3})\n\n    def test_unwrap(self):\n        def inner():\n            pass\n\n        def outer():\n            pass\n        outer.__wrapped__ = inner\n\n        self.assertEqual(inspect.unwrap(outer), inner)\n\n    def test_signature(self):\n        def func(a: int, b: str = 'default') -> bool:\n            pass\n\n        sig = inspect.signature(func)\n        self.assertEqual(stringify_signature(sig), '(a: int, b: str = \\'default\\') -> bool')\n\n    def test_TypeAliasNamespace(self):\n        mapping = {'module.Class': 'Alias'}\n        namespace = TypeAliasNamespace(mapping)\n        self.assertEqual(str(namespace['module.Class']), 'Alias')\n\n    def test_getdoc(self):\n        class TestClass:\n            def __init__(self):\n                \"\"\"Test docstring.\"\"\"\n                pass\n\n        self.assertEqual(inspect.getdoc(TestClass.__init__), \"Test docstring.\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_834": ["\nimport unittest\nimport numpy as np\nfrom sklearn.compose import ColumnTransformer, make_column_transformer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.exceptions import NotFittedError\n\nclass TestColumnTransformer(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[0, 1, 2], [1, 2, 3], [2, 3, 4]])\n        self.y = np.array([0, 1, 0])\n        self.transformer = ColumnTransformer(\n            transformers=[\n                ('num', StandardScaler(), [0]),\n                ('cat', OneHotEncoder(), [1])\n            ]\n        )\n\n    def test_fit_transform(self):\n        result = self.transformer.fit_transform(self.X, self.y)\n        self.assertEqual(result.shape, (3, 4))\n\n    def test_transform_before_fit(self):\n        with self.assertRaises(NotFittedError):\n            self.transformer.transform(self.X)\n\n    def test_get_feature_names(self):\n        self.transformer.fit(self.X, self.y)\n        feature_names = self.transformer.get_feature_names()\n        self.assertEqual(len(feature_names), 4)\n\n    def test_make_column_transformer(self):\n        ct = make_column_transformer(\n            (StandardScaler(), [0]),\n            (OneHotEncoder(), [1])\n        )\n        self.assertIsInstance(ct, ColumnTransformer)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_475": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.contrib.admin import checks\nfrom django.core.checks import Error\nfrom django.db import models\n\nclass TestAdminChecks(unittest.TestCase):\n    def setUp(self):\n        self.mock_obj = MagicMock()\n        self.mock_obj.model = MagicMock()\n        self.mock_obj.model._meta = MagicMock()\n        self.mock_obj.model._meta.label = \"TestModel\"\n        self.mock_obj.model._meta.get_field.return_value = MagicMock()\n\n    def test_must_be(self):\n        result = checks.must_be(\"a list or tuple\", \"test_option\", self.mock_obj, \"test.id\")\n        self.assertIsInstance(result[0], Error)\n        self.assertEqual(result[0].msg, \"The value of 'test_option' must be a list or tuple.\")\n\n    def test_must_inherit_from(self):\n        result = checks.must_inherit_from(\"BaseModelForm\", \"test_option\", self.mock_obj, \"test.id\")\n        self.assertIsInstance(result[0], Error)\n        self.assertEqual(result[0].msg, \"The value of 'test_option' must inherit from 'BaseModelForm'.\")\n\n    def test_refer_to_missing_field(self):\n        self.mock_obj.model._meta.get_field.side_effect = models.FieldDoesNotExist(\"test_field\")\n        result = checks.refer_to_missing_field(\"test_field\", \"test_option\", self.mock_obj, \"test.id\")\n        self.assertIsInstance(result[0], Error)\n        self.assertEqual(result[0].msg, \"The value of 'test_option' refers to 'test_field', which is not a field of 'TestModel'.\")\n\n    # Add more tests for other functions in checks.py as needed\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_404": ["\nimport unittest\nfrom django.template import Engine, Context, TemplateSyntaxError\nfrom django.template.base import Template, Lexer, Parser, TokenType, FilterExpression, Variable\n\nclass TestTemplateBase(unittest.TestCase):\n    def setUp(self):\n        self.engine = Engine()\n\n    def test_template_render(self):\n        template = Template(\"Hello, {{ name }}!\")\n        context = Context({\"name\": \"World\"})\n        self.assertEqual(template.render(context), \"Hello, World!\")\n\n    def test_lexer_tokenize(self):\n        lexer = Lexer(\"Hello, {{ name }}!\")\n        tokens = lexer.tokenize()\n        self.assertEqual(len(tokens), 3)\n        self.assertEqual(tokens[0].token_type, TokenType.TEXT)\n        self.assertEqual(tokens[1].token_type, TokenType.VAR)\n        self.assertEqual(tokens[2].token_type, TokenType.TEXT)\n\n    def test_parser_parse(self):\n        tokens = [TokenType.TEXT(\"Hello, \"), TokenType.VAR(\"name\"), TokenType.TEXT(\"!\")]\n        parser = Parser(tokens)\n        nodelist = parser.parse()\n        self.assertEqual(len(nodelist), 3)\n\n    def test_filter_expression_resolve(self):\n        fe = FilterExpression(\"name|upper\", Parser([]))\n        context = Context({\"name\": \"world\"})\n        self.assertEqual(fe.resolve(context), \"WORLD\")\n\n    def test_variable_resolve(self):\n        var = Variable(\"name\")\n        context = Context({\"name\": \"World\"})\n        self.assertEqual(var.resolve(context), \"World\")\n\n    def test_invalid_filter_expression(self):\n        with self.assertRaises(TemplateSyntaxError):\n            FilterExpression(\"name|invalid_filter\", Parser([]))\n\n    def test_invalid_variable(self):\n        with self.assertRaises(TemplateSyntaxError):\n            Variable(\"invalid_variable|upper\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_150": ["\nfrom django.contrib.auth.checks import check_models_permissions, check_user_model\nfrom django.core import checks\nfrom django.test import SimpleTestCase, override_settings, override_system_checks\nfrom django.apps import apps\n\nclass ChecksTestCase(SimpleTestCase):\n    @override_settings(AUTH_USER_MODEL='auth.User')\n    def test_check_user_model(self):\n        errors = check_user_model()\n        self.assertEqual(errors, [])\n\n    @override_settings(AUTH_USER_MODEL='custom_user.CustomUser')\n    def test_check_user_model_custom_user(self):\n        # Assuming CustomUser model exists with correct configurations\n        errors = check_user_model()\n        self.assertEqual(errors, [])\n\n    @override_settings(AUTH_USER_MODEL='custom_user.InvalidCustomUser')\n    def test_check_user_model_invalid_custom_user(self):\n        # Assuming InvalidCustomUser model exists with invalid configurations\n        errors = check_user_model()\n        self.assertIsInstance(errors[0], checks.Error)\n\n    def test_check_models_permissions(self):\n        errors = check_models_permissions()\n        self.assertEqual(errors, [])\n\n    @override_system_checks([])\n    def test_check_models_permissions_custom_models(self):\n        # Assuming custom models exist with correct permissions\n        errors = check_models_permissions(apps.get_app_configs())\n        self.assertEqual(errors, [])\n\n    @override_system_checks([])\n    def test_check_models_permissions_invalid_custom_models(self):\n        # Assuming custom models exist with invalid permissions\n        errors = check_models_permissions(apps.get_app_configs())\n        self.assertIsInstance(errors[0], checks.Error)\n"], "sample_830": ["\nimport unittest\nimport sys\nimport platform\nfrom unittest.mock import patch, MagicMock\nfrom sklearn.utils._show_versions import _get_sys_info, _get_deps_info\n\nclass TestShowVersions(unittest.TestCase):\n    @patch('sys.version', 'Python 3.8.5')\n    @patch('sys.executable', '/usr/bin/python3')\n    @patch('platform.platform', return_value='Linux-5.4.0-77-generic-x86_64-with-glibc2.29')\n    def test_get_sys_info(self, mock_platform):\n        sys_info = _get_sys_info()\n        self.assertEqual(sys_info['python'], 'Python 3.8.5')\n        self.assertEqual(sys_info['executable'], '/usr/bin/python3')\n        self.assertEqual(sys_info['machine'], 'Linux-5.4.0-77-generic-x86_64-with-glibc2.29')\n\n    def test_get_deps_info(self):\n        deps_info = _get_deps_info()\n        for dep in ['pip', 'setuptools', 'sklearn', 'numpy', 'scipy', 'Cython', 'pandas', 'matplotlib']:\n            self.assertIn(dep, deps_info)\n\n    @patch('sys.modules', {'sklearn': MagicMock(_build_utils=MagicMock(get_blas_info=MagicMock(return_value=([], {'define_macros': [('HAVE_CBLAS', None)], 'library_dirs': []}))))})\n    def test_get_blas_info(self):\n        from sklearn.utils._show_versions import _get_blas_info\n        blas_info = _get_blas_info()\n        self.assertEqual(blas_info['macros'], 'HAVE_CBLAS=None')\n        self.assertEqual(blas_info['lib_dirs'], '')\n        self.assertEqual(blas_info['cblas_libs'], '')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_414": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.contrib.admin import options\nfrom django.http import HttpRequest\n\nclass TestModelAdmin(unittest.TestCase):\n    @patch('django.contrib.admin.options.get_content_type_for_model')\n    @patch('django.urls.reverse')\n    def test_get_view_on_site_url(self, mock_reverse, mock_get_content_type):\n        mock_request = Mock(spec=HttpRequest)\n        mock_obj = Mock()\n        mock_content_type = Mock()\n\n        mock_get_content_type.return_value = mock_content_type\n        mock_reverse.return_value = '/admin/view_on_site/'\n\n        model_admin = options.ModelAdmin(Mock(), Mock())\n        model_admin.view_on_site = True\n        url = model_admin.get_view_on_site_url(mock_obj)\n\n        mock_get_content_type.assert_called_once_with(mock_obj)\n        mock_reverse.assert_called_once_with(\n            'admin:view_on_site',\n            kwargs={\n                'content_type_id': mock_content_type.pk,\n                'object_id': mock_obj.pk,\n            },\n            current_app=model_admin.admin_site.name,\n        )\n        self.assertEqual(url, '/admin/view_on_site/')\n\n    # More tests...\n"], "sample_321": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.test import RequestFactory\nfrom django.middleware.csrf import (\n    CsrfViewMiddleware,\n    get_token,\n    _sanitize_token,\n    _compare_masked_tokens,\n    InvalidTokenFormat,\n    REASON_INCORRECT_LENGTH,\n    REASON_INVALID_CHARACTERS,\n)\n\nclass TestCsrfViewMiddleware(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.middleware = CsrfViewMiddleware()\n\n    def test_get_token(self):\n        request = self.factory.get('/')\n        self.assertIsNone(self.middleware._get_token(request))\n\n        # Test CSRF_USE_SESSIONS is True\n        with patch('django.middleware.csrf.settings.CSRF_USE_SESSIONS', True):\n            with self.assertRaises(ImproperlyConfigured):\n                self.middleware._get_token(request)\n\n            request.session = {}\n            token = self.middleware._get_token(request)\n            self.assertIsNotNone(token)\n            self.assertEqual(token, request.session.get(CSRF_SESSION_KEY))\n\n        # Test CSRF_USE_SESSIONS is False\n        with patch('django.middleware.csrf.settings.CSRF_USE_SESSIONS', False):\n            with patch('django.middleware.csrf.settings.CSRF_COOKIE_NAME', 'test_cookie'):\n                request.COOKIES = {'test_cookie': 'test_token'}\n                token = self.middleware._get_token(request)\n                self.assertEqual(token, 'test_token')\n\n    def test_sanitize_token(self):\n        # Test token length is not correct\n        with self.assertRaises(InvalidTokenFormat) as context:\n            _sanitize_token('a' * (CSRF_TOKEN_LENGTH - 1))\n        self.assertEqual(context.exception.reason, REASON_INCORRECT_LENGTH)\n\n        # Test token contains invalid characters\n        with self.assertRaises(InvalidTokenFormat) as context:\n            _sanitize_token('a' * CSRF_TOKEN_LENGTH + '!')\n        self.assertEqual(context.exception.reason, REASON_INVALID_CHARACTERS)\n\n    def test_compare_masked_tokens(self):\n        # Test tokens are the same\n        token = get_token(Mock())\n        self.assertTrue(_compare_masked_tokens(token, token))\n\n        # Test tokens are different\n        token1 = get_token(Mock())\n        token2 = get_token(Mock())\n        self.assertFalse(_compare_masked_tokens(token1, token2))\n\n# Add more test methods for other functionalities\n"], "sample_718": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import jaccard_similarity_score\nfrom sklearn.metrics import matthews_corrcoef\nfrom sklearn.metrics import zero_one_loss\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import fbeta_score\nfrom sklearn.metrics import precision_recall_fscore_support\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import balanced_accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import hamming_loss\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import hinge_loss\nfrom sklearn.metrics import brier_score_loss\nfrom sklearn.metrics.classification import _check_targets\n\nclass TestClassificationMetrics(unittest.TestCase):\n\n    def setUp(self):\n        self.y_true = np.array([0, 1, 2, 0, 1, 2])\n        self.y_pred = np.array([0, 2, 1, 0, 0, 1])\n        self.y_true_binary = np.array([0, 1, 0, 1])\n        self.y_pred_binary = np.array([0, 1, 1, 0])\n        self.y_prob = np.array([0.1, 0.9, 0.8, 0.3])\n        self.sample_weight = np.array([1, 1, 2, 1, 1, 1])\n\n    def test_accuracy_score(self):\n        self.assertEqual(accuracy_score(self.y_true, self.y_pred), 0.5)\n        self.assertEqual(accuracy_score(self.y_true, self.y_pred, normalize=False), 3)\n\n    def test_confusion_matrix(self):\n        cm = confusion_matrix(self.y_true, self.y_pred)\n        self.assertTrue(np.array_equal(cm, np.array([[2, 0, 0], [0, 0, 1], [1, 0, 2]])))\n\n    def test_cohen_kappa_score(self):\n        self.assertAlmostEqual(cohen_kappa_score(self.y_true, self.y_pred), 0.23809523809523808)\n\n    def test_jaccard_similarity_score(self):\n        self.assertEqual(jaccard_similarity_score(self.y_true, self.y_pred), 0.5)\n\n    def test_matthews_corrcoef(self):\n        self.assertAlmostEqual(matthews_corrcoef(self.y_true, self.y_pred), 0.23809523809523808)\n\n    def test_zero_one_loss(self):\n        self.assertEqual(zero_one_loss(self.y_true, self.y_pred), 0.5)\n\n    def test_f1_score(self):\n        self.assertAlmostEqual(f1_score(self.y_true, self.y_pred, average='macro'), 0.26666666666666666)\n\n    def test_fbeta_score(self):\n        self.assertAlmostEqual(fbeta_score(self.y_true, self.y_pred, beta=0.5, average='macro'), 0.23809523809523808)\n\n    def test_precision_recall_fscore_support(self):\n        p, r, f, _ = precision_recall_fscore_support(self.y_true, self.y_pred, average='macro')\n        self.assertAlmostEqual(p, 0.26666666666666666)\n        self.assertAlmostEqual(r, 0.3333333333333333)\n        self.assertAlmostEqual(f, 0.26666666666666666)\n\n    def test_precision_score(self):\n        self.assertAlmostEqual(precision_score(self.y_true, self.y_pred, average='macro'), 0.26666666666666666)\n\n    def test_recall_score(self):\n        self.assertAlmostEqual(recall_score(self.y_true, self.y_pred, average='macro'), 0.3333333333333333)\n\n    def test_balanced_accuracy_score(self):\n        self.assertAlmostEqual(balanced_accuracy_score(self.y_true_binary, self.y_pred_binary), 0.5)\n\n    def test_classification_report(self):\n        report = classification_report(self.y_true, self.y_pred)\n        self.assertIsInstance(report, str)\n\n    def test_hamming_loss(self):\n        self.assertEqual(hamming_loss(self.y_true, self.y_pred), 0.25)\n\n    def test_log_loss(self):\n        self.assertAlmostEqual(log_loss(self.y_true_binary, self.y_prob), 0.4641256608763806)\n\n    def test_hinge_loss(self):\n        self.assertAlmostEqual(hinge_loss(self.y_true_binary, self.y_prob), 0.5333333333333333)\n\n    def test_brier_score_loss(self):\n        self.assertAlmostEqual(brier_score_loss(self.y_true_binary, self.y_prob), 0.0375)\n\n    def test_check_targets(self):\n        y_type, y_true, y_pred = _check_targets(self.y_true, self.y_pred)\n        self.assertEqual(y_type, 'multiclass')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_623": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nfrom xarray import Variable, Dataset\nfrom xarray.conventions import (\n    decode_cf_variable,\n    decode_cf_variables,\n    decode_cf,\n    encode_cf_variable,\n    cf_encoder,\n    cf_decoder,\n    encode_dataset_coordinates,\n)\n\nclass TestConventions(unittest.TestCase):\n    def setUp(self):\n        self.data = np.random.random((3, 3))\n        self.dims = ('time', 'lat')\n        self.attrs = {'units': 'K'}\n        self.var = Variable(self.dims, self.data, self.attrs)\n        self.ds = Dataset({'temp': self.var})\n\n    def test_decode_cf_variable(self):\n        decoded_var = decode_cf_variable('temp', self.var)\n        self.assertIsInstance(decoded_var, Variable)\n        np.testing.assert_array_equal(decoded_var.data, self.data)\n\n    def test_decode_cf_variables(self):\n        decoded_vars, decoded_attrs, coord_names = decode_cf_variables(\n            {'temp': self.var}, self.attrs)\n        self.assertIsInstance(decoded_vars, dict)\n        self.assertIsInstance(decoded_attrs, dict)\n        self.assertIsInstance(coord_names, set)\n\n    def test_decode_cf(self):\n        decoded_ds = decode_cf(self.ds)\n        self.assertIsInstance(decoded_ds, Dataset)\n        xr.testing.assert_equal(decoded_ds, self.ds)\n\n    def test_encode_cf_variable(self):\n        encoded_var = encode_cf_variable(self.var)\n        self.assertIsInstance(encoded_var, Variable)\n        self.assertEqual(encoded_var.attrs, self.attrs)\n\n    def test_cf_encoder(self):\n        encoded_vars, encoded_attrs = cf_encoder(\n            {'temp': self.var}, self.attrs)\n        self.assertIsInstance(encoded_vars, dict)\n        self.assertIsInstance(encoded_attrs, dict)\n\n    def test_cf_decoder(self):\n        decoded_vars, decoded_attrs = cf_decoder(\n            {'temp': self.var}, self.attrs)\n        self.assertIsInstance(decoded_vars, dict)\n        self.assertIsInstance(decoded_attrs, dict)\n\n    def test_encode_dataset_coordinates(self):\n        encoded_vars, encoded_attrs = encode_dataset_coordinates(self.ds)\n        self.assertIsInstance(encoded_vars, dict)\n        self.assertIsInstance(encoded_attrs, dict)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1052": ["\nimport unittest\nfrom sympy import Symbol, Integer, Add, Mul, Basic, Expr\nfrom sympy.printing.dot import purestr, styleof, attrprint, dotnode, dotedges, dotprint\n\nclass TestDotPrinting(unittest.TestCase):\n    def setUp(self):\n        self.x = Symbol('x')\n        self.expr = Add(Integer(2), self.x)\n        self.styles = [(Basic, {'color': 'blue', 'shape': 'ellipse'}),\n                       (Expr,  {'color': 'black'})]\n\n    def test_purestr(self):\n        self.assertEqual(purestr(self.expr), \"Add(Integer(2), Symbol('x'))\")\n\n    def test_styleof(self):\n        self.assertEqual(styleof(self.expr, self.styles), {'color': 'black'})\n\n    def test_attrprint(self):\n        self.assertEqual(attrprint({'color': 'blue', 'shape': 'ellipse'}), '\"color\"=\"blue\", \"shape\"=\"ellipse\"')\n\n    def test_dotnode(self):\n        self.assertEqual(dotnode(self.x, self.styles), '\"Symbol(\\'x\\')_()\" [\"color\"=\"black\", \"label\"=\"x\", \"shape\"=\"ellipse\"];')\n\n    def test_dotedges(self):\n        self.assertEqual(dotedges(self.expr), ['\"Add(Integer(2), Symbol(\\'x\\'))_()\" -> \"Integer(2)_(0,)\";', '\"Add(Integer(2), Symbol(\\'x\\'))_()\" -> \"Symbol(\\'x\\')_(1,)\";'])\n\n    def test_dotprint(self):\n        self.assertIn('digraph{', dotprint(self.expr, self.styles))\n        self.assertIn('\"Add(Integer(2), Symbol(\\'x\\'))_()\" [\"color\"=\"black\", \"label\"=\"Add\", \"shape\"=\"ellipse\"];', dotprint(self.expr, self.styles))\n"], "sample_494": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.core.paginator import Paginator, PageNotAnInteger, EmptyPage\n\nclass TestPaginator(unittest.TestCase):\n    def setUp(self):\n        self.object_list = list(range(100))\n        self.paginator = Paginator(self.object_list, 10)\n\n    def test_page_range(self):\n        self.assertEqual(list(self.paginator.page_range), list(range(1, 11)))\n\n    def test_count(self):\n        self.assertEqual(self.paginator.count, 100)\n\n    def test_num_pages(self):\n        self.assertEqual(self.paginator.num_pages, 10)\n\n    def test_validate_number(self):\n        self.assertEqual(self.paginator.validate_number(1), 1)\n        self.assertEqual(self.paginator.validate_number(10), 10)\n        with self.assertRaises(PageNotAnInteger):\n            self.paginator.validate_number('a')\n        with self.assertRaises(EmptyPage):\n            self.paginator.validate_number(11)\n\n    def test_get_page(self):\n        self.assertEqual(len(self.paginator.get_page(1)), 10)\n        self.assertEqual(len(self.paginator.get_page(10)), 10)\n        self.assertEqual(len(self.paginator.get_page(11)), 0)\n        self.assertEqual(len(self.paginator.get_page('a')), 10)\n        self.assertEqual(len(self.paginator.get_page(0)), 10)\n\n    @patch('django.core.paginator.warnings.warn')\n    def test_check_object_list_is_ordered(self, mock_warn):\n        mock_object_list = Mock()\n        mock_object_list.ordered = False\n        mock_object_list.model = Mock()\n        mock_object_list.__class__.__name__ = 'MockClass'\n        Paginator(mock_object_list, 10)\n        mock_warn.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_589": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nfrom xarray.core.missing import (\n    NumpyInterpolator,\n    ScipyInterpolator,\n    SplineInterpolator,\n    get_clean_interp_index,\n    _get_nan_block_lengths,\n    _apply_over_vars_with_dim,\n    interp_na,\n    func_interpolate_na,\n    ffill,\n    bfill,\n    _get_interpolator,\n    _get_interpolator_nd,\n    _get_valid_fill_mask,\n    _assert_single_chunk,\n    _localize,\n    _floatize_x,\n    interp,\n    interp_func,\n    _interp1d,\n    _interpnd,\n)\n\nclass TestMissingFunctions(unittest.TestCase):\n    def setUp(self):\n        self.arr = xr.DataArray(np.array([[1, np.nan, 3], [4, 5, np.nan]]), dims=('x', 'y'))\n        self.index = pd.Index([0, 1, 2], name='x')\n        self.dim = 'x'\n\n    def test_get_clean_interp_index(self):\n        # Test with use_coordinate=True\n        result = get_clean_interp_index(self.arr, self.dim, use_coordinate=True)\n        self.assertTrue(np.array_equal(result, self.index))\n\n        # Test with use_coordinate=False\n        result = get_clean_interp_index(self.arr, self.dim, use_coordinate=False)\n        self.assertTrue(np.array_equal(result, np.array([0, 1])))\n\n    def test_get_nan_block_lengths(self):\n        result = _get_nan_block_lengths(self.arr, self.dim, self.index)\n        expected = xr.DataArray(np.array([[0, 1, 0], [0, 0, 1]]), dims=('x', 'y'))\n        self.assertTrue(np.array_equal(result, expected))\n\n    # Add more tests for other functions...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_353": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.contrib.auth.management.commands.createsuperuser import Command\nfrom django.contrib.auth import get_user_model\nfrom django.core.management.base import CommandError\n\nclass TestCreateSuperuserCommand(unittest.TestCase):\n\n    def setUp(self):\n        self.UserModel = get_user_model()\n        self.command = Command()\n\n    @patch('getpass.getpass')\n    @patch('builtins.input')\n    def test_interactive_mode(self, mock_input, mock_getpass):\n        mock_input.side_effect = ['testuser', 'test@example.com', 'testpassword', 'testpassword']\n        mock_getpass.return_value = 'testpassword'\n        with patch.object(self.UserModel._default_manager.db_manager(), 'create_superuser') as mock_create_superuser:\n            self.command.handle(interactive=True)\n            mock_create_superuser.assert_called_once_with(username='testuser', email='test@example.com', password='testpassword')\n\n    @patch.dict('os.environ', {'DJANGO_SUPERUSER_USERNAME': 'testuser', 'DJANGO_SUPERUSER_EMAIL': 'test@example.com', 'DJANGO_SUPERUSER_PASSWORD': 'testpassword'})\n    def test_non_interactive_mode(self):\n        with patch.object(self.UserModel._default_manager.db_manager(), 'create_superuser') as mock_create_superuser:\n            self.command.handle(interactive=False)\n            mock_create_superuser.assert_called_once_with(username='testuser', email='test@example.com', password='testpassword')\n\n    @patch('builtins.input')\n    def test_invalid_username(self, mock_input):\n        mock_input.side_effect = ['invalidusername', 'testuser', 'test@example.com', 'testpassword', 'testpassword']\n        with patch.object(self.UserModel._default_manager.db_manager(), 'create_superuser') as mock_create_superuser:\n            self.command.handle(interactive=True)\n            mock_create_superuser.assert_called_once_with(username='testuser', email='test@example.com', password='testpassword')\n\n    @patch('builtins.input')\n    def test_blank_username(self, mock_input):\n        mock_input.side_effect = ['', 'testuser', 'test@example.com', 'testpassword', 'testpassword']\n        with self.assertRaises(CommandError):\n            self.command.handle(interactive=True)\n\n    @patch.dict('os.environ', {'DJANGO_SUPERUSER_EMAIL': 'test@example.com', 'DJANGO_SUPERUSER_PASSWORD': 'testpassword'})\n    def test_missing_username_non_interactive(self):\n        with self.assertRaises(CommandError):\n            self.command.handle(interactive=False)\n\n    @patch('builtins.input')\n    def test_password_mismatch(self, mock_input):\n        mock_input.side_effect = ['testuser', 'test@example.com', 'testpassword', 'mismatchedpassword', 'testpassword', 'testpassword']\n        with self.assertRaises(SystemExit):\n            self.command.handle(interactive=True)\n\n    @patch('builtins.input')\n    def test_blank_password(self, mock_input):\n        mock_input.side_effect = ['testuser', 'test@example.com', '', 'testpassword', 'testpassword']\n        with self.assertRaises(SystemExit):\n            self.command.handle(interactive=True)\n\n    @patch.object(self.UserModel, '_meta')\n    def test_no_password_field(self, mock_meta):\n        mock_meta.get_field.side_effect = Exception('Password field does not exist')\n        with patch.object(self.UserModel._default_manager.db_manager(), 'create_superuser') as mock_create_superuser:\n            self.command.handle(interactive=False)\n            mock_create_superuser.assert_called_once()\n\n    @patch('sys.stdout')\n    @patch('sys.stdin')\n    def test_not_running_in_tty(self, mock_stdin, mock_stdout):\n        mock_stdin.isatty.return_value = False\n        self.command.handle(interactive=True)\n        mock_stdout.write.assert_called_once_with(\n            'Superuser creation skipped due to not running in a TTY. '\n            'You can run `manage.py createsuperuser` in your project '\n            'to create one manually.\\n'\n        )\n\n    @patch('builtins.input')\n    def test_get_input_data(self, mock_input):\n        mock_input.return_value = 'testdata'\n        field = Mock()\n        field.clean.return_value = 'cleaneddata'\n        result = self.command.get_input_data(field, 'Test message')\n        self.assertEqual(result, 'cleaneddata')\n\n    @patch('builtins.input')\n    def test_get_input_data_validation_error(self, mock_input):\n        mock_input.return_value = 'testdata'\n        field = Mock()\n        field.clean.side_effect = Exception('Validation error')\n        with patch('sys.stderr') as mock_stderr:\n            result = self.command.get_input_data(field, 'Test message')\n            self.assertIsNone(result)\n            mock_stderr.write.assert_called_once_with(\"Error: Validation error\")\n\n    def test_get_input_message(self):\n        field = Mock()\n        field.verbose_name = 'Test field'\n        field.remote_field = None\n        message = self.command._get_input_message(field)\n        self.assertEqual(message, 'Test field: ')\n\n    def test_get_input_message_default(self):\n        field = Mock()\n        field.verbose_name = 'Test field'\n        field.remote_field = None\n        message = self.command._get_input_message(field, 'default')\n        self.assertEqual(message, 'Test field (leave blank to use \\'default\\'): ')\n\n    def test_get_input_message_remote_field(self):\n        field = Mock()\n        field.verbose_name = 'Test field'\n        field.remote_field = Mock()\n        field.remote_field.model._meta.object_name = 'TestModel'\n        field.remote_field.field_name = 'test_field'\n        message = self.command._get_input_message(field)\n        self.assertEqual(message, 'Test field (TestModel.test_field): ')\n\n    def test_validate_username_unique(self):\n        username = 'testuser'\n        verbose_field_name = 'Username'\n        database = 'default'\n        with patch.object(self.UserModel._default_manager.db_manager(database), 'get_by_natural_key') as mock_get_by_natural_key:\n            mock_get_by_natural_key.side_effect = self.UserModel.DoesNotExist\n            result = self.command._validate_username(username, verbose_field_name, database)\n            self.assertIsNone(result)\n\n    def test_validate_username_already_taken(self):\n        username = 'testuser'\n        verbose_field_name = 'Username'\n        database = 'default'\n        with patch.object(self.UserModel._default_manager.db_manager(database), 'get_by_natural_key') as mock_get_by_natural_key:\n            mock_get_by_natural_key.return_value = self.UserModel(username=username)\n            result = self.command._validate_username(username, verbose_field_name, database)\n            self.assertEqual(result, 'Error: That Username is already taken.')\n\n    def test_validate_username_blank(self):\n        username = ''\n        verbose_field_name = 'Username'\n        database = 'default'\n        result = self.command._validate_username(username, verbose_field_name, database)\n        self.assertEqual(result, 'Username cannot be blank.')\n\n    def test_validate_username_validation_error(self):\n        username = 'testuser'\n        verbose_field_name = 'Username'\n        database = 'default'\n        self.command.username_field.clean.side_effect = Exception('Validation error')\n        result = self.command._validate_username(username, verbose_field_name, database)\n        self.assertEqual(result, 'Validation error')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_93": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.http import HttpResponse, HttpRequest\nfrom django.conf import settings\nfrom django.core.cache import cache\nfrom django.utils import cache as cache_utils\n\nclass TestCacheUtils(unittest.TestCase):\n    def setUp(self):\n        self.response = HttpResponse()\n        self.request = HttpRequest()\n\n    def test_patch_cache_control(self):\n        cache_utils.patch_cache_control(self.response, max_age=3600, private=True)\n        self.assertEqual(self.response['Cache-Control'], 'max-age=3600, private')\n\n    def test_get_max_age(self):\n        self.response['Cache-Control'] = 'max-age=3600'\n        self.assertEqual(cache_utils.get_max_age(self.response), 3600)\n\n    def test_set_response_etag(self):\n        self.response.content = b'Test content'\n        self.response = cache_utils.set_response_etag(self.response)\n        self.assertIn('ETag', self.response)\n\n    def test_patch_response_headers(self):\n        settings.CACHE_MIDDLEWARE_SECONDS = 3600\n        cache_utils.patch_response_headers(self.response)\n        self.assertIn('Expires', self.response)\n        self.assertEqual(self.response['Cache-Control'], 'max-age=3600')\n\n    def test_add_never_cache_headers(self):\n        cache_utils.add_never_cache_headers(self.response)\n        self.assertEqual(self.response['Cache-Control'], 'max-age=0, no-cache, no-store, must-revalidate, private')\n\n    def test_patch_vary_headers(self):\n        cache_utils.patch_vary_headers(self.response, ['Accept-Language'])\n        self.assertEqual(self.response['Vary'], 'Accept-Language')\n\n    def test_has_vary_header(self):\n        self.response['Vary'] = 'Accept-Language'\n        self.assertTrue(cache_utils.has_vary_header(self.response, 'Accept-Language'))\n\n    @patch('django.utils.cache.get_language')\n    def test_i18n_cache_key_suffix(self, mock_get_language):\n        mock_get_language.return_value = 'en-us'\n        settings.USE_I18N = True\n        settings.USE_TZ = True\n        self.request.build_absolute_uri = lambda: 'http://example.com/'\n        cache_key = cache_utils._i18n_cache_key_suffix(self.request, 'test_key')\n        self.assertIn('en-us', cache_key)\n\n    def test_generate_cache_key(self):\n        self.request.META['HTTP_ACCEPT_LANGUAGE'] = 'en-us'\n        self.request.build_absolute_uri = lambda: 'http://example.com/'\n        cache_key = cache_utils._generate_cache_key(self.request, 'GET', ['HTTP_ACCEPT_LANGUAGE'], 'test_key')\n        self.assertIn('en-us', cache_key)\n\n    def test_generate_cache_header_key(self):\n        self.request.build_absolute_uri = lambda: 'http://example.com/'\n        cache_key = cache_utils._generate_cache_header_key('test_key', self.request)\n        self.assertIn('http://example.com/', cache_key)\n\n    def test_get_cache_key(self):\n        self.request.META['HTTP_ACCEPT_LANGUAGE'] = 'en-us'\n        self.request.build_absolute_uri = lambda: 'http://example.com/'\n        cache.set('views.decorators.cache.cache_header.test_key.d41d8cd98f00b204e9800998ecf8427e', ['HTTP_ACCEPT_LANGUAGE'])\n        cache_key = cache_utils.get_cache_key(self.request, key_prefix='test_key', cache=cache)\n        self.assertIn('en-us', cache_key)\n\n    def test_learn_cache_key(self):\n        self.response['Vary'] = 'Accept-Language'\n        self.request.META['HTTP_ACCEPT_LANGUAGE'] = 'en-us'\n        self.request.build_absolute_uri = lambda: 'http://example.com/'\n        cache_key = cache_utils.learn_cache_key(self.request, self.response, key_prefix='test_key', cache=cache)\n        self.assertIn('en-us', cache_key)\n"], "sample_112": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom email.errors import HeaderParseError\nfrom django.urls import reverse\nfrom django.utils.safestring import SafeText\nfrom django.contrib.admindocs import utils\n\nclass TestUtils(unittest.TestCase):\n    def setUp(self):\n        self.view_func = MagicMock()\n        self.view_func.__module__ = 'test_module'\n        self.view_func.__qualname__ = 'test_qualname'\n\n    def test_get_view_name(self):\n        self.assertEqual(utils.get_view_name(self.view_func), 'test_module.test_qualname')\n\n    def test_trim_docstring(self):\n        docstring = \"\\n    Test Docstring\\n    \"\n        self.assertEqual(utils.trim_docstring(docstring), 'Test Docstring')\n\n    def test_parse_docstring_without_metadata(self):\n        docstring = \"Test Title\\n\\nTest Body\"\n        self.assertEqual(utils.parse_docstring(docstring), ('Test Title', 'Test Body', {}))\n\n    def test_parse_docstring_with_metadata(self):\n        docstring = \"Test Title\\n\\nTest Body\\n\\nKey: Value\"\n        self.assertEqual(utils.parse_docstring(docstring), ('Test Title', 'Test Body', {'Key': 'Value'}))\n\n    def test_parse_docstring_with_metadata_error(self):\n        docstring = \"Test Title\\n\\nTest Body\\n\\nInvalid Key: Value\"\n        with patch('django.contrib.admindocs.utils.HeaderParser.parsestr', side_effect=HeaderParseError):\n            self.assertEqual(utils.parse_docstring(docstring), ('Test Title', 'Test Body\\n\\nInvalid Key: Value', {}))\n\n    @patch('docutils.core.publish_parts')\n    def test_parse_rst(self, mock_publish_parts):\n        mock_publish_parts.return_value = {'fragment': SafeText('Test Fragment')}\n        self.assertEqual(utils.parse_rst('Test Text', 'test_context'), SafeText('Test Fragment'))\n\n    @patch('docutils.parsers.rst.roles.register_canonical_role')\n    def test_create_reference_role(self, mock_register_canonical_role):\n        utils.create_reference_role('test_role', 'test_urlbase')\n        mock_register_canonical_role.assert_called_once()\n\n    @patch('django.urls.reverse')\n    @patch('docutils.nodes.reference')\n    def test_default_reference_role(self, mock_reference, mock_reverse):\n        mock_reverse.return_value = 'test_link_base/'\n        inliner = MagicMock()\n        inliner.document.settings.link_base = 'test_link_base'\n        inliner.document.settings.default_reference_context = 'model'\n        utils.default_reference_role('name', 'rawtext', 'text', 'lineno', inliner)\n        mock_reference.assert_called_once()\n\n    def test_replace_named_groups(self):\n        pattern = '^(?P<a>\\w+)/b/(\\w+)$'\n        self.assertEqual(utils.replace_named_groups(pattern), '^<a>/b/(\\w+)$')\n\n    def test_replace_unnamed_groups(self):\n        pattern = '^(?P<a>\\w+)/b/(\\w+)$'\n        self.assertEqual(utils.replace_unnamed_groups(pattern), '^(?P<a>\\w+)/b/<var>$')\n"], "sample_944": ["\nimport unittest\nfrom typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar, Union)\nfrom docutils import nodes\nfrom sphinx.util.typing import restify, stringify, get_type_hints, is_system_TypeVar, PathMatcher, RoleFunction, OptionSpec, TitleGetter, Inventory, ForwardRef\nfrom types import TracebackType\nfrom struct import Struct\nimport sys\n\nclass TestTypingUtils(unittest.TestCase):\n\n    def test_get_type_hints(self):\n        class TestClass:\n            a: int\n            b: str = \"test\"\n            c: Optional[float] = None\n\n        hints = get_type_hints(TestClass)\n        self.assertEqual(hints, {'a': int, 'b': str, 'c': Optional[float]})\n\n    def test_is_system_TypeVar(self):\n        T = TypeVar('T')\n        self.assertTrue(is_system_TypeVar(T))\n\n        class CustomTypeVar(TypeVar):\n            pass\n\n        CT = CustomTypeVar('CT')\n        self.assertFalse(is_system_TypeVar(CT))\n\n    def test_restify(self):\n        self.assertEqual(restify(None), ':obj:`None`')\n        self.assertEqual(restify(Ellipsis), '...')\n        self.assertEqual(restify(TracebackType), ':class:`types.TracebackType`')\n\n        if sys.version_info >= (3, 7):\n            self.assertEqual(restify(Optional[int]), 'Optional[int]')\n            self.assertEqual(restify(Union[int, str]), 'int | str')\n        else:\n            self.assertEqual(restify(Optional[int]), ':obj:`Optional`\\\\ [int]')\n            self.assertEqual(restify(Union[int, str]), ':obj:`Union`\\\\ [int, str]')\n\n        self.assertEqual(restify(ForwardRef('int')), ':class:`int`')\n\n    def test_stringify(self):\n        self.assertEqual(stringify(int), 'int')\n        self.assertEqual(stringify(None), 'None')\n        self.assertEqual(stringify(Ellipsis), '...')\n        self.assertEqual(stringify(TracebackType), 'types.TracebackType')\n\n        if sys.version_info >= (3, 7):\n            self.assertEqual(stringify(Optional[int]), 'Optional[int]')\n            self.assertEqual(stringify(Union[int, str]), 'int | str')\n        else:\n            self.assertEqual(stringify(Optional[int]), 'typing.Optional[int]')\n            self.assertEqual(stringify(Union[int, str]), 'typing.Union[int, str]')\n\n        self.assertEqual(stringify(ForwardRef('int')), 'int')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_37": ["\nimport unittest\nfrom astropy.io import fits\nfrom astropy.wcs import WCS, find_all_wcs, validate\n\nclass TestWCS(unittest.TestCase):\n\n    def setUp(self):\n        self.header = fits.Header.fromtext(\"\"\"\n        SIMPLE  =                    T / Written by IDL:  Fri Mar  2 09:27:59 2018\n        BITPIX  =                  -64 / Bits per pixel\n        NAXIS   =                    3 / Number of dimensions\n        NAXIS1  =                  512\n        NAXIS2  =                  512\n        NAXIS3  =                    1\n        PCOUNT  =                    0 / Number of parameters\n        GCOUNT  =                    1 / Number of groups\n        EXTEND  =                    T / Extension may be present\n        DATE-OBS= '2018-03-01T22:44:27.799' / UTC date of start of observation\n        TELESCOP= 'Hubble Space Telescope'\n        INSTRUME= 'Wide Field Camera 3'\n        DETECTOR= 'UVIS'\n        FILTER  = 'F606W'\n        EXPTIME =                 511.0\n        EXPSTART=                 1.0\n        EXPEND  =                512.0\n        RA_TARG =                  290.0\n        DEC_TARG=                  -36.0\n        RA_APER =                  290.0\n        DEC_APER=                  -36.0\n        RA_PNT  =                  290.0\n        DEC_PNT =                  -36.0\n        PA_PNT  =                    0.0\n        ROLL_PNT=                  180.0\n        RA_V1   =                  290.0\n        DEC_V1  =                  -36.0\n        PA_V3   =                    0.0\n        ROLL_V3 =                  180.0\n        RA_NPOL =                    0.0\n        DEC_NPOL=                    0.0\n        ROTTYPE = 'nominal'\n        V3I_YANG=                    0.0\n        VPARANG =                    0.0\n        POSTARG1=                  290.0\n        POSTARG2=                  -36.0\n        WCSNAME = 'OPUS'\n        WCSDIFF =                    F\n        WCSTYPE = 'TAN'\n        CRPIX1  =                  256.5\n        CRPIX2  =                  256.5\n        CRVAL1  =                  290.0\n        CRVAL2  =                  -36.0\n        CDELT1  =              -0.00027777778\n        CDELT2  =              0.00027777778\n        CUNIT1  = 'deg     '\n        CUNIT2  = 'deg     '\n        CTYPE1  = 'RA---TAN'\n        CTYPE2  = 'DEC--TAN'\n        PC1_1   =                    1.0\n        PC1_2   =                    0.0\n        PC2_1   =                    0.0\n        PC2_2   =                    1.0\n        LTV1    =                    0.0\n        LTV2    =                    0.0\n        LTM1_1  =                    1.0\n        LTM2_2  =                    1.0\n        LTM1_2  =                    0.0\n        LTM2_1  =                    0.0\n        RADESYS = 'ICRS    '\n        LONPOLE =                  180.0\n        LATPOLE =                    0.0\n        END\n        \"\"\")\n        self.wcs = WCS(self.header)\n\n    def test_wcs_creation(self"], "sample_881": ["\nimport unittest\nfrom unittest.mock import Mock\nimport numpy as np\nimport pandas as pd\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.compose import ColumnTransformer, make_column_transformer, make_column_selector\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.exceptions import NotFittedError\n\nclass TestColumnTransformer(unittest.TestCase):\n    def setUp(self):\n        self.X = pd.DataFrame({\n            'city': ['London', 'London', 'Paris', 'Sallisaw'],\n            'rating': [5, 3, 4, 5]\n        })\n        self.ct = make_column_transformer(\n            (StandardScaler(), make_column_selector(dtype_include=np.number)),\n            (OneHotEncoder(), make_column_selector(dtype_include=object))\n        )\n\n    def test_fit_transform(self):\n        X_transformed = self.ct.fit_transform(self.X)\n        self.assertEqual(X_transformed.shape, (4, 4))\n\n    def test_transform_before_fit(self):\n        with self.assertRaises(NotFittedError):\n            self.ct.transform(self.X)\n\n    def test_get_feature_names_out(self):\n        self.ct.fit(self.X)\n        feature_names_out = self.ct.get_feature_names_out()\n        self.assertEqual(len(feature_names_out), 4)\n\n    def test_verbose_feature_names_out_true(self):\n        self.ct.verbose_feature_names_out = True\n        self.ct.fit(self.X)\n        feature_names_out = self.ct.get_feature_names_out()\n        self.assertTrue(all(name.startswith(('standardscaler__', 'onehotencoder__')) for name in feature_names_out))\n\n    def test_verbose_feature_names_out_false(self):\n        self.ct.verbose_feature_names_out = False\n        self.ct.fit(self.X)\n        feature_names_out = self.ct.get_feature_names_out()\n        self.assertEqual(len(feature_names_out), len(set(feature_names_out)))\n\n    def test_make_column_selector(self):\n        selector = make_column_selector(dtype_include=object)\n        selected_columns = selector(self.X)\n        self.assertEqual(selected_columns, ['city'])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_143": ["\nimport unittest\nfrom django.utils import text\nfrom django.utils.text import Truncator, format_lazy\nfrom django.utils.translation import gettext_lazy, override\n\nclass TestTextUtils(unittest.TestCase):\n    def test_capfirst(self):\n        self.assertEqual(text.capfirst('hello'), 'Hello')\n        self.assertEqual(text.capfirst(''), '')\n        self.assertEqual(text.capfirst(None), None)\n\n    def test_wrap(self):\n        self.assertEqual(text.wrap('Hello, world!', 10), 'Hello,\\nworld!')\n        self.assertEqual(text.wrap('Hello, world!', 15), 'Hello, world!')\n\n    def test_Truncator(self):\n        truncator = Truncator('Hello, world!')\n        self.assertEqual(truncator.chars(5), 'Hello\u2026')\n        self.assertEqual(truncator.words(1), 'Hello\u2026')\n\n    def test_get_valid_filename(self):\n        self.assertEqual(text.get_valid_filename(\"john's portrait in 2004.jpg\"), 'johns_portrait_in_2004.jpg')\n\n    def test_get_text_list(self):\n        self.assertEqual(text.get_text_list(['a', 'b', 'c', 'd']), 'a, b, c or d')\n        self.assertEqual(text.get_text_list(['a', 'b', 'c'], 'and'), 'a, b and c')\n\n    def test_normalize_newlines(self):\n        self.assertEqual(text.normalize_newlines('Hello\\r\\nworld\\r'), 'Hello\\nworld\\n')\n\n    def test_phone2numeric(self):\n        self.assertEqual(text.phone2numeric('1-800-CALL-NOW'), '1-800-2255-669')\n\n    def test_smart_split(self):\n        self.assertEqual(list(text.smart_split(r'This is \"a person\\'s\" test.')), ['This', 'is', '\"a person\\\\\\'s\"', 'test.'])\n\n    def test_unescape_entities(self):\n        self.assertEqual(text.unescape_entities('&amp; &lt; &gt;'), '& < >')\n\n    def test_unescape_string_literal(self):\n        self.assertEqual(text.unescape_string_literal('\"abc\"'), 'abc')\n        self.assertEqual(text.unescape_string_literal(\"'abc'\"), 'abc')\n\n    def test_slugify(self):\n        self.assertEqual(text.slugify('Hello, World!'), 'hello-world')\n\n    def test_camel_case_to_spaces(self):\n        self.assertEqual(text.camel_case_to_spaces('HelloWorld'), 'hello world')\n\n    def test_format_lazy(self):\n        self.assertEqual(str(format_lazy('{} {}', 'Hello', 'World')), 'Hello World')\n        with override('en'):\n            self.assertEqual(str(format_lazy(gettext_lazy('{} {}'), 'Hello', 'World')), 'Hello World')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_502": ["\nimport unittest\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nclass TestPyplot(unittest.TestCase):\n\n    def setUp(self):\n        self.x = np.linspace(0, 2 * np.pi, 400)\n        self.y = np.sin(self.x ** 2)\n\n    def test_figure(self):\n        fig, ax = plt.figure()\n        self.assertIsNotNone(fig)\n        self.assertIsNotNone(ax)\n\n    def test_subplot(self):\n        ax = plt.subplot(111)\n        self.assertIsNotNone(ax)\n\n    def test_plot(self):\n        line, = plt.plot(self.x, self.y)\n        self.assertIsNotNone(line)\n\n    def test_title(self):\n        plt.title('Simple plot')\n        self.assertEqual(plt.gca().get_title(), 'Simple plot')\n\n    def test_xlabel(self):\n        plt.xlabel('Time (s)')\n        self.assertEqual(plt.gca().get_xlabel(), 'Time (s)')\n\n    def test_ylabel(self):\n        plt.ylabel('Voltage (mV)')\n        self.assertEqual(plt.gca().get_ylabel(), 'Voltage (mV)')\n\n    def test_xlim(self):\n        plt.xlim(0, 10)\n        self.assertEqual(plt.xlim(), (0, 10))\n\n    def test_ylim(self):\n        plt.ylim(-2, 2)\n        self.assertEqual(plt.ylim(), (-2, 2))\n\n    def test_xticks(self):\n        plt.xticks([0, np.pi, 2 * np.pi], ['$0$', '$\\\\pi$', '$2\\\\pi$'])\n        locs, labels = plt.xticks()\n        self.assertEqual(locs, [0, np.pi, 2 * np.pi])\n        self.assertEqual(labels, ['$0$', '$\\\\pi$', '$2\\\\pi$'])\n\n    def test_yticks(self):\n        plt.yticks([-1, 0, 1])\n        locs, labels = plt.yticks()\n        self.assertEqual(locs, [-1, 0, 1])\n\n    def test_legend(self):\n        line, = plt.plot(self.x, self.y, label='Test line')\n        plt.legend()\n        self.assertIsNotNone(plt.gca().get_legend())\n\n    def test_grid(self):\n        plt.grid(True)\n        self.assertTrue(plt.gca().get_xgridlines()[0].get_visible())\n        self.assertTrue(plt.gca().get_ygridlines()[0].get_visible())\n\n    def test_savefig(self):\n        plt.plot(self.x, self.y)\n        plt.savefig('test.png')\n        self.assertTrue(os.path.exists('test.png'))\n        os.remove('test.png')\n\n    def test_clf(self):\n        plt.plot(self.x, self.y)\n        plt.clf()\n        self.assertEqual(len(plt.gca().get_lines()), 0)\n\n    def test_close(self):\n        fig = plt.figure()\n        plt.close(fig)\n        self.assertTrue(fig.canvas is None)\n"], "sample_158": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db import models\nfrom django.core.checks import Error\nfrom django.db.models.fields.related import (\n    ForeignKey, OneToOneField, ManyToManyField,\n    resolve_relation, lazy_related_operation, RelatedField,\n    ForeignObject, create_many_to_many_intermediary_model\n)\nfrom django.db.models.query_utils import PathInfo\nfrom django.db.models.deletion import CASCADE\nfrom django.apps import apps\n\nclass TestRelatedFields(unittest.TestCase):\n    def setUp(self):\n        self.MyModel = type('MyModel', (models.Model,), {})\n        self.MyModel._meta.app_label = 'myapp'\n        self.MyModel._meta.model_name = 'mymodel'\n        self.MyModel._meta.app_config = MagicMock()\n        self.MyModel._meta.apps = apps\n        self.OtherModel = type('OtherModel', (models.Model,), {})\n        self.OtherModel._meta.app_label = 'otherapp'\n        self.OtherModel._meta.model_name = 'othermodel'\n        self.OtherModel._meta.app_config = MagicMock()\n        self.OtherModel._meta.apps = apps\n\n    def test_resolve_relation(self):\n        self.assertEqual(resolve_relation(self.MyModel, \"self\"), self.MyModel)\n        self.assertEqual(resolve_relation(self.MyModel, \"OtherModel\"), \"otherapp.OtherModel\")\n        self.assertEqual(resolve_relation(self.MyModel, self.OtherModel), self.OtherModel)\n\n    def test_lazy_related_operation(self):\n        mock_function = MagicMock()\n        lazy_related_operation(mock_function, self.MyModel, self.OtherModel)\n        mock_function.assert_called_once()\n\n    def test_related_field_check(self):\n        related_field = RelatedField(model=self.MyModel, related_model=self.OtherModel)\n        self.assertIsInstance(related_field.check(), list)\n\n    def test_foreign_key_deconstruct(self):\n        foreign_key = ForeignKey(self.OtherModel, on_delete=CASCADE)\n        name, path, args, kwargs = foreign_key.deconstruct()\n        self.assertEqual(path, 'django.db.models.fields.related.ForeignKey')\n\n    def test_one_to_one_field_deconstruct(self):\n        one_to_one = OneToOneField(self.OtherModel, on_delete=CASCADE)\n        name, path, args, kwargs = one_to_one.deconstruct()\n        self.assertEqual(path, 'django.db.models.fields.related.OneToOneField')\n\n    def test_many_to_many_field_deconstruct(self):\n        many_to_many = ManyToManyField(self.OtherModel)\n        name, path, args, kwargs = many_to_many.deconstruct()\n        self.assertEqual(path, 'django.db.models.fields.related.ManyToManyField')\n\n    def test_foreign_object_get_path_info(self):\n        foreign_object = ForeignObject(self.OtherModel, CASCADE, from_fields=['field'], to_fields=['field'])\n        path_info = foreign_object.get_path_info()\n        self.assertIsInstance(path_info, list)\n        self.assertIsInstance(path_info[0], PathInfo)\n\n    def test_many_to_many_field_get_path_info(self):\n        many_to_many = ManyToManyField(self.OtherModel)\n        path_info = many_to_many.get_path_info()\n        self.assertIsInstance(path_info, list)\n        self.assertIsInstance(path_info[0], PathInfo)\n\n    def test_create_many_to_many_intermediary_model(self):\n        many_to_many = ManyToManyField(self.OtherModel)\n        intermediary_model = create_many_to_many_intermediary_model(many_to_many, self.MyModel)\n        self.assertIsInstance(intermediary_model, type)\n        self.assertTrue(issubclass(intermediary_model, models.Model))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1111": ["\nimport unittest\nfrom sympy import symbols, sin, cos, oo, nan, I\nfrom sympy.plotting.textplot import textplot_str, linspace, rescale, is_valid\n\nclass TestTextplot(unittest.TestCase):\n\n    def setUp(self):\n        self.x = symbols('x')\n\n    def test_is_valid(self):\n        self.assertFalse(is_valid(None))\n        self.assertFalse(is_valid(complex(1, 1)))\n        self.assertFalse(is_valid(oo))\n        self.assertFalse(is_valid(nan))\n        self.assertTrue(is_valid(1.0))\n\n    def test_rescale(self):\n        y = [0.0, 0.5, 1.0, None]\n        W, H = 4, 10\n        mi, ma = 0.0, 1.0\n        expected = [0, 5, 9, None]\n        self.assertEqual(rescale(y, W, H, mi, ma), expected)\n\n    def test_linspace(self):\n        self.assertEqual(linspace(0, 1, 3), [0.0, 0.5, 1.0])\n\n    def test_textplot_str(self):\n        expr = sin(self.x) * self.x\n        a, b = 0, 15\n        W, H = 55, 21\n        result = list(textplot_str(expr, a, b, W, H))\n        self.assertEqual(len(result), H + 1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_41": ["\nimport numpy as np\nimport pytest\nfrom astropy import units as u\nfrom astropy import constants as const\nfrom astropy.cosmology import Planck15\nfrom numpy.testing import assert_allclose\n\n# Test the dimensionless_angles function\ndef test_dimensionless_angles():\n    assert u.dimensionless_angles() == [(u.radian, None)]\n\n# Test the logarithmic function\ndef test_logarithmic():\n    assert len(u.logarithmic()) == 1\n\n# Test the parallax function\ndef test_parallax():\n    dist = u.Quantity(1, u.pc)\n    parallax = dist.to(u.arcsecond, u.parallax())\n    assert_allclose(parallax, 1 / dist)\n\n# Test the spectral function\ndef test_spectral():\n    freq = u.Quantity(1, u.Hz)\n    wavelength = freq.to(u.m, u.spectral())\n    assert_allclose(wavelength, const.c / freq)\n\n# Test the spectral_density function\ndef test_spectral_density():\n    wav = u.Quantity(1, u.AA)\n    f_la = u.Quantity(1, u.erg / u.cm**2 / u.s / u.AA)\n    f_nu = f_la.to(u.erg / u.cm**2 / u.s / u.Hz, u.spectral_density(wav))\n    assert_allclose(f_nu, f_la * (wav.to(u.Hz, u.spectral())**2 / const.c.to_value(u.AA / u.s)))\n\n# Test the doppler_radio function\ndef test_doppler_radio():\n    rest = u.Quantity(1, u.GHz)\n    freq = u.Quantity(1.001, u.GHz)\n    vel = freq.to(u.km / u.s, u.doppler_radio(rest))\n    assert_allclose(vel, const.c * (rest - freq) / rest)\n\n# Test the doppler_optical function\ndef test_doppler_optical():\n    rest = u.Quantity(1, u.GHz)\n    freq = u.Quantity(1.001, u.GHz)\n    vel = freq.to(u.km / u.s, u.doppler_optical(rest))\n    assert_allclose(vel, const.c * (rest - freq) / freq)\n\n# Test the doppler_relativistic function\ndef test_doppler_relativistic():\n    rest = u.Quantity(1, u.GHz)\n    freq = u.Quantity(1.001, u.GHz)\n    vel = freq.to(u.km / u.s, u.doppler_relativistic(rest))\n    assert_allclose(vel, const.c * (rest**2 - freq**2) / (rest**2 + freq**2))\n\n# Test the molar_mass_amu function\ndef test_molar_mass_amu():\n    assert u.molar_mass_amu() == [(u.g / u.mol, u.u)]\n\n# Test the mass_energy function\ndef test_mass_energy():\n    energy = u.Quantity(1, u.J)\n    mass = energy.to(u.kg, u.mass_energy())\n    assert_allclose(mass, energy / const.c**2)\n\n# Test the brightness_temperature function\ndef test_brightness_temperature():\n    freq = u.Quantity(1, u.GHz)\n    beam_area = u.Quantity(1, u.sr)\n    brightness = u.Quantity(1, u.Jy / u.sr)\n    temp = brightness.to(u.K, u.brightness_temperature(freq, beam_area))\n    assert_allclose(temp, brightness / (2 * const.k_B * freq**2 / const.c**2))\n\n# Test the beam_angular_area function\ndef test_beam_angular_area():\n    beam_area = u.Quantity(1, u.sr)\n    assert u.beam_angular_area(beam_area) == [(u.beam, u.Unit(beam_area)),\n                                              (u.beam**-1, u.Unit(beam_area)**-1),\n                                              (u.Jy / u.beam, u.Jy / u.Unit(beam_area)),\n                                             ]\n\n# Test the thermodynamic_temperature function\ndef test_thermodynamic_temperature():\n    freq = u.Quantity(1, u.GHz)\n    temp = u.Quantity(1, u.K)\n    intensity = temp.to(u.Jy / u.sr, u.thermodynamic_temperature(freq, temp))\n    x = const.h * freq / const.k_B / temp\n    f = x**2 * np.exp(x) / np.expm1(x)**2\n    assert_allclose(intensity, 2 * const.k_B * temp * freq**2 / const.c**2 * f)\n\n# Test the temperature function\ndef test_temperature():\n    temp_c = u.Quantity(1, u.deg_C)\n    temp_k = temp_c.to(u.K, u.temperature())\n    assert_allclose(temp_k, temp_c + 273.15)\n\n    temp_f = u.Quantity(1, deg_F)\n    temp_k = temp_f.to(u.K, u.temperature())\n    assert_allclose(temp_k, (temp_f - 32.0) / 1.8 + 273.15)\n\n# Test the temperature_energy function\ndef test_temperature_energy():\n    temp_k = u.Quantity(1, u.K)\n    energy = temp_k.to(u.eV, u.temperature_energy())\n    assert_allclose(energy, temp_k * const.e / const.k_B)\n\n# Test the pixel_scale function\ndef test_pixel_scale():\n    pixscale = u.Quantity(1, u.arcsec / u.pix)\n    assert u.pixel_scale(pixscale) == [(u.pix, u.radian, lambda px: px * pixscale.to_value(u.radian / u.pix), lambda rad: rad / pixscale.to_value(u.radian / u.pix))]\n\n# Test the plate_scale function\ndef test_plate_scale():\n    platescale = u.Quantity(1, u.arcsec / u.m)\n    assert u.plate_scale(platescale) == [(u.m, u.radian, lambda d: d * platescale.to_value(u.radian / u.m), lambda rad: rad / platescale.to_value(u.radian / u.m))]\n\n# Test the with_H0 function\ndef test_with_H0():\n    H0 = Planck15.H0\n    h100_val_unit = u.Unit(H0.to((u.km / u.s) / u.Mpc).value / 100 * u.littleh)\n    assert u.with_H0(H0) == [(h100_val_unit, None)]\n"], "sample_580": ["\nimport unittest\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\nfrom seaborn._core.rules import VarType, variable_type, categorical_order\n\nclass TestSeabornRules(unittest.TestCase):\n\n    def test_VarType(self):\n        self.assertEqual(VarType(\"numeric\"), \"numeric\")\n        self.assertEqual(VarType(\"datetime\"), \"datetime\")\n        self.assertEqual(VarType(\"categorical\"), \"categorical\")\n        self.assertEqual(VarType(\"boolean\"), \"boolean\")\n        self.assertEqual(VarType(\"unknown\"), \"unknown\")\n        with self.assertRaises(AssertionError):\n            VarType(\"invalid\")\n\n    def test_variable_type(self):\n        self.assertEqual(variable_type(pd.Series([1, 2, 3])), \"numeric\")\n        self.assertEqual(variable_type(pd.Series([\"a\", \"b\", \"c\"])), \"categorical\")\n        self.assertEqual(variable_type(pd.Series([True, False])), \"boolean\")\n        self.assertEqual(variable_type(pd.Series([datetime.now(), datetime.now()])), \"datetime\")\n        self.assertEqual(variable_type(pd.Series([1, \"a\", 3])), \"categorical\")\n        self.assertEqual(variable_type(pd.Series([0, 1, 0, 1])), \"boolean\")\n        self.assertEqual(variable_type(pd.Series([0, 1, 0, 1]), boolean_type=\"categorical\"), \"categorical\")\n        self.assertEqual(variable_type(pd.Series([0, 1, 0, \"a\"]), boolean_type=\"categorical\"), \"categorical\")\n        self.assertEqual(variable_type(pd.Series([0, 1, 0, \"a\"]), boolean_type=\"numeric\", strict_boolean=True), \"categorical\")\n\n    def test_categorical_order(self):\n        self.assertEqual(categorical_order(pd.Series([\"b\", \"a\", \"c\"])), [\"b\", \"a\", \"c\"])\n        self.assertEqual(categorical_order(pd.Series([2, 1, 3])), [1, 2, 3])\n        self.assertEqual(categorical_order(pd.Series([\"b\", \"a\", \"c\"]), order=[\"c\", \"b\", \"a\"]), [\"c\", \"b\", \"a\"])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_640": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom pylint.checkers import BaseChecker, BaseTokenChecker\nfrom pylint.exceptions import InvalidMessageError, MissingArgumentManager\nfrom pylint.constants import WarningScope\n\nclass TestBaseChecker(unittest.TestCase):\n    def setUp(self):\n        self.linter = Mock()\n        self.checker = BaseChecker(self.linter)\n\n    def test_init(self):\n        self.assertIsNotNone(self.checker.linter)\n        self.assertEqual(self.checker.name, \"\")\n        self.assertTrue(self.checker.enabled)\n\n    def test_init_without_linter(self):\n        with self.assertRaises(MissingArgumentManager):\n            BaseChecker(future_option_parsing=True)\n\n    def test_comparison_methods(self):\n        checker2 = BaseChecker(self.linter)\n        checker2.name = \"test\"\n        self.assertTrue(self.checker > checker2)\n        self.assertTrue(self.checker != checker2)\n\n    def test_create_message_definition_from_tuple(self):\n        msgid = \"C1234\"\n        msg_tuple = (\"message\", \"message-symbol\", \"Message description with detail.\")\n        msg_def = self.checker.create_message_definition_from_tuple(msgid, msg_tuple)\n        self.assertEqual(msg_def.scope, WarningScope.NODE)\n\n    def test_create_message_definition_from_tuple_invalid_message(self):\n        msgid = \"C1234\"\n        msg_tuple = (\"message\",)\n        with self.assertRaises(InvalidMessageError):\n            self.checker.create_message_definition_from_tuple(msgid, msg_tuple)\n\nclass TestBaseTokenChecker(unittest.TestCase):\n    def setUp(self):\n        self.linter = Mock()\n        self.checker = BaseTokenChecker(self.linter)\n\n    def test_process_tokens(self):\n        with self.assertRaises(NotImplementedError):\n            self.checker.process_tokens([])\n"], "sample_694": ["\nimport pytest\nfrom unittest.mock import MagicMock, patch\nfrom _pytest import nodes\nfrom _pytest.warning_types import PytestWarning\nfrom _pytest.config import Config, ConftestImportFailure\nfrom _pytest.fixtures import FixtureLookupError\nfrom _pytest.outcomes import fail\nfrom _pytest._code.code import ExceptionInfo, TerminalRepr\nfrom pathlib import Path\nfrom _pytest.compat import legacy_path\nimport os\n\n@pytest.fixture\ndef mock_session():\n    session = MagicMock()\n    session.config.rootpath = Path(\"/root\")\n    session.config.invocation_params.dir = Path(\"/invocation\")\n    session._initialpaths = [Path(\"/initial\")]\n    return session\n\n@pytest.fixture\ndef mock_config():\n    config = Config.fromdictargs({})\n    config.invocation_params.dir = Path(\"/invocation\")\n    config.rootpath = Path(\"/root\")\n    return config\n\n@pytest.fixture\ndef mock_parent(mock_session, mock_config):\n    parent = nodes.FSCollector(parent=None, session=mock_session, config=mock_config, path=Path(\"/root/parent\"), name=\"parent\")\n    return parent\n\ndef test_iterparentnodeids():\n    nodeid = \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n    expected = [\"\", \"testing\", \"testing/code\", \"testing/code/test_excinfo.py\", \"testing/code/test_excinfo.py::TestFormattedExcinfo\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"]\n    assert list(nodes.iterparentnodeids(nodeid)) == expected\n\ndef test_imply_path():\n    path = Path(\"/path\")\n    fspath = legacy_path(path)\n    assert nodes._imply_path(path, fspath) == (path, fspath)\n    assert nodes._imply_path(None, fspath) == (path, fspath)\n    with pytest.raises(ValueError):\n        nodes._imply_path(path, legacy_path(\"/different\"))\n\ndef test_node_meta_call():\n    with pytest.raises(fail.Exception):\n        nodes.Node(\"test\")\n\ndef test_node_init(mock_config, mock_session):\n    node = nodes.Node(\"test\", config=mock_config, session=mock_session, fspath=legacy_path(\"/path\"))\n    assert node.name == \"test\"\n    assert node.config == mock_config\n    assert node.session == mock_session\n    assert node.path == Path(\"/path\")\n    assert node.nodeid == \"test\"\n\ndef test_node_init_without_config_or_parent():\n    with pytest.raises(TypeError):\n        nodes.Node(\"test\")\n\ndef test_node_init_without_session_or_parent():\n    with pytest.raises(TypeError):\n        nodes.Node(\"test\", config=Config.fromdictargs({}))\n\ndef test_node_init_without_nodeid_or_parent():\n    with pytest.raises(TypeError):\n        nodes.Node(\"test\", config=Config.fromdictargs({}), session=MagicMock())\n\ndef test_node_from_parent(mock_parent):\n    node = nodes.Node.from_parent(mock_parent, name=\"test\")\n    assert node.name == \"test\"\n    assert node.parent == mock_parent\n\ndef test_node_from_parent_with_config():\n    with pytest.raises(TypeError):\n        nodes.Node.from_parent(None, name=\"test\", config=Config.fromdictargs({}))\n\ndef test_node_from_parent_with_session():\n    with pytest.raises(TypeError):\n        nodes.Node.from_parent(None, name=\"test\", session=MagicMock())\n\ndef test_get_fslocation_from_item(mock_session, mock_config):\n    node = nodes.Node(\"test\", session=mock_session, config=mock_config)\n    assert nodes.get_fslocation_from_item(node) == (\"unknown location\", -1)\n\ndef test_fs_collector_init(mock_session, mock_config):\n    collector = nodes.FSCollector(path=Path(\"/path\"), session=mock_session, config=mock_config)\n    assert collector.path == Path(\"/path\")\n    assert collector.name == \"path\"\n    assert collector.nodeid == \"/path\"\n\ndef test_fs_collector_init_with_parent(mock_parent):\n    collector = nodes.FSCollector(parent=mock_parent, path=Path(\"/path\"))\n    assert collector.path == Path(\"/path\")\n    assert collector.name == \"path\"\n    assert collector.nodeid == \"/path\"\n\ndef test_fs_collector_from_parent(mock_parent):\n    collector = nodes.FSCollector.from_parent(mock_parent, path=Path(\"/path\"))\n    assert collector.path == Path(\"/path\")\n    assert collector.name == \"path\"\n    assert collector.nodeid == \"/path\"\n\ndef test_item_init_subclass():\n    with pytest.warns(PytestWarning):\n        class TestItem(nodes.Item, nodes.Collector):\n            pass\n\ndef test_item_init(mock_session, mock_config):\n    item = nodes.Item(\"test\", session=mock_session, config=mock_config)\n    assert item.name == \"test\"\n\ndef test_item_runtest():\n    item = nodes.Item(\"test\")\n    with pytest.raises(NotImplementedError):\n        item.runtest()\n\ndef test_item_add_report_section():\n    item = nodes.Item(\"test\")\n    item.add_report_section(\"call\", \"stdout\", \"report section contents\")\n    assert item._report_sections == [(\"call\", \"stdout\", \"report section contents\")]\n\ndef test_item_reportinfo(mock_session, mock_config):\n    item = nodes.Item(\"test\", session=mock_session, config=mock_config, path=Path(\"/path\"))\n    assert item.reportinfo() == (legacy_path(\"/path\"), None, \"\")\n\ndef test_item_location(mock_session, mock_config):\n    item = nodes.Item(\"test\", session=mock_session, config=mock_config, path=Path(\"/path\"))\n    assert item.location == (\"/path\", None, \"\")\n\ndef test_collector_collect():\n    collector = nodes.Collector()\n    with pytest.raises(NotImplementedError):\n        collector.collect()\n\ndef test_collector_repr_failure(mock_session, mock_config):\n    collector = nodes.Collector(session=mock_session, config=mock_config)\n    excinfo = ExceptionInfo(nodes.Collector.CollectError(\"error\"), None)\n    assert collector.repr_failure(excinfo) == \"error\"\n\ndef test_file_collector_init(mock_session, mock_config):\n    file_collector = nodes.File(path=Path(\"/path\"), session=mock_session, config=mock_config)\n    assert file_collector.path == Path(\"/path\")\n    assert file_collector.name == \"path\"\n    assert file_collector.nodeid == \"/path\"\n"], "sample_750": ["\nimport unittest\nimport numpy as np\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.ensemble.iforest import _average_path_length\nfrom sklearn.utils.testing import assert_array_almost_equal\n\nclass TestIsolationForest(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [10, 11]])\n        self.contamination = 0.1\n        self.n_estimators = 10\n        self.max_samples = \"auto\"\n        self.max_features = 1.0\n\n    def test_fit_predict(self):\n        clf = IsolationForest(contamination=self.contamination,\n                              n_estimators=self.n_estimators,\n                              max_samples=self.max_samples,\n                              max_features=self.max_features)\n        clf.fit(self.X)\n        y_pred = clf.predict(self.X)\n        self.assertEqual(len(y_pred), self.X.shape[0])\n\n    def test_decision_function(self):\n        clf = IsolationForest(contamination=self.contamination,\n                              n_estimators=self.n_estimators,\n                              max_samples=self.max_samples,\n                              max_features=self.max_features)\n        clf.fit(self.X)\n        y_score = clf.decision_function(self.X)\n        self.assertEqual(len(y_score), self.X.shape[0])\n\n    def test_score_samples(self):\n        clf = IsolationForest(contamination=self.contamination,\n                              n_estimators=self.n_estimators,\n                              max_samples=self.max_samples,\n                              max_features=self.max_features)\n        clf.fit(self.X)\n        y_score = clf.score_samples(self.X)\n        self.assertEqual(len(y_score), self.X.shape[0])\n\n    def test_average_path_length(self):\n        n_samples_leaf = np.array([1, 2, 3, 4, 5])\n        expected_result = np.array([1., 1.38629436, 1.89718692, 2.32192809, 2.69314718])\n        result = _average_path_length(n_samples_leaf)\n        assert_array_almost_equal(result, expected_result)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1024": ["\nimport unittest\nfrom sympy import Rational, Float, I, sqrt, oo, nan, pi, E, Integer, S, cos, exp, Number, zoo, log, Mul, Pow, Tuple, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr\nfrom sympy.core.numbers import igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt, integer_log\nfrom sympy.polys.domains.groundtypes import PythonRational\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom mpmath.rational import mpq\nfrom sympy.polys.numberfields import to_number_field\nfrom mpmath.libmp.libmpf import fnan\n\nclass TestNumbers(unittest.TestCase):\n\n    def test_rational(self):\n        self.assertEqual(Rational(1, 2), S.Half)\n        self.assertEqual(Rational(3, 4), 0.75)\n\n    def test_float(self):\n        self.assertEqual(Float(3.14), 3.14)\n        self.assertEqual(Float(\"1.23456789123456789\"), 1.23456789123456789)\n\n    def test_imaginary_unit(self):\n        self.assertEqual(I * I, -1)\n        self.assertEqual(I ** 2, -1)\n\n    def test_pi(self):\n        self.assertGreater(pi, 3)\n        self.assertTrue(pi.is_irrational)\n\n    def test_e(self):\n        self.assertEqual(E, exp(1))\n        self.assertEqual(log(E), 1)\n\n    def test_integer(self):\n        self.assertEqual(Integer(42), 42)\n        self.assertEqual(Integer(\"123456789123456789123456789\"), 123456789123456789123456789)\n\n    def test_number_symbols(self):\n        self.assertEqual(S.Exp1, E)\n        self.assertEqual(S.Pi, pi)\n\n    def test_number_operations(self):\n        self.assertEqual(S.One + S.One, 2)\n        self.assertEqual(S.Half * 3, 1.5)\n        self.assertEqual(S.Zero ** 0, 1)\n        self.assertEqual(S.Infinity + S.Infinity, S.Infinity)\n        self.assertEqual(S.Infinity - S.Infinity, S.NaN)\n\n    def test_number_comparisons(self):\n        self.assertTrue(Gt(S.One, S.Zero))\n        self.assertTrue(Lt(S.Zero, S.One))\n        self.assertTrue(Ge(S.One, S.One))\n        self.assertTrue(Le(S.One, S.One))\n\n    def test_algebraic_number(self):\n        self.assertEqual(AlgebraicNumber(sqrt(2)), sqrt(2))\n        self.assertTrue(AlgebraicNumber(sqrt(2)).is_algebraic)\n\n    def test_number_functions(self):\n        self.assertEqual(simplify(sin(pi)), 0)\n        self.assertEqual(fibonacci(5), 5)\n\n    def test_number_constants(self):\n        self.assertEqual(RealField().one, 1)\n        self.assertEqual(RealField().zero, 0)\n\n    def test_number_conversion(self):\n        self.assertEqual(sympify(\"1/2\"), S.Half)\n        self.assertEqual(srepr(S.Half), \"S.H"], "sample_239": ["\nimport unittest\nfrom django.forms import Form, IntegerField\nfrom django.forms.formsets import BaseFormSet, formset_factory, all_valid\n\nclass TestForm(Form):\n    field = IntegerField()\n\nclass TestBaseFormSet(unittest.TestCase):\n    def setUp(self):\n        self.formset = formset_factory(TestForm)\n\n    def test_total_form_count(self):\n        fs = self.formset({'form-TOTAL_FORMS': '5', 'form-INITIAL_FORMS': '3'})\n        self.assertEqual(fs.total_form_count(), 5)\n\n    def test_initial_form_count(self):\n        fs = self.formset({'form-TOTAL_FORMS': '5', 'form-INITIAL_FORMS': '3'})\n        self.assertEqual(fs.initial_form_count(), 3)\n\n    def test_form_creation(self):\n        fs = self.formset({'form-TOTAL_FORMS': '5', 'form-INITIAL_FORMS': '3'})\n        self.assertEqual(len(fs.forms), 5)\n\n    def test_extra_forms(self):\n        fs = self.formset({'form-TOTAL_FORMS': '5', 'form-INITIAL_FORMS': '3'})\n        self.assertEqual(len(fs.extra_forms), 2)\n\n    def test_is_valid(self):\n        data = {\n            'form-TOTAL_FORMS': '5',\n            'form-INITIAL_FORMS': '3',\n            'form-0-field': '1',\n            'form-1-field': '2',\n            'form-2-field': '3',\n            'form-3-field': '4',\n            'form-4-field': '5',\n        }\n        fs = self.formset(data)\n        self.assertTrue(fs.is_valid())\n\n    def test_full_clean(self):\n        data = {\n            'form-TOTAL_FORMS': '5',\n            'form-INITIAL_FORMS': '3',\n            'form-0-field': '1',\n            'form-1-field': '2',\n            'form-2-field': '',  # invalid data\n        }\n        fs = self.formset(data)\n        fs.full_clean()\n        self.assertFalse(fs.is_valid())\n\nclass TestAllValid(unittest.TestCase):\n    def setUp(self):\n        self.formset = formset_factory(TestForm)\n\n    def test_all_valid(self):\n        data = {\n            'form-TOTAL_FORMS': '5',\n            'form-INITIAL_FORMS': '3',\n            'form-0-field': '1',\n            'form-1-field': '2',\n            'form-2-field': '3',\n            'form-3-field': '4',\n            'form-4-field': '5',\n        }\n        fs1 = self.formset(data)\n        fs2 = self.formset(data)\n        self.assertTrue(all_valid([fs1, fs2]))\n\n        data['form-2-field'] = ''  # invalid data\n        fs3 = self.formset(data)\n        self.assertFalse(all_valid([fs1, fs2, fs3]))\n"], "sample_94": ["\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.auth.backends import (\n    BaseBackend,\n    ModelBackend,\n    AllowAllUsersModelBackend,\n    RemoteUserBackend,\n    AllowAllUsersRemoteUserBackend\n)\nfrom django.contrib.auth.models import Permission, Group\nfrom django.test import TestCase, RequestFactory\n\nUser = get_user_model()\n\nclass BaseBackendTests(TestCase):\n    def setUp(self):\n        self.backend = BaseBackend()\n\n    def test_authenticate(self):\n        self.assertIsNone(self.backend.authenticate(request=None))\n\n    def test_get_user(self):\n        self.assertIsNone(self.backend.get_user(user_id=1))\n\n    def test_get_user_permissions(self):\n        user = User()\n        self.assertEqual(self.backend.get_user_permissions(user), set())\n\n    def test_get_group_permissions(self):\n        user = User()\n        self.assertEqual(self.backend.get_group_permissions(user), set())\n\n    def test_get_all_permissions(self):\n        user = User()\n        self.assertEqual(self.backend.get_all_permissions(user), set())\n\n    def test_has_perm(self):\n        user = User()\n        self.assertFalse(self.backend.has_perm(user, 'auth.add_user'))\n\nclass ModelBackendTests(TestCase):\n    def setUp(self):\n        self.backend = ModelBackend()\n        self.factory = RequestFactory()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n\n    def test_authenticate_success(self):\n        request = self.factory.get('/')\n        user = self.backend.authenticate(request, username='testuser', password='testpassword')\n        self.assertEqual(user, self.user)\n\n    def test_authenticate_failure(self):\n        request = self.factory.get('/')\n        user = self.backend.authenticate(request, username='testuser', password='wrongpassword')\n        self.assertIsNone(user)\n\n    def test_get_user_permissions(self):\n        permission = Permission.objects.get(codename='add_user')\n        self.user.user_permissions.add(permission)\n        perms = self.backend.get_user_permissions(self.user)\n        self.assertIn('auth.add_user', perms)\n\n    def test_get_group_permissions(self):\n        group = Group.objects.create(name='testgroup')\n        permission = Permission.objects.get(codename='add_user')\n        group.permissions.add(permission)\n        self.user.groups.add(group)\n        perms = self.backend.get_group_permissions(self.user)\n        self.assertIn('auth.add_user', perms)\n\n    def test_has_perm(self):\n        permission = Permission.objects.get(codename='add_user')\n        self.user.user_permissions.add(permission)\n        self.assertTrue(self.backend.has_perm(self.user, 'auth.add_user'))\n\n    # more tests...\n\nclass RemoteUserBackendTests(TestCase):\n    def setUp(self):\n        self.backend = RemoteUserBackend()\n        self.factory = RequestFactory()\n\n    def test_authenticate_success(self):\n        request = self.factory.get('/')\n        user = self.backend.authenticate(request, remote_user='testuser')\n        self.assertEqual(user.username, 'testuser')\n\n    # more tests...\n\n# more test classes for other backends...\n"], "sample_224": ["\nfrom unittest import TestCase\nfrom unittest.mock import patch, MagicMock\nfrom django.db import models\nfrom django.db.models import QuerySet\nfrom django.db.models.query import RawQuerySet, Prefetch, prefetch_related_objects, get_prefetcher, prefetch_one_level, RelatedPopulator, get_related_populators\n\nclass TestQuerySet(TestCase):\n    def setUp(self):\n        self.queryset = QuerySet(model=models.Model)\n\n    def test_init(self):\n        self.assertIsInstance(self.queryset, QuerySet)\n\n    def test_filter(self):\n        self.queryset.filter(id=1)\n        self.assertEqual(str(self.queryset.query), 'SELECT \"app_model\".\"id\" FROM \"app_model\" WHERE \"app_model\".\"id\" = 1')\n\n    def test_exclude(self):\n        self.queryset.exclude(id=1)\n        self.assertEqual(str(self.queryset.query), 'SELECT \"app_model\".\"id\" FROM \"app_model\" WHERE NOT (\"app_model\".\"id\" = 1)')\n\n    # Add more tests for other methods and edge cases as needed\n\nclass TestRawQuerySet(TestCase):\n    def setUp(self):\n        self.raw_queryset = RawQuerySet(raw_query='SELECT * FROM app_model')\n\n    def test_init(self):\n        self.assertIsInstance(self.raw_queryset, RawQuerySet)\n\n    def test_iterator(self):\n        with patch('django.db.backends.utils.CursorWrapper') as mock_cursor:\n            mock_cursor.return_value.__iter__.return_value = [(1, 'test')]\n            self.raw_queryset.model = MagicMock()\n            self.raw_queryset.model._meta.fields = [MagicMock(column='id'), MagicMock(column='name')]\n            result = list(self.raw_queryset.iterator())\n            self.assertEqual(len(result), 1)\n            self.assertEqual(result[0].id, 1)\n            self.assertEqual(result[0].name, 'test')\n\n    # Add more tests for other methods and edge cases as needed\n\nclass TestPrefetch(TestCase):\n    def test_init(self):\n        prefetch = Prefetch('related_field')\n        self.assertEqual(prefetch.prefetch_through, 'related_field')\n        self.assertEqual(prefetch.prefetch_to, 'related_field')\n\n    def test_add_prefix(self):\n        prefetch = Prefetch('related_field')\n        prefetch.add_prefix('parent_field')\n        self.assertEqual(prefetch.prefetch_through, 'parent_field__related_field')\n        self.assertEqual(prefetch.prefetch_to, 'parent_field__related_field')\n\n    # Add more tests for other methods and edge cases as needed\n\n# Add tests for other functions and classes as needed\n"], "sample_1071": ["\nimport unittest\nfrom sympy import Symbol, floor, ceiling, frac, Rational, I, S, AccumBounds, NaN, oo, zoo, ComplexInfinity, symbols\n\nclass TestRoundFunction(unittest.TestCase):\n\n    def test_floor(self):\n        self.assertEqual(floor(17), 17)\n        self.assertEqual(floor(Rational(23, 10)), 2)\n        self.assertEqual(floor(2*S.E), 5)\n        self.assertEqual(floor(-S.Float(0.567)), -1)\n        self.assertEqual(floor(-I/2), -I)\n        self.assertEqual(floor(S(5)/2 + 5*I/2), 2 + 2*I)\n\n    def test_ceiling(self):\n        self.assertEqual(ceiling(17), 17)\n        self.assertEqual(ceiling(Rational(23, 10)), 3)\n        self.assertEqual(ceiling(2*S.E), 6)\n        self.assertEqual(ceiling(-S.Float(0.567)), 0)\n        self.assertEqual(ceiling(I/2), I)\n        self.assertEqual(ceiling(S(5)/2 + 5*I/2), 3 + 3*I)\n\n    def test_frac(self):\n        self.assertEqual(frac(Rational(4, 3)), Rational(1, 3))\n        self.assertEqual(frac(-Rational(4, 3)), Rational(2, 3))\n        n = Symbol('n', integer=True)\n        self.assertEqual(frac(n), 0)\n        x = Symbol('x')\n        self.assertEqual(frac(x).rewrite(floor), x - floor(x))\n        r = Symbol('r', real=True)\n        t = Symbol('t', real=True)\n        self.assertEqual(frac(t + I*r), I*frac(r) + frac(t))\n\n        self.assertEqual(frac(oo), AccumBounds(0, 1))\n        self.assertEqual(frac(-oo), AccumBounds(0, 1))\n        self.assertEqual(frac(zoo), zoo)\n        self.assertEqual(frac(ComplexInfinity), NaN)\n        self.assertEqual(frac(NaN), NaN)\n\n        self.assertTrue(frac(0) >= 0)\n        self.assertFalse(frac(0) < 0)\n        self.assertFalse(frac(0) > 0)\n        self.assertTrue(frac(0) <= 0)\n        self.assertTrue(frac(1) >= 0)\n        self.assertFalse(frac(1) < 0)\n        self.assertFalse(frac(1) > 1)\n        self.assertTrue(frac(1) < 2)\n\n    # Add more tests as needed to achieve high coverage\n"], "sample_609": ["\nimport unittest\nimport numpy as np\nimport xarray as xr\nfrom xarray.core.computation import (\n    _UFuncSignature, apply_ufunc, broadcast_compat_data, collect_dict_values,\n    join_dict_keys, ordered_set_intersection, ordered_set_union, result_name,\n    unified_dim_sizes,\n)\n\nclass TestComputation(unittest.TestCase):\n\n    def setUp(self):\n        self.data = np.random.rand(3, 3)\n        self.variable = xr.Variable(dims=('x', 'y'), data=self.data)\n        self.input_core_dims = (['x'], ['y'])\n        self.signature = _UFuncSignature(self.input_core_dims)\n\n    def test_UFuncSignature(self):\n        self.assertEqual(self.signature.input_core_dims, self.input_core_dims)\n        self.assertEqual(self.signature.output_core_dims, ((),))\n\n    def test_broadcast_compat_data(self):\n        result = broadcast_compat_data(self.variable, ('z',), ('x', 'y'))\n        self.assertEqual(result.shape, (1, 3, 3))\n\n    def test_join_dict_keys(self):\n        dict1 = {'a': 1, 'b': 2}\n        dict2 = {'b': 3, 'c': 4}\n        result = join_dict_keys([dict1, dict2], how='outer')\n        self.assertEqual(set(result), {'a', 'b', 'c'})\n\n    def test_collect_dict_values(self):\n        dict1 = {'a': 1, 'b': 2}\n        dict2 = {'b': 3, 'c': 4}\n        result = collect_dict_values([dict1, dict2], ['b', 'c'], fill_value=0)\n        self.assertEqual(result, [[2, 3], [0, 4]])\n\n    def test_result_name(self):\n        obj1 = xr.DataArray(self.data, name='data1')\n        obj2 = xr.DataArray(self.data, name='data2')\n        self.assertIsNone(result_name([obj1, obj2]))\n\n    def test_unified_dim_sizes(self):\n        variable2 = xr.Variable(dims=('x', 'y'), data=self.data)\n        result = unified_dim_sizes([self.variable, variable2])\n        self.assertEqual(result, {'x': 3, 'y': 3})\n\n    def test_apply_ufunc(self):\n        result = apply_ufunc(np.sum, self.variable, input_core_dims=self.input_core_dims)\n        self.assertEqual(result.shape, ())\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1202": ["\nimport unittest\nimport numbers as nums\nfrom sympy.core import (EulerGamma, Catalan, TribonacciConstant, GoldenRatio)\nfrom sympy.core.numbers import (mpf_norm, mod_inverse, igcd, seterr, igcd_lehmer, Integer, I, pi, comp, ilcm, Rational, E, nan, igcd2, oo, AlgebraicNumber, igcdex, Number, Float, zoo)\nfrom sympy.core.sympify import sympify\nfrom sympy.functions.elementary.integers import floor\nfrom sympy.functions.combinatorial.numbers import fibonacci\nfrom sympy.functions.elementary.exponential import exp, log\nfrom sympy.core.power import integer_nthroot, isqrt, integer_log\nfrom sympy.polys.domains.groundtypes import PythonRational\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom mpmath.rational import mpq\nfrom sympy.core import numbers\nfrom sympy.polys.numberfields import to_number_field\nfrom sympy import pi as sympy_pi  # noqa\nfrom mpmath.libmp.libmpf import fnan\nfrom sympy import Pi as sympy_Pi  # noqa\n\nclass TestNumbers(unittest.TestCase):\n    def test_mpf_norm(self):\n        # Test mpf_norm function\n        self.assertEqual(mpf_norm((1, 2, 3, 4), 5), (1, 2, 3, 4))  # Add more test cases\n\n    def test_mod_inverse(self):\n        # Test mod_inverse function\n        self.assertEqual(mod_inverse(3, 7), 5)  # Add more test cases\n\n    def test_igcd(self):\n        # Test igcd function\n        self.assertEqual(igcd(12, 18), 6)  # Add more test cases\n\n    def test_seterr(self):\n        # Test seterr function\n        seterr(\"divide\", \"raise\")\n        with self.assertRaises(ZeroDivisionError):\n            1 / 0\n\n    # Add more test functions for other functions in numbers.py\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_656": ["\nimport logging\nimport unittest.mock as mock\nimport pytest\nfrom _pytest.logging import ColoredLevelFormatter, LogCaptureHandler, LogCaptureFixture, get_actual_log_level, LoggingPlugin, _LiveLoggingStreamHandler\nfrom _pytest.config import create_terminal_writer\n\n# Mock the pytest config object\n@pytest.fixture\ndef mock_config():\n    config = mock.Mock()\n    config.getoption.return_value = None\n    config.getini.return_value = None\n    return config\n\n# Mock the pytest terminal reporter object\n@pytest.fixture\ndef mock_terminal_reporter():\n    return mock.Mock()\n\n# Mock the pytest capture manager object\n@pytest.fixture\ndef mock_capture_manager():\n    return mock.Mock()\n\n# Test the ColoredLevelFormatter class\ndef test_colored_level_formatter(mock_config):\n    terminalwriter = create_terminal_writer(mock_config)\n    formatter = ColoredLevelFormatter(terminalwriter, \"%(levelname)s: %(message)s\")\n    record = logging.LogRecord(\"test\", logging.INFO, \"test.py\", 123, \"Test message\", None, None)\n    assert \"32m\" in formatter.format(record)  # Green color for INFO level\n\n# Test the LogCaptureHandler class\ndef test_log_capture_handler():\n    handler = LogCaptureHandler()\n    record = logging.LogRecord(\"test\", logging.INFO, \"test.py\", 123, \"Test message\", None, None)\n    handler.emit(record)\n    assert len(handler.records) == 1\n    assert handler.stream.getvalue() == \"INFO:test:test.py:123: Test message\\n\"\n    handler.reset()\n    assert len(handler.records) == 0\n    assert handler.stream.getvalue() == \"\"\n\n# Test the LogCaptureFixture class\ndef test_log_capture_fixture(mock_config):\n    item = mock.Mock()\n    fixture = LogCaptureFixture(item)\n    fixture.set_level(logging.ERROR)\n    assert logging.getLogger().level == logging.ERROR\n    fixture._finalize()\n    assert logging.getLogger().level == logging.WARNING\n\n# Test the get_actual_log_level function\ndef test_get_actual_log_level(mock_config):\n    mock_config.getoption.return_value = \"DEBUG\"\n    assert get_actual_log_level(mock_config, \"log_level\") == logging.DEBUG\n    mock_config.getoption.return_value = \"INVALID_LEVEL\"\n    with pytest.raises(pytest.UsageError):\n        get_actual_log_level(mock_config, \"log_level\")\n\n# Test the LoggingPlugin class\ndef test_logging_plugin(mock_config, mock_terminal_reporter, mock_capture_manager):\n    plugin = LoggingPlugin(mock_config)\n    assert plugin.print_logs is None\n    assert plugin.log_level == logging.WARNING\n    assert plugin.log_file_handler is None\n    mock_config.getoption.return_value = True\n    mock_config.pluginmanager.get_plugin.return_value = mock_terminal_reporter\n    plugin._setup_cli_logging()\n    assert plugin.log_cli_handler is not None\n\n# Test the _LiveLoggingStreamHandler class\ndef test_live_logging_stream_handler(mock_terminal_reporter, mock_capture_manager):\n    handler = _LiveLoggingStreamHandler(mock_terminal_reporter, mock_capture_manager)\n    record = logging.LogRecord(\"test\", logging.INFO, \"test.py\", 123, \"Test message\", None, None)\n    handler.emit(record)\n    mock_terminal_reporter.write.assert_called()\n"], "sample_743": ["\nimport unittest\nimport numpy as np\nfrom scipy import sparse\nfrom sklearn.preprocessing.label import LabelBinarizer, LabelEncoder, MultiLabelBinarizer, label_binarize, _inverse_binarize_multiclass, _inverse_binarize_thresholding\n\nclass TestLabelTransformers(unittest.TestCase):\n    def setUp(self):\n        self.y_binary = np.array([0, 1, 0, 1, 0])\n        self.y_multiclass = np.array([0, 1, 2, 1, 0])\n        self.y_multilabel = np.array([[1, 0, 0], [0, 1, 1], [1, 0, 0]])\n        self.classes = np.array([0, 1, 2])\n\n    def test_LabelEncoder(self):\n        le = LabelEncoder()\n        le.fit(self.y_multiclass)\n        self.assertTrue(np.array_equal(le.classes_, self.classes))\n        self.assertTrue(np.array_equal(le.transform(self.y_multiclass), np.array([0, 1, 2, 1, 0])))\n\n    def test_LabelBinarizer(self):\n        lb = LabelBinarizer()\n        lb.fit(self.y_multiclass)\n        self.assertTrue(np.array_equal(lb.transform(self.y_multiclass), np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]])))\n\n    def test_MultiLabelBinarizer(self):\n        mlb = MultiLabelBinarizer()\n        y = [{'apple', 'banana'}, {'banana', 'orange'}, {'orange', 'apple'}]\n        self.assertTrue(np.array_equal(mlb.fit_transform(y), np.array([[1, 1, 0], [1, 0, 1], [1, 1, 1]])))\n\n    def test_label_binarize(self):\n        self.assertTrue(np.array_equal(label_binarize(self.y_binary, self.classes), np.array([[1, 0], [0, 1], [1, 0], [0, 1], [1, 0]])))\n\n    def test__inverse_binarize_multiclass(self):\n        self.assertTrue(np.array_equal(_inverse_binarize_multiclass(self.y_multilabel, self.classes), np.array([0, 2, 0])))\n\n    def test__inverse_binarize_thresholding(self):\n        self.assertTrue(np.array_equal(_inverse_binarize_thresholding(self.y_multilabel, 'multilabel-indicator', self.classes, 0.5), self.y_multilabel))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_579": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nfrom seaborn import matrix as mat\n\nclass TestMatrixFunctions(unittest.TestCase):\n\n    def setUp(self):\n        self.data = np.random.rand(10, 10)\n        self.df = pd.DataFrame(self.data)\n\n    def test_heatmap(self):\n        ax = mat.heatmap(self.data)\n        self.assertIsNotNone(ax)\n\n    def test_heatmap_with_dataframe(self):\n        ax = mat.heatmap(self.df)\n        self.assertIsNotNone(ax)\n\n    def test_heatmap_with_annotations(self):\n        ax = mat.heatmap(self.data, annot=True)\n        self.assertIsNotNone(ax)\n\n    def test_heatmap_with_custom_annotations(self):\n        annot_data = np.round(self.data, 2)\n        ax = mat.heatmap(self.data, annot=annot_data)\n        self.assertIsNotNone(ax)\n\n    def test_heatmap_with_mask(self):\n        mask = np.zeros_like(self.data)\n        mask[0, 0] = True\n        ax = mat.heatmap(self.data, mask=mask)\n        self.assertIsNotNone(ax)\n\n    def test_dendrogram(self):\n        dendrogram_plotter = mat.dendrogram(self.data)\n        self.assertIsNotNone(dendrogram_plotter)\n\n    def test_clustermap(self):\n        clustergrid = mat.clustermap(self.data)\n        self.assertIsNotNone(clustergrid)\n\n    def test_clustermap_with_dataframe(self):\n        clustergrid = mat.clustermap(self.df)\n        self.assertIsNotNone(clustergrid)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_47": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.views.debug import (\n    CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter, cleanse_setting,\n    technical_500_response, get_safe_settings, get_exception_reporter_filter,\n    SafeExceptionReporterFilter, ExceptionReporterFilter\n)\nfrom django.conf import settings\nfrom django.http import HttpResponse, HttpResponseNotFound\nfrom django.template import TemplateDoesNotExist\nfrom django.urls import Resolver404\n\nclass TestDebugFunctions(unittest.TestCase):\n    def setUp(self):\n        self.mock_request = Mock()\n        self.mock_request.POST = {'password': 'test_password'}\n        self.mock_request.GET = {'test_get': 'test_value'}\n        self.mock_request.FILES = {'test_file': 'test_file_content'}\n        self.mock_request.COOKIES = {'test_cookie': 'test_cookie_value'}\n        self.mock_request.user = 'test_user'\n        self.mock_request.sensitive_post_parameters = ['password']\n        self.mock_request.is_ajax.return_value = False\n        self.mock_exception = Mock()\n\n    def test_cleanse_setting(self):\n        result = cleanse_setting('API_KEY', 'test_api_key')\n        self.assertEqual(result, CLEANSED_SUBSTITUTE)\n\n    def test_get_safe_settings(self):\n        settings.TEST_SETTING = 'test_value'\n        safe_settings = get_safe_settings()\n        self.assertEqual(safe_settings['TEST_SETTING'], 'test_value')\n        safe_settings = get_safe_settings()\n        self.assertEqual(safe_settings['API_KEY'], CLEANSED_SUBSTITUTE)\n\n    def test_technical_500_response(self):\n        response = technical_500_response(self.mock_request, Exception, self.mock_exception, 500)\n        self.assertIsInstance(response, HttpResponse)\n\n    def test_get_exception_reporter_filter(self):\n        filter = get_exception_reporter_filter(self.mock_request)\n        self.assertIsInstance(filter, ExceptionReporterFilter)\n\n    def test_safe_exception_reporter_filter(self):\n        filter = SafeExceptionReporterFilter()\n        self.assertEqual(filter.get_post_parameters(self.mock_request)['password'], CLEANSED_SUBSTITUTE)\n\n    def test_exception_reporter(self):\n        reporter = ExceptionReporter(self.mock_request, Exception, self.mock_exception, None)\n        data = reporter.get_traceback_data()\n        self.assertIn('frames', data)\n        self.assertIn('request', data)\n\n    @patch('django.views.debug.resolve')\n    def test_technical_404_response(self, mock_resolve):\n        mock_resolve.side_effect = Resolver404\n        response = technical_404_response(self.mock_request, Exception('Page not found'))\n        self.assertIsInstance(response, HttpResponseNotFound)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_507": ["\nimport unittest\nimport numpy as np\nfrom matplotlib.category import StrCategoryConverter, UnitData, StrCategoryLocator, StrCategoryFormatter\n\nclass TestCategoryMethods(unittest.TestCase):\n\n    def setUp(self):\n        self.converter = StrCategoryConverter()\n        self.unit_data = UnitData([\"a\", \"b\", \"c\"])\n        self.locator = StrCategoryLocator(self.unit_data._mapping)\n        self.formatter = StrCategoryFormatter(self.unit_data._mapping)\n\n    def test_convert(self):\n        self.assertEqual(self.converter.convert(\"a\", self.unit_data, None), 0.0)\n        self.assertEqual(self.converter.convert([\"a\", \"b\"], self.unit_data, None), np.array([0.0, 1.0]))\n\n    def test_default_units(self):\n        unit_data = self.converter.default_units([\"d\", \"e\"], None)\n        self.assertEqual(unit_data._mapping, {\"a\": 0, \"b\": 1, \"c\": 2, \"d\": 3, \"e\": 4})\n\n    def test_str_category_locator(self):\n        self.assertEqual(self.locator(), [0, 1, 2])\n\n    def test_str_category_formatter(self):\n        self.assertEqual(self.formatter(0), \"a\")\n        self.assertEqual(self.formatter.format_ticks([1, 2]), [\"b\", \"c\"])\n\n    def test_str_is_convertible(self):\n        self.assertTrue(UnitData._str_is_convertible(\"1.23\"))\n        self.assertTrue(UnitData._str_is_convertible(\"2021-01-01\"))\n        self.assertFalse(UnitData._str_is_convertible(\"test\"))\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_62": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.test import RequestFactory, TestCase\nfrom django.contrib.admin.sites import AdminSite, site, DefaultAdminSite\nfrom django.contrib.auth.models import User\nfrom django.apps import apps\nfrom django.db.models.base import ModelBase\nfrom django.urls import reverse\n\nclass TestAdminSite(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.site = AdminSite()\n        self.user = User.objects.create_user(username='test', password='test', is_staff=True)\n\n    def test_register(self):\n        class MockModel(ModelBase):\n            _meta = MagicMock()\n            _meta.abstract = False\n            _meta.swapped = False\n\n        self.site.register(MockModel)\n        self.assertTrue(self.site.is_registered(MockModel))\n\n    def test_unregister(self):\n        class MockModel(ModelBase):\n            _meta = MagicMock()\n            _meta.abstract = False\n            _meta.swapped = False\n\n        self.site.register(MockModel)\n        self.site.unregister(MockModel)\n        self.assertFalse(self.site.is_registered(MockModel))\n\n    def test_has_permission(self):\n        request = self.factory.get('/admin')\n        request.user = self.user\n        self.assertTrue(self.site.has_permission(request))\n\n    def test_admin_view(self):\n        def mock_view(request):\n            return 'OK'\n\n        view = self.site.admin_view(mock_view)\n        request = self.factory.get('/admin')\n        request.user = self.user\n        response = view(request)\n        self.assertEqual(response, 'OK')\n\n    def test_get_urls(self):\n        urls = self.site.get_urls()\n        self.assertIsInstance(urls, list)\n\n    @patch('django.apps.apps.get_app_configs')\n    def test_check(self, mock_get_app_configs):\n        mock_get_app_configs.return_value = []\n        errors = self.site.check(None)\n        self.assertEqual(errors, [])\n\n    @patch('django.apps.apps.get_app_config')\n    def test_default_admin_site(self, mock_get_app_config):\n        mock_get_app_config.return_value = MagicMock(default_site='django.contrib.admin.sites.AdminSite')\n        default_site = DefaultAdminSite()\n        self.assertIsInstance(default_site._wrapped, AdminSite)\n\n    def test_site_urls(self):\n        urls, namespace, name = site.urls\n        self.assertIsInstance(urls, list)\n        self.assertEqual(namespace, 'admin')\n        self.assertEqual(name, 'admin')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_79": ["\nimport unittest\nfrom unittest.mock import patch\nfrom datetime import datetime\nfrom django.template.defaultfilters import add, date, time, timesince_filter, timeuntil_filter, addslashes, floatformat, iriencode, linenumbers, lower, make_list, slugify, stringformat, title, truncatechars, truncatechars_html, truncatewords, truncatewords_html, upper, urlencode, urlize, urlizetrunc, wordcount, wordwrap, ljust, rjust, center, cut, escape_filter, force_escape, linebreaks_filter, linebreaksbr, safe, safeseq, striptags, get_digit\n\nclass TestDefaultFilters(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(5, 3), 8)\n        self.assertEqual(add('Hello', ' World'), 'Hello World')\n\n    def test_date(self):\n        self.assertEqual(date(datetime(2022, 1, 1), 'Y-m-d'), '2022-01-01')\n\n    def test_time(self):\n        self.assertEqual(time(datetime(2022, 1, 1, 12, 0, 0), 'H:i'), '12:00')\n\n    def test_timesince_filter(self):\n        self.assertIn('day', timesince_filter(datetime(2022, 1, 1)))\n\n    def test_timeuntil_filter(self):\n        self.assertIn('day', timeuntil_filter(datetime(2030, 1, 1)))\n\n    def test_addslashes(self):\n        self.assertEqual(addslashes('Hello \"World\"'), 'Hello \\\\\"World\\\\\"')\n\n    # Add more tests for the remaining functions\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_300": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom pathlib import Path\nfrom django.utils import autoreload\n\nclass TestAutoreload(unittest.TestCase):\n\n    @patch('django.utils.autoreload.WatchmanReloader')\n    def test_get_reloader_watchman_available(self, MockWatchmanReloader):\n        MockWatchmanReloader.check_availability.return_value = True\n        reloader = autoreload.get_reloader()\n        self.assertIsInstance(reloader, autoreload.WatchmanReloader)\n\n    @patch('django.utils.autoreload.WatchmanReloader')\n    def test_get_reloader_watchman_unavailable(self, MockWatchmanReloader):\n        MockWatchmanReloader.check_availability.side_effect = autoreload.WatchmanUnavailable()\n        reloader = autoreload.get_reloader()\n        self.assertIsInstance(reloader, autoreload.StatReloader)\n\n    def test_is_django_module(self):\n        module = MagicMock(__name__='django.test')\n        self.assertTrue(autoreload.is_django_module(module))\n\n    def test_is_django_path(self):\n        path = Path(autoreload.__file__).parent.parent / 'test_file.py'\n        self.assertTrue(autoreload.is_django_path(path))\n\n    @patch('sys.exit')\n    def test_trigger_reload(self, mock_exit):\n        autoreload.trigger_reload('test_file.py')\n        mock_exit.assert_called_once_with(3)\n\n    # Additional tests for other functions can be added similarly...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_193": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.db import models, router\nfrom django.db.models import exceptions\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom .related import (\n    ForeignKey,\n    ManyToManyField,\n    OneToOneField,\n    RelatedField,\n    ForeignObject,\n    create_many_to_many_intermediary_model,\n    resolve_relation,\n    lazy_related_operation,\n)\n\nclass TestRelatedFunctions(TestCase):\n    def test_resolve_relation(self):\n        class TestModel(models.Model):\n            pass\n\n        self.assertEqual(resolve_relation(TestModel, 'self'), TestModel)\n        self.assertEqual(resolve_relation(TestModel, 'OtherModel'), 'testapp.OtherModel')\n        self.assertEqual(resolve_relation(TestModel, 'otherapp.OtherModel'), 'otherapp.OtherModel')\n        self.assertEqual(resolve_relation(TestModel, OtherModel), OtherModel)\n\n    @patch('django.apps.registry.apps.lazy_model_operation')\n    def test_lazy_related_operation(self, mock_lazy_model_operation):\n        class TestModel(models.Model):\n            related = ForeignKey('self', on_delete=models.CASCADE)\n\n        lazy_related_operation(MagicMock(), TestModel, 'self', keyword=True)\n        mock_lazy_model_operation.assert_called_once_with(MagicMock(keyword=True), ('testapp', 'TestModel'))\n\nclass TestRelatedField(TestCase):\n    def setUp(self):\n        self.field = RelatedField()\n        self.field.model = MagicMock()\n        self.field.model._meta.app_label = 'testapp'\n        self.field.model._meta.model_name = 'TestModel'\n        self.field.model._meta.verbose_name = 'Test Model'\n        self.field.name = 'test_field'\n        self.field.remote_field = MagicMock()\n        self.field.remote_field.related_name = 'test_related'\n        self.field.remote_field.related_query_name = None\n        self.field.remote_field.model = 'relatedapp.RelatedModel'\n\n    def test_related_model_property(self):\n        with self.assertRaises(exceptions.AppRegistryNotReady):\n            self.field.related_model\n\n    # Add more tests for RelatedField class methods\n\nclass TestForeignObject(TestCase):\n    def setUp(self):\n        self.foreign_object = ForeignObject(to='relatedapp.RelatedModel', on_delete=models.CASCADE)\n\n    # Add tests for ForeignObject class methods\n\nclass TestForeignKey(TestCase):\n    def setUp(self):\n        self.foreign_key = ForeignKey(to='relatedapp.RelatedModel', on_delete=models.CASCADE)\n\n    # Add tests for ForeignKey class methods\n\nclass TestOneToOneField(TestCase):\n    def setUp(self):\n        self.one_to_one_field = OneToOneField(to='relatedapp.RelatedModel', on_delete=models.CASCADE)\n\n    # Add tests for OneToOneField class methods\n\nclass TestManyToManyField(TestCase):\n    def setUp(self):\n        self.many_to_many_field = ManyToManyField(to='relatedapp.RelatedModel')\n\n    # Add tests for ManyToManyField class methods\n\n# Add tests for create_many_to_many_intermediary_model function\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_238": ["\nfrom django.test import TestCase\nfrom django.db.models import F, FloatField, IntegerField\nfrom django.db.models.functions import (\n    Abs, ACos, ASin, ATan, ATan2, Ceil, Cos, Cot, Degrees, Exp, Floor, Ln, Log, Mod, Pi, Power, Radians, Random, Round, Sign, Sin, Sqrt, Tan\n)\nfrom .models import TestModel  # Assume you have a TestModel for testing\n\nclass MathFunctionsTest(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        # Set up non-modified objects used by all test methods\n        TestModel.objects.create(value=10.5)\n        TestModel.objects.create(value=-5.5)\n\n    def test_abs_function(self):\n        result = TestModel.objects.annotate(abs_value=Abs('value')).first()\n        self.assertEqual(result.abs_value, 10.5)\n\n    def test_acos_function(self):\n        result = TestModel.objects.annotate(acos_value=ACos('value')).first()\n        self.assertIsInstance(result.acos_value, float)\n\n    def test_asin_function(self):\n        result = TestModel.objects.annotate(asin_value=ASin('value')).first()\n        self.assertIsInstance(result.asin_value, float)\n\n    def test_atan_function(self):\n        result = TestModel.objects.annotate(atan_value=ATan('value')).first()\n        self.assertIsInstance(result.atan_value, float)\n\n    def test_atan2_function(self):\n        result = TestModel.objects.annotate(atan2_value=ATan2(F('value'), Value(2.0))).first()\n        self.assertIsInstance(result.atan2_value, float)\n\n    def test_ceil_function(self):\n        result = TestModel.objects.annotate(ceil_value=Ceil('value')).first()\n        self.assertEqual(result.ceil_value, 11)\n\n    def test_cos_function(self):\n        result = TestModel.objects.annotate(cos_value=Cos('value')).first()\n        self.assertIsInstance(result.cos_value, float)\n\n    def test_cot_function(self):\n        result = TestModel.objects.annotate(cot_value=Cot('value')).first()\n        self.assertIsInstance(result.cot_value, float)\n\n    # Continue with the rest of the functions in a similar manner...\n"], "sample_182": ["\nfrom django.db import DatabaseError, NotSupportedError, connection\nfrom django.db.models import Exists, F, IntegerField, OuterRef, Value\nfrom django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\nfrom django.db.models.query import QuerySet, RawQuerySet, Prefetch\n\nclass QuerySetTestCase(TestCase):\n    def setUp(self):\n        # Set up any necessary objects or data for your tests\n        pass\n\n    def test_queryset_filter(self):\n        # Test the filter method of QuerySet\n        queryset = QuerySet()\n        filtered_queryset = queryset.filter(name='test')\n        self.assertEqual(filtered_queryset.query.where, Q(name='test'))\n\n    def test_queryset_exclude(self):\n        # Test the exclude method of QuerySet\n        queryset = QuerySet()\n        excluded_queryset = queryset.exclude(name='test')\n        self.assertEqual(excluded_queryset.query.where, ~Q(name='test'))\n\n    def test_queryset_union(self):\n        # Test the union method of QuerySet\n        queryset1 = QuerySet()\n        queryset2 = QuerySet()\n        union_queryset = queryset1.union(queryset2)\n        self.assertEqual(union_queryset.query.combinator, 'union')\n\n    def test_queryset_intersection(self):\n        # Test the intersection method of QuerySet\n        queryset1 = QuerySet()\n        queryset2 = QuerySet()\n        intersection_queryset = queryset1.intersection(queryset2)\n        self.assertEqual(intersection_queryset.query.combinator, 'intersection')\n\n    def test_queryset_difference(self):\n        # Test the difference method of QuerySet\n        queryset1 = QuerySet()\n        queryset2 = QuerySet()\n        difference_queryset = queryset1.difference(queryset2)\n        self.assertEqual(difference_queryset.query.combinator, 'difference')\n\n    def test_queryset_select_related(self):\n        # Test the select_related method of QuerySet\n        queryset = QuerySet()\n        related_queryset = queryset.select_related('related_field')\n        self.assertIn('related_field', related_queryset.query.select_related)\n\n    def test_queryset_prefetch_related(self):\n        # Test the prefetch_related method of QuerySet\n        queryset = QuerySet()\n        prefetch_queryset = queryset.prefetch_related('prefetch_field')\n        self.assertIn('prefetch_field', prefetch_queryset._prefetch_related_lookups)\n\n    def test_queryset_annotate(self):\n        # Test the annotate method of QuerySet\n        queryset = QuerySet()\n        annotated_queryset = queryset.annotate(count=Count('related_field'))\n        self.assertIn('count', annotated_queryset.query.annotations)\n\n    def test_queryset_order_by(self):\n        # Test the order_by method of QuerySet\n        queryset = QuerySet()\n        ordered_queryset = queryset.order_by('field')\n        self.assertEqual(ordered_queryset.query.order_by, ['field'])\n\n    def test_queryset_distinct(self):\n        # Test the distinct method of QuerySet\n        queryset = QuerySet()\n        distinct_queryset = queryset.distinct('field')\n        self.assertIn('field', distinct_queryset.query.distinct_fields)\n\n    def test_queryset_extra(self):\n        # Test the extra method of QuerySet\n        queryset = QuerySet()\n        extra_queryset = queryset.extra(select={'count': 'SELECT COUNT(*) FROM table'})\n        self.assertEqual(extra_queryset.query.extra['select'], {'count': 'SELECT COUNT(*) FROM table'})\n\n    def test_queryset_reverse(self):\n        # Test the reverse method of QuerySet\n        queryset = QuerySet()\n        reversed_queryset = queryset.reverse()\n        self.assertEqual(reversed_queryset.query.standard_ordering, False)\n\n    def test_queryset_defer(self):\n        # Test the defer method of QuerySet\n        queryset = QuerySet()\n        deferred_queryset = queryset.defer('field')\n        self.assertIn('field', deferred_queryset.query.deferred_loading)\n\n    def test_queryset_only(self):\n        # Test the only method of QuerySet\n        queryset = QuerySet()\n        only_queryset = queryset.only('field')\n        self.assertIn('field', only_queryset.query.immediate_loading)\n\n    def test_queryset_using(self):\n        # Test the using method of QuerySet\n        queryset = QuerySet()\n        using_queryset = queryset.using('db_alias')\n        self.assertEqual(using_queryset._db, 'db_alias')\n\n    # Add more test methods for other functionalities of QuerySet\n"], "sample_744": ["\nimport unittest\nimport numpy as np\nfrom scipy.sparse import csr_matrix\nfrom sklearn.neighbors.base import NeighborsBase, KNeighborsMixin, RadiusNeighborsMixin, _check_weights, _get_weights\nfrom sklearn.neighbors import BallTree, KDTree\nfrom sklearn.metrics import pairwise_distances\n\nclass TestNeighborsBase(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[0., 0., 0.], [0., .5, 0.], [1., 1., .5]])\n        self.nbrs = NeighborsBase(n_neighbors=1, algorithm='auto', metric='minkowski', p=2)\n\n    def test_check_algorithm_metric(self):\n        self.nbrs._check_algorithm_metric()\n\n    def test_fit(self):\n        self.nbrs._fit(self.X)\n\n    def test_fit_with_kdtree(self):\n        tree = KDTree(self.X)\n        self.nbrs._fit(tree)\n\n    def test_fit_with_balltree(self):\n        tree = BallTree(self.X)\n        self.nbrs._fit(tree)\n\n    def test_fit_with_sparse_matrix(self):\n        X_sparse = csr_matrix(self.X)\n        self.nbrs._fit(X_sparse)\n\n    def test_pairwise(self):\n        self.assertFalse(self.nbrs._pairwise)\n\nclass TestKNeighborsMixin(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[0., 0., 0.], [0., .5, 0.], [1., 1., .5]])\n        self.nbrs = NeighborsBase(n_neighbors=2, algorithm='auto', metric='minkowski', p=2)\n        self.nbrs._fit(self.X)\n        self.knn = KNeighborsMixin()\n        self.knn._fit_X = self.nbrs._fit_X\n        self.knn._tree = self.nbrs._tree\n        self.knn._fit_method = self.nbrs._fit_method\n        self.knn.n_neighbors = self.nbrs.n_neighbors\n        self.knn.effective_metric_ = self.nbrs.effective_metric_\n        self.knn.effective_metric_params_ = self.nbrs.effective_metric_params_\n        self.knn.n_jobs = self.nbrs.n_jobs\n\n    def test_kneighbors(self):\n        dist, ind = self.knn.kneighbors([[1., 1., 1.]])\n        self.assertEqual(ind.shape, (1, 2))\n        self.assertEqual(dist.shape, (1, 2))\n\nclass TestRadiusNeighborsMixin(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[0., 0., 0.], [0., .5, 0.], [1., 1., .5]])\n        self.nbrs = NeighborsBase(radius=1.6, algorithm='auto', metric='minkowski', p=2)\n        self.nbrs._fit(self.X)\n        self.rnn = RadiusNeighborsMixin()\n        self.rnn._fit_X = self.nbrs._fit_X\n        self.rnn._tree = self.nbrs._tree\n        self.rnn._fit_method = self.nbrs._fit_method\n        self.rnn.radius = self.nbrs.radius\n        self.rnn.effective_metric_ = self.nbrs.effective_metric_\n        self.rnn.effective_metric_params_ = self.nbrs.effective_metric_params_\n        self.rnn.n_jobs = self.nbrs.n_jobs\n\n    def test_radius_neighbors(self):\n        dist, ind = self.rnn.radius_neighbors([[1., 1., 1.]])\n        self.assertEqual(len(ind), 1)\n        self.assertEqual(len(dist), 1)\n\nclass TestUtilities(unittest.TestCase):\n    def test_check_weights(self):\n        self.assertEqual(_check_weights(None), None)\n        self.assertEqual(_check_weights('uniform'), 'uniform')\n        self.assertEqual(_check_weights('distance'), 'distance')\n\n    def test_get_weights(self):\n        dist = np.array([[0., 1.], [2., 3.]])\n        self.assertIsNone(_get_weights(dist, 'uniform'))\n        self.assertEqual(_get_weights(dist, 'distance').tolist(), [[np.inf, 0.5], [0.25, 0.3333333333333333]])\n        self.assertEqual(_get_weights(dist, lambda x: x**2).tolist(), [[0., 1.], [4., 9.]])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_622": ["\nimport unittest\nfrom unittest.mock import patch, mock_open\nimport numpy as np\nimport pandas as pd\nfrom xarray import Dataset, DataArray\nfrom xarray.backends.api import _validate_dataset_names, _validate_attrs, _get_default_engine, to_netcdf, save_mfdataset, to_zarr\n\nclass TestAPI(unittest.TestCase):\n    def setUp(self):\n        self.dataset = Dataset({'var1': ('x', np.arange(5))}, coords={'x': np.arange(5), 'y': ('x', np.arange(5))})\n        self.dataset_invalid = Dataset({'': ('x', np.arange(5))}, coords={'x': np.arange(5), 'y': ('x', np.arange(5))})\n        self.dataset_attrs = Dataset(attrs={'attr1': 'value1', 'attr2': 2, 'attr3': np.array([1, 2, 3])})\n        self.dataset_invalid_attrs = Dataset(attrs={'attr1': 'value1', 'attr2': np.bool_(True)})\n\n    def test_validate_dataset_names(self):\n        _validate_dataset_names(self.dataset)\n        with self.assertRaises(ValueError):\n            _validate_dataset_names(self.dataset_invalid)\n\n    def test_validate_attrs(self):\n        _validate_attrs(self.dataset_attrs)\n        _validate_attrs(self.dataset_attrs, invalid_netcdf=True)\n        with self.assertRaises(TypeError):\n            _validate_attrs(self.dataset_invalid_attrs)\n\n    def test_get_default_engine(self):\n        with patch('xarray.backends.api.is_remote_uri', return_value=False):\n            self.assertEqual(_get_default_engine('test.nc'), 'netcdf4')\n            self.assertEqual(_get_default_engine('test.nc', allow_remote=True), 'netcdf4')\n            self.assertEqual(_get_default_engine('test.gz'), 'scipy')\n\n    def test_to_netcdf(self):\n        with patch('xarray.backends.api.dump_to_store') as mock_dump:\n            to_netcdf(self.dataset, path_or_file='test.nc')\n            mock_dump.assert_called_once()\n\n    def test_save_mfdataset(self):\n        datasets = [self.dataset, self.dataset]\n        paths = ['test1.nc', 'test2.nc']\n        with patch('xarray.backends.api.to_netcdf') as mock_to_netcdf:\n            save_mfdataset(datasets, paths)\n            mock_to_netcdf.assert_called()\n\n    def test_to_zarr(self):\n        with patch('xarray.backends.api.backends.ZarrStore.open_group') as mock_open_group:\n            to_zarr(self.dataset, store='zarr_store')\n            mock_open_group.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_953": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom sphinx.ext.intersphinx import _get_safe_url, _strip_basic_auth, fetch_inventory, load_mappings, missing_reference, normalize_intersphinx_mapping\n\nclass TestIntersphinx(unittest.TestCase):\n    def setUp(self):\n        self.app = MagicMock()\n        self.env = MagicMock()\n        self.node = MagicMock()\n        self.contnode = MagicMock()\n\n    def test_get_safe_url(self):\n        url = 'https://user:pass@example.com'\n        self.assertEqual(_get_safe_url(url), 'https://user@example.com')\n\n    def test_strip_basic_auth(self):\n        url = 'https://user:pass@example.com'\n        self.assertEqual(_strip_basic_auth(url), 'https://example.com')\n\n    @patch('sphinx.ext.intersphinx._read_from_url')\n    def test_fetch_inventory(self, mock_read):\n        uri = 'https://example.com'\n        inv = 'inv'\n        mock_read.return_value = MagicMock()\n        self.assertIsNotNone(fetch_inventory(self.app, uri, inv))\n\n    @patch('sphinx.ext.intersphinx.fetch_inventory_group')\n    def test_load_mappings(self, mock_fetch):\n        mock_fetch.return_value = True\n        load_mappings(self.app)\n        self.assertTrue(self.app.builder.env.intersphinx_inventory.clear.called)\n\n    @patch('sphinx.ext.intersphinx.resolve_reference_detect_inventory')\n    def test_missing_reference(self, mock_resolve):\n        mock_resolve.return_value = self.node\n        self.assertEqual(missing_reference(self.app, self.env, self.node, self.contnode), self.node)\n\n    def test_normalize_intersphinx_mapping(self):\n        self.app.config.intersphinx_mapping = {'key': ('name', 'value')}\n        normalize_intersphinx_mapping(self.app, self.app.config)\n        self.assertEqual(self.app.config.intersphinx_mapping, {'key': ('name', ('value', ('value',)))})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_9": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom astropy.io.ascii import html\n\nclass TestHTML(unittest.TestCase):\n    def setUp(self):\n        self.html_instance = html.HTML()\n\n    def test_init(self):\n        self.assertEqual(self.html_instance.html['multicol'], True)\n        self.assertEqual(self.html_instance.html['table_id'], 1)\n\n    @patch('astropy.io.ascii.html.BeautifulSoup')\n    def test_process_lines(self, mock_soup):\n        mock_soup.return_value = MagicMock()\n        mock_soup.return_value.find_all.return_value = ['<table><tr><th>Header1</th><th>Header2</th></tr><tr><td>Data1</td><td>Data2</td></tr></table>']\n        lines = ['<table><tr><th>Header1</th><th>Header2</th></tr><tr><td>Data1</td><td>Data2</td></tr></table>']\n        result = self.html_instance.inputter.process_lines(lines)\n        self.assertEqual(len(result), 1)\n        self.assertIsInstance(result[0], html.SoupString)\n\n    def test_start_line(self):\n        lines = ['<tr><td>Data1</td><td>Data2</td></tr>', '<tr><th>Header1</th><th>Header2</th></tr>']\n        result = self.html_instance.header_class().start_line(lines)\n        self.assertEqual(result, 1)\n\n    # Add more tests as needed...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_591": ["\nimport unittest\nimport xarray as xr\nimport numpy as np\n\nclass TestDataset(unittest.TestCase):\n    def setUp(self):\n        self.data = xr.Dataset(\n            data_vars={\n                'temperature': (['time', 'lat', 'lon'], 15 + 8 * np.random.randn(2, 3, 4))\n            },\n            coords={\n                'time': pd.date_range('2014-09-06', periods=2),\n                'lat': (['lat'], np.arange(3)),\n                'lon': (['lon'], np.arange(4))\n            }\n        )\n\n    def test_binary_operations(self):\n        ds1 = self.data.copy()\n        ds2 = self.data.copy()\n        result = ds1 + ds2\n        np.testing.assert_array_equal(result['temperature'].values, 2 * ds1['temperature'].values)\n\n    def test_unary_operations(self):\n        ds = self.data.copy()\n        result = -ds\n        np.testing.assert_array_equal(result['temperature'].values, -ds['temperature'].values)\n\n    def test_reduce_methods(self):\n        ds = self.data.copy()\n        result = ds.mean(dim='time')\n        self.assertEqual(result.dims, ('lat', 'lon'))\n\n    def test_map_method(self):\n        ds = self.data.copy()\n        result = ds.map(lambda x: x**2)\n        np.testing.assert_array_equal(result['temperature'].values, ds['temperature'].values**2)\n\n    def test_assign_method(self):\n        ds = self.data.copy()\n        result = ds.assign(new_var=lambda x: x['temperature'] * 2)\n        self.assertTrue('new_var' in result)\n        np.testing.assert_array_equal(result['new_var'].values, 2 * ds['temperature'].values)\n\n    def test_to_array_method(self):\n        ds = self.data.copy()\n        result = ds.to_array()\n        self.assertEqual(result.dims, ('variable', 'time', 'lat', 'lon'))\n\n    def test_diff_method(self):\n        ds = self.data.copy()\n        result = ds.diff('time')\n        self.assertEqual(result.dims, ('time', 'lat', 'lon'))\n\n    def test_shift_method(self):\n        ds = self.data.copy()\n        result = ds.shift(time=1)\n        np.testing.assert_array_equal(result['temperature'].values[1:], ds['temperature'].values[:-1])\n\n    def test_roll_method(self):\n        ds = self.data.copy()\n        result = ds.roll(lat=1)\n        np.testing.assert_array_equal(result['temperature'].values[0], ds['temperature'].values[-1])\n\n    def test_quantile_method(self):\n        ds = self.data.copy()\n        result = ds.quantile(0.5)\n        self.assertEqual(result.dims, ())\n\n    def test_rank_method(self):\n        ds = self.data.copy()\n        result = ds.rank('lat')\n        self.assertEqual(result.dims, ('time', 'lat', 'lon'))\n\n    def test_filter_by_attrs_method(self):\n        ds = self.data.copy()\n        ds['temperature'].attrs['units'] = 'Celsius'\n        result = ds.filter_by_attrs(units='Celsius')\n        self.assertEqual(result.dims, ds.dims)\n"], "sample_582": ["\nimport os\nimport sys\nimport unittest\nfrom unittest.mock import patch\nfrom flask import Flask\nfrom flask.cli import ScriptInfo, NoAppException, find_best_app, locate_app, load_dotenv\n\nclass TestCli(unittest.TestCase):\n\n    def setUp(self):\n        self.test_app = Flask(__name__)\n        self.test_app_import_path = 'cliapp.app:testapp'\n\n    def test_script_info(self):\n        script_info = ScriptInfo(app_import_path=self.test_app_import_path)\n        self.assertEqual(script_info.app_import_path, self.test_app_import_path)\n        self.assertIsNone(script_info._loaded_app)\n\n    def test_load_app(self):\n        script_info = ScriptInfo(app_import_path=self.test_app_import_path)\n        app = script_info.load_app()\n        self.assertIsInstance(app, Flask)\n        self.assertEqual(app, script_info._loaded_app)\n\n    def test_load_app_no_app_exception(self):\n        script_info = ScriptInfo(app_import_path='nonexistent.app:app')\n        with self.assertRaises(NoAppException):\n            script_info.load_app()\n\n    def test_find_best_app(self):\n        sys.modules['cliapp.app'] = self.test_app\n        app = find_best_app(sys.modules['cliapp.app'])\n        self.assertIsInstance(app, Flask)\n\n    def test_locate_app(self):\n        sys.modules['cliapp.app'] = self.test_app\n        app = locate_app('cliapp.app', 'testapp')\n        self.assertIsInstance(app, Flask)\n\n    @patch('os.path.isfile')\n    def test_load_dotenv(self, mock_isfile):\n        mock_isfile.return_value = True\n        with patch('dotenv.load_dotenv') as mock_load:\n            load_dotenv('.env')\n            mock_load.assert_called_once_with('.env', encoding='utf-8')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_796": ["\nimport unittest\nimport numpy as np\nfrom scipy import sparse\nfrom sklearn.linear_model.ridge import ridge_regression, Ridge, RidgeCV, RidgeClassifier, RidgeClassifierCV\nfrom sklearn.datasets import make_regression, make_classification\n\nclass TestRidgeRegression(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_regression(n_samples=100, n_features=20, random_state=42)\n        self.alpha = 1.0\n\n    def test_ridge_regression(self):\n        coef = ridge_regression(self.X, self.y, alpha=self.alpha)\n        self.assertIsInstance(coef, np.ndarray)\n        self.assertEqual(coef.shape, (20,))\n\n    def test_ridge_class(self):\n        ridge = Ridge(alpha=self.alpha)\n        ridge.fit(self.X, self.y)\n        self.assertIsInstance(ridge.coef_, np.ndarray)\n        self.assertEqual(ridge.coef_.shape, (20,))\n\n    def test_ridge_cv(self):\n        ridge_cv = RidgeCV(alphas=[0.1, 1.0, 10.0])\n        ridge_cv.fit(self.X, self.y)\n        self.assertIsInstance(ridge_cv.coef_, np.ndarray)\n        self.assertEqual(ridge_cv.coef_.shape, (20,))\n\nclass TestRidgeClassifier(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, n_features=20, random_state=42)\n        self.alpha = 1.0\n\n    def test_ridge_classifier(self):\n        ridge_clf = RidgeClassifier(alpha=self.alpha)\n        ridge_clf.fit(self.X, self.y)\n        self.assertIsInstance(ridge_clf.coef_, np.ndarray)\n        self.assertEqual(ridge_clf.coef_.shape, (2, 20))\n\n    def test_ridge_classifier_cv(self):\n        ridge_clf_cv = RidgeClassifierCV(alphas=[0.1, 1.0, 10.0])\n        ridge_clf_cv.fit(self.X, self.y)\n        self.assertIsInstance(ridge_clf_cv.coef_, np.ndarray)\n        self.assertEqual(ridge_clf_cv.coef_.shape, (2, 20))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_823": ["\nimport unittest\nimport numpy as np\nfrom sklearn.decomposition import IncrementalPCA\nfrom scipy import sparse\n\nclass TestIncrementalPCA(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n        self.ipca = IncrementalPCA(n_components=2, batch_size=3)\n\n    def test_fit(self):\n        self.ipca.fit(self.X)\n        self.assertEqual(self.ipca.n_samples_seen_, 6)\n        self.assertEqual(self.ipca.n_components_, 2)\n\n    def test_partial_fit(self):\n        self.ipca.partial_fit(self.X[:3])\n        self.assertEqual(self.ipca.n_samples_seen_, 3)\n        self.ipca.partial_fit(self.X[3:])\n        self.assertEqual(self.ipca.n_samples_seen_, 6)\n\n    def test_transform(self):\n        self.ipca.fit(self.X)\n        X_transformed = self.ipca.transform(self.X)\n        self.assertEqual(X_transformed.shape, (6, 2))\n\n    def test_transform_sparse(self):\n        X_sparse = sparse.csr_matrix(self.X)\n        self.ipca.fit(X_sparse)\n        X_transformed = self.ipca.transform(X_sparse)\n        self.assertEqual(X_transformed.shape, (6, 2))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_514": ["\nimport unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colorbar import Colorbar, make_axes, make_axes_gridspec\nfrom matplotlib.cm import ScalarMappable\nfrom matplotlib.ticker import FixedLocator, LogFormatter\n\nclass TestColorbar(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.cmap = plt.get_cmap('viridis')\n        self.norm = plt.Normalize(vmin=0, vmax=1)\n\n    def test_init(self):\n        cb = Colorbar(self.ax, ScalarMappable(norm=self.norm, cmap=self.cmap))\n        self.assertIsInstance(cb, Colorbar)\n\n    def test_set_label(self):\n        cb = Colorbar(self.ax, ScalarMappable(norm=self.norm, cmap=self.cmap))\n        cb.set_label('Test Label')\n        self.assertEqual(cb.ax.get_ylabel(), 'Test Label')\n\n    def test_set_ticks(self):\n        cb = Colorbar(self.ax, ScalarMappable(norm=self.norm, cmap=self.cmap))\n        cb.set_ticks([0, 0.5, 1])\n        self.assertEqual(cb.get_ticks(), [0, 0.5, 1])\n\n    def test_set_alpha(self):\n        cb = Colorbar(self.ax, ScalarMappable(norm=self.norm, cmap=self.cmap))\n        cb.set_alpha(0.5)\n        self.assertEqual(cb.alpha, 0.5)\n\n    def test_make_axes(self):\n        cax, kwargs = make_axes(self.ax)\n        self.assertIsInstance(cax, plt.Axes)\n\n    def test_make_axes_gridspec(self):\n        gs = self.fig.add_gridspec(1, 1)\n        subplot = self.fig.add_subplot(gs[0, 0])\n        cax, kwargs = make_axes_gridspec(subplot)\n        self.assertIsInstance(cax, plt.SubplotBase)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_383": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.db.models.fields.related_lookups import *\nfrom .models import Book, Author, Category\n\nclass TestRelatedLookups(unittest.TestCase):\n\n    def setUp(self):\n        self.author = Author.objects.create(name='Author')\n        self.book1 = Book.objects.create(title='Book 1', author=self.author)\n        self.book2 = Book.objects.create(title='Book 2', author=self.author)\n        self.category = Category.objects.create(name='Category')\n        self.book1.categories.add(self.category)\n\n    def test_get_normalized_value(self):\n        value = get_normalized_value(self.book1, Mock())\n        self.assertEqual(value, (self.book1.pk,))\n\n    def test_related_in(self):\n        lookup = RelatedIn(Mock(), [self.book1, self.book2])\n        lookup.get_prep_lookup()\n        self.assertEqual(lookup.rhs, [self.book1.pk, self.book2.pk])\n\n    def test_related_exact(self):\n        lookup = RelatedExact(Mock(), self.book1)\n        lookup.get_prep_lookup()\n        self.assertEqual(lookup.rhs, self.book1.pk)\n\n    def test_related_less_than(self):\n        lookup = RelatedLessThan(Mock(), self.book2)\n        lookup.get_prep_lookup()\n        self.assertEqual(lookup.rhs, self.book2.pk)\n\n    def test_related_greater_than(self):\n        lookup = RelatedGreaterThan(Mock(), self.book1)\n        lookup.get_prep_lookup()\n        self.assertEqual(lookup.rhs, self.book1.pk)\n\n    def test_related_greater_than_or_equal(self):\n        lookup = RelatedGreaterThanOrEqual(Mock(), self.book1)\n        lookup.get_prep_lookup()\n        self.assertEqual(lookup.rhs, self.book1.pk)\n\n    def test_related_less_than_or_equal(self):\n        lookup = RelatedLessThanOrEqual(Mock(), self.book2)\n        lookup.get_prep_lookup()\n        self.assertEqual(lookup.rhs, self.book2.pk)\n\n    def test_related_is_null(self):\n        lookup = RelatedIsNull(Mock(), True)\n        self.assertIsNone(lookup.get_prep_lookup())\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_962": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom sphinx.domains.python import (PythonDomain, PythonModuleIndex, _parse_annotation, _pseudo_parse_arglist, py_sig_re)\nfrom docutils import nodes\nfrom sphinx.testing.util import SphinxTestUtil\n\nclass TestPythonDomain(SphinxTestUtil, unittest.TestCase):\n    def setUp(self):\n        super().setUp()\n        self.env = self.get_standard_sphinx_env()\n        self.domain = PythonDomain(self.env)\n\n    def test_parse_annotation(self):\n        annotation = \"List[Union[int, str]]\"\n        result = _parse_annotation(annotation, self.env)\n        self.assertIsInstance(result, list)\n        self.assertGreater(len(result), 0)\n\n    def test_pseudo_parse_arglist(self):\n        arglist = \"arg1, arg2[, arg3]\"\n        signode = nodes.desc_signature()\n        _pseudo_parse_arglist(signode, arglist)\n        self.assertIsInstance(signode[0], nodes.desc_parameterlist)\n\n    def test_py_sig_re(self):\n        sig = \"module.function(arg1: int, arg2: str) -> bool\"\n        match = py_sig_re.match(sig)\n        self.assertIsNotNone(match)\n        self.assertEqual(match.groups(), ('module.', 'function', 'arg1: int, arg2: str', 'bool'))\n\n    def test_python_module_index(self):\n        index = PythonModuleIndex(self.domain)\n        content, collapse = index.generate()\n        self.assertIsInstance(content, list)\n        self.assertIsInstance(collapse, bool)\n\n    def test_python_domain_note_object(self):\n        self.domain.note_object(\"test_object\", \"function\", \"test_id\")\n        self.assertIn(\"test_object\", self.domain.objects)\n\n    def test_python_domain_note_module(self):\n        self.domain.note_module(\"test_module\", \"test_id\", \"test_synopsis\", \"test_platform\", False)\n        self.assertIn(\"test_module\", self.domain.modules)\n\n    def test_python_domain_clear_doc(self):\n        self.domain.note_object(\"test_object\", \"function\", \"test_id\")\n        self.domain.clear_doc(\"test_docname\")\n        self.assertNotIn(\"test_object\", self.domain.objects)\n\n    @patch('sphinx.util.logging.logger')\n    def test_python_domain_note_object_duplicate(self, mock_logger):\n        self.domain.note_object(\"test_object\", \"function\", \"test_id\")\n        self.domain.note_object(\"test_object\", \"function\", \"test_id2\")\n        mock_logger.warning.assert_called()\n\n    # Add more tests as needed\n"], "sample_332": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.forms import Form\nfrom django.forms.formsets import BaseFormSet, formset_factory, all_valid\n\nclass TestForm(Form):\n    test_field = CharField()\n\nclass TestBaseFormSet(unittest.TestCase):\n    def setUp(self):\n        self.formset = BaseFormSet(form=TestForm)\n\n    def test_initial_forms(self):\n        self.assertEqual(len(self.formset.initial_forms), 0)\n\n    def test_extra_forms(self):\n        self.assertEqual(len(self.formset.extra_forms), 1)\n\n    def test_is_valid(self):\n        self.assertFalse(self.formset.is_valid())\n\n    def test_total_error_count(self):\n        self.assertEqual(self.formset.total_error_count(), 0)\n\nclass TestFormsetFactory(unittest.TestCase):\n    def test_formset_factory(self):\n        TestFormSet = formset_factory(TestForm)\n        formset = TestFormSet()\n        self.assertEqual(len(formset.forms), 1)\n\nclass TestAllValid(unittest.TestCase):\n    def test_all_valid(self):\n        TestFormSet = formset_factory(TestForm)\n        formsets = [TestFormSet()]\n        self.assertFalse(all_valid(formsets))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_265": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.template import TemplateDoesNotExist\nfrom django.template.backends.django import DjangoTemplates, Template, get_installed_libraries\nfrom django.test import RequestFactory, override_settings\n\nclass TestDjangoTemplates(unittest.TestCase):\n\n    def setUp(self):\n        self.params = {\n            'DIRS': ['test_dir'],\n            'APP_DIRS': True,\n            'OPTIONS': {\n                'autoescape': True,\n                'debug': True,\n                'file_charset': 'utf-8',\n                'libraries': {'test_library': 'test.library'},\n            }\n        }\n        self.backend = DjangoTemplates(self.params)\n\n    def test_init(self):\n        self.assertEqual(self.backend.engine.autoescape, True)\n        self.assertEqual(self.backend.engine.debug, True)\n        self.assertEqual(self.backend.engine.file_charset, 'utf-8')\n        self.assertIn('test_library', self.backend.engine.template_libraries)\n\n    def test_from_string(self):\n        template = self.backend.from_string('test_string')\n        self.assertIsInstance(template, Template)\n\n    def test_get_template(self):\n        with patch('django.template.backends.django.Template') as mock_template:\n            self.backend.engine.get_template = MagicMock(return_value='test_template')\n            template = self.backend.get_template('test_name')\n            self.assertEqual(template.template, 'test_template')\n\n    def test_get_template_exception(self):\n        with self.assertRaises(TemplateDoesNotExist):\n            self.backend.engine.get_template = MagicMock(side_effect=TemplateDoesNotExist('test_name'))\n            self.backend.get_template('test_name')\n\n    def test_get_installed_libraries(self):\n        with patch('django.template.backends.django.apps') as mock_apps:\n            mock_apps.get_app_configs.return_value = []\n            libraries = get_installed_libraries()\n            self.assertIn('i18n', libraries)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_5": ["\nimport unittest\nimport numpy as np\nimport astropy.units as u\nfrom astropy.coordinates import Angle, Latitude, Longitude\nfrom astropy.units import UnitsError\n\nclass TestAngles(unittest.TestCase):\n    def test_angle_initialization(self):\n        self.assertIsInstance(Angle('10.2345d'), Angle)\n        self.assertIsInstance(Angle(['10.2345d', '-20d']), Angle)\n        self.assertIsInstance(Angle('1:2:30.43 degrees'), Angle)\n        self.assertIsInstance(Angle(np.arange(1, 8), unit=u.deg), Angle)\n        self.assertIsInstance(Angle('1\u00b02\u20323\u2033'), Angle)\n        self.assertIsInstance(Angle('1\u00b02\u20323\u2033N'), Angle)\n        self.assertIsInstance(Angle('1d2m3.4s'), Angle)\n        self.assertIsInstance(Angle('1d2m3.4sS'), Angle)\n        self.assertIsInstance(Angle('-1h2m3s'), Angle)\n        self.assertIsInstance(Angle('-1h2m3sE'), Angle)\n        self.assertIsInstance(Angle('-1h2.5m'), Angle)\n        self.assertIsInstance(Angle('-1h2.5mW'), Angle)\n        self.assertIsInstance(Angle('-1:2.5', unit=u.deg), Angle)\n        self.assertIsInstance(Angle(10.2345 * u.deg), Angle)\n        self.assertIsInstance(Angle(Angle(10.2345 * u.deg)), Angle)\n\n    def test_angle_unit_conversion(self):\n        angle = Angle('10.2345d')\n        self.assertEqual(angle.degree, 10.2345)\n        self.assertEqual(angle.radian, 0.1785529362075527)\n\n    def test_latitude_initialization(self):\n        self.assertIsInstance(Latitude('10.2345d'), Latitude)\n        with self.assertRaises(ValueError):\n            Latitude('91d')\n        with self.assertRaises(TypeError):\n            Latitude(Longitude('10d'))\n\n    def test_longitude_initialization(self):\n        self.assertIsInstance(Longitude('10.2345d'), Longitude)\n        self.assertIsInstance(Longitude('10.2345d', wrap_angle='180d'), Longitude)\n        with self.assertRaises(TypeError):\n            Longitude(Latitude('10d'))\n\n    def test_latitude_validation(self):\n        lat = Latitude('10d')\n        with self.assertRaises(ValueError):\n            lat[0] = '91d'\n\n    def test_longitude_wrapping(self):\n        long = Longitude('370d')\n        self.assertEqual(long.degree, 10)\n        long.wrap_angle = '180d'\n        self.assertEqual(long.degree, -170)\n\n    def test_angle_operations(self):\n        angle1 = Angle('10d')\n        angle2 = Angle('20d')\n        self.assertEqual((angle1 + angle2).degree, 30)\n        self.assertEqual((angle1 - angle2).degree, -10)\n        self.assertEqual((angle1 * 2).degree, 20)\n        self.assertEqual((angle1 / 2).degree, 5)\n\n    def test_angle_string_representation(self):\n        angle = Angle('10.2345d')\n        self.assertEqual(str(angle), '<Angle 10.2345 deg>')\n        self.assertEqual(repr(angle), '<Angle 10.2345 deg>')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_268": ["\nfrom django.test import RequestFactory, TestCase\nfrom django.http import HttpResponseRedirect, JsonResponse\nfrom django.views.i18n import JavaScriptCatalog, JSONCatalog, set_language, get_formats\nfrom django.utils import translation\n\nclass TestI18NViews(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_set_language(self):\n        request = self.factory.post('/set_language/', {'language': 'fr', 'next': '/'})\n        response = set_language(request)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response.url, '/fr/')\n\n    def test_get_formats(self):\n        formats = get_formats()\n        self.assertIsInstance(formats, dict)\n        self.assertIn('DATE_FORMAT', formats)\n\n    def test_javascript_catalog(self):\n        with translation.override('fr'):\n            request = self.factory.get('/jsi18n/')\n            response = JavaScriptCatalog.as_view()(request)\n            self.assertEqual(response.status_code, 200)\n            self.assertEqual(response['Content-Type'], 'text/javascript; charset=\"utf-8\"')\n\n    def test_json_catalog(self):\n        with translation.override('fr'):\n            request = self.factory.get('/json_catalog/')\n            response = JSONCatalog.as_view()(request)\n            self.assertEqual(response.status_code, 200)\n            self.assertEqual(response['Content-Type'], 'application/json')\n            self.assertIsInstance(response, JsonResponse)\n"], "sample_38": ["\nimport unittest\nimport numpy as np\nfrom astropy.io import fits\nfrom astropy.wcs import WCS\n\nclass TestWCS(unittest.TestCase):\n    def setUp(self):\n        self.header = fits.Header.fromtext(\"\"\"\n        SIMPLE  =                    T / conforms to FITS standard\n        BITPIX  =                  -64 / array data type\n        NAXIS   =                    2 / number of array dimensions\n        NAXIS1  =                   10\n        NAXIS2  =                   10\n        CRPIX1  =                  5.0\n        CRPIX2  =                  5.0\n        CRVAL1  =                  0.0\n        CRVAL2  =                  0.0\n        CDELT1  =                  1.0\n        CDELT2  =                  1.0\n        CTYPE1  = 'RA---TAN'\n        CTYPE2  = 'DEC--TAN'\n        \"\"\")\n        self.w = WCS(self.header)\n\n    def test_init(self):\n        self.assertIsInstance(self.w, WCS)\n\n    def test_to_header(self):\n        header_string = self.w.to_header_string()\n        self.assertIsInstance(header_string, str)\n\n    def test_all_pix2world(self):\n        x, y = np.mgrid[:10, :10]\n        ra, dec = self.w.all_pix2world(x, y, 1)\n        self.assertIsInstance(ra, np.ndarray)\n        self.assertIsInstance(dec, np.ndarray)\n\n    def test_all_world2pix(self):\n        ra, dec = np.mgrid[:10, :10]\n        x, y = self.w.all_world2pix(ra, dec, 1)\n        self.assertIsInstance(x, np.ndarray)\n        self.assertIsInstance(y, np.ndarray)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1172": ["\nimport unittest\nfrom sympy import symbols, Eq\nfrom sympy.solvers.polysys import solve_poly_system, solve_triangulated, solve_biquadratic, SolveFailed\n\nx, y, z = symbols('x y z')\n\nclass TestPolysys(unittest.TestCase):\n    def test_solve_poly_system(self):\n        eq1 = Eq(x*y - 2*y, 0)\n        eq2 = Eq(2*y**2 - x**2, 0)\n        result = solve_poly_system([eq1, eq2], x, y)\n        self.assertEqual(result, [(0, 0), (2, -2**(1/2)), (2, 2**(1/2))])\n\n    def test_solve_triangulated(self):\n        F = [x**2 + y + z - 1, x + y**2 + z - 1, x + y + z**2 - 1]\n        result = solve_triangulated(F, x, y, z)\n        self.assertEqual(result, [(0, 0, 1), (0, 1, 0), (1, 0, 0)])\n\n    def test_solve_biquadratic(self):\n        from sympy.polys import Options, Poly\n        NewOption = Options((x, y), {'domain': 'ZZ'})\n        a = Poly(y**2 - 4 + x, y, x, domain='ZZ')\n        b = Poly(y*2 + 3*x - 7, y, x, domain='ZZ')\n        result = solve_biquadratic(a, b, NewOption)\n        self.assertEqual(result, [(1/3, 3), (41/27, 11/9)])\n\n    def test_solve_failed(self):\n        eq1 = Eq(x**2 - y, 0)\n        eq2 = Eq(x - y, 0)\n        with self.assertRaises(SolveFailed):\n            solve_biquadratic(eq1, eq2, Options((x, y), {'domain': 'ZZ'}))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_118": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.models.lookups import Exact, IExact, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual, In, Contains, IContains, StartsWith, IStartsWith, EndsWith, IEndsWith, Range, IsNull, Regex, IRegex, YearExact, YearGt, YearGte, YearLt, YearLte\nfrom django.db.models import IntegerField, DateTimeField, Field\n\nclass TestLookups(unittest.TestCase):\n    def setUp(self):\n        self.connection = MagicMock()\n        self.compiler = MagicMock()\n\n    @patch('django.db.models.lookups.OrderedSet')\n    def test_exact(self, mock_ordered_set):\n        lookup = Exact('lhs', 'rhs')\n        lookup.process_rhs(self.compiler, self.connection)\n        # Add assertions here to check the behavior of Exact lookup\n\n    def test_iexact(self):\n        lookup = IExact('lhs', 'rhs')\n        lookup.process_rhs(self.compiler, self.connection)\n        # Add assertions here to check the behavior of IExact lookup\n\n    def test_greater_than(self):\n        lookup = GreaterThan('lhs', 5)\n        lookup.process_rhs(self.compiler, self.connection)\n        # Add assertions here to check the behavior of GreaterThan lookup\n\n    # Write similar test methods for other lookup classes such as GreaterThanOrEqual, LessThan, LessThanOrEqual, In, Contains, IContains, StartsWith, IStartsWith, EndsWith, IEndsWith, Range, IsNull, Regex, IRegex, YearExact, YearGt, YearGte, YearLt, YearLte\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_549": ["\nimport unittest\nfrom unittest.mock import patch\nfrom io import StringIO\nimport numpy as np\nfrom matplotlib import cbook\n\nclass TestCbookFunctions(unittest.TestCase):\n    def test_delete_masked_points(self):\n        x = np.array([1, np.nan, 3, 4])\n        y = np.array([5, 6, np.nan, 8])\n        x_out, y_out = cbook.delete_masked_points(x, y)\n        np.testing.assert_array_equal(x_out, np.array([1, 3]))\n        np.testing.assert_array_equal(y_out, np.array([5, 8]))\n\n    def test_print_cycles(self):\n        class TestObj:\n            pass\n        a, b, c, d = TestObj(), TestObj(), TestObj(), TestObj()\n        a.ref = b\n        b.ref = c\n        c.ref = d\n        d.ref = a\n        with patch('sys.stdout', new=StringIO()) as fake_out:\n            cbook.print_cycles([a])\n            self.assertIn(\"TestObj\", fake_out.getvalue())\n\n    # Add more test cases for other functions in cbook.py\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_105": ["\nimport unittest\nfrom unittest.mock import MagicMock, Mock, patch\n\nfrom django.core.exceptions import PermissionDenied\nfrom django.http import Http404, HttpRequest, HttpResponse\nfrom django.test import RequestFactory\nfrom django.views.debug import (\n    CallableSettingWrapper,\n    ExceptionReporter,\n    SafeExceptionReporterFilter,\n    cleanse_setting,\n    default_urlconf,\n    technical_404_response,\n    technical_500_response,\n)\n\nclass TestDebugViews(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_cleanse_setting(self):\n        self.assertEqual(cleanse_setting('API_KEY', 'secret'), '********************')\n        self.assertEqual(cleanse_setting('SAFE_KEY', 'safe'), 'safe')\n        self.assertEqual(cleanse_setting('DICT_KEY', {'API_KEY': 'secret'}), {'API_KEY': '********************'})\n\n    def test_CallableSettingWrapper(self):\n        mock_callable = Mock()\n        wrapper = CallableSettingWrapper(mock_callable)\n        self.assertEqual(repr(wrapper), repr(mock_callable))\n\n    def test_ExceptionReporter_get_traceback_data(self):\n        request = self.factory.get('/')\n        reporter = ExceptionReporter(request, PermissionDenied, PermissionDenied(), None)\n        data = reporter.get_traceback_data()\n        self.assertIn('is_email', data)\n\n    @patch('django.views.debug.get_safe_settings')\n    def test_ExceptionReporter_get_traceback_html(self, mock_get_safe_settings):\n        mock_get_safe_settings.return_value = {}\n        request = self.factory.get('/')\n        reporter = ExceptionReporter(request, PermissionDenied, PermissionDenied(), None)\n        html = reporter.get_traceback_html()\n        self.assertIsInstance(html, str)\n\n    @patch('django.views.debug.get_safe_settings')\n    def test_ExceptionReporter_get_traceback_text(self, mock_get_safe_settings):\n        mock_get_safe_settings.return_value = {}\n        request = self.factory.get('/')\n        reporter = ExceptionReporter(request, PermissionDenied, PermissionDenied(), None)\n        text = reporter.get_traceback_text()\n        self.assertIsInstance(text, str)\n\n    def test_technical_404_response(self):\n        request = self.factory.get('/')\n        response = technical_404_response(request, Http404())\n        self.assertIsInstance(response, HttpResponse)\n\n    def test_default_urlconf(self):\n        request = self.factory.get('/')\n        response = default_urlconf(request)\n        self.assertIsInstance(response, HttpResponse)\n\n    def test_technical_500_response_ajax(self):\n        request = self.factory.get('/', HTTP_X_REQUESTED_WITH='XMLHttpRequest')\n        response = technical_500_response(request, Exception, Exception('error'), None)\n        self.assertIsInstance(response, HttpResponse)\n        self.assertEqual(response.status_code, 500)\n        self.assertEqual(response['Content-Type'], 'text/plain; charset=utf-8')\n\n    def test_technical_500_response_not_ajax(self):\n        request = self.factory.get('/')\n        response = technical_500_response(request, Exception, Exception('error'), None)\n        self.assertIsInstance(response, HttpResponse)\n        self.assertEqual(response.status_code, 500)\n        self.assertEqual(response['Content-Type'], 'text/html')\n\n    def test_SafeExceptionReporterFilter_get_post_parameters(self):\n        request = self.factory.post('/', {'sensitive': 'data'})\n        request.sensitive_post_parameters = ['sensitive']\n        filter = SafeExceptionReporterFilter()\n        self.assertEqual(filter.get_post_parameters(request), {'sensitive': '********************'})\n"], "sample_776": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n\nclass TestLeastAngle(unittest.TestCase):\n\n    def setUp(self):\n        np.random.seed(0)\n        self.X_train = np.random.rand(100, 5)\n        self.y_train = np.random.rand(100)\n        self.X_test = np.random.rand(20, 5)\n        self.y_test = np.random.rand(20)\n\n    def test_lars_path_residues(self):\n        alphas, active, coefs, residues = _lars_path_residues(self.X_train, self.y_train, self.X_test, self.y_test)\n        self.assertIsInstance(alphas, np.ndarray)\n        self.assertIsInstance(active, list)\n        self.assertIsInstance(coefs, np.ndarray)\n        self.assertIsInstance(residues, np.ndarray)\n\n    def test_lasso_lars_ic(self):\n        model = LassoLarsIC()\n        model.fit(self.X_train, self.y_train)\n        self.assertIsInstance(model.coef_, np.ndarray)\n        self.assertIsInstance(model.intercept_, float)\n        self.assertIsInstance(model.alpha_, float)\n        self.assertIsInstance(model.n_iter_, int)\n        self.assertIsInstance(model.criterion_, np.ndarray)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_485": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.utils.html import (\n    conditional_escape,\n    escape,\n    escapejs,\n    format_html,\n    html_safe,\n    json_script,\n    linebreaks,\n    smart_urlquote,\n    strip_spaces_between_tags,\n    strip_tags,\n    urlize,\n    Urlizer,\n)\nfrom django.utils.safestring import SafeString\n\nclass TestDjangoUtilsHtml(unittest.TestCase):\n\n    def test_escape(self):\n        self.assertEqual(escape('<script>alert(\"Hello, world!\");</script>'), '&lt;script&gt;alert(&quot;Hello, world!&quot;);&lt;/script&gt;')\n\n    def test_escapejs(self):\n        self.assertEqual(escapejs('alert(\"Hello, world!\");'), 'alert(\\\\u0022Hello, world!\\\\u0022);')\n\n    def test_conditional_escape(self):\n        self.assertEqual(conditional_escape('<script>alert(\"Hello, world!\");</script>'), '&lt;script&gt;alert(&quot;Hello, world!&quot;);&lt;/script&gt;')\n        self.assertEqual(conditional_escape(SafeString('<script>alert(\"Hello, world!\");</script>')), '<script>alert(\"Hello, world!\");</script>')\n\n    def test_format_html(self):\n        self.assertEqual(format_html('Hello, {}!', 'world'), 'Hello, world!')\n\n    @patch('django.utils.html.escape', return_value='&lt;script&gt;')\n    def test_format_html_escaping(self, mock_escape):\n        self.assertEqual(format_html('<script>'), '&lt;script&gt;')\n        mock_escape.assert_called_once_with('<script>')\n\n    def test_linebreaks(self):\n        self.assertEqual(linebreaks('Hello\\n\\nworld'), '<p>Hello</p>\\n\\n<p>world</p>')\n\n    def test_strip_tags(self):\n        self.assertEqual(strip_tags('<p>Hello, <b>world!</b></p>'), 'Hello, world!')\n\n    def test_strip_spaces_between_tags(self):\n        self.assertEqual(strip_spaces_between_tags('<p>Hello, </p> <b>world!</b>'), '<p>Hello, </p><b>world!</b>')\n\n    def test_smart_urlquote(self):\n        self.assertEqual(smart_urlquote('http://www.example.com/'), 'http://www.example.com/')\n\n    def test_urlize(self):\n        self.assertEqual(urlize('Check out www.example.com.'), 'Check out <a href=\"http://www.example.com\">www.example.com</a>.')\n\n    def test_urlizer(self):\n        urlizer = Urlizer()\n        self.assertEqual(urlizer('Check out www.example.com.'), 'Check out <a href=\"http://www.example.com\">www.example.com</a>.')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1020": ["\nimport unittest\nfrom sympy.parsing.sympy_parser import (\n    parse_expr, standard_transformations, convert_xor, implicit_multiplication_application,\n    implicit_multiplication, implicit_application, function_exponentiation, split_symbols,\n    split_symbols_custom, _token_splittable, convert_equals_signs, lambda_notation, auto_symbol,\n    repeated_decimals, auto_number, rationalize, factorial_notation\n)\n\nclass TestSympyParser(unittest.TestCase):\n\n    def test_parse_expr(self):\n        self.assertEqual(parse_expr(\"1/2\"), 1/2)\n\n    def test_standard_transformations(self):\n        tokens = standard_transformations([(1, \"1\"), (2, \"2\")], {}, {})\n        self.assertIsInstance(tokens, list)\n\n    def test_convert_xor(self):\n        tokens = convert_xor([(1, \"^\")], {}, {})\n        self.assertEqual(tokens, [(1, \"**\")])\n\n    def test_implicit_multiplication_application(self):\n        tokens = implicit_multiplication_application([(1, \"sin\"), (1, \"x\")], {}, {})\n        self.assertIsInstance(tokens, list)\n\n    def test_implicit_multiplication(self):\n        tokens = implicit_multiplication([(1, \"sin\"), (1, \"x\")], {}, {})\n        self.assertIsInstance(tokens, list)\n\n    def test_implicit_application(self):\n        tokens = implicit_application([(1, \"sin\"), (1, \"x\")], {}, {})\n        self.assertIsInstance(tokens, list)\n\n    def test_function_exponentiation(self):\n        tokens = function_exponentiation([(1, \"sin\"), (1, \"**\"), (1, \"2\"), (1, \"x\")], {}, {})\n        self.assertIsInstance(tokens, list)\n\n    def test_split_symbols(self):\n        tokens = split_symbols([(1, \"xyz\")], {}, {})\n        self.assertIsInstance(tokens, list)\n\n    def test_split_symbols_custom(self):\n        predicate = lambda symbol: True if _token_splittable(symbol) else False\n        tokens = split_symbols_custom(predicate)([(1, \"xyz\")], {}, {})\n        self.assertIsInstance(tokens, list)\n\n    def test_convert_equals_signs(self):\n        tokens = convert_equals_signs([(1, \"1\"), (1, \"=\"), (1, \"x\")], {}, {})\n        self.assertIsInstance(tokens, list)\n\n    def test_lambda_notation(self):\n        tokens = lambda_notation([(1, \"lambda\"), (1, \"x\"), (1, \":\"), (1, \"x**2\")], {}, {})\n        self.assertIsInstance(tokens, list)\n\n    def test_auto_symbol(self):\n        tokens = auto_symbol([(1, \"x\")], {}, {})\n        self.assertIsInstance(tokens, list)\n\n    def test_repeated_decimals(self):\n        tokens = repeated_decimals([(1, \"0.2\"), (1, \"[\"), (1, \"1\"), (1, \"]\")], {}, {})\n        self.assertIsInstance(tokens, list)\n\n    def test_auto_number(self):\n        tokens = auto_number([(1, \"1\")], {}, {})\n        self.assertIsInstance(tokens, list)\n\n    def test_rationalize(self):\n        tokens = rationalize([(1, \"Float\"), (1, \"(\"), (1, \"1.2\"), (1, \")\")], {}, {})\n        self.assertIsInstance(tokens, list)\n\n    def test_factorial_notation(self):\n        tokens = factorial_notation([(1, \"5\"), (4, \"!\")], {}, {})\n        self.assertIsInstance(tokens, list)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_20": ["\nimport os\nimport unittest\nfrom astropy.io import fits\nfrom astropy.table import Table, Column, MaskedColumn\nfrom astropy.time import Time\nfrom astropy.units import Unit\nfrom astropy.utils.exceptions import AstropyUserWarning\nfrom . import connect\n\nclass TestConnect(unittest.TestCase):\n    def setUp(self):\n        self.table = Table([Column(name='a', data=[1, 2, 3]), Column(name='b', data=['a', 'b', 'c'])])\n        self.fits_file = 'test.fits'\n\n    def tearDown(self):\n        if os.path.exists(self.fits_file):\n            os.remove(self.fits_file)\n\n    def test_read_table_fits(self):\n        self.table.write(self.fits_file, format='fits')\n        t = connect.read_table_fits(self.fits_file)\n        self.assertIsInstance(t, Table)\n        self.assertEqual(len(t), len(self.table))\n\n    def test_read_table_fits_astropy_native(self):\n        t = Time(['2018-01-01', '2018-01-02'])\n        table = Table([t])\n        table.write(self.fits_file, format='fits')\n        t = connect.read_table_fits(self.fits_file, astropy_native=True)\n        self.assertIsInstance(t['col0'], Time)\n\n    def test_write_table_fits(self):\n        connect.write_table_fits(self.table, self.fits_file)\n        self.assertTrue(os.path.exists(self.fits_file))\n\n    def test_write_table_fits_overwrite(self):\n        with open(self.fits_file, 'w') as f:\n            f.write('old content')\n        connect.write_table_fits(self.table, self.fits_file, overwrite=True)\n        self.assertTrue(os.path.exists(self.fits_file))\n        with fits.open(self.fits_file) as hdul:\n            self.assertIsInstance(hdul[1], fits.BinTableHDU)\n\n    def test_write_table_fits_append(self):\n        connect.write_table_fits(self.table, self.fits_file)\n        connect.write_table_fits(self.table, self.fits_file, append=True)\n        with fits.open(self.fits_file) as hdul:\n            self.assertEqual(len(hdul), 2)\n\n    def test_encode_mixins(self):\n        t = Table([Time(['2018-01-01', '2018-01-02'])])\n        encoded_t = connect._encode_mixins(t)\n        self.assertIsInstance(encoded_t['col0'], MaskedColumn)\n\n    def test_decode_mixins(self):\n        t = Table([Time(['2018-01-01', '2018-01-02'])])\n        encoded_t = connect._encode_mixins(t)\n        decoded_t = connect._decode_mixins(encoded_t)\n        self.assertIsInstance(decoded_t['col0'], Time)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_245": ["\nfrom unittest import mock\nfrom io import StringIO\nfrom django.core.management.commands.makemessages import Command, TranslatableFile, BuildFile\nfrom django.core.management import CommandError\nfrom django.core.management.utils import find_command\nimport os\n\n# Mocking the find_command function to return a dummy command\n@mock.patch('django.core.management.commands.makemessages.find_command', return_value='dummy_command')\ndef test_check_programs(mock_find_command):\n    Command().check_programs('dummy_command')\n    mock_find_command.assert_called_once_with('dummy_command')\n\ndef test_translatable_file_eq(mock_find_command):\n    tf1 = TranslatableFile('/path1', 'file1', '/locale_dir')\n    tf2 = TranslatableFile('/path1', 'file1', '/locale_dir')\n    assert tf1 == tf2\n\ndef test_translatable_file_lt(mock_find_command):\n    tf1 = TranslatableFile('/path1', 'file1', '/locale_dir')\n    tf2 = TranslatableFile('/path2', 'file2', '/locale_dir')\n    assert tf1 < tf2\n\ndef test_build_file_is_templatized(mock_find_command):\n    command = Command()\n    command.domain = 'django'\n    tf = TranslatableFile('/path', 'file.py', '/locale_dir')\n    bf = BuildFile(command, 'django', tf)\n    assert not bf.is_templatized\n\ndef test_command_error_raised(mock_find_command):\n    command = Command()\n    with mock.patch.object(find_command, 'return_value', None):\n        with mock.patch.object(command, 'stdout', StringIO()):\n            with mock.patch.object(os, 'path', mock.Mock()):\n                with mock.patch.object(os.path, 'isdir', mock.Mock(return_value=False)):\n                    with mock.patch('sys.argv', ['prog', 'command']):\n                        try:\n                            command.handle()\n                        except CommandError:\n                            pass\n                        else:\n                            assert False, \"CommandError not raised\"\n\n# More tests can be added as per the functionality of the makemessages command\n"], "sample_50": ["\nimport unittest\nfrom unittest.mock import patch, call\nimport signal\nimport subprocess\nfrom django.db.backends.postgresql.client import DatabaseClient\n\nclass TestDatabaseClient(unittest.TestCase):\n    @patch('subprocess.run')\n    @patch('os.environ.copy')\n    @patch('signal.signal')\n    def test_runshell_db(self, mock_signal, mock_env_copy, mock_subprocess_run):\n        conn_params = {\n            'host': 'localhost',\n            'port': 5432,\n            'database': 'test_db',\n            'user': 'test_user',\n            'password': 'test_pass'\n        }\n        mock_env_copy.return_value = {}\n        DatabaseClient.runshell_db(conn_params)\n        mock_env_copy.assert_called_once()\n        mock_signal.assert_has_calls([\n            call(signal.SIGINT, signal.SIG_IGN),\n            call(signal.SIGINT, signal.SIG_DFL)\n        ])\n        mock_subprocess_run.assert_called_once_with(\n            ['psql', '-U', 'test_user', '-h', 'localhost', '-p', '5432', 'test_db'],\n            check=True,\n            env={'PGPASSWORD': 'test_pass'}\n        )\n\n    @patch('django.db.backends.postgresql.client.DatabaseClient.runshell_db')\n    def test_runshell(self, mock_runshell_db):\n        mock_connection = unittest.mock.Mock()\n        mock_connection.get_connection_params.return_value = {'database': 'test_db'}\n        db_client = DatabaseClient(mock_connection)\n        db_client.runshell()\n        mock_runshell_db.assert_called_once_with({'database': 'test_db'})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_162": ["\nimport unittest\nfrom unittest.mock import patch, mock_open, MagicMock\nfrom django.core.management.commands.makemessages import Command, TranslatableFile, BuildFile, write_pot_file\n\nclass TestTranslatableFile(unittest.TestCase):\n    def setUp(self):\n        self.translatable_file = TranslatableFile('/path/to/dir', 'file.py', '/path/to/locale')\n\n    def test_path(self):\n        self.assertEqual(self.translatable_file.path, '/path/to/dir/file.py')\n\n    def test_equality(self):\n        another_file = TranslatableFile('/path/to/dir', 'file.py', '/path/to/locale')\n        self.assertEqual(self.translatable_file, another_file)\n\n    def test_inequality(self):\n        another_file = TranslatableFile('/path/to/another/dir', 'another_file.py', '/path/to/another/locale')\n        self.assertNotEqual(self.translatable_file, another_file)\n\n    def test_ordering(self):\n        another_file = TranslatableFile('/path/to/another/dir', 'another_file.py', '/path/to/another/locale')\n        self.assertLess(self.translatable_file, another_file)\n\nclass TestBuildFile(unittest.TestCase):\n    def setUp(self):\n        self.command = MagicMock()\n        self.domain = 'django'\n        self.translatable = TranslatableFile('/path/to/dir', 'file.py', '/path/to/locale')\n        self.build_file = BuildFile(self.command, self.domain, self.translatable)\n\n    def test_is_templatized(self):\n        self.assertFalse(self.build_file.is_templatized)\n\n    def test_path(self):\n        self.assertEqual(self.build_file.path, '/path/to/dir/file.py')\n\n    def test_work_path(self):\n        self.assertEqual(self.build_file.work_path, '/path/to/dir/file.py')\n\n    @patch('os.path.exists')\n    @patch('os.unlink')\n    def test_cleanup(self, mock_unlink, mock_exists):\n        mock_exists.return_value = True\n        self.build_file.cleanup()\n        mock_unlink.assert_not_called()\n\nclass TestCommand(unittest.TestCase):\n    def setUp(self):\n        self.command = Command()\n\n    @patch('django.core.management.commands.makemessages.write_pot_file')\n    @patch('django.core.management.commands.makemessages.Command.write_po_file')\n    @patch('django.core.management.commands.makemessages.Command.build_potfiles')\n    @patch('django.core.management.commands.makemessages.Command.find_files')\n    @patch('django.core.management.commands.makemessages.Command.remove_potfiles')\n    @patch('django.core.management.commands.makemessages.check_programs')\n    def test_handle(self, mock_check_programs, mock_remove_potfiles, mock_find_files, mock_build_potfiles, mock_write_po_file, mock_write_pot_file):\n        mock_find_files.return_value = []\n        mock_build_potfiles.return_value = ['/path/to/locale/django.pot']\n        self.command.handle(locale=['en'])\n        mock_check_programs.assert_called()\n        mock_build_potfiles.assert_called_once()\n        mock_write_po_file.assert_called_once_with('/path/to/locale/django.pot', 'en')\n        mock_remove_potfiles.assert_called_once()\n\n@patch('builtins.open', new_callable=mock_open, read_data='msgid \"\"\\nmsgstr \"\"')\ndef test_write_pot_file(mock_file):\n    with patch('os.path.exists') as mock_exists:\n        mock_exists.return_value = True\n        write_pot_file('/path/to/django.pot', 'msgid \"Test\"\\nmsgstr \"\"')\n        mock_file.assert_called_once_with('/path/to/django.pot', 'a', encoding='utf-8', newline='\\n')\n        handle = mock_file()\n        handle.write.assert_called_once_with('msgid \"Test\"\\nmsgstr \"\"')\n"], "sample_1147": ["\nimport unittest\nfrom sympy import symbols, Rational, sin, Integral, Matrix, log\nfrom sympy.printing.latex import latex, translate, greek_letters_set, tex_greek_dictionary, multiline_latex, latex_escape, LatexPrinter, other_symbols\n\nclass TestLatexPrinter(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.tau = symbols('x y tau')\n\n    def test_latex(self):\n        self.assertEqual(latex((2*self.tau)**Rational(7,2)), '8 \\\\sqrt{2} \\\\tau^{\\\\frac{7}{2}}')\n        self.assertEqual(latex((2*self.tau)**sin(Rational(7,2)), fold_func_brackets=True),\n                         '\\\\left(2 \\\\tau\\\\right)^{\\\\sin {\\\\frac{7}{2}}}')\n\n    def test_translate(self):\n        self.assertEqual(translate('alphahatdotprime'), \"{\\\\dot{\\\\hat{\\\\alpha}}}'\")\n\n    def test_latex_options(self):\n        self.assertEqual(latex((2*self.tau)**Rational(7,2), fold_frac_powers=True), '8 \\\\sqrt{2} \\\\tau^{7/2}')\n        self.assertEqual(latex(3*self.x**2/self.y, fold_short_frac=True), '3 x^{2} / y')\n\n    def test_latex_trig_options(self):\n        self.assertEqual(latex(sin(self.x), inv_trig_style=\"full\"), '\\\\sin{\\\\left(x \\\\right)}')\n\n    def test_latex_matrix_options(self):\n        self.assertEqual(latex(Matrix(2, 1, [self.x, self.y]), mat_str=\"array\"),\n                         '\\\\left[\\\\begin{array}{c}x\\\\\\\\y\\\\end{array}\\\\right]')\n\n    def test_latex_logarithms(self):\n        self.assertEqual(latex(log(10), ln_notation=True), '\\\\ln{\\\\left(10 \\\\right)}')\n\n    def test_latex_containers(self):\n        self.assertEqual(latex([2/self.x, self.y], mode='inline'), '$\\\\left[ 2 / x, \\\\  y\\\\right]$')\n\n    def test_latex_unsupported_types(self):\n        self.assertEqual(latex(int), '\\\\mathtt{\\\\text{<class \\\\text{int}>}}')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_734": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics.cluster import adjusted_mutual_info_score, adjusted_rand_score, completeness_score, contingency_matrix, entropy, fowlkes_mallows_score, homogeneity_completeness_v_measure, homogeneity_score, mutual_info_score, normalized_mutual_info_score, v_measure_score\n\nclass TestClusterMetrics(unittest.TestCase):\n    def setUp(self):\n        self.labels_true = np.array([0, 0, 1, 1])\n        self.labels_pred = np.array([0, 0, 1, 1])\n\n    def test_adjusted_mutual_info_score(self):\n        self.assertEqual(adjusted_mutual_info_score(self.labels_true, self.labels_pred), 1.0)\n\n    def test_adjusted_rand_score(self):\n        self.assertEqual(adjusted_rand_score(self.labels_true, self.labels_pred), 1.0)\n\n    def test_completeness_score(self):\n        self.assertEqual(completeness_score(self.labels_true, self.labels_pred), 1.0)\n\n    def test_contingency_matrix(self):\n        self.assertTrue(np.array_equal(contingency_matrix(self.labels_true, self.labels_pred), np.array([[2, 0], [0, 2]])))\n\n    def test_entropy(self):\n        self.assertEqual(entropy(self.labels_true), entropy(self.labels_pred))\n\n    def test_fowlkes_mallows_score(self):\n        self.assertEqual(fowlkes_mallows_score(self.labels_true, self.labels_pred), 1.0)\n\n    def test_homogeneity_completeness_v_measure(self):\n        self.assertEqual(homogeneity_completeness_v_measure(self.labels_true, self.labels_pred), (1.0, 1.0, 1.0))\n\n    def test_homogeneity_score(self):\n        self.assertEqual(homogeneity_score(self.labels_true, self.labels_pred), 1.0)\n\n    def test_mutual_info_score(self):\n        self.assertEqual(mutual_info_score(self.labels_true, self.labels_pred), 1.0)\n\n    def test_normalized_mutual_info_score(self):\n        self.assertEqual(normalized_mutual_info_score(self.labels_true, self.labels_pred), 1.0)\n\n    def test_v_measure_score(self):\n        self.assertEqual(v_measure_score(self.labels_true, self.labels_pred), 1.0)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_174": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.contrib.admin import options\nfrom django.test import RequestFactory\nfrom django.contrib.auth.models import User\nfrom django.contrib import admin\n\nclass TestModelAdmin(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.user = User.objects.create_user(username='testuser', password='12345')\n        self.model = options.Model\n        self.admin_site = admin.AdminSite()\n        self.model_admin = options.ModelAdmin(self.model, self.admin_site)\n\n    def test_get_model_perms(self):\n        request = self.factory.get('/')\n        request.user = self.user\n        perms = self.model_admin.get_model_perms(request)\n        self.assertEqual(perms['add'], self.model_admin.has_add_permission(request))\n        self.assertEqual(perms['change'], self.model_admin.has_change_permission(request))\n        self.assertEqual(perms['delete'], self.model_admin.has_delete_permission(request))\n        self.assertEqual(perms['view'], self.model_admin.has_view_permission(request))\n\n    @patch('django.contrib.admin.options.LogEntry.objects.log_action')\n    def test_log_addition(self, mock_log_action):\n        request = self.factory.get('/')\n        request.user = self.user\n        obj = self.model()\n        message = 'Test message'\n        self.model_admin.log_addition(request, obj, message)\n        mock_log_action.assert_called_once()\n\n    # Add more test methods to cover other functionality of the ModelAdmin class\n\nclass TestInlineModelAdmin(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.user = User.objects.create_user(username='testuser', password='12345')\n        self.parent_model = options.ParentModel\n        self.model = options.InlineModel\n        self.admin_site = admin.AdminSite()\n        self.inline_model_admin = options.InlineModelAdmin(self.parent_model, self.admin_site)\n\n    def test_get_extra(self):\n        request = self.factory.get('/')\n        extra = self.inline_model_admin.get_extra(request)\n        self.assertEqual(extra, self.inline_model_admin.extra)\n\n    # Add more test methods to cover other functionality of the InlineModelAdmin class\n"], "sample_774": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer, make_column_transformer\nfrom sklearn.exceptions import NotFittedError, DataConversionWarning\n\nclass TestColumnTransformer(unittest.TestCase):\n    def setUp(self):\n        self.X = pd.DataFrame({\n            'A': ['a', 'b', 'c', 'd'],\n            'B': ['e', 'f', 'g', 'h'],\n            'C': [1, 2, 3, 4],\n            'D': [5, 6, 7, 8]\n        })\n\n    def test_make_column_transformer(self):\n        ct = make_column_transformer(\n            (StandardScaler(), ['C', 'D']),\n            (OneHotEncoder(), ['A', 'B'])\n        )\n        self.assertIsInstance(ct, ColumnTransformer)\n\n    def test_fit_transform(self):\n        ct = make_column_transformer(\n            (StandardScaler(), ['C', 'D']),\n            (OneHotEncoder(), ['A', 'B'])\n        )\n        X_transformed = ct.fit_transform(self.X)\n        self.assertEqual(X_transformed.shape[1], 6)  # 2 one-hot encoded columns + 2 standard scaled columns\n\n    def test_transform_without_fit(self):\n        ct = make_column_transformer(\n            (StandardScaler(), ['C', 'D']),\n            (OneHotEncoder(), ['A', 'B'])\n        )\n        with self.assertRaises(NotFittedError):\n            ct.transform(self.X)\n\n    def test_remainder_passthrough(self):\n        ct = make_column_transformer(\n            (StandardScaler(), ['C', 'D']),\n            remainder='passthrough'\n        )\n        X_transformed = ct.fit_transform(self.X)\n        self.assertEqual(X_transformed.shape[1], 4)  # 2 standard scaled columns + 2 passthrough columns\n\n    def test_remainder_drop(self):\n        ct = make_column_transformer(\n            (StandardScaler(), ['C', 'D']),\n            remainder='drop'\n        )\n        X_transformed = ct.fit_transform(self.X)\n        self.assertEqual(X_transformed.shape[1], 2)  # 2 standard scaled columns\n\n    def test_sparse_threshold(self):\n        ct = make_column_transformer(\n            (StandardScaler(), ['C', 'D']),\n            (OneHotEncoder(), ['A', 'B']),\n            sparse_threshold=1.0\n        )\n        X_transformed = ct.fit_transform(self.X)\n        self.assertFalse(sp.issparse(X_transformed))  # output should be dense\n\n    def test_invalid_remainder(self):\n        with self.assertRaises(ValueError):\n            make_column_transformer(\n                (StandardScaler(), ['C', 'D']),\n                remainder='invalid'\n            )\n"], "sample_1041": ["\nimport unittest\nfrom sympy import Pow, S, Symbol, Dummy, expand_complex, expand_multinomial, expand_mul, log, exp, sin, asin, factorial, Mod, pi, I, sqrt\nfrom sympy.core import Rational, Integer\nfrom sympy.core.power import isqrt, integer_nthroot, integer_log\n\nclass TestPowerFunctions(unittest.TestCase):\n    def test_isqrt(self):\n        self.assertEqual(isqrt(16), 4)\n        self.assertEqual(isqrt(26), 5)\n        self.assertEqual(isqrt(0), 0)\n        self.assertEqual(isqrt(1), 1)\n\n    def test_integer_nthroot(self):\n        self.assertEqual(integer_nthroot(16, 2), (4, True))\n        self.assertEqual(integer_nthroot(26, 2), (5, False))\n        self.assertEqual(integer_nthroot(0, 3), (0, True))\n        self.assertEqual(integer_nthroot(1, 5), (1, True))\n\n    def test_integer_log(self):\n        self.assertEqual(integer_log(125, 5), (3, True))\n        self.assertEqual(integer_log(17, 9), (1, False))\n        self.assertEqual(integer_log(4, -2), (2, True))\n        self.assertEqual(integer_log(-125, -5), (3, True))\n\nclass TestPowClass(unittest.TestCase):\n    def test_init(self):\n        self.assertEqual(Pow(2, 3), 8)\n        self.assertEqual(Pow(2, -3), S.Rational(1, 8))\n        self.assertEqual(Pow(2, S.Half), sqrt(2))\n\n    def test_as_base_exp(self):\n        self.assertEqual(Pow(S.Half, 2, evaluate=False).as_base_exp(), (2, -2))\n        self.assertEqual(Pow(2, 3, evaluate=False).as_base_exp(), (2, 3))\n\n    def test_eval_is_even(self):\n        self.assertTrue(Pow(2, 3)._eval_is_even())\n        self.assertFalse(Pow(3, 2)._eval_is_even())\n\n    # Add more test methods for other functions in Pow class\n"], "sample_620": ["\nimport unittest\nfrom typing import Iterable\n\nimport pandas as pd\nimport xarray as xr\nfrom xarray import DataArray, Dataset\nfrom xarray.core import concat\nfrom xarray.core.merge import merge_attrs\nfrom xarray.core.variable import concat as concat_vars\n\nclass TestConcat(unittest.TestCase):\n    def setUp(self):\n        self.da = DataArray(\n            data=[[0, 1, 2], [3, 4, 5]],\n            dims=(\"x\", \"y\"),\n            coords={\"x\": [\"a\", \"b\"], \"y\": [10, 20, 30]},\n        )\n        self.ds = self.da.to_dataset(name=\"var\")\n\n    def test_dataarray_concat(self):\n        da1 = self.da.isel(x=0)\n        da2 = self.da.isel(x=1)\n        result = concat._dataarray_concat([da1, da2], \"x\", \"all\", \"different\", \"equals\", None)\n        xr.testing.assert_equal(result, self.da)\n\n    def test_dataset_concat(self):\n        ds1 = self.ds.isel(x=0)\n        ds2 = self.ds.isel(x=1)\n        result = concat._dataset_concat([ds1, ds2], \"x\", \"all\", \"different\", \"equals\", None)\n        xr.testing.assert_equal(result, self.ds)\n\n    def test_calc_concat_dim_index(self):\n        dim, index = concat._calc_concat_dim_index(\"new_dim\")\n        self.assertEqual(dim, \"new_dim\")\n        self.assertIsNone(index)\n\n    def test_calc_concat_over(self):\n        # Add test cases for _calc_concat_over\n        pass\n\n    def test_parse_datasets(self):\n        # Add test cases for _parse_datasets\n        pass\n\n    def test_merge_attrs(self):\n        attrs1 = {\"a\": 1, \"b\": 2}\n        attrs2 = {\"b\": 2, \"c\": 3}\n        result = merge_attrs([attrs1, attrs2], \"override\")\n        self.assertEqual(result, {\"a\": 1, \"b\": 2, \"c\": 3})\n\n    def test_concat_vars(self):\n        # Add test cases for concat_vars\n        pass\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_781": ["\nimport unittest\nimport numpy as np\nfrom sklearn.model_selection._split import KFold, StratifiedKFold, GroupKFold, LeaveOneOut, LeavePOut, ShuffleSplit, GroupShuffleSplit, StratifiedShuffleSplit, PredefinedSplit, train_test_split\n\nclass TestSplitMethods(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n        self.y = np.array([0, 1, 0, 1])\n        self.groups = np.array([1, 1, 2, 2])\n\n    def test_kfold_split(self):\n        kfold = KFold(n_splits=2)\n        splits = list(kfold.split(self.X))\n        self.assertEqual(len(splits), 2)\n\n    def test_stratified_kfold_split(self):\n        skf = StratifiedKFold(n_splits=2)\n        splits = list(skf.split(self.X, self.y))\n        self.assertEqual(len(splits), 2)\n\n    def test_group_kfold_split(self):\n        gkf = GroupKFold(n_splits=2)\n        splits = list(gkf.split(self.X, self.y, self.groups))\n        self.assertEqual(len(splits), 2)\n\n    def test_leave_one_out_split(self):\n        loo = LeaveOneOut()\n        splits = list(loo.split(self.X))\n        self.assertEqual(len(splits), 4)\n\n    def test_leave_p_out_split(self):\n        lpo = LeavePOut(p=2)\n        splits = list(lpo.split(self.X))\n        self.assertEqual(len(splits), 6)\n\n    def test_shuffle_split(self):\n        ss = ShuffleSplit(n_splits=2, test_size=0.5)\n        splits = list(ss.split(self.X))\n        self.assertEqual(len(splits), 2)\n\n    def test_group_shuffle_split(self):\n        gss = GroupShuffleSplit(n_splits=2, test_size=0.5)\n        splits = list(gss.split(self.X, self.y, self.groups))\n        self.assertEqual(len(splits), 2)\n\n    def test_stratified_shuffle_split(self):\n        sss = StratifiedShuffleSplit(n_splits=2, test_size=0.5)\n        splits = list(sss.split(self.X, self.y))\n        self.assertEqual(len(splits), 2)\n\n    def test_predefined_split(self):\n        test_fold = [0, 1, -1, 1]\n        ps = PredefinedSplit(test_fold)\n        splits = list(ps.split())\n        self.assertEqual(len(splits), 2)\n\n    def test_train_test_split(self):\n        X_train, X_test, y_train, y_test = train_test_split(self.X, self.y, test_size=0.33, random_state=42)\n        self.assertEqual(len(X_train), 3)\n        self.assertEqual(len(X_test), 1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_212": ["\nimport unittest\nfrom unittest.mock import MagicMock, mock_open, patch\nfrom django.core.files.base import ContentFile, File\nfrom django.core.files.storage import default_storage\nfrom django.db.models import Model\nfrom django.db.models.fields.files import FileField, ImageField\n\nclass TestFileField(unittest.TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            test_file = FileField(upload_to='test/')\n\n        self.TestModel = TestModel\n        self.instance = TestModel()\n\n    def test_file_save(self):\n        content = ContentFile(b'test content')\n        self.instance.test_file.save('test.txt', content)\n        self.assertTrue(self.instance.test_file.name.startswith('test/'))\n\n    def test_file_delete(self):\n        content = ContentFile(b'test content')\n        self.instance.test_file.save('test.txt', content)\n        self.instance.test_file.delete()\n        self.assertIsNone(self.instance.test_file.name)\n\n    def test_file_open(self):\n        content = b'test content'\n        m = mock_open(read_data=content)\n        with patch('django.core.files.storage.default_storage.open', m, create=True):\n            self.instance.test_file.name = 'test.txt'\n            with self.instance.test_file.open() as f:\n                self.assertEqual(f.read(), content)\n\n    def test_file_url(self):\n        self.instance.test_file.name = 'test.txt'\n        with patch('django.core.files.storage.default_storage.url', return_value='/test.txt'):\n            self.assertEqual(self.instance.test_file.url, '/test.txt')\n\nclass TestImageField(unittest.TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            test_image = ImageField(upload_to='test/')\n\n        self.TestModel = TestModel\n        self.instance = TestModel()\n\n    def test_image_save(self):\n        content = ContentFile(b'test content')\n        self.instance.test_image.save('test.jpg', content)\n        self.assertTrue(self.instance.test_image.name.startswith('test/'))\n\n    def test_image_delete(self):\n        content = ContentFile(b'test content')\n        self.instance.test_image.save('test.jpg', content)\n        self.instance.test_image.delete()\n        self.assertIsNone(self.instance.test_image.name)\n\n    def test_image_dimensions(self):\n        with patch('PIL.Image.open') as mock_open:\n            mock_open.return_value.size = (100, 200)\n            content = ContentFile(b'test content')\n            self.instance.test_image.save('test.jpg', content)\n            self.assertEqual(self.instance.test_image.width, 100)\n            self.assertEqual(self.instance.test_image.height, 200)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_345": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom pathlib import Path\nfrom django.utils import autoreload\nfrom django.utils.autoreload import WatchmanUnavailable\n\nclass TestAutoreload(unittest.TestCase):\n    @patch('django.utils.autoreload.WatchmanReloader')\n    def test_get_reloader_watchman_available(self, mock_watchman):\n        mock_watchman.check_availability.return_value = True\n        reloader = autoreload.get_reloader()\n        self.assertIsInstance(reloader, autoreload.WatchmanReloader)\n\n    @patch('django.utils.autoreload.WatchmanReloader')\n    def test_get_reloader_watchman_unavailable(self, mock_watchman):\n        mock_watchman.check_availability.side_effect = WatchmanUnavailable()\n        reloader = autoreload.get_reloader()\n        self.assertIsInstance(reloader, autoreload.StatReloader)\n\n    @patch('django.utils.autoreload.sys.modules')\n    def test_iter_all_python_module_files(self, mock_modules):\n        mock_modules.__getitem__.side_effect = lambda x: Mock(__spec__=Mock(has_location=True, loader=Mock(archive=None), origin='origin'))\n        files = autoreload.iter_all_python_module_files()\n        self.assertIn(Path('origin'), files)\n\n    # Add more tests for other functions...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_219": ["\nfrom unittest import TestCase\nfrom django.db.models import F, Q, When, Case, Value, Sum\nfrom django.db.models.expressions import Expression, CombinedExpression, DurationExpression, TemporalSubtraction, F, Func, Value, RawSQL, Star, Random, Col, Ref, ExpressionList, ExpressionWrapper, When, Case, Subquery, Exists, OrderBy, Window, WindowFrame, RowRange, ValueRange\n\nclass TestExpressionMethods(TestCase):\n\n    def setUp(self):\n        # Initialize any necessary objects for the tests\n        pass\n\n    def test_combined_expression(self):\n        expr = CombinedExpression(F('field1'), '+', F('field2'))\n        self.assertEqual(str(expr), \"field1 + field2\")\n\n    def test_duration_expression(self):\n        expr = DurationExpression(F('field1'), '-', F('field2'))\n        self.assertIsInstance(expr, CombinedExpression)\n\n    def test_temporal_subtraction(self):\n        expr = TemporalSubtraction(F('field1'), F('field2'))\n        self.assertIsInstance(expr, CombinedExpression)\n\n    def test_f_expression(self):\n        expr = F('field1')\n        self.assertEqual(str(expr), \"field1\")\n\n    def test_func_expression(self):\n        expr = Func(F('field1'), function='SUM')\n        self.assertEqual(str(expr), \"SUM(field1)\")\n\n    def test_value_expression(self):\n        expr = Value(10)\n        self.assertEqual(str(expr), \"10\")\n\n    # More tests can be added for other Expression classes\n\n"], "sample_1185": ["\nimport unittest\nfrom sympy import symbols, sin, cos, sqrt, exp\nfrom sympy.solvers.decompogen import decompogen, compogen\n\nclass TestDecompogen(unittest.TestCase):\n    def setUp(self):\n        self.x = symbols('x')\n\n    def test_decompogen_simple_functions(self):\n        self.assertEqual(decompogen(sin(cos(self.x)), self.x), [sin(self.x), cos(self.x)])\n        self.assertEqual(decompogen(exp(self.x), self.x), [exp(self.x)])\n\n    def test_decompogen_min_max_functions(self):\n        self.assertEqual(decompogen(sin(self.x**2) + cos(self.x**2), self.x), [self.x**2, sin(self.x), cos(self.x)])\n\n    def test_decompogen_polynomial(self):\n        self.assertEqual(decompogen(self.x**4 + 2*self.x**3 - self.x - 1, self.x), [self.x**2 - self.x - 1, self.x**2 + self.x])\n\n    def test_compogen_simple_functions(self):\n        self.assertEqual(compogen([sin(self.x), cos(self.x)], self.x), sin(cos(self.x)))\n        self.assertEqual(compogen([exp(self.x)], self.x), exp(self.x))\n\n    def test_compogen_polynomial(self):\n        self.assertEqual(compogen([self.x**2 - self.x - 1, self.x**2 + self.x], self.x), -self.x**2 - self.x + (self.x**2 + self.x)**2 - 1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1189": ["\nimport unittest\nfrom sympy import symbols, sin, cos, Matrix\nfrom sympy.utilities.lambdify import lambdify, implemented_function\nfrom sympy.functions import Function\n\nclass TestLambdify(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n\n    def test_lambdify_simple_expression(self):\n        expr = self.x**2\n        f = lambdify(self.x, expr, 'numpy')\n        self.assertEqual(f(2), 4)\n\n    def test_lambdify_multiple_variables(self):\n        expr = self.x + self.y\n        f = lambdify((self.x, self.y), expr, 'numpy')\n        self.assertEqual(f(1, 2), 3)\n\n    def test_lambdify_matrix_expression(self):\n        expr = Matrix([self.x, self.x + 1])\n        f = lambdify(self.x, expr, 'numpy')\n        self.assertEqual(f(1).tolist(), [[1], [2]])\n\n    def test_lambdify_with_implemented_function(self):\n        f = implemented_function(Function('f'), lambda x: x+1)\n        func = lambdify(self.x, f(self.x))\n        self.assertEqual(func(4), 5)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_379": ["\nimport unittest\nfrom django.utils.safestring import SafeData, SafeString, mark_safe\n\nclass TestSafeString(unittest.TestCase):\n    def test_safedata_html(self):\n        safe_data = SafeData()\n        self.assertEqual(safe_data.__html__(), safe_data)\n\n    def test_safe_string_addition(self):\n        safe_string1 = SafeString(\"Hello, \")\n        safe_string2 = SafeString(\"World!\")\n        result = safe_string1 + safe_string2\n        self.assertIsInstance(result, SafeString)\n        self.assertEqual(result, \"Hello, World!\")\n\n        unsafe_string = \"Goodbye!\"\n        result = safe_string1 + unsafe_string\n        self.assertNotIsInstance(result, SafeString)\n        self.assertEqual(result, \"Hello, Goodbye!\")\n\n    def test_safe_string_str(self):\n        safe_string = SafeString(\"Hello, World!\")\n        self.assertEqual(str(safe_string), \"Hello, World!\")\n\n    def test_mark_safe_string(self):\n        unsafe_string = \"<script>alert('xss')</script>\"\n        safe_string = mark_safe(unsafe_string)\n        self.assertIsInstance(safe_string, SafeString)\n        self.assertEqual(safe_string, unsafe_string)\n\n    def test_mark_safe_with_decorator(self):\n        @mark_safe\n        def get_safe_string():\n            return \"<p>Hello, World!</p>\"\n\n        safe_string = get_safe_string()\n        self.assertIsInstance(safe_string, SafeString)\n        self.assertEqual(safe_string, \"<p>Hello, World!</p>\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_166": ["\nimport unittest\nfrom unittest import mock\nfrom django.contrib.humanize.templatetags import humanize\nfrom django.utils import translation\n\nclass TestHumanize(unittest.TestCase):\n    def setUp(self):\n        # Setting up the translation environment\n        translation.activate('en')\n\n    def test_ordinal(self):\n        self.assertEqual(humanize.ordinal(1), '1st')\n        self.assertEqual(humanize.ordinal(2), '2nd')\n        self.assertEqual(humanize.ordinal(3), '3rd')\n        self.assertEqual(humanize.ordinal(4), '4th')\n        self.assertEqual(humanize.ordinal(11), '11th')\n        self.assertEqual(humanize.ordinal(12), '12th')\n        self.assertEqual(humanize.ordinal(13), '13th')\n\n    def test_intcomma(self):\n        self.assertEqual(humanize.intcomma(1000), '1,000')\n        self.assertEqual(humanize.intcomma(1000000), '1,000,000')\n\n    def test_intword(self):\n        self.assertEqual(humanize.intword(1000000), '1.0 million')\n        self.assertEqual(humanize.intword(1200000), '1.2 million')\n        self.assertEqual(humanize.intword(1200000000), '1.2 billion')\n\n    @mock.patch('django.contrib.humanize.templatetags.humanize.datetime')\n    def test_naturalday(self, mock_datetime):\n        mock_datetime.now.return_value = datetime(2022, 1, 1)\n        self.assertEqual(humanize.naturalday(datetime(2021, 12, 31)), 'yesterday')\n        self.assertEqual(humanize.naturalday(datetime(2022, 1, 1)), 'today')\n        self.assertEqual(humanize.naturalday(datetime(2022, 1, 2)), 'tomorrow')\n\n    def test_naturaltime(self):\n        now = datetime.now()\n        self.assertEqual(humanize.naturaltime(now), 'now')\n        self.assertEqual(humanize.naturaltime(now + timedelta(seconds=5)), 'a few seconds from now')\n        self.assertEqual(humanize.naturaltime(now - timedelta(seconds=5)), 'a few seconds ago')\n\n    def test_apnumber(self):\n        self.assertEqual(humanize.apnumber(1), 'one')\n        self.assertEqual(humanize.apnumber(5), 'five')\n        self.assertEqual(humanize.apnumber(10), 10)\n"], "sample_421": ["\nfrom datetime import date, datetime, time, timedelta\nfrom decimal import Decimal\nfrom uuid import UUID\nfrom unittest.mock import MagicMock\nfrom django.core.exceptions import FieldError, EmptyResultSet\nfrom django.db import connection\nfrom django.db.models import fields\nfrom django.test import TestCase\nfrom django.db.models.expressions import (\n    Expression, Func, Value, RawSQL, Star, Col, Ref, ExpressionList, OrderByList,\n    ExpressionWrapper, When, Case, Subquery, Exists, OrderBy, Window, RowRange, ValueRange\n)\n\nclass TestExpressions(TestCase):\n    def setUp(self):\n        self.connection = connection\n        self.compiler = MagicMock()\n\n    def test_expression(self):\n        expression = Expression()\n        self.assertEqual(expression.resolve_expression(), expression)\n\n    def test_func(self):\n        func = Func(Value(1), Value(2), function='TEST_FUNC')\n        self.assertEqual(str(func), \"TEST_FUNC(1, 2)\")\n\n    def test_value(self):\n        value = Value(1, output_field=IntegerField())\n        self.assertEqual(value.as_sql(self.compiler, self.connection), (\"%s\", [1]))\n\n    def test_raw_sql(self):\n        raw_sql = RawSQL(\"SELECT * FROM test\", [])\n        self.assertEqual(raw_sql.as_sql(self.compiler, self.connection), (\"(SELECT * FROM test)\", []))\n\n    def test_star(self):\n        star = Star()\n        self.assertEqual(star.as_sql(self.compiler, self.connection), (\"*\", []))\n\n    def test_col(self):\n        col = Col('alias', 'target')\n        self.assertEqual(col.as_sql(self.compiler, self.connection), ('alias.target', []))\n\n    def test_ref(self):\n        ref = Ref('refs', 'source')\n        self.assertEqual(ref.as_sql(self.compiler, self.connection), ('refs', []))\n\n    def test_expression_list(self):\n        expr_list = ExpressionList(Value(1), Value(2))\n        self.assertEqual(str(expr_list), \"1, 2\")\n\n    def test_order_by_list(self):\n        order_by_list = OrderByList(F('field'), '-field2')\n        self.assertEqual(str(order_by_list), \"ORDER BY field DESC, field2 ASC\")\n\n    def test_expression_wrapper(self):\n        expr_wrapper = ExpressionWrapper(Value(1), IntegerField())\n        self.assertEqual(expr_wrapper.as_sql(self.compiler, self.connection), (\"%s\", [1]))\n\n    def test_when(self):\n        when = When(Q(field=1), then=Value(2))\n        self.assertEqual(str(when), \"WHEN <Q: (AND: ('field', 1))> THEN 2\")\n\n    def test_case(self):\n        case = Case(When(Q(field=1), then=Value(2)), default=Value(3))\n        self.assertEqual(str(case), \"CASE WHEN <Q: (AND: ('field', 1))> THEN 2, ELSE 3\")\n\n    def test_subquery(self):\n        subquery = Subquery(Client.objects.filter(name='test'))\n        self.assertEqual(subquery.as_sql(self.compiler, self.connection)[0], \"(SELECT U1.`id` FROM `clients_client` U1 WHERE U1.`name` = test)\")\n\n    def test_exists(self):\n        exists = Exists(Client.objects.filter(name='test'))\n        self.assertEqual(exists.as_sql(self.compiler, self.connection)[0], \"EXISTS(SELECT 1 FROM `clients_client` U0 WHERE U0.`name` = test)\")\n\n    def test_order_by(self):\n        order_by = OrderBy(F('field'))\n        self.assertEqual(order_by.as_sql(self.compiler, self.connection)[0], \"`clients_client`.`field` ASC\")\n\n    def test_window(self):\n        window = Window(F('field'), partition_by=[F('category')], order_by=[F('date')])\n        self.assertEqual(str(window), \"`clients_client`.`field` OVER (PARTITION BY category ORDER BY `clients_client`.`date` ASC)\")\n\n    def test_row_range(self):\n        row_range = RowRange(start=1, end=2)\n        self.assertEqual(str(row_range), \"ROWS BETWEEN 1 PRECEDING AND 2 FOLLOWING\")\n\n    def test_value_range(self):\n        value_range = ValueRange(start=1, end=2)\n        self.assertEqual(str(value_range), \"RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING\")\n"], "sample_855": ["\nimport unittest\nimport numpy as np\nfrom sklearn.model_selection import (\n    KFold, StratifiedKFold, GroupKFold, TimeSeriesSplit,\n    LeaveOneOut, LeaveOneGroupOut, LeavePOut, LeavePGroupsOut,\n    ShuffleSplit, GroupShuffleSplit, StratifiedShuffleSplit,\n    PredefinedSplit, check_cv, train_test_split,\n    RepeatedKFold, RepeatedStratifiedKFold\n)\nfrom sklearn.model_selection._split import _validate_shuffle_split, _build_repr\n\nclass TestSplitFunctions(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\n        self.y = np.array([0, 0, 1, 1, 2, 2])\n        self.groups = np.array([1, 1, 2, 2, 3, 3])\n\n    def test_kfold(self):\n        cv = KFold(n_splits=3)\n        splits = list(cv.split(self.X))\n        self.assertEqual(len(splits), 3)\n\n    def test_stratified_kfold(self):\n        cv = StratifiedKFold(n_splits=3)\n        splits = list(cv.split(self.X, self.y))\n        self.assertEqual(len(splits), 3)\n\n    def test_group_kfold(self):\n        cv = GroupKFold(n_splits=3)\n        splits = list(cv.split(self.X, self.y, self.groups))\n        self.assertEqual(len(splits), 3)\n\n    # Add more tests for TimeSeriesSplit, LeaveOneOut, LeaveOneGroupOut,\n    # LeavePOut, LeavePGroupsOut, ShuffleSplit, GroupShuffleSplit,\n    # StratifiedShuffleSplit, PredefinedSplit, check_cv, train_test_split,\n    # RepeatedKFold, RepeatedStratifiedKFold, _validate_shuffle_split,\n    # and _build_repr functions here\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_13": ["\nimport unittest\nimport numpy as np\nfrom astropy import units as u\nfrom astropy.coordinates import Angle, Latitude, Longitude\n\nclass TestAngle(unittest.TestCase):\n    def setUp(self):\n        self.angle_deg = Angle(10.2345, unit=u.deg)\n        self.angle_hour = Angle('1:2:30.43', unit=u.hourangle)\n        self.angle_str = '1\u00b02\u20323\u2033'\n\n    def test_angle_creation(self):\n        self.assertIsInstance(self.angle_deg, Angle)\n        self.assertIsInstance(self.angle_hour, Angle)\n        self.assertIsInstance(Angle(self.angle_str), Angle)\n\n    def test_angle_value(self):\n        self.assertAlmostEqual(self.angle_deg.value, 10.2345, delta=1e-6)\n        self.assertAlmostEqual(self.angle_hour.value, 1.04178611, delta=1e-6)\n        self.assertAlmostEqual(Angle(self.angle_str).value, 1.03416667, delta=1e-6)\n\n    def test_angle_unit(self):\n        self.assertEqual(self.angle_deg.unit, u.deg)\n        self.assertEqual(self.angle_hour.unit, u.hourangle)\n\n    def test_angle_conversion(self):\n        self.assertAlmostEqual(self.angle_deg.to(u.rad).value, 0.17865312, delta=1e-6)\n        self.assertAlmostEqual(self.angle_hour.to(u.deg).value, 15.62666667, delta=1e-6)\n\n    def test_angle_string_representation(self):\n        self.assertEqual(str(self.angle_deg), \"<Angle 10.2345 deg>\")\n        self.assertEqual(str(self.angle_hour), \"<Angle 1.04178611 hourangle>\")\n        self.assertEqual(str(Angle(self.angle_str)), \"<Angle 1.03416667 deg>\")\n\nclass TestLatitude(unittest.TestCase):\n    def test_latitude_creation(self):\n        self.assertIsInstance(Latitude('45d'), Latitude)\n        with self.assertRaises(ValueError):\n            Latitude('91d')\n\n    def test_latitude_assignment(self):\n        lat = Latitude('45d')\n        lat[0] = '30d'\n        self.assertEqual(lat.value, 30)\n        with self.assertRaises(ValueError):\n            lat[0] = '91d'\n\nclass TestLongitude(unittest.TestCase):\n    def test_longitude_creation(self):\n        self.assertIsInstance(Longitude('120d'), Longitude)\n\n    def test_longitude_wrap_angle(self):\n        lon = Longitude('181d')\n        self.assertEqual(lon.wrap_angle, 360 * u.deg)\n        lon.wrap_angle = 180 * u.deg\n        self.assertEqual(lon.wrap_angle, 180 * u.deg)\n        self.assertAlmostEqual(lon.value, -179)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_523": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nimport matplotlib\nfrom matplotlib.legend import Legend, _parse_legend_args\nfrom matplotlib.lines import Line2D\nfrom matplotlib.patches import Patch\nfrom matplotlib.collections import Collection\nfrom matplotlib.text import Text\n\nclass TestLegendModule(unittest.TestCase):\n    def setUp(self):\n        self.fig = matplotlib.figure.Figure()\n        self.ax = self.fig.add_subplot(111)\n\n    def test_legend_initialization(self):\n        handles = [Line2D([0], [0]), Patch([0, 1, 2, 0], [0, 1, 2, 0])]\n        labels = ['line', 'patch']\n        legend = Legend(self.ax, handles, labels)\n        self.assertEqual(legend.texts, labels)\n        self.assertEqual(legend.legendHandles, handles)\n\n    @patch('matplotlib.legend._parse_legend_args')\n    def test_legend_args_parsing(self, mock_parse):\n        mock_parse.return_value = ([Line2D([0], [0])], ['line'], (), {})\n        self.ax.legend()\n        mock_parse.assert_called_once()\n\n    def test_legend_handles_labels_parsing(self):\n        line = Line2D([0], [0], label='line')\n        patch = Patch([0, 1, 2, 0], [0, 1, 2, 0], label='patch')\n        self.ax.add_artist(line)\n        self.ax.add_artist(patch)\n        handles, labels, _, _ = _parse_legend_args([self.ax])\n        self.assertEqual(handles, [line, patch])\n        self.assertEqual(labels, ['line', 'patch'])\n\n    # Add more tests here...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_68": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.views.debug import (\n    CLEANSED_SUBSTITUTE,\n    CallableSettingWrapper,\n    ExceptionReporter,\n    cleanse_setting,\n    default_urlconf,\n    technical_404_response,\n    technical_500_response,\n)\nfrom django.conf import settings\nfrom django.http import Http404\n\nclass TestDebugViews(unittest.TestCase):\n    @patch('django.views.debug.settings')\n    def test_cleanse_setting(self, mock_settings):\n        mock_settings.API_KEY = 'secret'\n        self.assertEqual(cleanse_setting('API_KEY', mock_settings.API_KEY), CLEANSED_SUBSTITUTE)\n        self.assertEqual(cleanse_setting('NORMAL_KEY', 'normal_value'), 'normal_value')\n\n    @patch('django.views.debug.settings')\n    def test_get_safe_settings(self, mock_settings):\n        mock_settings.API_KEY = 'secret'\n        mock_settings.NORMAL_KEY = 'normal_value'\n        mock_settings.isupper = lambda: True\n        dir(mock_settings).__iter__.return_value = ['API_KEY', 'NORMAL_KEY']\n        safe_settings = get_safe_settings()\n        self.assertEqual(safe_settings['API_KEY'], CLEANSED_SUBSTITUTE)\n        self.assertEqual(safe_settings['NORMAL_KEY'], 'normal_value')\n\n    @patch('django.views.debug.ExceptionReporter')\n    def test_technical_500_response(self, mock_reporter):\n        mock_request = MagicMock()\n        mock_request.is_ajax.return_value = True\n        mock_reporter_instance = mock_reporter.return_value\n        mock_reporter_instance.get_traceback_text.return_value = 'traceback'\n        response = technical_500_response(mock_request, Exception, Exception('Error'), None)\n        self.assertEqual(response.content, b'traceback')\n\n    @patch('django.views.debug.resolve')\n    @patch('django.views.debug.default_urlconf')\n    def test_technical_404_response(self, mock_default_urlconf, mock_resolve):\n        mock_request = MagicMock()\n        mock_request.path_info = '/test/'\n        mock_resolve.side_effect = Http404({'path': '/test/'})\n        response = technical_404_response(mock_request, Http404({'path': '/test/'}))\n        mock_default_urlconf.assert_not_called()\n\n    @patch('django.views.debug.settings')\n    def test_default_urlconf(self, mock_settings):\n        mock_settings.ROOT_URLCONF = 'root_urlconf'\n        mock_request = MagicMock()\n        response = default_urlconf(mock_request)\n        self.assertIn(b'root_urlconf', response.content)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_90": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db import models\nfrom django.forms import ValidationError\nfrom django.forms.models import (\n    ModelForm, modelform_factory, BaseModelFormSet, modelformset_factory,\n    BaseInlineFormSet, inlineformset_factory, ModelChoiceField, ModelMultipleChoiceField\n)\n\nclass TestModel(models.Model):\n    test_field = models.CharField(max_length=10)\n\nclass TestModelForm(ModelForm):\n    class Meta:\n        model = TestModel\n        fields = ['test_field']\n\nclass TestModelFormSet(BaseModelFormSet):\n    model = TestModel\n\nclass TestInlineFormSet(BaseInlineFormSet):\n    model = TestModel\n    fk = models.ForeignKey(TestModel, on_delete=models.CASCADE)\n\nclass TestModelFormMethods(unittest.TestCase):\n    def test_model_to_dict(self):\n        obj = TestModel(test_field='test')\n        data = model_to_dict(obj)\n        self.assertEqual(data, {'test_field': 'test'})\n\n    def test_fields_for_model(self):\n        fields = fields_for_model(TestModel)\n        self.assertTrue('test_field' in fields)\n\n    def test_modelform_factory(self):\n        Form = modelform_factory(TestModel, fields=['test_field'])\n        form = Form({'test_field': 'test'})\n        self.assertTrue(form.is_valid())\n\n    def test_modelformset_factory(self):\n        FormSet = modelformset_factory(TestModel, fields=['test_field'])\n        formset = FormSet(data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '0', 'form-0-test_field': 'test'})\n        self.assertTrue(formset.is_valid())\n\n    def test_inlineformset_factory(self):\n        FormSet = inlineformset_factory(TestModel, TestModel, fields=['test_field'])\n        formset = FormSet(instance=TestModel())\n        self.assertEqual(len(formset.forms), 0)\n\nclass TestModelFormSetMethods(unittest.TestCase):\n    def test_save(self):\n        formset = TestModelFormSet(data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '0', 'form-0-test_field': 'test'})\n        formset.is_valid()\n        instances = formset.save()\n        self.assertEqual(len(instances), 1)\n        self.assertEqual(instances[0].test_field, 'test')\n\nclass TestInlineFormSetMethods(unittest.TestCase):\n    def test_save(self):\n        parent = TestModel.objects.create(test_field='parent')\n        formset = TestInlineFormSet(instance=parent, data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '0', 'form-0-test_field': 'child'})\n        formset.is_valid()\n        instances = formset.save()\n        self.assertEqual(len(instances), 1)\n        self.assertEqual(instances[0].test_field, 'child')\n        self.assertEqual(instances[0].testmodel_set.first().test_field, 'child')\n\nclass TestModelChoiceField(unittest.TestCase):\n    def test_to_python(self):\n        queryset = TestModel.objects.all()\n        field = ModelChoiceField(queryset)\n        obj = TestModel.objects.create(test_field='test')\n        value = field.to_python(obj.pk)\n        self.assertEqual(value, obj)\n\nclass TestModelMultipleChoiceField(unittest.TestCase):\n    def test_to_python(self):\n        queryset = TestModel.objects.all()\n        field = ModelMultipleChoiceField(queryset)\n        obj1 = TestModel.objects.create(test_field='test1')\n        obj2 = TestModel.objects.create(test_field='test2')\n        values = field.to_python([obj1.pk, obj2.pk])\n        self.assertEqual(set(values), {obj1, obj2})\n"], "sample_381": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.state import ProjectState\nfrom django.db.migrations.questioner import MigrationQuestioner\n\nclass TestMigrationAutodetector(unittest.TestCase):\n    def setUp(self):\n        self.from_state = MagicMock(spec=ProjectState)\n        self.to_state = MagicMock(spec=ProjectState)\n        self.questioner = MagicMock(spec=MigrationQuestioner)\n        self.detector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n\n    def test_init(self):\n        self.assertEqual(self.detector.from_state, self.from_state)\n        self.assertEqual(self.detector.to_state, self.to_state)\n        self.assertEqual(self.detector.questioner, self.questioner)\n\n    def test_generate_created_models(self):\n        self.detector.new_model_keys = {('test_app', 'TestModel')}\n        self.detector.old_model_keys = set()\n        self.to_state.models = {\n            ('test_app', 'TestModel'): MagicMock(\n                name='TestModel',\n                fields={},\n                options={},\n                bases=[],\n                managers=[]\n            )\n        }\n        self.detector.generate_created_models()\n        self.assertTrue(('test_app', 'TestModel') in self.detector.generated_operations)\n\n    def test_parse_number(self):\n        self.assertEqual(MigrationAutodetector.parse_number('0001_initial'), 1)\n        self.assertEqual(MigrationAutodetector.parse_number('0002_squashed_0004_second'), 4)\n        self.assertEqual(MigrationAutodetector.parse_number('initial'), None)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_373": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.urls import URLPattern, URLResolver, Resolver404\nfrom django.db import models\nfrom django.contrib.admindocs import views\n\nclass TestAdminDocsViews(unittest.TestCase):\n\n    def setUp(self):\n        self.view = views.ViewDetailView()\n\n    def test_get_view_func(self):\n        view = \"django.contrib.auth.views.login\"\n        view_func = self.view._get_view_func(view)\n        self.assertIsNotNone(view_func)\n\n    def test_get_return_data_type(self):\n        self.assertEqual(views.get_return_data_type('get_list'), 'List')\n        self.assertEqual(views.get_return_data_type('get_count'), 'Integer')\n        self.assertEqual(views.get_return_data_type('get_item'), '')\n\n    def test_extract_views_from_urlpatterns(self):\n        url_patterns = [\n            URLPattern(r'^test/$', self.view.dispatch, name='test'),\n        ]\n        result = views.extract_views_from_urlpatterns(url_patterns)\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][0], self.view.dispatch)\n\n    def test_simplify_regex(self):\n        pattern = r'^(?P<sport_slug>\\w+)/athletes/(?P<athlete_slug>\\w+)/$'\n        self.assertEqual(views.simplify_regex(pattern), '/<sport_slug>/athletes/<athlete_slug>/')\n\n    @patch('django.contrib.admindocs.views.import_module')\n    @patch('django.contrib.admindocs.views.get_mod_func')\n    def test_get_context_data(self, mock_get_mod_func, mock_import_module):\n        mock_get_mod_func.return_value = ('test_module', 'test_func')\n        mock_import_module.return_value = MagicMock(test_func=MagicMock(__doc__=\"Test docstring\"))\n        self.view.kwargs = {'view': 'test_module.test_func'}\n        context = self.view.get_context_data()\n        self.assertEqual(context['summary'], 'Test docstring')\n\n    @patch('django.contrib.admindocs.views.apps.get_app_config')\n    @patch('django.contrib.admindocs.views.apps.get_models')\n    def test_model_index_view_get_context_data(self, mock_get_models, mock_get_app_config):\n        mock_get_models.return_value = [MagicMock(_meta=MagicMock())]\n        view = views.ModelIndexView()\n        context = view.get_context_data()\n        self.assertEqual(len(context['models']), 1)\n\n    @patch('django.contrib.admindocs.views.apps.get_app_config')\n    def test_model_detail_view_get_context_data(self, mock_get_app_config):\n        mock_get_app_config.return_value = MagicMock(get_model=MagicMock(return_value=MagicMock(_meta=MagicMock())))\n        view = views.ModelDetailView()\n        view.kwargs = {'app_label': 'test_app', 'model_name': 'TestModel'}\n        context = view.get_context_data()\n        self.assertEqual(context['name'], 'test_app.TestModel')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_261": ["\nimport unittest\nimport datetime\nfrom django.utils.dateparse import parse_date, parse_datetime, parse_duration, parse_time\n\nclass TestDateParse(unittest.TestCase):\n    def test_parse_date(self):\n        self.assertEqual(parse_date('2020-02-29'), datetime.date(2020, 2, 29))\n        with self.assertRaises(ValueError):\n            parse_date('2020-02-30')  # non-existent date\n        self.assertIsNone(parse_date('2020-02-'))  # incorrect format\n\n    def test_parse_time(self):\n        self.assertEqual(parse_time('12:34:56.789'), datetime.time(12, 34, 56, 789000))\n        self.assertIsNone(parse_time('12:34:56Z'))  # time zone offset not supported\n        with self.assertRaises(ValueError):\n            parse_time('25:34:56')  # non-existent time\n\n    def test_parse_datetime(self):\n        self.assertEqual(parse_datetime('2020-02-29T12:34:56.789Z'), datetime.datetime(2020, 2, 29, 12, 34, 56, 789000, tzinfo=datetime.timezone.utc))\n        self.assertEqual(parse_datetime('2020-02-29T12:34:56.789+05:00'), datetime.datetime(2020, 2, 29, 12, 34, 56, 789000, tzinfo=datetime.timezone(datetime.timedelta(seconds=18000))))\n        with self.assertRaises(ValueError):\n            parse_datetime('2020-02-30T12:34:56')  # non-existent datetime\n\n    def test_parse_duration(self):\n        self.assertEqual(parse_duration('1 12:34:56.789'), datetime.timedelta(days=1, seconds=45296, microseconds=789000))\n        self.assertEqual(parse_duration('P1DT12H34M56.789S'), datetime.timedelta(days=1, seconds=45296, microseconds=789000))\n        self.assertEqual(parse_duration('1 12:34:56.789'), parse_duration('P1DT12H34M56.789S'))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_306": ["\nimport unittest\nfrom datetime import date, time, datetime, timedelta\nfrom django.utils.dateparse import parse_date, parse_datetime, parse_duration, parse_time\nfrom django.utils.timezone import utc, get_fixed_timezone\n\nclass TestDateParse(unittest.TestCase):\n    def test_parse_date(self):\n        self.assertEqual(parse_date('2022-01-01'), date(2022, 1, 1))\n        self.assertIsNone(parse_date('2022-02-30'))\n        self.assertIsNone(parse_date('invalid'))\n\n    def test_parse_time(self):\n        self.assertEqual(parse_time('12:34'), time(12, 34))\n        self.assertEqual(parse_time('12:34:56'), time(12, 34, 56))\n        self.assertEqual(parse_time('12:34:56.789'), time(12, 34, 56, 789000))\n        self.assertIsNone(parse_time('12:34:60'))\n        self.assertIsNone(parse_time('12:60'))\n        self.assertIsNone(parse_time('invalid'))\n        self.assertIsNone(parse_time('12:34Z'))\n\n    def test_parse_datetime(self):\n        self.assertEqual(parse_datetime('2022-01-01 12:34:56Z'), datetime(2022, 1, 1, 12, 34, 56, tzinfo=utc))\n        self.assertEqual(parse_datetime('2022-01-01 12:34:56+05:00'), datetime(2022, 1, 1, 12, 34, 56, tzinfo=get_fixed_timezone(300)))\n        self.assertEqual(parse_datetime('2022-01-01 12:34:56-05:00'), datetime(2022, 1, 1, 12, 34, 56, tzinfo=get_fixed_timezone(-300)))\n        self.assertIsNone(parse_datetime('2022-01-01 12:34:60Z'))\n        self.assertIsNone(parse_datetime('invalid'))\n\n    def test_parse_duration(self):\n        self.assertEqual(parse_duration('3 days 04:05:06'), timedelta(days=3, hours=4, minutes=5, seconds=6))\n        self.assertEqual(parse_duration('-3 days 04:05:06'), timedelta(days=-3, hours=4, minutes=5, seconds=6))\n        self.assertEqual(parse_duration('P3DT4H5M6S'), timedelta(days=3, hours=4, minutes=5, seconds=6))\n        self.assertEqual(parse_duration('-P3DT4H5M6S'), timedelta(days=-3, hours=4, minutes=5, seconds=6))\n        self.assertEqual(parse_duration('4:05:06'), timedelta(hours=4, minutes=5, seconds=6))\n        self.assertEqual(parse_duration('-4:05:06'), timedelta(hours=-4, minutes=-5, seconds=-6))\n        self.assertIsNone(parse_duration('invalid'))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1104": ["\nimport unittest\nfrom sympy import Symbol, S, expand_multinomial, expand_mul, Add, Mul, Pow, symbols, exp, log, O, ceiling, powsimp, collect\nfrom sympy.core.power import isqrt, integer_nthroot, integer_log, Pow\n\nclass TestPowerFunctions(unittest.TestCase):\n\n    def test_isqrt(self):\n        self.assertEqual(isqrt(16), 4)\n        self.assertEqual(isqrt(26), 5)\n        self.assertEqual(isqrt(0), 0)\n        with self.assertRaises(ValueError):\n            isqrt(-1)\n\n    def test_integer_nthroot(self):\n        self.assertEqual(integer_nthroot(16, 2), (4, True))\n        self.assertEqual(integer_nthroot(26, 2), (5, False))\n        with self.assertRaises(ValueError):\n            integer_nthroot(-1, 2)\n        with self.assertRaises(ValueError):\n            integer_nthroot(16, 0)\n\n    def test_integer_log(self):\n        self.assertEqual(integer_log(125, 5), (3, True))\n        self.assertEqual(integer_log(17, 9), (1, False))\n        with self.assertRaises(ValueError):\n            integer_log(1, 1)\n        with self.assertRaises(ValueError):\n            integer_log(0, 2)\n\nclass TestPowClass(unittest.TestCase):\n\n    def test_eval_expand_power_exp(self):\n        x = Symbol('x')\n        self.assertEqual((x**(2+3))._eval_expand_power_exp(), x**2 * x**3)\n\n    def test_eval_expand_power_base(self):\n        x, y = symbols('x y')\n        self.assertEqual(((x*y)**3)._eval_expand_power_base(), x**3 * y**3)\n\n    def test_eval_expand_multinomial(self):\n        x, y = symbols('x y')\n        self.assertEqual(expand_multinomial((x + y)**3), x**3 + 3*x**2*y + 3*x*y**2 + y**3)\n\n    def test_as_real_imag(self):\n        x = Symbol('x', real=True)\n        self.assertEqual((x**2).as_real_imag(), (x**2, 0))\n\n    def test_eval_nseries(self):\n        x = Symbol('x')\n        self.assertEqual((x**2)._eval_nseries(x, 5, logx=log(x)), x**2 + O(x**5, x))\n\n    def test_eval_as_leading_term(self):\n        x = Symbol('x')\n        self.assertEqual((x**2 + x)._eval_as_leading_term(x), x**2)\n\n    def test_as_content_primitive(self):\n        x = Symbol('x', positive=True)\n        self.assertEqual((2*x**3).as_content_primitive(), (2, x**3))\n\n    def test_is_constant(self):\n        x = Symbol('x')\n        self.assertEqual((x**2).is_constant(x), False)\n\n    def test_eval_difference_delta(self):\n        x = Symbol('x')\n        self.assertEqual((x**2)._eval_difference_delta(x, 1), (x + 1)**2 - x**2)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_411": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom io import StringIO\nimport sys\nimport argparse\nfrom django.core.management import base\n\nclass TestBaseCommand(unittest.TestCase):\n    def setUp(self):\n        self.command = base.BaseCommand()\n\n    def test_init(self):\n        with self.assertRaises(base.CommandError):\n            base.BaseCommand(no_color=True, force_color=True)\n\n    def test_create_parser(self):\n        parser = self.command.create_parser('prog', 'subcommand')\n        self.assertIsInstance(parser, base.CommandParser)\n\n    @patch('sys.argv', ['prog', 'subcommand', '--version'])\n    def test_run_from_argv_version(self):\n        with self.assertRaises(SystemExit):\n            self.command.run_from_argv(sys.argv)\n\n    @patch('sys.argv', ['prog', 'subcommand', '--traceback'])\n    def test_run_from_argv_traceback(self):\n        with self.assertRaises(SystemExit):\n            self.command.run_from_argv(sys.argv)\n\n    def test_execute_color_options(self):\n        with self.assertRaises(base.CommandError):\n            self.command.execute(force_color=True, no_color=True)\n\n    def test_check(self):\n        with patch('django.core.checks.run_checks', return_value=[]):\n            self.command.check()\n        with patch('django.core.checks.run_checks', return_value=[Mock(level=50, is_serious=Mock(return_value=True), is_silenced=Mock(return_value=False))]):\n            with self.assertRaises(base.SystemCheckError):\n                self.command.check()\n\n    def test_check_migrations(self):\n        with patch('django.db.migrations.executor.MigrationExecutor') as MockExecutor:\n            self.command.check_migrations()\n            MockExecutor.assert_called_once()\n\n    def test_handle(self):\n        with self.assertRaises(NotImplementedError):\n            self.command.handle()\n\nclass TestAppCommand(unittest.TestCase):\n    def setUp(self):\n        self.command = base.AppCommand()\n\n    def test_handle(self):\n        with patch('django.apps.apps.get_app_config') as MockGetAppConfig:\n            MockGetAppConfig.return_value = Mock()\n            self.command.handle_app_config = Mock()\n            self.command.handle('app_label')\n            MockGetAppConfig.assert_called_once_with('app_label')\n            self.command.handle_app_config.assert_called_once()\n\nclass TestLabelCommand(unittest.TestCase):\n    def setUp(self):\n        self.command = base.LabelCommand()\n\n    def test_handle(self):\n        self.command.handle_label = Mock()\n        self.command.handle('label')\n        self.command.handle_label.assert_called_once_with('label')\n"], "sample_1168": ["\nimport unittest\nfrom sympy.utilities.iterables import uniq, rotate_left, rotate_right, multiset_partitions, partitions, ordered_partitions\n\nclass TestIterables(unittest.TestCase):\n\n    def test_uniq(self):\n        self.assertEqual(list(uniq([1, 2, 2, 3, 3, 3, 4, 5, 5])), [1, 2, 3, 4, 5])\n\n    def test_rotate_left(self):\n        self.assertEqual(rotate_left([1, 2, 3, 4, 5], 2), [3, 4, 5, 1, 2])\n\n    def test_rotate_right(self):\n        self.assertEqual(rotate_right([1, 2, 3, 4, 5], 2), [4, 5, 1, 2, 3])\n\n    def test_multiset_partitions(self):\n        self.assertEqual(len(list(multiset_partitions([1, 2, 2, 3], 2))), 3)\n\n    def test_partitions(self):\n        self.assertEqual(len(list(partitions(5))), 7)\n\n    def test_ordered_partitions(self):\n        self.assertEqual(len(list(ordered_partitions(5))), 15)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_815": ["\nimport unittest\nimport numpy as np\nfrom sklearn.feature_selection.mutual_info_ import mutual_info_regression, mutual_info_classif, _compute_mi\nfrom scipy.stats import norm, rankdata\nfrom sklearn.utils._testing import assert_array_almost_equal\nfrom sklearn.utils.testing import assert_greater, assert_raise_message\n\nclass TestMutualInfo(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        self.y_regression = np.array([1.1, 2.2, 3.3])\n        self.y_classification = np.array([0, 1, 2])\n\n    def test_compute_mi_cc(self):\n        mi = _compute_mi(self.X[:, 0], self.X[:, 1], False, False)\n        self.assertGreater(mi, 0)\n\n    def test_compute_mi_cd(self):\n        mi = _compute_mi(self.X[:, 0], self.y_classification, False, True)\n        self.assertGreater(mi, 0)\n\n    def test_mutual_info_regression(self):\n        mi = mutual_info_regression(self.X, self.y_regression)\n        self.assertIsInstance(mi, np.ndarray)\n        self.assertEqual(mi.shape, (self.X.shape[1],))\n\n    def test_mutual_info_classif(self):\n        mi = mutual_info_classif(self.X, self.y_classification)\n        self.assertIsInstance(mi, np.ndarray)\n        self.assertEqual(mi.shape, (self.X.shape[1],))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_42": ["\nimport unittest\nimport numpy as np\nfrom astropy import units as u\nfrom astropy.constants import si\nfrom astropy.units import equivalencies\n\nclass TestEquivalencies(unittest.TestCase):\n    def setUp(self):\n        self.rest_freq = 115.27120 * u.GHz\n        self.measured_freq = 115.2832 * u.GHz\n        self.wavelength = 21.20978 * u.cm\n        self.energy = self.wavelength.to(u.eV, equivalencies=u.spectral())\n        self.beam_area = np.pi * (50 * u.arcsec)**2\n        self.freq = 5 * u.GHz\n        self.temp = 1e6 * u.MJy / u.sr\n        self.cmb_temp = 2.725 * u.K\n\n    def test_parallax(self):\n        dist = 1 / u.arcsecond.to(u.parsec, equivalencies=equivalencies.parallax())\n        self.assertAlmostEqual(dist.value, 1 / np.pi * 180 * 60 * 60, places=4)\n\n    def test_spectral(self):\n        freq = self.wavelength.to(u.Hz, equivalencies=equivalencies.spectral())\n        self.assertAlmostEqual(freq.value, si.c.value / self.wavelength.value, places=4)\n\n    def test_doppler_radio(self):\n        vel = self.measured_freq.to(u.km/u.s, equivalencies=equivalencies.doppler_radio(self.rest_freq))\n        self.assertAlmostEqual(vel.value, -31.209092088877583, places=4)\n\n    def test_brightness_temperature(self):\n        tb = (1 * u.Jy / self.beam_area).to(u.K, equivalencies=equivalencies.brightness_temperature(self.freq))\n        self.assertAlmostEqual(tb.value, 3.526295144567176, places=4)\n\n    def test_thermodynamic_temperature(self):\n        tb = (1. * u.mK).to(u.MJy / u.sr, equivalencies=equivalencies.thermodynamic_temperature(self.freq, self.cmb_temp))\n        self.assertAlmostEqual(tb.value, 0.37993172, places=4)\n\n    def test_temperature(self):\n        temp_c = (100 * u.K).to(u.deg_C, equivalencies=equivalencies.temperature())\n        temp_f = (100 * u.K).to(u.deg_F, equivalencies=equivalencies.temperature())\n        self.assertAlmostEqual(temp_c.value, 100 - 273.15, places=4)\n        self.assertAlmostEqual(temp_f.value, (100 - 273.15) * 1.8 + 32.0, places=4)\n\n    def test_temperature_energy(self):\n        temp_eV = (100 * u.K).to(u.eV, equivalencies=equivalencies.temperature_energy())\n        self.assertAlmostEqual(temp_eV.value, 100 / (si.e.value / si.k_B.value), places=4)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_210": ["\nfrom django.test import Client, RequestFactory, SimpleTestCase\nfrom django.urls import reverse\nfrom django.http import HttpResponse, HttpResponseRedirect, HttpResponsePermanentRedirect\nfrom django.views.generic import RedirectView, TemplateView, View\n\nclass TestDjangoViews(SimpleTestCase):\n    def setUp(self):\n        self.client = Client()\n        self.factory = RequestFactory()\n\n    def test_template_view(self):\n        # Create a request\n        request = self.factory.get('/test-url')\n        # Initialize the view\n        response = TemplateView.as_view(template_name=\"test_template.html\")(request)\n        # Check that the response is a HttpResponse object\n        self.assertIsInstance(response, HttpResponse)\n        # Check that the template used is the one we specified\n        self.assertTemplateUsed(response, \"test_template.html\")\n\n    def test_redirect_view(self):\n        # Create a request\n        request = self.factory.get('/redirect-url')\n        # Initialize the view\n        response = RedirectView.as_view(url=\"/test-url\")(request)\n        # Check that the response is a HttpResponseRedirect object\n        self.assertIsInstance(response, HttpResponseRedirect)\n        # Check that the redirection is to the URL we specified\n        self.assertEqual(response.url, \"/test-url\")\n\n    def test_redirect_view_permanent(self):\n        # Create a request\n        request = self.factory.get('/redirect-url')\n        # Initialize the view\n        response = RedirectView.as_view(url=\"/test-url\", permanent=True)(request)\n        # Check that the response is a HttpResponsePermanentRedirect object\n        self.assertIsInstance(response, HttpResponsePermanentRedirect)\n        # Check that the redirection is to the URL we specified\n        self.assertEqual(response.url, \"/test-url\")\n\n    def test_view_dispatch(self):\n        # Create a request\n        request = self.factory.get('/test-url')\n        # Initialize the view\n        view = View()\n        view.setup(request)\n        # Check that the dispatch method returns a HttpResponseNotAllowed object for invalid methods\n        response = view.dispatch(self.factory.post('/test-url'))\n        self.assertEqual(response.status_code, 405)\n"], "sample_802": ["\nimport unittest\nfrom sklearn.utils.estimator_checks import check_estimator\nfrom sklearn.utils.estimator_checks import check_class_weight_balanced_linear_classifier\nfrom sklearn.utils.estimator_checks import set_random_state\nfrom sklearn.utils.estimator_checks import _set_checking_parameters\nfrom sklearn.utils.estimator_checks import check_estimators_unfitted\nfrom sklearn.utils.estimator_checks import check_fit_score_takes_y\nfrom sklearn.utils.estimator_checks import check_no_attributes_set_in_init\nfrom sklearn.utils.estimator_checks import check_outlier_corruption\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVC\n\nclass TestEstimatorChecks(unittest.TestCase):\n\n    def test_check_estimator(self):\n        estimator = LinearRegression()\n        check_estimator(estimator)\n\n    def test_check_class_weight_balanced_linear_classifier(self):\n        name = \"SVC\"\n        classifier = SVC()\n        check_class_weight_balanced_linear_classifier(name, classifier)\n\n    def test_set_random_state(self):\n        estimator = LinearRegression()\n        set_random_state(estimator, 42)\n\n    def test_set_checking_parameters(self):\n        estimator = LinearRegression()\n        _set_checking_parameters(estimator)\n\n    def test_check_estimators_unfitted(self):\n        estimator = LinearRegression()\n        check_estimators_unfitted(\"LinearRegression\", estimator)\n\n    def test_check_fit_score_takes_y(self):\n        estimator = LinearRegression()\n        check_fit_score_takes_y(\"LinearRegression\", estimator)\n\n    def test_check_no_attributes_set_in_init(self):\n        estimator = LinearRegression()\n        check_no_attributes_set_in_init(\"LinearRegression\", estimator)\n\n    def test_check_outlier_corruption(self):\n        num_outliers = 10\n        expected_outliers = 5\n        decision = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.8, 0.9]\n        check_outlier_corruption(num_outliers, expected_outliers, decision)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_652": ["\nimport pytest\nfrom _pytest import python\nfrom unittest.mock import MagicMock, patch\n\ndef test_pytest_cmdline_main():\n    config = MagicMock()\n    config.option.showfixtures = False\n    config.option.show_fixtures_per_test = False\n    assert python.pytest_cmdline_main(config) == 0\n\n    config.option.showfixtures = True\n    with patch('_pytest.python.showfixtures') as mock_showfixtures:\n        assert python.pytest_cmdline_main(config) == 0\n        mock_showfixtures.assert_called_once_with(config)\n\n    config.option.show_fixtures_per_test = True\n    with patch('_pytest.python.show_fixtures_per_test') as mock_show_fixtures_per_test:\n        assert python.pytest_cmdline_main(config) == 0\n        mock_show_fixtures_per_test.assert_called_once_with(config)\n\ndef test_pytest_generate_tests():\n    metafunc = MagicMock()\n    metafunc.definition.get_closest_marker.return_value = None\n    metafunc.definition.iter_markers.return_value = []\n\n    python.pytest_generate_tests(metafunc)\n    assert not metafunc.parametrize.called\n\n    metafunc.definition.iter_markers.return_value = [MagicMock()]\n    python.pytest_generate_tests(metafunc)\n    metafunc.parametrize.assert_called_once()\n\ndef test_Class_collect():\n    cls = type('DummyClass', (), {})\n    parent = MagicMock()\n    parent.obj.return_value = cls\n    cls_instance = python.Class('DummyClass', parent)\n    with patch('_pytest.python.Class._inject_setup_class_fixture') as mock_setup_class:\n        with patch('_pytest.python.Class._inject_setup_method_fixture') as mock_setup_method:\n            list(cls_instance.collect())\n            mock_setup_class.assert_called_once()\n            mock_setup_method.assert_called_once()\n"], "sample_864": ["\nimport unittest\nfrom sklearn.feature_extraction.text import strip_tags, strip_accents_unicode, strip_accents_ascii, HashingVectorizer, CountVectorizer, TfidfTransformer, TfidfVectorizer, ENGLISH_STOP_WORDS\n\nclass TestTextFunctions(unittest.TestCase):\n    def test_strip_tags(self):\n        text = \"<html><body><p>Hello World</p></body></html>\"\n        self.assertEqual(strip_tags(text), \" Hello World \")\n\n    def test_strip_accents_unicode(self):\n        text = \"r\u00e9sum\u00e9\"\n        self.assertEqual(strip_accents_unicode(text), \"resume\")\n\n    def test_strip_accents_ascii(self):\n        text = \"r\u00e9sum\u00e9\"\n        self.assertEqual(strip_accents_ascii(text), \"resume\")\n\n    def test_hashing_vectorizer(self):\n        corpus = [\"Hello World\", \"I love machine learning\"]\n        vectorizer = HashingVectorizer(n_features=2**4)\n        X = vectorizer.fit_transform(corpus)\n        self.assertEqual(X.shape, (2, 16))\n\n    def test_count_vectorizer(self):\n        corpus = [\"Hello World\", \"I love machine learning\"]\n        vectorizer = CountVectorizer()\n        X = vectorizer.fit_transform(corpus)\n        self.assertEqual(vectorizer.get_feature_names(), ['hello', 'i', 'love', 'machine', 'learning', 'world'])\n\n    def test_tfidf_transformer(self):\n        corpus = [\"Hello World\", \"I love machine learning\"]\n        vectorizer = CountVectorizer()\n        X = vectorizer.fit_transform(corpus)\n        transformer = TfidfTransformer()\n        tfidf = transformer.fit_transform(X)\n        self.assertEqual(tfidf.shape, (2, 6))\n\n    def test_tfidf_vectorizer(self):\n        corpus = [\"Hello World\", \"I love machine learning\"]\n        vectorizer = TfidfVectorizer()\n        X = vectorizer.fit_transform(corpus)\n        self.assertEqual(vectorizer.get_feature_names(), ['hello', 'i', 'love', 'machine', 'learning', 'world'])\n\n    def test_english_stop_words(self):\n        self.assertIn('and', ENGLISH_STOP_WORDS)\n        self.assertIn('the', ENGLISH_STOP_WORDS)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_732": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.coordinate_descent import Lasso, LassoCV, ElasticNet, ElasticNetCV, MultiTaskLasso, MultiTaskElasticNet, MultiTaskElasticNetCV, MultiTaskLassoCV, lasso_path, enet_path\n\nclass TestCoordinateDescent(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        self.y = np.array([1, 2, 3])\n\n    def test_lasso(self):\n        model = Lasso(alpha=0.1)\n        model.fit(self.X, self.y)\n        self.assertEqual(model.coef_.shape, (3,))\n\n    def test_lasso_cv(self):\n        model = LassoCV(alphas=[0.1, 0.2, 0.3], cv=3)\n        model.fit(self.X, self.y)\n        self.assertIn(model.alpha_, [0.1, 0.2, 0.3])\n\n    def test_elastic_net(self):\n        model = ElasticNet(alpha=0.1, l1_ratio=0.5)\n        model.fit(self.X, self.y)\n        self.assertEqual(model.coef_.shape, (3,))\n\n    def test_elastic_net_cv(self):\n        model = ElasticNetCV(l1_ratio=[0.1, 0.5, 0.9], alphas=[0.1, 0.2, 0.3], cv=3)\n        model.fit(self.X, self.y)\n        self.assertIn(model.l1_ratio_, [0.1, 0.5, 0.9])\n        self.assertIn(model.alpha_, [0.1, 0.2, 0.3])\n\n    def test_multi_task_lasso(self):\n        model = MultiTaskLasso(alpha=0.1)\n        model.fit(self.X, np.column_stack((self.y, self.y)))\n        self.assertEqual(model.coef_.shape, (2, 3))\n\n    def test_multi_task_elastic_net(self):\n        model = MultiTaskElasticNet(alpha=0.1, l1_ratio=0.5)\n        model.fit(self.X, np.column_stack((self.y, self.y)))\n        self.assertEqual(model.coef_.shape, (2, 3))\n\n    def test_multi_task_elastic_net_cv(self):\n        model = MultiTaskElasticNetCV(l1_ratio=[0.1, 0.5, 0.9], alphas=[0.1, 0.2, 0.3], cv=3)\n        model.fit(self.X, np.column_stack((self.y, self.y)))\n        self.assertIn(model.l1_ratio_, [0.1, 0.5, 0.9])\n        self.assertIn(model.alpha_, [0.1, 0.2, 0.3])\n\n    def test_multi_task_lasso_cv(self):\n        model = MultiTaskLassoCV(alphas=[0.1, 0.2, 0.3], cv=3)\n        model.fit(self.X, np.column_stack((self.y, self.y)))\n        self.assertIn(model.alpha_, [0.1, 0.2, 0.3])\n\n    def test_lasso_path(self):\n        alphas, coefs, _ = lasso_path(self.X, self.y)\n        self.assertEqual(coefs.shape, (3, len(alphas)))\n\n    def test_enet_path(self):\n        alphas, coefs, _ = enet_path(self.X, self.y, l1_ratio=0.5)\n        self.assertEqual(coefs.shape, (3, len(alphas)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_516": ["\nimport unittest\nfrom unittest.mock import patch, mock_open, MagicMock\nimport io\nfrom matplotlib.backends.backend_pdf import PdfFile, RendererPdf, GraphicsContextPdf, PdfPages, FigureCanvasPdf\nfrom matplotlib.figure import Figure\nfrom matplotlib.path import Path\nimport numpy as np\n\nclass TestPdfFile(unittest.TestCase):\n    def setUp(self):\n        self.pdf_file = PdfFile(io.BytesIO())\n\n    def test_newPage(self):\n        self.pdf_file.newPage(6, 4)\n        self.assertEqual(self.pdf_file.width, 6)\n        self.assertEqual(self.pdf_file.height, 4)\n\n    # Add more tests for other methods in PdfFile\n\nclass TestRendererPdf(unittest.TestCase):\n    def setUp(self):\n        self.file = MagicMock()\n        self.renderer = RendererPdf(self.file, 72, 4, 6)\n\n    def test_check_gc(self):\n        gc = MagicMock()\n        self.renderer.check_gc(gc)\n        gc.delta.assert_called_once()\n\n    # Add more tests for other methods in RendererPdf\n\nclass TestGraphicsContextPdf(unittest.TestCase):\n    def setUp(self):\n        self.file = MagicMock()\n        self.gc = GraphicsContextPdf(self.file)\n\n    def test_stroke(self):\n        self.gc._linewidth = 2\n        self.gc._alpha = 1\n        self.gc._rgb = (0, 0, 0)\n        self.assertTrue(self.gc.stroke())\n\n    # Add more tests for other methods in GraphicsContextPdf\n\nclass TestPdfPages(unittest.TestCase):\n    def setUp(self):\n        self.pdf_pages = PdfPages(io.BytesIO())\n\n    def test_savefig(self):\n        fig = Figure()\n        self.pdf_pages.savefig(fig)\n        self.assertIsNotNone(self.pdf_pages._file)\n\n    # Add more tests for other methods in PdfPages\n\nclass TestFigureCanvasPdf(unittest.TestCase):\n    def setUp(self):\n        self.fig = Figure()\n        self.canvas = FigureCanvasPdf(self.fig)\n\n    def test_print_pdf(self):\n        with patch('matplotlib.backends.backend_pdf.PdfFile', autospec=True) as mock_pdf_file:\n            self.canvas.print_pdf(io.BytesIO())\n            mock_pdf_file.assert_called_once()\n\n    # Add more tests for other methods in FigureCanvasPdf\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_287": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.contrib.admin import checks\nfrom django.core import checks as django_checks\nfrom django.db import models\n\nclass TestBaseModelAdminChecks(unittest.TestCase):\n\n    def setUp(self):\n        self.base_model_admin_checks = checks.BaseModelAdminChecks()\n        self.admin_obj = MagicMock()\n        self.admin_obj.model = models.Model\n        self.admin_obj.model._meta.get_field = MagicMock(side_effect=models.FieldDoesNotExist)\n\n    def test_check_autocomplete_fields_type(self):\n        self.admin_obj.autocomplete_fields = \"not a list or tuple\"\n        errors = self.base_model_admin_checks._check_autocomplete_fields(self.admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'admin.E036')\n\n    def test_check_autocomplete_fields_item(self):\n        self.admin_obj.autocomplete_fields = [\"non_existent_field\"]\n        errors = self.base_model_admin_checks._check_autocomplete_fields(self.admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'admin.E037')\n\n    # Add more test cases for other methods in BaseModelAdminChecks\n\nclass TestModelAdminChecks(unittest.TestCase):\n\n    def setUp(self):\n        self.model_admin_checks = checks.ModelAdminChecks()\n        self.admin_obj = MagicMock()\n\n    def test_check_save_as(self):\n        self.admin_obj.save_as = \"not a boolean\"\n        errors = self.model_admin_checks._check_save_as(self.admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'admin.E101')\n\n    # Add more test cases for other methods in ModelAdminChecks\n\n# Add more test classes for InlineModelAdminChecks and helper functions\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_883": ["\nimport unittest\nimport numpy as np\nfrom scipy.sparse import csr_matrix\nfrom sklearn.utils.multiclass import unique_labels, is_multilabel, type_of_target, class_distribution, check_classification_targets, _ovr_decision_function\n\nclass TestMulticlassUtils(unittest.TestCase):\n    def setUp(self):\n        self.y_binary = [0, 1, 0, 1]\n        self.y_multiclass = [0, 1, 2, 0, 1, 2]\n        self.y_multilabel_indicator = np.array([[1, 0], [0, 1], [1, 1], [0, 0]])\n        self.y_continuous = np.array([0.1, 0.6, 0.8, 0.2])\n        self.y_multiclass_multioutput = np.array([[0, 1], [1, 2], [2, 0]])\n\n    def test_unique_labels(self):\n        self.assertEqual(np.array_equal(unique_labels(self.y_binary), np.array([0, 1])), True)\n        self.assertEqual(np.array_equal(unique_labels(self.y_multiclass), np.array([0, 1, 2])), True)\n        self.assertEqual(np.array_equal(unique_labels(self.y_multilabel_indicator), np.array([0, 1])), True)\n\n    def test_is_multilabel(self):\n        self.assertEqual(is_multilabel(self.y_binary), False)\n        self.assertEqual(is_multilabel(self.y_multilabel_indicator), True)\n\n    def test_type_of_target(self):\n        self.assertEqual(type_of_target(self.y_binary), 'binary')\n        self.assertEqual(type_of_target(self.y_multiclass), 'multiclass')\n        self.assertEqual(type_of_target(self.y_multilabel_indicator), 'multilabel-indicator')\n        self.assertEqual(type_of_target(self.y_continuous), 'continuous')\n        self.assertEqual(type_of_target(self.y_multiclass_multioutput), 'multiclass-multioutput')\n\n    def test_class_distribution(self):\n        classes, n_classes, class_prior = class_distribution(self.y_multiclass_multioutput)\n        self.assertEqual(len(classes), 2)\n        self.assertEqual(n_classes, [3, 3])\n        self.assertEqual(np.array_equal(class_prior, [np.array([1./3, 1./3, 1./3]), np.array([1./3, 1./3, 1./3])]), True)\n\n    def test_check_classification_targets(self):\n        check_classification_targets(self.y_binary)\n        check_classification_targets(self.y_multiclass)\n        check_classification_targets(self.y_multilabel_indicator)\n        with self.assertRaises(ValueError):\n            check_classification_targets(self.y_continuous)\n\n    def test_ovr_decision_function(self):\n        predictions = np.array([[0, 1, 0], [1, 0, 1], [1, 1, 0]])\n        confidences = np.array([[0.8, 0.6, 0.9], [0.7, 0.5, 0.3], [0.2, 0.1, 0.4]])\n        n_classes = 3\n        decision_function = _ovr_decision_function(predictions, confidences, n_classes)\n        self.assertEqual(decision_function.shape, (3, 3))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_70": ["\nimport unittest\nfrom django.utils.numberformat import format as nformat\n\nclass TestNumberFormat(unittest.TestCase):\n\n    def test_integer_format(self):\n        self.assertEqual(nformat(12345, '.'), '12345')\n        self.assertEqual(nformat(12345, '.', grouping=3), '12,345')\n\n    def test_float_format(self):\n        self.assertEqual(nformat(12345.678, '.'), '12345.678')\n        self.assertEqual(nformat(12345.678, '.', decimal_pos=2), '12345.68')\n        self.assertEqual(nformat(12345.678, '.', grouping=3), '12,345.678')\n\n    def test_negative_number_format(self):\n        self.assertEqual(nformat(-12345.678, '.'), '-12345.678')\n        self.assertEqual(nformat(-12345.678, '.', grouping=3), '-12,345.678')\n\n    def test_non_uniform_grouping(self):\n        self.assertEqual(nformat(123456789, '.', grouping=(3, 2, 0)), '123,456,789')\n\n    def test_large_number_format(self):\n        self.assertIn('e', nformat(12345678901234567890, '.'))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_562": ["\nimport unittest\nimport numpy as np\nimport matplotlib.lines as mlines\nimport matplotlib.pyplot as plt\nfrom matplotlib.backend_bases import MouseEvent\n\nclass TestLine2D(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.x = np.linspace(0, 10, 100)\n        self.y = np.sin(self.x)\n        self.line = mlines.Line2D(self.x, self.y)\n        self.ax.add_line(self.line)\n\n    def test_contains(self):\n        event = MouseEvent('button_press_event', self.ax.figure.canvas, 0, 0, dblclick=False, button=1)\n        event.x, event.y = self.ax.transData.transform((5, 0.5))\n        inside, details = self.line.contains(event)\n        self.assertTrue(inside)\n\n    def test_get_pickradius(self):\n        self.assertEqual(self.line.get_pickradius(), 5)\n\n    def test_set_pickradius(self):\n        self.line.set_pickradius(10)\n        self.assertEqual(self.line.get_pickradius(), 10)\n\n    def test_set_data(self):\n        new_x = np.linspace(0, 20, 100)\n        new_y = np.cos(new_x)\n        self.line.set_data(new_x, new_y)\n        np.testing.assert_array_equal(self.line.get_xdata(), new_x)\n        np.testing.assert_array_equal(self.line.get_ydata(), new_y)\n\n    def test_get_linestyle(self):\n        self.assertEqual(self.line.get_linestyle(), '-')\n\n    def test_set_linestyle(self):\n        self.line.set_linestyle('--')\n        self.assertEqual(self.line.get_linestyle(), '--')\n\n    def test_get_linewidth(self):\n        self.assertEqual(self.line.get_linewidth(), 1.5)\n\n    def test_set_linewidth(self):\n        self.line.set_linewidth(2.0)\n        self.assertEqual(self.line.get_linewidth(), 2.0)\n\n    def test_get_color(self):\n        self.assertEqual(self.line.get_color(), 'b')\n\n    def test_set_color(self):\n        self.line.set_color('r')\n        self.assertEqual(self.line.get_color(), 'r')\n\n    # Add more tests for other methods and functionalities as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_179": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db import models\nfrom django.db.models.base import Model, ModelBase, ModelState, DEFERRED\n\nclass TestModel(unittest.TestCase):\n    def setUp(self):\n        class TestModel(models.Model):\n            test_field = models.CharField(max_length=10)\n\n        self.TestModel = TestModel\n        self.test_instance = self.TestModel(test_field='test')\n\n    def test_model_init(self):\n        self.assertEqual(self.test_instance.test_field, 'test')\n\n    def test_model_from_db(self):\n        db_instance = self.TestModel.from_db(None, ['test_field'], ['from_db'])\n        self.assertEqual(db_instance.test_field, 'from_db')\n\n    def test_model_repr(self):\n        self.assertEqual(repr(self.test_instance), '<TestModel: test>')\n\n    def test_model_str(self):\n        self.assertEqual(str(self.test_instance), 'TestModel object (None)')\n\n    def test_model_eq(self):\n        self.test_instance.pk = 1\n        other_instance = self.TestModel(pk=1)\n        self.assertTrue(self.test_instance == other_instance)\n\n    def test_model_hash(self):\n        self.test_instance.pk = 1\n        with self.assertRaises(TypeError):\n            hash(self.test_instance)\n\n    def test_model_get_deferred_fields(self):\n        self.assertEqual(self.test_instance.get_deferred_fields(), set())\n\n    @patch('django.db.models.base.Model._do_update')\n    @patch('django.db.models.base.Model._save_parents')\n    def test_model_save_base(self, mock_save_parents, mock_do_update):\n        self.test_instance.save_base()\n        mock_save_parents.assert_called_once()\n        mock_do_update.assert_called_once()\n\n    @patch('django.db.models.base.Model._save_table')\n    def test_model_save(self, mock_save_table):\n        self.test_instance.save()\n        mock_save_table.assert_called_once()\n\n    @patch('django.db.models.base.Collector')\n    def test_model_delete(self, MockCollector):\n        self.test_instance.pk = 1\n        self.test_instance.delete()\n        MockCollector.assert_called_once()\n\n    def test_model_validate_unique(self):\n        self.test_instance.full_clean()\n\n    def test_model_full_clean(self):\n        self.test_instance.full_clean()\n\n    @patch('django.db.models.base.Model._perform_unique_checks')\n    @patch('django.db.models.base.Model._perform_date_checks')\n    def test_model_validate_unique_call(self, mock_perform_date_checks, mock_perform_unique_checks):\n        self.test_instance.validate_unique()\n        mock_perform_unique_checks.assert_called_once()\n        mock_perform_date_checks.assert_called_once()\n\n    # Add more tests as needed for other methods and functionalities\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1209": ["\nimport unittest\nfrom sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, kibi\nfrom sympy.physics.units import m\n\nclass TestPrefixes(unittest.TestCase):\n    def setUp(self):\n        self.kilo = PREFIXES['k']\n        self.micro = PREFIXES['mu']\n        self.kibi = kibi\n\n    def test_prefix_creation(self):\n        self.assertEqual(self.kilo.name, 'kilo')\n        self.assertEqual(self.kilo.abbrev, 'k')\n        self.assertEqual(self.kilo.scale_factor, 1000)\n\n    def test_prefix_multiplication(self):\n        self.assertEqual((self.kilo * self.micro).scale_factor, 1e-6)\n\n    def test_prefix_division(self):\n        self.assertEqual((self.kilo / self.micro).scale_factor, 1e12)\n\n    def test_prefix_unit(self):\n        prefixed_units = prefix_unit(m, {'k': self.kilo, 'c': PREFIXES['c']})\n        self.assertEqual(len(prefixed_units), 2)\n        self.assertEqual(str(prefixed_units[0]), 'km')\n        self.assertEqual(str(prefixed_units[1]), 'cm')\n\n    def test_binary_prefix(self):\n        self.assertEqual(self.kibi.scale_factor, 1024)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1130": ["\nimport unittest\nfrom sympy.physics.vector import dynamicsymbols, Point, ReferenceFrame\nfrom sympy import symbols\n\nclass TestPoint(unittest.TestCase):\n\n    def setUp(self):\n        self.N = ReferenceFrame('N')\n        self.B = ReferenceFrame('B')\n        self.O = Point('O')\n        self.P = Point('P')\n        self.u1, self.u2 = dynamicsymbols('u1 u2')\n        self.q = dynamicsymbols('q')\n        self.q2 = dynamicsymbols('q2')\n        self.qd = dynamicsymbols('q', 1)\n        self.q2d = dynamicsymbols('q2', 1)\n\n    def test_str_and_repr(self):\n        self.assertEqual(str(self.O), 'O')\n        self.assertEqual(repr(self.O), 'O')\n\n    def test_check_point(self):\n        with self.assertRaises(TypeError):\n            self.O._check_point('not a point')\n\n    def test_pdict_list(self):\n        self.O.set_pos(self.P, self.q * self.N.x)\n        self.assertIn(self.P, self.O._pdict_list(self.P, 0))\n\n    def test_a1pt_theory(self):\n        self.B.set_ang_vel(self.N, 5 * self.B.y)\n        self.P.set_pos(self.O, self.q * self.B.x)\n        self.P.set_vel(self.B, self.qd * self.B.x + self.q2d * self.B.y)\n        self.O.set_vel(self.N, 0)\n        acc = self.P.a1pt_theory(self.O, self.N, self.B)\n        self.assertEqual(acc, (-25*self.q + self.q.diff(self.q.t, 2))*self.B.x + self.q2.diff(self.q2.t, 2)*self.B.y - 10*self.qd*self.B.z)\n\n    def test_a2pt_theory(self):\n        self.B.orientnew('B', 'Axis', [self.q, self.N.z])\n        self.P.set_pos(self.O, 10 * self.B.x)\n        self.O.set_vel(self.N, 5 * self.N.x)\n        acc = self.P.a2pt_theory(self.O, self.N, self.B)\n        self.assertEqual(acc, -10*self.qd**2*self.B.x + 10*self.q.diff(self.q.t, 2)*self.B.y)\n\n    def test_acc(self):\n        self.O.set_acc(self.N, 10 * self.N.x)\n        self.assertEqual(self.O.acc(self.N), 10 * self.N.x)\n\n    def test_locatenew(self):\n        P2 = self.O.locatenew('P2', 10 * self.N.x)\n        self.assertEqual(P2.pos_from(self.O), 10 * self.N.x)\n\n    def test_pos_from(self):\n        self.O.set_pos(self.P, 10 * self.N.x)\n        self.assertEqual(self.O.pos_from(self.P), 10 * self.N.x)\n\n    def test_set_acc(self):\n        self.O.set_acc(self.N, 10 * self.N.x)\n        self.assertEqual(self.O.acc(self.N), 10 * self.N.x)\n\n    def test_set_pos(self):\n        self.O.set_pos(self.P, 10 * self.N.x)\n        self.assertEqual(self.O.pos_from(self.P), 10 * self.N.x)\n\n    def test_set_vel(self):\n        self.O.set_vel(self.N, 10 * self.N.x)\n        self.assertEqual(self.O.vel(self.N), 10 * self.N.x)\n\n    def test_v1pt_theory(self):\n        self.B.set_ang_vel(self.N, 5 * self.B.y)\n        self.P.set_pos(self.O, self.q * self.B.x)\n        self.P.set_vel(self.B, self.qd * self.B.x + self.q2d * self.B.y)\n        self.O.set_vel(self.N, 0)\n        vel = self.P.v1pt_theory(self.O, self.N, self.B)\n        self.assertEqual(vel, self.qd*self.B.x + self.q2d*self.B.y - 5*self.q*self.B.z)\n\n    def test_v2pt_theory(self):\n        self.B.orientnew('B', 'Axis', [self.q, self.N.z])\n        self.P.set_pos(self.O, 10 * self.B.x)\n        self.O.set_vel(self.N, 5 * self.N.x)\n        vel = self.P.v2pt_theory(self.O, self.N, self.B)\n        self.assertEqual(vel, 5*self.N.x + 10*self.qd*self.B.y)\n\n    def test_vel(self):\n        self.O.set_vel(self.N, 10 * self.N.x)\n        self.assertEqual(self.O.vel(self.N), 10 * self.N.x)\n\n    def test_partial_velocity(self):\n        self.O.set_vel(self.N, self.u1 * self.N.x + self.u2 * self.B.y)\n        self.assertEqual(self.O.partial_velocity(self.N, self.u1), self.N.x)\n        self.assertEqual(self.O.partial_velocity(self.N, self.u1, self.u2), (self.N.x, self.B.y))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_495": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    BaseSequenceSerializer,\n    BaseSimpleSerializer,\n    ChoicesSerializer,\n    DateTimeSerializer,\n    DecimalSerializer,\n    DeconstructableSerializer,\n    DictionarySerializer,\n    EnumSerializer,\n    FloatSerializer,\n    FrozensetSerializer,\n    FunctionTypeSerializer,\n    FunctoolsPartialSerializer,\n    IterableSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    PathLikeSerializer,\n    PathSerializer,\n    RegexSerializer,\n    SequenceSerializer,\n    SetSerializer,\n    SettingsReferenceSerializer,\n    TupleSerializer,\n    TypeSerializer,\n    UUIDSerializer,\n    serializer_factory,\n)\nfrom django.conf import SettingsReference\nfrom django.db import models\nfrom django.db.migrations.operations.base import Operation\nimport datetime\nimport decimal\nimport enum\nimport functools\nimport os\nimport pathlib\nimport re\nimport types\nimport uuid\n\nclass TestSerializers(unittest.TestCase):\n    def test_base_serializer(self):\n        base_serializer = BaseSerializer('test')\n        with self.assertRaises(NotImplementedError):\n            base_serializer.serialize()\n\n    def test_base_sequence_serializer(self):\n        base_sequence_serializer = BaseSequenceSerializer(['test'])\n        with self.assertRaises(NotImplementedError):\n            base_sequence_serializer._format()\n        with self.assertRaises(NotImplementedError):\n            base_sequence_serializer.serialize()\n\n    # Continue adding tests for other serializers and functions in the same format.\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_117": ["\nimport unittest\nfrom django.core.cache.utils import make_template_fragment_key\n\nclass TestMakeTemplateFragmentKey(unittest.TestCase):\n\n    def test_make_template_fragment_key_without_vary_on(self):\n        fragment_name = 'test_fragment'\n        expected_key = 'template.cache.test_fragment.d41d8cd98f00b204e9800998ecf8427e'\n        self.assertEqual(make_template_fragment_key(fragment_name), expected_key)\n\n    def test_make_template_fragment_key_with_vary_on(self):\n        fragment_name = 'test_fragment'\n        vary_on = ['arg1', 'arg2', 123]\n        expected_key = 'template.cache.test_fragment.0f67b15521c2c601b1c56952409932c3'\n        self.assertEqual(make_template_fragment_key(fragment_name, vary_on), expected_key)\n\n    def test_make_template_fragment_key_with_empty_vary_on(self):\n        fragment_name = 'test_fragment'\n        vary_on = []\n        expected_key = 'template.cache.test_fragment.d41d8cd98f00b204e9800998ecf8427e'\n        self.assertEqual(make_template_fragment_key(fragment_name, vary_on), expected_key)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_295": ["\nfrom django.db.models import Expression, F, Value, IntegerField, FloatField, DecimalField, DateTimeField, DateField, TimeField, DurationField, BooleanField, CharField, BinaryField, UUIDField\nfrom django.db.models.expressions import Func, RawSQL, Col, Ref, Subquery, Exists, OrderBy, Window, WindowFrame, RowRange, ValueRange\nfrom django.test import TestCase\nfrom unittest.mock import Mock\n\nclass TestExpression(TestCase):\n    def setUp(self):\n        self.expression = Expression(output_field=IntegerField())\n\n    def test_resolve_expression(self):\n        query = Mock()\n        self.expression.resolve_expression(query=query, allow_joins=True, reuse=None, summarize=False, for_save=False)\n        query.resolve_ref.assert_not_called()\n\n    def test_output_field(self):\n        self.assertEqual(self.expression.output_field, IntegerField())\n\nclass TestF(TestCase):\n    def setUp(self):\n        self.f = F('field_name')\n\n    def test_resolve_expression(self):\n        query = Mock()\n        self.f.resolve_expression(query=query, allow_joins=True, reuse=None, summarize=False, for_save=False)\n        query.resolve_ref.assert_called_with('field_name', True, None, False)\n\nclass TestFunc(TestCase):\n    def setUp(self):\n        self.func = Func(F('field_name'), Value(1), output_field=IntegerField())\n\n    def test_resolve_expression(self):\n        query = Mock()\n        self.func.resolve_expression(query=query, allow_joins=True, reuse=None, summarize=False, for_save=False)\n        query.resolve_ref.assert_called_with('field_name', True, None, False)\n\nclass TestValue(TestCase):\n    def setUp(self):\n        self.value = Value(1)\n\n    def test_as_sql(self):\n        compiler = Mock()\n        connection = Mock()\n        self.value.as_sql(compiler, connection)\n        connection.ops.check_expression_support.assert_called_with(self.value)\n\nclass TestRawSQL(TestCase):\n    def setUp(self):\n        self.raw_sql = RawSQL('SELECT * FROM table', [])\n\n    def test_resolve_expression(self):\n        query = Mock()\n        self.raw_sql.resolve_expression(query=query, allow_joins=True, reuse=None, summarize=False, for_save=False)\n        query.resolve_ref.assert_not_called()\n\n# Similar tests can be written for Col, Ref, Subquery, Exists, OrderBy, Window, WindowFrame, RowRange, ValueRange classes.\n"], "sample_77": ["\nfrom django.conf import settings\nfrom django.test import override_settings\nfrom django.core.checks.translation import (\n    check_language_settings_consistent,\n    check_setting_language_code,\n    check_setting_languages,\n    check_setting_languages_bidi,\n    E001, E002, E003, E004\n)\nfrom django.test import SimpleTestCase\n\nclass TestTranslationChecks(SimpleTestCase):\n    @override_settings(LANGUAGE_CODE='en-us')\n    def test_check_setting_language_code_valid(self):\n        errors = check_setting_language_code(None)\n        self.assertEqual(len(errors), 0)\n\n    @override_settings(LANGUAGE_CODE=123)\n    def test_check_setting_language_code_invalid(self):\n        errors = check_setting_language_code(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, E001.id)\n\n    @override_settings(LANGUAGES=[('en-us', 'English'), ('es', 'Spanish')])\n    def test_check_setting_languages_valid(self):\n        errors = check_setting_languages(None)\n        self.assertEqual(len(errors), 0)\n\n    @override_settings(LANGUAGES=[('en-us', 'English'), (123, 'Spanish')])\n    def test_check_setting_languages_invalid(self):\n        errors = check_setting_languages(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, E002.id)\n\n    @override_settings(LANGUAGES_BIDI=['ar', 'he'])\n    def test_check_setting_languages_bidi_valid(self):\n        errors = check_setting_languages_bidi(None)\n        self.assertEqual(len(errors), 0)\n\n    @override_settings(LANGUAGES_BIDI=['ar', 123])\n    def test_check_setting_languages_bidi_invalid(self):\n        errors = check_setting_languages_bidi(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, E003.id)\n\n    @override_settings(LANGUAGE_CODE='en-us', LANGUAGES=[('en-us', 'English'), ('es', 'Spanish')])\n    def test_check_language_settings_consistent_valid(self):\n        errors = check_language_settings_consistent(None)\n        self.assertEqual(len(errors), 0)\n\n    @override_settings(LANGUAGE_CODE='fr', LANGUAGES=[('en-us', 'English'), ('es', 'Spanish')])\n    def test_check_language_settings_consistent_invalid(self):\n        errors = check_language_settings_consistent(None)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, E004.id)\n"], "sample_48": ["\nfrom django.test import TestCase\nfrom django.db.models import Avg, Count, Max, Min, StdDev, Sum, Variance\nfrom .models import YourModel  # replace YourModel with your actual model\n\nclass TestAggregates(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        # Set up non-modified objects used by all test methods\n        YourModel.objects.create(value=1)\n        YourModel.objects.create(value=2)\n        YourModel.objects.create(value=3)\n\n    def test_avg(self):\n        result = YourModel.objects.aggregate(Avg('value'))\n        self.assertEqual(result['value__avg'], 2.0)\n\n    def test_count(self):\n        result = YourModel.objects.aggregate(Count('value'))\n        self.assertEqual(result['value__count'], 3)\n\n    def test_max(self):\n        result = YourModel.objects.aggregate(Max('value'))\n        self.assertEqual(result['value__max'], 3)\n\n    def test_min(self):\n        result = YourModel.objects.aggregate(Min('value'))\n        self.assertEqual(result['value__min'], 1)\n\n    def test_sum(self):\n        result = YourModel.objects.aggregate(Sum('value'))\n        self.assertEqual(result['value__sum'], 6)\n\n    def test_stddev(self):\n        result = YourModel.objects.aggregate(StdDev('value'))\n        self.assertIsInstance(result['value__stddev'], float)\n\n    def test_variance(self):\n        result = YourModel.objects.aggregate(Variance('value'))\n        self.assertIsInstance(result['value__variance'], float)\n"], "sample_333": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.forms import Form, CharField, ValidationError\nfrom django.core.exceptions import NON_FIELD_ERRORS\nfrom django.utils.datastructures import MultiValueDict\n\nclass TestBaseForm(unittest.TestCase):\n    def setUp(self):\n        self.data = {'name': 'Test Name', 'email': 'test@example.com'}\n        self.files = MultiValueDict()\n\n        class TestForm(Form):\n            name = CharField(max_length=100)\n            email = CharField(max_length=100)\n\n        self.TestForm = TestForm\n        self.form = TestForm(data=self.data, files=self.files)\n\n    def test_init(self):\n        self.assertEqual(self.form.is_bound, True)\n        self.assertEqual(self.form.data, self.data)\n        self.assertEqual(self.form.files, self.files)\n\n    def test_order_fields(self):\n        self.form.order_fields(['email', 'name'])\n        self.assertEqual(list(self.form.fields.keys()), ['email', 'name'])\n\n    def test_getitem(self):\n        bound_field = self.form['name']\n        self.assertEqual(bound_field.name, 'name')\n        self.assertEqual(bound_field.field, self.form.fields['name'])\n\n    def test_is_valid(self):\n        self.assertEqual(self.form.is_valid(), True)\n\n    def test_add_error(self):\n        self.form.add_error('name', 'Error message')\n        self.assertEqual(self.form.errors['name'], ['Error message'])\n\n    def test_has_error(self):\n        self.form.add_error('name', 'Error message')\n        self.assertEqual(self.form.has_error('name'), True)\n        self.assertEqual(self.form.has_error('email'), False)\n\n    def test_full_clean(self):\n        self.form.full_clean()\n        self.assertEqual(self.form.cleaned_data, self.data)\n\n    def test_non_field_errors(self):\n        self.form.add_error(None, 'Non-field error')\n        self.assertEqual(self.form.non_field_errors(), ['Non-field error'])\n\n    def test_has_changed(self):\n        self.form.full_clean()\n        self.assertEqual(self.form.has_changed(), False)\n\n    def test_get_initial_for_field(self):\n        initial_value = self.form.get_initial_for_field(self.form.fields['name'], 'name')\n        self.assertEqual(initial_value, None)\n\n    def test_media(self):\n        self.assertEqual(str(self.form.media), '')\n\n    def test_is_multipart(self):\n        self.assertEqual(self.form.is_multipart(), False)\n\n    def test_hidden_fields(self):\n        self.assertEqual(len(self.form.hidden_fields()), 0)\n\n    def test_visible_fields(self):\n        self.assertEqual(len(self.form.visible_fields()), 2)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_577": ["\nimport unittest\nimport pandas as pd\nimport numpy as np\nfrom seaborn._core.plot import Plot, Default\nfrom seaborn._marks import Point\nfrom seaborn._stats import Agg\n\nclass TestPlot(unittest.TestCase):\n    def setUp(self):\n        self.data = pd.DataFrame({\n            'x': np.random.randn(100),\n            'y': np.random.randn(100),\n            'z': np.random.choice(['A', 'B', 'C'], 100)\n        })\n\n    def test_add_layer(self):\n        plot = Plot(self.data)\n        plot.add(Point(), Agg(\"mean\"), x=\"x\", y=\"y\")\n        self.assertEqual(len(plot._layers), 1)\n\n    def test_scale(self):\n        plot = Plot(self.data)\n        plot.scale(x=\"log\", y=Continuous(transform=\"sqrt\"))\n        self.assertIsInstance(plot._scales['x'], Continuous)\n        self.assertIsInstance(plot._scales['y'], Continuous)\n\n    def test_limit(self):\n        plot = Plot(self.data)\n        plot.limit(x=(0, 1), y=(None, 2))\n        self.assertEqual(plot._limits['x'], (0, 1))\n        self.assertEqual(plot._limits['y'], (None, 2))\n\n    def test_facet(self):\n        plot = Plot(self.data)\n        plot.facet(row=\"z\")\n        self.assertEqual(plot._facet_spec['variables']['row'], \"z\")\n\n    def test_pair(self):\n        plot = Plot(self.data)\n        plot.pair(x=[\"x\", \"y\"], y=[\"z\"])\n        self.assertEqual(plot._pair_spec['variables']['x0'], \"x\")\n        self.assertEqual(plot._pair_spec['variables']['y0'], \"z\")\n\n    def test_label(self):\n        plot = Plot(self.data)\n        plot.label(title=\"Test Plot\", x=\"X-axis\", y=\"Y-axis\")\n        self.assertEqual(plot._labels['title'], \"Test Plot\")\n        self.assertEqual(plot._labels['x'], \"X-axis\")\n        self.assertEqual(plot._labels['y'], \"Y-axis\")\n\n    def test_share(self):\n        plot = Plot(self.data)\n        plot.share(x=True, y=False)\n        self.assertEqual(plot._shares['x'], True)\n        self.assertEqual(plot._shares['y'], False)\n\n    def test_layout(self):\n        plot = Plot(self.data)\n        plot.layout(size=(8, 6), engine=\"tight\")\n        self.assertEqual(plot._figure_spec['figsize'], (8, 6))\n        self.assertEqual(plot._layout_spec['engine'], \"tight\")\n\n    def test_theme(self):\n        plot = Plot(self.data)\n        plot.theme({\"font.size\": 12})\n        self.assertEqual(plot._theme['font.size'], 12)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_565": ["\nimport unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\nfrom mpl_toolkits.axes_grid1.inset_locator import (\n    InsetPosition, AnchoredSizeLocator, AnchoredZoomLocator,\n    BboxPatch, BboxConnector, BboxConnectorPatch, inset_axes, zoomed_inset_axes, mark_inset\n)\n\nclass TestInsetLocator(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots(1, 1)\n\n    def test_inset_position(self):\n        ip = InsetPosition(self.ax, [0.5, 0.1, 0.4, 0.2])\n        self.assertIsInstance(ip(self.ax, None), Bbox)\n\n    def test_anchored_size_locator(self):\n        asl = AnchoredSizeLocator((0.5, 0.5), '50%', '50%', 'center')\n        self.assertIsInstance(asl(self.ax, self.fig.canvas.get_renderer()), Bbox)\n\n    def test_anchored_zoom_locator(self):\n        azl = AnchoredZoomLocator(self.ax, zoom=2, loc='upper right')\n        self.assertIsInstance(azl(self.ax, self.fig.canvas.get_renderer()), Bbox)\n\n    def test_bbox_patch(self):\n        bp = BboxPatch(Bbox.from_bounds(0, 0, 1, 1))\n        self.assertIsInstance(bp.get_path(), plt.Path)\n\n    def test_bbox_connector(self):\n        bc = BboxConnector(Bbox.from_bounds(0, 0, 1, 1), Bbox.from_bounds(1, 1, 2, 2), loc1=1, loc2=3)\n        self.assertIsInstance(bc.get_path(), plt.Path)\n\n    def test_bbox_connector_patch(self):\n        bcp = BboxConnectorPatch(Bbox.from_bounds(0, 0, 1, 1), Bbox.from_bounds(1, 1, 2, 2), loc1a=1, loc2a=3, loc1b=2, loc2b=4)\n        self.assertIsInstance(bcp.get_path(), plt.Path)\n\n    def test_inset_axes(self):\n        axins = inset_axes(self.ax, width='40%', height='30%', loc='lower left')\n        self.assertIsInstance(axins, plt.Axes)\n\n    def test_zoomed_inset_axes(self):\n        axins = zoomed_inset_axes(self.ax, zoom=2, loc='upper right')\n        self.assertIsInstance(axins, plt.Axes)\n\n    def test_mark_inset(self):\n        axins = zoomed_inset_axes(self.ax, zoom=2, loc='upper right')\n        pp, p1, p2 = mark_inset(self.ax, axins, loc1=2, loc2=4, edgecolor=\"black\")\n        self.assertIsInstance(pp, plt.Patch)\n        self.assertIsInstance(p1, plt.Patch)\n        self.assertIsInstance(p2, plt.Patch)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1083": ["\nimport unittest\nfrom sympy import symbols, sinh, cos, cosh, tanh, coth, sech, csch, asinh, acosh, atanh, acoth, asech, acsch, log, sqrt, nan, oo, zoo, pi, I, S, Rational, exp, sin, cos, tan, cot, acos, asin, expand_mul, AccumBounds, im, re\nfrom sympy.functions.elementary.hyperbolic import HyperbolicFunction, ReciprocalHyperbolicFunction, InverseHyperbolicFunction, sinh, cosh, tanh, coth, csch, sech, asinh, acosh, atanh, acoth, asech, acsch\n\nclass TestHyperbolicFunctions(unittest.TestCase):\n    def setUp(self):\n        self.x = symbols('x')\n\n    def test_sinh_eval(self):\n        self.assertEqual(sinh(0), 0)\n        self.assertEqual(sinh(1), sinh(S(1)))\n        self.assertEqual(sinh(nan), nan)\n        self.assertEqual(sinh(oo), oo)\n        self.assertEqual(sinh(-oo), -oo)\n        self.assertEqual(sinh(I*pi/2), I*sin(pi/2))\n        self.assertEqual(sinh(I*x), I*sin(x))\n\n    def test_cosh_eval(self):\n        self.assertEqual(cosh(0), 1)\n        self.assertEqual(cosh(1), cosh(S(1)))\n        self.assertEqual(cosh(nan), nan)\n        self.assertEqual(cosh(oo), oo)\n        self.assertEqual(cosh(-oo), oo)\n        self.assertEqual(cosh(I*x), cos(x))\n\n    # Add more test cases for other hyperbolic functions, their inverses, and their properties\n\n    def test_asinh_eval(self):\n        self.assertEqual(asinh(0), 0)\n        self.assertEqual(asinh(1), log(sqrt(2) + 1))\n        self.assertEqual(asinh(-1), log(sqrt(2) - 1))\n        self.assertEqual(asinh(nan), nan)\n        self.assertEqual(asinh(oo), oo)\n        self.assertEqual(asinh(-oo), -oo)\n\n    # Add more test cases for other inverse hyperbolic functions and their properties\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_670": ["\nimport pytest\nfrom _pytest.reports import BaseReport, TestReport, CollectReport, getslaveinfoline, \\\n    pytest_report_to_serializable, pytest_report_from_serializable, _report_to_json, _report_kwargs_from_json\n\nclass DummyNode:\n    def __init__(self, slaveinfo):\n        self._slaveinfo = slaveinfo\n\n    @property\n    def slaveinfo(self):\n        return self._slaveinfo\n\ndef test_getslaveinfoline():\n    node = DummyNode({\"id\": \"gw0\", \"sysplatform\": \"linux\", \"version_info\": (3, 8, 5), \"executable\": \"/usr/bin/python3\"})\n    assert getslaveinfoline(node) == \"[gw0] linux -- Python 3.8.5 /usr/bin/python3\"\n\nclass DummyOut:\n    def __init__(self):\n        self.lines = []\n\n    def line(self, s):\n        self.lines.append(s)\n\nclass DummyLongRepr:\n    def __init__(self, s):\n        self.s = s\n\n    def toterminal(self, out):\n        out.line(self.s)\n\ndef test_BaseReport_toterminal():\n    report = BaseReport(node=DummyNode({\"id\": \"gw0\", \"sysplatform\": \"linux\", \"version_info\": (3, 8, 5), \"executable\": \"/usr/bin/python3\"}), longrepr=DummyLongRepr(\"test\"))\n    out = DummyOut()\n    report.toterminal(out)\n    assert out.lines == [\"[gw0] linux -- Python 3.8.5 /usr/bin/python3\", \"test\"]\n\ndef test_BaseReport_longreprtext():\n    report = BaseReport(node=DummyNode({\"id\": \"gw0\", \"sysplatform\": \"linux\", \"version_info\": (3, 8, 5), \"executable\": \"/usr/bin/python3\"}), longrepr=DummyLongRepr(\"test\"))\n    assert report.longreprtext == \"[gw0] linux -- Python 3.8.5 /usr/bin/python3\\ntest\"\n\ndef test_BaseReport_caplog():\n    report = BaseReport(sections=[(\"Captured log\", \"test1\"), (\"Captured log\", \"test2\"), (\"Captured stdout\", \"test3\")])\n    assert report.caplog == \"test1\\ntest2\"\n\ndef test_BaseReport_capstdout():\n    report = BaseReport(sections=[(\"Captured stdout\", \"test1\"), (\"Captured stderr\", \"test2\"), (\"Captured stdout\", \"test3\")])\n    assert report.capstdout == \"test1\\ntest3\"\n\ndef test_BaseReport_capstderr():\n    report = BaseReport(sections=[(\"Captured stderr\", \"test1\"), (\"Captured stdout\", \"test2\"), (\"Captured stderr\", \"test3\")])\n    assert report.capstderr == \"test1\\ntest3\"\n\ndef test_BaseReport_passed():\n    report = BaseReport(outcome=\"passed\")\n    assert report.passed\n\ndef test_BaseReport_failed():\n    report = BaseReport(outcome=\"failed\")\n    assert report.failed\n\ndef test_BaseReport_skipped():\n    report = BaseReport(outcome=\"skipped\")\n    assert report.skipped\n\ndef test_BaseReport_fspath():\n    report = BaseReport(nodeid=\"test/path::test_function\")\n    assert report.fspath == \"test/path\"\n\ndef test_BaseReport_count_towards_summary():\n    report = BaseReport()\n    assert report.count_towards_summary\n\ndef test_BaseReport_head_line():\n    report = BaseReport(location=(\"/test/path.py\", 10, \"test_function\"))\n    assert report.head_line == \"test_function\"\n\ndef test_TestReport_from_item_and_call():\n    class DummyItem:\n        def __init__(self, nodeid, location, keywords, user_properties):\n            self.nodeid = nodeid\n            self.location = location\n            self.keywords = keywords\n            self.user_properties = user_properties\n\n    class DummyCall:\n        def __init__(self, when, excinfo, start, stop):\n            self.when = when\n            self.excinfo = excinfo\n            self.start = start\n            self.stop = stop\n\n    report = TestReport.from_item_and_call(DummyItem(\"test/path::test_function\", (\"/test/path.py\", 10, \"test_function\"), [\"test\"], [(\"prop\", \"value\")]), DummyCall(\"call\", None, 10, 20))\n    assert report.nodeid == \"test/path::test_function\"\n    assert report.location == (\"/test/path.py\", 10, \"test_function\")\n    assert report.keywords == {\"test\": 1}\n    assert report.outcome == \"passed\"\n    assert report.longrepr is None\n    assert report.when == \"call\"\n    assert report.user_properties == [(\"prop\", \"value\")]\n    assert report.duration == 10\n\ndef test_CollectReport_location():\n    report = CollectReport(nodeid=\"test/path\", outcome=\"passed\", longrepr=None, result=[])\n    assert report.location == (\"test/path\", None, \"test/path\")\n\ndef test_pytest_report_to_serializable():\n    report = TestReport(\"test/path::test_function\", (\"/test/path.py\", 10, \"test_function\"), {\"test\": 1}, \"passed\", None, \"call\", [], 10)\n    data = pytest_report_to_serializable(report)\n    assert data[\"nodeid\"] == \"test/path::test_function\"\n    assert data[\"location\"] == (\"/test/path.py\", 10, \"test_function\")\n    assert data[\"keywords\"] == {\"test\": 1}\n    assert data[\"outcome\"] == \"passed\"\n    assert data[\"longrepr\"] is None\n    assert data[\"when\"] == \"call\"\n    assert data[\"sections\"] == []\n    assert data[\"duration\"] == 10\n    assert data[\"$report_type\"] == \"TestReport\"\n\ndef test_pytest_report_from_serializable():\n    data = {\"nodeid\": \"test/path::test_function\", \"location\": (\"/test/path.py\", 10, \"test_function\"), \"keywords\": {\"test\": 1}, \"outcome\": \"passed\", \"longrepr\": None, \"when\": \"call\", \"sections\": [], \"duration\": 10, \"$report_type\": \"TestReport\"}\n    report = pytest_report_from_serializable(data)\n    assert report.nodeid == \"test/path::test_function\"\n    assert report.location == (\"/test/path.py\", 10, \"test_function\")\n    assert report.keywords == {\"test\": 1}\n    assert report.outcome == \"passed\"\n    assert report.longrepr is None\n    assert report.when == \"call\"\n    assert report.sections == []\n    assert report.duration == 10\n"], "sample_410": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.contrib.auth.base_user import AbstractBaseUser, BaseUserManager\n\nclass TestBaseUserManager(unittest.TestCase):\n\n    def test_normalize_email(self):\n        email = \"Test@EXAMPLE.COM\"\n        normalized_email = BaseUserManager.normalize_email(email)\n        self.assertEqual(normalized_email, \"Test@example.com\")\n\n    def test_make_random_password(self):\n        with self.assertWarns(RemovedInDjango51Warning):\n            password = BaseUserManager().make_random_password()\n            self.assertEqual(len(password), 10)\n\n    def test_get_by_natural_key(self):\n        user = AbstractBaseUser(username=\"testuser\")\n        user.save()\n        retrieved_user = AbstractBaseUser.objects.get_by_natural_key(\"testuser\")\n        self.assertEqual(user, retrieved_user)\n\nclass TestAbstractBaseUser(unittest.TestCase):\n\n    def test_str_method(self):\n        user = AbstractBaseUser(username=\"testuser\")\n        self.assertEqual(str(user), \"testuser\")\n\n    def test_save_method(self):\n        user = AbstractBaseUser(username=\"testuser\")\n        user.set_password(\"testpassword\")\n        with patch('django.contrib.auth.password_validation.password_changed') as mock_password_changed:\n            user.save()\n            mock_password_changed.assert_called_once_with(\"testpassword\", user)\n\n    def test_get_username(self):\n        user = AbstractBaseUser(username=\"testuser\")\n        self.assertEqual(user.get_username(), \"testuser\")\n\n    def test_clean(self):\n        user = AbstractBaseUser(username=\"testuser\")\n        user.clean()\n        self.assertEqual(user.username, \"testuser\")\n\n    def test_natural_key(self):\n        user = AbstractBaseUser(username=\"testuser\")\n        self.assertEqual(user.natural_key(), (\"testuser\",))\n\n    def test_is_anonymous(self):\n        user = AbstractBaseUser(username=\"testuser\")\n        self.assertFalse(user.is_anonymous)\n\n    def test_is_authenticated(self):\n        user = AbstractBaseUser(username=\"testuser\")\n        self.assertTrue(user.is_authenticated)\n\n    def test_set_password(self):\n        user = AbstractBaseUser(username=\"testuser\")\n        user.set_password(\"testpassword\")\n        self.assertNotEqual(user.password, \"testpassword\")\n\n    def test_check_password(self):\n        user = AbstractBaseUser(username=\"testuser\")\n        user.set_password(\"testpassword\")\n        self.assertTrue(user.check_password(\"testpassword\"))\n        self.assertFalse(user.check_password(\"wrongpassword\"))\n\n    def test_set_unusable_password(self):\n        user = AbstractBaseUser(username=\"testuser\")\n        user.set_unusable_password()\n        self.assertFalse(user.has_usable_password())\n\n    def test_get_session_auth_hash(self):\n        user = AbstractBaseUser(username=\"testuser\")\n        user.set_password(\"testpassword\")\n        self.assertIsNotNone(user.get_session_auth_hash())\n\n    def test_get_email_field_name(self):\n        self.assertEqual(AbstractBaseUser.get_email_field_name(), \"email\")\n\n    def test_normalize_username(self):\n        username = \"Test User\"\n        normalized_username = AbstractBaseUser.normalize_username(username)\n        self.assertEqual(normalized_username, \"Test User\")\n"], "sample_290": ["\nimport unittest\nfrom unittest.mock import Mock, patch\n\nfrom django.db.migrations.migration import Migration, SwappableTuple\nfrom django.db.migrations.operations import CreateModel\nfrom django.db.migrations.state import ProjectState\nfrom django.db.migrations.exceptions import IrreversibleError\n\nclass MigrationTests(unittest.TestCase):\n    def setUp(self):\n        self.project_state = ProjectState()\n        self.schema_editor = Mock()\n        self.migration = Migration(\n            name='test_migration',\n            app_label='test_app',\n        )\n        self.migration.operations = [\n            CreateModel(\n                name='TestModel',\n                fields=[('id', models.AutoField(primary_key=True))],\n            ),\n        ]\n\n    def test_init(self):\n        self.assertEqual(self.migration.name, 'test_migration')\n        self.assertEqual(self.migration.app_label, 'test_app')\n\n    def test_mutate_state(self):\n        new_state = self.migration.mutate_state(self.project_state)\n        self.assertIn('test_app', new_state.models)\n        self.assertIn('testmodel', new_state.models['test_app'])\n\n    def test_apply(self):\n        with patch.object(self.migration.operations[0], 'database_forwards') as mock_method:\n            self.migration.apply(self.project_state, self.schema_editor)\n            mock_method.assert_called_once()\n\n    def test_unapply_irreversible(self):\n        self.migration.operations[0].reversible = False\n        with self.assertRaises(IrreversibleError):\n            self.migration.unapply(self.project_state, self.schema_editor)\n\n    def test_unapply(self):\n        with patch.object(self.migration.operations[0], 'database_backwards') as mock_method:\n            self.migration.unapply(self.project_state, self.schema_editor)\n            mock_method.assert_called_once()\n\n    def test_suggest_name_initial(self):\n        self.migration.initial = True\n        self.assertEqual(self.migration.suggest_name(), 'initial')\n\n    def test_suggest_name_auto(self):\n        self.migration.operations = []\n        with patch('django.db.migrations.migration.get_migration_name_timestamp') as mock_method:\n            mock_method.return_value = 'test_timestamp'\n            self.assertEqual(self.migration.suggest_name(), 'auto_test_timestamp')\n\nclass SwappableTupleTests(unittest.TestCase):\n    def test_swappable_tuple(self):\n        swappable_tuple = SwappableTuple(('test_app', '__first__'), 'test_setting')\n        self.assertEqual(swappable_tuple.setting, 'test_setting')\n"], "sample_525": ["\nimport unittest\nfrom unittest.mock import Mock\nimport numpy as np\nfrom matplotlib.figure import Figure, SubFigure\n\nclass TestFigure(unittest.TestCase):\n\n    def setUp(self):\n        self.figure = Figure()\n\n    def test_init(self):\n        self.assertIsInstance(self.figure, Figure)\n\n    def test_set_dpi(self):\n        self.figure.set_dpi(200)\n        self.assertEqual(self.figure.dpi, 200)\n\n    def test_set_size_inches(self):\n        self.figure.set_size_inches(8, 6)\n        self.assertTrue(np.allclose(self.figure.get_size_inches(), [8, 6]))\n\n    def test_add_axes(self):\n        ax = self.figure.add_axes([0, 0, 1, 1])\n        self.assertIsInstance(ax, SubFigure)\n\n    def test_subplots(self):\n        axs = self.figure.subplots(2, 2)\n        self.assertEqual(axs.shape, (2, 2))\n\n    def test_clear(self):\n        self.figure.subplots(2, 2)\n        self.figure.clear()\n        self.assertEqual(len(self.figure.axes), 0)\n\n    def test_draw(self):\n        renderer = Mock()\n        self.figure.draw(renderer)\n        renderer.open_group.assert_called_once_with('figure', gid=self.figure.get_gid())\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_157": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom io import StringIO\nfrom django.test import override_settings\nfrom django.db.backends.base.creation import BaseDatabaseCreation, TEST_DATABASE_PREFIX\n\nclass TestBaseDatabaseCreation(unittest.TestCase):\n    def setUp(self):\n        self.connection = Mock()\n        self.db_creation = BaseDatabaseCreation(self.connection)\n\n    @patch('django.core.management.call_command')\n    def test_create_test_db(self, mock_call_command):\n        self.connection.settings_dict = {\n            'NAME': 'test_db',\n            'TEST': {'MIGRATE': True, 'NAME': ''},\n        }\n        self.db_creation._get_test_db_name = Mock(return_value='test_db')\n        self.db_creation._create_test_db = Mock(return_value='test_db')\n        self.db_creation.serialize_db_to_string = Mock(return_value='{}')\n\n        result = self.db_creation.create_test_db()\n\n        self.assertEqual(result, 'test_db')\n        self.db_creation._create_test_db.assert_called_once()\n        self.db_creation.serialize_db_to_string.assert_called_once()\n        mock_call_command.assert_any_call('migrate', verbosity=0, interactive=False, database=self.connection.alias, run_syncdb=True)\n        mock_call_command.assert_called_with('createcachetable', database=self.connection.alias)\n\n    @patch('django.apps.apps.get_app_configs')\n    @patch('django.db.migrations.loader.MigrationLoader')\n    @patch('django.db.serializers.serialize')\n    def test_serialize_db_to_string(self, mock_serialize, mock_migration_loader, mock_get_app_configs):\n        mock_get_app_configs.return_value = [Mock(models_module=Mock(), label='test_app', name='test_app')]\n        mock_migration_loader.return_value.migrated_apps = ['test_app']\n\n        with override_settings(TEST_NON_SERIALIZED_APPS=[]):\n            self.db_creation.serialize_db_to_string()\n\n        mock_serialize.assert_called_once()\n\n    @patch('django.db.serializers.deserialize')\n    @patch('django.db.transaction.atomic')\n    def test_deserialize_db_from_string(self, mock_atomic, mock_deserialize):\n        self.db_creation.deserialize_db_from_string('{}')\n\n        mock_atomic.assert_called_once()\n        mock_deserialize.assert_called_once()\n\n    @patch('django.db.backends.base.creation.input', return_value='yes')\n    def test_create_test_db_with_autoclobber(self, mock_input):\n        self.connection.settings_dict = {\n            'NAME': 'test_db',\n            'TEST': {'MIGRATE': False, 'NAME': ''},\n        }\n        self.db_creation._get_test_db_name = Mock(return_value='test_db')\n        self.db_creation._execute_create_test_db = Mock(side_effect=[Exception('Error'), None])\n        self.db_creation._destroy_test_db = Mock()\n\n        self.db_creation._create_test_db(verbosity=1, autoclobber=True)\n\n        self.db_creation._execute_create_test_db.assert_called()\n        self.db_creation._destroy_test_db.assert_called_once()\n\n    def test_get_test_db_name(self):\n        self.connection.settings_dict = {\n            'NAME': 'test_db',\n            'TEST': {'NAME': 'custom_test_db'},\n        }\n        self.assertEqual(self.db_creation._get_test_db_name(), 'custom_test_db')\n\n        self.connection.settings_dict['TEST']['NAME'] = ''\n        self.assertEqual(self.db_creation._get_test_db_name(), TEST_DATABASE_PREFIX + 'test_db')\n\n    # Additional tests can be added for other methods in the class\n"], "sample_338": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.questioner import MigrationQuestioner\nfrom django.db.migrations.state import ProjectState\n\nclass TestMigrationAutodetector(unittest.TestCase):\n    def setUp(self):\n        self.from_state = ProjectState()\n        self.to_state = ProjectState()\n        self.questioner = MigrationQuestioner()\n        self.autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n\n    def test_changes(self):\n        # Test the changes method with different scenarios\n        # Mock the necessary methods and assert the expected results\n        pass\n\n    def test_deep_deconstruct(self):\n        # Test the deep_deconstruct method with different types of objects\n        # Assert the expected deconstructed result\n        pass\n\n    def test_only_relation_agnostic_fields(self):\n        # Test the only_relation_agnostic_fields method with different fields\n        # Assert the expected relation-agnostic fields\n        pass\n\n    def test_detect_changes(self):\n        # Test the _detect_changes method with different project states\n        # Mock the necessary methods and assert the expected changes\n        pass\n\n    def test_prepare_field_lists(self):\n        # Test the _prepare_field_lists method with different project states\n        # Assert the expected field lists\n        pass\n\n    # Add more test methods for other methods in MigrationAutodetector\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_497": ["\nimport unittest\nfrom unittest.mock import MagicMock\nimport matplotlib\nmatplotlib.use('Agg')  # Use non-interactive backend\nimport matplotlib.pyplot as plt\nimport matplotlib.axis as axis\nimport matplotlib.ticker as mticker\n\nclass TestAxis(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.axis = self.ax.xaxis\n\n    def test_set_label_text(self):\n        self.axis.set_label_text('Test Label')\n        self.assertEqual(self.axis.get_label_text(), 'Test Label')\n\n    def test_set_major_formatter(self):\n        formatter = mticker.FormatStrFormatter('%.2f')\n        self.axis.set_major_formatter(formatter)\n        self.assertIsInstance(self.axis.get_major_formatter(), mticker.FormatStrFormatter)\n\n    def test_set_minor_formatter(self):\n        formatter = mticker.FormatStrFormatter('%.2f')\n        self.axis.set_minor_formatter(formatter)\n        self.assertIsInstance(self.axis.get_minor_formatter(), mticker.FormatStrFormatter)\n\n    def test_set_major_locator(self):\n        locator = mticker.MultipleLocator(2)\n        self.axis.set_major_locator(locator)\n        self.assertIsInstance(self.axis.get_major_locator(), mticker.MultipleLocator)\n\n    def test_set_minor_locator(self):\n        locator = mticker.MultipleLocator(1)\n        self.axis.set_minor_locator(locator)\n        self.assertIsInstance(self.axis.get_minor_locator(), mticker.MultipleLocator)\n\n    def test_set_ticks(self):\n        ticks = [1, 2, 3, 4, 5]\n        self.axis.set_ticks(ticks)\n        self.assertEqual(self.axis.get_ticklocs(), ticks)\n\n    def test_set_ticklabels(self):\n        labels = ['one', 'two', 'three', 'four', 'five']\n        self.axis.set_ticklabels(labels)\n        ticklabels = [tick.label1.get_text() for tick in self.axis.get_major_ticks()]\n        self.assertEqual(ticklabels, labels)\n\n    def test_set_label_position(self):\n        self.axis.set_label_position('top')\n        self.assertEqual(self.axis.get_label_position(), 'top')\n\n    def test_set_ticks_position(self):\n        self.axis.set_ticks_position('both')\n        self.assertEqual(self.axis.get_ticks_position(), 'both')\n\n    def test_contains(self):\n        mock_event = MagicMock()\n        mock_event.x, mock_event.y = self.fig.transFigure.transform((0.5, 0.5))\n        self.assertTrue(self.axis.contains(mock_event))\n\n    # Add more tests as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_46": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.models import F, Q, Value, IntegerField, CharField, DateTimeField, UUIDField\nfrom django.db.models.functions import Replace\nfrom django.db.models.lookups import (\n    Exact, IExact, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual,\n    IntegerGreaterThanOrEqual, IntegerLessThan, In, Contains, IContains,\n    StartsWith, IStartsWith, EndsWith, IEndsWith, Range, IsNull, Regex, IRegex,\n    YearExact, YearGt, YearGte, YearLt, YearLte, UUIDIExact, UUIDContains,\n    UUIDIContains, UUIDStartsWith, UUIDIStartsWith, UUIDEndsWith, UUIDIEndsWith,\n)\n\nclass LookupsTest(unittest.TestCase):\n    def setUp(self):\n        self.connection = MagicMock()\n        self.compiler = MagicMock()\n\n    def test_exact_lookup(self):\n        lookup = Exact(F('field'), 'value')\n        sql, params = lookup.as_sql(self.compiler, self.connection)\n        self.assertEqual(sql, 'field = %s')\n        self.assertEqual(params, ['value'])\n\n    def test_iexact_lookup(self):\n        lookup = IExact(F('field'), 'Value')\n        sql, params = lookup.as_sql(self.compiler, self.connection)\n        self.assertEqual(sql, 'UPPER(field) = UPPER(%s)')\n        self.assertEqual(params, ['Value'])\n\n    # Add more tests for other lookup classes...\n\n    # Mocking some methods for testing UUIDTextMixin\n    @patch('django.db.models.functions.Replace')\n    def test_uuidiexact_lookup(self, mock_replace):\n        self.connection.features.has_native_uuid_field = False\n        lookup = UUIDIExact(F('field'), '123e4567-e89b-12d3-a456-426614174000')\n        sql, params = lookup.as_sql(self.compiler, self.connection)\n        mock_replace.assert_called_once_with(Value('123e4567-e89b-12d3-a456-426614174000'), Value('-'), Value(''), output_field=CharField())\n\n    # Add more tests for other lookup classes...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_974": ["\nimport unittest\nfrom sympy import symbols, sin, cos, exp, log, Integral, Sum, Derivative\nfrom sympy.printing.mathematica import mathematica_code\n\nclass TestMathematicaCode(unittest.TestCase):\n    def setUp(self):\n        self.x = symbols('x')\n\n    def test_sin_function(self):\n        self.assertEqual(mathematica_code(sin(self.x)), 'Sin[x]')\n\n    def test_cos_function(self):\n        self.assertEqual(mathematica_code(cos(self.x)), 'Cos[x]')\n\n    def test_exp_function(self):\n        self.assertEqual(mathematica_code(exp(self.x)), 'Exp[x]')\n\n    def test_log_function(self):\n        self.assertEqual(mathematica_code(log(self.x)), 'Log[x]')\n\n    def test_integral_function(self):\n        self.assertEqual(mathematica_code(Integral(sin(self.x), self.x)), 'Hold[Integrate[sin(x), x]]')\n\n    def test_sum_function(self):\n        self.assertEqual(mathematica_code(Sum(self.x, (self.x, 1, 5))), 'Hold[Sum[x, (x, 1, 5)]]')\n\n    def test_derivative_function(self):\n        self.assertEqual(mathematica_code(Derivative(sin(self.x), self.x)), 'Hold[D[sin(x), x]]')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_463": ["\nimport unittest\nfrom unittest.mock import Mock, patch\n\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.questioner import MigrationQuestioner\nfrom django.db.migrations.state import ProjectState\n\nclass TestMigrationAutodetector(unittest.TestCase):\n    def setUp(self):\n        self.from_state = Mock(spec=ProjectState)\n        self.to_state = Mock(spec=ProjectState)\n        self.questioner = Mock(spec=MigrationQuestioner)\n        self.autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n\n    def test_changes(self):\n        graph = Mock()\n        trim_to_apps = ['test_app']\n        convert_apps = None\n        migration_name = None\n        with patch.object(self.autodetector, '_detect_changes', return_value={}) as mock_detect_changes:\n            self.autodetector.changes(graph, trim_to_apps, convert_apps, migration_name)\n            mock_detect_changes.assert_called_once_with(convert_apps, graph)\n        # Add more assertions based on the expected behavior\n\n    def test_deep_deconstruct(self):\n        obj = Mock()\n        with patch.object(obj, 'deconstruct', return_value=('path', [], {})) as mock_deconstruct:\n            self.autodetector.deep_deconstruct(obj)\n            mock_deconstruct.assert_called_once()\n        # Add more assertions based on the expected behavior\n\n    # Add more test methods for other functionalities in MigrationAutodetector\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_440": ["\nfrom django.test import TestCase\nfrom django.db.models.query import QuerySet, RawQuerySet, Prefetch\nfrom .models import YourModel  # replace with your actual model\n\nclass TestQuerySetMethods(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        # Set up non-modified objects used by all test methods\n        YourModel.objects.create(name='Test1', value=10)\n        YourModel.objects.create(name='Test2', value=20)\n\n    def test_filter(self):\n        qs = YourModel.objects.filter(value=10)\n        self.assertEqual(qs.count(), 1)\n        self.assertEqual(qs.first().name, 'Test1')\n\n    def test_exclude(self):\n        qs = YourModel.objects.exclude(value=10)\n        self.assertEqual(qs.count(), 1)\n        self.assertEqual(qs.first().name, 'Test2')\n\n    def test_annotate(self):\n        qs = YourModel.objects.annotate(lower_name=Lower('name'))\n        self.assertEqual(qs.first().lower_name, 'test1')\n\n    def test_order_by(self):\n        qs = YourModel.objects.order_by('-value')\n        self.assertEqual(qs.first().name, 'Test2')\n\n    def test_distinct(self):\n        YourModel.objects.create(name='Test1', value=10)  # duplicate\n        qs = YourModel.objects.distinct('name')\n        self.assertEqual(qs.count(), 2)\n        qs = YourModel.objects.distinct('value')\n        self.assertEqual(qs.count(), 1)\n\n    def test_values(self):\n        qs = YourModel.objects.values('name')\n        self.assertEqual(list(qs), [{'name': 'Test1'}, {'name': 'Test2'}])\n\n    def test_values_list(self):\n        qs = YourModel.objects.values_list('name', flat=True)\n        self.assertEqual(list(qs), ['Test1', 'Test2'])\n\n    def test_prefetch_related(self):\n        # Assuming a related model 'related_model'\n        qs = YourModel.objects.prefetch_related('related_model')\n        self.assertIsNotNone(qs.first()._prefetched_objects_cache.get('related_model'))\n\n    # Add more tests as needed\n\nclass TestRawQuerySetMethods(TestCase):\n    def test_raw_query(self):\n        qs = YourModel.objects.raw('SELECT * FROM your_model_table WHERE value > %s', params=[15])\n        self.assertEqual(list(qs), [])  # assuming no values greater than 15\n\n    # Add more tests as needed\n\nclass TestPrefetchMethods(TestCase):\n    def test_prefetch_equality(self):\n        p1 = Prefetch('related_model')\n        p2 = Prefetch('related_model')\n        self.assertEqual(p1, p2)\n\n    # Add more tests as needed\n"], "sample_177": ["\nfrom django.db import models\nfrom django.db.migrations.state import ProjectState, StateApps, ModelState\nfrom django.test import TestCase\nfrom django.test.utils import isolate_apps\n\nclass TestProjectState(TestCase):\n\n    def setUp(self):\n        self.model_state = ModelState(\n            'test_app',\n            'TestModel',\n            fields=[('name', models.CharField(max_length=20))],\n        )\n        self.project_state = ProjectState(\n            models={'test_app': {'testmodel': self.model_state}},\n            real_apps=['test_app'],\n        )\n\n    def test_add_model(self):\n        new_model_state = ModelState(\n            'new_app',\n            'NewModel',\n            fields=[('name', models.CharField(max_length=20))],\n        )\n        self.project_state.add_model(new_model_state)\n        self.assertIn(('new_app', 'newmodel'), self.project_state.models)\n\n    def test_remove_model(self):\n        self.project_state.remove_model('test_app', 'testmodel')\n        self.assertNotIn(('test_app', 'testmodel'), self.project_state.models)\n\nclass TestStateApps(TestCase):\n\n    def setUp(self):\n        self.model_state = ModelState(\n            'test_app',\n            'TestModel',\n            fields=[('name', models.CharField(max_length=20))],\n        )\n        self.state_apps = StateApps(\n            real_apps=['test_app'],\n            models={'test_app': {'testmodel': self.model_state}},\n        )\n\n    def test_render_multiple(self):\n        # Test that the method renders multiple models correctly\n        pass\n\n    def test_clone(self):\n        # Test that the method creates a deep copy of the object\n        pass\n\n    def test_register_model(self):\n        # Test that the method registers a new model correctly\n        pass\n\n    def test_unregister_model(self):\n        # Test that the method unregisters a model correctly\n        pass\n\nclass TestModelState(TestCase):\n\n    def setUp(self):\n        self.model_state = ModelState(\n            'test_app',\n            'TestModel',\n            fields=[('name', models.CharField(max_length=20))],\n        )\n\n    def test_from_model(self):\n        # Test that the method correctly constructs a ModelState from a model\n        pass\n\n    def test_construct_managers(self):\n        # Test that the method correctly constructs managers\n        pass\n\n    def test_clone(self):\n        # Test that the method creates a deep copy of the object\n        pass\n\n    def test_render(self):\n        # Test that the method correctly renders a model\n        pass\n\n    def test_get_index_by_name(self):\n        # Test that the method correctly retrieves an index by name\n        pass\n\n    def test_get_constraint_by_name(self):\n        # Test that the method correctly retrieves a constraint by name\n        pass\n"], "sample_851": ["\nimport unittest\nimport numpy as np\nfrom sklearn.compose import TransformedTargetRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import FunctionTransformer\n\nclass TestTransformedTargetRegressor(unittest.TestCase):\n    def setUp(self):\n        self.X = np.arange(4).reshape(-1, 1)\n        self.y = np.exp(2 * self.X).ravel()\n        self.regressor = LinearRegression()\n\n    def test_fit_predict(self):\n        tt = TransformedTargetRegressor(regressor=self.regressor,\n                                        func=np.log, inverse_func=np.exp)\n        tt.fit(self.X, self.y)\n        self.assertEqual(tt.score(self.X, self.y), 1.0)\n        np.testing.assert_array_almost_equal(tt.regressor_.coef_, [2.0])\n\n    def test_transformer(self):\n        transformer = FunctionTransformer(func=np.log, inverse_func=np.exp, validate=True)\n        tt = TransformedTargetRegressor(regressor=self.regressor, transformer=transformer)\n        tt.fit(self.X, self.y)\n        self.assertEqual(tt.score(self.X, self.y), 1.0)\n        np.testing.assert_array_almost_equal(tt.regressor_.coef_, [2.0])\n\n    def test_invalid_transformer(self):\n        transformer = FunctionTransformer(func=np.log, inverse_func=np.log, validate=True)\n        with self.assertRaises(UserWarning):\n            tt = TransformedTargetRegressor(regressor=self.regressor, transformer=transformer)\n            tt.fit(self.X, self.y)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_936": ["\nimport unittest\nfrom unittest.mock import Mock, patch, mock_open\nfrom sphinx.builders import gettext\n\nclass TestGettextBuilder(unittest.TestCase):\n    def setUp(self):\n        self.app = Mock()\n        self.builder = gettext.MessageCatalogBuilder(self.app)\n\n    def test_init(self):\n        self.builder.init()\n        self.assertEqual(self.builder.name, 'gettext')\n        self.assertIsInstance(self.builder.tags, gettext.I18nTags)\n        self.assertIsInstance(self.builder.catalogs, dict)\n\n    def test_get_outdated_docs(self):\n        self.builder.env = Mock()\n        self.builder.env.found_docs = ['doc1', 'doc2']\n        self.assertEqual(self.builder.get_outdated_docs(), {'doc1', 'doc2'})\n\n    @patch('sphinx.builders.gettext.open', new_callable=mock_open, read_data='old data')\n    def test_should_write(self, mock_file):\n        self.assertTrue(gettext.should_write('nonexistent_file', 'new data'))\n        self.assertTrue(gettext.should_write('existing_file', 'different data'))\n        self.assertFalse(gettext.should_write('existing_file', 'old data'))\n\n    @patch('sphinx.builders.gettext.MessageCatalogBuilder._extract_from_template')\n    @patch('sphinx.builders.gettext.I18nBuilder.build')\n    def test_build(self, mock_super_build, mock_extract):\n        self.builder.build(['doc1'], 'summary', 'method')\n        mock_extract.assert_called_once()\n        mock_super_build.assert_called_once_with(['doc1'], 'summary', 'method')\n\n    @patch('sphinx.builders.gettext.GettextRenderer.render')\n    @patch('sphinx.builders.gettext.open', new_callable=mock_open)\n    @patch('sphinx.builders.gettext.should_write', return_value=True)\n    def test_finish(self, mock_should_write, mock_file, mock_render):\n        self.builder.catalogs = {'domain': Mock()}\n        self.builder.finish()\n        mock_should_write.assert_called()\n        mock_file.assert_called()\n        mock_render.assert_called()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_424": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db import models\nfrom django.db.migrations.operations import models as migration_models\n\nclass TestMigrationsModels(unittest.TestCase):\n    def setUp(self):\n        self.mock_schema_editor = MagicMock()\n\n    def test_create_model(self):\n        operation = migration_models.CreateModel(\n            name='TestModel',\n            fields=[\n                ('name', models.CharField(max_length=100)),\n            ],\n        )\n        self.assertEqual(operation.name, 'TestModel')\n        self.assertEqual(len(operation.fields), 1)\n\n    def test_delete_model(self):\n        operation = migration_models.DeleteModel(name='TestModel')\n        self.assertEqual(operation.name, 'TestModel')\n\n    def test_rename_model(self):\n        operation = migration_models.RenameModel(old_name='OldModel', new_name='NewModel')\n        self.assertEqual(operation.old_name, 'OldModel')\n        self.assertEqual(operation.new_name, 'NewModel')\n\n    def test_alter_model_table(self):\n        operation = migration_models.AlterModelTable(name='TestModel', table='new_table')\n        self.assertEqual(operation.name, 'TestModel')\n        self.assertEqual(operation.table, 'new_table')\n\n    def test_alter_unique_together(self):\n        operation = migration_models.AlterUniqueTogether(name='TestModel', unique_together={('name', 'email')})\n        self.assertEqual(operation.name, 'TestModel')\n        self.assertEqual(operation.unique_together, {('name', 'email')})\n\n    def test_alter_index_together(self):\n        operation = migration_models.AlterIndexTogether(name='TestModel', index_together={('name', 'email')})\n        self.assertEqual(operation.name, 'TestModel')\n        self.assertEqual(operation.index_together, {('name', 'email')})\n\n    def test_alter_order_with_respect_to(self):\n        operation = migration_models.AlterOrderWithRespectTo(name='TestModel', order_with_respect_to='AnotherModel')\n        self.assertEqual(operation.name, 'TestModel')\n        self.assertEqual(operation.order_with_respect_to, 'AnotherModel')\n\n    def test_alter_model_options(self):\n        operation = migration_models.AlterModelOptions(name='TestModel', options={'verbose_name': 'Test Model'})\n        self.assertEqual(operation.name, 'TestModel')\n        self.assertEqual(operation.options, {'verbose_name': 'Test Model'})\n\n    def test_alter_model_managers(self):\n        operation = migration_models.AlterModelManagers(name='TestModel', managers=[('custom_manager', 'CustomManager')])\n        self.assertEqual(operation.name, 'TestModel')\n        self.assertEqual(operation.managers, [('custom_manager', 'CustomManager')])\n\n    def test_add_index(self):\n        index = models.Index(fields=['name'], name='idx_test_name')\n        operation = migration_models.AddIndex(model_name='TestModel', index=index)\n        self.assertEqual(operation.model_name, 'TestModel')\n        self.assertEqual(operation.index, index)\n\n    def test_remove_index(self):\n        operation = migration_models.RemoveIndex(model_name='TestModel', name='idx_test_name')\n        self.assertEqual(operation.model_name, 'TestModel')\n        self.assertEqual(operation.name, 'idx_test_name')\n\n    def test_rename_index(self):\n        operation = migration_models.RenameIndex(model_name='TestModel', new_name='new_index_name', old_name='old_index_name')\n        self.assertEqual(operation.model_name, 'TestModel')\n        self.assertEqual(operation.new_name, 'new_index_name')\n        self.assertEqual(operation.old_name, 'old_index_name')\n\n    def test_add_constraint(self):\n        constraint = models.CheckConstraint(check=models.Q(age__gte=18), name='age_gte_18')\n        operation = migration_models.AddConstraint(model_name='TestModel', constraint=constraint)\n        self.assertEqual(operation.model_name, 'TestModel')\n        self.assertEqual(operation.constraint, constraint)\n\n    def test_remove_constraint(self):\n        operation = migration_models.RemoveConstraint(model_name='TestModel', name='age_gte_18')\n        self.assertEqual(operation.model_name, 'TestModel')\n        self.assertEqual(operation.name, 'age_gte_18')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_326": ["\nimport unittest\nfrom django.utils.html import (\n    conditional_escape, escape, escapejs, format_html, html_safe, json_script,\n    linebreaks, smart_urlquote, strip_spaces_between_tags, strip_tags, urlize,\n)\nfrom django.utils.safestring import SafeString\n\nclass TestHTMLUtilities(unittest.TestCase):\n    def test_escape(self):\n        self.assertEqual(escape('<script>alert(\"hello\");</script>'), \"&lt;script&gt;alert(&quot;hello&quot;);&lt;/script&gt;\")\n\n    def test_escapejs(self):\n        self.assertEqual(escapejs('<script>alert(\"hello\");</script>'), \"\\\\u003Cscript\\\\u003Ealert(\\\\u0022hello\\\\u0022);\\\\u003C/script\\\\u003E\")\n\n    def test_conditional_escape(self):\n        self.assertEqual(conditional_escape('<script>alert(\"hello\");</script>'), \"&lt;script&gt;alert(&quot;hello&quot;);&lt;/script&gt;\")\n        self.assertEqual(conditional_escape(SafeString('<script>alert(\"hello\");</script>')), \"<script>alert(&quot;hello&quot;);</script>\")\n\n    def test_format_html(self):\n        self.assertEqual(format_html('Hello, {}!', 'world'), \"Hello, world!\")\n\n    def test_linebreaks(self):\n        self.assertEqual(linebreaks(\"Hello\\n\\nworld\"), \"<p>Hello</p>\\n\\n<p>world</p>\")\n\n    def test_strip_tags(self):\n        self.assertEqual(strip_tags(\"<p>Hello, world!</p>\"), \"Hello, world!\")\n\n    def test_strip_spaces_between_tags(self):\n        self.assertEqual(strip_spaces_between_tags(\"<p>Hello, </p> <p>world!</p>\"), \"<p>Hello, </p><p>world!</p>\")\n\n    def test_smart_urlquote(self):\n        self.assertEqual(smart_urlquote(\"http://www.example.com/?q=hello world\"), \"http://www.example.com/?q=hello%20world\")\n\n    def test_urlize(self):\n        self.assertEqual(urlize(\"Visit http://www.example.com.\"), 'Visit <a href=\"http://www.example.com\">http://www.example.com</a>.')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_351": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.forms import ValidationError\nfrom django.forms.models import (\n    ModelForm, ModelChoiceIterator, ModelChoiceIteratorValue, ModelChoiceField, ModelMultipleChoiceField,\n    BaseModelFormSet, BaseInlineFormSet, inlineformset_factory, _get_foreign_key,\n    construct_instance, model_to_dict, fields_for_model, modelform_factory, modelformset_factory,\n    InlineForeignKeyField, modelform_defines_fields\n)\nfrom django.db.models import QuerySet, ForeignKey, AutoField, OneToOneField, Model, IntegerField\n\nclass TestModelForms(unittest.TestCase):\n    def setUp(self):\n        self.mock_model = MagicMock(spec=Model)\n        self.mock_model._meta.fields = [MagicMock(spec=IntegerField)]\n        self.mock_model._meta.private_fields = []\n        self.mock_model._meta.many_to_many = []\n\n    def test_construct_instance(self):\n        form = MagicMock()\n        instance = MagicMock()\n        construct_instance(form, instance)\n        # Add more assertions to test the functionality\n\n    def test_model_to_dict(self):\n        instance = MagicMock()\n        model_to_dict(instance)\n        # Add more assertions to test the functionality\n\n    def test_fields_for_model(self):\n        fields_for_model(self.mock_model)\n        # Add more assertions to test the functionality\n\n    # Add more test cases for other functions\n\nclass TestModelChoiceIterator(unittest.TestCase):\n    def test_iterator(self):\n        field = MagicMock()\n        iterator = ModelChoiceIterator(field)\n        # Add more assertions to test the functionality\n\nclass TestModelChoiceField(unittest.TestCase):\n    def test_to_python(self):\n        field = ModelChoiceField(queryset=QuerySet())\n        with self.assertRaises(ValidationError):\n            field.to_python(\"invalid_value\")\n        # Add more assertions to test the functionality\n\nclass TestModelMultipleChoiceField(unittest.TestCase):\n    def test_clean(self):\n        field = ModelMultipleChoiceField(queryset=QuerySet())\n        with self.assertRaises(ValidationError):\n            field.clean(\"invalid_value\")\n        # Add more assertions to test the functionality\n\nclass TestModelFormSet(unittest.TestCase):\n    def test_save(self):\n        formset = BaseModelFormSet(data={}, files={})\n        formset.save()\n        # Add more assertions to test the functionality\n\nclass TestInlineFormSet(unittest.TestCase):\n    def test_save_new(self):\n        formset = BaseInlineFormSet(data={}, files={})\n        form = MagicMock()\n        formset.save_new(form)\n        # Add more assertions to test the functionality\n\nclass TestForeignKeyFunctions(unittest.TestCase):\n    def test_get_foreign_key(self):\n        parent_model = MagicMock(spec=Model)\n        model = MagicMock(spec=Model)\n        _get_foreign_key(parent_model, model)\n        # Add more assertions to test the functionality\n\n    def test_inlineformset_factory(self):\n        parent_model = MagicMock(spec=Model)\n        model = MagicMock(spec=Model)\n        inlineformset_factory(parent_model, model)\n        # Add more assertions to test the functionality\n\nclass TestInlineForeignKeyField(unittest.TestCase):\n    def test_clean(self):\n        field = InlineForeignKeyField(parent_instance=None)\n        with self.assertRaises(ValidationError):\n            field.clean(\"invalid_value\")\n        # Add more assertions to test the functionality\n\nclass TestMiscFunctions(unittest.TestCase):\n    def test_modelform_defines_fields(self):\n        form_class = MagicMock()\n        modelform_defines_fields(form_class)\n        # Add more assertions to test the functionality\n"], "sample_448": ["\nfrom django.test import TestCase\nfrom django.db.models import Q, F\nfrom django.db.models.constraints import CheckConstraint, UniqueConstraint, Deferrable\nfrom .models import Product  # Assuming the Product model is in the same directory\n\nclass TestConstraints(TestCase):\n    def setUp(self):\n        # Create test data\n        self.product1 = Product.objects.create(name='Product 1', price=100)\n        self.product2 = Product.objects.create(name='Product 2', price=200)\n\n    def test_check_constraint(self):\n        constraint = CheckConstraint(check=Q(price__gte=0), name='price_non_negative')\n        self.assertEqual(constraint.name, 'price_non_negative')\n        self.assertEqual(str(constraint), \"<CheckConstraint: check=Q(price__gte=0) name='price_non_negative'>\")\n\n        # Test validation\n        with self.assertRaises(ValidationError):\n            self.product1.price = -100\n            self.product1.full_clean()\n\n    def test_unique_constraint(self):\n        constraint = UniqueConstraint(fields=['name'], name='unique_product_name')\n        self.assertEqual(constraint.name, 'unique_product_name')\n        self.assertEqual(str(constraint), \"<UniqueConstraint: fields=('name',) name='unique_product_name'>\")\n\n        # Test validation\n        with self.assertRaises(ValidationError):\n            self.product2.name = 'Product 1'\n            self.product2.full_clean()\n\n    def test_unique_constraint_deferrable(self):\n        constraint = UniqueConstraint(fields=['name'], name='deferrable_unique_product_name', deferrable=Deferrable.DEFERRED)\n        self.assertEqual(constraint.deferrable, Deferrable.DEFERRED)\n        self.assertEqual(str(constraint), \"<UniqueConstraint: fields=('name',) name='deferrable_unique_product_name' deferrable=<Deferrable.DEFERRED>>\")\n\n        # Test validation (deferrable constraints are not enforced during model validation)\n        self.product2.name = 'Product 1'\n        self.product2.full_clean()\n\n    def test_unique_constraint_include(self):\n        constraint = UniqueConstraint(fields=['name'], name='unique_product_name_with_include', include=['price'])\n        self.assertEqual(constraint.include, ('price',))\n        self.assertEqual(str(constraint), \"<UniqueConstraint: fields=('name',) name='unique_product_name_with_include' include=('price',)>\")\n\n        # Test validation (include fields are not considered for uniqueness)\n        self.product2.name = 'Product 1'\n        self.product2.price = 300\n        self.product2.full_clean()\n\n    def test_unique_constraint_expressions(self):\n        constraint = UniqueConstraint(expressions=[F('name') + ' ' + F('description')], name='unique_product_name_description')\n        self.assertEqual(constraint.expressions, (F('name') + ' ' + F('description'),))\n        self.assertEqual(str(constraint), \"<UniqueConstraint: expressions=(F(name) + Value(' ') + F(description),) name='unique_product_name_description'>\")\n\n        # Test validation (expressions are considered for uniqueness)\n        with self.assertRaises(ValidationError):\n            self.product2.description = 'Product 1'\n            self.product2.full_clean()\n"], "sample_17": ["\nimport unittest\nimport numpy as np\nfrom numpy.testing import assert_array_equal\nfrom astropy.units import Quantity\nfrom astropy.units.quantity_helper.function_helpers import *\n\nclass TestFunctionHelpers(unittest.TestCase):\n    def test_invariant_a_helper(self):\n        q = Quantity([1, 2, 3], unit=\"m\")\n        result, _, unit, _ = invariant_a_helper(q)\n        assert_array_equal(result[0], q.value)\n        self.assertEqual(unit, q.unit)\n\n    def test_invariant_m_helper(self):\n        q = Quantity([[1, 2], [3, 4]], unit=\"m\")\n        result, _, unit, _ = invariant_m_helper(q)\n        assert_array_equal(result[0], q.value)\n        self.assertEqual(unit, q.unit)\n\n    # Add more tests for other functions in function_helpers.py\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_757": ["\nimport unittest\nfrom unittest.mock import Mock\n\nimport numpy as np\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics.scorer import (make_scorer, _PredictScorer, _ProbaScorer, _ThresholdScorer,\n                                    check_scoring, _check_multimetric_scoring, get_scorer, SCORERS)\nfrom sklearn.exceptions import NotFittedError\n\nclass TestScorer(unittest.TestCase):\n\n    def setUp(self):\n        self.y_true = np.array([0, 1, 1, 0])\n        self.y_pred = np.array([0, 1, 0, 1])\n        self.estimator = Mock()\n        self.estimator.predict.return_value = self.y_pred\n\n    def test_make_scorer(self):\n        scorer = make_scorer(mean_squared_error, greater_is_better=False)\n        self.assertIsInstance(scorer, _PredictScorer)\n        self.assertEqual(scorer(self.estimator, None, self.y_true), 0.5)\n\n    def test_check_scoring(self):\n        self.assertEqual(check_scoring(self.estimator, None), None)\n        self.assertRaises(TypeError, check_scoring, \"not an estimator\", None)\n        self.assertRaises(ValueError, check_scoring, self.estimator, \"not a scoring function\")\n        self.assertEqual(check_scoring(self.estimator, \"accuracy\"), SCORERS[\"accuracy\"])\n\n    def test_get_scorer(self):\n        self.assertEqual(get_scorer(\"accuracy\"), SCORERS[\"accuracy\"])\n        self.assertRaises(ValueError, get_scorer, \"not a scoring function\")\n\n    def test_proba_scorer(self):\n        self.estimator.predict_proba.return_value = np.array([[0.1, 0.9], [0.9, 0.1], [0.8, 0.2], [0.3, 0.7]])\n        scorer = make_scorer(mean_squared_error, greater_is_better=False, needs_proba=True)\n        self.assertIsInstance(scorer, _ProbaScorer)\n        self.assertAlmostEqual(scorer(self.estimator, None, self.y_true), 0.1225)\n\n    def test_threshold_scorer(self):\n        self.estimator.decision_function.return_value = np.array([-1, 1, -1, 1])\n        scorer = make_scorer(mean_squared_error, greater_is_better=False, needs_threshold=True)\n        self.assertIsInstance(scorer, _ThresholdScorer)\n        self.assertEqual(scorer(self.estimator, None, self.y_true), 1.0)\n\n    def test_check_multimetric_scoring(self):\n        scoring = {\"accuracy\": SCORERS[\"accuracy\"], \"precision\": SCORERS[\"precision\"]}\n        scorers, is_multimetric = _check_multimetric_scoring(self.estimator, scoring)\n        self.assertTrue(is_multimetric)\n        self.assertEqual(len(scorers), 2)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_653": ["\nimport pytest\nimport inspect\nimport warnings\nfrom _pytest.mark.structures import ParameterSet, Mark, MarkDecorator, get_unpacked_marks, normalize_mark_list, store_mark, MarkGenerator, NodeKeywords, NodeMarkers\nfrom _pytest.compat import NOTSET\nfrom _pytest.nodes import Collector\n\ndef test_ParameterSet_param():\n    param = ParameterSet.param(1, 2, marks=[Mark('mark1')], id='test')\n    assert param.values == (1, 2)\n    assert param.marks == [Mark('mark1')]\n    assert param.id == 'test'\n\ndef test_ParameterSet_extract_from():\n    param = ParameterSet.extract_from((1, 2))\n    assert param.values == (1, 2)\n    assert param.marks == []\n    assert param.id is None\n\ndef test_ParameterSet_for_parametrize():\n    argnames, parameters = ParameterSet._for_parametrize('a, b', [(1, 2), (3, 4)], lambda: None, pytest.config, pytest.function)\n    assert argnames == ['a', 'b']\n    assert parameters == [ParameterSet(values=(1, 2), marks=[], id=None), ParameterSet(values=(3, 4), marks=[], id=None)]\n\ndef test_Mark_combined_with():\n    mark1 = Mark('mark1', [1, 2], {'a': 3})\n    mark2 = Mark('mark1', [4, 5], {'b': 6})\n    combined_mark = mark1.combined_with(mark2)\n    assert combined_mark.name == 'mark1'\n    assert combined_mark.args == [1, 2, 4, 5]\n    assert combined_mark.kwargs == {'a': 3, 'b': 6}\n\ndef test_MarkDecorator_with_args():\n    mark_dec = MarkDecorator(Mark('mark1', [1], {'a': 2}))\n    new_mark_dec = mark_dec.with_args(3, b=4)\n    assert new_mark_dec.mark.args == [1, 3]\n    assert new_mark_dec.mark.kwargs == {'a': 2, 'b': 4}\n\ndef test_get_unpacked_marks():\n    class TestClass:\n        pytestmark = [Mark('mark1')]\n    assert get_unpacked_marks(TestClass) == [Mark('mark1')]\n\ndef test_normalize_mark_list():\n    mark_list = [Mark('mark1'), MarkDecorator(Mark('mark2'))]\n    assert normalize_mark_list(mark_list) == [Mark('mark1'), Mark('mark2')]\n\ndef test_store_mark():\n    class TestClass:\n        pass\n    store_mark(TestClass, Mark('mark1'))\n    assert TestClass.pytestmark == [Mark('mark1')]\n\ndef test_MarkGenerator():\n    mark_gen = MarkGenerator()\n    mark = mark_gen.test_mark\n    assert isinstance(mark, MarkDecorator)\n    assert mark.name == 'test_mark'\n\ndef test_NodeKeywords():\n    class Node:\n        name = 'test_node'\n        parent = None\n    node_keywords = NodeKeywords(Node)\n    assert node_keywords['test_node'] == True\n\ndef test_NodeMarkers():\n    node_markers = NodeMarkers()\n    node_markers.update([Mark('mark1'), Mark('mark2')])\n    assert list(node_markers.find('mark1')) == [Mark('mark1')]\n"], "sample_346": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.utils.decorators import (\n    classonlymethod,\n    _update_method_wrapper,\n    _multi_decorate,\n    method_decorator,\n    decorator_from_middleware_with_args,\n    decorator_from_middleware,\n    make_middleware_decorator,\n    sync_and_async_middleware,\n    sync_only_middleware,\n    async_only_middleware,\n)\n\nclass TestDecorators(unittest.TestCase):\n    def test_classonlymethod(self):\n        class TestClass:\n            @classonlymethod\n            def test_method(cls):\n                return \"test\"\n\n        self.assertEqual(TestClass.test_method(), \"test\")\n        with self.assertRaises(AttributeError):\n            TestClass().test_method()\n\n    def test_update_method_wrapper(self):\n        def test_decorator(func):\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs)\n            wrapper.test_attr = \"test\"\n            return wrapper\n\n        @test_decorator\n        def test_func():\n            pass\n\n        _update_method_wrapper(test_func, test_decorator)\n        self.assertTrue(hasattr(test_func, \"test_attr\"))\n\n    def test_multi_decorate(self):\n        def test_decorator1(func):\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs) + \"1\"\n            return wrapper\n\n        def test_decorator2(func):\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs) + \"2\"\n            return wrapper\n\n        def test_func(value):\n            return value\n\n        wrapped_func = _multi_decorate([test_decorator1, test_decorator2], test_func)\n        self.assertEqual(wrapped_func(\"test\"), \"test12\")\n\n    def test_method_decorator(self):\n        def test_decorator(func):\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs) + \"!\"\n            return wrapper\n\n        class TestClass:\n            @method_decorator(test_decorator)\n            def test_method(self):\n                return \"test\"\n\n        self.assertEqual(TestClass().test_method(), \"test!\")\n\n    def test_decorator_from_middleware_with_args(self):\n        def test_middleware(get_response, arg):\n            def middleware(request):\n                response = get_response(request)\n                response.content += arg.encode()\n                return response\n            return middleware\n\n        @decorator_from_middleware_with_args(test_middleware)(\"_test\")\n        def test_view(request):\n            response = Mock()\n            response.content = b\"\"\n            return response\n\n        request = Mock()\n        response = test_view(request)\n        self.assertEqual(response.content, b\"_test\")\n\n    def test_decorator_from_middleware(self):\n        def test_middleware(get_response):\n            def middleware(request):\n                response = get_response(request)\n                response.content += b\"_test\"\n                return response\n            return middleware\n\n        @decorator_from_middleware(test_middleware)\n        def test_view(request):\n            response = Mock()\n            response.content = b\"\"\n            return response\n\n        request = Mock()\n        response = test_view(request)\n        self.assertEqual(response.content, b\"_test\")\n\n    def test_make_middleware_decorator(self):\n        def test_middleware(get_response):\n            def middleware(request):\n                response = get_response(request)\n                response.content += b\"_test\"\n                return response\n            return middleware\n\n        decorator = make_middleware_decorator(test_middleware)\n\n        @decorator\n        def test_view(request):\n            response = Mock()\n            response.content = b\"\"\n            return response\n\n        request = Mock()\n        response = test_view(request)\n        self.assertEqual(response.content, b\"_test\")\n\n    def test_sync_and_async_middleware(self):\n        @sync_and_async_middleware\n        def test_middleware(get_response):\n            def middleware(request):\n                response = get_response(request)\n                response.content += b\"_test\"\n                return response\n            return middleware\n\n        self.assertTrue(test_middleware.sync_capable)\n        self.assertTrue(test_middleware.async_capable)\n\n    def test_sync_only_middleware(self):\n        @sync_only_middleware\n        def test_middleware(get_response):\n            def middleware(request):\n                response = get_response(request)\n                response.content += b\"_test\"\n                return response\n            return middleware\n\n        self.assertTrue(test_middleware.sync_capable)\n        self.assertFalse(test_middleware.async_capable)\n\n    def test_async_only_middleware(self):\n        @async_only_middleware\n        def test_middleware(get_response):\n            def middleware(request):\n                response = get_response(request)\n                response.content += b\"_test\"\n                return response\n            return middleware\n\n        self.assertFalse(test_middleware.sync_capable)\n        self.assertTrue(test_middleware.async_capable)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_922": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom docutils import nodes\nfrom docutils.parsers.rst import directives\nfrom sphinx.addnodes import desc_signature\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.domains.python import (\n    py_sig_re,\n    _parse_annotation,\n    _pseudo_parse_arglist,\n    PythonDomain,\n    PythonModuleIndex,\n    PyXRefRole,\n    PyModule,\n    PyCurrentModule,\n    PyFunction,\n    PyClasslike,\n    PyMethod,\n    PyVariable,\n    PyAttribute,\n    PyDecoratorFunction,\n    PyDecoratorMethod,\n    PyClassMethod,\n    PyStaticMethod,\n    PyObject,\n    filter_meta_fields,\n    builtin_resolver,\n    setup,\n)\n\nclass TestPythonDomain(unittest.TestCase):\n    def setUp(self):\n        self.app = Sphinx(srcdir='.', confdir='.', outdir='.', doctreedir='.', buildername='html')\n        self.env = self.app.env\n        self.domain = PythonDomain(self.env)\n\n    def test_py_sig_re(self):\n        # Add tests for py_sig_re regular expression\n        pass\n\n    def test_parse_annotation(self):\n        # Add tests for _parse_annotation function\n        pass\n\n    def test_pseudo_parse_arglist(self):\n        # Add tests for _pseudo_parse_arglist function\n        pass\n\n    # Add more test methods for other functions and classes\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_314": ["\nfrom django.test import TestCase\nfrom django.contrib.auth.forms import (\n    UserCreationForm, UserChangeForm, AuthenticationForm, PasswordResetForm,\n    SetPasswordForm, PasswordChangeForm, AdminPasswordChangeForm, User\n)\nfrom django.contrib.auth.models import User\n\nclass UserCreationFormTests(TestCase):\n    def test_user_creation_form(self):\n        data = {\n            'username': 'testuser',\n            'password1': 'testpassword',\n            'password2': 'testpassword',\n        }\n        form = UserCreationForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_password_mismatch(self):\n        data = {\n            'username': 'testuser',\n            'password1': 'testpassword',\n            'password2': 'differentpassword',\n        }\n        form = UserCreationForm(data)\n        self.assertFalse(form.is_valid())\n\nclass UserChangeFormTests(TestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n\n    def test_user_change_form(self):\n        data = {\n            'username': 'testuser',\n            'password': self.user.password,\n        }\n        form = UserChangeForm(data, instance=self.user)\n        self.assertTrue(form.is_valid())\n\n# Add similar tests for other form classes\n"], "sample_651": ["\nimport sys\nimport pytest\nfrom _pytest.capture import CaptureManager, CaptureFixture, FDCapture, SysCapture, MultiCapture\n\ndef test_CaptureManager_initialization():\n    capture_manager = CaptureManager(\"fd\")\n    assert capture_manager._method == \"fd\"\n    assert capture_manager._global_capturing is None\n    assert capture_manager._current_item is None\n\ndef test_CaptureManager_global_capturing():\n    capture_manager = CaptureManager(\"fd\")\n    capture_manager.start_global_capturing()\n    assert capture_manager.is_globally_capturing()\n    capture_manager.stop_global_capturing()\n    assert not capture_manager.is_globally_capturing()\n\ndef test_CaptureFixture_initialization():\n    request = pytest.fixture(lambda: None)\n    capture_fixture = CaptureFixture(FDCapture, request)\n    assert capture_fixture.captureclass == FDCapture\n    assert capture_fixture.request == request\n    assert capture_fixture._capture is None\n    assert capture_fixture._captured_out == FDCapture.EMPTY_BUFFER\n    assert capture_fixture._captured_err == FDCapture.EMPTY_BUFFER\n\ndef test_CaptureFixture_start():\n    request = pytest.fixture(lambda: None)\n    capture_fixture = CaptureFixture(FDCapture, request)\n    capture_fixture._start()\n    assert isinstance(capture_fixture._capture, MultiCapture)\n    assert capture_fixture._capture._state == \"started\"\n\ndef test_SysCapture_initialization():\n    sys_capture = SysCapture(1)\n    assert sys_capture.name == \"stdout\"\n    assert sys_capture._old == sys.stdout\n    assert sys_capture._state is None\n"], "sample_452": ["\nimport json\nfrom unittest.mock import MagicMock\n\nfrom django.contrib.admin.templatetags.admin_modify import prepopulated_fields_js, submit_row, cell_count\nfrom django.test import TestCase\nfrom django.template.context import Context\n\nclass AdminModifyTests(TestCase):\n    def test_prepopulated_fields_js(self):\n        context = Context({\n            'adminform': MagicMock(prepopulated_fields=[{'field': MagicMock(auto_id='field1', name='field1', field=MagicMock(max_length=10)), 'dependencies': [MagicMock(auto_id='dep1', name='dep1')]}]),\n            'inline_admin_formsets': [[MagicMock(original=None, prepopulated_fields=[{'field': MagicMock(auto_id='field2', name='field2', field=MagicMock(max_length=20)), 'dependencies': [MagicMock(auto_id='dep2', name='dep2')]}])]]\n        })\n        result = prepopulated_fields_js(context)\n        self.assertEqual(result['prepopulated_fields_json'], json.dumps([{'id': '#field1', 'name': 'field1', 'dependency_ids': ['#dep1'], 'dependency_list': ['dep1'], 'maxLength': 10, 'allowUnicode': False}, {'id': '#field2', 'name': 'field2', 'dependency_ids': ['#dep2'], 'dependency_list': ['dep2'], 'maxLength': 20, 'allowUnicode': False}]))\n\n    def test_submit_row(self):\n        context = Context({\n            'add': True,\n            'change': True,\n            'is_popup': False,\n            'save_as': True,\n            'has_add_permission': True,\n            'has_change_permission': True,\n            'has_view_permission': True,\n            'has_editable_inline_admin_formsets': True,\n            'has_delete_permission': True\n        })\n        result = submit_row(context)\n        self.assertTrue(result['show_save_and_add_another'])\n        self.assertTrue(result['show_save_and_continue'])\n        self.assertTrue(result['show_delete_link'])\n        self.assertTrue(result['show_save_as_new'])\n\n    def test_cell_count(self):\n        inline_admin_form = MagicMock(\n            formset=MagicMock(can_delete=True),\n            __iter__=MagicMock(return_value=[[MagicMock(field=MagicMock(is_hidden=False)), MagicMock(field=MagicMock(is_hidden=True))]])\n        )\n        self.assertEqual(cell_count(inline_admin_form), 3)\n"], "sample_170": ["\nfrom unittest.mock import Mock, patch\nfrom io import StringIO\nfrom django.core.management import CommandError, call_command\nfrom django.core.management.commands import migrate\nfrom django.test import TestCase\nfrom django.apps import apps\nfrom django.db import connections, DEFAULT_DB_ALIAS\nfrom django.db.migrations.executor import MigrationExecutor\nfrom django.db.migrations.loader import AmbiguityError\n\nclass MigrateCommandTests(TestCase):\n    @patch('django.core.management.commands.migrate.MigrationExecutor')\n    @patch('django.core.management.commands.migrate.emit_pre_migrate_signal')\n    @patch('django.core.management.commands.migrate.emit_post_migrate_signal')\n    def test_handle_method(self, mock_post_signal, mock_pre_signal, mock_executor):\n        out = StringIO()\n        command = migrate.Command()\n        command.stdout = out\n        options = {\n            'database': DEFAULT_DB_ALIAS,\n            'skip_checks': False,\n            'verbosity': 1,\n            'interactive': True,\n            'app_label': None,\n            'migration_name': None,\n            'run_syncdb': False,\n            'fake': False,\n            'fake_initial': False,\n            'plan': False,\n            'check_unapplied': False,\n        }\n        command.handle(**options)\n        # Add assertions to check if the methods are called with the correct arguments\n\n    @patch('django.core.management.commands.migrate.MigrationExecutor')\n    def test_sync_apps_method(self, mock_executor):\n        command = migrate.Command()\n        connection = connections[DEFAULT_DB_ALIAS]\n        app_labels = ['my_app']\n        command.sync_apps(connection, app_labels)\n        # Add assertions to check if the sync_apps method works as expected\n\n    @patch('django.core.management.commands.migrate.MigrationExecutor')\n    def test_migration_progress_callback(self, mock_executor):\n        command = migrate.Command()\n        out = StringIO()\n        command.stdout = out\n        command.verbosity = 1\n        command.migration_progress_callback('apply_start', 'my_migration')\n        # Add assertions to check if the migration_progress_callback method works as expected\n\n    @patch('django.core.management.commands.migrate.MigrationExecutor')\n    def test_describe_operation_method(self, mock_executor):\n        operation = Mock()\n        operation.describe.return_value = 'test_operation'\n        operation.code = Mock()\n        operation.code.__doc__ = 'test_code'\n        result = migrate.Command.describe_operation(operation, False)\n        # Add assertions to check if the describe_operation method works as expected\n"], "sample_1208": ["\nimport unittest\nfrom sympy import symbols, MatrixSymbol, Matrix, S\nfrom sympy.matrices import Determinant, Trace, Inverse\nfrom sympy.stats import density\nfrom sympy.stats.matrix_distributions import MatrixGamma, Wishart, MatrixNormal, MatrixStudentT\n\nclass TestMatrixDistributions(unittest.TestCase):\n    def setUp(self):\n        self.a, self.b = symbols('a b', positive=True)\n        self.n = symbols('n', positive=True)\n        self.v = symbols('v', positive=True)\n        self.scale_matrix = Matrix([[2, 1], [1, 2]])\n        self.location_matrix = Matrix([[1, 2]])\n        self.scale_matrix_1 = Matrix([[1, 0], [0, 1]])\n        self.scale_matrix_2 = Matrix([1])\n\n    def test_MatrixGamma(self):\n        M = MatrixGamma('M', self.a, self.b, self.scale_matrix)\n        X = MatrixSymbol('X', 2, 2)\n        pdf = density(M)(X).doit()\n        self.assertEqual(pdf,\n                         (Determinant(self.scale_matrix)**(-self.a)) *\n                         (Determinant(X)**(self.a - S(3)/2)) *\n                         (self.b**(-2*self.a)) *\n                         (3**(-self.a)) *\n                         (S.Pi**(-S(1)/2)) *\n                         (self.a**(-1)) *\n                         ((self.a - S(1)/2)**(-1)) *\n                         (Trace(Inverse(self.scale_matrix)*X / self.b)).exp())\n\n    def test_Wishart(self):\n        W = Wishart('W', self.n, self.scale_matrix)\n        X = MatrixSymbol('X', 2, 2)\n        pdf = density(W)(X).doit()\n        self.assertEqual(pdf,\n                         (Determinant(self.scale_matrix)**(-self.n/2)) *\n                         (Determinant(X)**(self.n/2 - S(3)/2)) *\n                         (2**(-self.n)) *\n                         (3**(self.n/2)) *\n                         (S.Pi**(-S(1)/2)) *\n                         ((self.n/2)**(-1)) *\n                         ((self.n/2 - S(1)/2)**(-1)) *\n                         (Trace(Inverse(self.scale_matrix)*X / 2)).exp())\n\n    def test_MatrixNormal(self):\n        M = MatrixNormal('M', self.location_matrix, self.scale_matrix_1, self.scale_matrix_2)\n        X = MatrixSymbol('X', 1, 2)\n        pdf = density(M)(X).doit()\n        self.assertEqual(pdf,\n                         (Determinant(self.scale_matrix_1)**(S(1)/2)) *\n                         (Determinant(self.scale_matrix_2)**(S(1)/2)) *\n                         ((2*S.Pi)**(S(2)/2)) *\n                         (Trace((Inverse(self.scale_matrix_2)*(X - self.location_matrix)*Inverse(self.scale_matrix_1)*(X - self.location_matrix).T) / 2)).exp())\n\n    def test_MatrixStudentT(self):\n        M = MatrixStudentT('M', self.v, self.location_matrix, self.scale_matrix_1, self.scale_matrix_2)\n        X = MatrixSymbol('X', 1, 2)\n        pdf = density(M)(X)\n        # Add assertion for pdf as the expression is complex\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1164": ["\nimport unittest\nfrom sympy import S\nfrom sympy.physics.quantum.cg import CG, Wigner3j, Wigner6j, Wigner9j, cg_simp\n\nclass TestClebschGordan(unittest.TestCase):\n\n    def test_wigner3j_doit(self):\n        w3j = Wigner3j(6, 0, 4, 0, 2, 0)\n        self.assertEqual(w3j.doit(), S('sqrt(715)/143'))\n\n    def test_cg_doit(self):\n        cg = CG(S(3)/2, S(3)/2, S(1)/2, -S(1)/2, 1, 1)\n        self.assertEqual(cg.doit(), S('sqrt(3)/2'))\n        self.assertEqual(CG(j1=S(1)/2, m1=-S(1)/2, j2=S(1)/2, m2=+S(1)/2, j3=1, m3=0).doit(), S('sqrt(2)/2'))\n\n    def test_wigner6j_doit(self):\n        w6j = Wigner6j(2, 3, 5, 4, 1, 6)\n        self.assertEqual(w6j.doit(), S('sqrt(133)/672'))\n\n    def test_wigner9j_doit(self):\n        w9j = Wigner9j(2, 3, 5, 4, 1, 6, 7, 8, 9)\n        self.assertEqual(w9j.doit(), S('-sqrt(221)/15120'))\n\n    def test_cg_simp(self):\n        a = CG(1, 1, 0, 0, 1, 1)\n        b = CG(1, 0, 0, 0, 1, 0)\n        c = CG(1, -1, 0, 0, 1, -1)\n        self.assertEqual(cg_simp(a + b + c), 3)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1122": ["\nimport unittest\nfrom sympy import Abs, acos, adjoint, arg, atan, atan2, conjugate, cos, DiracDelta, E, exp, expand, Expr, Function, Heaviside, I, im, log, nan, oo, pi, Rational, re, S, sign, sin, sqrt, Symbol, symbols, transpose, zoo, exp_polar, Piecewise, Interval, comp, Integral, Matrix, ImmutableMatrix, SparseMatrix, ImmutableSparseMatrix, MatrixSymbol, FunctionMatrix, Lambda, Derivative, Eq\nfrom sympy.functions.elementary.complexes import polar_lift, polarify, unpolarify, periodic_argument, unbranched_argument, principal_branch\nfrom sympy.core.function import ArgumentIndexError\n\nclass TestComplexFunctions(unittest.TestCase):\n\n    def test_Abs(self):\n        self.assertEqual(Abs(-1), 1)\n        self.assertEqual(Abs(2+3j), 5)\n\n    def test_arg(self):\n        self.assertEqual(arg(1), 0)\n        self.assertEqual(arg(-1), pi)\n        self.assertEqual(arg(1j), pi/2)\n\n    def test_conjugate(self):\n        self.assertEqual(conjugate(2+3j), 2-3j)\n\n    def test_polar_lift(self):\n        self.assertEqual(polar_lift(4), 4*exp_polar(0))\n        self.assertEqual(polar_lift(-4), 4*exp_polar(I*pi))\n        self.assertEqual(polar_lift(-I), exp_polar(-I*pi/2))\n\n    def test_periodic_argument(self):\n        self.assertEqual(periodic_argument(exp_polar(5*I*pi), 2*pi), pi)\n        self.assertEqual(periodic_argument(exp_polar(5*I*pi), 3*pi), -pi)\n\n    def test_unbranched_argument(self):\n        self.assertEqual(unbranched_argument(exp(5*I*pi)), pi)\n        self.assertEqual(unbranched_argument(exp_polar(5*I*pi)), 5*pi)\n\n    def test_principal_branch(self):\n        self.assertEqual(principal_branch(exp_polar(2*pi*I)*3, 2*pi), 3*exp_polar(0))\n\n    def test_polarify(self):\n        self.assertEqual(polarify((-x)**y), ((_x*exp_polar(I*pi))**_y, {_x: x, _y: y}))\n\n    def test_unpolarify(self):\n        self.assertEqual(unpolarify(polar_lift(I + 2)), 2 + I)\n        self.assertEqual(unpolarify(sin(polar_lift(I + 7))), sin(7 + I))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_78": ["\nimport io\nimport unittest\nfrom unittest.mock import patch\nfrom django.core.management.base import BaseCommand, AppCommand, LabelCommand, CommandError\nfrom django.apps import AppConfig\n\nclass TestBaseCommand(unittest.TestCase):\n    def setUp(self):\n        self.command = BaseCommand()\n\n    def test_create_parser(self):\n        parser = self.command.create_parser('prog_name', 'subcommand')\n        self.assertIsNotNone(parser)\n\n    def test_execute(self):\n        with patch.object(self.command, 'handle', return_value='output') as mock_handle:\n            output = self.command.execute()\n            self.assertEqual(output, 'output')\n            mock_handle.assert_called_once()\n\n    def test_handle(self):\n        with self.assertRaises(NotImplementedError):\n            self.command.handle()\n\nclass TestAppCommand(unittest.TestCase):\n    def setUp(self):\n        self.command = AppCommand()\n\n    def test_handle_app_config(self):\n        with self.assertRaises(NotImplementedError):\n            self.command.handle_app_config(AppConfig())\n\nclass TestLabelCommand(unittest.TestCase):\n    def setUp(self):\n        self.command = LabelCommand()\n\n    def test_handle_label(self):\n        with self.assertRaises(NotImplementedError):\n            self.command.handle_label('label')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_879": ["\nimport unittest\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.datasets import make_classification, make_regression\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\nclass TestMultilayerPerceptron(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.X_classification, self.y_classification = make_classification(n_samples=100, random_state=1)\n        self.X_train_class, self.X_test_class, self.y_train_class, self.y_test_class = train_test_split(self.X_classification, self.y_classification, stratify=self.y_classification, random_state=1)\n\n        self.X_regression, self.y_regression = make_regression(n_samples=100, random_state=1)\n        self.X_train_reg, self.X_test_reg, self.y_train_reg, self.y_test_reg = train_test_split(self.X_regression, self.y_regression, random_state=1)\n\n    def test_MLPClassifier_fit(self):\n        clf = MLPClassifier(random_state=1, max_iter=300)\n        clf.fit(self.X_train_class, self.y_train_class)\n        self.assertIsNotNone(clf.coefs_)\n        self.assertIsNotNone(clf.intercepts_)\n\n    def test_MLPClassifier_predict(self):\n        clf = MLPClassifier(random_state=1, max_iter=300).fit(self.X_train_class, self.y_train_class)\n        predictions = clf.predict(self.X_test_class)\n        self.assertEqual(len(predictions), len(self.y_test_class))\n\n    def test_MLPClassifier_predict_proba(self):\n        clf = MLPClassifier(random_state=1, max_iter=300).fit(self.X_train_class, self.y_train_class)\n        probabilities = clf.predict_proba(self.X_test_class)\n        self.assertEqual(probabilities.shape, (len(self.y_test_class), 2))\n\n    def test_MLPRegressor_fit(self):\n        regr = MLPRegressor(random_state=1, max_iter=500)\n        regr.fit(self.X_train_reg, self.y_train_reg)\n        self.assertIsNotNone(regr.coefs_)\n        self.assertIsNotNone(regr.intercepts_)\n\n    def test_MLPRegressor_predict(self):\n        regr = MLPRegressor(random_state=1, max_iter=500).fit(self.X_train_reg, self.y_train_reg)\n        predictions = regr.predict(self.X_test_reg)\n        self.assertEqual(len(predictions), len(self.y_test_reg))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_347": ["\nimport pytz\nfrom unittest import mock\nfrom datetime import datetime, timedelta\nfrom django.test import SimpleTestCase, override_settings\nfrom django.utils import timezone\nfrom django.conf import settings\n\nclass TimeZoneTest(SimpleTestCase):\n    @override_settings(TIME_ZONE='UTC')\n    def test_get_default_timezone(self):\n        self.assertEqual(timezone.get_default_timezone(), pytz.utc)\n\n    @override_settings(TIME_ZONE='America/New_York')\n    def test_get_default_timezone_name(self):\n        self.assertEqual(timezone.get_default_timezone_name(), 'America/New_York')\n\n    @override_settings(TIME_ZONE='UTC')\n    def test_get_current_timezone(self):\n        self.assertEqual(timezone.get_current_timezone(), pytz.utc)\n\n    @override_settings(TIME_ZONE='UTC')\n    def test_activate_timezone(self):\n        timezone.activate('America/New_York')\n        self.assertEqual(timezone.get_current_timezone(), pytz.timezone('America/New_York'))\n        timezone.deactivate()\n\n    @override_settings(TIME_ZONE='UTC')\n    def test_override_timezone(self):\n        with timezone.override('America/New_York'):\n            self.assertEqual(timezone.get_current_timezone(), pytz.timezone('America/New_York'))\n        self.assertEqual(timezone.get_current_timezone(), pytz.utc)\n\n    @override_settings(TIME_ZONE='UTC', USE_TZ=True)\n    def test_localtime(self):\n        dt = datetime(2022, 1, 1, 12, 0, 0, tzinfo=pytz.UTC)\n        self.assertEqual(timezone.localtime(dt), dt.replace(tzinfo=pytz.UTC).astimezone(pytz.timezone('UTC')))\n\n    def test_is_aware(self):\n        dt = datetime(2022, 1, 1, 12, 0, 0, tzinfo=pytz.UTC)\n        self.assertTrue(timezone.is_aware(dt))\n\n    def test_is_naive(self):\n        dt = datetime(2022, 1, 1, 12, 0, 0)\n        self.assertTrue(timezone.is_naive(dt))\n\n    @override_settings(TIME_ZONE='UTC', USE_TZ=True)\n    def test_make_aware(self):\n        dt = datetime(2022, 1, 1, 12, 0, 0)\n        self.assertEqual(timezone.make_aware(dt), dt.replace(tzinfo=pytz.UTC))\n\n    @override_settings(TIME_ZONE='UTC', USE_TZ=True)\n    def test_make_naive(self):\n        dt = datetime(2022, 1, 1, 12, 0, 0, tzinfo=pytz.UTC)\n        self.assertEqual(timezone.make_naive(dt), dt.replace(tzinfo=None))\n\n    @override_settings(TIME_ZONE='UTC', USE_TZ=True)\n    def test_template_localtime(self):\n        dt = datetime(2022, 1, 1, 12, 0, 0, tzinfo=pytz.UTC)\n        self.assertEqual(timezone.template_localtime(dt), dt.replace(tzinfo=pytz.UTC).astimezone(pytz.timezone('UTC')))\n\n    @override_settings(TIME_ZONE='UTC', USE_TZ=True)\n    def test_now(self):\n        with mock.patch('django.utils.timezone.datetime') as mock_datetime:\n            mock_datetime.now.return_value = datetime(2022, 1, 1, 12, 0, 0)\n            self.assertEqual(timezone.now(), datetime(2022, 1, 1, 12, 0, 0, tzinfo=pytz.UTC))\n"], "sample_397": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.template import engines, TemplateDoesNotExist\nfrom django.template.backends.django import DjangoTemplates\nfrom django.core.exceptions import ImproperlyConfigured\n\nclass TestEngine(unittest.TestCase):\n    def setUp(self):\n        self.engine = engines.get_engine('django')\n\n    def test_init(self):\n        self.assertIsInstance(self.engine, DjangoTemplates)\n\n    def test_get_default(self):\n        default_engine = Engine.get_default()\n        self.assertIsInstance(default_engine, DjangoTemplates)\n\n    def test_get_template_builtins(self):\n        builtins = self.engine.get_template_builtins(self.engine.builtins)\n        self.assertTrue(all(hasattr(b, '__name__') for b in builtins))\n\n    def test_get_template_libraries(self):\n        libraries = self.engine.get_template_libraries(self.engine.libraries)\n        self.assertTrue(all(hasattr(l, '__name__') for l in libraries.values()))\n\n    def test_find_template_loader(self):\n        loader = self.engine.find_template_loader(\"django.template.loaders.filesystem.Loader\")\n        self.assertIsNotNone(loader)\n        with self.assertRaises(ImproperlyConfigured):\n            self.engine.find_template_loader(123)\n\n    def test_from_string(self):\n        template = self.engine.from_string(\"Hello {{ name }}!\")\n        self.assertEqual(template.render({'name': 'World'}), \"Hello World!\")\n\n    def test_get_template(self):\n        with self.assertRaises(TemplateDoesNotExist):\n            self.engine.get_template(\"non_existent_template.html\")\n\n    @patch('django.template.engine.Template')\n    def test_render_to_string(self, mock_template):\n        mock_template.return_value.render.return_value = \"Hello World!\"\n        result = self.engine.render_to_string(\"template_name\", {'name': 'World'})\n        self.assertEqual(result, \"Hello World!\")\n\n    def test_select_template(self):\n        with self.assertRaises(TemplateDoesNotExist):\n            self.engine.select_template([\"non_existent_template1.html\", \"non_existent_template2.html\"])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_390": ["\nimport unittest\nfrom unittest.mock import Mock, patch, mock_open\nfrom django.test import RequestFactory\nfrom django.http import Http404, HttpResponseNotModified\nfrom pathlib import Path\nfrom django.views.static import serve, was_modified_since, directory_index\n\nclass TestStaticViews(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.document_root = '/test/path'\n        self.path = 'test.txt'\n        self.fullpath = Path('/test/path/test.txt')\n\n    @patch('django.views.static.safe_join')\n    @patch('django.views.static.Path')\n    def test_serve(self, mock_path, mock_safe_join):\n        mock_safe_join.return_value = self.fullpath\n        mock_path.return_value = self.fullpath\n        mock_path.return_value.exists.return_value = True\n        mock_path.return_value.is_dir.return_value = False\n        mock_path.return_value.stat.return_value.st_mtime = 1\n        mock_path.return_value.stat.return_value.st_size = 1\n\n        request = self.factory.get('/')\n        response = serve(request, self.path, document_root=self.document_root)\n\n        self.assertEqual(response.status_code, 200)\n\n    @patch('django.views.static.Path')\n    def test_serve_directory(self, mock_path):\n        mock_path.return_value = self.fullpath\n        mock_path.return_value.exists.return_value = True\n        mock_path.return_value.is_dir.return_value = True\n\n        request = self.factory.get('/')\n        with self.assertRaises(Http404):\n            serve(request, self.path, document_root=self.document_root)\n\n    @patch('django.views.static.Path')\n    def test_serve_not_modified(self, mock_path):\n        mock_path.return_value = self.fullpath\n        mock_path.return_value.exists.return_value = True\n        mock_path.return_value.is_dir.return_value = False\n        mock_path.return_value.stat.return_value.st_mtime = 1\n        mock_path.return_value.stat.return_value.st_size = 1\n\n        request = self.factory.get('/', HTTP_IF_MODIFIED_SINCE='Sat, 29 Oct 1994 19:43:31 GMT')\n        response = serve(request, self.path, document_root=self.document_root)\n\n        self.assertIsInstance(response, HttpResponseNotModified)\n\n    def test_was_modified_since(self):\n        self.assertTrue(was_modified_since(header=None, mtime=1, size=1))\n        self.assertTrue(was_modified_since(header='Sat, 29 Oct 1994 19:43:31 GMT', mtime=2, size=1))\n        self.assertTrue(was_modified_since(header='Sat, 29 Oct 1994 19:43:31 GMT; length=2', mtime=1, size=1))\n        self.assertFalse(was_modified_since(header='Sat, 29 Oct 1994 19:43:31 GMT', mtime=1, size=1))\n\n    @patch('django.views.static.loader')\n    def test_directory_index(self, mock_loader):\n        mock_loader.select_template.side_effect = TemplateDoesNotExist('template')\n\n        response = directory_index(self.path, self.fullpath)\n\n        self.assertEqual(response.status_code, 200)\n        self.assertIn(b'Index of test.txt/', response.content)\n"], "sample_386": ["\nimport unittest\nfrom django.utils.safestring import SafeData, SafeString, mark_safe\n\nclass TestSafeString(unittest.TestCase):\n\n    def test_safe_data(self):\n        safe_data = SafeData()\n        self.assertEqual(safe_data.__html__(), safe_data)\n\n    def test_safe_string_addition(self):\n        safe_string1 = SafeString(\"Hello, \")\n        safe_string2 = SafeString(\"World!\")\n        safe_string3 = safe_string1 + safe_string2\n        self.assertEqual(safe_string3, \"Hello, World!\")\n        self.assertIsInstance(safe_string3, SafeString)\n\n    def test_safe_string_addition_with_non_safe_string(self):\n        safe_string = SafeString(\"Hello, \")\n        non_safe_string = \"World!\"\n        result = safe_string + non_safe_string\n        self.assertEqual(result, \"Hello, World!\")\n        self.assertNotIsInstance(result, SafeString)\n\n    def test_mark_safe(self):\n        unsafe_string = \"<script>alert('Hello, World!');</script>\"\n        safe_string = mark_safe(unsafe_string)\n        self.assertEqual(safe_string, unsafe_string)\n        self.assertIsInstance(safe_string, SafeString)\n\n    def test_mark_safe_with_safe_string(self):\n        safe_string = SafeString(\"Hello, World!\")\n        result = mark_safe(safe_string)\n        self.assertEqual(result, safe_string)\n        self.assertIsInstance(result, SafeString)\n\n    def test_mark_safe_with_callable(self):\n        @mark_safe\n        def safe_function():\n            return \"Hello, World!\"\n        safe_string = safe_function()\n        self.assertEqual(safe_string, \"Hello, World!\")\n        self.assertIsInstance(safe_string, SafeString)\n"], "sample_119": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.models import Model, CharField\nfrom django.db.models.sql.query import Query, JoinInfo\n\nclass TestQuery(unittest.TestCase):\n    def setUp(self):\n        self.model = Model\n        self.model.objects = MagicMock()\n        self.query = Query(self.model)\n\n    def test_get_initial_alias(self):\n        alias = self.query.get_initial_alias()\n        self.assertIsNotNone(alias)\n\n    def test_build_lookup(self):\n        lhs = MagicMock()\n        lookup_name = 'exact'\n        lookup_class = MagicMock()\n        lhs.get_lookup.return_value = lookup_class\n        value = 'test'\n        lookup = self.query.build_lookup([lookup_name], lhs, value)\n        lhs.get_lookup.assert_called_with(lookup_name)\n        lookup_class.assert_called_with(lhs, value)\n\n    def test_resolve_expression(self):\n        query = Query(self.model)\n        filter_expr = ('name__exact', 'test')\n        filter_clause, used_joins = self.query.build_filter(filter_expr)\n        query._add_q = MagicMock()\n        query.add_filter(filter_expr)\n        query._add_q.assert_called_with(filter_clause, used_aliases=set(), allow_joins=False, simple_col=True)\n\n    def test_add_filter(self):\n        filter_clause = ('name__exact', 'test')\n        self.query._add_q = MagicMock()\n        self.query.add_filter(filter_clause)\n        self.query._add_q.assert_called()\n\n    def test_add_q(self):\n        q_object = MagicMock()\n        q_object.connector = 'AND'\n        q_object.negated = False\n        q_object.children = []\n        clause, _ = self.query._add_q(q_object, used_aliases=set())\n        self.assertEqual(clause.connector, q_object.connector)\n        self.assertEqual(clause.negated, q_object.negated)\n\n    def test_setup_joins(self):\n        names = ['name']\n        opts = self.model._meta\n        alias = self.query.get_initial_alias()\n        join_info = self.query.setup_joins(names, opts, alias)\n        self.assertIsInstance(join_info, JoinInfo)\n\n    def test_trim_joins(self):\n        targets = [MagicMock()]\n        joins = [MagicMock()]\n        path = [MagicMock()]\n        trimmed_targets, trimmed_alias, trimmed_joins = self.query.trim_joins(targets, joins, path)\n        self.assertEqual(trimmed_targets, targets)\n        self.assertEqual(trimmed_alias, joins[-1])\n        self.assertEqual(trimmed_joins, joins)\n\n    def test_resolve_ref(self):\n        name = 'name'\n        resolved_ref = self.query.resolve_ref(name)\n        self.assertIsNotNone(resolved_ref)\n\n    def test_split_exclude(self):\n        filter_expr = ('name__exact', 'test')\n        can_reuse = set()\n        names_with_path = [('name', [])]\n        condition, needed_inner = self.query.split_exclude(filter_expr, can_reuse, names_with_path)\n        self.assertIsNotNone(condition)\n        self.assertIsNotNone(needed_inner)\n\n    def test_set_empty(self):\n        self.query.set_empty()\n        self.assertTrue(self.query.is_empty())\n\n    def test_set_limits(self):\n        self.query.set_limits(low=1, high=5)\n        self.assertEqual(self.query.low_mark, 1)\n        self.assertEqual(self.query.high_mark, 5)\n\n    def test_clear_limits(self):\n        self.query.clear_limits()\n        self.assertEqual(self.query.low_mark, 0)\n        self.assertIsNone(self.query.high_mark)\n\n    def test_is_sliced(self):\n        self.assertFalse(self.query.is_sliced)\n        self.query.set_limits(low=1)\n        self.assertTrue(self.query.is_sliced)\n\n    def test_has_limit_one(self):\n        self.query.set_limits(high=2)\n        self.assertFalse(self.query.has_limit_one())\n        self.query.set_limits(low=1, high=2)\n        self.assertTrue(self.query.has_limit_one())\n\n    def test_can_filter(self):\n        self.assertTrue(self.query.can_filter())\n        self.query.set_limits(low=1)\n        self.assertFalse(self.query.can_filter())\n\n    def test_clear_select_clause(self):\n        self.query.clear_select_clause()\n        self.assertEqual(self.query.select, ())\n        self.assertFalse(self.query.default_cols)\n        self.assertFalse(self.query.select_related)\n        self.assertIsNone(self.query.extra_select_mask)\n        self.assertIsNone(self.query._extra_select_cache)\n\n    def test_clear_select_fields(self):\n        self.query.clear_select_fields()\n        self.assertEqual(self.query.select, ())\n        self.assertEqual(self.query.values_select, ())\n\n    def test_add_select_col(self):\n        col = MagicMock()\n        self.query.add_select_col(col)\n        self.assertIn(col, self.query.select)\n        self.assertIn(col.output_field.name, self.query.values_select)\n\n    def test_set_select(self):\n        cols = [MagicMock()]\n        self.query.set_select(cols)\n        self.assertEqual(self.query.select, tuple(cols))\n        self.assertFalse(self.query.default_cols)\n\n    def test_add_distinct_fields(self):\n        field_names = ['name']\n        self.query.add_distinct_fields(*field_names)\n        self.assertEqual(self.query.distinct_fields, field_names)\n        self.assertTrue(self.query.distinct)\n\n    def test_add_fields(self):\n        field_names = ['name']\n        self.query.add_fields(field_names)\n        self.assertNotEqual(self.query.select, ())\n\n    def test_add_ordering(self):\n        ordering = ['name']\n        self.query.add_ordering(*ordering)\n        self.assertEqual(self.query.order_by, tuple(ordering))\n\n    def test_clear_ordering(self):\n        self.query.clear_ordering(force_empty=True)\n        self.assertEqual(self.query.order_by, ())\n        self.assertEqual(self.query.extra_order_by, ())\n        self.assertFalse(self.query.default_ordering)\n\n    def test_set_group_by(self):\n        self.query.select = [MagicMock()]\n        self.query.set_group_by()\n        self.assertIsNotNone(self.query.group_by)\n\n    def test_add_select_related(self):\n        fields = ['name']\n        self.query.add_select_related(fields)\n        self.assertIsInstance(self.query.select_related, dict)\n        self.assertIn(fields[0], self.query.select_related)\n\n    def test_add_extra(self):\n        select = {'extra_col': 'SELECT 1'}\n        select_params = []\n        where = None\n        params = []\n        tables = []\n        order_by = []\n        self.query.add_extra(select, select_params, where, params, tables, order_by)\n        self.assertIsNotNone(self.query.extra)\n\n    def test_clear_deferred_loading(self):\n        self.query.clear_deferred_loading()\n        self.assertEqual(self.query.deferred_loading, (frozenset(), True))\n\n    def test_add_deferred_loading(self):\n        field_names = ['name']\n        self.query.add_deferred_loading(field_names)\n        self.assertIsInstance(self.query.deferred_loading, tuple)\n        self.assertIn(field_names[0], self.query.deferred_loading[0])\n\n    def test_add_immediate_loading(self):\n        field_names = ['name']\n        self.query.add_immediate_loading(field_names)\n        self.assertIsInstance(self.query.deferred_loading, tuple)\n        self.assertIn(field_names[0], self.query.deferred_loading[0])\n\n    def test_get_loaded_field_names(self):\n        self.query.deferred_to_data = MagicMock()\n        self.query.get_loaded_field_names()\n        self.query.deferred_to_data.assert_called()\n\n    def test_set_annotation_mask(self):\n        names = ['name']\n        self.query.set_annotation_mask(names)\n        self.assertEqual(self.query.annotation_select_mask, set(names))\n\n    def test_append_annotation_mask(self):\n        names = ['name']\n        self.query.append_annotation_mask(names)\n        self.assertEqual(self.query.annotation_select_mask, set(names))\n\n    def test_set_extra_mask(self):\n        names = ['extra_col']\n        self.query.set_extra_mask(names)\n        self.assertEqual(self.query.extra_select_mask, set(names))\n\n    def test_set_values(self):\n        fields = ['name']\n        self.query.set_values(fields)\n        self.assertFalse(self.query.select_related)\n        self.assertEqual(self.query.values_select, tuple(fields))\n\n    def test_annotation_select(self):\n        self.query.annotations = {'name': MagicMock()}\n        self.query.annotation_select_mask = {'name'}\n        self.assertEqual(self.query.annotation_select, self.query.annotations)\n\n    def test_extra_select(self):\n        self.query.extra = {'extra_col': ('SELECT 1', [])}\n        self.query.extra_select_mask = {'extra_col'}\n        self.assertEqual(self.query.extra_select, self.query.extra)\n\n    def test_is_nullable(self):\n        field = MagicMock()\n        field.null = False\n        field.empty_strings_allowed = True\n        self.assertTrue(self.query.is_nullable(field))\n        field.null = True\n        self.assertTrue(self.query.is_nullable(field))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_877": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics import (\n    auc,\n    average_precision_score,\n    coverage_error,\n    det_curve,\n    label_ranking_average_precision_score,\n    precision_recall_curve,\n    label_ranking_loss,\n    roc_auc_score,\n    roc_curve,\n    ndcg_score,\n    dcg_score,\n    top_k_accuracy_score,\n)\nfrom sklearn.exceptions import UndefinedMetricWarning\n\nclass TestRankingMetrics(unittest.TestCase):\n    def setUp(self):\n        self.y_true = np.array([0, 0, 1, 1])\n        self.y_score = np.array([0.1, 0.4, 0.35, 0.8])\n\n    def test_auc(self):\n        x = [0, 1, 2, 3]\n        y = [0, 1, 2, 3]\n        self.assertEqual(auc(x, y), 6.0)\n\n    def test_average_precision_score(self):\n        self.assertAlmostEqual(average_precision_score(self.y_true, self.y_score), 0.8333, places=4)\n\n    def test_coverage_error(self):\n        y_true = np.array([[1, 0, 0], [0, 0, 1]])\n        y_score = np.array([[0.75, 0.5, 1], [1, 0.2, 0.1]])\n        self.assertAlmostEqual(coverage_error(y_true, y_score), 1.3333, places=4)\n\n    def test_det_curve(self):\n        fpr, fnr, thresholds = det_curve(self.y_true, self.y_score)\n        self.assertEqual(len(fpr), 3)\n        self.assertEqual(len(fnr), 3)\n        self.assertEqual(len(thresholds), 3)\n\n    def test_label_ranking_average_precision_score(self):\n        y_true = np.array([[1, 0, 0], [0, 0, 1]])\n        y_score = np.array([[0.75, 0.5, 1], [1, 0.2, 0.1]])\n        self.assertAlmostEqual(label_ranking_average_precision_score(y_true, y_score), 0.4167, places=4)\n\n    def test_precision_recall_curve(self):\n        precision, recall, thresholds = precision_recall_curve(self.y_true, self.y_score)\n        self.assertEqual(len(precision), 5)\n        self.assertEqual(len(recall), 5)\n        self.assertEqual(len(thresholds), 4)\n\n    def test_label_ranking_loss(self):\n        y_true = np.array([[1, 0, 0], [0, 0, 1]])\n        y_score = np.array([[0.75, 0.5, 1], [1, 0.2, 0.1]])\n        self.assertAlmostEqual(label_ranking_loss(y_true, y_score), 0.4167, places=4)\n\n    def test_roc_auc_score(self):\n        self.assertAlmostEqual(roc_auc_score(self.y_true, self.y_score), 0.75, places=2)\n\n    def test_roc_curve(self):\n        fpr, tpr, thresholds = roc_curve(self.y_true, self.y_score)\n        self.assertEqual(len(fpr), 5)\n        self.assertEqual(len(tpr), 5)\n        self.assertEqual(len(thresholds), 5)\n\n    def test_ndcg_score(self):\n        true_relevance = np.asarray([[10, 0, 0, 1, 5]])\n        scores = np.asarray([[.1, .2, .3, 4, 70]])\n        self.assertAlmostEqual(ndcg_score(true_relevance, scores), 0.69, places=2)\n\n    def test_dcg_score(self):\n        true_relevance = np.asarray([[10, 0, 0, 1, 5]])\n        scores = np.asarray([[.1, .2, .3, 4, 70]])\n        self.assertAlmostEqual(dcg_score(true_relevance, scores), 9.49, places=2)\n\n    def test_top_k_accuracy_score(self):\n        y_true = np.array([0, 1, 2, 2])\n        y_score = np.array([[0.5, 0.2, 0.2], [0.3, 0.4, 0.2], [0.2, 0.4, 0.3], [0.7, 0.2, 0.1]])\n        self.assertEqual(top_k_accuracy_score(y_true, y_score, k=2), 0.75)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_835": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.bayes import BayesianRidge, ARDRegression\n\nclass TestBayes(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.X = np.random.rand(100, 5)\n        self.y = np.random.rand(100)\n\n    def test_BayesianRidge_fit(self):\n        br = BayesianRidge()\n        br.fit(self.X, self.y)\n        self.assertEqual(br.coef_.shape, (5,))\n        self.assertIsInstance(br.alpha_, float)\n        self.assertIsInstance(br.lambda_, float)\n        self.assertEqual(br.sigma_.shape, (5, 5))\n\n    def test_BayesianRidge_predict(self):\n        br = BayesianRidge()\n        br.fit(self.X, self.y)\n        y_mean = br.predict(self.X)\n        y_mean, y_std = br.predict(self.X, return_std=True)\n        self.assertEqual(y_mean.shape, (100,))\n        self.assertEqual(y_std.shape, (100,))\n\n    def test_ARDRegression_fit(self):\n        ard = ARDRegression()\n        ard.fit(self.X, self.y)\n        self.assertEqual(ard.coef_.shape, (5,))\n        self.assertIsInstance(ard.alpha_, float)\n        self.assertEqual(ard.lambda_.shape, (5,))\n        self.assertEqual(ard.sigma_.shape, (5, 5))\n\n    def test_ARDRegression_predict(self):\n        ard = ARDRegression()\n        ard.fit(self.X, self.y)\n        y_mean = ard.predict(self.X)\n        y_mean, y_std = ard.predict(self.X, return_std=True)\n        self.assertEqual(y_mean.shape, (100,))\n        self.assertEqual(y_std.shape, (100,))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_231": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.http import Http404, HttpResponse, HttpResponseNotFound\nfrom django.test import RequestFactory\nfrom django.views.debug import (\n    CallableSettingWrapper,\n    ExceptionCycleWarning,\n    ExceptionReporter,\n    SafeExceptionReporterFilter,\n    default_urlconf,\n    get_default_exception_reporter_filter,\n    technical_404_response,\n    technical_500_response,\n)\nfrom django.views.decorators.debug import sensitive_post_parameters, sensitive_variables\n\nclass TestDebugViews(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.request = self.factory.get('/test/')\n        self.exc_type = Exception\n        self.exc_value = Exception('Test exception')\n        self.tb = 'Test traceback'\n\n    def test_callable_setting_wrapper(self):\n        wrapper = CallableSettingWrapper(lambda: 'test')\n        self.assertEqual(repr(wrapper), \"<function <lambda> at 0x...>\")\n\n    def test_exception_reporter(self):\n        reporter = ExceptionReporter(self.request, self.exc_type, self.exc_value, self.tb)\n        self.assertEqual(reporter.request, self.request)\n        self.assertEqual(reporter.exc_type, self.exc_type)\n        self.assertEqual(reporter.exc_value, self.exc_value)\n        self.assertEqual(reporter.tb, self.tb)\n\n    def test_safe_exception_reporter_filter(self):\n        filter = SafeExceptionReporterFilter()\n        self.assertEqual(filter.cleanse_setting('API_KEY', 'secret'), '********************')\n\n    def test_technical_500_response(self):\n        response = technical_500_response(self.request, self.exc_type, self.exc_value, self.tb)\n        self.assertIsInstance(response, HttpResponse)\n        self.assertEqual(response.status_code, 500)\n\n    @patch('django.views.debug.resolve')\n    def test_technical_404_response(self, mock_resolve):\n        mock_resolve.side_effect = Http404()\n        response = technical_404_response(self.request, Http404())\n        self.assertIsInstance(response, HttpResponseNotFound)\n\n    def test_default_urlconf(self):\n        response = default_urlconf(self.request)\n        self.assertIsInstance(response, HttpResponse)\n        self.assertEqual(response.status_code, 200)\n\n    @patch('django.views.debug.import_string')\n    def test_get_default_exception_reporter_filter(self, mock_import_string):\n        mock_import_string.return_value = SafeExceptionReporterFilter\n        filter = get_default_exception_reporter_filter()\n        self.assertIsInstance(filter, SafeExceptionReporterFilter)\n\n    @patch('django.views.debug.get_default_exception_reporter_filter')\n    def test_get_exception_reporter_filter(self, mock_get_default_exception_reporter_filter):\n        mock_get_default_exception_reporter_filter.return_value = SafeExceptionReporterFilter()\n        self.assertIsInstance(get_exception_reporter_filter(self.request), SafeExceptionReporterFilter)\n\n    # Add more tests for other functions and edge cases as needed\n"], "sample_1021": ["\nimport unittest\nfrom sympy import symbols, Add, Mul, S, Dummy, I, Rational, Integer, Number, Expr, Symbol, sympify, Mul, Pow, S, Tuple, Dict, SYMPY_INTS, range, default_sort_key, preorder_traversal\nfrom sympy.core.exprtools import _isnumber, _monotonic_sign, decompose_power, decompose_power_rat, Factors, Term, _gcd_terms, gcd_terms, factor_terms, factor_nc, _mask_nc\nfrom sympy.core.compatibility import iterable, is_sequence\nfrom sympy.core.power import Pow\nfrom sympy.core.basic import Basic, preorder_traversal\nfrom sympy.core.sympify import sympify\nfrom sympy.core.numbers import Rational, Integer, Number, I\nfrom sympy.core.singleton import S\nfrom sympy.core.symbol import Dummy\nfrom sympy.core.coreerrors import NonCommutativeExpression\nfrom sympy.core.containers import Tuple, Dict\nfrom sympy.utilities import default_sort_key\nfrom sympy.utilities.iterables import common_prefix, common_suffix, variations, ordered\nfrom collections import defaultdict\n\nx, y, z = symbols('x y z', integer=True, positive=True)\na, b, c = symbols('a b c', commutative=False)\n\nclass TestExprTools(unittest.TestCase):\n    def test_isnumber(self):\n        self.assertTrue(_isnumber(2))\n        self.assertTrue(_isnumber(2.5))\n        self.assertTrue(_isnumber(S(3)))\n        self.assertFalse(_isnumber(x))\n\n    def test_monotonic_sign(self):\n        self.assertEqual(_monotonic_sign(x + 1), 1)\n        self.assertEqual(_monotonic_sign(x - 1), Dummy('nneg', nonnegative=True))\n\n    def test_decompose_power(self):\n        self.assertEqual(decompose_power(x**2), (x, 2))\n        self.assertEqual(decompose_power(x**(2*y)), (x**y, 2))\n\n    def test_decompose_power_rat(self):\n        self.assertEqual(decompose_power_rat(x**(2*y/3)), (x**(y/3), 2))\n\n    def test_Factors(self):\n        f = Factors(x*y**2)\n        self.assertEqual(f.factors, {x: 1, y: 2})\n\n    def test_Term(self):\n        t = Term(x*y**2)\n        self.assertEqual(t.coeff, x)\n        self.assertEqual(t.numer, Factors({y: 2}))\n        self.assertEqual(t.denom, Factors())\n\n    def test_gcd_terms(self):\n        self.assertEqual(gcd_terms(x + y, x + z), x + y)\n\n    def test_factor_terms(self):\n        self.assertEqual(factor_terms(x + x*(2 + 4*y)**3), x*(8*(2*y + 1)**3 + 1))\n\n    def test_factor_nc(self):\n        self.assertEqual(factor_nc((x**2 + 2*a*x + a**2).expand()), (x + a)**2)\n\n    def test_mask_nc(self):\n        expr, rep, _ = _mask_nc(a**2 - b**2)\n        self.assertEqual(expr, a**2 - b**2)\n        self.assertIsNone(rep)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_21": ["\nimport unittest\nfrom astropy.io.ascii.qdp import _get_lines_from_file, _read_table_qdp, _write_table_qdp\nfrom astropy.table import Table\n\nclass TestQDPFile(unittest.TestCase):\n    def setUp(self):\n        self.qdp_content = \"\"\"\n        ! Initial comment line 1\n        ! Initial comment line 2\n        READ TERR 1\n        READ SERR 3\n        ! Table 0 comment\n        !a a(pos) a(neg) b be c d\n        53000.5   0.25  -0.5   1  1.5  3.5 2\n        54000.5   1.25  -1.5   2  2.5  4.5 3\n        NO NO NO NO NO\n        ! Table 1 comment\n        !a a(pos) a(neg) b be c d\n        54000.5   2.25  -2.5   NO  3.5  5.5 5\n        55000.5   3.25  -3.5   4  4.5  6.5 nan\n        \"\"\"\n\n    def test_get_lines_from_file(self):\n        lines = _get_lines_from_file(self.qdp_content)\n        self.assertEqual(len(lines), 12)\n\n    def test_read_table_qdp(self):\n        table = _read_table_qdp(self.qdp_content)\n        self.assertEqual(len(table), 2)\n        self.assertEqual(table.colnames, ['a', 'a_perr', 'a_nerr', 'b', 'b_err', 'c', 'd'])\n\n    def test_write_table_qdp(self):\n        table = Table([[1, 2], [3, 4]], names=('a', 'b'))\n        lines = _write_table_qdp(table, err_specs={'terr': [1]})\n        self.assertEqual(len(lines), 5)\n        self.assertEqual(lines[3], '1 3')\n        self.assertEqual(lines[4], '2 4')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_765": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report, cohen_kappa_score, jaccard_similarity_score, log_loss, hinge_loss\n\nclass TestClassificationMetrics(unittest.TestCase):\n\n    def setUp(self):\n        self.y_true = np.array([0, 1, 2, 0, 1, 2])\n        self.y_pred = np.array([0, 2, 1, 0, 0, 1])\n\n    def test_accuracy_score(self):\n        self.assertAlmostEqual(accuracy_score(self.y_true, self.y_pred), 0.33, places=2)\n\n    def test_precision_score(self):\n        self.assertAlmostEqual(precision_score(self.y_true, self.y_pred, average='macro'), 0.22, places=2)\n\n    def test_recall_score(self):\n        self.assertAlmostEqual(recall_score(self.y_true, self.y_pred, average='macro'), 0.33, places=2)\n\n    def test_f1_score(self):\n        self.assertAlmostEqual(f1_score(self.y_true, self.y_pred, average='macro'), 0.26, places=2)\n\n    def test_confusion_matrix(self):\n        cm = np.array([[2, 0, 0], [1, 0, 1], [0, 2, 1]])\n        np.testing.assert_array_equal(confusion_matrix(self.y_true, self.y_pred), cm)\n\n    def test_classification_report(self):\n        report = classification_report(self.y_true, self.y_pred, output_dict=True)\n        self.assertAlmostEqual(report['macro avg']['precision'], 0.22, places=2)\n        self.assertAlmostEqual(report['macro avg']['recall'], 0.33, places=2)\n        self.assertAlmostEqual(report['macro avg']['f1-score'], 0.26, places=2)\n\n    def test_cohen_kappa_score(self):\n        self.assertAlmostEqual(cohen_kappa_score(self.y_true, self.y_pred), 0.11, places=2)\n\n    def test_jaccard_similarity_score(self):\n        self.assertAlmostEqual(jaccard_similarity_score(self.y_true, self.y_pred), 0.33, places=2)\n\n    def test_log_loss(self):\n        y_pred_proba = np.array([[0.7, 0.1, 0.2], [0.1, 0.7, 0.2], [0.1, 0.2, 0.7],\n                                 [0.7, 0.1, 0.2], [0.1, 0.7, 0.2], [0.1, 0.2, 0.7]])\n        self.assertAlmostEqual(log_loss(self.y_true, y_pred_proba), 1.09, places=2)\n\n    def test_hinge_loss(self):\n        y_pred_decision = np.array([0.7, 0.1, 0.2, 0.7, 0.1, 0.2])\n        self.assertAlmostEqual(hinge_loss(self.y_true, y_pred_decision), 1.4, places=2)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_253": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom pathlib import Path\nfrom types import ModuleType\n\nfrom django.utils import autoreload\nfrom django.utils.autoreload import (\n    WatchmanReloader, StatReloader, WatchmanUnavailable,\n    is_django_module, is_django_path, check_errors,\n    ensure_echo_on, iter_all_python_module_files, iter_modules_and_files,\n    common_roots, sys_path_directories, get_child_arguments,\n    trigger_reload, restart_with_reloader, BaseReloader, get_reloader,\n    start_django\n)\n\nclass TestAutoreload(unittest.TestCase):\n\n    def setUp(self):\n        self.module = ModuleType('test_module')\n        self.module.__spec__ = Mock()\n        self.module.__spec__.has_location = True\n        self.module.__spec__.loader = Mock()\n        self.module.__spec__.origin = 'test_origin'\n        self.module.__spec__.loader.archive = 'test_archive'\n\n        self.django_module = ModuleType('django.test_module')\n        self.django_module.__spec__ = Mock()\n        self.django_module.__spec__.has_location = True\n        self.django_module.__spec__.loader = Mock()\n        self.django_module.__spec__.origin = 'django_test_origin'\n\n    def test_is_django_module(self):\n        self.assertTrue(is_django_module(self.django_module))\n        self.assertFalse(is_django_module(self.module))\n\n    @patch('django.utils.autoreload.Path')\n    def test_is_django_path(self, mock_path):\n        mock_path.return_value.parent = 'django_parent'\n        self.assertTrue(is_django_path('django_parent/test_path'))\n        self.assertFalse(is_django_path('test_path'))\n\n    @patch('sys.exc_info')\n    def test_check_errors(self, mock_exc_info):\n        @check_errors\n        def raise_error():\n            raise Exception('test_error')\n        with self.assertRaises(Exception):\n            raise_error()\n        self.assertEqual(str(autoreload._exception[1]), 'test_error')\n\n    @patch('sys.stdin')\n    @patch('termios.tcgetattr')\n    @patch('termios.tcsetattr')\n    @patch('termios.ECHO')\n    def test_ensure_echo_on(self, mock_echo, mock_tcsetattr, mock_tcgetattr, mock_stdin):\n        mock_stdin.isatty.return_value = True\n        mock_tcgetattr.return_value = [0, 0, 0, 0]\n        ensure_echo_on()\n        mock_tcsetattr.assert_called()\n\n    @patch('sys.modules')\n    def test_iter_all_python_module_files(self, mock_modules):\n        mock_modules.__getitem__ = lambda x: self.module if x == 'test_module' else None\n        files = iter_all_python_module_files()\n        self.assertIn('test_origin', files)\n\n    def test_iter_modules_and_files(self):\n        files = iter_modules_and_files([self.module, self.django_module], [])\n        self.assertIn(Path('test_origin').resolve(), files)\n        self.assertIn(Path('django_test_origin').resolve(), files)\n\n    def test_common_roots(self):\n        roots = common_roots([Path('/path/to/file1'), Path('/path/to/file2')])\n        self.assertEqual(roots, (Path('/path'),))\n\n    @patch('sys.path')\n    def test_sys_path_directories(self, mock_path):\n        mock_path.__iter__.return_value = ['/path/to/dir', '/path/to/file']\n        dirs = sys_path_directories()\n        self.assertIn(Path('/path/to/dir').resolve(), dirs)\n        self.assertIn(Path('/path/to/file').parent.resolve(), dirs)\n\n    @patch('sys.executable', 'python')\n    @patch('sys.argv', ['manage.py', 'runserver'])\n    @patch('django.__main__.__file__', 'django/__main__.py')\n    def test_get_child_arguments(self):\n        args = get_child_arguments()\n        self.assertIn('-m', args)\n        self.assertIn('django', args)\n        self.assertIn('runserver', args)\n\n    @patch('sys.exit')\n    def test_trigger_reload(self, mock_exit):\n        trigger_reload('test_file')\n        mock_exit.assert_called_with(3)\n\n    @patch('subprocess.run')\n    @patch('os.environ', {})\n    @patch('autoreload.get_child_arguments')\n    def test_restart_with_reloader(self, mock_get_child_args):\n        mock_get_child_args.return_value = ['python', 'manage.py', 'runserver']\n        restart_with_reloader()\n        mock_get_child_args.assert_called()\n\n    def test_base_reloader(self):\n        reloader = BaseReloader()\n        self.assertEqual(reloader.directory_globs, {})\n        self.assertEqual(reloader.extra_files, set())\n        self.assertFalse(reloader.should_stop)\n        reloader.stop()\n        self.assertTrue(reloader.should_stop)\n\n    @patch('os.environ')\n    def test_watchman_reloader(self, mock_environ):\n        reloader = WatchmanReloader()\n        self.assertEqual(reloader.roots, {})\n        self.assertEqual(reloader.client_timeout, 5)\n        mock_environ['DJANGO_WATCHMAN_TIMEOUT'] = '10'\n        self.assertEqual(reloader.client_timeout, 10)\n\n    def test_get_reloader(self):\n        with patch('autoreload.WatchmanReloader.check_availability', side_effect=WatchmanUnavailable('test')):\n            self.assertIsInstance(get_reloader(), StatReloader)\n        with patch('autoreload.WatchmanReloader.check_availability', return_value=True):\n            self.assertIsInstance(get_reloader(), WatchmanReloader)\n\n    @patch('autoreload.ensure_echo_on')\n    @patch('autoreload.check_errors')\n    @patch('threading.Thread')\n    def test_start_django(self, mock_thread, mock_check_errors, mock_ensure_echo_on):\n        reloader = Mock()\n        main_func = Mock()\n        start_django(reloader, main_func)\n        mock_ensure_echo_on.assert_called()\n        mock_check_errors.assert_called()\n        mock_thread.assert_called()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_246": ["\nimport unittest\nfrom unittest.mock import patch, mock_open, MagicMock\nfrom django.core.management.commands.makemessages import (\n    Command, TranslatableFile, BuildFile,\n    normalize_eols, write_pot_file, check_programs,\n    CommandError,\n)\nfrom django.utils.encoding import DEFAULT_LOCALE_ENCODING\nfrom django.core.management.utils import popen_wrapper, handle_extensions\n\nclass TestTranslatableFile(unittest.TestCase):\n    def test_repr(self):\n        tf = TranslatableFile('/dir', 'file.py', '/locale')\n        self.assertEqual(repr(tf), \"<TranslatableFile: /dir/file.py>\")\n\n    def test_equality(self):\n        tf1 = TranslatableFile('/dir', 'file.py', '/locale')\n        tf2 = TranslatableFile('/dir', 'file.py', '/locale')\n        self.assertEqual(tf1, tf2)\n\nclass TestBuildFile(unittest.TestCase):\n    def setUp(self):\n        self.command = MagicMock()\n        self.translatable = MagicMock()\n\n    def test_is_templatized(self):\n        self.command.gettext_version = (0, 18, 2)\n        build_file = BuildFile(self.command, 'djangojs', self.translatable)\n        self.assertTrue(build_file.is_templatized)\n\n    def test_work_path(self):\n        build_file = BuildFile(self.command, 'djangojs', self.translatable)\n        build_file.is_templatized = True\n        self.translatable.dirpath = '/dir'\n        self.translatable.file = 'file.js'\n        self.assertEqual(build_file.work_path, '/dir/file.js.c')\n\nclass TestUtilityFunctions(unittest.TestCase):\n    def test_normalize_eols(self):\n        self.assertEqual(normalize_eols('line1\\nline2'), 'line1\\nline2\\n')\n\n    @patch('os.path.exists', return_value=False)\n    @patch('builtins.open', new_callable=mock_open)\n    def test_write_pot_file(self, mock_open, mock_exists):\n        write_pot_file('test.pot', 'msg1\\nmsg2')\n        mock_open.assert_called_once_with('test.pot', 'a', encoding='utf-8', newline='\\n')\n        mock_open().write.assert_called_once_with('msg1\\nmsg2')\n\nclass TestCommand(unittest.TestCase):\n    @patch('django.core.management.commands.makemessages.check_programs')\n    def test_handle(self, mock_check_programs):\n        command = Command()\n        command.build_potfiles = MagicMock()\n        command.write_po_file = MagicMock()\n        command.remove_potfiles = MagicMock()\n        command.handle(locale=['en'], domain='django', verbosity=1, extensions=['py'])\n        mock_check_programs.assert_called_with('xgettext')\n        command.build_potfiles.assert_called_once()\n        command.write_po_file.assert_called_once_with(command.build_potfiles.return_value[0], 'en')\n        command.remove_potfiles.assert_called_once()\n\n    @patch('django.core.management.commands.makemessages.find_command', return_value=None)\n    def test_check_programs(self, mock_find_command):\n        with self.assertRaises(CommandError):\n            check_programs('program')\n\n    @patch('django.core.management.commands.makemessages.popen_wrapper', return_value=('1.2.3\\n', '', 0))\n    def test_gettext_version(self, mock_popen_wrapper):\n        command = Command()\n        self.assertEqual(command.gettext_version, (1, 2, 3))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_801": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.huber import HuberRegressor, _huber_loss_and_gradient\n\nclass TestHuberRegressor(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[0, 0], [1, 1], [2, 2]])\n        self.y = np.array([0, 1, 2])\n        self.epsilon = 1.35\n        self.alpha = 0.0001\n        self.sample_weight = np.array([1, 1, 1])\n\n    def test_huber_loss_and_gradient(self):\n        w = np.array([0, 0, 0])\n        loss, grad = _huber_loss_and_gradient(w, self.X, self.y, self.epsilon, self.alpha, self.sample_weight)\n        self.assertEqual(loss.shape, ())\n        self.assertEqual(grad.shape, (3,))\n\n    def test_fit(self):\n        model = HuberRegressor(epsilon=self.epsilon, alpha=self.alpha)\n        model.fit(self.X, self.y, self.sample_weight)\n        self.assertEqual(model.coef_.shape, (2,))\n        self.assertEqual(model.intercept_, 0.0)\n        self.assertIsInstance(model.scale_, float)\n        self.assertIsInstance(model.n_iter_, int)\n        self.assertEqual(model.outliers_.shape, (3,))\n\n    def test_invalid_epsilon(self):\n        with self.assertRaises(ValueError):\n            HuberRegressor(epsilon=0.5).fit(self.X, self.y)\n\n    def test_no_intercept(self):\n        model = HuberRegressor(epsilon=self.epsilon, alpha=self.alpha, fit_intercept=False)\n        model.fit(self.X, self.y, self.sample_weight)\n        self.assertEqual(model.coef_.shape, (2,))\n        self.assertEqual(model.intercept_, 0.0)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_34": ["\nimport unittest\nfrom astropy.utils import introspection\nimport sys\nimport types\n\nclass TestIntrospection(unittest.TestCase):\n\n    def test_resolve_name(self):\n        self.assertEqual(introspection.resolve_name('astropy.utils.introspection.resolve_name'), introspection.resolve_name)\n        self.assertEqual(introspection.resolve_name('astropy', 'utils', 'introspection', 'resolve_name'), introspection.resolve_name)\n\n    def test_minversion(self):\n        self.assertTrue(introspection.minversion(sys, '3'))  # Assuming Python version is 3 or higher\n        self.assertFalse(introspection.minversion(sys, '4'))\n\n    def test_find_mod_objs(self):\n        localnames, fqnames, objs = introspection.find_mod_objs('astropy.utils.introspection')\n        self.assertIn('resolve_name', localnames)\n        self.assertIn('astropy.utils.introspection.resolve_name', fqnames)\n        self.assertIn(introspection.resolve_name, objs)\n\n    def test_isinstancemethod(self):\n        class TestClass:\n            def test_method(self): pass\n\n            @staticmethod\n            def static_method(): pass\n\n            @classmethod\n            def class_method(cls): pass\n\n        self.assertTrue(introspection.isinstancemethod(TestClass, TestClass.test_method))\n        self.assertFalse(introspection.isinstancemethod(TestClass, TestClass.static_method))\n        self.assertFalse(introspection.isinstancemethod(TestClass, TestClass.class_method))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_911": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom docutils import nodes\nfrom sphinx.testing.util import SphinxTestApp\nfrom sphinx.domains.python import (\n    py_sig_re, _parse_annotation, _pseudo_parse_arglist,\n    PyXrefMixin, PyField, PyGroupedField, PyTypedField, PyObject,\n    PyModulelevel, PyFunction, PyDecoratorFunction, PyVariable, PyClasslike,\n    PyClassmember, PyMethod, PyClassMethod, PyStaticMethod, PyDecoratorMethod,\n    PyAttribute, PyDecoratorMixin, PyModule, PyCurrentModule, PyXRefRole,\n    filter_meta_fields, PythonModuleIndex, PythonDomain, builtin_resolver,\n    setup,\n)\n\nclass TestPythonDomain(unittest.TestCase):\n    def setUp(self):\n        self.app = SphinxTestApp()\n        self.domain = PythonDomain(self.app.env)\n\n    def test_py_sig_re(self):\n        sig = \"module.ClassName.method_name(arg1, arg2=default, *args, **kwargs) -> return_type\"\n        match = py_sig_re.match(sig)\n        self.assertIsNotNone(match)\n        self.assertEqual(match.groups(), (\"module.ClassName.\", \"method_name\", \"arg1, arg2=default, *args, **kwargs\", \"return_type\"))\n\n    def test_parse_annotation(self):\n        annotation = \"List[Union[int, str]]\"\n        result = _parse_annotation(annotation)\n        self.assertIsInstance(result, list)\n\n    # Add more tests for other functions and classes in python.py\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_508": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nimport numpy as np\nimport matplotlib.artist as martist\n\nclass TestArtist(unittest.TestCase):\n    def setUp(self):\n        self.artist = martist.Artist()\n\n    def test_allow_rasterization(self):\n        @martist.allow_rasterization\n        def draw(artist, renderer):\n            return True\n\n        self.assertTrue(hasattr(draw, \"_supports_rasterization\"))\n        self.assertTrue(draw(self.artist, MagicMock()))\n\n    def test_finalize_rasterization(self):\n        mock_draw = MagicMock()\n\n        @martist.allow_rasterization\n        @martist._finalize_rasterization\n        def draw(artist, renderer):\n            return mock_draw(artist, renderer)\n\n        mock_renderer = MagicMock()\n        mock_renderer._rasterizing = True\n        draw(self.artist, mock_renderer)\n        mock_draw.assert_called_once_with(self.artist, mock_renderer)\n        mock_renderer.stop_rasterizing.assert_called_once()\n\n    def test_artist_pickable(self):\n        self.artist.figure = MagicMock()\n        self.artist.set_picker(None)\n        self.assertFalse(self.artist.pickable())\n        self.artist.set_picker(True)\n        self.assertTrue(self.artist.pickable())\n\n    def test_artist_set_clip_box(self):\n        clipbox = martist.Bbox([[0, 0], [1, 1]])\n        self.artist.set_clip_box(clipbox)\n        self.assertEqual(self.artist.get_clip_box(), clipbox)\n\n    def test_artist_set_clip_path(self):\n        path = martist.Path([(0, 0), (1, 1)])\n        transform = MagicMock()\n        self.artist.set_clip_path(path, transform)\n        self.assertIsInstance(self.artist.get_clip_path(), martist.TransformedPath)\n\n    def test_artist_set_alpha(self):\n        self.artist.set_alpha(0.5)\n        self.assertEqual(self.artist.get_alpha(), 0.5)\n        self.artist.set_alpha(None)\n        self.assertIsNone(self.artist.get_alpha())\n\n    def test_artist_set_visible(self):\n        self.artist.set_visible(False)\n        self.assertFalse(self.artist.get_visible())\n        self.artist.set_visible(True)\n        self.assertTrue(self.artist.get_visible())\n\n    def test_artist_set_animated(self):\n        self.artist.set_animated(True)\n        self.assertTrue(self.artist.get_animated())\n        self.artist.set_animated(False)\n        self.assertFalse(self.artist.get_animated())\n\n    def test_artist_set_label(self):\n        label = \"Test Label\"\n        self.artist.set_label(label)\n        self.assertEqual(self.artist.get_label(), label)\n\n    def test_artist_set_zorder(self):\n        zorder = 10\n        self.artist.set_zorder(zorder)\n        self.assertEqual(self.artist.get_zorder(), zorder)\n\n    def test_artist_set_transform(self):\n        transform = MagicMock()\n        self.artist.set_transform(transform)\n        self.assertEqual(self.artist.get_transform(), transform)\n\n    def test_artist_set_rasterized(self):\n        self.artist.set_rasterized(True)\n        self.assertTrue(self.artist.get_rasterized())\n        self.artist.set_rasterized(False)\n        self.assertFalse(self.artist.get_rasterized())\n\n    def test_artist_set_agg_filter(self):\n        filter_func = lambda x, y: x + y\n        self.artist.set_agg_filter(filter_func)\n        self.assertEqual(self.artist.get_agg_filter(), filter_func)\n\n    def test_artist_update_from(self):\n        other = martist.Artist()\n        other.set_alpha(0.8)\n        self.artist.update_from(other)\n        self.assertEqual(self.artist.get_alpha(), 0.8)\n\n    def test_artist_properties(self):\n        properties = self.artist.properties()\n        self.assertIsInstance(properties, dict)\n\n    def test_artist_set(self):\n        self.artist.set(alpha=0.7, visible=False)\n        self.assertEqual(self.artist.get_alpha(), 0.7)\n        self.assertFalse(self.artist.get_visible())\n\n    def test_artist_cm_set(self):\n        with self.artist._cm_set(alpha=0.7, visible=False):\n            self.assertEqual(self.artist.get_alpha(), 0.7)\n            self.assertFalse(self.artist.get_visible())\n        self.assertNotEqual(self.artist.get_alpha(), 0.7)\n        self.assertTrue(self.artist.get_visible())\n\n    def test_artist_findobj(self):\n        child = martist.Artist()\n        self.artist.get_children = MagicMock(return_value=[child])\n        result = self.artist.findobj(martist.Artist)\n        self.assertIn(self.artist, result)\n        self.assertIn(child, result)\n\n    def test_artist_get_cursor_data(self):\n        data = self.artist.get_cursor_data(MagicMock())\n        self.assertIsNone(data)\n\n    def test_artist_format_cursor_data(self):\n        data = [1, 2.5, np.array([3, 4.5])]\n        result = self.artist.format_cursor_data(data)\n        self.assertEqual(result, \"[1, 2.5, [3, 4.5]]\")\n\n    def test_artist_mouseover(self):\n        self.artist.set_mouseover(True)\n        self.assertTrue(self.artist.get_mouseover())\n        self.artist.set_mouseover(False)\n        self.assertFalse(self.artist.get_mouseover())\n\n    def test_artist_inspector(self):\n        inspector = martist.ArtistInspector(self.artist)\n        setters = inspector.get_setters()\n        self.assertIsInstance(setters, list)\n        valid_values = inspector.get_valid_values(\"alpha\")\n        self.assertIsInstance(valid_values, str)\n\n    def test_setp(self):\n        with patch(\"sys.stdout\") as mock_stdout:\n            martist.setp(self.artist, \"alpha\", 0.5)\n            mock_stdout.write.assert_called_once()\n        self.assertEqual(self.artist.get_alpha(), 0.5)\n\n    def test_getp(self):\n        with patch(\"sys.stdout\") as mock_stdout:\n            martist.getp(self.artist)\n            mock_stdout.write.assert_called_once()\n        alpha = martist.getp(self.artist, \"alpha\")\n        self.assertEqual(alpha, self.artist.get_alpha())\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_859": ["\nimport unittest\nimport numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.tree import ExtraTreeClassifier\nfrom sklearn.tree import ExtraTreeRegressor\nfrom sklearn.exceptions import NotFittedError\n\nclass TestTreeClasses(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[0, 0], [1, 1], [2, 2], [3, 3]])\n        self.y_class = np.array([0, 1, 0, 1])\n        self.y_reg = np.array([0.0, 1.1, 2.2, 3.3])\n\n    def test_decision_tree_classifier(self):\n        clf = DecisionTreeClassifier(random_state=0)\n        clf.fit(self.X, self.y_class)\n        self.assertIsNotNone(clf.tree_)\n        self.assertEqual(clf.predict([[0, 0]]), np.array([0]))\n\n    def test_decision_tree_regressor(self):\n        reg = DecisionTreeRegressor(random_state=0)\n        reg.fit(self.X, self.y_reg)\n        self.assertIsNotNone(reg.tree_)\n        self.assertAlmostEqual(reg.predict([[0, 0]]), np.array([0.0]))\n\n    def test_extra_tree_classifier(self):\n        clf = ExtraTreeClassifier(random_state=0)\n        clf.fit(self.X, self.y_class)\n        self.assertIsNotNone(clf.tree_)\n        self.assertIn(clf.predict([[0, 0]]), [0, 1])\n\n    def test_extra_tree_regressor(self):\n        reg = ExtraTreeRegressor(random_state=0)\n        reg.fit(self.X, self.y_reg)\n        self.assertIsNotNone(reg.tree_)\n        self.assertLessEqual(reg.predict([[0, 0]]), 0.1)\n\n    def test_not_fitted_error(self):\n        clf = DecisionTreeClassifier()\n        with self.assertRaises(NotFittedError):\n            clf.predict(self.X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_940": ["\nimport unittest\nfrom typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar, Union)\nfrom sphinx.util.typing import restify, stringify, get_type_hints, is_system_TypeVar\nfrom typing import ForwardRef  # type: ignore\nfrom typing import Annotated  # type: ignore\n\nclass TestTypingUtils(unittest.TestCase):\n    def test_restify(self):\n        self.assertEqual(restify(None), ':obj:`None`')\n        self.assertEqual(restify(Optional[int]), ':obj:`Optional`\\\\ [:obj:`int`]')\n        self.assertEqual(restify(Union[int, str]), ':obj:`Union`\\\\ [:obj:`int`, :obj:`str`]')\n        self.assertEqual(restify(List[int]), ':class:`list`\\\\ [:obj:`int`]')\n        self.assertEqual(restify(Callable[[int], str]), ':class:`Callable`\\\\ [[:obj:`int`], :obj:`str`]')\n        self.assertEqual(restify(Annotated[int, \"metadata\"]), ':class:`int`')\n\n    def test_stringify(self):\n        self.assertEqual(stringify(None), 'None')\n        self.assertEqual(stringify(Optional[int]), 'Optional[int]')\n        self.assertEqual(stringify(Union[int, str]), 'Union[int, str]')\n        self.assertEqual(stringify(List[int]), 'List[int]')\n        self.assertEqual(stringify(Callable[[int], str]), 'Callable[[int], str]')\n        self.assertEqual(stringify(Annotated[int, \"metadata\"]), 'int')\n\n    def test_get_type_hints(self):\n        def test_func(a: int, b: str) -> bool:\n            return True\n\n        hints = get_type_hints(test_func)\n        self.assertEqual(hints, {'a': int, 'b': str, 'return': bool})\n\n    def test_is_system_TypeVar(self):\n        self.assertTrue(is_system_TypeVar(TypeVar('T')))\n        self.assertFalse(is_system_TypeVar(T))  # Assuming T is not a system defined TypeVar\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_109": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.contrib.admin.widgets import (\n    FilteredSelectMultiple,\n    AdminDateWidget,\n    AdminTimeWidget,\n    AdminSplitDateTime,\n    AdminRadioSelect,\n    AdminFileWidget,\n    url_params_from_lookup_dict,\n    ForeignKeyRawIdWidget,\n    ManyToManyRawIdWidget,\n    RelatedFieldWidgetWrapper,\n    AdminTextareaWidget,\n    AdminTextInputWidget,\n    AdminEmailInputWidget,\n    AdminURLFieldWidget,\n    AdminIntegerFieldWidget,\n    AdminBigIntegerFieldWidget,\n    AdminUUIDInputWidget,\n    AutocompleteSelect,\n    AutocompleteSelectMultiple,\n)\nfrom django import forms\nfrom django.urls import reverse, NoReverseMatch\nfrom django.urls.exceptions import NoReverseMatch\nfrom django.core.exceptions import ValidationError\nfrom django.core.validators import URLValidator\nfrom django.utils.html import escape\n\nclass TestWidgets(unittest.TestCase):\n    def test_filtered_select_multiple(self):\n        widget = FilteredSelectMultiple('verbose_name', True)\n        self.assertEqual(widget.verbose_name, 'verbose_name')\n        self.assertTrue(widget.is_stacked)\n\n    # ... more tests for other widgets ...\n\n    def test_url_params_from_lookup_dict(self):\n        lookups = {'key': 'value', 'key2': lambda: 'value2', 'key3': ['value3'], 'key4': True}\n        params = url_params_from_lookup_dict(lookups)\n        self.assertEqual(params, {'key': 'value', 'key2': 'value2', 'key3': 'value3', 'key4': '1'})\n\n    # ... more tests for other functions ...\n\n    def test_admin_url_field_widget(self):\n        widget = AdminURLFieldWidget()\n        context = widget.get_context('name', 'https://example.com', None)\n        self.assertTrue(context['url_valid'])\n\n    # ... more tests for other widgets ...\n\n    def test_autocomplete_select(self):\n        rel = Mock()\n        admin_site = Mock()\n        widget = AutocompleteSelect(rel, admin_site)\n        self.assertEqual(widget.get_url(), reverse('admin:app_label_model_autocomplete'))\n\n    # ... more tests for other widgets ...\n"], "sample_380": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.db.models import Avg, Count, Max, Min, StdDev, Sum, Variance\nfrom django.db.models.fields import IntegerField\nfrom django.db.models.expressions import Star, When\n\nclass TestAggregate(unittest.TestCase):\n    def setUp(self):\n        self.expression = Mock()\n\n    def test_init(self):\n        aggregate = Avg(self.expression, distinct=True)\n        self.assertTrue(aggregate.distinct)\n\n        with self.assertRaises(TypeError):\n            Avg(self.expression, default=1)\n\n        with self.assertRaises(ValueError):\n            Count(Star(), filter=Mock())\n\n    def test_resolve_expression(self):\n        aggregate = Avg(self.expression, default=1)\n        resolved = aggregate.resolve_expression(Mock())\n        self.assertIsNone(aggregate.default)\n        self.assertIsNotNone(resolved.default)\n\n    def test_default_alias(self):\n        aggregate = Avg(self.expression)\n        self.expression.name = 'test_field'\n        self.assertEqual(aggregate.default_alias, 'test_field__avg')\n\n    def test_as_sql(self):\n        aggregate = Count(self.expression, filter=Mock())\n        connection = Mock()\n        connection.features.supports_aggregate_filter_clause = True\n        sql, params = aggregate.as_sql(Mock(), connection)\n        self.assertIn('FILTER', sql)\n\n        connection.features.supports_aggregate_filter_clause = False\n        sql, params = aggregate.as_sql(Mock(), connection)\n        self.assertNotIn('FILTER', sql)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_615": ["\nimport unittest\nimport numpy as np\nimport xarray as xr\nfrom xarray.core.computation import (\n    _UFuncSignature, apply_ufunc, broadcast_compat_data, collect_dict_values, join_dict_keys,\n    ordered_set_intersection, ordered_set_union, result_name, unified_dim_sizes\n)\n\nclass TestComputation(unittest.TestCase):\n    def setUp(self):\n        self.data = xr.DataArray(np.random.rand(3, 3), dims=('x', 'y'), coords={'x': [1, 2, 3], 'y': [4, 5, 6]})\n        self.func = np.sin\n\n    def test_UFuncSignature(self):\n        signature = _UFuncSignature([['x', 'y'], ['x']], [['x'], ['x', 'y']])\n        self.assertEqual(str(signature), \"(x,y),(x)->(x),(x,y)\")\n\n    def test_apply_ufunc(self):\n        result = apply_ufunc(self.func, self.data, input_core_dims=[['x', 'y']], output_core_dims=[['x'], ['x', 'y']])\n        self.assertIsInstance(result, tuple)\n        self.assertIsInstance(result[0], xr.DataArray)\n        self.assertIsInstance(result[1], xr.DataArray)\n\n    def test_broadcast_compat_data(self):\n        broadcasted_data = broadcast_compat_data(self.data.variable, ('x',), ('y',))\n        self.assertEqual(broadcasted_data.shape, (3, 3))\n\n    def test_collect_dict_values(self):\n        dict_values = collect_dict_values([{'a': 1, 'b': 2}, {'a': 3, 'b': 4}], ['a', 'b'])\n        self.assertEqual(dict_values, [[1, 3], [2, 4]])\n\n    def test_join_dict_keys(self):\n        keys = join_dict_keys([{'a', 'b'}, {'b', 'c'}], how='inner')\n        self.assertEqual(set(keys), {'b'})\n\n    def test_ordered_set_intersection(self):\n        intersection = ordered_set_intersection([{'a', 'b'}, {'b', 'c'}])\n        self.assertEqual(list(intersection), ['b'])\n\n    def test_ordered_set_union(self):\n        union = ordered_set_union([{'a', 'b'}, {'b', 'c'}])\n        self.assertEqual(set(union), {'a', 'b', 'c'})\n\n    def test_result_name(self):\n        name = result_name([self.data, self.data])\n        self.assertEqual(name, self.data.name)\n\n    def test_unified_dim_sizes(self):\n        dim_sizes = unified_dim_sizes([self.data.variable])\n        self.assertEqual(dim_sizes, {'x': 3, 'y': 3})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_605": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nfrom xarray.core.groupby import GroupBy, DataArrayGroupBy, DatasetGroupBy\n\nclass TestGroupBy(unittest.TestCase):\n    def setUp(self):\n        self.data = xr.DataArray(np.random.rand(4, 6), dims=('x', 'y'),\n                                 coords={'x': ('x', [1, 2, 3, 4]),\n                                         'y': ('y', pd.date_range('2000-01-01', periods=6))})\n        self.group = xr.DataArray(['a', 'a', 'b', 'b'], dims=('x'), coords={'x': self.data.x})\n\n    def test_groupby_initialization(self):\n        gb = GroupBy(self.data, self.group)\n        self.assertIsInstance(gb, GroupBy)\n\n    def test_dataarray_groupby_initialization(self):\n        gb = DataArrayGroupBy(self.data, self.group)\n        self.assertIsInstance(gb, DataArrayGroupBy)\n\n    def test_dataset_groupby_initialization(self):\n        ds = self.data.to_dataset(name='data')\n        gb = DatasetGroupBy(ds, self.group)\n        self.assertIsInstance(gb, DatasetGroupBy)\n\n    def test_groupby_map(self):\n        gb = DataArrayGroupBy(self.data, self.group)\n        result = gb.map(np.mean)\n        self.assertIsInstance(result, xr.DataArray)\n\n    def test_groupby_reduce(self):\n        gb = DataArrayGroupBy(self.data, self.group)\n        result = gb.reduce(np.sum, dim='x')\n        self.assertIsInstance(result, xr.DataArray)\n\n    def test_groupby_first(self):\n        gb = DataArrayGroupBy(self.data, self.group)\n        result = gb.first()\n        self.assertIsInstance(result, xr.DataArray)\n\n    def test_groupby_last(self):\n        gb = DataArrayGroupBy(self.data, self.group)\n        result = gb.last()\n        self.assertIsInstance(result, xr.DataArray)\n\n    def test_groupby_assign_coords(self):\n        gb = DataArrayGroupBy(self.data, self.group)\n        result = gb.assign_coords(z=('x', [1, 2, 3, 4]))\n        self.assertIsInstance(result, xr.DataArray)\n\n    def test_groupby_quantile(self):\n        gb = DataArrayGroupBy(self.data, self.group)\n        result = gb.quantile(0.5)\n        self.assertIsInstance(result, xr.DataArray)\n\n    def test_groupby_where(self):\n        gb = DataArrayGroupBy(self.data, self.group)\n        cond = xr.DataArray([True, False, True, False], dims=('x'), coords={'x': self.data.x})\n        result = gb.where(cond)\n        self.assertIsInstance(result, xr.DataArray)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_628": ["\nimport unittest\nimport tokenize\nfrom unittest.mock import MagicMock, patch\n\nfrom pylint.checkers import spelling\n\nclass TestSpellingChecker(unittest.TestCase):\n    def setUp(self):\n        self.checker = spelling.SpellingChecker()\n        self.checker.config = MagicMock()\n        self.checker.config.spelling_dict = 'en_US'\n        self.checker.config.spelling_ignore_words = ''\n        self.checker.config.spelling_private_dict_file = ''\n        self.checker.config.spelling_store_unknown_words = False\n        self.checker.config.max_spelling_suggestions = 4\n        self.checker.config.spelling_ignore_comment_directives = 'fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:'\n\n    @patch('enchant.Dict')\n    def test_open(self, mock_dict):\n        self.checker.open()\n        mock_dict.assert_called_once_with('en_US')\n        self.assertTrue(self.checker.initialized)\n\n    def test_close(self):\n        self.checker.private_dict_file = MagicMock()\n        self.checker.close()\n        self.checker.private_dict_file.close.assert_called_once()\n\n    @patch('enchant.Dict.check')\n    def test_check_spelling(self, mock_check):\n        mock_check.return_value = False\n        self.checker.spelling_dict = MagicMock()\n        self.checker.spelling_dict.suggest.return_value = ['hello', 'hell']\n        self.checker.add_message = MagicMock()\n        self.checker._check_spelling('wrong-spelling-in-comment', '# speling', 1)\n        self.checker.add_message.assert_called_once()\n\n    @patch('enchant.Dict.check')\n    def test_process_tokens(self, mock_check):\n        mock_check.return_value = False\n        self.checker.spelling_dict = MagicMock()\n        self.checker.spelling_dict.suggest.return_value = ['hello', 'hell']\n        self.checker.add_message = MagicMock()\n        self.checker.process_tokens([(tokenize.COMMENT, '# speling', (1, 0), (1, 10), 'file')])\n        self.checker.add_message.assert_called_once()\n\n    @patch('enchant.Dict.check')\n    def test_check_docstring(self, mock_check):\n        mock_check.return_value = False\n        self.checker.spelling_dict = MagicMock()\n        self.checker.spelling_dict.suggest.return_value = ['hello', 'hell']\n        self.checker.add_message = MagicMock()\n        mock_node = MagicMock()\n        mock_node.doc = 'speling'\n        mock_node.lineno = 1\n        self.checker._check_docstring(mock_node)\n        self.checker.add_message.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_583": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nimport dask.array as da\nfrom xarray.core import indexing\n\nclass TestIndexing(unittest.TestCase):\n    def setUp(self):\n        self.np_array = np.random.rand(3, 4)\n        self.pd_index = pd.Index(['a', 'b', 'c', 'd'])\n        self.dask_array = da.from_array(self.np_array, chunks=(2, 2))\n\n    def test_expanded_indexer(self):\n        key = (0, slice(None), Ellipsis, 1)\n        expanded_key = indexing.expanded_indexer(key, 4)\n        self.assertEqual(expanded_key, (0, slice(None), slice(None), 1))\n\n    def test_sanitize_slice_element(self):\n        # Test with a pandas Timedelta object\n        self.assertEqual(indexing._sanitize_slice_element(pd.Timedelta(days=1)), pd.Timedelta(days=1))\n\n    def test_asarray_tuplesafe(self):\n        values = (1, 2, 3)\n        result = indexing._asarray_tuplesafe(values)\n        self.assertTrue(isinstance(result, np.ndarray))\n        self.assertEqual(result.tolist(), [1, 2, 3])\n\n    def test_is_nested_tuple(self):\n        self.assertTrue(indexing._is_nested_tuple((1, (2, 3))))\n        self.assertFalse(indexing._is_nested_tuple((1, 2, 3)))\n\n    def test_index_method_kwargs(self):\n        kwargs = indexing._index_method_kwargs('ffill', 0.5)\n        self.assertEqual(kwargs, {'method': 'ffill', 'tolerance': 0.5})\n\n    def test_get_loc(self):\n        loc = indexing.get_loc(self.pd_index, 'b')\n        self.assertEqual(loc, 1)\n\n    def test_get_indexer_nd(self):\n        labels = np.array([['a', 'b'], ['c', 'd']])\n        indexer = indexing.get_indexer_nd(self.pd_index, labels)\n        expected_indexer = np.array([[0, 1], [2, 3]])\n        self.assertTrue(np.array_equal(indexer, expected_indexer))\n\n    def test_convert_label_indexer(self):\n        label = slice('b', None)\n        idx, new_idx = indexing.convert_label_indexer(self.pd_index, label)\n        self.assertEqual(idx.start, 1)\n        self.assertEqual(idx.stop, 4)\n\n    def test_get_dim_indexers(self):\n        # Test with a DataArray object\n        pass\n\n    def test_remap_label_indexers(self):\n        # Test with a DataArray object\n        pass\n\n    def test_slice_slice(self):\n        old_slice = slice(0, 10, 2)\n        applied_slice = slice(0, 5, 1)\n        size = 10\n        result = indexing.slice_slice(old_slice, applied_slice, size)\n        self.assertEqual(result, slice(0, 8, 2))\n\n    def test_index_indexer_1d(self):\n        old_indexer = slice(0, 10, 2)\n        applied_indexer = np.array([0, 2, 4])\n        size = 10\n        result = indexing._index_indexer_1d(old_indexer, applied_indexer, size)\n        self.assertTrue(np.array_equal(result, np.array([0, 4, 8])))\n\n    def test_basic_indexer(self):\n        key = (0, slice(None), 1)\n        basic_indexer = indexing.BasicIndexer(key)\n        self.assertEqual(basic_indexer.tuple, (0, slice(None), 1))\n\n    def test_outer_indexer(self):\n        key = (0, np.array([1, 2, 3]), 1)\n        outer_indexer = indexing.OuterIndexer(key)\n        self.assertEqual(outer_indexer.tuple, (0, np.array([1, 2, 3]), 1))\n\n    def test_vectorized_indexer(self):\n        key = (np.array([0, 1]), np.array([2, 3]))\n        vectorized_indexer = indexing.VectorizedIndexer(key)\n        self.assertTrue(np.array_equal(vectorized_indexer.tuple[0], np.array([0, 1])))\n\n    def test_numpy_indexing_adapter(self):\n        adapter = indexing.NumpyIndexingAdapter(self.np_array)\n        key = indexing.BasicIndexer((0, slice(None)))\n        result = adapter[key]\n        self.assertTrue(np.array_equal(result, self.np_array[0, :]))\n\n    def test_dask_indexing_adapter(self):\n        adapter = indexing.DaskIndexingAdapter(self.dask_array)\n        key = indexing.BasicIndexer((0, slice(None)))\n        result = adapter[key].compute()\n        self.assertTrue(np.array_equal(result, self.np_array[0, :]))\n\n    def test_pandas_index_adapter(self):\n        adapter = indexing.PandasIndexAdapter(self.pd_index)\n        key = indexing.BasicIndexer((slice(None),))\n        result = adapter[key]\n        self.assertTrue(np.array_equal(result, self.pd_index.values))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_171": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.http import Http404\nfrom django.test import RequestFactory\nfrom django.views.debug import (\n    CallableSettingWrapper,\n    ExceptionReporter,\n    SafeExceptionReporterFilter,\n    default_urlconf,\n    get_default_exception_reporter_filter,\n    technical_404_response,\n    technical_500_response,\n)\n\nclass TestDjangoDebug(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_CallableSettingWrapper(self):\n        mock_callable = MagicMock()\n        wrapper = CallableSettingWrapper(mock_callable)\n        self.assertEqual(repr(wrapper), repr(mock_callable))\n\n    def test_technical_500_response(self):\n        request = self.factory.get('/')\n        exc_type, exc_value, tb = None, None, None\n        response = technical_500_response(request, exc_type, exc_value, tb)\n        self.assertEqual(response.status_code, 500)\n\n    def test_get_default_exception_reporter_filter(self):\n        filter_instance = get_default_exception_reporter_filter()\n        self.assertIsInstance(filter_instance, SafeExceptionReporterFilter)\n\n    def test_ExceptionReporter(self):\n        request = self.factory.get('/')\n        exc_type, exc_value, tb = None, None, None\n        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n        self.assertEqual(reporter.request, request)\n\n    def test_SafeExceptionReporterFilter(self):\n        filter = SafeExceptionReporterFilter()\n        self.assertEqual(filter.cleanse_setting('KEY', 'secret'), filter.cleansed_substitute)\n\n    def test_technical_404_response(self):\n        request = self.factory.get('/')\n        exception = Http404({'path': '/test/', 'tried': []})\n        response = technical_404_response(request, exception)\n        self.assertEqual(response.status_code, 404)\n\n    def test_default_urlconf(self):\n        request = self.factory.get('/')\n        response = default_urlconf(request)\n        self.assertEqual(response.status_code, 200)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_242": ["\nfrom django.test import TestCase\nfrom django.db.models import Model, CharField, IntegerField\nfrom django.db.models.sql.query import Query, JoinPromoter\n\nclass TestQueryMethods(TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            name = CharField(max_length=200)\n            age = IntegerField()\n\n        self.TestModel = TestModel\n        self.query = Query(self.TestModel)\n\n    def test_add_filter(self):\n        self.query.add_filter(('name', 'Test'))\n        self.assertEqual(self.query.where.children[0].children[0].rhs, 'Test')\n\n    def test_add_ordering(self):\n        self.query.add_ordering('name')\n        self.assertEqual(self.query.order_by[0], 'name')\n\n    def test_set_limits(self):\n        self.query.set_limits(low=10, high=20)\n        self.assertEqual(self.query.low_mark, 10)\n        self.assertEqual(self.query.high_mark, 20)\n\n    def test_join_promoter(self):\n        join_promoter = JoinPromoter(connector='AND', num_children=2, negated=False)\n        join_promoter.add_votes(['table1', 'table2'])\n        to_demote = join_promoter.update_join_types(self.query)\n        self.assertEqual(to_demote, {'table1', 'table2'})\n"], "sample_773": ["\nimport unittest\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor, ExtraTreesClassifier, ExtraTreesRegressor, RandomTreesEmbedding\nfrom sklearn.datasets import make_classification, make_regression\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.utils.estimator_checks import check_estimator\n\nclass TestForest(unittest.TestCase):\n    def test_random_forest_classifier(self):\n        X, y = make_classification(n_samples=100, n_features=4, n_informative=2, n_redundant=0, random_state=0, shuffle=False)\n        clf = RandomForestClassifier(n_estimators=10, max_depth=2, random_state=0)\n        clf.fit(X, y)\n        self.assertEqual(clf.n_features_, 4)\n        self.assertEqual(clf.n_classes_, 2)\n        self.assertTrue(hasattr(clf, 'feature_importances_'))\n        pred = clf.predict(X)\n        self.assertEqual(pred.shape, (100,))\n\n    def test_random_forest_regressor(self):\n        X, y = make_regression(n_samples=100, n_features=4, n_informative=2, random_state=0, shuffle=False)\n        reg = RandomForestRegressor(n_estimators=10, max_depth=2, random_state=0)\n        reg.fit(X, y)\n        self.assertEqual(reg.n_features_, 4)\n        self.assertTrue(hasattr(reg, 'feature_importances_'))\n        pred = reg.predict(X)\n        self.assertEqual(pred.shape, (100,))\n\n    def test_extra_trees_classifier(self):\n        X, y = make_classification(n_samples=100, n_features=4, n_informative=2, n_redundant=0, random_state=0, shuffle=False)\n        clf = ExtraTreesClassifier(n_estimators=10, max_depth=2, random_state=0)\n        clf.fit(X, y)\n        self.assertEqual(clf.n_features_, 4)\n        self.assertEqual(clf.n_classes_, 2)\n        self.assertTrue(hasattr(clf, 'feature_importances_'))\n        pred = clf.predict(X)\n        self.assertEqual(pred.shape, (100,))\n\n    def test_extra_trees_regressor(self):\n        X, y = make_regression(n_samples=100, n_features=4, n_informative=2, random_state=0, shuffle=False)\n        reg = ExtraTreesRegressor(n_estimators=10, max_depth=2, random_state=0)\n        reg.fit(X, y)\n        self.assertEqual(reg.n_features_, 4)\n        self.assertTrue(hasattr(reg, 'feature_importances_'))\n        pred = reg.predict(X)\n        self.assertEqual(pred.shape, (100,))\n\n    def test_random_trees_embedding(self):\n        X, y = make_classification(n_samples=100, n_features=4, n_informative=2, n_redundant=0, random_state=0, shuffle=False)\n        emb = RandomTreesEmbedding(n_estimators=10, max_depth=2, random_state=0)\n        emb.fit(X)\n        self.assertEqual(emb.n_features_, 4)\n        self.assertTrue(hasattr(emb, 'estimators_'))\n        transformed = emb.transform(X)\n        self.assertTrue(transformed.shape[0] == X.shape[0])\n\n    def test_sklearn_compatibility(self):\n        check_estimator(RandomForestClassifier)\n        check_estimator(RandomForestRegressor)\n        check_estimator(ExtraTreesClassifier)\n        check_estimator(ExtraTreesRegressor)\n        check_estimator(RandomTreesEmbedding)\n\n    def test_predict_without_fit(self):\n        X, y = make_classification(n_samples=100, n_features=4, n_informative=2, n_redundant=0, random_state=0, shuffle=False)\n        clf = RandomForestClassifier(n_estimators=10, max_depth=2, random_state=0)\n        with self.assertRaises(NotFittedError):\n            clf.predict(X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1099": ["\nimport unittest\nfrom sympy import MatrixSymbol, BlockMatrix, BlockDiagMatrix, symbols, Identity, ZeroMatrix, ImmutableMatrix\nfrom sympy.matrices.expressions.blockmatrix import (block_collapse, bc_matmul, bc_block_plus_ident, bc_dist, bc_matadd, bc_transpose, bc_inverse, blockcut, reblock_2x2, deblock)\n\nn, m, l = symbols('n m l')\nX = MatrixSymbol('X', n, n)\nY = MatrixSymbol('Y', m, m)\nZ = MatrixSymbol('Z', n, m)\n\nclass TestBlockMatrix(unittest.TestCase):\n    def setUp(self):\n        self.B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n        self.C = BlockMatrix([[Identity(n), Z]])\n        self.D = BlockDiagMatrix(X, Y)\n\n    def test_block_collapse(self):\n        self.assertEqual(block_collapse(self.C*self.B), BlockMatrix([[X, Z + Z*Y]]))\n\n    def test_bc_matmul(self):\n        self.assertEqual(bc_matmul(self.C*self.B), BlockMatrix([[X, Z + Z*Y]]))\n\n    def test_bc_block_plus_ident(self):\n        self.assertEqual(bc_block_plus_ident(self.B + Identity(2)), self.B + Identity(2))\n\n    def test_bc_dist(self):\n        self.assertEqual(bc_dist(2*self.D), BlockDiagMatrix(2*X, 2*Y))\n\n    def test_bc_matadd(self):\n        self.assertEqual(bc_matadd(self.B + self.C), BlockMatrix([[X + Identity(n), Z + Z], [ZeroMatrix(m, n), Y]]))\n\n    def test_bc_transpose(self):\n        self.assertEqual(bc_transpose(self.B), BlockMatrix([[X.T, ZeroMatrix(n, m)], [Z.T, Y.T]]))\n\n    def test_bc_inverse(self):\n        self.assertEqual(bc_inverse(self.D), BlockDiagMatrix(X.I, Y.I))\n\n    def test_deblock(self):\n        self.assertEqual(deblock(BlockMatrix([[self.B, self.C]])), BlockMatrix([[X, Z, Identity(n), ZeroMatrix(m, n), Y]]))\n\n    def test_reblock_2x2(self):\n        M = ImmutableMatrix(4, 4, range(16))\n        B = blockcut(M, (2, 2), (2, 2))\n        self.assertEqual(reblock_2x2(B), BlockMatrix([[B.blocks[0, 0], BlockMatrix([B.blocks[0, 1]])], [BlockMatrix([B.blocks[1, 0]]), BlockMatrix([B.blocks[1, 1]])]]))\n\n    def test_blockcut(self):\n        M = ImmutableMatrix(4, 4, range(16))\n        self.assertEqual(blockcut(M, (1, 3), (1, 3)), BlockMatrix([[MatrixSlice(M, (0, 1), (0, 1)), MatrixSlice(M, (0, 1), (1, 4))], [MatrixSlice(M, (1, 4), (0, 1)), MatrixSlice(M, (1, 4), (1, 4))]]))\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1187": ["\nimport unittest\nfrom sympy import Point, Polygon, symbols\nfrom sympy.integrals.intpoly import (decompose, best_origin, distance_to_side, polytope_integrate, point_sort,\n                                     hyperplane_parameters, main_integrate3d, main_integrate, polygon_integrate,\n                                     lineseg_integrate, integration_reduction, integration_reduction_dynamic, is_vertex)\n\nx, y, z = symbols('x y z')\n\nclass TestIntegrals(unittest.TestCase):\n    def test_decompose(self):\n        expr = x**2 + x*y + x + y + x**3*y**2 + y**5\n        self.assertEqual(decompose(expr), {1: x + y, 2: x**2 + x*y, 5: x**3*y**2 + y**5})\n\n    def test_best_origin(self):\n        lineseg = Polygon(Point(0, 3), Point(1, 1))\n        expr = x**3*y**7\n        self.assertEqual(best_origin((2, 1), 3, lineseg, expr), (0, 3.0))\n\n    def test_distance_to_side(self):\n        point = (0, 0, 0)\n        self.assertEqual(distance_to_side(point, [(0, 0, 1), (0, 1, 0)], (1, 0, 0)), -0.7071067811865476)\n\n    def test_polytope_integrate(self):\n        polygon = Polygon(Point(0, 0), Point(0, 1), Point(1, 1), Point(1, 0))\n        expr = x*y\n        self.assertEqual(polytope_integrate(polygon, expr), 1/4)\n\n    def test_point_sort(self):\n        poly = Polygon(Point(0, 0), Point(1, 0), Point(1, 1))\n        self.assertEqual(point_sort(poly), [Point(1, 1), Point(1, 0), Point(0, 0)])\n\n    def test_hyperplane_parameters(self):\n        polygon = Polygon(Point(0, 3), Point(5, 3), Point(1, 1))\n        self.assertEqual(hyperplane_parameters(polygon), [((0, 1), 3), ((1, -2), -1), ((-2, -1), -3)])\n\n    def test_main_integrate3d(self):\n        cube = [[(0, 0, 0), (0, 0, 5), (0, 5, 0), (0, 5, 5), (5, 0, 0),\n                 (5, 0, 5), (5, 5, 0), (5, 5, 5)],\n                [2, 6, 7, 3], [3, 7, 5, 1], [7, 6, 4, 5], [1, 5, 4, 0],\n                [3, 1, 0, 2], [0, 4, 6, 2]]\n        vertices = cube[0]\n        facets = cube[1:]\n        hp_params = hyperplane_parameters(facets, vertices)\n        self.assertEqual(main_integrate3d(1, facets, vertices, hp_params), -125)\n\n    def test_main_integrate(self):\n        triangle = Polygon(Point(0, 3), Point(5, 3), Point(1, 1))\n        facets = triangle.sides\n        hp_params = hyperplane_parameters(triangle)\n        self.assertEqual(main_integrate(x**2 + y**2, facets, hp_params), 325/6)\n\n    def test_polygon_integrate(self):\n        cube = [[(0, 0, 0), (0, 0, 5), (0, 5, 0), (0, 5, 5), (5, 0, 0),\n                 (5, 0, 5), (5, 5, 0), (5, 5, 5)],\n                [2, 6, 7, 3], [3, 7, 5, 1], [7, 6, 4, 5], [1, 5, 4, 0],\n                [3, 1, 0, 2], [0, 4, 6, 2]]\n        facet = cube[1]\n        facets = cube[1:]\n        vertices = cube[0]\n        self.assertEqual(polygon_integrate(facet, [(0, 1, 0), 5], 0, facets, vertices, 1, 0), -25)\n\n    def test_lineseg_integrate(self):\n        polygon = [(0, 5, 0), (5, 5, 0), (5, 5, 5), (0, 5, 5)]\n        line_seg = [(0, 5, 0), (5, 5, 0)]\n        self.assertEqual(lineseg_integrate(polygon, 0, line_seg, 1, 0), 5)\n\n    def test_integration_reduction(self):\n        triangle = Polygon(Point(0, 3), Point(5, 3), Point(1, 1))\n        facets = triangle.sides\n        a, b = hyperplane_parameters(triangle)[0]\n        self.assertEqual(integration_reduction(facets, 0, a, b, 1, (x, y), 0), 5)\n\n    def test_integration_reduction_dynamic(self):\n        triangle = Polygon(Point(0, 3), Point(5, 3), Point(1, 1))\n        facets = triangle.sides\n        a, b = hyperplane_parameters(triangle)[0]\n        x0 = facets[0].points[0]\n        monomial_values = [[0, 0, 0, 0], [1, 0, 0, 5], [y, 0, 1, 15], [x, 1, 0, None]]\n        self.assertEqual(integration_reduction_dynamic(facets, 0, a, b, x, 1, (x, y), 1, 0, 1, x0, monomial_values, 3), 25/2)\n\n    def test_is_vertex(self):\n        self.assertTrue(is_vertex((2, 3)))\n        self.assertFalse(is_vertex((2, 3, 6, 7)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_322": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.db import migrations\nfrom django.db.migrations.executor import MigrationExecutor\n\nclass TestMigrationExecutor(unittest.TestCase):\n\n    def setUp(self):\n        self.connection = MagicMock()\n        self.executor = MigrationExecutor(self.connection)\n\n    def test_migration_plan(self):\n        # Test with a clean start\n        targets = [('test_app', '0001_initial')]\n        plan = self.executor.migration_plan(targets, clean_start=True)\n        self.assertIsInstance(plan, list)\n\n        # Test with a target that is already applied\n        targets = [('test_app', '0001_initial')]\n        self.executor.loader.applied_migrations = {('test_app', '0001_initial'): None}\n        plan = self.executor.migration_plan(targets)\n        self.assertIsInstance(plan, list)\n\n        # Test with a target that is not applied\n        targets = [('test_app', '0002_migration')]\n        self.executor.loader.applied_migrations = {('test_app', '0001_initial'): None}\n        plan = self.executor.migration_plan(targets)\n        self.assertIsInstance(plan, list)\n\n    def test_migrate(self):\n        # Test with a plan that includes both forwards and backwards migrations\n        targets = [('test_app', '0001_initial'), ('test_app', '0002_migration')]\n        plan = [\n            (migrations.Migration('test_app', '0001_initial'), False),\n            (migrations.Migration('test_app', '0002_migration'), True),\n        ]\n        with self.assertRaises(InvalidMigrationPlan):\n            self.executor.migrate(targets, plan=plan)\n\n        # Test with a plan that includes only forwards migrations\n        targets = [('test_app', '0002_migration')]\n        plan = [(migrations.Migration('test_app', '0002_migration'), False)]\n        state = self.executor.migrate(targets, plan=plan)\n        self.assertIsNotNone(state)\n\n        # Test with a plan that includes only backwards migrations\n        targets = [('test_app', '0001_initial')]\n        plan = [(migrations.Migration('test_app', '0001_initial'), True)]\n        state = self.executor.migrate(targets, plan=plan)\n        self.assertIsNotNone(state)\n\n    # Add more test methods for other functions in MigrationExecutor\n"], "sample_913": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom docutils import nodes\nfrom docutils.parsers.rst import directives\nfrom sphinx import addnodes\nfrom sphinx.builders import Builder\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.domains.python import (py_sig_re, _parse_annotation, _pseudo_parse_arglist,\n                                   PyXRefRole, PythonDomain, PythonModuleIndex,\n                                   PyFunction, PyClasslike, PyMethod, PyAttribute, PyModule)\n\nclass TestPythonDomain(unittest.TestCase):\n    def setUp(self):\n        self.domain = PythonDomain('mock_env')\n\n    def test_py_sig_re(self):\n        m = py_sig_re.match('func(arg1, arg2) -> int')\n        self.assertEqual(m.groups(), (None, 'func', 'arg1, arg2', 'int'))\n\n    def test_parse_annotation(self):\n        result = _parse_annotation('List[int]')\n        self.assertEqual(len(result), 1)\n        self.assertIsInstance(result[0], addnodes.pending_xref)\n        self.assertEqual(result[0].astext(), 'List')\n        self.assertEqual(len(result[0]), 1)\n        self.assertIsInstance(result[0][0], addnodes.pending_xref)\n        self.assertEqual(result[0][0].astext(), 'int')\n\n    def test_pseudo_parse_arglist(self):\n        signode = addnodes.desc_signature()\n        _pseudo_parse_arglist(signode, 'arg1, arg2=default')\n        self.assertEqual(len(signode), 1)\n        self.assertIsInstance(signode[0], addnodes.desc_parameterlist)\n        self.assertEqual(len(signode[0]), 2)\n        self.assertIsInstance(signode[0][0], addnodes.desc_parameter)\n        self.assertEqual(signode[0][0].astext(), 'arg1')\n        self.assertIsInstance(signode[0][1], addnodes.desc_parameter)\n        self.assertEqual(signode[0][1].astext(), 'arg2=default')\n\n    def test_py_xref_role(self):\n        env = Mock(spec=BuildEnvironment)\n        env.ref_context = {}\n        role = PyXRefRole()\n        title, target = role.process_link(env, None, False, 'title', 'target')\n        self.assertEqual(title, 'title')\n        self.assertEqual(target, 'target')\n\n    def test_python_module_index(self):\n        index = PythonModuleIndex()\n        index.domain = self.domain\n        content, collapse = index.generate()\n        self.assertEqual(content, [])\n        self.assertFalse(collapse)\n\n    def test_python_domain_methods(self):\n        self.domain.note_object('obj1', 'function', 'id1')\n        self.assertEqual(self.domain.objects['obj1'], ('mock_env.docname', 'id1', 'function'))\n        self.domain.note_module('mod1', 'id2', 'synopsis', 'platform', False)\n        self.assertEqual(self.domain.modules['mod1'], ('mock_env.docname', 'id2', 'synopsis', 'platform', False))\n\n    def test_python_domain_directives(self):\n        app = Mock()\n        app.env = Mock()\n        app.env.ref_context = {}\n        app.env.docname = 'mock_docname'\n        env = Mock(spec=BuildEnvironment)\n        env.app = app\n        env.docname = 'mock_docname'\n        env.ref_context = {}\n        builder = Mock(spec=Builder)\n        builder.env = env\n        self.domain.env = env\n\n        directive = PyFunction(env, Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), 'func(arg1, arg2)', Mock())\n        result = directive.run()\n        self.assertEqual(len(result), 1)\n        self.assertIsInstance(result[0], addnodes.desc)\n\n        directive = PyClasslike(env, Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), 'ClassName', Mock())\n        result = directive.run()\n        self.assertEqual(len(result), 1)\n        self.assertIsInstance(result[0], addnodes.desc)\n\n        directive = PyMethod(env, Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), 'method(arg1, arg2)', Mock())\n        result = directive.run()\n        self.assertEqual(len(result), 1)\n        self.assertIsInstance(result[0], addnodes.desc)\n\n        directive = PyAttribute(env, Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), 'attr', Mock())\n        result = directive.run()\n        self.assertEqual(len(result), 1)\n        self.assertIsInstance(result[0], addnodes.desc)\n\n        directive = PyModule(env, Mock(), Mock(), Mock(), Mock(), ['modname'], {})\n        result = directive.run()\n        self.assertEqual(len(result), 2)\n        self.assertIsInstance(result[0], nodes.target)\n        self.assertIsInstance(result[1], addnodes.index)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_152": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom datetime import datetime, timedelta\nfrom django.http import HttpResponse, HttpResponseRedirect, JsonResponse\nfrom django.http.response import FileResponse, HttpResponsePermanentRedirect, HttpResponseNotModified, HttpResponseBadRequest, HttpResponseNotFound, HttpResponseForbidden, HttpResponseNotAllowed, HttpResponseGone, HttpResponseServerError\nfrom django.utils import timezone\nfrom io import BytesIO\n\nclass TestHttpResponse(unittest.TestCase):\n    def test_init(self):\n        response = HttpResponse('test')\n        self.assertEqual(response.content, b'test')\n\n    def test_set_cookie(self):\n        response = HttpResponse()\n        response.set_cookie('test', 'value')\n        self.assertEqual(response.cookies['test'].value, 'value')\n\n    def test_set_cookie_expires_datetime(self):\n        response = HttpResponse()\n        expires = datetime.utcnow() + timedelta(days=1)\n        response.set_cookie('test', 'value', expires=expires)\n        self.assertIn('test', response.cookies)\n\n    def test_set_cookie_expires_string(self):\n        response = HttpResponse()\n        response.set_cookie('test', 'value', expires='Wed, 31 Dec 2021 23:59:59 GMT')\n        self.assertIn('test', response.cookies)\n\n    # More tests...\n\nclass TestFileResponse(unittest.TestCase):\n    def test_init(self):\n        content = b'test'\n        response = FileResponse(BytesIO(content), as_attachment=True, filename='test.txt')\n        self.assertEqual(response.getvalue(), content)\n\n    # More tests...\n\n# More test classes for other HttpResponse subclasses...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_625": ["\nimport unittest\nimport numpy as np\nimport xarray as xr\nfrom xarray.core.computation import (\n    _UFuncSignature,\n    apply_ufunc,\n    broadcast_compat_data,\n    collect_dict_values,\n    join_dict_keys,\n    ordered_set_intersection,\n    ordered_set_union,\n    result_name,\n    unified_dim_sizes,\n)\n\nclass TestComputationFunctions(unittest.TestCase):\n    def setUp(self):\n        self.da1 = xr.DataArray(np.arange(6).reshape(2, 3), dims=('x', 'y'))\n        self.da2 = xr.DataArray(np.arange(6).reshape(2, 3) * 2, dims=('x', 'y'))\n        self.signature = _UFuncSignature([['x'], ['x']], [['x']])\n\n    def test_result_name(self):\n        self.assertEqual(result_name([self.da1, self.da2]), 'y')\n\n    def test_join_dict_keys(self):\n        self.assertEqual(list(join_dict_keys([self.da1, self.da2], how='inner')), ['x', 'y'])\n\n    def test_collect_dict_values(self):\n        self.assertEqual(collect_dict_values([self.da1, self.da2], ['x', 'y']),\n                         [[self.da1.x, self.da2.x], [self.da1.y, self.da2.y]])\n\n    def test_unified_dim_sizes(self):\n        self.assertEqual(unified_dim_sizes([self.da1.variable, self.da2.variable]),\n                         {'x': 2, 'y': 3})\n\n    def test_broadcast_compat_data(self):\n        self.assertTrue(np.array_equal(broadcast_compat_data(self.da1.variable, ('x',), ('y',)),\n                                       self.da1.data))\n\n    def test_apply_ufunc(self):\n        result = apply_ufunc(np.add, self.da1, self.da2, signature=self.signature)\n        self.assertTrue(np.array_equal(result.data, self.da1.data + self.da2.data))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_138": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.contrib.admindocs.utils import (\n    docutils_is_available,\n    get_view_name,\n    parse_docstring,\n    parse_rst,\n    create_reference_role,\n    replace_named_groups,\n    replace_unnamed_groups\n)\nfrom django.test.utils import captured_stderr\nimport docutils\n\nclass TestUtils(unittest.TestCase):\n\n    def test_get_view_name(self):\n        def test_func():\n            pass\n        self.assertEqual(get_view_name(test_func), '__main__.test_func')\n\n    def test_parse_docstring(self):\n        docstring = \"Title\\n\\nBody\\n\\nHeader: Value\"\n        self.assertEqual(parse_docstring(docstring), ('Title', 'Body', {'Header': 'Value'}))\n\n    @patch('docutils.core.publish_parts')\n    def test_parse_rst(self, mock_publish_parts):\n        mock_publish_parts.return_value = {'fragment': '<p>Test</p>'}\n        self.assertEqual(parse_rst('Test', 'context'), '<p>Test</p>')\n\n    @patch('docutils.parsers.rst.roles.register_canonical_role')\n    def test_create_reference_role(self, mock_register_role):\n        create_reference_role('test', 'url')\n        mock_register_role.assert_called()\n\n    def test_replace_named_groups(self):\n        pattern = r'^(?P<a>\\w+)/b/(?P<c>\\w+)/$'\n        self.assertEqual(replace_named_groups(pattern), r'^<a>/b/<c>/$')\n\n    def test_replace_unnamed_groups(self):\n        pattern = r'^(?P<a>\\w+)/b/(\\w+)$'\n        self.assertEqual(replace_unnamed_groups(pattern), r'^(?P<a>\\w+)/b/<var>$')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_124": ["\nimport unittest\nfrom django.http import HttpResponse, HttpResponseRedirect, HttpResponsePermanentRedirect, HttpResponseNotModified, JsonResponse\nfrom unittest.mock import Mock, patch\n\nclass TestHttpResponse(unittest.TestCase):\n    def test_http_response_init(self):\n        response = HttpResponse('test content')\n        self.assertEqual(response.content, b'test content')\n        self.assertEqual(response.status_code, 200)\n\n    def test_http_response_set_header(self):\n        response = HttpResponse()\n        response['Content-Type'] = 'application/json'\n        self.assertEqual(response['Content-Type'], 'application/json')\n\n    def test_http_response_write(self):\n        response = HttpResponse()\n        response.write('test content')\n        self.assertEqual(response.content, b'test content')\n\n    def test_http_response_writelines(self):\n        response = HttpResponse()\n        response.writelines(['test ', 'content'])\n        self.assertEqual(response.content, b'test content')\n\nclass TestHttpResponseRedirect(unittest.TestCase):\n    def test_http_response_redirect_init(self):\n        response = HttpResponseRedirect('http://example.com')\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response['Location'], 'http://example.com')\n\n    def test_http_response_permanent_redirect_init(self):\n        response = HttpResponsePermanentRedirect('http://example.com')\n        self.assertEqual(response.status_code, 301)\n        self.assertEqual(response['Location'], 'http://example.com')\n\nclass TestHttpResponseNotModified(unittest.TestCase):\n    def test_http_response_not_modified_init(self):\n        response = HttpResponseNotModified()\n        self.assertEqual(response.status_code, 304)\n        with self.assertRaises(AttributeError):\n            response.content = 'test content'\n\nclass TestJsonResponse(unittest.TestCase):\n    def test_json_response_init(self):\n        data = {'test': 'content'}\n        response = JsonResponse(data)\n        self.assertEqual(response.content, b'{\"test\": \"content\"}')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'application/json')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_457": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.db.models.constraints import BaseConstraint, CheckConstraint, Deferrable, UniqueConstraint\nfrom django.db.models.query_utils import Q\nfrom django.db.models import F\nfrom django.core.exceptions import ValidationError\n\nclass TestConstraints(unittest.TestCase):\n    def setUp(self):\n        self.base_constraint = BaseConstraint(name=\"test_constraint\")\n        self.check_constraint = CheckConstraint(check=Q(price__gt=0), name=\"check_price\")\n        self.unique_constraint = UniqueConstraint(fields=[\"field1\", \"field2\"], name=\"unique_fields\")\n        self.deferrable_constraint = UniqueConstraint(fields=[\"field3\"], deferrable=Deferrable.DEFERRED, name=\"deferrable_field\")\n\n    def test_base_constraint_init(self):\n        self.assertEqual(self.base_constraint.name, \"test_constraint\")\n\n    def test_check_constraint_init(self):\n        self.assertEqual(self.check_constraint.name, \"check_price\")\n\n    def test_unique_constraint_init(self):\n        self.assertEqual(self.unique_constraint.name, \"unique_fields\")\n\n    def test_deferrable_constraint_init(self):\n        self.assertEqual(self.deferrable_constraint.name, \"deferrable_field\")\n\n    def test_check_constraint_validate(self):\n        model = Mock()\n        model._get_field_value_map.return_value = {\"price\": -1}\n        with self.assertRaises(ValidationError):\n            self.check_constraint.validate(model, Mock())\n\n    def test_unique_constraint_validate(self):\n        model = Mock()\n        model._default_manager.using.return_value.filter.return_value.exists.return_value = True\n        with self.assertRaises(ValidationError):\n            self.unique_constraint.validate(model, Mock())\n\n    def test_deferrable_constraint_validate(self):\n        model = Mock()\n        model._default_manager.using.return_value.filter.return_value.exists.return_value = True\n        with self.assertRaises(ValidationError):\n            self.deferrable_constraint.validate(model, Mock())\n\n    def test_unique_constraint_with_expressions(self):\n        unique_constraint = UniqueConstraint(expressions=[F(\"field1\") + F(\"field2\")], name=\"unique_expression\")\n        self.assertEqual(unique_constraint.name, \"unique_expression\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_65": ["\nimport unittest\nfrom django.db import models\nfrom django.forms import ValidationError\nfrom django.forms.models import ModelForm, BaseModelForm, modelform_factory, BaseModelFormSet, modelformset_factory, BaseInlineFormSet, inlineformset_factory\n\nclass TestModel(models.Model):\n    name = models.CharField(max_length=200)\n\nclass TestModelForm(ModelForm):\n    class Meta:\n        model = TestModel\n        fields = ['name']\n\nclass TestModelFormSet(BaseModelFormSet):\n    model = TestModel\n\nclass TestInlineModel(models.Model):\n    parent = models.ForeignKey(TestModel, on_delete=models.CASCADE)\n    name = models.CharField(max_length=200)\n\nclass TestInlineFormSet(BaseInlineFormSet):\n    model = TestInlineModel\n    fk_name = 'parent'\n\nclass TestModelFormFunctions(unittest.TestCase):\n\n    def setUp(self):\n        self.model_instance = TestModel.objects.create(name=\"Test\")\n\n    def test_model_to_dict(self):\n        data = model_to_dict(self.model_instance)\n        self.assertEqual(data, {'name': 'Test'})\n\n    def test_construct_instance(self):\n        form = TestModelForm({'name': 'New Test'})\n        self.assertTrue(form.is_valid())\n        instance = construct_instance(form, self.model_instance)\n        self.assertEqual(instance.name, 'New Test')\n\n    def test_modelform_factory(self):\n        NewForm = modelform_factory(TestModel, fields=('name',))\n        form = NewForm()\n        self.assertIsInstance(form, ModelForm)\n\n    def test_modelformset_factory(self):\n        TestModelFormSet = modelformset_factory(TestModel, form=TestModelForm, extra=1)\n        formset = TestModelFormSet(queryset=TestModel.objects.all())\n        self.assertIsInstance(formset, BaseModelFormSet)\n\n    def test_inlineformset_factory(self):\n        TestInlineFormSet = inlineformset_factory(TestModel, TestInlineModel, fields=('name',))\n        formset = TestInlineFormSet(instance=self.model_instance)\n        self.assertIsInstance(formset, BaseInlineFormSet)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_627": ["\nimport pytest\nimport pandas as pd\nimport numpy as np\nimport xarray as xr\n\n# Import the concat function from the xarray.core.concat module\nfrom xarray.core.concat import concat\n\n# Create some test data\nda1 = xr.DataArray(np.random.rand(2, 3), dims=('x', 'y'), name='A')\nda2 = xr.DataArray(np.random.rand(2, 3), dims=('x', 'y'), name='A')\nds1 = xr.Dataset({'A': da1, 'B': xr.DataArray(np.random.rand(2), dims='x', name='B')})\nds2 = xr.Dataset({'A': da2, 'B': xr.DataArray(np.random.rand(2), dims='x', name='B')})\n\ndef test_concat_dataarray_new_dim():\n    result = concat([da1, da2], dim='z')\n    assert result.dims == ('x', 'y', 'z')\n    assert 'z' in result.coords\n\ndef test_concat_dataset_new_dim():\n    result = concat([ds1, ds2], dim='z')\n    assert result.dims == ('x', 'y', 'z')\n    assert 'z' in result.coords\n\ndef test_concat_dataarray_existing_dim():\n    result = concat([da1, da1], dim='x')\n    assert result.dims == ('x', 'y')\n    assert result.sizes['x'] == 4\n\ndef test_concat_dataset_existing_dim():\n    result = concat([ds1, ds1], dim='x')\n    assert result.dims == ('x', 'y')\n    assert result.sizes['x'] == 4\n\ndef test_concat_dataarray_with_different_coords():\n    da3 = da2.assign_coords(z=xr.DataArray([1, 2], dims='x'))\n    result = concat([da1, da3], dim='x', coords='different')\n    assert 'z' in result.coords\n\ndef test_concat_dataset_with_different_coords():\n    ds3 = ds2.assign_coords(z=xr.DataArray([1, 2], dims='x'))\n    result = concat([ds1, ds3], dim='x', coords='different')\n    assert 'z' in result.coords\n\ndef test_concat_with_invalid_compat():\n    with pytest.raises(ValueError):\n        concat([da1, da2], dim='x', compat='invalid')\n\ndef test_concat_dataarray_with_invalid_data_vars():\n    with pytest.raises(ValueError):\n        concat([da1, da2], dim='x', data_vars='invalid')\n"], "sample_606": ["\nimport unittest\nimport numpy as np\nimport xarray as xr\nfrom xarray.core.computation import (\n    _UFuncSignature,\n    apply_ufunc,\n    broadcast_compat_data,\n    collect_dict_values,\n    join_dict_keys,\n    ordered_set_intersection,\n    ordered_set_union,\n    result_name,\n    unified_dim_sizes,\n)\n\nclass TestComputation(unittest.TestCase):\n    def setUp(self):\n        self.da = xr.DataArray(np.random.rand(3, 4), dims=('x', 'y'))\n        self.signature = _UFuncSignature([['x'], ['y']], [['z']])\n\n    def test_result_name(self):\n        self.assertEqual(result_name([self.da, self.da]), 'unknown')\n\n    def test_join_dict_keys(self):\n        dicts = [{'a': 1, 'b': 2}, {'b': 3, 'c': 4}]\n        self.assertEqual(set(join_dict_keys(dicts, how='inner')), {'b'})\n        self.assertEqual(set(join_dict_keys(dicts, how='outer')), {'a', 'b', 'c'})\n        self.assertEqual(set(join_dict_keys(dicts, how='left')), {'a', 'b'})\n        self.assertEqual(set(join_dict_keys(dicts, how='right')), {'b', 'c'})\n        self.assertEqual(set(join_dict_keys(dicts, how='exact')), {'b'})\n\n    def test_collect_dict_values(self):\n        dicts = [{'a': 1, 'b': 2}, {'b': 3, 'c': 4}]\n        keys = ['a', 'b']\n        self.assertEqual(collect_dict_values(dicts, keys), [[1, None], [2, 3]])\n        self.assertEqual(collect_dict_values(dicts, keys, fill_value=0), [[1, 0], [2, 3]])\n\n    def test_broadcast_compat_data(self):\n        data = broadcast_compat_data(self.da.variable, ('z',), ('x',))\n        self.assertEqual(data.shape, (1, 3, 4))\n\n    def test_unified_dim_sizes(self):\n        sizes = unified_dim_sizes([self.da.variable])\n        self.assertEqual(sizes, {'x': 3, 'y': 4})\n\n    def test_apply_ufunc(self):\n        result = apply_ufunc(np.mean, self.da, input_core_dims=[['x']])\n        self.assertEqual(result.shape, (4,))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_866": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nimport numpy as np\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.datasets import load_iris\nfrom sklearn.svm import SVC\n\nclass TestGridSearchCV(unittest.TestCase):\n\n    def setUp(self):\n        self.iris = load_iris()\n        self.parameters = {'kernel':('linear', 'rbf'), 'C':[1, 10]}\n        self.svc = SVC()\n\n    def test_fit(self):\n        clf = GridSearchCV(self.svc, self.parameters)\n        clf.fit(self.iris.data, self.iris.target)\n        self.assertIsNotNone(clf.cv_results_)\n        self.assertIsNotNone(clf.best_estimator_)\n        self.assertIsNotNone(clf.best_params_)\n        self.assertIsNotNone(clf.best_score_)\n\n    def test_refit(self):\n        clf = GridSearchCV(self.svc, self.parameters, refit=False)\n        clf.fit(self.iris.data, self.iris.target)\n        with self.assertRaises(NotFittedError):\n            clf.predict(self.iris.data)\n\n    def test_score(self):\n        clf = GridSearchCV(self.svc, self.parameters)\n        clf.fit(self.iris.data, self.iris.target)\n        score = clf.score(self.iris.data, self.iris.target)\n        self.assertIsInstance(score, float)\n\n    def test_predict(self):\n        clf = GridSearchCV(self.svc, self.parameters)\n        clf.fit(self.iris.data, self.iris.target)\n        predictions = clf.predict(self.iris.data)\n        self.assertIsInstance(predictions, np.ndarray)\n\n    def test_invalid_param_grid(self):\n        with self.assertRaises(ValueError):\n            GridSearchCV(self.svc, {'C': np.array([[1, 2], [3, 4]])})\n        with self.assertRaises(ValueError):\n            GridSearchCV(self.svc, {'C': 'invalid'})\n        with self.assertRaises(ValueError):\n            GridSearchCV(self.svc, {'C': []})\n\n    def test_custom_scoring(self):\n        clf = GridSearchCV(self.svc, self.parameters, scoring='f1_macro')\n        clf.fit(self.iris.data, self.iris.target)\n        self.assertIsNotNone(clf.cv_results_)\n        self.assertIn('mean_test_f1_macro', clf.cv_results_)\n\n    @patch('sklearn.model_selection._search.check_cv')\n    def test_cv_split(self, mock_check_cv):\n        mock_check_cv.return_value = MagicMock()\n        clf = GridSearchCV(self.svc, self.parameters, cv=5)\n        clf.fit(self.iris.data, self.iris.target)\n        mock_check_cv.assert_called_once_with(5, self.iris.target, classifier=True)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_178": ["\nimport unittest\nfrom django.forms import Form, IntegerField\nfrom django.forms.formsets import BaseFormSet, formset_factory, all_valid\n\nclass TestForm(Form):\n    field = IntegerField()\n\nclass TestFormSet(unittest.TestCase):\n    def setUp(self):\n        self.FormSet = formset_factory(TestForm, extra=2)\n\n    def test_formset_initialization(self):\n        formset = self.FormSet()\n        self.assertEqual(len(formset.forms), 2)\n\n    def test_formset_total_form_count(self):\n        formset = self.FormSet(initial=[{'field': 1}, {'field': 2}])\n        self.assertEqual(formset.total_form_count(), 2)\n\n    def test_formset_initial_form_count(self):\n        formset = self.FormSet(initial=[{'field': 1}, {'field': 2}])\n        self.assertEqual(formset.initial_form_count(), 2)\n\n    def test_formset_is_valid(self):\n        formset = self.FormSet(data={'form-TOTAL_FORMS': '2', 'form-INITIAL_FORMS': '0',\n                                     'form-0-field': '1', 'form-1-field': '2'})\n        self.assertTrue(formset.is_valid())\n\n    def test_formset_cleaned_data(self):\n        formset = self.FormSet(data={'form-TOTAL_FORMS': '2', 'form-INITIAL_FORMS': '0',\n                                     'form-0-field': '1', 'form-1-field': '2'})\n        self.assertEqual(formset.cleaned_data, [{'field': 1}, {'field': 2}])\n\n    def test_all_valid(self):\n        formset1 = self.FormSet(data={'form-TOTAL_FORMS': '2', 'form-INITIAL_FORMS': '0',\n                                      'form-0-field': '1', 'form-1-field': '2'})\n        formset2 = self.FormSet(data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '0',\n                                      'form-0-field': '3'})\n        self.assertTrue(all_valid([formset1, formset2]))\n\n    def test_formset_factory_max_num(self):\n        FormSet = formset_factory(TestForm, extra=2, max_num=3)\n        formset = FormSet()\n        self.assertEqual(formset.max_num, 3)\n\n    def test_formset_factory_absolute_max(self):\n        FormSet = formset_factory(TestForm, extra=2, absolute_max=5)\n        formset = FormSet()\n        self.assertEqual(formset.absolute_max, 5)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1124": ["\nimport unittest\nfrom sympy import symbols\nfrom sympy.polys.domains import ZZ\nfrom sympy.polys.fields import field, sfield, FracField, FracElement\n\nclass TestFields(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n        self.K, (self.fx, self.fy, self.fz) = field(['x', 'y', 'z'], ZZ)\n\n    def test_field_construction(self):\n        self.assertIsInstance(self.K, FracField)\n        self.assertIsInstance(self.fx, FracElement)\n        self.assertEqual(self.K.symbols, (self.x, self.y, self.z))\n\n    def test_sfield_construction(self):\n        K, f = sfield(self.x * self.y + 4 * self.x**2 / self.z**2)\n        self.assertIsInstance(K, FracField)\n        self.assertIsInstance(f, FracElement)\n\n    def test_fracelement_operations(self):\n        f = self.fx + self.fy\n        self.assertEqual(f, self.fx + self.fy)\n        self.assertEqual(f - self.fy, self.fx)\n        self.assertEqual(f * self.fz, (self.fx + self.fy) * self.fz)\n        self.assertEqual(f / self.fx, self.fy / self.fx + 1)\n\n    def test_fracelement_evaluation(self):\n        f = self.fx + self.fy\n        self.assertEqual(f(1, 2), 3)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_99": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom pathlib import Path\nfrom django.utils import autoreload\nfrom django.utils.autoreload import WatchmanUnavailable, WatchmanReloader, StatReloader\n\nclass TestAutoreload(unittest.TestCase):\n    @patch('django.utils.autoreload.pywatchman', None)\n    def test_get_reloader_without_watchman(self):\n        reloader = autoreload.get_reloader()\n        self.assertIsInstance(reloader, StatReloader)\n\n    @patch('django.utils.autoreload.pywatchman')\n    def test_get_reloader_with_watchman(self, mock_pywatchman):\n        mock_pywatchman.client.return_value.query.return_value = {'version': '4.9.0'}\n        reloader = autoreload.get_reloader()\n        self.assertIsInstance(reloader, WatchmanReloader)\n\n    @patch('django.utils.autoreload.pywatchman')\n    def test_get_reloader_with_watchman_unavailable(self, mock_pywatchman):\n        mock_pywatchman.client.side_effect = Exception('Cannot connect to the watchman service.')\n        with self.assertRaises(WatchmanUnavailable):\n            autoreload.get_reloader()\n\n    @patch('django.utils.autoreload.WatchmanReloader.check_availability')\n    @patch('django.utils.autoreload.StatReloader')\n    def test_start_django_with_watchman_unavailable(self, mock_stat_reloader, mock_check_availability):\n        mock_check_availability.side_effect = WatchmanUnavailable()\n        mock_reloader = MagicMock()\n        mock_reloader.should_stop = False\n        mock_stat_reloader.return_value = mock_reloader\n        main_func = MagicMock()\n\n        autoreload.start_django(mock_reloader, main_func)\n\n        mock_stat_reloader.assert_called_once()\n        mock_reloader.run.assert_called_once_with(main_func)\n\n    @patch('django.utils.autoreload.restart_with_reloader')\n    @patch('os.environ', {'RUN_MAIN': 'true'})\n    def test_run_with_reloader_child_process(self, mock_restart_with_reloader):\n        main_func = MagicMock()\n\n        autoreload.run_with_reloader(main_func)\n\n        mock_restart_with_reloader.assert_not_called()\n\n    @patch('django.utils.autoreload.restart_with_reloader')\n    @patch('os.environ', {})\n    def test_run_with_reloader_parent_process(self, mock_restart_with_reloader):\n        main_func = MagicMock()\n\n        autoreload.run_with_reloader(main_func)\n\n        mock_restart_with_reloader.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_752": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics.cluster import silhouette_score, silhouette_samples, calinski_harabasz_score, davies_bouldin_score\nfrom sklearn.datasets import make_blobs\n\nclass TestUnsupervisedMetrics(unittest.TestCase):\n    def setUp(self):\n        self.X, self.labels = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0)\n\n    def test_silhouette_score(self):\n        score = silhouette_score(self.X, self.labels)\n        self.assertIsInstance(score, float)\n        self.assertTrue(-1 <= score <= 1)\n\n    def test_silhouette_samples(self):\n        samples = silhouette_samples(self.X, self.labels)\n        self.assertEqual(len(samples), len(self.X))\n        self.assertTrue(all(-1 <= s <= 1 for s in samples))\n\n    def test_calinski_harabasz_score(self):\n        score = calinski_harabasz_score(self.X, self.labels)\n        self.assertIsInstance(score, float)\n        self.assertTrue(score >= 0)\n\n    def test_davies_bouldin_score(self):\n        score = davies_bouldin_score(self.X, self.labels)\n        self.assertIsInstance(score, float)\n        self.assertTrue(score >= 0)\n\n    def test_silhouette_score_sample_size(self):\n        score = silhouette_score(self.X, self.labels, sample_size=200)\n        self.assertIsInstance(score, float)\n        self.assertTrue(-1 <= score <= 1)\n\n    def test_silhouette_samples_precomputed(self):\n        D = np.random.rand(len(self.X), len(self.X))\n        samples = silhouette_samples(D, self.labels, metric='precomputed')\n        self.assertEqual(len(samples), len(self.X))\n        self.assertTrue(all(-1 <= s <= 1 for s in samples))\n\n    def test_calinski_harabasz_score_exception(self):\n        with self.assertRaises(ValueError):\n            calinski_harabasz_score(self.X, np.ones(len(self.X)))\n\n    def test_davies_bouldin_score_exception(self):\n        with self.assertRaises(ValueError):\n            davies_bouldin_score(self.X, np.ones(len(self.X)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_884": ["\nimport unittest\nimport numpy as np\nfrom scipy import sparse\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.exceptions import NotFittedError\n\nclass TestEncoders(unittest.TestCase):\n    def setUp(self):\n        self.X = [['Male', 1], ['Female', 3], ['Female', 2]]\n\n    def test_one_hot_encoder_fit_transform(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        transformed = enc.transform([['Female', 1], ['Male', 4]]).toarray()\n        expected = np.array([[1., 0., 1., 0., 0.], [0., 1., 0., 0., 0.]])\n        np.testing.assert_array_equal(transformed, expected)\n\n    def test_one_hot_encoder_inverse_transform(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        inverse_transformed = enc.inverse_transform([[0, 1, 1, 0, 0], [0, 0, 0, 1, 0]])\n        expected = np.array([['Male', 1], [None, 2]], dtype=object)\n        np.testing.assert_array_equal(inverse_transformed, expected)\n\n    def test_one_hot_encoder_drop(self):\n        drop_enc = OneHotEncoder(drop='first').fit(self.X)\n        transformed = drop_enc.transform([['Female', 1], ['Male', 2]]).toarray()\n        expected = np.array([[0., 0., 0.], [1., 1., 0.]])\n        np.testing.assert_array_equal(transformed, expected)\n\n    def test_ordinal_encoder_fit_transform(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        transformed = enc.transform([['Female', 3], ['Male', 1]])\n        expected = np.array([[0., 2.], [1., 0.]])\n        np.testing.assert_array_equal(transformed, expected)\n\n    def test_ordinal_encoder_inverse_transform(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        inverse_transformed = enc.inverse_transform([[1, 0], [0, 1]])\n        expected = np.array([['Male', 1], ['Female', 2]], dtype=object)\n        np.testing.assert_array_equal(inverse_transformed, expected)\n\n    def test_ordinal_encoder_handle_unknown(self):\n        X = self.X + [['Unknown', 4]]\n        enc = OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\n        enc.fit(self.X)\n        transformed = enc.transform(X)\n        expected = np.array([[1., 0.], [0., 1.], [0., 2.], [-1., -1.]])\n        np.testing.assert_array_equal(transformed, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_336": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.core.exceptions import ValidationError\nfrom django.forms import fields\n\nclass TestField(unittest.TestCase):\n\n    def test_init(self):\n        field = fields.Field()\n        self.assertTrue(field.required)\n        self.assertIsNone(field.label)\n        self.assertIsNone(field.initial)\n        self.assertEqual(field.help_text, '')\n        self.assertFalse(field.show_hidden_initial)\n        self.assertEqual(field.error_messages, fields.Field.default_error_messages)\n        self.assertEqual(field.validators, [])\n\n    def test_clean(self):\n        field = fields.Field()\n        self.assertEqual(field.clean('test'), 'test')\n\n    # Add more tests for other methods and edge cases\n\nclass TestCharField(unittest.TestCase):\n\n    def test_init(self):\n        field = fields.CharField(max_length=10, min_length=5)\n        self.assertEqual(field.max_length, 10)\n        self.assertEqual(field.min_length, 5)\n        self.assertTrue(field.strip)\n        self.assertEqual(field.empty_value, '')\n\n    def test_to_python(self):\n        field = fields.CharField()\n        self.assertEqual(field.to_python(' test '), 'test')\n        self.assertEqual(field.to_python(''), '')\n\n    # Add more tests for other methods and edge cases\n\n# Add tests for other field classes such as IntegerField, FloatField, DecimalField, DateField, etc.\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_222": ["\nimport unittest\nimport tempfile\nimport os\nfrom django.core.files import locks\n\nclass TestFileLocks(unittest.TestCase):\n    def setUp(self):\n        self.test_file = tempfile.NamedTemporaryFile(delete=False)\n        self.test_file.write(b'Django')\n        self.test_file.close()\n\n    def tearDown(self):\n        os.remove(self.test_file.name)\n\n    def test_lock_exclusive(self):\n        with open(self.test_file.name, 'r+b') as f:\n            self.assertTrue(locks.lock(f, locks.LOCK_EX))\n            self.assertFalse(locks.lock(f, locks.LOCK_EX))\n            self.assertTrue(locks.unlock(f))\n            self.assertTrue(locks.lock(f, locks.LOCK_EX))\n\n    def test_lock_shared(self):\n        with open(self.test_file.name, 'r+b') as f:\n            self.assertTrue(locks.lock(f, locks.LOCK_SH))\n            self.assertTrue(locks.lock(f, locks.LOCK_SH))\n            self.assertTrue(locks.unlock(f))\n            self.assertTrue(locks.lock(f, locks.LOCK_SH))\n\n    def test_unlock_unlocked_file(self):\n        with open(self.test_file.name, 'r+b') as f:\n            self.assertTrue(locks.unlock(f))\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_392": ["\nimport json\nfrom unittest import TestCase\nfrom unittest.mock import Mock, patch\n\nfrom django.core import exceptions, checks\nfrom django.db import NotSupportedError, connections, router\nfrom django.db.models import Model\nfrom django.db.models.fields.json import JSONField, KeyTransform, HasKey, HasKeys, HasAnyKeys, JSONExact, JSONIContains\n\nclass TestJSONField(TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            test_field = JSONField(encoder=json.dumps, decoder=json.loads)\n\n        self.model = TestModel\n        self.field = TestModel._meta.get_field('test_field')\n\n    def test_init(self):\n        self.assertIs(self.field.encoder, json.dumps)\n        self.assertIs(self.field.decoder, json.loads)\n\n    def test_check(self):\n        connection = Mock()\n        connection.features.supports_json_field = True\n        connections['default'] = connection\n        databases = ['default']\n        errors = self.field.check(databases=databases)\n        self.assertEqual(errors, [])\n\n    def test_from_db_value(self):\n        self.assertEqual(self.field.from_db_value('{\"key\": \"value\"}', None, None), {\"key\": \"value\"})\n\n    def test_get_prep_value(self):\n        self.assertEqual(self.field.get_prep_value({\"key\": \"value\"}), '{\"key\": \"value\"}')\n\n    def test_get_transform(self):\n        self.assertIsInstance(self.field.get_transform('key'), KeyTransform)\n\n    def test_validate(self):\n        self.field.validate({\"key\": \"value\"}, None)\n        with self.assertRaises(exceptions.ValidationError):\n            self.field.validate({\"key\": set()}, None)\n\n    def test_value_to_string(self):\n        self.assertEqual(self.field.value_to_string(Mock(value={\"key\": \"value\"})), '{\"key\": \"value\"}')\n\n    def test_formfield(self):\n        formfield = self.field.formfield()\n        self.assertEqual(formfield.encoder, self.field.encoder)\n        self.assertEqual(formfield.decoder, self.field.decoder)\n\n    # Add more tests for other methods and lookups as needed\n"], "sample_1110": ["\nimport unittest\nfrom sympy import symbols, I, S, floor, ceiling, frac\n\nclass TestIntegerFunctions(unittest.TestCase):\n\n    def setUp(self):\n        self.x = symbols('x')\n\n    def test_floor(self):\n        self.assertEqual(floor(17), 17)\n        self.assertEqual(floor(S(23)/10), 2)\n        self.assertEqual(floor(2*S.E), 5)\n        self.assertEqual(floor(-S(0.567)), -1)\n        self.assertEqual(floor(-I/2), -I)\n        self.assertEqual(floor(S(5)/2 + 5*I/2), 2 + 2*I)\n        self.assertEqual(floor(self.x).rewrite(ceiling), -ceiling(-self.x))\n\n    def test_ceiling(self):\n        self.assertEqual(ceiling(17), 17)\n        self.assertEqual(ceiling(S(23)/10), 3)\n        self.assertEqual(ceiling(2*S.E), 6)\n        self.assertEqual(ceiling(-S(0.567)), 0)\n        self.assertEqual(ceiling(I/2), I)\n        self.assertEqual(ceiling(S(5)/2 + 5*I/2), 3 + 3*I)\n        self.assertEqual(ceiling(self.x).rewrite(floor), -floor(-self.x))\n\n    def test_frac(self):\n        self.assertEqual(frac(S(4)/3), 1/3)\n        self.assertEqual(frac(-S(4)/3), 2/3)\n        self.assertEqual(frac(self.x), frac(self.x))\n        self.assertEqual(frac(self.x).rewrite(floor), self.x - floor(self.x))\n        self.assertEqual(frac(self.x).rewrite(ceiling), self.x + ceiling(-self.x))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_310": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.contrib.admindocs import views\nfrom django.contrib.admindocs.views import (\n    get_return_data_type, get_readable_field_data_type, extract_views_from_urlpatterns, simplify_regex\n)\nfrom django.core.exceptions import ViewDoesNotExist\nfrom django.db import models\nfrom django.http import Http404\n\nclass TestDjangoAdminDocsViews(unittest.TestCase):\n\n    def test_get_return_data_type(self):\n        self.assertEqual(get_return_data_type('get_list'), 'List')\n        self.assertEqual(get_return_data_type('get_count'), 'Integer')\n        self.assertEqual(get_return_data_type('other_func'), '')\n\n    def test_get_readable_field_data_type(self):\n        field = Mock(spec=models.Field)\n        field.description = 'Field: %(name)s'\n        field.name = 'test_field'\n        self.assertEqual(get_readable_field_data_type(field), 'Field: test_field')\n\n    def test_extract_views_from_urlpatterns(self):\n        url_patterns = [\n            Mock(url_patterns=[Mock(callback='func1', pattern='pattern1', name='name1')]),\n            Mock(callback='func2', pattern='pattern2', name='name2'),\n            Mock(callback=Mock(side_effect=ViewDoesNotExist))\n        ]\n        self.assertEqual(extract_views_from_urlpatterns(url_patterns),\n                         [('func1', 'pattern1', None, 'name1'), ('func2', 'pattern2', None, 'name2')])\n\n    def test_simplify_regex(self):\n        self.assertEqual(simplify_regex('^(?P<sport_slug>\\w+)/athletes/(?P<athlete_slug>\\w+)/$'),\n                         '/<sport_slug>/athletes/<athlete_slug>/')\n\n    @patch('django.contrib.admindocs.views.get_urlconf')\n    @patch('django.contrib.admindocs.views.get_resolver')\n    def test_ViewIndexView_get_context_data(self, mock_get_resolver, mock_get_urlconf):\n        mock_get_resolver.return_value._is_callback.return_value = True\n        mock_get_urlconf.return_value = 'test_urlconf'\n        view = views.ViewIndexView()\n        view.request = Mock()\n        context = view.get_context_data()\n        self.assertIn('views', context)\n\n    # More tests for other views can be added here\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1050": ["\nimport unittest\nfrom sympy import Rational, Integer, Float, S, AlgebraicNumber, S, sin, cos, exp, log, oo, nan, zoo, pi, E, GoldenRatio, TribonacciConstant, EulerGamma, Catalan\n\nclass TestNumbers(unittest.TestCase):\n\n    def test_rational(self):\n        self.assertEqual(Rational(3, 4), Integer(3)/Integer(4))\n        self.assertEqual(Rational(3, 4).limit_denominator(10), Rational(7, 10))\n\n    def test_integer(self):\n        self.assertEqual(Integer(3).factorial(), 6)\n        self.assertTrue(Integer(3)._eval_is_prime())\n        self.assertFalse(Integer(4)._eval_is_prime())\n\n    def test_float(self):\n        self.assertAlmostEqual(Float(3.14).limit_denominator(10), Rational(22, 7))\n        self.assertEqual(Float(3.14).evalf(2), 3.1)\n\n    def test_algebraic_number(self):\n        a = AlgebraicNumber(sin(1))\n        self.assertEqual(a.as_expr(), sin(1))\n        self.assertEqual(a.minpoly, sin(1).minpoly)\n\n    def test_number_symbol(self):\n        self.assertEqual(pi.approximation_interval(Integer), (Integer(3), Integer(4)))\n        self.assertEqual(E.approximation_interval(Rational), None)\n\n    def test_special_constants(self):\n        self.assertAlmostEqual(GoldenRatio.evalf(10), 1.6180339887)\n        self.assertAlmostEqual(TribonacciConstant.evalf(10), 1.8392867552)\n        self.assertAlmostEqual(EulerGamma.evalf(10), 0.5772156649)\n        self.assertAlmostEqual(Catalan.evalf(10), 0.9159655942)\n\n    def test_infinity_and_nan(self):\n        self.assertEqual(oo + oo, oo)\n        self.assertEqual(oo - oo, nan)\n        self.assertEqual(oo * oo, oo)\n        self.assertEqual(oo / oo, nan)\n        self.assertEqual(zoo + zoo, nan)\n        self.assertEqual(zoo * zoo, zoo)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1129": ["\nimport unittest\nfrom sympy import symbols, sin, cos, tan, Symbol, sqrt, pi, Piecewise, Eq, Ne, Lt, Gt, Le, Ge, And, Or, Not, Matrix, Identity, BlockMatrix, eye, zeros, ones, diag, diagflat, diag_matrix, HadamardProduct, KroneckerProduct, adjoint, DiagonalOf, DiagonalMatrix, Function, Lambda, MatrixSymbol, MatrixExpr, Piecewise, Abs, acos, acosh, asin, asinh, atan, atan2, atanh, ceiling, cos, cosh, erf, erfc, exp, expm1, factorial, floor, gamma, hypot, loggamma, log, ln, log10, log1p, log2, sin, sinh, sqrt, tan, tanh\nfrom sympy.printing.pycode import PythonCodePrinter, MpmathPrinter, NumPyPrinter, SciPyPrinter, SymPyPrinter, pycode\n\nclass TestPyCode(unittest.TestCase):\n    def setUp(self):\n        self.printer = PythonCodePrinter()\n        self.x = Symbol('x')\n\n    def test_print_sin(self):\n        self.assertEqual(self.printer.doprint(sin(self.x)), \"math.sin(x)\")\n\n    def test_print_cos(self):\n        self.assertEqual(self.printer.doprint(cos(self.x)), \"math.cos(x)\")\n\n    def test_print_tan(self):\n        self.assertEqual(self.printer.doprint(tan(self.x)), \"math.tan(x)\")\n\n    def test_print_sqrt(self):\n        self.assertEqual(self.printer.doprint(sqrt(self.x)), \"math.sqrt(x)\")\n\n    def test_print_pi(self):\n        self.assertEqual(self.printer.doprint(pi), \"math.pi\")\n\n    def test_print_piecewise(self):\n        expr = Piecewise((0, Eq(self.x, 0)), (1, self.x > 0))\n        self.assertEqual(self.printer.doprint(expr), \"((0) if (x == 0) else (1) if (x > 0) else None)\")\n\n    def test_print_matrix(self):\n        M = Matrix([[1, 2], [3, 4]])\n        self.assertEqual(self.printer.doprint(M), \"Matrix([[1, 2], [3, 4]])\")\n\n    def test_print_identity(self):\n        I = Identity(3)\n        self.assertEqual(self.printer.doprint(I), \"eye(3)\")\n\n    # Add more tests for other functions and classes as needed\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_529": ["\nimport unittest\nfrom unittest.mock import patch\nimport os\nfrom pathlib import Path\nimport matplotlib as mpl\nfrom matplotlib.style import core\n\nclass TestMatplotlibStyleCore(unittest.TestCase):\n\n    def setUp(self):\n        self.style_name = 'test_style'\n        self.style_dict = {'font.size': 12}\n        self.style_file = Path(core.USER_LIBRARY_PATHS[0]) / f'{self.style_name}.{core.STYLE_EXTENSION}'\n\n    def tearDown(self):\n        if self.style_file.exists():\n            self.style_file.unlink()\n\n    def test_use_string(self):\n        with patch.dict(core.library, {self.style_name: self.style_dict}):\n            core.use(self.style_name)\n            self.assertEqual(mpl.rcParams['font.size'], 12)\n\n    def test_use_dict(self):\n        core.use(self.style_dict)\n        self.assertEqual(mpl.rcParams['font.size'], 12)\n\n    def test_use_path(self):\n        self.style_file.write_text(f'font.size: 12')\n        core.use(self.style_file)\n        self.assertEqual(mpl.rcParams['font.size'], 12)\n\n    def test_use_list(self):\n        with patch.dict(core.library, {self.style_name: self.style_dict}):\n            core.use([self.style_dict, self.style_name])\n            self.assertEqual(mpl.rcParams['font.size'], 12)\n\n    def test_context(self):\n        with patch.dict(core.library, {self.style_name: self.style_dict}):\n            with core.context(self.style_name):\n                self.assertEqual(mpl.rcParams['font.size'], 12)\n            self.assertNotEqual(mpl.rcParams['font.size'], 12)\n\n    def test_reload_library(self):\n        self.style_file.write_text(f'font.size: 12')\n        core.reload_library()\n        self.assertEqual(core.library[self.style_name]['font.size'], 12)\n        self.assertTrue(self.style_name in core.available)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_695": ["\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom _pytest.python import (\n    pytest_addoption,\n    pytest_cmdline_main,\n    pytest_generate_tests,\n    pytest_configure,\n    async_warn_and_skip,\n    pytest_pyfunc_call,\n    pytest_collect_file,\n    path_matches_patterns,\n    pytest_pycollect_makemodule,\n    pytest_pycollect_makeitem,\n    PyCollector,\n    Module,\n    Package,\n    Class,\n    Instance,\n    _call_with_optional_argument,\n    _get_first_non_fixture_func,\n    _find_parametrized_scope,\n    _ascii_escaped_by_config,\n    _idval,\n    _idvalset,\n    idmaker,\n    show_fixtures_per_test,\n    _show_fixtures_per_test,\n    showfixtures,\n    _showfixtures_main,\n    write_docstring,\n    Function,\n    FunctionDefinition,\n)\nfrom _pytest.config import Config, ExitCode\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.main import Session\nfrom _pytest.compat import ascii_escaped, STRING_TYPES, NOTSET, REGEX_TYPE\nfrom _pytest.nodes import File, Collector, Item, Node\nfrom _pytest.fixtures import FuncFixtureInfo, FixtureDef, FixtureRequest\nfrom _pytest.mark import MARK_GEN, ParameterSet, Mark, MarkDecorator\nfrom _pytest.mark.structures import get_unpacked_marks, normalize_mark_list\nfrom _pytest.warning_types import PytestCollectionWarning, PytestUnhandledCoroutineWarning\nfrom _pytest.outcomes import fail, skip\nfrom _pytest.pathlib import Path, parts, visit, fnmatch_ex, import_path, ImportPathMismatchError, legacy_path\nfrom _pytest.fixtures import _Scope\nfrom typing import Any, Callable, Iterable, List, Mapping, Optional, Sequence, Union\n\ndef test_pytest_addoption():\n    parser = Mock(spec=Parser)\n    group = Mock()\n    parser.getgroup.return_value = group\n    pytest_addoption(parser)\n    parser.getgroup.assert_called_once_with(\"general\")\n    group.addoption.assert_called()\n    parser.addini.assert_called()\n\n@patch('_pytest.python.showfixtures')\ndef test_pytest_cmdline_main_showfixtures(mock_showfixtures):\n    config = Mock(spec=Config)\n    config.option.showfixtures = True\n    assert pytest_cmdline_main(config) == 0\n    mock_showfixtures.assert_called_once_with(config)\n\n@patch('_pytest.python.show_fixtures_per_test')\ndef test_pytest_cmdline_main_show_fixtures_per_test(mock_show_fixtures_per_test):\n    config = Mock(spec=Config)\n    config.option.show_fixtures_per_test = True\n    assert pytest_cmdline_main(config) == 0\n    mock_show_fixtures_per_test.assert_called_once_with(config)\n\ndef test_pytest_cmdline_main_no_options():\n    config = Mock(spec=Config)\n    config.option.showfixtures = False\n    config.option.show_fixtures_per_test = False\n    assert pytest_cmdline_main(config) is None\n\ndef test_pytest_generate_tests():\n    metafunc = Mock()\n    metafunc.definition.iter_markers.return_value = [Mock(args=[], kwargs={})]\n    pytest_generate_tests(metafunc)\n    metafunc.parametrize.assert_called_once()\n\ndef test_pytest_configure():\n    config = Mock(spec=Config)\n    pytest_configure(config)\n    config.addinivalue_line.assert_called()\n\n@patch('warnings.warn')\ndef test_async_warn_and_skip(mock_warn):\n    nodeid = 'test_node'\n    with pytest.raises(skip.Exception):\n        async_warn_and_skip(nodeid)\n    mock_warn.assert_called_once()\n\ndef test_pytest_pyfunc_call():\n    pyfuncitem = Mock()\n    pyfuncitem.obj = lambda: None\n    pyfuncitem.funcargs = {}\n    pyfuncitem._fixtureinfo.argnames = []\n    assert pytest_pyfunc_call(pyfuncitem) is True\n\ndef test_pytest_collect_file():\n    fspath = Mock(spec=Path)\n    fspath.suffix = '.py'\n    parent = Mock(spec=Collector)\n    parent.session.isinitpath.return_value = False\n    assert isinstance(pytest_collect_file(fspath, parent), Module)\n\ndef test_path_matches_patterns():\n    path = Mock(spec=Path)\n    path.__str__.return_value = 'test_file.py'\n    patterns = ['*.py']\n    assert path_matches_patterns(path, patterns) is True\n\ndef test_pytest_pycollect_makemodule():\n    fspath = Mock(spec=Path)\n    fspath.name = '__init__.py'\n    parent = Mock(spec=Collector)\n    assert isinstance(pytest_pycollect_makemodule(fspath, parent), Package)\n\ndef test_pytest_pycollect_makeitem():\n    collector = Mock(spec=PyCollector)\n    name = 'test_func'\n    obj = lambda: None\n    result = pytest_pycollect_makeitem(collector, name, obj)\n    assert isinstance(result, list)\n    assert isinstance(result[0], Function)\n\ndef test_PyobjMixin_module():\n    pyobj_mixin = PyobjMixin()\n    pyobj_mixin.parent = Mock(spec=Module)\n    pyobj_mixin.parent.obj = Mock()\n    assert pyobj_mixin.module is not None\n\ndef test_PyobjMixin_cls():\n    pyobj_mixin = PyobjMixin()\n    pyobj_mixin.parent = Mock(spec=Class)\n    pyobj_mixin.parent.obj = Mock()\n    assert pyobj_mixin.cls is not None\n\ndef test_PyobjMixin_instance():\n    pyobj_mixin = PyobjMixin()\n    pyobj_mixin.parent = Mock(spec=Instance)\n    pyobj_mixin.parent.obj = Mock()\n    assert pyobj_mixin.instance is not None\n\ndef test_PyobjMixin_obj():\n    pyobj_mixin = PyobjMixin()\n    pyobj_mixin.parent = Mock(spec=Collector)\n    pyobj_mixin.parent.obj = Mock()\n    assert pyobj_mixin.obj is not None\n\ndef test_PyobjMixin_getmodpath():\n    pyobj_mixin = PyobjMixin()\n    pyobj_mixin.parent = Mock(spec=Module)\n    pyobj_mixin.parent.obj = Mock()\n    pyobj_mixin.name = 'test_module'\n    assert pyobj_mixin.getmodpath() == 'test_module'\n\ndef test_PyobjMixin_reportinfo():\n    pyobj_mixin = PyobjMixin()\n    pyobj_mixin.obj = Mock()\n    pyobj_mixin.obj.compat_co_firstlineno = None\n    pyobj_mixin.getmodpath = Mock(return_value='test_module')\n    fspath, lineno, modpath = pyobj_mixin.reportinfo()\n    assert isinstance(fspath, str)\n    assert isinstance(lineno, int)\n    assert modpath == 'test_module'\n\ndef test_PyCollector_funcnamefilter():\n    py_collector = PyCollector()\n    py_collector.config = Mock(spec=Config)\n    py_collector.config.getini.return_value = ['test_']\n    assert py_collector.funcnamefilter('test_func') is True\n\ndef test_PyCollector_isnosetest():\n    obj = Mock()\n    obj.__test__ = True\n    py_collector = PyCollector()\n    assert py_collector.isnosetest(obj) is True\n\ndef test_PyCollector_classnamefilter():\n    py_collector = PyCollector()\n    py_collector.config = Mock(spec=Config)\n    py_collector.config.getini.return_value = ['Test']\n    assert py_collector.classnamefilter('TestClass') is True\n\ndef test_PyCollector_istestfunction():\n    py_collector = PyCollector()\n    py_collector.funcnamefilter = Mock(return_value=True)\n    obj = Mock(spec=Callable)\n    assert py_collector.istestfunction(obj, 'test_func') is True\n\ndef test_PyCollector_istestclass():\n    py_collector = PyCollector()\n    py_collector.classnamefilter = Mock(return_value=True)\n    obj = Mock()\n    assert py_collector.istestclass(obj, 'TestClass') is True\n\ndef test_PyCollector_matches_prefix_or_glob_option():\n    py_collector = PyCollector()\n    py_collector.config = Mock(spec=Config)\n    py_collector.config.getini.return_value = ['test_']\n    assert py_collector._matches_prefix_or_glob_option('python_functions', 'test_func') is True\n\ndef test_Module_inject_setup_module_fixture():\n    module = Module(Mock(spec=Path), Mock(spec=Collector))\n    module.obj = Mock()\n    module._inject_setup_module_fixture()\n    assert hasattr(module.obj, '__pytest_setup_module')\n\ndef test_Module_inject_setup_function_fixture():\n    module = Module(Mock(spec=Path), Mock(spec=Collector))\n    module.obj = Mock()\n    module._inject_setup_function_fixture()\n    assert hasattr(module.obj, '__pytest_setup_function')\n\ndef test_Class_inject_setup_class_fixture():\n    cls = Class('TestClass', Mock(spec=Collector))\n    cls.obj = Mock()\n    cls._inject_setup_class_fixture()\n    assert hasattr(cls.obj, '__pytest_setup_class')\n\ndef test_Class_inject_setup_method_fixture():\n    cls = Class('TestClass', Mock(spec=Collector))\n    cls.obj = Mock()\n    cls._inject_setup_method_fixture()\n    assert hasattr(cls.obj, '__pytest_setup_method')\n\ndef test__call_with_optional_argument():\n    def func_with_arg(arg):\n        return arg\n\n    def func_without_arg():\n        return True\n\n    assert _call_with_optional_argument(func_with_arg, 'test') == 'test'\n    assert _call_with_optional_argument(func_without_arg, 'test') is True\n\ndef test__get_first_non_fixture_func():\n    obj = Mock()\n    obj.setup_method = Mock()\n    assert _get_first_non_fixture_func(obj, ('setup_method',)) == obj.setup_method\n\ndef test__find_parametrized_scope():\n    argnames = ['arg1', 'arg2']\n    arg2fixturedefs = {'arg1': [FixtureDef('arg1', Mock(), 'function', Mock(), Mock())]}\n    indirect = True\n    assert _find_parametrized_scope(argnames, arg2fixturedefs, indirect) == 'function'\n\ndef test__ascii_escaped_by_config():\n    val = 'test'\n    config = Mock(spec=Config)\n    config.getini.return_value = False\n    assert _ascii_escaped_by_config(val, config) == val\n\ndef test__idval():\n    val = 'test'\n    argname = 'arg'\n    idx = 0\n    idfn = None\n    nodeid = None\n    config = Mock(spec=Config)\n    assert _idval(val, argname, idx, idfn, nodeid, config) == 'test'\n\ndef test__idvalset():\n    idx = 0\n    parameterset = ParameterSet(['val'], [], [])\n    argnames = ['arg']\n    idfn = None\n    ids = ['test']\n    nodeid = None\n    config = Mock(spec=Config)\n    assert _idvalset(idx, parameterset, argnames, idfn, ids, nodeid, config) == 'test'\n\ndef test_idmaker():\n    argnames = ['arg']\n    parametersets = [ParameterSet(['val'], [], [])]\n    idfn = None\n    ids = ['test']\n    config = Mock(spec=Config)\n    nodeid = None\n    assert idmaker(argnames, parametersets, idfn, ids, config, nodeid) == ['test']\n\ndef test_write_docstring():\n    tw = Mock()\n    doc = 'test docstring'\n    indent = '    '\n    write_docstring(tw, doc, indent)\n    tw.line.assert_called_once_with(indent + doc)\n\ndef test_Function_init():\n    name = 'test_func'\n    parent = Mock(spec=Collector)\n    config = Mock(spec=Config)\n    callspec = None\n    callobj = Mock(spec=Callable)\n    keywords = None\n    session = Mock(spec=Session)\n    fixtureinfo = Mock(spec=FuncFixtureInfo)\n    originalname = None\n    func = Function(name, parent, config, callspec, callobj, keywords, session, fixtureinfo, originalname)\n    assert func.obj == callobj\n\ndef test_Function_function():\n    func = Function('test_func', Mock(spec=Collector))\n    func.obj = Mock(spec=Callable)\n    assert func.function == func.obj\n\ndef test_Function_getobj():\n    func = Function('test_func', Mock(spec=Collector))\n    func.parent = Mock(spec=Collector)\n    func.parent.obj = Mock()\n    func.originalname = 'test_func'\n    assert func._getobj() == func.parent.obj.test_func\n\ndef test_Function_pyfuncitem():\n    func = Function('test_func', Mock(spec=Collector))\n    assert func._pyfuncitem == func\n\ndef test_FunctionDefinition_runtest():\n    func_def = FunctionDefinition('test_func', Mock(spec=Collector))\n    with pytest.raises(RuntimeError):\n        func_def.runtest()\n\ndef test_FunctionDefinition_setup():\n    func_def = FunctionDefinition('test_func', Mock(spec=Collector))\n    with pytest.raises(RuntimeError):\n        func_def.setup()\n"], "sample_248": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom io import StringIO\n\nfrom django.core.management import CommandError, call_command\nfrom django.core.management.commands.shell import Command\n\nclass ShellCommandTest(unittest.TestCase):\n    @patch('sys.stdin', StringIO('print(\"Hello, World!\")'))\n    def test_stdin_execution(self):\n        with patch('sys.stdout', new_callable=StringIO) as mock_stdout:\n            call_command('shell')\n            self.assertEqual(mock_stdout.getvalue(), \"Hello, World!\\n\")\n\n    @patch('os.path.isfile', return_value=True)\n    @patch('os.path.expanduser', return_value='/test/.pythonrc.py')\n    @patch('builtins.open', new_callable=unittest.mock.mock_open, read_data=\"print('PythonRC')\")\n    def test_python_startup_file(self, mock_open, mock_expanduser, mock_isfile):\n        with patch('sys.stdout', new_callable=StringIO) as mock_stdout:\n            call_command('shell')\n            self.assertIn('PythonRC', mock_stdout.getvalue())\n\n    def test_command_execution(self):\n        with patch('sys.stdout', new_callable=StringIO) as mock_stdout:\n            call_command('shell', command='print(\"Command\")')\n            self.assertEqual(mock_stdout.getvalue(), \"Command\\n\")\n\n    @patch('IPython.start_ipython')\n    def test_ipython_shell(self, mock_start_ipython):\n        call_command('shell', interface='ipython')\n        mock_start_ipython.assert_called_once()\n\n    @patch('bpython.embed')\n    def test_bpython_shell(self, mock_embed):\n        call_command('shell', interface='bpython')\n        mock_embed.assert_called_once()\n\n    @patch('code.interact')\n    def test_python_shell(self, mock_interact):\n        call_command('shell', interface='python')\n        mock_interact.assert_called_once()\n\n    def test_invalid_shell_interface(self):\n        with self.assertRaises(CommandError):\n            call_command('shell', interface='invalid')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_519": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nimport numpy as np\nfrom matplotlib.figure import Figure\n\nclass TestFigure(unittest.TestCase):\n\n    def setUp(self):\n        self.fig = Figure()\n\n    def test_figure_creation(self):\n        self.assertIsInstance(self.fig, Figure)\n\n    def test_set_size_inches(self):\n        self.fig.set_size_inches(5, 4)\n        self.assertEqual(self.fig.get_size_inches().tolist(), [5, 4])\n\n    def test_get_size_inches(self):\n        self.fig.set_size_inches(3, 2)\n        self.assertEqual(self.fig.get_size_inches().tolist(), [3, 2])\n\n    def test_get_figwidth(self):\n        self.fig.set_size_inches(6, 3)\n        self.assertEqual(self.fig.get_figwidth(), 6)\n\n    def test_get_figheight(self):\n        self.fig.set_size_inches(6, 3)\n        self.assertEqual(self.fig.get_figheight(), 3)\n\n    def test_set_figwidth(self):\n        self.fig.set_figwidth(7)\n        self.assertEqual(self.fig.get_figwidth(), 7)\n\n    def test_set_figheight(self):\n        self.fig.set_figheight(5)\n        self.assertEqual(self.fig.get_figheight(), 5)\n\n    def test_get_dpi(self):\n        self.assertEqual(self.fig.get_dpi(), 100)\n\n    def test_set_dpi(self):\n        self.fig.set_dpi(200)\n        self.assertEqual(self.fig.get_dpi(), 200)\n\n    def test_clear(self):\n        self.fig.add_subplot(111)\n        self.fig.clear()\n        self.assertEqual(len(self.fig.axes), 0)\n\n    @patch('matplotlib.figure.Figure.draw')\n    def test_draw(self, mock_draw):\n        renderer = MagicMock()\n        self.fig.draw(renderer)\n        mock_draw.assert_called_once_with(renderer)\n\n    @patch('matplotlib.figure.Figure.draw_without_rendering')\n    def test_draw_without_rendering(self, mock_draw):\n        self.fig.draw_without_rendering()\n        mock_draw.assert_called_once()\n\n    @patch('matplotlib.figure.Figure.draw_artist')\n    def test_draw_artist(self, mock_draw_artist):\n        artist = MagicMock()\n        self.fig._cachedRenderer = MagicMock()\n        self.fig.draw_artist(artist)\n        mock_draw_artist.assert_called_once_with(artist)\n\n    def test_add_axobserver(self):\n        observer = MagicMock()\n        self.fig.add_axobserver(observer)\n        self.fig._axobservers.process(\"_axes_change_event\", self.fig)\n        observer.assert_called_once_with(self.fig)\n\n    @patch('matplotlib.figure.Figure.savefig')\n    def test_savefig(self, mock_savefig):\n        self.fig.savefig('test.png')\n        mock_savefig.assert_called_once_with('test.png')\n\n    def test_ginput(self):\n        # This test requires user interaction and cannot be automated\n        pass\n\n    def test_waitforbuttonpress(self):\n        # This test requires user interaction and cannot be automated\n        pass\n\n    @patch('matplotlib.figure.ConstrainedLayoutEngine')\n    def test_execute_constrained_layout(self, mock_engine):\n        self.fig.set_constrained_layout(True)\n        self.fig.execute_constrained_layout"], "sample_1163": ["\nimport unittest\nfrom sympy import symbols, I, pi, exp_polar, polar_lift, Abs, conjugate, arg, transpose, adjoint, sqrt, atan2, oo, re, im, sign, exp, Derivative, S, Piecewise, Eq, Integral, Matrix, Symbol, Dummy\nfrom sympy.functions.elementary.complexes import principal_argument, periodic_argument, unbranched_argument, unpolarify, polarify, _polarify, polar_lift, arg, conjugate, transpose, adjoint, sign, Abs\n\nclass TestComplexFunctions(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y = symbols('x y', real=True)\n        self.z = symbols('z', polar=True)\n\n    def test_polar_lift(self):\n        self.assertEqual(polar_lift(4), 4*exp_polar(0))\n        self.assertEqual(polar_lift(-4), 4*exp_polar(I*pi))\n        self.assertEqual(polar_lift(-I), exp_polar(-I*pi/2))\n        self.assertEqual(polar_lift(I + 2), polar_lift(2 + I))\n        self.assertEqual(polar_lift(4*self.x), 4*polar_lift(self.x))\n        self.assertEqual(polar_lift(4*self.z), 4*self.z)\n\n    def test_arg(self):\n        self.assertEqual(arg(2.0), 0)\n        self.assertEqual(arg(I), pi/2)\n        self.assertEqual(arg(sqrt(2) + I*sqrt(2)), pi/4)\n        self.assertEqual(arg(sqrt(3)/2 + I/2), pi/6)\n        self.assertEqual(arg(4 + 3*I), atan2(3, 4))\n        self.assertEqual(arg(0.8 + 0.6*I), 0.643501108793284)\n\n    def test_conjugate(self):\n        self.assertEqual(conjugate(2), 2)\n        self.assertEqual(conjugate(I), -I)\n        self.assertEqual(conjugate(3 + 2*I), 3 - 2*I)\n        self.assertEqual(conjugate(5 - I), 5 + I)\n\n    def test_transpose(self):\n        A = MatrixSymbol('A', 25, 9)\n        self.assertEqual(transpose(A), A.T)\n        B = MatrixSymbol('B', 9, 22)\n        self.assertEqual(transpose(B), B.T)\n        M = Matrix([[4, 5], [2, 1], [90, 12]])\n        self.assertEqual(transpose(M), Matrix([[4, 2, 90], [5, 1, 12]]))\n\n    def test_adjoint(self):\n        A = MatrixSymbol('A', 10, 5)\n        self.assertEqual(adjoint(A), adjoint(A))\n\n    def test_sign(self):\n        self.assertEqual(sign(-1), -1)\n        self.assertEqual(sign(0), 0)\n        self.assertEqual(sign(-3*I), -I)\n        self.assertEqual(sign(1 + I), sign(1 + I))\n        self.assertAlmostEqual(sign(1 + I).evalf(), 0.707106781186548 + 0.707106781186548*I)\n\n    def test_Abs(self):\n        self.assertEqual(Abs(-1), 1)\n        self.assertEqual(Abs(self.x**2), self.x**2)\n        self.assertEqual(Abs(3*self.x + 2*I), sqrt(9*self.x**2 + 4))\n        self.assertEqual(Abs(8*I), 8)\n\n    def test_re(self):\n        self.assertEqual(re(2*I + 17), 17)\n        self.assertEqual(re(2*I), 0)\n        self.assertEqual(re(im(self.x) + self.x*I + 2), 2)\n        self.assertEqual(re(5 + I + 2), 7)\n\n    def test_im(self):\n        self.assertEqual(im(2*I + 17), 2)\n        self.assertEqual(im(self.x*I), re(self.x))\n        self.assertEqual(im(re(self.x) + self.y), im(self.y))\n        self.assertEqual(im(2 + 3*I), 3)\n\n    # Add more test methods for other functions in complexes.py\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_747": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing.data import OneHotEncoder, CategoricalEncoder\n\nclass TestDataPreprocessing(unittest.TestCase):\n\n    def test_one_hot_encoder(self):\n        enc = OneHotEncoder()\n        X = [[0, 0, 3], [1, 1, 0], [0, 2, 1], [1, 0, 2]]\n        enc.fit(X)\n        self.assertEqual(enc.n_values_.tolist(), [2, 3, 4])\n        self.assertEqual(enc.feature_indices_.tolist(), [0, 2, 5, 9])\n        transformed_X = enc.transform(np.array([[0, 1, 1]]))\n        self.assertTrue(np.array_equal(transformed_X.toarray(), np.array([[1., 0., 0., 1., 0., 0., 1., 0., 0.]])))\n\n    def test_categorical_encoder(self):\n        enc = CategoricalEncoder(handle_unknown='ignore')\n        X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        enc.fit(X)\n        self.assertEqual(enc.categories_, [np.array(['Female', 'Male']), np.array([1, 2, 3])])\n        transformed_X = enc.transform([['Female', 1], ['Male', 4]])\n        self.assertTrue(np.array_equal(transformed_X.toarray(), np.array([[1., 0., 1., 0., 0.], [0., 1., 0., 0., 0.]])))\n        inverse_transformed_X = enc.inverse_transform([[0, 1, 1, 0, 0], [0, 0, 0, 1, 0]])\n        self.assertTrue(np.array_equal(inverse_transformed_X, np.array([['Male', 1], [None, 2]], dtype=object)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1015": ["\nimport unittest\nfrom sympy.algebras.quaternion import Quaternion\nfrom sympy import symbols, re, im, Add, Mul, I, Abs\nfrom sympy import cos, sin, sqrt, conjugate, exp, log, acos, E, pi\nfrom sympy.utilities.pytest import raises\nfrom sympy import Matrix\nfrom sympy import diff, integrate, trigsimp\nfrom sympy import S, Rational\n\nclass TestQuaternion(unittest.TestCase):\n\n    def setUp(self):\n        self.q1 = Quaternion(1, 2, 3, 4)\n        self.q2 = Quaternion(5, 6, 7, 8)\n        self.q3 = Quaternion(3 + 4*I, 2 + 5*I, 0, 7 + 8*I, real_field=False)\n\n    def test_addition(self):\n        result = self.q1 + self.q2\n        self.assertEqual(result, Quaternion(6, 8, 10, 12))\n\n    def test_multiplication(self):\n        result = self.q1 * self.q2\n        self.assertEqual(result, Quaternion(-60, 12, 30, 24))\n\n    def test_complex_multiplication(self):\n        result = self.q3 * (2 + 3*I)\n        self.assertEqual(result, Quaternion((6 + 13*I) + (12 + 17*I)*I + 0*I + (14 + 26*I)*I, real_field=False))\n\n    def test_conjugate(self):\n        result = conjugate(self.q1)\n        self.assertEqual(result, Quaternion(1, -2, -3, -4))\n\n    def test_norm(self):\n        result = self.q1.norm()\n        self.assertEqual(result, sqrt(30))\n\n    def test_normalize(self):\n        result = self.q1.normalize()\n        self.assertEqual(result, Quaternion(1/sqrt(30), 2/sqrt(30), 3/sqrt(30), 4/sqrt(30)))\n\n    def test_inverse(self):\n        result = self.q1.inverse()\n        self.assertEqual(result, Quaternion(1/30, -2/30, -3/30, -4/30))\n\n    def test_power(self):\n        result = self.q1 ** 2\n        self.assertEqual(result, Quaternion(-28, 4, 6, 8))\n\n    def test_exp(self):\n        result = self.q1.exp()\n        self.assertEqual(result, Quaternion(E*cos(sqrt(30)), 2*sqrt(29)*E*sin(sqrt(30))/30, 3*sqrt(29)*E*sin(sqrt(30))/30, 4*sqrt(29)*E*sin(sqrt(30))/30))\n\n    def test_ln(self):\n        result = self.q1._ln()\n        self.assertEqual(result, Quaternion(log(sqrt(30)), 2*sqrt(29)*acos(sqrt(30)/30)/30, 3*sqrt(29)*acos(sqrt(30)/30)/30, 4*sqrt(29)*acos(sqrt(30)/30)/30))\n\n    def test_pow_cos_sin(self):\n        result = self.q1.pow_cos_sin(2)\n        self.assertEqual(result, Quaternion(900*cos(2*acos(sqrt(30)/30)), 1800*sqrt(29)*sin(2*acos(sqrt(30)/30))/30, 2700*sqrt(29)*sin(2*acos(sqrt(30)/30))/30, 3600*sqrt(29)*sin(2*acos(sqrt(30)/30))/30))\n\n    def test_differentiation(self):\n        x = symbols('x')\n        q = Quaternion(x, x**2, x**3, x**4)\n        result = diff(q, x)\n        self.assertEqual(result, Quaternion(1, 2*x, 3*x**2, 4*x**3))\n\n    def test_integration(self):\n        x = symbols('x')\n        q = Quaternion(x, x**2, x**3, x**4)\n        result = integrate(q, x)\n        self.assertEqual(result, Quaternion(x**2/2, x**3/3, x**4/4, x**5/5))\n\n    def test_rotation_point(self):\n        result = Quaternion.rotate_point((1, 1, 1), self.q1)\n        self.assertEqual(result, (2*sqrt(2)/3, 2*sqrt(2)/3, 2*sqrt(2)/3))\n\n    def test_to_axis_angle(self):\n        result = self.q1.to_axis_angle()\n        self.assertEqual(result, ((sqrt(3)/3, sqrt(3)/3, sqrt(3)/3), 2*acos(1/sqrt(30))))\n\n    def test_to_rotation_matrix(self):\n        result = self.q1.to_rotation_matrix()\n        expected_matrix = Matrix([[-28/30, 4/sqrt(30), 6/sqrt(30)], [4/sqrt(30), -26/30, 8/sqrt(30)], [6/sqrt(30), 8/sqrt(30), -24/30]])\n        self.assertEqual(result, expected_matrix)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_641": ["\nimport unittest\nfrom unittest.mock import mock_open, patch\nfrom pathlib import Path\nfrom pylint.lint.caching import _get_pdata_path, load_results, save_results\nfrom pylint.utils import LinterStats\nfrom pylint.constants import PYLINT_HOME\n\nclass TestCaching(unittest.TestCase):\n    @patch('pickle.load')\n    @patch('builtins.open', new_callable=mock_open, read_data='data')\n    def test_load_results(self, mock_file, mock_pickle):\n        mock_pickle.return_value = LinterStats()\n        self.assertIsInstance(load_results('base'), LinterStats)\n\n    def test_load_results_file_not_exists(self):\n        self.assertIsNone(load_results('non_existent_file'))\n\n    @patch('pickle.load')\n    @patch('builtins.open', new_callable=mock_open, read_data='data')\n    def test_load_results_invalid_data(self, mock_file, mock_pickle):\n        mock_pickle.return_value = 'invalid_data'\n        with self.assertWarns(UserWarning):\n            self.assertRaises(TypeError, load_results, 'base')\n\n    @patch('pickle.dump')\n    @patch('builtins.open', new_callable=mock_open)\n    @patch('pathlib.Path.mkdir')\n    def test_save_results(self, mock_mkdir, mock_file, mock_pickle):\n        save_results(LinterStats(), 'base')\n        mock_mkdir.assert_called_once()\n        mock_pickle.assert_called_once()\n\n    @patch('builtins.print')\n    def test_save_results_oserror(self, mock_print):\n        with patch('pathlib.Path.mkdir', side_effect=OSError):\n            save_results(LinterStats(), 'base')\n        mock_print.assert_called_once()\n\n    def test_get_pdata_path(self):\n        base_name = Path('/path/to/file:with_symbols')\n        pylint_home = Path('/pylint_home')\n        expected_path = pylint_home / 'path_to_file_with_symbols_1.stats'\n        self.assertEqual(_get_pdata_path(base_name, 1, pylint_home), expected_path)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_104": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.contrib.staticfiles.storage import StaticFilesStorage, HashedFilesMixin, ManifestFilesMixin, CachedFilesMixin\nfrom django.core.files.base import ContentFile\nimport json\nimport hashlib\n\nclass TestStaticFilesStorage(unittest.TestCase):\n    @patch('django.contrib.staticfiles.storage.settings')\n    def test_init(self, mock_settings):\n        mock_settings.STATIC_ROOT = 'static_root'\n        mock_settings.STATIC_URL = 'static_url'\n        storage = StaticFilesStorage()\n        self.assertEqual(storage.location, 'static_root')\n        self.assertEqual(storage.base_url, 'static_url')\n\n    @patch('django.contrib.staticfiles.storage.settings')\n    def test_path(self, mock_settings):\n        mock_settings.STATIC_ROOT = 'static_root'\n        storage = StaticFilesStorage()\n        self.assertEqual(storage.path('name'), 'static_root/name')\n\nclass TestHashedFilesMixin(unittest.TestCase):\n    def test_file_hash(self):\n        mixin = HashedFilesMixin()\n        content = ContentFile(b'content')\n        self.assertEqual(mixin.file_hash('name', content), 'e3b0c44298fc')\n\n    def test_hashed_name(self):\n        mixin = HashedFilesMixin()\n        mixin.exists = Mock(return_value=True)\n        mixin.open = Mock(return_value=ContentFile(b'content'))\n        mixin.file_hash = Mock(return_value='hash')\n        self.assertEqual(mixin.hashed_name('name'), '/name.hash')\n\nclass TestManifestFilesMixin(unittest.TestCase):\n    def test_load_manifest(self):\n        mixin = ManifestFilesMixin()\n        mixin.read_manifest = Mock(return_value=json.dumps({'version': '1.0', 'paths': {'name': 'hashed_name'}}))\n        self.assertEqual(mixin.load_manifest(), {'name': 'hashed_name'})\n\n    def test_save_manifest(self):\n        mixin = ManifestFilesMixin()\n        mixin.exists = Mock(return_value=True)\n        mixin.delete = Mock()\n        mixin._save = Mock()\n        mixin.hashed_files = {'name': 'hashed_name'}\n        mixin.save_manifest()\n        mixin.delete.assert_called_once_with(mixin.manifest_name)\n        mixin._save.assert_called_once()\n\nclass TestCachedFilesMixin(unittest.TestCase):\n    def test_hash_key(self):\n        mixin = CachedFilesMixin()\n        name = 'name'\n        key = hashlib.md5(name.encode()).hexdigest()\n        self.assertEqual(mixin.hash_key(name), 'staticfiles:%s' % key)\n"], "sample_892": ["\nimport unittest\nfrom unittest.mock import patch\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor, ExtraTreesClassifier, ExtraTreesRegressor, RandomTreesEmbedding\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.datasets import make_classification, make_regression\nfrom sklearn.utils.validation import check_is_fitted\n\nclass TestRandomForestClassifier(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, n_features=20, random_state=42)\n        self.clf = RandomForestClassifier(n_estimators=10, random_state=42)\n\n    def test_fit(self):\n        self.clf.fit(self.X, self.y)\n        self.assertTrue(check_is_fitted(self.clf))\n\n    def test_predict(self):\n        self.clf.fit(self.X, self.y)\n        predictions = self.clf.predict(self.X)\n        self.assertEqual(len(predictions), len(self.y))\n\n    def test_predict_proba(self):\n        self.clf.fit(self.X, self.y)\n        probabilities = self.clf.predict_proba(self.X)\n        self.assertEqual(probabilities.shape, (len(self.y), len(np.unique(self.y))))\n\n    def test_feature_importances_(self):\n        self.clf.fit(self.X, self.y)\n        self.assertEqual(len(self.clf.feature_importances_), self.X.shape[1])\n\nclass TestRandomForestRegressor(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_regression(n_samples=100, n_features=20, random_state=42)\n        self.reg = RandomForestRegressor(n_estimators=10, random_state=42)\n\n    def test_fit(self):\n        self.reg.fit(self.X, self.y)\n        self.assertTrue(check_is_fitted(self.reg))\n\n    def test_predict(self):\n        self.reg.fit(self.X, self.y)\n        predictions = self.reg.predict(self.X)\n        self.assertEqual(len(predictions), len(self.y))\n\n    def test_feature_importances_(self):\n        self.reg.fit(self.X, self.y)\n        self.assertEqual(len(self.reg.feature_importances_), self.X.shape[1])\n\nclass TestExtraTreesClassifier(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, n_features=20, random_state=42)\n        self.clf = ExtraTreesClassifier(n_estimators=10, random_state=42)\n\n    def test_fit(self):\n        self.clf.fit(self.X, self.y)\n        self.assertTrue(check_is_fitted(self.clf))\n\n    def test_predict(self):\n        self.clf.fit(self.X, self.y)\n        predictions = self.clf.predict(self.X)\n        self.assertEqual(len(predictions), len(self.y))\n\n    def test_predict_proba(self):\n        self.clf.fit(self.X, self.y)\n        probabilities = self.clf.predict_proba(self.X)\n        self.assertEqual(probabilities.shape, (len(self.y), len(np.unique(self.y))))\n\n    def test_feature_importances_(self):\n        self.clf.fit(self.X, self.y)\n        self.assertEqual(len(self.clf.feature_importances_), self.X.shape[1])\n\nclass TestExtraTreesRegressor(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_regression(n_samples=100, n_features=20, random_state=42)\n        self.reg = ExtraTreesRegressor(n_estimators="], "sample_51": ["\nimport unittest\nfrom datetime import datetime, date, time, timedelta\nfrom django.utils.dateparse import parse_date, parse_datetime, parse_duration, parse_time\nfrom django.utils.timezone import utc, get_fixed_timezone\n\nclass TestDateParse(unittest.TestCase):\n\n    def test_parse_date(self):\n        self.assertEqual(parse_date('2020-12-31'), date(2020, 12, 31))\n        self.assertIsNone(parse_date('2020-13-31'))\n        with self.assertRaises(ValueError):\n            parse_date('2020-02-30')\n\n    def test_parse_time(self):\n        self.assertEqual(parse_time('12:34:56.789'), time(12, 34, 56, 789000))\n        self.assertIsNone(parse_time('12:34:56.789Z'))\n        with self.assertRaises(ValueError):\n            parse_time('12:60:56.789')\n\n    def test_parse_datetime(self):\n        self.assertEqual(parse_datetime('2020-12-31 12:34:56.789Z'), datetime(2020, 12, 31, 12, 34, 56, 789000, tzinfo=utc))\n        self.assertEqual(parse_datetime('2020-12-31 12:34:56.789+03:00'), datetime(2020, 12, 31, 12, 34, 56, 789000, tzinfo=get_fixed_timezone(180)))\n        self.assertIsNone(parse_datetime('2020-12-31 12:34:56.789ABC'))\n        with self.assertRaises(ValueError):\n            parse_datetime('2020-12-31 12:60:56.789Z')\n\n    def test_parse_duration(self):\n        self.assertEqual(parse_duration('1 12:34:56.789'), timedelta(days=1, hours=12, minutes=34, seconds=56, microseconds=789000))\n        self.assertEqual(parse_duration('P1DT12H34M56S'), timedelta(days=1, hours=12, minutes=34, seconds=56))\n        self.assertEqual(parse_duration('3 days 12:34:56.789'), timedelta(days=3, hours=12, minutes=34, seconds=56, microseconds=789000))\n        self.assertIsNone(parse_duration('12:34:56.789ABC'))\n        with self.assertRaises(ValueError):\n            parse_duration('1 days 12:60:56.789')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_355": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.contrib.auth.models import User, Group, Permission, AnonymousUser\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.utils import timezone\nfrom django.core.exceptions import PermissionDenied, ValueError\nfrom django.db import models\n\nclass TestAuthModels(unittest.TestCase):\n\n    @classmethod\n    def setUpClass(cls):\n        cls.user = User.objects.create_user(username='testuser', password='testpassword')\n        cls.group = Group.objects.create(name='testgroup')\n        cls.content_type = ContentType.objects.get_for_model(User)\n        cls.permission = Permission.objects.create(codename='can_test', name='Can test', content_type=cls.content_type)\n        cls.anonymous_user = AnonymousUser()\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.user.delete()\n        cls.group.delete()\n        cls.permission.delete()\n\n    def test_user_creation(self):\n        self.assertEqual(self.user.username, 'testuser')\n        self.assertTrue(self.user.check_password('testpassword'))\n\n    def test_group_creation(self):\n        self.assertEqual(self.group.name, 'testgroup')\n\n    def test_permission_creation(self):\n        self.assertEqual(self.permission.codename, 'can_test')\n\n    def test_user_groups(self):\n        self.user.groups.add(self.group)\n        self.assertIn(self.group, self.user.groups.all())\n\n    def test_user_permissions(self):\n        self.user.user_permissions.add(self.permission)\n        self.assertTrue(self.user.has_perm('auth.can_test'))\n\n    def test_anonymous_user(self):\n        self.assertFalse(self.anonymous_user.is_authenticated)\n        self.assertTrue(self.anonymous_user.is_anonymous)\n\n    def test_user_last_login(self):\n        old_login = self.user.last_login\n        self.user.last_login = timezone.now()\n        self.user.save(update_fields=['last_login'])\n        self.assertNotEqual(old_login, self.user.last_login)\n\n    def test_user_manager_create_superuser(self):\n        with self.assertRaises(ValueError):\n            User.objects.create_superuser(username='superuser', password='password', is_superuser=False)\n\n    def test_permissions_mixin_has_perm(self):\n        self.user.is_superuser = True\n        self.assertTrue(self.user.has_perm('auth.can_test'))\n\n    def test_permissions_mixin_has_module_perms(self):\n        self.user.is_superuser = True\n        self.assertTrue(self.user.has_module_perms('auth'))\n\n    def test_abstract_user_email_user(self):\n        with patch('django.contrib.auth.models.send_mail') as mock_send_mail:\n            self.user.email_user('Test Subject', 'Test Message', 'from@test.com')\n            mock_send_mail.assert_called_once_with('Test Subject', 'Test Message', 'from@test.com', [self.user.email])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_461": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.forms import fields\nfrom django.core.exceptions import ValidationError\nimport datetime\nimport re\n\nclass TestFieldMethods(unittest.TestCase):\n    def test_field_init(self):\n        field = fields.Field(required=True, label='Test Field')\n        self.assertEqual(field.required, True)\n        self.assertEqual(field.label, 'Test Field')\n\n    # Add more test methods to cover other Field methods as needed\n\nclass TestCharFieldMethods(unittest.TestCase):\n    def test_char_field_to_python(self):\n        char_field = fields.CharField()\n        self.assertEqual(char_field.to_python('test'), 'test')\n        self.assertEqual(char_field.to_python(123), '123')\n        self.assertEqual(char_field.to_python(None), '')\n\n    # Add more test methods to cover other CharField methods as needed\n\n# Continue this pattern for all other fields (IntegerField, DateField, etc.)\n\nclass TestURLFieldMethods(unittest.TestCase):\n    def test_url_field_to_python(self):\n        url_field = fields.URLField()\n        self.assertEqual(url_field.to_python('http://example.com'), 'http://example.com')\n        self.assertEqual(url_field.to_python('example.com'), 'http://example.com')\n\n    def test_url_field_validate(self):\n        url_field = fields.URLField()\n        with self.assertRaises(ValidationError):\n            url_field.validate('invalid_url')\n\n# Continue this pattern for all other fields (BooleanField, NullBooleanField, etc.)\n\n# Remember to run the tests with unittest.main() if this is the main script\n"], "sample_22": ["\nimport unittest\nimport numpy as np\nfrom astropy import units as u\nfrom astropy.coordinates import Angle\nfrom astropy.coordinates.matrix_utilities import angle_axis, is_O3, is_rotation, matrix_product, rotation_matrix\n\nclass TestMatrixUtilities(unittest.TestCase):\n    def setUp(self):\n        self.angle = Angle(45, u.deg)\n        self.axis = np.array([1, 0, 0])\n        self.matrix = rotation_matrix(self.angle, self.axis)\n\n    def test_rotation_matrix(self):\n        self.assertIsInstance(self.matrix, np.ndarray)\n        self.assertEqual(self.matrix.shape, (3, 3))\n        np.testing.assert_almost_equal(np.linalg.det(self.matrix), 1.0)\n\n    def test_angle_axis(self):\n        angle, axis = angle_axis(self.matrix)\n        self.assertIsInstance(angle, Angle)\n        np.testing.assert_almost_equal(angle.rad, self.angle.rad)\n        np.testing.assert_almost_equal(axis, self.axis)\n\n    def test_is_O3(self):\n        self.assertTrue(is_O3(self.matrix))\n        self.assertFalse(is_O3(self.matrix + 0.1 * np.identity(3)))\n\n    def test_is_rotation(self):\n        self.assertTrue(is_rotation(self.matrix))\n        self.assertFalse(is_rotation(self.matrix * -1))\n        self.assertTrue(is_rotation(self.matrix * -1, allow_improper=True))\n\n    def test_matrix_product(self):\n        result = matrix_product(self.matrix, self.matrix)\n        np.testing.assert_almost_equal(result, np.identity(3))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_375": ["\nfrom unittest import TestCase\nfrom unittest.mock import patch\n\nfrom django.apps.registry import Apps\nfrom django.db import models\nfrom django.db.migrations.state import ModelState, ProjectState, get_related_models_recursive\nfrom django.test.utils import isolate_apps\n\nclass TestProjectState(TestCase):\n    def setUp(self):\n        self.test_apps = Apps()\n\n    def test_model_state_from_model(self):\n        class TestModel(models.Model):\n            test_field = models.CharField(max_length=20)\n\n            class Meta:\n                indexes = [models.Index(fields=['test_field'], name='test_index')]\n                constraints = [models.CheckConstraint(check=models.Q(test_field__isnull=False), name='test_constraint')]\n\n        model_state = ModelState.from_model(TestModel)\n        self.assertEqual(model_state.app_label, '__test__')\n        self.assertEqual(model_state.name, 'TestModel')\n        self.assertIn('test_field', model_state.fields)\n        self.assertEqual(model_state.options['indexes'][0].name, 'test_index')\n        self.assertEqual(model_state.options['constraints'][0].name, 'test_constraint')\n\n    def test_project_state_from_apps(self):\n        class TestModel(models.Model):\n            test_field = models.CharField(max_length=20)\n\n        self.test_apps.set_installed_apps(['django.contrib.contenttypes', 'django.contrib.auth', '__test__'])\n        self.test_apps.register_model('__test__', TestModel)\n        project_state = ProjectState.from_apps(self.test_apps)\n        self.assertIn(('__test__', 'testmodel'), project_state.models)\n\n    def test_project_state_add_model(self):\n        project_state = ProjectState()\n        model_state = ModelState('__test__', 'TestModel', {})\n        project_state.add_model(model_state)\n        self.assertIn(('__test__', 'testmodel'), project_state.models)\n\n    def test_project_state_remove_model(self):\n        project_state = ProjectState()\n        model_state = ModelState('__test__', 'TestModel', {})\n        project_state.add_model(model_state)\n        project_state.remove_model('__test__', 'testmodel')\n        self.assertNotIn(('__test__', 'testmodel'), project_state.models)\n\n    @patch('django.db.migrations.state.StateApps')\n    def test_project_state_reload_model(self, mock_apps):\n        project_state = ProjectState()\n        model_state = ModelState('__test__', 'TestModel', {})\n        project_state.add_model(model_state)\n        project_state.apps = mock_apps\n        project_state.reload_model('__test__', 'testmodel')\n        project_state.apps.render_multiple.assert_called_once()\n\n    @patch('django.db.migrations.state.StateApps')\n    def test_project_state_resolve_fields_and_relations(self, mock_apps):\n        project_state = ProjectState()\n        model_state = ModelState('__test__', 'TestModel', {'test_field': models.CharField(max_length=20)})\n        project_state.add_model(model_state)\n        project_state.resolve_fields_and_relations()\n        self.assertIn(('__test__', 'testmodel'), project_state.relations)\n        self.assertIn('test_field', project_state.relations[('__test__', 'testmodel')][('__test__', 'testmodel')])\n\n    def test_get_related_models_recursive(self):\n        class TestModel1(models.Model):\n            pass\n\n        class TestModel2(models.Model):\n            test_field = models.ForeignKey(TestModel1, on_delete=models.CASCADE)\n\n        related_models = get_related_models_recursive(TestModel1)\n        self.assertIn(('__test__', 'testmodel2'), related_models)\n\n    def test_project_state_clone(self):\n        project_state = ProjectState()\n        model_state = ModelState('__test__', 'TestModel', {})\n        project_state.add_model(model_state)\n        cloned_state = project_state.clone()\n        self.assertEqual(project_state, cloned_state)\n\n    def test_project_state_equality(self):\n        project_state1 = ProjectState()\n        model_state = ModelState('__test__', 'TestModel', {})\n        project_state1.add_model(model_state)\n        project_state2 = ProjectState()\n        project_state2.add_model(model_state)\n        self.assertEqual(project_state1, project_state2)\n"], "sample_539": ["\nimport matplotlib.widgets as widgets\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\nfrom matplotlib.testing.widgets import (click_and_drag, do_event, get_ax, mock_event, noop)\nimport numpy as np\nfrom numpy.testing import assert_allclose\nimport pytest\n\ndef test_Button_initialization():\n    fig, ax = plt.subplots()\n    button = widgets.Button(ax, \"Test\")\n    assert button.label.get_text() == \"Test\"\n\ndef test_Button_on_clicked():\n    fig, ax = plt.subplots()\n    button = widgets.Button(ax, \"Test\")\n    callback = mock_event()\n    button.on_clicked(callback)\n    do_event(button, 'button_press_event')\n    do_event(button, 'button_release_event')\n    assert callback.count == 1\n\n# Add more unit tests for other widgets and their methods...\n\ndef test_LassoSelector_initialization():\n    fig, ax = plt.subplots()\n    onselect = mock_event()\n    lasso = widgets.LassoSelector(ax, onselect)\n    assert lasso.verts is None\n\ndef test_LassoSelector_onselect():\n    fig, ax = plt.subplots()\n    onselect = mock_event()\n    lasso = widgets.LassoSelector(ax, onselect)\n    lasso.verts = [(0, 0), (1, 1), (0, 1)]\n    lasso._release(mock_event())\n    assert onselect.count == 1\n\n# Add more unit tests for LassoSelector and other widgets as needed...\n"], "sample_220": ["\nimport unittest\nfrom django.http.response import HttpResponse, HttpResponseRedirect, JsonResponse, DjangoJSONEncoder\nfrom unittest.mock import patch\n\nclass TestDjangoResponse(unittest.TestCase):\n    def test_HttpResponse_init(self):\n        response = HttpResponse(\"Test content\")\n        self.assertEqual(response.content, b\"Test content\")\n        self.assertEqual(response.status_code, 200)\n\n    def test_HttpResponse_set_cookie(self):\n        response = HttpResponse()\n        response.set_cookie(\"test_key\", \"test_value\")\n        self.assertEqual(response.cookies[\"test_key\"].value, \"test_value\")\n\n    def test_HttpResponseRedirect_init(self):\n        response = HttpResponseRedirect(\"https://test.com\")\n        self.assertEqual(response.url, \"https://test.com\")\n        self.assertEqual(response.status_code, 302)\n\n    def test_JsonResponse_init(self):\n        response = JsonResponse({\"test\": \"data\"})\n        self.assertEqual(response.content, b'{\"test\": \"data\"}')\n        self.assertEqual(response.status_code, 200)\n\n    def test_JsonResponse_safe(self):\n        with self.assertRaises(TypeError):\n            JsonResponse([\"not\", \"safe\"])\n\n    @patch('django.http.response.json.dumps')\n    def test_JsonResponse_custom_encoder(self, mock_dumps):\n        class CustomEncoder(DjangoJSONEncoder):\n            def default(self, o):\n                return str(o)\n        JsonResponse({\"test\": 123}, encoder=CustomEncoder)\n        mock_dumps.assert_called_with({\"test\": 123}, cls=CustomEncoder)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1128": ["\nimport unittest\nfrom sympy import symbols, diff, cos, sin\nfrom sympy.physics.vector import dynamicsymbols, Point, ReferenceFrame, Vector, VectorError\n\nclass TestPoint(unittest.TestCase):\n\n    def setUp(self):\n        self.N = ReferenceFrame('N')\n        self.O = Point('O')\n        self.P = Point('P')\n        self.B = ReferenceFrame('B')\n        self.q = dynamicsymbols('q')\n        self.q2 = dynamicsymbols('q2')\n        self.qd = dynamicsymbols('q', 1)\n        self.q2d = dynamicsymbols('q2', 1)\n\n    def test_str_repr(self):\n        self.assertEqual(str(self.O), \"O\")\n        self.assertEqual(repr(self.O), \"O\")\n\n    def test_check_point(self):\n        self.assertRaises(TypeError, self.O._check_point, \"not a point\")\n\n    def test_locatenew(self):\n        P2 = self.O.locatenew('P2', 10 * self.N.x)\n        self.assertIsInstance(P2, Point)\n        self.assertEqual(P2.pos_from(self.O), 10 * self.N.x)\n\n    def test_set_get_pos(self):\n        self.O.set_pos(self.P, 10 * self.N.x)\n        self.assertEqual(self.O.pos_from(self.P), 10 * self.N.x)\n\n    def test_set_get_vel(self):\n        self.O.set_vel(self.N, 10 * self.N.x)\n        self.assertEqual(self.O.vel(self.N), 10 * self.N.x)\n\n    def test_set_get_acc(self):\n        self.O.set_acc(self.N, 10 * self.N.x)\n        self.assertEqual(self.O.acc(self.N), 10 * self.N.x)\n\n    def test_v1pt_theory(self):\n        self.B.set_ang_vel(self.N, 5 * self.B.y)\n        self.P = self.O.locatenew('P', self.q * self.B.x)\n        self.P.set_vel(self.B, self.qd * self.B.x + self.q2d * self.B.y)\n        self.O.set_vel(self.N, 0)\n        self.assertEqual(self.P.v1pt_theory(self.O, self.N, self.B), self.qd * self.B.x + self.q2d * self.B.y - 5 * self.q * self.B.z)\n\n    def test_a1pt_theory(self):\n        self.B.set_ang_vel(self.N, 5 * self.B.y)\n        self.P = self.O.locatenew('P', self.q * self.B.x)\n        self.P.set_vel(self.B, self.qd * self.B.x + self.q2d * self.B.y)\n        self.O.set_vel(self.N, 0)\n        self.O.set_acc(self.N, 0)\n        self.assertEqual(self.P.a1pt_theory(self.O, self.N, self.B), -25 * self.q * self.B.x + self.q2d.diff() * self.B.y)\n\n    def test_v2pt_theory(self):\n        self.B = self.N.orientnew('B', 'Axis', [self.q, self.N.z])\n        self.P = self.O.locatenew('P', 10 * self.B.x)\n        self.O.set_vel(self.N, 5 * self.N.x)\n        self.assertEqual(self.P.v2pt_theory(self.O, self.N, self.B), 5 * self.N.x + 10 * self.qd * self.B.y)\n\n    def test_a2pt_theory(self):\n        self.B = self.N.orientnew('B', 'Axis', [self.q, self.N.z])\n        self.P = self.O.locatenew('P', 10 * self.B.x)\n        self.O.set_vel(self.N, 5 * self.N.x)\n        self.O.set_acc(self.N, 0)\n        self.assertEqual(self.P.a2pt_theory(self.O, self.N, self.B), -10 * self.qd ** 2 * self.B.x + 10 * self.qd.diff() * self.B.y)\n\n    def test_invalid_operations(self):\n        self.assertRaises(TypeError, self.O.set_pos, \"not a point\", 10 * self.N.x)\n        self.assertRaises(TypeError, self.O.set_vel, \"not a frame\", 10 * self.N.x)\n        self.assertRaises(TypeError, self.O.set_acc, \"not a frame\", 10 * self.N.x)\n        self.assertRaises(TypeError, self.O.v1pt_theory, \"not a point\", self.N, self.B)\n        self.assertRaises(TypeError, self.O.a1pt_theory, \"not a point\", self.N, self.B)\n        self.assertRaises(TypeError, self.O.v2pt_theory, \"not a point\", self.N, self.B)\n        self.assertRaises(TypeError, self.O.a2pt_theory, \"not a point\", self.N, self.B)\n        self.assertRaises(VectorError, self.O.set_pos, self.P, \"not a vector\")\n        self.assertRaises(VectorError, self.O.set_vel, self.N, \"not a vector\")\n        self.assertRaises(VectorError, self.O.set_acc, self.N, \"not a vector\")\n        self.assertRaises(ValueError, self.O.pos_from, \"not a point\")\n        self.assertRaises(ValueError, self.O.vel, \"not a frame\")\n        self.assertRaises(ValueError, self.O.acc, \"not a frame\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_763": ["\nimport unittest\nimport numpy as np\nimport scipy.sparse as sp\nfrom sklearn.utils.validation import check_array, check_X_y, check_symmetric, check_non_negative, _num_samples, check_consistent_length, assert_all_finite, check_memory\n\nclass TestValidation(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4]])\n        self.y = np.array([1, 2])\n        self.sparse_X = sp.csr_matrix(self.X)\n        self.invalid_X = np.array([[1, 2], [3, np.nan]])\n        self.invalid_y = np.array([1, np.inf])\n\n    def test_check_array(self):\n        self.assertIsInstance(check_array(self.X), np.ndarray)\n        self.assertIsInstance(check_array(self.sparse_X), sp.csr_matrix)\n        with self.assertRaises(ValueError):\n            check_array(self.invalid_X)\n\n    def test_check_X_y(self):\n        X, y = check_X_y(self.X, self.y)\n        self.assertIsInstance(X, np.ndarray)\n        self.assertIsInstance(y, np.ndarray)\n        with self.assertRaises(ValueError):\n            check_X_y(self.X, self.invalid_y)\n\n    def test_check_symmetric(self):\n        symmetric_X = np.array([[1, 2], [2, 1]])\n        self.assertTrue(np.array_equal(check_symmetric(symmetric_X), symmetric_X))\n        non_symmetric_X = np.array([[1, 2], [3, 4]])\n        with self.assertWarns(Warning):\n            check_symmetric(non_symmetric_X)\n\n    def test_check_non_negative(self):\n        check_non_negative(self.X, 'Test')\n        with self.assertRaises(ValueError):\n            check_non_negative(self.invalid_X, 'Test')\n\n    def test_num_samples(self):\n        self.assertEqual(_num_samples(self.X), 2)\n        self.assertEqual(_num_samples(self.sparse_X), 2)\n\n    def test_check_consistent_length(self):\n        check_consistent_length(self.X, self.y)\n        with self.assertRaises(ValueError):\n            check_consistent_length(self.X, self.invalid_y)\n\n    def test_assert_all_finite(self):\n        assert_all_finite(self.X)\n        with self.assertRaises(ValueError):\n            assert_all_finite(self.invalid_X)\n\n    def test_check_memory(self):\n        memory = check_memory(None)\n        self.assertIsNotNone(memory)\n        memory = check_memory('/tmp')\n        self.assertIsNotNone(memory)\n        with self.assertRaises(ValueError):\n            check_memory(123)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1065": ["\nimport unittest\nfrom sympy import symbols, S, Add, Mul, Pow, Rational, oo, I\nfrom sympy.core.mul import _keep_coeff, expand_2arg, _unevaluated_Mul\nfrom sympy.abc import x, y\n\nclass TestMulFunctions(unittest.TestCase):\n    def test_keep_coeff(self):\n        self.assertEqual(_keep_coeff(S.Half, x + 2), (x + 2)/2)\n        self.assertEqual(_keep_coeff(S.Half, x + 2, clear=False), x/2 + 1)\n        self.assertEqual(_keep_coeff(S.Half, (x + 2)*y, clear=False), y*(x + 2)/2)\n        self.assertEqual(_keep_coeff(S(-1), x + y), -x - y)\n        self.assertEqual(_keep_coeff(S(-1), x + y, sign=True), -(x + y))\n\n    def test_expand_2arg(self):\n        self.assertEqual(expand_2arg(2*(x + 3)), 2*x + 6)\n        self.assertEqual(expand_2arg(2*Mul(x, y)), 2*x*y)\n\n    def test_unevaluated_Mul(self):\n        self.assertEqual(_unevaluated_Mul(S(3.0), x, S(2)), 6.0*x)\n        self.assertEqual(_unevaluated_Mul(sqrt(2), sqrt(3)), sqrt(6))\n        self.assertEqual(_unevaluated_Mul(Mul(sqrt(3), sqrt(2), evaluate=False)), sqrt(6))\n        self.assertNotEqual(_unevaluated_Mul(sqrt(3), sqrt(2)), sqrt(6))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_207": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.core import exceptions\nfrom django.db.models import lookups\nfrom django.db.models.fields.json import JSONField, KeyTransform, KeyTransformFactory\n\nclass TestJSONField(unittest.TestCase):\n    def setUp(self):\n        self.field = JSONField()\n\n    def test_json_field_init(self):\n        self.assertIsNone(self.field.encoder)\n        self.assertIsNone(self.field.decoder)\n\n    def test_json_field_check(self):\n        # Test the check method of JSONField\n        with patch('django.db.models.fields.json.connections') as mock_connections:\n            mock_connections.__getitem__.return_value = Mock(features=Mock(supports_json_field=True))\n            errors = self.field.check(databases=['default'])\n            self.assertEqual(len(errors), 0)\n\n    def test_json_field_get_prep_value(self):\n        value = {'key': 'value'}\n        result = self.field.get_prep_value(value)\n        self.assertEqual(result, '{\"key\": \"value\"}')\n\n    def test_json_field_validate(self):\n        value = {'key': 'value'}\n        self.field.validate(value, None)\n\n    def test_json_field_validate_invalid(self):\n        value = object()\n        with self.assertRaises(exceptions.ValidationError):\n            self.field.validate(value, None)\n\nclass TestKeyTransform(unittest.TestCase):\n    def setUp(self):\n        self.transform = KeyTransform('key', lookups.Exact('value'))\n\n    def test_key_transform_as_sqlite(self):\n        compiler = Mock()\n        connection = Mock(vendor='sqlite')\n        result = self.transform.as_sqlite(compiler, connection)\n        self.assertEqual(result, ('JSON_EXTRACT(%s, %%s)', ('%s', '.key')))\n\nclass TestKeyTransformFactory(unittest.TestCase):\n    def test_key_transform_factory(self):\n        factory = KeyTransformFactory('key')\n        transform = factory()\n        self.assertIsInstance(transform, KeyTransform)\n        self.assertEqual(transform.key_name, 'key')\n"], "sample_946": ["\nimport unittest\nfrom unittest.mock import patch, mock_open\nimport sys\nimport os\nfrom sphinx.ext.apidoc import main as apidoc_main, recurse_tree, create_modules_toc_file\n\nclass TestApidoc(unittest.TestCase):\n\n    @patch('os.path.isdir', return_value=True)\n    @patch('os.walk')\n    @patch('sphinx.ext.apidoc.create_package_file')\n    @patch('sphinx.ext.apidoc.create_module_file')\n    @patch('sphinx.ext.apidoc.is_packagedir', return_value=True)\n    @patch('sphinx.ext.apidoc.is_skipped_package', return_value=False)\n    def test_recurse_tree(self, mock_is_skipped_package, mock_is_packagedir, mock_create_module_file, mock_create_package_file, mock_walk, mock_isdir):\n        mock_walk.return_value = [\n            ('/root', ['sub1'], ['module1.py', 'module2.py']),\n            ('/root/sub1', ['sub2'], ['__init__.py', 'module3.py']),\n            ('/root/sub1/sub2', [], ['__init__.py', 'module4.py']),\n        ]\n        opts = unittest.mock.Mock()\n        opts.implicit_namespaces = False\n        opts.includeprivate = False\n        opts.exclude_pattern = []\n        result = recurse_tree('/root', [], opts)\n        self.assertEqual(result, ['module1', 'module2', 'sub1.module3', 'sub1.sub2.module4'])\n\n    @patch('sphinx.ext.apidoc.write_file')\n    @patch('sphinx.ext.apidoc.ReSTRenderer')\n    def test_create_modules_toc_file(self, mock_ReSTRenderer, mock_write_file):\n        mock_render = unittest.mock.Mock()\n        mock_render.render.return_value = 'TOC file content'\n        mock_ReSTRenderer.return_value = mock_render\n        opts = unittest.mock.Mock()\n        opts.header = 'Header'\n        opts.maxdepth = 3\n        create_modules_toc_file(['module1', 'module2', 'module1.submodule'], opts)\n        mock_write_file.assert_called_once_with('modules', 'TOC file content', opts)\n\n    @patch('sys.argv', ['apidoc.py', '-o', '/output', '/source'])\n    @patch('os.path.isdir', return_value=True)\n    @patch('os.path.abspath')\n    @patch('sphinx.ext.apidoc.ensuredir')\n    @patch('sphinx.ext.apidoc.recurse_tree')\n    @patch('sphinx.ext.apidoc.create_modules_toc_file')\n    def test_main(self, mock_create_modules_toc_file, mock_recurse_tree, mock_ensuredir, mock_abspath, mock_isdir):\n        mock_abspath.return_value = '/source'\n        mock_recurse_tree.return_value = ['module1', 'module2']\n        with patch('sys.stdout', new_callable=mock_open()) as mock_stdout:\n            apidoc_main()\n            mock_recurse_tree.assert_called_once()\n            mock_create_modules_toc_file.assert_called_once_with(['module1', 'module2'], mock_recurse_tree.return_value.call_args[0][2], 'modules', None)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_498": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nimport matplotlib.legend as mlegend\nfrom matplotlib.lines import Line2D\nfrom matplotlib.patches import Patch\nfrom matplotlib.collections import Collection\nfrom matplotlib.text import Text\nfrom matplotlib.container import BarContainer\n\nclass TestLegend(unittest.TestCase):\n    def setUp(self):\n        self.mock_ax = Mock()\n        self.mock_fig = Mock()\n        self.mock_ax.figure = self.mock_fig\n\n    def test_init_legend_box(self):\n        handles = [Line2D([0, 1], [0, 1]), Patch()]\n        labels = ['Line', 'Patch']\n        legend = mlegend.Legend(self.mock_ax, handles, labels)\n        self.assertIsNotNone(legend._legend_box)\n\n    def test_get_legend_handler(self):\n        legend_handler_map = {Line2D: 'LineHandler', Patch: 'PatchHandler'}\n        handle = Line2D([0, 1], [0, 1])\n        self.assertEqual(mlegend.Legend.get_legend_handler(legend_handler_map, handle), 'LineHandler')\n\n    def test_auto_legend_data(self):\n        self.mock_ax._children = [Line2D([0, 1], [0, 1]), Patch(), Collection([[0, 0], [1, 1]])]\n        legend = mlegend.Legend(self.mock_ax, [], [])\n        bboxes, lines, offsets = legend._auto_legend_data()\n        self.assertEqual(len(bboxes), 1)\n        self.assertEqual(len(lines), 2)\n        self.assertEqual(len(offsets), 2)\n\n    def test_get_anchored_bbox(self):\n        bbox = Mock()\n        parentbbox = Mock()\n        renderer = Mock()\n        legend = mlegend.Legend(self.mock_ax, [], [])\n        legend.borderaxespad = 0.5\n        self.assertIsNotNone(legend._get_anchored_bbox(1, bbox, parentbbox, renderer))\n\n    def test_set_draggable(self):\n        legend = mlegend.Legend(self.mock_ax, [], [])\n        draggable = legend.set_draggable(True)\n        self.assertIsNotNone(draggable)\n\n    def test_parse_legend_args(self):\n        axs = [self.mock_ax]\n        handles = [Line2D([0, 1], [0, 1]), Patch()]\n        labels = ['Line', 'Patch']\n        parsed_handles, parsed_labels, extra_args, kwargs = mlegend._parse_legend_args(axs, handles=handles, labels=labels)\n        self.assertEqual(parsed_handles, handles)\n        self.assertEqual(parsed_labels, labels)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_517": ["\nimport unittest\nimport matplotlib\nmatplotlib.use('Agg')  # Use non-interactive backend for testing\nimport matplotlib.pyplot as plt\nfrom matplotlib.text import Text, Annotation, OffsetFrom, _AnnotationBase\nimport numpy as np\n\nclass TestText(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n\n    def test_text_init(self):\n        text = Text(0, 0, 'test')\n        self.assertEqual(text.get_text(), 'test')\n\n    def test_text_set_text(self):\n        text = Text(0, 0, 'test')\n        text.set_text('new text')\n        self.assertEqual(text.get_text(), 'new text')\n\n    # Add more tests for Text class...\n\nclass TestAnnotation(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n\n    def test_annotation_init(self):\n        ann = Annotation('text', xy=(0, 0))\n        self.assertEqual(ann.get_text(), 'text')\n\n    def test_annotation_set_position(self):\n        ann = Annotation('text', xy=(0, 0))\n        ann.set_position((1, 1))\n        self.assertEqual(ann.get_position(), (1, 1))\n\n    # Add more tests for Annotation class...\n\nclass TestOffsetFrom(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n\n    def test_offset_from_init(self):\n        offset = OffsetFrom(self.ax, (0, 0))\n        self.assertIsInstance(offset(), matplotlib.transforms.Affine2D)\n\n    # Add more tests for OffsetFrom class...\n\nclass TestAnnotationBase(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.ann_base = _AnnotationBase((0, 0))\n        self.ann_base.axes = self.ax\n        self.ann_base.figure = self.fig\n\n    def test_get_xy(self):\n        xy = self.ann_base._get_xy(self.fig.canvas.get_renderer(), 0, 0, 'data')\n        self.assertEqual(xy, (0, 0))\n\n    # Add more tests for _AnnotationBase class...\n"], "sample_701": ["\nimport pytest\nfrom _pytest.mark.expression import Expression, ParseError\n\ndef test_empty_expression():\n    expr = Expression.compile(\"\")\n    assert expr.evaluate(lambda x: False) == False\n\ndef test_single_identifier():\n    expr = Expression.compile(\"foo\")\n    assert expr.evaluate(lambda x: x == \"foo\") == True\n    assert expr.evaluate(lambda x: x == \"bar\") == False\n\ndef test_not_expression():\n    expr = Expression.compile(\"not foo\")\n    assert expr.evaluate(lambda x: x == \"foo\") == False\n    assert expr.evaluate(lambda x: x == \"bar\") == True\n\ndef test_and_expression():\n    expr = Expression.compile(\"foo and bar\")\n    assert expr.evaluate(lambda x: x == \"foo\" or x == \"bar\") == False\n    assert expr.evaluate(lambda x: x in (\"foo\", \"bar\")) == True\n\ndef test_or_expression():\n    expr = Expression.compile(\"foo or bar\")\n    assert expr.evaluate(lambda x: x == \"foo\" or x == \"bar\") == True\n    assert expr.evaluate(lambda x: x == \"baz\") == False\n\ndef test_parentheses_expression():\n    expr = Expression.compile(\"(foo and bar) or baz\")\n    assert expr.evaluate(lambda x: x in (\"foo\", \"bar\", \"baz\")) == True\n    assert expr.evaluate(lambda x: x in (\"foo\", \"baz\")) == True\n    assert expr.evaluate(lambda x: x == \"bar\") == False\n\ndef test_invalid_expression():\n    with pytest.raises(ParseError):\n        Expression.compile(\"foo & bar\")\n"], "sample_680": ["\nimport pytest\nfrom _pytest.mark.expression import Expression, ParseError, MatcherAdapter\n\ndef test_expression_compile_empty_string():\n    expr = Expression.compile(\"\")\n    assert expr.evaluate(lambda _: True) == False\n\ndef test_expression_compile_single_identifier():\n    expr = Expression.compile(\"test\")\n    assert expr.evaluate(lambda x: x == \"test\") == True\n    assert expr.evaluate(lambda x: x == \"not_test\") == False\n\ndef test_expression_compile_or_expression():\n    expr = Expression.compile(\"test1 or test2\")\n    assert expr.evaluate(lambda x: x == \"test1\") == True\n    assert expr.evaluate(lambda x: x == \"test2\") == True\n    assert expr.evaluate(lambda x: x == \"not_test\") == False\n\ndef test_expression_compile_and_expression():\n    expr = Expression.compile(\"test1 and test2\")\n    assert expr.evaluate(lambda x: x == \"test1\" and x == \"test2\") == True\n    assert expr.evaluate(lambda x: x == \"test1\" and x == \"not_test2\") == False\n\ndef test_expression_compile_not_expression():\n    expr = Expression.compile(\"not test\")\n    assert expr.evaluate(lambda x: x != \"test\") == True\n    assert expr.evaluate(lambda x: x == \"test\") == False\n\ndef test_expression_compile_parentheses_expression():\n    expr = Expression.compile(\"(test1 and test2) or test3\")\n    assert expr.evaluate(lambda x: (x == \"test1\" and x == \"test2\") or x == \"test3\") == True\n    assert expr.evaluate(lambda x: (x == \"test1\" and x == \"not_test2\") or x == \"test3\") == True\n\ndef test_expression_compile_invalid_expression():\n    with pytest.raises(ParseError):\n        Expression.compile(\"test1 and\")\n\ndef test_matcher_adapter_getitem():\n    def matcher(x):\n        return x in [\"test1\", \"test2\"]\n    adapter = MatcherAdapter(matcher)\n    assert adapter[\"$test1\"] == True\n    assert adapter[\"$test2\"] == True\n    assert adapter[\"$not_test\"] == False\n\ndef test_matcher_adapter_iter_not_implemented():\n    with pytest.raises(NotImplementedError):\n        iter(MatcherAdapter(lambda _: True))\n\ndef test_matcher_adapter_len_not_implemented():\n    with pytest.raises(NotImplementedError):\n        len(MatcherAdapter(lambda _: True))\n"], "sample_376": ["\nimport unittest\nfrom unittest.mock import Mock, patch\n\nfrom django.contrib.messages.storage.cookie import CookieStorage, MessageDecoder, MessageEncoder, Message\n\nclass TestCookieStorage(unittest.TestCase):\n    def setUp(self):\n        self.request = Mock()\n        self.response = Mock()\n        self.storage = CookieStorage(self.request)\n\n    def test_get_messages(self):\n        self.request.COOKIES = {'messages': 'WyIkX2pzb25fX21lc3NhZ2UiLCAxLCAiIk1lc3NhZ2UiLCAiVG8gcmVhbGx5IG1lc3NhZ2UuIl0K'}\n        messages, all_retrieved = self.storage._get()\n        self.assertEqual(len(messages), 1)\n        self.assertEqual(messages[0].message, \"To readily message.\")\n        self.assertTrue(all_retrieved)\n\n    def test_store_messages(self):\n        msg = Message(\"Test message\")\n        unstored_messages = self.storage._store([msg], self.response)\n        self.assertEqual(len(unstored_messages), 0)\n        self.response.set_cookie.assert_called_once()\n\n    def test_store_large_message(self):\n        msg = Message(\"A\" * CookieStorage.max_cookie_size)\n        unstored_messages = self.storage._store([msg], self.response)\n        self.assertEqual(len(unstored_messages), 1)\n        self.assertEqual(unstored_messages[0], msg)\n\n    def test_encode_decode_messages(self):\n        msg = Message(\"Test message\")\n        encoded = self.storage._encode([msg])\n        decoded = self.storage._decode(encoded)\n        self.assertEqual(decoded, [msg])\n\n    def test_decode_invalid_data(self):\n        decoded = self.storage._decode('invalid data')\n        self.assertIsNone(decoded)\n        self.assertTrue(self.storage.used)\n\nclass TestMessageEncoderDecoder(unittest.TestCase):\n    def test_encode_decode_message(self):\n        msg = Message(\"Test message\")\n        encoder = MessageEncoder()\n        decoder = MessageDecoder()\n        encoded = encoder.encode([msg])\n        decoded = decoder.decode(encoded)\n        self.assertEqual(decoded, [msg])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_185": ["\nimport unittest\nfrom unittest.mock import patch\nfrom datetime import date, datetime, time\nfrom decimal import Decimal\nfrom django.conf import settings\nfrom django.utils.formats import (\n    date_format, time_format, number_format, localize, localize_input, sanitize_separators,\n    get_format, get_format_modules, iter_format_modules, reset_format_cache,\n)\n\nclass TestFormats(unittest.TestCase):\n\n    def setUp(self):\n        self.old_USE_L10N = settings.USE_L10N\n        settings.USE_L10N = True\n        reset_format_cache()\n\n    def tearDown(self):\n        settings.USE_L10N = self.old_USE_L10N\n        reset_format_cache()\n\n    def test_date_format(self):\n        self.assertIsInstance(date_format(date.today()), str)\n\n    def test_time_format(self):\n        self.assertIsInstance(time_format(time()), str)\n\n    def test_number_format(self):\n        self.assertIsInstance(number_format(123456.789), str)\n\n    def test_localize(self):\n        self.assertIsInstance(localize(Decimal('123456.789')), str)\n        self.assertIsInstance(localize(date.today()), str)\n        self.assertIsInstance(localize(time()), str)\n\n    def test_localize_input(self):\n        self.assertIsInstance(localize_input(Decimal('123456.789')), str)\n        self.assertIsInstance(localize_input(datetime.now()), str)\n        self.assertIsInstance(localize_input(date.today()), str)\n        self.assertIsInstance(localize_input(time()), str)\n\n    def test_sanitize_separators(self):\n        self.assertEqual(sanitize_separators('123456.789'), '123456.789')\n\n    def test_get_format(self):\n        self.assertIsInstance(get_format('DATE_FORMAT'), str)\n\n    def test_get_format_modules(self):\n        self.assertIsInstance(get_format_modules(), list)\n\n    @patch('django.utils.formats.import_module')\n    def test_iter_format_modules(self, mock_import_module):\n        mock_import_module.return_value = None\n        self.assertIsInstance(list(iter_format_modules('en')), list)\n\n    def test_reset_format_cache(self):\n        reset_format_cache()\n        self.assertEqual(get_format('DATE_FORMAT'), settings.DATE_FORMAT)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_405": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.migrations.operations import models\nfrom django.db import models as db_models\n\nclass TestModelOperations(unittest.TestCase):\n    def setUp(self):\n        self.model_name = \"TestModel\"\n        self.fields = [(\"name\", db_models.CharField(max_length=255))]\n        self.options = {\"verbose_name\": \"Test Model\"}\n        self.bases = (db_models.Model,)\n        self.managers = [(\"objects\", db_models.Manager())]\n\n    def test_create_model(self):\n        operation = models.CreateModel(self.model_name, self.fields, self.options, self.bases, self.managers)\n        self.assertEqual(operation.name, self.model_name)\n        self.assertEqual(operation.fields, self.fields)\n        self.assertEqual(operation.options, self.options)\n        self.assertEqual(operation.bases, self.bases)\n        self.assertEqual(operation.managers, self.managers)\n\n    def test_delete_model(self):\n        operation = models.DeleteModel(self.model_name)\n        self.assertEqual(operation.name, self.model_name)\n\n    def test_rename_model(self):\n        new_name = \"NewTestModel\"\n        operation = models.RenameModel(self.model_name, new_name)\n        self.assertEqual(operation.old_name, self.model_name)\n        self.assertEqual(operation.new_name, new_name)\n\n    def test_alter_model_table(self):\n        new_table = \"new_table\"\n        operation = models.AlterModelTable(self.model_name, new_table)\n        self.assertEqual(operation.name, self.model_name)\n        self.assertEqual(operation.table, new_table)\n\n    def test_alter_unique_together(self):\n        unique_together = {(\"name\",)}\n        operation = models.AlterUniqueTogether(self.model_name, unique_together)\n        self.assertEqual(operation.name, self.model_name)\n        self.assertEqual(operation.unique_together, unique_together)\n\n    def test_alter_index_together(self):\n        index_together = {(\"name\",)}\n        operation = models.AlterIndexTogether(self.model_name, index_together)\n        self.assertEqual(operation.name, self.model_name)\n        self.assertEqual(operation.index_together, index_together)\n\n    def test_alter_order_with_respect_to(self):\n        order_with_respect_to = \"name\"\n        operation = models.AlterOrderWithRespectTo(self.model_name, order_with_respect_to)\n        self.assertEqual(operation.name, self.model_name)\n        self.assertEqual(operation.order_with_respect_to, order_with_respect_to)\n\n    def test_alter_model_options(self):\n        new_options = {\"verbose_name_plural\": \"Test Models\"}\n        operation = models.AlterModelOptions(self.model_name, new_options)\n        self.assertEqual(operation.name, self.model_name)\n        self.assertEqual(operation.options, new_options)\n\n    def test_alter_model_managers(self):\n        new_managers = [(\"custom_objects\", db_models.Manager())]\n        operation = models.AlterModelManagers(self.model_name, new_managers)\n        self.assertEqual(operation.name, self.model_name)\n        self.assertEqual(operation.managers, new_managers)\n\n    def test_add_index(self):\n        index = db_models.Index(fields=[\"name\"], name=\"idx_name\")\n        operation = models.AddIndex(self.model_name, index)\n        self.assertEqual(operation.model_name, self.model_name)\n        self.assertEqual(operation.index, index)\n\n    def test_remove_index(self):\n        index_name = \"idx_name\"\n        operation = models.RemoveIndex(self.model_name, index_name)\n        self.assertEqual(operation.model_name, self.model_name)\n        self.assertEqual(operation.name, index_name)\n\n    def test_rename_index(self):\n        new_name = \"idx_new_name\"\n        old_name = \"idx_old_name\"\n        operation = models.RenameIndex(self.model_name, new_name, old_name=old_name)\n        self.assertEqual(operation.model_name, self.model_name)\n        self.assertEqual(operation.new_name, new_name)\n        self.assertEqual(operation.old_name, old_name)\n\n    def test_add_constraint(self):\n        constraint = db_models.CheckConstraint(check=db_models.Q(name__isnull=False), name=\"chk_name\")\n        operation = models.AddConstraint(self.model_name, constraint)\n        self.assertEqual(operation.model_name, self.model_name)\n        self.assertEqual(operation.constraint, constraint)\n\n    def test_remove_constraint(self):\n        constraint_name = \"chk_name\"\n        operation = models.RemoveConstraint(self.model_name, constraint_name)\n        self.assertEqual(operation.model_name, self.model_name)\n        self.assertEqual(operation.name, constraint_name)\n"], "sample_706": ["\nimport pytest\nfrom unittest.mock import MagicMock, patch\nfrom _pytest import nodes\nfrom _pytest.compat import LEGACY_PATH\nfrom _pytest.config import Config, ConftestImportFailure\nfrom _pytest._code.code import ExceptionInfo\nfrom _pytest.warning_types import PytestWarning\nfrom pathlib import Path\nimport os\n\n@pytest.fixture\ndef mock_session():\n    session = MagicMock()\n    session._initialpaths = [Path(\"/test/path\")]\n    session.config.rootpath = Path(\"/test\")\n    return session\n\n@pytest.fixture\ndef mock_config():\n    config = MagicMock(spec=Config)\n    config.rootpath = Path(\"/test\")\n    return config\n\ndef test_iterparentnodeids():\n    nodeid = \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n    expected_output = [\n        \"\",\n        \"testing\",\n        \"testing/code\",\n        \"testing/code/test_excinfo.py\",\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo\",\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n    ]\n    assert list(nodes.iterparentnodeids(nodeid)) == expected_output\n\ndef test_imply_path():\n    path = Path(\"/test/path\")\n    assert nodes._imply_path(nodes.Node, path, None) == path\n    assert nodes._imply_path(nodes.Node, None, LEGACY_PATH(\"/test/path\")) == path\n\ndef test_node_init(mock_config, mock_session):\n    node = nodes.Node(\"test_node\", config=mock_config, session=mock_session)\n    assert node.name == \"test_node\"\n    assert node.config == mock_config\n    assert node.session == mock_session\n\ndef test_fs_collector_init(mock_session):\n    collector = nodes.FSCollector(path=Path(\"/test/path\"), session=mock_session)\n    assert collector.path == Path(\"/test/path\")\n    assert collector.session == mock_session\n\ndef test_get_fslocation_from_item():\n    node = nodes.Node(\"test_node\")\n    node.location = (\"/test/path\", 123, \"test_location\")\n    assert nodes.get_fslocation_from_item(node) == (\"/test/path\", 123)\n\ndef test_node_repr_failure(mock_config, mock_session):\n    node = nodes.Node(\"test_node\", config=mock_config, session=mock_session)\n    excinfo = ExceptionInfo(ConftestImportFailure(\"test_exception\"), None)\n    assert node.repr_failure(excinfo)\n"], "sample_1013": ["\nimport unittest\nfrom sympy import symbols, Matrix\nfrom sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray, MutableDenseNDimArray\n\nclass TestDenseNDimArray(unittest.TestCase):\n    def setUp(self):\n        self.immutable_array = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n        self.mutable_array = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n        self.i, self.j = symbols('i j')\n\n    def test_immutable_array_getitem(self):\n        self.assertEqual(self.immutable_array[0, 0], 1)\n        self.assertEqual(self.immutable_array[1, 1], 4)\n        self.assertEqual(self.immutable_array[self.i, self.j], self.immutable_array._array[self.i*2 + self.j])\n\n    def test_mutable_array_getitem(self):\n        self.assertEqual(self.mutable_array[0, 0], 1)\n        self.assertEqual(self.mutable_array[1, 1], 4)\n        self.assertEqual(self.mutable_array[self.i, self.j], self.mutable_array._array[self.i*2 + self.j])\n\n    def test_immutable_array_setitem(self):\n        with self.assertRaises(TypeError):\n            self.immutable_array[0, 0] = 5\n\n    def test_mutable_array_setitem(self):\n        self.mutable_array[0, 0] = 5\n        self.assertEqual(self.mutable_array[0, 0], 5)\n\n    def test_zeros_method(self):\n        zeros_array = ImmutableDenseNDimArray.zeros(2, 2)\n        self.assertEqual(zeros_array._array, [0, 0, 0, 0])\n\n    def test_tomatrix_method(self):\n        matrix = self.immutable_array.tomatrix()\n        self.assertEqual(matrix, Matrix([[1, 2], [3, 4]]))\n\n    def test_reshape_method(self):\n        reshaped_array = self.mutable_array.reshape(4, 1)\n        self.assertEqual(reshaped_array._array, [1, 2, 3, 4])\n        self.assertEqual(reshaped_array._shape, (4, 1))\n\n    def test_invalid_reshape_method(self):\n        with self.assertRaises(ValueError):\n            self.mutable_array.reshape(3, 3)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_402": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.http import HttpResponse, HttpResponsePermanentRedirect, HttpResponseNotFound\nfrom django.core.exceptions import PermissionDenied\nfrom django.conf import settings\nfrom django.urls import path, include, is_valid_path\nfrom django.test import RequestFactory\nfrom django.middleware.common import CommonMiddleware, BrokenLinkEmailsMiddleware\n\nclass TestCommonMiddleware(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.middleware = CommonMiddleware()\n        settings.APPEND_SLASH = True\n        settings.PREPEND_WWW = True\n        settings.DISALLOWED_USER_AGENTS = [re.compile(\"TestBot\")]\n\n    def test_denied_user_agent(self):\n        request = self.factory.get(\"/\", HTTP_USER_AGENT=\"TestBot\")\n        with self.assertRaises(PermissionDenied):\n            self.middleware.process_request(request)\n\n    def test_prepend_www(self):\n        request = self.factory.get(\"/\")\n        request.get_host = Mock(return_value=\"example.com\")\n        response = self.middleware.process_request(request)\n        self.assertEqual(response.status_code, 301)\n        self.assertEqual(response.url, \"http://www.example.com/\")\n\n    def test_should_redirect_with_slash(self):\n        request = self.factory.get(\"/test\")\n        urlconf = include([path(\"test/\", lambda request: HttpResponse())])\n        request.urlconf = urlconf\n        self.assertTrue(self.middleware.should_redirect_with_slash(request))\n\n    def test_get_full_path_with_slash(self):\n        request = self.factory.get(\"/test\")\n        new_path = self.middleware.get_full_path_with_slash(request)\n        self.assertEqual(new_path, \"/test/\")\n\n    def test_process_response_404_redirect(self):\n        request = self.factory.get(\"/test\")\n        urlconf = include([path(\"test/\", lambda request: HttpResponse())])\n        request.urlconf = urlconf\n        response = HttpResponseNotFound()\n        response.status_code = 404\n        redirect_response = self.middleware.process_response(request, response)\n        self.assertEqual(redirect_response.status_code, 301)\n        self.assertEqual(redirect_response.url, \"/test/\")\n\nclass TestBrokenLinkEmailsMiddleware(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.middleware = BrokenLinkEmailsMiddleware()\n        settings.DEBUG = False\n        settings.APPEND_SLASH = True\n        settings.IGNORABLE_404_URLS = []\n\n    @patch(\"django.middleware.common.mail_managers\")\n    def test_process_response_404_email(self, mock_mail_managers):\n        request = self.factory.get(\"/test\", HTTP_REFERER=\"http://example.com/\")\n        response = HttpResponseNotFound()\n        response.status_code = 404\n        self.middleware.process_response(request, response)\n        mock_mail_managers.assert_called_once()\n\n    def test_is_internal_request(self):\n        self.assertTrue(self.middleware.is_internal_request(\"example.com\", \"http://example.com/\"))\n        self.assertFalse(self.middleware.is_internal_request(\"example.com\", \"http://other.com/\"))\n\n    def test_is_ignorable_request(self):\n        self.assertTrue(self.middleware.is_ignorable_request(Mock(), \"/test\", \"example.com\", \"\"))\n        self.assertTrue(self.middleware.is_ignorable_request(Mock(), \"/test/\", \"example.com\", \"/test\"))\n        self.assertTrue(self.middleware.is_ignorable_request(Mock(), \"/test?q=1\", \"example.com\", \"http://other.com/\"))\n        self.assertTrue(self.middleware.is_ignorable_request(Mock(), \"/test\", \"example.com\", \"http://example.com/test\"))\n"], "sample_740": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.logistic import LogisticRegression, LogisticRegressionCV\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\n\nclass TestLogisticRegression(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, random_state=42)\n        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.X, self.y, test_size=0.2, random_state=42)\n\n    def test_logistic_regression_fit(self):\n        lr = LogisticRegression()\n        lr.fit(self.X_train, self.y_train)\n        self.assertIsInstance(lr.coef_, np.ndarray)\n        self.assertIsInstance(lr.intercept_, np.ndarray)\n\n    def test_logistic_regression_predict(self):\n        lr = LogisticRegression()\n        lr.fit(self.X_train, self.y_train)\n        y_pred = lr.predict(self.X_test)\n        self.assertIsInstance(y_pred, np.ndarray)\n\n    def test_logistic_regression_predict_proba(self):\n        lr = LogisticRegression()\n        lr.fit(self.X_train, self.y_train)\n        y_prob = lr.predict_proba(self.X_test)\n        self.assertIsInstance(y_prob, np.ndarray)\n\n    def test_logistic_regression_cv_fit(self):\n        lr_cv = LogisticRegressionCV()\n        lr_cv.fit(self.X_train, self.y_train)\n        self.assertIsInstance(lr_cv.coef_, np.ndarray)\n        self.assertIsInstance(lr_cv.intercept_, np.ndarray)\n\n    def test_logistic_regression_cv_predict(self):\n        lr_cv = LogisticRegressionCV()\n        lr_cv.fit(self.X_train, self.y_train)\n        y_pred = lr_cv.predict(self.X_test)\n        self.assertIsInstance(y_pred, np.ndarray)\n\n    def test_logistic_regression_cv_predict_proba(self):\n        lr_cv = LogisticRegressionCV()\n        lr_cv.fit(self.X_train, self.y_train)\n        y_prob = lr_cv.predict_proba(self.X_test)\n        self.assertIsInstance(y_prob, np.ndarray)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_442": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.core import signing\n\nclass TestSigningModule(unittest.TestCase):\n\n    def setUp(self):\n        self.test_key = \"test_secret_key\"\n        self.test_salt = \"test_salt\"\n        self.test_obj = {\"key\": \"value\"}\n\n    def test_b62_encode(self):\n        self.assertEqual(signing.b62_encode(1234567890), \"2mQCyqjz0\")\n\n    def test_b62_decode(self):\n        self.assertEqual(signing.b62_decode(\"2mQCyqjz0\"), 1234567890)\n\n    def test_dumps(self):\n        signed_obj = signing.dumps(self.test_obj, key=self.test_key, salt=self.test_salt)\n        self.assertIsInstance(signed_obj, str)\n\n    def test_loads(self):\n        signed_obj = signing.dumps(self.test_obj, key=self.test_key, salt=self.test_salt)\n        loaded_obj = signing.loads(signed_obj, key=self.test_key, salt=self.test_salt)\n        self.assertEqual(loaded_obj, self.test_obj)\n\n    def test_loads_with_expired_signature(self):\n        signed_obj = signing.dumps(self.test_obj, key=self.test_key, salt=self.test_salt)\n        with patch('time.time', return_value=float('inf')):\n            with self.assertRaises(signing.SignatureExpired):\n                signing.loads(signed_obj, key=self.test_key, salt=self.test_salt, max_age=0)\n\n    def test_signer_sign_unsign(self):\n        signer = signing.Signer(key=self.test_key, salt=self.test_salt)\n        signed_value = signer.sign(\"test_value\")\n        self.assertEqual(signer.unsign(signed_value), \"test_value\")\n\n    def test_signer_sign_object_unsign_object(self):\n        signer = signing.Signer(key=self.test_key, salt=self.test_salt)\n        signed_obj = signer.sign_object(self.test_obj)\n        loaded_obj = signer.unsign_object(signed_obj)\n        self.assertEqual(loaded_obj, self.test_obj)\n\n    def test_timestamp_signer_sign_unsign(self):\n        signer = signing.TimestampSigner(key=self.test_key, salt=self.test_salt)\n        signed_value = signer.sign(\"test_value\")\n        self.assertEqual(signer.unsign(signed_value), \"test_value\")\n\n    def test_timestamp_signer_with_expired_signature(self):\n        signer = signing.TimestampSigner(key=self.test_key, salt=self.test_salt)\n        signed_value = signer.sign(\"test_value\")\n        with patch('time.time', return_value=float('inf')):\n            with self.assertRaises(signing.SignatureExpired):\n                signer.unsign(signed_value, max_age=0)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_172": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom datetime import datetime, date, time, timedelta\nfrom decimal import Decimal\nfrom django.db.backends.base.operations import BaseDatabaseOperations\nfrom django.utils import timezone\nfrom django.db import NotSupportedError, transaction\n\nclass TestBaseDatabaseOperations(unittest.TestCase):\n    def setUp(self):\n        self.connection = MagicMock()\n        self.ops = BaseDatabaseOperations(self.connection)\n\n    def test_autoinc_sql(self):\n        self.assertIsNone(self.ops.autoinc_sql('table', 'column'))\n\n    def test_bulk_batch_size(self):\n        fields = ['field1', 'field2']\n        objs = [1, 2, 3]\n        self.assertEqual(self.ops.bulk_batch_size(fields, objs), len(objs))\n\n    def test_cache_key_culling_sql(self):\n        expected_sql = \"SELECT cache_key FROM %s ORDER BY cache_key LIMIT 1 OFFSET %%s\"\n        self.assertEqual(self.ops.cache_key_culling_sql(), expected_sql)\n\n    def test_unification_cast_sql(self):\n        output_field = MagicMock()\n        self.assertEqual(self.ops.unification_cast_sql(output_field), '%s')\n\n    def test_distinct_sql(self):\n        self.assertEqual(self.ops.distinct_sql(None, None), (['DISTINCT'], []))\n        with self.assertRaises(NotSupportedError):\n            self.ops.distinct_sql(['field1', 'field2'], None)\n\n    def test_fetch_returned_insert_columns(self):\n        cursor = MagicMock()\n        cursor.fetchone.return_value = 'result'\n        self.assertEqual(self.ops.fetch_returned_insert_columns(cursor, []), 'result')\n\n    def test_field_cast_sql(self):\n        self.assertEqual(self.ops.field_cast_sql('BLOB', 'GenericIPAddressField'), '%s')\n\n    def test_force_no_ordering(self):\n        self.assertEqual(self.ops.force_no_ordering(), [])\n\n    def test_for_update_sql(self):\n        self.assertEqual(self.ops.for_update_sql(), 'FOR UPDATE')\n        self.assertEqual(self.ops.for_update_sql(nowait=True), 'FOR UPDATE NOWAIT')\n        self.assertEqual(self.ops.for_update_sql(skip_locked=True), 'FOR UPDATE SKIP LOCKED')\n        self.assertEqual(self.ops.for_update_sql(nowait=True, skip_locked=True), 'FOR UPDATE NOWAIT SKIP LOCKED')\n\n    def test_limit_offset_sql(self):\n        self.assertEqual(self.ops.limit_offset_sql(10, 20), 'LIMIT 10 OFFSET 10')\n        self.assertEqual(self.ops.limit_offset_sql(None, 20), f'LIMIT {self.ops.connection.ops.no_limit_value()} OFFSET 20')\n        self.assertEqual(self.ops.limit_offset_sql(None, None), '')\n\n    # Continue writing test cases for the remaining methods...\n"], "sample_700": ["\nimport unittest\nimport unittest.mock\nimport io\nimport sys\nimport pytest\nfrom _pytest.config import Config\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.nodes import Item\nfrom _pytest.faulthandler import FaultHandlerHooks, fault_handler_stderr_key\n\nclass TestFaultHandler(unittest.TestCase):\n    @unittest.mock.patch('sys.stderr', new_callable=io.StringIO)\n    def test_pytest_configure(self, mock_stderr):\n        config = Config()\n        FaultHandlerHooks().pytest_configure(config)\n        self.assertIn(fault_handler_stderr_key, config._store)\n        self.assertEqual(mock_stderr.fileno(), config._store[fault_handler_stderr_key].fileno())\n\n    def test_pytest_unconfigure(self):\n        config = Config()\n        stderr_fd_copy = io.StringIO()\n        config._store[fault_handler_stderr_key] = stderr_fd_copy\n        FaultHandlerHooks().pytest_unconfigure(config)\n        self.assertNotIn(fault_handler_stderr_key, config._store)\n\n    def test_get_timeout_config_value(self):\n        config = Config()\n        config.addinivalue_line(\"faulthandler_timeout\", \"2.5\")\n        self.assertEqual(FaultHandlerHooks.get_timeout_config_value(config), 2.5)\n\n    @unittest.mock.patch('_pytest.faulthandler.faulthandler.dump_traceback_later')\n    @unittest.mock.patch('_pytest.faulthandler.faulthandler.cancel_dump_traceback_later')\n    def test_pytest_runtest_protocol(self, mock_cancel_dump, mock_dump):\n        config = Config()\n        config.addinivalue_line(\"faulthandler_timeout\", \"2.5\")\n        stderr = io.StringIO()\n        config._store[fault_handler_stderr_key] = stderr\n        item = unittest.mock.Mock(spec=Item, config=config)\n        with FaultHandlerHooks().pytest_runtest_protocol(item) as wrapper:\n            wrapper\n        mock_dump.assert_called_once_with(2.5, file=stderr)\n        mock_cancel_dump.assert_called_once()\n\n    @unittest.mock.patch('_pytest.faulthandler.faulthandler.cancel_dump_traceback_later')\n    def test_pytest_enter_pdb(self, mock_cancel_dump):\n        FaultHandlerHooks().pytest_enter_pdb()\n        mock_cancel_dump.assert_called_once()\n\n    @unittest.mock.patch('_pytest.faulthandler.faulthandler.cancel_dump_traceback_later')\n    def test_pytest_exception_interact(self, mock_cancel_dump):\n        FaultHandlerHooks().pytest_exception_interact()\n        mock_cancel_dump.assert_called_once()\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_428": ["\nimport unittest\nfrom django.utils.numberformat import format as nformat\nfrom decimal import Decimal\n\nclass TestNumberFormat(unittest.TestCase):\n\n    def test_format_integer(self):\n        self.assertEqual(nformat(12345, '.', grouping=3), '12,345')\n        self.assertEqual(nformat(12345, ',', grouping=3), '12.345')\n        self.assertEqual(nformat(12345, ',', grouping=0), '12345')\n\n    def test_format_float(self):\n        self.assertEqual(nformat(12345.6789, '.', decimal_pos=2), '12345.68')\n        self.assertEqual(nformat(12345.6789, ',', decimal_pos=2), '12345,68')\n\n    def test_format_decimal(self):\n        self.assertEqual(nformat(Decimal('12345.6789'), '.', decimal_pos=2), '12345.68')\n        self.assertEqual(nformat(Decimal('12345.6789'), ',', decimal_pos=2), '12345,68')\n\n    def test_format_large_numbers(self):\n        self.assertEqual(nformat(123456789123456789.123456789, '.', decimal_pos=3), '123456789123456789.123')\n        self.assertEqual(nformat(Decimal('123456789123456789.123456789'), '.', decimal_pos=3), '123456789123456789.123')\n\n    def test_format_negative_numbers(self):\n        self.assertEqual(nformat(-12345, '.', grouping=3), '-12,345')\n        self.assertEqual(nformat(-12345.6789, '.', decimal_pos=2), '-12345.68')\n        self.assertEqual(nformat(Decimal('-12345.6789'), '.', decimal_pos=2), '-12345.68')\n\n    def test_format_scientific_notation(self):\n        self.assertEqual(nformat(123456789123456789.123456789, '.', decimal_pos=3), '1.235e+17')\n        self.assertEqual(nformat(Decimal('123456789123456789.123456789'), '.', decimal_pos=3), '1.235e+17')\n\n    def test_format_none_and_empty_string(self):\n        self.assertEqual(nformat(None, '.'), None)\n        self.assertEqual(nformat('', '.'), '')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1134": ["\nimport unittest\nfrom sympy import symbols, Rational, sin, Integral, Matrix\nfrom sympy.printing.latex import latex, multiline_latex, LatexPrinter\n\nclass TestLatexPrinter(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.mu, self.r, self.tau = symbols('x y mu r tau')\n\n    def test_latex_output(self):\n        result = latex((2*self.tau)**Rational(7,2))\n        self.assertEqual(result, '8 \\\\sqrt{2} \\\\tau^{\\\\frac{7}{2}}')\n\n    def test_latex_mode(self):\n        result = latex((2*self.mu)**Rational(7,2), mode='inline')\n        self.assertEqual(result, '$8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}$')\n\n    def test_latex_fraction_options(self):\n        result = latex(3*self.x**2/self.y, fold_short_frac=True)\n        self.assertEqual(result, '3 x^{2} / y')\n\n    def test_latex_matrix_options(self):\n        result = latex(Matrix(2, 1, [self.x, self.y]), mat_str=\"array\")\n        self.assertEqual(result, '\\\\left[\\\\begin{array}{c}x\\\\\\\\y\\\\end{array}\\\\right]')\n\n    def test_multiline_latex_output(self):\n        expr = sin(self.mu*self.y) + self.r**self.tau - self.x/self.y\n        result = multiline_latex(self.x, expr)\n        expected = '\\\\begin{align*}\\n' \\\n                   'x = & \\\\sin{\\\\left(\\\\mu y \\\\right)} \\\\nonumber\\\\\\\\\\n' \\\n                   '& + r^{\\\\tau} \\\\nonumber\\\\\\\\\\n' \\\n                   '& - \\\\frac{x}{y}\\n' \\\n                   '\\\\end{align*}'\n        self.assertEqual(result, expected)\n\n    def test_custom_symbol_names(self):\n        result = latex(self.x**2, symbol_names={self.x: 'x_i'})\n        self.assertEqual(result, 'x_i^{2}')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1190": ["\nimport unittest\nfrom sympy.physics.units.unitsystem import UnitSystem\nfrom sympy.physics.units.quantities import Quantity\nfrom sympy.physics.units.definitions.dimension_definitions import Dimension, length, time\nfrom sympy.physics.units.systems.si import dimsys_SI, meter, second\n\nclass TestUnitSystem(unittest.TestCase):\n    def setUp(self):\n        self.base_units = (meter, second)\n        self.units = (meter / second,)\n        self.name = \"CustomUnitSystem\"\n        self.descr = \"A custom unit system for testing\"\n        self.dimension_system = dimsys_SI\n        self.derived_units = {Dimension(length / time): Quantity('meters_per_second', meter / second)}\n        self.unit_system = UnitSystem(self.base_units, self.units, self.name, self.descr, self.dimension_system, self.derived_units)\n\n    def test_init(self):\n        self.assertEqual(self.unit_system.name, self.name)\n        self.assertEqual(self.unit_system.descr, self.descr)\n        self.assertEqual(set(self.unit_system._units), set(self.base_units) | set(self.units))\n        self.assertEqual(set(self.unit_system._base_units), set(self.base_units))\n        self.assertEqual(self.unit_system._derived_units, self.derived_units)\n\n    def test_str(self):\n        self.assertEqual(str(self.unit_system), self.name)\n\n    def test_repr(self):\n        self.assertEqual(repr(self.unit_system), '<UnitSystem: ({}, {})>'.format(meter, second))\n\n    def test_extend(self):\n        extended_unit_system = self.unit_system.extend((Quantity('minute', 60 * second),), name='ExtendedUnitSystem')\n        self.assertEqual(extended_unit_system.name, 'ExtendedUnitSystem')\n        self.assertEqual(len(extended_unit_system._base_units), 3)\n\n    def test_get_dimensional_expr(self):\n        expr = meter * second**-1\n        self.assertEqual(self.unit_system.get_dimensional_expr(expr), 'length/time')\n\n    def test_get_units_non_prefixed(self):\n        self.assertEqual(self.unit_system.get_units_non_prefixed(), {meter, second, meter / second})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_719": ["\nimport unittest\nfrom sklearn.feature_extraction.text import strip_tags, strip_accents_unicode, strip_accents_ascii, HashingVectorizer, CountVectorizer, TfidfTransformer, TfidfVectorizer, ENGLISH_STOP_WORDS\n\nclass TestTextFunctions(unittest.TestCase):\n\n    def test_strip_tags(self):\n        text = \"<html><body><p>Test</p></body></html>\"\n        self.assertEqual(strip_tags(text), \" Test \")\n\n    def test_strip_accents_unicode(self):\n        text = \"r\u00e9sum\u00e9\"\n        self.assertEqual(strip_accents_unicode(text), \"resume\")\n\n    def test_strip_accents_ascii(self):\n        text = \"r\u00e9sum\u00e9\"\n        self.assertEqual(strip_accents_ascii(text), \"resume\")\n\n    def test_hashing_vectorizer(self):\n        vectorizer = HashingVectorizer(n_features=10)\n        documents = [\"This is a test\", \"Another test\"]\n        X = vectorizer.transform(documents)\n        self.assertEqual(X.shape, (2, 10))\n\n    def test_count_vectorizer(self):\n        vectorizer = CountVectorizer()\n        documents = [\"This is a test\", \"Another test\"]\n        X = vectorizer.fit_transform(documents)\n        self.assertEqual(X.shape, (2, 5))\n\n    def test_tfidf_transformer(self):\n        transformer = TfidfTransformer()\n        X = [[1, 1, 0], [2, 0, 1]]\n        X_tfidf = transformer.fit_transform(X)\n        self.assertEqual(X_tfidf.shape, (2, 3))\n\n    def test_tfidf_vectorizer(self):\n        vectorizer = TfidfVectorizer()\n        documents = [\"This is a test\", \"Another test\"]\n        X = vectorizer.fit_transform(documents)\n        self.assertEqual(X.shape, (2, 5))\n\n    def test_english_stop_words(self):\n        self.assertIsInstance(ENGLISH_STOP_WORDS, frozenset)\n        self.assertIn('and', ENGLISH_STOP_WORDS)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1181": ["\nimport unittest\nfrom sympy import symbols, Matrix, sin, cos, pi, Integral\nfrom sympy.printing.numpy import NumPyPrinter, SciPyPrinter\n\nclass TestNumPyPrinter(unittest.TestCase):\n\n    def setUp(self):\n        self.np_printer = NumPyPrinter()\n        self.sp_printer = SciPyPrinter()\n        self.x, self.y = symbols('x y')\n\n    def test_print_matrix(self):\n        mat = Matrix([[sin(self.x), cos(self.x)], [sin(self.y), cos(self.y)]])\n        np_code = self.np_printer.doprint(mat)\n        sp_code = self.sp_printer.doprint(mat)\n        self.assertIsInstance(np_code, str)\n        self.assertIsInstance(sp_code, str)\n\n    def test_print_integral(self):\n        integral_expr = Integral(sin(self.x), (self.x, 0, pi))\n        sp_code = self.sp_printer.doprint(integral_expr)\n        self.assertIsInstance(sp_code, str)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_96": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.core.servers.basehttp import (\n    WSGIServer, ThreadedWSGIServer, ServerHandler, WSGIRequestHandler, run\n)\nfrom django.core.handlers.wsgi import LimitedStream\nfrom django.core.wsgi import get_wsgi_application\nfrom django.core.exceptions import ImproperlyConfigured\nfrom io import BytesIO\nimport socket\nimport sys\n\nclass TestDjangoBaseHTTP(unittest.TestCase):\n    def setUp(self):\n        self.app = get_wsgi_application()\n\n    def test_WSGIServer(self):\n        server = WSGIServer(('localhost', 8000), WSGIRequestHandler)\n        self.assertIsInstance(server, socketserver.BaseServer)\n\n    def test_ThreadedWSGIServer(self):\n        server = ThreadedWSGIServer(('localhost', 8000), WSGIRequestHandler)\n        self.assertTrue(server.daemon_threads)\n\n    def test_ServerHandler(self):\n        environ = {'CONTENT_LENGTH': '10'}\n        stdin = BytesIO(b'Test Data')\n        stdout = BytesIO()\n        stderr = BytesIO()\n        handler = ServerHandler(stdin, stdout, stderr, environ)\n        self.assertIsInstance(handler.stdin, LimitedStream)\n\n    @patch('django.core.servers.basehttp.logger')\n    def test_WSGIRequestHandler_handle_error(self, mock_logger):\n        sys.exc_info = Mock(return_value=(BrokenPipeError, None, None))\n        handler = WSGIRequestHandler(None, None, None)\n        handler.handle_error()\n        mock_logger.info.assert_called_once()\n\n    @patch('django.core.servers.basehttp.WSGIRequestHandler.send_error')\n    def test_WSGIRequestHandler_parse_request_too_long(self, mock_send_error):\n        handler = WSGIRequestHandler(None, None, None)\n        handler.rfile = Mock()\n        handler.rfile.readline.return_value = 'a' * 65538\n        handler.parse_request()\n        mock_send_error.assert_called_once_with(414)\n\n    @patch('django.core.servers.basehttp.WSGIServer.set_app')\n    @patch('django.core.servers.basehttp.WSGIServer.serve_forever')\n    def test_run(self, mock_serve_forever, mock_set_app):\n        run('localhost', 8000, self.app)\n        mock_set_app.assert_called_once_with(self.app)\n        mock_serve_forever.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_863": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics.cluster import adjusted_mutual_info_score, adjusted_rand_score, completeness_score, fowlkes_mallows_score, homogeneity_score, mutual_info_score, normalized_mutual_info_score, v_measure_score\n\nclass TestClusterMetrics(unittest.TestCase):\n\n    def setUp(self):\n        self.labels_true = np.array([0, 0, 1, 1])\n        self.labels_pred = np.array([0, 0, 1, 1])\n\n    def test_adjusted_mutual_info_score(self):\n        score = adjusted_mutual_info_score(self.labels_true, self.labels_pred)\n        self.assertEqual(score, 1.0)\n\n    def test_adjusted_rand_score(self):\n        score = adjusted_rand_score(self.labels_true, self.labels_pred)\n        self.assertEqual(score, 1.0)\n\n    def test_completeness_score(self):\n        score = completeness_score(self.labels_true, self.labels_pred)\n        self.assertEqual(score, 1.0)\n\n    def test_fowlkes_mallows_score(self):\n        score = fowlkes_mallows_score(self.labels_true, self.labels_pred)\n        self.assertEqual(score, 1.0)\n\n    def test_homogeneity_score(self):\n        score = homogeneity_score(self.labels_true, self.labels_pred)\n        self.assertEqual(score, 1.0)\n\n    def test_mutual_info_score(self):\n        score = mutual_info_score(self.labels_true, self.labels_pred)\n        self.assertAlmostEqual(score, 1.0)\n\n    def test_normalized_mutual_info_score(self):\n        score = normalized_mutual_info_score(self.labels_true, self.labels_pred)\n        self.assertEqual(score, 1.0)\n\n    def test_v_measure_score(self):\n        score = v_measure_score(self.labels_true, self.labels_pred)\n        self.assertEqual(score, 1.0)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_636": ["\nimport unittest\nfrom unittest.mock import patch, mock_open\nfrom io import StringIO\nfrom pylint.checkers.similar import Similar, LinesChunk, SuccessiveLinesLimits, LineSetStartCouple, LineSet, SimilarChecker\n\nclass TestSimilar(unittest.TestCase):\n    def setUp(self):\n        self.similar = Similar()\n\n    def test_append_stream(self):\n        stream = StringIO('line1\\nline2\\nline3\\n')\n        self.similar.append_stream('test.py', stream)\n        self.assertEqual(len(self.similar.linesets), 1)\n        self.assertEqual(self.similar.linesets[0].name, 'test.py')\n        self.assertEqual(len(self.similar.linesets[0]), 3)\n\n    def test_hash_lineset(self):\n        lineset = LineSet('test.py', ['line1', 'line2', 'line3'])\n        hash_to_index, index_to_lines = hash_lineset(lineset)\n        self.assertEqual(len(hash_to_index), 1)\n        self.assertEqual(len(index_to_lines), 3)\n\n    def test_lineset_str(self):\n        lineset = LineSet('test.py', ['line1', 'line2', 'line3'])\n        self.assertEqual(str(lineset), '<Lineset for test.py>')\n\n    def test_lineset_len(self):\n        lineset = LineSet('test.py', ['line1', 'line2', 'line3'])\n        self.assertEqual(len(lineset), 3)\n\n    def test_lineset_getitem(self):\n        lineset = LineSet('test.py', ['line1', 'line2', 'line3'])\n        self.assertEqual(lineset[0].text, 'line1')\n\n    def test_lineset_lt(self):\n        lineset1 = LineSet('test1.py', ['line1', 'line2', 'line3'])\n        lineset2 = LineSet('test2.py', ['line1', 'line2', 'line3'])\n        self.assertTrue(lineset1 < lineset2)\n\n    def test_lineset_eq(self):\n        lineset1 = LineSet('test.py', ['line1', 'line2', 'line3'])\n        lineset2 = LineSet('test.py', ['line1', 'line2', 'line3'])\n        self.assertTrue(lineset1 == lineset2)\n\n    def test_lineset_stripped_lines(self):\n        lineset = LineSet('test.py', ['line1', 'line2', 'line3'], ignore_comments=True)\n        self.assertEqual(len(lineset.stripped_lines), 3)\n\n    def test_similar_checker_set_option(self):\n        similar_checker = SimilarChecker()\n        similar_checker.set_option('min-similarity-lines', 5)\n        self.assertEqual(similar_checker.min_lines, 5)\n\n    @patch('builtins.open', new_callable=mock_open, read_data='line1\\nline2\\nline3\\n')\n    def test_similar_checker_process_module(self, mock_file):\n        similar_checker = SimilarChecker()\n        similar_checker.linter = unittest.mock.Mock()\n        similar_checker.linter.current_name = 'test.py'\n        node = unittest.mock.Mock()\n        node.stream.return_value.__enter__.return_value = StringIO('line1\\nline2\\nline3\\n')\n        node.file_encoding = 'utf-8'\n        similar_checker.process_module(node)\n        self.assertEqual(len(similar_checker.linesets), 1)\n        self.assertEqual(similar_checker.linesets[0].name, 'test.py')\n\n    def test_similar_checker_close(self):\n        similar_checker = SimilarChecker()\n        similar_checker.linter = unittest.mock.Mock()\n        similar_checker.linter.stats = unittest.mock.Mock()\n        similar_checker.linesets = [LineSet('test1.py', ['line1', 'line2', 'line3']),\n                                    LineSet('test2.py', ['line1', 'line2', 'line3'])]\n        similar_checker.close()\n        self.assertEqual(similar_checker.linter.stats.nb_duplicated_lines, 6)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_500": ["\nimport unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colorbar import Colorbar, make_axes, make_axes_gridspec\nfrom matplotlib.colors import Normalize\n\nclass TestColorbar(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.data = np.random.rand(10, 10)\n        self.im = self.ax.imshow(self.data)\n\n    def test_colorbar_creation(self):\n        cbar = Colorbar(self.ax)\n        self.assertIsInstance(cbar, Colorbar)\n\n    def test_colorbar_mappable(self):\n        cbar = Colorbar(self.ax, mappable=self.im)\n        self.assertEqual(cbar.mappable, self.im)\n\n    def test_colorbar_alpha(self):\n        cbar = Colorbar(self.ax, mappable=self.im, alpha=0.5)\n        self.assertEqual(cbar.alpha, 0.5)\n\n    def test_colorbar_orientation(self):\n        cbar = Colorbar(self.ax, mappable=self.im, orientation='horizontal')\n        self.assertEqual(cbar.orientation, 'horizontal')\n\n    def test_colorbar_update_normal(self):\n        norm = Normalize(vmin=0, vmax=1)\n        cbar = Colorbar(self.ax, mappable=self.im, norm=norm)\n        new_norm = Normalize(vmin=0.2, vmax=0.8)\n        self.im.set_norm(new_norm)\n        cbar.update_normal(self.im)\n        self.assertEqual(cbar.norm, new_norm)\n\n    def test_make_axes(self):\n        cax, kw = make_axes(self.ax)\n        self.assertIsInstance(cax, plt.Axes)\n        self.assertEqual(kw['orientation'], 'vertical')\n\n    def test_make_axes_gridspec(self):\n        cax, kw = make_axes_gridspec(self.ax)\n        self.assertIsInstance(cax, plt.SubplotBase)\n        self.assertEqual(kw['orientation'], 'vertical')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_74": ["\nfrom unittest import TestCase\nfrom unittest.mock import Mock, patch\n\nfrom django.db import models\nfrom django.db.models import ForeignKey, ManyToManyField, OneToOneField\nfrom django.db.models.fields.related import resolve_relation, lazy_related_operation, RelatedField\nfrom django.core import checks\nfrom django.db.models import Q\n\nclass TestRelatedField(TestCase):\n\n    def setUp(self):\n        self.MockModel = type('MockModel', (models.Model,), {})\n        self.MockRelatedModel = type('MockRelatedModel', (models.Model,), {})\n\n    def test_resolve_relation(self):\n        self.assertEqual(resolve_relation(self.MockModel, 'self'), self.MockModel)\n        self.assertEqual(resolve_relation(self.MockModel, 'Related'), 'MockModel.Related')\n        self.assertEqual(resolve_relation(self.MockModel, self.MockRelatedModel), self.MockRelatedModel)\n\n    def test_lazy_related_operation(self):\n        mock_function = Mock()\n        lazy_related_operation(mock_function, self.MockModel, self.MockRelatedModel)\n        mock_function.assert_called_once()\n\n    def test_related_field_check(self):\n        field = ForeignKey('self', on_delete=models.CASCADE)\n        self.MockModel.field = field\n        self.MockModel._meta.default_related_name = 'default_related'\n        field.model = self.MockModel\n        field.opts = self.MockModel._meta\n        field.remote_field.model = self.MockRelatedModel\n        field.remote_field.related_name = 'related_name'\n        self.assertIsInstance(field.check(), list)\n\n    def test_get_forward_related_filter(self):\n        field = ForeignKey(self.MockRelatedModel, on_delete=models.CASCADE)\n        field.model = self.MockModel\n        field.related_fields = [(Mock(), Mock(name='related_name', attname='attname'))]\n        obj = self.MockRelatedModel(attname='value')\n        self.assertEqual(field.get_forward_related_filter(obj), {'field_name__related_name': 'value'})\n\n    def test_get_reverse_related_filter(self):\n        field = ForeignKey(self.MockRelatedModel, on_delete=models.CASCADE)\n        field.model = self.MockModel\n        field.related_fields = [(Mock(attname='attname'), Mock(name='related_name', attname='related_attname'))]\n        field.get_extra_descriptor_filter = lambda obj: {}\n        obj = self.MockModel(attname='value')\n        self.assertEqual(field.get_reverse_related_filter(obj), Q(related_attname='value'))\n\n    def test_formfield(self):\n        field = ForeignKey(self.MockRelatedModel, on_delete=models.CASCADE)\n        field.remote_field = Mock()\n        field.remote_field.get_related_field = Mock()\n        field.remote_field.limit_choices_to = Mock()\n        result = field.formfield()\n        self.assertIsNotNone(result)\n\n    def test_many_to_many_field_check(self):\n        field = ManyToManyField(self.MockRelatedModel)\n        field.model = self.MockModel\n        field.opts = self.MockModel._meta\n        field.remote_field.through = Mock()\n        field.remote_field.through._meta.auto_created = True\n        field.remote_field.through._meta.fields = []\n        self.assertIsInstance(field.check(), list)\n\n    def test_one_to_one_field_check(self):\n        field = OneToOneField(self.MockRelatedModel, on_delete=models.CASCADE)\n        field.model = self.MockModel\n        field.opts = self.MockModel._meta\n        field.remote_field.related_name = 'related_name'\n        field.remote_field.model = self.MockRelatedModel\n        self.assertIsInstance(field.check(), list)\n\n    # Add more tests for other methods as needed\n"], "sample_88": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom pathlib import Path\nfrom django.utils import autoreload\nfrom django.utils.autoreload import WatchmanUnavailable, StatReloader, WatchmanReloader, common_roots\n\nclass TestDjangoUtilsAutoreload(unittest.TestCase):\n    @patch('django.utils.autoreload.sys')\n    def test_iter_all_python_module_files(self, mock_sys):\n        mock_sys.modules = {'module1': MagicMock(), 'module2': MagicMock()}\n        mock_sys.modules['module1'].__file__ = '/path/to/module1.py'\n        mock_sys.modules['module2'].__file__ = '/path/to/module2.py'\n        result = autoreload.iter_all_python_module_files()\n        self.assertIn(Path('/path/to/module1.py'), result)\n        self.assertIn(Path('/path/to/module2.py'), result)\n\n    @patch('django.utils.autoreload.common_roots')\n    @patch('django.utils.autoreload.WatchmanReloader.check_availability')\n    def test_get_reloader(self, mock_check_availability, mock_common_roots):\n        mock_check_availability.return_value = True\n        self.assertIsInstance(autoreload.get_reloader(), WatchmanReloader)\n        mock_check_availability.side_effect = WatchmanUnavailable()\n        self.assertIsInstance(autoreload.get_reloader(), StatReloader)\n\n    def test_common_roots(self):\n        paths = [Path('/a/b/c/d'), Path('/a/b/e'), Path('/x/y/z')]\n        result = common_roots(paths)\n        self.assertEqual(result, (Path('/a/b'), Path('/x')))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_854": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.coordinate_descent import Lasso, LassoCV, ElasticNet, ElasticNetCV, MultiTaskLasso, MultiTaskElasticNet, MultiTaskElasticNetCV, MultiTaskLassoCV, lasso_path, enet_path\nfrom sklearn.datasets import make_regression\n\nclass TestCoordinateDescent(unittest.TestCase):\n\n    def setUp(self):\n        self.X, self.y = make_regression(n_features=2, random_state=0)\n        self.X_multi, self.y_multi = make_regression(n_features=2, n_targets=2, random_state=0)\n\n    def test_lasso(self):\n        lasso = Lasso(alpha=0.1)\n        lasso.fit(self.X, self.y)\n        self.assertIsInstance(lasso.coef_, np.ndarray)\n        self.assertIsInstance(lasso.intercept_, float)\n        self.assertIsInstance(lasso.predict(self.X[:1,]), np.ndarray)\n\n    def test_lasso_cv(self):\n        lasso_cv = LassoCV(cv=5, random_state=0)\n        lasso_cv.fit(self.X, self.y)\n        self.assertIsInstance(lasso_cv.alpha_, float)\n        self.assertIsInstance(lasso_cv.coef_, np.ndarray)\n        self.assertIsInstance(lasso_cv.intercept_, float)\n        self.assertIsInstance(lasso_cv.mse_path_, np.ndarray)\n        self.assertIsInstance(lasso_cv.alphas_, np.ndarray)\n\n    def test_elastic_net(self):\n        elastic_net = ElasticNet(alpha=0.1, l1_ratio=0.5)\n        elastic_net.fit(self.X, self.y)\n        self.assertIsInstance(elastic_net.coef_, np.ndarray)\n        self.assertIsInstance(elastic_net.intercept_, float)\n        self.assertIsInstance(elastic_net.predict(self.X[:1,]), np.ndarray)\n\n    def test_elastic_net_cv(self):\n        elastic_net_cv = ElasticNetCV(l1_ratio=[.1, .5, .7, .9, .95, .99, 1], cv=5, random_state=0)\n        elastic_net_cv.fit(self.X, self.y)\n        self.assertIsInstance(elastic_net_cv.alpha_, float)\n        self.assertIsInstance(elastic_net_cv.l1_ratio_, float)\n        self.assertIsInstance(elastic_net_cv.coef_, np.ndarray)\n        self.assertIsInstance(elastic_net_cv.intercept_, float)\n        self.assertIsInstance(elastic_net_cv.mse_path_, np.ndarray)\n        self.assertIsInstance(elastic_net_cv.alphas_, np.ndarray)\n\n    def test_multi_task_lasso(self):\n        multi_task_lasso = MultiTaskLasso(alpha=0.1)\n        multi_task_lasso.fit(self.X_multi, self.y_multi)\n        self.assertIsInstance(multi_task_lasso.coef_, np.ndarray)\n        self.assertIsInstance(multi_task_lasso.intercept_, np.ndarray)\n        self.assertIsInstance(multi_task_lasso.predict(self.X_multi[:1,]), np.ndarray)\n\n    def test_multi_task_elastic_net(self):\n        multi_task_elastic_net = MultiTaskElasticNet(alpha=0.1, l1_ratio=0.5)\n        multi_task_elastic_net.fit(self.X_multi, self.y_multi)\n        self.assertIsInstance(multi_task_elastic_net.coef_, np.ndarray)\n        self.assertIsInstance(multi_task_elastic_net.intercept_, np.ndarray)\n        self.assertIsInstance(multi_task_elastic_net.predict(self.X_multi[:1,]), np.ndarray)\n\n    def test_multi_task_elastic_net_cv(self):\n        multi_task_elastic_net_cv = MultiTaskElasticNetCV(l1_ratio=[.1, .5, .7, .9, .95, .99, 1], cv=5, random_state=0)\n        multi_task_elastic_net_cv.fit(self.X_multi, self.y_multi)\n        self.assertIsInstance(multi_task_elastic_net_cv.alpha_, float)\n        self.assertIsInstance(multi_task_elastic_net_cv.l1_ratio_, float)\n        self.assertIsInstance(multi_task_elastic_net_cv.coef_, np.ndarray)\n        self.assertIsInstance(multi_task_elastic_net_cv.intercept_, np.ndarray)\n        self.assertIsInstance(multi_task_elastic_net_cv.mse_path_, np.ndarray)\n        self.assertIsInstance(multi_task_elastic_net_cv.alphas_, np.ndarray)\n\n    def test_multi_task_lasso_cv(self):\n        multi_task_lasso_cv = MultiTaskLassoCV(cv=5, random_state=0)\n        multi_task_lasso_cv.fit(self.X_multi, self.y_multi)\n        self.assertIsInstance(multi_task_lasso_cv.alpha_, float)\n        self.assertIsInstance(multi_task_lasso_cv.coef_, np.ndarray)\n        self.assertIsInstance(multi_task_lasso_cv.intercept_, np.ndarray)\n        self.assertIsInstance(multi_task_lasso_cv.mse_path_, np.ndarray)\n        self.assertIsInstance(multi_task_lasso_cv.alphas_, np.ndarray)\n\n    def test_lasso_path(self):\n        alphas, coefs, _ = lasso_path(self.X, self.y)\n        self.assertIsInstance(alphas, np.ndarray)\n        self.assertIsInstance(coefs, np.ndarray)\n\n    def test_enet_path(self):\n        alphas, coefs, _ = enet_path(self.X, self.y, l1_ratio=0.5)\n        self.assertIsInstance(alphas, np.ndarray)\n        self.assertIsInstance(coefs, np.ndarray)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_696": ["\nimport pytest\nfrom unittest.mock import patch, Mock\nfrom _pytest.tmpdir import get_user, TempdirFactory, TempPathFactory, pytest_configure, tmpdir_factory, tmp_path_factory, tmpdir, tmp_path\nfrom _pytest.config import Config\nfrom _pytest.fixtures import FixtureRequest\nfrom pathlib import Path\n\n@patch('getpass.getuser')\ndef test_get_user(mock_getuser):\n    mock_getuser.return_value = 'testuser'\n    assert get_user() == 'testuser'\n\n    mock_getuser.side_effect = ImportError()\n    assert get_user() is None\n\ndef test_TempPathFactory_init():\n    factory = TempPathFactory(given_basetemp=None, trace=Mock())\n    assert factory._given_basetemp is None\n    assert factory._trace is not None\n\n    factory = TempPathFactory(given_basetemp=Path('/tmp'), trace=Mock())\n    assert factory._given_basetemp == Path('/tmp')\n\ndef test_TempPathFactory_from_config():\n    config = Config()\n    config.option.basetemp = Path('/tmp')\n    config.trace = Mock()\n    factory = TempPathFactory.from_config(config)\n    assert factory._given_basetemp == Path('/tmp')\n\ndef test_TempdirFactory_init():\n    factory = TempdirFactory(tmppath_factory=Mock())\n    assert factory._tmppath_factory is not None\n\n@patch('_pytest.tmpdir.TempPathFactory')\ndef test_pytest_configure(mock_temp_path_factory):\n    config = Config()\n    pytest_configure(config)\n    assert hasattr(config, '_tmp_path_factory')\n    assert hasattr(config, '_tmpdirhandler')\n\n@patch('_pytest.tmpdir.TempPathFactory')\ndef test_tmpdir_factory(mock_temp_path_factory):\n    request = FixtureRequest(Mock())\n    request.config._tmpdirhandler = Mock()\n    assert tmpdir_factory(request) is request.config._tmpdirhandler\n\n@patch('_pytest.tmpdir.TempPathFactory')\ndef test_tmp_path_factory(mock_temp_path_factory):\n    request = FixtureRequest(Mock())\n    request.config._tmp_path_factory = Mock()\n    assert tmp_path_factory(request) is request.config._tmp_path_factory\n\n@patch('_pytest.tmpdir.TempPathFactory')\ndef test_tmpdir(mock_temp_path_factory):\n    request = FixtureRequest(Mock())\n    factory = Mock()\n    factory.mktemp.return_value = Path('/tmp/test')\n    result = tmpdir(request, factory)\n    assert str(result) == '/tmp/test'\n\n@patch('_pytest.tmpdir.TempPathFactory')\ndef test_tmp_path(mock_temp_path_factory):\n    request = FixtureRequest(Mock())\n    factory = Mock()\n    factory.mktemp.return_value = Path('/tmp/test')\n    result = tmp_path(request, factory)\n    assert result == Path('/tmp/test')\n"], "sample_792": ["\nimport unittest\nimport numpy as np\nfrom sklearn.utils import estimator_checks\nfrom sklearn.base import BaseEstimator, ClassifierMixin, RegressorMixin\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVC\n\nclass TestEstimatorChecks(unittest.TestCase):\n    def test_set_random_state(self):\n        estimator = LinearRegression()\n        estimator_checks.set_random_state(estimator, seed=42)\n        self.assertEqual(estimator.random_state, 42)\n\n    def test_set_checking_parameters(self):\n        estimator = SVC(max_iter=1000)\n        estimator_checks.set_checking_parameters(estimator)\n        self.assertEqual(estimator.max_iter, 5)\n\n    def test_check_estimators_unfitted(self):\n        class DummyEstimator(BaseEstimator, ClassifierMixin):\n            def fit(self, X, y):\n                pass\n\n            def predict(self, X):\n                raise NotImplementedError(\"predict is not implemented\")\n\n        estimator = DummyEstimator()\n        with self.assertRaises(NotImplementedError):\n            estimator_checks.check_estimators_unfitted(\"DummyEstimator\", estimator)\n\n    def test_check_fit_score_takes_y(self):\n        class DummyEstimator(BaseEstimator, RegressorMixin):\n            def fit(self, X, y=None):\n                pass\n\n            def score(self, X, y=None):\n                pass\n\n        estimator = DummyEstimator()\n        estimator_checks.check_fit_score_takes_y(\"DummyEstimator\", estimator)\n\n    def test_check_no_attributes_set_in_init(self):\n        class DummyEstimator(BaseEstimator):\n            def __init__(self, param=None):\n                self.param = param\n\n        estimator = DummyEstimator()\n        estimator_checks.check_no_attributes_set_in_init(\"DummyEstimator\", estimator)\n\n    def test_check_outlier_corruption(self):\n        decision = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n        num_outliers = 2\n        expected_outliers = 3\n        with self.assertRaises(AssertionError):\n            estimator_checks.check_outlier_corruption(num_outliers, expected_outliers, decision)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_2": ["\nimport unittest\nimport numpy as np\nfrom astropy import units as u\nfrom astropy.nddata import NDData, StdDevUncertainty, VarianceUncertainty, InverseVariance, UnknownUncertainty\n\nclass TestNDUncertainty(unittest.TestCase):\n    def setUp(self):\n        self.data = np.array([1, 2, 3])\n        self.unit = u.m\n        self.ndd = NDData(self.data, unit=self.unit)\n\n    def test_stddev_uncertainty(self):\n        uncertainty = StdDevUncertainty([0.1, 0.2, 0.3], unit=self.unit)\n        self.ndd.uncertainty = uncertainty\n        self.assertIsInstance(self.ndd.uncertainty, StdDevUncertainty)\n        self.assertTrue(np.allclose(self.ndd.uncertainty.array, [0.1, 0.2, 0.3]))\n        self.assertEqual(self.ndd.uncertainty.unit, self.unit)\n\n    def test_variance_uncertainty(self):\n        uncertainty = VarianceUncertainty([0.01, 0.04, 0.09], unit=self.unit**2)\n        self.ndd.uncertainty = uncertainty\n        self.assertIsInstance(self.ndd.uncertainty, VarianceUncertainty)\n        self.assertTrue(np.allclose(self.ndd.uncertainty.array, [0.01, 0.04, 0.09]))\n        self.assertEqual(self.ndd.uncertainty.unit, self.unit**2)\n\n    def test_inverse_variance_uncertainty(self):\n        uncertainty = InverseVariance([100, 25, 11.11], unit=1/self.unit**2)\n        self.ndd.uncertainty = uncertainty\n        self.assertIsInstance(self.ndd.uncertainty, InverseVariance)\n        self.assertTrue(np.allclose(self.ndd.uncertainty.array, [100, 25, 11.11]))\n        self.assertEqual(self.ndd.uncertainty.unit, 1/self.unit**2)\n\n    def test_unknown_uncertainty(self):\n        uncertainty = UnknownUncertainty([0.1, 0.2, 0.3], unit=self.unit)\n        self.ndd.uncertainty = uncertainty\n        self.assertIsInstance(self.ndd.uncertainty, UnknownUncertainty)\n        self.assertTrue(np.allclose(self.ndd.uncertainty.array, [0.1, 0.2, 0.3]))\n        self.assertEqual(self.ndd.uncertainty.unit, self.unit)\n\n    def test_uncertainty_propagation_addition(self):\n        uncertainty1 = StdDevUncertainty([0.1, 0.2, 0.3], unit=self.unit)\n        uncertainty2 = StdDevUncertainty([0.2, 0.3, 0.4], unit=self.unit)\n        result = NDData(self.data, unit=self.unit, uncertainty=uncertainty1) + NDData(self.data, unit=self.unit, uncertainty=uncertainty2)\n        expected_uncertainty = np.sqrt(uncertainty1.array**2 + uncertainty2.array**2)\n        self.assertTrue(np.allclose(result.uncertainty.array, expected_uncertainty))\n\n    def test_uncertainty_propagation_subtraction(self):\n        uncertainty1 = StdDevUncertainty([0.1, 0.2, 0.3], unit=self.unit)\n        uncertainty2 = StdDevUncertainty([0.2, 0.3, 0.4], unit=self.unit)\n        result = NDData(self.data, unit=self.unit, uncertainty=uncertainty1) - NDData(self.data, unit=self.unit, uncertainty=uncertainty2)\n        expected_uncertainty = np.sqrt(uncertainty1.array**2 + uncertainty2.array**2)\n        self.assertTrue(np.allclose(result.uncertainty.array, expected_uncertainty))\n\n    def test_uncertainty_propagation_multiplication(self):\n        uncertainty1 = StdDevUncertainty([0.1, 0.2, 0.3], unit=self.unit)\n        uncertainty2 = StdDevUncertainty([0.2, 0.3, 0.4], unit=self.unit)\n        result = NDData(self.data, unit=self.unit, uncertainty=uncertainty1) * NDData(self.data, unit=self.unit, uncertainty=uncertainty2)\n        expected_uncertainty = np.sqrt((uncertainty1.array * self.data)**2 + (uncertainty2.array * self.data)**2)\n        self.assertTrue(np.allclose(result.uncertainty.array, expected_uncertainty))\n\n    def test_uncertainty_propagation_division(self):\n        uncertainty1 = StdDevUncertainty([0.1, 0.2, 0.3], unit=self.unit)\n        uncertainty2 = StdDevUncertainty([0.2, 0.3, 0.4], unit=self.unit)\n        result = NDData(self.data, unit=self.unit, uncertainty=uncertainty1) / NDData(self.data, unit=self.unit, uncertainty=uncertainty2)\n        expected_uncertainty = np.sqrt((uncertainty1.array / self.data)**2 + (uncertainty2.array / self.data)**2)\n        self.assertTrue(np.allclose(result.uncertainty.array, expected_uncertainty))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_559": ["\nimport unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\n\nclass TestAxes(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n\n    def test_plot(self):\n        x = np.linspace(0, 10, 100)\n        y = np.sin(x)\n        self.ax.plot(x, y)\n        self.assertEqual(len(self.ax.lines), 1)\n\n    def test_scatter(self):\n        x = np.random.rand(100)\n        y = np.random.rand(100)\n        self.ax.scatter(x, y)\n        self.assertEqual(len(self.ax.collections), 1)\n\n    def test_hist(self):\n        data = np.random.randn(1000)\n        self.ax.hist(data)\n        self.assertEqual(len(self.ax.patches), 10)\n\n    # More test methods for other functions in Axes class...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_681": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom types import CodeType, FrameType, TracebackType\nfrom _pytest._code.code import Code, Frame, TracebackEntry, Traceback, ExceptionInfo, FormattedExcinfo, getfslineno, filter_traceback\n\nclass TestCode(unittest.TestCase):\n\n    def test_code_init(self):\n        rawcode = MagicMock(spec=CodeType)\n        code = Code(rawcode)\n        self.assertEqual(code.filename, rawcode.co_filename)\n        self.assertEqual(code.firstlineno, rawcode.co_firstlineno - 1)\n        self.assertEqual(code.name, rawcode.co_name)\n        self.assertEqual(code.raw, rawcode)\n\n    def test_frame_init(self):\n        frame = MagicMock(spec=FrameType)\n        frame.f_code = MagicMock(spec=CodeType)\n        frame_obj = Frame(frame)\n        self.assertEqual(frame_obj.lineno, frame.f_lineno - 1)\n        self.assertEqual(frame_obj.f_globals, frame.f_globals)\n        self.assertEqual(frame_obj.f_locals, frame.f_locals)\n        self.assertEqual(frame_obj.raw, frame)\n\n    # More tests for TracebackEntry, Traceback, ExceptionInfo, FormattedExcinfo, getfslineno, filter_traceback\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_393": ["\nimport unittest\nfrom unittest.mock import patch, mock_open, MagicMock\nfrom django.core.management.commands.makemessages import Command, TranslatableFile, BuildFile\nfrom django.core.management.base import CommandError\nfrom django.core.management.utils import find_command\nfrom django.test import override_settings\n\nclass TestMakemessages(unittest.TestCase):\n    def setUp(self):\n        self.command = Command()\n\n    def test_check_programs(self):\n        with patch('django.core.management.utils.find_command', return_value=None):\n            with self.assertRaises(CommandError):\n                self.command.check_programs('test_program')\n\n        with patch('django.core.management.utils.find_command', return_value='test_program'):\n            self.assertEqual(self.command.check_programs('test_program'), None)\n\n    def test_is_valid_locale(self):\n        self.assertTrue(self.command.is_valid_locale('en'))\n        self.assertTrue(self.command.is_valid_locale('en_US'))\n        self.assertFalse(self.command.is_valid_locale('en_US_Invalid'))\n        self.assertFalse(self.command.is_valid_locale('invalidLocale'))\n\n    # Add more tests for TranslatableFile, BuildFile, and other methods as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_477": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.template.defaultfilters import *\n\nclass TestDefaultFilters(unittest.TestCase):\n\n    def test_addslashes(self):\n        self.assertEqual(addslashes('test'), 'test')\n        self.assertEqual(addslashes('te\"st'), 'te\\\\\"st')\n        self.assertEqual(addslashes(\"te'st\"), \"te\\\\'st\")\n\n    def test_capfirst(self):\n        self.assertEqual(capfirst('test'), 'Test')\n        self.assertEqual(capfirst(''), '')\n\n    def test_floatformat(self):\n        self.assertEqual(floatformat(34.23234), '34.2')\n        self.assertEqual(floatformat(34.00000), '34')\n        self.assertEqual(floatformat(34.26000, 3), '34.260')\n\n    # Add more tests for other filters...\n\n    # Mocking necessary for filters that depend on external functions or modules\n    @patch('django.utils.timesince.timesince')\n    def test_timesince_filter(self, mock_timesince):\n        mock_timesince.return_value = '4 days'\n        self.assertEqual(timesince_filter('2022-01-01'), '4 days')\n\n    # Continue adding tests for the remaining filters...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1139": ["\nimport unittest\nfrom sympy import symbols, S, I, pi, oo, Eq, And\nfrom sympy.sets.fancysets import Range, normalize_theta_set, ComplexRegion\nfrom sympy.sets.sets import Interval, Union, FiniteSet\n\nclass TestFancySets(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_range(self):\n        self.assertEqual(list(Range(3)), [0, 1, 2])\n        self.assertEqual(list(Range(10, 0, -2)), [10, 8, 6, 4, 2])\n        self.assertTrue(2 in Range(3))\n        self.assertFalse(5 in Range(3))\n        self.assertRaises(ValueError, lambda: Range(0, oo, 0))\n        self.assertRaises(ValueError, lambda: Range(self.x, self.y))\n\n    def test_normalize_theta_set(self):\n        self.assertEqual(normalize_theta_set(Interval(9*pi/2, 5*pi)), Interval(pi/2, pi))\n        self.assertEqual(normalize_theta_set(Interval(-3*pi/2, pi/2)), Interval(0, 2*pi, True, True))\n        self.assertEqual(normalize_theta_set(Interval(-4*pi, 3*pi)), Interval(0, 2*pi, True, True))\n        self.assertEqual(normalize_theta_set(FiniteSet(0, pi, 3*pi)), FiniteSet(0, pi))\n\n    def test_complex_region(self):\n        a = Interval(2, 3)\n        b = Interval(4, 6)\n        c = Interval(1, 8)\n        c1 = ComplexRegion(a*b)\n        self.assertTrue(2.5 + 4.5*I in c1)\n        self.assertFalse(2.5 + 6.5*I in c1)\n        c2 = ComplexRegion(Union(a*b, b*c))\n        self.assertTrue(2.5 + 4.5*I in c2)\n        self.assertTrue(5.5 + 4.5*I in c2)\n        r = Interval(0, 1)\n        theta = Interval(0, 2*pi)\n        c3 = ComplexRegion(r*theta, polar=True)\n        self.assertTrue(0.5 + 0.5*I in c3)\n        self.assertFalse(1 + 2*I in c3)\n        unit_disk = ComplexRegion(Interval(0, 1)*Interval(0, 2*pi), polar=True)\n        upper_half_unit_disk = ComplexRegion(Interval(0, 1)*Interval(0, pi), polar=True)\n        intersection = unit_disk.intersect(upper_half_unit_disk)\n        self.assertEqual(intersection, upper_half_unit_disk)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_520": ["\nimport unittest\nimport numpy as np\nfrom mpl_toolkits.mplot3d import art3d\n\nclass TestArt3D(unittest.TestCase):\n\n    def test_norm_angle(self):\n        self.assertEqual(art3d._norm_angle(0), 0)\n        self.assertEqual(art3d._norm_angle(180), 180)\n        self.assertEqual(art3d._norm_angle(-180), -180)\n        self.assertEqual(art3d._norm_angle(360), 0)\n        self.assertEqual(art3d._norm_angle(-360), 0)\n        self.assertEqual(art3d._norm_angle(370), 10)\n        self.assertEqual(art3d._norm_angle(-370), -10)\n\n    def test_norm_text_angle(self):\n        self.assertEqual(art3d._norm_text_angle(0), 0)\n        self.assertEqual(art3d._norm_text_angle(90), 90)\n        self.assertEqual(art3d._norm_text_angle(-90), -90)\n        self.assertEqual(art3d._norm_text_angle(180), -90)\n        self.assertEqual(art3d._norm_text_angle(-180), 90)\n        self.assertEqual(art3d._norm_text_angle(270), -90)\n        self.assertEqual(art3d._norm_text_angle(-270), 90)\n\n    def test_get_dir_vector(self):\n        np.testing.assert_array_equal(art3d.get_dir_vector('x'), np.array((1, 0, 0)))\n        np.testing.assert_array_equal(art3d.get_dir_vector('y'), np.array((0, 1, 0)))\n        np.testing.assert_array_equal(art3d.get_dir_vector('z'), np.array((0, 0, 1)))\n        np.testing.assert_array_equal(art3d.get_dir_vector(None), np.array((0, 0, 0)))\n        np.testing.assert_array_equal(art3d.get_dir_vector([1, 2, 3]), np.array([1, 2, 3]))\n\n    # Add more test functions for the rest of the art3d module\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_107": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.http import HttpRequest, HttpResponse, HttpResponseRedirect, HttpResponsePermanentRedirect, HttpResponseGone\nfrom django.views.generic import RedirectView, TemplateView, View\nfrom django.urls import reverse, NoReverseMatch\n\nclass TestContextMixin(unittest.TestCase):\n    def test_get_context_data(self):\n        view = View()\n        view.extra_context = {'test': 'extra'}\n        context = view.get_context_data(value='test')\n        self.assertEqual(context, {'view': view, 'test': 'extra', 'value': 'test'})\n\nclass TestTemplateView(unittest.TestCase):\n    def test_get(self):\n        request = HttpRequest()\n        template_view = TemplateView()\n        template_view.request = request\n        template_view.template_name = 'test_template.html'\n        response = template_view.get(request)\n        self.assertIsInstance(response, HttpResponse)\n\nclass TestRedirectView(unittest.TestCase):\n    def test_get_redirect_url(self):\n        redirect_view = RedirectView()\n        redirect_view.url = 'http://test.com/%(slug)s/'\n        url = redirect_view.get_redirect_url(slug='test-slug')\n        self.assertEqual(url, 'http://test.com/test-slug/')\n\n        redirect_view.pattern_name = 'test-pattern'\n        with patch('django.urls.reverse') as mock_reverse:\n            mock_reverse.return_value = 'http://test.com/pattern/'\n            url = redirect_view.get_redirect_url()\n            self.assertEqual(url, 'http://test.com/pattern/')\n            mock_reverse.assert_called_with('test-pattern', args=(), kwargs={})\n\n        redirect_view.url = None\n        redirect_view.pattern_name = None\n        url = redirect_view.get_redirect_url()\n        self.assertIsNone(url)\n\n    def test_get(self):\n        redirect_view = RedirectView()\n        redirect_view.get_redirect_url = Mock(return_value='http://test.com/')\n        request = HttpRequest()\n        response = redirect_view.get(request)\n        self.assertIsInstance(response, HttpResponseRedirect)\n\n        redirect_view.get_redirect_url.return_value = None\n        response = redirect_view.get(request)\n        self.assertIsInstance(response, HttpResponseGone)\n\n        redirect_view.permanent = True\n        redirect_view.get_redirect_url.return_value = 'http://test.com/'\n        response = redirect_view.get(request)\n        self.assertIsInstance(response, HttpResponsePermanentRedirect)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_988": ["\nimport unittest\nfrom sympy import S, Float, Rational, Integer, NaN, Infinity, NegativeInfinity, ComplexInfinity, Exp1, Pi, GoldenRatio, EulerGamma, Catalan, ImaginaryUnit\n\nclass TestNumbers(unittest.TestCase):\n    def test_float(self):\n        self.assertEqual(Float(3.14)._prec, 15)\n        self.assertEqual(Float(3.14, 3), Float(3.140))\n        self.assertEqual(Float('3.14'), Float(3.14))\n        self.assertTrue(Float(3.14).is_real)\n        self.assertFalse(Float(3.14).is_integer)\n        self.assertTrue(Float(3.14).is_finite)\n        self.assertTrue(Float(3.14).is_number)\n        self.assertFalse(Float(3.14).is_irrational)\n        self.assertFalse(Float(3.14).is_rational)\n        self.assertFalse(Float(3.14).is_positive)\n        self.assertFalse(Float(3.14).is_negative)\n        self.assertFalse(Float(3.14).is_zero)\n        self.assertEqual(Float(3.14).floor(), Integer(3))\n        self.assertEqual(Float(3.14).ceiling(), Integer(4))\n\n    def test_rational(self):\n        self.assertEqual(Rational(1, 2), S.Half)\n        self.assertEqual(Rational('3/4'), Rational(3, 4))\n        self.assertTrue(Rational(1, 2).is_rational)\n        self.assertFalse(Rational(1, 2).is_integer)\n        self.assertFalse(Rational(1, 2).is_irrational)\n        self.assertFalse(Rational(1, 2).is_real)\n        self.assertFalse(Rational(1, 2).is_complex)\n        self.assertFalse(Rational(1, 2).is_zero)\n        self.assertFalse(Rational(1, 2).is_positive)\n        self.assertFalse(Rational(1, 2).is_negative)\n        self.assertTrue(Rational(1, 2).is_finite)\n        self.assertTrue(Rational(1, 2).is_number)\n        self.assertEqual(Rational(1, 2).q, 2)\n        self.assertEqual(Rational(1, 2).p, 1)\n\n    def test_integer(self):\n        self.assertEqual(Integer(1), S.One)\n        self.assertEqual(Integer('123'), Integer(123))\n        self.assertTrue(Integer(1).is_integer)\n        self.assertFalse(Integer(1).is_rational)\n        self.assertFalse(Integer(1).is_irrational)\n        self.assertFalse(Integer(1).is_real)\n        self.assertFalse(Integer(1).is_complex)\n        self.assertFalse(Integer(1).is_zero)\n        self.assertTrue(Integer(1).is_positive)\n        self.assertFalse(Integer(1).is_negative)\n        self.assertTrue(Integer(1).is_finite)\n        self.assertTrue(Integer(1).is_number)\n        self.assertEqual(Integer(1).q, 1)\n        self.assertEqual(Integer(1).p, 1)\n\n    def test_nan(self):\n        self.assertTrue(NaN().is_number)\n        self.assertFalse(NaN().is_real)\n        self.assertFalse(NaN().is_rational)\n        self.assertFalse(NaN().is_irrational)\n        self.assertFalse(NaN().is_complex)\n        self.assertFalse(NaN().is_zero)\n        self.assertFalse(NaN().is_positive)\n        self.assertFalse(NaN().is_negative)\n        self.assertFalse(NaN().is_finite)\n\n    def test_infinity(self):\n        self.assertTrue(Infinity().is_number)\n        self"], "sample_1005": ["\nimport unittest\nfrom sympy import symbols, sin, cos, pi, eye, ImmutableMatrix\nfrom sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols\n\nclass TestReferenceFrame(unittest.TestCase):\n    def setUp(self):\n        self.N = ReferenceFrame('N')\n        self.A = ReferenceFrame('A')\n        self.q0, self.q1, self.q2, self.q3 = symbols('q0 q1 q2 q3')\n        self.theta = symbols('theta')\n\n    def test_init(self):\n        self.assertEqual(str(self.N), 'N')\n        self.assertEqual(self.N.name, 'N')\n\n    def test_getitem(self):\n        self.assertEqual(self.N[0], self.N.varlist[0])\n        self.assertEqual(self.N['x'], self.N.x)\n\n    def test_orient_body(self):\n        self.A.orient(self.N, 'Body', [self.q1, self.q2, self.q3], '123')\n        self.assertEqual(self.A.dcm(self.N),\n                         eye(3).subs([(cos(self.q1), 'cos(q1)'),\n                                      (sin(self.q1), 'sin(q1)'),\n                                      (cos(self.q2), 'cos(q2)'),\n                                      (sin(self.q2), 'sin(q2)'),\n                                      (cos(self.q3), 'cos(q3)'),\n                                      (sin(self.q3), 'sin(q3)')]))\n\n    def test_orient_space(self):\n        self.A.orient(self.N, 'Space', [self.q1, self.q2, self.q3], '312')\n        self.assertEqual(self.A.dcm(self.N),\n                         eye(3).subs([(cos(self.q1), 'cos(q1)'),\n                                      (sin(self.q1), 'sin(q1)'),\n                                      (cos(self.q2), 'cos(q2)'),\n                                      (sin(self.q2), 'sin(q2)'),\n                                      (cos(self.q3), 'cos(q3)'),\n                                      (sin(self.q3), 'sin(q3)')]))\n\n    def test_orient_quaternion(self):\n        self.A.orient(self.N, 'Quaternion', [self.q0, self.q1, self.q2, self.q3])\n        self.assertEqual(self.A.dcm(self.N),\n                         eye(3).subs([(self.q0**2 + self.q1**2 - self.q2**2 - self.q3**2, 'q0**2 + q1**2 - q2**2 - q3**2'),\n                                      (2*(self.q1*self.q2 - self.q0*self.q3), '2*(q1*q2 - q0*q3)'),\n                                      (2*(self.q0*self.q2 + self.q1*self.q3), '2*(q0*q2 + q1*q3)'),\n                                      (2*(self.q1*self.q2 + self.q0*self.q3), '2*(q1*q2 + q0*q3)'),\n                                      (self.q0**2 - self.q1**2 + self.q2**2 - self.q3**2, 'q0**2 - q1**2 + q2**2 - q3**2'),\n                                      (2*(self.q2*self.q3 - self.q0*self.q1), '2*(q2*q3 - q0*q1)'),\n                                      (2*(self.q0*self.q1 + self.q2*self.q3), '2*(q0*q1 + q2*q3)'),\n                                      (self.q0**2 - self.q1**2 - self.q2**2 + self.q3**2, 'q0**2 - q1**2 - q2**2 + q3**2')]))\n\n    def test_orient_axis(self):\n        self.A.orient(self.N, 'Axis', [self.theta, self.N.x])\n        self.assertEqual(self.A.dcm(self.N),\n                         eye(3).subs([(cos(self.theta), 'cos(theta)'),\n                                      (sin(self.theta), 'sin(theta)')]))\n\n    def test_orient_dcm(self):\n        dcm = ImmutableMatrix([[0, 1, 0], [0, 0, -1], [-1, 0, 0]])\n        self.A.orient(self.N, 'DCM', dcm)\n        self.assertEqual(self.A.dcm(self.N), dcm)\n\n    def test_variable_map(self):\n        self.A.orient(self.N, 'Axis', [self.theta, self.N.x])\n        self.assertEqual(self.A.variable_map(self.N),\n                         {self.A.varlist[0]: cos(self.theta)*self.N.varlist[0] - sin(self.theta)*self.N.varlist[1],\n                          self.A.varlist[1]: sin(self.theta)*self.N.varlist[0] + cos(self.theta)*self.N.varlist[1],\n                          self.A.varlist[2]: self.N.varlist[2]})\n\n    def test_ang_vel_in(self):\n        self.A.set_ang_vel(self.N, self.N.x * self.q1)\n        self.assertEqual(self.A.ang_vel_in(self.N), self.N.x * self.q1)\n\n    def test_ang_acc_in(self):\n        self.A.set_ang_acc(self.N, self.N.x * self.q1)\n        self.assertEqual(self.A.ang_acc_in(self.N), self.N.x * self.q1)\n\n    def test_orientnew(self):\n        self.A = self.N.orientnew('A', 'Axis', [self.theta, self.N.x])\n        self.assertEqual(self.A.dcm(self.N),\n                         eye(3).subs([(cos(self.theta), 'cos(theta)'),\n                                      (sin(self.theta), 'sin(theta)')]))\n\n    def test_set_ang_vel(self):\n        self.A.set_ang_vel(self.N, self.N.x * self.q1)\n        self.assertEqual(self.A.ang_vel_in(self.N), self.N.x * self.q1)\n\n    def test_set_ang_acc(self):\n        self.A.set_ang_acc(self.N, self.N.x * self.q1)\n        self.assertEqual(self.A.ang_acc_in(self.N), self.N.x * self.q1)\n\n    def test_partial_velocity(self):\n        self.A.set_ang_vel(self.N, self.q1 * self.A.x + self.q2 * self.N.y)\n        self.assertEqual(self.A.partial_velocity(self.N, self.q1), self.A.x)\n        self.assertEqual(self.A.partial_velocity(self.N, self.q1, self.q2), (self.A.x, self.N.y))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_934": ["\nimport unittest\nimport ast\nfrom sphinx.pycode import ast as sphinx_ast\n\nclass TestSphinxAST(unittest.TestCase):\n    def setUp(self):\n        self.simple_code = \"a = 1 + 2\"\n        self.complex_code = \"def foo(a: int, b: str = 'default') -> str: return a * b\"\n\n    def test_parse(self):\n        result = sphinx_ast.parse(self.simple_code)\n        self.assertIsInstance(result, ast.AST)\n\n    def test_parse_complex(self):\n        result = sphinx_ast.parse(self.complex_code)\n        self.assertIsInstance(result, ast.AST)\n\n    def test_unparse(self):\n        node = sphinx_ast.parse(self.simple_code)\n        result = sphinx_ast.unparse(node)\n        self.assertIsInstance(result, str)\n        self.assertEqual(result, self.simple_code)\n\n    def test_unparse_complex(self):\n        node = sphinx_ast.parse(self.complex_code)\n        result = sphinx_ast.unparse(node)\n        self.assertIsInstance(result, str)\n        self.assertEqual(result, self.complex_code)\n\n    def test_unparse_none(self):\n        result = sphinx_ast.unparse(None)\n        self.assertIsNone(result)\n\n    def test_unparse_string(self):\n        result = sphinx_ast.unparse(\"some string\")\n        self.assertEqual(result, \"some string\")\n\n    def test_not_implemented_error(self):\n        class DummyNode:\n            pass\n\n        with self.assertRaises(NotImplementedError):\n            sphinx_ast._UnparseVisitor().generic_visit(DummyNode())\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_225": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.contrib.admin import sites, ModelAdmin, actions\nfrom django.contrib.auth.models import User\nfrom django.test import RequestFactory\n\nclass TestAdminSite(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.site = sites.AdminSite()\n        self.model_admin = ModelAdmin\n        self.model = User\n\n    def test_register(self):\n        self.site.register(self.model, self.model_admin)\n        self.assertIn(self.model, self.site._registry)\n\n    def test_unregister(self):\n        self.site.register(self.model, self.model_admin)\n        self.site.unregister(self.model)\n        self.assertNotIn(self.model, self.site._registry)\n\n    def test_is_registered(self):\n        self.site.register(self.model, self.model_admin)\n        self.assertTrue(self.site.is_registered(self.model))\n\n    def test_add_action(self):\n        action = Mock()\n        self.site.add_action(action)\n        self.assertIn(action.__name__, self.site._actions)\n\n    def test_disable_action(self):\n        action = Mock()\n        self.site.add_action(action)\n        self.site.disable_action(action.__name__)\n        self.assertNotIn(action.__name__, self.site._actions)\n\n    def test_get_action(self):\n        action = Mock()\n        self.site.add_action(action)\n        self.assertEqual(self.site.get_action(action.__name__), action)\n\n    def test_actions(self):\n        action = Mock()\n        self.site.add_action(action)\n        self.assertIn((action.__name__, action), self.site.actions)\n\n    def test_has_permission(self):\n        request = self.factory.get('/admin')\n        request.user = User.objects.create_user(username='testuser', password='testpass', is_staff=True)\n        self.assertTrue(self.site.has_permission(request))\n\n    def test_admin_view(self):\n        view = Mock()\n        decorated_view = self.site.admin_view(view)\n        request = self.factory.get('/admin')\n        request.user = User.objects.create_user(username='testuser', password='testpass', is_staff=True)\n        response = decorated_view(request)\n        self.assertEqual(response, view.return_value)\n\n    def test_get_urls(self):\n        urls = self.site.get_urls()\n        self.assertIsInstance(urls, list)\n\n    def test_each_context(self):\n        request = self.factory.get('/admin')\n        context = self.site.each_context(request)\n        self.assertIsInstance(context, dict)\n\n    def test_password_change(self):\n        request = self.factory.get('/admin/password_change')\n        request.user = User.objects.create_user(username='testuser', password='testpass', is_staff=True)\n        response = self.site.password_change(request)\n        self.assertEqual(response.status_code, 200)\n\n    # Add more test methods for other functions as needed\n"], "sample_891": ["\nimport unittest\nimport numpy as np\nfrom scipy import sparse\nfrom sklearn.decomposition import NMF, MiniBatchNMF, non_negative_factorization\nfrom sklearn.exceptions import ConvergenceWarning\nfrom sklearn.utils.testing import assert_array_almost_equal, ignore_warnings\nimport sklearn.decomposition._nmf as nmf\n\nclass TestNMF(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 1], [2, 1], [3, 1.2], [4, 1], [5, 0.8], [6, 1]])\n\n    def test_non_negative_factorization(self):\n        W, H, n_iter = non_negative_factorization(self.X, n_components=2, init='random', random_state=0)\n        self.assertIsInstance(W, np.ndarray)\n        self.assertIsInstance(H, np.ndarray)\n        self.assertIsInstance(n_iter, int)\n\n    def test_nmf(self):\n        model = NMF(n_components=2, init='random', random_state=0)\n        W = model.fit_transform(self.X)\n        self.assertIsInstance(W, np.ndarray)\n        self.assertIsInstance(model.components_, np.ndarray)\n\n    def test_minibatch_nmf(self):\n        model = MiniBatchNMF(n_components=2, init='random', random_state=0)\n        W = model.fit_transform(self.X)\n        self.assertIsInstance(W, np.ndarray)\n        self.assertIsInstance(model.components_, np.ndarray)\n\n    def test_nmf_sparse(self):\n        X_sparse = sparse.csr_matrix(self.X)\n        model = NMF(n_components=2, init='random', random_state=0)\n        W = model.fit_transform(X_sparse)\n        self.assertIsInstance(W, np.ndarray)\n        self.assertIsInstance(model.components_, np.ndarray)\n\n    def test_nmf_convergence_warning(self):\n        model = NMF(n_components=2, init='random', random_state=0, max_iter=1)\n        with ignore_warnings(category=ConvergenceWarning):\n            W = model.fit_transform(self.X)\n\n    def test_nmf_inverse_transform(self):\n        model = NMF(n_components=2, init='random', random_state=0)\n        W = model.fit_transform(self.X)\n        X_reconstructed = model.inverse_transform(W)\n        self.assertIsInstance(X_reconstructed, np.ndarray)\n\n    def test_squared_norm(self):\n        x = np.array([1, 2, 3])\n        result = nmf.squared_norm(x)\n        self.assertEqual(result, 14)\n\n    def test_trace_dot(self):\n        X = np.array([[1, 2], [3, 4]])\n        Y = np.array([[5, 6], [7, 8]])\n        result = nmf.trace_dot(X, Y)\n        self.assertEqual(result, 32)\n\n    def test_beta_divergence(self):\n        X = np.array([[1, 2], [3, 4]])\n        W = np.array([[0.5, 0.5], [0.5, 0.5]])\n        H = np.array([[1, 1], [1, 1]])\n        result = nmf._beta_divergence(X, W, H, beta=2)\n        self.assertEqual(result, 0.0)\n\n    def test_special_sparse_dot(self):\n        W = np.array([[1, 2], [3, 4]])\n        H = np.array([[5, 6], [7, 8]])\n        X = sparse.csr_matrix([[9, 10], [11, 12]])\n        result = nmf._special_sparse_dot(W, H, X)\n        expected = np.array([[39, 54], [83, 112]])\n        assert_array_almost_equal(result.toarray(), expected)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_328": ["\nfrom django.db.models import QuerySet, Q\nfrom django.test import TestCase\nfrom .models import MyModel\n\nclass QuerySetTests(TestCase):\n    def setUp(self):\n        self.qs = MyModel.objects.all()\n\n    def test_all(self):\n        all_qs = self.qs.all()\n        self.assertIsInstance(all_qs, QuerySet)\n        self.assertNotEqual(id(self.qs), id(all_qs))\n\n    def test_filter(self):\n        filtered_qs = self.qs.filter(field1='value1')\n        self.assertIsInstance(filtered_qs, QuerySet)\n        self.assertNotEqual(id(self.qs), id(filtered_qs))\n\n    def test_exclude(self):\n        excluded_qs = self.qs.exclude(field1='value1')\n        self.assertIsInstance(excluded_qs, QuerySet)\n        self.assertNotEqual(id(self.qs), id(excluded_qs))\n\n    def test_complex_filter(self):\n        q = Q(field1='value1') | Q(field2='value2')\n        filtered_qs = self.qs.complex_filter(q)\n        self.assertIsInstance(filtered_qs, QuerySet)\n        self.assertNotEqual(id(self.qs), id(filtered_qs))\n\n    def test_union(self):\n        qs1 = MyModel.objects.filter(field1='value1')\n        qs2 = MyModel.objects.filter(field2='value2')\n        union_qs = qs1.union(qs2)\n        self.assertIsInstance(union_qs, QuerySet)\n\n    def test_intersection(self):\n        qs1 = MyModel.objects.filter(field1='value1')\n        qs2 = MyModel.objects.filter(field2='value2')\n        intersection_qs = qs1.intersection(qs2)\n        self.assertIsInstance(intersection_qs, QuerySet)\n\n    def test_difference(self):\n        qs1 = MyModel.objects.filter(field1='value1')\n        qs2 = MyModel.objects.filter(field2='value2')\n        difference_qs = qs1.difference(qs2)\n        self.assertIsInstance(difference_qs, QuerySet)\n\n    # Add more tests for other methods such as select_related, prefetch_related, annotate, etc.\n"], "sample_102": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.core.handlers.wsgi import WSGIRequest, WSGIHandler, LimitedStream, get_path_info, get_script_name\n\nclass TestLimitedStream(unittest.TestCase):\n    def test_read_limited(self):\n        stream = MagicMock()\n        stream.read.return_value = b'data'\n        ls = LimitedStream(stream, 10)\n        self.assertEqual(ls._read_limited(5), b'data')\n        self.assertEqual(ls.remaining, 5)\n\n    def test_read(self):\n        stream = MagicMock()\n        stream.read.return_value = b'data'\n        ls = LimitedStream(stream, 10)\n        self.assertEqual(ls.read(5), b'data')\n        self.assertEqual(ls.remaining, 5)\n\n    def test_readline(self):\n        stream = MagicMock()\n        stream.read.return_value = b'data\\nmore data'\n        ls = LimitedStream(stream, 20)\n        self.assertEqual(ls.readline(), b'data\\n')\n        self.assertEqual(ls.remaining, 10)\n\nclass TestWSGIRequest(unittest.TestCase):\n    def test_init(self):\n        environ = {'REQUEST_METHOD': 'GET', 'PATH_INFO': '/test/', 'wsgi.input': b''}\n        request = WSGIRequest(environ)\n        self.assertEqual(request.path, '/test')\n\n    def test_get_scheme(self):\n        environ = {'wsgi.url_scheme': 'https'}\n        request = WSGIRequest(environ)\n        self.assertEqual(request._get_scheme(), 'https')\n\n    def test_get_post(self):\n        environ = {'REQUEST_METHOD': 'POST', 'wsgi.input': b'key=value'}\n        request = WSGIRequest(environ)\n        self.assertEqual(request._get_post(), {'key': 'value'})\n\n    def test_cookies(self):\n        environ = {'HTTP_COOKIE': 'key=value'}\n        request = WSGIRequest(environ)\n        self.assertEqual(request.COOKIES, {'key': 'value'})\n\nclass TestWSGIHandler(unittest.TestCase):\n    def test_call(self):\n        environ = {'REQUEST_METHOD': 'GET', 'PATH_INFO': '/test/', 'wsgi.input': b''}\n        start_response = MagicMock()\n        handler = WSGIHandler()\n        handler.get_response = MagicMock()\n        handler(environ, start_response)\n        start_response.assert_called_once()\n\nclass TestFunctions(unittest.TestCase):\n    def test_get_path_info(self):\n        environ = {'PATH_INFO': '/test/'}\n        self.assertEqual(get_path_info(environ), '/test/')\n\n    def test_get_script_name(self):\n        environ = {'SCRIPT_NAME': '/script/'}\n        self.assertEqual(get_script_name(environ), '/script/')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_989": ["\nimport unittest\nfrom sympy.ntheory.factor_ import smoothness, smoothness_p, trailing, multiplicity, perfect_power, pollard_rho, pollard_pm1, factorint, factorrat, primefactors, divisors, divisor_count, udivisors, udivisor_count, antidivisors, antidivisor_count, core, digits, udivisor_sigma, primenu, primeomega\n\nclass TestFactorMethods(unittest.TestCase):\n\n    def test_smoothness(self):\n        self.assertEqual(smoothness(2**7 * 3**2), (3, 128))\n        self.assertEqual(smoothness(2**4 * 13), (13, 16))\n        self.assertEqual(smoothness(2), (2, 2))\n\n    def test_smoothness_p(self):\n        self.assertEqual(smoothness_p(10431, m=1), (1, [(3, (2, 2, 4)), (19, (1, 5, 5)), (61, (1, 31, 31))]))\n        self.assertEqual(smoothness_p(10431), (-1, [(3, (2, 2, 2)), (19, (1, 3, 9)), (61, (1, 5, 5))]))\n        self.assertEqual(smoothness_p(10431, power=1), (-1, [(3, (2, 2, 2)), (61, (1, 5, 5)), (19, (1, 3, 9))]))\n\n    def test_trailing(self):\n        self.assertEqual(trailing(128), 7)\n        self.assertEqual(trailing(63), 0)\n\n    def test_multiplicity(self):\n        self.assertEqual(multiplicity(5, 25), 2)\n        self.assertEqual(multiplicity(3, 81), 4)\n        self.assertEqual(multiplicity(2, 1024), 10)\n\n    def test_perfect_power(self):\n        self.assertEqual(perfect_power(16), (2, 4))\n        self.assertEqual(perfect_power(16, big=False), (4, 2))\n\n    def test_pollard_rho(self):\n        self.assertIsNotNone(pollard_rho(16843009))\n\n    def test_pollard_pm1(self):\n        self.assertIsNotNone(pollard_pm1(21477639576571, B=2000))\n\n    def test_factorint(self):\n        self.assertEqual(factorint(2000), {2: 4, 5: 3})\n        self.assertEqual(factorint(65537), {65537: 1})\n\n    def test_factorrat(self):\n        self.assertEqual(factorrat(8/9), {2: 3, 3: -2})\n        self.assertEqual(factorrat(-1/987), {-1: 1, 3: -1, 7: -1, 47: -1})\n\n    def test_primefactors(self):\n        self.assertEqual(primefactors(6), [2, 3])\n        self.assertEqual(primefactors(-5), [5])\n\n    def test_divisors(self):\n        self.assertEqual(divisors(24), [1, 2, 3, 4, 6, 8, 12, 24])\n        self.assertEqual(divisor_count(24), 8)\n\n    def test_udivisors(self):\n        self.assertEqual(udivisors(15), [1, 3, 5, 15])\n        self.assertEqual(udivisor_count(15), 4)\n\n    def test_antidivisors(self):\n        self.assertEqual(antidivisors(24), [7, 16])\n        self.assertEqual(antidivisor_count(13), 4)\n\n    def test_core(self):\n        self.assertEqual(core(24, 2), 6)\n        self.assertEqual(core(9424, 3), 1178)\n\n    def test_digits(self):\n        self.assertEqual(digits(35), [10, 3, 5])\n        self.assertEqual(digits(27, 2), [2, 1, 1, 0, 1, 1])\n\n    def test_udivisor_sigma(self):\n        self.assertEqual(udivisor_sigma(18, 0), 4)\n        self.assertEqual(udivisor_sigma(74, 1), 114)\n\n    def test_primenu(self):\n        self.assertEqual(primenu(1), 0)\n        self.assertEqual(primenu(30), 3)\n\n    def test_primeomega(self):\n        self.assertEqual(primeomega(1), 0)\n        self.assertEqual(primeomega(20), 3)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_621": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nfrom xarray.core.indexes import (\n    Index,\n    Indexes,\n    PandasIndex,\n    PandasMultiIndex,\n    _asarray_tuplesafe,\n    isel_indexes,\n    roll_indexes,\n    filter_indexes_from_coords,\n    assert_no_index_corrupted,\n)\nfrom xarray.core.variable import IndexVariable, Variable\n\nclass TestIndexes(unittest.TestCase):\n    def setUp(self):\n        self.data = np.random.rand(3, 4)\n        self.index = pd.Index(['a', 'b', 'c'])\n        self.columns = pd.Index(['d', 'e', 'f', 'g'])\n        self.variable = Variable(('x', 'y'), self.data)\n        self.index_variable = IndexVariable('x', self.index)\n        self.indexes = Indexes({'x': PandasIndex(self.index, 'x')}, {'x': self.index_variable})\n\n    def test_pandas_index(self):\n        pandas_index = PandasIndex(self.index, 'x')\n        self.assertIsInstance(pandas_index, Index)\n        self.assertEqual(pandas_index.dim, 'x')\n\n    def test_pandas_multi_index(self):\n        multi_index = pd.MultiIndex.from_product([['a', 'b'], ['c', 'd']], names=['n1', 'n2'])\n        pandas_multi_index = PandasMultiIndex(multi_index, 'z')\n        self.assertIsInstance(pandas_multi_index, Index)\n        self.assertEqual(pandas_multi_index.dim, 'z')\n\n    def test_asarray_tuplesafe(self):\n        self.assertTrue(np.array_equal(_asarray_tuplesafe((1, 2, 3)), np.array([1, 2, 3])))\n\n    def test_isel_indexes(self):\n        new_indexes, _ = isel_indexes(self.indexes, {'x': 1})\n        self.assertEqual(list(new_indexes.values())[0].index, pd.Index(['b']))\n\n    def test_roll_indexes(self):\n        new_indexes, _ = roll_indexes(self.indexes, {'x': 1})\n        self.assertEqual(list(new_indexes.values())[0].index, pd.Index(['b', 'c', 'a']))\n\n    def test_filter_indexes_from_coords(self):\n        filtered_indexes = filter_indexes_from_coords(self.indexes._indexes, {'x'})\n        self.assertEqual(filtered_indexes, self.indexes._indexes)\n\n    def test_assert_no_index_corrupted(self):\n        assert_no_index_corrupted(self.indexes, {'x'})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_476": ["\nfrom django.test import TestCase\nfrom django.core.files.base import File\nfrom django.core.files.storage import default_storage\nfrom django.db import models\nfrom django.db.models.fields.files import FieldFile, FileField, ImageField, ImageFieldFile\nfrom unittest.mock import MagicMock, patch\nfrom io import BytesIO\nfrom PIL import Image\n\nclass TestFieldFile(TestCase):\n    def setUp(self):\n        class TestModel(models.Model):\n            test_file = FileField(upload_to='test/')\n\n        self.instance = TestModel()\n        self.field = TestModel._meta.get_field('test_file')\n        self.file = FieldFile(self.instance, self.field, 'test.txt')\n\n    def test_init(self):\n        self.assertEqual(self.file.instance, self.instance)\n        self.assertEqual(self.file.field, self.field)\n        self.assertEqual(self.file.storage, self.field.storage)\n        self.assertTrue(self.file._committed)\n\n    def test_eq(self):\n        other = File(None, 'test.txt')\n        self.assertTrue(self.file == other)\n\n    def test_require_file(self):\n        with self.assertRaises(ValueError):\n            self.file._require_file()\n\n    # Add more tests for other methods as needed\n\nclass TestFileField(TestCase):\n    def setUp(self):\n        class TestModel(models.Model):\n            test_file = FileField(upload_to='test/')\n\n        self.instance = TestModel()\n        self.field = TestModel._meta.get_field('test_file')\n\n    def test_init(self):\n        self.assertEqual(self.field.storage, default_storage)\n\n    def test_generate_filename(self):\n        filename = self.field.generate_filename(self.instance, 'test.txt')\n        self.assertTrue(filename.startswith('test/'))\n\n    # Add more tests for other methods as needed\n\nclass TestImageField(TestCase):\n    def setUp(self):\n        class TestModel(models.Model):\n            test_image = ImageField(upload_to='test/')\n\n        self.instance = TestModel()\n        self.field = TestModel._meta.get_field('test_image')\n        self.image = Image.new('RGB', (100, 100))\n        self.image_file = BytesIO()\n        self.image.save(self.image_file, 'JPEG')\n        self.image_file.seek(0)\n        self.image_field_file = ImageFieldFile(self.image_file, self.instance, self.field, 'test.jpg')\n\n    def test_init(self):\n        self.assertIsInstance(self.field, FileField)\n\n    def test_update_dimension_fields(self):\n        self.field.update_dimension_fields(self.instance)\n        self.assertEqual(self.instance.test_image.width, 100)\n        self.assertEqual(self.instance.test_image.height, 100)\n\n    # Add more tests for other methods as needed\n"], "sample_215": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.views.debug import (\n    CallableSettingWrapper,\n    ExceptionReporter,\n    SafeExceptionReporterFilter,\n    technical_404_response,\n    technical_500_response,\n)\n\nclass TestDebugViews(unittest.TestCase):\n    def setUp(self):\n        self.mock_request = MagicMock()\n        self.mock_exc_type = MagicMock()\n        self.mock_exc_value = MagicMock()\n        self.mock_tb = MagicMock()\n\n    def test_CallableSettingWrapper(self):\n        wrapper = CallableSettingWrapper(lambda: 'test')\n        self.assertEqual(repr(wrapper), \"<function <lambda> at 0x...>\")\n\n    def test_ExceptionReporter(self):\n        reporter = ExceptionReporter(self.mock_request, self.mock_exc_type, self.mock_exc_value, self.mock_tb)\n        self.assertIsNotNone(reporter)\n\n    def test_SafeExceptionReporterFilter(self):\n        filter = SafeExceptionReporterFilter()\n        self.assertEqual(filter.cleanse_setting('SECRET_KEY', 'secret'), filter.cleansed_substitute)\n\n    @patch('django.views.debug.HttpResponseNotFound')\n    def test_technical_404_response(self, mock_HttpResponseNotFound):\n        exception = MagicMock()\n        exception.args = [{'path': '/test-path/'}]\n        technical_404_response(self.mock_request, exception)\n        mock_HttpResponseNotFound.assert_called()\n\n    @patch('django.views.debug.HttpResponse')\n    def test_technical_500_response(self, mock_HttpResponse):\n        technical_500_response(self.mock_request, self.mock_exc_type, self.mock_exc_value, self.mock_tb)\n        mock_HttpResponse.assert_called()\n"], "sample_708": ["\nimport unittest\nfrom _pytest._code.source import Source, deindent, findsource, getstatementrange_ast\n\nclass TestSource(unittest.TestCase):\n    def setUp(self):\n        self.source_code = \"def test_func():\\n    print('Hello, World!')\"\n        self.source_obj = Source(self.source_code)\n\n    def test_init_with_str(self):\n        self.assertEqual(self.source_obj.lines, deindent(self.source_code.split(\"\\n\")))\n\n    def test_eq(self):\n        self.assertEqual(self.source_obj, Source(self.source_code))\n        self.assertNotEqual(self.source_obj, Source(\"print('Hello, World!')\"))\n\n    def test_getitem(self):\n        self.assertEqual(self.source_obj[0], \"def test_func():\")\n        self.assertEqual(str(self.source_obj[0:1]), \"def test_func():\")\n\n    def test_iter(self):\n        self.assertEqual(list(iter(self.source_obj)), self.source_obj.lines)\n\n    def test_len(self):\n        self.assertEqual(len(self.source_obj), 2)\n\n    def test_strip(self):\n        source_stripped = self.source_obj.strip()\n        self.assertEqual(source_stripped.lines, self.source_obj.lines)\n\n    def test_indent(self):\n        source_indented = self.source_obj.indent()\n        self.assertEqual(source_indented.lines, [\"    \" + line for line in self.source_obj.lines])\n\n    def test_getstatement(self):\n        self.assertEqual(str(self.source_obj.getstatement(0)), \"def test_func():\\n    print('Hello, World!')\")\n\n    def test_getstatementrange(self):\n        start, end = self.source_obj.getstatementrange(0)\n        self.assertEqual(start, 0)\n        self.assertEqual(end, 2)\n\n    def test_deindent(self):\n        indented_code = \"    \" + self.source_code\n        indented_source_obj = Source(indented_code)\n        deindented_source_obj = indented_source_obj.deindent()\n        self.assertEqual(deindented_source_obj.lines, self.source_obj.lines)\n\n    def test_str(self):\n        self.assertEqual(str(self.source_obj), self.source_code)\n\n    def test_findsource(self):\n        def test_func():\n            pass\n        source, lineno = findsource(test_func)\n        self.assertIsNotNone(source)\n        self.assertIsInstance(lineno, int)\n\n    def test_getstatementrange_ast(self):\n        astnode, start, end = getstatementrange_ast(0, self.source_obj)\n        self.assertEqual(start, 0)\n        self.assertEqual(end, 2)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_135": ["\nimport unittest\nfrom django.db.migrations.serializer import Serializer, BaseSimpleSerializer, FrozensetSerializer, SequenceSerializer, SetSerializer, TupleSerializer, DictionarySerializer, DecimalSerializer, FunctoolsPartialSerializer, FunctionTypeSerializer, IterableSerializer, RegexSerializer, UUIDSerializer\nfrom decimal import Decimal\nimport uuid\nimport re\n\nclass TestSerializer(unittest.TestCase):\n    def test_base_simple_serializer(self):\n        serializer = BaseSimpleSerializer(123)\n        self.assertEqual(serializer.serialize(), ('123', set()))\n\n    def test_frozenset_serializer(self):\n        serializer = FrozensetSerializer(frozenset([1, 2, 3]))\n        self.assertEqual(serializer.serialize(), ('frozenset([1, 2, 3])', set()))\n\n    # Add more tests for other serializers like SequenceSerializer, SetSerializer, TupleSerializer, DictionarySerializer, etc.\n\n    def test_decimal_serializer(self):\n        serializer = DecimalSerializer(Decimal('123.456'))\n        self.assertEqual(serializer.serialize(), ('Decimal(\\'123.456\\')', {'from decimal import Decimal'}))\n\n    def test_functools_partial_serializer(self):\n        from functools import partial\n        def test_func(a, b):\n            return a + b\n\n        serializer = FunctoolsPartialSerializer(partial(test_func, 1))\n        self.assertEqual(serializer.serialize(), ('functools.partial(test_func, *(1,), **{})', {'import functools'}))\n\n    # Add more tests for other serializers like FunctionTypeSerializer, IterableSerializer, RegexSerializer, UUIDSerializer, etc.\n\n    def test_uuid_serializer(self):\n        value = uuid.UUID('123e4567-e89b-12d3-a456-426614174000')\n        serializer = UUIDSerializer(value)\n        self.assertEqual(serializer.serialize(), ('uuid.UUID(\\'123e4567-e89b-12d3-a456-426614174000\\')', {'import uuid'}))\n\n    # Add more tests for other functionalities like registering and unregistering serializers, serializer_factory function, etc.\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_249": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom io import StringIO\n\nfrom django.apps import apps\nfrom django.conf import settings\nfrom django.core import serializers\nfrom django.db import connections, router\nfrom django.db.transaction import atomic\n\nfrom django.db.backends.base.creation import (\n    TEST_DATABASE_PREFIX,\n    BaseDatabaseCreation,\n)\n\nclass TestBaseDatabaseCreation(unittest.TestCase):\n    def setUp(self):\n        self.connection = connections['default']\n        self.db_creation = BaseDatabaseCreation(self.connection)\n\n    @patch('django.db.backends.base.creation.BaseDatabaseCreation._create_test_db')\n    @patch('django.core.management.call_command')\n    def test_create_test_db(self, mock_call_command, mock_create_test_db):\n        mock_create_test_db.return_value = 'test_database_name'\n        result = self.db_creation.create_test_db()\n        self.assertEqual(result, 'test_database_name')\n\n    @patch('django.db.backends.base.creation.BaseDatabaseCreation.serialize_db_to_string')\n    def test_serialize_db_to_string(self, mock_serialize_db_to_string):\n        mock_serialize_db_to_string.return_value = '{}'\n        result = self.db_creation.serialize_db_to_string()\n        self.assertEqual(result, '{}')\n\n    @patch('django.db.backends.base.creation.serializers.deserialize')\n    @patch('django.db.backends.base.creation.atomic')\n    def test_deserialize_db_from_string(self, mock_atomic, mock_deserialize):\n        data = '{}'\n        self.db_creation.deserialize_db_from_string(data)\n\n    @patch('django.db.backends.base.creation.BaseDatabaseCreation._clone_test_db')\n    def test_clone_test_db(self, mock_clone_test_db):\n        result = self.db_creation.clone_test_db('suffix')\n        self.assertEqual(result, None)\n\n    @patch('django.db.backends.base.creation.BaseDatabaseCreation._destroy_test_db')\n    def test_destroy_test_db(self, mock_destroy_test_db):\n        result = self.db_creation.destroy_test_db()\n        self.assertEqual(result, None)\n\n    def test_test_db_signature(self):\n        result = self.db_creation.test_db_signature()\n        self.assertEqual(len(result), 4)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1192": ["\nimport unittest\nfrom sympy import symbols, Dummy, Wild, Symbol, Function, S\nfrom sympy.core.symbol import disambiguate, uniquely_named_symbol\nfrom sympy.core.power import Pow\n\nclass TestSymbolMethods(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n        self.a, self.b, self.c = symbols('a b c', integer=True)\n\n    def test_symbol_creation(self):\n        self.assertEqual(str(self.x), 'x')\n        self.assertEqual(str(self.a), 'a')\n        self.assertTrue(self.a.is_integer)\n\n    def test_dummy_symbol(self):\n        d1 = Dummy()\n        d2 = Dummy()\n        self.assertNotEqual(d1, d2)\n\n    def test_wild_symbol(self):\n        w = Wild('w', exclude=[self.x, self.y])\n        self.assertIsNone(w.matches(2 * self.x + 3 * self.y))\n\n    def test_disambiguate(self):\n        tup = Symbol('_x'), Dummy('x'), Dummy('x')\n        self.assertEqual(disambiguate(*tup), (Symbol('x_2'), Symbol('x'), Symbol('x_1')))\n\n    def test_uniquely_named_symbol(self):\n        sym = Symbol('foo', real=True)\n        self.assertEqual(uniquely_named_symbol('x', sym), Symbol('x'))\n        self.assertEqual(uniquely_named_symbol('foo', sym), sym)\n\n    def test_symbol_subs(self):\n        self.assertEqual(self.x.subs(self.x, self.y), self.y)\n        self.assertEqual((self.x**2).subs(self.x, self.y), self.y**2)\n\n    def test_symbol_as_real_imag(self):\n        self.assertEqual(self.x.as_real_imag(), (self.x, 0))\n\n    def test_symbol_is_constant(self):\n        self.assertTrue(self.x.is_constant(self.y))\n        self.assertFalse(self.x.is_constant())\n\n    def test_symbol_as_dummy(self):\n        self.assertTrue(isinstance(self.x.as_dummy(), Dummy))\n\n    def test_symbol_sort_key(self):\n        self.assertLess(self.x.sort_key(), self.y.sort_key())\n\n    def test_symbol_refine(self):\n        self.assertEqual(self.x.refine({}), self.x)\n\n    def test_symbol_diff_wrt(self):\n        self.assertTrue(self.x._diff_wrt)\n\n    def test_symbol_hashable_content(self):\n        self.assertEqual(self.x._hashable_content(), ('x',))\n\n    def test_symbol_as_set(self):\n        self.assertEqual(self.x.as_set(), S.UniversalSet)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1112": ["\nimport unittest\nfrom sympy.ntheory import count_digits, digits, is_palindromic\n\nclass TestDigits(unittest.TestCase):\n    def test_digits(self):\n        self.assertEqual(digits(35), [10, 3, 5])\n        self.assertEqual(digits(-35), [-10, 3, 5])\n        self.assertEqual(digits(27, b=2), [2, 1, 1, 0, 1, 1])\n        self.assertEqual(digits(35, digits=4), [10, 0, 0, 3, 5])\n        with self.assertRaises(ValueError):\n            digits(35, b=1)\n        with self.assertRaises(ValueError):\n            digits(35, digits=2)\n\n    def test_count_digits(self):\n        self.assertEqual(count_digits(1111339), {1: 4, 3: 2, 9: 1})\n        self.assertEqual(count_digits(0xFA, 16), {10: 1, 15: 1})\n\n    def test_is_palindromic(self):\n        self.assertTrue(is_palindromic(1111))\n        self.assertFalse(is_palindromic(12321, 8))\n        self.assertTrue(is_palindromic(121, 8))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1001": ["\nimport unittest\nfrom sympy import symbols, Matrix, MatrixSymbol, Piecewise, pi, sin, cos, Eq, IndexedBase, Idx\nfrom sympy.printing.octave import octave_code\n\nclass TestOctaveCodePrinter(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.tau = symbols(\"x y tau\")\n        self.n = symbols('n', integer=True, positive=True)\n        self.A = MatrixSymbol('A', self.n, self.n)\n        self.mat = Matrix([[self.x**2, sin(self.x), self.tau]])\n        self.pw = Piecewise((self.x + 1, self.x > 0), (self.x, True))\n        self.len_y = 5\n        self.y = IndexedBase('y', shape=(self.len_y,))\n        self.t = IndexedBase('t', shape=(self.len_y,))\n        self.Dy = IndexedBase('Dy', shape=(self.len_y-1,))\n        self.i = Idx('i', self.len_y-1)\n\n    def test_simple_expression(self):\n        self.assertEqual(octave_code(sin(self.x) + cos(self.y)), 'sin(x) + cos(y)')\n\n    def test_matrix_expression(self):\n        self.assertEqual(octave_code(self.mat, assign_to='A'), 'A = [x.^2 sin(x) tau];')\n\n    def test_piecewise_expression(self):\n        self.assertEqual(octave_code(self.pw, assign_to=self.tau), 'tau = ((x > 0).*(x + 1) + (~(x > 0)).*(x));')\n\n    def test_indexed_expression(self):\n        e = Eq(self.Dy[self.i], (self.y[self.i+1]-self.y[self.i])/(self.t[self.i+1]-self.t[self.i]))\n        self.assertEqual(octave_code(e.rhs, assign_to=e.lhs, contract=False), 'Dy(i) = (y(i + 1) - y(i))./(t(i + 1) - t(i));')\n\n    def test_matpow_expression(self):\n        self.assertEqual(octave_code(self.A**2), 'A^2')\n\n    def test_pi_expression(self):\n        self.assertEqual(octave_code(pi), 'pi')\n\n    # Add more tests as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_999": ["\nimport unittest\nfrom sympy import Symbol, Rational, pi, sin, Integral, Matrix, log\nfrom sympy.printing.latex import latex, translate, greek_letters_set, tex_greek_dictionary\n\nclass TestLatexPrinter(unittest.TestCase):\n    def test_latex(self):\n        x = Symbol('x')\n        y = Symbol('y')\n        tau = Symbol('tau')\n        r = Symbol('r')\n\n        self.assertEqual(latex((2*tau)**Rational(7,2)), '8 \\\\sqrt{2} \\\\tau^{\\\\frac{7}{2}}')\n        self.assertEqual(latex((2*tau)**Rational(7,2), fold_frac_powers=True), '8 \\\\sqrt{2} \\\\tau^{7/2}')\n        self.assertEqual(latex((2*tau)**sin(Rational(7,2)), fold_func_brackets=True),\n                         '\\\\left(2 \\\\tau\\\\right)^{\\\\sin {\\\\frac{7}{2}}}')\n        self.assertEqual(latex(3*x**2/y, fold_short_frac=True), '3 x^{2} / y')\n        self.assertEqual(latex(Integral(r, r)/2/pi, long_frac_ratio=0), '\\\\frac{1}{2 \\\\pi} \\\\int r\\, dr')\n        self.assertEqual(latex(Matrix(2, 1, [x, y]), mat_delim=\"(\"), '\\\\left(\\\\begin{matrix}x\\\\\\\\y\\\\end{matrix}\\\\right)')\n        self.assertEqual(latex(x**2, symbol_names={x:'x_i'}), 'x_i^{2}')\n        self.assertEqual(latex(log(10), ln_notation=True), '\\\\ln{\\\\left (10 \\\\right )}')\n\n    def test_translate(self):\n        self.assertEqual(translate('alphahatdotprime'), \"{\\\\dot{\\\\hat{\\\\alpha}}}'\")\n        self.assertEqual(translate('beta'), '\\\\beta')\n        self.assertEqual(translate('omega'), '\\\\omega')\n        self.assertEqual(translate('invalid'), 'invalid')\n\n    def test_greek_letters_set(self):\n        self.assertIn('alpha', greek_letters_set)\n        self.assertNotIn('x', greek_letters_set)\n\n    def test_tex_greek_dictionary(self):\n        self.assertEqual(tex_greek_dictionary['Alpha'], 'A')\n        self.assertEqual(tex_greek_dictionary['Gamma'], '\\\\Gamma')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_870": ["\nimport unittest\nimport numpy as np\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import RBF, ConstantKernel\n\nclass TestGaussianProcessRegressor(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[0], [1], [2], [3], [4]])\n        self.y = np.array([0, 1, 2, 3, 4])\n        self.kernel = ConstantKernel(1.0, constant_value_bounds=\"fixed\") * RBF(1.0, length_scale_bounds=\"fixed\")\n\n    def test_fit_predict(self):\n        gpr = GaussianProcessRegressor(kernel=self.kernel, random_state=0)\n        gpr.fit(self.X, self.y)\n        y_pred = gpr.predict(self.X)\n        self.assertEqual(len(y_pred), len(self.y))\n\n    def test_fit_predict_multioutput(self):\n        y_multi = np.column_stack((self.y, self.y))\n        gpr = GaussianProcessRegressor(kernel=self.kernel, random_state=0)\n        gpr.fit(self.X, y_multi)\n        y_pred_multi = gpr.predict(self.X)\n        self.assertEqual(y_pred_multi.shape, y_multi.shape)\n\n    def test_predict_unfitted(self):\n        gpr = GaussianProcessRegressor()\n        y_pred_unfitted = gpr.predict(self.X)\n        self.assertEqual(len(y_pred_unfitted), len(self.X))\n\n    def test_sample_y(self):\n        gpr = GaussianProcessRegressor(kernel=self.kernel, random_state=0)\n        gpr.fit(self.X, self.y)\n        samples = gpr.sample_y(self.X, n_samples=2)\n        self.assertEqual(samples.shape, (len(self.X), 2))\n\n    def test_log_marginal_likelihood(self):\n        gpr = GaussianProcessRegressor(kernel=self.kernel, random_state=0)\n        gpr.fit(self.X, self.y)\n        lml = gpr.log_marginal_likelihood()\n        self.assertIsInstance(lml, float)\n\n    def test_log_marginal_likelihood_gradient(self):\n        gpr = GaussianProcessRegressor(kernel=self.kernel, random_state=0)\n        gpr.fit(self.X, self.y)\n        lml, grad = gpr.log_marginal_likelihood(eval_gradient=True)\n        self.assertIsInstance(lml, float)\n        self.assertEqual(len(grad), gpr.kernel_.n_dims)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1186": ["\nimport pytest\nfrom sympy import ImmutableDenseNDimArray, MutableDenseNDimArray, ArrayKind, NumberKind, UndefinedKind, S, Matrix\nfrom sympy.abc import x, y\nfrom sympy.functions.elementary.trigonometric import sin, cos\nfrom sympy.testing.pytest import raises\n\ndef test_ArrayKind():\n    assert ArrayKind(NumberKind).element_kind == NumberKind\n    assert ArrayKind().element_kind == NumberKind\n    assert ArrayKind(NumberKind) != ArrayKind(UndefinedKind)\n\ndef test_NDimArray_init():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert isinstance(a, ImmutableDenseNDimArray)\n\ndef test_NDimArray_shape():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.shape == (2, 2)\n\ndef test_NDimArray_rank():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.rank() == 2\n\ndef test_NDimArray_diff():\n    M = ImmutableDenseNDimArray([[x, y], [1, x*y]])\n    assert M.diff(x) == ImmutableDenseNDimArray([[1, 0], [0, y]])\n\ndef test_NDimArray_applyfunc():\n    m = ImmutableDenseNDimArray([i*2+j for i in range(2) for j in range(2)], (2, 2))\n    assert m.applyfunc(lambda i: 2*i) == ImmutableDenseNDimArray([[0, 2], [4, 6]])\n\ndef test_NDimArray_tolist():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.tolist() == [[1, 2], [3, 4]]\n\ndef test_NDimArray_add():\n    a = MutableDenseNDimArray([1, 1, 1, 1], (2, 2))\n    b = MutableDenseNDimArray([4, 4, 4, 4], (2, 2))\n    assert a + b == MutableDenseNDimArray([5, 5, 5, 5], (2, 2))\n\ndef test_NDimArray_sub():\n    a = MutableDenseNDimArray([1, 1, 1, 1], (2, 2))\n    b = MutableDenseNDimArray([4, 4, 4, 4], (2, 2))\n    assert a - b == MutableDenseNDimArray([-3, -3, -3, -3], (2, 2))\n\ndef test_NDimArray_mul():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a * 2 == MutableDenseNDimArray([2, 4, 6, 8], (2, 2))\n\ndef test_NDimArray_div():\n    a = MutableDenseNDimArray([2, 4, 6, 8], (2, 2))\n    assert a / 2 == MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n\ndef test_NDimArray_neg():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert -a == MutableDenseNDimArray([-1, -2, -3, -4], (2, 2))\n\ndef test_NDimArray_eq():\n    a = MutableDenseNDimArray.zeros(2, 3)\n    b = MutableDenseNDimArray.zeros(2, 3)\n    assert a == b\n    a[0, 0] = 1\n    b[0, 0] = 2\n    assert a != b\n\ndef test_NDimArray_transpose():\n    a = MutableDenseNDimArray([[1, 2], [3, 4]])\n    assert a.transpose() == MutableDenseNDimArray([[1, 3], [2, 4]])\n\ndef test_NDimArray_conjugate():\n    a = MutableDenseNDimArray([1 + 2j, 3 + 4j])\n    assert a.conjugate() == MutableDenseNDimArray([1 - 2j, 3 - 4j])\n\ndef test_NDimArray_adjoint():\n    a = MutableDenseNDimArray([[1 + 2j, 3 + 4j], [5 + 6j, 7 + 8j]])\n    assert a.adjoint() == MutableDenseNDimArray([[1 - 2j, 5 - 6j], [3 - 4j, 7 - 8j]])\n\ndef test_NDimArray_getitem():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a[0, 0] == 1\n    assert a[0] == MutableDenseNDimArray([1, 2], (2,))\n\ndef test_NDimArray_iter():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert list(iter(a)) == [1, 2, 3, 4]\n\ndef test_NDimArray_from_matrix():\n    a = Matrix([[1, 2], [3, 4]])\n    b = MutableDenseNDimArray(a)\n    assert b == MutableDenseNDimArray([[1, 2], [3, 4]])\n\ndef test_NDimArray_exceptions():\n    a = MutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    with pytest.raises(ValueError):\n        a[2, 0]\n    with pytest.raises(ValueError):\n        a[0, 2]\n    with pytest.raises(ValueError):\n        a + MutableDenseNDimArray([1, 2], (2,))\n    with pytest.raises(ValueError):\n        a - MutableDenseNDimArray([1, 2], (2,))\n    with pytest.raises(ValueError):\n        a / 0\n    with pytest.raises(NotImplementedError):\n        a.as_mutable()\n"], "sample_365": ["\nimport unittest\nimport datetime\nfrom django.utils.dateparse import (\n    parse_date,\n    parse_datetime,\n    parse_duration,\n    parse_time,\n)\nfrom django.utils.timezone import get_fixed_timezone, utc\n\nclass TestDateParse(unittest.TestCase):\n    def test_parse_date(self):\n        self.assertEqual(parse_date('2022-01-01'), datetime.date(2022, 1, 1))\n        self.assertIsNone(parse_date('2022-02-30'))\n        self.assertIsNone(parse_date('2022-13-01'))\n        self.assertIsNone(parse_date('2022-01-01T12:00:00'))\n\n    def test_parse_time(self):\n        self.assertEqual(parse_time('12:00'), datetime.time(12, 0))\n        self.assertEqual(parse_time('12:00:00.123456'), datetime.time(12, 0, 0, 123456))\n        self.assertIsNone(parse_time('12:00:00+00:00'))\n        self.assertIsNone(parse_time('12:60:00'))\n        self.assertIsNone(parse_time('25:00:00'))\n\n    def test_parse_datetime(self):\n        self.assertEqual(parse_datetime('2022-01-01T12:00:00'), datetime.datetime(2022, 1, 1, 12, 0, 0))\n        self.assertEqual(parse_datetime('2022-01-01T12:00:00Z'), datetime.datetime(2022, 1, 1, 12, 0, 0, tzinfo=utc))\n        self.assertEqual(parse_datetime('2022-01-01T12:00:00+03:00'), datetime.datetime(2022, 1, 1, 12, 0, 0, tzinfo=get_fixed_timezone(180)))\n        self.assertIsNone(parse_datetime('2022-02-30T12:00:00'))\n        self.assertIsNone(parse_datetime('2022-01-01 12:00:00'))\n\n    def test_parse_duration(self):\n        self.assertEqual(parse_duration('1 12:00:00.123456'), datetime.timedelta(days=1, hours=12, microseconds=123456))\n        self.assertEqual(parse_duration('-1 12:00:00.123456'), datetime.timedelta(days=-2, hours=11, microseconds=876544))\n        self.assertEqual(parse_duration('P1DT12H0M0.123456S'), datetime.timedelta(days=1, hours=12, microseconds=123456))\n        self.assertEqual(parse_duration('P1DT12H0M0.123456S'), datetime.timedelta(days=1, hours=12, microseconds=123456))\n        self.assertEqual(parse_duration('-P1DT12H0M0.123456S'), datetime.timedelta(days=-2, hours=11, microseconds=876544))\n        self.assertEqual(parse_duration('3 days 12:00:00.123456'), datetime.timedelta(days=3, hours=12, microseconds=123456))\n        self.assertIsNone(parse_duration('1 day 12:60:00'))\n        self.assertIsNone(parse_duration('1 day 25:00:00'))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_251": ["\nfrom decimal import Decimal\nfrom django.core.exceptions import FieldDoesNotExist, FieldError\nfrom django.db import connection\nfrom django.db.models import (\n    BooleanField, Case, Count, DateTimeField, Exists, ExpressionWrapper, F, FloatField,\n    Func, IntegerField, Max, NullBooleanField, OuterRef, Q, Subquery, Sum, Value, When,\n)\nfrom django.db.models.expressions import RawSQL\nfrom django.db.models.functions import Coalesce, ExtractYear, Length, Lower\nfrom django.test import TestCase, skipUnlessDBFeature\nfrom .models import (\n    Author, Book, Company, DepartmentStore, Employee, Publisher, Store, Ticket,\n)\nfrom unittest import expectedFailure\n\nclass TestExpressions(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        # Set up data for the whole TestCase\n        Author.objects.create(name=\"Author 1\")\n        Author.objects.create(name=\"Author 2\")\n        Book.objects.create(name=\"Book 1\", author=Author.objects.get(name=\"Author 1\"))\n        Book.objects.create(name=\"Book 2\", author=Author.objects.get(name=\"Author 2\"))\n\n    def test_expression_repr(self):\n        f = F('name')\n        self.assertEqual(repr(f), \"F(name)\")\n\n    def test_value_as_sql(self):\n        v = Value('test')\n        self.assertEqual(v.as_sql(connection.cursor(), connection))\n\n    def test_raw_sql_as_sql(self):\n        raw = RawSQL(\"SELECT * FROM mytable\", [])\n        self.assertEqual(raw.as_sql(connection.cursor(), connection))\n\n    def test_expression_list_as_sql(self):\n        expr_list = ExpressionList(F('name'), F('author'))\n        self.assertEqual(expr_list.as_sql(connection.cursor(), connection))\n\n    def test_expression_wrapper_as_sql(self):\n        wrapper = ExpressionWrapper(F('name'), output_field=CharField())\n        self.assertEqual(wrapper.as_sql(connection.cursor(), connection))\n\n    def test_when_as_sql(self):\n        when = When(condition=Q(name__startswith='A'), then=Value('Author'))\n        self.assertEqual(when.as_sql(connection.cursor(), connection))\n\n    def test_case_as_sql(self):\n        case = Case(When(name__startswith='A', then=Value('Author')), default=Value('Unknown'))\n        self.assertEqual(case.as_sql(connection.cursor(), connection))\n\n    def test_subquery_as_sql(self):\n        subquery = Subquery(Author.objects.filter(name__startswith='A').values('name'))\n        self.assertEqual(subquery.as_sql(connection.cursor(), connection))\n\n    def test_exists_as_sql(self):\n        exists = Exists(Author.objects.filter(name__startswith='A'))\n        self.assertEqual(exists.as_sql(connection.cursor(), connection))\n\n    def test_order_by_as_sql(self):\n        order_by = OrderBy(F('name'), descending=True)\n        self.assertEqual(order_by.as_sql(connection.cursor(), connection))\n\n    def test_window_as_sql(self):\n        window = Window(expression=Max('price'), partition_by=[F('category')])\n        self.assertEqual(window.as_sql(connection.cursor(), connection))\n\n    def test_window_frame_as_sql(self):\n        frame = RowRange(start=-1, end=1)\n        self.assertEqual(frame.as_sql(connection.cursor(), connection))\n\n    def test_combined_expression_as_sql(self):\n        combined = F('price') + Value(10)\n        self.assertEqual(combined.as_sql(connection.cursor(), connection))\n\n    def test_func_as_sql(self):\n        func = Func(F('name'), function='UPPER')\n        self.assertEqual(func.as_sql(connection.cursor(), connection))\n"], "sample_745": ["\nimport unittest\nfrom sklearn.feature_extraction.text import (\n    strip_tags, strip_accents_unicode, strip_accents_ascii,\n    HashingVectorizer, CountVectorizer, TfidfTransformer,\n    TfidfVectorizer, ENGLISH_STOP_WORDS)\nimport numpy as np\nimport scipy.sparse as sp\n\nclass TestTextMethods(unittest.TestCase):\n\n    def test_strip_tags(self):\n        self.assertEqual(strip_tags('<html>some text</html>'), 'some text')\n\n    def test_strip_accents_unicode(self):\n        self.assertEqual(strip_accents_unicode('r\u00e9sum\u00e9'), 'resume')\n\n    def test_strip_accents_ascii(self):\n        self.assertEqual(strip_accents_ascii('r\u00e9sum\u00e9'), 'resume')\n\n    def test_hashing_vectorizer(self):\n        corpus = [\n            'This is the first document.',\n            'This is the second second document.',\n            'And the third one.',\n            'Is this the first document?',\n        ]\n        vectorizer = HashingVectorizer(n_features=20)\n        X = vectorizer.transform(corpus)\n        self.assertEqual(X.shape, (4, 20))\n\n    def test_count_vectorizer(self):\n        corpus = [\n            'This is the first document.',\n            'This document is the second document.',\n            'And this is the third one.',\n            'Is this the first document?',\n        ]\n        vectorizer = CountVectorizer()\n        X = vectorizer.fit_transform(corpus)\n        self.assertEqual(X.shape, (4, 9))\n\n    def test_tfidf_transformer(self):\n        X = sp.csr_matrix([[1, 1, 1], [2, 2, 0], [0, 3, 1]])\n        transformer = TfidfTransformer()\n        transformer.fit(X)\n        X_tfidf = transformer.transform(X)\n        self.assertEqual(X_tfidf.shape, (3, 3))\n\n    def test_tfidf_vectorizer(self):\n        corpus = [\n            'This is the first document.',\n            'This document is the second document.',\n            'And this is the third one.',\n            'Is this the first document?',\n        ]\n        vectorizer = TfidfVectorizer()\n        X = vectorizer.fit_transform(corpus)\n        self.assertEqual(X.shape, (4, 9))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_26": ["\nimport numpy as np\nimport pytest\nfrom astropy.io import fits\nfrom astropy.io.fits.hdu.image import PrimaryHDU, ImageHDU, Section\n\n@pytest.fixture\ndef simple_image_data():\n    return np.array([[1, 2], [3, 4]], dtype=np.int16)\n\n@pytest.fixture\ndef simple_image_hdu(simple_image_data):\n    return ImageHDU(data=simple_image_data)\n\ndef test_image_hdu_initialization(simple_image_data):\n    hdu = ImageHDU(data=simple_image_data)\n    assert isinstance(hdu, ImageHDU)\n    assert np.array_equal(hdu.data, simple_image_data)\n\ndef test_image_hdu_header_update(simple_image_hdu):\n    simple_image_hdu.header['TEST'] = (1, 'test keyword')\n    simple_image_hdu.update_header()\n    assert 'TEST' in simple_image_hdu.header\n    assert simple_image_hdu.header['TEST'] == (1, 'test keyword')\n\ndef test_image_hdu_section(simple_image_hdu):\n    section = simple_image_hdu.section\n    assert isinstance(section, Section)\n    assert np.array_equal(section[0, :], [1, 2])\n\ndef test_image_hdu_scale(simple_image_hdu):\n    simple_image_hdu.scale(type='float32')\n    assert simple_image_hdu.data.dtype == np.float32\n\ndef test_image_hdu_verify(simple_image_hdu):\n    assert simple_image_hdu._verify() == []\n\ndef test_image_hdu_summary(simple_image_hdu):\n    summary = simple_image_hdu._summary()\n    assert summary[0] == ''  # default name for ImageHDU\n    assert summary[2] == 'ImageHDU'\n    assert summary[4] == (2, 2)  # shape\n    assert summary[5] == 'int16'  # format\n\ndef test_image_hdu_datasum(simple_image_hdu):\n    datasum = simple_image_hdu._calculate_datasum()\n    assert datasum == 10\n"], "sample_895": ["\nimport unittest\nfrom sklearn.pipeline import Pipeline, FeatureUnion, make_pipeline, make_union\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA, TruncatedSVD\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import load_iris\n\nclass TestSklearnPipeline(unittest.TestCase):\n\n    def setUp(self):\n        self.iris = load_iris()\n        self.X = self.iris.data\n        self.y = self.iris.target\n\n    def test_pipeline(self):\n        pipeline = Pipeline([\n            ('scaler', StandardScaler()),\n            ('pca', PCA(n_components=2)),\n            ('classifier', LogisticRegression())\n        ])\n\n        # Test fit and predict methods\n        pipeline.fit(self.X, self.y)\n        y_pred = pipeline.predict(self.X)\n        self.assertEqual(len(y_pred), len(self.y))\n\n        # Test fit_transform and transform methods\n        X_transformed = pipeline.fit_transform(self.X, self.y)\n        self.assertEqual(X_transformed.shape[1], 2)\n\n        X_transformed_2 = pipeline.transform(self.X)\n        self.assertEqual(X_transformed_2.shape[1], 2)\n\n    def test_feature_union(self):\n        feature_union = FeatureUnion([\n            ('pca', PCA(n_components=2)),\n            ('svd', TruncatedSVD(n_components=2))\n        ])\n\n        # Test fit_transform and transform methods\n        X_transformed = feature_union.fit_transform(self.X)\n        self.assertEqual(X_transformed.shape[1], 4)\n\n        X_transformed_2 = feature_union.transform(self.X)\n        self.assertEqual(X_transformed_2.shape[1], 4)\n\n    def test_make_pipeline(self):\n        pipeline = make_pipeline(StandardScaler(), LogisticRegression())\n        self.assertIsInstance(pipeline, Pipeline)\n\n    def test_make_union(self):\n        feature_union = make_union(PCA(n_components=2), TruncatedSVD(n_components=2))\n        self.assertIsInstance(feature_union, FeatureUnion)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_417": ["\nimport unittest\nfrom django.template.defaultfilters import (\n    add, addslashes, capfirst, center, cut, date, divisibleby,\n    escapejs_filter, filesizeformat, first, floatformat, get_digit, iriencode,\n    join, last, length, length_is, linebreaks_filter, linebreaksbr,\n    ljust, linenumbers, lower, make_list, order, pluralize, phone2numeric_filter,\n    random, rjust, safe, safeseq, slugify, stringformat, striptags, title,\n    time, timesince_filter, timeuntil_filter, truncatechars, truncatechars_html,\n    truncatewords, truncatewords_html, unordered_list, upper, urlencode, urlize,\n    urlizetrunc, wordcount, wordwrap, yesno\n)\nfrom django.utils.safestring import SafeData, mark_safe\nfrom django.utils.timezone import now\n\nclass TestDefaultFilters(unittest.TestCase):\n\n    def test_add(self):\n        self.assertEqual(add(5, 3), 8)\n\n    def test_addslashes(self):\n        self.assertEqual(addslashes('Hello, \"World\"!'), 'Hello,\\\\\\\\\"World\\\\\\\\\"!')\n\n    def test_capfirst(self):\n        self.assertEqual(capfirst('hello'), 'Hello')\n\n    # Add more tests for other functions...\n\n    def test_timesince_filter(self):\n        self.assertIsInstance(timesince_filter(now()), str)\n\n    # Add more tests for other functions...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_790": ["\nimport unittest\nimport numpy as np\nfrom sklearn.decomposition import KernelPCA\nfrom sklearn.datasets import make_classification\nfrom sklearn.exceptions import NotFittedError\n\nclass TestKernelPCA(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, n_features=20, n_informative=2, random_state=42)\n\n    def test_fit(self):\n        kpca = KernelPCA(n_components=2)\n        kpca.fit(self.X)\n        self.assertIsNotNone(kpca.alphas_)\n        self.assertIsNotNone(kpca.lambdas_)\n\n    def test_fit_transform(self):\n        kpca = KernelPCA(n_components=2)\n        X_transformed = kpca.fit_transform(self.X)\n        self.assertEqual(X_transformed.shape, (100, 2))\n\n    def test_transform(self):\n        kpca = KernelPCA(n_components=2)\n        kpca.fit(self.X)\n        X_transformed = kpca.transform(self.X)\n        self.assertEqual(X_transformed.shape, (100, 2))\n\n    def test_inverse_transform(self):\n        kpca = KernelPCA(n_components=2, fit_inverse_transform=True)\n        kpca.fit(self.X)\n        X_transformed = kpca.transform(self.X)\n        X_inverse_transformed = kpca.inverse_transform(X_transformed)\n        self.assertEqual(X_inverse_transformed.shape, self.X.shape)\n\n    def test_inverse_transform_not_fitted(self):\n        kpca = KernelPCA(n_components=2)\n        kpca.fit(self.X)\n        with self.assertRaises(NotFittedError):\n            kpca.inverse_transform(self.X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_682": ["\nimport pytest\nfrom _pytest.logging import LogCaptureFixture, LogCaptureHandler, _LiveLoggingStreamHandler\nfrom _pytest.config import Config\nfrom _pytest.terminal import TerminalReporter\nfrom _pytest.capture import CaptureManager\nfrom _pytest.nodes import Node\nimport logging\n\n@pytest.fixture\ndef config():\n    return Config()\n\n@pytest.fixture\ndef node():\n    return Node(\"testnode\")\n\n@pytest.fixture\ndef terminal_reporter():\n    return TerminalReporter()\n\n@pytest.fixture\ndef capture_manager():\n    return CaptureManager()\n\ndef test_log_capture_fixture_init(node):\n    fixture = LogCaptureFixture(node)\n    assert fixture._item == node\n    assert fixture._initial_logger_levels == {}\n\ndef test_log_capture_fixture_finalize(node):\n    fixture = LogCaptureFixture(node)\n    fixture._initial_logger_levels = {\"logger\": logging.INFO}\n    fixture._finalize()\n    assert logging.getLogger(\"logger\").level == logging.INFO\n\ndef test_log_capture_handler():\n    handler = LogCaptureHandler()\n    record = logging.LogRecord(\"name\", logging.INFO, \"pathname\", 1, \"message\", (), None, \"funcName\")\n    handler.emit(record)\n    assert len(handler.records) == 1\n    assert handler.records[0] == record\n\ndef test_live_logging_stream_handler(terminal_reporter, capture_manager):\n    handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n    handler.reset()\n    assert not handler._first_record_emitted\n"], "sample_914": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom docutils import nodes\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.domains.std import StandardDomain, Cmdoption, OptionXRefRole\n\nclass TestStandardDomain(unittest.TestCase):\n    def setUp(self):\n        self.app = Mock(spec=Sphinx)\n        self.env = Mock(spec=BuildEnvironment)\n        self.builder = Mock(spec=Builder)\n        self.domain = StandardDomain(self.env)\n\n    def test_note_hyperlink_target(self):\n        self.domain.note_hyperlink_target('test_label', 'test_doc', 'test_id', 'Test Title')\n        self.assertEqual(self.domain.anonlabels['test_label'], ('test_doc', 'test_id'))\n        self.assertEqual(self.domain.labels['test_label'], ('test_doc', 'test_id', 'Test Title'))\n\n    def test_note_object(self):\n        self.domain.note_object('test_type', 'test_name', 'test_labelid')\n        self.assertEqual(self.domain.objects[('test_type', 'test_name')], ('test_doc', 'test_labelid'))\n\n    def test_cmdoption_handle_signature(self):\n        cmdoption = Cmdoption('test_name', [], self.env)\n        signode = desc_signature()\n        result = cmdoption.handle_signature('/test opt args', signode)\n        self.assertEqual(result, '/test')\n\n    def test_option_xref_role_process_link(self):\n        role = OptionXRefRole()\n        env = Mock(spec=BuildEnvironment)\n        env.ref_context = {'std:program': 'test_program'}\n        refnode = nodes.Element()\n        result = role.process_link(env, refnode, True, 'Test Title', 'test_target')\n        self.assertEqual(result, ('test_target', 'test_target'))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1": ["\nimport unittest\nimport numpy as np\nfrom astropy.nddata import CCDData\nfrom astropy import units as u\nfrom astropy.wcs import WCS\n\nclass TestCCDData(unittest.TestCase):\n\n    def setUp(self):\n        self.data = np.ones((10, 10))\n        self.uncertainty = np.ones((10, 10))\n        self.mask = np.zeros((10, 10), dtype=bool)\n        self.wcs = WCS(naxis=2)\n        self.unit = u.electron\n        self.meta = {'OBSERVER': 'Edwin Hubble', 'EXPTIME': 1200}\n\n    def test_init(self):\n        ccd = CCDData(self.data, uncertainty=self.uncertainty, mask=self.mask, wcs=self.wcs, unit=self.unit, meta=self.meta)\n        self.assertIsInstance(ccd, CCDData)\n        self.assertEqual(ccd.shape, self.data.shape)\n        self.assertEqual(ccd.unit, self.unit)\n        self.assertIsInstance(ccd.wcs, WCS)\n\n    def test_data_setter(self):\n        ccd = CCDData(self.data, unit=self.unit)\n        new_data = np.zeros((10, 10))\n        ccd.data = new_data\n        self.assertTrue(np.array_equal(ccd.data, new_data))\n\n    def test_unit_setter(self):\n        ccd = CCDData(self.data, unit=self.unit)\n        new_unit = u.photon\n        ccd.unit = new_unit\n        self.assertEqual(ccd.unit, new_unit)\n\n    def test_uncertainty_setter(self):\n        ccd = CCDData(self.data, unit=self.unit)\n        new_uncertainty = np.zeros((10, 10))\n        ccd.uncertainty = new_uncertainty\n        self.assertTrue(np.array_equal(ccd.uncertainty.array, new_uncertainty))\n\n    def test_to_hdu(self):\n        ccd = CCDData(self.data, uncertainty=self.uncertainty, mask=self.mask, wcs=self.wcs, unit=self.unit, meta=self.meta)\n        hdulist = ccd.to_hdu()\n        self.assertEqual(len(hdulist), 3)  # data, mask, uncertainty\n\n    def test_copy(self):\n        ccd = CCDData(self.data, uncertainty=self.uncertainty, mask=self.mask, wcs=self.wcs, unit=self.unit, meta=self.meta)\n        ccd_copy = ccd.copy()\n        self.assertIsNot(ccd, ccd_copy)\n        self.assertTrue(np.array_equal(ccd.data, ccd_copy.data))\n        self.assertTrue(np.array_equal(ccd.uncertainty.array, ccd_copy.uncertainty.array))\n        self.assertTrue(np.array_equal(ccd.mask, ccd_copy.mask))\n        self.assertEqual(ccd.wcs, ccd_copy.wcs)\n        self.assertEqual(ccd.unit, ccd_copy.unit)\n        self.assertEqual(ccd.meta, ccd_copy.meta)\n\n    def test_arithmetic_operations(self):\n        ccd1 = CCDData(self.data, unit=self.unit)\n        ccd2 = CCDData(self.data, unit=self.unit)\n        result = ccd1 + ccd2\n        self.assertTrue(np.array_equal(result.data, 2 * self.data))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_133": ["\nimport unittest\nfrom datetime import date, datetime, time, timedelta\nfrom django.utils import dateformat, timezone\n\nclass TestDateFormat(unittest.TestCase):\n    def setUp(self):\n        self.dt = datetime(2021, 1, 2, 3, 4, 5)\n        self.d = date(2021, 1, 2)\n        self.t = time(3, 4, 5)\n\n    def test_date_format(self):\n        df = dateformat.DateFormat(self.d)\n        self.assertEqual(df.format('Y-m-d'), '2021-01-02')\n        self.assertEqual(df.format('l, F j, Y'), 'Saturday, January 2, 2021')\n\n    def test_time_format(self):\n        tf = dateformat.TimeFormat(self.t)\n        self.assertEqual(tf.format('H:i:s'), '03:04:05')\n        self.assertEqual(tf.format('g:i A'), '3:04 AM')\n\n    def test_datetime_format(self):\n        dt = dateformat.DateFormat(self.dt)\n        self.assertEqual(dt.format('Y-m-d H:i:s'), '2021-01-02 03:04:05')\n        self.assertEqual(dt.format('l, F j, Y g:i A'), 'Saturday, January 2, 2021 3:04 AM')\n\n    def test_invalid_format_specifier(self):\n        with self.assertRaises(TypeError):\n            df = dateformat.DateFormat(self.d)\n            df.format('H')  # H is a time-related format specifier\n\n    def test_convenience_functions(self):\n        self.assertEqual(dateformat.format(self.d, 'Y-m-d'), '2021-01-02')\n        self.assertEqual(dateformat.time_format(self.t, 'H:i:s'), '03:04:05')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_356": ["\nfrom unittest import TestCase, mock\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.state import ProjectState\nfrom django.db.migrations.questioner import MigrationQuestioner\n\nclass TestMigrationAutodetector(TestCase):\n    def setUp(self):\n        self.from_state = ProjectState()\n        self.to_state = ProjectState()\n        self.questioner = MigrationQuestioner()\n\n    def test_changes_method(self):\n        autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n        changes = autodetector.changes(graph=None, trim_to_apps=None, convert_apps=None, migration_name=None)\n        self.assertIsInstance(changes, dict)\n\n    def test_deep_deconstruct_method(self):\n        autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n        obj = mock.Mock()\n        obj.deconstruct = mock.Mock(return_value=('path', (), {}))\n        result = autodetector.deep_deconstruct(obj)\n        self.assertEqual(result, ('path', [], {}))\n\n    # Add more test cases for other methods as needed\n"], "sample_294": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom urllib.parse import urlparse\n\nfrom django.http import HttpRequest, HttpResponse\nfrom django.middleware.csrf import (\n    CsrfViewMiddleware,\n    _compare_masked_tokens,\n    _get_new_csrf_token,\n    _get_new_csrf_string,\n    _mask_cipher_secret,\n    _sanitize_token,\n    _unmask_cipher_token,\n    get_token,\n)\n\nclass CsrfMiddlewareTestCase(unittest.TestCase):\n    def setUp(self):\n        self.middleware = CsrfViewMiddleware()\n        self.request = HttpRequest()\n\n    def test_get_new_csrf_string(self):\n        csrf_string = _get_new_csrf_string()\n        self.assertEqual(len(csrf_string), 32)\n\n    def test_mask_cipher_secret(self):\n        secret = _get_new_csrf_string()\n        token = _mask_cipher_secret(secret)\n        self.assertEqual(len(token), 64)\n\n    def test_unmask_cipher_token(self):\n        secret = _get_new_csrf_string()\n        token = _mask_cipher_secret(secret)\n        decrypted_secret = _unmask_cipher_token(token)\n        self.assertEqual(secret, decrypted_secret)\n\n    def test_get_new_csrf_token(self):\n        token = _get_new_csrf_token()\n        self.assertEqual(len(token), 64)\n\n    def test_get_token(self):\n        token = get_token(self.request)\n        self.assertEqual(len(token), 64)\n\n    def test_sanitize_token(self):\n        token = _get_new_csrf_token()\n        sanitized_token = _sanitize_token(token)\n        self.assertEqual(sanitized_token, token)\n\n    def test_compare_masked_tokens(self):\n        token1 = _get_new_csrf_token()\n        token2 = _get_new_csrf_token()\n        self.assertFalse(_compare_masked_tokens(token1, token2))\n        self.assertTrue(_compare_masked_tokens(token1, token1))\n\n    def test_process_request(self):\n        self.middleware.process_request(self.request)\n        self.assertEqual(len(self.request.META['CSRF_COOKIE']), 64)\n\n    def test_process_view(self):\n        self.middleware.process_request(self.request)\n        response = self.middleware.process_view(self.request, lambda r: None, (), {})\n        self.assertIsNone(response)\n\n    def test_process_response(self):\n        self.middleware.process_request(self.request)\n        response = HttpResponse()\n        self.middleware.process_response(self.request, response)\n        self.assertTrue(response.csrf_cookie_set)\n\n    def test_origin_verified(self):\n        with patch('django.middleware.csrf.settings.CSRF_TRUSTED_ORIGINS', ['https://example.com']):\n            self.request.META['HTTP_ORIGIN'] = 'https://example.com'\n            self.request.get_host = MagicMock(return_value='example.com')\n            self.assertTrue(self.middleware._origin_verified(self.request))\n\n            self.request.META['HTTP_ORIGIN'] = 'https://evil.com'\n            self.assertFalse(self.middleware._origin_verified(self.request))\n\n    def test_allowed_origins_exact(self):\n        with patch('django.middleware.csrf.settings.CSRF_TRUSTED_ORIGINS', ['https://example.com']):\n            self.assertEqual(self.middleware.allowed_origins_exact, {'https://example.com'})\n\n    def test_allowed_origin_subdomains(self):\n        with patch('django.middleware.csrf.settings.CSRF_TRUSTED_ORIGINS', ['https://*.example.com']):\n            self.assertEqual(self.middleware.allowed_origin_subdomains, {'https': ['*.example.com']})\n\n    def test_csrf_trusted_origins_hosts(self):\n        with patch('django.middleware.csrf.settings.CSRF_TRUSTED_ORIGINS', ['https://example.com']):\n            self.assertEqual(self.middleware.csrf_trusted_origins_hosts, ['example.com'])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_702": ["\nimport pytest\nfrom unittest.mock import MagicMock, patch\nfrom pathlib import Path\nfrom _pytest._code.code import ExceptionInfo\nfrom _pytest.outcomes import OutcomeException\nfrom _pytest.nodes import Collector\nfrom _pytest.config import Config\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.python_api import approx\nimport doctest\n\nfrom src._pytest.doctest import (\n    _get_checker,\n    _is_mocked,\n    _is_setup_py,\n    _patch_unwrap_mock_aware,\n    DoctestItem,\n    DoctestModule,\n    DoctestTextfile,\n    _get_runner,\n    _get_flag_lookup,\n    get_optionflags,\n    _get_continue_on_failure,\n    _check_all_skipped,\n    _setup_fixtures,\n    _init_checker_class,\n    _get_allow_unicode_flag,\n    _get_allow_bytes_flag,\n    _get_number_flag,\n    _get_report_choice,\n    DOCTEST_REPORT_CHOICE_NONE,\n    DOCTEST_REPORT_CHOICE_CDIFF,\n    DOCTEST_REPORT_CHOICE_NDIFF,\n    DOCTEST_REPORT_CHOICE_UDIFF,\n    DOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE,\n    DOCTEST_REPORT_CHOICES,\n    ReprFailDoctest,\n    MultipleDoctestFailures,\n    pytest_addoption,\n    pytest_unconfigure,\n    pytest_collect_file,\n)\n\n@pytest.fixture\ndef mock_config():\n    config = Config()\n    config.option = MagicMock()\n    config.option.doctestmodules = True\n    config.option.doctestreport = \"udiff\"\n    config.option.doctestglob = []\n    config.option.doctest_ignore_import_errors = False\n    config.option.doctest_continue_on_failure = False\n    config.getoption = MagicMock(return_value=[\"ELLIPSIS\"])\n    config.getini = MagicMock(return_value=\"utf-8\")\n    return config\n\n@pytest.fixture\ndef mock_parent():\n    parent = Collector(path=Path(\".\"), session=MagicMock(), config=mock_config())\n    return parent\n\ndef test_pytest_addoption():\n    parser = Parser()\n    pytest_addoption(parser)\n    assert \"doctest_optionflags\" in parser.ini\n    assert \"doctest_encoding\" in parser.ini\n    assert \"--doctest-modules\" in parser.options\n    assert \"--doctest-report\" in parser.options\n    assert \"--doctest-glob\" in parser.options\n    assert \"--doctest-ignore-import-errors\" in parser.options\n    assert \"--doctest-continue-on-failure\" in parser.options\n\ndef test_pytest_unconfigure():\n    pytest_unconfigure()\n    from src._pytest.doctest import RUNNER_CLASS\n    assert RUNNER_CLASS is None\n\ndef test_pytest_collect_file_setup_py(mock_parent):\n    mock_parent.session.isinitpath = MagicMock(return_value=True)\n    fspath = Path(\"setup.py\")\n    fspath.read_bytes = MagicMock(return_value=b\"setuptools\")\n    result = pytest_collect_file(fspath, mock_parent)\n    assert result is None\n\ndef test_is_setup_py():\n    path = Path(\"setup.py\")\n    path.read_bytes = MagicMock(return_value=b\"setuptools\")\n    assert _is_setup_py(path) is True\n    path.read_bytes = MagicMock(return_value=b\"distutils\")\n    assert _is_setup_py(path) is True\n    path.read_bytes = MagicMock(return_value=b\"\")\n    assert _is_setup_py(path) is False\n\ndef test_get_checker():\n    checker = _get_checker()\n    assert isinstance(checker, doctest.OutputChecker)\n    assert type(checker).__name__ == \"LiteralsOutputChecker\"\n\ndef test_get_flag_lookup():\n    flags = _get_flag_lookup()\n    assert isinstance(flags, dict)\n    assert \"DONT_ACCEPT_TRUE_FOR_1\" in flags\n    assert \"DONT_ACCEPT_BLANKLINE\" in flags\n    assert \"NORMALIZE_WHITESPACE\" in flags\n    assert \"ELLIPSIS\" in flags\n    assert \"IGNORE_EXCEPTION_DETAIL\" in flags\n    assert \"COMPARISON_FLAGS\" in flags\n    assert \"ALLOW_UNICODE\" in flags\n    assert \"ALLOW_BYTES\" in flags\n    assert \"NUMBER\" in flags\n\ndef test_get_optionflags(mock_parent):\n    optionflags = get_optionflags(mock_parent)\n    assert isinstance(optionflags, int)\n\ndef test_get_continue_on_failure(mock_config):\n    mock_config.getvalue = MagicMock(return_value=True)\n    assert _get_continue_on_failure(mock_config) is True\n    mock_config.getvalue = MagicMock(return_value=False)\n    assert _get_continue_on_failure(mock_config) is False\n\ndef test_get_report_choice():\n    assert _get_report_choice(DOCTEST_REPORT_CHOICE_NONE) == 0\n    assert _get_report_choice(DOCTEST_REPORT_CHOICE_CDIFF) == doctest.REPORT_CDIFF\n    assert _get_report_choice(DOCTEST_REPORT_CHOICE_NDIFF) == doctest.REPORT_NDIFF\n    assert _get_report_choice(DOCTEST_REPORT_CHOICE_UDIFF) == doctest.REPORT_UDIFF\n    assert _get_report_choice(DOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE) == doctest.REPORT_ONLY_FIRST_FAILURE\n\ndef test_doctest_item_repr_failure():\n    class MockExceptionInfo:\n        @staticmethod\n        def from_exc_info(exc_info):\n            return ExceptionInfo(exc_info)\n\n    with patch(\"src._pytest.doctest.ExceptionInfo\", MockExceptionInfo):\n        excinfo = ExceptionInfo((OutcomeException, OutcomeException(), None))\n        doctest_item = DoctestItem(name=\"test\", parent=None)\n        doctest_item.config = mock_config()\n        repr_failure = doctest_item.repr_failure(excinfo)\n        assert isinstance(repr_failure, str)\n\ndef test_doctest_textfile_collect(mock_parent):\n    mock_parent.config.getini = MagicMock(return_value=\"utf-8\")\n    mock_parent.path = Path(\"test.txt\")\n    mock_parent.path.read_text = MagicMock(return_value=\"\")\n    textfile = DoctestTextfile(path=mock_parent.path, parent=mock_parent)\n    textfile.collect()\n\ndef test_doctest_module_collect(mock_parent):\n    mock_parent.path = Path(\"test.py\")\n    module = DoctestModule(path=mock_parent.path, parent=mock_parent)\n    module.collect()\n\ndef test_setup_fixtures():\n    doctest_item = DoctestItem(name=\"test\", parent=None)\n    doctest_item.session = MagicMock()\n    doctest_item.session._fixturemanager = MagicMock()\n    doctest_item.session._fixturemanager.getfixtureinfo = MagicMock()\n    fixture_request = _setup_fixtures(doctest_item)\n    assert fixture_request is not None\n\ndef test_init_checker_class():\n    checker_class = _init_checker_class()\n    assert issubclass(checker_class, doctest.OutputChecker)\n\ndef test_get_allow_unicode_flag():\n    flag = _get_allow_unicode_flag()\n    assert isinstance(flag, int)\n\ndef test_get_allow_bytes_flag():\n    flag = _get_allow_bytes_flag()\n    assert isinstance(flag, int)\n\ndef test_get_number_flag():\n    flag = _get_number_flag()\n    assert isinstance(flag, int)\n\ndef test_check_all_skipped():\n    test = doctest.DocTest(\"test\", {\"examples\": [doctest.Example(\"\", \"\", {\"SKIP\": True})]})\n    with pytest.raises(pytest.skip.Exception):\n        _check_all_skipped(test)\n\ndef test_is_mocked():\n    obj = MagicMock()\n    assert _is_mocked(obj) is True\n\ndef test_patch_unwrap_mock_aware():\n    with _patch_unwrap_mock_aware():\n        pass\n\ndef test_get_runner():\n    runner = _get_runner()\n    assert isinstance(runner, doctest.DocTestRunner)\n"], "sample_1054": ["\nimport unittest\nfrom sympy import Line, Point, Point2D, Parabola, Segment2D, Ray2D, Ellipse\n\nclass TestParabola(unittest.TestCase):\n    def setUp(self):\n        self.focus = Point(0, 0)\n        self.directrix = Line(Point(5, 8), Point(7, 8))\n        self.parabola = Parabola(self.focus, self.directrix)\n\n    def test_init(self):\n        self.assertEqual(self.parabola.focus, self.focus)\n        self.assertEqual(self.parabola.directrix, self.directrix)\n\n    def test_ambient_dimension(self):\n        self.assertEqual(self.parabola.ambient_dimension, 2)\n\n    def test_axis_of_symmetry(self):\n        self.assertEqual(self.parabola.axis_of_symmetry, Line(Point(0, 0), Point(0, 1)))\n\n    def test_eccentricity(self):\n        self.assertEqual(self.parabola.eccentricity, 1)\n\n    def test_equation(self):\n        self.assertEqual(self.parabola.equation(), -self.parabola.focus.x**2 - 16*self.parabola.vertex.y + 64)\n\n    def test_focal_length(self):\n        self.assertEqual(self.parabola.focal_length, 4)\n\n    def test_p_parameter(self):\n        self.assertEqual(self.parabola.p_parameter, -4)\n\n    def test_vertex(self):\n        self.assertEqual(self.parabola.vertex, Point(0, 4))\n\n    def test_intersection_point(self):\n        self.assertEqual(self.parabola.intersection(Point(0, 16)), [Point(0, 16)])\n\n    def test_intersection_line(self):\n        self.assertEqual(self.parabola.intersection(Line(Point(-7, 3), Point(12, 3))), [Point(-4, 3), Point(4, 3)])\n\n    def test_intersection_segment(self):\n        self.assertEqual(self.parabola.intersection(Segment2D(Point(-12, -65), Point(14, -68))), [])\n\n    def test_intersection_ellipse(self):\n        self.assertEqual(self.parabola.intersection(Ellipse(Point(0, 0), 2, 5)), [Point(-2, 0), Point(2, 0)])\n\n    def test_intersection_invalid(self):\n        with self.assertRaises(TypeError):\n            self.parabola.intersection(\"invalid\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1165": ["\nimport unittest\nfrom sympy import symbols, I, Matrix, cos, sin, sqrt, pi\nfrom sympy.algebras.quaternion import Quaternion\n\nclass TestQuaternion(unittest.TestCase):\n\n    def setUp(self):\n        self.q1 = Quaternion(1, 2, 3, 4)\n        self.q2 = Quaternion(5, 6, 7, 8)\n        self.x = symbols('x', real=True)\n        self.q3 = Quaternion(3 + 4*I, 2 + 5*I, 0, 7 + 8*I, real_field=False)\n\n    def test_add(self):\n        self.assertEqual(self.q1.add(self.q2), Quaternion(6, 8, 10, 12))\n        self.assertEqual(self.q1.add(self.x), Quaternion(self.x + 1, 2, 3, 4))\n        self.assertEqual(self.q3.add(2 + 3*I), Quaternion(5 + 7*I, 2 + 5*I, 0, 7 + 8*I))\n\n    def test_mul(self):\n        self.assertEqual(self.q1.mul(self.q2), Quaternion(-60, 12, 30, 24))\n        self.assertEqual(self.q1.mul(self.x), Quaternion(self.x, 2*self.x, 3*self.x, 4*self.x))\n        self.assertEqual(self.q3.mul(2 + 3*I), Quaternion((6 + 7*I) + (12 + 15*I)*I, (4 + 10*I) + (10 + 15*I)*I*I, 0, (14 + 24*I) + (28 + 30*I)*I*I))\n\n    def test_norm(self):\n        self.assertEqual(self.q1.norm(), sqrt(30))\n\n    def test_normalize(self):\n        self.assertEqual(self.q1.normalize(), Quaternion(1/sqrt(30), 2/sqrt(30), 3/sqrt(30), 4/sqrt(30)))\n\n    def test_inverse(self):\n        self.assertEqual(self.q1.inverse(), Quaternion(1/30, -2/30, -3/30, -4/30))\n\n    def test_pow(self):\n        self.assertEqual(self.q1.pow(2), Quaternion(-28, 4, 6, 8))\n        self.assertEqual(self.q1.pow(-1), self.q1.inverse())\n\n    def test_exp(self):\n        self.assertEqual(self.q1.exp(), Quaternion(E*cos(sqrt(29)), E*sqrt(29)*sin(sqrt(29))/29, 3*E*sqrt(29)*sin(sqrt(29))/29, 4*E*sqrt(29)*sin(sqrt(29))/29))\n\n    def test_rotate_point(self):\n        self.assertEqual(Quaternion.rotate_point((1, 1, 1), self.q1), (-5.65685424949238, -5.65685424949238, -5.65685424949238))\n\n    def test_to_axis_angle(self):\n        axis, angle = self.q1.to_axis_angle()\n        self.assertEqual(axis, (sqrt(3)/3, sqrt(3)/3, sqrt(3)/3))\n        self.assertEqual(angle, 2*pi/3)\n\n    def test_to_rotation_matrix(self):\n        self.assertEqual(self.q1.to_rotation_matrix(), Matrix([[-0.447213595499958, -0.565685424949238, -0.706175870898204], [-0.565685424949238, -0.447213595499958, 0.690222718918749], [-0.706175870898204, 0.690222718918749, -0.447213595499958]]))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_789": ["\nimport unittest\nimport numpy as np\nfrom sklearn.calibration import CalibratedClassifierCV, _sigmoid_calibration, _SigmoidCalibration, calibration_curve\nfrom sklearn.svm import SVC\nfrom sklearn.datasets import make_classification\n\nclass TestCalibration(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=1000, n_features=20, n_informative=2, n_redundant=10, random_state=42)\n        self.clf = SVC(probability=True)\n\n    def test_CalibratedClassifierCV(self):\n        cal_clf = CalibratedClassifierCV(base_estimator=self.clf, cv=5)\n        cal_clf.fit(self.X, self.y)\n        proba = cal_clf.predict_proba(self.X)\n        self.assertEqual(proba.shape, (1000, 2))\n\n    def test__sigmoid_calibration(self):\n        self.clf.fit(self.X, self.y)\n        df = self.clf.decision_function(self.X)\n        a, b = _sigmoid_calibration(df, self.y)\n        self.assertIsInstance(a, float)\n        self.assertIsInstance(b, float)\n\n    def test__SigmoidCalibration(self):\n        self.clf.fit(self.X, self.y)\n        df = self.clf.decision_function(self.X)\n        calibrator = _SigmoidCalibration()\n        calibrator.fit(df, self.y)\n        proba = calibrator.predict(df)\n        self.assertEqual(len(proba), 1000)\n\n    def test_calibration_curve(self):\n        self.clf.fit(self.X, self.y)\n        proba = self.clf.predict_proba(self.X)[:, 1]\n        prob_true, prob_pred = calibration_curve(self.y, proba, n_bins=10)\n        self.assertEqual(len(prob_true), 10)\n        self.assertEqual(len(prob_pred), 10)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_229": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.forms import fields\nfrom django.core.exceptions import ValidationError\nfrom django.core.files.uploadedfile import SimpleUploadedFile\nfrom PIL import Image\nfrom datetime import datetime, timedelta\n\nclass TestFields(unittest.TestCase):\n    def test_char_field(self):\n        field = fields.CharField()\n        self.assertEqual(field.clean('test'), 'test')\n        self.assertRaises(ValidationError, field.clean, None)\n\n    def test_integer_field(self):\n        field = fields.IntegerField()\n        self.assertEqual(field.clean('123'), 123)\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    def test_float_field(self):\n        field = fields.FloatField()\n        self.assertEqual(field.clean('123.456'), 123.456)\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    def test_decimal_field(self):\n        field = fields.DecimalField(max_digits=5, decimal_places=2)\n        self.assertEqual(str(field.clean('123.45')), '123.45')\n        self.assertRaises(ValidationError, field.clean, '123.456')\n\n    def test_date_field(self):\n        field = fields.DateField()\n        self.assertEqual(str(field.clean('2022-01-01')), '2022-01-01')\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    def test_time_field(self):\n        field = fields.TimeField()\n        self.assertEqual(str(field.clean('12:34:56')), '12:34:56')\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    def test_date_time_field(self):\n        field = fields.DateTimeField()\n        self.assertEqual(str(field.clean('2022-01-01 12:34:56')), '2022-01-01 12:34:56+00:00')\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    def test_duration_field(self):\n        field = fields.DurationField()\n        self.assertEqual(str(field.clean('1 day')), '1 day, 0:00:00')\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    def test_regex_field(self):\n        field = fields.RegexField(regex=r'^test$')\n        self.assertEqual(field.clean('test'), 'test')\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    def test_email_field(self):\n        field = fields.EmailField()\n        self.assertEqual(field.clean('test@example.com'), 'test@example.com')\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    def test_file_field(self):\n        field = fields.FileField()\n        file = SimpleUploadedFile(\"file.txt\", b\"file_content\")\n        self.assertEqual(field.clean(file).read(), b\"file_content\")\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    @patch('django.forms.fields.Image.open')\n    def test_image_field(self, mock_open):\n        field = fields.ImageField()\n        mock_open.return_value = Image.new('RGB', (100, 100))\n        file = SimpleUploadedFile(\"file.jpg\", b\"file_content\")\n        self.assertEqual(field.clean(file).read(), b\"file_content\")\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    def test_url_field(self):\n        field = fields.URLField()\n        self.assertEqual(field.clean('https://www.example.com'), 'https://www.example.com/')\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    def test_boolean_field(self):\n        field = fields.BooleanField()\n        self.assertEqual(field.clean('True'), True)\n        self.assertEqual(field.clean('False'), False)\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    def test_null_boolean_field(self):\n        field = fields.NullBooleanField()\n        self.assertEqual(field.clean('True'), True)\n        self.assertEqual(field.clean('False'), False)\n        self.assertEqual(field.clean(''), None)\n\n    def test_choice_field(self):\n        field = fields.ChoiceField(choices=[('1', 'One'), ('2', 'Two')])\n        self.assertEqual(field.clean('1'), '1')\n        self.assertRaises(ValidationError, field.clean, '3')\n\n    def test_typed_choice_field(self):\n        field = fields.TypedChoiceField(coerce=int, choices=[(1, 'One'), (2, 'Two')])\n        self.assertEqual(field.clean('1'), 1)\n        self.assertRaises(ValidationError, field.clean, '3')\n\n    def test_multiple_choice_field(self):\n        field = fields.MultipleChoiceField(choices=[('1', 'One'), ('2', 'Two')])\n        self.assertEqual(field.clean(['1', '2']), ['1', '2'])\n        self.assertRaises(ValidationError, field.clean, ['3'])\n\n    def test_typed_multiple_choice_field(self):\n        field = fields.TypedMultipleChoiceField(coerce=int, choices=[(1, 'One'), (2, 'Two')])\n        self.assertEqual(field.clean(['1', '2']), [1, 2])\n        self.assertRaises(ValidationError, field.clean, ['3'])\n\n    def test_combo_field(self):\n        field1 = fields.CharField()\n        field2 = fields.IntegerField()\n        field = fields.ComboField(fields=[field1, field2])\n        self.assertEqual(field.clean('test'), 'test')\n        self.assertEqual(field.clean('123'), 123)\n\n    def test_multi_value_field(self):\n        field1 = fields.CharField()\n        field2 = fields.IntegerField()\n        field = fields.MultiValueField(fields=[field1, field2])\n        self.assertEqual(field.clean(['test', '123']), ['test', 123])\n        self.assertRaises(ValidationError, field.clean, ['test', 'abc'])\n\n    def test_file_path_field(self):\n        field = fields.FilePathField(path='.')\n        self.assertIn(field.clean('test.py'), field.choices)\n\n    def test_split_date_time_field(self):\n        field = fields.SplitDateTimeField()\n        self.assertEqual(str(field.clean(['2022-01-01', '12:34:56'])), '2022-01-01 12:34:56+00:00')\n        self.assertRaises(ValidationError, field.clean, ['abc', '12:34:56'])\n\n    def test_generic_ip_address_field(self):\n        field = fields.GenericIPAddressField()\n        self.assertEqual(field.clean('127.0.0.1'), '127.0.0.1')\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    def test_slug_field(self):\n        field = fields.SlugField()\n        self.assertEqual(field.clean('test-slug'), 'test-slug')\n        self.assertRaises(ValidationError, field.clean, 'test slug')\n\n    def test_uuid_field(self):\n        field = fields.UUIDField()\n        self.assertEqual(str(field.clean('123e4567-e89b-12d3-a456-426614174000')), '123e4567-e89b-12d3-a456-426614174000')\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    def test_json_field(self):\n        field = fields.JSONField()\n        self.assertEqual(field.clean('{\"key\": \"value\"}'), {'key': 'value'})\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_645": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom pylint.lint import PyLinter\nfrom pylint.checkers import imports\n\nclass TestImportsChecker(unittest.TestCase):\n    def setUp(self):\n        self.linter = PyLinter()\n        self.checker = imports.ImportsChecker(self.linter)\n\n    def test_open(self):\n        self.checker.open()\n        self.assertIsInstance(self.checker.import_graph, dict)\n        self.assertIsInstance(self.checker._module_pkg, dict)\n        self.assertEqual(self.checker._current_module_package, False)\n        self.assertIsInstance(self.checker._excluded_edges, dict)\n        self.assertEqual(self.checker._ignored_modules, self.linter.config.ignored_modules)\n        self.assertIsInstance(self.checker.preferred_modules, dict)\n\n    def test_close(self):\n        with patch.object(self.checker, '_import_graph_without_ignored_edges', return_value={}):\n            self.checker.close()\n\n    # Add more tests for other methods in imports.ImportsChecker\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_227": ["\nfrom django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\nfrom django.test import TestCase\n\nclass MyModel(models.Model):\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey('content_type', 'object_id')\n\nclass RelatedModel(models.Model):\n    related_object = GenericRelation(MyModel)\n\nclass TestGenericForeignKey(TestCase):\n    def setUp(self):\n        self.related_object = RelatedModel.objects.create()\n        self.my_model_object = MyModel.objects.create(content_object=self.related_object)\n\n    def test_contribute_to_class(self):\n        self.assertIsInstance(MyModel.content_object, GenericForeignKey)\n        self.assertEqual(MyModel.content_object.name, 'content_object')\n        self.assertEqual(MyModel.content_object.model, MyModel)\n\n    def test_get_filter_kwargs_for_object(self):\n        filter_kwargs = MyModel.content_object.get_filter_kwargs_for_object(self.my_model_object)\n        self.assertEqual(filter_kwargs, {'object_id': self.related_object.id, 'content_type': self.related_object.content_type.id})\n\n    def test_get_forward_related_filter(self):\n        filter_kwargs = MyModel.content_object.get_forward_related_filter(self.related_object)\n        self.assertEqual(filter_kwargs, {'object_id': self.related_object.id, 'content_type': self.related_object.content_type.id})\n\n    def test_str(self):\n        self.assertEqual(str(MyModel.content_object), 'tests.MyModel.content_object')\n\n    def test_get_content_type(self):\n        ct = MyModel.content_object.get_content_type(obj=self.related_object)\n        self.assertEqual(ct, self.related_object.content_type)\n\n    def test_get(self):\n        self.assertEqual(self.my_model_object.content_object, self.related_object)\n\n    def test_set(self):\n        new_related_object = RelatedModel.objects.create()\n        self.my_model_object.content_object = new_related_object\n        self.my_model_object.save()\n        self.assertEqual(self.my_model_object.content_object, new_related_object)\n\nclass TestGenericRelation(TestCase):\n    def setUp(self):\n        self.related_object = RelatedModel.objects.create()\n        self.my_model_object = MyModel.objects.create(content_object=self.related_object)\n\n    def test_contribute_to_class(self):\n        self.assertIsInstance(RelatedModel.related_object, GenericRelation)\n        self.assertEqual(RelatedModel.related_object.name, 'related_object')\n        self.assertEqual(RelatedModel.related_object.model, RelatedModel)\n\n    def test_value_to_string(self):\n        self.assertEqual(RelatedModel.related_object.value_to_string(self.related_object), '[%s]' % self.my_model_object.id)\n\n    def test_get_content_type(self):\n        ct = RelatedModel.related_object.get_content_type()\n        self.assertEqual(ct, self.related_object.content_type)\n\n    def test_get_extra_restriction(self):\n        from django.db.models.sql.where import WhereNode\n        where_class = WhereNode\n        alias = 'alias'\n        remote_alias = 'remote_alias'\n        extra_restriction = RelatedModel.related_object.get_extra_restriction(where_class, alias, remote_alias)\n        self.assertEqual(str(extra_restriction), \"WHERE (`tests_relatedmodel`.`content_type_id` = %s)\")\n\n    def test_bulk_related_objects(self):\n        related_objects = RelatedModel.related_object.bulk_related_objects([self.related_object])\n        self.assertEqual(related_objects.count(), 1)\n        self.assertEqual(related_objects.first(), self.my_model_object)\n"], "sample_228": ["\nfrom django.test import TestCase\nfrom django.forms import Form, IntegerField\nfrom django.forms.formsets import formset_factory, BaseFormSet, DELETION_FIELD_NAME\nfrom django.core.exceptions import ValidationError\n\nclass TestForm(Form):\n    field = IntegerField()\n\nclass TestFormSet(TestCase):\n    def setUp(self):\n        self.FormSet = formset_factory(TestForm, formset=BaseFormSet, extra=1)\n\n    def test_formset_factory(self):\n        formset = self.FormSet()\n        self.assertIsInstance(formset, BaseFormSet)\n\n    def test_total_form_count(self):\n        formset = self.FormSet()\n        self.assertEqual(formset.total_form_count(), 1)\n\n    def test_initial_form_count(self):\n        formset = self.FormSet()\n        self.assertEqual(formset.initial_form_count(), 0)\n\n    def test_is_valid(self):\n        data = {\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '0',\n            'form-0-field': '1',\n        }\n        formset = self.FormSet(data)\n        self.assertTrue(formset.is_valid())\n\n    def test_is_valid_with_invalid_data(self):\n        data = {\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '0',\n            'form-0-field': 'invalid',\n        }\n        formset = self.FormSet(data)\n        self.assertFalse(formset.is_valid())\n\n    def test_cleaned_data(self):\n        data = {\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '0',\n            'form-0-field': '1',\n        }\n        formset = self.FormSet(data)\n        self.assertTrue(formset.is_valid())\n        self.assertEqual(formset.cleaned_data, [{'field': 1}])\n\n    def test_deleted_forms(self):\n        data = {\n            'form-TOTAL_FORMS': '2',\n            'form-INITIAL_FORMS': '2',\n            'form-0-field': '1',\n            'form-1-field': '2',\n            'form-1-' + DELETION_FIELD_NAME: 'on',\n        }\n        formset = self.FormSet(data, can_delete=True)\n        self.assertTrue(formset.is_valid())\n        self.assertEqual(len(formset.deleted_forms), 1)\n\n    def test_too_many_forms(self):\n        data = {\n            'form-TOTAL_FORMS': '1001',\n            'form-INITIAL_FORMS': '0',\n        }\n        formset = self.FormSet(data, validate_max=True)\n        with self.assertRaises(ValidationError):\n            formset.full_clean()\n\n    def test_too_few_forms(self):\n        data = {\n            'form-TOTAL_FORMS': '0',\n            'form-INITIAL_FORMS': '0',\n        }\n        formset = self.FormSet(data, validate_min=True, min_num=1)\n        with self.assertRaises(ValidationError):\n            formset.full_clean()\n"], "sample_370": ["\nfrom django.test import TestCase\nfrom django.db import models\nfrom django.db.models.fields.related_descriptors import ForwardManyToOneDescriptor, ForwardOneToOneDescriptor, ReverseOneToOneDescriptor, ReverseManyToOneDescriptor, ManyToManyDescriptor\n\n# Mock models for testing\nclass ParentModel(models.Model):\n    pass\n\nclass ChildModel(models.Model):\n    parent = models.ForeignKey(ParentModel, on_delete=models.CASCADE, related_name='children')\n\nclass PlaceModel(models.Model):\n    restaurant = models.OneToOneField(ChildModel, on_delete=models.CASCADE, related_name='place')\n\nclass ToppingModel(models.Model):\n    pizzas = models.ManyToManyField(ChildModel, related_name='toppings')\n\nclass TestRelatedDescriptors(TestCase):\n    def setUp(self):\n        self.parent = ParentModel.objects.create()\n        self.child = ChildModel.objects.create(parent=self.parent)\n        self.place = PlaceModel.objects.create(restaurant=self.child)\n        self.topping = ToppingModel.objects.create()\n        self.child.toppings.add(self.topping)\n\n    def test_forward_many_to_one_descriptor(self):\n        descriptor = ForwardManyToOneDescriptor(ChildModel._meta.get_field('parent'))\n        self.assertEqual(descriptor.__get__(self.child), self.parent)\n        self.assertRaises(descriptor.RelatedObjectDoesNotExist, descriptor.__get__, ChildModel())\n\n    def test_forward_one_to_one_descriptor(self):\n        descriptor = ForwardOneToOneDescriptor(PlaceModel._meta.get_field('restaurant'))\n        self.assertEqual(descriptor.__get__(self.place), self.child)\n        self.assertRaises(descriptor.RelatedObjectDoesNotExist, descriptor.__get__, PlaceModel())\n\n    def test_reverse_one_to_one_descriptor(self):\n        descriptor = ReverseOneToOneDescriptor(ChildModel._meta.get_field('place').remote_field)\n        self.assertEqual(descriptor.__get__(self.child), self.place)\n        self.assertRaises(descriptor.RelatedObjectDoesNotExist, descriptor.__get__, ChildModel.objects.create())\n\n    def test_reverse_many_to_one_descriptor(self):\n        descriptor = ReverseManyToOneDescriptor(ChildModel._meta.get_field('parent').remote_field)\n        self.assertIn(self.child, descriptor.__get__(self.parent).all())\n\n    def test_many_to_many_descriptor(self):\n        descriptor = ManyToManyDescriptor(ChildModel._meta.get_field('toppings').remote_field)\n        self.assertIn(self.child, descriptor.__get__(self.topping).all())\n"], "sample_955": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom docutils import nodes\nfrom sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator, NestedInlineTransform\n\nclass TestManualPageWriter(unittest.TestCase):\n    def setUp(self):\n        self.builder = MagicMock()\n        self.writer = ManualPageWriter(self.builder)\n        self.document = nodes.document()\n\n    def test_translate(self):\n        self.writer.document = self.document\n        self.writer.translate()\n        self.assertIsInstance(self.writer.visitor, ManualPageTranslator)\n        self.assertIsInstance(self.writer.output, str)\n\nclass TestNestedInlineTransform(unittest.TestCase):\n    def setUp(self):\n        self.document = nodes.document()\n        self.transform = NestedInlineTransform(self.document)\n\n    def test_apply(self):\n        node = nodes.literal('foo=', '', nodes.emphasis('1'))\n        self.document.append(node)\n        self.transform.apply()\n        self.assertEqual(len(node), 0)\n        self.assertEqual(node.parent[1].astext(), '1')\n        self.assertEqual(node.parent[2].astext(), '=')\n\nclass TestManualPageTranslator(unittest.TestCase):\n    def setUp(self):\n        self.document = nodes.document()\n        self.builder = MagicMock()\n        self.translator = ManualPageTranslator(self.document, self.builder)\n\n    def test_header(self):\n        header = self.translator.header()\n        self.assertIsInstance(header, str)\n        self.assertIn('TH', header)\n\n    def test_visit_start_of_file(self):\n        node = nodes.Element()\n        self.assertIsNone(self.translator.visit_start_of_file(node))\n\n    def test_depart_start_of_file(self):\n        node = nodes.Element()\n        self.assertIsNone(self.translator.depart_start_of_file(node))\n\n    # Add more tests for other methods in ManualPageTranslator\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_341": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.db.migrations.loader import MigrationLoader\n\nclass TestMigrationLoader(unittest.TestCase):\n    @patch('django.db.migrations.loader.apps')\n    @patch('django.db.migrations.loader.MigrationRecorder')\n    def setUp(self, mock_apps, mock_migration_recorder):\n        # Mocking apps and MigrationRecorder\n        self.mock_apps = mock_apps\n        self.mock_migration_recorder = mock_migration_recorder\n        self.mock_connection = MagicMock()\n        self.loader = MigrationLoader(self.mock_connection, load=False)\n\n    def test_migrations_module(self):\n        self.mock_apps.get_app_config.return_value = MagicMock(name='test_app')\n        module_name, explicit = self.loader.migrations_module('test_app')\n        self.assertEqual(module_name, 'test_app.migrations')\n        self.assertFalse(explicit)\n\n    def test_load_disk(self):\n        self.loader.load_disk()\n        self.assertIsNotNone(self.loader.disk_migrations)\n\n    def test_get_migration(self):\n        # This test assumes that the graph is already built\n        with self.assertRaises(KeyError):\n            self.loader.get_migration('non_existent_app', '0001_initial')\n\n    def test_get_migration_by_prefix(self):\n        # This test assumes that the disk_migrations are already loaded\n        with self.assertRaises(KeyError):\n            self.loader.get_migration_by_prefix('non_existent_app', '0001')\n\n    def test_build_graph(self):\n        self.loader.build_graph()\n        self.assertIsNotNone(self.loader.graph)\n\n    def test_check_consistent_history(self):\n        self.loader.check_consistent_history(self.mock_connection)\n        # Add assertions based on the expected outcome\n\n    def test_detect_conflicts(self):\n        # This test assumes that the graph is already built\n        conflicts = self.loader.detect_conflicts()\n        self.assertIsInstance(conflicts, dict)\n\n    def test_project_state(self):\n        # This test assumes that the graph is already built\n        state = self.loader.project_state()\n        self.assertIsNotNone(state)\n\n    def test_collect_sql(self):\n        # This test assumes that the graph is already built\n        plan = []  # Add a sample plan here\n        statements = self.loader.collect_sql(plan)\n        self.assertIsInstance(statements, list)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_419": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.forms import Form, IntegerField\nfrom django.forms.formsets import BaseFormSet, ManagementForm, formset_factory, all_valid\nfrom django.core.exceptions import ValidationError\n\nclass TestForm(Form):\n    field = IntegerField()\n\nclass TestFormSet(BaseFormSet):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.form = TestForm\n\nclass TestFormSetMethods(unittest.TestCase):\n    def setUp(self):\n        self.formset = TestFormSet()\n\n    def test_management_form(self):\n        self.assertIsInstance(self.formset.management_form, ManagementForm)\n\n    def test_total_form_count(self):\n        self.assertEqual(self.formset.total_form_count(), self.formset.extra)\n\n    def test_initial_form_count(self):\n        self.assertEqual(self.formset.initial_form_count(), 0)\n\n    def test_forms(self):\n        self.assertEqual(len(self.formset.forms), self.formset.total_form_count())\n\n    def test_is_valid(self):\n        self.assertFalse(self.formset.is_valid())\n\n    def test_full_clean(self):\n        self.formset.full_clean()\n        self.assertEqual(len(self.formset.errors), self.formset.total_form_count())\n\nclass TestFormSetFactory(unittest.TestCase):\n    def test_formset_factory(self):\n        TestFormSet = formset_factory(TestForm, extra=2)\n        formset = TestFormSet()\n        self.assertEqual(formset.total_form_count(), 2)\n\nclass TestAllValid(unittest.TestCase):\n    def test_all_valid(self):\n        formset1 = TestFormSet()\n        formset2 = TestFormSet()\n        self.assertFalse(all_valid([formset1, formset2]))\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_964": ["\nimport sys\nimport typing\nimport unittest\nfrom unittest.mock import Mock\nfrom struct import Struct\nfrom types import TracebackType\nfrom typing import Any, Callable, Dict, Generator, List, Optional, Tuple, Type, TypeVar, Union\nfrom docutils import nodes\nfrom docutils.parsers.rst.states import Inliner\nfrom sphinx.util.typing import (\n    restify, stringify, get_type_hints, is_system_TypeVar, TextlikeNode,\n    NoneType, PathMatcher, RoleFunction, OptionSpec, TitleGetter, Inventory,\n    _restify_py37, _restify_py36, _stringify_py37, _stringify_py36\n)\n\nclass TestTypingUtils(unittest.TestCase):\n    def test_get_type_hints(self):\n        # Add tests for get_type_hints function\n        pass\n\n    def test_is_system_TypeVar(self):\n        # Add tests for is_system_TypeVar function\n        pass\n\n    def test_restify(self):\n        # Add tests for restify function\n        pass\n\n    def test_restify_py37(self):\n        # Add tests for _restify_py37 function\n        pass\n\n    def test_restify_py36(self):\n        # Add tests for _restify_py36 function\n        pass\n\n    def test_stringify(self):\n        # Add tests for stringify function\n        pass\n\n    def test_stringify_py37(self):\n        # Add tests for _stringify_py37 function\n        pass\n\n    def test_stringify_py36(self):\n        # Add tests for _stringify_py36 function\n        pass\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1091": ["\nimport unittest\nfrom sympy import sqrt, oo, pretty, nan, Rational, Integer, Float, Exp1, Pi, GoldenRatio, TribonacciConstant, EulerGamma, Catalan, ImaginaryUnit\n\nclass TestNumbers(unittest.TestCase):\n\n    def test_sqrt(self):\n        self.assertEqual(sqrt(4), 2)\n        self.assertEqual(sqrt(-1), ImaginaryUnit)\n\n    def test_oo(self):\n        self.assertTrue(oo > 1000)\n        self.assertEqual(1/oo, 0)\n\n    def test_nan(self):\n        self.assertNotEqual(nan, nan)\n        self.assertTrue(nan != 0)\n\n    def test_Rational(self):\n        self.assertEqual(Rational(3, 4), Rational(6, 8))\n        self.assertEqual(Rational(3.5), Rational(7, 2))\n\n    def test_Integer(self):\n        self.assertEqual(Integer(3.7), 3)\n        self.assertEqual(Integer(-2.9), -2)\n\n    def test_Float(self):\n        self.assertAlmostEqual(Float(3.14159), 3.14159, places=5)\n        self.assertEqual(Float('inf'), oo)\n\n    def test_Exp1(self):\n        self.assertAlmostEqual(Exp1.evalf(), 2.71828, places=5)\n\n    def test_Pi(self):\n        self.assertAlmostEqual(Pi.evalf(), 3.14159, places=5)\n\n    def test_GoldenRatio(self):\n        self.assertAlmostEqual(GoldenRatio.evalf(), 1.61803, places=5)\n\n    def test_TribonacciConstant(self):\n        self.assertAlmostEqual(TribonacciConstant.evalf(), 1.83929, places=5)\n\n    def test_EulerGamma(self):\n        self.assertAlmostEqual(EulerGamma.evalf(), 0.57721, places=5)\n\n    def test_Catalan(self):\n        self.assertAlmostEqual(Catalan.evalf(), 0.91596, places=5)\n\n    def test_ImaginaryUnit(self):\n        self.assertEqual(ImaginaryUnit * ImaginaryUnit, -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_269": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock, mock_open\nfrom pathlib import Path\nfrom types import ModuleType\nimport sys\nimport signal\nimport os\nimport threading\nimport subprocess\nimport time\nimport logging\nimport django\nfrom django.utils import autoreload\nfrom django.utils.autoreload import (\n    WatchmanUnavailable,\n    WatchmanReloader,\n    StatReloader,\n    is_django_module,\n    is_django_path,\n    check_errors,\n    raise_last_exception,\n    ensure_echo_on,\n    iter_all_python_module_files,\n    iter_modules_and_files,\n    common_roots,\n    sys_path_directories,\n    get_child_arguments,\n    trigger_reload,\n    restart_with_reloader,\n    get_reloader,\n    start_django,\n    run_with_reloader,\n)\n\nclass TestDjangoUtilsAutoreload(unittest.TestCase):\n    def setUp(self):\n        self.module = ModuleType('test_module')\n        self.module.__name__ = 'test_module'\n        self.module.__file__ = 'test_file.py'\n        sys.modules['test_module'] = self.module\n\n    def tearDown(self):\n        del sys.modules['test_module']\n\n    def test_is_django_module(self):\n        self.assertTrue(is_django_module(django))\n        self.assertFalse(is_django_module(self.module))\n\n    def test_is_django_path(self):\n        self.assertTrue(is_django_path(django.__file__))\n        self.assertFalse(is_django_path('test_file.py'))\n\n    def test_check_errors(self):\n        @check_errors\n        def raise_error():\n            raise ValueError('test error')\n\n        with self.assertRaises(ValueError):\n            raise_error()\n        self.assertIsNotNone(autoreload._exception)\n\n    def test_raise_last_exception(self):\n        autoreload._exception = (TypeError, TypeError('test error'), None)\n        with self.assertRaises(TypeError):\n            raise_last_exception()\n\n    @patch('django.utils.autoreload.termios')\n    def test_ensure_echo_on(self, mock_termios):\n        ensure_echo_on()\n\n    def test_iter_all_python_module_files(self):\n        files = iter_all_python_module_files()\n        self.assertIn(Path(self.module.__file__), files)\n\n    def test_iter_modules_and_files(self):\n        files = iter_modules_and_files([self.module], [])\n        self.assertIn(Path(self.module.__file__), files)\n\n    def test_common_roots(self):\n        roots = common_roots([Path('/a/b/c'), Path('/a/d/e')])\n        self.assertEqual(roots, (Path('/a'),))\n\n    def test_sys_path_directories(self):\n        sys.path.append('test_dir')\n        with patch('django.utils.autoreload.Path.exists', return_value=True):\n            with patch('django.utils.autoreload.Path.resolve', return_value=Path('test_dir')):\n                dirs = list(sys_path_directories())\n        self.assertIn(Path('test_dir'), dirs)\n\n    @patch('django.utils.autoreload.Path.exists', return_value=True)\n    @patch('django.utils.autoreload.Path.resolve', return_value=Path('test_file.py'))\n    def test_get_child_arguments(self, mock_exists, mock_resolve):\n        sys.argv = ['test_file.py', 'arg1', 'arg2']\n        args = get_child_arguments()\n        self.assertIn(sys.executable, args)\n\n    @patch('django.utils.autoreload.logger.info')\n    def test_trigger_reload(self, mock_info):\n        with self.assertRaises(SystemExit) as cm:\n            trigger_reload('test_file.py')\n        self.assertEqual(cm.exception.code, 3)\n        mock_info.assert_called_with('%s changed, reloading.', 'test_file.py')\n\n    @patch('django.utils.autoreload.subprocess.run')\n    @patch('django.utils.autoreload.get_child_arguments')\n    def test_restart_with_reloader(self, mock_get_child_arguments, mock_run):\n        mock_get_child_arguments.return_value = ['test_file.py']\n        mock_run.return_value.returncode = 0\n        exit_code = restart_with_reloader()\n        self.assertEqual(exit_code, 0)\n\n    @patch('django.utils.autoreload.pywatchman', None)\n    def test_get_reloader_fallback(self):\n        reloader = get_reloader()\n        self.assertIsInstance(reloader, StatReloader)\n\n    @patch('django.utils.autoreload.pywatchman')\n    @patch('django.utils.autoreload.WatchmanReloader.check_availability', return_value=True)\n    def test_get_reloader_watchman(self, mock_check_availability, mock_pywatchman):\n        reloader = get_reloader()\n        self.assertIsInstance(reloader, WatchmanReloader)\n\n    @patch('django.utils.autoreload.ensure_echo_on')\n    @patch('django.utils.autoreload.check_errors')\n    @patch('django.utils.autoreload.threading.Thread')\n    @patch('django.utils.autoreload.get_reloader')\n    def test_start_django(self, mock_get_reloader, mock_thread, mock_check_errors, mock_ensure_echo_on):\n        reloader = MagicMock()\n        mock_get_reloader.return_value = reloader\n        main_func = MagicMock()\n        start_django(reloader, main_func)\n        mock_thread.assert_called_once()\n\n    @patch('django.utils.autoreload.restart_with_reloader')\n    @patch('django.utils.autoreload.start_django')\n    @patch('django.utils.autoreload.get_reloader')\n    def test_run_with_reloader(self, mock_get_reloader, mock_start_django, mock_restart_with_reloader):\n        main_func = MagicMock()\n        os.environ[autoreload.DJANGO_AUTORELOAD_ENV] = 'true'\n        run_with_reloader(main_func)\n        mock_start_django.assert_called_once()\n        os.environ[autoreload.DJANGO_AUTORELOAD_ENV] = 'false'\n        run_with_reloader(main_func)\n        mock_restart_with_reloader.assert_called_once()\n"], "sample_66": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.template.engine import Engine\n\nclass TestEngine(unittest.TestCase):\n    def setUp(self):\n        self.engine = Engine()\n\n    def test_init_defaults(self):\n        self.assertEqual(self.engine.dirs, [])\n        self.assertEqual(self.engine.app_dirs, False)\n        self.assertEqual(self.engine.autoescape, True)\n        self.assertEqual(self.engine.context_processors, [])\n        self.assertEqual(self.engine.debug, False)\n        self.assertEqual(self.engine.loaders, ['django.template.loaders.filesystem.Loader'])\n        self.assertEqual(self.engine.string_if_invalid, '')\n        self.assertEqual(self.engine.file_charset, 'utf-8')\n        self.assertEqual(self.engine.libraries, {})\n        self.assertEqual(self.engine.builtins, Engine.default_builtins)\n\n    def test_init_custom_values(self):\n        engine = Engine(dirs=['/path/to/templates'], app_dirs=True, context_processors=['myapp.context_processors.custom'],\n                        debug=True, loaders=['myapp.loaders.custom'], string_if_invalid='Invalid',\n                        file_charset='iso-8859-1', libraries={'custom': 'myapp.templatetags.custom'},\n                        builtins=['myapp.templatetags.custom_builtins'], autoescape=False)\n        self.assertEqual(engine.dirs, ['/path/to/templates'])\n        self.assertEqual(engine.app_dirs, True)\n        self.assertEqual(engine.autoescape, False)\n        self.assertEqual(engine.context_processors, ['myapp.context_processors.custom'])\n        self.assertEqual(engine.debug, True)\n        self.assertEqual(engine.loaders, [('django.template.loaders.cached.Loader', ['myapp.loaders.custom'])])\n        self.assertEqual(engine.string_if_invalid, 'Invalid')\n        self.assertEqual(engine.file_charset, 'iso-8859-1')\n        self.assertEqual(engine.libraries, {'custom': 'myapp.templatetags.custom'})\n        self.assertEqual(engine.builtins, Engine.default_builtins + ['myapp.templatetags.custom_builtins'])\n\n    @patch('django.template.engine.import_string')\n    def test_template_context_processors(self, mock_import_string):\n        mock_import_string.return_value = Mock()\n        context_processors = self.engine.template_context_processors\n        self.assertEqual(mock_import_string.call_count, len(context_processors))\n\n    @patch('django.template.engine.import_library')\n    def test_get_template_builtins(self, mock_import_library):\n        mock_import_library.return_value = Mock()\n        builtins = self.engine.get_template_builtins(['myapp.templatetags.custom_builtins'])\n        self.assertEqual(len(builtins), 1)\n        mock_import_library.assert_called_with('myapp.templatetags.custom_builtins')\n\n    @patch('django.template.engine.import_library')\n    def test_get_template_libraries(self, mock_import_library):\n        mock_import_library.return_value = Mock()\n        libraries = self.engine.get_template_libraries({'custom': 'myapp.templatetags.custom'})\n        self.assertEqual(len(libraries), 1)\n        mock_import_library.assert_called_with('myapp.templatetags.custom')\n\n    @patch('django.template.engine.Engine.find_template_loader')\n    def test_template_loaders(self, mock_find_template_loader):\n        mock_find_template_loader.return_value = Mock()\n        loaders = self.engine.template_loaders\n        self.assertEqual(len(loaders), 1)\n        mock_find_template_loader.assert_called_with('django.template.loaders.filesystem.Loader')\n\n    @patch('django.template.engine.import_string')\n    def test_find_template_loader(self, mock_import_string):\n        mock_import_string.return_value = Mock()\n        loader = self.engine.find_template_loader('django.template.loaders.filesystem.Loader')\n        self.assertIsNotNone(loader)\n        mock_import_string.assert_called_with('django.template.loaders.filesystem.Loader')\n\n    @patch('django.template.engine.Engine.find_template')\n    def test_get_template(self, mock_find_template):\n        mock_find_template.return_value = (Mock(), Mock())\n        template = self.engine.get_template('template_name')\n        self.assertIsNotNone(template)\n        mock_find_template.assert_called_with('template_name')\n\n    @patch('django.template.engine.Engine.get_template')\n    def test_render_to_string(self, mock_get_template):\n        mock_get_template.return_value.render.return_value = 'Rendered template'\n        result = self.engine.render_to_string('template_name', {'key': 'value'})\n        self.assertEqual(result, 'Rendered template')\n        mock_get_template.assert_called_with('template_name')\n\n    @patch('django.template.engine.Engine.get_template')\n    def test_select_template(self, mock_get_template):\n        mock_get_template.return_value = Mock()\n        template = self.engine.select_template(['template_name1', 'template_name2'])\n        self.assertIsNotNone(template)\n        mock_get_template.assert_called_with('template_name1')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1039": ["\nimport unittest\nfrom sympy import symbols, sqrt, sin, cos, tan, Limit, Integral, Sum, Matrix, EulerGamma, GoldenRatio, exp, pi, oo, I, Derivative, Function, Eq, Ne, Gt, Lt, Ge, Le\nfrom sympy.printing.mathml import mathml, MathMLContentPrinter, MathMLPresentationPrinter\n\nclass TestMathMLPrinter(unittest.TestCase):\n    def setUp(self):\n        self.x = symbols('x')\n        self.A = Matrix([[1, 2], [3, 4]])\n        self.f = Function('f')\n\n    def test_mathml_content_printer(self):\n        printer = MathMLContentPrinter()\n        self.assertEqual(printer.doprint(self.x + 1), '<apply><plus/><ci>x</ci><cn>1</cn></apply>')\n        self.assertEqual(printer.doprint(sqrt(self.x)), '<apply><root><ci>x</ci></root></apply>')\n        self.assertEqual(printer.doprint(sin(self.x)), '<apply><sin><ci>x</ci></sin></apply>')\n        self.assertEqual(printer.doprint(Limit(self.x, self.x, 0)), '<apply><limit><bvar><ci>x</ci></bvar><lowlimit><cn>0</cn></lowlimit><ci>x</ci></limit></apply>')\n        self.assertEqual(printer.doprint(Integral(self.x, (self.x, 0, 1))), '<apply><int><bvar><ci>x</ci></bvar><lowlimit><cn>0</cn></lowlimit><uplimit><cn>1</cn></uplimit><ci>x</ci></int></apply>')\n        self.assertEqual(printer.doprint(Sum(self.x, (self.x, 0, 1))), '<apply><sum><bvar><ci>x</ci></bvar><lowlimit><cn>0</cn></lowlimit><uplimit><cn>1</cn></uplimit><ci>x</ci></sum></apply>')\n        self.assertEqual(printer.doprint(self.A), '<matrix><matrixrow><cn>1</cn><cn>2</cn></matrixrow><matrixrow><cn>3</cn><cn>4</cn></matrixrow></matrix>')\n        self.assertEqual(printer.doprint(EulerGamma), '<eulergamma/>')\n        self.assertEqual(printer.doprint(GoldenRatio), '<cn>\\N{GREEK SMALL LETTER PHI}</cn>')\n        self.assertEqual(printer.doprint(exp(1)), '<exponentiale/>')\n        self.assertEqual(printer.doprint(pi), '<pi/>')\n        self.assertEqual(printer.doprint(oo), '<infinity/>')\n        self.assertEqual(printer.doprint(-oo), '<apply><minus/><infinity/></apply>')\n        self.assertEqual(printer.doprint(I), '<imaginaryi/>')\n        self.assertEqual(printer.doprint(Derivative(self.f(self.x), self.x)), '<apply><diff><bvar><ci>x</ci></bvar><ci>f</ci><ci>x</ci></diff></apply>')\n        self.assertEqual(printer.doprint(Eq(self.x, 1)), '<apply><eq><ci>x</ci><cn>1</cn></eq></apply>')\n        self.assertEqual(printer.doprint(Ne(self.x, 1)), '<apply><neq><ci>x</ci><cn>1</cn></neq></apply>')\n        self.assertEqual(printer.doprint(Gt(self.x, 1)), '<apply><geq><ci>x</ci><cn>1</cn></geq></apply>')\n        self.assertEqual(printer.doprint(Lt(self.x, 1)), '<apply><leq><ci>x</ci><cn>1</cn></leq></apply>')\n        self.assertEqual(printer.doprint(Ge(self.x, 1)), '<apply><geq><ci>x</ci><cn>1</cn></geq></apply>')\n        self.assertEqual(printer.doprint(Le(self.x, 1)), '<apply><leq><ci>x</ci><cn>1</cn></leq></apply>')\n\n    def test_mathml_presentation_printer(self):\n        printer = MathMLPresentationPrinter()\n        self.assertEqual(printer.doprint(self.x + 1), '<mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow>')\n        self.assertEqual(printer.doprint(sqrt(self.x)), '<msqrt><mi>x</mi></msqrt>')\n        self.assertEqual(printer.doprint(sin(self.x)), '<sin><mi>x</mi></sin>')\n        self.assertEqual(printer.doprint(Limit(self.x, self.x, 0)), '<mrow><munder><mi>lim</mi><mrow><mi>x</mi><mo>&#x2192;</mo><mn>0</mn></mrow></munder><mi>x</mi></mrow>')\n        self.assertEqual(printer.doprint(Integral(self.x, (self.x, 0, 1))), '<mrow><mrow><mo>&int;</mo><mrow><mi>x</mi><mo>&dd;</mo><mi>x</mi></mrow></mrow><mo>=</mo><mi>x</mi></mrow>')\n        self.assertEqual(printer.doprint(Sum(self.x, (self.x, 0, 1))), '<mrow><munderover><mo>&#x2211;</mo><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow><mn>1</mn></munderover><mi>x</mi></mrow>')\n        self.assertEqual(printer.doprint(self.A), '<mfenced><mtable><mtr><mtd><mn>1</mn></mtd><mtd><mn>2</mn></mtd></mtr><mtr><mtd><mn>3</mn></mtd><mtd><mn>4</mn></mtd></mtr></mtable></mfenced>')\n        self.assertEqual(printer.doprint(EulerGamma), '<mi>&#x03B3;</mi>')\n        self.assertEqual(printer.doprint(GoldenRatio), '<mi>\\N{GREEK SMALL LETTER PHI}</mi>')\n        self.assertEqual(printer.doprint(exp(1)), '<mi>&ExponentialE;</mi>')\n        self.assertEqual(printer.doprint(pi), '<mi>&pi;</mi>')\n        self.assertEqual(printer.doprint(oo), '<mi>&#x221E;</mi>')\n        self.assertEqual(printer.doprint(-oo), '<mrow><mo>-</mo><mi>&#x221E;</mi></mrow>')\n        self.assertEqual(printer.doprint(I), '<mi>&ImaginaryI;</mi>')\n        self.assertEqual(printer.doprint(Derivative(self.f(self.x), self.x)), '<mrow><mfrac><mrow><mi>d</mi><mfenced><mi>f</mi><mi>x</mi></mfenced></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mrow>')\n        self.assertEqual(printer.doprint(Eq(self.x, 1)), '<mrow><mi>x</mi><mo>=</mo><mn>1</mn></mrow>')\n        self.assertEqual(printer.doprint(Ne(self.x, 1)), '<mrow><mi>x</mi><mo>&#x2260;</mo><mn>1</mn></mrow>')\n        self.assertEqual(printer.doprint(Gt(self.x, 1)), '<mrow><mi>x</mi><mo>&gt;</mo><mn>1</mn></mrow>')\n        self.assertEqual(printer.doprint(Lt(self.x, 1)), '<mrow><mi>x</mi><mo>&lt;</mo><mn>1</mn></mrow>')\n        self.assertEqual(printer.doprint(Ge(self.x, 1)), '<mrow><mi>x</mi><mo>&#x2265;</mo><mn>1</mn></mrow>')\n        self.assertEqual(printer.doprint(Le(self.x, 1)), '<mrow><mi>x</mi><mo>&#x2264;</mo><mn>1</mn></mrow>')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_361": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.utils.html import (\n    conditional_escape, escape, escapejs, format_html, html_safe, json_script, linebreaks,\n    smart_urlquote, strip_spaces_between_tags, strip_tags, urlize,\n)\nfrom django.utils.safestring import SafeString\n\nclass TestHTMLUtils(unittest.TestCase):\n    def test_escape(self):\n        self.assertEqual(escape(\"<script>alert('hello');</script>\"), \"&lt;script&gt;alert(&#x27;hello&#x27;);&lt;/script&gt;\")\n        self.assertIsInstance(escape(\"<p>hello</p>\"), SafeString)\n\n    def test_escapejs(self):\n        self.assertEqual(escapejs(\"<script>alert('hello');</script>\"), \"\\\\u003Cscript\\\\u003Ealert(\\\\u0027hello\\\\u0027);\\\\u003C/script\\\\u003E\")\n        self.assertIsInstance(escapejs(\"<p>hello</p>\"), SafeString)\n\n    def test_json_script(self):\n        self.assertEqual(json_script({\"key\": \"value\"}), '<script type=\"application/json\">{\"key\": \"value\"}</script>')\n        self.assertIsInstance(json_script({\"key\": \"value\"}), SafeString)\n\n    def test_conditional_escape(self):\n        self.assertEqual(conditional_escape(\"<script>alert('hello');</script>\"), \"&lt;script&gt;alert(&#x27;hello&#x27;);&lt;/script&gt;\")\n        self.assertEqual(conditional_escape(SafeString(\"<p>hello</p>\")), \"<p>hello</p>\")\n\n    def test_format_html(self):\n        self.assertEqual(format_html(\"Hello, {}!\", \"world\"), \"Hello, world!\")\n        self.assertIsInstance(format_html(\"Hello, {}!\", \"world\"), SafeString)\n\n    def test_linebreaks(self):\n        self.assertEqual(linebreaks(\"Hello\\n\\nWorld\"), \"<p>Hello</p>\\n\\n<p>World</p>\")\n        self.assertIsInstance(linebreaks(\"Hello\\n\\nWorld\"), SafeString)\n\n    def test_strip_tags(self):\n        self.assertEqual(strip_tags(\"<p>Hello, <b>World</b>!</p>\"), \"Hello, World!\")\n        self.assertIsInstance(strip_tags(\"<p>Hello, <b>World</b>!</p>\"), SafeString)\n\n    def test_strip_spaces_between_tags(self):\n        self.assertEqual(strip_spaces_between_tags(\"<p> Hello, <b> World </b>! </p>\"), \"<p>Hello,<b>World</b>!</p>\")\n        self.assertIsInstance(strip_spaces_between_tags(\"<p> Hello, <b> World </b>! </p>\"), SafeString)\n\n    def test_smart_urlquote(self):\n        self.assertEqual(smart_urlquote(\"http://example.com/path?query=value\"), \"http://example.com/path?query=value\")\n        self.assertEqual(smart_urlquote(\"http://example.com/path?query=value with spaces\"), \"http://example.com/path?query=value%20with%20spaces\")\n\n    def test_urlize(self):\n        self.assertEqual(urlize(\"Check out http://example.com.\"), 'Check out <a href=\"http://example.com\">http://example.com</a>.')\n        self.assertIsInstance(urlize(\"Check out http://example.com.\"), SafeString)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_240": ["\nimport unittest\nfrom unittest.mock import patch\nfrom datetime import datetime, timedelta\n\nfrom django.test import RequestFactory, override_settings\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.auth.tokens import PasswordResetTokenGenerator\n\nUser = get_user_model()\n\nclass TestPasswordResetTokenGenerator(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.user = User.objects.create_user(\n            username='testuser', email='test@test.com', password='testpassword'\n        )\n        self.token_generator = PasswordResetTokenGenerator()\n\n    @patch.object(PasswordResetTokenGenerator, '_now', return_value=datetime(2001, 1, 1))\n    def test_make_token(self, mock_now):\n        token = self.token_generator.make_token(self.user)\n        self.assertIsInstance(token, str)\n\n    @patch.object(PasswordResetTokenGenerator, '_now', return_value=datetime(2001, 1, 1))\n    def test_check_token(self, mock_now):\n        token = self.token_generator.make_token(self.user)\n        self.assertTrue(self.token_generator.check_token(self.user, token))\n\n    @override_settings(PASSWORD_RESET_TIMEOUT=1)\n    @patch.object(PasswordResetTokenGenerator, '_now', return_value=datetime(2001, 1, 1, 0, 0, 1))\n    def test_check_token_expired(self, mock_now):\n        token = self.token_generator.make_token(self.user)\n        self.assertFalse(self.token_generator.check_token(self.user, token))\n\n    @patch.object(PasswordResetTokenGenerator, '_now', return_value=datetime(2001, 1, 1))\n    def test_check_token_invalid(self, mock_now):\n        token = 'invalid-token'\n        self.assertFalse(self.token_generator.check_token(self.user, token))\n\n    # Add more tests as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_654": ["\nimport pytest\nimport warnings\nfrom _pytest.recwarn import WarningsRecorder, WarningsChecker\n\ndef test_warnings_recorder():\n    with pytest.warns(UserWarning) as record:\n        warnings.warn(\"Test warning\", UserWarning)\n    assert len(record) == 1\n    assert str(record[0].message) == \"Test warning\"\n\ndef test_warnings_checker():\n    checker = WarningsChecker(UserWarning)\n    with checker:\n        warnings.warn(\"Test warning\", UserWarning)\n    assert len(checker) == 1\n    assert str(checker[0].message) == \"Test warning\"\n\ndef test_warns_context_manager():\n    with pytest.warns(UserWarning, match=\"Test warning\"):\n        warnings.warn(\"Test warning\", UserWarning)\n\ndef test_warns_function_call():\n    def func():\n        warnings.warn(\"Test warning\", UserWarning)\n    pytest.warns(UserWarning, func)\n\ndef test_deprecated_call_context_manager():\n    def api_call_v2():\n        warnings.warn('use v3 of this api', DeprecationWarning)\n        return 200\n    with pytest.deprecated_call():\n        assert api_call_v2() == 200\n\ndef test_deprecated_call_function_call():\n    def api_call_v2():\n        warnings.warn('use v3 of this api', DeprecationWarning)\n        return 200\n    assert pytest.deprecated_call(api_call_v2) == 200\n"], "sample_111": ["\nfrom django.test import TestCase, RequestFactory\nfrom django.contrib.admin.templatetags.admin_modify import prepopulated_fields_js, submit_row, cell_count\nfrom django.contrib.admin.sites import AdminSite\nfrom django.contrib.admin.options import InlineModelAdmin\nfrom django.db import models\nfrom django.template import Context, Template\n\nclass MockModel(models.Model):\n    name = models.CharField(max_length=200)\n\nclass MockInlineModel(models.Model):\n    name = models.CharField(max_length=200)\n    mock_model = models.ForeignKey(MockModel, on_delete=models.CASCADE)\n\nclass MockInlineAdmin(InlineModelAdmin):\n    model = MockInlineModel\n\nclass MockAdmin(admin.ModelAdmin):\n    prepopulated_fields = {\"name\": (\"name\",)}\n    inlines = [MockInlineAdmin]\n\nclass TestAdminTemplateTags(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.site = AdminSite()\n        self.model_admin = MockAdmin(model=MockModel, admin_site=self.site)\n\n    def test_prepopulated_fields_js(self):\n        request = self.factory.get('/admin/test/')\n        request.user = self.site.get_app_config('auth').user_model.objects.create_superuser('admin', 'admin@example.com', 'password')\n        obj = MockModel.objects.create(name='Test')\n        change_form_template = Template('{% load admin_modify %}{% prepopulated_fields_js %}{{ prepopulated_fields_json }}')\n        context = self.model_admin.admin_site.each_context(request)\n        context['adminform'] = self.model_admin.get_form(request, obj)(instance=obj)\n        response = change_form_template.render(Context(context))\n        self.assertIn('Test', response)\n\n    def test_submit_row(self):\n        request = self.factory.get('/admin/test/')\n        context = self.model_admin.admin_site.each_context(request)\n        context['add'] = True\n        context['change'] = False\n        context['is_popup'] = False\n        context['save_as'] = False\n        context['has_add_permission'] = True\n        context['has_change_permission'] = False\n        context['has_view_permission'] = True\n        context['has_editable_inline_admin_formsets'] = False\n        context['has_delete_permission'] = True\n        result = submit_row(context)\n        self.assertTrue(result['show_save_and_add_another'])\n        self.assertFalse(result['show_save_and_continue'])\n\n    def test_cell_count(self):\n        request = self.factory.get('/admin/test/')\n        obj = MockModel.objects.create(name='Test')\n        inline_admin_formset = self.model_admin.get_inline_formsets(request, obj)\n        inline_admin_form = inline_admin_formset[0].form(instance=MockInlineModel(mock_model=obj))\n        self.assertEqual(cell_count(inline_admin_form), 3)\n"], "sample_900": ["\nimport unittest\nfrom unittest.mock import patch\nimport numpy as np\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.datasets import make_classification, make_regression\n\nclass TestMLPClassifier(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, n_features=20, n_informative=2, random_state=42)\n        self.clf = MLPClassifier(random_state=42)\n\n    def test_fit(self):\n        self.clf.fit(self.X, self.y)\n        self.assertIsNotNone(self.clf.coefs_)\n\n    def test_predict(self):\n        self.clf.fit(self.X, self.y)\n        y_pred = self.clf.predict(self.X)\n        self.assertEqual(len(y_pred), len(self.y))\n\n    def test_predict_proba(self):\n        self.clf.fit(self.X, self.y)\n        y_proba = self.clf.predict_proba(self.X)\n        self.assertEqual(y_proba.shape, (len(self.y), 2))\n\n    def test_predict_log_proba(self):\n        self.clf.fit(self.X, self.y)\n        y_log_proba = self.clf.predict_log_proba(self.X)\n        self.assertEqual(y_log_proba.shape, (len(self.y), 2))\n\n    def test_unfitted_predict(self):\n        with self.assertRaises(NotFittedError):\n            self.clf.predict(self.X)\n\nclass TestMLPRegressor(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_regression(n_samples=100, n_features=20, n_informative=2, random_state=42)\n        self.reg = MLPRegressor(random_state=42)\n\n    def test_fit(self):\n        self.reg.fit(self.X, self.y)\n        self.assertIsNotNone(self.reg.coefs_)\n\n    def test_predict(self):\n        self.reg.fit(self.X, self.y)\n        y_pred = self.reg.predict(self.X)\n        self.assertEqual(len(y_pred), len(self.y))\n\n    def test_unfitted_predict(self):\n        with self.assertRaises(NotFittedError):\n            self.reg.predict(self.X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_533": ["\nimport unittest\nimport numpy as np\nfrom matplotlib.contour import QuadContourSet, ContourSet, _find_closest_point_on_path\n\nclass TestContourSet(unittest.TestCase):\n    def setUp(self):\n        # Setup common data for tests\n        self.levels = np.array([0.5, 1.0, 1.5])\n        self.allsegs = [[np.array([[0, 0], [1, 1]]), np.array([[2, 2], [3, 3]])]]\n        self.axes = None  # Mock axes object\n\n    def test_init(self):\n        cs = ContourSet(self.axes, self.levels, self.allsegs)\n        self.assertEqual(len(cs.collections), len(self.levels))\n\n    def test_find_nearest_contour(self):\n        cs = ContourSet(self.axes, self.levels, self.allsegs)\n        x, y = 1.5, 1.5\n        contour, segment, index, xmin, ymin, d2 = cs.find_nearest_contour(x, y)\n        self.assertIsNotNone(contour)\n        self.assertEqual(xmin, 1)\n        self.assertEqual(ymin, 1)\n\nclass TestQuadContourSet(unittest.TestCase):\n    def setUp(self):\n        # Setup common data for tests\n        self.x = np.array([0, 1, 2])\n        self.y = np.array([0, 1, 2])\n        self.z = np.array([[0, 0, 0], [1, 1, 1], [2, 2, 2]])\n        self.axes = None  # Mock axes object\n\n    def test_init(self):\n        cs = QuadContourSet(self.axes, self.x, self.y, self.z)\n        self.assertIsNotNone(cs._contour_generator)\n\n    def test_contour_args(self):\n        cs = QuadContourSet(self.axes)\n        x, y, z = cs._contour_args((self.z,), {})\n        self.assertEqual(x.shape, self.z.shape)\n        self.assertEqual(y.shape, self.z.shape)\n\nclass TestContourHelperFunctions(unittest.TestCase):\n    def test_find_closest_point_on_path(self):\n        xys = np.array([[0, 0], [1, 1], [2, 2]])\n        p = np.array([1.5, 1.5])\n        d2min, proj, imin = _find_closest_point_on_path(xys, p)\n        self.assertEqual(d2min, 0.5)\n        np.testing.assert_array_equal(proj, np.array([1, 1]))\n        np.testing.assert_array_equal(imin, np.array([0, 1]))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_578": ["\nimport unittest\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom seaborn._marks.bar import Bar, Bars\nfrom seaborn._core.scales import Scale\n\nclass TestBarMarks(unittest.TestCase):\n\n    def setUp(self):\n        self.data = pd.DataFrame({\n            'x': [1, 2, 3],\n            'y': [4, 5, 6],\n            'width': [0.5, 0.5, 0.5],\n            'baseline': [0, 0, 0]\n        })\n        self.scales = {'x': Scale(domain=[0, 4], range=[0, 4]), 'y': Scale(domain=[0, 7], range=[0, 7])}\n        self.fig, self.ax = plt.subplots()\n\n    def test_bar_plot(self):\n        bar = Bar()\n        bar._plot(lambda: [(None, self.data, self.ax)], self.scales, 'x')\n        self.assertEqual(len(self.ax.patches), 3)\n\n    def test_bars_plot(self):\n        bars = Bars()\n        bars._plot(lambda: [(None, self.data, self.ax)], self.scales, 'x')\n        self.assertEqual(len(self.ax.collections), 1)\n\n    def test_bar_legend_artist(self):\n        bar = Bar()\n        artist = bar._legend_artist(['color'], 'C0', self.scales)\n        self.assertIsNotNone(artist)\n\n    def test_bars_legend_artist(self):\n        bars = Bars()\n        artist = bars._legend_artist(['color'], 'C0', self.scales)\n        self.assertIsNotNone(artist)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_126": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.migrations import ProjectState, operations\nfrom django.db.migrations.autodetector import MigrationAutodetector\n\nclass TestMigrationAutodetector(unittest.TestCase):\n    def setUp(self):\n        self.from_state = Mock(spec=ProjectState)\n        self.to_state = Mock(spec=ProjectState)\n        self.questioner = Mock()\n\n    def test_detect_changes(self):\n        autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n        changes = autodetector.changes(graph=None, trim_to_apps=None, convert_apps=None, migration_name=None)\n        self.assertIsInstance(changes, dict)\n\n    def test_deep_deconstruct(self):\n        autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n        obj = Mock()\n        obj.deconstruct.return_value = (\"path\", [\"arg\"], {\"kwarg\": \"value\"})\n        deconstructed = autodetector.deep_deconstruct(obj)\n        self.assertEqual(deconstructed, (\"path\", [\"arg\"], {\"kwarg\": \"value\"}))\n\n    def test_only_relation_agnostic_fields(self):\n        autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n        fields = [(\"field1\", Mock()), (\"field2\", Mock())]\n        fields[0][1].remote_field.model = Mock()\n        fields[1].remote_field.model = Mock()\n        relation_agnostic_fields = autodetector.only_relation_agnostic_fields(fields)\n        self.assertIsInstance(relation_agnostic_fields, list)\n\n    # Add more tests for other methods as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_262": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.utils.functional import cached_property, classproperty, lazy, lazystr, keep_lazy, keep_lazy_text, LazyObject\n\nclass TestFunctional(unittest.TestCase):\n    def setUp(self):\n        self.mock_func = Mock(return_value='test')\n\n    def test_cached_property(self):\n        class TestClass:\n            @cached_property\n            def test_property(self):\n                return self.mock_func()\n\n        obj = TestClass()\n        self.assertEqual(obj.test_property, 'test')\n        self.mock_func.assert_called_once()\n        self.assertEqual(obj.test_property, 'test')\n        self.mock_func.assert_called_once()\n\n    def test_classproperty(self):\n        class TestClass:\n            @classproperty\n            def test_property(cls):\n                return cls.__name__\n\n        self.assertEqual(TestClass.test_property, 'TestClass')\n\n    def test_lazy(self):\n        lazy_func = lazy(self.mock_func, str)\n        self.assertIsInstance(lazy_func(), str)\n        self.mock_func.assert_not_called()\n        self.assertEqual(str(lazy_func()), 'test')\n        self.mock_func.assert_called_once()\n\n    def test_lazystr(self):\n        lazy_str = lazystr('test')\n        self.assertIsInstance(lazy_str, str)\n        self.assertEqual(lazy_str, 'test')\n\n    def test_keep_lazy(self):\n        @keep_lazy(str)\n        def test_func(a, b):\n            return a + b\n\n        self.assertEqual(test_func('test', 'test'), 'testtest')\n        lazy_func = test_func(lazystr('test'), 'test')\n        self.assertIsInstance(lazy_func, str)\n        self.assertEqual(lazy_func, 'testtest')\n\n    def test_keep_lazy_text(self):\n        @keep_lazy_text\n        def test_func(a, b):\n            return a + b\n\n        self.assertEqual(test_func('test', 'test'), 'testtest')\n        lazy_func = test_func(lazystr('test'), 'test')\n        self.assertIsInstance(lazy_func, str)\n        self.assertEqual(lazy_func, 'testtest')\n\n    def test_LazyObject(self):\n        class TestLazyObject(LazyObject):\n            def _setup(self):\n                self._wrapped = 'test'\n\n        obj = TestLazyObject()\n        self.assertEqual(obj._wrapped, 'test')\n        obj.test = 'new_test'\n        self.assertEqual(obj.test, 'new_test')\n"], "sample_148": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db import models\nfrom django.contrib.admin.utils import (\n    NestedObjects, display_for_field, display_for_value, flatten,\n    flatten_fieldsets, label_for_field, lookup_field, quote,\n    prepare_lookup_value, unquote, lookup_needs_distinct,\n    model_format_dict, model_ngettext, get_deleted_objects,\n    reverse_field_path, get_fields_from_path, construct_change_message,\n    _get_changed_field_labels_from_form\n)\nfrom django.test import RequestFactory, TestCase\nfrom django.contrib.admin.sites import AdminSite\nfrom django.contrib import admin\nfrom django.utils.translation import gettext as _\n\nclass TestUtils(TestCase):\n\n    def test_prepare_lookup_value(self):\n        self.assertEqual(prepare_lookup_value('key__in', '1,2,3'), ['1', '2', '3'])\n        self.assertEqual(prepare_lookup_value('key__isnull', 'true'), False)\n        self.assertEqual(prepare_lookup_value('key__isnull', '0'), False)\n        self.assertEqual(prepare_lookup_value('key__isnull', 'false'), False)\n        self.assertEqual(prepare_lookup_value('key__isnull', ''), True)\n\n    def test_quote(self):\n        self.assertEqual(quote('test/string:'), '_2Ftest_3Astring_')\n        self.assertEqual(quote(123), 123)\n\n    def test_unquote(self):\n        self.assertEqual(unquote('_2Ftest_3Astring_'), 'test/string:')\n\n    # Add more tests for other functions...\n\nclass TestNestedObjects(TestCase):\n\n    def test_nested_objects(self):\n        # Create test objects and test the nested function...\n        pass\n\nclass TestModelFunctions(TestCase):\n\n    def test_model_format_dict(self):\n        # Create test model and test the model_format_dict function...\n        pass\n\nclass TestLabelForField(TestCase):\n\n    def test_label_for_field(self):\n        # Create test model and test the label_for_field function...\n        pass\n\n# Add more test classes for other functions...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_722": ["\nimport unittest\nimport numpy as np\nfrom sklearn.cluster import k_means_\n\nclass TestKMeans(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])\n        self.n_clusters = 2\n        self.n_init = 3\n        self.max_iter = 300\n        self.random_state = 0\n\n    def test_k_init(self):\n        random_state = np.random.RandomState(self.random_state)\n        x_squared_norms = np.sum(self.X ** 2, axis=1)\n        centers = k_means_._k_init(self.X, self.n_clusters, x_squared_norms, random_state)\n        self.assertEqual(centers.shape, (self.n_clusters, self.X.shape[1]))\n\n    def test_labels_inertia(self):\n        centers = np.array([[1, 2], [4, 2]])\n        x_squared_norms = np.sum(self.X ** 2, axis=1)\n        labels, inertia = k_means_._labels_inertia(self.X, x_squared_norms, centers)\n        self.assertEqual(labels.shape, (self.X.shape[0],))\n        self.assertIsInstance(inertia, float)\n\n    def test_init_centroids(self):\n        centers = k_means_._init_centroids(self.X, self.n_clusters, init='k-means++')\n        self.assertEqual(centers.shape, (self.n_clusters, self.X.shape[1]))\n\n    def test_kmeans_single_lloyd(self):\n        random_state = np.random.RandomState(self.random_state)\n        labels, inertia, centers, n_iter = k_means_._kmeans_single_lloyd(\n            self.X, self.n_clusters, max_iter=self.max_iter, init='k-means++',\n            random_state=random_state)\n        self.assertEqual(labels.shape, (self.X.shape[0],))\n        self.assertIsInstance(inertia, float)\n        self.assertEqual(centers.shape, (self.n_clusters, self.X.shape[1]))\n        self.assertIsInstance(n_iter, int)\n\n    def test_kmeans(self):\n        centers, labels, inertia = k_means_.k_means(\n            self.X, self.n_clusters, init='k-means++', n_init=self.n_init,\n            max_iter=self.max_iter, random_state=self.random_state)\n        self.assertEqual(labels.shape, (self.X.shape[0],))\n        self.assertIsInstance(inertia, float)\n        self.assertEqual(centers.shape, (self.n_clusters, self.X.shape[1]))\n\n    def test_mini_batch_step(self):\n        centers = np.array([[1, 2], [4, 2]])\n        counts = np.array([1, 1])\n        old_center_buffer = np.zeros_like(centers)\n        compute_squared_diff = True\n        distances = np.zeros(self.X.shape[0])\n        random_reassign = True\n        random_state = np.random.RandomState(self.random_state)\n        inertia, squared_diff = k_means_._mini_batch_step(\n            self.X, np.sum(self.X ** 2, axis=1), centers, counts,\n            old_center_buffer, compute_squared_diff, distances,\n            random_reassign, random_state)\n        self.assertIsInstance(inertia, float)\n        self.assertIsInstance(squared_diff, float)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_982": ["\nimport unittest\nfrom sympy import Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt\nfrom sympy.core.numbers import igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom mpmath.libmp.libmpf import fnan\n\nclass TestNumbers(unittest.TestCase):\n\n    def test_rational(self):\n        self.assertEqual(Rational(1, 2) + Rational(1, 2), Rational(1))\n        self.assertEqual(Rational(1, 2) * Rational(2, 3), Rational(1, 3))\n\n    def test_float(self):\n        self.assertAlmostEqual(Float('1.23') + Float('0.77'), Float('2.00'))\n        self.assertAlmostEqual(Float('1.23') * Float('0.77'), Float('0.9401'))\n\n    def test_integer(self):\n        self.assertEqual(Integer(123) + Integer(456), Integer(579))\n        self.assertEqual(Integer(123) * Integer(456), Integer(56088))\n\n    def test_constants(self):\n        self.assertEqual(pi.evalf(), Float('3.141592653589793'))\n        self.assertEqual(E.evalf(), Float('2.718281828459045'))\n\n    def test_igcd(self):\n        self.assertEqual(igcd(12, 15), 3)\n        self.assertEqual(igcd(24, 36), 12)\n\n    def test_ilcm(self):\n        self.assertEqual(ilcm(12, 15), 60)\n        self.assertEqual(ilcm(24, 36), 72)\n\n    def test_integer_nthroot(self):\n        self.assertEqual(integer_nthroot(8, 3), (2, True))\n        self.assertEqual(integer_nthroot(9, 2), (3, True))\n\n    # Add more tests as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_698": ["\nimport pytest\nfrom _pytest import nodes\nfrom _pytest.config import Config\nfrom _pytest.main import Session\nfrom _pytest.warning_types import PytestWarning\nfrom _pytest.mark import MARK_GEN\nfrom _pytest.compat import LEGACY_PATH, legacy_path\nfrom _pytest.outcomes import fail\nfrom _pytest.store import Store\nfrom pathlib import Path\nfrom _pytest._code.code import ExceptionInfo\nfrom _pytest._code import getfslineno\n\ndef test_node_initialization():\n    config = Config()\n    session = Session()\n    node = nodes.Node(\"test_node\", parent=None, config=config, session=session)\n    assert node.name == \"test_node\"\n    assert node.parent is None\n    assert node.config == config\n    assert node.session == session\n    assert node.path == Path(session.config.rootpath)\n    assert node.nodeid == \"test_node\"\n    assert node._store == Store()\n\ndef test_node_from_parent():\n    config = Config()\n    session = Session()\n    parent = nodes.Node(\"parent_node\", config=config, session=session)\n    node = nodes.Node.from_parent(parent, name=\"child_node\")\n    assert node.name == \"child_node\"\n    assert node.parent == parent\n    assert node.config == config\n    assert node.session == session\n    assert node.path == parent.path\n    assert node.nodeid == \"parent_node::child_node\"\n\ndef test_node_warn():\n    config = Config()\n    session = Session()\n    node = nodes.Node(\"test_node\", config=config, session=session)\n    with pytest.warns(PytestWarning):\n        node.warn(PytestWarning(\"test warning\"))\n\ndef test_node_add_marker():\n    config = Config()\n    session = Session()\n    node = nodes.Node(\"test_node\", config=config, session=session)\n    node.add_marker(\"skip\")\n    assert \"skip\" in node.keywords\n    assert node.own_markers[0].name == \"skip\"\n\ndef test_node_iter_markers():\n    config = Config()\n    session = Session()\n    node = nodes.Node(\"test_node\", config=config, session=session)\n    node.add_marker(\"skip\")\n    markers = list(node.iter_markers(\"skip\"))\n    assert len(markers) == 1\n    assert markers[0].name == \"skip\"\n\ndef test_node_get_closest_marker():\n    config = Config()\n    session = Session()\n    node = nodes.Node(\"test_node\", config=config, session=session)\n    node.add_marker(\"skip\")\n    marker = node.get_closest_marker(\"skip\")\n    assert marker.name == \"skip\"\n\ndef test_node_repr_failure():\n    config = Config()\n    session = Session()\n    node = nodes.Node(\"test_node\", config=config, session=session)\n    excinfo = ExceptionInfo.from_exception(AssertionError(\"test failure\"))\n    repr_failure = node.repr_failure(excinfo)\n    assert \"test failure\" in str(repr_failure)\n\ndef test_collector_initialization():\n    config = Config()\n    session = Session()\n    collector = nodes.Collector(\"test_collector\", config=config, session=session)\n    assert collector.name == \"test_collector\"\n    assert collector.config == config\n    assert collector.session == session\n\ndef test_fs_collector_initialization():\n    config = Config()\n    session = Session()\n    path = Path(\"/test/path\")\n    fs_collector = nodes.FSCollector(path=path, config=config, session=session)\n    assert fs_collector.name == path.name\n    assert fs_collector.path == path\n    assert fs_collector.config == config\n    assert fs_collector.session == session\n\ndef test_file_collector_initialization():\n    config = Config()\n    session = Session()\n    path = Path(\"/test/path\")\n    file_collector = nodes.File(path=path, config=config, session=session)\n    assert file_collector.name == path.name\n    assert file_collector.path == path\n    assert file_collector.config == config\n    assert file_collector.session == session\n\ndef test_item_initialization():\n    config = Config()\n    session = Session()\n    item = nodes.Item(\"test_item\", config=config, session=session)\n    assert item.name == \"test_item\"\n    assert item.config == config\n    assert item.session == session\n"], "sample_137": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.contrib.admin.options import ModelAdmin, InlineModelAdmin, get_content_type_for_model, get_ul_class, IncorrectLookupParameters, get_deleted_objects\nfrom django.test import RequestFactory\nfrom django.contrib.auth.models import User\nfrom django.contrib.admin.sites import AdminSite\nfrom django.core.exceptions import PermissionDenied\nfrom django.http import HttpResponseRedirect\n\nclass TestModelAdmin(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.site = AdminSite()\n        self.model_admin = ModelAdmin(User, self.site)\n\n    @patch('django.contrib.admin.options.LogEntry.objects.log_action')\n    def test_log_addition(self, mock_log_action):\n        request = self.factory.get('/admin')\n        obj = User.objects.create_user(username='test', password='test')\n        message = 'Test message'\n        self.model_admin.log_addition(request, obj, message)\n        mock_log_action.assert_called_once()\n\n    @patch('django.contrib.admin.options.LogEntry.objects.log_action')\n    def test_log_change(self, mock_log_action):\n        request = self.factory.get('/admin')\n        obj = User.objects.create_user(username='test', password='test')\n        message = 'Test message'\n        self.model_admin.log_change(request, obj, message)\n        mock_log_action.assert_called_once()\n\n    @patch('django.contrib.admin.options.LogEntry.objects.log_action')\n    def test_log_deletion(self, mock_log_action):\n        request = self.factory.get('/admin')\n        obj = User.objects.create_user(username='test', password='test')\n        self.model_admin.log_deletion(request, obj, str(obj))\n        mock_log_action.assert_called_once()\n\n    def test_has_view_or_change_permission(self):\n        request = self.factory.get('/admin')\n        self.assertFalse(self.model_admin.has_view_or_change_permission(request))\n\n    def test_get_deleted_objects(self):\n        request = self.factory.get('/admin')\n        obj = User.objects.create_user(username='test', password='test')\n        deleted_objects, model_count, perms_needed, protected = self.model_admin.get_deleted_objects([obj], request)\n        self.assertIsInstance(deleted_objects, list)\n\n    @patch('django.contrib.admin.options.ModelAdmin.render_delete_form')\n    def test_delete_view(self, mock_render_delete_form):\n        request = self.factory.post('/admin')\n        obj = User.objects.create_user(username='test', password='test')\n        response = self.model_admin.delete_view(request, str(obj.id))\n        self.assertIsInstance(response, HttpResponseRedirect)\n\n    def test_has_module_permission(self):\n        request = self.factory.get('/admin')\n        self.assertFalse(self.model_admin.has_module_permission(request))\n\nclass TestInlineModelAdmin(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.site = AdminSite()\n        self.inline_model_admin = InlineModelAdmin(User, self.site)\n\n    def test_get_extra(self):\n        request = self.factory.get('/admin')\n        self.assertEqual(self.inline_model_admin.get_extra(request), 3)\n\n    def test_has_add_permission(self):\n        request = self.factory.get('/admin')\n        self.assertFalse(self.inline_model_admin.has_add_permission(request, None))\n\n    def test_has_change_permission(self):\n        request = self.factory.get('/admin')\n        self.assertFalse(self.inline_model_admin.has_change_permission(request, None))\n\n    def test_has_delete_permission(self):\n        request = self.factory.get('/admin')\n        self.assertTrue(self.inline_model_admin.has_delete_permission(request, None))\n\n    def test_has_view_permission(self):\n        request = self.factory.get('/admin')\n        self.assertFalse(self.inline_model_admin.has_view_permission(request, None))\n"], "sample_941": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom sphinx.builders.manpage import ManualPageBuilder, default_man_pages\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.config import Config\n\nclass TestManualPageBuilder(unittest.TestCase):\n    def setUp(self):\n        self.config = Config({})\n        self.config.man_pages = [('index', 'test', 'test description', ['author'], 1)]\n        self.config.man_show_urls = False\n        self.config.man_make_section_directory = False\n        self.config.master_doc = 'index'\n        self.config.project = 'test project'\n        self.config.release = '1.0'\n        self.config.author = 'author'\n        self.env = BuildEnvironment()\n        self.env.all_docs = ['index']\n        self.env.get_doctree = MagicMock()\n        self.env.resolve_references = MagicMock()\n\n    @patch('sphinx.builders.manpage.logger')\n    @patch('sphinx.builders.manpage.ManualPageWriter')\n    @patch('sphinx.builders.manpage.OptionParser')\n    @patch('sphinx.builders.manpage.FileOutput')\n    @patch('sphinx.builders.manpage.ensuredir')\n    @patch('sphinx.builders.manpage.inline_all_toctrees')\n    def test_write(self, mock_inline_all_toctrees, mock_ensuredir, mock_fileoutput, mock_optionparser, mock_manpagewriter, mock_logger):\n        mock_optionparser.return_value.get_default_values.return_value = {}\n        builder = ManualPageBuilder(self.env, self.config)\n        builder.write()\n\n        # Add assertions here to check that the methods were called as expected\n\n    @patch('sphinx.builders.manpage.logger')\n    def test_init(self, mock_logger):\n        builder = ManualPageBuilder(self.env, self.config)\n        builder.init()\n\n        # Add assertions here to check that the methods were called as expected\n\n    def test_default_man_pages(self):\n        result = default_man_pages(self.config)\n        self.assertEqual(result, [('index', 'testproject', 'test project 1.0', ['author'], 1)])\n\n    # Add more test cases as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_6": ["\nimport unittest\nimport numpy as np\nfrom astropy.table import Column, MaskedColumn\n\nclass TestColumn(unittest.TestCase):\n    def setUp(self):\n        self.data = np.array([1, 2, 3])\n        self.name = 'test_column'\n        self.dtype = np.int32\n        self.shape = ()\n        self.length = 3\n        self.description = 'Test column'\n        self.unit = 'm'\n        self.format = '%d'\n        self.meta = {'key': 'value'}\n\n    def test_column_creation(self):\n        col = Column(data=self.data, name=self.name, dtype=self.dtype, shape=self.shape, length=self.length,\n                     description=self.description, unit=self.unit, format=self.format, meta=self.meta)\n        self.assertEqual(col.name, self.name)\n        self.assertEqual(col.dtype, self.dtype)\n        self.assertEqual(col.shape, self.shape)\n        self.assertEqual(len(col), self.length)\n        self.assertEqual(col.description, self.description)\n        self.assertEqual(col.unit, self.unit)\n        self.assertEqual(col.format, self.format)\n        self.assertEqual(col.meta, self.meta)\n        np.testing.assert_array_equal(col.data, self.data)\n\n    def test_column_repr(self):\n        col = Column(data=self.data, name=self.name, dtype=self.dtype, shape=self.shape, length=self.length,\n                     description=self.description, unit=self.unit, format=self.format, meta=self.meta)\n        expected_repr = f\"<Column name='{self.name}' dtype=int32 shape=() unit='m' format='%d' description='Test column' length=3>\\n1\\n2\\n3\"\n        self.assertEqual(repr(col), expected_repr)\n\n    def test_column_str(self):\n        col = Column(data=self.data, name=self.name, dtype=self.dtype, shape=self.shape, length=self.length,\n                     description=self.description, unit=self.unit, format=self.format, meta=self.meta)\n        expected_str = f\"name  dtype unit format description\\n---- ------ ---- ------- -------------\\ntest_column int32    m     %d    Test column \\n------ ------ ---- ------- -------------\\n     1\\n     2\\n     3\"\n        self.assertEqual(str(col), expected_str)\n\n    def test_column_bytes(self):\n        col = Column(data=self.data, name=self.name, dtype=self.dtype, shape=self.shape, length=self.length,\n                     description=self.description, unit=self.unit, format=self.format, meta=self.meta)\n        expected_bytes = str(col).encode('utf-8')\n        self.assertEqual(bytes(col), expected_bytes)\n\nclass TestMaskedColumn(unittest.TestCase):\n    def setUp(self):\n        self.data = np.array([1, 2, 3])\n        self.mask = np.array([False, True, False])\n        self.fill_value = -1\n        self.name = 'test_column'\n        self.dtype = np.int32\n        self.shape = ()\n        self.length = 3\n        self.description = 'Test column'\n        self.unit = 'm'\n        self.format = '%d'\n        self.meta = {'key': 'value'}\n\n    def test_masked_column_creation(self):\n        col = MaskedColumn(data=self.data, name=self.name, mask=self.mask, fill_value=self.fill_value,\n                           dtype=self.dtype, shape=self.shape, length=self.length, description=self.description,\n                           unit=self.unit, format=self.format, meta=self.meta)\n        self.assertEqual(col.name, self.name)\n        self.assertEqual(col.dtype, self.dtype)\n        self.assertEqual(col.shape, self.shape)\n        self.assertEqual(len(col), self.length)\n        self.assertEqual(col.description, self.description)\n        self.assertEqual(col.unit, self.unit)\n        self.assertEqual(col.format, self.format)\n        self.assertEqual(col.meta, self.meta)\n        self.assertEqual(col.fill_value, self.fill_value)\n        np.testing.assert_array_equal(col.data, np.ma.MaskedArray(data=self.data, mask=self.mask, fill_value=self.fill_value))\n\n    def test_masked_column_filled(self):\n        col = MaskedColumn(data=self.data, name=self.name, mask=self.mask, fill_value=self.fill_value,\n                           dtype=self.dtype, shape=self.shape, length=self.length, description=self.description,\n                           unit=self.unit, format=self.format, meta=self.meta)\n        filled_col = col.filled()\n        expected_filled_data = np.array([1, self.fill_value, 3])\n        np.testing.assert_array_equal(filled_col.data, expected_filled_data)\n\n    def test_masked_column_insert(self):\n        col = MaskedColumn(data=self.data, name=self.name, mask=self.mask, fill_value=self.fill_value,\n                           dtype=self.dtype, shape=self.shape, length=self.length, description=self.description,\n                           unit=self.unit, format=self.format, meta=self.meta)\n        inserted_col = col.insert(1, 99)\n        expected_inserted_data = np.array([1, 99, 2, 3])\n        expected_inserted_mask = np.array([False, False, True, False])\n        np.testing.assert_array_equal(inserted_col.data, np.ma.MaskedArray(data=expected_inserted_data, mask=expected_inserted_mask))\n\n    # Add more test methods as needed\n"], "sample_503": ["\nimport unittest\nimport numpy as np\nimport matplotlib.lines as mlines\n\nclass TestMatplotlibLines(unittest.TestCase):\n    def setUp(self):\n        self.x = np.array([1, 2, 3, 4, 5])\n        self.y = np.array([1, 4, 9, 16, 25])\n        self.line = mlines.Line2D(self.x, self.y)\n\n    def test_line_data(self):\n        x_data, y_data = self.line.get_data()\n        np.testing.assert_array_equal(x_data, self.x)\n        np.testing.assert_array_equal(y_data, self.y)\n\n    def test_line_style(self):\n        self.line.set_linestyle('--')\n        self.assertEqual(self.line.get_linestyle(), '--')\n\n    def test_line_width(self):\n        self.line.set_linewidth(2.0)\n        self.assertEqual(self.line.get_linewidth(), 2.0)\n\n    def test_line_color(self):\n        self.line.set_color('red')\n        self.assertEqual(self.line.get_color(), 'red')\n\n    def test_marker(self):\n        self.line.set_marker('o')\n        self.assertEqual(self.line.get_marker(), 'o')\n\n    def test_marker_size(self):\n        self.line.set_markersize(10)\n        self.assertEqual(self.line.get_markersize(), 10)\n\n    def test_marker_edge_color(self):\n        self.line.set_markeredgecolor('green')\n        self.assertEqual(self.line.get_markeredgecolor(), 'green')\n\n    def test_marker_edge_width(self):\n        self.line.set_markeredgewidth(1.5)\n        self.assertEqual(self.line.get_markeredgewidth(), 1.5)\n\n    def test_marker_face_color(self):\n        self.line.set_markerfacecolor('blue')\n        self.assertEqual(self.line.get_markerfacecolor(), 'blue')\n\n    def test_drawstyle(self):\n        self.line.set_drawstyle('steps-pre')\n        self.assertEqual(self.line.get_drawstyle(), 'steps-pre')\n\n    def test_fillstyle(self):\n        self.line.set_fillstyle('full')\n        self.assertEqual(self.line.get_fillstyle(), 'full')\n\n    def test_markevery(self):\n        self.line.set_markevery(2)\n        self.assertEqual(self.line.get_markevery(), 2)\n\n    def test_antialiased(self):\n        self.line.set_antialiased(False)\n        self.assertEqual(self.line.get_antialiased(), False)\n\n    def test_dashes(self):\n        self.line.set_dashes([5, 2, 1, 2])\n        self.assertEqual(self.line._dashSeq, [5, 2, 1, 2])\n\n    def test_dash_joinstyle(self):\n        self.line.set_dash_joinstyle('round')\n        self.assertEqual(self.line.get_dash_joinstyle(), 'round')\n\n    def test_solid_joinstyle(self):\n        self.line.set_solid_joinstyle('miter')\n        self.assertEqual(self.line.get_solid_joinstyle(), 'miter')\n\n    def test_dash_capstyle(self):\n        self.line.set_dash_capstyle('butt')\n        self.assertEqual(self.line.get_dash_capstyle(), 'butt')\n\n    def test_solid_capstyle(self):\n        self.line.set_solid_capstyle('projecting')\n        self.assertEqual(self.line.get_solid_capstyle(), 'projecting')\n\n    def test_is_dashed(self):\n        self.line.set_linestyle('--')\n        self.assertTrue(self.line.is_dashed())\n        self.line.set_linestyle('-')\n        self.assertFalse(self.line.is_dashed())\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_632": ["\nimport unittest\nfrom unittest.mock import mock_open, patch\nfrom io import StringIO\nfrom pylint.checkers import similar\n\nclass TestSimilar(unittest.TestCase):\n    def setUp(self):\n        self.sim = similar.Similar()\n\n    def test_append_stream(self):\n        data = \"line1\\nline2\\nline3\\n\"\n        stream = StringIO(data)\n        self.sim.append_stream(\"test_stream\", stream)\n        self.assertEqual(len(self.sim.linesets), 1)\n        self.assertEqual(self.sim.linesets[0].name, \"test_stream\")\n        self.assertEqual(self.sim.linesets[0]._real_lines, [\"line1\\n\", \"line2\\n\", \"line3\\n\"])\n\n    def test_compute_sims(self):\n        data1 = \"line1\\nline2\\nline3\\nsimilar_line\\n\"\n        data2 = \"line4\\nsimilar_line\\nline6\\nline7\\n\"\n        stream1 = StringIO(data1)\n        stream2 = StringIO(data2)\n        self.sim.append_stream(\"test_stream1\", stream1)\n        self.sim.append_stream(\"test_stream2\", stream2)\n        similarities = self.sim._compute_sims()\n        self.assertEqual(len(similarities), 1)\n        self.assertEqual(similarities[0][0], 1)\n        self.assertEqual(len(similarities[0][1]), 2)\n\n    @patch(\"builtins.open\", new_callable=mock_open, read_data=\"line1\\nline2\\nline3\\n\")\n    def test_run(self, mock_file):\n        self.sim.append_stream(\"test_stream\", mock_file.return_value)\n        with patch('sys.stdout', new_callable=StringIO) as mock_stdout:\n            self.sim.run()\n            self.assertIn(\"TOTAL lines=3 duplicates=0 percent=0.00\", mock_stdout.getvalue())\n"], "sample_372": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.urls.resolvers import ResolverMatch, get_resolver, RegexPattern, URLPattern, URLResolver\n\nclass TestUrlResolvers(unittest.TestCase):\n    def setUp(self):\n        self.resolver = get_resolver()\n\n    def test_resolver_match(self):\n        func = MagicMock()\n        resolver_match = ResolverMatch(func, [], {})\n        self.assertEqual(resolver_match.func, func)\n        self.assertEqual(resolver_match.args, [])\n        self.assertEqual(resolver_match.kwargs, {})\n\n    def test_get_resolver(self):\n        self.assertIsInstance(self.resolver, URLResolver)\n\n    def test_regex_pattern(self):\n        pattern = RegexPattern(r'^test/')\n        self.assertEqual(pattern.match('test/'), ('', (), {}))\n\n    def test_url_pattern(self):\n        pattern = RegexPattern(r'^test/')\n        callback = MagicMock()\n        url_pattern = URLPattern(pattern, callback)\n        self.assertEqual(url_pattern.resolve('test/'), ResolverMatch(callback, (), {}))\n\n    @patch('django.urls.resolvers.import_module')\n    def test_url_resolver(self, mock_import_module):\n        mock_module = MagicMock()\n        mock_module.urlpatterns = [RegexPattern(r'^test/')]\n        mock_import_module.return_value = mock_module\n        resolver = URLResolver(RegexPattern(r'^'), 'test_module')\n        self.assertEqual(resolver.resolve('test/'), ResolverMatch(None, (), {}))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1045": ["\nimport unittest\nfrom sympy import symbols, S\nfrom sympy.tensor.tensor import TensorIndexType, tensor_indices, tensorhead, TensAdd, TensMul, canon_bp\n\nclass TestTensorOperations(unittest.TestCase):\n\n    def setUp(self):\n        self.Lorentz = TensorIndexType('Lorentz', dummy_fmt='L')\n        self.i, self.j, self.k = tensor_indices('i,j,k', self.Lorentz)\n        self.A = tensorhead('A', [self.Lorentz]*2, [[1]*2])\n\n    def test_tensor_addition(self):\n        t1 = self.A(self.i, self.j)\n        t2 = self.A(self.j, self.k)\n        result = t1 + t2\n        expected = TensAdd(self.A(self.i, self.j), self.A(self.j, self.k))\n        self.assertEqual(result, expected)\n\n    def test_tensor_multiplication(self):\n        t1 = self.A(self.i, self.j)\n        t2 = self.A(self.j, self.k)\n        result = t1 * t2\n        expected = TensMul(self.A(self.i, self.j), self.A(self.j, self.k))\n        self.assertEqual(result, expected)\n\n    def test_canon_bp(self):\n        t1 = self.A(self.i, self.j)\n        t2 = self.A(self.j, self.i)\n        result = canon_bp(t1 * t2)\n        expected = S(1)/2 * (self.A(self.i, self.j) * self.A(self.j, self.i) + self.A(self.j, self.i) * self.A(self.i, self.j))\n        self.assertEqual(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_412": ["\nimport unittest\nfrom django.utils.html import (\n    conditional_escape,\n    escape,\n    escapejs,\n    format_html,\n    html_safe,\n    json_script,\n    linebreaks,\n    smart_urlquote,\n    strip_spaces_between_tags,\n    strip_tags,\n    urlize,\n)\nfrom django.utils.safestring import SafeString, mark_safe\n\nclass TestHTMLUtilities(unittest.TestCase):\n    def test_escape(self):\n        self.assertEqual(escape(\"<>&\"), \"&lt;&gt;&amp;\")\n        self.assertEqual(escape(\"test\"), \"test\")\n        self.assertEqual(escape(SafeString(\"<>&\")), \"&lt;&gt;&amp;\")\n\n    def test_escapejs(self):\n        self.assertEqual(escapejs(\"<>&'\"), \"\\\\u003C\\\\u003E\\\\u0026\\\\u0027\")\n\n    def test_json_script(self):\n        self.assertEqual(json_script({\"test\": \"value\"}), '<script type=\"application/json\">{\"test\": \"value\"}</script>')\n\n    # Add more tests for conditional_escape, format_html, html_safe, linebreaks, smart_urlquote, strip_spaces_between_tags, strip_tags, urlize, etc.\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_408": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.questioner import MigrationQuestioner\nfrom django.db.migrations.state import ProjectState\n\nclass TestMigrationAutodetector(unittest.TestCase):\n    @patch('django.db.migrations.autodetector.MigrationQuestioner')\n    @patch('django.db.migrations.state.ProjectState')\n    def setUp(self, MockProjectState, MockQuestioner):\n        self.mock_questioner = MockQuestioner.return_value\n        self.from_state = MockProjectState.return_value\n        self.to_state = MockProjectState.return_value\n        self.autodetector = MigrationAutodetector(self.from_state, self.to_state, self.mock_questioner)\n\n    def test_changes(self):\n        # Test the changes() method\n        graph = MagicMock()\n        trim_to_apps = ['auth', 'contenttypes']\n        convert_apps = ['sessions']\n        migration_name = 'test_migration'\n\n        # Mock the private methods to isolate changes()\n        self.autodetector._detect_changes = MagicMock()\n        self.autodetector.arrange_for_graph = MagicMock()\n        self.autodetector._trim_to_apps = MagicMock()\n\n        self.autodetector.changes(graph, trim_to_apps, convert_apps, migration_name)\n\n        # Assert the private methods were called correctly\n        self.autodetector._detect_changes.assert_called_once_with(convert_apps, graph)\n        self.autodetector.arrange_for_graph.assert_called_once_with(\n            self.autodetector._detect_changes.return_value, graph, migration_name\n        )\n        self.autodetector._trim_to_apps.assert_called_once_with(\n            self.autodetector.arrange_for_graph.return_value, trim_to_apps\n        )\n\n    def test_deep_deconstruct(self):\n        # Test the deep_deconstruct() method\n        obj = MagicMock()\n        self.autodetector.deep_deconstruct(obj)\n        # Add assertions based on the expected behavior\n\n    def test_only_relation_agnostic_fields(self):\n        # Test the only_relation_agnostic_fields() method\n        fields = {'field1': MagicMock(), 'field2': MagicMock()}\n        self.autodetector.deep_deconstruct = MagicMock()\n        self.autodetector.only_relation_agnostic_fields(fields)\n        # Add assertions based on the expected behavior\n\n    # Add more test methods to cover other public methods and private methods as needed\n"], "sample_1178": ["\nimport unittest\nfrom sympy import symbols, MatrixSymbol, Matrix, sin, ccode, fcode, Range, Symbol\nfrom sympy.codegen.ast import Assignment, CodeBlock, AugmentedAssignment, For, String, QuotedString, Comment, Node, Type, Attribute, Variable, Pointer, Element, Declaration, While, Scope, Stream, Print, FunctionPrototype, FunctionDefinition, Return, FunctionCall, BreakToken, ContinueToken, NoneToken, value_const, pointer_const, integer, real, complex_, int8, uint8, float32, float64, float80, complex64, complex128, break_, continue_, none, Token\n\nclass TestCodegenAST(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n        self.A = MatrixSymbol('A', 1, 3)\n        self.mat = Matrix([self.x, self.y, self.z]).T\n\n    def test_assignment(self):\n        assignment = Assignment(self.x, self.y)\n        self.assertEqual(assignment.lhs, self.x)\n        self.assertEqual(assignment.rhs, self.y)\n\n    def test_augmented_assignment(self):\n        aug_assign = AugmentedAssignment(self.x, '+', self.y)\n        self.assertEqual(aug_assign.lhs, self.x)\n        self.assertEqual(aug_assign.rhs, self.y)\n        self.assertEqual(aug_assign.op, '+=')\n\n    def test_codeblock(self):\n        codeblock = CodeBlock(Assignment(self.x, 1), Assignment(self.y, self.x + 1))\n        self.assertEqual(len(codeblock.left_hand_sides), 2)\n        self.assertEqual(len(codeblock.right_hand_sides), 2)\n\n    def test_for(self):\n        for_loop = For(self.i, Range(10), [Assignment(self.x, self.i)])\n        self.assertEqual(for_loop.target, self.i)\n        self.assertEqual(for_loop.iterable, Range(10))\n        self.assertEqual(len(for_loop.body.args), 1)\n\n    def test_string(self):\n        string = String('test')\n        self.assertEqual(string.text, 'test')\n\n    def test_quoted_string(self):\n        quoted_string = QuotedString('test')\n        self.assertEqual(quoted_string.text, 'test')\n\n    def test_comment(self):\n        comment = Comment('test comment')\n        self.assertEqual(comment.text, 'test comment')\n\n    def test_node(self):\n        node = Node([value_const])\n        self.assertEqual(node.attrs, (value_const,))\n\n    def test_type(self):\n        type_ = Type.from_expr(42)\n        self.assertEqual(type_, integer)\n\n    def test_attribute(self):\n        attribute = Attribute('volatile')\n        self.assertEqual(attribute.name, 'volatile')\n        self.assertEqual(attribute.parameters, ())\n\n    def test_variable(self):\n        variable = Variable(self.x, type=float32)\n        self.assertEqual(variable.symbol, self.x)\n        self.assertEqual(variable.type, float32)\n        self.assertEqual(variable.attrs, ())\n\n    def test_pointer(self):\n        pointer = Pointer('x')\n        self.assertEqual(pointer.symbol, Symbol('x'))\n        element = pointer[self.i+1]\n        self.assertEqual(element.symbol, Symbol('x'))\n        self.assertEqual(element.indices, (self.i+1,))\n\n    def test_element(self):\n        element = Element('x', 'ijk')\n        self.assertEqual(element.symbol, Symbol('x'))\n        self.assertEqual(element.indices, (Symbol('i'), Symbol('j'), Symbol('k')))\n\n    def test_declaration(self):\n        declaration = Declaration(self.x)\n        self.assertEqual(declaration.variable, Variable(self.x))\n\n    def test_while(self):\n        while_loop = While(self.x > 0, [Assignment(self.x, self.x - 1)])\n        self.assertEqual(while_loop.condition, self.x > 0)\n        self.assertEqual(len(while_loop.body.args), 1)\n\n    def test_scope(self):\n        scope = Scope([Assignment(self.x, 1)])\n        self.assertEqual(len(scope.body.args), 1)\n\n    def test_stream(self):\n        stream = Stream('test_stream')\n        self.assertEqual(stream.name, 'test_stream')\n\n    def test_print(self):\n        print_stmt = Print(['x'], 'format')\n        self.assertEqual(print_stmt.print_args, ('x',))\n        self.assertEqual(print_stmt.format_string, 'format')\n\n    def test_function_prototype(self):\n        func_proto = FunctionPrototype(real, 'foo', [self.x, self.y])\n        self.assertEqual(func_proto.return_type, real)\n        self.assertEqual(func_proto.name, 'foo')\n        self.assertEqual(func_proto.parameters, (Variable(self.x), Variable(self.y)))\n\n    def test_function_definition(self):\n        func_proto = FunctionPrototype(real, 'foo', [self.x, self.y])\n        func_def = FunctionDefinition.from_FunctionPrototype(func_proto, [Return(self.x*self.y)])\n        self.assertEqual(func_def.return_type, real)\n        self.assertEqual(func_def.name, 'foo')\n        self.assertEqual(func_def.parameters, (Variable(self.x), Variable(self.y)))\n        self.assertEqual(len(func_def.body.args), 1)\n\n    def test_return(self):\n        return_stmt = Return(self.x)\n        self.assertEqual(return_stmt.return, self.x)\n\n    def test_function_call(self):\n        func_call = FunctionCall('foo', [self.x, self.y])\n        self.assertEqual(func_call.name, 'foo')\n        self.assertEqual(func_call.function_args, (self.x, self.y))\n\n    def test_break_token(self):\n        self.assertEqual(break_.op, 'break')\n\n    def test_continue_token(self):\n        self.assertEqual(continue_.op, 'continue')\n\n    def test_none_token(self):\n        self.assertEqual(none, NoneToken())\n\n    def test_token(self):\n        token = Token()\n        self.assertTrue(token.is_Atom)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_354": ["\nfrom unittest.mock import patch, Mock\nfrom io import StringIO\nfrom django.core.management import call_command\nfrom django.core.management.base import CommandError\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.auth.management.commands import createsuperuser\nfrom django.test import TestCase\n\nUser = get_user_model()\n\nclass TestCreateSuperuserCommand(TestCase):\n    @patch('getpass.getpass', return_value='testpassword')\n    @patch('builtins.input', side_effect=['testusername', 'testemail@test.com', 'testpassword'])\n    def test_interactive_superuser_creation(self, mock_input, mock_getpass):\n        out = StringIO()\n        call_command('createsuperuser', interactive=True, stdout=out)\n        self.assertIn('Superuser created successfully.', out.getvalue())\n        self.assertTrue(User.objects.filter(username='testusername').exists())\n\n    @patch('os.environ', {'DJANGO_SUPERUSER_USERNAME': 'testusername', 'DJANGO_SUPERUSER_EMAIL': 'testemail@test.com', 'DJANGO_SUPERUSER_PASSWORD': 'testpassword'})\n    def test_non_interactive_superuser_creation(self):\n        out = StringIO()\n        call_command('createsuperuser', interactive=False, stdout=out)\n        self.assertIn('Superuser created successfully.', out.getvalue())\n        self.assertTrue(User.objects.filter(username='testusername').exists())\n\n    @patch('os.environ', {})\n    def test_non_interactive_superuser_creation_without_environment_variables(self):\n        with self.assertRaises(CommandError) as context:\n            call_command('createsuperuser', interactive=False)\n        self.assertIn('You must use --username with --noinput.', str(context.exception))\n\n    @patch('sys.stdin', StringIO('testusername\\n'))\n    def test_username_validation_in_interactive_mode(self):\n        User.objects.create_superuser('testusername', 'testemail@test.com', 'testpassword')\n        out = StringIO()\n        with self.assertRaises(SystemExit) as context:\n            call_command('createsuperuser', interactive=True, stdout=out)\n        self.assertIn('That username is already taken.', out.getvalue())\n\n    @patch('sys.stdin', StringIO(''))\n    def test_blank_username_in_interactive_mode(self):\n        out = StringIO()\n        with self.assertRaises(SystemExit) as context:\n            call_command('createsuperuser', interactive=True, stdout=out)\n        self.assertIn('Username cannot be blank.', out.getvalue())\n\n    def test_invalid_username_in_non_interactive_mode(self):\n        with self.assertRaises(CommandError) as context:\n            call_command('createsuperuser', interactive=False, username='invalid_username')\n        self.assertIn('Enter a valid', str(context.exception))\n"], "sample_788": ["\nimport unittest\nimport numpy as np\nfrom sklearn.datasets import make_classification, make_regression\nfrom sklearn.ensemble import AdaBoostClassifier, AdaBoostRegressor\n\nclass TestWeightBoosting(unittest.TestCase):\n    def setUp(self):\n        self.X_class, self.y_class = make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, random_state=42)\n        self.X_reg, self.y_reg = make_regression(n_samples=100, n_features=20, n_informative=2, random_state=42)\n\n    def test_AdaBoostClassifier(self):\n        clf = AdaBoostClassifier(n_estimators=100, random_state=42)\n        clf.fit(self.X_class, self.y_class)\n        self.assertIsInstance(clf.predict(self.X_class), np.ndarray)\n        self.assertIsInstance(clf.predict_proba(self.X_class), np.ndarray)\n\n    def test_AdaBoostRegressor(self):\n        reg = AdaBoostRegressor(n_estimators=100, random_state=42)\n        reg.fit(self.X_reg, self.y_reg)\n        self.assertIsInstance(reg.predict(self.X_reg), np.ndarray)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_567": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom matplotlib.text import Text, Annotation, OffsetFrom\nimport matplotlib as mpl\nimport numpy as np\nfrom matplotlib.transforms import Affine2D, Bbox, BboxTransformTo, IdentityTransform\nfrom matplotlib.artist import Artist\n\nclass TestTextModule(unittest.TestCase):\n    def setUp(self):\n        self.text = Text(0, 0, 'Test')\n        self.renderer = MagicMock()\n\n    def test_text_get_window_extent(self):\n        self.renderer.get_text_width_height_descent.return_value = (50, 20, 10)\n        self.renderer.get_canvas_width_height.return_value = (100, 100)\n        extent = self.text.get_window_extent(self.renderer)\n        self.assertIsInstance(extent, Bbox)\n\n    def test_text_draw(self):\n        self.text.draw(self.renderer)\n        self.renderer.open_group.assert_called_once_with('text', self.text.get_gid())\n        self.renderer.close_group.assert_called_once_with('text')\n\n    @patch('matplotlib.text._get_text_metrics_with_cache')\n    def test_text_get_layout(self, mock_get_text_metrics):\n        mock_get_text_metrics.return_value = (50, 20, 10)\n        layout = self.text._get_layout(self.renderer)\n        self.assertIsInstance(layout, tuple)\n\n    def test_offset_from_call(self):\n        artist = MagicMock()\n        artist.get_window_extent.return_value = Bbox.from_bounds(0, 0, 100, 100)\n        offset = OffsetFrom(artist, (0.5, 0.5))\n        transform = offset(self.renderer)\n        self.assertIsInstance(transform, Affine2D)\n\n    def test_annotation_init(self):\n        annotation = Annotation('Test', (0, 0), xytext=(10, 10))\n        self.assertIsInstance(annotation, Annotation)\n\n    def test_annotation_draw(self):\n        annotation = Annotation('Test', (0, 0), xytext=(10, 10))\n        annotation.draw(self.renderer)\n        self.renderer.open_group.assert_called_once_with('text', annotation.get_gid())\n        self.renderer.close_group.assert_called_once_with('text')\n\n    def test_annotation_get_window_extent(self):\n        annotation = Annotation('Test', (0, 0), xytext=(10, 10))\n        extent = annotation.get_window_extent(self.renderer)\n        self.assertIsInstance(extent, Bbox)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_543": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nimport matplotlib\nmatplotlib.use('Agg')  # Use non-interactive backend for testing\nimport matplotlib.widgets as widgets\nimport matplotlib.pyplot as plt\nfrom matplotlib.testing.widgets import mock_event\n\nclass TestWidgets(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n\n    def test_button(self):\n        button = widgets.Button(self.ax, 'Test')\n        self.assertEqual(button.label.get_text(), 'Test')\n        callback = MagicMock()\n        button.on_clicked(callback)\n        event = mock_event('button_press_event')\n        button.release(event)\n        callback.assert_called_once()\n\n    def test_checkbox(self):\n        labels = ['Option 1', 'Option 2']\n        check = widgets.CheckButtons(self.ax, labels, [False, True])\n        self.assertEqual(check.labels[0].get_text(), 'Option 1')\n        self.assertEqual(check.labels[1].get_text(), 'Option 2')\n        self.assertFalse(check.lines[0][0].get_visible())\n        self.assertTrue(check.lines[1][0].get_visible())\n\n    # Add more tests for other widgets...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_343": ["\nfrom unittest.mock import MagicMock, patch\nfrom django.apps.registry import Apps\nfrom django.db.migrations.state import ModelState, ProjectState, get_related_models_recursive\nfrom django.test import TestCase\nfrom django.db import models\n\nclass TestStateModule(TestCase):\n\n    def setUp(self):\n        self.model_state = ModelState('test_app', 'TestModel', {})\n        self.project_state = ProjectState()\n\n    def test_model_state_clone(self):\n        cloned_state = self.model_state.clone()\n        self.assertEqual(self.model_state.app_label, cloned_state.app_label)\n        self.assertEqual(self.model_state.name, cloned_state.name)\n\n    def test_project_state_add_model(self):\n        self.project_state.add_model(self.model_state)\n        self.assertIn(('test_app', 'testmodel'), self.project_state.models)\n\n    def test_project_state_remove_model(self):\n        self.project_state.add_model(self.model_state)\n        self.project_state.remove_model('test_app', 'testmodel')\n        self.assertNotIn(('test_app', 'testmodel'), self.project_state.models)\n\n    @patch('django.apps.registry.apps.get_model')\n    def test_project_state_reload_model(self, mock_get_model):\n        mock_get_model.return_value = MagicMock()\n        self.project_state.add_model(self.model_state)\n        self.project_state.reload_model('test_app', 'testmodel')\n        mock_get_model.assert_called_once_with('test_app', 'testmodel')\n\n    def test_project_state_from_apps(self):\n        mock_apps = MagicMock(spec=Apps)\n        mock_apps.get_models.return_value = [models.Model]\n        project_state = ProjectState.from_apps(mock_apps)\n        self.assertIsInstance(project_state, ProjectState)\n\n    def test_project_state_eq(self):\n        project_state_1 = ProjectState()\n        project_state_2 = ProjectState()\n        self.assertEqual(project_state_1, project_state_2)\n\n    def test_get_related_models_recursive(self):\n        class ParentModel(models.Model):\n            pass\n\n        class ChildModel(ParentModel):\n            pass\n\n        related_models = get_related_models_recursive(ParentModel)\n        self.assertIn(('app_label', 'childmodel'), related_models)\n"], "sample_307": ["\nimport datetime\nimport unittest\nfrom django.utils import dateformat\nfrom django.utils.timezone import utc, make_aware\n\nclass TestDateFormat(unittest.TestCase):\n    def setUp(self):\n        self.date = datetime.date(2022, 1, 1)\n        self.datetime = make_aware(datetime.datetime(2022, 1, 1, 12, 30, 45), utc)\n\n    def test_date_format(self):\n        self.assertEqual(dateformat.format(self.date, 'Y-m-d'), '2022-01-01')\n        self.assertEqual(dateformat.format(self.date, 'l, jS F Y'), 'Saturday, 1st January 2022')\n\n    def test_time_format(self):\n        self.assertEqual(dateformat.time_format(self.datetime, 'H:i:s'), '12:30:45')\n        self.assertEqual(dateformat.time_format(self.datetime, 'P'), '12:30 p.m.')\n\n    def test_date_time_format(self):\n        self.assertEqual(dateformat.format(self.datetime, 'Y-m-d H:i:s'), '2022-01-01 12:30:45')\n        self.assertEqual(dateformat.format(self.datetime, 'l, jS F Y H:i:s'), 'Saturday, 1st January 2022 12:30:45')\n\n    def test_invalid_format_specifiers(self):\n        with self.assertRaises(TypeError):\n            dateformat.format(self.date, 'Y-m-d H:i:s')\n        with self.assertRaises(TypeError):\n            dateformat.time_format(self.date, 'H:i:s')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_613": ["\nimport unittest\nimport numpy as np\nimport xarray as xr\nfrom xarray.core.groupby import (\n    _DummyGroup,\n    _ensure_1d,\n    _unique_and_monotonic,\n    _apply_loffset,\n    GroupBy,\n    DataArrayGroupByBase,\n    DatasetGroupByBase,\n    DataArrayGroupBy,\n    DatasetGroupBy,\n    _consolidate_slices,\n    _inverse_permutation_indices,\n    _maybe_reorder,\n    unique_value_groups,\n    _dummy_copy,\n    _is_one_or_none,\n    check_reduce_dims,\n)\n\nclass TestGroupByFunctions(unittest.TestCase):\n\n    def test_unique_value_groups(self):\n        ar = np.array([1, 2, 1, 3, 2])\n        values, groups = unique_value_groups(ar)\n        self.assertListEqual(list(values), [1, 2, 3])\n        self.assertListEqual(groups, [[0, 2], [1, 4], [3]])\n\n    def test_dummy_copy(self):\n        ds = xr.Dataset({'var': ('x', np.arange(5))}, coords={'x': np.arange(5)})\n        da = xr.DataArray(np.arange(5), coords={'x': np.arange(5)}, dims='x')\n        self.assertIsInstance(_dummy_copy(ds), xr.Dataset)\n        self.assertIsInstance(_dummy_copy(da), xr.DataArray)\n\n    def test_is_one_or_none(self):\n        self.assertTrue(_is_one_or_none(1))\n        self.assertTrue(_is_one_or_none(None))\n        self.assertFalse(_is_one_or_none(2))\n\n    def test_consolidate_slices(self):\n        slices = [slice(0, 1), slice(1, 2), slice(2, 3)]\n        self.assertEqual(_consolidate_slices(slices), [slice(0, 3)])\n\n    def test_inverse_permutation_indices(self):\n        positions = [np.array([0, 2]), np.array([1, 3])]\n        self.assertListEqual(_inverse_permutation_indices(positions).tolist(), [0, 2, 1, 3])\n\n    def test_check_reduce_dims(self):\n        self.assertIsNone(check_reduce_dims(..., ['dim1', 'dim2']))\n        with self.assertRaises(ValueError):\n            check_reduce_dims('dim3', ['dim1', 'dim2'])\n\nclass TestGroupByClasses(unittest.TestCase):\n\n    def setUp(self):\n        self.da = xr.DataArray(np.random.rand(3, 4), dims=('x', 'y'), coords={'x': np.arange(3)})\n        self.ds = xr.Dataset({'var': self.da})\n\n    def test_DataArrayGroupByBase(self):\n        groupby = DataArrayGroupByBase(self.da, self.da.x)\n        self.assertIsInstance(groupby, GroupBy)\n\n    def test_DatasetGroupByBase(self):\n        groupby = DatasetGroupByBase(self.ds, self.ds.x)\n        self.assertIsInstance(groupby, GroupBy)\n\n    def test_DataArrayGroupBy(self):\n        groupby = DataArrayGroupBy(self.da, self.da.x)\n        self.assertIsInstance(groupby, DataArrayGroupByBase)\n\n    def test_DatasetGroupBy(self):\n        groupby = DatasetGroupBy(self.ds, self.ds.x)\n        self.assertIsInstance(groupby, DatasetGroupByBase)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_969": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom docutils import nodes\nfrom docutils.parsers.rst.states import Inliner\nfrom sphinx.domains.python import (PythonDomain, _parse_annotation, _pseudo_parse_arglist, PyXRefRole,\n                                   PyFunction, PyDecoratorFunction, PyVariable, PyClasslike, PyMethod,\n                                   PyClassMethod, PyStaticMethod, PyDecoratorMethod, PyAttribute,\n                                   PyProperty, PyModule, PyCurrentModule)\n\nclass TestPythonDomain(unittest.TestCase):\n    def setUp(self):\n        self.env = MagicMock()\n        self.domain = PythonDomain(self.env)\n\n    def test_parse_annotation(self):\n        annotation = 'List[int]'\n        env = MagicMock()\n        result = _parse_annotation(annotation, env)\n        self.assertIsInstance(result, list)\n\n    def test_pseudo_parse_arglist(self):\n        signode = MagicMock()\n        arglist = 'arg1, arg2=default'\n        _pseudo_parse_arglist(signode, arglist)\n        self.assertTrue(signode.called)\n\n    def test_PyXRefRole(self):\n        xref_role = PyXRefRole()\n        env = MagicMock()\n        refnode = MagicMock()\n        has_explicit_title = True\n        title = 'title'\n        target = 'target'\n        result = xref_role.process_link(env, refnode, has_explicit_title, title, target)\n        self.assertIsInstance(result, tuple)\n\n    def test_PyFunction(self):\n        function = PyFunction(name='py:function', arguments=['func_name'], options={},\n                              content=[], lineno=0, content_offset=0, block_text='',\n                              state=None, parent=None)\n        function.env = self.env\n        function.state = MagicMock()\n        result = function.run()\n        self.assertIsInstance(result, list)\n\n    # Add more tests for other classes and functions\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_282": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.forms import BoundField, Form, CharField, TextInput\n\nclass TestBoundField(unittest.TestCase):\n\n    def setUp(self):\n        class TestForm(Form):\n            test_field = CharField()\n\n        self.form = TestForm()\n        self.bound_field = BoundField(self.form, self.form.fields['test_field'], 'test_field')\n\n    def test_str_method(self):\n        self.assertEqual(str(self.bound_field), self.bound_field.as_widget())\n\n    def test_as_widget_method(self):\n        widget = TextInput()\n        self.assertEqual(self.bound_field.as_widget(widget), widget.render(\n            name=self.bound_field.html_name,\n            value=self.bound_field.value(),\n            attrs=self.bound_field.build_widget_attrs(widget.attrs),\n            renderer=self.form.renderer,\n        ))\n\n    def test_as_text_method(self):\n        self.assertEqual(self.bound_field.as_text(), self.bound_field.as_widget(TextInput()))\n\n    def test_as_hidden_method(self):\n        hidden_widget = self.form.fields['test_field'].hidden_widget()\n        self.assertEqual(self.bound_field.as_hidden(), self.bound_field.as_widget(hidden_widget))\n\n    def test_value_method(self):\n        self.form.is_bound = True\n        self.bound_field.data = 'test_data'\n        self.assertEqual(self.bound_field.value(), self.bound_field.field.prepare_value(self.bound_field.field.bound_data(self.bound_field.data, self.bound_field.initial)))\n\n    def test_label_tag_method(self):\n        contents = 'Test Label'\n        self.assertEqual(self.bound_field.label_tag(contents), f'<label for=\"test_field\">{contents}{self.form.label_suffix}</label>')\n\n    def test_css_classes_method(self):\n        self.assertEqual(self.bound_field.css_classes(), '')\n        self.form.error_css_class = 'error'\n        self.form._errors['test_field'] = 'Test Error'\n        self.assertIn(self.form.error_css_class, self.bound_field.css_classes())\n\n    def test_widget_type_property(self):\n        self.assertEqual(self.bound_field.widget_type, 'text')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1078": ["\nimport unittest\nfrom sympy import symbols, pi, S, Interval, FiniteSet, Lambda, Union, ProductSet, I\nfrom sympy.sets.fancysets import Range, normalize_theta_set, ComplexRegion\n\nclass TestFancySets(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n\n    def test_range(self):\n        r = Range(10)\n        self.assertEqual(len(r), 10)\n        self.assertEqual(list(r), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n        r = Range(0, 10, 2)\n        self.assertEqual(len(r), 5)\n        self.assertEqual(list(r), [0, 2, 4, 6, 8])\n\n    def test_normalize_theta_set(self):\n        theta = Interval(9*pi/2, 5*pi)\n        self.assertEqual(normalize_theta_set(theta), Interval(pi/2, pi))\n\n        theta = Interval(-3*pi/2, pi/2)\n        self.assertEqual(normalize_theta_set(theta), Interval.Ropen(0, 2*pi))\n\n        theta = FiniteSet(0, pi, 3*pi)\n        self.assertEqual(normalize_theta_set(theta), FiniteSet(0, pi))\n\n    def test_complex_region(self):\n        a = Interval(2, 3)\n        b = Interval(4, 6)\n        c = Interval(1, 8)\n        c1 = ComplexRegion(a*b)\n        self.assertTrue((2.5 + 4.5*I) in c1)\n        self.assertFalse((2.5 + 6.5*I) in c1)\n\n        c2 = ComplexRegion(Union(a*b, b*c))\n        self.assertTrue((2.5 + 4.5*I) in c2)\n        self.assertTrue((5 + 2*I) in c2)\n        self.assertFalse((3.5 + 6.5*I) in c2)\n\n        r = Interval(0, 1)\n        theta = Interval(0, 2*pi)\n        c3 = ComplexRegion(r*theta, polar=True)\n        self.assertTrue((0.5 + 0.5*I) in c3)\n        self.assertFalse((1 + 2*I) in c3)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_56": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.core.exceptions import NON_FIELD_ERRORS, ValidationError\nfrom django.forms import CharField, FileField, Form, BaseForm, ErrorList\nfrom django.forms.renderers import get_default_renderer\nfrom django.utils.datastructures import MultiValueDict\n\nclass TestBaseForm(unittest.TestCase):\n    def setUp(self):\n        self.form_data = {'name': 'Test', 'email': 'test@test.com'}\n        self.files = MultiValueDict()\n        self.form = BaseForm(data=self.form_data, files=self.files)\n\n    def test_init(self):\n        self.assertEqual(self.form.is_bound, True)\n        self.assertEqual(self.form.data, self.form_data)\n        self.assertEqual(self.form.files, self.files)\n\n    def test_str(self):\n        self.assertIsInstance(str(self.form), str)\n\n    def test_repr(self):\n        self.assertIsInstance(repr(self.form), str)\n\n    def test_iter(self):\n        self.assertIsInstance(iter(self.form), type(iter([])))\n\n    def test_getitem(self):\n        with self.assertRaises(KeyError):\n            self.form['invalid_field']\n\n    def test_errors(self):\n        self.assertIsInstance(self.form.errors, ErrorList)\n\n    def test_is_valid(self):\n        self.assertEqual(self.form.is_valid(), True)\n\n    def test_add_prefix(self):\n        self.assertEqual(self.form.add_prefix('field'), 'field')\n\n    def test_add_initial_prefix(self):\n        self.assertEqual(self.form.add_initial_prefix('field'), 'initial-field')\n\n    def test_non_field_errors(self):\n        self.form.add_error(None, 'Non-field error')\n        self.assertEqual(str(self.form.non_field_errors()), '<ul class=\"errorlist\"><li>Non-field error</li></ul>')\n\n    def test_add_error(self):\n        self.form.add_error('name', 'Test error')\n        self.assertEqual(str(self.form.errors['name']), '<ul class=\"errorlist\"><li>Test error</li></ul>')\n\n    def test_has_error(self):\n        self.form.add_error('name', ValidationError('Test error', code='test_code'))\n        self.assertTrue(self.form.has_error('name', code='test_code'))\n        self.assertFalse(self.form.has_error('name', code='invalid_code'))\n\n    def test_full_clean(self):\n        self.form.full_clean()\n        self.assertEqual(self.form.cleaned_data, self.form_data)\n\n    def test_has_changed(self):\n        self.form.initial = self.form_data\n        self.assertFalse(self.form.has_changed())\n\n    def test_is_multipart(self):\n        self.assertEqual(self.form.is_multipart(), False)\n\n    def test_hidden_fields(self):\n        self.assertEqual(self.form.hidden_fields(), [])\n\n    def test_visible_fields(self):\n        self.assertEqual(self.form.visible_fields(), list(self.form))\n\n    def test_get_initial_for_field(self):\n        field = CharField()\n        self.form.initial = {'name': 'Initial Test'}\n        self.assertEqual(self.form.get_initial_for_field(field, 'name'), 'Initial Test')\n\nclass TestForm(unittest.TestCase):\n    def test_metaclass(self):\n        class TestForm(Form):\n            test_field = CharField()\n\n        self.assertTrue('test_field' in TestForm.base_fields)\n        self.assertTrue('test_field' in TestForm.declared_fields)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_401": ["\nimport unittest\nfrom django.forms import Form, IntegerField, CharField\nfrom django.forms.formsets import BaseFormSet, formset_factory, ManagementForm, all_valid, TOTAL_FORM_COUNT, INITIAL_FORM_COUNT, MIN_NUM_FORM_COUNT, MAX_NUM_FORM_COUNT\n\nclass TestForm(Form):\n    test_field = CharField()\n\nclass TestBaseFormSet(unittest.TestCase):\n    def setUp(self):\n        self.TestFormSet = formset_factory(TestForm)\n\n    def test_initial_form_count(self):\n        formset = self.TestFormSet()\n        self.assertEqual(formset.initial_form_count(), 0)\n\n    def test_total_form_count(self):\n        formset = self.TestFormSet()\n        self.assertEqual(formset.total_form_count(), 1)\n\n    def test_management_form(self):\n        formset = self.TestFormSet()\n        management_form = formset.management_form\n        self.assertIsInstance(management_form, ManagementForm)\n\n    # Add more tests for other methods and edge cases as needed\n\nclass TestFormSetFactory(unittest.TestCase):\n    def test_formset_factory(self):\n        TestFormSet = formset_factory(TestForm)\n        self.assertTrue(issubclass(TestFormSet, BaseFormSet))\n\n    # Add more tests for formset_factory function as needed\n\nclass TestAllValid(unittest.TestCase):\n    def test_all_valid(self):\n        TestFormSet = formset_factory(TestForm)\n        formset1 = TestFormSet({'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '0', 'form-0-test_field': 'test'})\n        formset2 = TestFormSet({'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '0', 'form-0-test_field': 'test'})\n        self.assertTrue(all_valid([formset1, formset2]))\n\n    # Add more tests for all_valid function as needed\n\n# Add more test classes for other components as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_573": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nfrom seaborn._stats.regression import PolyFit\n\nclass TestPolyFit(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n\n    def test_fit_predict(self):\n        poly_fit = PolyFit(order=2, gridsize=100)\n        data = pd.DataFrame({'x': np.linspace(0, 1, 10), 'y': np.linspace(0, 1, 10)})\n        result = poly_fit._fit_predict(data)\n        self.assertEqual(result.shape, (100, 2))\n\n    def test_fit_predict_less_unique_values(self):\n        poly_fit = PolyFit(order=3, gridsize=100)\n        data = pd.DataFrame({'x': np.ones(10), 'y': np.linspace(0, 1, 10)})\n        result = poly_fit._fit_predict(data)\n        self.assertEqual(result.empty, True)\n\n    def test_call(self):\n        poly_fit = PolyFit(order=2, gridsize=100)\n        data = pd.DataFrame({'group': ['A', 'A', 'B', 'B'], 'x': [1, 2, 3, 4], 'y': [1, 4, 9, 16]})\n        groupby = data.groupby('group')\n        orient = scales = None  # Placeholder values\n        result = poly_fit(data, groupby, orient, scales)\n        self.assertEqual(result.shape, (200, 3))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_474": ["\nfrom django.test import TestCase\nfrom django.db.models import F, Value\nfrom django.db.models.functions import (\n    Chr, Left, Ord, LPad, RPad, Repeat, Replace, Right, Substr, Trim, Upper, Lower,\n    Concat, Length, LTrim, RTrim, SHA1, SHA224, SHA256, SHA384, SHA512, StrIndex\n)\n\nclass TextFunctionsTestCase(TestCase):\n    def setUp(self):\n        # Create test data here\n        pass\n\n    def test_chr_function(self):\n        result = Chr(Value(65)).resolve_expression(None)\n        self.assertEqual(result, 'A')\n\n    def test_left_function(self):\n        result = Left(Value('Django'), Value(3)).resolve_expression(None)\n        self.assertEqual(result, 'Dja')\n\n    def test_ord_function(self):\n        result = Ord(Value('A')).resolve_expression(None)\n        self.assertEqual(result, 65)\n\n    def test_lpad_function(self):\n        result = LPad(Value('test'), Value(8), Value('*')).resolve_expression(None)\n        self.assertEqual(result, '****test')\n\n    def test_rpad_function(self):\n        result = RPad(Value('test'), Value(8), Value('*')).resolve_expression(None)\n        self.assertEqual(result, 'test****')\n\n    def test_repeat_function(self):\n        result = Repeat(Value('ab'), Value(3)).resolve_expression(None)\n        self.assertEqual(result, 'ababab')\n\n    def test_replace_function(self):\n        result = Replace(Value('Hello World'), Value('World'), Value('Python')).resolve_expression(None)\n        self.assertEqual(result, 'Hello Python')\n\n    def test_right_function(self):\n        result = Right(Value('Django'), Value(3)).resolve_expression(None)\n        self.assertEqual(result, 'ngo')\n\n    def test_substr_function(self):\n        result = Substr(Value('Django'), Value(2), Value(3)).resolve_expression(None)\n        self.assertEqual(result, 'jan')\n\n    def test_trim_function(self):\n        result = Trim(Value('  test  ')).resolve_expression(None)\n        self.assertEqual(result, 'test')\n\n    def test_upper_function(self):\n        result = Upper(Value('django')).resolve_expression(None)\n        self.assertEqual(result, 'DJANGO')\n\n    def test_lower_function(self):\n        result = Lower(Value('DJANGO')).resolve_expression(None)\n        self.assertEqual(result, 'django')\n\n    def test_concat_function(self):\n        result = Concat(Value('Hello'), Value(' '), Value('World')).resolve_expression(None)\n        self.assertEqual(result, 'Hello World')\n\n    def test_length_function(self):\n        result = Length(Value('Django')).resolve_expression(None)\n        self.assertEqual(result, 6)\n\n    def test_ltrim_function(self):\n        result = LTrim(Value('  test  ')).resolve_expression(None)\n        self.assertEqual(result, 'test  ')\n\n    def test_rtrim_function(self):\n        result = RTrim(Value('  test  ')).resolve_expression(None)\n        self.assertEqual(result, '  test')\n\n    def test_strindex_function(self):\n        result = StrIndex(Value('Django'), Value('jan')).resolve_expression(None)\n        self.assertEqual(result, 2)\n\n    # Add tests for SHA1, SHA224, SHA256, SHA384, SHA512 functions if applicable\n"], "sample_469": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.template.context import BaseContext, Context, RenderContext, RequestContext, make_context\n\nclass TestContext(unittest.TestCase):\n    def setUp(self):\n        self.base_context = BaseContext({'key': 'value'})\n        self.context = Context({'key': 'value'})\n        self.render_context = RenderContext({'key': 'value'})\n        self.request = MagicMock()\n        self.request_context = RequestContext(self.request, {'key': 'value'})\n\n    def test_base_context_getitem(self):\n        self.assertEqual(self.base_context['key'], 'value')\n\n    def test_context_getitem(self):\n        self.assertEqual(self.context['key'], 'value')\n\n    def test_render_context_getitem(self):\n        self.assertEqual(self.render_context['key'], 'value')\n\n    @patch('django.template.context.processor')\n    def test_request_context_bind_template(self, mock_processor):\n        mock_processor.return_value = {'new_key': 'new_value'}\n        template = MagicMock()\n        template.engine.template_context_processors = [mock_processor]\n        with self.request_context.bind_template(template):\n            self.assertEqual(self.request_context['new_key'], 'new_value')\n\n    def test_make_context_with_request(self):\n        context = make_context({'key': 'value'}, self.request)\n        self.assertIsInstance(context, RequestContext)\n\n    def test_make_context_without_request(self):\n        context = make_context({'key': 'value'})\n        self.assertIsInstance(context, Context)\n"], "sample_938": ["\nimport unittest\nfrom sphinx.pycode import ast\n\nclass TestAstModule(unittest.TestCase):\n    def setUp(self):\n        self.code = \"x = 1 + 2 * 3\"\n        self.parsed_ast = ast.parse(self.code)\n\n    def test_parse(self):\n        self.assertIsInstance(self.parsed_ast, ast.AST)\n\n    def test_unparse(self):\n        self.assertEqual(ast.unparse(self.parsed_ast), self.code)\n\n    def test_unparse_none(self):\n        self.assertIsNone(ast.unparse(None))\n\n    def test_unparse_string(self):\n        self.assertEqual(ast.unparse(\"test\"), \"test\")\n\n    def test_unparse_visitor(self):\n        unparser = ast._UnparseVisitor()\n        self.assertEqual(unparser.visit(self.parsed_ast.body[0].value), \"1 + 2 * 3\")\n\n    def test_unparse_visitor_unimplemented(self):\n        unparser = ast._UnparseVisitor()\n        with self.assertRaises(NotImplementedError):\n            unparser.generic_visit(\"test\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1025": ["\nimport unittest\nfrom sympy import Sieve, sieve, Symbol, S, limit, I, zoo, nan\nfrom sympy.ntheory import isprime, totient, mobius, randprime, nextprime, prevprime, primerange, primepi, prime, primorial, composite, compositepi, reduced_totient\nfrom sympy.ntheory.generate import cycle_length\nfrom sympy.ntheory.primetest import mr\nfrom sympy.ntheory.generate import sieve\n\nclass TestGenerateFunctions(unittest.TestCase):\n\n    def test_sieve(self):\n        s = Sieve()\n        self.assertEqual(s[1], 2)\n        self.assertEqual(s[10], 29)\n        self.assertIn(3, s)\n        self.assertNotIn(4, s)\n\n    def test_prime(self):\n        self.assertEqual(prime(1), 2)\n        self.assertEqual(prime(10), 29)\n\n    def test_primepi(self):\n        self.assertEqual(primepi(10), 4)\n        self.assertEqual(primepi(100), 25)\n\n    def test_nextprime(self):\n        self.assertEqual(nextprime(10), 11)\n        self.assertEqual(nextprime(2, ith=2), 5)\n\n    def test_prevprime(self):\n        self.assertEqual(prevprime(10), 7)\n\n    def test_primerange(self):\n        self.assertEqual(list(primerange(1, 30)), [2, 3, 5, 7, 11, 13, 17, 19, 23, 29])\n\n    def test_randprime(self):\n        self.assertTrue(isprime(randprime(1, 30)))\n\n    def test_primorial(self):\n        self.assertEqual(primorial(4), 210)\n        self.assertEqual(primorial(4, nth=False), 6)\n\n    def test_cycle_length(self):\n        func = lambda i: (i**2 + 1) % 51\n        self.assertEqual(next(cycle_length(func, 4)), (6, 2))\n\n    def test_composite(self):\n        self.assertEqual(composite(1), 4)\n        self.assertEqual(composite(10), 18)\n\n    def test_compositepi(self):\n        self.assertEqual(compositepi(25), 15)\n        self.assertEqual(compositepi(100), 64)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_777": ["\nimport numpy as np\nimport pytest\nfrom sklearn.ensemble.gradient_boosting import (GradientBoostingClassifier, GradientBoostingRegressor,\n                                                ZeroEstimator, VerboseReporter)\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.utils import check_array\nfrom sklearn.datasets import make_classification, make_regression\n\n@pytest.fixture\ndef classification_data():\n    return make_classification(n_samples=100, n_features=20, n_informative=2, random_state=42)\n\n@pytest.fixture\ndef regression_data():\n    return make_regression(n_samples=100, n_features=20, n_informative=2, random_state=42)\n\ndef test_gradient_boosting_classifier(classification_data):\n    X, y = classification_data\n    gbc = GradientBoostingClassifier(n_estimators=10, random_state=42)\n    gbc.fit(X, y)\n    assert gbc.n_classes_ == 2\n    assert gbc.estimators_.shape == (10, 1)\n    assert gbc.feature_importances_.shape == (20,)\n    assert gbc.oob_improvement_.shape == (10,)\n    assert gbc.train_score_.shape == (10,)\n    assert gbc.loss_ is not None\n    assert gbc.init_ is not None\n    y_pred = gbc.predict(X)\n    assert y_pred.shape == (100,)\n    y_proba = gbc.predict_proba(X)\n    assert y_proba.shape == (100, 2)\n\ndef test_gradient_boosting_regressor(regression_data):\n    X, y = regression_data\n    gbr = GradientBoostingRegressor(n_estimators=10, random_state=42)\n    gbr.fit(X, y)\n    assert gbr.estimators_.shape == (10, 1)\n    assert gbr.feature_importances_.shape == (20,)\n    assert gbr.train_score_.shape == (10,)\n    assert gbr.loss_ is not None\n    assert gbr.init_ is not None\n    y_pred = gbr.predict(X)\n    assert y_pred.shape == (100,)\n\ndef test_zero_estimator():\n    zero_estimator = ZeroEstimator()\n    X = np.random.rand(100, 20)\n    y = np.random.randint(0, 2, 100)\n    zero_estimator.fit(X, y)\n    y_pred = zero_estimator.predict(X)\n    assert y_pred.shape == (100, 1)\n    assert np.all(y_pred == 0.0)\n\ndef test_verbose_reporter():\n    verbose_reporter = VerboseReporter(verbose=1)\n    est = GradientBoostingClassifier(n_estimators=10, random_state=42)\n    verbose_reporter.init(est)\n    verbose_reporter.update(0, est)\n"], "sample_505": ["\nimport unittest\nimport datetime\nimport numpy as np\nimport matplotlib.dates as mdates\n\nclass TestDatesModule(unittest.TestCase):\n\n    def setUp(self):\n        self.date1 = datetime.datetime(2022, 1, 1, 12, 0, 0)\n        self.date2 = datetime.datetime(2022, 1, 2, 6, 30, 0)\n        self.tz = datetime.timezone.utc\n\n    def test_datestr2num(self):\n        result = mdates.datestr2num('2022-01-01T12:00:00')\n        self.assertEqual(result, 738021.5)\n\n    def test_date2num(self):\n        result = mdates.date2num(self.date1)\n        self.assertEqual(result, 738021.5)\n\n    def test_julian2num(self):\n        result = mdates.julian2num(2459455.0)\n        self.assertEqual(result, 738021.5)\n\n    def test_num2julian(self):\n        result = mdates.num2julian(738021.5)\n        self.assertEqual(result, 2459455.0)\n\n    def test_num2date(self):\n        result = mdates.num2date(738021.5, tz=self.tz)\n        self.assertEqual(result, self.date1)\n\n    def test_num2timedelta(self):\n        result = mdates.num2timedelta(1.5)\n        self.assertEqual(result, datetime.timedelta(days=1, seconds=43200))\n\n    def test_drange(self):\n        delta = datetime.timedelta(hours=6)\n        result = mdates.drange(self.date1, self.date2, delta)\n        self.assertEqual(len(result), 3)\n\n    def test_DateFormatter(self):\n        formatter = mdates.DateFormatter('%Y-%m-%d %H:%M:%S')\n        result = formatter(738021.5)\n        self.assertEqual(result, '2022-01-01 12:00:00')\n\n    # Add more test methods to cover other functions and classes in dates.py\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_896": ["\nimport unittest\nimport numpy as np\nfrom sklearn.utils.estimator_checks import *\n\nclass TestEstimatorChecks(unittest.TestCase):\n    def test_check_estimators_unfitted(self):\n        class DummyEstimator(BaseEstimator):\n            def predict(self, X):\n                return X\n\n        estimator = DummyEstimator()\n        X = np.array([[1, 2], [3, 4]])\n\n        with self.assertRaises(AttributeError):\n            check_estimators_unfitted(\"DummyEstimator\", estimator)\n\n        estimator.fit(X)\n        check_estimators_unfitted(\"DummyEstimator\", estimator)\n\n    def test_check_fit_score_takes_y(self):\n        class DummyEstimator(BaseEstimator):\n            def fit(self, X, y):\n                return self\n\n        estimator = DummyEstimator()\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([1, 0])\n\n        check_fit_score_takes_y(\"DummyEstimator\", estimator)\n\n    def test_check_no_attributes_set_in_init(self):\n        class DummyEstimator(BaseEstimator):\n            def __init__(self, param1=None, param2=None):\n                self.param1 = param1\n                self.param2 = param2\n\n        estimator = DummyEstimator()\n        check_no_attributes_set_in_init(\"DummyEstimator\", estimator)\n\n    # Add more test functions for other functions in estimator_checks.py\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_727": ["\nimport unittest\nimport numpy as np\nfrom scipy import sparse\nfrom sklearn.exceptions import NotFittedError, DataConversionWarning\nfrom sklearn.utils.validation import (check_array, check_X_y, column_or_1d, check_random_state, has_fit_parameter,\n                                      check_symmetric, check_is_fitted, check_consistent_length, assert_all_finite,\n                                      check_memory)\n\nclass TestValidation(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4], [5, 6]])\n        self.y = np.array([1, 2, 3])\n        self.X_sparse = sparse.csr_matrix(self.X)\n\n    def test_check_array(self):\n        # Test with default parameters\n        X_converted = check_array(self.X)\n        self.assertTrue(np.array_equal(X_converted, self.X))\n\n        # Test with sparse input\n        X_converted = check_array(self.X_sparse, accept_sparse=True)\n        self.assertTrue(sparse.issparse(X_converted))\n        self.assertTrue(np.array_equal(X_converted.toarray(), self.X))\n\n    def test_check_X_y(self):\n        # Test with default parameters\n        X_converted, y_converted = check_X_y(self.X, self.y)\n        self.assertTrue(np.array_equal(X_converted, self.X))\n        self.assertTrue(np.array_equal(y_converted, self.y))\n\n        # Test with multi_output=True\n        y_multi = np.array([[1, 2], [3, 4], [5, 6]])\n        X_converted, y_converted = check_X_y(self.X, y_multi, multi_output=True)\n        self.assertTrue(np.array_equal(X_converted, self.X))\n        self.assertTrue(np.array_equal(y_converted.toarray(), y_multi))\n\n    # Add more test cases for other functions...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_905": ["\nimport unittest\nfrom inspect import Parameter, Signature\nfrom sphinx.util import inspect\nfrom sphinx.util.inspect import (\n    getargspec, unwrap, unwrap_all, isenumclass, isenumattribute, unpartial,\n    ispartial, isclassmethod, isstaticmethod, isdescriptor, isabstractmethod,\n    is_cython_function_or_method, isattributedescriptor, is_singledispatch_function,\n    is_singledispatch_method, isfunction, isbuiltin, isroutine, iscoroutinefunction,\n    isproperty, safe_getattr, safe_getmembers, object_description,\n    is_builtin_class_method, signature, stringify_signature, signature_from_str,\n    Signature, getdoc\n)\n\ndef add(a: int, b: int) -> int:\n    return a + b\n\nclass TestInspect(unittest.TestCase):\n    def test_getargspec(self):\n        self.assertEqual(getargspec(add).args, ['a', 'b'])\n\n    def test_unwrap(self):\n        # Add tests here\n        pass\n\n    def test_unwrap_all(self):\n        # Add tests here\n        pass\n\n    def test_isenumclass(self):\n        # Add tests here\n        pass\n\n    def test_isenumattribute(self):\n        # Add tests here\n        pass\n\n    def test_unpartial(self):\n        # Add tests here\n        pass\n\n    def test_ispartial(self):\n        # Add tests here\n        pass\n\n    def test_isclassmethod(self):\n        # Add tests here\n        pass\n\n    def test_isstaticmethod(self):\n        # Add tests here\n        pass\n\n    def test_isdescriptor(self):\n        # Add tests here\n        pass\n\n    def test_isabstractmethod(self):\n        # Add tests here\n        pass\n\n    def test_is_cython_function_or_method(self):\n        # Add tests here\n        pass\n\n    def test_isattributedescriptor(self):\n        # Add tests here\n        pass\n\n    def test_is_singledispatch_function(self):\n        # Add tests here\n        pass\n\n    def test_is_singledispatch_method(self):\n        # Add tests here\n        pass\n\n    def test_isfunction(self):\n        # Add tests here\n        pass\n\n    def test_isbuiltin(self):\n        # Add tests here\n        pass\n\n    def test_isroutine(self):\n        # Add tests here\n        pass\n\n    def test_iscoroutinefunction(self):\n        # Add tests here\n        pass\n\n    def test_isproperty(self):\n        # Add tests here\n        pass\n\n    def test_safe_getattr(self):\n        # Add tests here\n        pass\n\n    def test_safe_getmembers(self):\n        # Add tests here\n        pass\n\n    def test_object_description(self):\n        # Add tests here\n        pass\n\n    def test_is_builtin_class_method(self):\n        # Add tests here\n        pass\n\n    def test_signature(self):\n        # Add tests here\n        pass\n\n    def test_stringify_signature(self):\n        # Add tests here\n        pass\n\n    def test_signature_from_str(self):\n        # Add tests here\n        pass\n\n    def test_Signature(self):\n        # Add tests here\n        pass\n\n    def test_getdoc(self):\n        # Add tests here\n        pass\n"], "sample_648": ["\nimport logging\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom _pytest.logging import (\n    LogCaptureHandler,\n    LogCaptureFixture,\n    PercentStyleMultiline,\n    _LiveLoggingStreamHandler,\n    _LiveLoggingNullHandler,\n    LoggingPlugin,\n    catching_logs,\n)\n\nclass TestLoggingModule(unittest.TestCase):\n    def setUp(self):\n        self.config = Mock()\n        self.item = Mock()\n        self.request = Mock()\n        self.request.node = self.item\n        self.logger = logging.getLogger()\n\n    def test_LogCaptureHandler(self):\n        handler = LogCaptureHandler()\n        record = logging.LogRecord(\"name\", logging.INFO, \"pathname\", 1, \"msg\", [], None)\n        handler.emit(record)\n        self.assertEqual(len(handler.records), 1)\n        self.assertEqual(handler.records[0].msg, \"msg\")\n\n    def test_LogCaptureFixture(self):\n        fixture = LogCaptureFixture(self.item)\n        self.assertIsNone(fixture.handler)\n\n    def test_PercentStyleMultiline(self):\n        style = PercentStyleMultiline(\"%(message)s\", auto_indent=4)\n        record = Mock()\n        record.message = \"test\\nmessage\"\n        result = style.format(record)\n        self.assertIn(\"\\n    message\", result)\n\n    def test_catching_logs(self):\n        with catching_logs(self.logger.handlers[0], logging.INFO):\n            self.assertEqual(self.logger.level, logging.INFO)\n\n    @patch('_pytest.logging.create_terminal_writer')\n    def test_LoggingPlugin(self, mock_writer):\n        plugin = LoggingPlugin(self.config)\n        self.assertIsInstance(plugin.formatter, logging.Formatter)\n\n    def test_LiveLoggingStreamHandler(self):\n        terminal_reporter = Mock()\n        capture_manager = Mock()\n        handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        self.assertIsNone(handler.stream)\n\n    def test_LiveLoggingNullHandler(self):\n        handler = _LiveLoggingNullHandler()\n        self.assertIsNone(handler.handleError(None))\n"], "sample_684": ["\nimport pytest\nimport _pytest\nfrom _pytest.skipping import evaluate_skip_marks, evaluate_xfail_marks, pytest_runtest_setup, Skip, Xfail\nfrom _pytest.nodes import Item\nfrom _pytest.mark import Mark\n\nclass MockConfig:\n    def getini(self, name):\n        return False\n\ndef test_evaluate_skip_marks_skip_unconditional():\n    item = Item('test_func', parent=None)\n    item.add_marker(Mark('skip', args=(), kwargs={}))\n    result = evaluate_skip_marks(item)\n    assert result is not None\n    assert result.reason == \"unconditional skip\"\n\ndef test_evaluate_skip_marks_skipif_true():\n    item = Item('test_func', parent=None)\n    item.add_marker(Mark('skipif', args=(), kwargs={'condition': 'True'}))\n    result = evaluate_skip_marks(item)\n    assert result is not None\n    assert result.reason == \"condition: True\"\n\ndef test_evaluate_skip_marks_skipif_false():\n    item = Item('test_func', parent=None)\n    item.add_marker(Mark('skipif', args=(), kwargs={'condition': 'False'}))\n    result = evaluate_skip_marks(item)\n    assert result is None\n\ndef test_evaluate_xfail_marks_xfail_unconditional():\n    item = Item('test_func', parent=None)\n    item.config = MockConfig()\n    item.add_marker(Mark('xfail', args=(), kwargs={}))\n    result = evaluate_xfail_marks(item)\n    assert result is not None\n    assert result.reason == \"\"\n    assert result.run == True\n    assert result.strict == False\n    assert result.raises is None\n\ndef test_evaluate_xfail_marks_xfail_true():\n    item = Item('test_func', parent=None)\n    item.config = MockConfig()\n    item.add_marker(Mark('xfail', args=(), kwargs={'condition': 'True'}))\n    result = evaluate_xfail_marks(item)\n    assert result is not None\n    assert result.reason == \"condition: True\"\n    assert result.run == True\n    assert result.strict == False\n    assert result.raises is None\n\ndef test_evaluate_xfail_marks_xfail_false():\n    item = Item('test_func', parent=None)\n    item.config = MockConfig()\n    item.add_marker(Mark('xfail', args=(), kwargs={'condition': 'False'}))\n    result = evaluate_xfail_marks(item)\n    assert result is None\n\ndef test_pytest_runtest_setup_skip():\n    item = Item('test_func', parent=None)\n    item.config = MockConfig()\n    item.add_marker(Mark('skip', args=(), kwargs={}))\n    with pytest.raises(pytest.skip.Exception):\n        pytest_runtest_setup(item)\n\ndef test_pytest_runtest_setup_xfail_notrun():\n    item = Item('test_func', parent=None)\n    item.config = MockConfig()\n    item.config.option = _pytest.config.Config.Option()\n    item.config.option.runxfail = False\n    item.add_marker(Mark('xfail', args=(), kwargs={'run': False}))\n    with pytest.raises(pytest.xfail.Exception):\n        pytest_runtest_setup(item)\n"], "sample_551": ["\nimport unittest\nimport numpy as np\nfrom mpl_toolkits.mplot3d import art3d\n\nclass TestArt3dModule(unittest.TestCase):\n\n    def test_norm_angle(self):\n        self.assertEqual(art3d._norm_angle(0), 0)\n        self.assertEqual(art3d._norm_angle(180), 180)\n        self.assertEqual(art3d._norm_angle(270), -90)\n        self.assertEqual(art3d._norm_angle(360), 0)\n        self.assertEqual(art3d._norm_angle(450), 90)\n\n    def test_norm_text_angle(self):\n        self.assertEqual(art3d._norm_text_angle(0), 0)\n        self.assertEqual(art3d._norm_text_angle(90), 90)\n        self.assertEqual(art3d._norm_text_angle(180), -90)\n        self.assertEqual(art3d._norm_text_angle(270), 90)\n        self.assertEqual(art3d._norm_text_angle(360), 0)\n\n    def test_get_dir_vector(self):\n        np.testing.assert_array_equal(art3d.get_dir_vector('x'), np.array((1, 0, 0)))\n        np.testing.assert_array_equal(art3d.get_dir_vector('y'), np.array((0, 1, 0)))\n        np.testing.assert_array_equal(art3d.get_dir_vector('z'), np.array((0, 0, 1)))\n        np.testing.assert_array_equal(art3d.get_dir_vector(None), np.array((0, 0, 0)))\n        np.testing.assert_array_equal(art3d.get_dir_vector((1, 2, 3)), np.array((1, 2, 3)))\n        with self.assertRaises(ValueError):\n            art3d.get_dir_vector('invalid')\n\n    # Add more tests for other functions and classes in the art3d.py module\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_839": ["\nimport unittest\nfrom sklearn.feature_extraction.text import strip_tags, strip_accents_unicode, strip_accents_ascii, HashingVectorizer, CountVectorizer, TfidfTransformer, TfidfVectorizer, ENGLISH_STOP_WORDS\n\nclass TestTextModule(unittest.TestCase):\n\n    def test_strip_tags(self):\n        text = \"<p>This is a sample text with <b>bold</b> and <i>italic</i> tags.</p>\"\n        stripped_text = strip_tags(text)\n        self.assertEqual(stripped_text, \"This is a sample text with bold and italic tags.\")\n\n    def test_strip_accents_unicode(self):\n        text = \"r\u00e9sum\u00e9\"\n        stripped_text = strip_accents_unicode(text)\n        self.assertEqual(stripped_text, \"resume\")\n\n    def test_strip_accents_ascii(self):\n        text = \"r\u00e9sum\u00e9\"\n        stripped_text = strip_accents_ascii(text)\n        self.assertEqual(stripped_text, \"resume\")\n\n    def test_hashing_vectorizer(self):\n        corpus = [\n            'This is the first document.',\n            'This document is the second document.',\n            'And this is the third one.',\n            'Is this the first document?',\n        ]\n        vectorizer = HashingVectorizer(n_features=2**4)\n        X = vectorizer.fit_transform(corpus)\n        self.assertEqual(X.shape, (4, 16))\n\n    def test_count_vectorizer(self):\n        corpus = [\n            'This is the first document.',\n            'This document is the second document.',\n            'And this is the third one.',\n            'Is this the first document?',\n        ]\n        vectorizer = CountVectorizer()\n        X = vectorizer.fit_transform(corpus)\n        self.assertEqual(vectorizer.get_feature_names(), ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this'])\n        self.assertEqual(X.toarray().tolist(), [[0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 2, 0, 1, 0, 1, 1, 0, 1], [1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 0, 1]])\n\n    def test_tfidf_transformer(self):\n        X = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n        transformer = TfidfTransformer()\n        X_tfidf = transformer.fit_transform(X)\n        self.assertEqual(X_tfidf.shape, (3, 3))\n\n    def test_tfidf_vectorizer(self):\n        corpus = [\n            'This is the first document.',\n            'This document is the second document.',\n            'And this is the third one.',\n            'Is this the first document?',\n        ]\n        vectorizer = TfidfVectorizer()\n        X = vectorizer.fit_transform(corpus)\n        self.assertEqual(vectorizer.get_feature_names(), ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this'])\n        self.assertEqual(X.shape, (4, 9))\n\n    def test_english_stop_words(self):\n        self.assertIsInstance(ENGLISH_STOP_WORDS, frozenset)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_787": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nfrom sklearn.compose import ColumnTransformer, make_column_transformer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.exceptions import NotFittedError, DataConversionWarning\n\nclass TestColumnTransformer(unittest.TestCase):\n    def setUp(self):\n        self.X = pd.DataFrame({\n            'numerical_column': [1, 2, 3],\n            'categorical_column': ['A', 'B', 'A'],\n            'dropped_column': [4, 5, 6]\n        })\n        self.transformer = make_column_transformer(\n            (StandardScaler(), ['numerical_column']),\n            (OneHotEncoder(), ['categorical_column']),\n            remainder='drop'\n        )\n\n    def test_fit_transform(self):\n        transformed_X = self.transformer.fit_transform(self.X)\n        self.assertEqual(transformed_X.shape, (3, 3))\n\n    def test_transform_without_fit(self):\n        with self.assertRaises(NotFittedError):\n            self.transformer.transform(self.X)\n\n    def test_get_feature_names(self):\n        self.transformer.fit(self.X)\n        feature_names = self.transformer.get_feature_names()\n        expected_names = ['standardscaler__numerical_column', 'onehotencoder__x0_A', 'onehotencoder__x0_B']\n        self.assertListEqual(feature_names, expected_names)\n\n    def test_remainder_passthrough(self):\n        transformer_passthrough = make_column_transformer(\n            (StandardScaler(), ['numerical_column']),\n            remainder='passthrough'\n        )\n        transformed_X = transformer_passthrough.fit_transform(self.X)\n        self.assertEqual(transformed_X.shape, (3, 4))\n\n    def test_remainder_estimator(self):\n        transformer_estimator = make_column_transformer(\n            (StandardScaler(), ['numerical_column']),\n            remainder=OneHotEncoder()\n        )\n        transformed_X = transformer_estimator.fit_transform(self.X)\n        self.assertEqual(transformed_X.shape, (3, 4))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_939": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom docutils import nodes\nfrom sphinx.domains.python import (PythonDomain, PythonModuleIndex, _parse_annotation, _pseudo_parse_arglist, py_sig_re,\n                                   PyXRefRole, PyFunction, PyClasslike, PyMethod, PyAttribute, PyProperty, PyVariable,\n                                   PyModule, PyCurrentModule)\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.testing.util import SphinxTest\n\nclass TestPythonDomain(SphinxTest):\n    def setUp(self):\n        super().setUp()\n        self.env = BuildEnvironment(self.srcdir, self.confdir, self.outdir)\n        self.domain = PythonDomain(self.env)\n\n    def test_parse_annotation(self):\n        annotation = \"List[int]\"\n        result = _parse_annotation(annotation, self.env)\n        self.assertIsInstance(result, list)\n\n    def test_pseudo_parse_arglist(self):\n        signode = Mock()\n        arglist = \"arg1, arg2[, arg3=default]\"\n        _pseudo_parse_arglist(signode, arglist)\n        signode.__getitem__.assert_called_once_with('parameterlist')\n\n    def test_py_sig_re(self):\n        sig = \"func(arg1: int, arg2: str) -> int\"\n        match = py_sig_re.match(sig)\n        self.assertIsNotNone(match)\n\n    def test_PyXRefRole(self):\n        role = PyXRefRole()\n        title, target = role.process_link(self.env, Mock(), False, \"title\", \"target\")\n        self.assertEqual(title, \"title\")\n        self.assertEqual(target, \"target\")\n\n    def test_PyFunction(self):\n        directive = PyFunction(Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock())\n        directive.name = \"py:function\"\n        directive.options = {}\n        directive.content = []\n        directive.run()\n        self.assertIsInstance(directive.result, list)\n\n    def test_PyClasslike(self):\n        directive = PyClasslike(Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock())\n        directive.name = \"py:class\"\n        directive.options = {}\n        directive.content = []\n        directive.run()\n        self.assertIsInstance(directive.result, list)\n\n    def test_PyMethod(self):\n        directive = PyMethod(Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock())\n        directive.name = \"py:method\"\n        directive.options = {}\n        directive.content = []\n        directive.run()\n        self.assertIsInstance(directive.result, list)\n\n    def test_PyAttribute(self):\n        directive = PyAttribute(Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock())\n        directive.name = \"py:attribute\"\n        directive.options = {}\n        directive.content = []\n        directive.run()\n        self.assertIsInstance(directive.result, list)\n\n    def test_PyProperty(self):\n        directive = PyProperty(Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock())\n        directive.name = \"py:property\"\n        directive.options = {}\n        directive.content = []\n        directive.run()\n        self.assertIsInstance(directive.result, list)\n\n    def test_PyVariable(self):\n        directive = PyVariable(Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock())\n        directive.name = \"py:data\"\n        directive.options = {}\n        directive.content = []\n        directive.run()\n        self.assertIsInstance(directive.result, list)\n\n    def test_PyModule(self):\n        directive = PyModule(Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock())\n        directive.arguments = [\"test_module\"]\n        directive.options = {}\n        directive.run()\n        self.assertIsInstance(directive.result, list)\n\n    def test_PyCurrentModule(self):\n        directive = PyCurrentModule(Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock(), Mock())\n        directive.arguments = [\"test_module\"]\n        directive.run()\n        self.assertEqual(directive.result, [])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_571": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom seaborn import regression as lm\n\nclass TestRegression(unittest.TestCase):\n\n    def setUp(self):\n        np.random.seed(0)\n        self.data = pd.DataFrame({'x': np.random.rand(100), 'y': np.random.rand(100)})\n\n    def test_regplot(self):\n        ax = lm.regplot(data=self.data, x='x', y='y')\n        self.assertIsInstance(ax, plt.Axes)\n\n    def test_regplot_with_parameters(self):\n        ax = lm.regplot(data=self.data, x='x', y='y', fit_reg=True, ci=95, n_boot=500, scatter=True)\n        self.assertIsInstance(ax, plt.Axes)\n\n    def test_lmplot(self):\n        g = lm.lmplot(data=self.data, x='x', y='y')\n        self.assertIsInstance(g, lm.FacetGrid)\n\n    def test_lmplot_with_parameters(self):\n        g = lm.lmplot(data=self.data, x='x', y='y', hue='x', col='y', row='x', palette='Set1')\n        self.assertIsInstance(g, lm.FacetGrid)\n\n    def test_residplot(self):\n        ax = lm.residplot(data=self.data, x='x', y='y')\n        self.assertIsInstance(ax, plt.Axes)\n\n    def test_residplot_with_parameters(self):\n        ax = lm.residplot(data=self.data, x='x', y='y', lowess=True, order=2, robust=True)\n        self.assertIsInstance(ax, plt.Axes)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_164": ["\nfrom django.test import TestCase, RequestFactory\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.views import (\n    LoginView,\n    LogoutView,\n    logout_then_login,\n    redirect_to_login,\n    PasswordResetView,\n    PasswordResetDoneView,\n    PasswordResetConfirmView,\n    PasswordResetCompleteView,\n    PasswordChangeView,\n    PasswordChangeDoneView,\n)\nfrom django.urls import reverse\n\nclass TestAuthViews(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.user = User.objects.create_user(\n            username='testuser',\n            email='test@example.com',\n            password='testpassword'\n        )\n\n    def test_login_view(self):\n        request = self.factory.post('/accounts/login/', {'username': 'testuser', 'password': 'testpassword'})\n        response = LoginView.as_view()(request)\n        self.assertEqual(response.status_code, 302)\n\n    def test_logout_view(self):\n        request = self.factory.get('/accounts/logout/')\n        request.user = self.user\n        response = LogoutView.as_view()(request)\n        self.assertEqual(response.status_code, 200)\n\n    def test_logout_then_login(self):\n        request = self.factory.get('/logout_then_login/')\n        request.user = self.user\n        response = logout_then_login(request)\n        self.assertEqual(response.status_code, 302)\n\n    def test_redirect_to_login(self):\n        response = redirect_to_login('/some_url/')\n        self.assertEqual(response.status_code, 302)\n\n    # Add more tests for other views and functions\n"], "sample_637": ["\nimport unittest\nfrom unittest.mock import Mock, patch\n\nfrom pylint.lint import PyLinter\nfrom pylint.checkers import misc\n\nclass TestMiscCheckers(unittest.TestCase):\n    def setUp(self):\n        self.linter = PyLinter()\n        self.encoding_checker = misc.EncodingChecker(self.linter)\n        self.managed_messages_checker = misc.ByIdManagedMessagesChecker(self.linter)\n\n    def test_encoding_checker_open(self):\n        self.encoding_checker.config.notes = ['FIXME', 'XXX', 'TODO']\n        self.encoding_checker.config.notes_rgx = None\n        self.encoding_checker.open()\n        self.assertIsNotNone(self.encoding_checker._fixme_pattern)\n\n    def test_encoding_checker_process_module(self):\n        node = Mock()\n        node.file_encoding = 'utf-8'\n        node.stream.return_value.__enter__.return_value = [b'test']\n        self.encoding_checker.process_module(node)\n\n    def test_managed_messages_checker_process_module(self):\n        self.linter._by_id_managed_msgs = [('test', 'I0023', 'symbolic', 1, False)]\n        node = Mock()\n        node.name = 'test'\n        self.managed_messages_checker.process_module(node)\n        self.assertEqual(len(self.managed_messages_checker.messages), 1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_663": ["\nimport os\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom _pytest.tmpdir import get_user, TempdirFactory, TempPathFactory, _mk_tmp, pytest_configure\n\ndef test_get_user():\n    with patch('getpass.getuser', return_value='testuser'):\n        assert get_user() == 'testuser'\n\n    with patch('getpass.getuser', side_effect=ImportError):\n        assert get_user() is None\n\n    with patch('getpass.getuser', side_effect=KeyError):\n        assert get_user() is None\n\n@pytest.fixture\ndef mock_config():\n    config = Mock()\n    config.option.basetemp = None\n    config.trace.get.return_value = None\n    return config\n\ndef test_TempPathFactory_from_config(mock_config):\n    factory = TempPathFactory.from_config(mock_config)\n    assert isinstance(factory, TempPathFactory)\n    assert factory._given_basetemp is None\n    assert factory._trace is None\n\ndef test_TempPathFactory_getbasetemp(mock_config):\n    factory = TempPathFactory.from_config(mock_config)\n    basetemp = factory.getbasetemp()\n    assert os.path.exists(basetemp)\n    assert factory._basetemp == basetemp\n\ndef test_TempPathFactory_mktemp(mock_config):\n    factory = TempPathFactory.from_config(mock_config)\n    temp_dir = factory.mktemp('test_dir')\n    assert os.path.exists(temp_dir)\n    assert 'test_dir' in str(temp_dir)\n\ndef test_TempdirFactory_mktemp(mock_config):\n    factory = TempPathFactory.from_config(mock_config)\n    tempdir_factory = TempdirFactory(factory)\n    temp_dir = tempdir_factory.mktemp('test_dir')\n    assert os.path.exists(temp_dir)\n    assert 'test_dir' in str(temp_dir)\n\ndef test_pytest_configure(mock_config):\n    pytest_configure(mock_config)\n    assert hasattr(mock_config, '_tmp_path_factory')\n    assert hasattr(mock_config, '_tmpdirhandler')\n\n@pytest.fixture\ndef mock_request(mock_config):\n    request = Mock()\n    request.config = mock_config\n    return request\n\ndef test_tmpdir_factory(mock_request):\n    pytest_configure(mock_request.config)\n    factory = tmpdir_factory(mock_request)\n    assert isinstance(factory, TempdirFactory)\n\ndef test_tmp_path_factory(mock_request):\n    pytest_configure(mock_request.config)\n    factory = tmp_path_factory(mock_request)\n    assert isinstance(factory, TempPathFactory)\n\ndef test_mk_tmp(mock_request, mock_config):\n    factory = TempPathFactory.from_config(mock_config)\n    temp_dir = _mk_tmp(mock_request, factory)\n    assert os.path.exists(temp_dir)\n    assert mock_request.node.name in str(temp_dir)\n"], "sample_337": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.middleware.csrf import (\n    CsrfViewMiddleware, get_token, _compare_masked_tokens, _mask_cipher_secret,\n    _unmask_cipher_token, REASON_NO_CSRF_COOKIE, REASON_CSRF_TOKEN_MISSING,\n    InvalidTokenFormat, RejectRequest\n)\nfrom django.test import RequestFactory\nfrom django.conf import settings\n\nclass TestCsrfViewMiddleware(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.middleware = CsrfViewMiddleware()\n        self.middleware.get_response = Mock()\n        settings.CSRF_COOKIE_NAME = 'csrftoken'\n        settings.CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'\n        settings.CSRF_USE_SESSIONS = False\n        settings.CSRF_COOKIE_DOMAIN = None\n        settings.CSRF_COOKIE_AGE = None\n        settings.CSRF_COOKIE_PATH = '/'\n        settings.CSRF_COOKIE_SECURE = False\n        settings.CSRF_COOKIE_HTTPONLY = False\n        settings.CSRF_COOKIE_SAMESITE = None\n        settings.SESSION_COOKIE_DOMAIN = None\n        settings.CSRF_TRUSTED_ORIGINS = []\n\n    def test_get_token(self):\n        request = self.factory.get('/')\n        token = get_token(request)\n        self.assertEqual(len(token), 64)\n\n    def test_compare_masked_tokens(self):\n        token1 = _mask_cipher_secret('secret1')\n        token2 = _mask_cipher_secret('secret2')\n        self.assertTrue(_compare_masked_tokens(token1, token1))\n        self.assertFalse(_compare_masked_tokens(token1, token2))\n\n    def test_check_token_no_csrf_cookie(self):\n        request = self.factory.post('/')\n        with self.assertRaises(RejectRequest) as context:\n            self.middleware._check_token(request)\n        self.assertEqual(context.exception.reason, REASON_NO_CSRF_COOKIE)\n\n    def test_check_token_missing_csrf_token(self):\n        request = self.factory.post('/')\n        request.COOKIES = {'csrftoken': _mask_cipher_secret('secret')}\n        with self.assertRaises(RejectRequest) as context:\n            self.middleware._check_token(request)\n        self.assertEqual(context.exception.reason, REASON_CSRF_TOKEN_MISSING)\n\n    def test_check_token_invalid_csrf_token(self):\n        request = self.factory.post('/')\n        request.COOKIES = {'csrftoken': _mask_cipher_secret('secret')}\n        request.POST = {'csrfmiddlewaretoken': 'invalid'}\n        with self.assertRaises(RejectRequest):\n            self.middleware._check_token(request)\n\n    def test_check_token_valid_csrf_token(self):\n        request = self.factory.post('/')\n        token = _mask_cipher_secret('secret')\n        request.COOKIES = {'csrftoken': token}\n        request.POST = {'csrfmiddlewaretoken': token}\n        self.middleware._check_token(request)\n\n    # Add more test cases as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_59": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db import models, router, connections\nfrom django.db.models import signals, Q\nfrom django.db.models.fields import Field\nfrom django.db.models.signals import (\n    class_prepared, post_init, post_save, pre_init, pre_save,\n)\nfrom django.db.models.sql import InsertQuery\nfrom django.db.models.constraints import CheckConstraint\nfrom .base import Model, ModelBase, ModelState, Deferred\n\nclass TestModel(unittest.TestCase):\n    def setUp(self):\n        self.model_class = ModelBase('TestModel', (models.Model,), {})\n        self.model_instance = self.model_class()\n\n    def test_init(self):\n        self.assertIsInstance(self.model_instance, Model)\n        self.assertIsInstance(self.model_instance._state, ModelState)\n\n    def test_from_db(self):\n        db = 'default'\n        field_names = ['id', 'name']\n        values = [1, 'Test']\n        obj = self.model_class.from_db(db, field_names, values)\n        self.assertEqual(obj.id, 1)\n        self.assertEqual(obj.name, 'Test')\n        self.assertFalse(obj._state.adding)\n        self.assertEqual(obj._state.db, db)\n\n    def test_repr(self):\n        self.model_instance.id = 1\n        self.assertEqual(repr(self.model_instance), '<TestModel: 1>')\n\n    def test_str(self):\n        self.model_instance.id = 1\n        self.assertEqual(str(self.model_instance), 'TestModel object (1)')\n\n    @patch('django.db.models.signals.pre_init.send')\n    @patch('django.db.models.signals.post_init.send')\n    def test_signals(self, mock_post_init, mock_pre_init):\n        obj = self.model_class(id=1, name='Test')\n        mock_pre_init.assert_called_once_with(sender=self.model_class, args=(), kwargs={'id': 1, 'name': 'Test'})\n        mock_post_init.assert_called_once_with(sender=self.model_class, instance=obj)\n\n    # Add more tests for other methods and functionalities as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1085": ["\nimport unittest\nfrom sympy import Rational, Integer, Float, Zero, One, NegativeOne, Half, Infinity, NegativeInfinity, NaN, ComplexInfinity, NumberSymbol, Exp1, Pi, GoldenRatio, TribonacciConstant, EulerGamma, Catalan, ImaginaryUnit, igcd, ilcm, igcdex, mpf_norm, comp, mod_inverse, integer_nthroot, isqrt, integer_log, sqrt, cbrt, oo, nan, pi, E, S, factorial, Catalan, EulerGamma, GoldenRatio, TribonacciConstant, cos, exp, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr, Dummy, Sum\nfrom sympy.core.compatibility import long\nfrom sympy.polys.domains.groundtypes import PythonRational\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom mpmath.rational import mpq\nfrom sympy import numbers\nfrom sympy.polys.numberfields import to_number_field\nfrom mpmath.libmp.libmpf import fnan\n\nclass TestNumbers(unittest.TestCase):\n    def test_rational(self):\n        self.assertEqual(Rational(1, 2), Half)\n        self.assertEqual(Rational(3, 2), S.One + Half)\n        self.assertEqual(Rational(3, 2) * Rational(2, 3), S.One)\n\n    def test_integer(self):\n        self.assertEqual(Integer(3), S(3))\n        self.assertEqual(Integer(3) + Integer(2), Integer(5))\n        self.assertEqual(Integer(3) - Integer(2), Integer(1))\n        self.assertEqual(Integer(3) * Integer(2), Integer(6))\n        self.assertEqual(Integer(3) // Integer(2), Integer(1))\n        self.assertEqual(Integer(3) % Integer(2), Integer(1))\n        self.assertEqual(Integer(3) ** Integer(2), Integer(9))\n\n    def test_float(self):\n        self.assertEqual(Float(3.14), Float(3.14))\n        self.assertEqual(Float(3.14) + Float(2.71), Float(5.85))\n        self.assertEqual(Float(3.14) - Float(2.71), Float(0.43))\n        self.assertEqual(Float(3.14) * Float(2.71), Float(8.5014))\n        self.assertEqual(Float(3.14) / Float(2.71), Float(1.1623618497))\n\n    # Add more test cases for other functions and classes in numbers.py\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_53": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.http.response import *\nfrom io import BytesIO\n\nclass TestHttpResponseBase(unittest.TestCase):\n    def setUp(self):\n        self.response = HttpResponseBase()\n\n    def test_set_header(self):\n        self.response['Content-Type'] = 'application/json'\n        self.assertEqual(self.response['Content-Type'], 'application/json')\n\n    def test_delete_header(self):\n        self.response['Content-Type'] = 'application/json'\n        del self.response['Content-Type']\n        self.assertNotIn('Content-Type', self.response)\n\n    def test_get_header(self):\n        self.response['Content-Type'] = 'application/json'\n        self.assertEqual(self.response.get('Content-Type'), 'application/json')\n\n    def test_set_cookie(self):\n        self.response.set_cookie('test_cookie', 'test_value')\n        self.assertEqual(self.response.cookies['test_cookie'].value, 'test_value')\n\nclass TestHttpResponse(unittest.TestCase):\n    def setUp(self):\n        self.response = HttpResponse('test_content')\n\n    def test_content(self):\n        self.assertEqual(self.response.content, b'test_content')\n\n    def test_write(self):\n        self.response.write('_appended')\n        self.assertEqual(self.response.content, b'test_content_appended')\n\nclass TestStreamingHttpResponse(unittest.TestCase):\n    def setUp(self):\n        self.response = StreamingHttpResponse(iter([b'test_content']))\n\n    def test_streaming_content(self):\n        self.assertEqual(list(self.response.streaming_content), [b'test_content'])\n\nclass TestFileResponse(unittest.TestCase):\n    def setUp(self):\n        self.file = BytesIO(b'test_content')\n        self.file.name = 'test_file.txt'\n        self.response = FileResponse(self.file)\n\n    def test_set_headers(self):\n        self.assertEqual(self.response['Content-Type'], 'text/plain')\n        self.assertEqual(self.response['Content-Disposition'], 'inline; filename=\"test_file.txt\"')\n\nclass TestHttpResponseRedirect(unittest.TestCase):\n    def test_redirect_to(self):\n        response = HttpResponseRedirect('/redirect')\n        self.assertEqual(response['Location'], '/redirect')\n\nclass TestJsonResponse(unittest.TestCase):\n    def test_json_response(self):\n        response = JsonResponse({'key': 'value'})\n        self.assertEqual(json.loads(response.content), {'key': 'value'})\n"], "sample_491": ["\nfrom django.forms import Form, CharField, TextInput, Textarea, PasswordInput, MultiWidget, SplitDateTimeField, SplitHiddenDateTimeWidget\nfrom django.forms.boundfield import BoundField\n\nclass TestForm(Form):\n    text_field = CharField()\n    textarea_field = CharField(widget=Textarea)\n    password_field = CharField(widget=PasswordInput)\n    datetime_field = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n\ndef test_init():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert bound_field.name == 'text_field'\n    assert bound_field.label == 'Text field'\n    assert bound_field.help_text == ''\n\ndef test_subwidgets():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['textarea_field'], 'textarea_field')\n    assert len(bound_field.subwidgets) == 1\n    assert isinstance(bound_field.subwidgets[0].parent_widget, Textarea)\n\ndef test_errors():\n    form = TestForm({'text_field': 'invalid_value'})\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert not bound_field.errors\n    form.is_valid()\n    assert 'text_field' in form.errors\n    assert bound_field.errors\n\ndef test_as_widget():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['password_field'], 'password_field')\n    assert 'type=\"password\"' in bound_field.as_widget()\n\ndef test_as_text():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert 'type=\"text\"' in bound_field.as_text()\n\ndef test_as_textarea():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['textarea_field'], 'textarea_field')\n    assert '<textarea' in bound_field.as_textarea()\n\ndef test_as_hidden():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert 'type=\"hidden\"' in bound_field.as_hidden()\n\ndef test_data():\n    form = TestForm({'text_field': 'test_value'})\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert bound_field.data == 'test_value'\n\ndef test_value():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert bound_field.value() is None\n    form = TestForm({'text_field': 'test_value'})\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert bound_field.value() == 'test_value'\n\ndef test_label_tag():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert 'for=\"id_text_field\"' in bound_field.label_tag()\n\ndef test_legend_tag():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert '<legend for=\"id_text_field\">Text field:</legend>' in bound_field.legend_tag()\n\ndef test_css_classes():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert bound_field.css_classes() == ''\n    form.is_valid()\n    assert 'error' in bound_field.css_classes()\n\ndef test_is_hidden():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert not bound_field.is_hidden\n\ndef test_auto_id():\n    form = TestForm(auto_id='test_%s')\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert bound_field.auto_id == 'test_text_field'\n\ndef test_id_for_label():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert bound_field.id_for_label == 'id_text_field'\n\ndef test_initial():\n    form = TestForm(initial={'text_field': 'initial_value'})\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert bound_field.initial == 'initial_value'\n\ndef test_build_widget_attrs():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert bound_field.build_widget_attrs({}) == {}\n    assert bound_field.build_widget_attrs({}, TextInput()) == {'required': True}\n\ndef test_widget_type():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert bound_field.widget_type == 'textinput'\n\ndef test_use_fieldset():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['text_field'], 'text_field')\n    assert not bound_field.use_fieldset\n\ndef test_datetime_subwidgets():\n    form = TestForm()\n    bound_field = BoundField(form, form.fields['datetime_field'], 'datetime_field')\n    assert len(bound_field.subwidgets) == 2\n    assert isinstance(bound_field.subwidgets[0].parent_widget, TextInput)\n    assert isinstance(bound_field.subwidgets[1].parent_widget, TextInput)\n"], "sample_327": ["\nimport unittest\nfrom django.forms import fields\nfrom django.core.exceptions import ValidationError\nfrom django.core.files.uploadedfile import SimpleUploadedFile\nfrom unittest.mock import MagicMock, patch\nfrom PIL import Image\nimport datetime\nimport json\nimport uuid\n\nclass TestDjangoFields(unittest.TestCase):\n    def test_char_field(self):\n        field = fields.CharField()\n        self.assertEqual(field.clean('test'), 'test')\n        self.assertRaises(ValidationError, field.clean, None)\n\n    def test_integer_field(self):\n        field = fields.IntegerField()\n        self.assertEqual(field.clean('123'), 123)\n        self.assertRaises(ValidationError, field.clean, 'abc')\n\n    # Add more tests for other fields...\n\n    def test_file_field(self):\n        field = fields.FileField()\n        upload_file = SimpleUploadedFile(\"file.txt\", b\"file_content\")\n        self.assertEqual(field.clean(upload_file).read(), b\"file_content\")\n\n    def test_image_field(self):\n        field = fields.ImageField()\n        upload_file = SimpleUploadedFile(\"file.jpg\", b\"file_content\", content_type=\"image/jpeg\")\n        with patch.object(Image, 'open') as mock_open:\n            mock_open.return_value = MagicMock()\n            field.clean(upload_file)\n            mock_open.assert_called_once()\n\n    def test_uuid_field(self):\n        field = fields.UUIDField()\n        uuid_val = uuid.uuid4()\n        self.assertEqual(field.clean(str(uuid_val)), uuid_val)\n        self.assertRaises(ValidationError, field.clean, 'invalid_uuid')\n\n    # Add more tests for other fields...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_450": ["\nfrom django.test import TestCase, RequestFactory\nfrom django.contrib.auth.models import User\nfrom django.template import Context, Template\nfrom django.contrib.admin.models import LogEntry, ADDITION\nfrom django.contrib.admin.templatetags.log import AdminLogNode\n\nclass AdminLogNodeTest(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.user1 = User.objects.create_user(username='user1', password='password1')\n        self.user2 = User.objects.create_user(username='user2', password='password2')\n        LogEntry.objects.log_action(\n            user_id=self.user1.pk,\n            content_type_id=1,\n            object_id=1,\n            object_repr='Test Object',\n            action_flag=ADDITION,\n            change_message='Added test object'\n        )\n        LogEntry.objects.log_action(\n            user_id=self.user2.pk,\n            content_type_id=2,\n            object_id=2,\n            object_repr='Test Object 2',\n            action_flag=ADDITION,\n            change_message='Added test object 2'\n        )\n\n    def test_render_without_user(self):\n        context = Context({\"log_entries\": LogEntry.objects.all()})\n        node = AdminLogNode(limit=1, varname='admin_log', user=None)\n        node.render(context)\n        self.assertEqual(len(context['admin_log']), 1)\n\n    def test_render_with_user_id(self):\n        context = Context({\"log_entries\": LogEntry.objects.all()})\n        node = AdminLogNode(limit=1, varname='admin_log', user=str(self.user1.pk))\n        node.render(context)\n        self.assertEqual(len(context['admin_log']), 1)\n        self.assertEqual(context['admin_log'][0].user, self.user1)\n\n    def test_render_with_user_var(self):\n        context = Context({\"log_entries\": LogEntry.objects.all(), \"user\": self.user2})\n        node = AdminLogNode(limit=1, varname='admin_log', user='user')\n        node.render(context)\n        self.assertEqual(len(context['admin_log']), 1)\n        self.assertEqual(context['admin_log'][0].user, self.user2)\n\n    def test_template_tag(self):\n        template = Template(\"{% load log %}{% get_admin_log 1 as admin_log for_user user1 %}\")\n        context = Context({\"log_entries\": LogEntry.objects.all(), \"user1\": self.user1})\n        rendered = template.render(context)\n        self.assertEqual(len(context['admin_log']), 1)\n        self.assertEqual(context['admin_log'][0].user, self.user1)\n"], "sample_850": ["\nimport unittest\nimport numpy as np\nfrom sklearn.model_selection._split import KFold, StratifiedKFold, GroupKFold, TimeSeriesSplit, LeaveOneOut\nfrom sklearn.model_selection._split import LeaveOneGroupOut, LeavePOut, LeavePGroupsOut, ShuffleSplit\nfrom sklearn.model_selection._split import GroupShuffleSplit, StratifiedShuffleSplit, PredefinedSplit\nfrom sklearn.model_selection._split import check_cv, train_test_split, RepeatedKFold, RepeatedStratifiedKFold\nfrom sklearn.model_selection._split import _validate_shuffle_split, _build_repr\n\nclass TestSplitMethods(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4], [1, 2], [3, 4], [1, 2], [3, 4]])\n        self.y = np.array([0, 0, 1, 1, 2, 2])\n        self.groups = np.array([1, 1, 2, 2, 3, 3])\n\n    def test_kfold_split(self):\n        kf = KFold(n_splits=2)\n        splits = list(kf.split(self.X))\n        self.assertEqual(len(splits), 2)\n\n    def test_stratifiedkfold_split(self):\n        skf = StratifiedKFold(n_splits=2)\n        splits = list(skf.split(self.X, self.y))\n        self.assertEqual(len(splits), 2)\n\n    # Add more test methods for other split classes\n\n    def test_train_test_split(self):\n        X_train, X_test, y_train, y_test = train_test_split(self.X, self.y, test_size=0.33, random_state=42)\n        self.assertEqual(len(X_train), 4)\n        self.assertEqual(len(X_test), 2)\n\n    # Add more test methods for other functions\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_875": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics import (\n    accuracy_score, average_precision_score, balanced_accuracy_score, class_likelihood_ratios,\n    classification_report, cohen_kappa_score, confusion_matrix, f1_score, fbeta_score,\n    hamming_loss, hinge_loss, jaccard_score, log_loss, matthews_corrcoef,\n    precision_recall_fscore_support, precision_score, recall_score, zero_one_loss,\n    brier_score_loss, multilabel_confusion_matrix, _check_targets\n)\n\nclass TestClassificationMetrics(unittest.TestCase):\n    def setUp(self):\n        self.y_true = np.array([0, 1, 2, 0, 1, 2])\n        self.y_pred = np.array([0, 2, 1, 0, 0, 1])\n        self.sample_weight = np.array([0.2, 0.3, 0.5, 0.1, 0.4, 0.6])\n\n    def test_accuracy_score(self):\n        score = accuracy_score(self.y_true, self.y_pred, sample_weight=self.sample_weight)\n        self.assertAlmostEqual(score, 0.5, places=2)\n\n    def test_average_precision_score(self):\n        score = average_precision_score(self.y_true, self.y_pred, sample_weight=self.sample_weight)\n        self.assertAlmostEqual(score, 0.625, places=2)\n\n    def test_balanced_accuracy_score(self):\n        score = balanced_accuracy_score(self.y_true, self.y_pred, sample_weight=self.sample_weight)\n        self.assertAlmostEqual(score, 0.5, places=2)\n\n    # Add more test methods for other metrics...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_978": ["\nimport unittest\nfrom sympy.combinatorics.permutations import Permutation, Cycle\n\nclass TestPermutation(unittest.TestCase):\n    def test_init(self):\n        p = Permutation([0, 2, 1])\n        self.assertEqual(p.array_form, [0, 2, 1])\n\n        p = Permutation([[4, 5, 6], [0, 1]])\n        self.assertEqual(p.array_form, [1, 0, 2, 3, 5, 6, 4])\n\n        p = Permutation([[4, 5, 6], [0, 1], [19]])\n        self.assertEqual(p.array_form, [1, 0, 2, 3, 5, 6, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n\n        with self.assertRaises(ValueError):\n            Permutation([2, 1])\n\n        with self.assertRaises(ValueError):\n            Permutation([1, 0, 2, 2])\n\n    def test_cyclic_form(self):\n        p = Permutation([0, 3, 1, 2])\n        self.assertEqual(p.cyclic_form, [[1, 3, 2]])\n\n        p = Permutation([1, 0, 2, 4, 3, 5])\n        self.assertEqual(p.cyclic_form, [[0, 1], [3, 4]])\n\n    def test_full_cyclic_form(self):\n        p = Permutation([0, 2, 1])\n        self.assertEqual(p.full_cyclic_form, [[0], [1, 2]])\n\n    def test_size(self):\n        p = Permutation([[3, 2], [0, 1]])\n        self.assertEqual(p.size, 4)\n\n    def test_support(self):\n        p = Permutation([[3, 2], [0, 1], [4]])\n        self.assertEqual(p.support(), [0, 1, 2, 3])\n\n    def test_rank(self):\n        p = Permutation([0, 1, 2, 3])\n        self.assertEqual(p.rank(), 0)\n\n        p = Permutation([3, 2, 1, 0])\n        self.assertEqual(p.rank(), 23)\n\n    def test_cardinality(self):\n        p = Permutation([0, 1, 2, 3])\n        self.assertEqual(p.cardinality, 24)\n\n    def test_parity(self):\n        p = Permutation([0, 1, 2, 3])\n        self.assertEqual(p.parity(), 0)\n\n        p = Permutation([3, 2, 0, 1])\n        self.assertEqual(p.parity(), 1)\n\n    def test_is_even(self):\n        p = Permutation([0, 1, 2, 3])\n        self.assertTrue(p.is_even)\n\n        p = Permutation([3, 2, 0, 1])\n        self.assertFalse(p.is_odd)\n\n    def test_is_Identity(self):\n        p = Permutation([])\n        self.assertTrue(p.is_Identity)\n\n        p = Permutation([[0], [1], [2]])\n        self.assertTrue(p.is_Identity)\n\n        p = Permutation([0, 1, 2])\n        self.assertTrue(p.is_Identity)\n\n        p = Permutation([0, 2, 1])\n        self.assertFalse(p.is_Identity)\n\n    def test_ascents(self):\n        p = Permutation([4, 0, 1, 3, 2])\n        self.assertEqual(p.ascents(), [1, 2])\n\n    def test_descents(self):\n        p = Permutation([4, 0, 1, 3, 2])\n        self.assertEqual(p.descents(), [0, 3])\n\n    def test_max(self):\n        p = Permutation([1, 0, 2, 3, 4])\n        self.assertEqual(p.max(), 1)\n\n    def test_min(self):\n        p = Permutation([0, 1, 4, 3, 2])\n        self.assertEqual(p.min(), 2)\n\n    def test_inversions(self):\n        p = Permutation([0, 1, 2, 3, 4, 5])\n        self.assertEqual(p.inversions(), 0)\n\n        p = Permutation([3, 2, 1, 0])\n        self.assertEqual(p.inversions(), 6)\n\n    def test_order(self):\n        p = Permutation([3, 1, 5, 2, 4, 0])\n        self.assertEqual(p.order(), 4)\n\n    def test_length(self):\n        p = Permutation([0, 3, 2, 1])\n        self.assertEqual(p.length(), 2)\n\n        p = Permutation([[0, 1], [2, 3]])\n        self.assertEqual(p.length(), 4)\n\n    def test_cycles(self):\n        p = Permutation([0, 1, 2])\n        self.assertEqual(p.cycles, 3)\n\n        p = Permutation([0, 1, 2]).full_cyclic_form\n        self.assertEqual(p, [[0], [1], [2]])\n\n        p = Permutation(0, 1)(2, 3)\n        self.assertEqual(p.cycles, 2)\n\n    def test_index(self):\n        p = Permutation([3, 0, 2, 1, 4])\n        self.assertEqual(p.index(), 2)\n\n    def test_inversion_vector(self):\n        p = Permutation([4, 8, 0, 7, 1, 5, 3, 6, 2])\n        self.assertEqual(p.inversion_vector(), [4, 7, 0, 5, 0, 2, 1, 1])\n\n        p = Permutation([3, 2, 1, 0])\n        self.assertEqual(p.inversion_vector(), [3, 2, 1])\n\n    def test_from_inversion_vector(self):\n        p = Permutation.from_inversion_vector([3, 2, 1, 0, 0])\n        self.assertEqual(p.array_form, [3, 2, 1, 0, 4, 5])\n\n        with self.assertRaises(ValueError):\n            Permutation.from_inversion_vector([3, 2, 1, 2, 0])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_824": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics.pairwise import *\n\nclass TestPairwiseFunctions(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2, 3], [4, 5, 6]])\n        self.Y = np.array([[7, 8, 9], [10, 11, 12]])\n\n    def test_euclidean_distances(self):\n        result = euclidean_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_manhattan_distances(self):\n        result = manhattan_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_haversine_distances(self):\n        result = haversine_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_linear_kernel(self):\n        result = linear_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_chi2_kernel(self):\n        result = chi2_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_additive_chi2_kernel(self):\n        result = additive_chi2_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_polynomial_kernel(self):\n        result = polynomial_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_rbf_kernel(self):\n        result = rbf_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_laplacian_kernel(self):\n        result = laplacian_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_sigmoid_kernel(self):\n        result = sigmoid_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_cosine_similarity(self):\n        result = cosine_similarity(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_cosine_distances(self):\n        result = cosine_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_pairwise_distances(self):\n        result = pairwise_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_pairwise_distances_chunked(self):\n        result = next(pairwise_distances_chunked(self.X, self.Y))\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_pairwise_distances_argmin_min(self):\n        result = pairwise_distances_argmin_min(self.X, self.Y)\n        self.assertEqual(len(result), 2)\n\n    def test_pairwise_distances_argmin(self):\n        result = pairwise_distances_argmin(self.X, self.Y)\n        self.assertEqual(result.shape, (2,))\n\n    def test_pairwise_kernels(self):\n        result = pairwise_kernels(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n\n    def test_paired_distances(self):\n        result = paired_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (2,))\n\n    def test_paired_euclidean_distances(self):\n        result = paired_euclidean_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (2,))\n\n    def test_paired_manhattan_distances(self):\n        result = paired_manhattan_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (2,))\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_438": ["\nfrom unittest.mock import MagicMock, patch\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\nfrom django.db.models.base import Model, ModelBase, ModelStateFieldsCacheDescriptor, ModelState\n\nclass TestModel(TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            field1 = models.CharField(max_length=20)\n            field2 = models.IntegerField()\n\n        self.test_model = TestModel\n        self.test_instance = TestModel(field1='test', field2=123)\n\n    def test_init(self):\n        with self.assertRaises(TypeError):\n            TestModel(unknown_field='value')\n\n    def test_save(self):\n        with patch('django.db.models.base.Model.save_base') as mock_save_base:\n            self.test_instance.save()\n            mock_save_base.assert_called_once()\n\n    def test_delete(self):\n        with patch('django.db.models.base.Collector') as mock_collector:\n            self.test_instance.delete()\n            mock_collector.assert_called_once()\n\n    def test_clean(self):\n        self.test_instance.clean()\n\n    def test_validate_unique(self):\n        with self.assertRaises(ValidationError):\n            self.test_instance.validate_unique()\n\n    def test_full_clean(self):\n        self.test_instance.full_clean()\n\n    def test_check(self):\n        errors = self.test_model.check()\n        self.assertEqual(len(errors), 0)\n\nclass TestModelStateFieldsCacheDescriptor(TestCase):\n    def test_get(self):\n        descriptor = ModelStateFieldsCacheDescriptor()\n        instance = MagicMock()\n        instance.fields_cache = {}\n        result = descriptor.__get__(instance)\n        self.assertEqual(result, instance.fields_cache)\n\nclass TestModelState(TestCase):\n    def test_init(self):\n        state = ModelState()\n        self.assertIsNone(state.db)\n        self.assertTrue(state.adding)\n        self.assertIsInstance(state.fields_cache, ModelStateFieldsCacheDescriptor)\n\nclass TestModelBase(TestCase):\n    def test_prepare(self):\n        with patch('django.db.models.base.ModelBase._prepare') as mock_prepare:\n            ModelBase._prepare(MagicMock())\n            mock_prepare.assert_called_once()\n\n    def test_base_manager(self):\n        with patch('django.db.models.base.ModelBase._base_manager') as mock_base_manager:\n            ModelBase._base_manager\n            mock_base_manager.assert_called_once()\n\n    def test_default_manager(self):\n        with patch('django.db.models.base.ModelBase._default_manager') as mock_default_manager:\n            ModelBase._default_manager\n            mock_default_manager.assert_called_once()\n"], "sample_666": ["\nimport pytest\nfrom _pytest.config import Config, hookimpl\nfrom _pytest.mark import MarkInfo\nfrom _pytest.skipping import skipped_by_mark_key, evalxfail_key, unexpectedsuccess_key\nfrom _pytest.skipping import pytest_addoption, pytest_configure, pytest_runtest_setup, pytest_pyfunc_call, pytest_runtest_makereport, pytest_report_teststatus\nfrom _pytest.outcomes import Skipped, Failed\n\ndef test_pytest_addoption(parser):\n    pytest_addoption(parser)\n    assert parser.getoption(\"--runxfail\") == False\n    assert parser.getini(\"xfail_strict\") == False\n\n@pytest.fixture\ndef config():\n    config = Config.fromdictargs({})\n    config.option.runxfail = False\n    return config\n\ndef test_pytest_configure(config):\n    pytest_configure(config)\n    assert config.getini(\"markers\") != []\n\ndef test_pytest_runtest_setup(item, mocker):\n    item._store = {}\n    item._markers = []\n    mocker.patch('_pytest.skipping.skip')\n    pytest_runtest_setup(item)\n    assert skipped_by_mark_key in item._store\n\ndef test_pytest_pyfunc_call(pyfuncitem, mocker):\n    pyfuncitem.config.option.runxfail = False\n    pyfuncitem._store = {evalxfail_key: mocker.Mock()}\n    mocker.patch('_pytest.skipping.check_strict_xfail')\n    outcome = mocker.Mock()\n    outcome.excinfo = None\n    generator = pytest_pyfunc_call(pyfuncitem)\n    next(generator)\n    generator.send(outcome)\n    pytest.skipping.check_strict_xfail.assert_called_once_with(pyfuncitem)\n\ndef test_pytest_runtest_makereport(item, call, mocker):\n    item.config.option.runxfail = False\n    item._store = {}\n    outcome = mocker.Mock()\n    outcome.get_result.return_value = mocker.Mock(skipped=False)\n    call.excinfo = None\n    pytest_runtest_makereport(item, call)\n    assert unexpectedsuccess_key not in item._store\n\ndef test_pytest_report_teststatus(report):\n    report.wasxfail = \"reason\"\n    report.skipped = True\n    assert pytest_report_teststatus(report) == (\"xfailed\", \"x\", \"XFAIL\")\n    report.skipped = False\n    report.passed = True\n    assert pytest_report_teststatus(report) == (\"xpassed\", \"X\", \"XPASS\")\n"], "sample_564": ["\nimport unittest\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nclass TestAxes3D(unittest.TestCase):\n\n    def setUp(self):\n        self.fig = plt.figure()\n        self.ax = self.fig.add_subplot(111, projection='3d')\n\n    def test_plot(self):\n        x = np.linspace(0, 1, 100)\n        y = np.sin(x * 2 * np.pi) / 2 + 0.5\n        z = np.linspace(0, 1, 100)\n        self.ax.plot(x, y, z, label='test')\n        self.assertEqual(len(self.ax.lines), 1)\n\n    def test_scatter(self):\n        x = np.random.rand(100)\n        y = np.random.rand(100)\n        z = np.random.rand(100)\n        self.ax.scatter(x, y, z)\n        self.assertEqual(len(self.ax.collections), 1)\n\n    def test_surface(self):\n        X = np.arange(-5, 5, 0.25)\n        Y = np.arange(-5, 5, 0.25)\n        X, Y = np.meshgrid(X, Y)\n        R = np.sqrt(X**2 + Y**2)\n        Z = np.sin(R)\n        self.ax.plot_surface(X, Y, Z)\n        self.assertEqual(len(self.ax.collections), 1)\n\n    def test_wireframe(self):\n        X = np.arange(-5, 5, 0.25)\n        Y = np.arange(-5, 5, 0.25)\n        X, Y = np.meshgrid(X, Y)\n        R = np.sqrt(X**2 + Y**2)\n        Z = np.sin(R)\n        self.ax.plot_wireframe(X, Y, Z)\n        self.assertEqual(len(self.ax.collections), 1)\n\n    def test_contour(self):\n        X = np.arange(-5, 5, 0.25)\n        Y = np.arange(-5, 5, 0.25)\n        X, Y = np.meshgrid(X, Y)\n        R = np.sqrt(X**2 + Y**2)\n        Z = np.sin(R)\n        self.ax.contour(X, Y, Z, cmap='coolwarm')\n        self.assertEqual(len(self.ax.collections), 1)\n\n    def test_contourf(self):\n        X = np.arange(-5, 5, 0.25)\n        Y = np.arange(-5, 5, 0.25)\n        X, Y = np.meshgrid(X, Y)\n        R = np.sqrt(X**2 + Y**2)\n        Z = np.sin(R)\n        self.ax.contourf(X, Y, Z, cmap='coolwarm')\n        self.assertEqual(len(self.ax.collections), 1)\n\n    def test_quiver(self):\n        X = np.arange(-5, 5, 1)\n        Y = np.arange(-5, 5, 1)\n        U = np.ones((10, 10))\n        V = np.ones((10, 10))\n        W = np.ones((10, 10))\n        self.ax.quiver(X, Y, 0, U, V, W)\n        self.assertEqual(len(self.ax.collections), 1)\n\n    def test_bar3d(self):\n        x = np.array([0, 1, 2, 3])\n        y = np.array([0, 1, 2, 3])\n        z = np.zeros("], "sample_1074": ["\nimport unittest\nfrom sympy import IndexedBase, Idx, Indexed, S, symbols, oo, Tuple, Matrix, NDimArray, Symbol\nfrom sympy.tensor import get_indices, get_contraction_structure\nfrom sympy.tensor.indexed import IndexException\n\nclass TestIndexed(unittest.TestCase):\n    def setUp(self):\n        self.i, self.j, self.k, self.l, self.m, self.n = symbols('i j k l m n', cls=Idx)\n        self.A = IndexedBase('A')\n        self.x = IndexedBase('x')\n        self.dim1, self.dim2 = symbols('dim1 dim2', integer=True)\n\n    def test_indexed_base_creation(self):\n        A = IndexedBase('A')\n        self.assertEqual(A.name, 'A')\n\n    def test_indexed_creation(self):\n        a_ij = self.A[self.i, self.j]\n        self.assertIsInstance(a_ij, Indexed)\n        self.assertEqual(a_ij.base, self.A)\n        self.assertEqual(a_ij.indices, (self.i, self.j))\n\n    def test_indexed_shape(self):\n        A = IndexedBase('A', shape=(self.dim1, 2*self.dim1, self.dim2))\n        self.assertEqual(A[self.i, self.j, self.k].shape, (self.dim1, 2*self.dim1, self.dim2))\n\n    def test_indexed_ranges(self):\n        A = IndexedBase('A')\n        self.assertEqual(self.A[self.i, self.j].ranges, [(0, self.i.upper), (0, self.j.upper)])\n\n    def test_indexed_derivative(self):\n        self.assertEqual(self.A[self.i, self.j].diff(self.A[self.i, self.k]), KroneckerDelta(self.j, self.k))\n\n    def test_idx_creation(self):\n        i = Idx('i')\n        self.assertEqual(i.label, Symbol('i', integer=True))\n        self.assertIsNone(i.lower)\n        self.assertIsNone(i.upper)\n\n    def test_idx_range(self):\n        i = Idx(self.n)\n        self.assertEqual(i.lower, 0)\n        self.assertEqual(i.upper, self.n - 1)\n\n    def test_get_indices(self):\n        self.assertEqual(get_indices(self.A[self.i, self.j, self.j]), ({self.i}, {}))\n\n    def test_get_contraction_structure(self):\n        self.assertEqual(get_contraction_structure(self.A[self.i, self.j, self.j]), {(self.j,): {self.A[self.i, self.j, self.j]}})\n\n    def test_index_exception(self):\n        with self.assertRaises(IndexException):\n            self.A.diff(self.A[self.i, self.j, self.k])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1131": ["\nimport unittest\nfrom sympy import symbols, sin, cos, sqrt, tan, Integral, pi\nfrom sympy.printing.pycode import (PythonCodePrinter, MpmathPrinter, NumPyPrinter, SciPyPrinter, SymPyPrinter, pycode)\n\nclass TestPyCode(unittest.TestCase):\n\n    def setUp(self):\n        self.x = symbols('x')\n\n    def test_python_code_printer(self):\n        printer = PythonCodePrinter()\n        self.assertEqual(printer.doprint(tan(self.x) + 1), 'math.tan(x) + 1')\n\n    def test_mpmath_printer(self):\n        printer = MpmathPrinter()\n        self.assertEqual(printer.doprint(sqrt(self.x)), 'mpmath.sqrt(x)')\n\n    def test_numpy_printer(self):\n        printer = NumPyPrinter()\n        self.assertEqual(printer.doprint(sin(self.x) + cos(self.x)), 'numpy.sin(x) + numpy.cos(x)')\n\n    def test_scipy_printer(self):\n        printer = SciPyPrinter()\n        self.assertEqual(printer.doprint(Integral(sin(self.x), (self.x, 0, pi))), 'scipy.integrate.quad(lambda x: numpy.sin(x), 0, pi)[0]')\n\n    def test_sympy_printer(self):\n        printer = SymPyPrinter()\n        self.assertEqual(printer.doprint(sqrt(self.x)), 'sympy.sqrt(x)')\n\n    def test_pycode(self):\n        self.assertEqual(pycode(tan(self.x) + 1), 'math.tan(x) + 1')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_784": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, confusion_matrix, cohen_kappa_score, jaccard_similarity_score, \\\n    matthews_corrcoef, zero_one_loss, f1_score, fbeta_score, precision_recall_fscore_support, precision_score, \\\n    recall_score, balanced_accuracy_score, classification_report, hamming_loss, log_loss, hinge_loss, \\\n    brier_score_loss, multilabel_confusion_matrix\n\nclass TestClassificationMetrics(unittest.TestCase):\n    def setUp(self):\n        self.y_true = np.array([0, 1, 2, 0, 1, 2])\n        self.y_pred = np.array([0, 2, 1, 0, 0, 1])\n        self.y_true_multi = np.array([[0, 1], [1, 0], [1, 1], [0, 0]])\n        self.y_pred_multi = np.array([[0, 1], [1, 1], [0, 1], [0, 0]])\n        self.sample_weight = np.array([1, 2, 3, 4])\n\n    def test_accuracy_score(self):\n        self.assertEqual(accuracy_score(self.y_true, self.y_pred), 0.3333333333333333)\n        self.assertEqual(accuracy_score(self.y_true_multi, self.y_pred_multi, normalize=False), 2)\n\n    def test_confusion_matrix(self):\n        self.assertTrue(np.array_equal(confusion_matrix(self.y_true, self.y_pred),\n                                       np.array([[2, 0, 0], [1, 1, 1], [0, 1, 1]])))\n\n    def test_cohen_kappa_score(self):\n        self.assertEqual(cohen_kappa_score(self.y_true, self.y_pred), 0.2222222222222222)\n\n    def test_jaccard_similarity_score(self):\n        self.assertEqual(jaccard_similarity_score(self.y_true, self.y_pred), 0.3333333333333333)\n        self.assertEqual(jaccard_similarity_score(self.y_true_multi, self.y_pred_multi), 0.5)\n\n    def test_matthews_corrcoef(self):\n        self.assertEqual(matthews_corrcoef(self.y_true, self.y_pred), 0.2581988897471611)\n\n    def test_zero_one_loss(self):\n        self.assertEqual(zero_one_loss(self.y_true, self.y_pred), 0.6666666666666666)\n\n    def test_f1_score(self):\n        self.assertEqual(f1_score(self.y_true, self.y_pred, average='macro'), 0.25)\n\n    def test_fbeta_score(self):\n        self.assertEqual(fbeta_score(self.y_true, self.y_pred, beta=2, average='macro'), 0.22727272727272727)\n\n    def test_precision_recall_fscore_support(self):\n        p, r, f, _ = precision_recall_fscore_support(self.y_true, self.y_pred, average='macro')\n        self.assertEqual(p, 0.3333333333333333)\n        self.assertEqual(r, 0.3333333333333333)\n        self.assertEqual(f, 0.25)\n\n    def test_precision_score(self):\n        self.assertEqual(precision_score(self.y_true, self.y_pred, average='macro'), 0.3333333333333333)\n\n    def test_recall_score(self):\n        self.assertEqual(recall_score(self.y_true, self.y_pred, average='macro'), 0.3333333333333333)\n\n    def test_balanced_accuracy_score(self):\n        self.assertEqual(balanced_accuracy_score(self.y_true, self.y_pred), 0.3333333333333333)\n\n    def test_classification_report(self):\n        report = classification_report(self.y_true, self.y_pred)\n        self.assertIsInstance(report, str)\n\n    def test_hamming_loss(self):\n        self.assertEqual(hamming_loss(self.y_true_multi, self.y_pred_multi), 0.25)\n\n    def test_log_loss(self):\n        self.assertAlmostEqual(log_loss(self.y_true, np.array([[0.1, 0.9], [0.9, 0.1], [0.8, 0.2], [0.35, 0.65]]),\n                                        labels=[0, 1, 2]), 0.21616934461946277)\n\n    def test_hinge_loss(self):\n        self.assertEqual(hinge_loss(self.y_true, np.array([-2.18, 2.36, 0.09])), 0.3)\n\n    def test_brier_score_loss(self):\n        self.assertAlmostEqual(brier_score_loss(np.array([0, 1, 1, 0]), np.array([0.1, 0.9, 0.8, 0.3])), 0.0375)\n\n    def test_multilabel_confusion_matrix(self):\n        mcm = multilabel_confusion_matrix(self.y_true_multi, self.y_pred_multi)\n        self.assertTrue(np.array_equal(mcm, np.array([[[2, 0], [0, 1]], [[1, 0], [0, 1]]])))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1109": ["\nimport unittest\nfrom sympy.utilities.iterables import (\n    _partition, _set_partitions, binary_partitions, bracelets, capture, cartes, common_prefix,\n    common_suffix, connected_components, dict_merge, filter_symbols, flatten, generate_bell,\n    generate_derangements, generate_involutions, generate_oriented_forest, group, has_dups,\n    ibin, iproduct, kbins, minlex, multiset, multiset_combinations, multiset_partitions,\n    multiset_permutations, necklaces, numbered_symbols, ordered, partitions, permutations,\n    postfixes, postorder_traversal, prefixes, reshape, rotate_left, rotate_right, runs, sift,\n    strongly_connected_components, subsets, take, topological_sort, unflatten, uniq,\n    variations, ordered_partitions, rotations, is_palindromic\n)\n\nclass TestIterables(unittest.TestCase):\n    def test_flatten(self):\n        self.assertEqual(flatten([1, 2, 3]), [1, 2, 3])\n        self.assertEqual(flatten([1, 2, [3]]), [1, 2, 3])\n        self.assertEqual(flatten([1, [2, 3], [4, 5]]), [1, 2, 3, 4, 5])\n        self.assertEqual(flatten([1.0, 2, (1, None)]), [1.0, 2, 1, None])\n\n    def test_unflatten(self):\n        self.assertEqual(unflatten([1, 2, 3, 4], 2), [(1, 2), (3, 4)])\n        self.assertRaises(ValueError, unflatten, [1, 2, 3], 2)\n\n    def test_reshape(self):\n        seq = list(range(1, 9))\n        self.assertEqual(reshape(seq, [4]), [[1, 2, 3, 4], [5, 6, 7, 8]])\n        self.assertEqual(reshape(seq, (4,)), [(1, 2, 3, 4), (5, 6, 7, 8)])\n        self.assertEqual(reshape(seq, (2, 2)), [(1, 2, 3, 4), (5, 6, 7, 8)])\n        self.assertEqual(reshape(seq, (2, [2])), [(1, 2, [3, 4]), (5, 6, [7, 8])])\n\n    def test_group(self):\n        self.assertEqual(group([1, 1, 1, 2, 2, 3]), [[1, 1, 1], [2, 2], [3]])\n        self.assertEqual(group([1, 1, 1, 2, 2, 3], multiple=False), [(1, 3), (2, 2), (3, 1)])\n\n    def test_iproduct(self):\n        self.assertEqual(list(iproduct([1, 2], [3, 4])), [(1, 3), (1, 4), (2, 3), (2, 4)])\n\n    def test_multiset(self):\n        self.assertEqual(multiset('mississippi'), {'i': 4, 'm': 1, 'p': 2, 's': 4})\n\n    def test_postorder_traversal(self):\n        from sympy import symbols\n        x, y, z = symbols('x y z')\n        expr = x + (y + z)*z\n        self.assertEqual(list(postorder_traversal(expr)), [x, y, z, y + z, z, z*(y + z), x + z*(y + z)])\n\n    def test_ibin(self):\n        self.assertEqual(ibin(2), [1, 0])\n        self.assertEqual(ibin(2, 4), [0, 0, 1, 0])\n        self.assertEqual(ibin(2, 4)[::-1], [0, 1, 0, 0])\n        self.assertEqual(list(ibin(2, 'all')), [[0, 0], [0, 1], [1, 0], [1, 1]])\n        self.assertEqual(ibin(2, 10, str=True), '0000000002')\n\n    def test_variations(self):\n        self.assertEqual(list(variations([1, 2], 2)), [(1, 2), (2, 1)])\n        self.assertEqual(list(variations([1, 2], 2, repetition=True)), [(1, 1), (1, 2), (2, 1), (2, 2)])\n\n    def test_subsets(self):\n        self.assertEqual(list(subsets([1, 2], 2)), [(1, 2)])\n        self.assertEqual(list(subsets([1, 2])), [(), (1,), (2,), (1, 2)])\n        self.assertEqual(list(subsets([1, 2, 3], 2)), [(1, 2), (1, 3), (2, 3)])\n        self.assertEqual(list(subsets([1, 2], 2, repetition=True)), [(1, 1), (1, 2), (2, 2)])\n\n    def test_filter_symbols(self):\n        self.assertEqual(list(filter_symbols([1, 2, 3], [2])), [1, 3])\n\n    def test_numbered_symbols(self):\n        symbols = list(numbered_symbols(start=0, exclude=[1, 3]))\n        self.assertEqual(symbols[:5], [0, 2, 4, 5, 6])\n\n    def test_sift(self):\n        self.assertEqual(sift([1, 2, 3], lambda x: x % 2), {0: [2], 1: [1, 3]})\n        self.assertEqual(sift([1, 2, 3], lambda x: x % 2, binary=True), ([2], [1, 3]))\n\n    def test_take(self):\n        self.assertEqual(take([1, 2, 3, 4, 5], 3), [1, 2, 3])\n\n    def test_dict_merge(self):\n        self.assertEqual(dict_merge({1: 2}, {3: 4}), {1: 2, 3: 4})\n\n    def test_common_prefix(self):\n        self.assertEqual(common_prefix([1, 2, 3], [1, 2, 5]), [1, 2])\n        self.assertEqual(common_prefix([1, 2, 3], [1, 3, 5]), [1])\n\n    def test_common_suffix(self):\n        self.assertEqual(common_suffix([1, 2, 3], [9, 2, 3]), [2, 3])\n        self.assertEqual(common_suffix([1, 2, 3], [9, 7, 3]), [3])\n\n    def test_prefixes(self):\n        self.assertEqual(list(prefixes([1, 2, 3, 4])), [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4]])\n\n    def test_postfixes(self):\n        self.assertEqual(list(postfixes([1, 2, 3, 4])), [[4], [3, 4], [2, 3, 4], [1, 2, 3, 4]])\n\n    def test_topological_sort(self):\n        V = [2, 3, 5, 7, 8, 9, 10, 11]\n        E = [(7, 11), (7, 8), (5, 11), (3, 8), (3, 10), (11, 2), (11, 9), (11, 10), (8, 9)]\n        self.assertEqual(topological_sort((V, E)), [3, 5, 7, 8, 11, 2, 9, 10])\n\n    def test_strongly_connected_components(self):\n        V = ['A', 'B', 'C', 'D']\n        E = [('A', 'B'), ('B', 'C'), ('C', 'B'), ('B', 'D')]\n        self.assertEqual(strongly_connected_components((V, E)), [['D'], ['B', 'C'], ['A']])\n\n    def test_rotate_left(self):\n        self.assertEqual(rotate_left([0, 1, 2], 1), [1, 2, 0])\n\n    def test_rotate_right(self):\n        self.assertEqual(rotate_right([0, 1, 2], 1), [2, 0, 1])\n\n    def test_least_rotation(self):\n        self.assertEqual(least_rotation([3, 1, 5, 1, 2]), 3)\n\n    def test_multiset_combinations(self):\n        self.assertEqual(list(multiset_combinations('baby', 3)), ['abb', 'aby', 'bby'])\n\n    def test_multiset_permutations(self):\n        self.assertEqual(list(multiset_permutations('aab')), ['aab', 'aba', 'baa'])\n\n    def test_partitions(self):\n        self.assertEqual(list(partitions(6, k=2)), [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}])\n\n    def test_ordered_partitions(self):\n        self.assertEqual(list(ordered_partitions(5)), [[1, 1, 1, 1, 1], [1, 1, 1, 2], [1, 1, 3], [1, 2, 2], [1, 4], [2, 3], [5]])\n\n    def test_binary_partitions(self):\n        self.assertEqual(list(binary_partitions(5)), [[4, 1], [2, 2, 1], [2, 1, 1, 1], [1, 1, 1, 1, 1]])\n\n    def test_has_dups(self):\n        self.assertTrue(has_dups((1, 2, 1)))\n        self.assertFalse(has_dups(range(3)))\n\n    def test_has_variety(self):\n        self.assertTrue(has_variety((1, 2, 1)))\n        self.assertFalse(has_variety((1, 1, 1)))\n\n    def test_uniq(self):\n        self.assertEqual(list(uniq([1, 4, 1, 5, 4, 2, 1, 2])), [1, 4, 5, 2])\n\n    def test_generate_bell(self):\n        self.assertEqual(list(generate_bell(3)), [(0, 1, 2), (0, 2, 1), (2, 0, 1), (2, 1, 0), (1, 2, 0), (1, 0, 2)])\n\n    def test_generate_involutions(self):\n        self.assertEqual(list(generate_involutions(3)), [(0, 1, 2), (0, 2, 1), (1, 0, 2), (2, 1, 0)])\n\n    def test_generate_derangements(self):\n        self.assertEqual(list(generate_derangements([0, 1, 2])), [[1, 2, 0], [2, 0, 1]])\n\n    def test_necklaces(self):\n        self.assertEqual(list(necklaces(4, 2)), [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 1], [0, 1, 0, 1], [0, 1, 1, 1], [1, 1, 1, 1]])\n\n    def test_bracelets(self):\n        self.assertEqual(list(bracelets(4, 2)), [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 1], [0, 1, 0, 1], [0, 1, 1, 1], [1, 0, 1, 0], [1, 1, 0, 0], [1, 1, 1, 1]])\n\n    def test_generate_oriented_forest(self):\n        self.assertEqual(list(generate_oriented_forest(4)), [[0, 1, 2, 3], [0, 1, 2, 2], [0, 1, 2, 1], [0, 1, 2, 0], [0, 1, 1, 1], [0, 1, 1, 0], [0, 1, 0, 1], [0, 1, 0, 0], [0, 0, 0, 0]])\n\n    def test_minlex(self):\n        self.assertEqual(minlex((1, 2, 0)), (0, 1, 2))\n        self.assertEqual(minlex((1, 0, 2)), (0, 2, 1))\n        self.assertEqual(minlex((1, 0, 2), directed=False), (0, 1, 2))\n\n    def test_runs(self):\n        self.assertEqual(runs([0, 1, 2, 2, 1, 4, 3, 2, 2]), [[0, 1, 2], [2], [1, 4], [3], [2], [2]])\n\n    def test_kbins(self):\n        self.assertEqual(list(kbins([0, 1, 2], 2)), [[[0], [1, 2]], [[0, 1], [2]], [[0, 1, 2], []]])\n\n    def test_rotations(self):\n        self.assertEqual(list(rotations([1, 2, 3])), [[1, 2, 3], [2, 3, 1], [3, 1, 2]])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_820": ["\nimport unittest\nimport numpy as np\nfrom sklearn.ensemble import VotingClassifier, VotingRegressor\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.exceptions import NotFittedError\n\nclass TestVotingClassifier(unittest.TestCase):\n\n    def setUp(self):\n        self.clf1 = LogisticRegression(solver='lbfgs', multi_class='multinomial', random_state=1)\n        self.clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n        self.clf3 = GaussianNB()\n        self.X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n        self.y = np.array([1, 1, 1, 2, 2, 2])\n\n    def test_fit(self):\n        eclf = VotingClassifier(estimators=[('lr', self.clf1), ('rf', self.clf2), ('gnb', self.clf3)])\n        eclf.fit(self.X, self.y)\n        self.assertTrue(hasattr(eclf, 'estimators_'))\n\n    def test_predict(self):\n        eclf = VotingClassifier(estimators=[('lr', self.clf1), ('rf', self.clf2), ('gnb', self.clf3)])\n        eclf.fit(self.X, self.y)\n        predictions = eclf.predict(self.X)\n        self.assertEqual(len(predictions), len(self.y))\n\n    def test_predict_proba(self):\n        eclf = VotingClassifier(estimators=[('lr', self.clf1), ('rf', self.clf2), ('gnb', self.clf3)], voting='soft')\n        eclf.fit(self.X, self.y)\n        probabilities = eclf.predict_proba(self.X)\n        self.assertEqual(probabilities.shape, (len(self.y), len(np.unique(self.y))))\n\n    def test_not_fitted_error(self):\n        eclf = VotingClassifier(estimators=[('lr', self.clf1), ('rf', self.clf2), ('gnb', self.clf3)])\n        with self.assertRaises(NotFittedError):\n            eclf.predict(self.X)\n\nclass TestVotingRegressor(unittest.TestCase):\n\n    def setUp(self):\n        self.reg1 = LinearRegression()\n        self.reg2 = RandomForestRegressor(n_estimators=10, random_state=1)\n        self.X = np.array([[1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36]])\n        self.y = np.array([2, 6, 12, 20, 30, 42])\n\n    def test_fit(self):\n        er = VotingRegressor([('lr', self.reg1), ('rf', self.reg2)])\n        er.fit(self.X, self.y)\n        self.assertTrue(hasattr(er, 'estimators_'))\n\n    def test_predict(self):\n        er = VotingRegressor([('lr', self.reg1), ('rf', self.reg2)])\n        er.fit(self.X, self.y)\n        predictions = er.predict(self.X)\n        self.assertEqual(len(predictions), len(self.y))\n\n    def test_not_fitted_error(self):\n        er = VotingRegressor([('lr', self.reg1), ('rf', self.reg2)])\n        with self.assertRaises(NotFittedError):\n            er.predict(self.X)\n"], "sample_221": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.db import models\nfrom django.db.models.query import QuerySet, RawQuerySet, Prefetch\n\nclass TestQuerySet(unittest.TestCase):\n    def setUp(self):\n        class TestModel(models.Model):\n            field1 = models.CharField(max_length=10)\n            field2 = models.IntegerField()\n\n        self.model = TestModel\n        self.qs = TestModel.objects.all()\n\n    def test_filter(self):\n        qs = self.qs.filter(field1='test')\n        self.assertIsInstance(qs, QuerySet)\n        self.assertEqual(qs.query.where, {'field1': 'test'})\n\n    def test_exclude(self):\n        qs = self.qs.exclude(field1='test')\n        self.assertIsInstance(qs, QuerySet)\n        self.assertEqual(qs.query.where, ~{'field1': 'test'})\n\n    def test_annotate(self):\n        qs = self.qs.annotate(max_field2=models.Max('field2'))\n        self.assertIsInstance(qs, QuerySet)\n        self.assertIn('max_field2', qs.query.annotations)\n\n    def test_order_by(self):\n        qs = self.qs.order_by('field1')\n        self.assertIsInstance(qs, QuerySet)\n        self.assertEqual(qs.query.order_by, ['field1'])\n\n    def test_distinct(self):\n        qs = self.qs.distinct('field1')\n        self.assertIsInstance(qs, QuerySet)\n        self.assertEqual(qs.query.distinct_fields, ['field1'])\n\n    def test_values(self):\n        qs = self.qs.values('field1')\n        self.assertIsInstance(qs, QuerySet)\n        self.assertEqual(qs.query.values_select, ['field1'])\n\n    def test_values_list(self):\n        qs = self.qs.values_list('field1', flat=True)\n        self.assertIsInstance(qs, QuerySet)\n        self.assertEqual(qs.query.values_select, ['field1'])\n        self.assertTrue(qs.query.flat)\n\n    def test_select_related(self):\n        class RelatedModel(models.Model):\n            test_model = models.ForeignKey(self.model, on_delete=models.CASCADE)\n\n        qs = RelatedModel.objects.select_related('test_model')\n        self.assertIsInstance(qs, QuerySet)\n        self.assertIn('test_model', qs.query.select_related)\n\n    def test_prefetch_related(self):\n        class RelatedModel(models.Model):\n            test_model = models.ForeignKey(self.model, on_delete=models.CASCADE)\n\n        qs = self.model.objects.prefetch_related('relatedmodel_set')\n        self.assertIsInstance(qs, QuerySet)\n        self.assertIn('relatedmodel_set', qs.query.prefetch_related_lookups)\n\n    def test_raw_query(self):\n        raw_query = 'SELECT * FROM testmodel'\n        qs = self.model.objects.raw(raw_query)\n        self.assertIsInstance(qs, RawQuerySet)\n        self.assertEqual(qs.raw_query, raw_query)\n\nclass TestPrefetch(unittest.TestCase):\n    def test_init(self):\n        prefetch = Prefetch('related_model')\n        self.assertEqual(prefetch.prefetch_through, 'related_model')\n        self.assertEqual(prefetch.prefetch_to, 'related_model')\n\n    def test_add_prefix(self):\n        prefetch = Prefetch('related_model')\n        prefetch.add_prefix('prefix')\n        self.assertEqual(prefetch.prefetch_through, 'prefix__related_model')\n        self.assertEqual(prefetch.prefetch_to, 'prefix__related_model')\n\n    def test_get_current_to_attr(self):\n        prefetch = Prefetch('related_model', to_attr='related_objects')\n        to_attr, as_attr = prefetch.get_current_to_attr(0)\n        self.assertEqual(to_attr, 'related_model')\n        self.assertFalse(as_attr)\n\n    def test_get_current_queryset(self):\n        queryset = Mock()\n        prefetch = Prefetch('related_model', queryset=queryset)\n        self.assertEqual(prefetch.get_current_queryset(0), queryset)\n"], "sample_998": ["\nimport unittest\nfrom sympy import symbols, Rational, sin, pi, asin, Integral, Matrix, log\nfrom sympy.printing.latex import latex\n\nclass TestLatexPrinter(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.tau, self.mu = symbols('x y tau mu')\n\n    def test_latex_expression(self):\n        self.assertEqual(latex((2*self.tau)**Rational(7,2)), '8 \\\\sqrt{2} \\\\tau^{\\\\frac{7}{2}}')\n        self.assertEqual(latex((2*self.tau)**Rational(7,2), mode='inline'), '$8 \\\\sqrt{2} \\\\tau^{7 / 2}$')\n        self.assertEqual(latex((2*self.mu)**Rational(7,2), mode='equation*'), '\\\\begin{equation*}8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}\\\\end{equation*}')\n        self.assertEqual(latex((2*self.mu)**Rational(7,2), mode='equation'), '\\\\begin{equation}8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}\\\\end{equation}')\n        self.assertEqual(latex((2*self.mu)**Rational(7,2), itex=True), '$$8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}$$')\n        self.assertEqual(latex((2*self.tau)**sin(Rational(7,2)), fold_func_brackets=True), '\\\\left(2 \\\\tau\\\\right)^{\\\\sin {\\\\frac{7}{2}}}')\n        self.assertEqual(latex(3*self.x**2/self.y, fold_short_frac=True), '3 x^{2} / y')\n        self.assertEqual(latex(Integral(self.x, self.x)/2/pi, long_frac_ratio=0), '\\\\frac{1}{2 \\\\pi} \\\\int x\\\\, dx')\n        self.assertEqual(latex(Matrix(2, 1, [self.x, self.y]), mat_str='array'), '\\\\left[\\\\begin{array}{c}x\\\\\\\\y\\\\end{array}\\\\right]')\n        self.assertEqual(latex(self.x**2, symbol_names={self.x: 'x_i'}), 'x_i^{2}')\n        self.assertEqual(latex(log(10), ln_notation=True), '\\\\ln{\\\\left (10 \\\\right )}')\n\n    def test_latex_list(self):\n        self.assertEqual(latex([2/self.x, self.y], mode='inline'), '$\\\\left [ 2 / x, \\\\quad y\\\\right ]$')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_829": ["\nimport unittest\nimport numpy as np\nfrom sklearn.cluster.affinity_propagation_ import AffinityPropagation, affinity_propagation\nfrom sklearn.exceptions import ConvergenceWarning\n\nclass TestAffinityPropagation(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])\n\n    def test_affinity_propagation_function(self):\n        cluster_centers_indices, labels, n_iter = affinity_propagation(\n            -np.sqrt(np.square(self.X[:, None] - self.X).sum(-1)), return_n_iter=True\n        )\n        self.assertEqual(len(cluster_centers_indices), 2)\n        self.assertEqual(len(labels), len(self.X))\n        self.assertIsInstance(n_iter, int)\n\n    def test_affinity_propagation_class(self):\n        ap = AffinityPropagation().fit(self.X)\n        self.assertEqual(len(ap.cluster_centers_indices_), 2)\n        self.assertEqual(len(ap.labels_), len(self.X))\n        self.assertTrue(hasattr(ap, 'n_iter_'))\n\n    def test_affinity_propagation_predict(self):\n        ap = AffinityPropagation().fit(self.X)\n        pred = ap.predict([[0, 0], [4, 4]])\n        self.assertEqual(len(pred), 2)\n\n    def test_convergence_warning(self):\n        with self.assertWarns(ConvergenceWarning):\n            affinity_propagation(np.ones((5, 5)), preference=-1, max_iter=1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_284": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.core.files.base import ContentFile\nfrom django.test import override_settings\nfrom django.contrib.staticfiles.storage import (\n    StaticFilesStorage, HashedFilesMixin, ManifestFilesMixin, ManifestStaticFilesStorage\n)\n\nclass TestStaticFilesStorage(unittest.TestCase):\n    @patch('django.conf.settings.STATIC_ROOT', '/test/static/root')\n    @patch('django.conf.settings.STATIC_URL', '/test/static/url')\n    def test_init(self):\n        storage = StaticFilesStorage()\n        self.assertEqual(storage.location, '/test/static/root')\n        self.assertEqual(storage.base_url, '/test/static/url')\n\nclass TestHashedFilesMixin(unittest.TestCase):\n    @patch('django.conf.settings.DEBUG', False)\n    @patch('django.conf.settings.STATIC_URL', '/test/static/url')\n    def test_url(self):\n        mixin = HashedFilesMixin()\n        mixin.stored_name = MagicMock(return_value='hashed_name')\n        url = mixin.url('test_name')\n        self.assertEqual(url, '/test/static/url/hashed_name')\n\nclass TestManifestFilesMixin(unittest.TestCase):\n    @override_settings(STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestFilesMixin')\n    def test_save_manifest(self):\n        mixin = ManifestFilesMixin()\n        mixin.hashed_files = {'test': 'hashed_test'}\n        mixin.save_manifest()\n        self.assertTrue(mixin.exists(mixin.manifest_name))\n\nclass TestManifestStaticFilesStorage(unittest.TestCase):\n    @override_settings(STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage')\n    def test_init(self):\n        storage = ManifestStaticFilesStorage()\n        self.assertIsInstance(storage, ManifestFilesMixin)\n        self.assertIsInstance(storage, StaticFilesStorage)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_349": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.contrib.admin.widgets import (\n    FilteredSelectMultiple, AdminDateWidget, AdminTimeWidget, AdminSplitDateTime, AdminRadioSelect,\n    AdminFileWidget, ForeignKeyRawIdWidget, ManyToManyRawIdWidget, RelatedFieldWidgetWrapper,\n    AdminTextareaWidget, AdminTextInputWidget, AdminEmailInputWidget, AdminURLFieldWidget,\n    AdminIntegerFieldWidget, AdminBigIntegerFieldWidget, AdminUUIDInputWidget, AutocompleteSelect,\n    AutocompleteSelectMultiple,\n)\nfrom django.test import TestCase\nfrom django.urls import reverse\nfrom django.urls.exceptions import NoReverseMatch\nfrom django.utils.http import urlencode\nfrom django.core.exceptions import ValidationError\n\nclass WidgetsTest(TestCase):\n    def test_FilteredSelectMultiple(self):\n        widget = FilteredSelectMultiple('verbose_name', is_stacked=False)\n        context = widget.get_context('name', 'value', {'attrs': {}})\n        self.assertEqual(context['widget']['attrs']['class'], 'selectfilter')\n\n    # ... continue with the other widgets in a similar fashion\n\n    def test_ForeignKeyRawIdWidget(self):\n        rel = MagicMock()\n        rel.model = MagicMock()\n        rel.model._default_manager.using.return_value.get.return_value = MagicMock(pk=1)\n        widget = ForeignKeyRawIdWidget(rel, admin_site=MagicMock())\n        with patch('django.urls.reverse') as mock_reverse:\n            mock_reverse.return_value = '/admin/url/'\n            context = widget.get_context('name', 'value', {'attrs': {}})\n            self.assertEqual(context['related_url'], '/admin/url/?to_field=related_field')\n\n    # ... continue with the other widgets in a similar fashion\n\n    def test_AutocompleteSelect(self):\n        field = MagicMock()\n        widget = AutocompleteSelect(field, admin_site=MagicMock())\n        self.assertIn('admin/js/vendor/jquery/jquery.min.js', widget.media._js)\n\n    # ... continue with the other widgets in a similar fashion\n"], "sample_959": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom docutils import nodes\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.domains.python import (\n    PythonDomain, PythonModuleIndex, _parse_annotation, _pseudo_parse_arglist, py_sig_re\n)\n\nclass TestPythonDomain(unittest.TestCase):\n    def setUp(self):\n        self.domain = PythonDomain('python')\n        self.env = Mock(spec=BuildEnvironment)\n        self.env.config = {'modindex_common_prefix': []}\n        self.domain.env = self.env\n\n    def test_note_object(self):\n        self.domain.note_object('test_obj', 'function', 'node_id')\n        self.assertIn('test_obj', self.domain.objects)\n\n    def test_note_module(self):\n        self.domain.note_module('test_mod', 'node_id', 'synopsis', 'platform', False)\n        self.assertIn('test_mod', self.domain.modules)\n\n    def test_clear_doc(self):\n        self.domain.note_object('test_obj', 'function', 'node_id')\n        self.domain.note_module('test_mod', 'node_id', 'synopsis', 'platform', False)\n        self.domain.clear_doc('docname')\n        self.assertNotIn('test_obj', self.domain.objects)\n        self.assertNotIn('test_mod', self.domain.modules)\n\n    @patch('sphinx.domains.python.ast_parse')\n    def test_parse_annotation(self, mock_ast_parse):\n        mock_ast_parse.return_value = Mock()\n        result = _parse_annotation('annotation', self.env)\n        self.assertIsInstance(result, list)\n        self.assertIsInstance(result[0], nodes.Node)\n\n    def test_pseudo_parse_arglist(self):\n        signode = nodes.Element()\n        _pseudo_parse_arglist(signode, 'arglist')\n        self.assertIsInstance(signode[0], nodes.desc_parameterlist)\n\n    def test_py_sig_re(self):\n        match = py_sig_re.match('module.name(arg1, arg2) -> return_type')\n        self.assertIsNotNone(match)\n        self.assertEqual(match.groups(), ('module.', 'name', 'arg1, arg2', 'return_type'))\n\nclass TestPythonModuleIndex(unittest.TestCase):\n    def setUp(self):\n        self.index = PythonModuleIndex('python')\n        self.index.domain = Mock(spec=PythonDomain)\n        self.index.domain.data = {'modules': {'module': ('docname', 'node_id', 'synopsis', 'platform', False)}}\n\n    def test_generate(self):\n        result = self.index.generate()\n        self.assertIsInstance(result, tuple)\n        self.assertIsInstance(result[0], list)\n        self.assertIsInstance(result[1], bool)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_4": ["\nimport unittest\nfrom unittest.mock import patch, mock_open\nfrom astropy.cosmology import FlatLambdaCDM\nfrom astropy.cosmology.io.html import _FORMAT_TABLE, read_html_table, write_html_table\nfrom astropy.table import QTable\n\nclass TestHtmlIO(unittest.TestCase):\n\n    def setUp(self):\n        self.cosmo = FlatLambdaCDM(H0=70, Om0=0.3)\n\n    def test_read_html_table(self):\n        table_data = \"<html><table><tr><th>$$H_{0}$$</th><th>$$\\\\Omega_{m,0}$$</th></tr><tr><td>70</td><td>0.3</td></tr></table></html>\"\n        with patch('builtins.open', mock_open(read_data=table_data)) as mock_file:\n            cosmology = read_html_table(mock_file, latex_names=True)\n            self.assertEqual(cosmology.H0.value, 70)\n            self.assertEqual(cosmology.Om0, 0.3)\n\n    def test_write_html_table(self):\n        with patch('astropy.table.QTable.write') as mock_write:\n            write_html_table(self.cosmo, mock_write, latex_names=True)\n            mock_write.assert_called_once()\n            args, kwargs = mock_write.call_args\n            table = args[0]\n            self.assertIn(\"$$H_{0}$$\", table.colnames)\n            self.assertEqual(table[\"$$H_{0}$$\"][0], self.cosmo.H0.value)\n\n    def test_invalid_format(self):\n        with self.assertRaises(ValueError):\n            read_html_table(\"test.txt\", format=\"ascii\")\n        with self.assertRaises(ValueError):\n            write_html_table(self.cosmo, \"test.txt\", format=\"ascii\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_464": ["\nimport datetime\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom urllib.parse import urlparse\n\nfrom django.http import (\n    HttpResponse,\n    StreamingHttpResponse,\n    FileResponse,\n    HttpResponseRedirect,\n    HttpResponsePermanentRedirect,\n    HttpResponseNotModified,\n    HttpResponseBadRequest,\n    HttpResponseNotFound,\n    HttpResponseForbidden,\n    HttpResponseNotAllowed,\n    HttpResponseGone,\n    HttpResponseServerError,\n    JsonResponse,\n    Http404,\n)\n\nclass TestResponse(unittest.TestCase):\n    def test_HttpResponse_init(self):\n        response = HttpResponse(content=\"test content\", status=200, content_type=\"text/plain\")\n        self.assertEqual(response.content, b\"test content\")\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.headers[\"Content-Type\"], \"text/plain; charset=utf-8\")\n\n    def test_StreamingHttpResponse_init(self):\n        response = StreamingHttpResponse(streaming_content=[\"test \", \"content\"], status=200)\n        self.assertEqual(b\"\".join(response.streaming_content), b\"test content\")\n        self.assertEqual(response.status_code, 200)\n\n    def test_FileResponse_init(self):\n        content = b\"test content\"\n        mock_file = Mock()\n        mock_file.read.return_value = content\n        mock_file.seekable.return_value = True\n        mock_file.tell.return_value = 0\n        response = FileResponse(mock_file, as_attachment=True, filename=\"test.txt\")\n        self.assertEqual(response.file_to_stream, mock_file)\n        self.assertEqual(response.as_attachment, True)\n        self.assertEqual(response.filename, \"test.txt\")\n\n    # Add more tests for HttpResponseRedirect, HttpResponsePermanentRedirect, HttpResponseNotModified,\n    # HttpResponseBadRequest, HttpResponseNotFound, HttpResponseForbidden, HttpResponseNotAllowed,\n    # HttpResponseGone, HttpResponseServerError, and JsonResponse.\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1055": ["\nimport unittest\nfrom sympy.crypto.crypto import *\n\nclass TestCrypto(unittest.TestCase):\n\n    def setUp(self):\n        self.msg = \"HELLO\"\n        self.key = 3\n        self.symbols = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        self.padded_key = \"PUPPY\"\n        self.symbols_duplicates = \"ARTIST\"\n        self.invalid_symbol = \"!\"\n        self.key_affine = (3, 1)\n        self.key_substitution = {'O': '0', 'E': '3', 'Y': '4', 'A': '^', 'G': '6'}\n        self.key_vigenere = \"ENCRYPT\"\n        self.key_hill = Matrix([[1, 2], [3, 5]])\n        self.key_bifid = \"GOLDBUG\"\n        self.p = 3\n        self.q = 5\n        self.e = 7\n        self.a = 3\n        self.b = 4\n        self.A = 5\n        self.B = 6\n        self.lfsr_key = [1, 0, 0, 1]\n        self.lfsr_fill = [1, 1, 0, 1]\n        self.n = 10\n        self.morse_msg = \"ATTACK\"\n        self.elgamal_pri = (1031, 14, 636)\n        self.dh_pri = (37, 2, 3)\n        self.p_bg = 11\n        self.q_bg = 23\n        self.p_gm = 17\n        self.q_gm = 19\n\n    def test_cycle_list(self):\n        self.assertEqual(cycle_list(3, 10), [3, 4, 5, 6, 7, 8, 9, 0, 1, 2])\n\n    def test_encipher_shift(self):\n        self.assertEqual(encipher_shift(self.msg, self.key), \"KHOOR\")\n\n    def test_encipher_affine(self):\n        self.assertEqual(encipher_affine(self.msg, self.key_affine), \"TJMMG\")\n\n    def test_encipher_substitution(self):\n        self.assertEqual(encipher_substitution(self.msg, self.key_substitution), \"60L^6\")\n\n    # Add more tests for other functions...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1072": ["\nimport unittest\nfrom sympy import symbols, log, exp, LambertW, oo, nan, I, pi, S, sin, cos, sinh, cosh, tanh, exp_polar, re, Function, AccumBounds, MatrixSymbol, Pow\nfrom sympy.functions.elementary.exponential import ExpBase, exp_polar, exp, log, LambertW\nfrom sympy.core.expr import unchanged\nfrom sympy.core.numbers import Integer\n\nx, y = symbols('x y')\n\nclass TestExponentialFunctions(unittest.TestCase):\n\n    def test_exp_base(self):\n        base = ExpBase(x)\n        self.assertEqual(base.inverse(), log)\n        self.assertEqual(base.as_numer_denom(), (base, S.One))\n        self.assertEqual(base.exp, x)\n        self.assertEqual(base.as_base_exp(), (base, x))\n        self.assertEqual(base._eval_conjugate(), ExpBase(x.conjugate()))\n        self.assertIsNone(base._eval_is_finite())\n        self.assertIsNone(base._eval_is_rational())\n        self.assertIsNone(base._eval_is_zero())\n        self.assertEqual(base._eval_power(y), ExpBase(x*y))\n\n    def test_exp_polar(self):\n        polar = exp_polar(x)\n        self.assertEqual(polar._eval_Abs(), exp(re(x)))\n        self.assertEqual(polar._eval_evalf(10), exp(x)._eval_evalf(10))\n        self.assertEqual(polar._eval_power(y), exp_polar(x*y))\n        self.assertIsNone(polar._eval_is_extended_real())\n        self.assertEqual(polar.as_base_exp(), (ExpBase(1), exp(x)))\n\n    def test_exp(self):\n        self.assertEqual(exp(0), S.One)\n        self.assertEqual(exp(1), S.Exp1)\n        self.assertEqual(exp(oo), oo)\n        self.assertEqual(exp(-oo), S.Zero)\n        self.assertEqual(exp(nan), nan)\n        self.assertEqual(exp(log(x)), x)\n        self.assertEqual(exp(x + y), exp(x)*exp(y))\n        self.assertEqual(exp.base, S.Exp1)\n\n    def test_log(self):\n        self.assertEqual(log(1), S.Zero)\n        self.assertEqual(log(E), S.One)\n        self.assertEqual(log(oo), oo)\n        self.assertEqual(log(-oo), oo)\n        self.assertEqual(log(nan), nan)\n        self.assertEqual(log(exp(x)), x)\n        self.assertEqual(log(x, y), log(x)/log(y))\n        self.assertEqual(log(x*y), log(x) + log(y))\n\n    def test_LambertW(self):\n        self.assertEqual(LambertW(0), 0)\n        self.assertEqual(LambertW(1), S.One)\n        self.assertEqual(LambertW(-1), -1)\n        self.assertEqual(LambertW(log(2)/2), -log(2))\n        self.assertEqual(LambertW(oo), oo)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1127": ["\nimport unittest\nfrom sympy.combinatorics.perm_groups import PermutationGroup, _orbit_transversal, Coset, SymmetricPermutationGroup\nfrom sympy.combinatorics.permutations import Permutation\n\nclass TestPermutationGroup(unittest.TestCase):\n\n    def setUp(self):\n        self.a = Permutation([1, 2, 0, 4, 5, 6, 3])\n        self.G = PermutationGroup([self.a])\n\n    def test_orbit(self):\n        self.assertEqual(_orbit(self.G.degree, self.G.generators, 0), {0, 1, 2})\n        self.assertEqual(_orbit(self.G.degree, self.G.generators, [0, 4], 'union'), {0, 1, 2, 3, 4, 5, 6})\n\n    def test_orbit_transversal(self):\n        self.assertEqual(_orbit_transversal(self.G.degree, self.G.generators, 0, False),\n                         [(0, Permutation(0, 1, 2)), (1, Permutation(0, 2, 1)), (2, Permutation(1, 2, 0))])\n\n    def test_coset(self):\n        cst = Coset(self.a, self.G, dir=\"+\")\n        self.assertTrue(cst.is_right_coset)\n        self.assertFalse(cst.is_left_coset)\n\n    def test_symmetric_permutation_group(self):\n        S = SymmetricPermutationGroup(4)\n        self.assertEqual(S.order(), 24)\n        self.assertEqual(S.degree, 4)\n        self.assertTrue(Permutation(1, 2, 3) in S)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_518": ["\nimport unittest\nfrom matplotlib.patches import (Annulus, Ellipse, Patch, Polygon, Rectangle, FancyArrowPatch, FancyArrow, BoxStyle)\nfrom matplotlib import transforms\n\nclass TestPatches(unittest.TestCase):\n\n    def setUp(self):\n        self.rectangle = Rectangle((0, 0), 1, 1)\n        self.ellipse = Ellipse((0, 0), 2, 3)\n        self.annulus = Annulus((0, 0), 1, 2)\n        self.polygon = Polygon([(0, 0), (1, 1), (0, 1)])\n        self.patch = Patch()\n        self.arrow = FancyArrowPatch((0, 0), (1, 1))\n        self.fancy_arrow = FancyArrow(0, 0, 1, 1)\n        self.box_style = BoxStyle.Round(pad=0.2)\n\n    def test_rectangle_properties(self):\n        self.assertEqual(self.rectangle.get_x(), 0)\n        self.assertEqual(self.rectangle.get_y(), 0)\n        self.assertEqual(self.rectangle.get_width(), 1)\n        self.assertEqual(self.rectangle.get_height(), 1)\n\n    def test_ellipse_properties(self):\n        self.assertEqual(self.ellipse.center, (0, 0))\n        self.assertEqual(self.ellipse.width, 2)\n        self.assertEqual(self.ellipse.height, 3)\n\n    def test_annulus_properties(self):\n        self.assertEqual(self.annulus.center, (0, 0))\n        self.assertEqual(self.annulus.width, 2)\n        self.assertEqual(self.annulus.height, 2)\n\n    def test_polygon_vertices(self):\n        self.assertEqual(len(self.polygon.get_xy()), 3)\n\n    def test_patch_set_alpha(self):\n        self.patch.set_alpha(0.5)\n        self.assertEqual(self.patch.get_alpha(), 0.5)\n\n    def test_arrow_set_positions(self):\n        self.arrow.set_positions((0, 0), (2, 2))\n        self.assertEqual(self.arrow._posA_posB, [(0, 0), (2, 2)])\n\n    def test_fancy_arrow_set_positions(self):\n        self.fancy_arrow.set_positions((0, 0), (2, 2))\n        self.assertEqual(self.fancy_arrow._posA_posB, [(0, 0), (2, 2)])\n\n    def test_box_style_properties(self):\n        self.assertEqual(self.box_style.pad, 0.2)\n\n    def test_transforms_identity(self):\n        trans = transforms.IdentityTransform()\n        self.assertTrue(trans.contains_point((1, 1)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_655": ["\nimport pytest\nfrom unittest.mock import MagicMock, patch\nfrom _pytest import fixtures\nfrom _pytest.fixtures import FixtureLookupError, FixtureRequest, FixtureDef, FixtureFunctionMarker\n\n# Fixture to create a mock session for testing\n@pytest.fixture\ndef mock_session():\n    return MagicMock()\n\n# Test FixtureRequest initialization\ndef test_fixture_request_initialization(mock_session):\n    pyfuncitem = MagicMock()\n    pyfuncitem.session = mock_session\n    request = FixtureRequest(pyfuncitem)\n    assert request._pyfuncitem == pyfuncitem\n\n# Test FixtureDef initialization\ndef test_fixture_def_initialization(mock_session):\n    fixturemanager = MagicMock()\n    baseid = \"baseid\"\n    argname = \"argname\"\n    func = MagicMock()\n    scope = \"function\"\n    params = None\n    unittest = False\n    ids = None\n\n    fixturedef = FixtureDef(fixturemanager, baseid, argname, func, scope, params, unittest, ids)\n    assert fixturedef.baseid == baseid\n    assert fixturedef.argname == argname\n    assert fixturedef.func == func\n    assert fixturedef.scope == scope\n\n# Test FixtureFunctionMarker\ndef test_fixture_function_marker():\n    marker = fixtures.fixture(scope=\"session\", params=[1, 2, 3], autouse=True, name=\"test_fixture\")\n    assert marker.scope == \"session\"\n    assert marker.params == (1, 2, 3)\n    assert marker.autouse is True\n    assert marker.name == \"test_fixture\"\n\n# Test FixtureLookupError\ndef test_fixture_lookup_error():\n    argname = \"test_fixture\"\n    request = MagicMock()\n    msg = \"Test error message\"\n\n    error = FixtureLookupError(argname, request, msg)\n    assert error.argname == argname\n    assert error.request == request\n    assert error.msg == msg\n\n# Add more tests as needed...\n"], "sample_574": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nfrom matplotlib.ticker import Locator, Formatter\nfrom seaborn._core.scales import Nominal, Continuous, Temporal, PseudoAxis\n\nclass TestScales(unittest.TestCase):\n    def setUp(self):\n        self.data = pd.Series(np.random.randn(100))\n        self.data_cat = pd.Series(list('aabcddabc'))\n        self.data_date = pd.Series(pd.date_range(start='1/1/2022', periods=100))\n\n    def test_nominal_scale(self):\n        scale = Nominal()\n        scale = scale.tick(Locator())\n        scale = scale.label(Formatter())\n        self.assertIsInstance(scale, Nominal)\n\n    def test_continuous_scale(self):\n        scale = Continuous()\n        scale = scale.tick(count=5, between=(0, 1))\n        scale = scale.label(base=10)\n        self.assertIsInstance(scale, Continuous)\n\n    def test_temporal_scale(self):\n        scale = Temporal()\n        scale = scale.tick(upto=10)\n        scale = scale.label(concise=True)\n        self.assertIsInstance(scale, Temporal)\n\n    def test_pseudo_axis(self):\n        scale = Continuous()\n        axis = PseudoAxis(scale)\n        axis.set_view_interval(0, 1)\n        self.assertEqual(axis.get_view_interval(), (0, 1))\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_647": ["\nimport pytest\nfrom _pytest.config import Config\nfrom _pytest.mark.structures import (\n    Mark,\n    MarkDecorator,\n    MarkGenerator,\n    ParameterSet,\n    get_empty_parameterset_mark,\n    get_unpacked_marks,\n    istestfunc,\n    normalize_mark_list,\n    store_mark,\n)\n\ndef test_istestfunc():\n    assert istestfunc(lambda: None) == True\n    assert istestfunc(test_istestfunc) == True\n    assert istestfunc(\"not a function\") == False\n\ndef test_get_empty_parameterset_mark(mocker):\n    config = Config()\n    config.getini = mocker.MagicMock(return_value=\"skip\")\n    mark = get_empty_parameterset_mark(config, (\"a\", \"b\"), lambda: None)\n    assert mark.name == \"skip\"\n\ndef test_ParameterSet_param():\n    param_set = ParameterSet.param(1, 2, marks=pytest.mark.smoke, id=\"test_id\")\n    assert param_set.values == (1, 2)\n    assert param_set.marks[0].name == \"smoke\"\n    assert param_set.id == \"test_id\"\n\ndef test_ParameterSet_extract_from():\n    param_set = ParameterSet.extract_from((1, 2))\n    assert param_set.values == (1, 2)\n\ndef test_Mark_combined_with():\n    mark1 = Mark(\"name\", (1,), {\"key\": \"value\"})\n    mark2 = Mark(\"name\", (2,), {\"key2\": \"value2\"})\n    combined_mark = mark1.combined_with(mark2)\n    assert combined_mark.args == (1, 2)\n    assert combined_mark.kwargs == {\"key\": \"value\", \"key2\": \"value2\"}\n\ndef test_MarkDecorator_with_args():\n    mark_decorator = MarkDecorator(Mark(\"name\", (1,), {\"key\": \"value\"}))\n    new_mark_decorator = mark_decorator.with_args(2, key2=\"value2\")\n    assert new_mark_decorator.mark.args == (1, 2)\n    assert new_mark_decorator.mark.kwargs == {\"key\": \"value\", \"key2\": \"value2\"}\n\ndef test_get_unpacked_marks():\n    class TestClass:\n        pytestmark = [Mark(\"mark1\", (), {}), Mark(\"mark2\", (), {})]\n    marks = get_unpacked_marks(TestClass)\n    assert len(marks) == 2\n    assert marks[0].name == \"mark1\"\n    assert marks[1].name == \"mark2\"\n\ndef test_normalize_mark_list():\n    mark_list = [Mark(\"mark1\", (), {}), MarkDecorator(Mark(\"mark2\", (), {}))]\n    normalized_marks = list(normalize_mark_list(mark_list))\n    assert len(normalized_marks) == 2\n    assert normalized_marks[0].name == \"mark1\"\n    assert normalized_marks[1].name == \"mark2\"\n\ndef test_store_mark():\n    class TestClass:\n        pass\n    mark = Mark(\"mark1\", (), {})\n    store_mark(TestClass, mark)\n    assert TestClass.pytestmark[0].name == \"mark1\"\n\ndef test_MarkGenerator_getattr():\n    mark_generator = MarkGenerator()\n    mark_decorator = mark_generator.test_mark\n    assert mark_decorator.name == \"test_mark\"\n"], "sample_597": ["\nimport unittest\nimport pandas as pd\nimport numpy as np\nfrom xarray import DataArray, Dataset, concat\n\nclass TestConcat(unittest.TestCase):\n    def setUp(self):\n        self.ds1 = Dataset({'x': ('time', [1, 2, 3])}, coords={'time': pd.date_range('2000-01-01', periods=3)})\n        self.ds2 = Dataset({'x': ('time', [4, 5, 6])}, coords={'time': pd.date_range('2000-01-04', periods=3)})\n\n    def test_concat_datasets(self):\n        result = concat([self.ds1, self.ds2], dim='time')\n        expected = Dataset({'x': ('time', [1, 2, 3, 4, 5, 6])}, coords={'time': pd.date_range('2000-01-01', periods=6)})\n        self.assertTrue(result.equals(expected))\n\n    def test_concat_datasets_with_data_vars(self):\n        self.ds1['y'] = ('time', [10, 20, 30])\n        self.ds2['y'] = ('time', [40, 50, 60])\n        result = concat([self.ds1, self.ds2], dim='time')\n        expected = Dataset({'x': ('time', [1, 2, 3, 4, 5, 6]), 'y': ('time', [10, 20, 30, 40, 50, 60])},\n                           coords={'time': pd.date_range('2000-01-01', periods=6)})\n        self.assertTrue(result.equals(expected))\n\n    def test_concat_datasets_with_coords(self):\n        self.ds1['z'] = ('time', [100, 200, 300])\n        self.ds2['z'] = ('time', [400, 500, 600])\n        result = concat([self.ds1, self.ds2], dim='time', coords='all')\n        expected = Dataset({'x': ('time', [1, 2, 3, 4, 5, 6]), 'z': ('time', [100, 200, 300, 400, 500, 600])},\n                           coords={'time': pd.date_range('2000-01-01', periods=6)})\n        self.assertTrue(result.equals(expected))\n\n    def test_concat_datasets_with_new_dim(self):\n        result = concat([self.ds1, self.ds2], dim='new_dim')\n        expected = Dataset({'x': (('new_dim', 'time'), [[1, 2, 3], [4, 5, 6]])},\n                           coords={'time': self.ds1.time, 'new_dim': [0, 1]})\n        self.assertTrue(result.equals(expected))\n\n    def test_concat_dataarrays(self):\n        da1 = DataArray([1, 2, 3], dims='time')\n        da2 = DataArray([4, 5, 6], dims='time')\n        result = concat([da1, da2], dim='time')\n        expected = DataArray([1, 2, 3, 4, 5, 6], dims='time')\n        self.assertTrue(result.equals(expected))\n\n    # Add more test methods as needed to cover more functionality\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_897": ["\nimport numpy as np\nimport pytest\nfrom sklearn.metrics import (\n    auc,\n    average_precision_score,\n    coverage_error,\n    det_curve,\n    label_ranking_average_precision_score,\n    precision_recall_curve,\n    label_ranking_loss,\n    roc_auc_score,\n    roc_curve,\n    ndcg_score,\n    dcg_score,\n    top_k_accuracy_score,\n)\nfrom sklearn.exceptions import UndefinedMetricWarning\n\ndef test_auc():\n    x = [0, 1, 2, 3, 4]\n    y = [0, 0.2, 0.4, 0.6, 1]\n    assert auc(x, y) == 2.0\n\n    x = [4, 3, 2, 1, 0]\n    y = [1, 0.6, 0.4, 0.2, 0]\n    assert auc(x, y) == 2.0\n\ndef test_average_precision_score():\n    y_true = [0, 0, 1, 1]\n    y_score = [0.1, 0.4, 0.35, 0.8]\n    assert average_precision_score(y_true, y_score) == 0.8333333333333334\n\ndef test_coverage_error():\n    y_true = np.array([[1, 0, 0], [0, 0, 1]])\n    y_score = np.array([[0.75, 0.5, 1], [1, 0.2, 0.1]])\n    assert coverage_error(y_true, y_score) == 1.5\n\ndef test_det_curve():\n    y_true = np.array([0, 0, 1, 1])\n    y_scores = np.array([0.1, 0.4, 0.35, 0.8])\n    fpr, fnr, thresholds = det_curve(y_true, y_scores)\n    np.testing.assert_array_equal(fpr, np.array([0.5, 0.5, 0.]))\n    np.testing.assert_array_equal(fnr, np.array([0., 0.5, 0.5]))\n    np.testing.assert_array_equal(thresholds, np.array([0.35, 0.4, 0.8]))\n\ndef test_label_ranking_average_precision_score():\n    y_true = np.array([[1, 0, 0], [0, 0, 1]])\n    y_score = np.array([[0.75, 0.5, 1], [1, 0.2, 0.1]])\n    assert label_ranking_average_precision_score(y_true, y_score) == 0.41666666666666663\n\ndef test_precision_recall_curve():\n    y_true = np.array([0, 0, 1, 1])\n    y_scores = np.array([0.1, 0.4, 0.35, 0.8])\n    precision, recall, thresholds = precision_recall_curve(y_true, y_scores)\n    np.testing.assert_array_equal(precision, np.array([0.5, 0.66666667, 0.5, 1., 1.]))\n    np.testing.assert_array_equal(recall, np.array([1., 1., 0.5, 0.5, 0.]))\n    np.testing.assert_array_equal(thresholds, np.array([0.1, 0.35, 0.4, 0.8]))\n\ndef test_label_ranking_loss():\n    y_true = np.array([[1, 0, 0], [0, 0, 1]])\n    y_score = np.array([[0.75, 0.5, 1], [1, 0.2, 0.1]])\n    assert label_ranking_loss(y_true, y_score) == 0.3333333333333333\n\ndef test_roc_auc_score():\n    y_true = np.array([0, 0, 1, 1])\n    y_scores = np.array([0.1, 0.4, 0.35, 0.8])\n    assert roc_auc_score(y_true, y_scores) == 0.75\n\ndef test_roc_curve():\n    y_true = np.array([0, 0, 1, 1])\n    y_scores = np.array([0.1, 0.4, 0.35, 0.8])\n    fpr, tpr, thresholds = roc_curve(y_true, y_scores)\n    np.testing.assert_array_equal(fpr, np.array([0., 0., 0.5, 0.5, 1.]))\n    np.testing.assert_array_equal(tpr, np.array([0., 0.5, 0.5, 1., 1.]))\n    np.testing.assert_array_equal(thresholds, np.array([np.inf, 0.8, 0.4, 0.35, 0.1]))\n\ndef test_ndcg_score():\n    y_true = np.array([[10, 0, 0, 1, 5]])\n    scores = np.array([[.1, .2, .3, 4, 70]])\n    assert ndcg_score(y_true, scores) == 0.6923076923076923\n\ndef test_dcg_score():\n    y_true = np.array([[10, 0, 0, 1, 5]])\n    scores = np.array([[.1, .2, .3, 4, 70]])\n    assert dcg_score(y_true, scores) == 9.492929292929293\n\ndef test_top_k_accuracy_score():\n    y_true = np.array([0, 1, 2, 2])\n    y_score = np.array([[0.5, 0.2, 0.2], [0.3, 0.4, 0.2], [0.2, 0.4, 0.3], [0.7, 0.2, 0.1]])\n    assert top_k_accuracy_score(y_true, y_score, k=2) == 0.75\n"], "sample_230": ["\nfrom django.db.models.query import QuerySet, RawQuerySet, Prefetch\nfrom django.test import TestCase\nfrom unittest.mock import Mock, patch\n\nclass TestQuerySet(TestCase):\n    def setUp(self):\n        self.queryset = QuerySet()\n\n    def test_init(self):\n        self.assertIsNone(self.queryset.model)\n        self.assertIsNone(self.queryset._db)\n        self.assertEqual(self.queryset._hints, {})\n\n    @patch('django.db.models.query.sql.Query')\n    def test_query_property(self, mock_query):\n        self.queryset.query = mock_query\n        self.assertEqual(self.queryset.query, mock_query)\n\n    def test_getitem(self):\n        self.queryset._result_cache = ['item1', 'item2']\n        self.assertEqual(self.queryset[0], 'item1')\n\n    def test_and(self):\n        other = Mock()\n        self.queryset._merge_sanity_check = Mock()\n        self.queryset.query.combine = Mock()\n        result = self.queryset & other\n        self.queryset._merge_sanity_check.assert_called_once_with(other)\n        self.queryset.query.combine.assert_called_once_with(other.query, sql.AND)\n\n    def test_or(self):\n        other = Mock()\n        self.queryset._merge_sanity_check = Mock()\n        self.queryset.query.combine = Mock()\n        result = self.queryset | other\n        self.queryset._merge_sanity_check.assert_called_once_with(other)\n        self.queryset.query.combine.assert_called_once_with(other.query, sql.OR)\n\n    # Add more tests for other methods in the QuerySet class\n\nclass TestRawQuerySet(TestCase):\n    def setUp(self):\n        self.raw_queryset = RawQuerySet('SELECT * FROM table')\n\n    def test_init(self):\n        self.assertEqual(self.raw_queryset.raw_query, 'SELECT * FROM table')\n\n    @patch('django.db.models.query.connections')\n    def test_resolve_model_init_order(self, mock_connections):\n        self.raw_queryset.columns = ['id', 'name']\n        self.raw_queryset.model_fields = {'id': 'id_field', 'name': 'name_field'}\n        self.raw_queryset.model = Mock()\n        self.raw_queryset.model._meta.fields = [Mock(column='id', attname='id'), Mock(column='name', attname='name')]\n        model_init_names, model_init_order, annotation_fields = self.raw_queryset.resolve_model_init_order()\n        self.assertEqual(model_init_names, ['id', 'name'])\n        self.assertEqual(model_init_order, [0, 1])\n        self.assertEqual(annotation_fields, [])\n\n    # Add more tests for other methods in the RawQuerySet class\n\nclass TestPrefetch(TestCase):\n    def test_init(self):\n        prefetch = Prefetch('lookup')\n        self.assertEqual(prefetch.prefetch_through, 'lookup')\n        self.assertEqual(prefetch.prefetch_to, 'lookup')\n\n    def test_add_prefix(self):\n        prefetch = Prefetch('lookup')\n        prefetch.add_prefix('prefix')\n        self.assertEqual(prefetch.prefetch_through, 'prefix__lookup')\n        self.assertEqual(prefetch.prefetch_to, 'prefix__lookup')\n\n    # Add more tests for other methods in the Prefetch class\n"], "sample_535": ["\nimport unittest\nfrom matplotlib.table import CustomCell, Table\nfrom matplotlib.testing.decorators import image_comparison\nimport matplotlib.pyplot as plt\n\nclass TestTable(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n\n    def test_custom_cell(self):\n        cell = CustomCell((0, 0), width=1, height=1, text='Test')\n        self.assertEqual(cell.get_text(), 'Test')\n        self.assertEqual(cell.get_width(), 1)\n        self.assertEqual(cell.get_height(), 1)\n\n    def test_table(self):\n        table = Table(self.ax, loc='center')\n        table.add_cell(0, 0, text='Test')\n        self.assertEqual(table[0, 0].get_text(), 'Test')\n\n    @image_comparison(baseline_images=['table_test'], extensions=['png'])\n    def test_table_image(self):\n        cell_text = [['Cell1', 'Cell2'], ['Cell3', 'Cell4']]\n        table = Table(self.ax, cellText=cell_text, loc='center')\n        self.fig.canvas.draw()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_286": ["\nfrom django.test import TestCase\nfrom django.db import models, connection\nfrom django.core.exceptions import ValidationError\nfrom django.core import checks\nfrom django.db.models.base import Model, ModelBase\nfrom django.db.models.fields import IntegerField, CharField\n\nclass ModelTest(TestCase):\n    def setUp(self):\n        class TestModel(models.Model):\n            test_field = models.IntegerField()\n\n        self.Model = TestModel\n\n    def test_model_init(self):\n        obj = self.Model(test_field=1)\n        self.assertEqual(obj.test_field, 1)\n\n    def test_model_save(self):\n        obj = self.Model(test_field=1)\n        obj.save()\n        self.assertIsNotNone(obj.pk)\n\n    def test_model_delete(self):\n        obj = self.Model(test_field=1)\n        obj.save()\n        obj_id = obj.pk\n        obj.delete()\n        with self.assertRaises(self.Model.DoesNotExist):\n            self.Model.objects.get(pk=obj_id)\n\n    def test_model_validation(self):\n        with self.assertRaises(ValidationError):\n            self.Model(test_field='invalid').full_clean()\n\n    def test_model_check(self):\n        errors = self.Model.check()\n        self.assertEqual(errors, [])\n\n    def test_model_meta_abstract(self):\n        class AbstractModel(models.Model):\n            class Meta:\n                abstract = True\n\n        with self.assertRaises(TypeError):\n            AbstractModel()\n\n    def test_model_meta_proxy(self):\n        class ProxyModel(self.Model):\n            class Meta:\n                proxy = True\n\n        with self.assertRaises(TypeError):\n            ProxyModel(test_field='invalid')\n\n    # Add more tests for other methods and features of the Model class as needed\n\nclass ModelBaseTest(TestCase):\n    def setUp(self):\n        class TestModelBase(metaclass=ModelBase):\n            __module__ = __name__\n            test_field = IntegerField()\n\n        self.Model = TestModelBase\n\n    def test_model_base_prepare(self):\n        self.Model._prepare()\n        self.assertTrue(hasattr(self.Model, '_default_manager'))\n\n    # Add more tests for other methods and features of the ModelBase class as needed\n"], "sample_471": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.forms import fields\nfrom django.core.exceptions import ValidationError\n\nclass TestFieldMethods(unittest.TestCase):\n\n    def test_field_init(self):\n        field = fields.Field(required=False, label='Test Field', initial='Initial Value')\n        self.assertFalse(field.required)\n        self.assertEqual(field.label, 'Test Field')\n        self.assertEqual(field.initial, 'Initial Value')\n\n    def test_char_field_to_python(self):\n        field = fields.CharField(max_length=10)\n        self.assertEqual(field.to_python('test'), 'test')\n        self.assertEqual(field.to_python(None), '')\n\n    def test_integer_field_to_python(self):\n        field = fields.IntegerField()\n        self.assertEqual(field.to_python('10'), 10)\n        with self.assertRaises(ValidationError):\n            field.to_python('invalid')\n\n    def test_float_field_to_python(self):\n        field = fields.FloatField()\n        self.assertEqual(field.to_python('10.5'), 10.5)\n        with self.assertRaises(ValidationError):\n            field.to_python('invalid')\n\n    def test_decimal_field_to_python(self):\n        field = fields.DecimalField(max_digits=5, decimal_places=2)\n        self.assertEqual(str(field.to_python('10.5')), '10.50')\n        with self.assertRaises(ValidationError):\n            field.to_python('invalid')\n\n    def test_date_field_to_python(self):\n        field = fields.DateField()\n        self.assertEqual(str(field.to_python('2022-01-01')), '2022-01-01')\n        with self.assertRaises(ValidationError):\n            field.to_python('invalid')\n\n    def test_time_field_to_python(self):\n        field = fields.TimeField()\n        self.assertEqual(str(field.to_python('12:00:00')), '12:00:00')\n        with self.assertRaises(ValidationError):\n            field.to_python('invalid')\n\n    def test_datetime_field_to_python(self):\n        field = fields.DateTimeField()\n        self.assertEqual(str(field.to_python('2022-01-01 12:00:00')), '2022-01-01 12:00:00+00:00')\n        with self.assertRaises(ValidationError):\n            field.to_python('invalid')\n\n    def test_duration_field_to_python(self):\n        field = fields.DurationField()\n        self.assertEqual(str(field.to_python('1 day')), '1 day, 0:00:00')\n        with self.assertRaises(ValidationError):\n            field.to_python('invalid')\n\n    def test_email_field_to_python(self):\n        field = fields.EmailField()\n        self.assertEqual(field.to_python('test@example.com'), 'test@example.com')\n        with self.assertRaises(ValidationError):\n            field.to_python('invalid')\n\n    def test_file_field_to_python(self):\n        mock_file = Mock(name='mock_file', size=100, name='test.txt')\n        field = fields.FileField()\n        self.assertEqual(field.to_python(mock_file), mock_file)\n        with self.assertRaises(ValidationError):\n            field.to_python('invalid')\n\n    def test_image_field_to_python(self):\n        mock_image_file = Mock(name='mock_image_file', size=100, name='test.png')\n        mock_image_file.temporary_file_path.return_value = 'test.png'\n        field = fields.ImageField()\n        field.to_python(mock_image_file)\n\n    def test_url_field_to_python(self):\n        field = fields.URLField()\n        self.assertEqual(field.to_python('https://example.com'), 'https://example.com')\n        with self.assertRaises(ValidationError):\n            field.to_python('invalid')\n\n    def test_boolean_field_to_python(self):\n        field = fields.BooleanField()\n        self.assertTrue(field.to_python('True'))\n        self.assertFalse(field.to_python('False'))\n\n    def test_null_boolean_field_to_python(self):\n        field = fields.NullBooleanField()\n        self.assertTrue(field.to_python('True'))\n        self.assertFalse(field.to_python('False'))\n        self.assertIsNone(field.to_python(''))\n\n    def test_choice_field_to_python(self):\n        field = fields.ChoiceField(choices=[('1', 'Option 1'), ('2', 'Option 2')])\n        self.assertEqual(field.to_python('1'), '1')\n        with self.assertRaises(ValidationError):\n            field.to_python('3')\n\n    def test_typed_choice_field_to_python(self):\n        field = fields.TypedChoiceField(choices=[('1', 1), ('2', 2)], coerce=int)\n        self.assertEqual(field.to_python('1'), 1)\n        with self.assertRaises(ValidationError):\n            field.to_python('3')\n\n    def test_multiple_choice_field_to_python(self):\n        field = fields.MultipleChoiceField(choices=[('1', 'Option 1'), ('2', 'Option 2')])\n        self.assertEqual(field.to_python(['1', '2']), ['1', '2'])\n        with self.assertRaises(ValidationError):\n            field.to_python(['3'])\n\n    def test_typed_multiple_choice_field_to_python(self):\n        field = fields.TypedMultipleChoiceField(choices=[('1', 1), ('2', 2)], coerce=int)\n        self.assertEqual(field.to_python(['1', '2']), [1, 2])\n        with self.assertRaises(ValidationError):\n            field.to_python(['3'])\n\n    def test_combo_field_clean(self):\n        field = fields.ComboField(fields=[fields.IntegerField(), fields.CharField()])\n        self.assertEqual(field.clean('123'), 123)\n\n    def test_multi_value_field_clean(self):\n        field = fields.MultiValueField(fields=[fields.IntegerField(), fields.CharField()])\n        with self.assertRaises(NotImplementedError):\n            field.clean(['123', 'test'])\n\n    def test_file_path_field_init(self):\n        field = fields.FilePathField(path='/path/to/directory')\n        self.assertEqual(field.path, '/path/to/directory')\n\n    def test_split_datetime_field_compress(self):\n        field = fields.SplitDateTimeField()\n        with self.assertRaises(ValidationError):\n            field.compress([None, None])\n\n    def test_generic_ip_address_field_to_python(self):\n        field = fields.GenericIPAddressField()\n        self.assertEqual(field.to_python('192.168.0.1'), '192.168.0.1')\n        with self.assertRaises(ValidationError):\n            field.to_python('invalid')\n\n    def test_slug_field_to_python(self):\n        field = fields.SlugField()\n        self.assertEqual(field.to_python('test-slug'), 'test-slug')\n        with self.assertRaises(ValidationError):\n            field.to_python('invalid slug')\n\n    def test_uuid_field_to_python(self):\n        field = fields.UUIDField()\n        self.assertEqual(str(field.to_python('123e4567-e89b-12d3-a456-426614174000')), '123e4567-e89b-12d3-a456-426614174000')\n        with self.assertRaises(ValidationError):\n            field.to_python('invalid')\n\n    def test_json_field_to_python(self):\n        field = fields.JSONField()\n        self.assertEqual(field.to_python('{\"key\": \"value\"}'), {'key': 'value'})\n        with self.assertRaises(ValidationError):\n            field.to_python('invalid')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_426": ["\nimport datetime\nimport unittest\nfrom django.utils.timesince import timesince, timeuntil\n\nclass TestTimeSince(unittest.TestCase):\n    def setUp(self):\n        self.now = datetime.datetime.now(datetime.timezone.utc)\n\n    def test_timesince_future(self):\n        future_time = self.now + datetime.timedelta(days=5)\n        result = timesince(future_time, now=self.now)\n        self.assertEqual(result, \"0 minutes\")\n\n    def test_timesince_past(self):\n        past_time = self.now - datetime.timedelta(days=5)\n        result = timesince(past_time, now=self.now)\n        self.assertEqual(result, \"5 days\")\n\n    def test_timesince_past_year_month(self):\n        past_time = self.now - datetime.timedelta(days=395)\n        result = timesince(past_time, now=self.now)\n        self.assertEqual(result, \"1 year, 1 month\")\n\n    def test_timesince_depth(self):\n        past_time = self.now - datetime.timedelta(days=366, hours=6, minutes=30)\n        result = timesince(past_time, now=self.now, depth=1)\n        self.assertEqual(result, \"1 year\")\n\n    def test_timeuntil_future(self):\n        future_time = self.now + datetime.timedelta(days=5)\n        result = timeuntil(future_time, now=self.now)\n        self.assertEqual(result, \"5 days\")\n\n    def test_timeuntil_past(self):\n        past_time = self.now - datetime.timedelta(days=5)\n        result = timeuntil(past_time, now=self.now)\n        self.assertEqual(result, \"0 minutes\")\n\n    def test_timeuntil_depth(self):\n        future_time = self.now + datetime.timedelta(days=366, hours=6, minutes=30)\n        result = timeuntil(future_time, now=self.now, depth=1)\n        self.assertEqual(result, \"1 year\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_793": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom sklearn.base import BaseEstimator, ClassifierMixin, RegressorMixin, ClusterMixin, TransformerMixin, _pprint, _update_if_consistent\n\nclass TestBaseEstimator(unittest.TestCase):\n\n    def setUp(self):\n        self.base_estimator = BaseEstimator()\n\n    def test_get_params(self):\n        params = self.base_estimator.get_params()\n        self.assertEqual(params, {})\n\n    def test_set_params(self):\n        self.base_estimator.set_params(param1='value1')\n        params = self.base_estimator.get_params()\n        self.assertEqual(params, {'param1': 'value1'})\n\nclass TestClassifierMixin(unittest.TestCase):\n\n    def setUp(self):\n        self.classifier_mixin = ClassifierMixin()\n        self.classifier_mixin.predict = Mock(return_value=[1, 0, 1])\n\n    def test_score(self):\n        y = [1, 0, 1]\n        sample_weight = [1, 1, 1]\n        score = self.classifier_mixin.score(Mock(), y, sample_weight)\n        self.assertEqual(score, 0.6666666666666666)\n\nclass TestRegressorMixin(unittest.TestCase):\n\n    def setUp(self):\n        self.regressor_mixin = RegressorMixin()\n        self.regressor_mixin.predict = Mock(return_value=[1.5, 2.3, 3.2])\n\n    def test_score(self):\n        y = [1.2, 2.5, 3.0]\n        sample_weight = [1, 1, 1]\n        score = self.regressor_mixin.score(Mock(), y, sample_weight)\n        self.assertAlmostEqual(score, 0.9104000000000001)\n\nclass TestClusterMixin(unittest.TestCase):\n\n    def setUp(self):\n        self.cluster_mixin = ClusterMixin()\n        self.cluster_mixin.fit = Mock()\n        self.cluster_mixin.labels_ = [0, 1, 0]\n\n    def test_fit_predict(self):\n        X = Mock()\n        labels = self.cluster_mixin.fit_predict(X)\n        self.assertEqual(labels, [0, 1, 0])\n\nclass TestTransformerMixin(unittest.TestCase):\n\n    def setUp(self):\n        self.transformer_mixin = TransformerMixin()\n        self.transformer_mixin.fit = Mock(return_value=self.transformer_mixin)\n        self.transformer_mixin.transform = Mock(return_value=[[1, 2], [3, 4]])\n\n    def test_fit_transform(self):\n        X = [[0, 0], [1, 1]]\n        transformed_X = self.transformer_mixin.fit_transform(X)\n        self.assertEqual(transformed_X, [[1, 2], [3, 4]])\n\nclass TestUtilityFunctions(unittest.TestCase):\n\n    def test_pprint(self):\n        params = {'param1': 'value1', 'param2': 2, 'param3': [1, 2, 3]}\n        output = _pprint(params)\n        self.assertEqual(output, \"param1='value1', param2=2, param3=[1, 2, 3]\")\n\n    def test_update_if_consistent(self):\n        dict1 = {'key1': 'value1', 'key2': 'value2'}\n        dict2 = {'key2': 'value2', 'key3': 'value3'}\n        updated_dict = _update_if_consistent(dict1, dict2)\n        self.assertEqual(updated_dict, {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'})\n        dict2 = {'key2': 'value3'}\n        with self.assertRaises(TypeError):\n            _update_if_consistent(dict1, dict2)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_283": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.db.backends.postgresql.client import DatabaseClient\n\nclass TestDatabaseClient(unittest.TestCase):\n    @patch('django.db.backends.postgresql.client.signal')\n    def test_runshell(self, mock_signal):\n        db_client = DatabaseClient()\n        db_client.runshell(['-c', 'SELECT 1;'])\n        mock_signal.signal.assert_called_once_with(mock_signal.SIGINT, mock_signal.SIG_IGN)\n\n    def test_settings_to_cmd_args_env(self):\n        settings_dict = {\n            'HOST': 'localhost',\n            'PORT': 5432,\n            'NAME': 'test_db',\n            'USER': 'test_user',\n            'PASSWORD': 'test_password',\n            'OPTIONS': {\n                'passfile': 'test_passfile',\n                'service': 'test_service',\n                'sslmode': 'require',\n                'sslrootcert': 'test_sslrootcert',\n                'sslcert': 'test_sslcert',\n                'sslkey': 'test_sslkey',\n            }\n        }\n        args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, ['-c', 'SELECT 1;'])\n        self.assertEqual(args, ['psql', '-U', 'test_user', '-h', 'localhost', '-p', '5432', 'test_db', '-c', 'SELECT 1;'])\n        self.assertEqual(env, {\n            'PGPASSWORD': 'test_password',\n            'PGSERVICE': 'test_service',\n            'PGSSLMODE': 'require',\n            'PGSSLROOTCERT': 'test_sslrootcert',\n            'PGSSLCERT': 'test_sslcert',\n            'PGSSLKEY': 'test_sslkey',\n            'PGPASSFILE': 'test_passfile',\n        })\n\n    def test_settings_to_cmd_args_env_default_dbname(self):\n        settings_dict = {\n            'HOST': 'localhost',\n            'PORT': 5432,\n            'USER': 'test_user',\n        }\n        args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, ['-c', 'SELECT 1;'])\n        self.assertEqual(args, ['psql', '-U', 'test_user', '-h', 'localhost', '-p', '5432', 'postgres', '-c', 'SELECT 1;'])\n        self.assertEqual(env, {})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_728": ["\nimport unittest\nfrom sklearn.feature_extraction.text import (\n    strip_tags,\n    strip_accents_unicode,\n    strip_accents_ascii,\n    HashingVectorizer,\n    CountVectorizer,\n    TfidfTransformer,\n    TfidfVectorizer,\n    ENGLISH_STOP_WORDS,\n)\n\nclass TestTextMethods(unittest.TestCase):\n\n    def test_strip_tags(self):\n        text = \"<html><body><p>This is a test.</p></body></html>\"\n        self.assertEqual(strip_tags(text), \"   This is a test.   \")\n\n    def test_strip_accents_unicode(self):\n        text = \"r\u00e9sum\u00e9\"\n        self.assertEqual(strip_accents_unicode(text), \"resume\")\n\n    def test_strip_accents_ascii(self):\n        text = \"r\u00e9sum\u00e9\"\n        self.assertEqual(strip_accents_ascii(text), \"resume\")\n\n    def test_hashing_vectorizer(self):\n        vectorizer = HashingVectorizer(n_features=20)\n        corpus = [\"This is the first document.\", \"This is the second document.\"]\n        X = vectorizer.transform(corpus)\n        self.assertEqual(X.shape, (2, 20))\n\n    def test_count_vectorizer(self):\n        vectorizer = CountVectorizer()\n        corpus = [\"This is the first document.\", \"This is the second document.\"]\n        X = vectorizer.fit_transform(corpus)\n        self.assertEqual(X.shape, (2, 6))\n\n    def test_tfidf_transformer(self):\n        vectorizer = CountVectorizer()\n        transformer = TfidfTransformer()\n        corpus = [\"This is the first document.\", \"This is the second document.\"]\n        X = vectorizer.fit_transform(corpus)\n        X_tfidf = transformer.fit_transform(X)\n        self.assertEqual(X_tfidf.shape, (2, 6))\n\n    def test_tfidf_vectorizer(self):\n        vectorizer = TfidfVectorizer()\n        corpus = [\"This is the first document.\", \"This is the second document.\"]\n        X = vectorizer.fit_transform(corpus)\n        self.assertEqual(X.shape, (2, 6))\n\n    def test_english_stop_words(self):\n        self.assertIsInstance(ENGLISH_STOP_WORDS, frozenset)\n        self.assertIn('the', ENGLISH_STOP_WORDS)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_714": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model import Ridge\nfrom sklearn.datasets import make_regression\n\nclass TestRidgeRegression(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_regression(n_samples=100, n_features=2, noise=0.1, random_state=42)\n\n    def test_ridge_regression(self):\n        model = Ridge(alpha=1.0)\n        model.fit(self.X, self.y)\n        self.assertEqual(model.coef_.shape, (2,))\n\n    def test_ridge_regression_multi_target(self):\n        y = np.c_[self.y, -self.y]\n        model = Ridge(alpha=1.0)\n        model.fit(self.X, y)\n        self.assertEqual(model.coef_.shape, (2, 2))\n\n    def test_ridge_regression_with_intercept(self):\n        model = Ridge(alpha=1.0, fit_intercept=True)\n        model.fit(self.X, self.y)\n        self.assertNotEqual(model.intercept_, 0)\n\n    def test_ridge_regression_without_intercept(self):\n        model = Ridge(alpha=1.0, fit_intercept=False)\n        model.fit(self.X, self.y)\n        self.assertEqual(model.intercept_, 0)\n\n    def test_ridge_regression_predict(self):\n        model = Ridge(alpha=1.0)\n        model.fit(self.X, self.y)\n        y_pred = model.predict(self.X)\n        self.assertEqual(y_pred.shape, (100,))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_840": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.datasets import make_classification\n\nclass TestLogisticRegression(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, n_features=20, n_informative=15, n_redundant=5, random_state=42)\n\n    def test_fit_predict(self):\n        clf = LogisticRegression(random_state=42)\n        clf.fit(self.X, self.y)\n        y_pred = clf.predict(self.X)\n        self.assertEqual(len(y_pred), len(self.y))\n\n    def test_coef_shape(self):\n        clf = LogisticRegression(random_state=42)\n        clf.fit(self.X, self.y)\n        self.assertEqual(clf.coef_.shape, (1, self.X.shape[1]))\n\n    def test_intercept_shape(self):\n        clf = LogisticRegression(random_state=42)\n        clf.fit(self.X, self.y)\n        self.assertEqual(clf.intercept_.shape, (1,))\n\n    def test_predict_proba(self):\n        clf = LogisticRegression(random_state=42)\n        clf.fit(self.X, self.y)\n        y_proba = clf.predict_proba(self.X)\n        self.assertEqual(y_proba.shape, (len(self.y), 2))\n\nclass TestLogisticRegressionCV(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, n_features=20, n_informative=15, n_redundant=5, random_state=42)\n\n    def test_fit_predict(self):\n        clf = LogisticRegressionCV(cv=5, random_state=42)\n        clf.fit(self.X, self.y)\n        y_pred = clf.predict(self.X)\n        self.assertEqual(len(y_pred), len(self.y))\n\n    def test_coef_shape(self):\n        clf = LogisticRegressionCV(cv=5, random_state=42)\n        clf.fit(self.X, self.y)\n        self.assertEqual(clf.coef_.shape, (1, self.X.shape[1]))\n\n    def test_intercept_shape(self):\n        clf = LogisticRegressionCV(cv=5, random_state=42)\n        clf.fit(self.X, self.y)\n        self.assertEqual(clf.intercept_.shape, (1,))\n\n    def test_predict_proba(self):\n        clf = LogisticRegressionCV(cv=5, random_state=42)\n        clf.fit(self.X, self.y)\n        y_proba = clf.predict_proba(self.X)\n        self.assertEqual(y_proba.shape, (len(self.y), 2))\n"], "sample_986": ["\nimport unittest\nfrom sympy import Symbol, exp, pi, Integral, sin, cos, Abs, log, atan, re, im, floor, ceiling, Sum, Product, bernoulli, exp, Exp1, ImaginaryUnit, NegativeOne, NaN, Rational, Integer, Zero, One, Half, Pi\nfrom sympy.core.evalf import EvalfMixin, evalf, evalf_table, dps_to_prec, prec_to_dps, bitcount, fastlog, pure_complex, scaled_zero, iszero, complex_accuracy, get_abs, get_complex_part, finalize_complex, chop_parts, check_target, get_integer_part, evalf_ceiling, evalf_floor, add_terms, evalf_add, evalf_mul, evalf_pow, evalf_trig, evalf_log, evalf_atan, evalf_subs, evalf_piecewise, evalf_bernoulli, as_mpmath, do_integral, evalf_integral, check_convergence, hypsum, evalf_prod, evalf_sum, evalf_symbol\n\nclass TestEvalf(unittest.TestCase):\n\n    def test_evalf_symbol(self):\n        x = Symbol('x')\n        prec = 15\n        options = {'subs': {x: 3.14159}}\n        self.assertEqual(evalf_symbol(x, prec, options), (from_float(3.14159, prec), None, prec, None))\n\n    def test_evalf_zero(self):\n        x = Zero()\n        prec = 15\n        options = {}\n        self.assertEqual(evalf(x, prec, options), (None, None, None, None))\n\n    def test_evalf_one(self):\n        x = One()\n        prec = 15\n        options = {}\n        self.assertEqual(evalf(x, prec, options), (fone, None, prec, None))\n\n    def test_evalf_pi(self):\n        x = Pi()\n        prec = 15\n        options = {}\n        self.assertEqual(evalf(x, prec, options), (mpf_pi(prec), None, prec, None))\n\n    def test_evalf_exp(self):\n        x = exp(Symbol('x'))\n        prec = 15\n        options = {'subs': {Symbol('x'): 1}}\n        self.assertEqual(evalf(x, prec, options), (mpf_e(prec), None, prec, None))\n\n    def test_evalf_cos(self):\n        x = cos(Symbol('x'))\n        prec = 15\n        options = {'subs': {Symbol('x'): pi/2}}\n        self.assertEqual(evalf(x, prec, options), (fzero, None, prec, None))\n\n    def test_evalf_sin(self):\n        x = sin(Symbol('x'))\n        prec = 15\n        options = {'subs': {Symbol('x'): pi/2}}\n        self.assertEqual(evalf(x, prec, options), (fone, None, prec, None))\n\n    def test_evalf_add(self):\n        x = Symbol('x')\n        y = Symbol('y')\n        expr = x + y\n        prec = 15\n        options = {'subs': {x: 1.0, y: 2.0}}\n        self.assertEqual(evalf(expr, prec, options), (from_float(3.0, prec), None, prec, None))\n\n    # Add more test methods for other functions\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_120": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    BaseSequenceSerializer,\n    BaseSimpleSerializer,\n    ChoicesSerializer,\n    DateTimeSerializer,\n    DatetimeDatetimeSerializer,\n    DecimalSerializer,\n    DeconstructableSerializer,\n    DictionarySerializer,\n    EnumSerializer,\n    FloatSerializer,\n    FrozensetSerializer,\n    FunctionTypeSerializer,\n    FunctoolsPartialSerializer,\n    IterableSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    RegexSerializer,\n    SequenceSerializer,\n    SetSerializer,\n    SettingsReferenceSerializer,\n    TupleSerializer,\n    TypeSerializer,\n    UUIDSerializer,\n    Serializer,\n    serializer_factory,\n)\nfrom django.db import models\nfrom django.utils.functional import LazyObject, Promise\nfrom django.utils.timezone import utc\nfrom django.conf import SettingsReference\nfrom django.db.migrations.operations.base import Operation\nimport datetime\nimport decimal\nimport enum\nimport functools\nimport math\nimport re\nimport types\nimport uuid\n\nclass TestSerializers(unittest.TestCase):\n    def test_base_serializer(self):\n        with self.assertRaises(NotImplementedError):\n            BaseSerializer(1).serialize()\n\n    def test_base_sequence_serializer(self):\n        with self.assertRaises(NotImplementedError):\n            BaseSequenceSerializer([1, 2])._format()\n\n    # Continue with more tests...\n\nclass TestSerializerFactory(unittest.TestCase):\n    def test_promise(self):\n        p = Promise(lambda: \"test\")\n        self.assertEqual(serializer_factory(p), \"test\")\n\n    # Continue with more tests...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_593": ["\nimport unittest\nfrom datetime import datetime, timedelta\n\nimport numpy as np\nimport pandas as pd\n\nfrom xarray.core import formatting\n\nclass TestFormatting(unittest.TestCase):\n    def test_format_item(self):\n        self.assertEqual(formatting.format_item(datetime(2022, 1, 1)), '2022-01-01')\n        self.assertEqual(formatting.format_item(timedelta(days=1)), '1 days 00:00:00')\n        self.assertEqual(formatting.format_item('test'), \"'test'\")\n        self.assertEqual(formatting.format_item(1.23456789), '1.2346')\n\n    def test_format_array_flat(self):\n        array = np.array([1, 2, 3, 4, 5])\n        self.assertEqual(formatting.format_array_flat(array, 10), '1 2 ... 4 5')\n\n    def test_summarize_variable(self):\n        # Assuming xarray.Variable is imported and a variable 'var' is created\n        self.assertEqual(formatting.summarize_variable('test', var, 10), '  test    (dim) dtype values')\n\n    def test_dataset_repr(self):\n        # Assuming xarray.Dataset is imported and a dataset 'ds' is created\n        self.assertEqual(formatting.dataset_repr(ds), '<xarray.Dataset>\\nDimensions: (dim: size)\\nCoordinates:\\n  *empty*\\nData variables:\\n  *empty*\\nAttributes:\\n  *empty*')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1200": ["\nimport unittest\nfrom sympy import symbols\nfrom sympy.physics.units.unitsystem import UnitSystem\nfrom sympy.physics.units.definitions.dimension_definitions import ( Dimension, charge, length, time, temperature, pressure, energy, mass )\nfrom sympy.physics.units.systems.si import dimsys_SI, meter, second\nfrom sympy.physics.units import Quantity\n\nclass TestUnitSystem(unittest.TestCase):\n\n    def setUp(self):\n        self.unit_system = UnitSystem([meter, second], name=\"Test System\", dimension_system=dimsys_SI)\n\n    def test_init(self):\n        self.assertEqual(self.unit_system.name, \"Test System\")\n        self.assertEqual(self.unit_system._base_units, (meter, second))\n\n    def test_extend(self):\n        extended_system = self.unit_system.extend([energy], name=\"Extended Test System\")\n        self.assertEqual(extended_system.name, \"Extended Test System\")\n        self.assertEqual(extended_system._base_units, (meter, second, energy))\n\n    def test_get_quantity_dimension(self):\n        self.assertEqual(self.unit_system.get_quantity_dimension(Quantity(\"meter\")), length)\n\n    def test_get_quantity_scale_factor(self):\n        self.assertEqual(self.unit_system.get_quantity_scale_factor(Quantity(\"meter\")), 1)\n\n    def test_get_dimensional_expr(self):\n        x = symbols('x')\n        expr = x * Quantity('meter') / Quantity('second')\n        self.assertEqual(self.unit_system.get_dimensional_expr(expr), length / time)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_12": ["\nimport pytest\nimport numpy as np\nimport astropy.units as u\nfrom astropy.coordinates import Angle, Latitude, Longitude\n\ndef test_angle_initialization():\n    a = Angle('10.2345d')\n    assert a.value == 10.2345\n    assert a.unit == u.deg\n\ndef test_latitude_initialization():\n    lat = Latitude('45d')\n    assert lat.value == 45\n    assert lat.unit == u.deg\n\ndef test_latitude_validation():\n    with pytest.raises(ValueError):\n        Latitude('91d')\n\ndef test_longitude_initialization():\n    lon = Longitude('120d')\n    assert lon.value == 120\n    assert lon.unit == u.deg\n\ndef test_longitude_wrapping():\n    lon = Longitude('370d')\n    assert lon.value == 10\n    assert lon.unit == u.deg\n\ndef test_angle_operations():\n    a1 = Angle('10d')\n    a2 = Angle('20d')\n    assert (a1 + a2).value == 30\n    assert (a1 - a2).value == -10\n\ndef test_angle_to_string():\n    a = Angle('10.2345d')\n    assert a.to_string() == '10.2345 deg'\n\ndef test_angle_wrap_at():\n    a = Angle([-20.0, 150.0, 350.0] * u.deg)\n    wrapped = a.wrap_at(360 * u.deg)\n    assert np.allclose(wrapped.degree, [340.0, 150.0, 350.0])\n\ndef test_angle_is_within_bounds():\n    a = Angle([-20, 150, 350] * u.deg)\n    assert a.is_within_bounds('0d', '360d') == False\n    assert a.is_within_bounds(None, '360d') == True\n    assert a.is_within_bounds(-30 * u.deg, None) == True\n\n# Add more tests as needed\n"], "sample_919": ["\nimport unittest\nfrom inspect import Parameter, signature as inspect_signature\nfrom sphinx.util import inspect\nfrom sphinx.util.inspect import stringify_signature, is_builtin_class_method\n\nclass TestInspectUtils(unittest.TestCase):\n    def test_stringify_signature(self):\n        sig = inspect_signature(lambda x: x)\n        self.assertEqual(stringify_signature(sig), '(x)')\n\n    def test_is_builtin_class_method(self):\n        self.assertTrue(is_builtin_class_method(int, '__init__'))\n        self.assertFalse(is_builtin_class_method(list, 'append'))\n\n    def test_getargspec(self):\n        def func(a, b=1, *args, c=2, **kwargs):\n            pass\n        spec = inspect.getargspec(func)\n        self.assertEqual(spec.args, ['a', 'b'])\n        self.assertEqual(spec.varargs, 'args')\n        self.assertEqual(spec.defaults, (1,))\n        self.assertEqual(spec.kwonlyargs, ['c'])\n        self.assertEqual(spec.kwonlydefaults, {'c': 2})\n        self.assertEqual(spec.varkw, 'kwargs')\n\n    def test_unwrapping(self):\n        def func(x):\n            return x\n        wrapped_func = inspect.unwrapping(func)\n        self.assertEqual(wrapped_func, func)\n\n    def test_isenumclass(self):\n        from enum import Enum\n        class TestEnum(Enum):\n            A = 1\n        self.assertTrue(inspect.isenumclass(TestEnum))\n\n    def test_isenumattribute(self):\n        from enum import Enum\n        class TestEnum(Enum):\n            A = 1\n        self.assertTrue(inspect.isenumattribute(TestEnum.A))\n\n    def test_ispartial(self):\n        from functools import partial\n        def func(x, y):\n            return x + y\n        partial_func = partial(func, 1)\n        self.assertTrue(inspect.ispartial(partial_func))\n\n    def test_isclassmethod(self):\n        class TestClass:\n            @classmethod\n            def test_method(cls, x):\n                return x\n        self.assertTrue(inspect.isclassmethod(TestClass.test_method))\n\n    def test_isstaticmethod(self):\n        class TestClass:\n            @staticmethod\n            def test_method(x):\n                return x\n        self.assertTrue(inspect.isstaticmethod(TestClass.test_method))\n\n    def test_isdescriptor(self):\n        class TestDescriptor:\n            def __get__(self, instance, owner):\n                return 'test'\n        self.assertTrue(inspect.isdescriptor(TestDescriptor()))\n\n    def test_isabstractmethod(self):\n        from abc import ABC, abstractmethod\n        class TestAbstractClass(ABC):\n            @abstractmethod\n            def test_method(self):\n                pass\n        self.assertTrue(inspect.isabstractmethod(TestAbstractClass.test_method))\n\n    def test_is_singledispatch_function(self):\n        from functools import singledispatch\n        @singledispatch\n        def test_func(arg):\n            pass\n        self.assertTrue(inspect.is_singledispatch_function(test_func))\n\n    def test_isfunction(self):\n        def test_func(x):\n            return x\n        self.assertTrue(inspect.isfunction(test_func))\n\n    def test_isbuiltin(self):\n        self.assertTrue(inspect.isbuiltin(len))\n\n    def test_isroutine(self):\n        def test_func(x):\n            return x\n        self.assertTrue(inspect.isroutine(test_func))\n\n    def test_iscoroutinefunction(self):\n        async def test_func(x):\n            return x\n        self.assertTrue(inspect.iscoroutinefunction(test_func))\n\n    def test_isproperty(self):\n        class TestClass:\n            @property\n            def test_property(self):\n                return 'test'\n        self.assertTrue(inspect.isproperty(TestClass.test_property))\n\n    def test_safe_getattr(self):\n        class TestClass:\n            test_attr = 'test'\n        self.assertEqual(inspect.safe_getattr(TestClass, 'test_attr'), 'test')\n\n    def test_safe_getmembers(self):\n        class TestClass:\n            test_attr = 'test'\n        members = inspect.safe_getmembers(TestClass)\n        self.assertIn(('test_attr', 'test'), members)\n\n    def test_object_description(self):\n        self.assertEqual(inspect.object_description([1, 2, 3]), '[1, 2, 3]')\n\n    def test_signature(self):\n        def test_func(x: int) -> str:\n            return str(x)\n        sig = inspect.signature(test_func)\n        self.assertEqual(str(sig), '(x: int) -> str')\n\n    def test_signature_from_str(self):\n        sig = inspect.signature_from_str('(x: int) -> str')\n        self.assertEqual(str(sig), '(x: int) -> str')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_456": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.forms import Form, IntegerField, BooleanField\nfrom django.forms.formsets import (\n    BaseFormSet,\n    ManagementForm,\n    formset_factory,\n    all_valid,\n    TOTAL_FORM_COUNT,\n    INITIAL_FORM_COUNT,\n    MIN_NUM_FORM_COUNT,\n    MAX_NUM_FORM_COUNT,\n    ORDERING_FIELD_NAME,\n    DELETION_FIELD_NAME,\n)\nfrom django.forms.renderers import get_default_renderer\nfrom django.forms.utils import ErrorList\nfrom django.core.exceptions import ValidationError\n\nclass TestBaseFormSet(unittest.TestCase):\n    def setUp(self):\n        self.form_class = Form\n        self.formset_class = formset_factory(self.form_class, extra=2)\n\n    def test_initial_form_count(self):\n        formset = self.formset_class()\n        self.assertEqual(formset.initial_form_count(), 0)\n\n    def test_total_form_count(self):\n        formset = self.formset_class()\n        self.assertEqual(formset.total_form_count(), 2)\n\n    def test_management_form(self):\n        formset = self.formset_class()\n        self.assertIsInstance(formset.management_form, ManagementForm)\n\n    def test_forms(self):\n        formset = self.formset_class()\n        self.assertEqual(len(formset.forms), 2)\n\n    def test_cleaned_data(self):\n        formset = self.formset_class(\n            data={\n                'form-TOTAL_FORMS': '2',\n                'form-INITIAL_FORMS': '0',\n                'form-0-some_field': 'value1',\n                'form-1-some_field': 'value2',\n            }\n        )\n        self.assertTrue(formset.is_valid())\n        self.assertEqual(formset.cleaned_data, [{'some_field': 'value1'}, {'some_field': 'value2'}])\n\n    def test_is_valid(self):\n        formset = self.formset_class(\n            data={\n                'form-TOTAL_FORMS': '2',\n                'form-INITIAL_FORMS': '0',\n                'form-0-some_field': 'value1',\n                'form-1-some_field': 'value2',\n            }\n        )\n        self.assertTrue(formset.is_valid())\n\n    def test_full_clean(self):\n        formset = self.formset_class(\n            data={\n                'form-TOTAL_FORMS': '3',\n                'form-INITIAL_FORMS': '0',\n                'form-0-some_field': 'value1',\n                'form-1-some_field': 'value2',\n            }\n        )\n        formset.full_clean()\n        self.assertFalse(formset.is_valid())\n\n    def test_deleted_forms(self):\n        class DeleteForm(Form):\n            delete = BooleanField(required=False)\n\n        DeleteFormSet = formset_factory(DeleteForm, can_delete=True)\n        formset = DeleteFormSet(\n            data={\n                'form-TOTAL_FORMS': '2',\n                'form-INITIAL_FORMS': '2',\n                'form-0-delete': 'on',\n                'form-1-delete': 'off',\n            }\n        )\n        self.assertTrue(formset.is_valid())\n        self.assertEqual(len(formset.deleted_forms), 1)\n\n    def test_ordered_forms(self):\n        class OrderForm(Form):\n            order = IntegerField()\n\n        OrderFormSet = formset_factory(OrderForm, can_order=True)\n        formset = OrderFormSet(\n            data={\n                'form-TOTAL_FORMS': '2',\n                'form-INITIAL_FORMS': '2',\n                'form-0-order': '2',\n                'form-1-order': '1',\n            }\n        )\n        self.assertTrue(formset.is_valid())\n        self.assertEqual(formset.ordered_forms[0]['order'], 1)\n        self.assertEqual(formset.ordered_forms[1]['order'], 2)\n\n    def test_all_valid(self):\n        formset1 = self.formset_class(\n            data={\n                'form-TOTAL_FORMS': '2',\n                'form-INITIAL_FORMS': '0',\n                'form-0-some_field': 'value1',\n                'form-1-some_field': 'value2',\n            }\n        )\n        formset2 = self.formset_class(\n            data={\n                'form-TOTAL_FORMS': '2',\n                'form-INITIAL_FORMS': '0',\n                'form-0-some_field': 'value3',\n                'form-1-some_field': 'value4',\n            }\n        )\n        self.assertTrue(all_valid([formset1, formset2]))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_585": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nfrom xarray.core.groupby import (\n    _consolidate_slices,\n    _inverse_permutation_indices,\n    _ensure_1d,\n    _unique_and_monotonic,\n    GroupBy,\n    DataArrayGroupBy,\n    DatasetGroupBy\n)\n\nclass TestGroupBy(unittest.TestCase):\n\n    def setUp(self):\n        self.data = xr.DataArray(np.random.randn(4, 3), dims=('x', 'y'))\n        self.group = xr.DataArray(['g1', 'g1', 'g2', 'g2'], dims='x', name='group')\n\n    def test_consolidate_slices(self):\n        slices = [slice(0, 2), slice(2, 4), slice(4, 6)]\n        result = _consolidate_slices(slices)\n        self.assertEqual(result, [slice(0, 4)])\n\n    def test_inverse_permutation_indices(self):\n        positions = [np.array([1, 2]), np.array([3, 4])]\n        result = _inverse_permutation_indices(positions)\n        self.assertTrue(np.array_equal(result, np.array([1, 2, 3, 4])))\n\n    def test_ensure_1d(self):\n        group = xr.DataArray([[1, 2], [3, 4]], dims=('a', 'b'), name='group')\n        obj = xr.DataArray(np.random.randn(2, 2), dims=('a', 'b'))\n        result_group, result_obj, stacked_dim, inserted_dims = _ensure_1d(group, obj)\n        self.assertEqual(result_group.dims, (stacked_dim,))\n\n    def test_unique_and_monotonic(self):\n        group = xr.DataArray([1, 2, 3], dims='x', name='group')\n        self.assertTrue(_unique_and_monotonic(group))\n\n    def test_groupby_init(self):\n        groupby_obj = GroupBy(self.data, self.group)\n        self.assertIsInstance(groupby_obj, GroupBy)\n\n    def test_dataarraygroupby_init(self):\n        groupby_obj = DataArrayGroupBy(self.data, self.group)\n        self.assertIsInstance(groupby_obj, DataArrayGroupBy)\n\n    def test_datasetgroupby_init(self):\n        data = xr.Dataset({'var': self.data})\n        groupby_obj = DatasetGroupBy(data, self.group)\n        self.assertIsInstance(groupby_obj, DatasetGroupBy)\n\n    def test_dataarraygroupby_apply(self):\n        groupby_obj = DataArrayGroupBy(self.data, self.group)\n        result = groupby_obj.apply(np.mean)\n        self.assertIsInstance(result, xr.DataArray)\n\n    def test_datasetgroupby_apply(self):\n        data = xr.Dataset({'var': self.data})\n        groupby_obj = DatasetGroupBy(data, self.group)\n        result = groupby_obj.apply(lambda ds: ds.mean())\n        self.assertIsInstance(result, xr.Dataset)\n\n    def test_dataarraygroupby_reduce(self):\n        groupby_obj = DataArrayGroupBy(self.data, self.group)\n        result = groupby_obj.reduce(np.mean, dim='y')\n        self.assertIsInstance(result, xr.DataArray)\n\n    def test_datasetgroupby_reduce(self):\n        data = xr.Dataset({'var': self.data})\n        groupby_obj = DatasetGroupBy(data, self.group)\n        result = groupby_obj.reduce(lambda ds: ds.mean(), dim='y')\n        self.assertIsInstance(result, xr.Dataset)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_147": ["\nfrom django.test import TestCase\nfrom django.db.models import Model, CharField\nfrom django.db.models.query import QuerySet, EmptyQuerySet, RawQuerySet, Prefetch, normalize_prefetch_lookups, prefetch_related_objects\n\nclass TestQuerySet(TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            name = CharField(max_length=50)\n\n        self.model = TestModel\n        self.queryset = QuerySet(model=self.model)\n\n    def test_empty_queryset(self):\n        self.assertIsInstance(self.queryset.none(), EmptyQuerySet)\n\n    def test_filter(self):\n        filtered_queryset = self.queryset.filter(name='Test')\n        self.assertIsInstance(filtered_queryset, QuerySet)\n\n    def test_exclude(self):\n        excluded_queryset = self.queryset.exclude(name='Test')\n        self.assertIsInstance(excluded_queryset, QuerySet)\n\n    def test_union(self):\n        another_queryset = QuerySet(model=self.model)\n        union_queryset = self.queryset.union(another_queryset)\n        self.assertIsInstance(union_queryset, QuerySet)\n\n    def test_intersection(self):\n        another_queryset = QuerySet(model=self.model)\n        intersection_queryset = self.queryset.intersection(another_queryset)\n        self.assertIsInstance(intersection_queryset, QuerySet)\n\n    def test_difference(self):\n        another_queryset = QuerySet(model=self.model)\n        difference_queryset = self.queryset.difference(another_queryset)\n        self.assertIsInstance(difference_queryset, QuerySet)\n\n    def test_select_related(self):\n        select_related_queryset = self.queryset.select_related('name')\n        self.assertIsInstance(select_related_queryset, QuerySet)\n\n    def test_prefetch_related(self):\n        prefetch_related_queryset = self.queryset.prefetch_related('name')\n        self.assertIsInstance(prefetch_related_queryset, QuerySet)\n\n    def test_annotate(self):\n        annotated_queryset = self.queryset.annotate(length=F('name').__length__)\n        self.assertIsInstance(annotated_queryset, QuerySet)\n\n    def test_order_by(self):\n        ordered_queryset = self.queryset.order_by('name')\n        self.assertIsInstance(ordered_queryset, QuerySet)\n\n    def test_distinct(self):\n        distinct_queryset = self.queryset.distinct('name')\n        self.assertIsInstance(distinct_queryset, QuerySet)\n\n    def test_extra(self):\n        extra_queryset = self.queryset.extra(select={'length': 'LENGTH(name)'})\n        self.assertIsInstance(extra_queryset, QuerySet)\n\n    def test_defer(self):\n        deferred_queryset = self.queryset.defer('name')\n        self.assertIsInstance(deferred_queryset, QuerySet)\n\n    def test_only(self):\n        only_queryset = self.queryset.only('name')\n        self.assertIsInstance(only_queryset, QuerySet)\n\n    def test_using(self):\n        using_queryset = self.queryset.using('default')\n        self.assertIsInstance(using_queryset, QuerySet)\n\n    def test_raw_queryset(self):\n        raw_queryset = RawQuerySet(raw_query='SELECT * FROM testmodel', model=self.model)\n        self.assertIsInstance(raw_queryset, RawQuerySet)\n\n    def test_normalize_prefetch_lookups(self):\n        lookups = ['name', Prefetch('name')]\n        normalized_lookups = normalize_prefetch_lookups(lookups)\n        self.assertIsInstance(normalized_lookups[0], Prefetch)\n        self.assertIsInstance(normalized_lookups[1], Prefetch)\n\n    def test_prefetch_related_objects(self):\n        model_instances = [self.model(name='Test')]\n        prefetch_related_objects(model_instances, 'name')\n        self.assertTrue(hasattr(model_instances[0], '_prefetched_objects_cache'))\n\n    # Add more tests for other methods and edge cases as needed\n"], "sample_160": ["\nimport unittest\nfrom decimal import Decimal\nfrom django.utils.numberformat import format as nformat\n\nclass TestNumberFormat(unittest.TestCase):\n\n    def test_integer_format(self):\n        self.assertEqual(nformat(123, '.'), '123')\n\n    def test_float_format(self):\n        self.assertEqual(nformat(123.456, '.', decimal_pos=2), '123.45')\n\n    def test_large_float_format(self):\n        self.assertEqual(nformat(1.23456e10, '.'), '1.23456e10')\n\n    def test_negative_number_format(self):\n        self.assertEqual(nformat(-123.45, '.'), '-123.45')\n\n    def test_decimal_format(self):\n        self.assertEqual(nformat(Decimal('123.456'), '.', decimal_pos=2), '123.45')\n\n    def test_grouping_format(self):\n        self.assertEqual(nformat(1234567, '.', grouping=3), '1,234,567')\n\n    def test_use_l10n_format(self):\n        with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True):\n            self.assertEqual(nformat(1234567, '.'), '1,234,567')\n\n    def test_force_grouping_format(self):\n        self.assertEqual(nformat(1234567, '.', grouping=3, force_grouping=True), '1,234,567')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1197": ["\nimport unittest\nfrom sympy.physics.units.unitsystem import UnitSystem\nfrom sympy.physics.units.definitions.dimension_definitions import Dimension, charge, length, time\nfrom sympy.physics.units.systems.si import dimsys_SI, meter, second, ampere\nfrom sympy.physics.units import Quantity\n\nclass TestUnitSystem(unittest.TestCase):\n\n    def setUp(self):\n        self.si_units = UnitSystem([meter, second, ampere], name=\"SI\", dimension_system=dimsys_SI)\n\n    def test_unit_system_init(self):\n        self.assertEqual(self.si_units.name, \"SI\")\n        self.assertEqual(self.si_units._base_units, (meter, second, ampere))\n        self.assertEqual(self.si_units._units, (meter, second, ampere))\n\n    def test_unit_system_str(self):\n        self.assertEqual(str(self.si_units), \"SI\")\n\n    def test_unit_system_repr(self):\n        self.assertEqual(repr(self.si_units), \"<UnitSystem: (m, s, A)>\")\n\n    def test_unit_system_extend(self):\n        extended_system = self.si_units.extend([charge], name=\"ExtendedSI\")\n        self.assertEqual(extended_system.name, \"ExtendedSI\")\n        self.assertEqual(extended_system._base_units, (meter, second, ampere, charge))\n        self.assertEqual(extended_system._units, (meter, second, ampere, charge))\n\n    def test_unit_system_get_dimension_system(self):\n        self.assertEqual(self.si_units.get_dimension_system(), dimsys_SI)\n\n    def test_unit_system_get_quantity_dimension(self):\n        self.assertEqual(self.si_units.get_quantity_dimension(meter), length)\n\n    def test_unit_system_get_quantity_scale_factor(self):\n        self.assertEqual(self.si_units.get_quantity_scale_factor(meter), 1)\n\n    def test_unit_system_get_unit_system(self):\n        self.assertEqual(UnitSystem.get_unit_system(\"SI\"), self.si_units)\n        with self.assertRaises(ValueError):\n            UnitSystem.get_unit_system(\"InvalidSystem\")\n\n    def test_unit_system_get_default_unit_system(self):\n        self.assertEqual(UnitSystem.get_default_unit_system(), self.si_units)\n\n    def test_unit_system_dim(self):\n        self.assertEqual(self.si_units.dim, 3)\n\n    def test_unit_system_is_consistent(self):\n        self.assertTrue(self.si_units.is_consistent)\n\n    def test_unit_system_derived_units(self):\n        self.assertEqual(self.si_units.derived_units, {})\n\n    def test_unit_system_get_dimensional_expr(self):\n        expr = Quantity('Velocity', 1, length/time)\n        self.assertEqual(self.si_units.get_dimensional_expr(expr), 'Length/Time')\n\n    def test_unit_system_get_units_non_prefixed(self):\n        self.assertEqual(self.si_units.get_units_non_prefixed(), {meter, second, ampere})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_755": ["\nimport unittest\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor, ExtraTreesClassifier, ExtraTreesRegressor, RandomTreesEmbedding\nfrom sklearn.datasets import make_classification, make_regression\nimport numpy as np\n\nclass TestForestMethods(unittest.TestCase):\n\n    def setUp(self):\n        self.X_class, self.y_class = make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, n_classes=2, random_state=1)\n        self.X_reg, self.y_reg = make_regression(n_samples=100, n_features=20, n_informative=2, random_state=1)\n\n    def test_RandomForestClassifier(self):\n        clf = RandomForestClassifier(random_state=1)\n        clf.fit(self.X_class, self.y_class)\n        self.assertIsInstance(clf.predict(self.X_class), np.ndarray)\n        self.assertIsInstance(clf.predict_proba(self.X_class), np.ndarray)\n\n    def test_RandomForestRegressor(self):\n        regr = RandomForestRegressor(random_state=1)\n        regr.fit(self.X_reg, self.y_reg)\n        self.assertIsInstance(regr.predict(self.X_reg), np.ndarray)\n\n    def test_ExtraTreesClassifier(self):\n        clf = ExtraTreesClassifier(random_state=1)\n        clf.fit(self.X_class, self.y_class)\n        self.assertIsInstance(clf.predict(self.X_class), np.ndarray)\n        self.assertIsInstance(clf.predict_proba(self.X_class), np.ndarray)\n\n    def test_ExtraTreesRegressor(self):\n        regr = ExtraTreesRegressor(random_state=1)\n        regr.fit(self.X_reg, self.y_reg)\n        self.assertIsInstance(regr.predict(self.X_reg), np.ndarray)\n\n    def test_RandomTreesEmbedding(self):\n        transformer = RandomTreesEmbedding(random_state=1)\n        transformer.fit(self.X_class)\n        self.assertIsInstance(transformer.transform(self.X_class), np.ndarray)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_890": ["\nimport numpy as np\nfrom sklearn.datasets import make_classification, make_regression\nfrom sklearn.ensemble import AdaBoostClassifier, AdaBoostRegressor\nfrom sklearn.ensemble._weight_boosting import _samme_proba\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.utils import check_random_state\nimport pytest\n\n@pytest.fixture\ndef classification_data():\n    return make_classification(n_samples=100, n_features=20, random_state=42)\n\n@pytest.fixture\ndef regression_data():\n    return make_regression(n_samples=100, n_features=20, random_state=42)\n\ndef test_AdaBoostClassifier_fit(classification_data):\n    X, y = classification_data\n    clf = AdaBoostClassifier(n_estimators=50, random_state=42)\n    clf.fit(X, y)\n    assert len(clf.estimators_) == 50\n    assert clf.estimator_weights_.shape == (50,)\n    assert clf.estimator_errors_.shape == (50,)\n\ndef test_AdaBoostRegressor_fit(regression_data):\n    X, y = regression_data\n    reg = AdaBoostRegressor(n_estimators=50, random_state=42)\n    reg.fit(X, y)\n    assert len(reg.estimators_) == 50\n    assert reg.estimator_weights_.shape == (50,)\n    assert reg.estimator_errors_.shape == (50,)\n\ndef test_AdaBoostClassifier_predict(classification_data):\n    X, y = classification_data\n    clf = AdaBoostClassifier(n_estimators=50, random_state=42)\n    clf.fit(X, y)\n    y_pred = clf.predict(X)\n    assert y_pred.shape == (100,)\n\ndef test_AdaBoostRegressor_predict(regression_data):\n    X, y = regression_data\n    reg = AdaBoostRegressor(n_estimators=50, random_state=42)\n    reg.fit(X, y)\n    y_pred = reg.predict(X)\n    assert y_pred.shape == (100,)\n\ndef test_samme_proba():\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    y = np.array([0, 1, 0])\n    clf = DecisionTreeClassifier(random_state=42)\n    clf.fit(X, y)\n    proba = _samme_proba(clf, n_classes=2, X=X)\n    assert proba.shape == (3, 2)\n"], "sample_862": ["\nimport unittest\nimport numpy as np\nfrom sklearn.utils import validation\nimport scipy.sparse as sp\n\nclass TestValidation(unittest.TestCase):\n\n    def setUp(self):\n        # Setup code here. This method is called before the execution of each test\n        self.X = np.array([[1, 2], [3, 4]])\n        self.y = np.array([1, 2])\n        self.X_sparse = sp.csr_matrix(self.X)\n        self.X_large_sparse = sp.csr_matrix(self.X, dtype=np.int64)\n        self.invalid_X = [[1, 2, 3], [4, 5]]\n        self.invalid_y = np.array([[1], [2]])\n        self.random_state = 42\n\n    def test_check_array(self):\n        # Test check_array function\n        X_converted = validation.check_array(self.X)\n        self.assertTrue(np.array_equal(self.X, X_converted))\n\n        X_converted = validation.check_array(self.X_sparse, accept_sparse=True)\n        self.assertTrue(sp.issparse(X_converted))\n\n        with self.assertRaises(ValueError):\n            validation.check_array(self.invalid_X)\n\n    def test_check_X_y(self):\n        # Test check_X_y function\n        X_converted, y_converted = validation.check_X_y(self.X, self.y)\n        self.assertTrue(np.array_equal(self.X, X_converted))\n        self.assertTrue(np.array_equal(self.y, y_converted))\n\n        with self.assertRaises(ValueError):\n            validation.check_X_y(self.X, self.invalid_y)\n\n    def test_check_symmetric(self):\n        # Test check_symmetric function\n        symmetric_X = validation.check_symmetric(self.X)\n        self.assertTrue(np.array_equal(self.X, symmetric_X))\n\n        non_symmetric_X = np.array([[1, 2], [3, 5]])\n        with self.assertRaises(ValueError):\n            validation.check_symmetric(non_symmetric_X, raise_exception=True)\n\n    def test_check_random_state(self):\n        # Test check_random_state function\n        random_state = validation.check_random_state(self.random_state)\n        self.assertIsInstance(random_state, np.random.RandomState)\n\n    def test_check_large_sparse(self):\n        # Test _check_large_sparse function\n        validation._check_large_sparse(self.X_sparse)\n\n        with self.assertRaises(ValueError):\n            validation._check_large_sparse(self.X_large_sparse, accept_large_sparse=False)\n\n    # Add more test methods for other functions in the validation module\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_995": ["\nimport unittest\nfrom sympy import (Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr)\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt, integer_log\nfrom sympy.core.numbers import (igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse)\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom sympy import pi\nfrom mpmath.libmp.libmpf import fnan\nfrom sympy import Pi\n\nclass TestNumbers(unittest.TestCase):\n    def test_rational_creation(self):\n        self.assertEqual(Rational(3, 4), Rational(3, 4))\n        self.assertEqual(Rational(1, 2), Rational(0.5))\n        self.assertEqual(Rational('3/4'), Rational(3, 4))\n\n    def test_integer_creation(self):\n        self.assertEqual(Integer(10), Integer(10))\n        self.assertEqual(Integer('10'), Integer(10))\n\n    def test_float_creation(self):\n        self.assertEqual(Float(3.14), Float(3.14))\n        self.assertEqual(Float('3.14'), Float(3.14))\n\n    def test_symbol_creation(self):\n        self.assertEqual(Symbol('x'), Symbol('x'))\n\n    def test_complex_creation(self):\n        self.assertEqual(I, I)\n        self.assertEqual(1 + 2*I, 1 + 2*I)\n\n    def test_constants(self):\n        self.assertEqual(pi, Pi())\n        self.assertEqual(E, E)\n\n    def test_number_operations(self):\n        self.assertEqual(Rational(3, 4) + Rational(1, 2), Rational(5, 4))\n        self.assertEqual(Integer(10) * Integer(2), Integer(20))\n        self.assertEqual(Float(3.14) / Float(2), Float(1.57))\n        self.assertEqual(sin(pi), Float(0))\n\n    def test_number_comparisons(self):\n        self.assertTrue(Gt(Rational(3, 4), Rational(1, 2)))\n        self.assertTrue(Lt(Integer(5), Integer(10)))\n        self.assertTrue(Ge(Float(3.14), Float(3)))\n        self.assertTrue(Le(Number(2), Number(2)))\n\n    def test_special_functions(self):\n        self.assertEqual(factorial(5), Integer(120))\n        self.assertEqual(fibonacci(10), Integer(55))\n        self.assertEqual(integer_nthroot(16, 2), (4, True))\n\n    def test_number_theory_functions(self):\n        self.assertEqual(igcd(12, 18), 6)\n        self.assertEqual(ilcm(12, 18), 36)\n        self.assertEqual(igcdex(12, 18), (6, -1, 1))\n\n    def test_number_symbol_properties(self):\n        self.assertTrue(pi.is_irrational)\n        self.assertTrue(E.is_transcendental)\n\n    def test_number_symbol_methods(self):\n        self.assertEqual(pi.approximation(Float), (Float('3.141592653589793'), Float('3.141592653589793')))\n        self.assertEqual(E._eval_power(2), exp(2))\n"], "sample_1205": ["\nimport unittest\nfrom operator import add, mul\nfrom sympy import symbols\nfrom sympy.polys.rings import ring, xring, sring, PolyRing, PolyElement\nfrom sympy.polys.domains import ZZ, QQ\nfrom sympy.polys.orderings import lex, grlex\nfrom sympy.polys.polyerrors import GeneratorsError, ExactQuotientFailed, MultivariatePolynomialError, CoercionFailed\nfrom sympy.functions.elementary.exponential import exp\n\nclass TestPolysRings(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n\n    def test_ring(self):\n        R, x, y, z = ring(\"x,y,z\", ZZ, lex)\n        self.assertIsInstance(R, PolyRing)\n        self.assertIsInstance(x, PolyElement)\n        self.assertIsInstance(y, PolyElement)\n        self.assertIsInstance(z, PolyElement)\n\n    def test_xring(self):\n        R, (x, y, z) = xring(\"x,y,z\", ZZ, lex)\n        self.assertIsInstance(R, PolyRing)\n        self.assertIsInstance(x, PolyElement)\n        self.assertIsInstance(y, PolyElement)\n        self.assertIsInstance(z, PolyElement)\n\n    def test_sring(self):\n        R, f = sring(self.x + 2*self.y + 3*self.z)\n        self.assertIsInstance(R, PolyRing)\n        self.assertIsInstance(f, PolyElement)\n\n    def test_poly_element_operations(self):\n        R, x, y = ring(\"x,y\", QQ, lex)\n        p1 = x + y\n        p2 = x - y\n        self.assertEqual(p1*p2, x**2 - y**2)\n        self.assertEqual(p1**2 + p2**2, 2*(x**2 + y**2))\n\n    def test_poly_element_division(self):\n        R, x, y = ring(\"x,y\", ZZ, lex)\n        f = x**3\n        f0 = x - y**2\n        f1 = x - y\n        qv, r = f.div((f0, f1))\n        self.assertEqual(qv[0], x**2 + x*y**2 + y**4)\n        self.assertEqual(qv[1], 0)\n        self.assertEqual(r, y**6)\n\n    def test_poly_element_gcd(self):\n        R, x, y = ring(\"x,y\", ZZ, lex)\n        f = x**2 - y**2\n        g = x**2 - 2*x*y + y**2\n        h = f.gcd(g)\n        self.assertEqual(h, x - y)\n\n    def test_poly_element_cancel(self):\n        R, x, y = ring(\"x,y\", QQ, lex)\n        f = 2*x**2 - 2\n        g = x**2 - 2*x + 1\n        p, q = f.cancel(g)\n        self.assertEqual(p, 2*x + 2)\n        self.assertEqual(q, x - 1)\n\n    def test_poly_element_evaluate(self):\n        R, x, y = ring(\"x,y\", ZZ, lex)\n        p = x + x**2*y**3\n        self.assertEqual(p.evaluate(x, 2), 2 + 8*y**3)\n\n    def test_poly_element_subs(self):\n        R, x, y = ring(\"x,y\", ZZ, lex)\n        p = x + x**2*y**3\n        self.assertEqual(p.subs(x, 2), 2 + 8*y**3)\n\n    def test_poly_element_compose(self):\n        R, x, y = ring(\"x,y\", ZZ, lex)\n        p = x + x**2*y**3\n        self.assertEqual(p.compose(x, y), x + x**2*y**6)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_197": ["\nfrom unittest import TestCase\nfrom django.db.models import IntegerField\nfrom django.db.models.expressions import F, Expression, Func, Value, Window, WindowFrame, RowRange, ValueRange\n\nclass TestExpressions(TestCase):\n    def test_expression_combination(self):\n        expr1 = F('field1')\n        expr2 = Value(2)\n        combined_expr = expr1 + expr2\n        self.assertIsInstance(combined_expr, Expression)\n\n    def test_func_expression(self):\n        expr = Func(F('field1'), 'UPPER', output_field=CharField())\n        self.assertIsInstance(expr, Func)\n        self.assertEqual(expr.function, 'UPPER')\n\n    def test_window_frame(self):\n        frame = RowRange(start=1, end=2)\n        self.assertIsInstance(frame, WindowFrame)\n        self.assertEqual(frame.frame_type, 'ROWS')\n\n    def test_window_expression(self):\n        expr = F('field1')\n        window = Window(expression=expr, partition_by=F('field2'))\n        self.assertIsInstance(window, Expression)\n        self.assertEqual(window.source_expression, expr)\n\n    def test_value_range_frame(self):\n        frame = ValueRange(start=1.5, end=2.5)\n        self.assertIsInstance(frame, WindowFrame)\n        self.assertEqual(frame.frame_type, 'RANGE')\n"], "sample_191": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom pathlib import Path\nfrom django.utils import autoreload\n\nclass TestAutoreload(unittest.TestCase):\n\n    @patch('django.utils.autoreload.StatReloader')\n    @patch('django.utils.autoreload.WatchmanReloader')\n    @patch('os.environ')\n    def test_get_reloader(self, mock_env, mock_watchman, mock_stat):\n        mock_env.get.return_value = None\n        mock_watchman.check_availability.side_effect = autoreload.WatchmanUnavailable()\n\n        reloader = autoreload.get_reloader()\n\n        self.assertIsInstance(reloader, autoreload.StatReloader)\n\n    @patch('django.utils.autoreload.StatReloader.run')\n    @patch('django.utils.autoreload.WatchmanReloader.run')\n    def test_start_django(self, mock_watchman_run, mock_stat_run):\n        reloader = autoreload.StatReloader()\n        main_func = Mock()\n\n        autoreload.start_django(reloader, main_func)\n\n        mock_stat_run.assert_called_once_with(main_func)\n        mock_watchman_run.assert_not_called()\n\n    @patch('django.utils.autoreload.restart_with_reloader')\n    @patch('os.environ')\n    def test_run_with_reloader(self, mock_env, mock_restart):\n        mock_env.get.return_value = 'true'\n        main_func = Mock()\n\n        autoreload.run_with_reloader(main_func)\n\n        mock_restart.assert_not_called()\n\n    @patch('django.utils.autoreload.restart_with_reloader')\n    @patch('os.environ')\n    def test_run_with_reloader_no_autoreload(self, mock_env, mock_restart):\n        mock_env.get.return_value = None\n        main_func = Mock()\n\n        autoreload.run_with_reloader(main_func)\n\n        mock_restart.assert_called_once()\n\n    @patch('django.utils.autoreload.Path')\n    def test_iter_modules_and_files(self, mock_path):\n        mock_path.return_value.resolve.return_value = Path('/path/to/file')\n        modules = [Mock(__spec__=Mock(has_location=True, loader=Mock()))]\n        extra_files = ['/path/to/extra/file']\n\n        result = autoreload.iter_modules_and_files(modules, extra_files)\n\n        self.assertIn(Path('/path/to/file'), result)\n        self.assertIn(Path('/path/to/extra/file'), result)\n\n    # Add more tests for other functions...\n"], "sample_629": ["\nimport unittest\nimport os\nimport re\nfrom unittest.mock import patch, mock_open\nfrom pylint.lint.expand_modules import _is_in_ignore_list_re, expand_modules\n\nclass TestExpandModules(unittest.TestCase):\n    def setUp(self):\n        self.ignore_list = ['__pycache__', 'test.py']\n        self.ignore_list_re = [re.compile('.*\\.pyc$')]\n        self.ignore_list_paths_re = [re.compile('/tmp/.*')]\n\n    def test_is_in_ignore_list_re(self):\n        self.assertTrue(_is_in_ignore_list_re('test.pyc', self.ignore_list_re))\n        self.assertFalse(_is_in_ignore_list_re('test.py', self.ignore_list_re))\n\n    @patch('pylint.lint.expand_modules.os.path.exists')\n    @patch('pylint.lint.expand_modules.os.path.isdir')\n    @patch('pylint.lint.expand_modules.modutils.modpath_from_file')\n    @patch('pylint.lint.expand_modules.modutils.file_info_from_modpath')\n    @patch('pylint.lint.expand_modules.modutils.is_namespace')\n    @patch('pylint.lint.expand_modules.modutils.is_directory')\n    @patch('pylint.lint.expand_modules.modutils.get_module_files')\n    @patch('pylint.lint.expand_modules.get_python_path')\n    @patch('pylint.lint.expand_modules.modutils.file_from_modpath')\n    def test_expand_modules(self, mock_file_from_modpath, mock_get_python_path, mock_get_module_files, mock_is_directory, mock_is_namespace, mock_file_info_from_modpath, mock_modpath_from_file, mock_isdir, mock_exists):\n        # Add assertions for the expand_modules function based on the mocked functions\n        pass\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_537": ["\nimport unittest\nimport numpy as np\nfrom matplotlib import mlab, _api\n\nclass TestMLab(unittest.TestCase):\n\n    def setUp(self):\n        self.x = np.random.rand(100)\n        self.y = np.random.rand(100)\n\n    def test_window_hanning(self):\n        result = mlab.window_hanning(self.x)\n        self.assertEqual(result.shape, self.x.shape)\n\n    def test_window_none(self):\n        result = mlab.window_none(self.x)\n        np.testing.assert_array_equal(result, self.x)\n\n    def test_detrend_mean(self):\n        result = mlab.detrend_mean(self.x)\n        self.assertAlmostEqual(np.mean(result), 0)\n\n    def test_detrend_none(self):\n        result = mlab.detrend_none(self.x)\n        np.testing.assert_array_equal(result, self.x)\n\n    def test_detrend_linear(self):\n        result = mlab.detrend_linear(self.x)\n        coef = np.polyfit(np.arange(self.x.size), result, 1)\n        self.assertAlmostEqual(coef[0], 0)\n\n    def test_stride_windows(self):\n        result = mlab._stride_windows(self.x, 5, 2)\n        self.assertEqual(result.shape, (5, (self.x.size - 2) // 3))\n\n    def test_psd(self):\n        Pxx, freqs = mlab.psd(self.x)\n        self.assertEqual(Pxx.shape, freqs.shape)\n\n    def test_csd(self):\n        Pxy, freqs = mlab.csd(self.x, self.y)\n        self.assertEqual(Pxy.shape, freqs.shape)\n\n    def test_complex_spectrum(self):\n        spec, freqs = mlab.complex_spectrum(self.x)\n        self.assertEqual(spec.shape, freqs.shape)\n\n    def test_magnitude_spectrum(self):\n        spec, freqs = mlab.magnitude_spectrum(self.x)\n        self.assertEqual(spec.shape, freqs.shape)\n\n    def test_angle_spectrum(self):\n        spec, freqs = mlab.angle_spectrum(self.x)\n        self.assertEqual(spec.shape, freqs.shape)\n\n    def test_phase_spectrum(self):\n        spec, freqs = mlab.phase_spectrum(self.x)\n        self.assertEqual(spec.shape, freqs.shape)\n\n    def test_specgram(self):\n        spec, freqs, t = mlab.specgram(self.x)\n        self.assertEqual(spec.shape, (freqs.size, t.size))\n\n    def test_cohere(self):\n        Cxy, freqs = mlab.cohere(self.x, self.y)\n        self.assertEqual(Cxy.shape, freqs.shape)\n\n    def test_GaussianKDE(self):\n        kde = mlab.GaussianKDE(self.x)\n        result = kde(self.x)\n        self.assertEqual(result.shape, self.x.shape)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_607": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nimport pkg_resources\n\nfrom xarray.backends import plugins, common\n\nclass TestPlugins(unittest.TestCase):\n\n    def setUp(self):\n        self.backend_entrypoints = {\n            'netcdf4': MagicMock(spec=common.BackendEntrypoint),\n            'h5netcdf': MagicMock(spec=common.BackendEntrypoint),\n            'scipy': MagicMock(spec=common.BackendEntrypoint),\n            'test_backend': MagicMock(spec=common.BackendEntrypoint),\n        }\n\n    def test_remove_duplicates(self):\n        pkg_entrypoints = [\n            pkg_resources.EntryPoint('netcdf4', 'xarray.backends.netcdf4'),\n            pkg_resources.EntryPoint('netcdf4', 'xarray.backends.netcdf4_duplicate'),\n        ]\n        unique_pkg_entrypoints = plugins.remove_duplicates(pkg_entrypoints)\n        self.assertEqual(len(unique_pkg_entrypoints), 1)\n        self.assertEqual(unique_pkg_entrypoints[0].name, 'netcdf4')\n\n    def test_detect_parameters(self):\n        def test_func(arg1, arg2):\n            pass\n        params = plugins.detect_parameters(test_func)\n        self.assertEqual(params, ('arg1', 'arg2'))\n\n    def test_backends_dict_from_pkg(self):\n        pkg_entrypoints = [pkg_resources.EntryPoint('test_backend', 'xarray.backends.test_backend')]\n        backend_entrypoints = plugins.backends_dict_from_pkg(pkg_entrypoints)\n        self.assertEqual(backend_entrypoints['test_backend'], self.backend_entrypoints['test_backend'].load())\n\n    @patch.dict(common.BACKEND_ENTRYPOINTS, {'netcdf4': MagicMock(spec=common.BackendEntrypoint, available=True)})\n    def test_list_engines(self):\n        engines = plugins.list_engines()\n        self.assertIn('netcdf4', engines)\n\n    @patch.dict(common.BACKEND_ENTRYPOINTS, {'netcdf4': MagicMock(spec=common.BackendEntrypoint, available=True)})\n    def test_guess_engine(self):\n        with patch('xarray.backends.plugins.list_engines', return_value={'netcdf4': self.backend_entrypoints['netcdf4']}):\n            self.backend_entrypoints['netcdf4'].guess_can_open.return_value = True\n            engine = plugins.guess_engine('test_store')\n            self.assertEqual(engine, 'netcdf4')\n\n    def test_get_backend(self):\n        with patch('xarray.backends.plugins.list_engines', return_value={'netcdf4': self.backend_entrypoints['netcdf4']}):\n            backend = plugins.get_backend('netcdf4')\n            self.assertEqual(backend, self.backend_entrypoints['netcdf4'])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_165": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.test import RequestFactory\nfrom django.conf import settings\nfrom django.core import mail\nfrom django.utils.log import (\n    DEFAULT_LOGGING,\n    AdminEmailHandler,\n    CallbackFilter,\n    RequireDebugFalse,\n    RequireDebugTrue,\n    ServerFormatter,\n    configure_logging,\n    log_response,\n)\n\nclass TestLoggingUtils(unittest.TestCase):\n\n    def setUp(self):\n        self.rf = RequestFactory()\n        settings.DEBUG = True\n        settings.INTERNAL_IPS = ['127.0.0.1']\n        settings.DEFAULT_EXCEPTION_REPORTER = 'django.views.debug.ExceptionReporter'\n\n    def test_configure_logging(self):\n        with patch('django.utils.log.import_string') as mock_import_string:\n            mock_import_string.return_value = lambda x: None\n            configure_logging('some.module.function', {})\n            mock_import_string.assert_called_with('some.module.function')\n\n    def test_admin_email_handler(self):\n        handler = AdminEmailHandler()\n        record = Mock()\n        record.levelname = 'ERROR'\n        record.getMessage.return_value = 'Test message'\n        record.request = self.rf.get('/')\n        with patch('django.utils.log.mail.mail_admins') as mock_mail_admins:\n            handler.emit(record)\n            mock_mail_admins.assert_called()\n\n    def test_callback_filter(self):\n        callback = Mock(return_value=True)\n        filter = CallbackFilter(callback)\n        record = Mock()\n        self.assertEqual(filter.filter(record), 1)\n        callback.assert_called_with(record)\n\n    def test_require_debug_false(self):\n        filter = RequireDebugFalse()\n        record = Mock()\n        settings.DEBUG = False\n        self.assertEqual(filter.filter(record), 1)\n        settings.DEBUG = True\n        self.assertEqual(filter.filter(record), 0)\n\n    def test_require_debug_true(self):\n        filter = RequireDebugTrue()\n        record = Mock()\n        settings.DEBUG = True\n        self.assertEqual(filter.filter(record), 1)\n        settings.DEBUG = False\n        self.assertEqual(filter.filter(record), 0)\n\n    def test_server_formatter(self):\n        formatter = ServerFormatter(fmt='{server_time} {message}')\n        record = Mock()\n        record.msg = 'Test message'\n        record.status_code = 200\n        record.server_time = '2022-01-01 00:00:00'\n        self.assertEqual(formatter.format(record), '2022-01-01 00:00:00 Test message')\n\n    def test_log_response(self):\n        response = Mock()\n        response.status_code = 500\n        logger = Mock()\n        log_response('Test message', response=response, logger=logger)\n        logger.error.assert_called()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_106": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.http import HttpRequest, HttpResponse\nfrom django.utils.cache import (\n    patch_cache_control, get_max_age, set_response_etag, get_conditional_response,\n    patch_response_headers, add_never_cache_headers, patch_vary_headers, has_vary_header,\n    _i18n_cache_key_suffix, _generate_cache_key, _generate_cache_header_key,\n    get_cache_key, learn_cache_key\n)\nfrom django.core.cache import caches\n\nclass TestCacheUtils(unittest.TestCase):\n\n    def setUp(self):\n        self.request = HttpRequest()\n        self.response = HttpResponse()\n\n    def test_patch_cache_control(self):\n        patch_cache_control(self.response, max_age=3600, no_cache=True)\n        self.assertEqual(self.response['Cache-Control'], 'max-age=3600, no-cache')\n\n    def test_get_max_age(self):\n        self.response['Cache-Control'] = 'max-age=3600'\n        self.assertEqual(get_max_age(self.response), 3600)\n\n    # Add more test cases for other functions\n\n    def test_set_response_etag(self):\n        self.response.content = b'content'\n        response = set_response_etag(self.response)\n        self.assertIn('ETag', response)\n\n    # Continue adding more test cases for other functions\n\n    def test_patch_response_headers(self):\n        patch_response_headers(self.response, cache_timeout=60)\n        self.assertIn('Expires', self.response)\n        self.assertIn('Cache-Control', self.response)\n\n    # Continue adding more test cases for other functions\n\n    def test_patch_vary_headers(self):\n        patch_vary_headers(self.response, ['Accept-Language'])\n        self.assertEqual(self.response['Vary'], 'Accept-Language')\n\n    # Continue adding more test cases for other functions\n\n    def test_get_cache_key(self):\n        caches['default'] = Mock()\n        caches['default'].get.return_value = ['HTTP_ACCEPT_LANGUAGE']\n        self.request.META['HTTP_ACCEPT_LANGUAGE'] = 'en-US'\n        cache_key = get_cache_key(self.request)\n        self.assertIsNotNone(cache_key)\n\n    # Continue adding more test cases for other functions\n\n    def test_learn_cache_key(self):\n        caches['default'] = Mock()\n        self.response['Vary'] = 'Accept-Language'\n        self.request.META['HTTP_ACCEPT_LANGUAGE'] = 'en-US'\n        cache_key = learn_cache_key(self.request, self.response)\n        self.assertIsNotNone(cache_key)\n\n# Continue adding more test cases for other functions\n"], "sample_16": ["\nimport unittest\nimport numpy as np\nfrom astropy.units import Quantity\nfrom astropy.units.quantity_helper.function_helpers import (\n    ARRAY_FUNCTION_ENABLED, SUBCLASS_SAFE_FUNCTIONS, FUNCTION_HELPERS,\n    DISPATCHED_FUNCTIONS, UNSUPPORTED_FUNCTIONS, TBD_FUNCTIONS,\n    IGNORED_FUNCTIONS, FunctionAssigner, invariant_a_helper,\n    invariant_m_helper, invariant_x_helper, like_helper, sinc,\n    unwrap, argpartition, full_like, putmask, place, copyto,\n    nan_to_num, _as_quantity, _as_quantities, _quantities2arrays,\n    _iterable_helper, concatenate, block, choose, select, piecewise,\n    append, insert, pad, where, quantile, percentile, count_nonzero,\n    close, array_equal, array_equiv, dot_like, cross_like, einsum,\n    bincount, digitize, histogram, histogram2d, histogramdd, diff,\n    gradient, logspace, geomspace, interp, unique, intersect1d,\n    twosetop, setcheckop, apply_over_axes, array_repr, array_str,\n    array2string, diag, svd, matrix_rank, inv, pinv, det, solve,\n    lstsq, norm, matrix_power, cholesky, qr, eig, structured_to_unstructured,\n    unstructured_to_structured, merge_arrays,\n)\nfrom numpy.testing import assert_array_equal, assert_equal\nfrom astropy.units import Unit, radian, percent, dimensionless_unscaled, dex\n\nclass TestFunctionHelpers(unittest.TestCase):\n\n    def test_invariant_a_helper(self):\n        q = Quantity(np.array([1, 2, 3]), 'm')\n        args, kwargs, unit, out = invariant_a_helper(q)\n        np.testing.assert_array_equal(args[0], np.array([1, 2, 3]))\n        self.assertEqual(unit, 'm')\n\n    def test_invariant_m_helper(self):\n        q = Quantity(np.array([[1, 2], [3, 4]]), 'm')\n        args, kwargs, unit, out = invariant_m_helper(q)\n        np.testing.assert_array_equal(args[0], np.array([[1, 2], [3, 4]]))\n        self.assertEqual(unit, 'm')\n\n    # Add more test cases for other functions...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_899": ["\nimport unittest\nimport numpy as np\nfrom sklearn.datasets import make_friedman1\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.inspection import PartialDependenceDisplay\n\nclass TestPartialDependenceDisplay(unittest.TestCase):\n\n    def setUp(self):\n        self.X, self.y = make_friedman1()\n        self.estimator = GradientBoostingRegressor(n_estimators=10).fit(self.X, self.y)\n        self.features = [(0,), (0, 1)]\n        self.feature_names = [f\"Features #{i}\" for i in range(self.X.shape[1])]\n        self.deciles = {0: np.linspace(0, 1, num=5)}\n        self.pd_results = partial_dependence(\n            self.estimator, self.X, features=self.features, kind=\"average\", grid_resolution=5)\n        self.display = PartialDependenceDisplay(\n            self.pd_results,\n            features=self.features,\n            feature_names=self.feature_names,\n            target_idx=0,\n            deciles=self.deciles,\n            kind=\"average\"\n        )\n\n    def test_attributes(self):\n        self.assertEqual(self.display.pd_results, self.pd_results)\n        self.assertEqual(self.display.features, self.features)\n        self.assertEqual(self.display.feature_names, self.feature_names)\n        self.assertEqual(self.display.target_idx, 0)\n        self.assertEqual(self.display.deciles, self.deciles)\n        self.assertEqual(self.display.kind, \"average\")\n\n    def test_plot_one_way_partial_dependence(self):\n        # This is a basic test, you might want to add more specific checks\n        self.display._plot_one_way_partial_dependence(\n            self.display.kind,\n            self.pd_results[0].individual,\n            self.pd_results[0].average,\n            self.pd_results[0].grid_values[0],\n            self.features[0],\n            10,\n            None,  # ax\n            None,  # n_cols\n            0,     # pd_plot_idx\n            1,     # n_lines\n            {},    # ice_lines_kw\n            {},    # pd_line_kw\n            False, # categorical\n            {},    # bar_kw\n            {},    # pdp_lim\n        )\n\n    def test_plot_two_way_partial_dependence(self):\n        # This is a basic test, you might want to add more specific checks\n        self.display._plot_two_way_partial_dependence(\n            self.pd_results[1].average,\n            self.pd_results[1].grid_values,\n            self.features[1],\n            None,  # ax\n            1,     # pd_plot_idx\n            np.linspace(0, 1, 8),  # Z_level\n            {},    # contour_kw\n            False, # categorical\n            {},    # heatmap_kw\n        )\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_618": ["\nimport unittest\nimport xarray as xr\nimport numpy as np\nfrom xarray.core.computation import _UFuncSignature, apply_ufunc, broadcast_compat_data, collect_dict_values, join_dict_keys, ordered_set_intersection, ordered_set_union, result_name, unified_dim_sizes\n\nclass TestComputationFunctions(unittest.TestCase):\n    def setUp(self):\n        self.data = xr.DataArray(np.random.rand(3, 4), dims=('x', 'y'), coords={'x': np.arange(3), 'y': np.arange(4)})\n\n    def test_UFuncSignature(self):\n        signature = _UFuncSignature([['x'], ['y']], [['z']])\n        self.assertEqual(str(signature), '(x),(y)->(z)')\n\n    def test_result_name(self):\n        self.assertEqual(result_name([self.data, self.data]), 'dim_0')\n\n    def test_join_dict_keys(self):\n        self.assertEqual(list(join_dict_keys([{'a': 1, 'b': 2}, {'b': 3, 'c': 4}])), ['b'])\n\n    def test_collect_dict_values(self):\n        self.assertEqual(collect_dict_values([{'a': 1, 'b': 2}, {'b': 3, 'c': 4}], ['b']), [[2, 3]])\n\n    def test_ordered_set_union(self):\n        self.assertEqual(list(ordered_set_union([{'a', 'b'}, {'b', 'c'}])), ['a', 'b', 'c'])\n\n    def test_ordered_set_intersection(self):\n        self.assertEqual(list(ordered_set_intersection([{'a', 'b'}, {'b', 'c'}])), ['b'])\n\n    def test_unified_dim_sizes(self):\n        self.assertEqual(unified_dim_sizes([self.data.variable], exclude_dims={'x'}), {'y': 4})\n\n    def test_broadcast_compat_data(self):\n        self.assertEqual(broadcast_compat_data(self.data.variable, ('x',), ('y',)).shape, (3, 4))\n\n    def test_apply_ufunc(self):\n        result = apply_ufunc(np.mean, self.data, input_core_dims=[['x']], output_core_dims=[['y']])\n        self.assertEqual(result.dims, ('y',))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_993": ["\nimport unittest\nfrom sympy import symbols, sin, cos, Matrix, pi, SparseMatrix, Piecewise, Eq, And, Or, Not\nfrom sympy.printing.pycode import (PythonCodePrinter, MpmathPrinter, NumPyPrinter, SciPyPrinter, pycode)\n\nclass TestSymPyPrintingPycode(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_PythonCodePrinter(self):\n        printer = PythonCodePrinter()\n        self.assertEqual(printer.doprint(sin(self.x)), \"sin(x)\")\n        self.assertEqual(printer.doprint(Matrix([[1, 2], [3, 4]])), \"Matrix([[1, 2], [3, 4]])\")\n\n    def test_MpmathPrinter(self):\n        printer = MpmathPrinter()\n        self.assertEqual(printer.doprint(sin(self.x)), \"mpmath.sin(x)\")\n\n    def test_NumPyPrinter(self):\n        printer = NumPyPrinter()\n        self.assertEqual(printer.doprint(sin(self.x)), \"numpy.sin(x)\")\n        self.assertEqual(printer.doprint(Matrix([[1, 2], [3, 4]])), \"numpy.array([[1, 2], [3, 4]])\")\n        self.assertEqual(printer.doprint(SparseMatrix(3, 3, {(0, 0): 1, (1, 1): 2})), \"scipy.sparse.coo_matrix([1, 2], ([0, 1], [0, 1]), shape=(3, 3))\")\n\n    def test_SciPyPrinter(self):\n        printer = SciPyPrinter()\n        self.assertEqual(printer.doprint(sin(self.x)), \"numpy.sin(x)\")\n        self.assertEqual(printer.doprint(Matrix([[1, 2], [3, 4]])), \"numpy.array([[1, 2], [3, 4]])\")\n        self.assertEqual(printer.doprint(SparseMatrix(3, 3, {(0, 0): 1, (1, 1): 2})), \"scipy.sparse.coo_matrix([1, 2], ([0, 1], [0, 1]), shape=(3, 3))\")\n\n    def test_pycode(self):\n        self.assertEqual(pycode(sin(self.x)), \"sin(x)\")\n\n    def test_Piecewise(self):\n        expr = Piecewise((0, self.x < 0), (1, self.x >= 0))\n        printer = NumPyPrinter()\n        self.assertEqual(printer.doprint(expr), \"numpy.select([numpy.less(x, 0), numpy.greater_equal(x, 0)], [0, 1], default=numpy.nan)\")\n\n    def test_LogicalOperators(self):\n        expr = And(self.x > 0, self.x < 1)\n        printer = NumPyPrinter()\n        self.assertEqual(printer.doprint(expr), \"numpy.logical_and(numpy.greater(x, 0), numpy.less(x, 1))\")\n\n        expr = Or(self.x < 0, self.x > 1)\n        printer = NumPyPrinter()\n        self.assertEqual(printer.doprint(expr), \"numpy.logical_or(numpy.less(x, 0), numpy.greater(x, 1))\")\n\n        expr = Not(self.x == 0)\n        printer = NumPyPrinter()\n        self.assertEqual(printer.doprint(expr), \"numpy.logical_not(numpy.equal(x, 0))\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_541": ["\nimport matplotlib.widgets as widgets\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\nfrom matplotlib.testing.widgets import (click_and_drag, do_event, get_ax, mock_event, noop)\nimport numpy as np\nfrom numpy.testing import assert_allclose\nimport pytest\n\n@pytest.fixture\ndef fig():\n    return plt.figure()\n\n@pytest.fixture\ndef ax(fig):\n    return fig.add_subplot(111)\n\ndef test_button(ax):\n    button = widgets.Button(ax, 'Click me')\n    assert button.label.get_text() == 'Click me'\n    callback = mock_event(button, 'button_press_event')\n    button.on_clicked(callback)\n    button.hovercolor = 'green'\n    do_event(button, 'motion_notify_event', button=1, x=0.5, y=0.5)\n    assert ax.get_facecolor() == 'green'\n    button.color = 'red'\n    do_event(button, 'motion_notify_event', button=1, x=0.5, y=0.5)\n    assert ax.get_facecolor() == 'red'\n    do_event(button, 'button_press_event', button=1, x=0.5, y=0.5)\n    assert callback.called\n\ndef test_textbox(fig):\n    ax = fig.add_axes([0.1, 0.5, 0.8, 0.4])\n    textbox = widgets.TextBox(ax, 'Initial text')\n    assert textbox.text == 'Initial text'\n    callback = mock_event(textbox, 'submit')\n    textbox.on_submit(callback)\n    textbox.set_val('New text')\n    assert textbox.text == 'New text'\n    assert callback.called\n    textbox.disconnect(callback.cid)\n    textbox.set_val('Different text')\n    assert not callback.called\n\ndef test_radiobuttons(ax):\n    labels = ['Option 1', 'Option 2', 'Option 3']\n    radiobuttons = widgets.RadioButtons(ax, labels)\n    assert radiobuttons.labels[0].get_text() == 'Option 1'\n    callback = mock_event(radiobuttons, 'clicked')\n    radiobuttons.on_clicked(callback)\n    radiobuttons.set_active(1)\n    assert radiobuttons.value_selected == 'Option 2'\n    assert callback.called\n    radiobuttons.disconnect(callback.cid)\n    radiobuttons.set_active(2)\n    assert not callback.called\n\ndef test_subplottool(fig):\n    toolfig = plt.figure()\n    subplottool = widgets.SubplotTool(fig, toolfig)\n    assert len(subplottool.sliderleft.ax.lines) == 1\n    assert subplottool.sliderleft.val == fig.subplotpars.left\n    subplottool.sliderleft.set_val(0.2)\n    assert fig.subplotpars.left == 0.2\n    subplottool._on_reset(mock_event(subplottool.buttonreset, 'button_press_event'))\n    assert fig.subplotpars.left == 0.125\n\ndef test_cursor(ax):\n    cursor = widgets.Cursor(ax)\n    assert cursor.lineh.get_visible() is False\n    assert cursor.linev.get_visible() is False\n    do_event(cursor, 'motion_notify_event', button=1, x=0.5, y=0.5)\n    assert cursor.lineh.get_visible() is True\n    assert cursor.linev.get_visible() is True\n    assert cursor.lineh.get_ydata()[0] == 0.5\n    assert cursor.linev.get_xdata()[0] == 0.5\n\ndef test_multicursor(fig):\n    axes = [fig.add_sub"], "sample_330": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.backends.utils import CursorWrapper, CursorDebugWrapper, typecast_date, typecast_time, typecast_timestamp, split_identifier, truncate_name, names_digest, format_number, strip_quotes\n\nclass TestUtils(unittest.TestCase):\n    def setUp(self):\n        self.cursor = Mock()\n        self.db = Mock()\n        self.wrapper = CursorWrapper(self.cursor, self.db)\n        self.debug_wrapper = CursorDebugWrapper(self.cursor, self.db)\n\n    def test_cursor_wrapper_init(self):\n        self.assertEqual(self.wrapper.cursor, self.cursor)\n        self.assertEqual(self.wrapper.db, self.db)\n\n    def test_cursor_wrapper_getattr(self):\n        self.cursor.fetchone = Mock()\n        self.assertEqual(self.wrapper.fetchone, self.db.wrap_database_errors(self.cursor.fetchone))\n\n    def test_cursor_wrapper_execute(self):\n        self.wrapper.execute('SELECT * FROM test')\n        self.cursor.execute.assert_called_with('SELECT * FROM test')\n\n    def test_cursor_debug_wrapper_execute(self):\n        self.debug_wrapper.execute('SELECT * FROM test')\n        self.cursor.execute.assert_called_with('SELECT * FROM test')\n\n    def test_typecast_date(self):\n        self.assertEqual(typecast_date('2022-01-01'), datetime.date(2022, 1, 1))\n\n    def test_typecast_time(self):\n        self.assertEqual(typecast_time('12:00:00'), datetime.time(12, 0, 0))\n\n    def test_typecast_timestamp(self):\n        self.assertEqual(typecast_timestamp('2022-01-01 12:00:00'), datetime.datetime(2022, 1, 1, 12, 0, 0))\n\n    def test_split_identifier(self):\n        self.assertEqual(split_identifier('\"USER\".\"TABLE\"'), ('USER', 'TABLE'))\n\n    def test_truncate_name(self):\n        self.assertEqual(truncate_name('LONG_NAME', length=5), 'LONG_614d')\n\n    def test_names_digest(self):\n        self.assertEqual(names_digest('test', length=4), '098f')\n\n    def test_format_number(self):\n        self.assertEqual(format_number(123.456, max_digits=5, decimal_places=2), '123.46')\n\n    def test_strip_quotes(self):\n        self.assertEqual(strip_quotes('\"USER\".\"TABLE\"'), 'USER\".\"TABLE')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_481": ["\nimport unittest\nfrom django.template.defaultfilters import *\nfrom django.utils.safestring import SafeData, mark_safe\n\nclass TestDefaultFilters(unittest.TestCase):\n    def test_addslashes(self):\n        self.assertEqual(addslashes('Hello, World!'), 'Hello\\\\, World\\\\!')\n\n    def test_capfirst(self):\n        self.assertEqual(capfirst('hello'), 'Hello')\n\n    def test_escapejs_filter(self):\n        self.assertEqual(escapejs_filter('<script>alert(\"Hello\");</script>'), '\\\\u003Cscript\\\\u003Ealert(\\\\u0022Hello\\\\u0022);\\\\u003C/script\\\\u003E')\n\n    def test_json_script(self):\n        self.assertEqual(json_script({\"key\": \"value\"}), '<script type=\"application/json\">{\"key\": \"value\"}</script>')\n\n    def test_floatformat(self):\n        self.assertEqual(floatformat(12345.6789, 2), '12,345.68')\n\n    def test_iriencode(self):\n        self.assertEqual(iriencode('http://example.com/test?q=\u00e1'), 'http://example.com/test?q=%C3%A1')\n\n    # Add more tests for the remaining functions...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_499": ["\nimport unittest\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.legend as mlegend\n\nclass TestLegend(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.line, = self.ax.plot([1, 2, 3], [1, 2, 3], label=\"Test line\")\n\n    def test_legend_creation(self):\n        legend = self.ax.legend()\n        self.assertIsInstance(legend, mlegend.Legend)\n        self.assertEqual(legend.get_texts()[0].get_text(), \"Test line\")\n\n    def test_legend_position(self):\n        legend = self.ax.legend(loc=\"upper left\")\n        bbox = legend.get_bbox_to_anchor()\n        self.assertEqual(bbox.x0, 0)\n        self.assertEqual(bbox.y0, 1)\n\n    def test_legend_title(self):\n        legend = self.ax.legend(title=\"Test title\")\n        self.assertEqual(legend.get_title().get_text(), \"Test title\")\n\n    def test_legend_frame(self):\n        legend = self.ax.legend(frameon=False)\n        self.assertFalse(legend.get_frame_on())\n\n    def test_legend_labels(self):\n        legend = self.ax.legend(labels=[\"Custom label\"])\n        self.assertEqual(legend.get_texts()[0].get_text(), \"Custom label\")\n\n    def test_legend_handles(self):\n        legend = self.ax.legend(handles=[self.line], labels=[\"Custom line\"])\n        self.assertEqual(legend.get_texts()[0].get_text(), \"Custom line\")\n\n    def test_legend_draggable(self):\n        legend = self.ax.legend()\n        draggable = legend.set_draggable(state=True)\n        self.assertIsInstance(draggable, mlegend.DraggableLegend)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_858": ["\nimport unittest\nimport numpy as np\nfrom sklearn.ensemble import VotingClassifier, VotingRegressor\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\n\nclass TestVotingClassifier(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n        self.y = np.array([1, 1, 1, 2, 2, 2])\n        self.clf1 = LogisticRegression(multi_class='multinomial', random_state=1)\n        self.clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n        self.clf3 = GaussianNB()\n\n    def test_hard_voting(self):\n        eclf = VotingClassifier(estimators=[('lr', self.clf1), ('rf', self.clf2), ('gnb', self.clf3)], voting='hard')\n        eclf.fit(self.X, self.y)\n        self.assertEqual(list(eclf.predict(self.X)), [1, 1, 1, 2, 2, 2])\n\n    def test_soft_voting(self):\n        eclf = VotingClassifier(estimators=[('lr', self.clf1), ('rf', self.clf2), ('gnb', self.clf3)], voting='soft')\n        eclf.fit(self.X, self.y)\n        self.assertEqual(list(eclf.predict(self.X)), [1, 1, 1, 2, 2, 2])\n\n    def test_soft_voting_with_weights(self):\n        eclf = VotingClassifier(estimators=[('lr', self.clf1), ('rf', self.clf2), ('gnb', self.clf3)], voting='soft', weights=[2, 1, 1])\n        eclf.fit(self.X, self.y)\n        self.assertEqual(list(eclf.predict(self.X)), [1, 1, 1, 2, 2, 2])\n\n    def test_transform_soft_voting(self):\n        eclf = VotingClassifier(estimators=[('lr', self.clf1), ('rf', self.clf2), ('gnb', self.clf3)], voting='soft', flatten_transform=True)\n        eclf.fit(self.X, self.y)\n        self.assertEqual(eclf.transform(self.X).shape, (6, 6))\n\nclass TestVotingRegressor(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36]])\n        self.y = np.array([2, 6, 12, 20, 30, 42])\n        self.reg1 = LinearRegression()\n        self.reg2 = RandomForestRegressor(n_estimators=10, random_state=1)\n\n    def test_voting_regressor(self):\n        vreg = VotingRegressor([('lr', self.reg1), ('rf', self.reg2)])\n        vreg.fit(self.X, self.y)\n        self.assertEqual(list(vreg.predict(self.X)), [3.3, 5.7, 11.8, 19.7, 28.0, 40.3])\n\n    def test_transform_voting_regressor(self):\n        vreg = VotingRegressor([('lr', self.reg1), ('rf', self.reg2)])\n        vreg.fit(self.X, self.y)\n        self.assertEqual(vreg.transform(self.X).shape, (2, 6))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1121": ["\nimport unittest\nfrom sympy import symbols, S, Mul, Add, Pow, sympify, Basic, Dummy, Rational, Fraction, Order, powsimp, Order, expand_mul, expand_power_base, expand_power_exp, expand_log, expand_func, expand_trig, expand_complex, I, nan\nfrom sympy.core.mul import _unevaluated_Mul, _mulsort, _addsort, _unevaluated_Add, prod, _keep_coeff, expand_2arg\n\nclass TestMul(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n\n    def test_init(self):\n        self.assertEqual(Mul(2, 3, 4).args, (2, 3, 4))\n\n    def test_eval(self):\n        self.assertEqual(Mul(2, 3, 4).doit(), 24)\n\n    def test_eval_power(self):\n        self.assertEqual((2*self.x**3).doit(), 2*self.x**3)\n        self.assertEqual((2*self.x**Fraction(1, 2)).doit(), 2*self.x**Fraction(1, 2))\n\n    def test_eval_nseries(self):\n        self.assertEqual((2*self.x)._eval_nseries(self.x, 2, logx=None), 2*self.x + Order(self.x**2))\n\n    def test_eval_as_leading_term(self):\n        self.assertEqual((2*self.x)._eval_as_leading_term(self.x), 2*self.x)\n\n    def test_eval_conjugate(self):\n        self.assertEqual((2*self.x)._eval_conjugate(), 2*self.x)\n\n    def test_eval_transpose(self):\n        self.assertEqual((2*self.x)._eval_transpose(), 2*self.x)\n\n    def test_eval_adjoint(self):\n        self.assertEqual((2*self.x)._eval_adjoint(), 2*self.x)\n\n    def test_as_content_primitive(self):\n        self.assertEqual((-3*self.x*(2 - 2*self.x)).as_content_primitive(), (6, -self.x*(1 - self.x)))\n\n    def test_as_ordered_factors(self):\n        self.assertEqual((2*self.x*self.y*sin(self.x)*cos(self.x)).as_ordered_factors(), [2, self.x, self.y, sin(self.x), cos(self.x)])\n\n    def test_unevaluated_mul(self):\n        self.assertEqual(_unevaluated_Mul(2, self.x, 3).args, (6, self.x))\n\n    def test_mulsort(self):\n        args = [self.x, self.y, self.z]\n        _mulsort(args)\n        self.assertEqual(args, [self.x, self.y, self.z])\n\n    def test_unevaluated_add(self):\n        self.assertEqual(_unevaluated_Add(2*self.x, 3*self.x).args, (5*self.x,))\n\n    def test_prod(self):\n        self.assertEqual(prod([2, 3, 4]), 24)\n        self.assertEqual(prod([2, 3, 4], start=5), 120)\n\n    def test_keep_coeff(self):\n        self.assertEqual(_keep_coeff(S.Half, self.x + 2), (self.x + 2)/2)\n        self.assertEqual(_keep_coeff(S.Half, self.x + 2, clear=False), self.x/2 + 1)\n        self.assertEqual(_keep_coeff(S.Half, (self.x + 2)*self.y, clear=False), self.y*(self.x + 2)/2)\n        self.assertEqual(_keep_coeff(S(-1), self.x + self.y), -self.x - self.y)\n        self.assertEqual(_keep_coeff(S(-1), self.x + self.y, sign=True), -(self.x + self.y))\n\n    def test_expand_2arg(self):\n        self.assertEqual(expand_2arg(2*(self.x + 2)), 2*self.x + 4)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_406": ["\nfrom django.db import models\nfrom django.db.models.query import QuerySet\nfrom django.db.models.manager import BaseManager, Manager, ManagerDescriptor, EmptyManager\nfrom django.test import SimpleTestCase\n\nclass TestBaseManager(SimpleTestCase):\n    def setUp(self):\n        class TestModel(models.Model):\n            objects = Manager()\n            class Meta:\n                app_label = 'test'\n        self.TestModel = TestModel\n\n    def test_init(self):\n        manager = BaseManager()\n        self.assertEqual(manager.model, None)\n        self.assertEqual(manager.name, None)\n        self.assertEqual(manager._db, None)\n        self.assertEqual(manager._hints, {})\n\n    def test_str(self):\n        manager = self.TestModel.objects\n        self.assertEqual(str(manager), 'test.TestModel.objects')\n\n    def test_deconstruct(self):\n        manager = self.TestModel.objects\n        self.assertEqual(\n            manager.deconstruct(),\n            (False, 'django.db.models.manager.Manager', None, (), {})\n        )\n\n    def test_contribute_to_class(self):\n        manager = BaseManager()\n        manager.contribute_to_class(self.TestModel, 'test_manager')\n        self.assertEqual(manager.model, self.TestModel)\n        self.assertEqual(manager.name, 'test_manager')\n\n    def test_db_manager(self):\n        manager = self.TestModel.objects.db_manager(using='test_db')\n        self.assertEqual(manager._db, 'test_db')\n\n    def test_get_queryset(self):\n        manager = self.TestModel.objects\n        self.assertIsInstance(manager.get_queryset(), QuerySet)\n\n    def test_all(self):\n        manager = self.TestModel.objects\n        self.assertIsInstance(manager.all(), QuerySet)\n\n    def test_eq(self):\n        manager1 = self.TestModel.objects\n        manager2 = self.TestModel.objects\n        self.assertEqual(manager1, manager2)\n\n    def test_hash(self):\n        manager1 = self.TestModel.objects\n        manager2 = self.TestModel.objects\n        self.assertEqual(hash(manager1), hash(manager2))\n\nclass TestManager(SimpleTestCase):\n    def test_inheritance(self):\n        self.assertTrue(issubclass(Manager, BaseManager))\n\nclass TestManagerDescriptor(SimpleTestCase):\n    def setUp(self):\n        class TestModel(models.Model):\n            objects = Manager()\n            class Meta:\n                app_label = 'test'\n        self.TestModel = TestModel\n\n    def test_get(self):\n        descriptor = ManagerDescriptor(self.TestModel.objects)\n        self.assertEqual(descriptor.__get__(None, self.TestModel), self.TestModel.objects)\n\nclass TestEmptyManager(SimpleTestCase):\n    def setUp(self):\n        class TestModel(models.Model):\n            objects = EmptyManager()\n            class Meta:\n                app_label = 'test'\n        self.TestModel = TestModel\n\n    def test_get_queryset(self):\n        manager = self.TestModel.objects\n        self.assertIsInstance(manager.get_queryset(), QuerySet)\n        self.assertEqual(len(manager.get_queryset()), 0)\n"], "sample_1196": ["\nimport unittest\nfrom sympy import Symbol, Integer, S\nfrom sympy.sets import S as SetSymbols\nfrom sympy.sets.contains import Contains\n\nclass TestContains(unittest.TestCase):\n    def setUp(self):\n        self.i = Symbol('i', integer=True)\n\n    def test_contains_integer_in_integers(self):\n        self.assertEqual(Contains(Integer(2), SetSymbols.Integers), S.true)\n\n    def test_contains_integer_not_in_naturals(self):\n        self.assertEqual(Contains(Integer(-2), SetSymbols.Naturals), S.false)\n\n    def test_contains_symbol_in_naturals(self):\n        self.assertEqual(Contains(self.i, SetSymbols.Naturals), Contains(self.i, SetSymbols.Naturals))\n\n    def test_contains_invalid_type(self):\n        with self.assertRaises(TypeError):\n            Contains(Integer(2), 'Integers')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_95": ["\nfrom decimal import Decimal\nfrom django.core.exceptions import FieldError\nfrom django.db import connection\nfrom django.db.models import (\n    Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField, Max, Min, Sum, Value,\n)\nfrom django.db.models.expressions import Case, Exists, OuterRef, Subquery, When\nfrom django.test import TestCase\nfrom django.test.testcases import skipUnlessDBFeature\nfrom django.test.utils import Approximate, CaptureQueriesContext\nfrom django.utils import timezone\nfrom .models import Author, Book, Publisher, Store\n\nclass ExpressionTests(TestCase):\n    def setUp(self):\n        self.author1 = Author.objects.create(name='Author 1')\n        self.author2 = Author.objects.create(name='Author 2')\n        self.book1 = Book.objects.create(title='Book 1', author=self.author1, price=10.5)\n        self.book2 = Book.objects.create(title='Book 2', author=self.author2, price=20.0)\n\n    def test_value_expression(self):\n        value_expr = Value(10)\n        self.assertEqual(value_expr.as_sql(None, connection)[0], '%s')\n        self.assertEqual(value_expr.as_sql(None, connection)[1], [10])\n\n    def test_f_expression(self):\n        f_expr = F('price')\n        self.assertEqual(str(f_expr), \"F(price)\")\n\n    def test_func_expression(self):\n        func_expr = Func(F('price'), 2, function='POW')\n        self.assertEqual(str(func_expr), \"Func(price, 2, function='POW')\")\n\n    def test_case_expression(self):\n        case_expr = Case(When(price__lt=15, then=Value('cheap')), default=Value('expensive'))\n        self.assertEqual(str(case_expr), \"CASE WHEN price < 15 THEN 'cheap', ELSE 'expensive'\")\n\n    def test_subquery_expression(self):\n        subquery_expr = Subquery(Book.objects.filter(author=OuterRef('pk')).values('price'))\n        self.assertEqual(str(subquery_expr), \"(%(subquery)s)\")\n\n    def test_exists_expression(self):\n        exists_expr = Exists(Book.objects.filter(author=OuterRef('pk')))\n        self.assertEqual(str(exists_expr), \"EXISTS(%(subquery)s)\")\n\n    def test_combinable_expression(self):\n        combinable_expr = F('price') + 5\n        self.assertEqual(str(combinable_expr), \"price + %s\")\n\n    def test_sqlite_numeric_mixin(self):\n        numeric_mixin_expr = Func(F('price'), function='RANDOM', output_field=DecimalField())\n        self.assertEqual(numeric_mixin_expr.as_sqlite(None, connection)[0], 'CAST(%s AS NUMERIC)')\n\n    def test_expression_list(self):\n        expr_list = ExpressionList(F('price'), F('title'))\n        self.assertEqual(str(expr_list), \"price, title\")\n"], "sample_809": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.pipeline import Pipeline, FeatureUnion, make_pipeline, make_union\nimport numpy as np\nfrom scipy import sparse\n\nclass DummyTransformer(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        return X * 2\n\nclass DummyEstimator(BaseEstimator):\n    def fit(self, X, y=None):\n        return self\n\nclass TestPipeline(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4]])\n        self.y = np.array([0, 1])\n        self.transformer = DummyTransformer()\n        self.estimator = DummyEstimator()\n\n    def test_pipeline_init(self):\n        pipeline = Pipeline(steps=[('transformer', self.transformer), ('estimator', self.estimator)])\n        self.assertEqual(len(pipeline.steps), 2)\n\n    def test_pipeline_fit(self):\n        pipeline = Pipeline(steps=[('transformer', self.transformer), ('estimator', self.estimator)])\n        pipeline.fit(self.X, self.y)\n        self.assertEqual(pipeline.named_steps['transformer'], self.transformer)\n        self.assertEqual(pipeline.named_steps['estimator'], self.estimator)\n\n    def test_pipeline_fit_transform(self):\n        pipeline = Pipeline(steps=[('transformer', self.transformer), ('estimator', self.estimator)])\n        Xt = pipeline.fit_transform(self.X, self.y)\n        np.testing.assert_array_equal(Xt, self.X * 2)\n\n    def test_pipeline_predict(self):\n        self.estimator.predict = Mock(return_value=self.y)\n        pipeline = Pipeline(steps=[('transformer', self.transformer), ('estimator', self.estimator)])\n        pipeline.fit(self.X, self.y)\n        y_pred = pipeline.predict(self.X)\n        np.testing.assert_array_equal(y_pred, self.y)\n        self.estimator.predict.assert_called_once()\n\n    def test_make_pipeline(self):\n        pipeline = make_pipeline(self.transformer, self.estimator)\n        self.assertEqual(len(pipeline.steps), 2)\n        self.assertEqual(pipeline.named_steps['dummytransformer'], self.transformer)\n        self.assertEqual(pipeline.named_steps['dummyestimator'], self.estimator)\n\nclass TestFeatureUnion(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4]])\n        self.y = np.array([0, 1])\n        self.transformer1 = DummyTransformer()\n        self.transformer2 = DummyTransformer()\n\n    def test_feature_union_init(self):\n        feature_union = FeatureUnion(transformer_list=[('transformer1', self.transformer1), ('transformer2', self.transformer2)])\n        self.assertEqual(len(feature_union.transformer_list), 2)\n\n    def test_feature_union_fit_transform(self):\n        feature_union = FeatureUnion(transformer_list=[('transformer1', self.transformer1), ('transformer2', self.transformer2)])\n        Xt = feature_union.fit_transform(self.X, self.y)\n        np.testing.assert_array_equal(Xt, np.hstack([self.X * 2, self.X * 2]))\n\n    def test_make_union(self):\n        feature_union = make_union(self.transformer1, self.transformer2)\n        self.assertEqual(len(feature_union.transformer_list), 2)\n        self.assertEqual(feature_union.named_steps['dummytransformer-1'], self.transformer1)\n        self.assertEqual(feature_union.named_steps['dummytransformer-2'], self.transformer2)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_433": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.db.migrations.migration import Migration, SwappableTuple, swappable_dependency\nfrom django.db.migrations.state import ProjectState\nfrom django.db.migrations.exceptions import IrreversibleError\n\nclass TestMigration(unittest.TestCase):\n    def setUp(self):\n        self.migration = Migration('test_migration', 'test_app')\n\n    def test_init(self):\n        self.assertEqual(self.migration.name, 'test_migration')\n        self.assertEqual(self.migration.app_label, 'test_app')\n\n    def test_eq(self):\n        same_migration = Migration('test_migration', 'test_app')\n        diff_migration = Migration('diff_migration', 'test_app')\n        self.assertEqual(self.migration, same_migration)\n        self.assertNotEqual(self.migration, diff_migration)\n\n    def test_repr(self):\n        self.assertEqual(repr(self.migration), '<Migration test_app.test_migration>')\n\n    def test_str(self):\n        self.assertEqual(str(self.migration), 'test_app.test_migration')\n\n    def test_hash(self):\n        self.assertEqual(hash(self.migration), hash('test_app.test_migration'))\n\n    def test_mutate_state(self):\n        operation = MagicMock()\n        self.migration.operations = [operation]\n        project_state = ProjectState()\n        new_state = self.migration.mutate_state(project_state)\n        operation.state_forwards.assert_called_once_with('test_app', new_state)\n\n    def test_apply(self):\n        operation = MagicMock()\n        self.migration.operations = [operation]\n        project_state = ProjectState()\n        schema_editor = MagicMock()\n        self.migration.apply(project_state, schema_editor)\n        operation.database_forwards.assert_called_once()\n\n    def test_unapply(self):\n        operation = MagicMock()\n        operation.reversible = True\n        self.migration.operations = [operation]\n        project_state = ProjectState()\n        schema_editor = MagicMock()\n        self.migration.unapply(project_state, schema_editor)\n        operation.database_backwards.assert_called_once()\n\n    def test_unapply_irreversible_error(self):\n        operation = MagicMock()\n        operation.reversible = False\n        self.migration.operations = [operation]\n        project_state = ProjectState()\n        schema_editor = MagicMock()\n        with self.assertRaises(IrreversibleError):\n            self.migration.unapply(project_state, schema_editor)\n\n    def test_suggest_name_initial(self):\n        self.migration.initial = True\n        self.assertEqual(self.migration.suggest_name(), 'initial')\n\n    def test_suggest_name_auto(self):\n        operation = MagicMock()\n        operation.migration_name_fragment = None\n        self.migration.operations = [operation]\n        with patch('django.db.migrations.migration.get_migration_name_timestamp', return_value='timestamp'):\n            self.assertEqual(self.migration.suggest_name(), 'auto_timestamp')\n\n    def test_suggest_name(self):\n        operation1 = MagicMock()\n        operation1.migration_name_fragment = 'create_model'\n        operation2 = MagicMock()\n        operation2.migration_name_fragment = 'rename_model'\n        self.migration.operations = [operation1, operation2]\n        self.assertEqual(self.migration.suggest_name(), 'create_model_rename_model')\n\nclass TestSwappableTuple(unittest.TestCase):\n    def test_swappable_tuple(self):\n        swappable = SwappableTuple(('test_app', 'Model'), 'test_app.User')\n        self.assertEqual(swappable.setting, 'test_app.User')\n        self.assertEqual(swappable, ('test_app', 'Model'))\n\nclass TestSwappableDependency(unittest.TestCase):\n    def test_swappable_dependency(self):\n        dependency = swappable_dependency('test_app.User')\n        self.assertEqual(dependency, SwappableTuple(('test_app', '__first__'), 'test_app.User'))\n"], "sample_81": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.template import Library, TemplateSyntaxError, Template\nfrom django.template.library import SimpleNode, InclusionNode, parse_bits, import_library\n\nclass TestLibrary(unittest.TestCase):\n    def setUp(self):\n        self.library = Library()\n\n    def test_tag(self):\n        @self.library.tag\n        def test_tag(parser, token):\n            return ''\n        self.assertIn('test_tag', self.library.tags)\n\n    def test_filter(self):\n        @self.library.filter\n        def test_filter(value):\n            return value\n        self.assertIn('test_filter', self.library.filters)\n\n    def test_simple_tag(self):\n        @self.library.simple_tag\n        def test_simple_tag():\n            return 'world'\n        self.assertIn('test_simple_tag', self.library.tags)\n        self.assertEqual(self.library.tags['test_simple_tag'](Mock(), Mock()).render(Mock()), 'world')\n\n    def test_inclusion_tag(self):\n        @self.library.inclusion_tag('test_template.html')\n        def test_inclusion_tag(poll):\n            return {'poll': poll}\n        self.assertIn('test_inclusion_tag', self.library.tags)\n        inclusion_node = self.library.tags['test_inclusion_tag'](Mock(), Mock())\n        inclusion_node.render = Mock(return_value='rendered')\n        self.assertEqual(inclusion_node.render(Mock()), 'rendered')\n\n    def test_parse_bits(self):\n        def test_func(arg1, arg2=None):\n            pass\n        args, kwargs = parse_bits(Mock(), ['value1', 'arg2=value2'],\n                                  ['arg1', 'arg2'], None, None, None, [], {}, False, 'test_func')\n        self.assertEqual(args[0].resolve(Mock()), 'value1')\n        self.assertEqual(kwargs['arg2'].resolve(Mock()), 'value2')\n\n    @patch('django.template.library.import_module')\n    def test_import_library(self, mock_import_module):\n        mock_import_module.return_value = Mock(register=Mock())\n        self.assertIsNotNone(import_library('test_module'))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_43": ["\nimport unittest\nimport numpy as np\nfrom astropy.stats import bayesian_blocks, Events, RegularEvents, PointMeasures\n\nclass TestBayesianBlocks(unittest.TestCase):\n\n    def setUp(self):\n        np.random.seed(0)\n        self.t = np.random.normal(size=100)\n        self.x = np.random.normal(size=100)\n        self.sigma = 0.1\n        self.dt = 0.05\n\n    def test_events(self):\n        edges = bayesian_blocks(self.t, fitness='events', p0=0.01)\n        self.assertTrue(len(edges) > 1)\n        self.assertEqual(edges[0], self.t.min())\n        self.assertEqual(edges[-1], self.t.max())\n\n    def test_regular_events(self):\n        x = np.zeros(len(self.t))\n        x[np.random.randint(0, len(self.t), len(self.t) // 10)] = 1\n        edges = bayesian_blocks(self.t, x, fitness='regular_events', dt=self.dt)\n        self.assertTrue(len(edges) > 1)\n        self.assertEqual(edges[0], self.t.min())\n        self.assertEqual(edges[-1], self.t.max())\n\n    def test_measures(self):\n        x_obs = np.random.normal(self.x, self.sigma)\n        edges = bayesian_blocks(self.t, x_obs, self.sigma, fitness='measures')\n        self.assertTrue(len(edges) > 1)\n        self.assertEqual(edges[0], self.t.min())\n        self.assertEqual(edges[-1], self.t.max())\n\n    def test_custom_fitness(self):\n        class CustomFitness(Events):\n            def fitness(self, N_k, T_k):\n                return N_k * np.log(N_k)\n\n        edges = bayesian_blocks(self.t, fitness=CustomFitness, p0=0.01)\n        self.assertTrue(len(edges) > 1)\n        self.assertEqual(edges[0], self.t.min())\n        self.assertEqual(edges[-1], self.t.max())\n\n    def test_invalid_fitness(self):\n        with self.assertRaises(ValueError):\n            bayesian_blocks(self.t, fitness='invalid')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_865": ["\nimport unittest\nfrom sklearn.datasets import load_iris\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV, ParameterSampler, ParameterGrid\nfrom scipy.stats import uniform\n\nclass TestSearch(unittest.TestCase):\n    def setUp(self):\n        self.iris = load_iris()\n        self.svc = SVC()\n        self.parameters = {'kernel': ('linear', 'rbf'), 'C': [1, 10]}\n        self.distributions = dict(C=uniform(loc=0, scale=4), penalty=['l2', 'l1'])\n\n    def test_grid_search_cv(self):\n        clf = GridSearchCV(self.svc, self.parameters)\n        clf.fit(self.iris.data, self.iris.target)\n        self.assertIn(clf.best_params_['kernel'], ['linear', 'rbf'])\n        self.assertIn(clf.best_params_['C'], [1, 10])\n\n    def test_randomized_search_cv(self):\n        clf = RandomizedSearchCV(self.svc, self.distributions, random_state=0)\n        clf.fit(self.iris.data, self.iris.target)\n        self.assertIn(clf.best_params_['penalty'], ['l2', 'l1'])\n\n    def test_parameter_grid(self):\n        grid = ParameterGrid(self.parameters)\n        self.assertEqual(len(list(grid)), 4)\n\n    def test_parameter_sampler(self):\n        sampler = ParameterSampler(self.distributions, n_iter=10, random_state=0)\n        self.assertEqual(len(list(sampler)), 10)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_709": ["\nimport pytest\nimport warnings\nimport os\nfrom pathlib import Path\nfrom _pytest import nodes\nfrom _pytest.warning_types import PytestWarning\nfrom _pytest.config import Config\nfrom _pytest.mark.structures import Mark\nfrom _pytest.compat import LEGACY_PATH\nfrom _pytest._code.code import ExceptionInfo\nfrom _pytest.compat import cached_property\nfrom _pytest.config import ConftestImportFailure\nfrom _pytest.fixtures import FixtureLookupError\nfrom _pytest.outcomes import fail\n\n# Mock objects\nconfig = Config()\nsession = type('Session', (), {'gethookproxy': lambda self, fspath: None, 'isinitpath': lambda self, path: None})()\n\ndef test_iterparentnodeids():\n    nodeid = \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n    expected_output = [\"\", \"testing\", \"testing/code\", \"testing/code/test_excinfo.py\", \"testing/code/test_excinfo.py::TestFormattedExcinfo\", \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"]\n    assert list(nodes.iterparentnodeids(nodeid)) == expected_output\n\ndef test_imply_path():\n    path = Path(\"/path/to/file\")\n    fspath = LEGACY_PATH(\"/path/to/file\")\n    assert nodes._imply_path(nodes.Node, path, fspath) == path\n\ndef test_node_init():\n    node = nodes.Node(\"name\", parent=None, config=config, session=session, path=Path(\"/path/to/file\"))\n    assert node.name == \"name\"\n    assert node.config == config\n    assert node.session == session\n    assert node.path == Path(\"/path/to/file\")\n\ndef test_node_from_parent():\n    parent = nodes.Node(\"parent\", config=config, session=session, path=Path(\"/path/to/file\"))\n    node = nodes.Node.from_parent(parent, name=\"name\")\n    assert node.parent == parent\n    assert node.name == \"name\"\n\ndef test_node_warn():\n    node = nodes.Node(\"name\", parent=None, config=config, session=session, path=Path(\"/path/to/file\"))\n    with pytest.warns(PytestWarning):\n        node.warn(PytestWarning(\"warning\"))\n\ndef test_node_iter_markers():\n    node = nodes.Node(\"name\", parent=None, config=config, session=session, path=Path(\"/path/to/file\"))\n    node.own_markers = [Mark(name='mark1'), Mark(name='mark2')]\n    assert list(node.iter_markers('mark1')) == [node.own_markers[0]]\n\ndef test_node_repr_failure():\n    node = nodes.Node(\"name\", parent=None, config=config, session=session, path=Path(__file__))\n    excinfo = ExceptionInfo(fail.Exception(\"test failure\"), [], [])\n    assert node.repr_failure(excinfo)\n\ndef test_fs_collector_init():\n    collector = nodes.FSCollector(path=Path(\"/path/to/file\"), name=\"name\", parent=None, config=config, session=session)\n    assert collector.path == Path(\"/path/to/file\")\n    assert collector.name == \"name\"\n\ndef test_fs_collector_from_parent():\n    parent = nodes.FSCollector(path=Path(\"/path/to/file\"), name=\"parent\", config=config, session=session)\n    collector = nodes.FSCollector.from_parent(parent, path=Path(\"/path/to/file\"))\n    assert collector.parent == parent\n\ndef test_item_init():\n    item = nodes.Item(\"name\", parent=None, config=config, session=session)\n    assert item.name == \"name\"\n\ndef test_item_add_report_section():\n    item = nodes.Item(\"name\", parent=None, config=config, session=session)\n    item.add_report_section(\"call\", \"stdout\", \"report section contents\")\n    assert item._report_sections[0] == (\"call\", \"stdout\", \"report section contents\")\n\ndef test_item_location():\n    item = nodes.Item(\"name\", parent=None, config=config, session=session, path=Path(__file__))\n    path, lineno, _ = item.location\n    assert path == os.fspath(Path(__file__).resolve())\n    assert lineno is None\n\ndef test_get_fslocation_from_item():\n    item = nodes.Item(\"name\", parent=None, config=config, session=session, path=Path(__file__))\n    path, lineno = nodes.get_fslocation_from_item(item)\n    assert path == Path(__file__)\n    assert lineno == -1\n"], "sample_667": ["\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom _pytest.doctest import _is_mocked, _patch_unwrap_mock_aware, DoctestItem, DoctestModule, DoctestTextfile, _setup_fixtures, _get_checker, _get_allow_unicode_flag, _get_allow_bytes_flag\n\nclass TestDoctestUtils:\n\n    def test_is_mocked(self):\n        mock_obj = Mock()\n        mock_obj.pytest_mock_example_attribute_that_shouldnt_exist = True\n        assert _is_mocked(mock_obj) == True\n\n        not_mock_obj = object()\n        assert _is_mocked(not_mock_obj) == False\n\n    def test_patch_unwrap_mock_aware(self):\n        with _patch_unwrap_mock_aware():\n            assert True  # Placeholder assertion, as the context manager doesn't return a value\n\nclass TestDoctestItems:\n\n    @patch('_pytest.doctest.FixtureRequest')\n    def test_setup_fixtures(self, mock_fixture_request):\n        doctest_item = Mock()\n        _setup_fixtures(doctest_item)\n        mock_fixture_request.assert_called_once()\n\nclass TestDoctestCheckers:\n\n    def test_get_checker(self):\n        checker = _get_checker()\n        assert checker is not None\n\n    def test_get_allow_unicode_flag(self):\n        flag = _get_allow_unicode_flag()\n        assert isinstance(flag, int)\n\n    def test_get_allow_bytes_flag(self):\n        flag = _get_allow_bytes_flag()\n        assert isinstance(flag, int)\n\n# More tests can be added for DoctestModule and DoctestTextfile classes and other functions/classes as needed\n"], "sample_662": ["\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom _pytest.main import _in_venv, ExitCode, Session, NoMatch, Interrupted, Failed\n\n@pytest.fixture\ndef mock_config():\n    config = Mock()\n    config.rootdir = \"/tmp\"\n    config.invocation_dir = \"/tmp\"\n    config.getoption.return_value = False\n    config.getini.return_value = []\n    config.pluginmanager._getconftestmodules.return_value = []\n    config.pluginmanager._conftest_plugins = set()\n    return config\n\ndef test_exit_code_enum():\n    assert ExitCode.OK == 0\n    assert ExitCode.TESTS_FAILED == 1\n    assert ExitCode.INTERRUPTED == 2\n    assert ExitCode.INTERNAL_ERROR == 3\n    assert ExitCode.USAGE_ERROR == 4\n    assert ExitCode.NO_TESTS_COLLECTED == 5\n\n@patch('sys.platform', 'win32')\ndef test_in_venv_windows():\n    path = Mock()\n    path.isdir.return_value = True\n    path.listdir.return_value = ['Activate.bat']\n    assert _in_venv(path) is True\n\n@patch('sys.platform', 'linux')\ndef test_in_venv_linux():\n    path = Mock()\n    path.isdir.return_value = True\n    path.listdir.return_value = ['activate']\n    assert _in_venv(path) is True\n\ndef test_session_init(mock_config):\n    session = Session(mock_config)\n    assert session.testsfailed == 0\n    assert session.testscollected == 0\n    assert session.shouldstop is False\n    assert session.shouldfail is False\n    assert session.Interrupted is Interrupted\n    assert session.Failed is Failed\n\ndef test_session_repr(mock_config):\n    session = Session(mock_config)\n    assert repr(session) == \"<Session . exitstatus=<UNSET> testsfailed=0 testscollected=0>\"\n"], "sample_1198": ["\nimport unittest\nfrom sympy.parsing.mathematica import parse_mathematica, MathematicaParser\nfrom sympy import symbols, sin, cos, tan, pi, log, exp, sqrt, atan2, Min, Max, Function, Tuple, StrictGreaterThan, StrictLessThan, Equality\n\nclass TestMathematicaParser(unittest.TestCase):\n    def setUp(self):\n        self.parser = MathematicaParser()\n\n    def test_parse_mathematica_simple(self):\n        x, y = symbols('x y')\n        self.assertEqual(parse_mathematica(\"Sin[x]^2 Tan[y]\"), sin(x)**2 * tan(y))\n        self.assertEqual(parse_mathematica(\"Log[x, y]\"), log(y, x))\n        self.assertEqual(parse_mathematica(\"Exp[x]\"), exp(x))\n        self.assertEqual(parse_mathematica(\"Sqrt[x]\"), sqrt(x))\n        self.assertEqual(parse_mathematica(\"ArcTan[y, x]\"), atan2(y, x))\n\n    def test_parse_mathematica_functions(self):\n        x, y = symbols('x y')\n        self.assertEqual(parse_mathematica(\"Max[x, y]\"), Max(x, y))\n        self.assertEqual(parse_mathematica(\"Min[x, y]\"), Min(x, y))\n        self.assertEqual(parse_mathematica(\"F[7,5,3]\"), Function('F')(7, 5, 3))\n\n    def test_parse_mathematica_matrices(self):\n        self.assertEqual(parse_mathematica(\"{{a, b}, {c, d}}\"), ((a, b), (c, d)))\n\n    def test_parse_mathematica_operators(self):\n        x, y = symbols('x y')\n        self.assertEqual(parse_mathematica(\"x > y\"), StrictGreaterThan(x, y))\n        self.assertEqual(parse_mathematica(\"x < y\"), StrictLessThan(x, y))\n        self.assertEqual(parse_mathematica(\"x == y\"), Equality(x, y))\n\n    def test_parse_mathematica_invalid_input(self):\n        with self.assertRaises(ValueError):\n            parse_mathematica(\"x_.\")\n        with self.assertRaises(ValueError):\n            parse_mathematica(\"Plus @@ {x, y, z}\")\n        with self.assertRaises(ValueError):\n            parse_mathematica(\"f[x_, 3] := x^3 /; x > 0\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1016": ["\nimport unittest\nfrom sympy.logic.boolalg import *\nfrom sympy import symbols\n\nclass TestBoolalg(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n\n    def test_as_Boolean(self):\n        self.assertEqual(as_Boolean(True), S.true)\n        self.assertEqual(as_Boolean(False), S.false)\n        self.assertEqual(as_Boolean(self.x), self.x)\n        with self.assertRaises(TypeError):\n            as_Boolean(2)\n\n    def test_BooleanAtom(self):\n        self.assertTrue(S.true)\n        self.assertFalse(S.false)\n        self.assertEqual(hash(S.true), hash(True))\n        self.assertEqual(hash(S.false), hash(False))\n        self.assertEqual(S.true.as_set(), S.UniversalSet)\n        self.assertEqual(S.false.as_set(), S.EmptySet)\n\n    def test_BooleanFunction(self):\n        self.assertEqual(Not(True), S.false)\n        self.assertEqual(Not(False), S.true)\n        self.assertEqual(And(True, False), S.false)\n        self.assertEqual(Or(True, False), S.true)\n        self.assertEqual(Xor(True, False), S.true)\n        self.assertEqual(Nand(True, False), S.true)\n        self.assertEqual(Nor(True, False), S.false)\n        self.assertEqual(Xnor(True, False), S.false)\n\n    def test_Implications(self):\n        self.assertEqual(Implies(True, False), S.false)\n        self.assertEqual(Implies(False, False), S.true)\n        self.assertEqual(Implies(True, True), S.true)\n        self.assertEqual(Implies(False, True), S.true)\n\n    def test_Equivalent(self):\n        self.assertEqual(Equivalent(True, True), S.true)\n        self.assertEqual(Equivalent(True, False), S.false)\n        self.assertEqual(Equivalent(True, True, True), S.true)\n        self.assertEqual(Equivalent(True, True, False), S.false)\n\n    def test_ITE(self):\n        self.assertEqual(ITE(True, False, True), S.false)\n        self.assertEqual(ITE(False, False, True), S.true)\n        self.assertEqual(ITE(self.x, self.y, self.z), ITE(self.x, self.y, self.z))\n        self.assertEqual(ITE(True, self.x, self.y), self.x)\n        self.assertEqual(ITE(False, self.x, self.y), self.y)\n        self.assertEqual(ITE(self.x, self.y, self.y), self.y)\n\n    def test_conjuncts(self):\n        self.assertEqual(conjuncts(self.x & self.y), {self.x, self.y})\n        self.assertEqual(conjuncts(self.x | self.y), {self.x | self.y})\n\n    def test_disjuncts(self):\n        self.assertEqual(disjuncts(self.x | self.y), {self.x, self.y})\n        self.assertEqual(disjuncts(self.x & self.y), {self.x & self.y})\n\n    def test_distribute_and_over_or(self):\n        self.assertEqual(distribute_and_over_or(self.x | (self.y & self.z)), (self.x | self.y) & (self.x | self.z))\n\n    def test_distribute_or_over_and(self):\n        self.assertEqual(distribute_or_over_and(self.x & (self.y | self.z)), (self.x & self.y) | (self.x & self.z))\n\n    def test_to_nnf(self):\n        self.assertEqual(to_nnf(Not(self.x & self.y)), (~self.x) | (~self.y))\n\n    def test_to_cnf(self):\n        self.assertEqual(to_cnf(self.x | (self.y & self.z)), (self.x | self.y) & (self.x | self.z))\n\n    def test_to_dnf(self):\n        self.assertEqual(to_dnf(self.x & (self.y | self.z)), (self.x & self.y) | (self.x & self.z))\n\n    def test_is_nnf(self):\n        self.assertTrue(is_nnf(self.x & self.y))\n        self.assertFalse(is_nnf(self.x >> self.y))\n\n    def test_is_cnf(self):\n        self.assertTrue(is_cnf(self.x | self.y))\n        self.assertFalse(is_cnf(self.x & self.y))\n\n    def test_is_dnf(self):\n        self.assertTrue(is_dnf(self.x & self.y))\n        self.assertFalse(is_dnf(self.x | self.y))\n\n    def test_eliminate_implications(self):\n        self.assertEqual(eliminate_implications(self.x >> self.y), self.y | Not(self.x))\n\n    def test_is_literal(self):\n        self.assertTrue(is_literal(self.x))\n        self.assertTrue(is_literal(Not(self.x)))\n        self.assertFalse(is_literal(self.x & self.y))\n\n    def test_to_int_repr(self):\n        self.assertEqual(to_int_repr([self.x | self.y, self.y], [self.x, self.y]), [{1, 2}, {2}])\n\n    def test_term_to_integer(self):\n        self.assertEqual(term_to_integer([1, 0, 0]), 4)\n\n    def test_integer_to_term(self):\n        self.assertEqual(integer_to_term(4), [1, 0, 0])\n        self.assertEqual(integer_to_term(4, 6), [0, 0, 0, 1, 0, 0])\n\n    def test_truth_table(self):\n        table = list(truth_table(self.x >> self.y, [self.x, self.y]))\n        self.assertEqual(table, [([0, 0], True), ([0, 1], True), ([1, 0], False), ([1, 1], True)])\n\n    def test_bool_map(self):\n        minterms = [[0, 0, 0, 1], [0, 0, 1, 1], [0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 1, 1]]\n        dontcares = [[0, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 1]]\n        self.assertEqual(bool_map(SOPform([self.x, self.y, self.z, self.w], minterms, dontcares), self.y & self.z), ({self.y & self.z, self.z & Not(self.x)}, {self.y: self.y, self.z: self.z, self.x: self.x}))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1014": ["\nimport unittest\nfrom sympy import symbols, sin, cos, pi, Piecewise, Matrix, MatrixSymbol, IndexedBase, Idx, Eq\nfrom sympy.printing.ccode import ccode\n\nclass TestCCode(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n\n    def test_simple_expression(self):\n        expr = sin(self.x) + cos(self.y)\n        result = ccode(expr)\n        self.assertEqual(result, 'sin(x) + cos(y)')\n\n    def test_piecewise_expression(self):\n        expr = Piecewise((self.x + 1, self.x > 0), (self.x, True))\n        result = ccode(expr, self.z, standard='C89')\n        expected_result = 'if (x > 0) {\\nz = x + 1;\\n} else {\\nz = x;\\n}'\n        self.assertEqual(result, expected_result)\n\n    def test_matrix_expression(self):\n        mat = Matrix([self.x**2, Piecewise((self.x + 1, self.x > 0), (self.x, True)), sin(self.x)])\n        A = MatrixSymbol('A', 3, 1)\n        result = ccode(mat, A, standard='C89')\n        expected_result = 'A[0] = pow(x, 2);\\nif (x > 0) {\\n   A[1] = x + 1;\\n} else {\\n   A[1] = x;\\n} A[2] = sin(x);'\n        self.assertEqual(result, expected_result)\n\n    def test_indexed_expression(self):\n        len_y = 5\n        y = IndexedBase('y', shape=(len_y,))\n        t = IndexedBase('t', shape=(len_y,))\n        Dy = IndexedBase('Dy', shape=(len_y-1,))\n        i = Idx('i', len_y-1)\n        e = Eq(Dy[i], (y[i+1]-y[i])/(t[i+1]-t[i]))\n        result = ccode(e.rhs, assign_to=e.lhs, contract=False, standard='C89')\n        expected_result = 'Dy[i] = (y[i + 1] - y[i])/(t[i + 1] - t[i]);'\n        self.assertEqual(result, expected_result)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1149": ["\nimport unittest\nfrom sympy.core.singleton import S, Singleton\nfrom sympy import Integer, Rational, Symbol\n\nclass TestSingletonRegistry(unittest.TestCase):\n    def test_singleton_registry(self):\n        self.assertIs(Integer(0), S.Zero)\n        self.assertIs(Rational(1, 2), S(1)/2)\n        self.assertIsInstance(S(1), Integer)\n        self.assertIsInstance(S(\"x\"), Symbol)\n\n    def test_singleton_class(self):\n        class MySingleton(metaclass=Singleton):\n            pass\n        self.assertIs(MySingleton(), MySingleton())\n        self.assertIs(MySingleton(), S.MySingleton)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_323": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.migrations.executor import MigrationExecutor\n\nclass TestMigrationExecutor(unittest.TestCase):\n    def setUp(self):\n        self.connection = MagicMock()\n        self.executor = MigrationExecutor(self.connection)\n\n    def test_migration_plan(self):\n        targets = [('test_app', '0001_initial')]\n        plan = self.executor.migration_plan(targets)\n        self.assertIsInstance(plan, list)\n\n    def test_migrate(self):\n        targets = [('test_app', '0001_initial')]\n        state = self.executor.migrate(targets)\n        self.assertIsNotNone(state)\n\n    @patch('django.db.migrations.executor.MigrationExecutor.apply_migration')\n    def test_apply_migration(self, mock_apply_migration):\n        state = MagicMock()\n        migration = MagicMock()\n        self.executor.apply_migration(state, migration)\n        mock_apply_migration.assert_called_once()\n\n    @patch('django.db.migrations.executor.MigrationExecutor.unapply_migration')\n    def test_unapply_migration(self, mock_unapply_migration):\n        state = MagicMock()\n        migration = MagicMock()\n        self.executor.unapply_migration(state, migration)\n        mock_unapply_migration.assert_called_once()\n\n    @patch('django.db.migrations.executor.MigrationExecutor.check_replacements')\n    def test_check_replacements(self, mock_check_replacements):\n        self.executor.check_replacements()\n        mock_check_replacements.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_766": ["\nimport unittest\nimport numpy as np\nfrom sklearn.decomposition import DictionaryLearning, MiniBatchDictionaryLearning, SparseCoder, dict_learning, dict_learning_online, sparse_encode\n\nclass TestDictLearning(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.X = np.random.rand(100, 50)\n        self.n_components = 10\n        self.alpha = 1.0\n        self.max_iter = 100\n        self.tol = 1e-8\n        self.fit_algorithm = 'lars'\n        self.transform_algorithm = 'omp'\n        self.transform_n_nonzero_coefs = 5\n        self.transform_alpha = 1.0\n        self.n_jobs = None\n        self.code_init = None\n        self.dict_init = None\n        self.verbose = False\n        self.split_sign = False\n        self.random_state = 0\n        self.positive_code = False\n        self.positive_dict = False\n        self.transform_max_iter = 1000\n        self.n_iter = 100\n        self.batch_size = 3\n        self.shuffle = True\n\n    def test_sparse_encode(self):\n        dictionary = np.random.rand(self.n_components, self.X.shape[1])\n        code = sparse_encode(self.X, dictionary, algorithm=self.transform_algorithm, alpha=self.transform_alpha,\n                             max_iter=self.transform_max_iter, n_jobs=self.n_jobs, positive=self.positive_code)\n        self.assertEqual(code.shape, (self.X.shape[0], self.n_components))\n\n    def test_dict_learning(self):\n        code, dictionary, errors = dict_learning(self.X, self.n_components, self.alpha,\n                                                 max_iter=self.max_iter, tol=self.tol,\n                                                 method=self.fit_algorithm,\n                                                 n_jobs=self.n_jobs,\n                                                 dict_init=self.dict_init,\n                                                 code_init=self.code_init,\n                                                 verbose=self.verbose,\n                                                 random_state=self.random_state,\n                                                 positive_dict=self.positive_dict,\n                                                 positive_code=self.positive_code,\n                                                 method_max_iter=self.transform_max_iter)\n        self.assertEqual(code.shape, (self.X.shape[0], self.n_components))\n        self.assertEqual(dictionary.shape, (self.n_components, self.X.shape[1]))\n        self.assertIsInstance(errors, list)\n\n    def test_dict_learning_online(self):\n        dictionary = dict_learning_online(self.X, self.n_components, self.alpha,\n                                          n_iter=self.n_iter, return_code=False,\n                                          method=self.fit_algorithm,\n                                          method_max_iter=self.transform_max_iter,\n                                          n_jobs=self.n_jobs, dict_init=self.dict_init,\n                                          batch_size=self.batch_size, shuffle=self.shuffle,\n                                          verbose=self.verbose, random_state=self.random_state,\n                                          positive_dict=self.positive_dict,\n                                          positive_code=self.positive_code)\n        self.assertEqual(dictionary.shape, (self.n_components, self.X.shape[1]))\n\n    def test_sparse_coder(self):\n        dictionary = np.random.rand(self.n_components, self.X.shape[1])\n        sparse_coder = SparseCoder(dictionary, transform_algorithm=self.transform_algorithm,\n                                   transform_n_nonzero_coefs=self.transform_n_nonzero_coefs,\n                                   transform_alpha=self.transform_alpha, split_sign=self.split_sign,\n                                   n_jobs=self.n_jobs, positive_code=self.positive_code,\n                                   transform_max_iter=self.transform_max_iter)\n        sparse_coder.fit(self.X)\n        transformed_X = sparse_coder.transform(self.X)\n        self.assertEqual(transformed_X.shape, (self.X.shape[0], self.n_components))\n\n    def test_dictionary_learning(self):\n        dictionary_learning = DictionaryLearning(n_components=self.n_components, alpha=self.alpha, max_iter=self.max_iter,\n                                                tol=self.tol, fit_algorithm=self.fit_algorithm,\n                                                transform_algorithm=self.transform_algorithm,\n                                                transform_n_nonzero_coefs=self.transform_n_nonzero_coefs,\n                                                transform_alpha=self.transform_alpha, n_jobs=self.n_jobs,\n                                                code_init=self.code_init, dict_init=self.dict_init,\n                                                verbose=self.verbose, split_sign=self.split_sign,\n                                                random_state=self.random_state, positive_code=self.positive_code,\n                                                positive_dict=self.positive_dict,\n                                                transform_max_iter=self.transform_max_iter)\n        dictionary_learning.fit(self.X)\n        transformed_X = dictionary_learning.transform(self.X)\n        self.assertEqual(transformed_X.shape, (self.X.shape[0], self.n_components))\n\n    def test_minibatch_dictionary_learning(self):\n        minibatch_dictionary_learning = MiniBatchDictionaryLearning(n_components=self.n_components, alpha=self.alpha,\n                                                                    n_iter=self.n_iter,\n                                                                    fit_algorithm=self.fit_algorithm,\n                                                                    n_jobs=self.n_jobs, batch_size=self.batch_size,\n                                                                    shuffle=self.shuffle, dict_init=self.dict_init,\n                                                                    transform_algorithm=self.transform_algorithm,\n                                                                    transform_n_nonzero_coefs=self.transform_n_nonzero_coefs,\n                                                                    transform_alpha=self.transform_alpha,\n                                                                    verbose=self.verbose, split_sign=self.split_sign,\n                                                                    random_state=self.random_state,\n                                                                    positive_code=self.positive_code,\n                                                                    positive_dict=self.positive_dict,\n                                                                    transform_max_iter=self.transform_max_iter)\n        minibatch_dictionary_learning.fit(self.X)\n        transformed_X = minibatch_dictionary_learning.transform(self.X)\n        self.assertEqual(transformed_X.shape, (self.X.shape[0], self.n_components))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_885": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.utils._set_output import _SetOutputMixin, _safe_set_output, _wrap_in_pandas_container, _get_output_config\n\nclass TestSetOutput(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4], [5, 6]])\n        self.y = np.array([1, 2, 3])\n        self.df = pd.DataFrame(self.X, columns=['feature1', 'feature2'])\n        self.estimator = BaseEstimator()\n\n    def test_wrap_in_pandas_container(self):\n        result = _wrap_in_pandas_container(self.X, columns=['a', 'b'])\n        self.assertIsInstance(result, pd.DataFrame)\n\n    def test_get_output_config(self):\n        config = _get_output_config('transform', self.estimator)\n        self.assertEqual(config, {'dense': 'default'})\n\n    def test_safe_set_output(self):\n        class MyEstimator(_SetOutputMixin, BaseEstimator):\n            def transform(self, X):\n                return X\n        my_estimator = MyEstimator()\n        my_estimator = _safe_set_output(my_estimator, transform='pandas')\n        self.assertEqual(my_estimator._sklearn_output_config['transform'], 'pandas')\n\nclass MyTransformer(_SetOutputMixin, TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        return X\n\nclass TestSetOutputMixin(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4], [5, 6]])\n        self.df = pd.DataFrame(self.X, columns=['feature1', 'feature2'])\n        self.transformer = MyTransformer()\n\n    def test_set_output(self):\n        self.transformer.set_output(transform='pandas')\n        self.assertEqual(self.transformer._sklearn_output_config['transform'], 'pandas')\n\n    def test_transform(self):\n        result = self.transformer.transform(self.X)\n        self.assertIsInstance(result, pd.DataFrame)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_557": ["\nimport unittest\nimport matplotlib.pyplot as plt\nimport matplotlib.figure as mfig\nimport numpy as np\n\nclass TestFigure(unittest.TestCase):\n    def setUp(self):\n        self.fig = plt.figure()\n\n    def test_create_figure(self):\n        self.assertIsInstance(self.fig, mfig.Figure)\n\n    def test_set_size_inches(self):\n        self.fig.set_size_inches(5, 5)\n        self.assertEqual(self.fig.get_size_inches(), (5, 5))\n\n    def test_add_subplot(self):\n        ax = self.fig.add_subplot(111)\n        self.assertIsInstance(ax, plt.Axes)\n\n    def test_clear(self):\n        ax = self.fig.add_subplot(111)\n        self.fig.clear()\n        self.assertEqual(len(self.fig.axes), 0)\n\n    def test_draw_without_rendering(self):\n        self.fig.draw_without_rendering()\n        # No assertion, just ensure it runs without errors\n\n    def test_figimage(self):\n        data = np.random.rand(10, 10)\n        img = self.fig.figimage(data)\n        self.assertIsInstance(img, mfig.FigureImage)\n\n    def test_get_size_inches(self):\n        size = self.fig.get_size_inches()\n        self.assertIsInstance(size, np.ndarray)\n        self.assertEqual(size.shape, (2,))\n\n    def test_get_dpi(self):\n        dpi = self.fig.get_dpi()\n        self.assertIsInstance(dpi, float)\n\n    def test_set_dpi(self):\n        self.fig.set_dpi(200)\n        self.assertEqual(self.fig.get_dpi(), 200)\n\n    def test_savefig(self):\n        self.fig.savefig('test_figure.png')\n        # No assertion, just ensure it runs without errors\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1146": ["\nimport unittest\nfrom sympy import symbols, Rational, pi, sin, asin, Integral, Matrix, log\nfrom sympy.printing.latex import latex, multiline_latex\n\nclass TestLatexPrinter(unittest.TestCase):\n\n    def setUp(self):\n        self.tau = symbols('tau')\n        self.mu = symbols('mu')\n        self.r = symbols('r')\n        self.x = symbols('x')\n        self.y = symbols('y')\n\n    def test_latex_output(self):\n        self.assertEqual(latex((2*self.tau)**Rational(7,2)), '8 \\\\sqrt{2} \\\\tau^{\\\\frac{7}{2}}')\n        self.assertEqual(latex((2*self.mu)**Rational(7,2), mode='plain'), '8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}')\n        self.assertEqual(latex((2*self.tau)**Rational(7,2), mode='inline'), '$8 \\\\sqrt{2} \\\\tau^{7 / 2}$')\n        self.assertEqual(latex((2*self.mu)**Rational(7,2), mode='equation*'), '\\\\begin{equation*}8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}\\\\end{equation*}')\n        self.assertEqual(latex((2*self.mu)**Rational(7,2), mode='equation'), '\\\\begin{equation}8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}\\\\end{equation}')\n        self.assertEqual(latex((2*self.mu)**Rational(7,2), mode='equation', itex=True), '$$8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}$$')\n        self.assertEqual(latex(3*self.x**2/self.y), '\\\\frac{3 x^{2}}{y}')\n        self.assertEqual(latex(3*self.x**2/self.y, fold_short_frac=True), '3 x^{2} / y')\n        self.assertEqual(latex(Integral(self.r, self.r)/2/pi, long_frac_ratio=2), '\\\\frac{\\\\int r\\\\, dr}{2 \\\\pi}')\n        self.assertEqual(latex(Integral(self.r, self.r)/2/pi, long_frac_ratio=0), '\\\\frac{1}{2 \\\\pi} \\\\int r\\\\, dr')\n        self.assertEqual(latex(asin(Rational(7,2)), inv_trig_style=\"full\"), '\\\\arcsin{\\\\left(\\\\frac{7}{2} \\\\right)}')\n        self.assertEqual(latex(asin(Rational(7,2)), inv_trig_style=\"power\"), '\\\\sin^{-1}{\\\\left(\\\\frac{7}{2} \\\\right)}')\n        self.assertEqual(latex(Matrix(2, 1, [self.x, self.y]), mat_str = \"array\"), '\\\\left[\\\\begin{array}{c}x\\\\\\\\y\\\\end{array}\\\\right]')\n        self.assertEqual(latex(log(10), ln_notation=True), '\\\\ln{\\\\left(10 \\\\right)}')\n\n    def test_multiline_latex(self):\n        alpha = symbols('alpha')\n        expr = sin(alpha*self.y) + log(10) - cos(log(self.y))\n        multiline_output = multiline_latex(self.x, expr)\n        expected_output = '\\\\begin{align*}\\n' + \\\n                          'x = & \\\\sin{\\\\left(\\\\alpha y \\\\right)} \\\\nonumber\\\\\\\\\\n' + \\\n                          '& + \\\\log{\\\\left(10 \\\\right)} \\\\nonumber\\\\\\\\\\n' + \\\n                          '& - \\\\cos{\\\\left(\\\\log{\\\\left(y \\\\right)} \\\\right)}\\n' + \\\n                          '\\\\end{align*}'\n        self.assertEqual(multiline_output, expected_output)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_358": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.db.backends.ddl_references import (\n    Columns,\n    Expressions,\n    ForeignKeyName,\n    IndexName,\n    Statement,\n    Table,\n)\n\nclass TestDdlReferences(unittest.TestCase):\n    def setUp(self):\n        self.quote_name = lambda x: f'\"{x}\"'\n        self.quote_value = lambda x: f\"'{x}'\"\n        self.create_index_name = lambda t, c, s: f'{t}_{c[0]}_{s}'\n        self.create_fk_name = lambda t, c, s: f'fk_{t}_{c[0]}_{s}'\n\n    def test_table(self):\n        table = Table('test_table', self.quote_name)\n        self.assertTrue(table.references_table('test_table'))\n        self.assertFalse(table.references_table('other_table'))\n        self.assertEqual(str(table), '\"test_table\"')\n        table.rename_table_references('test_table', 'new_table')\n        self.assertEqual(str(table), '\"new_table\"')\n\n    def test_columns(self):\n        columns = Columns('test_table', ['col1', 'col2'], self.quote_name)\n        self.assertTrue(columns.references_column('test_table', 'col1'))\n        self.assertFalse(columns.references_column('test_table', 'col3'))\n        self.assertEqual(str(columns), '\"col1\", \"col2\"')\n        columns.rename_column_references('test_table', 'col1', 'new_col1')\n        self.assertEqual(str(columns), '\"new_col1\", \"col2\"')\n\n    def test_index_name(self):\n        index_name = IndexName('test_table', ['col1', 'col2'], 'suffix', self.create_index_name)\n        self.assertEqual(str(index_name), 'test_table_col1_suffix')\n\n    def test_foreign_key_name(self):\n        fk_name = ForeignKeyName('from_table', ['col1'], 'to_table', ['col2'], '%(to_table)s_%(to_column)s_fk', self.create_fk_name)\n        self.assertTrue(fk_name.references_table('from_table'))\n        self.assertTrue(fk_name.references_table('to_table'))\n        self.assertTrue(fk_name.references_column('from_table', 'col1'))\n        self.assertFalse(fk_name.references_column('from_table', 'col2'))\n        self.assertEqual(str(fk_name), 'fk_from_table_col1_to_table_col2_fk')\n        fk_name.rename_table_references('from_table', 'new_from_table')\n        self.assertEqual(str(fk_name), 'fk_new_from_table_col1_to_table_col2_fk')\n        fk_name.rename_column_references('from_table', 'col1', 'new_col1')\n        self.assertEqual(str(fk_name), 'fk_new_from_table_new_col1_to_table_col2_fk')\n\n    def test_statement(self):\n        statement = Statement('CREATE INDEX %(index_name)s ON %(table)s (%(columns)s);',\n                             index_name=IndexName('test_table', ['col1', 'col2'], 'suffix', self.create_index_name),\n                             table=Table('test_table', self.quote_name),\n                             columns=Columns('test_table', ['col1', 'col2'], self.quote_name))\n        self.assertTrue(statement.references_table('test_table'))\n        self.assertTrue(statement.references_column('test_table', 'col1'))\n        self.assertEqual(str(statement), 'CREATE INDEX test_table_col1_suffix ON \"test_table\" (\"col1\", \"col2\");')\n        statement.rename_table_references('test_table', 'new_table')\n        self.assertEqual(str(statement), 'CREATE INDEX new_table_col1_suffix ON \"new_table\" (\"col1\", \"col2\");')\n        statement.rename_column_references('test_table', 'col1', 'new_col1')\n        self.assertEqual(str(statement), 'CREATE INDEX new_table_new_col1_suffix ON \"new_table\" (\"new_col1\", \"col2\");')\n\n    def test_expressions(self):\n        mock_compiler = MagicMock()\n        mock_compiler.compile.return_value = ('\"col1\" + \"col2\"', [])\n        mock_compiler.query._gen_cols.return_value = [MagicMock(target=MagicMock(column='col1')), MagicMock(target=MagicMock(column='col2'))]\n        expressions = Expressions('test_table', 'col1 + col2', mock_compiler, self.quote_value)\n        self.assertTrue(expressions.references_column('test_table', 'col1'))\n        self.assertEqual(str(expressions), '\"col1\" + \"col2\"')\n        expressions.rename_column_references('test_table', 'col1', 'new_col1')\n        self.assertEqual(str(expressions), '\"new_col1\" + \"col2\"')\n"], "sample_69": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom pathlib import Path\nfrom types import ModuleType\nfrom zipimport import zipimporter\nfrom django.utils import autoreload\nfrom django.utils.autoreload import WatchmanUnavailable\n\nclass TestAutoreload(unittest.TestCase):\n    def setUp(self):\n        self.reloader = autoreload.get_reloader()\n\n    @patch('django.utils.autoreload.StatReloader')\n    @patch('django.utils.autoreload.WatchmanReloader')\n    def test_get_reloader(self, MockWatchmanReloader, MockStatReloader):\n        # Test that WatchmanReloader is returned when it's available\n        self.assertEqual(autoreload.get_reloader(), MockWatchmanReloader.return_value)\n\n        # Test that StatReloader is returned when WatchmanReloader is unavailable\n        MockWatchmanReloader.check_availability.side_effect = WatchmanUnavailable()\n        self.assertEqual(autoreload.get_reloader(), MockStatReloader.return_value)\n\n    @patch('django.utils.autoreload.get_reloader')\n    @patch('django.utils.autoreload.start_django')\n    @patch('os.environ')\n    def test_run_with_reloader(self, mock_environ, mock_start_django, mock_get_reloader):\n        # Test that start_django is called when DJANGO_AUTORELOAD_ENV is 'true'\n        mock_environ.get.return_value = 'true'\n        autoreload.run_with_reloader(MagicMock())\n        mock_start_django.assert_called()\n\n        # Test that restart_with_reloader is called when DJANGO_AUTORELOAD_ENV is not 'true'\n        mock_environ.get.return_value = 'false'\n        with self.assertRaises(SystemExit):\n            autoreload.run_with_reloader(MagicMock())\n\n    @patch('django.utils.autoreload.zipimporter')\n    @patch('django.utils.autoreload.ModuleType')\n    def test_iter_modules_and_files(self, MockModuleType, MockZipImporter):\n        # Test that the function returns a frozenset of absolute paths\n        module1 = MagicMock(spec=ModuleType)\n        module1.__spec__ = MagicMock(has_location=True, origin='/path/to/module1.py')\n        module2 = MagicMock(spec=ModuleType)\n        module2.__spec__ = MagicMock(has_location=True, origin='/path/to/module2.py', loader=MockZipImporter.return_value)\n        extra_files = ['/path/to/extra_file.py']\n        result = autoreload.iter_modules_and_files([module1, module2], extra_files)\n        self.assertIsInstance(result, frozenset)\n        self.assertEqual(result, {Path('/path/to/module1.py').resolve().absolute(),\n                                   Path('/path/to/module2.py').resolve().absolute(),\n                                   Path('/path/to/extra_file.py').resolve().absolute()})\n\n    # Add more tests for other functions as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_515": ["\nimport unittest\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nfrom matplotlib.colorbar import Colorbar, make_axes, make_axes_gridspec\nfrom matplotlib.ticker import FixedLocator, LogFormatter\nimport numpy as np\n\nclass TestColorbar(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.data = np.random.random((10, 10))\n        self.im = self.ax.imshow(self.data)\n\n    def test_colorbar_creation(self):\n        cbar = self.fig.colorbar(self.im)\n        self.assertIsInstance(cbar, Colorbar)\n\n    def test_colorbar_ticks(self):\n        cbar = self.fig.colorbar(self.im, ticks=[0, 0.5, 1])\n        self.assertEqual(cbar.get_ticks(), [0, 0.5, 1])\n\n    def test_colorbar_formatter(self):\n        cbar = self.fig.colorbar(self.im, format='%.2f')\n        self.assertIsInstance(cbar.formatter, LogFormatter)\n\n    def test_colorbar_location(self):\n        cbar = self.fig.colorbar(self.im, location='left')\n        self.assertEqual(cbar.orientation, 'vertical')\n        self.assertEqual(cbar.ticklocation, 'left')\n\n    def test_colorbar_alpha(self):\n        cbar = self.fig.colorbar(self.im, alpha=0.5)\n        self.assertEqual(cbar.alpha, 0.5)\n\n    def test_colorbar_extend(self):\n        cbar = self.fig.colorbar(self.im, extend='both')\n        self.assertEqual(cbar.extend, 'both')\n\n    def test_colorbar_spacing(self):\n        cbar = self.fig.colorbar(self.im, spacing='proportional')\n        self.assertEqual(cbar.spacing, 'proportional')\n\n    def test_colorbar_drawedges(self):\n        cbar = self.fig.colorbar(self.im, drawedges=True)\n        self.assertTrue(cbar.drawedges)\n\n    def test_colorbar_label(self):\n        cbar = self.fig.colorbar(self.im, label='Test label')\n        self.assertEqual(cbar.ax.get_ylabel(), 'Test label')\n\n    def test_make_axes(self):\n        cax, kwargs = make_axes(self.ax, location='top')\n        self.assertIsInstance(cax, plt.Axes)\n        self.assertEqual(kwargs['orientation'], 'horizontal')\n\n    def test_make_axes_gridspec(self):\n        cax, kwargs = make_axes_gridspec(self.ax, location='right')\n        self.assertIsInstance(cax, plt.Axes)\n        self.assertEqual(kwargs['orientation'], 'vertical')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_510": ["\nimport unittest\nfrom unittest.mock import patch\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib.testing.decorators import cleanup\n\nclass TestPyplotFunctions(unittest.TestCase):\n\n    @cleanup\n    def test_figure(self):\n        fig = plt.figure()\n        self.assertIsNotNone(fig)\n\n    @cleanup\n    def test_plot(self):\n        x = np.linspace(0, 10, 100)\n        y = np.sin(x)\n        plt.plot(x, y)\n        self.assertEqual(len(plt.gca().lines), 1)\n\n    @cleanup\n    def test_title(self):\n        plt.title(\"Test Title\")\n        self.assertEqual(plt.gca().get_title(), \"Test Title\")\n\n    @cleanup\n    def test_xlabel(self):\n        plt.xlabel(\"Test X-label\")\n        self.assertEqual(plt.gca().get_xlabel(), \"Test X-label\")\n\n    @cleanup\n    def test_ylabel(self):\n        plt.ylabel(\"Test Y-label\")\n        self.assertEqual(plt.gca().get_ylabel(), \"Test Y-label\")\n\n    @cleanup\n    def test_xlim(self):\n        plt.xlim(0, 10)\n        self.assertEqual(plt.gca().get_xlim(), (0, 10))\n\n    @cleanup\n    def test_ylim(self):\n        plt.ylim(-1, 1)\n        self.assertEqual(plt.gca().get_ylim(), (-1, 1))\n\n    @cleanup\n    def test_xticks(self):\n        plt.xticks([0, 5, 10])\n        self.assertEqual(plt.gca().get_xticks(), [0, 5, 10])\n\n    @cleanup\n    def test_yticks(self):\n        plt.yticks([-1, 0, 1])\n        self.assertEqual(plt.gca().get_yticks(), [-1, 0, 1])\n\n    @cleanup\n    def test_subplot(self):\n        plt.subplot(2, 1, 1)\n        self.assertEqual(len(plt.gcf().get_axes()), 1)\n\n    @cleanup\n    def test_subplots(self):\n        fig, axs = plt.subplots(2, 2)\n        self.assertEqual(len(axs.flat), 4)\n\n    @cleanup\n    def test_colorbar(self):\n        mappable = plt.imshow(np.random.rand(10, 10))\n        plt.colorbar(mappable)\n        self.assertIsNotNone(plt.gcf().get_axes()[-1].colorbar)\n\n    @cleanup\n    def test_clim(self):\n        plt.imshow(np.random.rand(10, 10))\n        plt.clim(0, 1)\n        self.assertEqual(plt.gci().get_clim(), (0, 1))\n\n    @cleanup\n    def test_set_cmap(self):\n        plt.set_cmap('viridis')\n        self.assertEqual(plt.rcParams['image.cmap'], 'viridis')\n\n    @cleanup\n    def test_matshow(self):\n        plt.matshow(np.random.rand(10, 10))\n        self.assertEqual(len(plt.gcf().get_axes()), 1)\n\n    @cleanup\n    def test_polar(self):\n        theta = np.linspace(0, 2 * np.pi, 100)\n        r = np.random.rand(100)\n        plt.polar(theta, r)\n        self.assertEqual(len(plt.gcf().get_axes()), 1)\n\n    # Add more tests for other functions in pyplot.py\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_340": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.forms import Form\nfrom django.forms.formsets import BaseFormSet, formset_factory, all_valid\nfrom django.forms.fields import IntegerField, BooleanField\nfrom django.forms.utils import ErrorList\nfrom django.core.exceptions import ValidationError\n\nclass TestForm(Form):\n    field1 = IntegerField()\n    field2 = BooleanField()\n\nclass TestBaseFormSet(unittest.TestCase):\n    def setUp(self):\n        self.data = {\n            'form-TOTAL_FORMS': '2',\n            'form-INITIAL_FORMS': '1',\n            'form-0-field1': '1',\n            'form-0-field2': 'True',\n            'form-1-field1': '2',\n            'form-1-field2': 'False',\n        }\n\n    def test_initial_form_count(self):\n        formset = BaseFormSet(data=self.data, form=TestForm)\n        self.assertEqual(formset.initial_form_count(), 1)\n\n    def test_total_form_count(self):\n        formset = BaseFormSet(data=self.data, form=TestForm)\n        self.assertEqual(formset.total_form_count(), 2)\n\n    def test_is_valid(self):\n        formset = BaseFormSet(data=self.data, form=TestForm)\n        self.assertTrue(formset.is_valid())\n\n    def test_cleaned_data(self):\n        formset = BaseFormSet(data=self.data, form=TestForm)\n        self.assertEqual(formset.cleaned_data, [{'field1': 1, 'field2': True}, {'field1': 2, 'field2': False}])\n\n    def test_deleted_forms(self):\n        data = self.data.copy()\n        data['form-0-DELETE'] = 'True'\n        formset = BaseFormSet(data=data, form=TestForm, can_delete=True)\n        self.assertEqual(len(formset.deleted_forms), 1)\n\nclass TestFormSetFactory(unittest.TestCase):\n    def test_formset_factory(self):\n        TestFormSet = formset_factory(TestForm, extra=2, can_delete=True)\n        formset = TestFormSet()\n        self.assertEqual(len(formset.forms), 2)\n\nclass TestAllValid(unittest.TestCase):\n    def test_all_valid(self):\n        data = {\n            'form-TOTAL_FORMS': '2',\n            'form-INITIAL_FORMS': '2',\n            'form-0-field1': '1',\n            'form-0-field2': 'True',\n            'form-1-field1': '2',\n            'form-1-field2': 'False',\n        }\n        TestFormSet = formset_factory(TestForm)\n        formset1 = TestFormSet(data=data)\n        formset2 = TestFormSet(data=data)\n        self.assertTrue(all_valid([formset1, formset2]))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_223": ["\nfrom django.test import TestCase\nfrom django.db.models.query import QuerySet, EmptyQuerySet, RawQuerySet, Prefetch\nfrom django.db.models import Model\n\nclass TestQuerySet(TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            name = CharField(max_length=50)\n\n        self.queryset = QuerySet(model=TestModel)\n\n    def test_empty_queryset(self):\n        empty_qs = self.queryset.none()\n        self.assertIsInstance(empty_qs, EmptyQuerySet)\n        self.assertTrue(isinstance(empty_qs, EmptyQuerySet))\n\n    def test_filter(self):\n        filtered_qs = self.queryset.filter(name='test')\n        self.assertIsInstance(filtered_qs, QuerySet)\n\n    def test_exclude(self):\n        excluded_qs = self.queryset.exclude(name='test')\n        self.assertIsInstance(excluded_qs, QuerySet)\n\n    # Add more test methods for other functionalities like order_by, distinct, defer, only, using, etc.\n\nclass TestRawQuerySet(TestCase):\n    def setUp(self):\n        self.raw_queryset = RawQuerySet(raw_query='SELECT * FROM test_model')\n\n    def test_iterator(self):\n        # Test the iterator method\n        pass\n\n    # Add more test methods for other functionalities like prefetch_related, __getitem__, db, using, etc.\n\nclass TestPrefetch(TestCase):\n    def setUp(self):\n        self.prefetch = Prefetch('test_lookup')\n\n    def test_add_prefix(self):\n        self.prefetch.add_prefix('prefix')\n        self.assertEqual(self.prefetch.prefetch_through, 'prefix__test_lookup')\n\n    def test_get_current_prefetch_to(self):\n        self.prefetch.prefetch_to = 'test__lookup'\n        self.assertEqual(self.prefetch.get_current_prefetch_to(0), 'test')\n        self.assertEqual(self.prefetch.get_current_prefetch_to(1), 'test__lookup')\n\n    # Add more test methods for other functionalities like __eq__, __hash__, __getstate__, get_current_to_attr, get_current_queryset, etc.\n"], "sample_1162": ["\nimport unittest\nfrom sympy import symbols, Function, diff, Lambda, Subs, Derivative, exp, sin, cos, log, expand, expand_mul, expand_multinomial, expand_log, expand_func, expand_trig, expand_complex, expand_power_base, expand_power_exp, count_ops, nfloat\n\nclass TestFunctionMethods(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n        self.f = Function('f')\n\n    def test_diff(self):\n        self.assertEqual(diff(sin(self.x), self.x), cos(self.x))\n        self.assertEqual(diff(self.f(self.x), self.x, self.x, self.x), Derivative(self.f(self.x), (self.x, 3)))\n        self.assertEqual(diff(self.f(self.x), self.x, 3), Derivative(self.f(self.x), (self.x, 3)))\n        self.assertEqual(diff(sin(self.x)*cos(self.y), self.x, 2, self.y, 2), sin(self.x)*cos(self.y))\n\n    def test_Lambda(self):\n        func = Lambda(self.x, self.x**2)\n        self.assertEqual(func(4), 16)\n        func2 = Lambda((self.x, self.y, self.z), self.x + self.y**self.z)\n        self.assertEqual(func2(1, 2, 3), 9)\n\n    def test_Subs(self):\n        sub = Subs(self.f(self.x).diff(self.x), self.x, 0)\n        self.assertEqual(sub.doit().subs(self.f, sin), cos(0))\n\n    def test_expand(self):\n        self.assertEqual(expand((self.x + self.y + self.z)**2), self.x**2 + 2*self.x*self.y + 2*self.x*self.z + self.y**2 + 2*self.y*self.z + self.z**2)\n        self.assertEqual(expand(exp(self.x + self.y)), exp(self.x)*exp(self.y))\n\n    def test_expand_mul(self):\n        self.assertEqual(expand_mul(exp(self.x+self.y)*(self.x+self.y)*log(self.x*self.y**2)), self.x*exp(self.x + self.y)*log(self.x*self.y**2) + self.y*exp(self.x + self.y)*log(self.x*self.y**2))\n\n    def test_expand_multinomial(self):\n        self.assertEqual(expand_multinomial((self.x + exp(self.x + 1))**2), self.x**2 + 2*self.x*exp(self.x + 1) + exp(2*self.x + 2))\n\n    def test_expand_log(self):\n        self.assertEqual(expand_log(exp(self.x+self.y)*(self.x+self.y)*log(self.x*self.y**2)), (self.x + self.y)*(log(self.x) + 2*log(self.y))*exp(self.x + self.y))\n\n    def test_expand_func(self):\n        gamma = Function('gamma')\n        self.assertEqual(expand_func(gamma(self.x + 2)), self.x*(self.x + 1)*gamma(self.x))\n\n    def test_expand_trig(self):\n        self.assertEqual(expand_trig(sin(self.x+self.y)*(self.x+self.y)), (self.x + self.y)*(sin(self.x)*cos(self.y) + sin(self.y)*cos(self.x)))\n\n    def test_expand_complex(self):\n        self.assertEqual"], "sample_146": ["\nimport unittest\nfrom unittest.mock import patch\n\nfrom django.conf import settings\nfrom django.core.checks.translation import (\n    check_language_settings_consistent,\n    check_setting_language_code,\n    check_setting_languages,\n    check_setting_languages_bidi,\n    E001,\n    E002,\n    E003,\n    E004,\n)\n\nclass TestTranslationChecks(unittest.TestCase):\n    def test_check_setting_language_code_valid(self):\n        with patch.object(settings, 'LANGUAGE_CODE', 'en-us'):\n            self.assertEqual(check_setting_language_code([]), [])\n\n    def test_check_setting_language_code_invalid(self):\n        with patch.object(settings, 'LANGUAGE_CODE', 'invalid'):\n            self.assertEqual(check_setting_language_code([]), [E001.msg.format('invalid')])\n\n    def test_check_setting_languages_valid(self):\n        with patch.object(settings, 'LANGUAGES', [('en-us', 'English'), ('fr', 'French')]):\n            self.assertEqual(check_setting_languages([]), [])\n\n    def test_check_setting_languages_invalid(self):\n        with patch.object(settings, 'LANGUAGES', [('en-us', 'English'), ('invalid', 'Invalid')]):\n            self.assertEqual(check_setting_languages([]), [E002.msg.format('invalid')])\n\n    def test_check_setting_languages_bidi_valid(self):\n        with patch.object(settings, 'LANGUAGES_BIDI', ['ar', 'he']):\n            self.assertEqual(check_setting_languages_bidi([]), [])\n\n    def test_check_setting_languages_bidi_invalid(self):\n        with patch.object(settings, 'LANGUAGES_BIDI', ['ar', 'invalid']):\n            self.assertEqual(check_setting_languages_bidi([]), [E003.msg.format('invalid')])\n\n    def test_check_language_settings_consistent_valid(self):\n        with patch.object(settings, 'LANGUAGE_CODE', 'en-us'):\n            with patch.object(settings, 'LANGUAGES', [('en-us', 'English'), ('fr', 'French')]):\n                self.assertEqual(check_language_settings_consistent([]), [])\n\n    def test_check_language_settings_consistent_invalid(self):\n        with patch.object(settings, 'LANGUAGE_CODE', 'invalid'):\n            with patch.object(settings, 'LANGUAGES', [('en-us', 'English'), ('fr', 'French')]):\n                self.assertEqual(check_language_settings_consistent([]), [E004])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_291": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.views.generic import RedirectView, TemplateView, View\nfrom django.http import HttpRequest, HttpResponsePermanentRedirect, HttpResponseRedirect, HttpResponseGone\nfrom django.urls import reverse\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.template.response import TemplateResponse\n\nclass TestContextMixin(unittest.TestCase):\n    def test_get_context_data(self):\n        mixin = View()\n        mixin.extra_context = {'key': 'value'}\n        context = mixin.get_context_data(foo='bar')\n        self.assertEqual(context, {'view': mixin, 'key': 'value', 'foo': 'bar'})\n\nclass TestView(unittest.TestCase):\n    def test_as_view(self):\n        view = View.as_view()\n        self.assertEqual(view.view_class, View)\n\n    def test_dispatch(self):\n        request = HttpRequest()\n        request.method = 'GET'\n        view = View()\n        view.get = MagicMock()\n        view.dispatch(request)\n        view.get.assert_called_once()\n\nclass TestTemplateResponseMixin(unittest.TestCase):\n    def test_render_to_response(self):\n        view = TemplateResponseMixin()\n        view.request = HttpRequest()\n        view.template_name = 'template.html'\n        response = view.render_to_response({'key': 'value'})\n        self.assertIsInstance(response, TemplateResponse)\n\n    def test_get_template_names(self):\n        view = TemplateResponseMixin()\n        view.template_name = 'template.html'\n        names = view.get_template_names()\n        self.assertEqual(names, ['template.html'])\n\nclass TestTemplateView(unittest.TestCase):\n    def test_get(self):\n        view = TemplateView()\n        view.render_to_response = MagicMock()\n        view.get(HttpRequest())\n        view.render_to_response.assert_called_once()\n\nclass TestRedirectView(unittest.TestCase):\n    def test_get_redirect_url(self):\n        view = RedirectView()\n        view.url = '/redirect/%(slug)s/'\n        url = view.get_redirect_url(slug='test')\n        self.assertEqual(url, '/redirect/test/')\n\n    def test_get(self):\n        view = RedirectView()\n        view.get_redirect_url = MagicMock(return_value='/redirect/')\n        response = view.get(HttpRequest())\n        self.assertIsInstance(response, HttpResponseRedirect)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_759": ["\nimport unittest\nimport numpy as np\nfrom sklearn.decomposition import SparsePCA, MiniBatchSparsePCA\nfrom sklearn.utils.testing import assert_array_almost_equal, assert_equal\n\nclass TestSparsePCA(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n    def test_sparse_pca_fit(self):\n        sparse_pca = SparsePCA(n_components=2, alpha=0.1)\n        sparse_pca.fit(self.X)\n        self.assertEqual(sparse_pca.components_.shape, (2, 3))\n\n    def test_sparse_pca_transform(self):\n        sparse_pca = SparsePCA(n_components=2, alpha=0.1)\n        sparse_pca.fit(self.X)\n        X_transformed = sparse_pca.transform(self.X)\n        self.assertEqual(X_transformed.shape, (3, 2))\n\n    def test_mini_batch_sparse_pca_fit(self):\n        mini_batch_sparse_pca = MiniBatchSparsePCA(n_components=2, alpha=0.1, n_iter=10)\n        mini_batch_sparse_pca.fit(self.X)\n        self.assertEqual(mini_batch_sparse_pca.components_.shape, (2, 3))\n\n    def test_mini_batch_sparse_pca_transform(self):\n        mini_batch_sparse_pca = MiniBatchSparsePCA(n_components=2, alpha=0.1, n_iter=10)\n        mini_batch_sparse_pca.fit(self.X)\n        X_transformed = mini_batch_sparse_pca.transform(self.X)\n        self.assertEqual(X_transformed.shape, (3, 2))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_29": ["\nimport unittest\nimport os\nfrom astropy.cosmology import FlatLambdaCDM\nfrom astropy.cosmology.io.latex import write_latex\nfrom astropy.table import QTable\nfrom astropy.io.ascii import latex\nimport astropy.units as u\n\nclass TestLatexWriter(unittest.TestCase):\n    def setUp(self):\n        self.cosmo = FlatLambdaCDM(H0=70, Om0=0.3, Tcmb0=2.725)\n        self.file = 'test_cosmo.tex'\n\n    def tearDown(self):\n        if os.path.exists(self.file):\n            os.remove(self.file)\n\n    def test_write_latex(self):\n        write_latex(self.cosmo, self.file)\n        self.assertTrue(os.path.exists(self.file))\n\n        # Check that the file is not empty\n        with open(self.file, 'r') as f:\n            self.assertTrue(len(f.read()) > 0)\n\n        # Check that the file contains the correct LaTeX format\n        with open(self.file, 'r') as f:\n            latex_table = latex.read(f)\n            self.assertEqual(latex_table['$$H_0$$'][0], self.cosmo.H0.value)\n            self.assertEqual(latex_table['$$\\\\Omega_{m,0}$$'][0], self.cosmo.Om0)\n            self.assertEqual(latex_table['$$T_{0}$$'][0], self.cosmo.Tcmb0.value)\n\n    def test_write_latex_with_units(self):\n        cosmo = FlatLambdaCDM(H0=70 * u.km / u.s / u.Mpc, Om0=0.3, Tcmb0=2.725 * u.K)\n        write_latex(cosmo, self.file)\n        self.assertTrue(os.path.exists(self.file))\n\n        # Check that the file contains the correct values with units\n        with open(self.file, 'r') as f:\n            latex_table = latex.read(f)\n            self.assertEqual(latex_table['$$H_0$$'][0], cosmo.H0)\n            self.assertEqual(latex_table['$$\\\\Omega_{m,0}$$'][0], cosmo.Om0)\n            self.assertEqual(latex_table['$$T_{0}$$'][0], cosmo.Tcmb0)\n\n    def test_write_latex_without_latex_names(self):\n        write_latex(self.cosmo, self.file, latex_names=False)\n        self.assertTrue(os.path.exists(self.file))\n\n        # Check that the file contains the correct parameter names\n        with open(self.file, 'r') as f:\n            latex_table = latex.read(f)\n            self.assertTrue('H0' in latex_table.colnames)\n            self.assertTrue('Om0' in latex_table.colnames)\n            self.assertTrue('Tcmb0' in latex_table.colnames)\n\n    def test_write_latex_with_custom_cls(self):\n        class CustomQTable(QTable):\n            pass\n\n        write_latex(self.cosmo, self.file, cls=CustomQTable)\n        self.assertTrue(os.path.exists(self.file))\n\n        # Check that the file was created using the custom QTable class\n        with open(self.file, 'r') as f:\n            latex_table = latex.read(f)\n            self.assertIsInstance(latex_table, CustomQTable)\n\n    def test_write_latex_with_invalid_format(self):\n        with self.assertRaises(ValueError):\n            write_latex(self.cosmo, self.file, format='csv')\n\n    def test_write_latex_with_invalid_cls(self):\n        with self.assertRaises(TypeError):\n            write_latex(self.cosmo, self.file, cls=str)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_800": ["\nimport unittest\nimport numpy as np\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.datasets import make_regression\n\nclass TestCrossValidate(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_regression(n_samples=100, n_features=20, noise=0.1, random_state=42)\n        self.estimator = LinearRegression()\n\n    def test_cross_validate(self):\n        cv_results = cross_validate(self.estimator, self.X, self.y, cv=5, scoring=('r2', 'neg_mean_squared_error'))\n        self.assertIn('test_r2', cv_results)\n        self.assertIn('test_neg_mean_squared_error', cv_results)\n        self.assertIn('fit_time', cv_results)\n        self.assertIn('score_time', cv_results)\n        self.assertEqual(len(cv_results['test_r2']), 5)\n        self.assertEqual(len(cv_results['test_neg_mean_squared_error']), 5)\n        self.assertEqual(len(cv_results['fit_time']), 5)\n        self.assertEqual(len(cv_results['score_time']), 5)\n\n    def test_cross_validate_return_train_score(self):\n        cv_results = cross_validate(self.estimator, self.X, self.y, cv=5, scoring=('r2', 'neg_mean_squared_error'), return_train_score=True)\n        self.assertIn('train_r2', cv_results)\n        self.assertIn('train_neg_mean_squared_error', cv_results)\n        self.assertEqual(len(cv_results['train_r2']), 5)\n        self.assertEqual(len(cv_results['train_neg_mean_squared_error']), 5)\n\n    def test_cross_validate_return_estimator(self):\n        cv_results = cross_validate(self.estimator, self.X, self.y, cv=5, return_estimator=True)\n        self.assertIn('estimator', cv_results)\n        self.assertEqual(len(cv_results['estimator']), 5)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_113": ["\nfrom django.test import TestCase\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.questioner import MigrationQuestioner\nfrom unittest.mock import MagicMock, patch\nfrom django.db.migrations.state import ProjectState\nfrom django.db import models\nfrom django.apps import apps\n\nclass TestMigrationAutodetector(TestCase):\n    def setUp(self):\n        self.questioner = MigrationQuestioner()\n        self.from_state = ProjectState()\n        self.to_state = ProjectState()\n\n    def test_changes_method(self):\n        autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n        with patch('django.db.migrations.autodetector.MigrationAutodetector._detect_changes') as mock_detect_changes:\n            autodetector.changes(None)\n            mock_detect_changes.assert_called_once()\n\n    def test_deep_deconstruct_method(self):\n        autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n        field = models.CharField(max_length=200)\n        result = autodetector.deep_deconstruct(field)\n        self.assertEqual(result, ('django.db.models.CharField', [], {'max_length': 200}))\n\n    def test_only_relation_agnostic_fields_method(self):\n        autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n        fields = [('name', models.CharField(max_length=200))]\n        result = autodetector.only_relation_agnostic_fields(fields)\n        self.assertEqual(result, [('django.db.models.CharField', [], {'max_length': 200})])\n\n    def test_generate_created_models_method(self):\n        autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n        class NewModel(models.Model):\n            name = models.CharField(max_length=200)\n\n        self.to_state.apps = apps\n        self.to_state.models['test', 'newmodel'] = NewModel._meta\n        autodetector.new_model_keys = {('test', 'newmodel')}\n        with patch('django.db.migrations.autodetector.MigrationAutodetector.add_operation') as mock_add_operation:\n            autodetector.generate_created_models()\n            mock_add_operation.assert_called()\n\n    # Add more tests for other methods as needed...\n"], "sample_804": ["\nimport unittest\nimport numpy as np\nfrom sklearn.exceptions import NotFittedError, ValueError\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\nfrom scipy import sparse\n\nclass TestEncoders(unittest.TestCase):\n\n    def setUp(self):\n        self.X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        self.X_num = [[0, 1], [1, 3], [1, 2]]\n        self.X_transformed = np.array([[1., 0., 1., 0., 0.],\n                                       [0., 1., 0., 0., 1.],\n                                       [0., 1., 0., 1., 0.]])\n\n    def test_one_hot_encoder_fit(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        self.assertEqual(enc.categories_, [np.array(['Female', 'Male']),\n                                           np.array([1, 2, 3])])\n\n    def test_one_hot_encoder_transform(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        np.testing.assert_array_equal(enc.transform(self.X).toarray(),\n                                      self.X_transformed)\n\n    def test_one_hot_encoder_inverse_transform(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        np.testing.assert_array_equal(enc.inverse_transform(self.X_transformed),\n                                      np.array(self.X, dtype=object))\n\n    def test_one_hot_encoder_transform_unknown(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        X_unknown = [['Unknown', 4]]\n        X_unknown_transformed = np.array([[0., 0., 0., 0., 0.]])\n        np.testing.assert_array_equal(enc.transform(X_unknown).toarray(),\n                                      X_unknown_transformed)\n\n    def test_one_hot_encoder_transform_sparse(self):\n        enc = OneHotEncoder(handle_unknown='ignore', sparse=True)\n        enc.fit(self.X)\n        self.assertIsInstance(enc.transform(self.X), sparse.csr_matrix)\n\n    def test_one_hot_encoder_drop(self):\n        enc = OneHotEncoder(drop='first')\n        enc.fit(self.X)\n        X_transformed_drop = np.array([[0., 1., 0.],\n                                       [1., 0., 1.],\n                                       [1., 1., 0.]])\n        np.testing.assert_array_equal(enc.transform(self.X).toarray(),\n                                      X_transformed_drop)\n\n    def test_one_hot_encoder_drop_invalid(self):\n        with self.assertRaises(ValueError):\n            enc = OneHotEncoder(drop='invalid')\n            enc.fit(self.X)\n\n    def test_ordinal_encoder_fit(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        self.assertEqual(enc.categories_, [np.array(['Female', 'Male']),\n                                           np.array([1, 2, 3])])\n\n    def test_ordinal_encoder_transform(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        X_transformed_ordinal = np.array([[1., 0.],\n                                          [0., 2.],\n                                          [0., 1.]])\n        np.testing.assert_array_equal(enc.transform(self.X),\n                                      X_transformed_ordinal)\n\n    def test_ordinal_encoder_inverse_transform(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        np.testing.assert_array_equal(enc.inverse_transform(enc.transform(self.X)),\n                                      np.array(self.X, dtype=object))\n\n    def test_ordinal_encoder_transform_number(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X_num)\n        X_transformed_ordinal_num = np.array([[0., 0.],\n                                              [1., 2.],\n                                              [1., 1.]])\n        np.testing.assert_array_equal(enc.transform(self.X_num),\n                                      X_transformed_ordinal_num)\n\n    def test_ordinal_encoder_inverse_transform_number(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X_num)\n        np.testing.assert_array_equal(enc.inverse_transform(enc.transform(self.X_num)),\n                                      np.array(self.X_num, dtype=object))\n\n    def test_ordinal_encoder_transform_before_fit(self):\n        enc = OrdinalEncoder()\n        with self.assertRaises(NotFittedError):\n            enc.transform(self.X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_509": ["\nimport unittest\nimport matplotlib.dates as mdates\nfrom datetime import datetime, timedelta, timezone\nimport numpy as np\n\nclass TestDatesModule(unittest.TestCase):\n\n    def test_datestr2num(self):\n        self.assertEqual(mdates.datestr2num('2000-01-01'), 730120.0)\n\n    def test_date2num(self):\n        self.assertEqual(mdates.date2num(datetime(2000, 1, 1)), 730120.0)\n\n    def test_julian2num(self):\n        self.assertEqual(mdates.julian2num(2451545.0), 730120.0)\n\n    def test_num2julian(self):\n        self.assertEqual(mdates.num2julian(730120.0), 2451545.0)\n\n    def test_num2date(self):\n        self.assertEqual(mdates.num2date(730120.0), datetime(2000, 1, 1))\n\n    def test_num2timedelta(self):\n        self.assertEqual(mdates.num2timedelta(1), timedelta(days=1))\n\n    def test_drange(self):\n        self.assertTrue(np.array_equal(mdates.drange(datetime(2000, 1, 1), datetime(2000, 1, 3), timedelta(days=1)), np.array([730120.0, 730121.0, 730122.0])))\n\n    def test_DateFormatter(self):\n        formatter = mdates.DateFormatter('%Y-%m-%d')\n        self.assertEqual(formatter(730120.0), '2000-01-01')\n\n    def test_ConciseDateFormatter(self):\n        locator = mdates.AutoDateLocator()\n        formatter = mdates.ConciseDateFormatter(locator)\n        self.assertIsInstance(formatter(730120.0), str)\n\n    def test_AutoDateFormatter(self):\n        locator = mdates.AutoDateLocator()\n        formatter = mdates.AutoDateFormatter(locator)\n        self.assertIsInstance(formatter(730120.0), str)\n\n    def test_rrulewrapper(self):\n        rrule = mdates.rrulewrapper(mdates.HOURLY, dtstart=datetime(2000, 1, 1, tzinfo=timezone.utc))\n        self.assertEqual(rrule.after(datetime(2000, 1, 1, 1, tzinfo=timezone.utc)), datetime(2000, 1, 1, 2, tzinfo=timezone.utc))\n\n    def test_DateLocator(self):\n        locator = mdates.DateLocator()\n        self.assertEqual(locator._get_unit(), 1)\n\n    def test_RRuleLocator(self):\n        rrule = mdates.rrulewrapper(mdates.HOURLY, dtstart=datetime(2000, 1, 1, tzinfo=timezone.utc))\n        locator = mdates.RRuleLocator(rrule)\n        self.assertEqual(locator._get_unit(), 1/24)\n\n    def test_AutoDateLocator(self):\n        locator = mdates.AutoDateLocator()\n        self.assertEqual(locator.get_locator(datetime(2000, 1, 1), datetime(2001, 1, 1))._get_unit(), 1)\n\n    def test_YearLocator(self):\n        locator = mdates.YearLocator()\n        self.assertEqual(locator._get_unit(), 365.25)\n\n    def test_MonthLocator(self):\n        locator = mdates.MonthLocator()\n        self.assertEqual(locator._get_unit(), 30.44)\n\n    def test_WeekdayLocator(self):\n        locator = mdates.WeekdayLocator()\n        self.assertEqual(locator._get_unit(), 7)\n\n    def test_DayLocator(self):\n        locator = mdates.DayLocator()\n        self.assertEqual(locator._get_unit(), 1)\n\n    def test_HourLocator(self):\n        locator = mdates.HourLocator()\n        self.assertEqual(locator._get_unit(), 1/24)\n\n    def test_MinuteLocator(self):\n        locator = mdates.MinuteLocator()\n        self.assertEqual(locator._get_unit(), 1/(24*60))\n\n    def test_SecondLocator(self):\n        locator = mdates.SecondLocator()\n        self.assertEqual(locator._get_unit(), 1/(24*60*60))\n\n    def test_MicrosecondLocator(self):\n        locator = mdates.MicrosecondLocator()\n        self.assertEqual(locator._get_unit(), 1/(24*60*60*1000000))\n\n    def test_epoch2num(self):\n        self.assertEqual(mdates.epoch2num(0), 719163.0)\n\n    def test_num2epoch(self):\n        self.assertEqual(mdates.num2epoch(719163.0), 0.0)\n\n    def test_date_ticker_factory(self):\n        locator, formatter = mdates.date_ticker_factory(365)\n        self.assertIsInstance(locator, mdates.YearLocator)\n        self.assertIsInstance(formatter, mdates.DateFormatter)\n\n    def test_DateConverter(self):\n        converter = mdates.DateConverter()\n        self.assertIsInstance(converter.axisinfo(None, None), mdates.units.AxisInfo)\n\n    def test_ConciseDateConverter(self):\n        converter = mdates.ConciseDateConverter()\n        self.assertIsInstance(converter.axisinfo(None, None), mdates.units.AxisInfo)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_872": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics import (\n    auc,\n    average_precision_score,\n    coverage_error,\n    det_curve,\n    label_ranking_average_precision_score,\n    precision_recall_curve,\n    label_ranking_loss,\n    roc_auc_score,\n    roc_curve,\n    ndcg_score,\n    dcg_score,\n    top_k_accuracy_score,\n)\n\nclass TestMetricsRanking(unittest.TestCase):\n    def setUp(self):\n        self.y_true = np.array([0, 0, 1, 1])\n        self.y_score = np.array([0.1, 0.4, 0.35, 0.8])\n        self.y_true_multilabel = np.array([[1, 0, 0], [0, 0, 1]])\n        self.y_score_multilabel = np.array([[0.75, 0.5, 1], [1, 0.2, 0.1]])\n        self.k = 2\n        self.sample_weight = np.array([1, 2, 3, 4])\n        self.labels = np.array([0, 1, 2])\n        self.y_true_top_k = np.array([0, 1, 2, 2])\n        self.y_score_top_k = np.array([[0.5, 0.2, 0.2], [0.3, 0.4, 0.2], [0.2, 0.4, 0.3], [0.7, 0.2, 0.1]])\n\n    def test_auc(self):\n        x = np.array([0, 1, 2, 3])\n        y = np.array([0, 1, 2, 3])\n        self.assertEqual(auc(x, y), 6.0)\n\n    def test_average_precision_score(self):\n        self.assertAlmostEqual(average_precision_score(self.y_true, self.y_score), 0.8333, places=4)\n\n    def test_coverage_error(self):\n        self.assertAlmostEqual(coverage_error(self.y_true_multilabel, self.y_score_multilabel), 0.8333, places=4)\n\n    def test_det_curve(self):\n        fpr, fnr, thresholds = det_curve(self.y_true, self.y_score)\n        self.assertTrue(np.allclose(fpr, np.array([0.5, 0.5, 0.0])))\n        self.assertTrue(np.allclose(fnr, np.array([0.0, 0.5, 0.5])))\n        self.assertTrue(np.allclose(thresholds, np.array([0.35, 0.4, 0.8])))\n\n    def test_label_ranking_average_precision_score(self):\n        self.assertAlmostEqual(label_ranking_average_precision_score(self.y_true_multilabel, self.y_score_multilabel), 0.4167, places=4)\n\n    def test_precision_recall_curve(self):\n        precision, recall, thresholds = precision_recall_curve(self.y_true, self.y_score)\n        self.assertTrue(np.allclose(precision, np.array([0.5, 0.6667, 0.5, 1.0, 1.0])))\n        self.assertTrue(np.allclose(recall, np.array([1.0, 1.0, 0.5, 0.5, 0.0])))\n        self.assertTrue(np.allclose(thresholds, np.array([0.1, 0.35, 0.4, 0.8])))\n\n    def test_label_ranking_loss(self):\n        self.assertAlmostEqual(label_ranking_loss(self.y_true_multilabel, self.y_score_multilabel), 0.2857, places=4)\n\n    def test_roc_auc_score(self):\n        self.assertAlmostEqual(roc_auc_score(self.y_true, self.y_score), 0.75, places=2)\n\n    def test_roc_curve(self):\n        fpr, tpr, thresholds = roc_curve(self.y_true, self.y_score)\n        self.assertTrue(np.allclose(fpr, np.array([0.0, 0.5, 0.5, 1.0])))\n        self.assertTrue(np.allclose(tpr, np.array([0.0, 0.5, 1.0, 1.0])))\n        self.assertTrue(np.allclose(thresholds, np.array([1.8, 0.8, 0.4, 0.1])))\n\n    def test_ndcg_score(self):\n        true_relevance = np.asarray([[10, 0, 0, 1, 5]])\n        scores = np.asarray([[.1, .2, .3, 4, 70]])\n        self.assertAlmostEqual(ndcg_score(true_relevance, scores), 0.69, places=2)\n\n    def test_dcg_score(self):\n        true_relevance = np.asarray([[10, 0, 0, 1, 5]])\n        scores = np.asarray([[.1, .2, .3, 4, 70]])\n        self.assertAlmostEqual(dcg_score(true_relevance, scores), 9.49, places=2)\n\n    def test_top_k_accuracy_score(self):\n        self.assertAlmostEqual(top_k_accuracy_score(self.y_true_top_k, self.y_score_top_k, k=self.k), 0.75, places=2)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1077": ["\nfrom sympy import I, Rational, Symbol, pi, sqrt, S\nfrom sympy.geometry import Point, Point2D, Point3D\nfrom sympy.matrices import Matrix\nfrom sympy.utilities.pytest import raises\n\ndef test_point_init():\n    p = Point(1, 2, 3)\n    assert p == Point3D(1, 2, 3)\n    assert Point([1, 2]) == Point2D(1, 2)\n    assert Point(0, Symbol('x')) == Point2D(0, Symbol('x'))\n    assert Point(dim=4) == Point(0, 0, 0, 0)\n    assert Point(0.5, 0.25) == Point2D(Rational(1, 2), Rational(1, 4))\n    assert Point(0.5, 0.25, evaluate=False) == Point2D(0.5, 0.25)\n\ndef test_point_add():\n    p1 = Point(1, 2)\n    p2 = Point(0.1, 0.2)\n    assert p1 + p2 == Point2D(1.1, 2.2)\n\ndef test_point_sub():\n    p1 = Point(1, 2)\n    p2 = Point(0.1, 0.2)\n    assert p1 - p2 == Point2D(0.9, 1.8)\n\ndef test_point_mul():\n    p = Point(1, 2)\n    assert p * 2 == Point2D(2, 4)\n    assert 2 * p == Point2D(2, 4)\n\ndef test_point_div():\n    p = Point(1, 2)\n    assert p / 2 == Point2D(Rational(1, 2), 1)\n\ndef test_point_neg():\n    p = Point(1, 2)\n    assert -p == Point2D(-1, -2)\n\ndef test_point_abs():\n    p = Point(3, 4)\n    assert abs(p) == 5\n\ndef test_point_distance():\n    p1 = Point(1, 1)\n    p2 = Point(4, 5)\n    assert p1.distance(p2) == 5\n    assert p1.distance((0, 0)) == sqrt(2)\n\ndef test_point_taxicab_distance():\n    p1 = Point(1, 1)\n    p2 = Point(4, 5)\n    assert p1.taxicab_distance(p2) == 7\n\ndef test_point_canberra_distance():\n    p1 = Point(1, 1)\n    p2 = Point(3, 3)\n    assert p1.canberra_distance(p2) == 1\n    p1 = Point(0, 0)\n    p2 = Point(3, 3)\n    assert p1.canberra_distance(p2) == 2\n\ndef test_point_midpoint():\n    p1 = Point(1, 1)\n    p2 = Point(13, 5)\n    assert p1.midpoint(p2) == Point2D(7, 3)\n\ndef test_point_unit():\n    p = Point(3, 4)\n    assert p.unit == Point2D(3/5, 4/5)\n\ndef test_point_is_collinear():\n    p1, p2 = Point(0, 0), Point(1, 1)\n    p3, p4, p5 = Point(2, 2), Point(Symbol('x'), Symbol('x')), Point(1, 2)\n    assert Point.is_collinear(p1, p2, p3, p4)\n    assert not Point.is_collinear(p1, p2, p3, p5)\n\ndef test_point_is_concyclic():\n    p1, p2, p3, p4 = Point(1, 0), Point(0, 1), Point(-1, 0), Point(0, -1)\n    assert Point.is_concyclic(p1, p2, p3, p4)\n    p = Point(1, 1)\n    assert not Point.is_concyclic(p1, p2, p3, p)\n\ndef test_point_is_scalar_multiple():\n    p1 = Point(1, 2)\n    p2 = Point(2, 4)\n    assert p1.is_scalar_multiple(p2)\n    p3 = Point(2, 5)\n    assert not p1.is_scalar_multiple(p3)\n\ndef test_point2D_rotate():\n    p = Point2D(1, 0)\n    assert p.rotate(pi/2) == Point2D(0, 1)\n    assert p.rotate(pi/2, (2, 0)) == Point2D(2, -1)\n\ndef test_point2D_scale():\n    p = Point2D(1, 1)\n    assert p.scale(2) == Point2D(2, 1)\n    assert p.scale(2, 2) == Point2D(2, 2)\n\ndef test_point2D_translate():\n    p = Point2D(0, 1)\n    assert p.translate(2) == Point2D(2, 1)\n    assert p.translate(2, 2) == Point2D(2, 3)\n    assert p + Point2D(2, 2) == Point2D(2, 3)\n\ndef test_point3D_are_collinear():\n    p1, p2 = Point3D(0, 0, 0), Point3D(1, 1, 1)\n    p3, p4, p5 = Point3D(2, 2, 2), Point3D(Symbol('x'), Symbol('x'), Symbol('x')), Point3D(1, 2, 6)\n    assert Point3D.are_collinear(p1, p2, p3, p4)\n    assert not Point3D.are_collinear(p1, p2, p3, p5)\n\ndef test_point3D_scale():\n    p = Point3D(1, 1, 1)\n    assert p.scale(2) == Point3D(2, 1, 1)\n    assert p.scale(2, 2) == Point3D(2, 2, 1)\n    assert p.scale(2, 2, 2) == Point3D(2, 2, 2)\n\ndef test_point3D_translate():\n    p = Point3D(0, 1, 1)\n    assert p.translate(2) == Point3D(2, 1, 1)\n    assert p.translate(2, 2) == Point3D(2, 3, 1)\n    assert p + Point3D(2, 2, 2) == Point3D(2, 3, 3)\n\ndef test_point_exceptions():\n    with raises(TypeError):\n        Point(1, 2, '3')\n    with raises(TypeError):\n        Point('1', 2, 3)\n    with raises(TypeError):\n        Point(1, '2', 3)\n    with raises(ValueError):\n        Point(1)\n    with raises(ValueError):\n        Point(1, 2, dim=3)\n    with raises(ValueError):\n        Point(1, 2, 3, dim=2)\n    with raises(ValueError):\n        Point(1, 2, 3, dim=1)\n    with raises(ValueError):\n        Point(1, 2, 3, on_morph='error')\n    with raises(ValueError):\n        Point(1 + I, 2, 3)\n    with raises(ValueError):\n        Point(1, 2 + I, 3)\n    with raises(ValueError):\n        Point(1, 2, 3 + I)\n    with raises(ValueError):\n        Point(0.5, 0.25, 2).canberra_distance(Point(0, 0, 0))\n"], "sample_1194": ["\nimport unittest\nfrom sympy import symbols, sin, pi, Matrix, MatrixSymbol, Piecewise, Function, IndexedBase, Idx, Eq\nfrom sympy.printing.julia import julia_code\n\nclass TestJuliaCodePrinter(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_simple_expression(self):\n        self.assertEqual(julia_code(sin(self.x).series(self.x).removeO()), 'x .^ 5 / 120 - x .^ 3 / 6 + x')\n\n    def test_matrix_expression(self):\n        n = symbols('n', integer=True, positive=True)\n        A = MatrixSymbol('A', n, n)\n        self.assertEqual(julia_code(3*pi*A**3), '(3 * pi) * A ^ 3')\n\n    def test_piecewise_expression(self):\n        pw = Piecewise((self.x + 1, self.x > 0), (self.x, True))\n        self.assertEqual(julia_code(pw, assign_to=self.y), 'y = ((x > 0) ? (x + 1) : (x))')\n\n    def test_custom_function(self):\n        f = Function('f')\n        g = Function('g')\n        custom_functions = {\n            \"f\": \"existing_julia_fcn\",\n            \"g\": [(lambda x: x.is_Matrix, \"my_mat_fcn\"),\n                  (lambda x: not x.is_Matrix, \"my_fcn\")]\n        }\n        mat = Matrix([[1, self.x]])\n        self.assertEqual(julia_code(f(self.x) + g(self.x) + g(mat), user_functions=custom_functions),\n                         'existing_julia_fcn(x) + my_fcn(x) + my_mat_fcn([1 x])')\n\n    def test_indexed_expression(self):\n        len_y = 5\n        y = IndexedBase('y', shape=(len_y,))\n        t = IndexedBase('t', shape=(len_y,))\n        Dy = IndexedBase('Dy', shape=(len_y-1,))\n        i = Idx('i', len_y-1)\n        e = Eq(Dy[i], (y[i+1]-y[i])/(t[i+1]-t[i]))\n        self.assertEqual(julia_code(e.rhs, assign_to=e.lhs, contract=False),\n                         'Dy[i] = (y[i + 1] - y[i]) ./ (t[i + 1] - t[i])')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_176": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.state import ProjectState\n\nclass TestMigrationAutodetector(unittest.TestCase):\n\n    def setUp(self):\n        self.from_state = ProjectState(models={})\n        self.to_state = ProjectState(models={})\n        self.questioner = MagicMock()\n\n    def test_init(self):\n        autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n        self.assertEqual(autodetector.from_state, self.from_state)\n        self.assertEqual(autodetector.to_state, self.to_state)\n        self.assertEqual(autodetector.questioner, self.questioner)\n\n    @patch('django.db.migrations.autodetector.MigrationAutodetector.generate_renamed_models')\n    def test_detect_changes(self, mock_generate_renamed_models):\n        autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n        autodetector._prepare_field_lists = MagicMock()\n        autodetector._generate_through_model_map = MagicMock()\n        autodetector.generate_deleted_models = MagicMock()\n        autodetector.generate_created_models = MagicMock()\n        autodetector.generate_deleted_proxies = MagicMock()\n        autodetector.generate_created_proxies = MagicMock()\n        autodetector.generate_altered_options = MagicMock()\n        autodetector.generate_altered_managers = MagicMock()\n        autodetector.create_altered_indexes = MagicMock()\n        autodetector.create_altered_constraints = MagicMock()\n        autodetector.generate_removed_constraints = MagicMock()\n        autodetector.generate_removed_indexes = MagicMock()\n        autodetector.generate_renamed_fields = MagicMock()\n        autodetector.generate_removed_fields = MagicMock()\n        autodetector.generate_added_fields = MagicMock()\n        autodetector.generate_altered_fields = MagicMock()\n        autodetector.generate_altered_unique_together = MagicMock()\n        autodetector.generate_altered_index_together = MagicMock()\n        autodetector.generate_added_indexes = MagicMock()\n        autodetector.generate_added_constraints = MagicMock()\n        autodetector.generate_altered_db_table = MagicMock()\n        autodetector.generate_altered_order_with_respect_to = MagicMock()\n        autodetector._sort_migrations = MagicMock()\n        autodetector._build_migration_list = MagicMock()\n        autodetector._optimize_migrations = MagicMock()\n\n        autodetector._detect_changes()\n\n        mock_generate_renamed_models.assert_called_once()\n        autodetector._prepare_field_lists.assert_called_once()\n        autodetector._generate_through_model_map.assert_called_once()\n        autodetector.generate_deleted_models.assert_called_once()\n        autodetector.generate_created_models.assert_called_once()\n        autodetector.generate_deleted_proxies.assert_called_once()\n        autodetector.generate_created_proxies.assert_called_once()\n        autodetector.generate_altered_options.assert_called_once()\n        autodetector.generate_altered_managers.assert_called_once()\n        autodetector.create_altered_indexes.assert_called_once()\n        autodetector.create_altered_constraints.assert_called_once()\n        autodetector.generate_removed_constraints.assert_called_once()\n        autodetector.generate_removed_indexes.assert_called_once()\n        autodetector.generate_renamed_fields.assert_called_once()\n        autodetector.generate_removed_fields.assert_called_once()\n        autodetector.generate_added_fields.assert_called_once()\n        autodetector.generate_altered_fields.assert_called_once()\n        autodetector.generate_altered_unique_together.assert_called_once()\n        autodetector.generate_altered_index_together.assert_called_once()\n        autodetector.generate_added_indexes.assert_called_once()\n        autodetector.generate_added_constraints.assert_called_once()\n        autodetector.generate_altered_db_table.assert_called_once()\n        autodetector.generate_altered_order_with_respect_to.assert_called_once()\n        autodetector._sort_migrations.assert_called_once()\n        autodetector._build_migration_list.assert_called_once()\n        autodetector._optimize_migrations.assert_called_once()\n\n    # Add more tests for other methods\n"], "sample_814": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics.regression import (\n    mean_absolute_error,\n    mean_squared_error,\n    mean_squared_log_error,\n    median_absolute_error,\n    explained_variance_score,\n    r2_score,\n    max_error,\n    mean_tweedie_deviance,\n    mean_poisson_deviance,\n    mean_gamma_deviance,\n)\n\nclass TestRegressionMetrics(unittest.TestCase):\n    def setUp(self):\n        self.y_true = np.array([3, -0.5, 2, 7])\n        self.y_pred = np.array([2.5, 0.0, 2, 8])\n        self.multioutput = np.array([0.3, 0.7])\n        self.sample_weight = np.array([1, 1, 2, 1])\n\n    def test_mean_absolute_error(self):\n        self.assertAlmostEqual(mean_absolute_error(self.y_true, self.y_pred), 0.5)\n        self.assertAlmostEqual(mean_absolute_error(self.y_true, self.y_pred, multioutput='raw_values'), 0.5)\n        self.assertAlmostEqual(mean_absolute_error(self.y_true, self.y_pred, multioutput=self.multioutput), 0.85)\n        self.assertAlmostEqual(mean_absolute_error(self.y_true, self.y_pred, sample_weight=self.sample_weight), 0.45)\n\n    def test_mean_squared_error(self):\n        self.assertAlmostEqual(mean_squared_error(self.y_true, self.y_pred), 0.375)\n        self.assertAlmostEqual(mean_squared_error(self.y_true, self.y_pred, squared=False), 0.612)\n        self.assertAlmostEqual(mean_squared_error(self.y_true, self.y_pred, multioutput='raw_values'), 0.375)\n        self.assertAlmostEqual(mean_squared_error(self.y_true, self.y_pred, multioutput=self.multioutput), 0.475)\n        self.assertAlmostEqual(mean_squared_error(self.y_true, self.y_pred, sample_weight=self.sample_weight), 0.2857)\n\n    def test_mean_squared_log_error(self):\n        self.assertAlmostEqual(mean_squared_log_error(self.y_true, self.y_pred), 0.039)\n        self.assertAlmostEqual(mean_squared_log_error(self.y_true, self.y_pred, multioutput='raw_values'), 0.039)\n        self.assertAlmostEqual(mean_squared_log_error(self.y_true, self.y_pred, multioutput=self.multioutput), 0.039)\n        self.assertAlmostEqual(mean_squared_log_error(self.y_true, self.y_pred, sample_weight=self.sample_weight), 0.031)\n\n    def test_median_absolute_error(self):\n        self.assertAlmostEqual(median_absolute_error(self.y_true, self.y_pred), 0.5)\n\n    def test_explained_variance_score(self):\n        self.assertAlmostEqual(explained_variance_score(self.y_true, self.y_pred), 0.957)\n        self.assertAlmostEqual(explained_variance_score(self.y_true, self.y_pred, multioutput='raw_values'), 0.957)\n        self.assertAlmostEqual(explained_variance_score(self.y_true, self.y_pred, multioutput=self.multioutput), 0.957)\n        self.assertAlmostEqual(explained_variance_score(self.y_true, self.y_pred, sample_weight=self.sample_weight), 0.967)\n\n    def test_r2_score(self):\n        self.assertAlmostEqual(r2_score(self.y_true, self.y_pred), 0.948)\n        self.assertAlmostEqual(r2_score(self.y_true, self.y_pred, multioutput='raw_values'), 0.948)\n        self.assertAlmostEqual(r2_score(self.y_true, self.y_pred, multioutput=self.multioutput), 0.948)\n        self.assertAlmostEqual(r2_score(self.y_true, self.y_pred, sample_weight=self.sample_weight), 0.937)\n\n    def test_max_error(self):\n        self.assertAlmostEqual(max_error(self.y_true, self.y_pred), 1.0)\n\n    def test_mean_tweedie_deviance(self):\n        self.assertAlmostEqual(mean_tweedie_deviance(self.y_true, self.y_pred, p=1), 1.4260)\n        self.assertAlmostEqual(mean_tweedie_deviance(self.y_true, self.y_pred, p=2), 0.4286)\n        self.assertAlmostEqual(mean_tweedie_deviance(self.y_true, self.y_pred, p=3), 0.2046)\n        self.assertAlmostEqual(mean_tweedie_deviance(self.y_true, self.y_pred, p=0, sample_weight=self.sample_weight), 0.2857)\n\n    def test_mean_poisson_deviance(self):\n        self.assertAlmostEqual(mean_poisson_deviance(self.y_true, self.y_pred), 1.4260)\n        self.assertAlmostEqual(mean_poisson_deviance(self.y_true, self.y_pred, sample_weight=self.sample_weight), 0.2857)\n\n    def test_mean_gamma_deviance(self):\n        self.assertAlmostEqual(mean_gamma_deviance(self.y_true, self.y_pred), 0.4286)\n        self.assertAlmostEqual(mean_gamma_deviance(self.y_true, self.y_pred, sample_weight=self.sample_weight), 0.2857)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_878": ["\nimport unittest\nimport numpy as np\nfrom sklearn.utils._param_validation import (\n    Hidden,\n    Interval,\n    Options,\n    StrOptions,\n    _ArrayLikes,\n    _Booleans,\n    _Callables,\n    _CVObjects,\n    _InstancesOf,\n    _MissingValues,\n    _PandasNAConstraint,\n    _IterablesNotString,\n    _NoneConstraint,\n    _RandomStates,\n    _SparseMatrices,\n    _VerboseHelper,\n    HasMethods,\n    make_constraint,\n    generate_invalid_param_val,\n    generate_valid_param,\n    validate_params,\n    InvalidParameterError,\n)\nfrom scipy.sparse import csr_matrix\n\nclass TestParameterValidation(unittest.TestCase):\n\n    def test_hidden(self):\n        hidden_constraint = Hidden(\"array-like\")\n        self.assertEqual(hidden_constraint.constraint, \"array-like\")\n\n    def test_interval(self):\n        interval = Interval(np.number, 0, 1, closed=\"both\")\n        self.assertTrue(0.5 in interval)\n        self.assertFalse(1.5 in interval)\n\n    def test_options(self):\n        options = Options(str, {\"option1\", \"option2\"})\n        self.assertTrue(options.is_satisfied_by(\"option1\"))\n        self.assertFalse(options.is_satisfied_by(\"option3\"))\n\n    def test_str_options(self):\n        str_options = StrOptions({\"option1\", \"option2\"})\n        self.assertTrue(str_options.is_satisfied_by(\"option1\"))\n        self.assertFalse(str_options.is_satisfied_by(123))\n\n    def test_array_likes(self):\n        array_likes = _ArrayLikes()\n        self.assertTrue(array_likes.is_satisfied_by(np.array([1, 2, 3])))\n        self.assertFalse(array_likes.is_satisfied_by(\"not an array\"))\n\n    def test_booleans(self):\n        booleans = _Booleans()\n        self.assertTrue(booleans.is_satisfied_by(True))\n        self.assertTrue(booleans.is_satisfied_by(np.bool_(False)))\n        self.assertTrue(booleans.is_satisfied_by(1))\n        self.assertFalse(booleans.is_satisfied_by(\"not a boolean\"))\n\n    def test_callables(self):\n        callables = _Callables()\n        self.assertTrue(callables.is_satisfied_by(lambda x: x))\n        self.assertFalse(callables.is_satisfied_by(\"not a callable\"))\n\n    def test_cv_objects(self):\n        cv_objects = _CVObjects()\n        self.assertTrue(cv_objects.is_satisfied_by(5))\n        self.assertFalse(cv_objects.is_satisfied_by(\"not a cv object\"))\n\n    def test_instances_of(self):\n        instances_of = _InstancesOf(int)\n        self.assertTrue(instances_of.is_satisfied_by(1))\n        self.assertFalse(instances_of.is_satisfied_by(\"not an int\"))\n\n    def test_missing_values(self):\n        missing_values = _MissingValues()\n        self.assertTrue(missing_values.is_satisfied_by(np.nan))\n        self.assertFalse(missing_values.is_satisfied_by(\"not a missing value\"))\n\n    def test_pandas_na_constraint(self):\n        pandas_na = _PandasNAConstraint()\n        try:\n            import pandas as pd\n            self.assertTrue(pandas_na.is_satisfied_by(pd.NA))\n        except ImportError:\n            pass\n        self.assertFalse(pandas_na.is_satisfied_by(\"not pd.NA\"))\n\n    def test_iterables_not_string(self):\n        iterables_not_string = _IterablesNotString()\n        self.assertTrue(iterables_not_string.is_satisfied_by([1, 2, 3]))\n        self.assertFalse(iterables_not_string.is_satisfied_by(\"a string\"))\n\n    def test_none_constraint(self):\n        none_constraint = _NoneConstraint()\n        self.assertTrue(none_constraint.is_satisfied_by(None))\n        self.assertFalse(none_constraint.is_satisfied_by(\"not None\"))\n\n    def test_random_states(self):\n        random_states = _RandomStates()\n        self.assertTrue(random_states.is_satisfied_by(np.random.RandomState(42)))\n        self.assertFalse(random_states.is_satisfied_by(\"not a random state\"))\n\n    def test_sparse_matrices(self):\n        sparse_matrices = _SparseMatrices()\n        self.assertTrue(sparse_matrices.is_satisfied_by(csr_matrix([[0, 1], [1, 0]])))\n        self.assertFalse(sparse_matrices.is_satisfied_by(\"not a sparse matrix\"))\n\n    def test_verbose_helper(self):\n        verbose_helper = _VerboseHelper()\n        self.assertTrue(verbose_helper.is_satisfied_by(1))\n        self.assertFalse(verbose_helper.is_satisfied_by(\"not verbose\"))\n\n    def test_has_methods(self):\n        has_methods = HasMethods([\"method1\", \"method2\"])\n        class_with_methods = type(\"HasMethods\", (), {\"method1\": lambda self: None, \"method2\": lambda self: None})\n        self.assertTrue(has_methods.is_satisfied_by(class_with_methods()))\n        class_without_methods = type(\"NoMethods\", (), {})\n        self.assertFalse(has_methods.is_satisfied_by(class_without_methods()))\n\n    def test_make_constraint(self):\n        self.assertIsInstance(make_constraint(\"array-like\"), _ArrayLikes)\n        self.assertIsInstance(make_constraint(\"sparse matrix\"), _SparseMatrices)\n        self.assertIsInstance(make_constraint(\"random_state\"), _RandomStates)\n        self.assertIsInstance(make_constraint(callable), _Callables)\n        self.assertIsInstance(make_constraint(None), _NoneConstraint)\n        self.assertIsInstance(make_constraint(int), _InstancesOf)\n        self.assertIsInstance(make_constraint(\"boolean\"), _Booleans)\n        self.assertIsInstance(make_constraint(\"verbose\"), _VerboseHelper)\n        self.assertIsInstance(make_constraint(\"missing_values\"), _MissingValues)\n        self.assertIsInstance(make_constraint(\"cv_object\"), _CVObjects)\n\n    def test_generate_invalid_param_val(self):\n        self.assertNotEqual(generate_invalid_param_val(StrOptions({\"option1\", \"option2\"})), \"option1\")\n        self.assertNotEqual(generate_invalid_param_val(Interval(np.number, 0, 1, closed=\"both\")), 0.5)\n\n    def test_generate_valid_param(self):\n        self.assertIsInstance(generate_valid_param(_ArrayLikes()), np.ndarray)\n        self.assertIsInstance(generate_valid_param(_SparseMatrices()), csr_matrix)\n        self.assertIsInstance(generate_valid_param(_RandomStates()), np.random.RandomState)\n        self.assertTrue(callable(generate_valid_param(_Callables())))\n        self.assertIsNone(generate_valid_param(_NoneConstraint()))\n        self.assertIsInstance(generate_valid_param(_InstancesOf(int)), int)\n        self.assertIsInstance(generate_valid_param(_Booleans()), bool)\n        self.assertIsInstance(generate_valid_param(_VerboseHelper()), int)\n        self.assertIsInstance(generate_valid_param(_MissingValues()), float)\n        self.assertTrue(hasattr(generate_valid_param(HasMethods([\"method1\", \"method2\"])), \"method1\"))\n        self.assertTrue(hasattr(generate_valid_param(HasMethods([\"method1\", \"method2\"])), \"method2\"))\n        self.assertIn(generate_valid_param(StrOptions({\"option1\", \"option2\"})), {\"option1\", \"option2\"})\n        self.assertIn(generate_valid_param(Options(int, {1, 2, 3})), {1, 2, 3})\n        self.assertIn(generate_valid_param(Interval(np.number, 0, 1, closed=\"both\")), np.arange(0, 1, 0.1))\n\n    def test_validate_params(self):\n        @validate_params({\"param1\": [StrOptions({\"option1\", \"option2\"})]})\n        def func(param1):\n            return param1\n        self.assertEqual(func(\"option1\"), \"option1\")\n        with self.assertRaises(InvalidParameterError):\n            func(\"invalid_option\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_168": ["\nfrom django.test import TestCase\nfrom django.core.management import call_command\nfrom django.contrib.contenttypes.models import ContentType\nfrom unittest.mock import patch\nimport io\n\nclass RemoveStaleContentTypesCommandTest(TestCase):\n    def setUp(self):\n        # Create a stale content type for testing\n        self.stale_content_type = ContentType.objects.create(\n            name='stale model',\n            app_label='stale_app',\n            model='stale_model',\n        )\n\n    def test_remove_stale_contenttypes(self):\n        # Check that the stale content type exists before removal\n        self.assertTrue(ContentType.objects.filter(pk=self.stale_content_type.pk).exists())\n\n        # Call the command to remove stale content types\n        with patch('builtins.input', return_value='yes'):\n            call_command('remove_stale_contenttypes', include_stale_apps=True)\n\n        # Check that the stale content type has been removed\n        self.assertFalse(ContentType.objects.filter(pk=self.stale_content_type.pk).exists())\n\n    def test_remove_stale_contenttypes_interactive(self):\n        # Check that the stale content type exists before removal\n        self.assertTrue(ContentType.objects.filter(pk=self.stale_content_type.pk).exists())\n\n        # Call the command to remove stale content types\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            with patch('builtins.input', side_effect=['no', 'yes']):\n                call_command('remove_stale_contenttypes', include_stale_apps=True)\n\n        # Check that the stale content type still exists after 'no' input\n        self.assertTrue(ContentType.objects.filter(pk=self.stale_content_type.pk).exists())\n\n        # Check that the prompt was displayed\n        self.assertIn(\"Are you sure you want to delete these content types?\", fake_out.getvalue())\n\n        # Call the command to remove stale content types\n        with patch('builtins.input', return_value='yes'):\n            call_command('remove_stale_contenttypes', include_stale_apps=True)\n\n        # Check that the stale content type has been removed\n        self.assertFalse(ContentType.objects.filter(pk=self.stale_content_type.pk).exists())\n"], "sample_348": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.forms import ValidationError\nfrom django.forms.models import (\n    ModelForm, modelform_factory, BaseModelFormSet, modelformset_factory,\n    BaseInlineFormSet, inlineformset_factory, ModelChoiceField, ModelMultipleChoiceField\n)\nfrom django.db.models import Model, fields\n\nclass TestModelForm(unittest.TestCase):\n\n    def setUp(self):\n        class TestModel(Model):\n            test_field = fields.CharField(max_length=10)\n\n        self.form_class = modelform_factory(TestModel)\n\n    def test_model_form_creation(self):\n        form = self.form_class()\n        self.assertIsInstance(form, ModelForm)\n\n    def test_model_form_fields(self):\n        form = self.form_class()\n        self.assertIn('test_field', form.fields)\n\n    def test_model_form_validation(self):\n        form = self.form_class(data={'test_field': 'test_value'})\n        self.assertTrue(form.is_valid())\n\n    # More tests...\n\nclass TestModelFormSet(unittest.TestCase):\n\n    def setUp(self):\n        class TestModel(Model):\n            test_field = fields.CharField(max_length=10)\n\n        self.formset_class = modelformset_factory(TestModel)\n\n    def test_model_formset_creation(self):\n        formset = self.formset_class()\n        self.assertIsInstance(formset, BaseModelFormSet)\n\n    # More tests...\n\n# Similarly, create TestModelChoiceField and TestModelMultipleChoiceField classes for ModelChoiceField and ModelMultipleChoiceField respectively.\n# Each test class should have its own setUp method and tests for the specific functionality.\n\n# Include more test classes for BaseInlineFormSet and inlineformset_factory if needed.\n"], "sample_377": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.conf import settings\nfrom django.http import Http404, HttpRequest, HttpResponseNotFound\nfrom django.test import RequestFactory\n\nfrom django.views.debug import (\n    CallableSettingWrapper,\n    ExceptionCycleWarning,\n    ExceptionReporter,\n    SafeExceptionReporterFilter,\n    default_urlconf,\n    get_default_exception_reporter_filter,\n    technical_404_response,\n    technical_500_response,\n)\n\nclass TestDebugViews(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.request = self.factory.get('/')\n\n    @patch('django.views.debug.get_exception_reporter_class')\n    def test_technical_500_response(self, mock_get_exception_reporter_class):\n        mock_reporter = MagicMock()\n        mock_reporter.get_traceback_html.return_value = 'html'\n        mock_reporter.get_traceback_text.return_value = 'text'\n        mock_get_exception_reporter_class.return_value = MagicMock(return_value=mock_reporter)\n\n        self.request.accepts = MagicMock(return_value=True)\n        response = technical_500_response(self.request, Exception, 'error', None)\n        self.assertEqual(response.content, b'html')\n\n        self.request.accepts = MagicMock(return_value=False)\n        response = technical_500_response(self.request, Exception, 'error', None)\n        self.assertEqual(response.content, b'text')\n\n    @patch('django.views.debug.get_default_exception_reporter_filter')\n    def test_get_default_exception_reporter_filter(self, mock_import_string):\n        mock_import_string.return_value = MagicMock()\n        get_default_exception_reporter_filter()\n        mock_import_string.assert_called_once_with(settings.DEFAULT_EXCEPTION_REPORTER_FILTER)\n\n    @patch('django.views.debug.get_exception_reporter_filter')\n    def test_get_exception_reporter_filter(self, mock_get_exception_reporter_filter):\n        mock_get_exception_reporter_filter.return_value = 'filter'\n        self.assertEqual(get_exception_reporter_filter(self.request), 'filter')\n\n    @patch('django.views.debug.import_string')\n    def test_get_exception_reporter_class(self, mock_import_string):\n        mock_import_string.return_value = 'class'\n        self.assertEqual(get_exception_reporter_class(self.request), 'class')\n\n    def test_technical_404_response(self):\n        exception = Http404({'path': '/test/', 'tried': []})\n        response = technical_404_response(self.request, exception)\n        self.assertIsInstance(response, HttpResponseNotFound)\n\n    def test_default_urlconf(self):\n        response = default_urlconf(self.request)\n        self.assertIn(b'default URLconf', response.content)\n\nclass TestSafeExceptionReporterFilter(unittest.TestCase):\n    def setUp(self):\n        self.filter = SafeExceptionReporterFilter()\n\n    def test_cleanse_setting(self):\n        self.assertEqual(self.filter.cleanse_setting('SECRET_KEY', 'secret'), '********************')\n\n    def test_get_safe_settings(self):\n        settings_dict = self.filter.get_safe_settings()\n        self.assertIsInstance(settings_dict, dict)\n\n    def test_get_safe_request_meta(self):\n        request = HttpRequest()\n        request.META = {'SECRET_KEY': 'secret'}\n        meta_dict = self.filter.get_safe_request_meta(request)\n        self.assertIsInstance(meta_dict, dict)\n\n    def test_get_safe_cookies(self):\n        request = HttpRequest()\n        request.COOKIES = {'SECRET_KEY': 'secret'}\n        cookies_dict = self.filter.get_safe_cookies(request)\n        self.assertIsInstance(cookies_dict, dict)\n\n    def test_get_post_parameters(self):\n        request = HttpRequest()\n        request.POST = {'password': 'secret'}\n        request.sensitive_post_parameters = ['password']\n        post_dict = self.filter.get_post_parameters(request)\n        self.assertIsInstance(post_dict, dict)\n\nclass TestExceptionReporter(unittest.TestCase):\n    def setUp(self):\n        self.request = HttpRequest()\n        self.reporter = ExceptionReporter(self.request, Exception, 'error', None)\n\n    def test_get_traceback_data(self):\n        data = self.reporter.get_traceback_data()\n        self.assertIsInstance(data, dict)\n\n    def test_get_traceback_html(self):\n        html = self.reporter.get_traceback_html()\n        self.assertIsInstance(html, str)\n\n    def test_get_traceback_text(self):\n        text = self.reporter.get_traceback_text()\n        self.assertIsInstance(text, str)\n\n    def test_get_traceback_frames(self):\n        frames = self.reporter.get_traceback_frames()\n        self.assertIsInstance(frames, list)\n"], "sample_1043": ["\nimport unittest\nfrom sympy import symbols, sin, cos, Integral, Sum, Derivative, Matrix\nfrom sympy.printing.mathematica import mathematica_code, MCodePrinter\n\nclass TestMathematicaCodePrinter(unittest.TestCase):\n\n    def setUp(self):\n        self.printer = MCodePrinter()\n        self.x, self.y = symbols('x y')\n\n    def test_mathematica_code_function(self):\n        self.assertEqual(mathematica_code(sin(self.x)), \"Sin[x]\")\n        self.assertEqual(mathematica_code(cos(self.x)), \"Cos[x]\")\n\n    def test_mcode_printer_sin(self):\n        self.assertEqual(self.printer.doprint(sin(self.x)), \"Sin[x]\")\n\n    def test_mcode_printer_cos(self):\n        self.assertEqual(self.printer.doprint(cos(self.x)), \"Cos[x]\")\n\n    def test_integral_printer(self):\n        self.assertEqual(self.printer.doprint(Integral(sin(self.x), self.x)), \"Hold[Integrate[Sin[x], x]]\")\n\n    def test_sum_printer(self):\n        self.assertEqual(self.printer.doprint(Sum(self.x**self.y, (self.y, 1, self.x))), \"Hold[Sum[x**y, {y, 1, x}]]\")\n\n    def test_derivative_printer(self):\n        self.assertEqual(self.printer.doprint(Derivative(sin(self.x), self.x)), \"Hold[D[Sin[x], x]]\")\n\n    def test_matrix_printer(self):\n        self.assertEqual(self.printer.doprint(Matrix([[1, 2], [3, 4]])), \"{{1, 2}, {3, 4}}\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1123": ["\nimport unittest\nfrom sympy import Symbol, S, ConditionSet, pi, Eq, sin, Interval, And, FiniteSet, UniversalSet\nfrom sympy.abc import x, y, z\n\nclass TestConditionSet(unittest.TestCase):\n    def setUp(self):\n        self.x = Symbol('x')\n        self.y = Symbol('y')\n        self.z = Symbol('z')\n\n    def test_creation(self):\n        self.assertEqual(ConditionSet(self.x, Eq(sin(self.x), 0), Interval(0, 2*pi)), {0, pi, 2*pi})\n        self.assertEqual(ConditionSet(self.x, self.x**2 > 4, S.Reals), {x for x in S.Reals if x**2 > 4})\n\n    def test_empty_base_set(self):\n        self.assertEqual(ConditionSet(self.x, self.x > 0, EmptySet()), EmptySet())\n\n    def test_finite_set(self):\n        self.assertEqual(ConditionSet(self.x, self.x < 1, {self.x, self.z}), {self.x})\n\n    def test_union(self):\n        self.assertEqual(ConditionSet(self.x, self.x < 1, {self.x, self.z}).subs(self.x, self.y), ConditionSet(self.x, self.x < 1, FiniteSet(self.y, self.z)))\n\n    def test_substitution(self):\n        self.assertEqual(ConditionSet(self.x, self.x < 1, {self.x, self.z}).subs(self.x, 1), ConditionSet(self.x, self.x < 1, FiniteSet(self.z)))\n\n    def test_universal_set(self):\n        self.assertEqual(ConditionSet(self.x, self.x < 1).base_set, UniversalSet)\n\n    def test_contains(self):\n        self.assertTrue(self.x in ConditionSet(self.x, self.x < 1, {self.x, self.z}))\n        self.assertFalse(5 in ConditionSet(self.x, self.x**2 > 4, Interval(2, 4)))\n\n    def test_as_relational(self):\n        self.assertEqual(ConditionSet(self.x, self.x < 1).as_relational(0.5), And(self.x < 1, UniversalSet.contains(0.5)))\n\n    def test_dummy_eq(self):\n        self.assertTrue(ConditionSet(self.x, self.x < 1).dummy_eq(ConditionSet(self.y, self.y < 1)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1107": ["\nimport unittest\nfrom sympy.utilities.iterables import *\n\nclass TestIterables(unittest.TestCase):\n    def setUp(self):\n        self.seq = [1, 2, 3, 4]\n        self.how = [2, [3], {2}, (1, (3,), 1)]\n        self.graph = (['A', 'B', 'C', 'D'], [('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'A')])\n\n    def test_flatten(self):\n        self.assertEqual(flatten(self.seq), self.seq)\n        self.assertEqual(flatten(self.seq, levels=1), self.seq)\n        self.assertEqual(flatten(self.seq, levels=0), self.seq)\n        self.assertEqual(flatten([self.seq, self.seq]), self.seq + self.seq)\n\n    def test_reshape(self):\n        self.assertEqual(reshape(self.seq, self.how), [[1, 2, [3, 3], {4}, (1, (3,), 1)]])\n\n    def test_group(self):\n        self.assertEqual(group(self.seq), [[1], [2], [3], [4]])\n        self.assertEqual(group(self.seq, multiple=False), [(1, 1), (2, 1), (3, 1), (4, 1)])\n\n    def test_multiset(self):\n        self.assertEqual(multiset(self.seq), {1: 1, 2: 1, 3: 1, 4: 1})\n\n    def test_subsets(self):\n        self.assertEqual(list(subsets(self.seq, 2)), [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)])\n\n    def test_connected_components(self):\n        self.assertEqual(connected_components(self.graph), [['A', 'B', 'C', 'D']])\n\n    def test_topological_sort(self):\n        self.assertEqual(topological_sort(self.graph), ['A', 'B', 'C', 'D'])\n\n    # Add more tests for other functions as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_127": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.template.defaultfilters import *\nfrom django.utils.safestring import SafeData, mark_safe\n\nclass TestDefaultFilters(unittest.TestCase):\n\n    def test_addslashes(self):\n        self.assertEqual(addslashes('test'), 'test')\n        self.assertEqual(addslashes(\"test's\"), \"test\\\\'s\")\n\n    def test_capfirst(self):\n        self.assertEqual(capfirst('test'), 'Test')\n\n    def test_escapejs_filter(self):\n        self.assertEqual(escapejs_filter('test'), 'test')\n        self.assertEqual(escapejs_filter(\"test's\"), \"test\\\\u0027s\")\n\n    def test_floatformat(self):\n        self.assertEqual(floatformat(34.23234), \"34.2\")\n\n    # Add more tests for other filters\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_190": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.core.cache.backends.base import BaseCache, DEFAULT_TIMEOUT\n\nclass TestBaseCache(unittest.TestCase):\n    def setUp(self):\n        self.params = {'timeout': 300, 'KEY_PREFIX': 'test', 'VERSION': 1}\n        self.cache = BaseCache(self.params)\n\n    def test_init(self):\n        self.assertEqual(self.cache.default_timeout, 300)\n        self.assertEqual(self.cache.key_prefix, 'test')\n        self.assertEqual(self.cache.version, 1)\n\n    def test_get_backend_timeout(self):\n        with patch('django.core.cache.backends.base.time.time') as mock_time:\n            mock_time.return_value = 1000\n            self.assertEqual(self.cache.get_backend_timeout(10), 1010)\n            self.assertEqual(self.cache.get_backend_timeout(0), -1)\n            self.assertEqual(self.cache.get_backend_timeout(DEFAULT_TIMEOUT), 1300)\n\n    def test_make_key(self):\n        self.assertEqual(self.cache.make_key('key'), 'test:1:key')\n\n    def test_add(self):\n        with self.assertRaises(NotImplementedError):\n            self.cache.add('key', 'value')\n\n    def test_get(self):\n        with self.assertRaises(NotImplementedError):\n            self.cache.get('key')\n\n    def test_set(self):\n        with self.assertRaises(NotImplementedError):\n            self.cache.set('key', 'value')\n\n    def test_touch(self):\n        with self.assertRaises(NotImplementedError):\n            self.cache.touch('key')\n\n    def test_delete(self):\n        with self.assertRaises(NotImplementedError):\n            self.cache.delete('key')\n\n    def test_get_many(self):\n        self.cache.get = MagicMock(side_effect=['value1', 'value2'])\n        result = self.cache.get_many(['key1', 'key2'])\n        self.assertEqual(result, {'key1': 'value1', 'key2': 'value2'})\n\n    def test_get_or_set(self):\n        self.cache.get = MagicMock(side_effect=[None, 'value'])\n        self.cache.add = MagicMock()\n        result = self.cache.get_or_set('key', 'value')\n        self.assertEqual(result, 'value')\n        self.cache.add.assert_called_once_with('key', 'value', timeout=DEFAULT_TIMEOUT, version=None)\n\n    def test_has_key(self):\n        self.cache.get = MagicMock(return_value='value')\n        self.assertTrue(self.cache.has_key('key'))\n        self.cache.get.assert_called_once_with('key', version=None)\n\n    def test_incr(self):\n        self.cache.get = MagicMock(return_value=5)\n        self.cache.set = MagicMock()\n        result = self.cache.incr('key')\n        self.assertEqual(result, 6)\n        self.cache.set.assert_called_once_with('key', 6, version=None)\n\n    def test_decr(self):\n        self.cache.get = MagicMock(return_value=5)\n        self.cache.set = MagicMock()\n        result = self.cache.decr('key')\n        self.assertEqual(result, 4)\n        self.cache.set.assert_called_once_with('key', 4, version=None)\n\n    def test_set_many(self):\n        self.cache.set = MagicMock()\n        data = {'key1': 'value1', 'key2': 'value2'}\n        self.cache.set_many(data)\n        self.cache.set.assert_any_call('key1', 'value1', timeout=DEFAULT_TIMEOUT, version=None)\n        self.cache.set.assert_any_call('key2', 'value2', timeout=DEFAULT_TIMEOUT, version=None)\n\n    def test_delete_many(self):\n        self.cache.delete = MagicMock()\n        keys = ['key1', 'key2']\n        self.cache.delete_many(keys)\n        self.cache.delete.assert_any_call('key1', version=None)\n        self.cache.delete.assert_any_call('key2', version=None)\n\n    def test_clear(self):\n        with self.assertRaises(NotImplementedError):\n            self.cache.clear()\n\n    def test_incr_version(self):\n        self.cache.get = MagicMock(return_value='value')\n        self.cache.set = MagicMock()\n        self.cache.delete = MagicMock()\n        result = self.cache.incr_version('key')\n        self.assertEqual(result, 2)\n        self.cache.set.assert_called_once_with('key', 'value', version=2)\n        self.cache.delete.assert_called_once_with('key', version=1)\n\n    def test_decr_version(self):\n        self.cache.get = MagicMock(return_value='value')\n        self.cache.set = MagicMock()\n        self.cache.delete = MagicMock()\n        result = self.cache.decr_version('key')\n        self.assertEqual(result, 0)\n        self.cache.set.assert_called_once_with('key', 'value', version=0)\n        self.cache.delete.assert_called_once_with('key', version=1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_136": ["\nfrom django.http import HttpRequest\nfrom django.test import SimpleTestCase\nfrom urllib.parse import urlencode\nfrom django.http.request import HttpHeaders, split_domain_port, validate_host, bytes_to_text, QueryDict\n\nclass TestHttpRequest(SimpleTestCase):\n    def setUp(self):\n        self.request = HttpRequest()\n        self.request.META = {\n            'SERVER_NAME': 'testserver',\n            'SERVER_PORT': '80',\n            'QUERY_STRING': 'key1=value1&key2=value2',\n            'HTTP_HOST': 'testserver:80',\n            'CONTENT_TYPE': 'application/x-www-form-urlencoded'\n        }\n        self.request.body = urlencode({'key3': 'value3'}).encode()\n        self.request._set_content_type_params(self.request.META)\n\n    def test_headers(self):\n        self.assertEqual(self.request.headers['Content-Type'], 'application/x-www-form-urlencoded')\n\n    def test_get_host(self):\n        self.assertEqual(self.request.get_host(), 'testserver:80')\n\n    def test_get_port(self):\n        self.assertEqual(self.request.get_port(), '80')\n\n    def test_get_full_path(self):\n        self.assertEqual(self.request.get_full_path(), '?key1=value1&key2=value2')\n\n    def test_get_raw_uri(self):\n        self.assertEqual(self.request.get_raw_uri(), 'http://testserver:80/?key1=value1&key2=value2')\n\n    def test_build_absolute_uri(self):\n        self.assertEqual(self.request.build_absolute_uri(), 'http://testserver:80/?key1=value1&key2=value2')\n\n    def test_scheme(self):\n        self.assertEqual(self.request.scheme, 'http')\n\n    def test_is_secure(self):\n        self.assertFalse(self.request.is_secure())\n\n    def test_is_ajax(self):\n        self.assertFalse(self.request.is_ajax())\n\n    def test_encoding(self):\n        self.request.encoding = 'utf-8'\n        self.assertEqual(self.request.encoding, 'utf-8')\n\n    def test_load_post_and_files(self):\n        self.request.method = 'POST'\n        self.request._load_post_and_files()\n        self.assertEqual(self.request.POST['key3'], 'value3')\n\nclass TestHttpHeaders(SimpleTestCase):\n    def setUp(self):\n        self.environ = {\n            'HTTP_CONTENT_TYPE': 'application/json',\n            'HTTP_HOST': 'testserver',\n            'CONTENT_LENGTH': '100',\n            'SERVER_NAME': 'testserver',\n            'SERVER_PORT': '80',\n        }\n        self.headers = HttpHeaders(self.environ)\n\n    def test_parse_header_name(self):\n        self.assertEqual(HttpHeaders.parse_header_name('HTTP_CONTENT_TYPE'), 'Content-Type')\n        self.assertEqual(HttpHeaders.parse_header_name('CONTENT_LENGTH'), 'Content-Length')\n        self.assertEqual(HttpHeaders.parse_header_name('SERVER_NAME'), None)\n\n    def test_getitem(self):\n        self.assertEqual(self.headers['Content-Type'], 'application/json')\n        self.assertEqual(self.headers['Host'], 'testserver')\n        self.assertEqual(self.headers['Content_Length'], '100')\n\nclass TestSplitDomainPort(SimpleTestCase):\n    def test_split_domain_port(self):\n        self.assertEqual(split_domain_port('testserver:80'), ('testserver', '80'))\n        self.assertEqual(split_domain_port('testserver'), ('testserver', ''))\n        self.assertEqual(split_domain_port('[2001:db8:85a3:8d3:1319:8a2e:370:7348]:80'),\n                         ('[2001:db8:85a3:8d3:1319:8a2e:370:7348]', '80'))\n        self.assertEqual(split_domain_port('[2001:db8:85a3:8d3:1319:8a2e:370:7348]'),\n                         ('[2001:db8:85a3:8d3:1319:8a2e:370:7348]', ''))\n\nclass TestValidateHost(SimpleTestCase):\n    def test_validate_host(self):\n        self.assertTrue(validate_host('testserver', ['testserver']))\n        self.assertTrue(validate_host('sub.testserver', ['.testserver']))\n        self.assertFalse(validate_host('testserver', ['anotherserver']))\n        self.assertTrue(validate_host('testserver', ['*']))\n\nclass TestBytesToText(SimpleTestCase):\n    def test_bytes_to_text(self):\n        self.assertEqual(bytes_to_text(b'test', 'utf-8'), 'test')\n        self.assertEqual(bytes_to_text('test', 'utf-8'), 'test')\n\nclass TestQueryDict(SimpleTestCase):\n    def setUp(self):\n        self.query_dict = QueryDict('key1=value1&key2=value2')\n\n    def test_fromkeys(self):\n        q = QueryDict.fromkeys(['key1', 'key2'], 'value')\n        self.assertEqual(q['key1'], 'value')\n        self.assertEqual(q['key2'], 'value')\n\n    def test_urlencode(self):\n        self.assertEqual(self.query_dict.urlencode(), 'key1=value1&key2=value2')\n"], "sample_447": ["\nfrom decimal import Decimal\nfrom unittest import TestCase\nfrom unittest.mock import Mock, patch\n\nfrom django.core.exceptions import EmptyResultSet, FieldDoesNotExist, FieldError\nfrom django.db import DatabaseError, NotSupportedError, connection\nfrom django.db.models import fields\nfrom django.db.models.constants import LOOKUP_SEP\nfrom django.db.models.query_utils import Q\nfrom django.utils.functional import cached_property\n\nfrom .expressions import (\n    Expression,\n    F,\n    Func,\n    Value,\n    RawSQL,\n    Star,\n    Col,\n    Ref,\n    ExpressionList,\n    OrderByList,\n    ExpressionWrapper,\n    NegatedExpression,\n    When,\n    Case,\n    Subquery,\n    Exists,\n    OrderBy,\n    Window,\n    WindowFrame,\n    RowRange,\n    ValueRange,\n    CombinedExpression,\n    DurationExpression,\n    TemporalSubtraction,\n    ResolvedOuterRef,\n    OuterRef,\n)\n\nclass TestExpressions(TestCase):\n    def setUp(self):\n        self.mock_compiler = Mock()\n        self.mock_connection = Mock()\n\n    def test_expression_repr(self):\n        # Test the __repr__ method of the Expression class\n        expr = Expression()\n        expr.name = \"test\"\n        expr.output_field = fields.CharField()\n        self.assertEqual(repr(expr), \"<Expression: test>\")\n\n    def test_expression_resolve_expression(self):\n        # Test the resolve_expression method of the Expression class\n        expr = Expression()\n        query = Mock()\n        resolved_expr = expr.resolve_expression(query)\n        self.assertIsInstance(resolved_expr, Expression)\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the F class\n    def test_f_resolve_expression(self):\n        f_expr = F(\"test\")\n        query = Mock()\n        resolved_expr = f_expr.resolve_expression(query)\n        self.assertIsInstance(resolved_expr, F)\n        query.resolve_ref.assert_called_once_with(\"test\", True, None, False)\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the Func class\n    def test_func_as_sql(self):\n        func_expr = Func(F(\"test\"), function=\"UPPER\")\n        sql, params = func_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"UPPER(%s)\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the Value class\n    def test_value_as_sql(self):\n        value_expr = Value(\"test\")\n        sql, params = value_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"%s\")\n        self.assertEqual(params, [\"test\"])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the RawSQL class\n    def test_raw_sql_as_sql(self):\n        raw_sql_expr = RawSQL(\"SELECT * FROM test\", [])\n        sql, params = raw_sql_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"(SELECT * FROM test)\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the Star class\n    def test_star_as_sql(self):\n        star_expr = Star()\n        sql, params = star_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"*\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the Col class\n    def test_col_as_sql(self):\n        col_expr = Col(\"test\", \"column\")\n        sql, params = col_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, '\"test\".\"column\"')\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the Ref class\n    def test_ref_as_sql(self):\n        ref_expr = Ref(\"test\", F(\"column\"))\n        sql, params = ref_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, '\"test\"')\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the ExpressionList class\n    def test_expression_list_as_sql(self):\n        expr_list = ExpressionList(F(\"column1\"), F(\"column2\"))\n        sql, params = expr_list.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"%s, %s\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the OrderByList class\n    def test_order_by_list_as_sql(self):\n        order_by_list = OrderByList(F(\"column1\"), \"-column2\")\n        sql, params = order_by_list.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"ORDER BY %s, %s DESC\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the ExpressionWrapper class\n    def test_expression_wrapper_as_sql(self):\n        expr_wrapper = ExpressionWrapper(F(\"column\"), fields.CharField())\n        sql, params = expr_wrapper.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"%s\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the NegatedExpression class\n    def test_negated_expression_as_sql(self):\n        negated_expr = NegatedExpression(Q(column=1))\n        sql, params = negated_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"NOT (%s)\")\n        self.assertEqual(params, [1])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the When class\n    def test_when_as_sql(self):\n        when_expr = When(Q(column=1), then=Value(\"yes\"))\n        sql, params = when_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"WHEN %s THEN %s\")\n        self.assertEqual(params, [1, \"yes\"])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the Case class\n    def test_case_as_sql(self):\n        case_expr = Case(When(Q(column=1), then=Value(\"yes\")), default=Value(\"no\"))\n        sql, params = case_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"CASE WHEN %s THEN %s ELSE %s END\")\n        self.assertEqual(params, [1, \"yes\", \"no\"])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the Subquery class\n    def test_subquery_as_sql(self):\n        subquery_expr = Subquery(Mock())\n        sql, params = subquery_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"(%s)\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the Exists class\n    def test_exists_as_sql(self):\n        exists_expr = Exists(Mock())\n        sql, params = exists_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"EXISTS(%s)\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the OrderBy class\n    def test_order_by_as_sql(self):\n        order_by_expr = OrderBy(F(\"column\"))\n        sql, params = order_by_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"%s ASC\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the Window class\n    def test_window_as_sql(self):\n        window_expr = Window(F(\"column\"), partition_by=F(\"partition\"))\n        sql, params = window_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"%s OVER (PARTITION BY %s)\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the WindowFrame class\n    def test_window_frame_as_sql(self):\n        frame_expr = WindowFrame(start=1, end=2)\n        with self.assertRaises(NotImplementedError):\n            frame_expr.as_sql(self.mock_compiler, self.mock_connection)\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the RowRange class\n    def test_row_range_as_sql(self):\n        row_range_expr = RowRange(start=1, end=2)\n        sql, params = row_range_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"ROWS BETWEEN 1 PRECEDING AND 2 FOLLOWING\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the ValueRange class\n    def test_value_range_as_sql(self):\n        value_range_expr = ValueRange(start=1, end=2)\n        sql, params = value_range_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the CombinedExpression class\n    def test_combined_expression_as_sql(self):\n        combined_expr = CombinedExpression(F(\"column1\"), \"+\", F(\"column2\"))\n        sql, params = combined_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"(%s + %s)\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the DurationExpression class\n    def test_duration_expression_as_sql(self):\n        duration_expr = DurationExpression(F(\"column1\"), \"+\", F(\"column2\"))\n        sql, params = duration_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"(%s + %s)\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the TemporalSubtraction class\n    def test_temporal_subtraction_as_sql(self):\n        temporal_sub_expr = TemporalSubtraction(F(\"column1\"), F(\"column2\"))\n        sql, params = temporal_sub_expr.as_sql(self.mock_compiler, self.mock_connection)\n        self.assertEqual(sql, \"%s - %s\")\n        self.assertEqual(params, [])\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the ResolvedOuterRef class\n    def test_resolved_outer_ref_as_sql(self):\n        resolved_outer_ref_expr = ResolvedOuterRef(\"column\")\n        with self.assertRaises(ValueError):\n            resolved_outer_ref_expr.as_sql(self.mock_compiler, self.mock_connection)\n\n    # Add more test methods for other classes and methods as needed\n\n    # Test the OuterRef class\n    def test_outer_ref_resolve_expression(self):\n        outer_ref_expr = OuterRef(\"column\")\n        resolved_expr = outer_ref_expr.resolve_expression()\n        self.assertIsInstance(resolved_expr, ResolvedOuterRef)\n        self.assertEqual(resolved_expr.name, \"column\")\n\n    # Add more test methods for other classes and methods as needed\n\n# Add more test classes for other modules and functions as needed\n"], "sample_80": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.models.sql.query import Query, JoinPromoter\nfrom django.db.models import Model, CharField, IntegerField, ForeignKey\n\nclass TestQueryMethods(unittest.TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            name = CharField(max_length=50)\n            age = IntegerField()\n\n        class RelatedModel(Model):\n            test_model = ForeignKey(TestModel, on_delete=Model.CASCADE)\n            info = CharField(max_length=100)\n\n        self.TestModel = TestModel\n        self.RelatedModel = RelatedModel\n\n    def test_query_initialization(self):\n        query = Query(self.TestModel)\n        self.assertEqual(query.model, self.TestModel)\n\n    def test_join_promoter_add_votes(self):\n        promoter = JoinPromoter(connector='OR', num_children=2, negated=False)\n        promoter.add_votes(['table1', 'table2', 'table1'])\n        self.assertEqual(promoter.votes, {'table1': 2, 'table2': 1})\n\n    def test_query_add_filter(self):\n        query = Query(self.TestModel)\n        query.add_filter(('name', 'Test'))\n        self.assertEqual(query.where.children[0].children[0].rhs, 'Test')\n\n    @patch('django.db.models.sql.query.Query.join')\n    def test_query_setup_joins(self, mock_join):\n        query = Query(self.TestModel)\n        mock_join.return_value = 'alias'\n        join_info = query.setup_joins(['relatedmodel', 'info'], self.TestModel._meta, 'alias')\n        self.assertEqual(join_info.final_field.name, 'info')\n        self.assertEqual(join_info.opts.model, self.RelatedModel)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_257": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.core import exceptions\nfrom django.db.models.fields import json\nfrom django.db.models import Model\n\nclass TestJSONField(unittest.TestCase):\n    def setUp(self):\n        self.field = json.JSONField()\n        self.model = Model\n        self.model._meta.required_db_vendor = None\n        self.model._meta.required_db_features = set()\n        self.connection = MagicMock()\n        self.connection.vendor = 'postgresql'\n        self.connection.features.supports_json_field = True\n\n    def test_from_db_value(self):\n        self.assertEqual(self.field.from_db_value('{\"key\": \"value\"}', None, self.connection), {\"key\": \"value\"})\n\n    def test_get_prep_value(self):\n        self.assertEqual(self.field.get_prep_value({\"key\": \"value\"}), '{\"key\": \"value\"}')\n\n    def test_validate(self):\n        self.assertIsNone(self.field.validate({\"key\": \"value\"}, self.model()))\n        with self.assertRaises(exceptions.ValidationError):\n            self.field.validate('invalid_json', self.model())\n\n    def test_check(self):\n        self.assertEqual(self.field.check(databases=['default']), [])\n\n    def test_deconstruct(self):\n        self.assertEqual(self.field.deconstruct(), ('JSONField', 'django.db.models.fields.json', (), {}))\n\n    def test_formfield(self):\n        form_field = self.field.formfield()\n        self.assertEqual(form_field.encoder, self.field.encoder)\n        self.assertEqual(form_field.decoder, self.field.decoder)\n\nclass TestKeyTransform(unittest.TestCase):\n    def setUp(self):\n        self.transform = json.KeyTransform('key')\n        self.compiler = MagicMock()\n        self.connection = MagicMock()\n\n    def test_preprocess_lhs(self):\n        self.transform.lhs = 'lhs'\n        self.compiler.compile.return_value = ('lhs', [])\n        self.assertEqual(self.transform.preprocess_lhs(self.compiler, self.connection), ('lhs', [], ['key']))\n\n    # Add more tests for other methods in KeyTransform class...\n\n# Add tests for other classes in the file...\n"], "sample_1030": ["\nimport pytest\nfrom sympy import Point, Circle, Triangle, Symbol\nfrom sympy.geometry.util import are_similar, centroid, closest_points, convex_hull, farthest_points, intersection\nfrom sympy.utilities.pytest import raises\n\ndef test_are_similar():\n    c1, c2 = Circle(Point(0, 0), 4), Circle(Point(1, 4), 3)\n    t1 = Triangle(Point(0, 0), Point(1, 0), Point(0, 1))\n    t2 = Triangle(Point(0, 0), Point(2, 0), Point(0, 2))\n    t3 = Triangle(Point(0, 0), Point(3, 0), Point(0, 1))\n    assert are_similar(t1, t2)\n    assert not are_similar(t1, t3)\n    with raises(GeometryError):\n        are_similar(c1, t1)\n\ndef test_centroid():\n    p = Point(0, 0)\n    q = Point(2, 0)\n    s = Segment(p, q)\n    poly = Polygon((0, 0), (1, 0), (1, 1), (0, 1))\n    assert centroid(p, q) == Point(1, 0)\n    assert centroid(s) == Point(1, 0)\n    assert centroid(poly) == Point(0.5, 0.5)\n\ndef test_closest_points():\n    p1, p2, p3 = Point(1, 1), Point(1, 2), Point(3, 1)\n    assert closest_points(p1, p2, p3) == {(p1, p3)}\n    with raises(ValueError):\n        closest_points(p1)\n\ndef test_convex_hull():\n    points = [(1, 1), (1, 2), (3, 1), (-5, 2), (15, 4)]\n    hull = convex_hull(*points)\n    assert len(hull.args) == 4\n    assert all(p in hull for p in points)\n\ndef test_farthest_points():\n    p1, p2, p3 = Point(1, 1), Point(1, 2), Point(3, 1)\n    assert farthest_points(p1, p2, p3) == {(p1, p2)}\n    with raises(ValueError):\n        farthest_points(p1)\n\ndef test_intersection():\n    c = Circle(Point(0, 0), 1)\n    p = Point(1, 0)\n    assert intersection(c, p) == []\n    l1 = Line(Point(0, 0), Point(1, 0))\n    l2 = Line(Point(0, 0), Point(0, 1))\n    assert intersection(c, l1, l2) == [Point(0, 0)]\n"], "sample_898": ["\nimport unittest\nfrom sklearn.compose import ColumnTransformer, make_column_transformer, make_column_selector\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nimport numpy as np\nimport pandas as pd\n\nclass TestColumnTransformer(unittest.TestCase):\n\n    def setUp(self):\n        self.X = pd.DataFrame({\n            'city': ['London', 'London', 'Paris', 'Sallisaw'],\n            'rating': [5, 3, 4, 5],\n            'price': [100, 200, 300, 400]\n        })\n        self.ct = make_column_transformer(\n            (StandardScaler(), make_column_selector(dtype_include=np.number)),\n            (OneHotEncoder(), make_column_selector(dtype_include=object))\n        )\n\n    def test_fit_transform(self):\n        X_trans = self.ct.fit_transform(self.X)\n        self.assertIsInstance(X_trans, np.ndarray)\n        self.assertEqual(X_trans.shape[0], self.X.shape[0])\n\n    def test_transform(self):\n        self.ct.fit(self.X)\n        X_trans = self.ct.transform(self.X)\n        self.assertIsInstance(X_trans, np.ndarray)\n        self.assertEqual(X_trans.shape[0], self.X.shape[0])\n\n    def test_get_feature_names_out(self):\n        self.ct.fit(self.X)\n        feature_names = self.ct.get_feature_names_out()\n        self.assertIsInstance(feature_names, np.ndarray)\n        self.assertEqual(len(feature_names), self.ct.transform(self.X).shape[1])\n\n    def test_set_output(self):\n        self.ct.set_output(transform=\"pandas\")\n        self.ct.fit(self.X)\n        X_trans = self.ct.transform(self.X)\n        self.assertIsInstance(X_trans, pd.DataFrame)\n\n    def test_remainder(self):\n        ct_remainder = make_column_transformer(\n            (StandardScaler(), make_column_selector(dtype_include=np.number)),\n            remainder='passthrough'\n        )\n        ct_remainder.fit(self.X)\n        X_trans = ct_remainder.transform(self.X)\n        self.assertIsInstance(X_trans, np.ndarray)\n        self.assertEqual(X_trans.shape[1], self.X.shape[1])\n\n    def test_invalid_column_selector(self):\n        with self.assertRaises(ValueError):\n            ct_invalid = make_column_transformer(\n                (StandardScaler(), ['invalid_column'])\n            )\n            ct_invalid.fit(self.X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_199": ["\nfrom django.db.models import expressions\nfrom django.db import connection\nfrom django.test import TestCase\nfrom django.db.models import fields\nfrom unittest.mock import MagicMock\n\nclass TestExpressions(TestCase):\n    def setUp(self):\n        self.expression = expressions.Expression()\n        self.combined_expression = expressions.CombinedExpression(expressions.F('field1'), '+', expressions.F('field2'))\n        self.f_expression = expressions.F('field1')\n        self.value_expression = expressions.Value(10)\n        self.func_expression = expressions.Func(expressions.F('field1'), function='SUM')\n        self.raw_sql_expression = expressions.RawSQL('SELECT * FROM table', [])\n        self.star_expression = expressions.Star()\n        self.random_expression = expressions.Random()\n        self.col_expression = expressions.Col('alias', fields.IntegerField())\n        self.ref_expression = expressions.Ref('refs', expressions.F('field1'))\n        self.expression_list = expressions.ExpressionList(expressions.F('field1'), expressions.F('field2'))\n        self.expression_wrapper = expressions.ExpressionWrapper(expressions.F('field1'), fields.IntegerField())\n        self.when_expression = expressions.When(condition=Q(field1=1), then=expressions.F('field2'))\n        self.case_expression = expressions.Case(expressions.When(condition=Q(field1=1), then=expressions.F('field2')))\n        self.subquery = expressions.Subquery(self.model_class.objects.all())\n        self.exists_expression = expressions.Exists(self.subquery)\n        self.order_by_expression = expressions.OrderBy(self.expression)\n        self.window_expression = expressions.Window(self.expression)\n\n    def test_expression_str(self):\n        self.assertEqual(str(self.expression), \"\")\n\n    def test_combined_expression_str(self):\n        self.assertEqual(str(self.combined_expression), \"field1 + field2\")\n\n    def test_f_expression_str(self):\n        self.assertEqual(str(self.f_expression), \"F(field1)\")\n\n    def test_value_expression_str(self):\n        self.assertEqual(str(self.value_expression), \"Value(10)\")\n\n    def test_func_expression_str(self):\n        self.assertEqual(str(self.func_expression), \"SUM(field1)\")\n\n    def test_raw_sql_expression_str(self):\n        self.assertEqual(str(self.raw_sql_expression), \"RawSQL(SELECT * FROM table, [])\")\n\n    def test_star_expression_str(self):\n        self.assertEqual(str(self.star_expression), \"'*'\")\n\n    def test_random_expression_str(self):\n        self.assertEqual(str(self.random_expression), \"Random()\")\n\n    def test_col_expression_str(self):\n        self.assertEqual(str(self.col_expression), \"Col(alias, IntegerField())\")\n\n    def test_ref_expression_str(self):\n        self.assertEqual(str(self.ref_expression), \"Ref(refs, field1)\")\n\n    def test_expression_list_str(self):\n        self.assertEqual(str(self.expression_list), \"field1, field2\")\n\n    def test_expression_wrapper_str(self):\n        self.assertEqual(str(self.expression_wrapper), \"ExpressionWrapper(field1)\")\n\n    def test_when_expression_str(self):\n        self.assertEqual(str(self.when_expression), \"WHEN (field1 = 1) THEN field2\")\n\n    def test_case_expression_str(self):\n        self.assertEqual(str(self.case_expression), \"CASE WHEN (field1 = 1) THEN field2, ELSE None\")\n\n    def test_subquery_expression_str(self):\n        self.assertEqual(str(self.subquery), \"Subquery(SELECT...)\")\n\n    def test_exists_expression_str(self):\n        self.assertEqual(str(self.exists_expression), \"EXISTS(SELECT...)\")\n\n    def test_order_by_expression_str(self):\n        self.assertEqual(str(self.order_by_expression), \" ASC\")\n\n    def test_window_expression_str(self):\n        self.assertEqual(str(self.window_expression), \" OVER ()\")\n\n    # Add more tests for other methods and edge cases as needed\n"], "sample_292": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.middleware.csrf import (\n    CSRF_SESSION_KEY, CSRF_TOKEN_LENGTH, REASON_BAD_ORIGIN, REASON_BAD_TOKEN, REASON_NO_CSRF_COOKIE,\n    CsrfViewMiddleware, _compare_masked_tokens, get_token, _sanitize_token, _get_new_csrf_token\n)\nfrom django.conf import settings\nfrom django.core.exceptions import DisallowedHost\nfrom django.http import HttpResponse\nfrom urllib.parse import urlparse\n\nsettings.configure(\n    CSRF_COOKIE_NAME='csrftoken',\n    CSRF_HEADER_NAME='HTTP_X_CSRFTOKEN',\n    CSRF_COOKIE_AGE=3140000,\n    CSRF_COOKIE_DOMAIN=None,\n    CSRF_COOKIE_PATH='/',\n    CSRF_COOKIE_SECURE=False,\n    CSRF_COOKIE_HTTPONLY=False,\n    CSRF_COOKIE_SAMESITE='Lax',\n    CSRF_TRUSTED_ORIGINS=[],\n    CSRF_USE_SESSIONS=False,\n    SESSION_COOKIE_DOMAIN=None,\n)\n\nclass TestCsrfMiddleware(unittest.TestCase):\n\n    def setUp(self):\n        self.middleware = CsrfViewMiddleware()\n        self.request = Mock()\n        self.response = Mock()\n\n    def test_get_token_no_cookie(self):\n        self.request.META = {}\n        token = get_token(self.request)\n        self.assertEqual(len(token), CSRF_TOKEN_LENGTH)\n        self.assertEqual(self.request.META['CSRF_COOKIE_USED'], True)\n\n    def test_get_token_with_cookie(self):\n        self.request.META = {\"CSRF_COOKIE\": _get_new_csrf_token()}\n        token = get_token(self.request)\n        self.assertEqual(len(token), CSRF_TOKEN_LENGTH)\n        self.assertEqual(self.request.META['CSRF_COOKIE_USED'], True)\n\n    def test_sanitize_token_invalid(self):\n        token = 'invalid_token'\n        sanitized_token = _sanitize_token(token)\n        self.assertNotEqual(sanitized_token, token)\n        self.assertEqual(len(sanitized_token), CSRF_TOKEN_LENGTH)\n\n    def test_sanitize_token_valid(self):\n        token = _get_new_csrf_token()\n        sanitized_token = _sanitize_token(token)\n        self.assertEqual(sanitized_token, token)\n\n    def test_compare_masked_tokens_same(self):\n        token = _get_new_csrf_token()\n        self.assertTrue(_compare_masked_tokens(token, token))\n\n    def test_compare_masked_tokens_different(self):\n        token1 = _get_new_csrf_token()\n        token2 = _get_new_csrf_token()\n        self.assertFalse(_compare_masked_tokens(token1, token2))\n\n    def test_process_request_no_cookie(self):\n        self.request.META = {}\n        self.middleware.process_request(self.request)\n        self.assertNotIn('CSRF_COOKIE', self.request.META)\n\n    def test_process_request_with_cookie(self):\n        token = _get_new_csrf_token()\n        self.request.META = {'CSRF_COOKIE': token}\n        self.middleware.process_request(self.request)\n        self.assertEqual(self.request.META['CSRF_COOKIE'], token)\n\n    # More tests for process_view, process_response, _origin_verified, _get_token, _set_token, _accept, _reject can be added similarly.\n"], "sample_460": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.contrib.admin import AdminSite, ModelAdmin, NotRegistered, AlreadyRegistered\nfrom django.contrib.admin.sites import site\nfrom django.db.models.base import ModelBase\nfrom django.core.exceptions import ImproperlyConfigured\n\nclass TestAdminSite(unittest.TestCase):\n    def setUp(self):\n        self.admin_site = AdminSite()\n\n    def test_register(self):\n        class TestModel(ModelBase):\n            pass\n        TestModel._meta = Mock(abstract=False, swapped=False)\n        self.admin_site.register(TestModel)\n        self.assertIn(TestModel, self.admin_site._registry)\n        with self.assertRaises(ImproperlyConfigured):\n            TestModel._meta.abstract = True\n            self.admin_site.register(TestModel)\n        with self.assertRaises(AlreadyRegistered):\n            self.admin_site.register(TestModel)\n\n    def test_unregister(self):\n        class TestModel(ModelBase):\n            pass\n        TestModel._meta = Mock(abstract=False, swapped=False)\n        self.admin_site.register(TestModel)\n        self.admin_site.unregister(TestModel)\n        self.assertNotIn(TestModel, self.admin_site._registry)\n        with self.assertRaises(NotRegistered):\n            self.admin_site.unregister(TestModel)\n\n    def test_is_registered(self):\n        class TestModel(ModelBase):\n            pass\n        TestModel._meta = Mock(abstract=False, swapped=False)\n        self.admin_site.register(TestModel)\n        self.assertTrue(self.admin_site.is_registered(TestModel))\n        self.admin_site.unregister(TestModel)\n        self.assertFalse(self.admin_site.is_registered(TestModel))\n\n    def test_actions(self):\n        def test_action(modeladmin, request, queryset):\n            pass\n        self.admin_site.add_action(test_action)\n        self.assertIn('test_action', dict(self.admin_site.actions))\n        self.admin_site.disable_action('test_action')\n        self.assertNotIn('test_action', dict(self.admin_site.actions))\n\n    def test_has_permission(self):\n        request = Mock(user=Mock(is_active=True, is_staff=True))\n        self.assertTrue(self.admin_site.has_permission(request))\n        request.user.is_active = False\n        self.assertFalse(self.admin_site.has_permission(request))\n        request.user.is_active = True\n        request.user.is_staff = False\n        self.assertFalse(self.admin_site.has_permission(request))\n\n    # Add more tests for other methods as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_772": ["\nimport unittest\nfrom sklearn.metrics import classification\nimport numpy as np\n\nclass TestClassificationMetrics(unittest.TestCase):\n    def setUp(self):\n        self.y_true = np.array([0, 1, 2, 0, 1, 2])\n        self.y_pred = np.array([0, 2, 1, 0, 0, 1])\n        self.labels = [0, 1, 2]\n        self.sample_weight = np.array([1, 1, 2, 1, 1, 1])\n\n    def test_accuracy_score(self):\n        self.assertEqual(classification.accuracy_score(self.y_true, self.y_pred), 0.5)\n        self.assertEqual(classification.accuracy_score(self.y_true, self.y_pred, normalize=False), 3)\n        self.assertEqual(classification.accuracy_score(self.y_true, self.y_pred, sample_weight=self.sample_weight), 0.45)\n\n    def test_confusion_matrix(self):\n        expected_matrix = np.array([[2, 0, 1], [0, 1, 1], [1, 1, 1]])\n        np.testing.assert_array_equal(classification.confusion_matrix(self.y_true, self.y_pred, labels=self.labels), expected_matrix)\n\n    # Add more test methods for other functions in the classification module\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_36": ["\nimport unittest\nimport numpy as np\nfrom astropy.stats import (biweight_location, biweight_scale, biweight_midvariance, biweight_midcovariance, biweight_midcorrelation)\n\nclass TestBiweight(unittest.TestCase):\n    def setUp(self):\n        np.random.seed(0)\n        self.data = np.random.normal(0, 1, 1000)\n\n    def test_biweight_location(self):\n        loc = biweight_location(self.data)\n        self.assertIsInstance(loc, float)\n\n    def test_biweight_scale(self):\n        scale = biweight_scale(self.data)\n        self.assertIsInstance(scale, float)\n        self.assertGreater(scale, 0)\n\n    def test_biweight_midvariance(self):\n        midvar = biweight_midvariance(self.data)\n        self.assertIsInstance(midvar, float)\n        self.assertGreater(midvar, 0)\n\n    def test_biweight_midcovariance(self):\n        midcov = biweight_midcovariance(self.data)\n        self.assertIsInstance(midcov, np.ndarray)\n        self.assertEqual(midcov.shape, (1, 1))\n\n    def test_biweight_midcorrelation(self):\n        data2 = np.random.normal(0, 1, 1000)\n        midcorr = biweight_midcorrelation(self.data, data2)\n        self.assertIsInstance(midcorr, float)\n        self.assertGreaterEqual(midcorr, -1)\n        self.assertLessEqual(midcorr, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_770": ["\nimport unittest\nimport numpy as np\nfrom sklearn.model_selection._split import KFold, StratifiedKFold, GroupKFold, LeaveOneOut, LeavePOut, ShuffleSplit, StratifiedShuffleSplit, PredefinedSplit, train_test_split\n\nclass TestSplitMethods(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n        self.y = np.array([1, 2, 1, 2])\n        self.groups = np.array([1, 1, 2, 2])\n\n    def test_kfold(self):\n        kf = KFold(n_splits=2)\n        splits = list(kf.split(self.X))\n        self.assertEqual(len(splits), 2)\n\n    def test_stratifiedkfold(self):\n        skf = StratifiedKFold(n_splits=2)\n        splits = list(skf.split(self.X, self.y))\n        self.assertEqual(len(splits), 2)\n\n    def test_groupkfold(self):\n        gkf = GroupKFold(n_splits=2)\n        splits = list(gkf.split(self.X, self.y, self.groups))\n        self.assertEqual(len(splits), 2)\n\n    def test_leaveoneout(self):\n        loo = LeaveOneOut()\n        splits = list(loo.split(self.X))\n        self.assertEqual(len(splits), len(self.X))\n\n    def test_leavepout(self):\n        lpo = LeavePOut(p=2)\n        splits = list(lpo.split(self.X))\n        self.assertGreater(len(splits), 0)\n\n    def test_shufflesplit(self):\n        ss = ShuffleSplit(n_splits=2, test_size=0.5)\n        splits = list(ss.split(self.X))\n        self.assertEqual(len(splits), 2)\n\n    def test_stratifiedshufflesplit(self):\n        sss = StratifiedShuffleSplit(n_splits=2, test_size=0.5)\n        splits = list(sss.split(self.X, self.y))\n        self.assertEqual(len(splits), 2)\n\n    def test_predefinedsplit(self):\n        test_fold = [0, 1, -1, 1]\n        ps = PredefinedSplit(test_fold)\n        splits = list(ps.split(self.X))\n        self.assertEqual(len(splits), 2)\n\n    def test_train_test_split(self):\n        X_train, X_test, y_train, y_test = train_test_split(self.X, self.y, test_size=0.5)\n        self.assertEqual(len(X_train), len(X_test))\n        self.assertEqual(len(y_train), len(y_test))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_235": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock, call\nfrom django.db.backends.base.base import BaseDatabaseWrapper\n\nclass TestBaseDatabaseWrapper(unittest.TestCase):\n    def setUp(self):\n        self.settings_dict = {\n            'NAME': 'test_db',\n            'USER': 'test_user',\n            'PASSWORD': 'test_password',\n            'HOST': 'localhost',\n            'PORT': '5432',\n            'AUTOCOMMIT': True,\n            'CONN_MAX_AGE': 60,\n            'TIME_ZONE': None\n        }\n        self.wrapper = BaseDatabaseWrapper(self.settings_dict)\n\n    def test_init(self):\n        self.assertEqual(self.wrapper.settings_dict, self.settings_dict)\n        self.assertFalse(self.wrapper.autocommit)\n        self.assertFalse(self.wrapper.in_atomic_block)\n        self.assertEqual(self.wrapper.savepoint_state, 0)\n        self.assertEqual(self.wrapper.savepoint_ids, [])\n        self.assertTrue(self.wrapper.commit_on_exit)\n        self.assertFalse(self.wrapper.needs_rollback)\n\n    def test_ensure_timezone(self):\n        self.assertFalse(self.wrapper.ensure_timezone())\n\n    def test_timezone(self):\n        self.assertIsNone(self.wrapper.timezone)\n\n    def test_timezone_name(self):\n        self.assertEqual(self.wrapper.timezone_name, 'UTC')\n\n    def test_queries_logged(self):\n        self.assertTrue(self.wrapper.queries_logged)\n\n    @patch('django.db.backends.base.base.BaseDatabaseWrapper.get_connection_params')\n    @patch('django.db.backends.base.base.BaseDatabaseWrapper.get_new_connection')\n    @patch('django.db.backends.base.base.BaseDatabaseWrapper.set_autocommit')\n    @patch('django.db.backends.base.base.BaseDatabaseWrapper.init_connection_state')\n    def test_connect(self, mock_init_connection_state, mock_set_autocommit, mock_get_new_connection, mock_get_connection_params):\n        self.wrapper.connect()\n        mock_get_connection_params.assert_called_once()\n        mock_get_new_connection.assert_called_once()\n        mock_set_autocommit.assert_called_once_with(self.settings_dict['AUTOCOMMIT'])\n        mock_init_connection_state.assert_called_once()\n\n    # Add more tests for other methods and edge cases as needed\n"], "sample_646": ["\nimport pytest\nfrom unittest import TestCase\nfrom _pytest.unittest import pytest_pycollect_makeitem, UnitTestCase, TestCaseFunction\nfrom _pytest.python import Module, Class\nfrom _pytest.compat import is_async_function\n\n# Mocking a unittest.TestCase subclass\nclass MockUnitTestCase(TestCase):\n    def test_method(self):\n        pass\n\n# Mocking a pytest.python.Module and Class for testing pytest_pycollect_makeitem\nclass MockModule(Module):\n    pass\n\nclass MockClass(Class):\n    pass\n\ndef test_pytest_pycollect_makeitem():\n    collector = MockModule('__name__')\n    name = 'MockUnitTestCase'\n    obj = MockUnitTestCase\n\n    result = pytest_pycollect_makeitem(collector, name, obj)\n    assert isinstance(result, UnitTestCase)\n\n    # Test when unittest is not imported\n    with pytest.raises(Exception):\n        pytest_pycollect_makeitem(collector, 'NotUnitTestCase', int)\n\ndef test_UnitTestCase_collect():\n    unit_test_case = UnitTestCase.from_parent(None, name='MockUnitTestCase', obj=MockUnitTestCase)\n    unit_test_case.session = pytest.PytestConfig()\n\n    collected = list(unit_test_case.collect())\n    assert len(collected) == 1\n    assert isinstance(collected[0], TestCaseFunction)\n\ndef test_TestCaseFunction_setup_teardown():\n    parent = UnitTestCase.from_parent(None, name='MockUnitTestCase', obj=MockUnitTestCase)\n    test_case_function = TestCaseFunction.from_parent(parent, name='test_method')\n\n    test_case_function.setup()\n    assert test_case_function._testcase is not None\n    assert test_case_function._obj is not None\n\n    test_case_function.teardown()\n    assert test_case_function._testcase is None\n    assert test_case_function._obj is None\n\ndef test_TestCaseFunction_runtest():\n    parent = UnitTestCase.from_parent(None, name='MockUnitTestCase', obj=MockUnitTestCase)\n    test_case_function = TestCaseFunction.from_parent(parent, name='test_method')\n    test_case_function.config = pytest.PytestConfig()\n    test_case_function.setup()\n\n    test_case_function.runtest()\n    assert not is_async_function(test_case_function.obj)\n"], "sample_33": ["\nimport unittest\nimport json\nimport os\nfrom datetime import datetime\nimport locale\nimport pytest\nimport numpy as np\nfrom astropy.utils import misc\nfrom astropy import units as u\n\nclass TestMiscFunctions(unittest.TestCase):\n    def test_isiterable(self):\n        self.assertTrue(misc.isiterable([1, 2, 3]))\n        self.assertFalse(misc.isiterable(42))\n\n    def test_indent(self):\n        text = \"line1\\nline2\\nline3\"\n        indented_text = misc.indent(text, shift=1, width=4)\n        expected_text = \"    line1\\n    line2\\n    line3\"\n        self.assertEqual(indented_text, expected_text)\n\n    def test_silence(self):\n        import sys\n        from io import StringIO\n        saved_stdout = sys.stdout\n        try:\n            out = StringIO()\n            sys.stdout = out\n            with misc.silence():\n                print(\"This should not be printed\")\n            output = out.getvalue().strip()\n            self.assertEqual(output, \"\")\n        finally:\n            sys.stdout = saved_stdout\n\n    # Add more tests for other functions here...\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_86": ["\nimport unittest\nfrom unittest.mock import patch, Mock, PropertyMock\nfrom pathlib import Path\nfrom django.utils import autoreload\nfrom django.apps import apps\nfrom django.urls import get_resolver\nfrom django.core.signals import request_finished\n\nclass TestAutoreload(unittest.TestCase):\n\n    @patch('django.utils.autoreload.iter_all_python_module_files')\n    def test_watched_files(self, mock_iter):\n        reloader = autoreload.BaseReloader()\n        reloader.watch_dir('/tmp', '*.py')\n        reloader.watch_file('/tmp/test.txt')\n        mock_iter.return_value = [Path('/tmp/test.py'), Path('/tmp/test2.py')]\n        expected_files = {Path('/tmp/test.py'), Path('/tmp/test2.py'), Path('/tmp/test.txt'), Path('/tmp/test.py'), Path('/tmp/test2.txt')}\n        self.assertEqual(set(reloader.watched_files()), expected_files)\n\n    @patch('django.utils.autoreload.apps')\n    @patch('threading.Thread.is_alive')\n    def test_wait_for_apps_ready(self, mock_is_alive, mock_apps):\n        mock_is_alive.side_effect = [True, False]\n        mock_apps.ready_event.wait.return_value = True\n        reloader = autoreload.BaseReloader()\n        main_thread = Mock()\n        main_thread.is_alive.return_value = True\n        self.assertTrue(reloader.wait_for_apps_ready(mock_apps, main_thread))\n\n    @patch('django.utils.autoreload.autoreload_started')\n    @patch('django.utils.autoreload.BaseReloader.wait_for_apps_ready')\n    @patch('django.urls.get_resolver')\n    def test_run(self, mock_get_resolver, mock_wait, mock_signal):\n        mock_wait.return_value = None\n        mock_get_resolver.return_value.urlconf_module = 'django.urls.resolvers'\n        reloader = autoreload.BaseReloader()\n        main_thread = Mock()\n        reloader.run(main_thread)\n        mock_signal.send.assert_called_once_with(sender=reloader)\n\n    @patch('django.utils.autoreload.WatchmanReloader.check_availability')\n    def test_get_reloader(self, mock_check):\n        mock_check.side_effect = [autoreload.WatchmanUnavailable, None]\n        self.assertIsInstance(autoreload.get_reloader(), autoreload.StatReloader)\n        self.assertIsInstance(autoreload.get_reloader(), autoreload.WatchmanReloader)\n\n    @patch('django.utils.autoreload.WatchmanUnavailable')\n    @patch('django.utils.autoreload.StatReloader')\n    @patch('django.utils.autoreload.WatchmanReloader')\n    @patch('django.utils.autoreload.signal')\n    @patch('django.utils.autoreload.restart_with_reloader')\n    def test_run_with_reloader(self, mock_restart, mock_signal, mock_watchman, mock_stat, mock_unavailable):\n        mock_unavailable.side_effect = autoreload.WatchmanUnavailable\n        mock_stat.return_value = autoreload.StatReloader()\n        with patch.dict('os.environ', {'RUN_MAIN': 'true'}):\n            autoreload.run_with_reloader(Mock())\n            mock_stat.assert_called_once()\n        with patch.dict('os.environ', {'RUN_MAIN': 'false'}):\n            autoreload.run_with_reloader(Mock())\n            mock_restart.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_927": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom docutils import nodes\nfrom sphinx.testing.util import SphinxTestApp\nfrom sphinx.domains.python import (\n    py_sig_re, _parse_annotation, _pseudo_parse_arglist,\n    PyXRefRole, PythonDomain, PythonModuleIndex,\n    PyFunction, PyVariable, PyClasslike, PyMethod, PyAttribute\n)\n\nclass TestPythonDomain(unittest.TestCase):\n    def setUp(self):\n        self.app = SphinxTestApp()\n        self.app.builder.env.ref_context['py:module'] = 'test_module'\n        self.domain = PythonDomain(self.app.env)\n\n    def test_py_sig_re(self):\n        m = py_sig_re.match('func(arg1, arg2) -> return_type')\n        self.assertEqual(m.groups(), (None, 'func', 'arg1, arg2', 'return_type'))\n\n    @patch('sphinx.domains.python.ast_parse')\n    def test_parse_annotation(self, mock_ast_parse):\n        mock_ast_parse.return_value = MagicMock()\n        _parse_annotation('List[int]', self.app.builder.env)\n        mock_ast_parse.assert_called_once_with('List[int]')\n\n    def test_pseudo_parse_arglist(self):\n        signode = nodes.Element()\n        _pseudo_parse_arglist(signode, 'arg1, arg2=default')\n        self.assertIsInstance(signode[0], nodes.desc_parameterlist)\n\n    def test_PyFunction(self):\n        directive = PyFunction(\n            name='py:function',\n            arguments=['func'],\n            options={'module': 'test_module'},\n            content=[],\n            lineno=1,\n            content_offset=0,\n            block_text='',\n            state=MagicMock(),\n            state_machine=MagicMock()\n        )\n        directive.run()\n\n    def test_PyVariable(self):\n        directive = PyVariable(\n            name='py:data',\n            arguments=['var'],\n            options={'module': 'test_module'},\n            content=[],\n            lineno=1,\n            content_offset=0,\n            block_text='',\n            state=MagicMock(),\n            state_machine=MagicMock()\n        )\n        directive.run()\n\n    def test_PyClasslike(self):\n        directive = PyClasslike(\n            name='py:class',\n            arguments=['Class'],\n            options={'module': 'test_module'},\n            content=[],\n            lineno=1,\n            content_offset=0,\n            block_text='',\n            state=MagicMock(),\n            state_machine=MagicMock()\n        )\n        directive.run()\n\n    def test_PyMethod(self):\n        directive = PyMethod(\n            name='py:method',\n            arguments=['method'],\n            options={'module': 'test_module', 'class': 'Class'},\n            content=[],\n            lineno=1,\n            content_offset=0,\n            block_text='',\n            state=MagicMock(),\n            state_machine=MagicMock()\n        )\n        directive.run()\n\n    def test_PyAttribute(self):\n        directive = PyAttribute(\n            name='py:attribute',\n            arguments=['attr'],\n            options={'module': 'test_module', 'class': 'Class'},\n            content=[],\n            lineno=1,\n            content_offset=0,\n            block_text='',\n            state=MagicMock(),\n            state_machine=MagicMock()\n        )\n        directive.run()\n\n    def test_PythonModuleIndex(self):\n        index = PythonModuleIndex(domain=self.domain, env=self.app.builder.env)\n        index.generate()\n\n    def test_PyXRefRole(self):\n        role = PyXRefRole()\n        role.process_link(self.app.builder.env, nodes.Element(), False, 'title', 'target')\n\n    def test_PythonDomain(self):\n        self.domain.note_object('obj', 'function', 'node_id')\n        self.domain.note_module('mod', 'node_id', 'synopsis', 'platform', False)\n        self.domain.clear_doc('docname')\n        self.domain.merge_domaindata(['docname'], {'objects': {}, 'modules': {}})\n        self.domain.find_obj(self.app.builder.env, 'modname', 'classname', 'name', 'type')\n        self.domain.resolve_xref(self.app.builder.env, 'fromdocname', self.app.builder, 'type', 'target', nodes.Element(), nodes.Element())\n        self.domain.resolve_any_xref(self.app.builder.env, 'fromdocname', self.app.builder, 'target', nodes.Element(), nodes.Element())\n        self.domain.get_objects()\n        self.domain.get_full_qualified_name(nodes.Element())\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1167": ["\nimport unittest\nfrom sympy import symbols, Rational, pi, sin, asin, Integral, Matrix, log, S, Function\nfrom sympy.printing.latex import latex, multiline_latex, LatexPrinter\n\nclass TestLatexPrinter(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.tau, self.mu, self.r, self.alpha = symbols('x y tau mu r alpha')\n\n    def test_latex_simple_expression(self):\n        expr = (2*self.tau)**Rational(7,2)\n        result = latex(expr)\n        expected = r'8 \\sqrt{2} \\tau^{\\frac{7}{2}}'\n        self.assertEqual(result, expected)\n\n    def test_latex_fraction_options(self):\n        expr = 3*self.x**2/self.y\n        result_fold = latex(expr, fold_short_frac=True)\n        expected_fold = r'3 x^{2} / y'\n        self.assertEqual(result_fold, expected_fold)\n\n        result_long = latex(Integral(self.r, self.r)/2/pi, long_frac_ratio=0)\n        expected_long = r'\\frac{1}{2 \\pi} \\int r\\, dr'\n        self.assertEqual(result_long, expected_long)\n\n    def test_latex_trig_options(self):\n        expr = asin(Rational(7,2))\n        result_abbreviated = latex(expr)\n        expected_abbreviated = r'\\operatorname{asin}{\\left(\\frac{7}{2} \\right)}'\n        self.assertEqual(result_abbreviated, expected_abbreviated)\n\n        result_full = latex(expr, inv_trig_style=\"full\")\n        expected_full = r'\\arcsin{\\left(\\frac{7}{2} \\right)}'\n        self.assertEqual(result_full, expected_full)\n\n        result_power = latex(expr, inv_trig_style=\"power\")\n        expected_power = r'\\sin^{-1}{\\left(\\frac{7}{2} \\right)}'\n        self.assertEqual(result_power, expected_power)\n\n    def test_latex_matrix_options(self):\n        expr = Matrix(2, 1, [self.x, self.y])\n        result_smallmatrix = latex(expr)\n        expected_smallmatrix = r'\\left[\\begin{matrix}x\\\\y\\end{matrix}\\right]'\n        self.assertEqual(result_smallmatrix, expected_smallmatrix)\n\n        result_array = latex(expr, mat_str=\"array\")\n        expected_array = r'\\left[\\begin{array}{c}x\\\\y\\end{array}\\right]'\n        self.assertEqual(result_array, expected_array)\n\n    def test_latex_custom_symbol_names(self):\n        result = latex(self.x**2, symbol_names={self.x: 'x_i'})\n        expected = r'x_i^{2}'\n        self.assertEqual(result, expected)\n\n    def test_latex_logarithms(self):\n        result_log = latex(log(10))\n        expected_log = r'\\log{\\left(10 \\right)}'\n        self.assertEqual(result_log, expected_log)\n\n        result_ln = latex(log(10), ln_notation=True)\n        expected_ln = r'\\ln{\\left(10 \\right)}'\n        self.assertEqual(result_ln, expected_ln)\n\n    def test_latex_containers(self):\n        result_list = latex([2/self.x, self.y], mode='inline')\n        expected_list = r'$\\left[ 2 / x, \\  y\\right]$'\n        self.assertEqual(result_list, expected_list)\n\n    def test_latex_unsupported_type(self):\n        result = latex(int)\n        expected = r'\\mathtt{\\text{<class \\text{'int'}>}}'\n"], "sample_44": ["\nimport unittest\nimport numpy as np\nfrom astropy import units as u\nfrom astropy.units import Quantity, FunctionUnitBase, FunctionQuantity\n\nclass TestFunctionUnits(unittest.TestCase):\n    def setUp(self):\n        self.test_unit = FunctionUnitBase(u.m, u.dimensionless_unscaled)\n        self.test_quantity = FunctionQuantity(10, unit=self.test_unit)\n\n    def test_init(self):\n        self.assertEqual(self.test_unit.physical_unit, u.m)\n        self.assertEqual(self.test_unit.function_unit, u.dimensionless_unscaled)\n\n    def test_equivalency(self):\n        self.assertTrue(self.test_unit.is_equivalent(u.m))\n        self.assertFalse(self.test_unit.is_equivalent(u.s))\n\n    def test_to(self):\n        self.assertEqual(self.test_quantity.to(u.m), 10)\n\n    def test_comparison(self):\n        self.assertTrue(self.test_quantity == 10 * u.m)\n        self.assertFalse(self.test_quantity == 10 * u.s)\n\n    def test_operations(self):\n        self.assertEqual((self.test_quantity * 2).value, 20)\n        self.assertEqual((2 * self.test_quantity).value, 20)\n        self.assertEqual((self.test_quantity / 2).value, 5)\n\n        with self.assertRaises(u.UnitTypeError):\n            self.test_quantity * 2 * u.s\n\n    def test_supported_functions(self):\n        self.assertEqual(np.max(self.test_quantity), 10)\n        self.assertEqual(np.min(self.test_quantity), 10)\n        self.assertEqual(np.sum(self.test_quantity), 10)\n        self.assertTrue(np.all(np.cumsum(self.test_quantity) == np.array([10])))\n\n        with self.assertRaises(TypeError):\n            np.sin(self.test_quantity)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_869": ["\nimport unittest\nimport numpy as np\nfrom sklearn.cluster import AffinityPropagation, affinity_propagation\nfrom sklearn.cluster._affinity_propagation import _equal_similarities_and_preferences\nfrom sklearn.exceptions import ConvergenceWarning\n\nclass TestAffinityPropagation(unittest.TestCase):\n    def setUp(self):\n        # Set up some test data\n        self.X = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])\n        self.S = np.array([[0, -2, -3, -8, -10, -5],\n                           [-2, 0, -4, -6, -12, -7],\n                           [-3, -4, 0, -2, -10, -2],\n                           [-8, -6, -2, 0, -2, -8],\n                           [-10, -12, -10, -2, 0, -6],\n                           [-5, -7, -2, -8, -6, 0]])\n        self.preference = -2\n\n    def test_affinity_propagation(self):\n        # Test the affinity propagation function\n        cluster_centers_indices, labels, n_iter = affinity_propagation(self.S, self.preference, return_n_iter=True)\n        self.assertEqual(len(cluster_centers_indices), 2)\n        self.assertEqual(len(labels), self.X.shape[0])\n        self.assertIsInstance(n_iter, int)\n\n    def test_equal_similarities_and_preferences(self):\n        # Test the helper function for checking equal similarities and preferences\n        self.assertTrue(_equal_similarities_and_preferences(self.S, self.preference))\n        self.assertFalse(_equal_similarities_and_preferences(self.S, np.ones(self.X.shape[0])))\n\n    def test_affinity_propagation_class(self):\n        # Test the AffinityPropagation class\n        af = AffinityPropagation(damping=0.5, max_iter=200, convergence_iter=15,\n                                 copy=True, preference=self.preference,\n                                 affinity='precomputed', verbose=False)\n        af.fit(self.S)\n        self.assertEqual(len(af.cluster_centers_indices_), 2)\n        self.assertEqual(len(af.labels_), self.X.shape[0])\n        self.assertIsInstance(af.n_iter_, int)\n\n    def test_affinity_propagation_class_predict(self):\n        # Test the predict method of the AffinityPropagation class\n        af = AffinityPropagation(damping=0.5, max_iter=200, convergence_iter=15,\n                                 copy=True, preference=self.preference,\n                                 affinity='euclidean', verbose=False)\n        af.fit(self.X)\n        labels = af.predict([[0, 0], [4, 4]])\n        self.assertEqual(len(labels), 2)\n        self.assertEqual(labels[0], 0)\n        self.assertEqual(labels[1], 1)\n\n    def test_affinity_propagation_class_not_converge(self):\n        # Test the AffinityPropagation class when it does not converge\n        af = AffinityPropagation(damping=0.5, max_iter=2, convergence_iter=2,\n                                 copy=True, preference=self.preference,\n                                 affinity='precomputed', verbose=False)\n        with self.assertWarns(ConvergenceWarning):\n            af.fit(self.S)\n        self.assertEqual(len(af.cluster_centers_indices_), 0)\n        self.assertTrue(np.all(af.labels_ == -1))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_342": ["\nfrom django.test import RequestFactory, TestCase\nfrom django.contrib.admin.sites import AdminSite\nfrom django.contrib.auth.models import User\nfrom django.contrib.admin.views.autocomplete import AutocompleteJsonView\nfrom django.contrib.admin.options import ModelAdmin\n\nclass MockModelAdmin(ModelAdmin):\n    search_fields = ['username']\n\nclass AutocompleteJsonViewTests(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.site = AdminSite()\n        self.site.register(User, MockModelAdmin)\n        self.view = AutocompleteJsonView(admin_site=self.site)\n\n    def test_get(self):\n        request = self.factory.get('/autocomplete/', {'term': 'test', 'app_label': 'auth', 'model_name': 'User', 'field_name': 'username'})\n        request.user = User.objects.create_superuser('admin', 'admin@test.com', 'admin')\n        response = self.view.get(request)\n        self.assertEqual(response.status_code, 200)\n\n    def test_get_queryset(self):\n        request = self.factory.get('/autocomplete/', {'term': 'test', 'app_label': 'auth', 'model_name': 'User', 'field_name': 'username'})\n        request.user = User.objects.create_superuser('admin', 'admin@test.com', 'admin')\n        self.view.process_request(request)\n        qs = self.view.get_queryset()\n        self.assertIsNotNone(qs)\n\n    def test_process_request(self):\n        request = self.factory.get('/autocomplete/', {'term': 'test', 'app_label': 'auth', 'model_name': 'User', 'field_name': 'username'})\n        term, model_admin, source_field, to_field_name = self.view.process_request(request)\n        self.assertEqual(term, 'test')\n        self.assertIsInstance(model_admin, MockModelAdmin)\n        self.assertEqual(source_field.name, 'username')\n        self.assertEqual(to_field_name, 'id')\n"], "sample_61": ["\nimport unittest\nfrom django.contrib.auth import validators\n\nclass TestDjangoAuthValidators(unittest.TestCase):\n    def setUp(self):\n        self.ascii_validator = validators.ASCIIUsernameValidator()\n        self.unicode_validator = validators.UnicodeUsernameValidator()\n\n    def test_ascii_username_validator(self):\n        valid_usernames = ['user123', 'user.name', 'user+name', 'user-name', 'user_name', 'user@domain']\n        for username in valid_usernames:\n            with self.subTest(username=username):\n                self.assertIsNone(self.ascii_validator(username))\n\n        invalid_usernames = ['user@\u00e9xample', 'user^name', 'user$name', 'user name']\n        for username in invalid_usernames:\n            with self.subTest(username=username):\n                with self.assertRaises(validators.ValidationError):\n                    self.ascii_validator(username)\n\n    def test_unicode_username_validator(self):\n        valid_usernames = ['user123', 'user.name', 'user+name', 'user-name', 'user_name', 'user@domain', 'user\u00e9xample']\n        for username in valid_usernames:\n            with self.subTest(username=username):\n                self.assertIsNone(self.unicode_validator(username))\n\n        invalid_usernames = ['user@\u00e9xample', 'user^name', 'user$name', 'user name']\n        for username in invalid_usernames:\n            with self.subTest(username=username):\n                with self.assertRaises(validators.ValidationError):\n                    self.unicode_validator(username)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1179": ["\nimport unittest\nfrom sympy import symbols, Eq, S, Rational, Matrix, Add, Integer, Symbol, Or, And, Not, Ge, Lt, Gt, ExprCondPair\nfrom sympy.printing import StrPrinter\n\nclass TestStrPrinter(unittest.TestCase):\n    def setUp(self):\n        self.printer = StrPrinter()\n        self.a, self.b = symbols('a b')\n\n    def test_integer_printing(self):\n        self.assertEqual(self.printer._print_Integer(Integer(5)), '5')\n\n    def test_symbol_printing(self):\n        self.assertEqual(self.printer._print_Symbol(self.a), 'a')\n\n    def test_add_printing(self):\n        self.assertEqual(self.printer._print_Add(self.a + self.b), 'a + b')\n\n    def test_rational_printing(self):\n        self.assertEqual(self.printer._print_Rational(Rational(1, 2)), '1/2')\n\n    def test_matrix_printing(self):\n        self.assertEqual(self.printer._print_Matrix(Matrix([[1, 2], [3, 4]])), 'Matrix([[1, 2], [3, 4]])')\n\n    def test_equality_printing(self):\n        self.assertEqual(self.printer._print_Relational(Eq(self.a, self.b)), 'a == b')\n\n    def test_or_printing(self):\n        self.assertEqual(self.printer._print_Or(Or(self.a, self.b)), 'a | b')\n\n    def test_and_printing(self):\n        self.assertEqual(self.printer._print_And(And(self.a, self.b)), 'a & b')\n\n    def test_not_printing(self):\n        self.assertEqual(self.printer._print_Not(Not(self.a)), '~a')\n\n    def test_greater_than_printing(self):\n        self.assertEqual(self.printer._print_Relational(Gt(self.a, self.b)), 'a > b')\n\n    def test_less_than_printing(self):\n        self.assertEqual(self.printer._print_Relational(Lt(self.a, self.b)), 'a < b')\n\n    def test_greater_than_equal_printing(self):\n        self.assertEqual(self.printer._print_Relational(Ge(self.a, self.b)), 'a >= b')\n\n    def test_expr_cond_pair_printing(self):\n        self.assertEqual(self.printer._print_ExprCondPair(ExprCondPair(self.a, self.a > 0)), '(a, a > 0)')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_201": ["\nimport json\nimport unittest\nfrom unittest.mock import Mock, patch\n\nfrom django.contrib.messages.storage.cookie import CookieStorage, MessageDecoder, MessageEncoder\nfrom django.core import signing\nfrom django.http import SimpleCookie\nfrom django.utils.crypto import salted_hmac\nfrom django.utils.safestring import SafeData, mark_safe\n\nclass TestMessageEncoder(unittest.TestCase):\n    def test_default_message(self):\n        encoder = MessageEncoder()\n        message = Mock()\n        message.level = 'level'\n        message.message = 'test message'\n        message.extra_tags = None\n        expected = ['__json_message', 0, 'level', 'test message']\n        self.assertEqual(encoder.default(message), expected)\n\n    def test_default_safedata_message(self):\n        encoder = MessageEncoder()\n        message = Mock()\n        message.level = 'level'\n        message.message = SafeData('test message')\n        message.extra_tags = None\n        expected = ['__json_message', 1, 'level', 'test message']\n        self.assertEqual(encoder.default(message), expected)\n\n    def test_default_other_object(self):\n        encoder = MessageEncoder()\n        self.assertEqual(encoder.default('other object'), 'other object')\n\nclass TestMessageDecoder(unittest.TestCase):\n    def test_process_messages_list(self):\n        decoder = MessageDecoder()\n        obj = ['__json_message', 1, 'level', 'test message']\n        message = decoder.process_messages(obj)\n        self.assertEqual(message.level, 'level')\n        self.assertEqual(message.message, 'test message')\n        self.assertEqual(isinstance(message.message, SafeData), True)\n\n    def test_process_messages_dict(self):\n        decoder = MessageDecoder()\n        obj = {'key': 'value'}\n        self.assertEqual(decoder.process_messages(obj), obj)\n\n    def test_process_messages_other(self):\n        decoder = MessageDecoder()\n        self.assertEqual(decoder.process_messages('other'), 'other')\n\nclass TestCookieStorage(unittest.TestCase):\n    def setUp(self):\n        self.storage = CookieStorage()\n        self.request = Mock()\n        self.storage.request = self.request\n        self.response = Mock()\n\n    @patch('django.contrib.messages.storage.cookie.json.loads')\n    @patch('django.contrib.messages.storage.cookie.signing.get_cookie_signer')\n    def test_decode(self, mock_signer, mock_loads):\n        mock_signer.return_value.unsign.return_value = 'decoded'\n        mock_loads.return_value = 'processed'\n        self.assertEqual(self.storage._decode('data'), 'processed')\n        mock_signer.return_value.unsign.assert_called_once_with('data')\n        mock_loads.assert_called_once_with('decoded', cls=MessageDecoder)\n\n    # Add more tests for other methods in CookieStorage class\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_429": ["\nimport unittest\nfrom django.core.validators import (\n    BaseValidator, DecimalValidator, EmailValidator, FileExtensionValidator,\n    MaxLengthValidator, MaxValueValidator, MinLengthValidator, MinValueValidator,\n    ProhibitNullCharactersValidator, RegexValidator, StepValueValidator,\n    URLValidator, int_list_validator, validate_comma_separated_integer_list,\n    validate_email, validate_image_file_extension, validate_integer,\n    validate_ipv4_address, validate_ipv6_address, validate_ipv46_address,\n    validate_slug, validate_unicode_slug\n)\nfrom django.core.exceptions import ValidationError\nfrom django.utils.regex_helper import _lazy_re_compile\nfrom unittest.mock import MagicMock, patch\n\nclass TestDjangoValidators(unittest.TestCase):\n\n    def test_validate_integer(self):\n        self.assertIsNone(validate_integer('123'))\n        with self.assertRaises(ValidationError):\n            validate_integer('abc')\n\n    def test_validate_email(self):\n        self.assertIsNone(validate_email('test@example.com'))\n        with self.assertRaises(ValidationError):\n            validate_email('test@com')\n\n    # More tests for other validators...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_540": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom io import BytesIO\nfrom pathlib import Path\nimport numpy as np\nimport matplotlib as mpl\nfrom matplotlib import animation\n\nclass TestAnimation(unittest.TestCase):\n    def setUp(self):\n        self.fig = mpl.figure.Figure()\n        self.ax = self.fig.add_subplot(111)\n        self.event_source = MagicMock()\n\n    def test_init(self):\n        anim = animation.Animation(self.fig, self.event_source, blit=True)\n        self.assertEqual(anim._fig, self.fig)\n        self.assertEqual(anim.event_source, self.event_source)\n        self.assertTrue(anim._blit)\n\n    @patch('matplotlib.animation.Animation.save')\n    def test_start(self, mock_save):\n        anim = animation.Animation(self.fig, self.event_source)\n        anim._start()\n        self.event_source.start.assert_called_once()\n\n    def test_stop(self):\n        anim = animation.Animation(self.fig, self.event_source)\n        anim._stop()\n        self.event_source.remove_callback.assert_called_once()\n\n    @patch('matplotlib.animation.PillowWriter')\n    def test_save(self, mock_writer):\n        anim = animation.Animation(self.fig, self.event_source)\n        anim.save('test.gif')\n        mock_writer.assert_called_once()\n\n    @patch('matplotlib.animation.Animation._draw_next_frame')\n    @patch('matplotlib.animation.Animation.new_saved_frame_seq')\n    def test_save_with_extra_anim(self, mock_new_saved_frame_seq, mock_draw_next_frame):\n        anim1 = animation.Animation(self.fig, self.event_source)\n        anim2 = animation.Animation(self.fig, self.event_source)\n        anim1.save('test.gif', extra_anim=[anim2])\n        mock_new_saved_frame_seq.assert_called()\n        self.assertEqual(mock_new_saved_frame_seq.call_count, 2)\n\n    @patch('matplotlib.animation.Animation._post_draw')\n    @patch('matplotlib.animation.Animation._draw_frame')\n    @patch('matplotlib.animation.Animation._pre_draw')\n    def test_step(self, mock_pre_draw, mock_draw_frame, mock_post_draw):\n        anim = animation.Animation(self.fig, self.event_source)\n        anim.frame_seq = iter([1])\n        result = anim._step()\n        self.assertTrue(result)\n        mock_pre_draw.assert_called_once()\n        mock_draw_frame.assert_called_once()\n        mock_post_draw.assert_called_once()\n\nclass TestTimedAnimation(unittest.TestCase):\n    def setUp(self):\n        self.fig = mpl.figure.Figure()\n        self.ax = self.fig.add_subplot(111)\n        self.event_source = MagicMock()\n\n    def test_step(self):\n        anim = animation.TimedAnimation(self.fig, interval=100, repeat_delay=0, repeat=True, event_source=self.event_source)\n        anim.frame_seq = iter([1])\n        result = anim._step()\n        self.assertTrue(result)\n        self.event_source.interval = 100\n\n    def test_step_repeat(self):\n        anim = animation.TimedAnimation(self.fig, interval=100, repeat_delay=0, repeat=True, event_source=self.event_source)\n        anim.frame_seq = iter([])\n        result = anim._step()\n        self.assertTrue(result)\n        self.event_source.interval = 0\n\n    def test_step_no_repeat(self):\n        anim = animation.TimedAnimation(self.fig, interval=100, repeat_delay=0, repeat=False, event_source=self.event_source)\n        anim.frame_seq = iter([])\n        result = anim._step()\n        self.assertFalse(result)\n        self.event_source.stop.assert_called_once()\n\nclass TestArtistAnimation(unittest.TestCase):\n    def setUp(self):\n        self.fig = mpl.figure.Figure()\n        self.ax = self.fig.add_subplot(111)\n        self.artists = [self.ax.plot([], [])[0]]\n\n    def test_init_draw(self):\n        anim = animation.ArtistAnimation(self.fig, self.artists)\n        anim._init_draw()\n        self.assertFalse(self.artists[0].get_visible())\n\n    def test_pre_draw(self):\n        anim = animation.ArtistAnimation(self.fig, self.artists)\n        anim._drawn_artists = self.artists\n        anim._pre_draw(self.artists, blit=False)\n        self.assertFalse(self.artists[0].get_visible())\n\n    def test_draw_frame(self):\n        anim = animation.ArtistAnimation(self.fig, self.artists)\n        anim._draw_frame(self.artists)\n        self.assertTrue(self.artists[0].get_visible())\n\nclass TestFuncAnimation(unittest.TestCase):\n    def setUp(self):\n        self.fig = mpl.figure.Figure()\n        self.ax = self.fig.add_subplot(111)\n        self.func = MagicMock()\n\n    def test_new_frame_seq(self):\n        anim = animation.FuncAnimation(self.fig, self.func, frames=range(3))\n        frame_seq = anim.new_frame_seq()\n        self.assertEqual(list(frame_seq), [0, 1, 2])\n\n    def test_new_saved_frame_seq(self):\n        anim = animation.FuncAnimation(self.fig, self.func, frames=range(3), save_count=2)\n        frame_seq = anim.new_saved_frame_seq()\n        self.assertEqual(list(frame_seq), [0, 1])\n\n    def test_init_draw(self):\n        anim = animation.FuncAnimation(self.fig, self.func, frames=range(3))\n        anim._init_draw()\n        self.func.assert_called_once_with(0)\n\n    def test_draw_frame(self):\n        anim = animation.FuncAnimation(self.fig, self.func, frames=range(3))\n        anim._draw_frame(1)\n        self.func.assert_called_once_with(1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_395": ["\nimport os\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom pathlib import Path\n\nfrom django.template import engines, autoreload\nfrom django.template.backends.django import DjangoTemplates\nfrom django.template.loaders.filesystem import Loader as FilesystemLoader\nfrom django.utils._os import to_path\nfrom django.utils.autoreload import autoreload_started, file_changed\n\nclass TestDjangoTemplateAutoreload(unittest.TestCase):\n    def setUp(self):\n        self.mock_backend = Mock(spec=DjangoTemplates)\n        self.mock_backend.engine.dirs = ['/test/dir1', '/test/dir2']\n        self.mock_backend.engine.template_loaders = [\n            FilesystemLoader(engine=None, dirs=['/test/loader/dir1', '/django/dir']),\n            Mock(spec=FilesystemLoader)\n        ]\n        engines.all = Mock(return_value=[self.mock_backend])\n\n    def test_get_template_directories(self):\n        with patch('django.template.autoreload.Path.cwd', return_value=Path('/test')):\n            directories = autoreload.get_template_directories()\n            self.assertEqual(directories, {\n                Path('/test/dir1'),\n                Path('/test/dir2'),\n                Path('/test/loader/dir1'),\n            })\n\n    def test_reset_loaders(self):\n        autoreload.reset_loaders()\n        self.mock_backend.engine.template_loaders[0].reset.assert_called_once()\n\n    def test_watch_for_template_changes(self):\n        sender = Mock()\n        autoreload.watch_for_template_changes(sender)\n        sender.watch_dir.assert_called()\n\n    def test_template_changed(self):\n        sender = Mock()\n        with patch('django.template.autoreload.get_template_directories', return_value=[Path('/test/dir1')]):\n            result = autoreload.template_changed(sender, Path('/test/dir1/test.html'))\n            self.assertTrue(result)\n            sender.reset_all.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1191": ["\nimport unittest\nfrom sympy import ZZ\nfrom sympy.polys.matrices import DomainMatrix\nfrom sympy.polys.matrices.normalforms import (invariant_factors, smith_normal_form,\n                                              hermite_normal_form, _hermite_normal_form,\n                                              _hermite_normal_form_modulo_D)\n\nclass TestNormalForms(unittest.TestCase):\n    def setUp(self):\n        self.m = DomainMatrix([[ZZ(12), ZZ(6), ZZ(4)],\n                               [ZZ(3), ZZ(9), ZZ(6)],\n                               [ZZ(2), ZZ(16), ZZ(14)]], (3, 3), ZZ)\n\n    def test_invariant_factors(self):\n        invs = invariant_factors(self.m)\n        self.assertEqual(invs, (10, 15, 2))\n\n    def test_smith_normal_form(self):\n        snf = smith_normal_form(self.m)\n        expected_snf = DomainMatrix([[1, 0, 0], [0, 10, 0], [0, 0, -30]], (3, 3), ZZ)\n        self.assertEqual(snf, expected_snf)\n\n    def test_hermite_normal_form(self):\n        hnf = hermite_normal_form(self.m)\n        expected_hnf = DomainMatrix([[10, 0, 2], [0, 15, 3], [0, 0, 2]], (3, 3), ZZ)\n        self.assertEqual(hnf, expected_hnf)\n\n    def test_hermite_normal_form_modulo_D(self):\n        hnf = _hermite_normal_form_modulo_D(self.m, 90)\n        expected_hnf = DomainMatrix([[10, 0, 0], [0, 15, 0], [0, 0, 2]], (3, 3), ZZ)\n        self.assertEqual(hnf, expected_hnf)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_880": ["\nimport unittest\nimport numpy as np\nfrom sklearn.isotonic import check_increasing, isotonic_regression, IsotonicRegression, _make_unique\n\nclass TestIsotonicFunctions(unittest.TestCase):\n\n    def setUp(self):\n        np.random.seed(0)\n        self.x = np.random.rand(100)\n        self.y = np.random.rand(100)\n        self.sample_weight = np.random.rand(100)\n\n    def test_check_increasing(self):\n        increasing_bool = check_increasing(self.x, self.y)\n        self.assertIsInstance(increasing_bool, bool)\n\n    def test_isotonic_regression(self):\n        y_ = isotonic_regression(self.y, sample_weight=self.sample_weight)\n        self.assertEqual(len(y_), len(self.y))\n\n    def test_isotonic_regression_class(self):\n        iso_reg = IsotonicRegression()\n        iso_reg.fit(self.x, self.y, sample_weight=self.sample_weight)\n        y_pred = iso_reg.predict(self.x)\n        self.assertEqual(len(y_pred), len(self.x))\n\n    def test_make_unique(self):\n        unique_x, unique_y, unique_sample_weight = _make_unique(self.x, self.y, self.sample_weight)\n        self.assertEqual(len(unique_x), len(np.unique(self.x)))\n        self.assertEqual(len(unique_y), len(np.unique(self.y)))\n        self.assertEqual(len(unique_sample_weight), len(np.unique(self.sample_weight)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_923": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom sphinx.ext.napoleon.docstring import GoogleDocstring, NumpyDocstring\n\nclass TestGoogleDocstring(unittest.TestCase):\n    def setUp(self):\n        self.docstring = '''One line summary.\n\nExtended description.\n\nArgs:\n  arg1(int): Description of `arg1`\n  arg2(str): Description of `arg2`\nReturns:\n  str: Description of return value.\n'''\n\n    def test_google_docstring(self):\n        config = MagicMock()\n        config.strip_signature_backslash = False\n        config.napoleon_use_param = True\n        config.napoleon_use_rtype = True\n        google_doc = GoogleDocstring(self.docstring, config)\n        expected_output = '''One line summary.\n\nExtended description.\n\n:param arg1: Description of `arg1`\n:type arg1: int\n:param arg2: Description of `arg2`\n:type arg2: str\n\n:returns: Description of return value.\n:rtype: str\n'''\n        self.assertEqual(str(google_doc), expected_output)\n\nclass TestNumpyDocstring(unittest.TestCase):\n    def setUp(self):\n        self.docstring = '''One line summary.\n\nExtended description.\n\nParameters\n----------\narg1 : int\n    Description of `arg1`\narg2 : str\n    Description of `arg2`\nReturns\n-------\nstr\n    Description of return value.\n'''\n\n    def test_numpy_docstring(self):\n        config = MagicMock()\n        config.strip_signature_backslash = False\n        config.napoleon_use_param = True\n        config.napoleon_use_rtype = True\n        numpy_doc = NumpyDocstring(self.docstring, config)\n        expected_output = '''One line summary.\n\nExtended description.\n\n:param arg1: Description of `arg1`\n:type arg1: int\n:param arg2: Description of `arg2`\n:type arg2: str\n\n:returns: Description of return value.\n:rtype: str\n'''\n        self.assertEqual(str(numpy_doc), expected_output)\n"], "sample_299": ["\nfrom unittest.mock import patch\nfrom django.test import override_settings\nfrom django.core.checks.caches import E001, check_default_cache_is_configured, check_cache_location_not_exposed, check_file_based_cache_is_absolute\nfrom django.core.cache.backends.filebased import FileBasedCache\nfrom django.core.checks import Warning\n\ndef test_check_default_cache_is_configured():\n    with override_settings(CACHES={}):\n        assert check_default_cache_is_configured(None) == [E001]\n\n    with override_settings(CACHES={'default': {}}):\n        assert check_default_cache_is_configured(None) == []\n\ndef test_check_cache_location_not_exposed():\n    with override_settings(MEDIA_ROOT='/tmp/media', STATIC_ROOT='/tmp/static', STATICFILES_DIRS=[], CACHES={'default': {'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache', 'LOCATION': '/tmp/cache'}}):\n        assert check_cache_location_not_exposed(None) == []\n\n    with override_settings(MEDIA_ROOT='/tmp/cache', STATIC_ROOT='/tmp/static', STATICFILES_DIRS=[], CACHES={'default': {'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache', 'LOCATION': '/tmp/cache'}}):\n        assert len(check_cache_location_not_exposed(None)) == 1\n        assert isinstance(check_cache_location_not_exposed(None)[0], Warning)\n\ndef test_check_file_based_cache_is_absolute():\n    with patch('django.core.cache.backends.filebased.FileBasedCache._init_path') as mock_init_path:\n        mock_init_path.return_value = False\n        with override_settings(CACHES={'default': {'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache', 'LOCATION': 'relative/path'}}):\n            assert len(check_file_based_cache_is_absolute(None)) == 1\n            assert isinstance(check_file_based_cache_is_absolute(None)[0], Warning)\n\n    with patch('django.core.cache.backends.filebased.FileBasedCache._init_path') as mock_init_path:\n        mock_init_path.return_value = True\n        with override_settings(CACHES={'default': {'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache', 'LOCATION': '/absolute/path'}}):\n            assert check_file_based_cache_is_absolute(None) == []\n"], "sample_73": ["\nimport unittest\nfrom unittest.mock import MagicMock, mock_open, patch\nfrom io import BytesIO\nfrom django.core.files.base import ContentFile\nfrom django.contrib.staticfiles.storage import (\n    StaticFilesStorage, HashedFilesMixin, ManifestFilesMixin, CachedFilesMixin,\n    ManifestStaticFilesStorage\n)\n\nclass TestStaticFilesStorage(unittest.TestCase):\n    @patch('django.contrib.staticfiles.storage.settings')\n    @patch('django.contrib.staticfiles.storage.check_settings')\n    def test_init(self, mock_check_settings, mock_settings):\n        mock_settings.STATIC_ROOT = '/static/root/'\n        mock_settings.STATIC_URL = '/static/url/'\n        storage = StaticFilesStorage()\n        mock_check_settings.assert_called_once_with('/static/url/')\n\nclass TestHashedFilesMixin(unittest.TestCase):\n    def test_file_hash(self):\n        mixin = HashedFilesMixin()\n        content = ContentFile(b'test content')\n        self.assertEqual(mixin.file_hash(name='test.txt', content=content), '8c30d3247326')\n\n    def test_hashed_name(self):\n        mixin = HashedFilesMixin()\n        mixin.exists = MagicMock(return_value=True)\n        mixin.open = MagicMock(return_value=BytesIO(b'test content'))\n        self.assertEqual(mixin.hashed_name(name='test.txt'), 'test.8c30d3247326.txt')\n\nclass TestManifestFilesMixin(unittest.TestCase):\n    def test_load_manifest(self):\n        mixin = ManifestFilesMixin()\n        mixin.read_manifest = MagicMock(return_value='{\"version\": \"1.0\", \"paths\": {\"test.txt\": \"test.8c30d3247326.txt\"}}')\n        self.assertEqual(mixin.load_manifest(), {\"test.txt\": \"test.8c30d3247326.txt\"})\n\nclass TestCachedFilesMixin(unittest.TestCase):\n    @patch('django.contrib.staticfiles.storage.caches')\n    def test_hash_key(self, mock_caches):\n        mixin = CachedFilesMixin()\n        self.assertEqual(mixin.hash_key(name='test.txt'), 'staticfiles:6a25891e3d0b2f24c3b0a60b08f08e26')\n\nclass TestManifestStaticFilesStorage(unittest.TestCase):\n    @patch('django.contrib.staticfiles.storage.ManifestFilesMixin.load_manifest')\n    def test_init(self, mock_load_manifest):\n        mock_load_manifest.return_value = {\"test.txt\": \"test.8c30d3247326.txt\"}\n        storage = ManifestStaticFilesStorage()\n        self.assertEqual(storage.hashed_files, {\"test.txt\": \"test.8c30d3247326.txt\"})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_812": ["\nimport unittest\nimport numpy as np\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.ensemble.iforest import _average_path_length\n\nclass TestIsolationForest(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [10, 20]])\n        self.clf = IsolationForest(random_state=42)\n\n    def test_fit(self):\n        self.clf.fit(self.X)\n        self.assertEqual(len(self.clf.estimators_), 100)\n        self.assertEqual(len(self.clf.estimators_samples_), 100)\n\n    def test_predict(self):\n        self.clf.fit(self.X)\n        y_pred = self.clf.predict(self.X)\n        self.assertEqual(len(y_pred), self.X.shape[0])\n\n    def test_decision_function(self):\n        self.clf.fit(self.X)\n        scores = self.clf.decision_function(self.X)\n        self.assertEqual(len(scores), self.X.shape[0])\n\n    def test_score_samples(self):\n        self.clf.fit(self.X)\n        scores = self.clf.score_samples(self.X)\n        self.assertEqual(len(scores), self.X.shape[0])\n\n    def test_average_path_length(self):\n        n_samples_leaf = np.array([1, 2, 3, 4, 5])\n        avg_path_length = _average_path_length(n_samples_leaf)\n        self.assertEqual(len(avg_path_length), len(n_samples_leaf))\n\n    def test_threshold_attribute(self):\n        self.clf.behaviour = 'old'\n        self.clf.fit(self.X)\n        with self.assertRaises(AttributeError):\n            _ = self.clf.threshold_\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_548": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nimport numpy as np\nfrom matplotlib import colors, cm, ticker\nfrom matplotlib.axes import Axes\nfrom matplotlib.figure import Figure\nfrom matplotlib.colorbar import Colorbar, _normalize_location_orientation, make_axes, make_axes_gridspec\n\nclass TestColorbar(unittest.TestCase):\n    def setUp(self):\n        self.fig = Figure()\n        self.ax = self.fig.add_subplot(111)\n        self.mappable = cm.ScalarMappable(cmap='viridis', norm=colors.Normalize(0, 1))\n\n    def test_init(self):\n        cbar = Colorbar(self.ax, self.mappable, orientation='vertical')\n        self.assertEqual(cbar.orientation, 'vertical')\n\n    def test_update_normal(self):\n        cbar = Colorbar(self.ax, self.mappable)\n        new_mappable = cm.ScalarMappable(cmap='cool', norm=colors.Normalize(0, 2))\n        cbar.update_normal(new_mappable)\n        self.assertEqual(cbar.cmap, new_mappable.cmap)\n\n    def test_set_ticks(self):\n        cbar = Colorbar(self.ax, self.mappable)\n        ticks = [0, 0.5, 1]\n        cbar.set_ticks(ticks)\n        self.assertTrue(np.allclose(cbar.get_ticks(), ticks))\n\n    def test_set_label(self):\n        cbar = Colorbar(self.ax, self.mappable)\n        label = 'Test Label'\n        cbar.set_label(label)\n        self.assertEqual(cbar.ax.get_ylabel(), label)\n\n    def test_set_alpha(self):\n        cbar = Colorbar(self.ax, self.mappable)\n        alpha = 0.5\n        cbar.set_alpha(alpha)\n        self.assertEqual(cbar.alpha, alpha)\n\n    def test_normalize_location_orientation(self):\n        loc_settings = _normalize_location_orientation('right', None)\n        self.assertEqual(loc_settings['orientation'], 'vertical')\n        self.assertEqual(loc_settings['location'], 'right')\n\n    @patch('matplotlib.figure.Figure.add_axes')\n    def test_make_axes(self, mock_add_axes):\n        mock_add_axes.return_value = Axes(self.fig, [0, 0, 1, 1])\n        cax, kwargs = make_axes(self.ax, location='right')\n        self.assertEqual(kwargs['orientation'], 'vertical')\n        self.assertEqual(kwargs['ticklocation'], 'right')\n\n    @patch('matplotlib.figure.Figure.add_subplot')\n    def test_make_axes_gridspec(self, mock_add_subplot):\n        mock_add_subplot.return_value = Axes(self.fig, [0, 0, 1, 1])\n        self.ax.set_subplotspec(self.fig.add_gridspec(1, 1)[0])\n        cax, kwargs = make_axes_gridspec(self.ax, location='bottom')\n        self.assertEqual(kwargs['orientation'], 'horizontal')\n        self.assertEqual(kwargs['ticklocation'], 'bottom')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_947": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom docutils import nodes\nfrom sphinx.builders import Builder\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.domains.python import (\n    PythonDomain, PythonModuleIndex, _parse_annotation, _pseudo_parse_arglist,\n    py_sig_re, PyFunction, PyClasslike, PyMethod, PyVariable, PyAttribute,\n    PyProperty, PyModule, PyCurrentModule, PyXRefRole, filter_meta_fields,\n    builtin_resolver, setup, ObjectEntry, ModuleEntry\n)\n\nclass TestPythonDomain(unittest.TestCase):\n    def setUp(self):\n        self.env = MagicMock(spec=BuildEnvironment)\n        self.domain = PythonDomain(self.env)\n\n    def test_note_object(self):\n        self.domain.note_object('name', 'objtype', 'node_id')\n        self.assertIn('name', self.domain.objects)\n        self.assertEqual(self.domain.objects['name'], ObjectEntry('', 'node_id', 'objtype', False))\n\n    def test_note_module(self):\n        self.domain.note_module('modname', 'node_id', 'synopsis', 'platform', True)\n        self.assertIn('modname', self.domain.modules)\n        self.assertEqual(self.domain.modules['modname'], ModuleEntry('', 'node_id', 'synopsis', 'platform', True))\n\n    def test_find_obj(self):\n        self.domain.objects = {'module.class.name': ObjectEntry('', '', 'objtype', False)}\n        matches = self.domain.find_obj(self.env, 'module', 'class', 'name', 'objtype')\n        self.assertEqual(len(matches), 1)\n        self.assertEqual(matches[0], ('module.class.name', ObjectEntry('', '', 'objtype', False)))\n\n    def test_resolve_xref(self):\n        self.domain.find_obj = MagicMock(return_value=[('name', ObjectEntry('docname', 'node_id', 'objtype', False))])\n        builder = MagicMock(spec=Builder)\n        node = nodes.reference(refdomain='py', reftype='obj', reftarget='name')\n        contnode = nodes.Text('contnode')\n        result = self.domain.resolve_xref(self.env, 'fromdocname', builder, 'obj', 'name', node, contnode)\n        self.assertIsNotNone(result)\n        self.assertEqual(result['refdocname'], 'docname')\n        self.assertEqual(result['refid'], 'node_id')\n\n    # Add more tests for other methods in PythonDomain\n\nclass TestPythonModuleIndex(unittest.TestCase):\n    def setUp(self):\n        self.domain = MagicMock(spec=PythonDomain)\n        self.index = PythonModuleIndex('name', 'localname', self.domain, 'shortname')\n\n    def test_generate(self):\n        self.domain.data = {'modules': {'module': ('docname', 'node_id', 'synopsis', 'platform', False)}}\n        result, collapse = self.index.generate()\n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][1][0][0], 'module')\n        self.assertEqual(result[0][1][0][2], 'docname')\n\n# Add more tests for other classes and functions\n\nclass TestPyFunction(unittest.TestCase):\n    def setUp(self):\n        self.env = MagicMock(spec=BuildEnvironment)\n        self.directive = PyFunction(self.env, 0, 0, 0, 0, 0, 0, 0, 0, 'name')\n\n    def test_handle_signature(self):\n        signode = nodes.signature()\n        result = self.directive.handle_signature('func(arg1, arg2)', signode)\n        self.assertEqual(result, ('func', ''))\n        self.assertEqual(signode.astext(), 'func(arg1, arg2)')\n\n# Add more tests for other directive classes\n\nclass TestPyXRefRole(unittest.TestCase):\n    def setUp(self):\n        self.env = MagicMock(spec=BuildEnvironment)\n        self.role = PyXRefRole()\n\n    def test_process_link(self):\n        refnode = nodes.reference()\n        result = self.role.process_link(self.env, refnode, False, 'title', 'target')\n        self.assertEqual(result, ('title', 'target'))\n        self.assertEqual(refnode['refspecific'], True)\n\n# Add more tests for other functions\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1094": ["\nimport unittest\nfrom sympy import symbols, sin, cos, pi, exp, S, Function, Derivative, Lambda, Integral\nfrom sympy.core.basic import Basic, Atom, preorder_traversal, as_Basic, _atomic, _aresame, _make_find_query\n\nclass TestBasic(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n        self.f = Function('f')\n\n    def test_as_Basic(self):\n        self.assertEqual(as_Basic(self.x), self.x)\n        with self.assertRaises(TypeError):\n            as_Basic('invalid')\n\n    def test_basic_attributes(self):\n        self.assertFalse(Basic().is_number)\n        self.assertFalse(Basic().is_Atom)\n        self.assertFalse(Basic().is_Symbol)\n        self.assertFalse(Basic().is_symbol)\n        self.assertFalse(Basic().is_Indexed)\n        self.assertFalse(Basic().is_Dummy)\n        self.assertFalse(Basic().is_Wild)\n        self.assertFalse(Basic().is_Function)\n        self.assertFalse(Basic().is_Add)\n        self.assertFalse(Basic().is_Mul)\n        self.assertFalse(Basic().is_Pow)\n        self.assertFalse(Basic().is_Number)\n        self.assertFalse(Basic().is_Float)\n        self.assertFalse(Basic().is_Rational)\n        self.assertFalse(Basic().is_Integer)\n        self.assertFalse(Basic().is_NumberSymbol)\n        self.assertFalse(Basic().is_Order)\n        self.assertFalse(Basic().is_Derivative)\n        self.assertFalse(Basic().is_Piecewise)\n        self.assertFalse(Basic().is_Poly)\n        self.assertFalse(Basic().is_AlgebraicNumber)\n        self.assertFalse(Basic().is_Relational)\n        self.assertFalse(Basic().is_Equality)\n        self.assertFalse(Basic().is_Boolean)\n        self.assertFalse(Basic().is_Not)\n        self.assertFalse(Basic().is_Matrix)\n        self.assertFalse(Basic().is_Vector)\n        self.assertFalse(Basic().is_Point)\n        self.assertFalse(Basic().is_MatAdd)\n        self.assertFalse(Basic().is_MatMul)\n\n    def test_basic_methods(self):\n        expr = self.x + self.y\n        self.assertEqual(expr.copy(), expr)\n        self.assertEqual(hash(expr), hash(expr.copy()))\n        self.assertEqual(expr.class_key(), (5, 0, 'Add'))\n        self.assertTrue(expr == expr.copy())\n        self.assertFalse(expr != expr.copy())\n        self.assertTrue(expr.dummy_eq(self.x + self.y))\n        self.assertEqual(str(expr), 'x + y')\n        self.assertEqual(repr(expr), 'x + y')\n        self.assertEqual(expr.atoms(), {self.x, self.y})\n        self.assertEqual(expr.free_symbols, {self.x, self.y})\n        self.assertEqual(expr.expr_free_symbols, set())\n        self.assertEqual(expr.func, type(expr))\n        self.assertEqual(expr.args, (self.x, self.y))\n        self.assertEqual(expr._sorted_args, (self.x, self.y))\n        self.assertEqual(expr.as_content_primitive(), (S.One, expr))\n        self.assertEqual(expr.subs(self.x, self.z), self.z + self.y)\n        self.assertEqual(expr.xreplace({self.x: self.z}), self.z + self.y)\n        self.assertTrue(expr.has(self.x, self.y))\n        self.assertFalse(expr.has(self.z))\n        self.assertEqual(expr.replace(self.x, self.z), self.z + self.y)\n        self.assertEqual(expr.find(self.x), {self.x})\n        self.assertEqual(expr.count(self.x), 1)\n        self.assertEqual(expr.match(self.x + self.y), {})\n        self.assertEqual(expr.count_ops(), 1)\n        self.assertEqual(expr.doit(), self.x + self.y)\n        self.assertEqual(expr.simplify(), self.x + self.y)\n        self.assertEqual(expr.rewrite(sin, cos), self.x + self.y)\n        self.assertEqual(expr.is_comparable, False)\n\n    def test_atomic(self):\n        self.assertEqual(_atomic(self.x + self.y), {self.x, self.y})\n        self.assertEqual(_atomic(self.x + self.f(self.y)), {self.x, self.f(self.y)})\n        self.assertEqual(_atomic(Derivative(self.f(self.x), self.x) + cos(self.x) + self.y), {self.y, cos(self.x), Derivative(self.f(self.x), self.x)})\n\n    def test_aresame(self):\n        self.assertTrue(_aresame(S(2.0), S(2.0)))\n        self.assertFalse(_aresame(S(2.0), S(2)))\n        self.assertTrue(_aresame(self.f(self.x), self.f(self.x)))\n        self.assertFalse(_aresame(self.f(self.x), self.f(self.y)))\n\n    def test_preorder_traversal(self):\n        expr = (self.x + self.y) * self.z\n        self.assertEqual(list(preorder_traversal(expr)), [expr, self.z, self.x + self.y, self.y, self.x])\n        self.assertEqual(list(preorder_traversal(expr, keys=True)), [expr, self.z, self.x + self.y, self.x, self.y])\n\n    def test_make_find_query(self):\n        query = _make_find_query(Function)\n        self.assertTrue(query(self.f(self.x)))\n        self.assertFalse(query(self.x))\n        query = _make_find_query(self.x)\n        self.assertTrue(query(self.x))\n        self.assertFalse(query(self.y))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_819": ["\nimport unittest\nimport numpy as np\nfrom scipy.sparse import csr_matrix\nfrom sklearn.metrics.pairwise import euclidean_distances\nfrom sklearn.metrics.pairwise import manhattan_distances\nfrom sklearn.metrics.pairwise import haversine_distances\nfrom sklearn.metrics.pairwise import linear_kernel\nfrom sklearn.metrics.pairwise import chi2_kernel, additive_chi2_kernel\nfrom sklearn.metrics.pairwise import polynomial_kernel\nfrom sklearn.metrics.pairwise import rbf_kernel\nfrom sklearn.metrics.pairwise import laplacian_kernel\nfrom sklearn.metrics.pairwise import sigmoid_kernel\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.metrics.pairwise import cosine_distances\nfrom sklearn.metrics.pairwise import pairwise_distances\nfrom sklearn.metrics.pairwise import pairwise_distances_chunked\nfrom sklearn.metrics.pairwise import pairwise_distances_argmin_min\nfrom sklearn.metrics.pairwise import pairwise_distances_argmin\nfrom sklearn.metrics.pairwise import pairwise_kernels\nfrom sklearn.metrics.pairwise import paired_distances\nfrom sklearn.metrics.pairwise import paired_euclidean_distances\nfrom sklearn.metrics.pairwise import paired_manhattan_distances\n\nclass TestPairwiseFunctions(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[0, 1], [1, 1]])\n        self.Y = np.array([[0, 1], [2, 1]])\n\n    def test_euclidean_distances(self):\n        result = euclidean_distances(self.X, self.Y)\n        expected = np.array([[0., 1.], [1., np.sqrt(2)]])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_manhattan_distances(self):\n        result = manhattan_distances(self.X, self.Y)\n        expected = np.array([[0., 1.], [2., 1.]])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_haversine_distances(self):\n        X = np.array([[np.radians(40.7128), np.radians(-74.0060)]])\n        Y = np.array([[np.radians(41.7128), np.radians(-73.0060)]])\n        result = haversine_distances(X, Y)\n        self.assertAlmostEqual(result[0, 0], 1.0445, places=4)\n\n    def test_linear_kernel(self):\n        result = linear_kernel(self.X, self.Y)\n        expected = np.array([[2., 2.], [2., 4.]])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_chi2_kernel(self):\n        result = chi2_kernel(self.X, self.Y)\n        expected = np.exp(np.array([[0., -2.], [-2., 0.]]))\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_additive_chi2_kernel(self):\n        result = additive_chi2_kernel(self.X, self.Y)\n        expected = np.array([[0., -2.], [-2., 0.]])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_polynomial_kernel(self):\n        result = polynomial_kernel(self.X, self.Y)\n        expected = np.array([[2., 4.], [4., 16.]])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_rbf_kernel(self):\n        result = rbf_kernel(self.X, self.Y)\n        expected = np.exp(np.array([[0., -0.5], [-0.5, 0.]]))\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_laplacian_kernel(self):\n        result = laplacian_kernel(self.X, self.Y)\n        expected = np.exp(np.array([[0., -1.], [-1., 0.]]))\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_sigmoid_kernel(self):\n        result = sigmoid_kernel(self.X, self.Y)\n        expected = np.tanh(np.array([[2., 0.], [0., 4.]]))\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_cosine_similarity(self):\n        result = cosine_similarity(self.X, self.Y)\n        expected = np.array([[1., 0.8571], [0.8571, 1.]])\n        np.testing.assert_array_almost_equal(result, expected, decimal=4)\n\n    def test_cosine_distances(self):\n        result = cosine_distances(self.X, self.Y)\n        expected = 1 - np.array([[1., 0.8571], [0.8571, 1.]])\n        np.testing.assert_array_almost_equal(result, expected, decimal=4)\n\n    def test_pairwise_distances(self):\n        result = pairwise_distances(self.X, self.Y, metric='euclidean')\n        expected = np.array([[0., 1.], [1., np.sqrt(2)]])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_pairwise_distances_chunked(self):\n        result = list(pairwise_distances_chunked(self.X, self.Y, metric='euclidean'))\n        expected = [np.array([[0., 1.], [1., np.sqrt(2)]])]\n        np.testing.assert_array_almost_equal(result[0], expected[0])\n\n    def test_pairwise_distances_argmin_min(self):\n        indices, distances = pairwise_distances_argmin_min(self.X, self.Y)\n        expected_indices = np.array([0, 1])\n        expected_distances = np.array([0., 1.])\n        np.testing.assert_array_equal(indices, expected_indices)\n        np.testing.assert_array_almost_equal(distances, expected_distances)\n\n    def test_pairwise_distances_argmin(self):\n        result = pairwise_distances_argmin(self.X, self.Y)\n        expected = np.array([0, 1])\n        np.testing.assert_array_equal(result, expected)\n\n    def test_pairwise_kernels(self):\n        result = pairwise_kernels(self.X, self.Y, metric='linear')\n        expected = np.array([[2., 2.], [2., 4.]])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_paired_distances(self):\n        result = paired_distances(self.X, self.Y, metric='euclidean')\n        expected = np.array([1., np.sqrt(2)])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_paired_euclidean_distances(self):\n        result = paired_euclidean_distances(self.X, self.Y)\n        expected = np.array([1., np.sqrt(2)])\n        np.testing.assert_array_almost_equal(result, expected)\n\n    def test_paired_manhattan_distances(self):\n        result = paired_manhattan_distances(self.X, self.Y)\n        expected = np.array([1., 2.])\n        np.testing.assert_array_almost_equal(result, expected)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_665": ["\nimport pytest\nfrom _pytest import deprecated\n\ndef test_deprecated_external_plugins():\n    assert 'pytest_catchlog' in deprecated.DEPRECATED_EXTERNAL_PLUGINS\n    assert 'pytest_capturelog' in deprecated.DEPRECATED_EXTERNAL_PLUGINS\n    assert 'pytest_faulthandler' in deprecated.DEPRECATED_EXTERNAL_PLUGINS\n\ndef test_funcargnames():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.FUNCARGNAMES\n\ndef test_result_log():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.RESULT_LOG\n\ndef test_fixture_positional_arguments():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.FIXTURE_POSITIONAL_ARGUMENTS\n\ndef test_junit_xml_default_family():\n    with pytest.warns(deprecated.PytestDeprecationWarning):\n        deprecated.JUNIT_XML_DEFAULT_FAMILY\n"], "sample_1087": ["\nimport unittest\nfrom sympy import symbols, Eq, Add, Rational, Integer, Matrix, S, pi, sqrt, SparseMatrix, Sum, Symbol, MatrixSymbol, RandomSymbol, Identity, ZeroMatrix, OneMatrix, Predicate, str, tuple, Transpose, Uniform, Quantity, Quaternion, Dimension, Wild, WildFunction, Zero, DMP, DMF, Object, IdentityMorphism, NamedMorphism, Category, BaseScalarField, BaseVectorField, Differential, Tr\nfrom sympy.printing.str import StrPrinter, sstr, sstrrepr\n\nclass TestStrPrinter(unittest.TestCase):\n    def setUp(self):\n        self.printer = StrPrinter({})\n        self.a, self.b = symbols('a b')\n\n    def test_sstr(self):\n        self.assertEqual(sstr(Eq(self.a + self.b, 0)), 'Eq(a + b, 0)')\n\n    def test_sstrrepr(self):\n        self.assertEqual(sstrrepr(Eq(self.a + self.b, 0)), \"'Eq(a + b, 0)'\")\n\n    def test_print_Add(self):\n        self.assertEqual(self.printer._print_Add(self.a + self.b), 'a + b')\n\n    def test_print_Rational(self):\n        self.assertEqual(self.printer._print_Rational(Rational(1, 2)), '1/2')\n\n    def test_print_Integer(self):\n        self.assertEqual(self.printer._print_Integer(Integer(5)), '5')\n\n    def test_print_Matrix(self):\n        self.assertEqual(self.printer._print_Matrix(Matrix([[1, 2], [3, 4]])), 'Matrix([\\n[1, 2],\\n[3, 4]\\n])')\n\n    def test_print_SparseMatrix(self):\n        self.assertEqual(self.printer._print_SparseMatrix(SparseMatrix([[1, 0], [0, 4]])), 'Matrix([\\n[1, 0],\\n[0, 4]\\n])')\n\n    # Continue with tests for other methods...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_624": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nfrom xarray.core import formatting\n\nclass TestFormatting(unittest.TestCase):\n\n    def setUp(self):\n        self.array = np.array([1, 2, 3, 4, 5])\n        self.series = pd.Series([1, 2, 3, 4, 5], name='test')\n        self.data_array = xr.DataArray(self.array, dims='x', name='test')\n        self.dataset = xr.Dataset({'test': self.data_array})\n\n    def test_pretty_print(self):\n        self.assertEqual(formatting.pretty_print('test', 7), 'test   ')\n\n    def test_maybe_truncate(self):\n        self.assertEqual(formatting.maybe_truncate('test', 4), 'test')\n        self.assertEqual(formatting.maybe_truncate('test', 3), 't...')\n\n    def test_wrap_indent(self):\n        self.assertEqual(formatting.wrap_indent('test', 'start', 5), 'start test')\n\n    def test_first_n_items(self):\n        self.assertTrue(np.array_equal(formatting.first_n_items(self.array, 3), np.array([1, 2, 3])))\n\n    def test_last_n_items(self):\n        self.assertTrue(np.array_equal(formatting.last_n_items(self.array, 3), np.array([3, 4, 5])))\n\n    def test_last_item(self):\n        self.assertEqual(formatting.last_item(self.array), [5])\n\n    def test_format_timestamp(self):\n        self.assertEqual(formatting.format_timestamp('2022-01-01T00:00:00'), '2022-01-01')\n\n    def test_format_timedelta(self):\n        self.assertEqual(formatting.format_timedelta('1 days 00:00:00'), '1 days')\n\n    def test_format_item(self):\n        self.assertEqual(formatting.format_item(1.12345678), '1.1235')\n\n    def test_format_items(self):\n        self.assertEqual(formatting.format_items([1, 2, 3]), ['1', '2', '3'])\n\n    def test_format_array_flat(self):\n        self.assertEqual(formatting.format_array_flat(self.array, 15), '1 2 3 4 5')\n\n    def test_summarize_variable(self):\n        summary = formatting.summarize_variable('test', self.data_array, 10)\n        self.assertTrue('test' in summary)\n        self.assertTrue('x' in summary)\n        self.assertTrue('int64' in summary)\n\n    def test_summarize_attr(self):\n        self.dataset.attrs['test'] = 'value'\n        summary = formatting.summarize_attr('test', self.dataset.attrs['test'])\n        self.assertTrue('test' in summary)\n        self.assertTrue('value' in summary)\n\n    # Add more tests for other functions in formatting.py\n"], "sample_214": ["\nimport unittest\nfrom unittest.mock import MagicMock\n\nfrom django.core.exceptions import ValidationError\nfrom django.db import NotSupportedError\nfrom django.db.models.fields.json import (\n    JSONField, KeyTransform, DataContains, ContainedBy, HasKey, HasKeys, HasAnyKeys, JSONExact,\n    KeyTransformIn, KeyTransformExact, KeyTransformIExact, KeyTransformIsNull, KeyTransformIContains,\n    KeyTransformStartsWith, KeyTransformIStartsWith, KeyTransformEndsWith, KeyTransformIEndsWith,\n    KeyTransformRegex, KeyTransformIRegex, KeyTransformLt, KeyTransformLte, KeyTransformGt, KeyTransformGte\n)\n\nclass TestJSONField(unittest.TestCase):\n    def setUp(self):\n        self.field = JSONField()\n\n    def test_init_with_invalid_encoder(self):\n        with self.assertRaises(ValueError):\n            JSONField(encoder='invalid')\n\n    def test_init_with_invalid_decoder(self):\n        with self.assertRaises(ValueError):\n            JSONField(decoder='invalid')\n\n    def test_validate_valid_json(self):\n        self.field.validate({'key': 'value'}, None)\n\n    def test_validate_invalid_json(self):\n        with self.assertRaises(ValidationError):\n            self.field.validate('invalid json', None)\n\n    # Add more tests for other methods and lookups as needed\n\nclass TestDataContains(unittest.TestCase):\n    def setUp(self):\n        self.lookup = DataContains()\n        self.compiler = MagicMock()\n        self.connection = MagicMock()\n        self.connection.features.supports_json_field_contains = True\n\n    def test_as_sql_supported(self):\n        self.lookup.as_sql(self.compiler, self.connection)\n\n    def test_as_sql_not_supported(self):\n        self.connection.features.supports_json_field_contains = False\n        with self.assertRaises(NotSupportedError):\n            self.lookup.as_sql(self.compiler, self.connection)\n\n# Add more tests for other lookups as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1036": ["\nimport unittest\nfrom sympy import symbols, Add, S, Rational, Mul, igcd, ilcm, oo, nan, I, sqrt, expand_mul, factor_terms\nfrom sympy.core.add import _unevaluated_Add, _addsort\n\nclass TestAddMethods(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_unevaluated_Add(self):\n        result = _unevaluated_Add(S(1.0), self.x, S(2))\n        self.assertEqual(result.args[0], 3.0)\n        self.assertEqual(result.args[1], self.x)\n\n    def test_unevaluated_Add_with_Add_and_Mul(self):\n        result = _unevaluated_Add(self.x + 1, self.x + 2)\n        self.assertEqual(result, Add(2*self.x, 3))\n\n    def test_addsort(self):\n        args = [self.y, self.x, 1, 2]\n        _addsort(args)\n        self.assertEqual(args, [1, 2, self.x, self.y])\n\n    def test_flatten(self):\n        result = Add.flatten([self.x + 1, self.x + 2])\n        self.assertEqual(result, ([3, self.x], [], None))\n\n    def test_as_coefficients_dict(self):\n        result = Add(3*self.x + self.y*self.x + 4).as_coefficients_dict()\n        self.assertEqual(result, {1: 4, self.x: 3, self.y*self.x: 1})\n\n    def test_as_coeff_add(self):\n        result = (7 + 3*self.x).as_coeff_add()\n        self.assertEqual(result, (7, (3*self.x,)))\n\n    def test_as_coeff_Add(self):\n        result = (7*self.x).as_coeff_Add()\n        self.assertEqual(result, (0, 7*self.x))\n\n    def test_eval_power(self):\n        result = (7 + 3*I)._eval_power(S(2))\n        self.assertEqual(result, 40 + 42*I)\n\n    def test_eval_derivative(self):\n        result = (self.x + self.y)._eval_derivative(self.x)\n        self.assertEqual(result, 1)\n\n    def test_eval_nseries(self):\n        result = (self.x + self.y)._eval_nseries(self.x, 2, 0)\n        self.assertEqual(result, self.x + self.y)\n\n    def test_matches(self):\n        result = (self.x + 5).matches(self.y + 5)\n        self.assertEqual(result, {self.x: self.y})\n\n    def test_as_two_terms(self):\n        result = (3*self.x - 2*self.y + 5).as_two_terms()\n        self.assertEqual(result, (5, 3*self.x - 2*self.y))\n\n    def test_as_numer_denom(self):\n        result = (3*self.x + 4*self.y).as_numer_denom()\n        self.assertEqual(result, (3*self.x + 4*self.y, 1))\n\n    def test_eval_is_polynomial(self):\n        result = (3*self.x + 4*self.y)._eval_is_polynomial([self.x, self.y])\n        self.assertTrue(result)\n\n    def test_eval_is_rational_function(self):\n        result = (3*self.x + 4*self.y)._eval_is_rational_function([self.x, self.y])\n        self.assertTrue(result)\n\n    def test_eval_is_algebraic_expr(self):\n        result = (3*self.x + 4*self.y)._eval_is_algebraic_expr([self.x, self.y])\n        self.assertTrue(result)\n\n    def test_eval_is_real(self):\n        result = (3*self.x + 4*self.y)._eval_is_real()\n        self.assertIsNone(result)\n\n    def test_eval_is_complex(self):\n        result = (3*self.x + 4*self.y)._eval_is_complex()\n        self.assertIsNone(result)\n\n    def test_eval_is_antihermitian(self):\n        result = (3*self.x + 4*self.y)._eval_is_antihermitian()\n        self.assertIsNone(result)\n\n    def test_eval_is_finite(self):\n        result = (3*self.x + 4*self.y)._eval_is_finite()\n        self.assertIsNone(result)\n\n    def test_eval_is_hermitian(self):\n        result = (3*self.x + 4*self.y)._eval_is_hermitian()\n        self.assertIsNone(result)\n\n    def test_eval_is_integer(self):\n        result = (3*self.x + 4*self.y)._eval_is_integer()\n        self.assertIsNone(result)\n\n    def test_eval_is_rational(self):\n        result = (3*self.x + 4*self.y)._eval_is_rational()\n        self.assertIsNone(result)\n\n    def test_eval_is_algebraic(self):\n        result = (3*self.x + 4*self.y)._eval_is_algebraic()\n        self.assertIsNone(result)\n\n    def test_eval_is_imaginary(self):\n        result = (3*self.x + 4*I*self.y)._eval_is_imaginary()\n        self.assertTrue(result)\n\n    def test_eval_is_zero(self):\n        result = (3*self.x - 3*self.x)._eval_is_zero()\n        self.assertTrue(result)\n\n    def test_eval_is_odd(self):\n        result = (self.x + 1)._eval_is_odd()\n        self.assertTrue(result)\n\n    def test_eval_is_irrational(self):\n        result = (3*self.x + 4*sqrt(2))._eval_is_irrational()\n        self.assertTrue(result)\n\n    def test_eval_is_positive(self):\n        result = (self.x + 1)._eval_is_positive()\n        self.assertIsNone(result)\n\n    def test_eval_is_nonnegative(self):\n        result = (self.x + 1)._eval_is_nonnegative()\n        self.assertIsNone(result)\n\n    def test_eval_is_nonpositive(self):\n        result = (-self.x + 1)._eval_is_nonpositive()\n        self.assertIsNone(result)\n\n    def test_eval_is_negative(self):\n        result = (-self.x - 1)._eval_is_negative()\n        self.assertIsNone(result)\n\n    def test_eval_subs(self):\n        result = (self.x + self.y)._eval_subs(self.x + self.y, 2)\n        self.assertEqual(result, 0)\n\n    def test_removeO(self):\n        result = (self.x + oo).removeO()\n        self.assertEqual(result, self.x)\n\n    def test_getO(self):\n        result = (self.x + oo).getO()\n        self.assertEqual(result, oo)\n\n    def test_extract_leading_order(self):\n        result = (self.x + 1 + 1/self.x**5).extract_leading_order(self.x)\n        self.assertEqual(result, ((self.x**(-5),),))\n\n    def test_as_real_imag(self):\n        result = (7 + 9*I).as_real_imag()\n        self.assertEqual(result, (7, 9))\n\n    def test_eval_as_leading_term(self):\n        result = (self.x + 1 + 1/self.x**5)._eval_as_leading_term(self.x)\n        self.assertEqual(result, self.x**(-5))\n\n    def test_eval_adjoint(self):\n        result = (self.x + self.y)._eval_adjoint()\n        self.assertEqual(result, self.x + self.y)\n\n    def test_eval_conjugate(self):\n        result = (self.x + self.y)._eval_conjugate()\n        self.assertEqual(result, self.x + self.y)\n\n    def test_eval_transpose(self):\n        result = (self.x + self.y)._eval_transpose()\n        self.assertEqual(result, self.x + self.y)\n\n    def test_negative(self):\n        result = -(self.x + self.y)\n        self.assertEqual(result, -self.x - self.y)\n\n    def test_primitive(self):\n        result = (2*self.x + 4*self.y).primitive()\n        self.assertEqual(result, (2, self.x + 2*self.y))\n\n    def test_as_content_primitive(self):\n        result = (2*sqrt(2) + 4*sqrt(10)).as_content_primitive(radical=True)\n        self.assertEqual(result, (2, sqrt(2)*(1 + 2*sqrt(5))))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1093": ["\nimport unittest\nfrom sympy import symbols, sqrt, tan, pi, Matrix, eye\nfrom sympy.printing.pycode import MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter, SymPyPrinter\n\nclass TestPyCode(unittest.TestCase):\n    def setUp(self):\n        self.x = symbols('x')\n\n    def test_pycode(self):\n        self.assertEqual(pycode(tan(self.x) + 1), 'math.tan(x) + 1')\n\n    def test_python_code_printer(self):\n        printer = PythonCodePrinter({'standard':'python3'})\n        self.assertEqual(printer._print_Pow(sqrt(self.x), rational=True), 'x**(1/2)')\n\n    def test_mpmath_printer(self):\n        printer = MpmathPrinter({'standard':'python3'})\n        self.assertEqual(printer._print_Pow(sqrt(self.x), rational=False), 'mpmath.sqrt(x)')\n\n    def test_numpy_printer(self):\n        printer = NumPyPrinter({'standard':'python3'})\n        self.assertEqual(printer._print_MatrixSolve(Matrix([[1, 2], [3, 4]]).inv() * Matrix([[5], [6]]))), \"numpy.linalg.solve(numpy.array([[1, 2], [3, 4]]), numpy.array([[5], [6]]))\")\n\n    def test_scipy_printer(self):\n        printer = SciPyPrinter({'standard':'python3'})\n        self.assertEqual(printer._print_lowergamma(self.x), \"scipy.special.gamma(x)*scipy.special.gammainc(x, x)\")\n\n    def test_sympy_printer(self):\n        printer = SymPyPrinter({'standard':'python3'})\n        self.assertEqual(printer._print_Pow(sqrt(self.x), rational=False), 'sympy.sqrt(x)')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_730": ["\nimport unittest\nimport numpy as np\nfrom sklearn.datasets import samples_generator as sg\n\nclass TestSamplesGenerator(unittest.TestCase):\n    def setUp(self):\n        self.random_state = 42\n\n    def test_make_classification(self):\n        X, y = sg.make_classification(n_samples=100, n_features=20, n_informative=2,\n                                       n_redundant=2, n_classes=2, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 20))\n        self.assertEqual(y.shape, (100,))\n        self.assertEqual(len(np.unique(y)), 2)\n\n    def test_make_multilabel_classification(self):\n        X, Y = sg.make_multilabel_classification(n_samples=100, n_features=20, n_classes=5,\n                                                  n_labels=2, random_state=self.random_state)\n        self.assertEqual(X.shape, (100, 20))\n        self.assertEqual(Y.shape, (100, 5))\n\n    # Add more tests for other functions in the samples_generator module\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_691": ["\nimport os\nimport subprocess\nimport sys\nimport unittest\nfrom pathlib import Path\nfrom typing import Union, List\nfrom unittest.mock import patch, MagicMock, Mock\n\nimport _pytest.pytester as pytester_mod\nfrom _pytest.config import Config, ExitCode\nfrom _pytest.config import PytestPluginManager\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.pytester import CwdSnapshot, HookRecorder, LineMatcher, Pytester, SysModulesSnapshot, SysPathsSnapshot, Testdir\nfrom _pytest._code.source import Source\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.tmpdir import TempPathFactory\n\nclass TestPytester(unittest.TestCase):\n    def setUp(self):\n        self.request = MagicMock(spec=FixtureRequest)\n        self.tmp_path_factory = MagicMock(spec=TempPathFactory)\n        self.pytester = Pytester(self.request, self.tmp_path_factory, _ispytest=True)\n\n    def test_chdir(self):\n        self.pytester.chdir()\n        self.assertEqual(os.getcwd(), str(self.pytester.path))\n\n    def test_make_hook_recorder(self):\n        pluginmanager = PytestPluginManager()\n        reprec = self.pytester.make_hook_recorder(pluginmanager)\n        self.assertIsInstance(reprec, HookRecorder)\n\n    def test_makefile(self):\n        p = self.pytester.makefile(\".txt\", \"line1\", \"line2\")\n        self.assertTrue(p.exists())\n        self.assertEqual(p.read_text(), \"line1\\nline2\")\n\n    # Add more tests for other methods as needed...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1022": ["\nimport unittest\nfrom sympy import symbols, sin, cos, exp, log, pi, Integral, Sum, Derivative\nfrom sympy.printing.mathematica import mathematica_code\n\nclass TestMathematicaCode(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_sin_function(self):\n        result = mathematica_code(sin(self.x))\n        self.assertEqual(result, 'Sin[x]')\n\n    def test_cos_function(self):\n        result = mathematica_code(cos(self.x))\n        self.assertEqual(result, 'Cos[x]')\n\n    def test_exp_function(self):\n        result = mathematica_code(exp(self.x))\n        self.assertEqual(result, 'Exp[x]')\n\n    def test_log_function(self):\n        result = mathematica_code(log(self.x))\n        self.assertEqual(result, 'Log[x]')\n\n    def test_pi_constant(self):\n        result = mathematica_code(pi)\n        self.assertEqual(result, 'Pi')\n\n    def test_integral_expression(self):\n        result = mathematica_code(Integral(sin(self.x), self.x))\n        self.assertEqual(result, 'Hold[Integrate[Sin[x], x]]')\n\n    def test_sum_expression(self):\n        result = mathematica_code(Sum(self.x**self.y, (self.y, 1, self.x)))\n        self.assertEqual(result, 'Hold[Sum[x^y, y, 1, x]]')\n\n    def test_derivative_expression(self):\n        result = mathematica_code(Derivative(sin(self.x), self.x, 2))\n        self.assertEqual(result, 'Hold[D[Sin[x], x, 2]]')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_237": ["\nfrom django.contrib.auth.checks import check_models_permissions, check_user_model\nfrom django.core import checks\nfrom django.test import SimpleTestCase, override_settings\nfrom django.apps import apps\nfrom django.contrib.auth import get_user_model\nfrom types import MethodType\n\nclass ChecksTests(SimpleTestCase):\n    @override_settings(AUTH_USER_MODEL='auth.User')\n    def test_check_user_model_valid(self):\n        errors = check_user_model()\n        self.assertEqual(errors, [])\n\n    @override_settings(AUTH_USER_MODEL='auth.User')\n    def test_check_user_model_invalid_required_fields(self):\n        User = get_user_model()\n        User.REQUIRED_FIELDS = 'not a list'\n        errors = check_user_model()\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'auth.E001')\n\n    @override_settings(AUTH_USER_MODEL='auth.User')\n    def test_check_user_model_username_in_required_fields(self):\n        User = get_user_model()\n        User.REQUIRED_FIELDS = [User.USERNAME_FIELD]\n        errors = check_user_model()\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].id, 'auth.E002')\n\n    # Additional tests for unique username field and is_anonymous and is_authenticated methods\n\n    def test_check_models_permissions_valid(self):\n        errors = check_models_permissions()\n        self.assertEqual(errors, [])\n\n    # Additional tests for permission name length, permission codename length,\n    # custom permissions codename clashing, and custom permissions codename duplication\n"], "sample_979": ["\nimport unittest\nfrom sympy import symbols, S, Piecewise, Interval\nfrom sympy.functions.special.bsplines import bspline_basis, bspline_basis_set\n\nx = symbols('x')\n\nclass TestBSplines(unittest.TestCase):\n\n    def test_bspline_basis(self):\n        self.assertEqual(bspline_basis(0, range(5), 0, x), Piecewise((1, (x >= 0) & (x <= 1)), (0, True)))\n        self.assertRaises(ValueError, bspline_basis, -1, range(5), 0, x)\n        self.assertRaises(ValueError, bspline_basis, 3, range(5), 2, x)\n\n    def test_bspline_basis_set(self):\n        result = bspline_basis_set(2, range(5), x)\n        self.assertEqual(len(result), 3)\n        self.assertEqual(result[0], Piecewise((x**2/2, (x >= 0) & (x <= 1)), (-x**2 + 3*x - 3/2, (x >= 1) & (x <= 2)), (x**2/2 - 3*x + 9/2, (x >= 2) & (x <= 3)), (0, True)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_67": ["\nfrom django.core.exceptions import DisallowedHost, ImproperlyConfigured\nfrom django.http import HttpRequest, QueryDict, RawPostDataException, UnreadablePostError\nfrom django.http.request import HttpHeaders, bytes_to_text, split_domain_port, validate_host\nfrom django.test import SimpleTestCase, override_settings\n\nclass HttpRequestTests(SimpleTestCase):\n    def test_get_host(self):\n        request = HttpRequest()\n        request.META = {'HTTP_HOST': 'example.com'}\n        self.assertEqual(request.get_host(), 'example.com')\n\n        with self.assertRaises(DisallowedHost):\n            request.META = {'HTTP_HOST': 'example.org'}\n            request.get_host()\n\n    def test_get_port(self):\n        request = HttpRequest()\n        request.META = {'SERVER_PORT': '8000'}\n        self.assertEqual(request.get_port(), '8000')\n\n        with override_settings(USE_X_FORWARDED_PORT=True):\n            request.META = {'HTTP_X_FORWARDED_PORT': '9000'}\n            self.assertEqual(request.get_port(), '9000')\n\n    def test_get_full_path(self):\n        request = HttpRequest()\n        request.path = '/test/'\n        request.META = {'QUERY_STRING': 'q=django'}\n        self.assertEqual(request.get_full_path(), '/test/?q=django')\n\n    def test_get_raw_uri(self):\n        request = HttpRequest()\n        request.META = {'HTTP_HOST': 'example.com'}\n        request.path = '/test/'\n        self.assertEqual(request.get_raw_uri(), 'http://example.com/test/')\n\n    def test_build_absolute_uri(self):\n        request = HttpRequest()\n        request.META = {'HTTP_HOST': 'example.com'}\n        request.path = '/test/'\n        self.assertEqual(request.build_absolute_uri(), 'http://example.com/test/')\n\n    def test_scheme(self):\n        request = HttpRequest()\n        request.META = {}\n        self.assertEqual(request.scheme, 'http')\n\n        with override_settings(SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTO', 'https')):\n            request.META = {'HTTP_X_FORWARDED_PROTO': 'https'}\n            self.assertEqual(request.scheme, 'https')\n\n        with self.assertRaises(ImproperlyConfigured):\n            with override_settings(SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTO',)):\n                request.META = {'HTTP_X_FORWARDED_PROTO': 'https'}\n                request.scheme\n\n    def test_is_secure(self):\n        request = HttpRequest()\n        request.META = {}\n        self.assertFalse(request.is_secure())\n\n        with override_settings(SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTO', 'https')):\n            request.META = {'HTTP_X_FORWARDED_PROTO': 'https'}\n            self.assertTrue(request.is_secure())\n\n    def test_is_ajax(self):\n        request = HttpRequest()\n        request.META = {}\n        self.assertFalse(request.is_ajax())\n\n        request.META = {'HTTP_X_REQUESTED_WITH': 'XMLHttpRequest'}\n        self.assertTrue(request.is_ajax())\n\nclass HttpHeadersTests(SimpleTestCase):\n    def test_parse_header_name(self):\n        self.assertEqual(HttpHeaders.parse_header_name('HTTP_USER_AGENT'), 'User-Agent')\n        self.assertEqual(HttpHeaders.parse_header_name('CONTENT_TYPE'), 'Content-Type')\n        self.assertEqual(HttpHeaders.parse_header_name('HTTP_INVALID'), None)\n\nclass QueryDictTests(SimpleTestCase):\n    def test_bytes_to_text(self):\n        self.assertEqual(bytes_to_text(b'django', 'utf-8'), 'django')\n        self.assertEqual(bytes_to_text('django', 'utf-8'), 'django')\n\n    def test_split_domain_port(self):\n        self.assertEqual(split_domain_port('example.com'), ('example.com', ''))\n        self.assertEqual(split_domain_port('example.com:8000'), ('example.com', '8000'))\n        self.assertEqual(split_domain_port('[::1]'), ('[::1]', ''))\n        self.assertEqual(split_domain_port('[::1]:8000'), ('[::1]', '8000'))\n        self.assertEqual(split_domain_port('invalid_host'), ('', ''))\n\n    def test_validate_host(self):\n        self.assertTrue(validate_host('example.com', ['example.com']))\n        self.assertTrue(validate_host('subdomain.example.com', ['.example.com']))\n        self.assertTrue(validate_host('example.com', ['*']))\n        self.assertFalse(validate_host('example.com', ['example.org']))\n        self.assertFalse(validate_host('example.com', ['.example.org']))\n"], "sample_24": ["\nimport numpy as np\nimport pytest\nfrom numpy.testing import assert_array_equal\nfrom astropy.units import Quantity, UnitTypeError, dimensionless_unscaled\nfrom astropy.units.si import radian\nfrom astropy.units.quantity_helper.function_helpers import (\n    SUBCLASS_SAFE_FUNCTIONS,\n    FUNCTION_HELPERS,\n    DISPATCHED_FUNCTIONS,\n    UNSUPPORTED_FUNCTIONS,\n    function_helper,\n    dispatched_function,\n    unwrap,\n    close,\n    array_equal,\n    array_equiv,\n    dot_like,\n    cross_like,\n    einsum,\n    bincount,\n    digitize,\n    histogram,\n    histogram_bin_edges,\n    histogram2d,\n    histogramdd,\n    diff,\n    gradient,\n    logspace,\n    geomspace,\n    interp,\n    unique,\n    intersect1d,\n    twosetop,\n    setcheckop,\n    apply_over_axes,\n    array_repr,\n    array_str,\n    array2string,\n    diag,\n    svd,\n    matrix_rank,\n    inv,\n    pinv,\n    det,\n    solve,\n    lstsq,\n    norm,\n    matrix_power,\n    cholesky,\n    qr,\n    eig,\n    merge_arrays,\n)\nfrom astropy.units.quantity_helper.function_helpers import _iterable_helper, _quantities2arrays, _check_bins, _check_range, _as_quantities, _as_quantity\n\ndef test_function_helper_decorator():\n    @function_helper\n    def test_func(x):\n        return (x.view(np.ndarray),), {}, x.unit, None\n\n    assert test_func in FUNCTION_HELPERS\n\ndef test_dispatched_function_decorator():\n    @dispatched_function\n    def test_func(x):\n        return x * 2, x.unit, None\n\n    assert test_func in DISPATCHED_FUNCTIONS\n\ndef test_unwrap():\n    p = Quantity([1, 2, 3], unit=radian)\n    result = unwrap(p)\n    assert isinstance(result, Quantity)\n    assert_array_equal(result.value, np.unwrap(p.to_value(radian)))\n\ndef test_close():\n    a = Quantity([1, 2, 3], unit='m')\n    b = Quantity([1.01, 2.02, 3.03], unit='m')\n    result = close(a, b)\n    assert isinstance(result, np.ndarray)\n    assert_array_equal(result, np.isclose(a.value, b.value, rtol=1e-05, atol=1e-08))\n\ndef test_array_equal():\n    a1 = Quantity([1, 2, 3], unit='m')\n    a2 = Quantity([1.0, 2.0, 3.0], unit='m')\n    result = array_equal(a1, a2)\n    assert result == True\n\ndef test_array_equiv():\n    a1 = Quantity([1, 2, 3], unit='m')\n    a2 = Quantity([1.0, 2.0, 3.0], unit='m')\n    result = array_equiv(a1, a2)\n    assert result == True\n\ndef test_dot_like():\n    a = Quantity([1, 2, 3], unit='m')\n    b = Quantity([4, 5, 6], unit='s')\n    result = dot_like(a, b)\n    assert isinstance(result, Quantity)\n    assert result.unit == a.unit * b.unit\n\ndef test_cross_like():\n    a = Quantity([1, 2, 3], unit='m')\n    b = Quantity([4, 5, 6], unit='m')\n    result = cross_like(a, b)\n    assert isinstance(result, Quantity)\n    assert result.unit == a.unit * b.unit\n\ndef test_einsum():\n    a = Quantity([1, 2, 3], unit='m')\n    b = Quantity([4, 5, 6], unit='s')\n    result = einsum(\"i,i->\", a, b)\n    assert isinstance(result, Quantity)\n    assert result.unit == a.unit * b.unit\n\ndef test_bincount():\n    x = np.array([1, 1, 2, 3, 2, 1, 7, 2])\n    weights = Quantity([0.3, 0.5, 0.2, 0.7, 1.6, 0.3, 0.2, 0.5], unit='kg')\n    result = bincount(x, weights=weights)\n    assert isinstance(result, Quantity)\n    assert result.unit == weights.unit\n\ndef test_digitize():\n    x = Quantity([0.2, 6.4, 3.0, 1.6], unit='m')\n    bins = Quantity([0.0, 1.0, 2.5, 4.0, 10.0], unit='m')\n    result = digitize(x, bins)\n    assert isinstance(result, np.ndarray)\n    assert_array_equal(result, np.digitize(x.value, bins.value))\n\ndef test_histogram():\n    a = Quantity([1, 2, 1], unit='m')\n    result = histogram(a, bins=3)\n    assert isinstance(result, tuple)\n    assert len(result) == 2\n    assert isinstance(result[0], np.ndarray)\n    assert isinstance(result[1], Quantity)\n\ndef test_histogram_bin_edges():\n    a = Quantity([1, 2, 1], unit='m')\n    result = histogram_bin_edges(a, bins=3)\n    assert isinstance(result, np.ndarray)\n    assert_array_equal(result, np.histogram_bin_edges(a.value, bins=3))\n\ndef test_histogram2d():\n    x = Quantity([1, 2, 1], unit='m')\n    y = Quantity([1, 2, 3], unit='s')\n    result = histogram2d(x, y, bins=(2, 2))\n    assert isinstance(result, tuple)\n    assert len(result) == 3\n    assert isinstance(result[0], np.ndarray)\n    assert isinstance(result[1], Quantity)\n    assert isinstance(result[2], Quantity)\n\ndef test_histogramdd():\n    sample = Quantity([(1, 1), (2, 2), (1, 1)], unit='m')\n    result = histogramdd(sample, bins=(2, 2))\n    assert isinstance(result, tuple)\n    assert len(result) == 3\n    assert isinstance(result[0], np.ndarray)\n    assert isinstance(result[1], Quantity)\n    assert isinstance(result[2], Quantity)\n\ndef test_diff():\n    a = Quantity([1, 2, 4, 7, 0], unit='m')\n    result = diff(a)\n    assert isinstance(result, Quantity)\n    assert result.unit == a.unit\n\ndef test_gradient():\n    f = Quantity([1, 2, 4, 7, 11, 16], unit='m')\n    result = gradient(f)\n    assert isinstance(result, np.ndarray)\n    assert result.shape == (f.ndim,)\n\ndef test_logspace():\n    start = Quantity(1, unit='m')\n    stop = Quantity(10, unit='m')\n    result = logspace(start, stop, num=10)\n    assert isinstance(result, Quantity)\n    assert result.unit == start.unit\n\ndef test_geomspace():\n    start = Quantity(1, unit='m')\n    stop = Quantity(10, unit='m')\n    result = geomspace(start, stop, num=10)\n    assert isinstance(result, Quantity)\n    assert result.unit == start.unit\n\ndef test_interp():\n    x = Quantity([0, 1, 2, 3], unit='m')\n    xp = Quantity([1, 2], unit='m')\n    fp = Quantity([3, 2], unit='s')\n    result = interp(x, xp, fp)\n    assert isinstance(result, Quantity)\n    assert result.unit == fp.unit\n\ndef test_unique():\n    ar = Quantity([1, 2, 3, 2, 3, 4], unit='m')\n    result = unique(ar)\n    assert isinstance(result, np.ndarray)\n    assert result.unit == ar.unit\n\ndef test_intersect1d():\n    ar1 = Quantity([1, 2, 3], unit='m')\n    ar2 = Quantity([2, 3, 4], unit='m')\n    result = intersect1d(ar1, ar2)\n    assert isinstance(result, np.ndarray)\n    assert result.unit == ar1.unit\n\ndef test_twosetop():\n    ar1 = Quantity([1, 2, 3], unit='m')\n    ar2 = Quantity([2, 3, 4], unit='m')\n    result = twosetop(ar1, ar2)\n    assert isinstance(result, np.ndarray)\n    assert result.unit == ar1.unit\n\ndef test_setcheckop():\n    ar1 = Quantity([1, 2, 3], unit='m')\n    ar2 = Quantity([2, 3, 4], unit='m')\n    result = setcheckop(ar1, ar2)\n    assert isinstance(result, np.ndarray)\n    assert result.dtype == bool\n\ndef test_apply_over_axes():\n    def func(x):\n        return np.sum(x, axis=-1)\n\n    a = Quantity([[1, 2], [3, 4]], unit='m')\n    axes = (0, 1)\n    result = apply_over_axes(func, a, axes)\n    assert isinstance(result, Quantity)\n    assert result.unit == a.unit\n\ndef test_array_repr():\n    arr = Quantity([1, 2, 3], unit='m')\n    result = array_repr(arr)\n    assert isinstance(result, str)\n    assert 'unit' in result\n\ndef test_array_str():\n    arr = Quantity([1, 2, 3], unit='m')\n    result = array_str(arr)\n    assert isinstance(result, str)\n    assert 'unit' in result\n\ndef test_array2string():\n    a = Quantity([1, 2, 3], unit='m')\n    result = array2string(a)\n    assert isinstance(result, str)\n\ndef test_diag():\n    v = Quantity([1, 2, 3], unit='m')\n    result = diag(v)\n    assert isinstance(result, Quantity)\n    assert result.unit == v.unit\n\ndef test_svd():\n    a = Quantity([[1, 2], [3, 4]], unit='m')\n    result = svd(a)\n    assert isinstance(result, tuple)\n    assert len(result) == 3\n    assert isinstance(result[0], np.ndarray)\n    assert isinstance(result[1], Quantity)\n    assert isinstance(result[2], np.ndarray)\n\ndef test_matrix_rank():\n    M = Quantity([[1, 2], [3, 4]], unit='m')\n    result = matrix_rank(M)\n    assert isinstance(result, int)\n\ndef test_inv():\n    a = Quantity([[1, 2], [3, 4]], unit='m')\n    result = inv(a)\n    assert isinstance(result, Quantity)\n    assert result.unit == 1 / a.unit\n\ndef test_pinv():\n    a = Quantity([[1, 2], [3, 4]], unit='m')\n    result = pinv(a)\n    assert isinstance(result, Quantity)\n    assert result.unit == 1 / a.unit\n\ndef test_det():\n    a = Quantity([[1, 2], [3, 4]], unit='m')\n    result = det(a)\n    assert isinstance(result, Quantity)\n    assert result.unit == a.unit ** a.shape[-1]\n\ndef test_solve():\n    a = Quantity([[1, 2], [3, 4]], unit='m')\n    b = Quantity([5, 6], unit='s')\n    result = solve(a, b)\n    assert isinstance(result, Quantity)\n    assert result.unit == b.unit / a.unit\n\ndef test_lstsq():\n    a = Quantity([[1, 2], [3, 4]], unit='m')\n    b = Quantity([5, 6], unit='s')\n    result = lstsq(a, b)\n    assert isinstance(result, tuple)\n    assert len(result) == 4\n    assert isinstance(result[0], Quantity)\n    assert isinstance(result[1], Quantity)\n    assert isinstance(result[2], np.ndarray)\n    assert isinstance(result[3], Quantity)\n\ndef test_norm():\n    x = Quantity([1, 2, 3], unit='m')\n    result = norm(x)\n    assert isinstance(result, Quantity)\n    assert result.unit == x.unit\n\ndef test_matrix_power():\n    a = Quantity([[1, 2], [3, 4]], unit='m')\n    n = 2\n    result = matrix_power(a, n)\n    assert isinstance(result, Quantity)\n    assert result.unit == a.unit ** n\n\ndef test_cholesky():\n    a = Quantity([[1, 2], [3, 4]], unit='m')\n    result = cholesky(a)\n    assert isinstance(result, Quantity)\n    assert result.unit == a.unit ** 0.5\n\ndef test_qr():\n    a = Quantity([[1, 2], [3, 4]], unit='m')\n    result = qr(a)\n    assert isinstance(result, tuple)\n    assert len(result) == 2\n    assert isinstance(result[0], np.ndarray)\n    assert isinstance(result[1], Quantity)\n\ndef test_eig():\n    a = Quantity([[1, 2], [3, 4]], unit='m')\n    result = eig(a)\n    assert isinstance(result, tuple)\n    assert len(result) == 2\n    assert isinstance(result[0], np.ndarray)\n    assert isinstance(result[1], np.ndarray)\n\ndef test_merge_arrays():\n    seqarrays = (\n        Quantity([1, 2, 3], unit='m'),\n        Quantity([4, 5, 6], unit='s'),\n    )\n    result = merge_arrays(seqarrays)\n    assert isinstance(result, Quantity)\n    assert result.unit == seqarrays[0].unit\n"], "sample_218": ["\nfrom django.test import TestCase\nfrom django.db.models import DateTimeField\nfrom django.db.models.functions import (\n    ExtractYear, ExtractIsoYear, ExtractMonth, ExtractDay, ExtractWeek, ExtractWeekDay,\n    ExtractIsoWeekDay, ExtractQuarter, ExtractHour, ExtractMinute, ExtractSecond,\n    TruncYear, TruncQuarter, TruncMonth, TruncWeek, TruncDay, TruncDate, TruncTime,\n    TruncHour, TruncMinute, TruncSecond,\n)\nfrom datetime import datetime, timezone\n\nclass DateTimeFunctionsTest(TestCase):\n    def setUp(self):\n        self.test_datetime = datetime(2022, 3, 15, 12, 30, 15, tzinfo=timezone.utc)\n\n    def test_extract_year(self):\n        result = ExtractYear(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.lookup_name, 'year')\n\n    def test_extract_iso_year(self):\n        result = ExtractIsoYear(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.lookup_name, 'iso_year')\n\n    def test_extract_month(self):\n        result = ExtractMonth(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.lookup_name, 'month')\n\n    def test_extract_day(self):\n        result = ExtractDay(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.lookup_name, 'day')\n\n    def test_extract_week(self):\n        result = ExtractWeek(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.lookup_name, 'week')\n\n    def test_extract_week_day(self):\n        result = ExtractWeekDay(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.lookup_name, 'week_day')\n\n    def test_extract_iso_week_day(self):\n        result = ExtractIsoWeekDay(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.lookup_name, 'iso_week_day')\n\n    def test_extract_quarter(self):\n        result = ExtractQuarter(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.lookup_name, 'quarter')\n\n    def test_extract_hour(self):\n        result = ExtractHour(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.lookup_name, 'hour')\n\n    def test_extract_minute(self):\n        result = ExtractMinute(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.lookup_name, 'minute')\n\n    def test_extract_second(self):\n        result = ExtractSecond(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.lookup_name, 'second')\n\n    def test_trunc_year(self):\n        result = TruncYear(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.kind, 'year')\n\n    def test_trunc_quarter(self):\n        result = TruncQuarter(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.kind, 'quarter')\n\n    def test_trunc_month(self):\n        result = TruncMonth(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.kind, 'month')\n\n    def test_trunc_week(self):\n        result = TruncWeek(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.kind, 'week')\n\n    def test_trunc_day(self):\n        result = TruncDay(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.kind, 'day')\n\n    def test_trunc_date(self):\n        result = TruncDate(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.kind, 'date')\n\n    def test_trunc_time(self):\n        result = TruncTime(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.kind, 'time')\n\n    def test_trunc_hour(self):\n        result = TruncHour(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.kind, 'hour')\n\n    def test_trunc_minute(self):\n        result = TruncMinute(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.kind, 'minute')\n\n    def test_trunc_second(self):\n        result = TruncSecond(DateTimeField('test_datetime'))\n        self.assertEqual(result.resolve_expression().lhs.output_field, DateTimeField)\n        self.assertEqual(result.kind, 'second')\n"], "sample_813": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.bayes import BayesianRidge, ARDRegression\n\nclass TestBayesianLinearModels(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[0, 0], [1, 1], [2, 2]])\n        self.y = np.array([0, 1, 2])\n\n    def test_bayesian_ridge(self):\n        model = BayesianRidge()\n        model.fit(self.X, self.y)\n        self.assertEqual(model.coef_.shape, (2,))\n        self.assertIsInstance(model.predict(self.X), np.ndarray)\n        self.assertIsInstance(model.predict(self.X, return_std=True), tuple)\n\n    def test_ard_regression(self):\n        model = ARDRegression()\n        model.fit(self.X, self.y)\n        self.assertEqual(model.coef_.shape, (2,))\n        self.assertIsInstance(model.predict(self.X), np.ndarray)\n        self.assertIsInstance(model.predict(self.X, return_std=True), tuple)\n\n    def test_bayesian_ridge_n_iter(self):\n        model = BayesianRidge(n_iter=50)\n        model.fit(self.X, self.y)\n        self.assertLessEqual(model.n_iter_, 50)\n\n    def test_ard_regression_n_iter(self):\n        model = ARDRegression(n_iter=50)\n        model.fit(self.X, self.y)\n        self.assertLessEqual(model.n_iter, 50)\n\n    def test_bayesian_ridge_intercept(self):\n        model = BayesianRidge(fit_intercept=False)\n        model.fit(self.X, self.y)\n        self.assertEqual(model.intercept_, 0.0)\n\n    def test_ard_regression_intercept(self):\n        model = ARDRegression(fit_intercept=False)\n        model.fit(self.X, self.y)\n        self.assertEqual(model._decision_function(self.X[0]), model.coef_.dot(self.X[0]))\n\n    def test_bayesian_ridge_normalize(self):\n        model = BayesianRidge(normalize=True)\n        model.fit(self.X, self.y)\n        self.assertTrue(np.allclose(model.X_scale_, np.array([1., 1.])))\n\n    def test_ard_regression_normalize(self):\n        model = ARDRegression(normalize=True)\n        model.fit(self.X, self.y)\n        self.assertTrue(np.allclose(model.X_scale_, np.array([1., 1.])))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_735": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model.logistic import LogisticRegression, logistic_regression_path, LogisticRegressionCV\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\n\nclass TestLogisticRegression(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, random_state=42)\n        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.X, self.y, test_size=0.2, random_state=42)\n\n    def test_logistic_regression_fit(self):\n        lr = LogisticRegression()\n        lr.fit(self.X_train, self.y_train)\n        self.assertIsNotNone(lr.coef_)\n        self.assertIsNotNone(lr.intercept_)\n\n    def test_logistic_regression_predict(self):\n        lr = LogisticRegression()\n        lr.fit(self.X_train, self.y_train)\n        predictions = lr.predict(self.X_test)\n        self.assertEqual(len(predictions), len(self.y_test))\n\n    def test_logistic_regression_path(self):\n        coefs, Cs, n_iter = logistic_regression_path(self.X_train, self.y_train)\n        self.assertEqual(len(coefs), len(Cs))\n        self.assertEqual(len(n_iter), len(Cs))\n\n    def test_logistic_regression_cv_fit(self):\n        lrcv = LogisticRegressionCV()\n        lrcv.fit(self.X_train, self.y_train)\n        self.assertIsNotNone(lrcv.coef_)\n        self.assertIsNotNone(lrcv.intercept_)\n        self.assertIsNotNone(lrcv.Cs_)\n\n    def test_logistic_regression_cv_predict(self):\n        lrcv = LogisticRegressionCV()\n        lrcv.fit(self.X_train, self.y_train)\n        predictions = lrcv.predict(self.X_test)\n        self.assertEqual(len(predictions), len(self.y_test))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_114": ["\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.db.models import fields\nfrom django.db.models.expressions import (\n    CombinedExpression, DurationExpression, TemporalSubtraction, F, Func,\n    Value, RawSQL, Star, Random, Col, SimpleCol, Ref, ExpressionList,\n    ExpressionWrapper, When, Case, Subquery, Exists, OrderBy, Window,\n    RowRange, ValueRange\n)\n\nclass TestExpressions(TestCase):\n\n    def setUp(self):\n        self.field = models.IntegerField()\n\n    def test_combined_expression(self):\n        expr = CombinedExpression(F('field1'), '+', F('field2'), output_field=self.field)\n        self.assertEqual(str(expr), \"field1 + field2\")\n\n    def test_duration_expression(self):\n        expr = DurationExpression(F('field1'), '-', F('field2'), output_field=self.field)\n        self.assertEqual(str(expr), \"field1 - field2\")\n\n    def test_temporal_subtraction(self):\n        expr = TemporalSubtraction(F('field1'), F('field2'))\n        self.assertEqual(str(expr), \"field1 - field2\")\n\n    def test_f_expression(self):\n        expr = F('field1')\n        self.assertEqual(str(expr), \"field1\")\n\n    def test_func_expression(self):\n        expr = Func(F('field1'), function='SUM')\n        self.assertEqual(str(expr), \"SUM(field1)\")\n\n    def test_value_expression(self):\n        expr = Value(10, output_field=self.field)\n        self.assertEqual(str(expr), \"10\")\n\n    def test_raw_sql_expression(self):\n        expr = RawSQL('SELECT 1', [])\n        self.assertEqual(str(expr), \"(SELECT 1)\")\n\n    def test_star_expression(self):\n        expr = Star()\n        self.assertEqual(str(expr), \"*\")\n\n    def test_random_expression(self):\n        expr = Random()\n        self.assertEqual(str(expr), \"Random()\")\n\n    def test_col_expression(self):\n        expr = Col('alias', self.field)\n        self.assertEqual(str(expr), \"alias.field\")\n\n    def test_simple_col_expression(self):\n        expr = SimpleCol(self.field)\n        self.assertEqual(str(expr), \"field\")\n\n    def test_ref_expression(self):\n        expr = Ref('ref', F('field1'))\n        self.assertEqual(str(expr), \"ref\")\n\n    def test_expression_list(self):\n        expr = ExpressionList(F('field1'), F('field2'))\n        self.assertEqual(str(expr), \"field1, field2\")\n\n    def test_expression_wrapper(self):\n        expr = ExpressionWrapper(F('field1'), output_field=self.field)\n        self.assertEqual(str(expr), \"field1\")\n\n    def test_when_expression(self):\n        expr = When(F('field1') > 0, then=Value('positive'))\n        self.assertEqual(str(expr), \"WHEN field1 > 0 THEN 'positive'\")\n\n    def test_case_expression(self):\n        expr = Case(When(F('field1') > 0, then=Value('positive')), default=Value('zero'))\n        self.assertEqual(str(expr), \"CASE WHEN field1 > 0 THEN 'positive', ELSE 'zero'\")\n\n    def test_subquery_expression(self):\n        qs = models.Model.objects.all()\n        expr = Subquery(qs)\n        self.assertEqual(str(expr), \"(SELECT * FROM myapp_model)\")\n\n    def test_exists_expression(self):\n        qs = models.Model.objects.all()\n        expr = Exists(qs)\n        self.assertEqual(str(expr), \"EXISTS(SELECT * FROM myapp_model)\")\n\n    def test_order_by_expression(self):\n        expr = OrderBy(F('field1'), descending=True)\n        self.assertEqual(str(expr), \"field1 DESC\")\n\n    def test_window_expression(self):\n        expr = Window(Func(F('field1'), function='SUM'), partition_by=F('field2'), order_by=F('field3'))\n        self.assertEqual(str(expr), \"SUM(field1) OVER (PARTITION BY field2 ORDER BY field3)\")\n\n    def test_row_range_expression(self):\n        expr = RowRange(start=0, end=5)\n        self.assertEqual(str(expr), \"ROWS BETWEEN CURRENT ROW AND 5 FOLLOWING\")\n\n    def test_value_range_expression(self):\n        expr = ValueRange(start=-5, end=5)\n        self.assertEqual(str(expr), \"RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING\")\n"], "sample_167": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.utils.crypto import (\n    InvalidAlgorithm,\n    constant_time_compare,\n    get_random_string,\n    pbkdf2,\n    salted_hmac,\n)\n\nclass TestCrypto(unittest.TestCase):\n\n    def test_salted_hmac(self):\n        key_salt = \"test_key_salt\"\n        value = \"test_value\"\n        secret = \"test_secret\"\n        algorithm = \"sha1\"\n        result = salted_hmac(key_salt, value, secret, algorithm=algorithm)\n        self.assertIsNotNone(result)\n\n    def test_salted_hmac_invalid_algorithm(self):\n        key_salt = \"test_key_salt\"\n        value = \"test_value\"\n        secret = \"test_secret\"\n        algorithm = \"invalid_algorithm\"\n        with self.assertRaises(InvalidAlgorithm):\n            salted_hmac(key_salt, value, secret, algorithm=algorithm)\n\n    def test_get_random_string(self):\n        length = 10\n        result = get_random_string(length)\n        self.assertEqual(len(result), length)\n\n    def test_constant_time_compare(self):\n        val1 = \"test_value\"\n        val2 = \"test_value\"\n        result = constant_time_compare(val1, val2)\n        self.assertTrue(result)\n\n        val1 = \"test_value\"\n        val2 = \"different_value\"\n        result = constant_time_compare(val1, val2)\n        self.assertFalse(result)\n\n    def test_pbkdf2(self):\n        password = \"test_password\"\n        salt = \"test_salt\"\n        iterations = 10000\n        dklen = 32\n        result = pbkdf2(password, salt, iterations, dklen)\n        self.assertEqual(len(result), dklen)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_209": ["\nfrom django.test import TestCase\nfrom django.db import models\nfrom django.db.models.base import Model\n\nclass ModelBaseTest(TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            test_field = models.CharField(max_length=200)\n\n        self.TestModel = TestModel\n\n    def test_model_creation(self):\n        obj = self.TestModel(test_field='test')\n        self.assertEqual(obj.test_field, 'test')\n\n    def test_model_save(self):\n        obj = self.TestModel(test_field='test')\n        obj.save()\n        self.assertIsNotNone(obj.pk)\n\n    def test_model_delete(self):\n        obj = self.TestModel(test_field='test')\n        obj.save()\n        obj_id = obj.pk\n        obj.delete()\n        with self.assertRaises(self.TestModel.DoesNotExist):\n            self.TestModel.objects.get(pk=obj_id)\n\n    # Add more tests as needed...\n\n    # Test _save_table method\n    # Test _do_update method\n    # Test _do_insert method\n    # Test delete method\n    # Test _get_next_or_previous_by_FIELD method\n    # Test _get_next_or_previous_in_order method\n    # Test prepare_database_save method\n    # Test clean method\n    # Test validate_unique method\n    # Test full_clean method\n    # Test clean_fields method\n    # Test check method\n    # Test _check_swappable method\n    # Test _check_model method\n    # Test _check_managers method\n    # Test _check_fields method\n    # Test _check_m2m_through_same_relationship method\n    # Test _check_id_field method\n    # Test _check_field_name_clashes method\n    # Test _check_column_name_clashes method\n    # Test _check_model_name_db_lookup_clashes method\n    # Test _check_property_name_related_field_accessor_clashes method\n    # Test _check_single_primary_key method\n    # Test _check_index_together method\n    # Test _check_unique_together method\n    # Test _check_indexes method\n    # Test _check_local_fields method\n    # Test _check_ordering method\n    # Test _check_long_column_names method\n    # Test _get_expr_references method\n    # Test _check_constraints method\n"], "sample_277": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.models import Q\nfrom django.db.models.query_utils import PathInfo, subclasses, RegisterLookupMixin, select_related_descend, refs_expression, check_rel_lookup_compatibility, FilteredRelation\n\nclass TestQueryUtils(unittest.TestCase):\n    def test_path_info(self):\n        path_info = PathInfo('from_opts', 'to_opts', 'target_fields', 'join_field', 'm2m', 'direct', 'filtered_relation')\n        self.assertEqual(path_info.from_opts, 'from_opts')\n\n    def test_subclasses(self):\n        class A:\n            pass\n        class B(A):\n            pass\n        class C(B):\n            pass\n        self.assertEqual(list(subclasses(A)), [A, B, C])\n\n    def test_q_combine(self):\n        q1 = Q(name='test1')\n        q2 = Q(name='test2')\n        combined = q1._combine(q2, Q.OR)\n        self.assertEqual(combined.connector, Q.OR)\n        self.assertEqual(combined.children, [q1, q2])\n\n    def test_register_lookup_mixin(self):\n        class TestLookup:\n            pass\n        RegisterLookupMixin.register_lookup(TestLookup)\n        self.assertIn('testlookup', RegisterLookupMixin.get_lookups())\n\n    def test_select_related_descend(self):\n        field = Mock()\n        field.remote_field = True\n        field.null = False\n        self.assertTrue(select_related_descend(field, False, {}, []))\n\n    def test_refs_expression(self):\n        annotations = {'test__expr': True}\n        lookup_parts = ['test', 'expr', 'part']\n        result, remaining_parts = refs_expression(lookup_parts, annotations)\n        self.assertTrue(result)\n        self.assertEqual(remaining_parts, ['part'])\n\n    def test_check_rel_lookup_compatibility(self):\n        class Model:\n            class _meta:\n                concrete_model = 'Model'\n                def get_parent_list():\n                    return []\n        class TargetOpts:\n            class _meta:\n                concrete_model = 'Model'\n        field = Mock()\n        field.primary_key = False\n        self.assertTrue(check_rel_lookup_compatibility(Model, TargetOpts, field))\n\n    def test_filtered_relation(self):\n        filtered_relation = FilteredRelation('relation_name')\n        self.assertEqual(filtered_relation.relation_name, 'relation_name')\n        self.assertEqual(filtered_relation.condition, Q())\n"], "sample_40": ["\nimport unittest\nfrom astropy import units as u\nfrom astropy.units import utils\nfrom astropy.units import imperial\nfrom astropy.units import cgs\nfrom astropy.units import cds\nfrom astropy.units import astrophys\nfrom astropy.units.core import get_current_unit_registry, def_unit, CompositeUnit, UnitBase\n\nclass TestUnitsCore(unittest.TestCase):\n\n    def test_unit_creation(self):\n        meter = u.Unit(\"m\")\n        self.assertEqual(meter.name, \"m\")\n\n        custom_unit = u.Unit(\"custom\", represents=meter)\n        self.assertEqual(custom_unit.represents, meter)\n\n    def test_composite_unit(self):\n        composite = CompositeUnit(10, [u.m, u.s], [1, -1])\n        self.assertEqual(composite.scale, 10)\n        self.assertEqual(composite.bases, [u.m, u.s])\n        self.assertEqual(composite.powers, [1, -1])\n\n    def test_unit_conversion(self):\n        feet = imperial.ft\n        meters = u.m\n        self.assertTrue(feet.is_equivalent(meters))\n\n    def test_unit_registry(self):\n        registry = get_current_unit_registry()\n        self.assertIn(u.m, registry.all_units)\n\n    def test_def_unit(self):\n        custom_unit = def_unit(\"custom\", represents=u.m)\n        self.assertEqual(custom_unit.represents, u.m)\n\n    def test_unit_operations(self):\n        meter = u.m\n        second = u.s\n        mps = meter / second\n        self.assertEqual(mps.bases, [u.m, u.s])\n        self.assertEqual(mps.powers, [1, -1])\n\n    def test_unit_equivalencies(self):\n        angle = u.rad\n        dimensionless_angle = angle.to(u.dimensionless_unscaled, equivalencies=u.dimensionless_angles())\n        self.assertTrue(u.is_effectively_unity(dimensionless_angle))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_592": ["\nimport unittest\nfrom unittest.mock import patch\nimport numpy as np\nimport pandas as pd\nfrom xarray.core import formatting\n\nclass TestFormatting(unittest.TestCase):\n\n    def test_pretty_print(self):\n        self.assertEqual(formatting.pretty_print('test', 10), 'test      ')\n        self.assertEqual(formatting.pretty_print('test', 2), 'te')\n\n    def test_maybe_truncate(self):\n        self.assertEqual(formatting.maybe_truncate('test', 4), 'test')\n        self.assertEqual(formatting.maybe_truncate('test', 3), 'tes...')\n\n    def test_wrap_indent(self):\n        self.assertEqual(formatting.wrap_indent('test\\ntext', 'start', 5), 'start\\n     test\\n     text')\n\n    def test_get_indexer_at_least_n_items(self):\n        self.assertEqual(formatting._get_indexer_at_least_n_items((5, 5), 3, False), (slice(1, None), slice(None)))\n        self.assertEqual(formatting._get_indexer_at_least_n_items((5, 5), 3, True), (slice(None), slice(2, None)))\n\n    def test_first_n_items(self):\n        self.assertTrue(np.array_equal(formatting.first_n_items(np.array([1, 2, 3, 4, 5]), 3), np.array([1, 2, 3])))\n\n    def test_last_n_items(self):\n        self.assertTrue(np.array_equal(formatting.last_n_items(np.array([1, 2, 3, 4, 5]), 3), np.array([3, 4, 5])))\n\n    def test_last_item(self):\n        self.assertEqual(formatting.last_item(np.array([1, 2, 3])), [3])\n\n    def test_format_timestamp(self):\n        self.assertEqual(formatting.format_timestamp('2022-01-01T12:00:00'), '2022-01-01T12:00:00')\n\n    def test_format_timedelta(self):\n        self.assertEqual(formatting.format_timedelta('1 days 02:00:00', 'date'), '1 days')\n\n    def test_format_item(self):\n        self.assertEqual(formatting.format_item('test'), \"'test'\")\n        self.assertEqual(formatting.format_item(1.12345), '1.1235')\n\n    def test_format_items(self):\n        self.assertEqual(formatting.format_items([1, 2, 3]), ['1', '2', '3'])\n\n    def test_format_array_flat(self):\n        self.assertEqual(formatting.format_array_flat(np.array([1, 2, 3, 4, 5]), 7), '1 2 ... 4 5')\n\n    @patch('xarray.core.formatting.dask_array_type', new=type('dask_array_type', (), {}))\n    def test_inline_dask_repr(self):\n        self.assertEqual(formatting.inline_dask_repr('dask_array'), 'dask.array<chunksize=(1,), meta=None>')\n\n    @patch('xarray.core.formatting.sparse_array_type', new=type('sparse_array_type', (), {}))\n    def test_inline_sparse_repr(self):\n        self.assertEqual(formatting.inline_sparse_repr('sparse_array'), '<sparse_array_type: nnz=0, fill_value=None>')\n\n    def test_summarize_variable(self):\n        class MockVar:\n            def __init__(self):\n                self.dims = ['dim1', 'dim2']\n                self.dtype = 'float64'\n                self._in_memory = True\n\n        self.assertEqual(formatting.summarize_variable('name', MockVar(), 10), '  * name     (dim1, dim2) float64 ...')\n\n    def test_summarize_datavar(self):\n        class MockVar:\n            def __init__(self):\n                self.dims = ['dim1', 'dim2']\n                self.dtype = 'float64'\n                self._in_memory = True\n\n        class MockVarWrapper:\n            def __init__(self):\n                self.variable = MockVar()\n\n        self.assertEqual(formatting.summarize_datavar('name', MockVarWrapper(), 10), '  name     (dim1, dim2) float64 ...')\n\n    def test_summarize_coord(self):\n        class MockVar:\n            def __init__(self):\n                self.dims = ['dim1', 'dim2']\n                self.dtype = 'float64'\n                self._in_memory = True\n                self.name = 'dim1'\n\n            def to_index_variable(self):\n                class MockIndexVar:\n                    def __init__(self):\n                        self.level_names = None\n                return MockIndexVar()\n\n        self.assertEqual(formatting.summarize_coord('dim1', MockVar(), 10), '  * dim1     (dim1, dim2) float64 ...')\n\n    def test_summarize_attr(self):\n        self.assertEqual(formatting.summarize_attr('key', 'value', 10), '    key: value')\n\n    @patch('xarray.core.formatting.OPTIONS', {'display_width': 80})\n    def test_limit_lines(self):\n        self.assertEqual(formatting.limit_lines('test\\n' * 20, limit=10), 'test\\n' * 5 + '...\\n' + 'test\\n' * 5)\n\n    def test_short_numpy_repr(self):\n        self.assertEqual(formatting.short_numpy_repr(np.array([1, 2, 3])), 'array([1, 2, 3])')\n\n    def test_short_data_repr(self):\n        class MockVar:\n            def __init__(self):\n                self._data = np.array([1, 2, 3])\n                self._in_memory = True\n                self.size = 3\n\n        self.assertEqual(formatting.short_data_repr(MockVar()), 'array([1, 2, 3])')\n\n    def test_array_repr(self):\n        class MockVar:\n            def __init__(self):\n                self.name = 'name'\n                self.dims = {'dim1': 5, 'dim2': 5}\n                self._data = np.array([1, 2, 3])\n                self.coords = {}\n                self.attrs = {}\n\n        self.assertEqual(formatting.array_repr(MockVar()), \"<xarray.MockVar 'name' (dim1: 5, dim2: 5)>\\narray([1, 2, 3])\")\n\n    def test_dataset_repr(self):\n        class MockDataset:\n            def __init__(self):\n                self.dims = {'dim1': 5, 'dim2': 5}\n                self.coords = {}\n                self.data_vars = {}\n                self.attrs = {}\n\n        self.assertEqual(formatting.dataset_repr(MockDataset()), \"<xarray.MockDataset>\\nDimensions:      (dim1: 5, dim2: 5)\\nCoordinates:    *empty*\\nData variables: *empty*\\nAttributes:     *empty*\")\n\n    def test_diff_dim_summary(self):\n        class MockObj:\n            def __init__(self):\n                self.dims = {'dim1': 5, 'dim2': 5}\n\n        self.assertEqual(formatting.diff_dim_summary(MockObj(), MockObj()), '')\n\n    def test_diff_array_repr(self):\n        class MockVar:\n            def __init__(self):\n                self.dims = {'dim1': 5, 'dim2': 5}\n                self.data = np.array([1, 2, 3])\n                self.coords = {}\n                self.attrs = {}\n\n        self.assertEqual(formatting.diff_array_repr(MockVar(), MockVar(), 'identical'), \"Left and right MockVar objects are not identical\\n\")\n\n    def test_diff_dataset_repr(self):\n        class MockDataset:\n            def __init__(self):\n                self.dims = {'dim1': 5, 'dim2': 5}\n                self.coords = {}\n                self.data_vars = {}\n                self.attrs = {}\n\n        self.assertEqual(formatting.diff_dataset_repr(MockDataset(), MockDataset(), 'identical'), \"Left and right MockDataset objects are not identical\\nDimensions:\\n    (dim1: 5, dim2: 5) != (dim1: 5, dim2: 5)\\nCoordinates only on the left object:\\n    *empty*\\nCoordinates only on the right object:\\n    *empty*\\nData variables only on the left object:\\n    *empty*\\nData variables only on the right object:\\n    *empty*\")\n"], "sample_526": ["\nimport unittest\nfrom datetime import datetime, timedelta\nimport numpy as np\nimport matplotlib.dates as mdates\n\nclass TestMatplotlibDates(unittest.TestCase):\n    def setUp(self):\n        self.dates = np.array(['2000-01-01T12:00:00', '2000-01-02T12:00:00'], dtype='datetime64')\n        self.datetimes = np.array([datetime(2000, 1, 1, 12, 0, 0), datetime(2000, 1, 2, 12, 0, 0)])\n        self.nums = np.array([730120.5, 730121.5])\n        self.delta = timedelta(days=1)\n\n    def test_date2num(self):\n        self.assertTrue(np.allclose(mdates.date2num(self.dates), self.nums))\n        self.assertTrue(np.allclose(mdates.date2num(self.datetimes), self.nums))\n\n    def test_num2date(self):\n        self.assertTrue(np.all(mdates.num2date(self.nums) == self.datetimes))\n\n    def test_num2timedelta(self):\n        self.assertTrue(mdates.num2timedelta(1) == self.delta)\n\n    def test_drange(self):\n        self.assertTrue(np.allclose(mdates.drange(self.datetimes[0], self.datetimes[1], self.delta), self.nums))\n\n    def test_datestr2num(self):\n        self.assertTrue(np.allclose(mdates.datestr2num(self.dates.astype(str)), self.nums))\n\n    # Add more tests as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_289": ["\nimport unittest\nfrom django.utils.datastructures import OrderedSet, MultiValueDict, ImmutableList, DictWrapper, CaseInsensitiveMapping\n\nclass TestDataStructures(unittest.TestCase):\n\n    def test_ordered_set(self):\n        s = OrderedSet(['foo', 'bar', 'baz'])\n        self.assertEqual(list(s), ['foo', 'bar', 'baz'])\n        s.add('qux')\n        self.assertEqual(list(s), ['foo', 'bar', 'baz', 'qux'])\n        s.remove('bar')\n        self.assertEqual(list(s), ['foo', 'baz', 'qux'])\n\n    def test_multi_value_dict(self):\n        d = MultiValueDict({'name': ['Adrian', 'Simon'], 'position': ['Developer']})\n        self.assertEqual(d['name'], 'Simon')\n        self.assertEqual(d.getlist('name'), ['Adrian', 'Simon'])\n        self.assertEqual(d.getlist('doesnotexist'), [])\n        self.assertEqual(d.getlist('doesnotexist', ['Adrian', 'Simon']), ['Adrian', 'Simon'])\n        self.assertEqual(d.get('lastname', 'nonexistent'), 'nonexistent')\n        d.setlist('lastname', ['Holovaty', 'Willison'])\n        self.assertEqual(d.getlist('lastname'), ['Holovaty', 'Willison'])\n\n    def test_immutable_list(self):\n        l = ImmutableList(range(5))\n        self.assertEqual(list(l), [0, 1, 2, 3, 4])\n        with self.assertRaises(AttributeError):\n            l[3] = '4'\n\n    def test_dict_wrapper(self):\n        d = DictWrapper({'name': 'Jane', 'age': 25}, str, 'age')\n        self.assertEqual(d['name'], 'Jane')\n        self.assertEqual(d['age'], '25')\n\n    def test_case_insensitive_mapping(self):\n        d = CaseInsensitiveMapping({'Name': 'Jane', 'Age': 25})\n        self.assertEqual(d['name'], 'Jane')\n        self.assertEqual(d['AGE'], 25)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_470": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.utils.functional import cached_property, classproperty, lazy, LazyObject, SimpleLazyObject\n\nclass TestCachedProperty(unittest.TestCase):\n    def test_cached_property(self):\n        class TestClass:\n            @cached_property\n            def test_prop(self):\n                return 'test_value'\n\n        obj = TestClass()\n        self.assertEqual(obj.test_prop, 'test_value')\n        self.assertEqual(obj.test_prop, 'test_value')  # Check if value is cached\n\nclass TestClassproperty(unittest.TestCase):\n    def test_classproperty(self):\n        class TestClass:\n            @classproperty\n            def test_prop(cls):\n                return 'test_value'\n\n        self.assertEqual(TestClass.test_prop, 'test_value')\n\nclass TestLazy(unittest.TestCase):\n    def test_lazy(self):\n        func = MagicMock(return_value='test_value')\n        lazy_func = lazy(func, str)\n        result = lazy_func()\n        self.assertEqual(result, 'test_value')\n        func.assert_called_once()\n\nclass TestLazyObject(unittest.TestCase):\n    def test_lazy_object(self):\n        class TestLazyObject(LazyObject):\n            def _setup(self):\n                self._wrapped = 'test_value'\n\n        obj = TestLazyObject()\n        self.assertEqual(obj._wrapped, 'test_value')\n        self.assertEqual(str(obj), 'test_value')\n\nclass TestSimpleLazyObject(unittest.TestCase):\n    def test_simple_lazy_object(self):\n        func = MagicMock(return_value='test_value')\n        obj = SimpleLazyObject(func)\n        self.assertEqual(obj._wrapped, 'test_value')\n        self.assertEqual(str(obj), 'test_value')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_121": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.models.base import Model, ModelBase, ModelState, ModelStateFieldsCacheDescriptor\nfrom django.db import models, connection, connections, router, transaction\nfrom django.db.models.fields import Field\nfrom django.db.models.query import Q\nfrom django.db.models.signals import class_prepared, post_init, pre_init, pre_save, post_save\nfrom django.db.models import ExpressionWrapper, IntegerField, Max, Value, Coalesce\nfrom django.db.models.constraints import CheckConstraint, UniqueConstraint\nfrom django.db.models.deletion import CASCADE, Collector\nfrom django.db.models.fields.related import ForeignObjectRel, OneToOneField\nfrom django.core import checks\nfrom django.core.exceptions import ValidationError\nfrom django.db.models.options import Options\nfrom django.db.models.manager import Manager\nfrom django.db.models.fields import IntegerField\nfrom django.apps import apps\n\nclass TestModel(unittest.TestCase):\n    def setUp(self):\n        # Mock the necessary dependencies\n        self.MockField = MagicMock(spec=Field)\n        self.MockField.name = 'mock_field'\n        self.MockField.attname = 'mock_field'\n        self.MockField.is_relation = False\n        self.MockField.get_default = MagicMock(return_value='default')\n        self.MockField.get_transform = MagicMock(return_value=None)\n        self.MockField.is_cached = MagicMock(return_value=False)\n        self.MockField.delete_cached_value = MagicMock()\n        self.MockField.is_cached = MagicMock(return_value=False)\n        self.MockField.concrete = True\n        self.MockField.primary_key = False\n        self.MockField.unique = False\n        self.MockField.unique_for_date = None\n        self.MockField.unique_for_year = None\n        self.MockField.unique_for_month = None\n        self.MockField.remote_field = None\n        self.MockField.column = 'mock_column'\n        self.MockField.target_field = None\n\n        self.MockRelatedObject = MagicMock()\n        self.MockRelatedObject.is_cached = MagicMock(return_value=False)\n        self.MockRelatedObject.delete_cached_value = MagicMock()\n\n        self.MockRelatedField = MagicMock()\n        self.MockRelatedField.is_relation = True\n        self.MockRelatedField.name = 'mock_related_field'\n        self.MockRelatedField.attname = 'mock_related_field_id'\n        self.MockRelatedField.is_cached = MagicMock(return_value=False)\n        self.MockRelatedField.delete_cached_value = MagicMock()\n        self.MockRelatedField.related_model = MagicMock()\n\n        self.MockMeta = MagicMock(spec=Options)\n        self.MockMeta.fields = [self.MockField]\n        self.MockMeta.concrete_fields = [self.MockField]\n        self.MockMeta.local_fields = [self.MockField]\n        self.MockMeta.local_many_to_many = []\n        self.MockMeta.private_fields = []\n        self.MockMeta.related_objects = [self.MockRelatedObject]\n        self.MockMeta.get_field = MagicMock(return_value=self.MockField)\n        self.MockMeta.parents = {}\n        self.MockMeta.pk = self.MockField\n        self.MockMeta.order_with_respect_to = None\n        self.MockMeta.auto_created = False\n        self.MockMeta.app_label = 'test'\n        self.MockMeta.object_name = 'TestModel'\n        self.MockMeta.verbose_name = 'Test Model'\n        self.MockMeta.verbose_name_plural = 'Test Models'\n        self.MockMeta.unique_together = []\n        self.MockMeta.constraints = []\n        self.MockMeta.get_parent_list = MagicMock(return_value=[])\n        self.MockMeta.managers = [Manager()]\n        self.MockMeta.default_manager = Manager()\n        self.MockMeta.base_manager = Manager()\n        self.MockMeta.db_returning_fields = []\n        self.MockMeta.indexes = []\n        self.MockMeta.ordering = []\n        self.MockMeta.apps = apps\n\n        # Create a mock model class\n        self.MockModel = MagicMock(spec=Model)\n        self.MockModel._meta = self.MockMeta\n        self.MockModel._base_manager = self.MockMeta.base_manager\n        self.MockModel._default_manager = self.MockMeta.default_manager\n\n        # Create an instance of the model\n        self.model_instance = self.MockModel()\n\n    @patch('django.db.models.base.setattr')\n    @patch('django.db.models.base.getattr')\n    @patch('django.db.models.base.pre_init.send')\n    @patch('django.db.models.base.post_init.send')\n    def test_model_init(self, mock_post_init_send, mock_pre_init_send, mock_getattr, mock_setattr):\n        self.model_instance.__init__(mock_value=1)\n        mock_pre_init_send.assert_called_once()\n        mock_post_init_send.assert_called_once()\n        mock_setattr.assert_called_once_with(self.model_instance, self.MockField.attname, self.MockField.get_default())\n\n    @patch('django.db.models.base.Model._save_parents')\n    @patch('django.db.models.base.Model._save_table')\n    @patch('django.db.models.base.pre_save.send')\n    @patch('django.db.models.base.post_save.send')\n    def test_model_save(self, mock_post_save_send, mock_pre_save_send, mock_save_table, mock_save_parents):\n        self.model_instance.save()\n        mock_pre_save_send.assert_called_once()\n        mock_save_parents.assert_called_once()\n        mock_save_table.assert_called_once()\n        mock_post_save_send.assert_called_once()\n\n    # Add more test methods for other methods and functionalities in the Model class\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1206": ["\nimport unittest\nfrom sympy import (S, Number, Integer, Rational, Float, Zero, One, NegativeOne, Half, Infinity, NegativeInfinity,\n                   NaN, ComplexInfinity, NumberSymbol, Exp1, Pi, GoldenRatio, TribonacciConstant, EulerGamma, Catalan,\n                   ImaginaryUnit, AlgebraicNumber)\nfrom sympy.core.numbers import (mpf_norm, mod_inverse, igcd, seterr, igcd_lehmer, integer_nthroot, isqrt, integer_log)\nfrom sympy.polys.domains.groundtypes import PythonRational\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom mpmath.rational import mpq\nfrom sympy.polys.numberfields import to_number_field\nfrom mpmath.libmp.libmpf import fnan\n\nclass TestNumbers(unittest.TestCase):\n\n    def test_number_symbol(self):\n        self.assertIsInstance(NumberSymbol(), Number)\n        self.assertIsInstance(Exp1(), NumberSymbol)\n        self.assertIsInstance(Pi(), NumberSymbol)\n        self.assertIsInstance(GoldenRatio(), NumberSymbol)\n        self.assertIsInstance(TribonacciConstant(), NumberSymbol)\n        self.assertIsInstance(EulerGamma(), NumberSymbol)\n        self.assertIsInstance(Catalan(), NumberSymbol)\n\n    def test_exp1(self):\n        self.assertEqual(Exp1(), S.Exp1)\n        self.assertEqual(Exp1(), S.exp(1))\n        self.assertEqual(Exp1().approximate_interval(Integer), (Integer(2), Integer(3)))\n\n    def test_pi(self):\n        self.assertEqual(Pi(), S.Pi)\n        self.assertEqual(Pi().approximate_interval(Integer), (Integer(3), Integer(4)))\n        self.assertEqual(Pi().approximate_interval(Rational), (Rational(223, 71, 1), Rational(22, 7, 1)))\n\n    def test_golden_ratio(self):\n        self.assertEqual(GoldenRatio(), S.GoldenRatio)\n        self.assertEqual(GoldenRatio().expand(func=True), S.Half + S.Half*S.sqrt(5))\n\n    def test_tribonacci_constant(self):\n        self.assertEqual(TribonacciConstant(), S.TribonacciConstant)\n        self.assertEqual(TribonacciConstant().expand(func=True),\n                         (1 + (19 - 3*S.sqrt(33))**(S.One/3) + (3*S.sqrt(33) + 19)**(S.One/3)) / 3)\n\n    def test_euler_gamma(self):\n        self.assertEqual(EulerGamma(), S.EulerGamma)\n        self.assertEqual(EulerGamma().approximate_interval(Integer), (Zero, One))\n        self.assertEqual(EulerGamma().approximate_interval(Rational), (S.Half, Rational(3, 5, 1)))\n\n    def test_catalan(self):\n        self.assertEqual(Catalan(), S.Catalan)\n        self.assertEqual(Catalan().approximate_interval(Integer), (Zero, One))\n        self.assertEqual(Catalan().approximate_interval(Rational), (Rational(9, 10, 1), One))\n\n    def test_imaginary_unit(self):\n        self.assertEqual(ImaginaryUnit(), S.ImaginaryUnit)\n        self.assertEqual(ImaginaryUnit()._eval_power(S.One), S.ImaginaryUnit)\n        self.assertEqual(ImaginaryUnit()._eval_power(S.Two), -1)\n\n    def test_algebraic_number(self):\n        alpha = AlgebraicNumber(S.sqrt(2), [1, 0])\n        self.assertEqual(alpha.to_root(), S.sqrt(2))\n        self.assertEqual(alpha.to_primitive_element().to_root(), S.sqrt(2))\n        self.assertEqual(alpha.minpoly_of"], "sample_928": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom docutils import nodes\nfrom sphinx.testing.util import SphinxTestCase\nfrom sphinx.domains.python import (\n    py_sig_re, _parse_annotation, _pseudo_parse_arglist, PythonDomain, PythonModuleIndex\n)\n\nclass TestPythonDomain(unittest.TestCase):\n    def setUp(self):\n        self.env = Mock()\n        self.env.ref_context = {}\n        self.env.config = {'add_module_names': True}\n        self.domain = PythonDomain(self.env)\n\n    def test_py_sig_re(self):\n        m = py_sig_re.match('func(arg1, arg2) -> ret')\n        self.assertIsNotNone(m)\n        self.assertEqual(m.groups(), (None, 'func', 'arg1, arg2', 'ret'))\n\n    def test_parse_annotation(self):\n        with patch('sphinx.domains.python.type_to_xref') as mock_type_to_xref:\n            mock_type_to_xref.return_value = nodes.Text('mock_text')\n            result = _parse_annotation('List[int]', self.env)\n            self.assertEqual(len(result), 3)\n\n    # Add more tests for _pseudo_parse_arglist, PythonDomain, PythonModuleIndex, etc.\n\nclass TestPythonDomainSphinx(SphinxTestCase):\n    def setUp(self):\n        super().setUp()\n        self.app.add_domain(PythonDomain)\n\n    def test_python_domain(self):\n        self.app.builder.build_all()\n        self.assertEqual(self.app.statuscode, 0)\n        # Add more assertions based on your expected outcome\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_674": ["\nimport pytest\nimport os\nimport py\nfrom _pytest import nodes\nfrom _pytest.config import Config, PytestPluginManager\nfrom _pytest.main import Session\nfrom _pytest.mark.structures import Mark\n\n@pytest.fixture\ndef setup_node():\n    config = Config()\n    session = Session()\n    parent = nodes.Node(\"parent\", config=config, session=session)\n    return config, session, parent\n\ndef test_splitnode():\n    assert nodes._splitnode(\"\") == ()\n    assert nodes._splitnode(\"testing/code\") == (\"testing\", \"code\")\n    assert nodes._splitnode(\"testing/code/test_excinfo.py\") == (\"testing\", \"code\", \"test_excinfo.py\")\n    assert nodes._splitnode(\"testing/code/test_excinfo.py::TestFormattedExcinfo\") == (\"testing\", \"code\", \"test_excinfo.py\", \"TestFormattedExcinfo\")\n\ndef test_ischildnode():\n    assert nodes.ischildnode(\"foo\", \"foo/bar::Baz\") == True\n    assert nodes.ischildnode(\"foo/blorp\", \"foo/bar::Baz\") == False\n\ndef test_node_init(setup_node):\n    config, session, parent = setup_node\n    node = nodes.Node(\"child\", parent=parent)\n    assert node.name == \"child\"\n    assert node.parent == parent\n    assert node.config == config\n    assert node.session == session\n    assert node.fspath is None\n\ndef test_node_from_parent(setup_node):\n    config, session, parent = setup_node\n    node = nodes.Node.from_parent(parent, name=\"child\")\n    assert node.name == \"child\"\n    assert node.parent == parent\n\ndef test_node_add_marker(setup_node):\n    config, session, parent = setup_node\n    node = nodes.Node(\"child\", parent=parent)\n    node.add_marker(\"mark1\")\n    assert \"mark1\" in [mark.name for mark in node.iter_markers()]\n\ndef test_node_get_closest_marker(setup_node):\n    config, session, parent = setup_node\n    parent.add_marker(Mark(\"mark1\", (), ()))\n    node = nodes.Node(\"child\", parent=parent)\n    assert node.get_closest_marker(\"mark1\").name == \"mark1\"\n\ndef test_fs_collector_init(setup_node):\n    config, session, parent = setup_node\n    fspath = py.path.local(os.path.abspath(\"test_file.py\"))\n    fs_collector = nodes.FSCollector(fspath, parent=parent, session=session)\n    assert fs_collector.fspath == fspath\n    assert fs_collector.name == fspath.basename\n\n# More tests can be added similarly for other functions and classes.\n"], "sample_887": ["\nimport numpy as np\nimport pytest\nfrom sklearn.calibration import CalibratedClassifierCV, calibration_curve, _SigmoidCalibration\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_classification\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.model_selection import StratifiedKFold\n\n@pytest.fixture\ndef data():\n    X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n    return X, y\n\n@pytest.fixture\ndef base_estimator():\n    return LogisticRegression()\n\n@pytest.fixture\ndef calibrated_clf(base_estimator, data):\n    X, y = data\n    clf = CalibratedClassifierCV(base_estimator=base_estimator, cv=StratifiedKFold(n_splits=5))\n    clf.fit(X, y)\n    return clf\n\ndef test_calibrated_classifier_cv_fit(calibrated_clf):\n    assert hasattr(calibrated_clf, \"calibrated_classifiers_\")\n    assert len(calibrated_clf.calibrated_classifiers_) == 5\n\ndef test_calibrated_classifier_cv_predict(calibrated_clf, data):\n    X, _ = data\n    y_pred = calibrated_clf.predict(X)\n    assert y_pred.shape[0] == X.shape[0]\n\ndef test_calibrated_classifier_cv_predict_proba(calibrated_clf, data):\n    X, _ = data\n    y_prob = calibrated_clf.predict_proba(X)\n    assert y_prob.shape[0] == X.shape[0]\n    assert np.allclose(y_prob.sum(axis=1), np.ones(X.shape[0]))\n\ndef test_calibration_curve():\n    y_true = np.array([0, 0, 0, 0, 1, 1, 1, 1, 1])\n    y_prob = np.array([0.1, 0.2, 0.3, 0.4, 0.65, 0.7, 0.8, 0.9, 1.])\n    prob_true, prob_pred = calibration_curve(y_true, y_prob, n_bins=3)\n    assert np.allclose(prob_true, np.array([0., 0.5, 1.]))\n    assert np.allclose(prob_pred, np.array([0.2, 0.525, 0.85]))\n\ndef test_sigmoid_calibration():\n    y_true = np.array([0, 0, 0, 0, 1, 1, 1, 1, 1])\n    y_prob = np.array([0.1, 0.2, 0.3, 0.4, 0.65, 0.7, 0.8, 0.9, 1.])\n    calibrator = _SigmoidCalibration()\n    calibrator.fit(y_prob, y_true)\n    y_calibrated = calibrator.predict(y_prob)\n    assert y_calibrated.shape[0] == y_prob.shape[0]\n\ndef test_calibrated_classifier_cv_not_fitted():\n    clf = CalibratedClassifierCV()\n    X = np.random.rand(10, 5)\n    with pytest.raises(NotFittedError):\n        clf.predict(X)\n"], "sample_958": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom types import SimpleNamespace\nfrom typing import (Any, Callable, Dict, ForwardRef, Generator, List, NewType, Optional, Tuple, TypeVar, Union)\nfrom docutils import nodes\nfrom sphinx.util.typing import (get_type_hints, is_system_TypeVar, restify, stringify,\n                                ForwardRef, PathMatcher, RoleFunction, OptionSpec,\n                                TitleGetter, Inventory, NoneType, TextlikeNode)\n\nclass TestSphinxUtilTyping(unittest.TestCase):\n\n    def test_get_type_hints(self):\n        obj = SimpleNamespace(attr=int)\n        self.assertEqual(get_type_hints(obj), {'attr': int})\n\n    def test_is_system_TypeVar(self):\n        self.assertTrue(is_system_TypeVar(TypeVar('T')))\n        self.assertFalse(is_system_TypeVar(int))\n\n    @patch('sphinx.util.typing.sys.version_info', (3, 10))\n    def test_restify_py310(self):\n        self.assertEqual(restify(Optional[int]), 'Optional[int]')\n\n    @patch('sphinx.util.typing.sys.version_info', (3, 7))\n    def test_restify_py37(self):\n        self.assertEqual(restify(Union[int, str]), 'Union[int, str]')\n\n    @patch('sphinx.util.typing.sys.version_info', (3, 6))\n    def test_restify_py36(self):\n        self.assertEqual(restify(List[int]), 'List[int]')\n\n    @patch('sphinx.util.typing.sys.version_info', (3, 10))\n    def test_stringify_py310(self):\n        self.assertEqual(stringify(Optional[int]), 'Optional[int]')\n\n    @patch('sphinx.util.typing.sys.version_info', (3, 7))\n    def test_stringify_py37(self):\n        self.assertEqual(stringify(Union[int, str]), 'Union[int, str]')\n\n    @patch('sphinx.util.typing.sys.version_info', (3, 6))\n    def test_stringify_py36(self):\n        self.assertEqual(stringify(List[int]), 'List[int]')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_25": ["\nimport unittest\nfrom astropy.io.fits.card import Card, Undefined, _int_or_float, _format_value, _format_float, _pad\n\nclass TestCard(unittest.TestCase):\n    def setUp(self):\n        self.card = Card(keyword='TEST', value=42, comment='Test comment')\n\n    def test_initialization(self):\n        self.assertEqual(self.card.keyword, 'TEST')\n        self.assertEqual(self.card.value, 42)\n        self.assertEqual(self.card.comment, 'Test comment')\n\n    def test_invalid_keyword(self):\n        with self.assertRaises(ValueError):\n            Card(keyword='invalid keyword')\n\n    def test_invalid_value(self):\n        with self.assertRaises(ValueError):\n            self.card.value = 'invalid value'\n\n    def test_undefined_value(self):\n        self.card.value = Undefined()\n        self.assertIsInstance(self.card.value, Undefined)\n\n    def test_int_or_float(self):\n        self.assertEqual(_int_or_float('42'), 42)\n        self.assertEqual(_int_or_float('42.0'), 42.0)\n        with self.assertRaises(ValueError):\n            _int_or_float('invalid')\n\n    def test_format_value(self):\n        self.assertEqual(_format_value('test'), \"'test     '          \")\n        self.assertEqual(_format_value(True), '                    T')\n        self.assertEqual(_format_value(42), '                    42')\n        self.assertEqual(_format_value(42.0), '          42.00000000')\n        self.assertEqual(_format_value(42+0j), '(         42.00000000,          0.00000000)')\n        self.assertEqual(_format_value(Undefined()), '                    ')\n\n    def test_format_float(self):\n        self.assertEqual(_format_float(42.123456789), '4.2123456789E+01')\n\n    def test_pad(self):\n        self.assertEqual(_pad('test'), 'test                                                                               ')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_149": ["\nimport unittest\nfrom unittest.mock import MagicMock\n\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.state import ProjectState\nfrom django.db.migrations.questioner import MigrationQuestioner\n\nclass MigrationAutodetectorTests(unittest.TestCase):\n    def setUp(self):\n        self.questioner = MigrationQuestioner()\n        self.from_state = ProjectState(real_apps=[\"app1\", \"app2\"])\n        self.to_state = ProjectState(real_apps=[\"app1\", \"app2\", \"app3\"])\n        self.autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n\n    def test_changes(self):\n        # Test that changes are detected correctly\n        changes = self.autodetector.changes({\"app1\": []}, trim_to_apps=[\"app1\"])\n        self.assertEqual(len(changes), 1)\n        self.assertEqual(changes[\"app1\"][0].name, \"__first__\")\n\n    def test_deep_deconstruct(self):\n        # Test that deep_deconstruct works correctly\n        obj = {\"key\": [\"value1\", \"value2\"], \"func\": MagicMock()}\n        result = self.autodetector.deep_deconstruct(obj)\n        self.assertEqual(result, {\"key\": [\"value1\", \"value2\"], \"func\": (obj[\"func\"], (), {})})\n\n    def test_only_relation_agnostic_fields(self):\n        # Test that only_relation_agnostic_fields works correctly\n        fields = [(\"field1\", MagicMock()), (\"field2\", MagicMock())]\n        result = self.autodetector.only_relation_agnostic_fields(fields)\n        self.assertEqual(len(result), 2)\n\n    # Add more test cases as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_692": ["\nimport os\nimport pytest\nimport tempfile\nfrom pathlib import Path\nfrom unittest.mock import Mock, patch\nfrom _pytest.tmpdir import get_user, TempPathFactory, TempdirFactory\nfrom _pytest.config import Config\n\n@pytest.fixture\ndef mock_config():\n    config = Mock(spec=Config)\n    config.option.basetemp = None\n    config.trace = Mock()\n    config.trace.get = Mock(return_value=Mock())\n    return config\n\ndef test_get_user():\n    assert isinstance(get_user(), (str, type(None)))\n\ndef test_temp_path_factory_init(mock_config):\n    factory = TempPathFactory(None, mock_config.trace, _ispytest=True)\n    assert factory._given_basetemp is None\n    assert factory._trace == mock_config.trace\n    assert factory._basetemp is None\n\ndef test_temp_path_factory_from_config(mock_config):\n    factory = TempPathFactory.from_config(mock_config, _ispytest=True)\n    assert factory._given_basetemp is None\n    assert factory._trace == mock_config.trace.get()\n    assert factory._basetemp is None\n\ndef test_temp_path_factory_mktemp(mock_config):\n    factory = TempPathFactory.from_config(mock_config, _ispytest=True)\n    with patch('_pytest.tmpdir.make_numbered_dir', return_value=Path('/tmp/test')):\n        path = factory.mktemp('test')\n        assert path == Path('/tmp/test')\n\ndef test_temp_path_factory_getbasetemp(mock_config):\n    factory = TempPathFactory.from_config(mock_config, _ispytest=True)\n    with patch('_pytest.tmpdir.make_numbered_dir_with_cleanup', return_value=Path('/tmp/test')):\n        path = factory.getbasetemp()\n        assert path == Path('/tmp/test')\n\ndef test_tempdir_factory_init(mock_config):\n    factory = TempPathFactory.from_config(mock_config, _ispytest=True)\n    tempdir_factory = TempdirFactory(factory, _ispytest=True)\n    assert tempdir_factory._tmppath_factory == factory\n\ndef test_tempdir_factory_mktemp(mock_config):\n    factory = TempPathFactory.from_config(mock_config, _ispytest=True)\n    tempdir_factory = TempdirFactory(factory, _ispytest=True)\n    with patch('_pytest.tmpdir.make_numbered_dir', return_value=Path('/tmp/test')):\n        path = tempdir_factory.mktemp('test')\n        assert str(path) == '/tmp/test'\n\ndef test_tempdir_factory_getbasetemp(mock_config):\n    factory = TempPathFactory.from_config(mock_config, _ispytest=True)\n    tempdir_factory = TempdirFactory(factory, _ispytest=True)\n    with patch('_pytest.tmpdir.make_numbered_dir_with_cleanup', return_value=Path('/tmp/test')):\n        path = tempdir_factory.getbasetemp()\n        assert str(path) == '/tmp/test'\n"], "sample_844": ["\nimport numpy as np\nimport unittest\nfrom sklearn.cluster.optics_ import (OPTICS, cluster_optics_xi, cluster_optics_dbscan, compute_optics_graph)\n\nclass TestOPTICS(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [2, 3], [3, 4], [10, 11], [11, 12]])\n        self.min_samples = 2\n        self.max_eps = 5\n        self.metric = 'euclidean'\n        self.p = 2\n        self.metric_params = None\n        self.algorithm = 'auto'\n        self.leaf_size = 30\n        self.n_jobs = None\n\n    def test_compute_optics_graph(self):\n        ordering, core_distances, reachability, predecessor = compute_optics_graph(self.X, self.min_samples, self.max_eps, self.metric, self.p, self.metric_params, self.algorithm, self.leaf_size, self.n_jobs)\n        self.assertEqual(len(ordering), len(self.X))\n        self.assertEqual(len(core_distances), len(self.X))\n        self.assertEqual(len(reachability), len(self.X))\n        self.assertEqual(len(predecessor), len(self.X))\n\n    def test_cluster_optics_dbscan(self):\n        ordering, core_distances, reachability, predecessor = compute_optics_graph(self.X, self.min_samples, self.max_eps, self.metric, self.p, self.metric_params, self.algorithm, self.leaf_size, self.n_jobs)\n        eps = 4\n        labels = cluster_optics_dbscan(reachability, core_distances, ordering, eps)\n        self.assertEqual(len(labels), len(self.X))\n\n    def test_cluster_optics_xi(self):\n        ordering, core_distances, reachability, predecessor = compute_optics_graph(self.X, self.min_samples, self.max_eps, self.metric, self.p, self.metric_params, self.algorithm, self.leaf_size, self.n_jobs)\n        xi = 0.05\n        labels, clusters = cluster_optics_xi(reachability, predecessor, ordering, self.min_samples, xi=xi)\n        self.assertEqual(len(labels), len(self.X))\n        self.assertEqual(len(clusters), 1)  # Since the data is simple, there should be only one cluster\n\n    def test_optics_fit(self):\n        optics = OPTICS(min_samples=self.min_samples, max_eps=self.max_eps, metric=self.metric, p=self.p, metric_params=self.metric_params, algorithm=self.algorithm, leaf_size=self.leaf_size, n_jobs=self.n_jobs)\n        optics.fit(self.X)\n        self.assertIsNotNone(optics.labels_)\n        self.assertIsNotNone(optics.ordering_)\n        self.assertIsNotNone(optics.core_distances_)\n        self.assertIsNotNone(optics.reachability_)\n        self.assertIsNotNone(optics.predecessor_)\n        self.assertIsNotNone(optics.cluster_hierarchy_)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_889": ["\nimport unittest\nimport numpy as np\nfrom sklearn.feature_selection import SequentialFeatureSelector\nfrom sklearn.datasets import make_classification\nfrom sklearn.svm import SVC\n\nclass TestSequentialFeatureSelector(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, n_features=20, n_informative=2, random_state=42)\n        self.estimator = SVC(kernel=\"linear\")\n\n    def test_forward_selection(self):\n        sfs = SequentialFeatureSelector(self.estimator, n_features_to_select=3, direction=\"forward\")\n        sfs.fit(self.X, self.y)\n        self.assertEqual(sfs.support_.sum(), 3)\n\n    def test_backward_selection(self):\n        sfs = SequentialFeatureSelector(self.estimator, n_features_to_select=3, direction=\"backward\")\n        sfs.fit(self.X, self.y)\n        self.assertEqual(sfs.support_.sum(), 3)\n\n    def test_n_features_to_select_auto(self):\n        sfs = SequentialFeatureSelector(self.estimator, n_features_to_select=\"auto\", tol=1e-5)\n        sfs.fit(self.X, self.y)\n        self.assertLess(sfs.n_features_to_select_, self.X.shape[1])\n\n    def test_tol_none(self):\n        with self.assertRaises(ValueError):\n            SequentialFeatureSelector(self.estimator, n_features_to_select=\"auto\", tol=None)\n\n    def test_tol_negative(self):\n        with self.assertRaises(ValueError):\n            SequentialFeatureSelector(self.estimator, n_features_to_select=\"auto\", tol=-1e-5)\n\n    def test_invalid_n_features_to_select(self):\n        with self.assertRaises(ValueError):\n            SequentialFeatureSelector(self.estimator, n_features_to_select=0)\n        with self.assertRaises(ValueError):\n            SequentialFeatureSelector(self.estimator, n_features_to_select=22)\n        with self.assertRaises(ValueError):\n            SequentialFeatureSelector(self.estimator, n_features_to_select=1.1)\n        with self.assertRaises(ValueError):\n            SequentialFeatureSelector(self.estimator, n_features_to_select=-3)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_599": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nfrom xarray.coding.variables import (\n    CFMaskCoder,\n    CFScaleOffsetCoder,\n    UnsignedIntegerCoder,\n    _apply_mask,\n    _scale_offset_decoding,\n    _choose_float_dtype,\n    _ElementwiseFunctionArray,\n    lazy_elemwise_func,\n    safe_setitem,\n    pop_to,\n)\n\nclass TestVariableCoders(unittest.TestCase):\n    def setUp(self):\n        self.coder_mask = CFMaskCoder()\n        self.coder_scale_offset = CFScaleOffsetCoder()\n        self.coder_unsigned = UnsignedIntegerCoder()\n\n    def test_cfmaskcoder_encode(self):\n        data = np.array([1, 2, np.nan, 4])\n        variable = xr.DataArray(data, attrs={\"_FillValue\": np.nan})\n        encoded = self.coder_mask.encode(variable)\n        self.assertTrue(np.all(~np.isnan(encoded.data)))\n\n    def test_cfmaskcoder_decode(self):\n        data = np.array([1, 2, -9999, 4])\n        variable = xr.DataArray(data, attrs={\"_FillValue\": -9999})\n        decoded = self.coder_mask.decode(variable)\n        self.assertTrue(np.isnan(decoded.data[-2]))\n\n    def test_cfscaleoffsetcoder_encode(self):\n        data = np.array([1, 2, 3, 4])\n        variable = xr.DataArray(data, attrs={\"scale_factor\": 2, \"add_offset\": 1})\n        encoded = self.coder_scale_offset.encode(variable)\n        self.assertTrue(np.allclose(encoded.data, np.array([0.5, 1, 1.5, 2])))\n\n    def test_cfscaleoffsetcoder_decode(self):\n        data = np.array([0.5, 1, 1.5, 2])\n        variable = xr.DataArray(data, attrs={\"scale_factor\": 2, \"add_offset\": 1})\n        decoded = self.coder_scale_offset.decode(variable)\n        self.assertTrue(np.allclose(decoded.data, np.array([1, 2, 3, 4])))\n\n    def test_unsignedintegercoder_encode(self):\n        data = np.array([1, 2, 3, 4], dtype=np.uint8)\n        variable = xr.DataArray(data, attrs={\"_Unsigned\": \"true\"})\n        encoded = self.coder_unsigned.encode(variable)\n        self.assertEqual(encoded.data.dtype, np.int8)\n\n    def test_unsignedintegercoder_decode(self):\n        data = np.array([1, 2, 3, 4], dtype=np.int8)\n        variable = xr.DataArray(data, attrs={\"_Unsigned\": \"true\"})\n        decoded = self.coder_unsigned.decode(variable)\n        self.assertEqual(decoded.data.dtype, np.uint8)\n\n    def test_apply_mask(self):\n        data = np.array([1, 2, 3, 4])\n        result = _apply_mask(data, [3], np.nan, np.float32)\n        self.assertTrue(np.isnan(result[-2]))\n\n    def test_scale_offset_decoding(self):\n        data = np.array([1, 2, 3, 4], dtype=np.float32)\n        result = _scale_offset_decoding(data, 2, 1, np.float32)\n        self.assertTrue(np.allclose(result, np.array([3, 5, 7, 9])))\n\n    def test_choose_float_dtype(self):\n        self.assertEqual(_choose_float_dtype(np.float32, False), np.float32)\n        self.assertEqual(_choose_float_dtype(np.int8, False), np.float32)\n        self.assertEqual(_choose_float_dtype(np.int16, False), np.float64)\n        self.assertEqual(_choose_float_dtype(np.int32, True), np.float64)\n\n    def test_elementwisefunctionarray(self):\n        array = np.array([1, 2, 3, 4])\n        func = lambda x: x * 2\n        efa = _ElementwiseFunctionArray(array, func, np.float32)\n        self.assertTrue(np.allclose(np.array(efa), np.array([2, 4, 6, 8])))\n\n    def test_lazy_elemwise_func(self):\n        array = np.array([1, 2, 3, 4])\n        func = lambda x: x * 2\n        result = lazy_elemwise_func(array, func, np.float32)\n        self.assertTrue(np.allclose(np.array(result), np.array([2, 4, 6, 8])))\n\n    def test_safe_setitem(self):\n        d = {}\n        safe_setitem(d, \"key\", \"value\")\n        self.assertEqual(d[\"key\"], \"value\")\n        with self.assertRaises(ValueError):\n            safe_setitem(d, \"key\", \"new_value\")\n\n    def test_pop_to(self):\n        source = {\"key\": \"value\"}\n        dest = {}\n        pop_to(source, dest, \"key\")\n        self.assertEqual(dest[\"key\"], \"value\")\n        self.assertNotIn(\"key\", source)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1017": ["\nimport unittest\nfrom sympy import symbols, sin, cos, Piecewise, Matrix, MatrixSymbol, IndexedBase, Idx, Eq\nfrom sympy.printing.fcode import fcode, FCodePrinter\n\nclass TestFCodePrinter(unittest.TestCase):\n\n    def setUp(self):\n        self.printer = FCodePrinter()\n        self.x, self.y, self.z = symbols('x y z')\n\n    def test_symbol(self):\n        self.assertEqual(self.printer._print_Symbol(self.x), 'x')\n\n    def test_sin(self):\n        self.assertEqual(self.printer._print_Function(sin(self.x)), 'sin(x)')\n\n    def test_cos(self):\n        self.assertEqual(self.printer._print_Function(cos(self.x)), 'cos(x)')\n\n    def test_piecewise(self):\n        expr = Piecewise((self.x + 1, self.x > 0), (self.x, True))\n        self.assertEqual(self.printer._print_Piecewise(expr), 'merge(x + 1, x, x > 0)')\n\n    def test_matrix(self):\n        mat = Matrix([self.x**2, Piecewise((self.x + 1, self.x > 0), (self.x, True)), sin(self.x)])\n        A = MatrixSymbol('A', 3, 1)\n        self.assertEqual(self.printer._print_Matrix(mat), 'A = RESHAPE((/ x**2, merge(x + 1, x, x > 0), sin(x) /), (/ 3, 1 /))')\n\n    def test_indexed(self):\n        len_y = 5\n        y = IndexedBase('y', shape=(len_y,))\n        t = IndexedBase('t', shape=(len_y,))\n        Dy = IndexedBase('Dy', shape=(len_y-1,))\n        i = Idx('i', len_y-1)\n        e=Eq(Dy[i], (y[i+1]-y[i])/(t[i+1]-t[i]))\n        self.assertEqual(self.printer._print_Indexed(e.rhs), '(y(i + 1) - y(i))/(t(i + 1) - t(i))')\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_140": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.contrib.staticfiles.storage import HashedFilesMixin, ManifestFilesMixin\nfrom django.core.files.base import ContentFile\nimport json\n\nclass TestHashedFilesMixin(unittest.TestCase):\n    def setUp(self):\n        self.storage = HashedFilesMixin()\n\n    def test_file_hash(self):\n        content = ContentFile(b'test content')\n        self.assertEqual(self.storage.file_hash('test_file.txt', content), '3c48a528d450')\n\n    def test_hashed_name(self):\n        with patch.object(self.storage, 'exists', return_value=True), \\\n             patch.object(self.storage, 'open', return_value=ContentFile(b'test content')), \\\n             patch.object(self.storage, 'file_hash', return_value='1234567890ab'):\n            self.assertEqual(self.storage.hashed_name('test_file.txt'), 'test_file.1234567890ab.txt')\n\n    def test_url(self):\n        with patch.object(self.storage, '_url') as mock_url:\n            mock_url.return_value = 'test_url'\n            self.assertEqual(self.storage.url('test_file.txt'), 'test_url')\n\nclass TestManifestFilesMixin(unittest.TestCase):\n    def setUp(self):\n        self.storage = ManifestFilesMixin()\n\n    def test_load_manifest(self):\n        with patch.object(self.storage, 'read_manifest', return_value=json.dumps({'version': '1.0', 'paths': {'test_file.txt': 'test_file.1234567890ab.txt'}})):\n            self.assertEqual(self.storage.load_manifest(), {'test_file.txt': 'test_file.1234567890ab.txt'})\n\n    def test_save_manifest(self):\n        self.storage.hashed_files = {'test_file.txt': 'test_file.1234567890ab.txt'}\n        with patch.object(self.storage.manifest_storage, 'exists', return_value=True), \\\n             patch.object(self.storage.manifest_storage, 'delete') as mock_delete, \\\n             patch.object(self.storage.manifest_storage, '_save') as mock_save:\n            self.storage.save_manifest()\n            mock_delete.assert_called_once_with(self.storage.manifest_name)\n            mock_save.assert_called_once()\n"], "sample_760": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model import OrthogonalMatchingPursuit, OrthogonalMatchingPursuitCV\n\nclass TestOrthogonalMatchingPursuit(unittest.TestCase):\n\n    def setUp(self):\n        np.random.seed(0)\n        self.X = np.random.randn(100, 50)\n        self.y = np.random.randn(100)\n        self.known_coef = np.array([0.5, -0.2, 0.1, 0, 0, 0, 0, ..., 0])  # 50 elements in total\n\n    def test_omp_fit(self):\n        omp = OrthogonalMatchingPursuit(n_nonzero_coefs=10)\n        omp.fit(self.X, self.y)\n        np.testing.assert_array_almost_equal(omp.coef_, self.known_coef)\n\n    def test_omp_cv_fit(self):\n        omp_cv = OrthogonalMatchingPursuitCV(cv=5)\n        omp_cv.fit(self.X, self.y)\n        self.assertEqual(omp_cv.n_nonzero_coefs_, 10)  # Assume the best number of non-zero coefficients is 10\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1002": ["\nimport unittest\nfrom sympy import Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt, integer_log\nfrom sympy.core.numbers import igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom sympy.polys.numberfields import to_number_field\nfrom mpmath.libmp.libmpf import fnan\n\nclass TestNumbers(unittest.TestCase):\n    def test_rational(self):\n        self.assertEqual(Rational(1, 2) + Rational(1, 2), 1)\n        self.assertEqual(Rational(1, 2) * Rational(2, 3), Rational(1, 3))\n\n    def test_float(self):\n        self.assertAlmostEqual(Float(3.14).evalf(), 3.14, places=2)\n\n    def test_imaginary_unit(self):\n        self.assertEqual(I * I, -1)\n\n    def test_pi(self):\n        self.assertAlmostEqual(pi.evalf(), 3.14, places=2)\n\n    def test_euler_gamma(self):\n        self.assertIsInstance(EulerGamma, Number)\n\n    def test_catalan(self):\n        self.assertIsInstance(Catalan, Number)\n\n    def test_golden_ratio(self):\n        self.assertIsInstance(GoldenRatio, Number)\n\n    def test_oo(self):\n        self.assertEqual(1 / oo, 0)\n\n    def test_nan(self):\n        self.assertNotEqual(nan, nan)\n\n    def test_zoo(self):\n        self.assertEqual(zoo * zoo, zoo)\n\n    def test_integer(self):\n        self.assertEqual(Integer(3) ** 2, 9)\n\n    def test_functions(self):\n        self.assertEqual(sin(pi), 0)\n        self.assertEqual(cos(pi), -1)\n        self.assertEqual(exp(0), 1)\n        self.assertEqual(log(1), 0)\n\n    def test_number_symbol(self):\n        x = Symbol('x', real=True)\n        self.assertTrue(x.is_real)\n        self.assertFalse(x.is_integer)\n\n    def test_number_operations(self):\n        self.assertEqual(factorial(5), 120)\n        self.assertEqual(fibonacci(10), 55)\n\n    def test_number_conversions(self):\n        self.assertEqual(int(S.One), 1)\n        self.assertEqual(float(S.Half), 0.5)\n        self.assertEqual(complex(S.ImaginaryUnit), 1j)\n\n    def test_number_comparisons(self):\n        self.assertTrue(Gt(2, 1))\n        self.assertTrue(Lt(1, 2))\n        self.assertTrue(Ge(2, 2))\n        self.assertTrue(Le(1, 1))\n\n    def test_algebraic_number(self):\n        root = AlgebraicNumber(sqrt(2))\n        self.assertEqual(root * root, 2)\n\n    def test_number_simplification(self):\n        self.assertEqual(simplify(sin(0)), 0)\n\n    def test_number_representations(self):\n        self.assertEqual(latex(S.Pi), r\"\\pi\")\n        self.assertEqual(srepr(S.Pi), \"Pi\")"], "sample_324": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.http import HttpRequest, HttpResponse\nfrom django.test import RequestFactory, override_settings\nfrom django.middleware.csrf import (\n    CsrfViewMiddleware,\n    REASON_BAD_ORIGIN,\n    REASON_CSRF_TOKEN_MISSING,\n    REASON_NO_CSRF_COOKIE,\n    get_token,\n    _compare_masked_tokens,\n    _sanitize_token,\n    RejectRequest,\n    InvalidTokenFormat,\n)\n\nclass TestCsrfViewMiddleware(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.middleware = CsrfViewMiddleware()\n\n    def test_accept_request(self):\n        request = self.factory.get('/')\n        result = self.middleware._accept(request)\n        self.assertIsNone(result)\n\n    def test_reject_request(self):\n        request = self.factory.get('/')\n        reason = REASON_BAD_ORIGIN % 'bad_origin'\n        response = self.middleware._reject(request, reason)\n        self.assertEqual(response.status_code, 403)\n        self.assertEqual(response.reason_phrase, reason)\n\n    def test_get_token(self):\n        with override_settings(CSRF_USE_SESSIONS=True):\n            request = self.factory.get('/')\n            request.session = {}\n            token = self.middleware._get_token(request)\n            self.assertIsNone(token)\n            request.session['_csrftoken'] = 'token'\n            token = self.middleware._get_token(request)\n            self.assertEqual(token, 'token')\n\n    def test_set_token(self):\n        with override_settings(CSRF_USE_SESSIONS=True):\n            request = self.factory.get('/')\n            request.META['CSRF_COOKIE'] = 'token'\n            request.session = {}\n            response = HttpResponse()\n            self.middleware._set_token(request, response)\n            self.assertEqual(request.session['_csrftoken'], 'token')\n\n    def test_origin_verified(self):\n        with override_settings(CSRF_TRUSTED_ORIGINS=['https://example.com']):\n            request = self.factory.get('/', HTTP_ORIGIN='https://example.com')\n            self.assertTrue(self.middleware._origin_verified(request))\n            request = self.factory.get('/', HTTP_ORIGIN='https://badexample.com')\n            self.assertFalse(self.middleware._origin_verified(request))\n\n    def test_check_token(self):\n        with override_settings(CSRF_COOKIE_NAME='csrftoken'):\n            request = self.factory.get('/')\n            request.COOKIES['csrftoken'] = 'token'\n            with patch('django.middleware.csrf._sanitize_token', return_value='token'):\n                with patch('django.middleware.csrf._compare_masked_tokens', return_value=True):\n                    self.middleware._check_token(request)\n                with patch('django.middleware.csrf._compare_masked_tokens', return_value=False):\n                    with self.assertRaises(RejectRequest):\n                        self.middleware._check_token(request)\n\n    def test_process_view(self):\n        request = self.factory.get('/')\n        callback = MagicMock()\n        callback.csrf_exempt = False\n        self.middleware._accept = MagicMock()\n        self.middleware._reject = MagicMock()\n        self.middleware._check_token = MagicMock()\n        result = self.middleware.process_view(request, callback, [], {})\n        self.assertIsNone(result)\n\nclass TestCsrfUtils(unittest.TestCase):\n    def test_get_token(self):\n        request = HttpRequest()\n        token = get_token(request)\n        self.assertEqual(len(token), CSRF_TOKEN_LENGTH)\n\n    def test_compare_masked_tokens(self):\n        token1 = 'a' * CSRF_TOKEN_LENGTH\n        token2 = 'b' * CSRF_TOKEN_LENGTH\n        self.assertFalse(_compare_masked_tokens(token1, token2))\n        token2 = 'a' + 'b' * (CSRF_TOKEN_LENGTH - 1)\n        self.assertTrue(_compare_masked_tokens(token1, token2))\n\n    def test_sanitize_token(self):\n        token = 'a' * CSRF_TOKEN_LENGTH\n        self.assertEqual(_sanitize_token(token), token)\n        token = 'a' * (CSRF_TOKEN_LENGTH - 1)\n        with self.assertRaises(InvalidTokenFormat):\n            _sanitize_token(token)\n        token = 'a' * CSRF_TOKEN_LENGTH + 'b'\n        with self.assertRaises(InvalidTokenFormat):\n            _sanitize_token(token)\n        token = 'a' * CSRF_SECRET_LENGTH\n        self.assertEqual(len(_sanitize_token(token)), CSRF_TOKEN_LENGTH)\n"], "sample_180": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.models.base import Model, ModelBase, ModelState, ModelStateFieldsCacheDescriptor, subclass_exception\n\nclass TestModel(unittest.TestCase):\n    @patch('django.db.models.base.Model._prepare')\n    @patch('django.db.models.base.class_prepared')\n    def test_model_base(self, mock_class_prepared, mock_prepare):\n        class DummyModel(metaclass=ModelBase):\n            pass\n\n        self.assertTrue(hasattr(DummyModel, '_meta'))\n        self.assertTrue(hasattr(DummyModel, 'DoesNotExist'))\n        self.assertTrue(hasattr(DummyModel, 'MultipleObjectsReturned'))\n        mock_prepare.assert_called_once()\n        mock_class_prepared.send.assert_called_once_with(sender=DummyModel)\n\n    def test_model_state_fields_cache_descriptor(self):\n        descriptor = ModelStateFieldsCacheDescriptor()\n        instance = MagicMock()\n        self.assertEqual(descriptor.__get__(instance, Model), instance.fields_cache)\n\n    def test_model_state(self):\n        state = ModelState()\n        self.assertEqual(state.db, None)\n        self.assertTrue(state.adding)\n        self.assertIsInstance(state.fields_cache, dict)\n\n    def test_subclass_exception(self):\n        name = 'TestException'\n        bases = (Exception,)\n        module = 'test_module'\n        attached_to = MagicMock()\n\n        exception = subclass_exception(name, bases, module, attached_to)\n\n        self.assertEqual(exception.__module__, module)\n        self.assertEqual(exception.__qualname__, f'{attached_to.__qualname__}.{name}')\n\n    @patch('django.db.models.base.pre_init')\n    @patch('django.db.models.base.post_init')\n    def test_model_init(self, mock_post_init, mock_pre_init):\n        class DummyModel(Model):\n            pass\n\n        dummy_model = DummyModel()\n\n        mock_pre_init.send.assert_called_once_with(sender=DummyModel, args=(), kwargs={})\n        mock_post_init.send.assert_called_once_with(sender=DummyModel, instance=dummy_model)\n\n    # Add more test methods for other functionalities in django.db.models.base\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_451": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.contrib.admindocs.utils import (\n    get_view_name,\n    parse_docstring,\n    parse_rst,\n    create_reference_role,\n    default_reference_role,\n    replace_metacharacters,\n    replace_named_groups,\n    replace_unnamed_groups,\n    remove_non_capturing_groups,\n)\nfrom django.test.utils import captured_stderr\nimport docutils\n\nclass TestUtils(unittest.TestCase):\n    def setUp(self):\n        self.mock_view_func = Mock()\n        self.mock_view_func.__module__ = 'mock_module'\n        self.mock_view_func.__qualname__ = 'mock_qualname'\n\n    def test_get_view_name(self):\n        result = get_view_name(self.mock_view_func)\n        self.assertEqual(result, 'mock_module.mock_qualname')\n\n    def test_parse_docstring(self):\n        docstring = \"Title\\n\\nBody\\n\\nMetadata: Value\"\n        title, body, metadata = parse_docstring(docstring)\n        self.assertEqual(title, 'Title')\n        self.assertEqual(body, 'Body')\n        self.assertEqual(metadata, {'Metadata': 'Value'})\n\n    @patch('docutils.core.publish_parts')\n    def test_parse_rst(self, mock_publish_parts):\n        mock_publish_parts.return_value = {'fragment': '<p>Parsed</p>'}\n        result = parse_rst('text', 'default_context')\n        self.assertEqual(result, '<p>Parsed</p>')\n\n    @patch('docutils.parsers.rst.roles.register_canonical_role')\n    def test_create_reference_role(self, mock_register_canonical_role):\n        create_reference_role('role', 'urlbase')\n        mock_register_canonical_role.assert_called_once()\n\n    @patch('docutils.nodes.reference')\n    def test_default_reference_role(self, mock_reference):\n        mock_reference.return_value = '<reference/>'\n        mock_inliner = Mock()\n        mock_inliner.document.settings.default_reference_context = 'context'\n        mock_inliner.document.settings.link_base = 'base'\n        result, _ = default_reference_role('name', 'rawtext', 'text', 'lineno', mock_inliner)\n        self.assertEqual(result, ['<reference/>'])\n\n    def test_replace_metacharacters(self):\n        pattern = r'((?:^|(?<!\\\\))(?:\\\\\\\\)*)(\\\\?)([?*+^$]|\\\\[bBAZ])'\n        result = replace_metacharacters(pattern)\n        self.assertEqual(result, r'((?:^|(?<!\\\\))(?:\\\\\\\\)*)([?*+^$|\\\\[bBAZ])')\n\n    def test_replace_named_groups(self):\n        pattern = r'^(?P<a>\\w+)/b/(\\w+)$'\n        result = replace_named_groups(pattern)\n        self.assertEqual(result, r'^<a>/b/(\\w+)$')\n\n    def test_replace_unnamed_groups(self):\n        pattern = r'^(?P<a>\\w+)/b/(\\w+)$'\n        result = replace_unnamed_groups(pattern)\n        self.assertEqual(result, r'^(?P<a>\\w+)/b/<var>$')\n\n    def test_remove_non_capturing_groups(self):\n        pattern = r'(?P<a>\\w+)/b/(?:\\w+)c(?:\\w+)'\n        result = remove_non_capturing_groups(pattern)\n        self.assertEqual(result, r'(?P<a>\\w+)/b/c')\n"], "sample_608": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nfrom xarray.core import formatting\n\nclass TestFormatting(unittest.TestCase):\n    def setUp(self):\n        self.array = np.array([1, 2, 3, 4, 5])\n        self.timestamp = pd.Timestamp(\"2022-01-01\")\n        self.timedelta = pd.Timedelta(days=1)\n\n    def test_pretty_print(self):\n        result = formatting.pretty_print(\"test\", 10)\n        self.assertEqual(result, \"test     \")\n\n    def test_maybe_truncate(self):\n        result = formatting.maybe_truncate(\"a\" * 100, 10)\n        self.assertEqual(result, \"a\" * 7 + \"...\")\n\n    def test_wrap_indent(self):\n        result = formatting.wrap_indent(\"test\\nindent\", \"start: \", 6)\n        self.assertEqual(result, \"start: test\\n       indent\")\n\n    def test_format_timestamp(self):\n        result = formatting.format_timestamp(self.timestamp)\n        self.assertEqual(result, \"2022-01-01\")\n\n    def test_format_timedelta(self):\n        result = formatting.format_timedelta(self.timedelta)\n        self.assertEqual(result, \"1 days 00:00:00\")\n\n    def test_format_item(self):\n        self.assertEqual(formatting.format_item(self.array), \"[1 2 3 4 5]\")\n        self.assertEqual(formatting.format_item(self.timestamp), \"2022-01-01\")\n        self.assertEqual(formatting.format_item(self.timedelta), \"1 days 00:00:00\")\n\n    # Add more tests for other functions in formatting.py\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1047": ["\nimport unittest\nfrom sympy import S, symbols, MatrixSymbol, Identity, ZeroMatrix, MatrixElement, MatMul, MatAdd, MatPow, Transpose, Inverse, KroneckerDelta, Sum, Eq\nfrom sympy.matrices.expressions.matexpr import _LeftRightArgs, GenericZeroMatrix, GenericIdentity\n\nclass TestMatrixExpr(unittest.TestCase):\n    def setUp(self):\n        self.A = MatrixSymbol('A', 3, 4)\n        self.B = MatrixSymbol('B', 4, 3)\n        self.C = MatrixSymbol('C', 3, 3)\n        self.i, self.j, self.k = symbols('i j k')\n\n    def test_negation(self):\n        self.assertEqual(-self.A, MatMul(S.NegativeOne, self.A))\n\n    def test_addition(self):\n        self.assertEqual(self.A + self.B, MatAdd(self.A, self.B))\n\n    def test_subtraction(self):\n        self.assertEqual(self.A - self.B, MatAdd(self.A, -self.B))\n\n    def test_multiplication(self):\n        self.assertEqual(self.A * self.B, MatMul(self.A, self.B))\n\n    def test_power(self):\n        self.assertEqual(self.C ** self.k, MatPow(self.C, self.k))\n\n    def test_transpose(self):\n        self.assertEqual(self.A.transpose(), Transpose(self.A))\n\n    def test_inverse(self):\n        self.assertEqual(self.C.inverse(), Inverse(self.C))\n\n    def test_indexing(self):\n        self.assertEqual(self.A[self.i, self.j], MatrixElement(self.A, self.i, self.j))\n\n    def test_from_index_summation(self):\n        expr = Sum(self.A[self.i, self.j] * self.B[self.j, self.k], (self.j, 0, 3))\n        self.assertEqual(MatrixExpr.from_index_summation(expr), MatMul(self.A, self.B))\n\n    def test_equals(self):\n        self.assertTrue(self.A.equals(self.A))\n        self.assertFalse(self.A.equals(self.B))\n\n    def test_left_right_args(self):\n        lr = _LeftRightArgs(self.A, self.B)\n        lr.transpose()\n        self.assertTrue(lr.transposed)\n\nclass TestIdentity(unittest.TestCase):\n    def test_properties(self):\n        I = Identity(3)\n        self.assertTrue(I.is_Identity)\n        self.assertTrue(I.is_square)\n\n    def test_entry(self):\n        I = Identity(3)\n        self.assertEqual(I[0, 0], S.One)\n        self.assertEqual(I[1, 1], S.One)\n        self.assertEqual(I[2, 2], S.One)\n        self.assertEqual(I[0, 1], S.Zero)\n\nclass TestZeroMatrix(unittest.TestCase):\n    def test_properties(self):\n        Z = ZeroMatrix(3, 4)\n        self.assertTrue(Z.is_ZeroMatrix)\n\n    def test_entry(self):\n        Z = ZeroMatrix(3, 4)\n        self.assertEqual(Z[0, 0], S.Zero)\n        self.assertEqual(Z[1, 2], S.Zero)\n        self.assertEqual(Z[2, 3], S.Zero)\n\nclass TestGenericZeroMatrix(unittest.TestCase):\n    def test_properties(self):\n        Z = GenericZeroMatrix()\n        with self.assertRaises(TypeError):\n            Z.rows\n        with self.assertRaises(TypeError):\n            Z.cols\n        with self.assertRaises(TypeError):\n            Z.shape\n\nclass TestGenericIdentity(unittest.TestCase):\n    def test_properties(self):\n        I = GenericIdentity()\n        with self.assertRaises(TypeError):\n            I.rows\n        with self.assertRaises(TypeError):\n            I.cols\n        with self.assertRaises(TypeError):\n            I.shape\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_297": ["\nfrom datetime import datetime, timedelta\nimport unittest\nfrom unittest.mock import patch\nfrom django.contrib.auth.tokens import PasswordResetTokenGenerator\nfrom django.conf import settings\nfrom django.contrib.auth import get_user_model\n\nUser = get_user_model()\n\nclass TestPasswordResetTokenGenerator(unittest.TestCase):\n\n    def setUp(self):\n        self.generator = PasswordResetTokenGenerator()\n        self.user = User.objects.create_user(username='testuser', password='12345')\n\n    def test_make_token(self):\n        token = self.generator.make_token(self.user)\n        self.assertIsInstance(token, str)\n\n    def test_check_token(self):\n        token = self.generator.make_token(self.user)\n        self.assertTrue(self.generator.check_token(self.user, token))\n\n    def test_check_token_invalid(self):\n        token = self.generator.make_token(self.user)\n        self.user.set_password('newpassword')\n        self.assertFalse(self.generator.check_token(self.user, token))\n\n    @patch('django.contrib.auth.tokens.PasswordResetTokenGenerator._now')\n    def test_check_token_timeout(self, mock_now):\n        token = self.generator.make_token(self.user)\n        mock_now.return_value = datetime.now() + timedelta(seconds=settings.PASSWORD_RESET_TIMEOUT + 1)\n        self.assertFalse(self.generator.check_token(self.user, token))\n\n    def test_check_token_invalid_user(self):\n        token = self.generator.make_token(self.user)\n        self.assertFalse(self.generator.check_token(None, token))\n\n    def test_check_token_invalid_token(self):\n        self.assertFalse(self.generator.check_token(self.user, 'invalidtoken'))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_92": ["\nimport io\nfrom unittest import mock\nfrom django.core.management import call_command\nfrom django.core.management.base import CommandError\nfrom django.contrib.auth import get_user_model\nfrom django.test import TestCase\n\nUser = get_user_model()\n\nclass CreateSuperuserCommandTests(TestCase):\n    def setUp(self):\n        self.username = 'testuser'\n        self.email = 'testuser@test.com'\n        self.password = 'testpassword'\n\n    def test_createsuperuser_with_no_input(self):\n        with mock.patch('getpass.getpass', return_value=self.password):\n            call_command('createsuperuser', interactive=False, username=self.username, email=self.email)\n        self.assertTrue(User.objects.filter(username=self.username, email=self.email).exists())\n\n    def test_createsuperuser_with_input(self):\n        user_input = f'{self.username}\\n{self.email}\\n{self.password}\\n{self.password}\\n'\n        with mock.patch('sys.stdin', io.StringIO(user_input)):\n            call_command('createsuperuser', interactive=True)\n        self.assertTrue(User.objects.filter(username=self.username, email=self.email).exists())\n\n    def test_createsuperuser_with_invalid_username(self):\n        with mock.patch('sys.stdin', io.StringIO(f'test\\n{self.email}\\n{self.password}\\n{self.password}\\n')):\n            with self.assertRaises(CommandError):\n                call_command('createsuperuser', interactive=True)\n\n    def test_createsuperuser_with_blank_username(self):\n        with mock.patch('sys.stdin', io.StringIO(f'\\n{self.email}\\n{self.password}\\n{self.password}\\n')):\n            with self.assertRaises(CommandError):\n                call_command('createsuperuser', interactive=True)\n\n    def test_createsuperuser_with_taken_username(self):\n        User.objects.create_superuser(self.username, self.email, self.password)\n        with mock.patch('sys.stdin', io.StringIO(f'{self.username}\\n{self.email}\\n{self.password}\\n{self.password}\\n')):\n            with self.assertRaises(CommandError):\n                call_command('createsuperuser', interactive=True)\n"], "sample_1095": ["\nimport unittest\nfrom sympy import Symbol\nfrom sympy.combinatorics.permutations import Permutation, _af_parity, _af_rmul, _af_rmuln, AppliedPermutation, Cycle\n\nclass TestPermutations(unittest.TestCase):\n\n    def setUp(self):\n        self.p = Permutation([0, 2, 1, 3])\n        self.q = Permutation([2, 3, 1, 0])\n        self.x = Symbol('x')\n\n    def test_permutation_init(self):\n        self.assertEqual(self.p.array_form, [0, 2, 1, 3])\n\n    def test_permutation_mul(self):\n        result = self.p * self.q\n        self.assertEqual(result.array_form, [1, 3, 2, 0])\n\n    def test_permutation_apply(self):\n        result = self.p.apply(self.x)\n        self.assertEqual(result, AppliedPermutation(self.p, self.x))\n\n    def test_permutation_rank(self):\n        self.assertEqual(self.p.rank(), 6)\n\n    def test_af_parity(self):\n        self.assertEqual(_af_parity(self.p.array_form), 1)\n\n    def test_af_rmul(self):\n        a = [0, 1, 2]\n        b = [1, 2, 0]\n        self.assertEqual(_af_rmul(a, b), [1, 2, 0])\n\n    def test_af_rmuln(self):\n        a = [0, 1, 2]\n        b = [1, 2, 0]\n        c = [2, 0, 1]\n        self.assertEqual(_af_rmuln(a, b, c), [2, 0, 1])\n\n    def test_cycle_init(self):\n        c = Cycle(1, 2, 3)\n        self.assertEqual(c.list(), [0, 2, 3, 1])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_638": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom pylint.pyreverse import main\n\nclass TestPyReverseMain(unittest.TestCase):\n\n    @patch('pylint.pyreverse.main.project_from_files')\n    @patch('pylint.pyreverse.main.DiadefsHandler')\n    @patch('pylint.pyreverse.main.Linker')\n    @patch('pylint.pyreverse.main.DiagramWriter')\n    def test_run(self, mock_writer, mock_linker, mock_handler, mock_project):\n        # Mock the required objects\n        mock_config = MagicMock()\n        mock_config.output_format = 'dot'\n        mock_config.ignore_list = ('CVS',)\n        mock_config.project = 'TestProject'\n\n        # Mock the project_from_files function\n        mock_project.return_value = 'MockedProject'\n\n        # Mock the DiadefsHandler and its methods\n        mock_diadefs_handler = mock_handler.return_value\n        mock_diadefs_handler.get_diadefs.return_value = 'MockedDiadefs'\n\n        # Mock the Linker and its methods\n        mock_linker.return_value = 'MockedLinker'\n\n        # Mock the DiagramWriter and its methods\n        mock_writer.return_value.write.return_value = None\n\n        # Instantiate the Run class\n        runner = main.Run([''])\n\n        # Set the config attribute to the mock_config\n        runner.config = mock_config\n\n        # Call the run method with mocked arguments\n        result = runner.run(['test_file.py'])\n\n        # Assert the expected calls and results\n        mock_project.assert_called_once_with(['test_file.py'], project_name='TestProject', black_list=('CVS',))\n        mock_linker.assert_called_once_with('MockedProject', tag=True)\n        mock_diadefs_handler.get_diadefs.assert_called_once_with('MockedProject', 'MockedLinker')\n        mock_writer.return_value.write.assert_called_once_with('MockedDiadefs')\n\n        # Assert the result of the run method\n        self.assertEqual(result, 0)\n\n    @patch('pylint.pyreverse.main.check_graphviz_availability')\n    @patch('pylint.pyreverse.main.check_if_graphviz_supports_format')\n    def test_run_with_unsupported_format(self, mock_check_format, mock_check_availability):\n        # Mock the required objects\n        mock_config = MagicMock()\n        mock_config.output_format = 'unsupported'\n\n        # Instantiate the Run class\n        runner = main.Run([''])\n\n        # Set the config attribute to the mock_config\n        runner.config = mock_config\n\n        # Call the run method with mocked arguments\n        with self.assertRaises(SystemExit) as context:\n            runner.run(['test_file.py'])\n\n        # Assert the expected calls and results\n        mock_check_availability.assert_called_once()\n        mock_check_format.assert_called_once_with('unsupported')\n\n        # Assert the exit code\n        self.assertEqual(context.exception.code, 0)\n\n    @patch('pylint.pyreverse.main.print')\n    def test_run_without_arguments(self, mock_print):\n        # Instantiate the Run class\n        runner = main.Run([''])\n\n        # Call the run method without arguments\n        result = runner.run([])\n\n        # Assert the expected call and result\n        mock_print.assert_called_once()\n        self.assertEqual(result, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_288": ["\nimport json\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.core import exceptions\nfrom django.db import NotSupportedError, connections\nfrom django.db.models import lookups\nfrom django.db.models.fields.json import (\n    JSONField, DataContains, ContainedBy, HasKey, HasKeys, HasAnyKeys, JSONExact, JSONIContains,\n    KeyTransform, KeyTextTransform, KeyTransformFactory, KeyTransformTextLookupMixin,\n    KeyTransformIsNull, KeyTransformIn, KeyTransformExact, KeyTransformIExact,\n    KeyTransformIContains, KeyTransformStartsWith, KeyTransformIStartsWith,\n    KeyTransformEndsWith, KeyTransformIEndsWith, KeyTransformRegex, KeyTransformIRegex,\n    KeyTransformLt, KeyTransformLte, KeyTransformGt, KeyTransformGte,\n)\n\nclass JSONFieldTest(unittest.TestCase):\n\n    def setUp(self):\n        self.field = JSONField()\n\n    def test_init(self):\n        self.assertRaises(ValueError, JSONField, encoder='not_callable')\n        self.assertRaises(ValueError, JSONField, decoder='not_callable')\n\n    def test_check(self):\n        # Mocking the database connection and router for this test\n        connection = MagicMock()\n        connection.features.supports_json_field = False\n        connection.display_name = 'Mock Connection'\n        connections['default'] = connection\n        with patch('django.db.models.fields.json.router') as router_mock:\n            router_mock.allow_migrate_model.return_value = True\n            errors = self.field.check(databases=['default'])\n            self.assertEqual(len(errors), 1)\n            self.assertEqual(errors[0].msg, 'Mock Connection does not support JSONFields.')\n\n    # Add more tests for other methods and functionalities in JSONField class\n\nclass LookupTests(unittest.TestCase):\n\n    def test_data_contains(self):\n        connection = MagicMock()\n        connection.features.supports_json_field_contains = False\n        lookup = DataContains('lhs', 'rhs')\n        self.assertRaises(NotSupportedError, lookup.as_sql, MagicMock(), connection)\n\n    # Add more tests for other lookup classes\n\nclass KeyTransformTests(unittest.TestCase):\n\n    def test_key_transform(self):\n        transform = KeyTransform('key', MagicMock())\n        compiler = MagicMock()\n        connection = MagicMock()\n        lhs, params, key_transforms = transform.preprocess_lhs(compiler, connection)\n        self.assertEqual(key_transforms, ['key'])\n\n    # Add more tests for other KeyTransform methods and functionalities\n\n# Add more test classes for other functionalities and edge cases\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_489": ["\nfrom django.db import models\nfrom django.db.models.query import QuerySet, RawQuerySet, prefetch_related_objects\nfrom django.test import TestCase\nfrom unittest.mock import MagicMock, patch\n\nclass TestQuerySet(TestCase):\n    def setUp(self):\n        self.model = models.Model\n        self.queryset = QuerySet(model=self.model)\n\n    def test_filter(self):\n        filtered_qs = self.queryset.filter(id=1)\n        self.assertEqual(filtered_qs.query.where, {'id': 1})\n\n    def test_exclude(self):\n        excluded_qs = self.queryset.exclude(id=1)\n        self.assertEqual(excluded_qs.query.where, {'id__exact': 1, '_negated': True})\n\n    def test_annotate(self):\n        annotated_qs = self.queryset.annotate(count=models.Count('items'))\n        self.assertIn('count', annotated_qs.query.annotations)\n\n    def test_order_by(self):\n        ordered_qs = self.queryset.order_by('id')\n        self.assertEqual(ordered_qs.query.order_by, ['id'])\n\n    def test_distinct(self):\n        distinct_qs = self.queryset.distinct('id')\n        self.assertEqual(distinct_qs.query.distinct_fields, ('id',))\n\n    def test_values(self):\n        values_qs = self.queryset.values('id', 'name')\n        self.assertEqual(values_qs._fields, ('id', 'name'))\n\n    def test_values_list(self):\n        values_list_qs = self.queryset.values_list('id', 'name')\n        self.assertEqual(values_list_qs._fields, ('id', 'name'))\n\n    def test_prefetch_related(self):\n        prefetch_qs = self.queryset.prefetch_related('items')\n        self.assertEqual(prefetch_qs._prefetch_related_lookups, ('items',))\n\n    def test_prefetch_related_objects(self):\n        instance = self.model()\n        prefetch_related_objects([instance], 'items')\n        self.assertTrue(instance._prefetch_done)\n\n    # Add more tests for other methods in QuerySet as needed\n\nclass TestRawQuerySet(TestCase):\n    def setUp(self):\n        self.raw_query = \"SELECT * FROM my_table\"\n        self.model = models.Model\n        self.raw_queryset = RawQuerySet(raw_query=self.raw_query, model=self.model)\n\n    def test_prefetch_related(self):\n        prefetch_qs = self.raw_queryset.prefetch_related('items')\n        self.assertEqual(prefetch_qs._prefetch_related_lookups, ('items',))\n\n    def test_resolve_model_init_order(self):\n        model_init_names, model_init_order, annotation_fields = self.raw_queryset.resolve_model_init_order()\n        # Add assertions based on expected results\n\n    # Add more tests for other methods in RawQuerySet as needed\n\nclass TestPrefetchRelatedObjects(TestCase):\n    def test_prefetch_related_objects(self):\n        instance = models.Model()\n        prefetch_related_objects([instance], 'items')\n        self.assertTrue(instance._prefetch_done)\n\n    # Add more tests for prefetch_related_objects function as needed\n"], "sample_445": ["\nimport unittest\nfrom django.utils import timesince\nfrom datetime import datetime, timedelta\nfrom django.utils.timezone import make_aware\n\nclass TimesinceTest(unittest.TestCase):\n    def test_timesince(self):\n        now = datetime.now()\n        past = now - timedelta(days=2)\n        self.assertEqual(timesince.timesince(past), \"2 days\")\n\n        past = now - timedelta(days=2, hours=5)\n        self.assertEqual(timesince.timesince(past), \"2 days, 5 hours\")\n\n        past = now - timedelta(days=365, hours=12)\n        self.assertEqual(timesince.timesince(past), \"1 year\")\n\n        past = now - timedelta(days=365*2 + 30, hours=12)\n        self.assertEqual(timesince.timesince(past), \"2 years, 1 month\")\n\n    def test_timeuntil(self):\n        now = datetime.now()\n        future = now + timedelta(days=2)\n        self.assertEqual(timesince.timeuntil(future), \"2 days\")\n\n        future = now + timedelta(days=2, hours=5)\n        self.assertEqual(timesince.timeuntil(future), \"2 days, 5 hours\")\n\n        future = now + timedelta(days=365, hours=12)\n        self.assertEqual(timesince.timeuntil(future), \"1 year\")\n\n        future = now + timedelta(days=365*2 + 30, hours=12)\n        self.assertEqual(timesince.timeuntil(future), \"2 years, 1 month\")\n\n    def test_aware_timesince(self):\n        now = make_aware(datetime.now())\n        past = now - timedelta(days=2)\n        self.assertEqual(timesince.timesince(past), \"2 days\")\n\n    def test_aware_timeuntil(self):\n        now = make_aware(datetime.now())\n        future = now + timedelta(days=2)\n        self.assertEqual(timesince.timeuntil(future), \"2 days\")\n\n    def test_depth(self):\n        now = datetime.now()\n        past = now - timedelta(days=365*2 + 30, hours=12)\n        self.assertEqual(timesince.timesince(past, depth=1), \"2 years\")\n        self.assertEqual(timesince.timesince(past, depth=3), \"2 years, 1 month, 12 hours\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_278": ["\nfrom django.test import TestCase\nfrom django.db.models.query_utils import Q, DeferredAttribute, RegisterLookupMixin, select_related_descend, refs_expression, check_rel_lookup_compatibility, FilteredRelation\nfrom django.db import models\nfrom unittest.mock import Mock, patch\n\nclass TestQueryUtils(TestCase):\n\n    def setUp(self):\n        class TestModel(models.Model):\n            test_field = models.CharField(max_length=10)\n\n        self.test_model = TestModel\n\n    def test_Q_combine(self):\n        q1 = Q(test_field__startswith='test')\n        q2 = Q(test_field__endswith='test')\n        combined = q1 & q2\n        self.assertEqual(combined.children[0][0][1], 'test')\n\n    def test_Q_invert(self):\n        q1 = Q(test_field__startswith='test')\n        inverted = ~q1\n        self.assertTrue(inverted.negated)\n\n    def test_DeferredAttribute_get(self):\n        field = Mock()\n        field.attname = 'test_field'\n        deferred_attr = DeferredAttribute(field)\n        instance = Mock()\n        instance.__dict__ = {}\n        instance._meta = self.test_model._meta\n        with patch.object(self.test_model.objects, 'get') as mock_get:\n            mock_get.return_value = 'test'\n            value = deferred_attr.__get__(instance)\n            self.assertEqual(value, 'test')\n\n    def test_RegisterLookupMixin_get_lookup(self):\n        class TestLookupMixin(RegisterLookupMixin):\n            class_lookups = {'test_lookup': Mock()}\n        lookup = TestLookupMixin().get_lookup('test_lookup')\n        self.assertIsNotNone(lookup)\n\n    def test_select_related_descend(self):\n        field = Mock()\n        field.remote_field = Mock()\n        field.remote_field.parent_link = False\n        field.null = False\n        self.assertTrue(select_related_descend(field, False, {}, set()))\n\n    def test_refs_expression(self):\n        annotations = {'test_annotation': True}\n        lookup_parts = ['test', 'annotation']\n        ref, parts = refs_expression(lookup_parts, annotations)\n        self.assertTrue(ref)\n\n    def test_check_rel_lookup_compatibility(self):\n        class TestModel2(models.Model):\n            pass\n        field = Mock()\n        field.primary_key = True\n        field.model = TestModel2\n        self.assertTrue(check_rel_lookup_compatibility(self.test_model, TestModel2._meta, field))\n\n    def test_FilteredRelation_as_sql(self):\n        compiler = Mock()\n        connection = Mock()\n        filtered_relation = FilteredRelation('test_relation')\n        with patch.object(compiler.query, 'build_filtered_relation_q') as mock_build:\n            mock_build.return_value = Mock()\n            sql, params = filtered_relation.as_sql(compiler, connection)\n            self.assertIsNotNone(sql)\n"], "sample_810": ["\nimport unittest\nfrom sklearn.calibration import CalibratedClassifierCV, _sigmoid_calibration, _SigmoidCalibration, calibration_curve\nfrom sklearn.svm import LinearSVC\nimport numpy as np\n\nclass TestCalibration(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]])\n        self.y = np.array([0, 0, 1, 1, 1])\n        self.base_estimator = LinearSVC(random_state=0)\n\n    def test_CalibratedClassifierCV_fit(self):\n        clf = CalibratedClassifierCV(base_estimator=self.base_estimator, cv=2)\n        clf.fit(self.X, self.y)\n        self.assertEqual(len(clf.calibrated_classifiers_), 2)\n\n    def test_CalibratedClassifierCV_predict_proba(self):\n        clf = CalibratedClassifierCV(base_estimator=self.base_estimator, cv=2)\n        clf.fit(self.X, self.y)\n        proba = clf.predict_proba(self.X)\n        self.assertEqual(proba.shape, (self.X.shape[0], len(clf.classes_)))\n\n    def test_sigmoid_calibration(self):\n        df = np.array([0.1, 0.3, 0.4, 0.6, 0.8])\n        y = np.array([0, 0, 1, 1, 1])\n        a, b = _sigmoid_calibration(df, y)\n        self.assertIsInstance(a, float)\n        self.assertIsInstance(b, float)\n\n    def test_SigmoidCalibration_fit_predict(self):\n        X = np.array([0.1, 0.3, 0.4, 0.6, 0.8])\n        y = np.array([0, 0, 1, 1, 1])\n        clf = _SigmoidCalibration()\n        clf.fit(X, y)\n        pred = clf.predict(X)\n        self.assertEqual(len(pred), len(X))\n\n    def test_calibration_curve(self):\n        y_true = np.array([0, 0, 1, 1, 1])\n        y_prob = np.array([0.1, 0.3, 0.4, 0.6, 0.8])\n        prob_true, prob_pred = calibration_curve(y_true, y_prob, n_bins=2)\n        self.assertEqual(len(prob_true), len(prob_pred))\n"], "sample_32": ["\nimport pytest\nimport numpy as np\nfrom numpy.testing import assert_almost_equal\nimport astropy.units as u\nfrom astropy.cosmology import Flatw0wzCDM, w0wzCDM\nfrom astropy.cosmology.flrw.base import FLRW\n\nclass Testw0wzCDM:\n    def setup_method(self):\n        self.cosmo = w0wzCDM(H0=70, Om0=0.3, Ode0=0.7, w0=-0.9, wz=0.2)\n\n    def test_w(self):\n        assert_almost_equal(self.cosmo.w(0), -0.9)\n        assert_almost_equal(self.cosmo.w(1), -0.7)\n\n    def test_de_density_scale(self):\n        assert_almost_equal(self.cosmo.de_density_scale(0), 1)\n        assert_almost_equal(self.cosmo.de_density_scale(1), np.exp(3 * 0.2))\n\nclass TestFlatw0wzCDM:\n    def setup_method(self):\n        self.cosmo = Flatw0wzCDM(H0=70, Om0=0.3, w0=-0.9, wz=0.2)\n\n    def test_inheritance(self):\n        assert isinstance(self.cosmo, FLRW)\n        assert isinstance(self.cosmo, w0wzCDM)\n\n    def test_initialization(self):\n        assert_almost_equal(self.cosmo.Ode0, 0.7)\n\n    def test_de_density_scale(self):\n        assert_almost_equal(self.cosmo.de_density_scale(0), 1)\n        assert_almost_equal(self.cosmo.de_density_scale(1), np.exp(3 * 0.2))\n"], "sample_769": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing.data import _handle_zeros_in_scale, Binarizer, KernelCenterer, Normalizer, normalize, StandardScaler, scale, MinMaxScaler, minmax_scale, QuantileTransformer, quantile_transform, MaxAbsScaler, maxabs_scale, RobustScaler, robust_scale, add_dummy_feature, PolynomialFeatures, PowerTransformer, power_transform\n\nclass TestPreprocessingData(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1., -1., 2.], [2., 0., 0.], [0., 1., -1.]])\n        self.X_sparse = sparse.csr_matrix(self.X)\n\n    def test_handle_zeros_in_scale(self):\n        arr = np.array([0, 1, 2])\n        result = _handle_zeros_in_scale(arr)\n        np.testing.assert_array_equal(result, [1, 1, 2])\n\n    def test_Binarizer(self):\n        binarizer = Binarizer(threshold=0.0)\n        result = binarizer.fit_transform(self.X)\n        np.testing.assert_array_equal(result, [[1., 0., 1.], [1., 0., 0.], [0., 1., 0.]])\n\n    # Add more tests for other functions in a similar manner...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_11": ["\nimport unittest\nimport numpy as np\nfrom astropy.wcs import WCS\nfrom astropy.wcs.wcsapi.wrappers.sliced_wcs import SlicedLowLevelWCS, sanitize_slices, combine_slices\n\nclass TestSlicedLowLevelWCS(unittest.TestCase):\n\n    def setUp(self):\n        self.wcs = WCS(naxis=2)\n        self.wcs.wcs.ctype = ['RA---TAN', 'DEC--TAN']\n        self.wcs.wcs.crval = [0, 0]\n        self.wcs.wcs.crpix = [0, 0]\n        self.wcs.wcs.cdelt = [1, 1]\n\n    def test_sanitize_slices(self):\n        slices = (slice(None), 0)\n        sanitized = sanitize_slices(slices, 2)\n        self.assertEqual(sanitized, [slice(None), 0])\n\n    def test_combine_slices(self):\n        slice1 = slice(1, 10)\n        slice2 = slice(2, 8)\n        combined = combine_slices(slice1, slice2)\n        self.assertEqual(combined, slice(3, 8))\n\n    def test_SlicedLowLevelWCS_init(self):\n        sliced_wcs = SlicedLowLevelWCS(self.wcs, (slice(None), 0))\n        self.assertEqual(sliced_wcs.pixel_n_dim, 1)\n\n    def test_SlicedLowLevelWCS_pixel_to_world_values(self):\n        sliced_wcs = SlicedLowLevelWCS(self.wcs, (slice(None), 0))\n        pixel = [1, 2]\n        world = sliced_wcs.pixel_to_world_values(*pixel)\n        self.assertEqual(world, (1,))\n\n    def test_SlicedLowLevelWCS_world_to_pixel_values(self):\n        sliced_wcs = SlicedLowLevelWCS(self.wcs, (slice(None), 0))\n        world = (1,)\n        pixel = sliced_wcs.world_to_pixel_values(*world)\n        self.assertEqual(pixel, (1, 0))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1066": ["\nimport unittest\nfrom sympy import (S, Symbol, factorial, factorial2, binomial, rf, ff, gamma, Poly, Dummy, oo)\nfrom sympy.functions.combinatorial.factorials import subfactorial\n\nclass TestCombinatorialFunctions(unittest.TestCase):\n    def setUp(self):\n        self.n = Symbol('n', integer=True)\n\n    def test_factorial(self):\n        self.assertEqual(factorial(0), 1)\n        self.assertEqual(factorial(5), 120)\n        self.assertEqual(factorial(self.n), factorial(self.n))\n        self.assertEqual(factorial(2 * self.n), factorial(2 * self.n))\n        self.assertEqual(factorial(S(1) / 2), factorial(S(1) / 2))\n        self.assertEqual(factorial(-2), S.ComplexInfinity)\n\n    def test_subfactorial(self):\n        self.assertEqual(subfactorial(0), 1)\n        self.assertEqual(subfactorial(1), 0)\n        self.assertEqual(subfactorial(5), 44)\n        self.assertEqual(subfactorial(self.n + 1), subfactorial(self.n + 1))\n\n    def test_factorial2(self):\n        self.assertEqual(factorial2(5), 15)\n        self.assertEqual(factorial2(-1), 1)\n        self.assertEqual(factorial2(-5), 1/3)\n\n    def test_rising_factorial(self):\n        self.assertEqual(rf(1, 5), 120)\n        self.assertEqual(rf(self.n, 5), self.n * (self.n + 1) * (self.n + 2) * (self.n + 3) * (self.n + 4))\n\n    def test_falling_factorial(self):\n        self.assertEqual(ff(5, 5), 120)\n        self.assertEqual(ff(self.n, 5), self.n * (self.n - 1) * (self.n - 2) * (self.n - 3) * (self.n - 4))\n\n    def test_binomial(self):\n        self.assertEqual(binomial(15, 8), 6435)\n        self.assertEqual(binomial(self.n, -1), 0)\n        self.assertEqual(binomial(self.n, 3), binomial(self.n, 3))\n        self.assertEqual(binomial(self.n, 3).expand(func=True), self.n**3 / 6 - self.n**2 / 2 + self.n / 3)\n        self.assertEqual(expand_func(binomial(self.n, 3)), self.n * (self.n - 2) * (self.n - 1) / 6)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_87": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.utils.functional import cached_property, lazy, SimpleLazyObject, keep_lazy_text\n\nclass TestFunctionalUtils(unittest.TestCase):\n    def test_cached_property(self):\n        class MyClass:\n            @cached_property\n            def my_prop(self):\n                return \"my_value\"\n\n        obj = MyClass()\n        self.assertEqual(obj.my_prop, \"my_value\")\n        self.assertEqual(obj.my_prop, \"my_value\")  # should be cached\n\n    def test_lazy(self):\n        func = Mock(return_value=\"my_value\")\n        lazy_func = lazy(func, str)\n        result = lazy_func()\n        self.assertEqual(str(result), \"my_value\")\n        func.assert_called_once()\n\n    def test_simple_lazy_object(self):\n        func = Mock(return_value=\"my_value\")\n        lazy_obj = SimpleLazyObject(func)\n        self.assertEqual(str(lazy_obj), \"my_value\")\n        func.assert_called_once()\n\n    def test_keep_lazy_text(self):\n        @keep_lazy_text\n        def my_func(arg):\n            return arg + \" my_value\"\n\n        result = my_func(\"my_arg\")\n        self.assertEqual(result, \"my_arg my_value\")\n        lazy_result = my_func(lazy(str, str)(\"my_arg\"))\n        self.assertEqual(str(lazy_result), \"my_arg my_value\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1199": ["\nimport unittest\nfrom sympy import symbols, Matrix, Add, Mul, Pow\nfrom sympy.physics.quantum import TensorProduct, tensor_product_simp, Ket, Bra\n\nA, B, C, D = symbols('A B C D', commutative=False)\n\nclass TestTensorProduct(unittest.TestCase):\n    def test_matrix_tensor_product(self):\n        m1 = Matrix([[1,2],[3,4]])\n        m2 = Matrix([[1,0],[0,1]])\n        self.assertEqual(TensorProduct(m1, m2), Matrix([[1, 0, 2, 0], [0, 1, 0, 2], [3, 0, 4, 0], [0, 3, 0, 4]]))\n        self.assertEqual(TensorProduct(m2, m1), Matrix([[1, 2, 0, 0], [3, 4, 0, 0], [0, 0, 1, 2], [0, 0, 3, 4]]))\n\n    def test_symbolic_tensor_product(self):\n        tp = TensorProduct(A, B)\n        self.assertEqual(str(tp), \"AxB\")\n\n    def test_dagger(self):\n        tp = TensorProduct(A, B)\n        self.assertEqual(str(tp.dagger()), \"Dagger(A)xDagger(B)\")\n\n    def test_expand(self):\n        tp = TensorProduct(A+B, C)\n        self.assertEqual(str(tp.expand(tensorproduct=True)), \"AxC + BxC\")\n\n    def test_combined_printing(self):\n        ket1 = Ket(A, B)\n        ket2 = Ket(C, D)\n        tp = TensorProduct(ket1, ket2)\n        self.assertEqual(str(tp), \"Ket(A,B)Ket(C,D)\")\n\n    def test_tensor_product_simp_Mul(self):\n        e = TensorProduct(A, B) * TensorProduct(C, D)\n        self.assertEqual(str(tensor_product_simp_Mul(e)), \"(A*C)x(B*D)\")\n\n    def test_tensor_product_simp_Pow(self):\n        e = TensorProduct(A, B) ** 2\n        self.assertEqual(str(tensor_product_simp_Pow(e)), \"(A**2)x(B**2)\")\n\n    def test_tensor_product_simp(self):\n        e = TensorProduct(A, B) * TensorProduct(C, D)\n        self.assertEqual(str(tensor_product_simp(e)), \"(A*C)x(B*D)\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1080": ["\nimport unittest\nfrom sympy import Q, Symbol, Abs, Pow, atan2, S, Pi, NaN, re, im, sign, I\nfrom sympy.assumptions.refine import refine, refine_abs, refine_Pow, refine_atan2, refine_re, refine_im, refine_sign\n\nclass TestRefineFunctions(unittest.TestCase):\n\n    def setUp(self):\n        self.x = Symbol('x')\n        self.y = Symbol('y')\n\n    def test_refine_abs(self):\n        self.assertEqual(refine_abs(Abs(self.x), Q.real(self.x)), self.x)\n        self.assertEqual(refine_abs(Abs(self.x), Q.positive(self.x)), self.x)\n        self.assertEqual(refine_abs(Abs(self.x), Q.negative(self.x)), -self.x)\n\n    def test_refine_Pow(self):\n        self.assertEqual(refine_Pow(Pow(-1, self.x), Q.real(self.x)), None)\n        self.assertEqual(refine_Pow(Pow(-1, self.x), Q.even(self.x)), 1)\n        self.assertEqual(refine_Pow(Pow(-1, self.x), Q.odd(self.x)), -1)\n\n    def test_refine_atan2(self):\n        self.assertEqual(refine_atan2(atan2(self.y, self.x), Q.real(self.y) & Q.positive(self.x)), atan(self.y/self.x))\n        self.assertEqual(refine_atan2(atan2(self.y, self.x), Q.negative(self.y) & Q.negative(self.x)), atan(self.y/self.x) - Pi)\n        self.assertEqual(refine_atan2(atan2(self.y, self.x), Q.positive(self.y) & Q.negative(self.x)), atan(self.y/self.x) + Pi)\n        self.assertEqual(refine_atan2(atan2(self.y, self.x), Q.zero(self.y) & Q.negative(self.x)), Pi)\n        self.assertEqual(refine_atan2(atan2(self.y, self.x), Q.positive(self.y) & Q.zero(self.x)), Pi/2)\n        self.assertEqual(refine_atan2(atan2(self.y, self.x), Q.negative(self.y) & Q.zero(self.x)), -Pi/2)\n        self.assertEqual(refine_atan2(atan2(self.y, self.x), Q.zero(self.y) & Q.zero(self.x)), NaN)\n\n    def test_refine_re(self):\n        self.assertEqual(refine_re(re(self.x), Q.real(self.x)), self.x)\n        self.assertEqual(refine_re(re(self.x), Q.imaginary(self.x)), 0)\n\n    def test_refine_im(self):\n        self.assertEqual(refine_im(im(self.x), Q.real(self.x)), 0)\n        self.assertEqual(refine_im(im(self.x), Q.imaginary(self.x)), -I*self.x)\n\n    def test_refine_sign(self):\n        self.assertEqual(refine_sign(sign(self.x), Q.positive(self.x) & Q.nonzero(self.x)), 1)\n        self.assertEqual(refine_sign(sign(self.x), Q.negative(self.x) & Q.nonzero(self.x)), -1)\n        self.assertEqual(refine_sign(sign(self.x), Q.zero(self.x)), 0)\n        self.assertEqual(refine_sign(sign(I*self.x), Q.positive(im(self.x))), I)\n        self.assertEqual(refine_sign(sign(I*self.x), Q.negative(im(self.x))), -I)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_786": ["\nimport unittest\nimport numpy as np\nfrom scipy import sparse\nfrom sklearn.impute import SimpleImputer, MissingIndicator\n\nclass TestImpute(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[7, 2, 3], [4, np.nan, 6], [10, 5, 9]])\n\n    def test_simple_imputer_mean(self):\n        imp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\n        imp_mean.fit(self.X)\n        X_transformed = imp_mean.transform(self.X)\n        np.testing.assert_array_almost_equal(X_transformed,\n                                             np.array([[7, 2, 3], [4, 3.5, 6], [10, 5, 9]]))\n\n    def test_simple_imputer_median(self):\n        imp_median = SimpleImputer(missing_values=np.nan, strategy='median')\n        imp_median.fit(self.X)\n        X_transformed = imp_median.transform(self.X)\n        np.testing.assert_array_almost_equal(X_transformed,\n                                             np.array([[7, 2, 3], [4, 5, 6], [10, 5, 9]]))\n\n    def test_simple_imputer_most_frequent(self):\n        imp_most_frequent = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\n        imp_most_frequent.fit(self.X)\n        X_transformed = imp_most_frequent.transform(self.X)\n        np.testing.assert_array_almost_equal(X_transformed,\n                                             np.array([[7, 2, 3], [4, 2, 6], [10, 5, 9]]))\n\n    def test_simple_imputer_constant(self):\n        imp_constant = SimpleImputer(missing_values=np.nan, strategy='constant', fill_value=0)\n        imp_constant.fit(self.X)\n        X_transformed = imp_constant.transform(self.X)\n        np.testing.assert_array_almost_equal(X_transformed,\n                                             np.array([[7, 2, 3], [4, 0, 6], [10, 5, 9]]))\n\n    def test_simple_imputer_sparse(self):\n        X_sparse = sparse.csr_matrix(self.X)\n        imp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\n        imp_mean.fit(X_sparse)\n        X_transformed = imp_mean.transform(X_sparse)\n        np.testing.assert_array_almost_equal(X_transformed.toarray(),\n                                             np.array([[7, 2, 3], [4, 3.5, 6], [10, 5, 9]]))\n\n    def test_missing_indicator(self):\n        indicator = MissingIndicator()\n        indicator.fit(self.X)\n        X_transformed = indicator.transform(self.X)\n        np.testing.assert_array_equal(X_transformed,\n                                      np.array([[False, False, False],\n                                                [False, True, False],\n                                                [False, False, False]]))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_563": ["\nimport unittest\nfrom unittest.mock import MagicMock\n\nfrom matplotlib.offsetbox import (\n    AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, HPacker,\n    OffsetBox, OffsetImage, PaddedBox, TextArea, VPacker, _get_packed_offsets\n)\n\nclass TestOffsetBoxFunctions(unittest.TestCase):\n    def test_get_packed_offsets_fixed(self):\n        widths = [1, 2, 3]\n        total = 10\n        sep = 1\n        mode = \"fixed\"\n        result = _get_packed_offsets(widths, total, sep, mode)\n        self.assertEqual(result, (10, [0, 2, 5]))\n\n    def test_get_packed_offsets_expand(self):\n        widths = [1, 2, 3]\n        total = 10\n        sep = 1\n        mode = \"expand\"\n        result = _get_packed_offsets(widths, total, sep, mode)\n        self.assertEqual(result, (10, [0, 3, 7]))\n\n    def test_get_packed_offsets_equal(self):\n        widths = [1, 2, 3]\n        total = 10\n        sep = 1\n        mode = \"equal\"\n        result = _get_packed_offsets(widths, total, sep, mode)\n        self.assertEqual(result, (10, [0, 3.333333333333333, 6.666666666666667]))\n\nclass TestOffsetBox(unittest.TestCase):\n    def test_set_offset(self):\n        offset_box = OffsetBox()\n        offset_box.set_offset((10, 20))\n        self.assertEqual(offset_box._offset, (10, 20))\n\n    def test_get_offset(self):\n        offset_box = OffsetBox()\n        offset_box.set_offset((10, 20))\n        bbox = MagicMock()\n        renderer = MagicMock()\n        result = offset_box.get_offset(bbox, renderer)\n        self.assertEqual(result, (10, 20))\n\n# More tests for other classes and methods can be added similarly\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_211": ["\nfrom django.test import RequestFactory, TestCase\nfrom django.http import HttpResponse, HttpResponseRedirect, HttpResponseNotAllowed\nfrom django.urls import reverse\nfrom django.views.generic import RedirectView, TemplateView\n\nfrom django.views.generic.base import View, ContextMixin, TemplateResponseMixin\n\nclass TestContextMixin(TestCase):\n    def setUp(self):\n        self.context_mixin = ContextMixin()\n        self.context_mixin.extra_context = {'test': 'extra'}\n\n    def test_get_context_data(self):\n        context = self.context_mixin.get_context_data(base='test')\n        self.assertEqual(context, {'base': 'test', 'view': self.context_mixin, 'test': 'extra'})\n\nclass TestView(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_get(self):\n        request = self.factory.get('/test/')\n        view = View.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 405)  # Method Not Allowed\n\n    def test_invalid_method(self):\n        request = self.factory.delete('/test/')\n        view = View.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 405)  # Method Not Allowed\n\nclass TestTemplateResponseMixin(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.template_response_mixin = TemplateResponseMixin()\n        self.template_response_mixin.request = self.factory.get('/test/')\n        self.template_response_mixin.template_name = 'test_template.html'\n\n    def test_render_to_response(self):\n        response = self.template_response_mixin.render_to_response({'test': 'context'})\n        self.assertEqual(response.status_code, 200)\n\nclass TestTemplateView(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_get(self):\n        request = self.factory.get('/test/')\n        view = TemplateView.as_view(template_name='test_template.html')\n        response = view(request)\n        self.assertEqual(response.status_code, 200)\n\nclass TestRedirectView(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_get_redirect_url(self):\n        view = RedirectView.as_view(url='/redirect/')\n        request = self.factory.get('/test/')\n        view.request = request\n        url = view.get_redirect_url()\n        self.assertEqual(url, '/redirect/')\n\n    def test_get(self):\n        view = RedirectView.as_view(url='/redirect/')\n        request = self.factory.get('/test/')\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response['location'], '/redirect/')\n"], "sample_737": ["\nimport unittest\nimport numpy as np\nfrom sklearn.utils.validation import check_array, check_X_y, check_symmetric, check_is_fitted, check_consistent_length, assert_all_finite, check_memory\nfrom scipy import sparse\n\nclass TestValidation(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4], [5, 6]])\n        self.y = np.array([1, 2, 3])\n        self.X_sparse = sparse.csr_matrix(self.X)\n\n    def test_check_array(self):\n        X_transformed = check_array(self.X)\n        self.assertIsInstance(X_transformed, np.ndarray)\n\n        X_sparse_transformed = check_array(self.X_sparse, accept_sparse=True)\n        self.assertIsInstance(X_sparse_transformed, sparse.csr_matrix)\n\n    def test_check_X_y(self):\n        X_transformed, y_transformed = check_X_y(self.X, self.y)\n        self.assertIsInstance(X_transformed, np.ndarray)\n        self.assertIsInstance(y_transformed, np.ndarray)\n\n    def test_check_symmetric(self):\n        symmetric_matrix = np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])\n        asymmetric_matrix = np.array([[1, 2], [3, 4]])\n\n        symmetric_transformed = check_symmetric(symmetric_matrix)\n        self.assertTrue(np.allclose(symmetric_transformed, symmetric_transformed.T))\n\n        with self.assertRaises(ValueError):\n            check_symmetric(asymmetric_matrix, raise_exception=True)\n\n    # Add more test methods for other functions...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_595": ["\nimport unittest\nimport xarray as xr\nfrom xarray.core import accessor_str\n\nclass TestStringAccessor(unittest.TestCase):\n\n    def setUp(self):\n        self.da = xr.DataArray(['some', 'text', 'in', 'an', 'array'])\n        self.str_accessor = self.da.str\n\n    def test_len(self):\n        result = self.str_accessor.len()\n        self.assertEqual(result.values.tolist(), [4, 4, 2, 2, 5])\n\n    def test_get(self):\n        result = self.str_accessor.get(0)\n        self.assertEqual(result.values.tolist(), ['s', 't', 'i', 'a', 'a'])\n\n    def test_slice(self):\n        result = self.str_accessor.slice(start=1, stop=3)\n        self.assertEqual(result.values.tolist(), ['ome', 'ext', 'n', 'n', 'rray'])\n\n    def test_lower(self):\n        result = self.str_accessor.lower()\n        self.assertEqual(result.values.tolist(), ['some', 'text', 'in', 'an', 'array'])\n\n    def test_upper(self):\n        result = self.str_accessor.upper()\n        self.assertEqual(result.values.tolist(), ['SOME', 'TEXT', 'IN', 'AN', 'ARRAY'])\n\n    def test_contains(self):\n        result = self.str_accessor.contains('e')\n        self.assertEqual(result.values.tolist(), [True, True, False, True, False])\n\n    def test_replace(self):\n        result = self.str_accessor.replace('e', 'E')\n        self.assertEqual(result.values.tolist(), ['somE', 'tExt', 'in', 'an', 'array'])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_122": ["\nimport unittest\nfrom django.utils.http import (\n    base36_to_int, escape_leading_slashes, http_date, int_to_base36,\n    is_same_domain, parse_etags, parse_http_date, quote_etag,\n    url_has_allowed_host_and_scheme, urlencode, urlquote, urlquote_plus,\n    urlsafe_base64_decode, urlsafe_base64_encode, urlunquote, urlunquote_plus,\n)\n\nclass HttpUtilsTest(unittest.TestCase):\n\n    def test_urlquote(self):\n        self.assertEqual(urlquote('https://example.com/path'), 'https%3A//example.com/path')\n\n    def test_urlquote_plus(self):\n        self.assertEqual(urlquote_plus('https://example.com/path'), 'https%3A%2F%2Fexample.com%2Fpath')\n\n    def test_urlunquote(self):\n        self.assertEqual(urlunquote('https%3A//example.com/path'), 'https://example.com/path')\n\n    def test_urlunquote_plus(self):\n        self.assertEqual(urlunquote_plus('https%3A%2F%2Fexample.com%2Fpath'), 'https://example.com/path')\n\n    def test_urlencode(self):\n        self.assertEqual(urlencode({'key': 'value'}), 'key=value')\n\n    def test_http_date(self):\n        self.assertIsNotNone(http_date())\n\n    def test_parse_http_date(self):\n        self.assertEqual(parse_http_date('Wed, 21 Oct 2015 07:28:00 GMT'), 1445412480)\n\n    def test_base36_to_int(self):\n        self.assertEqual(base36_to_int('123'), 468)\n\n    def test_int_to_base36(self):\n        self.assertEqual(int_to_base36(468), '123')\n\n    def test_urlsafe_base64_encode(self):\n        self.assertEqual(urlsafe_base64_encode(b'hello'), 'aGVsbG8')\n\n    def test_urlsafe_base64_decode(self):\n        self.assertEqual(urlsafe_base64_decode('aGVsbG8'), b'hello')\n\n    def test_parse_etags(self):\n        self.assertEqual(parse_etags('\"abc\", \"def\", W/\"ghi\"'), ['\"abc\"', '\"def\"', 'W/\"ghi\"'])\n\n    def test_quote_etag(self):\n        self.assertEqual(quote_etag('abc'), '\"abc\"')\n\n    def test_is_same_domain(self):\n        self.assertTrue(is_same_domain('example.com', 'example.com'))\n        self.assertTrue(is_same_domain('sub.example.com', '.example.com'))\n\n    def test_url_has_allowed_host_and_scheme(self):\n        self.assertTrue(url_has_allowed_host_and_scheme('https://example.com', ['example.com'], require_https=True))\n\n    def test_escape_leading_slashes(self):\n        self.assertEqual(escape_leading_slashes('//example.com'), '/%2Fexample.com')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_736": ["\nimport unittest\nimport numpy as np\nfrom sklearn.mixture.gaussian_mixture import GaussianMixture, _estimate_log_gaussian_prob\n\nclass TestGaussianMixture(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\n        self.gmm = GaussianMixture(n_components=2, random_state=0)\n        self.gmm.fit(self.X)\n\n    def test_gaussian_mixture_fit(self):\n        self.assertTrue(hasattr(self.gmm, 'weights_'))\n        self.assertTrue(hasattr(self.gmm, 'means_'))\n        self.assertTrue(hasattr(self.gmm, 'covariances_'))\n        self.assertTrue(hasattr(self.gmm, 'precisions_cholesky_'))\n\n    def test_gaussian_mixture_predict(self):\n        labels = self.gmm.predict(self.X)\n        self.assertEqual(len(labels), len(self.X))\n\n    def test_gaussian_mixture_score_samples(self):\n        log_prob = self.gmm.score_samples(self.X)\n        self.assertEqual(len(log_prob), len(self.X))\n\n    def test_estimate_log_gaussian_prob(self):\n        means = np.array([[0, 0], [1, 1]])\n        precisions_chol = np.array([[[1, 0], [0, 1]], [[2, 0], [0, 2]]])\n        covariance_type = 'full'\n        log_prob = _estimate_log_gaussian_prob(self.X, means, precisions_chol, covariance_type)\n        self.assertEqual(log_prob.shape, (len(self.X), len(means)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_930": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.domains.cpp import CPPDomain, DefinitionParser, ASTDeclaration, Symbol\nfrom sphinx.addnodes import desc_signature\n\nclass TestCPPDomain(unittest.TestCase):\n    def setUp(self):\n        self.env = BuildEnvironment(None, None, None)\n        self.domain = CPPDomain(self.env)\n\n    def test_parse_definition(self):\n        parser = DefinitionParser(\"int foo(int x)\", config=self.env.config)\n        ast = self.domain.parse_definition(parser)\n        self.assertIsInstance(ast, ASTDeclaration)\n\n    @patch('sphinx.domains.cpp.logger.warning')\n    def test_parse_definition_error(self, mock_warning):\n        parser = DefinitionParser(\"int foo(int x\", config=self.env.config)\n        with self.assertRaises(DefinitionError):\n            self.domain.parse_definition(parser)\n        mock_warning.assert_called()\n\n    @patch('sphinx.domains.cpp.logger.warning')\n    def test_handle_signature_error(self, mock_warning):\n        signode = desc_signature()\n        with self.assertRaises(ValueError):\n            self.domain.handle_signature(\"int foo(int x\", signode)\n        mock_warning.assert_called()\n\n    @patch('sphinx.domains.cpp.Symbol')\n    def test_handle_signature(self, mock_symbol):\n        mock_symbol_instance = mock_symbol.return_value\n        mock_symbol_instance.get_lookup_key.return_value = \"lookup_key\"\n        signode = desc_signature()\n        ast = self.domain.handle_signature(\"int foo(int x)\", signode)\n        self.assertIsInstance(ast, ASTDeclaration)\n\n    @patch('sphinx.domains.cpp.Symbol')\n    def test_before_content(self, mock_symbol):\n        mock_symbol_instance = mock_symbol.return_value\n        mock_symbol_instance.get_lookup_key.return_value = \"lookup_key\"\n        self.domain.env.temp_data['cpp:parent_symbol'] = mock_symbol_instance\n        self.domain.before_content()\n        self.assertEqual(self.domain.env.ref_context['cpp:parent_key'], \"lookup_key\")\n\n    @patch('sphinx.domains.cpp.Symbol')\n    def test_after_content(self, mock_symbol):\n        mock_symbol_instance = mock_symbol.return_value\n        self.domain.oldParentSymbol = mock_symbol_instance\n        self.domain.oldParentKey = \"old_key\"\n        self.domain.after_content()\n        self.assertEqual(self.domain.env.temp_data['cpp:parent_symbol'], mock_symbol_instance)\n        self.assertEqual(self.domain.env.ref_context['cpp:parent_key'], \"old_key\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_98": ["\nfrom datetime import datetime, timedelta, timezone as datetime_timezone\nfrom unittest import TestCase\nfrom unittest.mock import Mock, patch\n\nfrom django.conf import settings\nfrom django.db.models import DateTimeField, DateField, TimeField\nfrom django.db.models.functions import (\n    ExtractYear, ExtractMonth, ExtractDay, ExtractWeekDay, ExtractWeek, ExtractIsoYear, ExtractQuarter,\n    ExtractHour, ExtractMinute, ExtractSecond, TruncYear, TruncQuarter, TruncMonth, TruncWeek, TruncDay,\n    TruncDate, TruncTime, TruncHour, TruncMinute, TruncSecond,\n)\nfrom django.utils import timezone\n\nclass TestDateTimeFunctions(TestCase):\n    def setUp(self):\n        self.test_datetime = datetime(2022, 1, 1, 12, 30, 45)\n        self.test_date = self.test_datetime.date()\n        self.test_time = self.test_datetime.time()\n        self.mock_compiler = Mock()\n        self.mock_connection = Mock()\n\n    def test_extract_year(self):\n        extract_year = ExtractYear(self.test_datetime)\n        self.assertEqual(extract_year.lookup_name, 'year')\n        extract_year.as_sql(self.mock_compiler, self.mock_connection)\n        self.mock_connection.ops.datetime_extract_sql.assert_called_once_with('year', self.mock_compiler.compile.return_value[0], None)\n\n    def test_extract_month(self):\n        extract_month = ExtractMonth(self.test_datetime)\n        self.assertEqual(extract_month.lookup_name, 'month')\n        extract_month.as_sql(self.mock_compiler, self.mock_connection)\n        self.mock_connection.ops.datetime_extract_sql.assert_called_once_with('month', self.mock_compiler.compile.return_value[0], None)\n\n    def test_extract_day(self):\n        extract_day = ExtractDay(self.test_datetime)\n        self.assertEqual(extract_day.lookup_name, 'day')\n        extract_day.as_sql(self.mock_compiler, self.mock_connection)\n        self.mock_connection.ops.datetime_extract_sql.assert_called_once_with('day', self.mock_compiler.compile.return_value[0], None)\n\n    # ... add more tests for other extract functions\n\n    def test_trunc_year(self):\n        trunc_year = TruncYear(self.test_datetime)\n        self.assertEqual(trunc_year.kind, 'year')\n        trunc_year.as_sql(self.mock_compiler, self.mock_connection)\n        self.mock_connection.ops.datetime_trunc_sql.assert_called_once_with('year', self.mock_compiler.compile.return_value[0], None)\n\n    def test_trunc_month(self):\n        trunc_month = TruncMonth(self.test_datetime)\n        self.assertEqual(trunc_month.kind, 'month')\n        trunc_month.as_sql(self.mock_compiler, self.mock_connection)\n        self.mock_connection.ops.datetime_trunc_sql.assert_called_once_with('month', self.mock_compiler.compile.return_value[0], None)\n\n    def test_trunc_day(self):\n        trunc_day = TruncDay(self.test_datetime)\n        self.assertEqual(trunc_day.kind, 'day')\n        trunc_day.as_sql(self.mock_compiler, self.mock_connection)\n        self.mock_connection.ops.datetime_trunc_sql.assert_called_once_with('day', self.mock_compiler.compile.return_value[0], None)\n\n    # ... add more tests for other trunc functions\n"], "sample_378": ["\nfrom django.test import TestCase\nfrom django.db.models import QuerySet, F\nfrom django.db.models.query import EmptyQuerySet, RawQuerySet\nfrom unittest.mock import patch, MagicMock\n\nclass TestQuerySetMethods(TestCase):\n    def setUp(self):\n        # Set up any necessary objects or data here\n        pass\n\n    def test_filter(self):\n        qs = QuerySet()\n        filtered_qs = qs.filter(name='test')\n        self.assertIsInstance(filtered_qs, QuerySet)\n        self.assertEqual(filtered_qs.query.where, {\"name\": \"test\"})\n\n    def test_exclude(self):\n        qs = QuerySet()\n        excluded_qs = qs.exclude(name='test')\n        self.assertIsInstance(excluded_qs, QuerySet)\n        self.assertEqual(excluded_qs.query.where, {\"name__ne\": \"test\"})\n\n    def test_annotate(self):\n        qs = QuerySet()\n        annotated_qs = qs.annotate(num_items=F('items'))\n        self.assertIsInstance(annotated_qs, QuerySet)\n        self.assertIn('num_items', annotated_qs.query.annotations)\n\n    def test_values(self):\n        qs = QuerySet()\n        values_qs = qs.values('name', 'age')\n        self.assertIsInstance(values_qs, QuerySet)\n        self.assertEqual(values_qs._fields, ('name', 'age'))\n\n    def test_union(self):\n        qs1 = QuerySet()\n        qs2 = QuerySet()\n        union_qs = qs1.union(qs2)\n        self.assertIsInstance(union_qs, QuerySet)\n        self.assertEqual(union_qs.query.combinator, 'union')\n\n    def test_raw(self):\n        qs = QuerySet()\n        raw_qs = qs.raw('SELECT * FROM table')\n        self.assertIsInstance(raw_qs, RawQuerySet)\n        self.assertEqual(raw_qs.raw_query, 'SELECT * FROM table')\n\n    def test_empty(self):\n        qs = QuerySet()\n        empty_qs = qs.none()\n        self.assertIsInstance(empty_qs, EmptyQuerySet)\n\n    def test_db(self):\n        qs = QuerySet()\n        with patch('django.db.models.query.router.db_for_read', return_value='default'):\n            self.assertEqual(qs.db, 'default')\n\n    def test_len(self):\n        qs = QuerySet()\n        qs.query.set_empty()\n        self.assertEqual(len(qs), 0)\n\n    def test_bool(self):\n        qs = QuerySet()\n        qs.query.set_empty()\n        self.assertFalse(bool(qs))\n\n    def test_getitem(self):\n        qs = QuerySet()\n        qs._result_cache = ['obj1', 'obj2', 'obj3']\n        self.assertEqual(qs[1], 'obj2')\n\n    def test_iterator(self):\n        qs = QuerySet()\n        qs._result_cache = ['obj1', 'obj2', 'obj3']\n        self.assertEqual(list(qs.iterator()), ['obj1', 'obj2', 'obj3'])\n\n    def test_count(self):\n        qs = QuerySet()\n        qs.query.set_empty()\n        self.assertEqual(qs.count(), 0)\n\n    def test_exists(self):\n        qs = QuerySet()\n        qs.query.set_empty()\n        self.assertFalse(qs.exists())\n\n    def test_prefetch_related(self):\n        qs = QuerySet()\n        prefetched_qs = qs.prefetch_related('related_field')\n        self.assertIsInstance(prefetched_qs, QuerySet)\n        self.assertEqual(prefetched_qs._prefetch_related_lookups, ('related_field',))\n\n    def test_select_related(self):\n        qs = QuerySet()\n        selected_qs = qs.select_related('related_field')\n        self.assertIsInstance(selected_qs, QuerySet)\n        self.assertEqual(selected_qs.query.select_related, True)\n\n    def test_delete(self):\n        qs = QuerySet()\n        with self.assertRaises(NotSupportedError):\n            qs.delete()\n\n    def test_update(self):\n        qs = QuerySet()\n        with self.assertRaises(NotSupportedError):\n            qs.update(name='new_name')\n\n    def test_get(self):\n        qs = QuerySet()\n        with self.assertRaises(NotImplementedError):\n            qs.get(pk=1)\n\n    def test_create(self):\n        qs = QuerySet()\n        with self.assertRaises(NotImplementedError):\n            qs.create(name='new_obj')\n\n    def test_bulk_create(self):\n        qs = QuerySet()\n        with self.assertRaises(NotImplementedError):\n            qs.bulk_create([MagicMock()])\n\n    def test_bulk_update(self):\n        qs = QuerySet()\n        with self.assertRaises(NotImplementedError):\n            qs.bulk_update([MagicMock()], fields=['name'])\n\n    def test_get_or_create(self):\n        qs = QuerySet()\n        with self.assertRaises(NotImplementedError):\n            qs.get_or_create(name='new_obj')\n\n    def test_update_or_create(self):\n        qs = QuerySet()\n        with self.assertRaises(NotImplementedError):\n            qs.update_or_create(name='new_obj', defaults={'age': 30})\n\n    def test_in_bulk(self):\n        qs = QuerySet()\n        with self.assertRaises(NotImplementedError):\n            qs.in_bulk([1, 2, 3])\n\n    def test_values_list(self):\n        qs = QuerySet()\n        values_list_qs = qs.values_list('name', 'age')\n        self.assertIsInstance(values_list_qs, QuerySet)\n        self.assertEqual(values_list_qs._fields, ('name', 'age'))\n\n    def test_dates(self):\n        qs = QuerySet()\n        dates_qs = qs.dates('date_field', 'year')\n        self.assertIsInstance(dates_qs, QuerySet)\n        self.assertEqual(dates_qs.query.annotations['datefield'].lookup_name, 'year')\n\n    def test_datetimes(self):\n        qs = QuerySet()\n        datetimes_qs = qs.datetimes('datetime_field', 'hour')\n        self.assertIsInstance(datetimes_qs, QuerySet)\n        self.assertEqual(datetimes_qs.query.annotations['datetimefield'].lookup_name, 'hour')\n\n    def test_order_by(self):\n        qs = QuerySet()\n        ordered_qs = qs.order_by('-name')\n        self.assertIsInstance(ordered_qs, QuerySet)\n        self.assertEqual(ordered_qs.query.order_by, ['-name'])\n\n    def test_distinct(self):\n        qs = QuerySet()\n        distinct_qs = qs.distinct('name')\n        self.assertIsInstance(distinct_qs, QuerySet)\n        self.assertEqual(distinct_qs.query.distinct_fields, ['name'])\n\n    def test_extra(self):\n        qs = QuerySet()\n        extra_qs = qs.extra(select={'custom_field': 'SELECT * FROM other_table'})\n        self.assertIsInstance(extra_qs, QuerySet)\n        self.assertEqual(extra_qs.query.extra['select'], {'custom_field': 'SELECT * FROM other_table'})\n\n    def test_reverse(self):\n        qs = QuerySet()\n        reversed_qs = qs.reverse()\n        self.assertIsInstance(reversed_qs, QuerySet)\n        self.assertEqual(reversed_qs.query.standard_ordering, False)\n\n    def test_defer(self):\n        qs = QuerySet()\n        deferred_qs = qs.defer('name')\n        self.assertIsInstance(deferred_qs, QuerySet)\n        self.assertEqual(deferred_qs.query.deferred_loading, ['name'])\n\n    def test_only(self):\n        qs = QuerySet()\n        only_qs = qs.only('name')\n        self.assertIsInstance(only_qs, QuerySet)\n        self.assertEqual(only_qs.query.immediate_loading, ['name'])\n\n    def test_using(self):\n        qs = QuerySet()\n        using_qs = qs.using('other_db')\n        self.assertIsInstance(using_qs, QuerySet)\n        self.assertEqual(using_qs.db, 'other_db')\n\n    def test_intersection(self):\n        qs1 = QuerySet()\n        qs2 = QuerySet()\n        intersection_qs = qs1.intersection(qs2)\n        self.assertIsInstance(intersection_qs, QuerySet)\n        self.assertEqual(intersection_qs.query.combinator, 'intersection')\n\n    def test_difference(self):\n        qs1 = QuerySet()\n        qs2 = QuerySet()\n        difference_qs = qs1.difference(qs2)\n        self.assertIsInstance(difference_qs, QuerySet)\n        self.assertEqual(difference_qs.query.combinator, 'difference')\n\n    def test_alias(self):\n        qs = QuerySet()\n        aliased_qs = qs.alias(num_items=F('items'))\n        self.assertIsInstance(aliased_qs, QuerySet)\n        self.assertIn('num_items', aliased_qs.query.annotations)\n\n    def test_ordered(self):\n        qs = QuerySet()\n        qs.query.set_empty()\n        self.assertTrue(qs.ordered)\n\n    def test_complex_filter(self):\n        qs = QuerySet()\n        filtered_qs = qs.complex_filter(name='test')\n        self.assertIsInstance(filtered_qs, QuerySet)\n        self.assertEqual(filtered_qs.query.where, {\"name\": \"test\"})\n\n    def test_select_for_update(self):\n        qs = QuerySet()\n        for_update_qs = qs.select_for_update()\n        self.assertIsInstance(for_update_qs, QuerySet)\n        self.assertTrue(for_update_qs.query.select_for_update)\n\n    def test_all(self):\n        qs = QuerySet()\n        all_qs = qs.all()\n        self.assertIsInstance(all_qs, QuerySet)\n\n    def test_earliest(self):\n        qs = QuerySet()\n        with self.assertRaises(ValueError):\n            qs.earliest('date_field')\n\n    def test_latest(self):\n        qs = QuerySet()\n        with self.assertRaises(ValueError):\n            qs.latest('date_field')\n\n    def test_first(self):\n        qs = QuerySet()\n        with self.assertRaises(NotImplementedError):\n            qs.first()\n\n    def test_last(self):\n        qs = QuerySet()\n        with self.assertRaises(NotImplementedError):\n            qs.last()\n\n    def test_contains(self):\n        qs = QuerySet()\n        with self.assertRaises(TypeError):\n            qs.contains('obj')\n\n    def test_explain(self):\n        qs = QuerySet()\n        with self.assertRaises(NotImplementedError):\n            qs.explain()\n\n    def test_aggregate(self):\n        qs = QuerySet()\n        with self.assertRaises(NotImplementedError):\n            qs.aggregate(Sum('value'))\n\n    def test_invalid_field_name(self):\n        qs = QuerySet()\n        with self.assertRaises(TypeError):\n            qs.filter(invalid_field='test')\n"], "sample_128": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.db.models.sql.query import Query, JoinPromoter\n\nclass TestQuery(unittest.TestCase):\n    def setUp(self):\n        self.query = Query(MagicMock())\n\n    def test_init(self):\n        self.assertIsInstance(self.query, Query)\n\n    def test_clone(self):\n        clone = self.query.clone()\n        self.assertIsNot(self.query, clone)\n\n    def test_promote_joins(self):\n        self.query.alias_map = {'alias1': MagicMock(join_type=None), 'alias2': MagicMock(join_type='LOUTER')}\n        self.query.promote_joins(['alias1'])\n        self.assertEqual(self.query.alias_map['alias1'].join_type, 'LOUTER')\n\n    def test_demote_joins(self):\n        self.query.alias_map = {'alias1': MagicMock(join_type='LOUTER'), 'alias2': MagicMock(join_type='INNER')}\n        self.query.demote_joins(['alias1'])\n        self.assertEqual(self.query.alias_map['alias1'].join_type, 'INNER')\n\n    def test_join_promoter_add_votes(self):\n        join_promoter = JoinPromoter('AND', 2, False)\n        join_promoter.add_votes(['alias1', 'alias2', 'alias1'])\n        self.assertEqual(join_promoter.votes, {'alias1': 2, 'alias2': 1})\n\n    def test_join_promoter_update_join_types(self):\n        self.query.alias_map = {'alias1': MagicMock(join_type='INNER'), 'alias2': MagicMock(join_type='LOUTER')}\n        join_promoter = JoinPromoter('AND', 2, False)\n        join_promoter.add_votes(['alias1', 'alias2'])\n        join_promoter.update_join_types(self.query)\n        self.assertEqual(self.query.alias_map['alias1'].join_type, 'INNER')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_23": ["\nimport unittest\nimport numpy as np\nfrom astropy import units as u\nfrom astropy.coordinates import Angle, Latitude, Longitude\n\nclass TestAngles(unittest.TestCase):\n    def setUp(self):\n        self.angle_values = ['10.2345d', '1:2:30.43 degrees', '1 2 0 hours', np.arange(1, 8), '1\u00b02\u20323\u2033', '1d2m3.4s', '1d2m3.4sS', '-1h2m3s', '-1h2m3sE', '-1h2.5m', '-1h2.5mW', '-1:2.5', 10.2345 * u.deg, Angle(10.2345 * u.deg)]\n\n    def test_angle_initialization(self):\n        for value in self.angle_values:\n            angle = Angle(value)\n            self.assertIsInstance(angle, Angle)\n\n    def test_latitude_initialization(self):\n        for value in self.angle_values:\n            if isinstance(value, str) and ('S' in value or 'N' in value):\n                with self.assertRaises(ValueError):\n                    latitude = Latitude(value)\n            else:\n                latitude = Latitude(value)\n                self.assertIsInstance(latitude, Latitude)\n\n    def test_longitude_initialization(self):\n        for value in self.angle_values:\n            longitude = Longitude(value)\n            self.assertIsInstance(longitude, Longitude)\n\n    def test_angle_to_string(self):\n        angle = Angle(10.2345, unit=u.deg)\n        self.assertEqual(angle.to_string(), '10.2345 deg')\n\n    def test_latitude_bounds(self):\n        with self.assertRaises(ValueError):\n            latitude = Latitude(91, unit=u.deg)\n        with self.assertRaises(ValueError):\n            latitude = Latitude(-91, unit=u.deg)\n\n    def test_longitude_wrap_angle(self):\n        longitude = Longitude(370, unit=u.deg)\n        self.assertEqual(longitude, Longitude(10, unit=u.deg))\n        longitude.wrap_angle = 180 * u.deg\n        self.assertEqual(longitude, Longitude(-170, unit=u.deg))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1135": ["\nimport unittest\nfrom sympy import symbols, S, Mul, Add, sympify\nfrom sympy.core.mul import _unevaluated_Mul, _keep_coeff, expand_2arg\n\nclass TestMul(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_unevaluated_mul(self):\n        result = _unevaluated_Mul(S(3.0), self.x, S(2))\n        self.assertEqual(result.args[0], 6.00000000000000)\n        self.assertEqual(result.args[1], self.x)\n\n    def test_keep_coeff(self):\n        result = _keep_coeff(S.Half, self.x + 2)\n        self.assertEqual(result, (self.x + 2)/2)\n\n    def test_expand_2arg(self):\n        e = Mul(3, self.x + 2)\n        result = expand_2arg(e)\n        self.assertEqual(result, 3*self.x + 6)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_556": ["\nimport unittest\nimport pickle\nimport numpy as np\nfrom matplotlib.figure import Figure\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg\n\nclass TestFigure(unittest.TestCase):\n    def setUp(self):\n        self.fig = Figure()\n        self.canvas = FigureCanvasAgg(self.fig)\n\n    def test_figimage(self):\n        X = np.random.rand(10, 10)\n        img = self.fig.figimage(X)\n        self.assertIsNotNone(img)\n\n    def test_set_size_inches(self):\n        self.fig.set_size_inches(5, 3)\n        self.assertEqual(self.fig.get_size_inches(), (5, 3))\n\n    def test_get_dpi(self):\n        self.assertEqual(self.fig.get_dpi(), 100)\n\n    def test_set_dpi(self):\n        self.fig.set_dpi(200)\n        self.assertEqual(self.fig.get_dpi(), 200)\n\n    def test_set_figwidth(self):\n        self.fig.set_figwidth(7)\n        self.assertEqual(self.fig.get_figwidth(), 7)\n\n    def test_set_figheight(self):\n        self.fig.set_figheight(4)\n        self.assertEqual(self.fig.get_figheight(), 4)\n\n    def test_clear(self):\n        self.fig.add_subplot(111)\n        self.fig.clear()\n        self.assertEqual(len(self.fig.axes), 0)\n\n    def test_draw(self):\n        self.fig.draw(self.canvas.get_renderer())\n        # Add assertions to verify the drawing process\n\n    def test_savefig(self):\n        self.fig.savefig('test.png')\n        # Add assertions to verify the saved figure\n\n    def test_add_axobserver(self):\n        def observer(fig):\n            pass\n        self.fig.add_axobserver(observer)\n        # Add assertions to verify the axes observer\n\n    def test_pickle(self):\n        pickled_fig = pickle.dumps(self.fig)\n        unpickled_fig = pickle.loads(pickled_fig)\n        self.assertEqual(unpickled_fig.get_size_inches(), self.fig.get_size_inches())\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_371": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.http import Http404\nfrom django.views.debug import (\n    CallableSettingWrapper,\n    ExceptionCycleWarning,\n    ExceptionReporter,\n    SafeExceptionReporterFilter,\n    default_urlconf,\n    get_default_exception_reporter_filter,\n    technical_404_response,\n    technical_500_response,\n)\nfrom django.test import RequestFactory\n\nclass TestExceptionReporter(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_technical_500_response(self):\n        request = self.factory.get('/')\n        exc_type = Exception\n        exc_value = Exception('Test exception')\n        tb = Mock()\n        response = technical_500_response(request, exc_type, exc_value, tb)\n        self.assertEqual(response.status_code, 500)\n\n    def test_technical_404_response(self):\n        request = self.factory.get('/nonexistent')\n        exception = Http404('Test 404 exception')\n        response = technical_404_response(request, exception)\n        self.assertEqual(response.status_code, 404)\n\n    def test_default_urlconf(self):\n        request = self.factory.get('/')\n        response = default_urlconf(request)\n        self.assertEqual(response.status_code, 200)\n\n    def test_get_default_exception_reporter_filter(self):\n        with patch('django.views.debug.import_string') as mock_import_string:\n            mock_import_string.return_value = Mock\n            filter_instance = get_default_exception_reporter_filter()\n            self.assertIsInstance(filter_instance, Mock)\n\n    def test_callable_setting_wrapper(self):\n        def callable_setting():\n            pass\n\n        wrapper = CallableSettingWrapper(callable_setting)\n        self.assertEqual(repr(wrapper), repr(callable_setting))\n\n    def test_safe_exception_reporter_filter(self):\n        filter = SafeExceptionReporterFilter()\n        request = Mock()\n        request.sensitive_post_parameters = []\n        request.POST = {'test': 'value'}\n        request.META = {'test': 'value'}\n        self.assertEqual(filter.get_post_parameters(request), request.POST)\n\n    def test_exception_cycle_warning(self):\n        with self.assertWarns(ExceptionCycleWarning):\n            warning = ExceptionCycleWarning('Test warning')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_384": ["\nfrom django.test import TestCase\nfrom django.db.models import QuerySet, RawQuerySet, EmptyQuerySet\nfrom django.db import models\n\nclass TestQuerySet(TestCase):\n    def setUp(self):\n        self.qs = QuerySet(model=models.Model)\n\n    def test_iterator(self):\n        self.qs._result_cache = ['result1', 'result2']\n        self.assertEqual(list(self.qs.iterator()), ['result1', 'result2'])\n\n    def test_aggregate(self):\n        self.qs.query.add_annotation(models.Sum('field'), 'sum', is_summary=True)\n        self.assertEqual(self.qs.aggregate(), {'sum': 0})\n\n    def test_count(self):\n        self.assertEqual(self.qs.count(), 0)\n\n    def test_create(self):\n        obj = self.qs.create(field='value')\n        self.assertEqual(obj.field, 'value')\n\n    def test_get(self):\n        obj = self.qs.create(field='value')\n        self.assertEqual(self.qs.get(field='value'), obj)\n\n    def test_update(self):\n        self.qs.create(field='value1')\n        self.qs.update(field='value2')\n        self.assertEqual(self.qs.get().field, 'value2')\n\n    def test_exists(self):\n        self.assertFalse(self.qs.exists())\n        self.qs.create(field='value')\n        self.assertTrue(self.qs.exists())\n\n    def test_contains(self):\n        obj = self.qs.create(field='value')\n        self.assertTrue(self.qs.contains(obj))\n        obj2 = models.Model(field='value2')\n        self.assertFalse(self.qs.contains(obj2))\n\n    def test_raw(self):\n        raw_qs = self.qs.raw('SELECT * FROM table')\n        self.assertIsInstance(raw_qs, RawQuerySet)\n\n    def test_values(self):\n        values_qs = self.qs.values('field')\n        self.assertIsInstance(values_qs, QuerySet)\n        self.assertEqual(values_qs.query.values_select, ('field',))\n\n    def test_order_by(self):\n        ordered_qs = self.qs.order_by('field')\n        self.assertEqual(ordered_qs.query.order_by, ['field'])\n\n    def test_distinct(self):\n        distinct_qs = self.qs.distinct('field')\n        self.assertEqual(distinct_qs.query.distinct_fields, ('field',))\n\n    def test_filter(self):\n        filtered_qs = self.qs.filter(field='value')\n        self.assertEqual(filtered_qs.query.where['field'], 'value')\n\n    def test_exclude(self):\n        excluded_qs = self.qs.exclude(field='value')\n        self.assertEqual(excluded_qs.query.where['field'], 'value')\n\n    def test_empty(self):\n        empty_qs = self.qs.none()\n        self.assertIsInstance(empty_qs, EmptyQuerySet)\n        self.assertTrue(empty_qs.query.is_empty())\n"], "sample_203": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.core import validators\nfrom django.core.exceptions import ValidationError\n\nclass TestValidators(unittest.TestCase):\n\n    def test_regex_validator(self):\n        validator = validators.RegexValidator(r'^\\d+$')\n        validator('123')  # should not raise\n        self.assertRaises(ValidationError, validator, 'abc')\n\n    def test_url_validator(self):\n        validator = validators.URLValidator()\n        validator('http://www.example.com')  # should not raise\n        self.assertRaises(ValidationError, validator, 'not a url')\n\n    def test_integer_validator(self):\n        validators.validate_integer('123')  # should not raise\n        self.assertRaises(ValidationError, validators.validate_integer, 'abc')\n\n    def test_email_validator(self):\n        validator = validators.EmailValidator()\n        validator('test@example.com')  # should not raise\n        self.assertRaises(ValidationError, validator, 'not an email')\n\n    def test_slug_validator(self):\n        validators.validate_slug('a-valid-slug')  # should not raise\n        self.assertRaises(ValidationError, validators.validate_slug, 'invalid slug')\n\n    def test_unicode_slug_validator(self):\n        validators.validate_unicode_slug('a-valid-slug')  # should not raise\n        self.assertRaises(ValidationError, validators.validate_unicode_slug, 'invalid slug')\n\n    def test_ipv4_address_validator(self):\n        validators.validate_ipv4_address('192.168.1.1')  # should not raise\n        self.assertRaises(ValidationError, validators.validate_ipv4_address, 'not an ipv4')\n\n    def test_ipv6_address_validator(self):\n        validators.validate_ipv6_address('2001:0db8:85a3:0000:0000:8a2e:0370:7334')  # should not raise\n        self.assertRaises(ValidationError, validators.validate_ipv6_address, 'not an ipv6')\n\n    def test_ipv46_address_validator(self):\n        validators.validate_ipv46_address('192.168.1.1')  # should not raise\n        validators.validate_ipv46_address('2001:0db8:85a3:0000:0000:8a2e:0370:7334')  # should not raise\n        self.assertRaises(ValidationError, validators.validate_ipv46_address, 'not an ipv4 or ipv6')\n\n    def test_max_value_validator(self):\n        validator = validators.MaxValueValidator(5)\n        validator(4)  # should not raise\n        self.assertRaises(ValidationError, validator, 6)\n\n    def test_min_value_validator(self):\n        validator = validators.MinValueValidator(5)\n        validator(6)  # should not raise\n        self.assertRaises(ValidationError, validator, 4)\n\n    def test_min_length_validator(self):\n        validator = validators.MinLengthValidator(5)\n        validator('12345')  # should not raise\n        self.assertRaises(ValidationError, validator, '1234')\n\n    def test_max_length_validator(self):\n        validator = validators.MaxLengthValidator(5)\n        validator('12345')  # should not raise\n        self.assertRaises(ValidationError, validator, '123456')\n\n    # Add more tests as needed...\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_918": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom docutils import nodes\nfrom sphinx.testing.util import SphinxTestCase\nfrom sphinx.domains.python import (\n    py_sig_re, _parse_annotation, _pseudo_parse_arglist, PythonDomain, PythonModuleIndex,\n    PyXRefRole, PyXRefMixin, PyField, PyGroupedField, PyTypedField, PyObject, PyModulelevel,\n    PyFunction, PyDecoratorFunction, PyVariable, PyClasslike, PyClassmember, PyMethod,\n    PyClassMethod, PyStaticMethod, PyDecoratorMethod, PyAttribute, PyDecoratorMixin,\n    PyModule, PyCurrentModule, filter_meta_fields, builtin_resolver, setup,\n)\n\nclass TestPythonDomain(SphinxTestCase):\n\n    def setUp(self):\n        self.app = Mock()\n        self.env = Mock()\n        self.env.get_domain.return_value = PythonDomain(self.env)\n\n    def test_py_sig_re(self):\n        match = py_sig_re.match('function_name(arg1, arg2) -> return_type')\n        self.assertEqual(match.groups(), ('', 'function_name', 'arg1, arg2', 'return_type'))\n\n    def test_parse_annotation(self):\n        annotation = 'List[int]'\n        result = _parse_annotation(annotation)\n        self.assertIsInstance(result, list)\n        self.assertIsInstance(result[0], nodes.Text)\n\n    # Add more test functions for other functions and classes in python.py\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_368": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db import models\nfrom django.db.migrations.operations.models import (\n    CreateModel, DeleteModel, RenameModel, AlterModelTable, AlterUniqueTogether,\n    AlterIndexTogether, AlterOrderWithRespectTo, AlterModelOptions, AlterModelManagers,\n    AddIndex, RemoveIndex, AddConstraint, RemoveConstraint,\n)\n\nclass TestModelOperations(unittest.TestCase):\n    def setUp(self):\n        self.app_label = 'test_app'\n        self.model_name = 'TestModel'\n        self.options = {'managed': True, 'verbose_name': 'Test Model'}\n        self.bases = (models.Model,)\n        self.fields = [('id', models.AutoField(primary_key=True)), ('name', models.CharField(max_length=100))]\n\n    def test_create_model(self):\n        create_operation = CreateModel(self.model_name, self.fields, self.options, self.bases)\n        self.assertEqual(create_operation.name, self.model_name)\n        self.assertEqual(create_operation.fields, self.fields)\n        self.assertEqual(create_operation.options, self.options)\n        self.assertEqual(create_operation.bases, self.bases)\n\n    def test_delete_model(self):\n        delete_operation = DeleteModel(self.model_name)\n        self.assertEqual(delete_operation.name, self.model_name)\n\n    def test_rename_model(self):\n        new_model_name = 'NewModel'\n        rename_operation = RenameModel(self.model_name, new_model_name)\n        self.assertEqual(rename_operation.old_name, self.model_name)\n        self.assertEqual(rename_operation.new_name, new_model_name)\n\n    def test_alter_model_table(self):\n        new_table_name = 'new_table'\n        alter_table_operation = AlterModelTable(self.model_name, new_table_name)\n        self.assertEqual(alter_table_operation.name, self.model_name)\n        self.assertEqual(alter_table_operation.table, new_table_name)\n\n    def test_alter_unique_together(self):\n        unique_together = {('field1', 'field2')}\n        alter_unique_together_operation = AlterUniqueTogether(self.model_name, unique_together)\n        self.assertEqual(alter_unique_together_operation.name, self.model_name)\n        self.assertEqual(alter_unique_together_operation.unique_together, unique_together)\n\n    # Add more test cases for other operations similarly\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_976": ["\nimport unittest\nfrom sympy import symbols, sqrt, sin, cos, Piecewise, Matrix, MatrixSymbol, IndexedBase, Idx, Eq, Rational\nfrom sympy.printing.ccode import CCodePrinter, ccode\n\nclass TestCCodePrinter(unittest.TestCase):\n    def setUp(self):\n        self.printer = CCodePrinter()\n        self.x, self.y = symbols('x y')\n\n    def test_sqrt(self):\n        result = self.printer._print_Pow(sqrt(self.x))\n        self.assertEqual(result, 'sqrt(x)')\n\n    def test_sin(self):\n        result = self.printer._print_Function(sin(self.x))\n        self.assertEqual(result, 'sin(x)')\n\n    def test_cos(self):\n        result = self.printer._print_Function(cos(self.x))\n        self.assertEqual(result, 'cos(x)')\n\n    def test_rational(self):\n        result = self.printer._print_Rational(Rational(1, 2))\n        self.assertEqual(result, '1.0L/2.0L')\n\n    def test_piecewise(self):\n        expr = Piecewise((self.x + 1, self.x > 0), (self.x, True))\n        result = self.printer._print_Piecewise(expr)\n        expected = 'if (x > 0) {\\n    x + 1;\\n} else {\\n    x;\\n}'\n        self.assertEqual(result, expected)\n\n    def test_matrix(self):\n        mat = Matrix([self.x**2, sin(self.x), cos(self.x)])\n        A = MatrixSymbol('A', 3, 1)\n        result = self.printer.doprint(mat, A)\n        expected = 'A[0] = pow(x, 2);\\nA[1] = sin(x);\\nA[2] = cos(x);'\n        self.assertEqual(result, expected)\n\n    def test_indexed(self):\n        y = IndexedBase('y', shape=(5,))\n        t = IndexedBase('t', shape=(5,))\n        Dy = IndexedBase('Dy', shape=(4,))\n        i = Idx('i', 4)\n        e = Eq(Dy[i], (y[i+1]-y[i])/(t[i+1]-t[i]))\n        result = self.printer._print_Indexed(e.rhs)\n        expected = '(y[i + 1] - y[i])/(t[i + 1] - t[i])'\n        self.assertEqual(result, expected)\n\n    def test_ccode(self):\n        result = ccode(sin(self.x))\n        self.assertEqual(result, 'sin(x);')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_388": ["\nfrom django.test import TestCase, RequestFactory\nfrom django.contrib.auth import get_user_model, authenticate\nfrom django.contrib.auth.models import Permission\nfrom django.contrib.auth.backends import ModelBackend, RemoteUserBackend\nfrom django.contrib.auth.middleware import RemoteUserMiddleware\n\nUser = get_user_model()\n\nclass BaseBackendTestCase(TestCase):\n    def setUp(self):\n        self.backend = ModelBackend()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n\n    def test_authenticate_valid_credentials(self):\n        user = authenticate(username='testuser', password='testpassword')\n        self.assertEqual(user, self.user)\n\n    def test_authenticate_invalid_credentials(self):\n        user = authenticate(username='testuser', password='wrongpassword')\n        self.assertIsNone(user)\n\n    def test_get_user_existing(self):\n        user = self.backend.get_user(self.user.id)\n        self.assertEqual(user, self.user)\n\n    def test_get_user_not_existing(self):\n        user = self.backend.get_user(999)\n        self.assertIsNone(user)\n\nclass RemoteUserBackendTestCase(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.backend = RemoteUserBackend()\n        self.middleware = RemoteUserMiddleware()\n        self.user = User.objects.create_user(username='testuser')\n\n    def test_authenticate_existing_user(self):\n        request = self.factory.get('/')\n        request.META['REMOTE_USER'] = 'testuser'\n        self.middleware.process_request(request)\n        user = self.backend.authenticate(request, remote_user='testuser')\n        self.assertEqual(user, self.user)\n\n    def test_authenticate_unknown_user(self):\n        request = self.factory.get('/')\n        request.META['REMOTE_USER'] = 'unknownuser'\n        self.middleware.process_request(request)\n        user = self.backend.authenticate(request, remote_user='unknownuser')\n        self.assertIsNone(user)\n\n    def test_authenticate_create_unknown_user(self):\n        self.backend.create_unknown_user = True\n        request = self.factory.get('/')\n        request.META['REMOTE_USER'] = 'unknownuser'\n        self.middleware.process_request(request)\n        user = self.backend.authenticate(request, remote_user='unknownuser')\n        self.assertIsNotNone(user)\n"], "sample_817": ["\nimport unittest\nfrom sklearn.feature_selection import VarianceThreshold\nimport numpy as np\nfrom scipy.sparse import csr_matrix\n\nclass TestVarianceThreshold(unittest.TestCase):\n\n    def test_variance_threshold_with_default(self):\n        X = [[0, 2, 0, 3], [0, 1, 4, 3], [0, 1, 1, 3]]\n        selector = VarianceThreshold()\n        result = selector.fit_transform(X)\n        expected_result = [[2, 0], [1, 4], [1, 1]]\n        np.testing.assert_array_equal(result, expected_result)\n\n    def test_variance_threshold_with_specific_threshold(self):\n        X = [[0, 2, 0, 3], [0, 1, 4, 3], [0, 1, 1, 3]]\n        selector = VarianceThreshold(threshold=1.0)\n        result = selector.fit_transform(X)\n        expected_result = [[2, 4], [1, 4], [1, 1]]\n        np.testing.assert_array_equal(result, expected_result)\n\n    def test_variance_threshold_with_sparse_matrix(self):\n        X = csr_matrix([[0, 2, 0, 3], [0, 1, 4, 3], [0, 1, 1, 3]])\n        selector = VarianceThreshold()\n        result = selector.fit_transform(X)\n        expected_result = csr_matrix([[2, 0], [1, 4], [1, 1]])\n        np.testing.assert_array_equal(result.toarray(), expected_result.toarray())\n\n    def test_variance_threshold_with_no_feature_meeting_threshold(self):\n        X = [[1, 1, 1], [1, 1, 1]]\n        selector = VarianceThreshold()\n        with self.assertRaises(ValueError):\n            selector.fit(X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_259": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.models import QuerySet, RawQuerySet, Prefetch\nfrom django.db.models.query import EmptyQuerySet, prefetch_related_objects\n\nclass TestQuerySetMethods(unittest.TestCase):\n    def setUp(self):\n        self.qs = QuerySet()\n\n    def test_empty_queryset(self):\n        self.assertTrue(isinstance(self.qs.none(), EmptyQuerySet))\n        self.assertRaises(TypeError, EmptyQuerySet)\n\n    def test_raw_queryset(self):\n        raw_qs = RawQuerySet(raw_query='SELECT * FROM table', model=MagicMock())\n        self.assertEqual(raw_qs.db, 'default')\n\n    def test_prefetch_related_objects(self):\n        instances = [MagicMock()]\n        prefetch_related_objects(instances, 'related_object')\n\n    @patch('django.db.models.query.prefetch_one_level')\n    def test_prefetch_related_objects_with_lookups(self, mock_prefetch_one_level):\n        instances = [MagicMock()]\n        lookups = [Prefetch('related_object')]\n        prefetch_related_objects(instances, *lookups)\n        mock_prefetch_one_level.assert_called()\n\n    def test_queryset_methods(self):\n        self.qs.filter()\n        self.qs.exclude()\n        self.qs.annotate()\n        self.qs.order_by()\n        self.qs.distinct()\n        self.qs.extra()\n        self.qs.reverse()\n        self.qs.defer()\n        self.qs.only()\n\n    def test_queryset_properties(self):\n        self.assertIsInstance(self.qs.ordered, bool)\n        self.assertEqual(self.qs.db, 'default')\n\n    def test_queryset_private_methods(self):\n        self.qs._fetch_all()\n        self.qs._next_is_sticky()\n        self.qs._merge_sanity_check(QuerySet())\n        self.qs._merge_known_related_objects(QuerySet())\n        self.qs._add_hints(example='hint')\n        self.assertTrue(isinstance(self.qs._has_filters(), bool))\n\n    def test_queryset_chaining(self):\n        chained_qs = self.qs.filter().exclude().annotate().order_by()\n        self.assertIsInstance(chained_qs, QuerySet)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_169": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.core.serializers import xml_serializer\nfrom django.db import models\n\nclass TestXmlSerializer(unittest.TestCase):\n    class TestModel(models.Model):\n        test_field = models.CharField(max_length=200)\n\n    def setUp(self):\n        self.serializer = xml_serializer.Serializer()\n        self.deserializer = xml_serializer.Deserializer('')\n        self.obj = self.TestModel(test_field='test_value')\n\n    def test_indent(self):\n        self.serializer.options = {'indent': 4}\n        self.serializer.xml = MagicMock()\n        self.serializer.indent(1)\n        self.serializer.xml.ignorableWhitespace.assert_called_once_with('\\n    ')\n\n    def test_start_serialization(self):\n        self.serializer.stream = MagicMock()\n        self.serializer.start_serialization()\n        self.assertEqual(self.serializer.xml.startDocument.call_count, 1)\n        self.serializer.xml.startElement.assert_called_once_with(\"django-objects\", {\"version\": \"1.0\"})\n\n    def test_end_serialization(self):\n        self.serializer.xml = MagicMock()\n        self.serializer.indent = MagicMock()\n        self.serializer.end_serialization()\n        self.serializer.xml.endElement.assert_called_once_with(\"django-objects\")\n        self.serializer.xml.endDocument.assert_called_once()\n\n    def test_start_object(self):\n        self.serializer.xml = MagicMock()\n        self.serializer.indent = MagicMock()\n        self.serializer.start_object(self.obj)\n        self.serializer.xml.startElement.assert_called_once_with(\"object\", {'model': str(self.obj._meta), 'pk': str(self.obj.pk)})\n\n    # Add more tests for end_object, handle_field, handle_fk_field, handle_m2m_field, etc.\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_561": ["\nimport unittest\nimport numpy as np\nfrom matplotlib import markers, transforms\nfrom matplotlib.path import Path\nfrom matplotlib.text import TextPath\n\nclass TestMarkerStyle(unittest.TestCase):\n\n    def setUp(self):\n        self.marker_style = markers.MarkerStyle\n\n    def test_marker_style_init(self):\n        marker = self.marker_style('o')\n        self.assertEqual(marker.get_marker(), 'o')\n        self.assertEqual(marker.get_fillstyle(), 'full')\n        self.assertIsNone(marker.get_user_transform())\n\n        marker = self.marker_style('o', fillstyle='left')\n        self.assertEqual(marker.get_fillstyle(), 'left')\n\n        transform = transforms.Affine2D().translate(1, 2)\n        marker = self.marker_style('o', transform=transform)\n        self.assertEqual(marker.get_user_transform(), transform)\n\n    def test_marker_style_bool(self):\n        marker = self.marker_style('o')\n        self.assertTrue(marker)\n\n        marker = self.marker_style(None)\n        self.assertFalse(marker)\n\n    def test_marker_style_is_filled(self):\n        marker = self.marker_style('o')\n        self.assertTrue(marker.is_filled())\n\n        marker = self.marker_style('o', fillstyle='none')\n        self.assertFalse(marker.is_filled())\n\n    def test_marker_style_transformed(self):\n        marker = self.marker_style('o')\n        transformed_marker = marker.transformed(transforms.Affine2D().rotate_deg(45))\n        self.assertNotEqual(marker.get_transform(), transformed_marker.get_transform())\n\n    def test_marker_style_rotated(self):\n        marker = self.marker_style('o')\n        rotated_marker = marker.rotated(deg=45)\n        self.assertNotEqual(marker.get_transform(), rotated_marker.get_transform())\n\n    def test_marker_style_scaled(self):\n        marker = self.marker_style('o')\n        scaled_marker = marker.scaled(2)\n        self.assertNotEqual(marker.get_transform(), scaled_marker.get_transform())\n\n    def test_marker_style_custom_marker(self):\n        vertices = np.array([[0, 0], [1, 0], [0, 1]])\n        marker = self.marker_style(vertices)\n        self.assertEqual(len(marker.get_path().vertices), len(vertices))\n\n    def test_marker_style_mathtext_path(self):\n        marker = self.marker_style('$A$')\n        self.assertIsInstance(marker._path, TextPath)\n\n    def test_marker_style_circle(self):\n        marker = self.marker_style('o')\n        self.assertEqual(marker.get_path(), Path.unit_circle())\n\n    def test_marker_style_point(self):\n        marker = self.marker_style('.')\n        self.assertEqual(marker.get_path(), Path.unit_circle().scaled(0.5))\n\n    # Add more tests for other marker types and methods as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_374": ["\nfrom unittest.mock import MagicMock, patch\nfrom django.test import TestCase\nfrom django.db import connections, router\nfrom django.db.models import Prefetch, QuerySet\nfrom django.db.models.query import EmptyQuerySet, RawQuerySet, get_prefetcher, normalize_prefetch_lookups, prefetch_one_level, prefetch_related_objects\nfrom django.db.models.sql import Query, RawQuery\nfrom .models import Article, Author\n\nclass TestQuerySetMethods(TestCase):\n    def setUp(self):\n        self.queryset = QuerySet(model=Article)\n\n    def test__clone(self):\n        cloned_queryset = self.queryset._clone()\n        self.assertIsInstance(cloned_queryset, QuerySet)\n        self.assertIsNot(cloned_queryset, self.queryset)\n        self.assertEqual(cloned_queryset.model, self.queryset.model)\n        self.assertEqual(cloned_queryset.query, self.queryset.query)\n\n    def test__fetch_all(self):\n        self.queryset._result_cache = None\n        self.queryset._iterable_class = MagicMock()\n        self.queryset._iterable_class.return_value = ['result1', 'result2']\n        self.queryset._fetch_all()\n        self.assertEqual(self.queryset._result_cache, ['result1', 'result2'])\n\n    # Add more test methods for other functions in the QuerySet class\n\nclass TestEmptyQuerySet(TestCase):\n    def test_instantiation(self):\n        with self.assertRaises(TypeError):\n            EmptyQuerySet()\n\nclass TestRawQuerySet(TestCase):\n    def setUp(self):\n        self.raw_queryset = RawQuerySet(raw_query='SELECT * FROM articles', model=Article)\n\n    def test_iterator(self):\n        # Mock the necessary components for testing the iterator method\n        connection = connections['default']\n        compiler = connection.ops.compiler('SQLCompiler')(self.raw_queryset.query, connection, 'default')\n        query = iter([('title1', 1), ('title2', 2)])\n        with patch.object(compiler, 'apply_converters', return_value=query):\n            results = list(self.raw_queryset.iterator())\n            self.assertEqual(len(results), 2)\n            self.assertEqual(results[0].title, 'title1')\n            self.assertEqual(results[1].title, 'title2')\n\n    # Add more test methods for other functions in the RawQuerySet class\n\nclass TestPrefetch(TestCase):\n    def test_eq(self):\n        prefetch1 = Prefetch('authors')\n        prefetch2 = Prefetch('authors')\n        prefetch3 = Prefetch('comments')\n        self.assertEqual(prefetch1, prefetch2)\n        self.assertNotEqual(prefetch1, prefetch3)\n\n    # Add more test methods for other functions in the Prefetch class\n\nclass TestPrefetchFunctions(TestCase):\n    def test_get_prefetcher(self):\n        instance = Article(title='Test Article')\n        prefetcher, descriptor, attr_found, is_fetched = get_prefetcher(instance, 'authors', 'authors')\n        self.assertIsNone(prefetcher)\n        self.assertIsNotNone(descriptor)\n        self.assertTrue(attr_found)\n\n    # Add more test methods for other prefetch-related functions\n\nclass TestPrefetchRelatedObjects(TestCase):\n    def test_prefetch_related_objects(self):\n        articles = [Article(title='Article 1'), Article(title='Article 2')]\n        related_lookups = ['authors', 'comments']\n        # Mock the necessary components for testing prefetch_related_objects function\n        with patch('django.db.models.query.prefetch_one_level') as mock_prefetch_one_level:\n            prefetch_related_objects(articles, *related_lookups)\n            # Add assertions to verify the function behavior\n"], "sample_904": ["\nimport unittest\nimport logging\nfrom unittest.mock import MagicMock, patch\nfrom docutils import nodes\nfrom sphinx.errors import SphinxWarning\nfrom sphinx.util import logging as sphinx_logging\n\nclass TestSphinxLogging(unittest.TestCase):\n    def setUp(self):\n        self.app = MagicMock()\n        self.logger = sphinx_logging.getLogger(__name__)\n\n    def test_getLogger(self):\n        self.assertIsInstance(self.logger, sphinx_logging.SphinxLoggerAdapter)\n\n    def test_convert_serializable(self):\n        record = logging.LogRecord('name', logging.INFO, 'pathname', 1, 'message', (), None)\n        record.location = nodes.Node()\n        sphinx_logging.convert_serializable([record])\n        self.assertEqual(record.msg, 'message')\n        self.assertIsInstance(record.location, str)\n\n    def test_SphinxLogRecord_getMessage(self):\n        record = sphinx_logging.SphinxLogRecord('name', logging.INFO, 'pathname', 1, 'message', (), None)\n        record.location = 'location'\n        self.assertEqual(record.getMessage(), 'location: message')\n\n    def test_SphinxInfoLogRecord_getMessage(self):\n        record = sphinx_logging.SphinxInfoLogRecord('name', logging.INFO, 'pathname', 1, 'message', (), None)\n        self.assertEqual(record.getMessage(), 'message')\n\n    def test_SphinxWarningLogRecord_getMessage(self):\n        record = sphinx_logging.SphinxWarningLogRecord('name', logging.WARNING, 'pathname', 1, 'message', (), None)\n        self.assertEqual(record.getMessage(), 'WARNING: message')\n\n    def test_SphinxLoggerAdapter_log(self):\n        with patch('logging.LoggerAdapter.log') as mock_log:\n            self.logger.log('WARNING', 'message')\n            mock_log.assert_called_with(logging.WARNING, 'message')\n\n    def test_SphinxLoggerAdapter_verbose(self):\n        with patch('logging.LoggerAdapter.log') as mock_log:\n            self.logger.verbose('message')\n            mock_log.assert_called_with(sphinx_logging.VERBOSE, 'message')\n\n    def test_is_suppressed_warning(self):\n        self.assertTrue(sphinx_logging.is_suppressed_warning('type', 'subtype', ['type.subtype']))\n        self.assertFalse(sphinx_logging.is_suppressed_warning('type', 'subtype', ['type.other']))\n\n    def test_WarningSuppressor_filter(self):\n        self.app.config.suppress_warnings = ['type.subtype']\n        filter = sphinx_logging.WarningSuppressor(self.app)\n        record = logging.LogRecord('name', logging.WARNING, 'pathname', 1, 'message', (), None)\n        record.type = 'type'\n        record.subtype = 'subtype'\n        self.assertFalse(filter.filter(record))\n\n    def test_WarningIsErrorFilter_filter(self):\n        self.app.warningiserror = True\n        filter = sphinx_logging.WarningIsErrorFilter(self.app)\n        record = logging.LogRecord('name', logging.WARNING, 'pathname', 1, 'message', (), None)\n        with self.assertRaises(SphinxWarning):\n            filter.filter(record)\n\n    def test_DisableWarningIsErrorFilter_filter(self):\n        filter = sphinx_logging.DisableWarningIsErrorFilter()\n        record = logging.LogRecord('name', logging.WARNING, 'pathname', 1, 'message', (), None)\n        self.assertTrue(filter.filter(record))\n        self.assertTrue(record.skip_warningsiserror)\n\n    def test_MessagePrefixFilter_filter(self):\n        filter = sphinx_logging.MessagePrefixFilter('prefix')\n        record = logging.LogRecord('name', logging.WARNING, 'pathname', 1, 'message', (), None)\n        filter.filter(record)\n        self.assertEqual(record.msg, 'prefix message')\n\n    def test_OnceFilter_filter(self):\n        filter = sphinx_logging.OnceFilter()\n        record1 = logging.LogRecord('name', logging.WARNING, 'pathname', 1, 'message', ('arg1', 'arg2'), None)\n        record1.once = True\n        record2 = logging.LogRecord('name', logging.WARNING, 'pathname', 1, 'message', ('arg1', 'arg2'), None)\n        record2.once = True\n        self.assertTrue(filter.filter(record1))\n        self.assertFalse(filter.filter(record2))\n\n    def test_SphinxLogRecordTranslator_filter(self):\n        self.app.env.doc2path = lambda docname: 'path/to/' + docname\n        translator = sphinx_logging.SphinxLogRecordTranslator(self.app)\n        record = sphinx_logging.SphinxWarningLogRecord('name', logging.WARNING, 'pathname', 1, 'message', (), None)\n        record.location = ('docname', 123)\n        translator.filter(record)\n        self.assertEqual(record.location, 'path/to/docname:123')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_720": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing.data import QuantileTransformer, quantile_transform\n\nclass TestQuantileTransformer(unittest.TestCase):\n\n    def test_fit_transform(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        qt = QuantileTransformer(n_quantiles=10, random_state=0)\n        X_transformed = qt.fit_transform(X)\n        self.assertEqual(X_transformed.shape, X.shape)\n\n    def test_transform_quantile_function(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        qt = QuantileTransformer(n_quantiles=10, random_state=0)\n        qt.fit(X)\n        X_transformed = qt.transform(X)\n        X_inverse_transformed = qt.inverse_transform(X_transformed)\n        np.testing.assert_allclose(X, X_inverse_transformed, atol=1e-2)\n\n    def test_quantile_transform_function(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        X_transformed = quantile_transform(X, n_quantiles=10, random_state=0)\n        self.assertEqual(X_transformed.shape, X.shape)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_794": ["\nimport unittest\nimport numpy as np\nfrom sklearn.naive_bayes import GaussianNB, BernoulliNB, MultinomialNB, ComplementNB\nfrom sklearn.utils.estimator_checks import check_estimator\nfrom sklearn.exceptions import NotFittedError\n\nclass TestNaiveBayes(unittest.TestCase):\n    def test_gaussian_nb(self):\n        X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n        y = np.array([1, 1, 1, 2, 2, 2])\n        clf = GaussianNB()\n        clf.fit(X, y)\n        self.assertEqual(clf.predict([[-0.8, -1]]).tolist(), [1])\n\n    def test_bernoulli_nb(self):\n        X = np.random.randint(2, size=(6, 100))\n        Y = np.array([1, 2, 3, 4, 4, 5])\n        clf = BernoulliNB()\n        clf.fit(X, Y)\n        self.assertIsInstance(clf.predict(X[2:3])[0], int)\n\n    def test_multinomial_nb(self):\n        X = np.random.randint(5, size=(6, 100))\n        y = np.array([1, 2, 3, 4, 5, 6])\n        clf = MultinomialNB()\n        clf.fit(X, y)\n        self.assertIsInstance(clf.predict(X[2:3])[0], int)\n\n    def test_complement_nb(self):\n        X = np.random.randint(5, size=(6, 100))\n        y = np.array([1, 2, 3, 4, 5, 6])\n        clf = ComplementNB()\n        clf.fit(X, y)\n        self.assertIsInstance(clf.predict(X[2:3])[0], int)\n\n    def test_sklearn_estimator(self):\n        for estimator in [GaussianNB(), BernoulliNB(), MultinomialNB(), ComplementNB()]:\n            check_estimator(estimator)\n\n    def test_not_fitted_error(self):\n        X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n        clf = GaussianNB()\n        with self.assertRaises(NotFittedError):\n            clf.predict(X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_948": ["\nimport ast\nimport unittest\nfrom sphinx.pycode import ast as sphinx_ast\n\nclass TestSphinxAst(unittest.TestCase):\n    def test_parse(self):\n        code = \"x = 1 + 2\"\n        node = sphinx_ast.parse(code)\n        self.assertIsInstance(node, ast.AST)\n\n    def test_unparse(self):\n        code = \"x = 1 + 2\"\n        node = sphinx_ast.parse(code)\n        unparsed_code = sphinx_ast.unparse(node)\n        self.assertEqual(unparsed_code, code)\n\n    def test_unparse_none(self):\n        self.assertIsNone(sphinx_ast.unparse(None))\n\n    def test_unparse_string(self):\n        self.assertEqual(sphinx_ast.unparse(\"test\"), \"test\")\n\n    def test_unparse_visitor(self):\n        code = \"x = 1 + 2\"\n        node = sphinx_ast.parse(code)\n        visitor = sphinx_ast._UnparseVisitor(code)\n        unparsed_code = visitor.visit(node)\n        self.assertEqual(unparsed_code, code)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_868": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics._classification import (accuracy_score, confusion_matrix, multilabel_confusion_matrix, cohen_kappa_score,\n                                            jaccard_score, matthews_corrcoef, zero_one_loss, f1_score, fbeta_score,\n                                            precision_recall_fscore_support, precision_score, recall_score, balanced_accuracy_score,\n                                            classification_report, hamming_loss, log_loss, hinge_loss, brier_score_loss)\n\nclass TestClassificationMetrics(unittest.TestCase):\n    def setUp(self):\n        self.y_true = np.array([0, 1, 2, 0, 1, 2])\n        self.y_pred = np.array([0, 2, 1, 0, 0, 1])\n        self.y_true_binary = np.array([0, 1, 0, 1])\n        self.y_pred_binary = np.array([0, 1, 1, 0])\n        self.y_true_multilabel = np.array([[0, 1], [1, 1]])\n        self.y_pred_multilabel = np.ones((2, 2))\n\n    def test_accuracy_score(self):\n        self.assertEqual(accuracy_score(self.y_true, self.y_pred), 0.4166666666666667)\n\n    def test_confusion_matrix(self):\n        self.assertTrue(np.array_equal(confusion_matrix(self.y_true_binary, self.y_pred_binary),\n                                       np.array([[1, 1], [1, 1]])))\n\n    def test_multilabel_confusion_matrix(self):\n        self.assertTrue(np.array_equal(multilabel_confusion_matrix(self.y_true_multilabel, self.y_pred_multilabel),\n                                       np.array([[[0, 1], [1, 0]], [[1, 0], [0, 1]]])))\n\n    def test_cohen_kappa_score(self):\n        self.assertAlmostEqual(cohen_kappa_score(self.y_true_binary, self.y_pred_binary), 0.0)\n\n    def test_jaccard_score(self):\n        self.assertAlmostEqual(jaccard_score(self.y_true_binary, self.y_pred_binary), 0.33333333333333337)\n\n    def test_matthews_corrcoef(self):\n        self.assertAlmostEqual(matthews_corrcoef(self.y_true_binary, self.y_pred_binary), -0.33333333333333337)\n\n    def test_zero_one_loss(self):\n        self.assertAlmostEqual(zero_one_loss(self.y_true_binary, self.y_pred_binary), 0.5)\n\n    def test_f1_score(self):\n        self.assertAlmostEqual(f1_score(self.y_true_binary, self.y_pred_binary), 0.4)\n\n    def test_fbeta_score(self):\n        self.assertAlmostEqual(fbeta_score(self.y_true_binary, self.y_pred_binary, beta=0.5), 0.5773502691896258)\n\n    def test_precision_recall_fscore_support(self):\n        p, r, f, _ = precision_recall_fscore_support(self.y_true_binary, self.y_pred_binary)\n        self.assertAlmostEqual(p, 0.5)\n        self.assertAlmostEqual(r, 0.5)\n        self.assertAlmostEqual(f, 0.4)\n\n    def test_precision_score(self):\n        self.assertAlmostEqual(precision_score(self.y_true_binary, self.y_pred_binary), 0.5)\n\n    def test_recall_score(self):\n        self.assertAlmostEqual(recall_score(self.y_true_binary, self.y_pred_binary), 0.5)\n\n    def test_balanced_accuracy_score(self):\n        self.assertAlmostEqual(balanced_accuracy_score(self.y_true_binary, self.y_pred_binary), 0.5)\n\n    def test_classification_report(self):\n        report = classification_report(self.y_true_binary, self.y_pred_binary)\n        self.assertIsInstance(report, str)\n\n    def test_hamming_loss(self):\n        self.assertAlmostEqual(hamming_loss(self.y_true_multilabel, self.y_pred_multilabel), 0.75)\n\n    def test_log_loss(self):\n        self.assertAlmostEqual(log_loss(self.y_true_binary, self.y_pred_binary), 0.6931471805599453)\n\n    def test_hinge_loss(self):\n        self.assertAlmostEqual(hinge_loss(self.y_true_binary, self.y_pred_binary), 0.8333333333333334)\n\n    def test_brier_score_loss(self):\n        self.assertAlmostEqual(brier_score_loss(self.y_true_binary, self.y_pred_binary), 0.25)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1177": ["\nimport unittest\nfrom sympy import *\nfrom sympy.functions.elementary.complexes import re, im, sign, Abs, arg, conjugate, transpose, adjoint, polar_lift, periodic_argument, principal_branch, polarify, unpolarify\n\nclass TestComplexFunctions(unittest.TestCase):\n\n    def test_re_function(self):\n        self.assertEqual(re(2*E), 2*E)\n        self.assertEqual(re(2*I + 17), 17)\n        self.assertEqual(re(2*I), 0)\n\n    def test_im_function(self):\n        self.assertEqual(im(2*E), 0)\n        self.assertEqual(im(2*I + 17), 2)\n        self.assertEqual(im(2 + 3*I), 3)\n\n    def test_sign_function(self):\n        self.assertEqual(sign(-1), -1)\n        self.assertEqual(sign(0), 0)\n        self.assertEqual(sign(-3*I), -I)\n\n    def test_abs_function(self):\n        self.assertEqual(Abs(-1), 1)\n        self.assertEqual(Abs(3*x + 2*I), sqrt(9*x**2 + 4))\n        self.assertEqual(Abs(8*I), 8)\n\n    def test_arg_function(self):\n        self.assertEqual(arg(2.0), 0)\n        self.assertEqual(arg(I), pi/2)\n        self.assertEqual(arg(sqrt(2) + I*sqrt(2)), pi/4)\n\n    def test_conjugate_function(self):\n        self.assertEqual(conjugate(2), 2)\n        self.assertEqual(conjugate(I), -I)\n        self.assertEqual(conjugate(3 + 2*I), 3 - 2*I)\n\n    def test_transpose_function(self):\n        A = MatrixSymbol('A', 25, 9)\n        self.assertEqual(transpose(A), A.T)\n\n    def test_adjoint_function(self):\n        A = MatrixSymbol('A', 10, 5)\n        self.assertEqual(adjoint(A), Adjoint(A))\n\n    def test_polar_lift_function(self):\n        self.assertEqual(polar_lift(4), 4*exp_polar(0))\n        self.assertEqual(polar_lift(-4), 4*exp_polar(I*pi))\n\n    def test_periodic_argument_function(self):\n        self.assertEqual(periodic_argument(exp_polar(10*I*pi), 2*pi), 0)\n        self.assertEqual(periodic_argument(exp_polar(5*I*pi), 4*pi), pi)\n\n    def test_principal_branch_function(self):\n        self.assertEqual(principal_branch(exp_polar(2*pi*I)*3, 2*pi), 3*exp_polar(0))\n\n    def test_polarify_function(self):\n        expr = (-x)**y\n        self.assertEqual(polarify(expr)[0], (_x*exp_polar(I*pi))**_y)\n\n    def test_unpolarify_function(self):\n        self.assertEqual(unpolarify(polar_lift(I + 2)), 2 + I)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_965": ["\nimport unittest\nimport inspect\nfrom unittest.mock import Mock, patch\nfrom typing import Any, Dict\nfrom inspect import Parameter, Signature\n\nfrom sphinx.util import inspect\nfrom sphinx.util.inspect import (TypeAliasNamespace, stringify_signature,\n                                  signature, evaluate_signature, signature_from_str,\n                                  signature_from_ast, getdoc, _should_unwrap)\n\n# Mocking some objects for testing\ndef mock_function(a: int, b: str = 'default', *args, **kwargs) -> bool:\n    pass\n\nclass MockClass:\n    def mock_method(self, a: int, b: str = 'default', *args, **kwargs) -> bool:\n        pass\n\n    @classmethod\n    def mock_class_method(cls, a: int, b: str = 'default', *args, **kwargs) -> bool:\n        pass\n\n    @staticmethod\n    def mock_static_method(a: int, b: str = 'default', *args, **kwargs) -> bool:\n        pass\n\nclass TestInspectFunctions(unittest.TestCase):\n    def test_TypeAliasNamespace(self):\n        namespace = TypeAliasNamespace({'module.Class': 'Alias'})\n        self.assertEqual(namespace['module.Class'], 'Alias')\n\n    def test_stringify_signature(self):\n        sig = Signature([Parameter('a', Parameter.POSITIONAL_OR_KEYWORD, annotation=int),\n                         Parameter('b', Parameter.POSITIONAL_OR_KEYWORD, annotation=str)],\n                        return_annotation=bool)\n        self.assertEqual(stringify_signature(sig), '(a: int, b: str) -> bool')\n\n    def test_signature(self):\n        sig = signature(mock_function)\n        self.assertIsInstance(sig, Signature)\n\n    # ... More tests for other functions ...\n\n    def test_getdoc(self):\n        class DocClass:\n            \"\"\"Class docstring.\"\"\"\n            def doc_method(self):\n                \"\"\"Method docstring.\"\"\"\n                pass\n\n        self.assertEqual(getdoc(DocClass), \"Class docstring.\")\n        self.assertEqual(getdoc(DocClass.doc_method), \"Method docstring.\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_775": ["\nimport unittest\nfrom sklearn.utils._pprint import _EstimatorPrettyPrinter, _changed_params, is_scalar_nan\nfrom sklearn.base import BaseEstimator\nfrom sklearn.linear_model import LinearRegression\n\nclass TestEstimatorPrettyPrinter(unittest.TestCase):\n    def setUp(self):\n        self.estimator = LinearRegression()\n        self.printer = _EstimatorPrettyPrinter()\n\n    def test_changed_params(self):\n        params = _changed_params(self.estimator)\n        self.assertEqual(params, {})\n\n        self.estimator.fit_intercept = True\n        params = _changed_params(self.estimator)\n        self.assertEqual(params, {'fit_intercept': True})\n\n    def test_is_scalar_nan(self):\n        self.assertTrue(is_scalar_nan(float('nan')))\n        self.assertFalse(is_scalar_nan(1))\n\n    def test_format(self):\n        output = self.printer.format(self.estimator, {}, 1, 0)\n        self.assertEqual(output, \"LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)\")\n\n    def test_pprint_estimator(self):\n        self.printer._pprint_estimator(self.estimator, self.printer._stream, 0, 1, {}, 0)\n        output = self.printer._stream.getvalue()\n        self.assertEqual(output, \"LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_325": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.forms import Form, CharField\nfrom django.forms.widgets import TextInput, Textarea\nfrom django.forms.boundfield import BoundField\n\nclass TestBoundField(unittest.TestCase):\n    def setUp(self):\n        class TestForm(Form):\n            test_field = CharField()\n\n        self.form = TestForm()\n        self.bound_field = self.form['test_field']\n\n    def test_init(self):\n        self.assertEqual(self.bound_field.form, self.form)\n        self.assertEqual(self.bound_field.field, self.form.fields['test_field'])\n        self.assertEqual(self.bound_field.name, 'test_field')\n\n    def test_str(self):\n        self.assertEqual(str(self.bound_field), self.bound_field.as_widget())\n\n    def test_subwidgets(self):\n        self.assertEqual(len(self.bound_field.subwidgets), 1)\n\n    def test_iter(self):\n        self.assertEqual(list(self.bound_field), self.bound_field.subwidgets)\n\n    def test_getitem(self):\n        self.assertEqual(self.bound_field[0], self.bound_field.subwidgets[0])\n\n    def test_as_widget(self):\n        widget = self.bound_field.as_widget(widget=TextInput())\n        self.assertIn('type=\"text\"', widget)\n\n    def test_as_textarea(self):\n        widget = self.bound_field.as_textarea()\n        self.assertIn('<textarea', widget)\n\n    def test_as_hidden(self):\n        widget = self.bound_field.as_hidden()\n        self.assertIn('type=\"hidden\"', widget)\n\n    def test_value(self):\n        self.bound_field.data = 'Test'\n        self.assertEqual(self.bound_field.value(), 'Test')\n\n    def test_label_tag(self):\n        label = self.bound_field.label_tag()\n        self.assertIn('<label', label)\n        self.assertIn('</label>', label)\n\n    def test_css_classes(self):\n        self.assertEqual(self.bound_field.css_classes(), '')\n\n    def test_auto_id(self):\n        self.assertEqual(self.bound_field.auto_id, '')\n\n    def test_widget_type(self):\n        self.assertEqual(self.bound_field.widget_type, 'text')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_204": ["\nimport unittest\nfrom django.core.exceptions import *\n\nclass TestDjangoExceptions(unittest.TestCase):\n\n    def test_field_does_not_exist(self):\n        with self.assertRaises(FieldDoesNotExist):\n            raise FieldDoesNotExist()\n\n    def test_app_registry_not_ready(self):\n        with self.assertRaises(AppRegistryNotReady):\n            raise AppRegistryNotReady()\n\n    def test_object_does_not_exist(self):\n        with self.assertRaises(ObjectDoesNotExist):\n            raise ObjectDoesNotExist()\n\n    def test_multiple_objects_returned(self):\n        with self.assertRaises(MultipleObjectsReturned):\n            raise MultipleObjectsReturned()\n\n    def test_suspicious_operation(self):\n        with self.assertRaises(SuspiciousOperation):\n            raise SuspiciousOperation()\n\n    def test_suspicious_multipart_form(self):\n        with self.assertRaises(SuspiciousMultipartForm):\n            raise SuspiciousMultipartForm()\n\n    def test_suspicious_file_operation(self):\n        with self.assertRaises(SuspiciousFileOperation):\n            raise SuspiciousFileOperation()\n\n    def test_disallowed_host(self):\n        with self.assertRaises(DisallowedHost):\n            raise DisallowedHost()\n\n    def test_disallowed_redirect(self):\n        with self.assertRaises(DisallowedRedirect):\n            raise DisallowedRedirect()\n\n    def test_too_many_fields_sent(self):\n        with self.assertRaises(TooManyFieldsSent):\n            raise TooManyFieldsSent()\n\n    def test_request_data_too_big(self):\n        with self.assertRaises(RequestDataTooBig):\n            raise RequestDataTooBig()\n\n    def test_request_aborted(self):\n        with self.assertRaises(RequestAborted):\n            raise RequestAborted()\n\n    def test_permission_denied(self):\n        with self.assertRaises(PermissionDenied):\n            raise PermissionDenied()\n\n    def test_view_does_not_exist(self):\n        with self.assertRaises(ViewDoesNotExist):\n            raise ViewDoesNotExist()\n\n    def test_middleware_not_used(self):\n        with self.assertRaises(MiddlewareNotUsed):\n            raise MiddlewareNotUsed()\n\n    def test_improperly_configured(self):\n        with self.assertRaises(ImproperlyConfigured):\n            raise ImproperlyConfigured()\n\n    def test_field_error(self):\n        with self.assertRaises(FieldError):\n            raise FieldError()\n\n    def test_validation_error(self):\n        with self.assertRaises(ValidationError):\n            raise ValidationError(\"Error\")\n\n    def test_empty_result_set(self):\n        with self.assertRaises(EmptyResultSet):\n            raise EmptyResultSet()\n\n    def test_synchronous_only_operation(self):\n        with self.assertRaises(SynchronousOnlyOperation):\n            raise SynchronousOnlyOperation()\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_84": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db import models, router\nfrom django.db.models import fields\nfrom django.db.models.query import QuerySet\nfrom django.db.models.base import ModelBase\nfrom django.core import exceptions\nfrom django.test import TestCase\nfrom .related import (\n    ForeignObject, ForeignKey, OneToOneField, ManyToManyField,\n    RelatedField, resolve_relation, lazy_related_operation,\n)\n\nclass TestRelatedFieldMethods(TestCase):\n\n    def setUp(self):\n        self.related_field = RelatedField()\n\n    def test_related_model_property(self):\n        self.related_field.remote_field = MagicMock()\n        self.related_field.remote_field.model = MagicMock()\n        self.related_field.related_model\n\n    def test_check_method(self):\n        self.related_field.check()\n\n    # Additional tests for _check_related_name_is_valid, _check_related_query_name_is_valid,\n    # _check_relation_model_exists, _check_referencing_to_swapped_model, _check_clashes,\n    # db_type, contribute_to_class, deconstruct, get_forward_related_filter,\n    # get_reverse_related_filter, swappable_setting, set_attributes_from_rel,\n    # do_related_class, get_limit_choices_to, formfield, related_query_name, target_field,\n    # get_cache_name methods can be added here\n\nclass TestForeignObjectMethods(TestCase):\n\n    def setUp(self):\n        self.foreign_object = ForeignObject(to='app.Model', on_delete=models.CASCADE, from_fields=['field1'], to_fields=['field2'])\n\n    def test_check_method(self):\n        self.foreign_object.check()\n\n    # Additional tests for _check_to_fields_exist, _check_unique_target, deconstruct,\n    # resolve_related_fields, related_fields, reverse_related_fields, local_related_fields,\n    # foreign_related_fields, get_local_related_value, get_foreign_related_value,\n    # get_instance_value_for_fields, get_attname_column, get_joining_columns,\n    # get_reverse_joining_columns, get_extra_descriptor_filter, get_extra_restriction,\n    # get_path_info, get_reverse_path_info, get_lookups, contribute_to_class,\n    # contribute_to_related_class methods can be added here\n\nclass TestForeignKeyMethods(TestCase):\n\n    def setUp(self):\n        self.foreign_key = ForeignKey(to='app.Model', on_delete=models.CASCADE)\n\n    def test_check_method(self):\n        self.foreign_key.check()\n\n    # Additional tests for _check_on_delete, _check_unique, deconstruct, to_python,\n    # target_field, validate, get_attname, get_attname_column, get_default,\n    # get_db_prep_save, get_db_prep_value, get_prep_value, contribute_to_related_class,\n    # formfield, db_check, db_type, db_parameters, convert_empty_strings,\n    # get_db_converters, get_col methods can be added here\n\nclass TestOneToOneFieldMethods(TestCase):\n\n    def setUp(self):\n        self.one_to_one_field = OneToOneField(to='app.Model', on_delete=models.CASCADE)\n\n    def test_deconstruct_method(self):\n        self.one_to_one_field.deconstruct()\n\n    # Additional tests for formfield, save_form_data, _check_unique methods can be added here\n\nclass TestManyToManyFieldMethods(TestCase):\n\n    def setUp(self):\n        self.many_to_many_field = ManyToManyField(to='app.Model')\n\n    def test_check_method(self):\n        self.many_to_many_field.check()\n\n    # Additional tests for _check_unique, _check_ignored_options, _check_relationship_model,\n    # _check_table_uniqueness, deconstruct, _get_path_info, get_path_info,\n    # get_reverse_path_info, _get_m2m_db_table, _get_m2m_attr, _get_m2m_reverse_attr,\n    # contribute_to_class, contribute_to_related_class, set_attributes_from_rel,\n    # value_from_object, save_form_data, formfield, db_check, db_type, db_parameters methods can be added here\n"], "sample_634": ["\nimport unittest\nimport re\nfrom unittest.mock import patch, MagicMock\nfrom typing import List, Pattern\nfrom pylint.lint.expand_modules import _is_in_ignore_list_re, expand_modules\n\nclass TestExpandModules(unittest.TestCase):\n    @patch('os.path.exists')\n    @patch('os.path.isdir')\n    @patch('modutils.modpath_from_file')\n    @patch('modutils.file_from_modpath')\n    @patch('modutils.file_info_from_modpath')\n    @patch('modutils.is_namespace')\n    @patch('modutils.is_directory')\n    @patch('modutils.get_module_files')\n    def test_expand_modules(self, get_module_files, is_directory, is_namespace, file_info_from_modpath, file_from_modpath, modpath_from_file, exists, isdir):\n        # Mock the dependencies\n        exists.return_value = True\n        isdir.return_value = False\n        modpath_from_file.return_value = ['module', 'submodule']\n        file_from_modpath.return_value = '/path/to/module.py'\n        file_info_from_modpath.return_value = MagicMock()\n        is_namespace.return_value = False\n        is_directory.return_value = False\n        get_module_files.return_value = ['/path/to/submodule.py']\n\n        # Prepare the test data\n        files_or_modules = ['/path/to/module.py']\n        ignore_list = []\n        ignore_list_re = [re.compile('__init__.py')]\n        ignore_list_paths_re = []\n\n        # Call the function under test\n        result, errors = expand_modules(files_or_modules, ignore_list, ignore_list_re, ignore_list_paths_re)\n\n        # Assert the results\n        self.assertEqual(len(result), 2)\n        self.assertEqual(len(errors), 0)\n        self.assertEqual(result[0]['path'], '/path/to/module.py')\n        self.assertEqual(result[0]['name'], 'module.submodule')\n        self.assertEqual(result[1]['path'], '/path/to/submodule.py')\n        self.assertEqual(result[1]['name'], 'module.submodule')\n\n    def test_is_in_ignore_list_re(self):\n        # Prepare the test data\n        element = 'test.py'\n        ignore_list_re = [re.compile('__init__.py'), re.compile('test.py')]\n\n        # Call the function under test\n        result = _is_in_ignore_list_re(element, ignore_list_re)\n\n        # Assert the result\n        self.assertTrue(result)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_908": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom sphinx.ext.napoleon.docstring import GoogleDocstring, NumpyDocstring\n\nclass TestDocstring(unittest.TestCase):\n    def setUp(self):\n        self.docstring = \"\"\"\n        One line summary.\n\n        Extended description.\n\n        Args:\n          arg1(int): Description of `arg1`\n          arg2(str): Description of `arg2`\n        Returns:\n          str: Description of return value.\n        \"\"\"\n        self.config = MagicMock()\n\n    def test_GoogleDocstring(self):\n        parsed = GoogleDocstring(self.docstring, self.config)\n        self.assertIsInstance(parsed, GoogleDocstring)\n        self.assertIn(':param arg1: Description of `arg1`', parsed.lines())\n        self.assertIn(':type arg1: int', parsed.lines())\n\n    def test_NumpyDocstring(self):\n        parsed = NumpyDocstring(self.docstring, self.config)\n        self.assertIsInstance(parsed, NumpyDocstring)\n        self.assertIn(':param arg1: Description of `arg1`', parsed.lines())\n        self.assertIn(':type arg1: int', parsed.lines())\n"], "sample_612": ["\nimport unittest\nimport numpy as np\nimport xarray as xr\nfrom xarray.core.groupby import _consolidate_slices, GroupBy, DataArrayGroupBy, DatasetGroupBy\n\nclass TestGroupBy(unittest.TestCase):\n    def setUp(self):\n        self.data = xr.DataArray(np.random.rand(4, 3), dims=('x', 'y'),\n                                 coords={'x': ('x', [1, 2, 3, 4]),\n                                         'y': ('y', [10, 20, 30])})\n        self.group = xr.DataArray([1, 1, 2, 2], dims='x', coords={'x': self.data.x})\n\n    def test_consolidate_slices(self):\n        slices = [slice(0, 2), slice(2, 4)]\n        result = _consolidate_slices(slices)\n        self.assertEqual(result, [slice(0, 4, None)])\n\n    def test_groupby_init(self):\n        groupby_obj = GroupBy(self.data, self.group)\n        self.assertIsInstance(groupby_obj, GroupBy)\n\n    def test_dataarraygroupby_init(self):\n        groupby_obj = DataArrayGroupBy(self.data, self.group)\n        self.assertIsInstance(groupby_obj, DataArrayGroupBy)\n\n    def test_datasetgroupby_init(self):\n        dataset = self.data.to_dataset(name='data')\n        groupby_obj = DatasetGroupBy(dataset, self.group)\n        self.assertIsInstance(groupby_obj, DatasetGroupBy)\n\n    def test_groupby_map(self):\n        groupby_obj = DataArrayGroupBy(self.data, self.group)\n        result = groupby_obj.map(np.mean)\n        self.assertIsInstance(result, xr.DataArray)\n\n    def test_groupby_reduce(self):\n        groupby_obj = DataArrayGroupBy(self.data, self.group)\n        result = groupby_obj.reduce(np.mean, dim='x')\n        self.assertIsInstance(result, xr.DataArray)\n\n    # add more tests as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_399": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.models.sql.query import Query, JoinPromoter, add_to_dict, is_reverse_o2o\nfrom django.db.models import Field, Model, ForeignKey, OneToOneField, CharField\n\nclass TestQueryMethods(unittest.TestCase):\n    def setUp(self):\n        self.query = Query(Model)\n\n    def test_add_filter(self):\n        self.query.add_filter('field__name', 'value')\n        self.assertEqual(self.query.where.children[0].children[0].lhs.target.name, 'field')\n\n    def test_add_q(self):\n        q_object = Q(field__name='value')\n        self.query._add_q(q_object)\n        self.assertEqual(self.query.where.children[0].children[0].lhs.target.name, 'field')\n\n    def test_build_filter(self):\n        filter_expr = ('field__name', 'value')\n        can_reuse = set()\n        allow_joins = True\n        split_subq = True\n        reuse_with_filtered_relation = False\n        check_filterable = True\n        clause, used_joins = self.query.build_filter(filter_expr, can_reuse=can_reuse, allow_joins=allow_joins, split_subq=split_subq, reuse_with_filtered_relation=reuse_with_filtered_relation, check_filterable=check_filterable)\n        self.assertEqual(clause.children[0].lhs.target.name, 'field')\n\n    # Add more tests for other methods in django/db/models/sql/query.py as needed\n\nclass TestJoinPromoter(unittest.TestCase):\n    def setUp(self):\n        self.join_promoter = JoinPromoter('AND', 2, False)\n\n    def test_add_votes(self):\n        self.join_promoter.add_votes(['table1', 'table2'])\n        self.assertEqual(self.join_promoter.votes['table1'], 1)\n\n    def test_update_join_types(self):\n        self.join_promoter.add_votes(['table1', 'table1'])\n        query = MagicMock()\n        self.join_promoter.update_join_types(query)\n        query.demote_joins.assert_called_once_with({'table1'})\n\nclass TestUtilityFunctions(unittest.TestCase):\n    def test_add_to_dict(self):\n        data = {}\n        add_to_dict(data, 'key', 'value')\n        self.assertEqual(data, {'key': {'value'}})\n\n    def test_is_reverse_o2o(self):\n        field = OneToOneField(Model, on_delete=Field.CASCADE, related_name='+')\n        self.assertTrue(is_reverse_o2o(field))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_91": ["\nfrom django.test import RequestFactory, TestCase\nfrom django.views.defaults import (\n    bad_request, page_not_found, permission_denied, server_error,\n)\nfrom django.template import TemplateDoesNotExist\n\nclass DefaultViewsTest(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_page_not_found(self):\n        request = self.factory.get('/non-existent-page/')\n        exception = Exception(\"Page not found\")\n        response = page_not_found(request, exception)\n        self.assertEqual(response.status_code, 404)\n        self.assertIn(b'Not Found', response.content)\n\n    def test_page_not_found_custom_template(self):\n        with self.assertRaises(TemplateDoesNotExist):\n            request = self.factory.get('/')\n            exception = Exception(\"Page not found\")\n            page_not_found(request, exception, template_name='non-existent-template.html')\n\n    def test_server_error(self):\n        request = self.factory.get('/')\n        response = server_error(request)\n        self.assertEqual(response.status_code, 500)\n        self.assertIn(b'Server Error (500)', response.content)\n\n    def test_server_error_custom_template(self):\n        with self.assertRaises(TemplateDoesNotExist):\n            request = self.factory.get('/')\n            server_error(request, template_name='non-existent-template.html')\n\n    def test_bad_request(self):\n        request = self.factory.get('/')\n        exception = Exception(\"Bad request\")\n        response = bad_request(request, exception)\n        self.assertEqual(response.status_code, 400)\n        self.assertIn(b'Bad Request (400)', response.content)\n\n    def test_bad_request_custom_template(self):\n        with self.assertRaises(TemplateDoesNotExist):\n            request = self.factory.get('/')\n            exception = Exception(\"Bad request\")\n            bad_request(request, exception, template_name='non-existent-template.html')\n\n    def test_permission_denied(self):\n        request = self.factory.get('/')\n        exception = Exception(\"Permission denied\")\n        response = permission_denied(request, exception)\n        self.assertEqual(response.status_code, 403)\n        self.assertIn(b'403 Forbidden', response.content)\n\n    def test_permission_denied_custom_template(self):\n        with self.assertRaises(TemplateDoesNotExist):\n            request = self.factory.get('/')\n            exception = Exception(\"Permission denied\")\n            permission_denied(request, exception, template_name='non-existent-template.html')\n"], "sample_1105": ["\nimport unittest\nfrom sympy import symbols, Eq, Infinity, S\nfrom sympy.printing.str import sstr, StrPrinter\n\nclass TestStrPrinter(unittest.TestCase):\n\n    def setUp(self):\n        self.a, self.b = symbols('a b')\n\n    def test_sstr_equality(self):\n        self.assertEqual(sstr(Eq(self.a + self.b, 0)), 'Eq(a + b, 0)')\n\n    def test_sstr_infinity(self):\n        self.assertEqual(sstr(Infinity), 'oo')\n\n    def test_sstr_negative_infinity(self):\n        self.assertEqual(sstr(-Infinity), '-oo')\n\n    def test_sstr_integer(self):\n        self.assertEqual(sstr(S(10)), '10')\n\n    def test_str_printer_integer(self):\n        p = StrPrinter({\"sympy_integers\": True})\n        self.assertEqual(p.doprint(S(10)), 'S(10)')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_293": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.urls.resolvers import ResolverMatch, get_resolver, RegexPattern, URLPattern, URLResolver\n\nclass TestResolvers(unittest.TestCase):\n    def setUp(self):\n        self.mock_settings = patch('django.urls.resolvers.settings').start()\n        self.mock_settings.ROOT_URLCONF = 'test_urls'\n        self.mock_import_module = patch('django.urls.resolvers.import_module').start()\n\n    def tearDown(self):\n        patch.stopall()\n\n    def test_resolver_match(self):\n        func = MagicMock()\n        match = ResolverMatch(func, (), {}, url_name='test_url')\n        self.assertEqual(match.url_name, 'test_url')\n\n    def test_get_resolver(self):\n        resolver = get_resolver()\n        self.assertIsInstance(resolver, URLResolver)\n\n    def test_regex_pattern_match(self):\n        pattern = RegexPattern(r'^test/')\n        match = pattern.match('test/path')\n        self.assertEqual(match[0], 'path')\n\n    def test_url_pattern_resolve(self):\n        pattern = RegexPattern(r'^test/')\n        callback = MagicMock()\n        url_pattern = URLPattern(pattern, callback)\n        match = url_pattern.resolve('test/path')\n        self.assertEqual(match.func, callback)\n\n    def test_url_resolver_resolve(self):\n        pattern = RegexPattern(r'^')\n        urlconf_name = 'test_urls'\n        url_resolver = URLResolver(pattern, urlconf_name)\n        url_resolver.url_patterns = [URLPattern(RegexPattern(r'^test/'), MagicMock())]\n        match = url_resolver.resolve('test/path')\n        self.assertIsNotNone(match)\n\n    def test_url_resolver_reverse(self):\n        pattern = RegexPattern(r'^test/(?P<pk>\\d+)/')\n        callback = MagicMock()\n        url_pattern = URLPattern(pattern, callback, name='test_url')\n        url_resolver = URLResolver(RegexPattern(r'^'), 'test_urls')\n        url_resolver.url_patterns = [url_pattern]\n        url = url_resolver.reverse('test_url', kwargs={'pk': 1})\n        self.assertEqual(url, 'test/1/')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_57": ["\nfrom django.test import TestCase\nfrom django.core import checks\nfrom django.contrib.admin import checks as admin_checks\nfrom django.contrib.admin.options import ModelAdmin\nfrom django.db import models\n\nclass DummyModel(models.Model):\n    field1 = models.CharField(max_length=10)\n    field2 = models.ForeignKey(Model, on_delete=models.CASCADE)\n    field3 = models.ManyToManyField(Model)\n\nclass DummyModelAdmin(ModelAdmin):\n    model = DummyModel\n\nclass TestAdminChecks(TestCase):\n    def setUp(self):\n        self.checks = admin_checks.BaseModelAdminChecks()\n        self.admin_obj = DummyModelAdmin()\n\n    def test_check_autocomplete_fields(self):\n        self.admin_obj.autocomplete_fields = ['field1', 'field2']\n        errors = self.checks._check_autocomplete_fields(self.admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_raw_id_fields(self):\n        self.admin_obj.raw_id_fields = ['field2', 'field3']\n        errors = self.checks._check_raw_id_fields(self.admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    # Add more test methods for other functions in checks.py\n"], "sample_260": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db import models\nfrom django.db.migrations.operations import models as migration_models\nfrom django.db.migrations.state import ModelState\n\nclass TestCreateModel(unittest.TestCase):\n    def setUp(self):\n        self.name = 'TestModel'\n        self.fields = [('field1', models.CharField(max_length=200)), ('field2', models.IntegerField())]\n        self.options = {'verbose_name': 'Test Model'}\n        self.bases = (models.Model,)\n        self.managers = [('objects', models.Manager())]\n\n    def test_create_model_init(self):\n        create_model = migration_models.CreateModel(self.name, self.fields, self.options, self.bases, self.managers)\n        self.assertEqual(create_model.name, self.name)\n        self.assertEqual(create_model.fields, self.fields)\n        self.assertEqual(create_model.options, self.options)\n        self.assertEqual(create_model.bases, self.bases)\n        self.assertEqual(create_model.managers, self.managers)\n\n    def test_create_model_state_forwards(self):\n        create_model = migration_models.CreateModel(self.name, self.fields, self.options, self.bases, self.managers)\n        app_label = 'test_app'\n        state = Mock()\n        create_model.state_forwards(app_label, state)\n        state.add_model.assert_called_once_with(ModelState(app_label, self.name, self.fields, self.options, self.bases, self.managers))\n\n    # Add more tests for database_forwards, database_backwards, describe, migration_name_fragment, references_model, and reduce methods\n\n# Add similar test cases for DeleteModel, RenameModel, AlterModelTable, AlterTogetherOptionOperation, AlterUniqueTogether, AlterIndexTogether, AlterOrderWithRespectTo, AlterModelOptions, AlterModelManagers, AddIndex, RemoveIndex, AddConstraint, and RemoveConstraint classes\n"], "sample_894": ["\nimport unittest\nimport numpy as np\nfrom sklearn.calibration import CalibratedClassifierCV, calibration_curve\nfrom sklearn.svm import LinearSVC\nfrom sklearn.datasets import make_classification\nfrom sklearn.exceptions import NotFittedError\n\nclass TestCalibration(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, n_features=2, n_redundant=0, random_state=42)\n        self.estimator = LinearSVC(random_state=0)\n\n    def test_calibrated_classifier_cv_fit(self):\n        calibrated_clf = CalibratedClassifierCV(self.estimator, cv=3)\n        calibrated_clf.fit(self.X, self.y)\n        self.assertEqual(len(calibrated_clf.calibrated_classifiers_), 3)\n\n    def test_calibrated_classifier_cv_predict_proba(self):\n        calibrated_clf = CalibratedClassifierCV(self.estimator, cv=3)\n        calibrated_clf.fit(self.X, self.y)\n        proba = calibrated_clf.predict_proba(self.X)\n        self.assertEqual(proba.shape, (100, 2))\n        self.assertTrue(np.all(proba >= 0) and np.all(proba <= 1))\n\n    def test_calibration_curve(self):\n        calibrated_clf = CalibratedClassifierCV(self.estimator, cv=3)\n        calibrated_clf.fit(self.X, self.y)\n        y_prob = calibrated_clf.predict_proba(self.X)[:, 1]\n        prob_true, prob_pred = calibration_curve(self.y, y_prob, n_bins=3)\n        self.assertEqual(len(prob_true), len(prob_pred))\n\n    def test_not_fitted_error(self):\n        calibrated_clf = CalibratedClassifierCV(self.estimator, cv=3)\n        with self.assertRaises(NotFittedError):\n            calibrated_clf.predict_proba(self.X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1175": ["\nimport unittest\nfrom sympy import symbols, Matrix, Eye, Rational, Symbol, Function, exp, sin, cos, pi, Integral\nfrom sympy.printing.pretty.pretty import PrettyPrinter, pretty, pretty_print\n\nclass TestPrettyPrinting(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n        self.f = Function('f')\n\n    def test_pretty_print_simple_expression(self):\n        expr = 2*self.x + self.y\n        result = pretty(expr)\n        self.assertIsInstance(result, str)\n\n    def test_pretty_print_matrix(self):\n        mat = Matrix([[1, 2], [3, 4]])\n        result = pretty(mat)\n        self.assertIsInstance(result, str)\n\n    def test_pretty_print_rational(self):\n        rat = Rational(1, 2)\n        result = pretty(rat)\n        self.assertIsInstance(result, str)\n\n    def test_pretty_print_function(self):\n        func = self.f(self.x)\n        result = pretty(func)\n        self.assertIsInstance(result, str)\n\n    def test_pretty_print_integral(self):\n        integral = Integral(sin(self.x), (self.x, 0, pi))\n        result = pretty(integral)\n        self.assertIsInstance(result, str)\n\n    def test_pretty_print_exponential(self):\n        exp_expr = exp(self.x)\n        result = pretty(exp_expr)\n        self.assertIsInstance(result, str)\n\n    def test_pretty_print_trigonometric(self):\n        trig_expr = sin(self.x) + cos(self.y)\n        result = pretty(trig_expr)\n        self.assertIsInstance(result, str)\n\n    def test_pretty_print_symbol(self):\n        sym = Symbol('alpha')\n        result = pretty(sym)\n        self.assertIsInstance(result, str)\n\n    def test_pretty_print_large_expression(self):\n        large_expr = sum(self.f(i)**2 for i in range(100))\n        result = pretty(large_expr)\n        self.assertIsInstance(result, str)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_389": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.http import HttpRequest\nfrom django.http.request import QueryDict, HttpHeaders, MediaType, bytes_to_text, split_domain_port, validate_host, parse_accept_header\nfrom django.test import RequestFactory\nfrom django.core.exceptions import DisallowedHost, ImproperlyConfigured, RequestDataTooBig, TooManyFieldsSent\nfrom django.core.files.uploadedfile import SimpleUploadedFile\nfrom django.core.files.uploadhandler import MemoryFileUploadHandler\nfrom django.utils.http import urlencode\nfrom django.conf import settings\n\nclass TestHttpRequest(unittest.TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_init(self):\n        request = HttpRequest()\n        self.assertIsInstance(request.GET, QueryDict)\n        self.assertIsInstance(request.POST, QueryDict)\n        self.assertEqual(request.COOKIES, {})\n        self.assertEqual(request.META, {})\n        self.assertIsInstance(request.FILES, QueryDict)\n\n    def test_headers(self):\n        request = HttpRequest()\n        request.META = {'HTTP_CONTENT_TYPE': 'application/json', 'HTTP_HOST': 'example.com'}\n        headers = request.headers\n        self.assertIsInstance(headers, HttpHeaders)\n        self.assertEqual(headers['Content-Type'], 'application/json')\n        self.assertEqual(headers['Host'], 'example.com')\n\n    def test_get_host(self):\n        request = HttpRequest()\n        request.META = {'HTTP_HOST': 'example.com'}\n        with self.settings(ALLOWED_HOSTS=['example.com']):\n            self.assertEqual(request.get_host(), 'example.com')\n\n        with self.settings(ALLOWED_HOSTS=['test.com']):\n            with self.assertRaises(DisallowedHost):\n                request.get_host()\n\n    def test_get_port(self):\n        request = HttpRequest()\n        request.META = {'SERVER_PORT': '8000'}\n        self.assertEqual(request.get_port(), '8000')\n\n        request.META = {'HTTP_X_FORWARDED_PORT': '8080'}\n        with self.settings(USE_X_FORWARDED_PORT=True):\n            self.assertEqual(request.get_port(), '8080')\n\n    def test_get_full_path(self):\n        request = HttpRequest()\n        request.path = '/test'\n        request.META = {'QUERY_STRING': 'key=value'}\n        self.assertEqual(request.get_full_path(), '/test?key=value')\n\n    def test_scheme(self):\n        request = HttpRequest()\n        request.META = {'SERVER_PORT': '80'}\n        self.assertEqual(request.scheme, 'http')\n\n        request.META = {'SERVER_PORT': '443'}\n        self.assertEqual(request.scheme, 'http')\n\n        request.META = {'HTTP_X_FORWARDED_PROTO': 'https'}\n        with self.settings(SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTO', 'https')):\n            self.assertEqual(request.scheme, 'https')\n\n    def test_parse_file_upload(self):\n        file_content = b'file content'\n        file = SimpleUploadedFile('test.txt', file_content)\n        data = {'key': 'value', 'file': file}\n        request = self.factory.post('/', data, content_type='multipart/form-data')\n        post, files = request.parse_file_upload(request.META, request)\n        self.assertEqual(post['key'], 'value')\n        self.assertEqual(files['file'].read(), file_content)\n\n    # More tests...\n\nclass TestQueryDict(unittest.TestCase):\n    # Tests for QueryDict class...\n\nclass TestMediaType(unittest.TestCase):\n    # Tests for MediaType class...\n\nclass TestBytesToText(unittest.TestCase):\n    # Tests for bytes_to_text function...\n\nclass TestSplitDomainPort(unittest.TestCase):\n    # Tests for split_domain_port function...\n\nclass TestValidateHost(unittest.TestCase):\n    # Tests for validate_host function...\n\nclass TestParseAcceptHeader(unittest.TestCase):\n    # Tests for parse_accept_header function...\n"], "sample_335": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.urls.resolvers import (\n    ResolverMatch, get_resolver, _get_cached_resolver, get_ns_resolver,\n    LocaleRegexDescriptor, CheckURLMixin, RegexPattern, RoutePattern,\n    LocalePrefixPattern, URLPattern, URLResolver\n)\nfrom django.urls.exceptions import NoReverseMatch, Resolver404\nfrom django.core.checks import Error, Warning\n\nclass TestResolvers(unittest.TestCase):\n    def setUp(self):\n        self.mock_settings = Mock()\n        self.mock_settings.ROOT_URLCONF = 'test_urls'\n        self.mock_settings.LANGUAGE_CODE = 'en'\n        self.mock_settings.APPEND_SLASH = True\n        self.mock_import_module = patch('django.urls.resolvers.import_module').start()\n        self.mock_get_language = patch('django.urls.resolvers.get_language').start()\n        self.mock_get_language.return_value = 'en'\n\n    def tearDown(self):\n        patch.stopall()\n\n    def test_resolver_match(self):\n        mock_func = Mock()\n        resolver_match = ResolverMatch(mock_func, (), {}, url_name='test', app_names=['app'], namespaces=['ns'])\n        self.assertEqual(resolver_match.func, mock_func)\n        self.assertEqual(resolver_match.url_name, 'test')\n\n    def test_get_resolver(self):\n        resolver = get_resolver()\n        self.assertIsInstance(resolver, URLResolver)\n\n    def test_get_cached_resolver(self):\n        resolver1 = _get_cached_resolver()\n        resolver2 = _get_cached_resolver()\n        self.assertIs(resolver1, resolver2)\n\n    def test_get_ns_resolver(self):\n        resolver = get_resolver()\n        ns_resolver = get_ns_resolver('^test/', resolver, {})\n        self.assertIsInstance(ns_resolver, URLResolver)\n\n    def test_locale_regex_descriptor(self):\n        descriptor = LocaleRegexDescriptor('_regex')\n        instance = Mock()\n        instance._regex = 'test'\n        instance._regex_dict = {}\n        instance._compile = Mock()\n        regex = descriptor.__get__(instance)\n        self.assertIn('test', instance._regex_dict)\n\n    def test_check_url_mixin(self):\n        mixin = CheckURLMixin()\n        mixin.regex = Mock()\n        mixin.regex.pattern = '/test/'\n        mixin.name = 'test'\n        warnings = mixin.check()\n        self.assertEqual(len(warnings), 0)\n\n    def test_regex_pattern(self):\n        pattern = RegexPattern(r'^test/')\n        match = pattern.match('/test/path')\n        self.assertEqual(match[0], '/path')\n\n    def test_route_pattern(self):\n        pattern = RoutePattern('/test/<int:pk>')\n        match = pattern.match('/test/123')\n        self.assertEqual(match[2], {'pk': 123})\n\n    def test_locale_prefix_pattern(self):\n        pattern = LocalePrefixPattern()\n        match = pattern.match('en/path')\n        self.assertEqual(match[0], '/path')\n\n    def test_url_pattern(self):\n        mock_callback = Mock()\n        pattern = URLPattern(RegexPattern(r'^test/'), mock_callback, name='test')\n        match = pattern.resolve('/test/path')\n        self.assertEqual(match.func, mock_callback)\n\n    def test_url_resolver(self):\n        resolver = URLResolver(RegexPattern(r'^'), 'test_urls')\n        with self.assertRaises(Resolver404):\n            resolver.resolve('/nonexistent')\n\n    def test_url_resolver_reverse(self):\n        resolver = URLResolver(RegexPattern(r'^'), 'test_urls')\n        with self.assertRaises(NoReverseMatch):\n            resolver.reverse('nonexistent')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_276": ["\nfrom django.contrib.admindocs import views\nfrom django.test import TestCase, RequestFactory\nfrom django.urls import reverse\nfrom django.http import Http404\nfrom django.contrib.auth.models import User\nfrom django.contrib.admindocs.utils import parse_docstring\nfrom unittest.mock import patch, MagicMock\n\nclass TestBaseAdminDocsView(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.user = User.objects.create_user(username='testuser', password='testpassword', is_staff=True)\n\n    def test_dispatch_with_docutils(self):\n        with patch('django.contrib.admindocs.utils.docutils_is_available', new=True):\n            request = self.factory.get('/admindocs/')\n            request.user = self.user\n            response = views.BaseAdminDocsView.as_view()(request)\n            self.assertEqual(response.status_code, 200)\n\n    def test_dispatch_without_docutils(self):\n        with patch('django.contrib.admindocs.utils.docutils_is_available', new=False):\n            request = self.factory.get('/admindocs/')\n            request.user = self.user\n            response = views.BaseAdminDocsView.as_view()(request)\n            self.assertEqual(response.status_code, 200)\n            self.assertEqual(response.template_name[0], 'admin_doc/missing_docutils.html')\n\nclass TestTemplateTagIndexView(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.user = User.objects.create_user(username='testuser', password='testpassword', is_staff=True)\n\n    def test_get_context_data(self):\n        request = self.factory.get('/admindocs/tags/')\n        request.user = self.user\n        response = views.TemplateTagIndexView.as_view()(request)\n        self.assertIsInstance(response.context_data['tags'], list)\n\nclass TestTemplateFilterIndexView(TestCase):\n    # Similar tests for TemplateFilterIndexView\n\nclass TestViewIndexView(TestCase):\n    # Similar tests for ViewIndexView\n\nclass TestViewDetailView(TestCase):\n    # Similar tests for ViewDetailView\n\nclass TestModelIndexView(TestCase):\n    # Similar tests for ModelIndexView\n\nclass TestModelDetailView(TestCase):\n    # Similar tests for ModelDetailView\n\nclass TestTemplateDetailView(TestCase):\n    # Similar tests for TemplateDetailView\n\n# Tests for helper functions\n\nclass TestHelpers(TestCase):\n    def test_get_return_data_type(self):\n        self.assertEqual(views.get_return_data_type('get_list'), 'List')\n        self.assertEqual(views.get_return_data_type('get_count'), 'Integer')\n        self.assertEqual(views.get_return_data_type('get_value'), '')\n\n    def test_simplify_regex(self):\n        self.assertEqual(views.simplify_regex(r'^(?P<sport_slug>\\w+)/athletes/(?P<athlete_slug>\\w+)/$'), '/<sport_slug>/athletes/<athlete_slug>/')\n"], "sample_753": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\nfrom sklearn.exceptions import NotFittedError, ValueError\nfrom scipy import sparse\n\nclass TestEncoders(unittest.TestCase):\n\n    def setUp(self):\n        self.X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        self.X_test = [['Female', 3], ['Male', 1]]\n\n    def test_onehotencoder_fit(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        self.assertEqual(len(enc.categories_), 2)\n        self.assertIsInstance(enc.categories_[0], np.ndarray)\n        self.assertIsInstance(enc.categories_[1], np.ndarray)\n\n    def test_onehotencoder_transform(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        transformed = enc.transform(self.X_test)\n        self.assertIsInstance(transformed, sparse.csr_matrix)\n        self.assertEqual(transformed.shape, (2, 5))\n\n    def test_onehotencoder_inverse_transform(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        transformed = enc.transform(self.X_test)\n        inverse_transformed = enc.inverse_transform(transformed)\n        self.assertEqual(inverse_transformed.tolist(), self.X_test)\n\n    def test_ordinalencoder_fit(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        self.assertEqual(len(enc.categories_), 2)\n        self.assertIsInstance(enc.categories_[0], np.ndarray)\n        self.assertIsInstance(enc.categories_[1], np.ndarray)\n\n    def test_ordinalencoder_transform(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        transformed = enc.transform(self.X_test)\n        self.assertIsInstance(transformed, np.ndarray)\n        self.assertEqual(transformed.shape, (2, 2))\n\n    def test_ordinalencoder_inverse_transform(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        transformed = enc.transform(self.X_test)\n        inverse_transformed = enc.inverse_transform(transformed)\n        self.assertEqual(inverse_transformed.tolist(), self.X_test)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1166": ["\nimport unittest\nfrom sympy import symbols\nfrom sympy.polys.monomials import itermonomials, monomial_count, monomial_mul, monomial_div, monomial_gcd, monomial_lcm, monomial_max, monomial_min, monomial_divides, monomial_pow, Monomial\n\nclass TestMonomials(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n        self.a, self.b = symbols('a b', commutative=False)\n\n    def test_itermonomials(self):\n        self.assertEqual(set(itermonomials([self.x, self.y], 2)), {1, self.x, self.y, self.x**2, self.x*self.y, self.y**2})\n        self.assertEqual(set(itermonomials([self.a, self.b, self.x], 2)), {1, self.a, self.a**2, self.b, self.b**2, self.x, self.x**2, self.a*self.b, self.b*self.a, self.x*self.a, self.x*self.b})\n        self.assertEqual(set(itermonomials([self.x, self.y], 3, 1)), {self.x, self.y, self.x**2, self.x*self.y, self.y**2, self.x**3, self.x**2*self.y, self.x*self.y**2, self.y**3})\n        self.assertEqual(set(itermonomials([self.x, self.y], [2, 4], [1, 2])), {self.x**2*self.y**2, self.x**2*self.y**3, self.x**2*self.y**4, self.x*self.y**3, self.x*self.y**4})\n\n    def test_monomial_count(self):\n        self.assertEqual(monomial_count(2, 2), 6)\n\n    def test_monomial_mul(self):\n        self.assertEqual(monomial_mul((3, 4, 1), (1, 2, 0)), (4, 6, 1))\n\n    def test_monomial_div(self):\n        self.assertEqual(monomial_div((3, 4, 1), (1, 2, 0)), (2, 2, 1))\n        self.assertIsNone(monomial_div((3, 4, 1), (1, 2, 2)))\n\n    def test_monomial_gcd(self):\n        self.assertEqual(monomial_gcd((1, 4, 1), (3, 2, 0)), (1, 2, 0))\n\n    def test_monomial_lcm(self):\n        self.assertEqual(monomial_lcm((1, 4, 1), (3, 2, 0)), (3, 4, 1))\n\n    def test_monomial_max(self):\n        self.assertEqual(monomial_max((3,4,5), (0,5,1), (6,3,9)), (6, 5, 9))\n\n    def test_monomial_min(self):\n        self.assertEqual(monomial_min((3,4,5), (0,5,1), (6,3,9)), (0, 3, 1))\n\n    def test_monomial_divides(self):\n        self.assertTrue(monomial_divides((1, 2), (3, 4)))\n        self.assertFalse(monomial_divides((1, 2), (0, 2)))\n\n    def test_monomial_pow(self):\n        self.assertEqual(monomial_pow((3, 4, 1), 2), (6, 8, 2))\n\n    def test_monomial_class(self):\n        m = Monomial((3, 4, 1), gens=(self.x, self.y, self.z))\n        self.assertEqual(m.as_expr(), self.x**3 * self.y**4 * self.z)\n        self.assertEqual(m * (1, 2, 0), Monomial((4, 6, 1)))\n        self.assertEqual(m / (1, 2, 0), Monomial((2, 2, 1)))\n        self.assertEqual(m ** 2, Monomial((6, 8, 2)))\n        self.assertEqual(m.gcd((1, 4, 1)), Monomial((1, 4, 1)))\n        self.assertEqual(m.lcm((3, 2, 0)), Monomial((3, 4, 1)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_129": ["\nfrom django.test import TestCase\nfrom django.db.models import Index, Q\nfrom django.db import models\nfrom django.db.backends.base.schema import BaseDatabaseSchemaEditor\n\n# Dummy model for testing\nclass DummyModel(models.Model):\n    field1 = models.CharField(max_length=200)\n    field2 = models.IntegerField()\n    field3 = models.BooleanField()\n\n    class Meta:\n        app_label = 'dummy'\n\nclass TestIndex(TestCase):\n    def setUp(self):\n        self.model = DummyModel\n        self.schema_editor = BaseDatabaseSchemaEditor(connection=None)\n\n    def test_init(self):\n        index = Index(fields=['field1'])\n        self.assertEqual(index.fields, ['field1'])\n        self.assertEqual(index.fields_orders, [('field1', '')])\n\n        index = Index(fields=['-field1'])\n        self.assertEqual(index.fields_orders, [('field1', 'DESC')])\n\n        index = Index(fields=['field1', '-field2'], name='test_index')\n        self.assertEqual(index.name, 'test_index')\n        self.assertEqual(index.fields_orders, [('field1', ''), ('field2', 'DESC')])\n\n        with self.assertRaises(ValueError):\n            Index(opclasses=['field1_opclass'])\n\n        with self.assertRaises(ValueError):\n            Index(condition='field1 = 1')\n\n        with self.assertRaises(ValueError):\n            Index(fields=['field1'], condition=Q(field1='test'))\n\n        with self.assertRaises(ValueError):\n            Index(fields=[], name='test_index')\n\n    def test_create_sql(self):\n        index = Index(fields=['field1'])\n        sql = index.create_sql(self.model, self.schema_editor)\n        self.assertIsNotNone(sql)\n\n    def test_remove_sql(self):\n        index = Index(fields=['field1'], name='test_index')\n        sql = index.remove_sql(self.model, self.schema_editor)\n        self.assertIsNotNone(sql)\n\n    def test_deconstruct(self):\n        index = Index(fields=['field1'], name='test_index')\n        path, args, kwargs = index.deconstruct()\n        self.assertEqual(path, 'django.db.models.Index')\n        self.assertEqual(kwargs, {'fields': ['field1'], 'name': 'test_index'})\n\n    def test_clone(self):\n        index = Index(fields=['field1'], name='test_index')\n        cloned_index = index.clone()\n        self.assertEqual(index.deconstruct(), cloned_index.deconstruct())\n\n    def test_set_name_with_model(self):\n        index = Index(fields=['field1'])\n        index.set_name_with_model(self.model)\n        self.assertTrue(index.name.startswith('dummy_model'))\n        self.assertTrue(index.name.endswith('_idx'))\n\n    def test_repr(self):\n        index = Index(fields=['field1'])\n        self.assertEqual(repr(index), \"<Index: fields='field1'>\")\n\n    def test_eq(self):\n        index1 = Index(fields=['field1'], name='test_index')\n        index2 = Index(fields=['field1'], name='test_index')\n        self.assertEqual(index1, index2)\n"], "sample_803": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics import auc, average_precision_score, coverage_error, label_ranking_average_precision_score, precision_recall_curve, label_ranking_loss, roc_auc_score, roc_curve\n\nclass TestRankingMetrics(unittest.TestCase):\n    def setUp(self):\n        self.y_true = np.array([0, 0, 1, 1])\n        self.y_scores = np.array([0.1, 0.4, 0.35, 0.8])\n        self.y_true_multi = np.array([[1, 0, 0], [0, 0, 1]])\n        self.y_score_multi = np.array([[0.75, 0.5, 1], [1, 0.2, 0.1]])\n        self.sample_weight = np.array([1, 1, 2, 1])\n\n    def test_auc(self):\n        x = np.array([0, 1, 2, 3])\n        y = np.array([0, 1, 2, 3])\n        self.assertEqual(auc(x, y), 6.0)\n\n    def test_average_precision_score(self):\n        self.assertAlmostEqual(average_precision_score(self.y_true, self.y_scores), 0.8333333333333334)\n\n    def test_coverage_error(self):\n        self.assertAlmostEqual(coverage_error(self.y_true_multi, self.y_score_multi), 2.0)\n\n    def test_label_ranking_average_precision_score(self):\n        self.assertAlmostEqual(label_ranking_average_precision_score(self.y_true_multi, self.y_score_multi), 0.4166666666666667)\n\n    def test_precision_recall_curve(self):\n        precision, recall, thresholds = precision_recall_curve(self.y_true, self.y_scores)\n        self.assertTrue(np.allclose(precision, np.array([0.66666667, 0.5, 1.0, 1.0])))\n\n    def test_label_ranking_loss(self):\n        self.assertAlmostEqual(label_ranking_loss(self.y_true_multi, self.y_score_multi), 0.85)\n\n    def test_roc_auc_score(self):\n        self.assertAlmostEqual(roc_auc_score(self.y_true, self.y_scores), 0.75)\n\n    def test_roc_curve(self):\n        fpr, tpr, thresholds = roc_curve(self.y_true, self.y_scores)\n        self.assertTrue(np.allclose(fpr, np.array([0., 0., 0.5, 0.5, 1.])))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_28": ["\nimport unittest\nfrom astropy.io.fits.card import Card, _int_or_float, _format_value, _pad\n\nclass TestCard(unittest.TestCase):\n    def test_int_or_float(self):\n        self.assertEqual(_int_or_float(\"123\"), 123)\n        self.assertEqual(_int_or_float(\"123.456\"), 123.456)\n        self.assertEqual(_int_or_float(123), 123)\n        self.assertEqual(_int_or_float(123.456), 123.456)\n        with self.assertRaises(ValueError):\n            _int_or_float(\"abc\")\n\n    def test_format_value(self):\n        self.assertEqual(_format_value(\"test\"), \"'test'        \")\n        self.assertEqual(_format_value(True), \"                    T\")\n        self.assertEqual(_format_value(123), \"                 123\")\n        self.assertEqual(_format_value(123.456), \"         1.23456E+02\")\n        self.assertEqual(_format_value(123 + 456j), \"(1.23456E+02, 4.56000E+02)\")\n        self.assertEqual(_format_value(None), \"\")\n\n    def test_pad(self):\n        self.assertEqual(_pad(\"test\"), \"test\" + \" \" * 76)\n        self.assertEqual(_pad(\"test\" * 10), \"test\" * 10 + \" \" * 20)\n        self.assertEqual(_pad(\"test\" * 20), \"test\" * 20)\n\n    def test_card_init(self):\n        card = Card(\"TEST\", 123, \"comment\")\n        self.assertEqual(card.keyword, \"TEST\")\n        self.assertEqual(card.value, 123)\n        self.assertEqual(card.comment, \"comment\")\n\n    def test_card_image(self):\n        card = Card(\"TEST\", 123, \"comment\")\n        self.assertEqual(card.image, \"TEST            =                  123 / comment        \")\n\n    def test_card_verify(self):\n        card = Card(\"TEST\", 123, \"comment\")\n        self.assertEqual(card.verify(), [])\n        card = Card(\"TEST\", \"invalid value\", \"comment\")\n        self.assertNotEqual(card.verify(), [])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_876": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model import BayesianRidge, ARDRegression\n\nclass TestBayesianLinearModels(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[0, 0], [1, 1], [2, 2]])\n        self.y = np.array([0, 1, 2])\n\n    def test_bayesian_ridge_fit(self):\n        br = BayesianRidge()\n        br.fit(self.X, self.y)\n        self.assertEqual(br.coef_.shape, (2,))\n        self.assertIsInstance(br.alpha_, float)\n        self.assertIsInstance(br.lambda_, float)\n        self.assertEqual(br.sigma_.shape, (2, 2))\n\n    def test_bayesian_ridge_predict(self):\n        br = BayesianRidge()\n        br.fit(self.X, self.y)\n        y_mean = br.predict(np.array([[1, 1]]))\n        self.assertEqual(y_mean.shape, (1,))\n        y_mean, y_std = br.predict(np.array([[1, 1]]), return_std=True)\n        self.assertEqual(y_mean.shape, (1,))\n        self.assertEqual(y_std.shape, (1,))\n\n    def test_ard_regression_fit(self):\n        ard = ARDRegression()\n        ard.fit(self.X, self.y)\n        self.assertEqual(ard.coef_.shape, (2,))\n        self.assertIsInstance(ard.alpha_, float)\n        self.assertEqual(ard.lambda_.shape, (2,))\n        self.assertIsInstance(ard.sigma_, np.ndarray)\n\n    def test_ard_regression_predict(self):\n        ard = ARDRegression()\n        ard.fit(self.X, self.y)\n        y_mean = ard.predict(np.array([[1, 1]]))\n        self.assertEqual(y_mean.shape, (1,))\n        y_mean, y_std = ard.predict(np.array([[1, 1]]), return_std=True)\n        self.assertEqual(y_mean.shape, (1,))\n        self.assertEqual(y_std.shape, (1,))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_511": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nimport matplotlib as mpl\nfrom matplotlib import pyplot as plt\nfrom matplotlib._api import MatplotlibDeprecationWarning\n\nclass TestPyplotFunctions(unittest.TestCase):\n\n    def setUp(self):\n        # Set up any necessary mock objects or state here\n        pass\n\n    def test_figure(self):\n        fig = plt.figure()\n        self.assertIsInstance(fig, mpl.figure.Figure)\n\n    def test_close(self):\n        fig = plt.figure()\n        plt.close(fig)\n        # Add assertions to verify that the figure is closed\n\n    def test_draw(self):\n        fig = plt.figure()\n        plt.draw()\n        # Add assertions to verify that the figure is drawn\n\n    def test_savefig(self):\n        fig = plt.figure()\n        plt.savefig('test.png')\n        # Add assertions to verify that the figure is saved\n\n    # Add more test methods for other functions in pyplot.py\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_677": ["\nimport unittest\nimport pytest\nfrom unittest.mock import MagicMock, patch\nfrom _pytest.terminal import TerminalReporter, getreportopt, _folded_skips, _get_line_with_reprcrash_message, _plugin_nameversions, build_summary_stats_line\nfrom _pytest.nodes import Item\nfrom _pytest.config import Config\nfrom _pytest.reports import TestReport\n\nclass TestTerminalReporter(unittest.TestCase):\n    def setUp(self):\n        self.config = Config()\n        self.reporter = TerminalReporter(self.config)\n\n    def test_getreportopt(self):\n        self.config.option.reportchars = 'fEx'\n        self.config.option.disable_warnings = False\n        self.assertEqual(getreportopt(self.config), 'fExw')\n\n        self.config.option.disable_warnings = True\n        self.assertEqual(getreportopt(self.config), 'fEx')\n\n    def test_folded_skips(self):\n        skipped = [MagicMock(longrepr=('file1.py', 10, 'reason1')),\n                   MagicMock(longrepr=('file1.py', 10, 'reason1')),\n                   MagicMock(longrepr=('file2.py', 20, 'reason2'))]\n        self.assertEqual(_folded_skips(skipped), [(2, 'file1.py', 10, 'reason1'), (1, 'file2.py', 20, 'reason2')])\n\n    def test_get_line_with_reprcrash_message(self):\n        rep = TestReport(nodeid='test_node', longrepr='longrepr_message', when='call')\n        rep._get_verbose_word = MagicMock(return_value='FAILED')\n        self.config.cwd_relative_nodeid = MagicMock(return_value='test_node')\n        self.assertEqual(_get_line_with_reprcrash_message(self.config, rep, 80), 'FAILED test_node - longrepr_message')\n\n    def test_plugin_nameversions(self):\n        plugininfo = [('plugin1', MagicMock(project_name='pytest-plugin1', version='1.0')),\n                      ('plugin2', MagicMock(project_name='plugin2', version='2.0'))]\n        self.assertEqual(_plugin_nameversions(plugininfo), ['plugin1-1.0', 'plugin2-2.0'])\n\n    def test_build_summary_stats_line(self):\n        stats = {'failed': [1, 2, 3], 'passed': [4, 5], 'unknown': [6]}\n        self.assertEqual(build_summary_stats_line(stats), ('3 failed, 2 passed, 1 unknown', 'red'))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_151": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db.models.deletion import Collector, ProtectedError, RestrictedError, CASCADE, PROTECT, RESTRICT, SET_NULL, SET_DEFAULT, DO_NOTHING\nfrom django.db import IntegrityError\nfrom django.db.models import query_utils, signals\n\nclass TestDeletion(unittest.TestCase):\n\n    def setUp(self):\n        # Setup mock data for testing\n        self.mock_model = MagicMock()\n        self.mock_obj = MagicMock()\n        self.mock_obj.pk = 1\n        self.mock_obj._class_ = self.mock_model\n        self.mock_related = MagicMock()\n        self.mock_related.related_model = self.mock_model\n        self.mock_related.field.remote_field.on_delete = CASCADE\n        self.mock_opts = MagicMock()\n        self.mock_opts.get_fields.return_value = [self.mock_related]\n        self.mock_model._meta = self.mock_opts\n        self.collector = Collector('default')\n\n    def test_collector_init(self):\n        self.assertEqual(self.collector.using, 'default')\n\n    def test_add(self):\n        new_objs = self.collector.add([self.mock_obj])\n        self.assertEqual(len(new_objs), 1)\n\n    def test_collect(self):\n        with self.assertRaises(ProtectedError):\n            self.mock_related.field.remote_field.on_delete = PROTECT\n            self.collector.collect([self.mock_obj])\n\n        with self.assertRaises(RestrictedError):\n            self.mock_related.field.remote_field.on_delete = RESTRICT\n            self.collector.collect([self.mock_obj])\n\n    @patch('django.db.models.deletion.sql.DeleteQuery')\n    def test_delete(self, mock_delete_query):\n        self.collector.add([self.mock_obj])\n        self.collector.delete()\n        mock_delete_query.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_247": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.db.models.sql.query import Query, JoinInfo\n\nclass TestQueryMethods(unittest.TestCase):\n    def setUp(self):\n        self.query = Query(MagicMock())\n\n    def test_add_filter(self):\n        self.query.add_filter(('name', 'Test'))\n        self.assertEqual(self.query.where.children[0].children[0].rhs, 'Test')\n\n    def test_add_q(self):\n        q_object = MagicMock(connector='AND', negated=False, children=[('name', 'Test')])\n        self.query._add_q(q_object)\n        self.assertEqual(self.query.where.children[0].children[0].rhs, 'Test')\n\n    def test_build_filter(self):\n        filter_expr = ('name', 'Test')\n        clause, _ = self.query.build_filter(filter_expr)\n        self.assertEqual(clause.children[0].rhs, 'Test')\n\n    def test_setup_joins(self):\n        names = ['user', 'profile']\n        opts = MagicMock()\n        alias = 'alias'\n        join_info = self.query.setup_joins(names, opts, alias)\n        self.assertIsInstance(join_info, JoinInfo)\n\n    def test_set_limits(self):\n        self.query.set_limits(low=10, high=20)\n        self.assertEqual(self.query.low_mark, 10)\n        self.assertEqual(self.query.high_mark, 20)\n\n    def test_clear_limits(self):\n        self.query.set_limits(low=10, high=20)\n        self.query.clear_limits()\n        self.assertEqual(self.query.low_mark, 0)\n        self.assertEqual(self.query.high_mark, None)\n\n    def test_add_ordering(self):\n        self.query.add_ordering('-name')\n        self.assertEqual(self.query.order_by[0], '-name')\n\n    def test_clear_ordering(self):\n        self.query.add_ordering('-name')\n        self.query.clear_ordering(force_empty=True)\n        self.assertEqual(self.query.order_by, ())\n        self.assertFalse(self.query.default_ordering)\n\n    def test_set_group_by(self):\n        self.query.set_select(['name'])\n        self.query.set_group_by()\n        self.assertEqual(self.query.group_by[0].target.name, 'name')\n\n    def test_add_select_related(self):\n        self.query.add_select_related(['user', 'profile'])\n        self.assertEqual(self.query.select_related, {'user': {}, 'profile': {}})\n\n    def test_add_extra(self):\n        self.query.add_extra(select={'extra': '1'}, select_params=None, where=None, params=None, tables=None, order_by=None)\n        self.assertEqual(self.query.extra['extra'][0], '1')\n\n    def test_add_deferred_loading(self):\n        self.query.add_deferred_loading(['name'])\n        self.assertEqual(self.query.deferred_loading[0], {'name'})\n\n    def test_add_immediate_loading(self):\n        self.query.add_immediate_loading(['name'])\n        self.assertEqual(self.query.deferred_loading[0], {'name'})\n        self.assertFalse(self.query.deferred_loading[1])\n\n    def test_get_loaded_field_names(self):\n        self.query.add_immediate_loading(['name'])\n        loaded_fields = self.query.get_loaded_field_names()\n        self.assertIn(self.query.model, loaded_fields)\n        self.assertIn('name', loaded_fields[self.query.model])\n\n    def test_set_values(self):\n        self.query.set_values(['name'])\n        self.assertEqual(self.query.values_select[0], 'name')\n\n    def test_trim_start(self):\n        self.query._lookup_joins = ['alias1', 'alias2']\n        self.query.alias_map = {'alias1': MagicMock(join_type='LOUTER'), 'alias2': MagicMock(join_type='INNER')}\n        names_with_path = [('user', [MagicMock(m2m=True)])]\n        trimmed_prefix, contains_louter = self.query.trim_start(names_with_path)\n        self.assertEqual(trimmed_prefix, 'user')\n        self.assertTrue(contains_louter)\n\n    def test_is_nullable(self):\n        field = MagicMock(null=True)\n        self.assertTrue(self.query.is_nullable(field))\n        field = MagicMock(null=False)\n        self.assertFalse(self.query.is_nullable(field))\n"], "sample_712": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection._validation import _check_is_permutation\nfrom sklearn.model_selection._validation import _fit_and_score\nfrom sklearn.metrics import make_scorer, mean_squared_error\n\nclass TestValidation(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n        self.y = np.array([1, 2, 3, 4])\n        self.estimator = LinearRegression()\n\n    def test_cross_val_score(self):\n        scores = cross_val_score(self.estimator, self.X, self.y, cv=2)\n        self.assertEqual(len(scores), 2)\n\n    def test_check_is_permutation(self):\n        indices = np.array([3, 0, 2, 1])\n        self.assertTrue(_check_is_permutation(indices, 4))\n\n    def test_fit_and_score(self):\n        scorer = make_scorer(mean_squared_error, greater_is_better=False)\n        train = np.array([0, 1])\n        test = np.array([2, 3])\n        result = _fit_and_score(self.estimator, self.X, self.y, scorer, train, test, 0, None, None)\n        self.assertIsInstance(result, float)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_544": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nimport numpy as np\nfrom PIL import Image\nfrom matplotlib import colors, image as mimage, pyplot as plt\nfrom matplotlib.image import AxesImage, BboxImage, FigureImage, NonUniformImage, PcolorImage\nfrom matplotlib.testing.decorators import check_figures_equal\n\nclass TestImageModule(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.data = np.random.rand(10, 10)\n\n    def test_AxesImage(self):\n        img = AxesImage(self.ax, cmap='viridis', norm=colors.Normalize())\n        img.set_data(self.data)\n        self.assertIsInstance(img, AxesImage)\n        self.assertTrue(np.array_equal(img.get_array(), self.data))\n\n    def test_BboxImage(self):\n        bbox = mimage.Bbox([[0, 0], [1, 1]])\n        img = BboxImage(bbox, cmap='viridis', norm=colors.Normalize())\n        img.set_data(self.data)\n        self.assertIsInstance(img, BboxImage)\n        self.assertTrue(np.array_equal(img.get_array(), self.data))\n\n    def test_FigureImage(self):\n        img = FigureImage(self.fig, cmap='viridis', norm=colors.Normalize())\n        img.set_data(self.data)\n        self.assertIsInstance(img, FigureImage)\n        self.assertTrue(np.array_equal(img.get_array(), self.data))\n\n    def test_NonUniformImage(self):\n        x = np.linspace(0, 1, 10)\n        y = np.linspace(0, 1, 10)\n        img = NonUniformImage(self.ax, cmap='viridis', norm=colors.Normalize())\n        img.set_data(x, y, self.data)\n        self.assertIsInstance(img, NonUniformImage)\n        self.assertTrue(np.array_equal(img.get_array(), self.data))\n\n    def test_PcolorImage(self):\n        x = np.linspace(0, 1, 11)\n        y = np.linspace(0, 1, 11)\n        img = PcolorImage(self.ax, cmap='viridis', norm=colors.Normalize())\n        img.set_data(x, y, self.data)\n        self.assertIsInstance(img, PcolorImage)\n        self.assertTrue(np.array_equal(img.get_array(), self.data))\n\n    @patch('matplotlib.pyplot.show')\n    def test_imread(self, mock_show):\n        # Create a test image and save it as a PNG file\n        test_image = Image.fromarray(np.uint8(self.data * 255))\n        test_image.save('test_image.png')\n\n        # Test imread function\n        img_data = mimage.imread('test_image.png')\n        self.assertTrue(np.array_equal(img_data, self.data * 255))\n\n    @patch('matplotlib.pyplot.savefig')\n    def test_imsave(self, mock_savefig):\n        # Test imsave function\n        mimage.imsave('test_output.png', self.data)\n        mock_savefig.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_545": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nimport numpy as np\nfrom matplotlib.figure import Figure, SubFigure, figaspect\nfrom matplotlib.testing.decorators import image_comparison\n\nclass TestFigure(unittest.TestCase):\n\n    def setUp(self):\n        self.figure = Figure()\n\n    def test_init(self):\n        self.assertIsNotNone(self.figure.patch)\n        self.assertIsNotNone(self.figure.canvas)\n\n    def test_set_dpi(self):\n        self.figure.set_dpi(200)\n        self.assertEqual(self.figure.dpi, 200)\n\n    def test_get_size_inches(self):\n        self.figure.set_size_inches(5, 7)\n        np.testing.assert_array_equal(self.figure.get_size_inches(), np.array([5, 7]))\n\n    def test_add_axes(self):\n        ax = self.figure.add_axes([0.1, 0.1, 0.8, 0.8])\n        self.assertIsInstance(ax, Axes)\n\n    # Add more tests for other methods as needed\n\nclass TestSubFigure(unittest.TestCase):\n\n    def setUp(self):\n        self.figure = Figure()\n        self.subplotspec = self.figure.add_gridspec(1, 1)[0]\n        self.subfigure = SubFigure(self.figure, self.subplotspec)\n\n    def test_init(self):\n        self.assertIsNotNone(self.subfigure.patch)\n\n    def test_set_dpi(self):\n        self.figure.set_dpi(200)\n        self.assertEqual(self.subfigure.dpi, 200)\n\n    # Add more tests for other methods as needed\n\nclass TestFigAspect(unittest.TestCase):\n\n    def test_figaspect_float(self):\n        width, height = figaspect(2.0)\n        self.assertEqual(height / width, 2.0)\n\n    def test_figaspect_array(self):\n        A = np.random.rand(5, 3)\n        width, height = figaspect(A)\n        self.assertEqual(height / width, 5 / 3)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_639": ["\nimport unittest\nfrom unittest.mock import Mock, patch\n\nimport astroid\nfrom astroid import nodes\n\nfrom pylint.checkers import utils\n\nclass TestUtils(unittest.TestCase):\n    def setUp(self):\n        self.node = nodes.NodeNG()\n        self.scope = nodes.NodeNG()\n\n    @patch('pylint.checkers.utils.is_defined_in_scope')\n    def test_is_default_argument(self, mock_defined_in_scope):\n        mock_defined_in_scope.return_value = True\n        self.assertTrue(utils.is_default_argument(self.node, self.scope))\n\n        mock_defined_in_scope.return_value = False\n        self.assertFalse(utils.is_default_argument(self.node, self.scope))\n\n    @patch('pylint.checkers.utils.isinstance')\n    def test_is_func_decorator(self, mock_isinstance):\n        mock_isinstance.return_value = True\n        self.assertTrue(utils.is_func_decorator(self.node))\n\n        mock_isinstance.return_value = False\n        self.assertFalse(utils.is_func_decorator(self.node))\n\n    @patch('pylint.checkers.utils.isinstance')\n    @patch('pylint.checkers.utils.any')\n    def test_overrides_a_method(self, mock_any, mock_isinstance):\n        class_node = nodes.ClassDef()\n        name = 'test'\n        mock_isinstance.return_value = True\n        mock_any.return_value = True\n        self.assertTrue(utils.overrides_a_method(class_node, name))\n\n        mock_isinstance.return_value = False\n        self.assertFalse(utils.overrides_a_method(class_node, name))\n\n    @patch('pylint.checkers.utils.safe_infer')\n    def test_is_protocol_class(self, mock_safe_infer):\n        mock_safe_infer.return_value = nodes.ClassDef()\n        cls = nodes.ClassDef()\n        self.assertTrue(utils.is_protocol_class(cls))\n\n        mock_safe_infer.return_value = None\n        self.assertFalse(utils.is_protocol_class(cls))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_697": ["\nimport unittest\nimport logging\nfrom unittest.mock import patch, MagicMock, Mock\nfrom io import StringIO\nfrom _pytest.logging import ColoredLevelFormatter, PercentStyleMultiline, LogCaptureHandler, _remove_ansi_escape_sequences, LogCaptureFixture\nfrom _pytest._io import TerminalWriter\n\nclass TestLoggingModule(unittest.TestCase):\n    def setUp(self):\n        self.terminal_writer = Mock(spec=TerminalWriter)\n\n    def test_remove_ansi_escape_sequences(self):\n        self.assertEqual(_remove_ansi_escape_sequences('\\x1b[31mHello, World!\\x1b[0m'), 'Hello, World!')\n\n    def test_colored_level_formatter_init(self):\n        formatter = ColoredLevelFormatter(self.terminal_writer, fmt='%(levelname)s: %(message)s')\n        self.assertIsInstance(formatter, logging.Formatter)\n\n    def test_percent_style_multiline_format(self):\n        style = PercentStyleMultiline(fmt='%(message)s', auto_indent=0)\n        record = logging.LogRecord('test', logging.INFO, 'pathname', 1, 'Test message\\nwith newline', [], None)\n        self.assertEqual(style.format(record), 'Test message\\nwith newline')\n\n    def test_log_capture_handler_emit(self):\n        handler = LogCaptureHandler()\n        record = logging.LogRecord('test', logging.INFO, 'pathname', 1, 'Test message', [], None)\n        handler.emit(record)\n        self.assertEqual(len(handler.records), 1)\n        self.assertEqual(handler.records[0].message, 'Test message')\n\n    def test_log_capture_fixture_set_level(self):\n        item = Mock()\n        item._store = {}\n        fixture = LogCaptureFixture(item)\n        fixture.handler = Mock()\n        fixture.set_level(logging.DEBUG, 'test_logger')\n        self.assertEqual(fixture.handler.setLevel.call_count, 1)\n"], "sample_423": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.state import ProjectState\n\nclass TestMigrationAutodetector(unittest.TestCase):\n    def setUp(self):\n        self.from_state = ProjectState()\n        self.to_state = ProjectState()\n        self.autodetector = MigrationAutodetector(self.from_state, self.to_state)\n\n    def test_check_dependency(self):\n        # Test the check_dependency method with various inputs\n        # This will cover the different cases in the method\n        pass\n\n    def test_add_operation(self):\n        # Test the add_operation method with different types of operations\n        # This will cover the dependency handling and operation addition\n        pass\n\n    def test_generate_renamed_models(self):\n        # Test the generate_renamed_models method with different model rename scenarios\n        # This will cover the model renaming logic and operation generation\n        pass\n\n    def test_generate_created_models(self):\n        # Test the generate_created_models method with different model creation scenarios\n        # This will cover the model creation logic and operation generation for fields and options\n        pass\n\n    def test_generate_deleted_models(self):\n        # Test the generate_deleted_models method with different model deletion scenarios\n        # This will cover the model deletion logic and operation generation for fields and options\n        pass\n\n    def test_generate_added_fields(self):\n        # Test the generate_added_fields method with different field addition scenarios\n        # This will cover the field addition logic and operation generation for different field types\n        pass\n\n    def test_generate_removed_fields(self):\n        # Test the generate_removed_fields method with different field removal scenarios\n        # This will cover the field removal logic and operation generation\n        pass\n\n    def test_generate_altered_fields(self):\n        # Test the generate_altered_fields method with different field alteration scenarios\n        # This will cover the field alteration logic and operation generation for different field types\n        pass\n\n    def test_generate_altered_options(self):\n        # Test the generate_altered_options method with different model option alteration scenarios\n        # This will cover the model option alteration logic and operation generation\n        pass\n\n    def test_arrange_for_graph(self):\n        # Test the arrange_for_graph method with different migration graph scenarios\n        # This will cover the migration naming and dependency adjustment logic\n        pass\n\n    def test_trim_to_apps(self):\n        # Test the _trim_to_apps method with different app trimming scenarios\n        # This will cover the migration trimming logic based on the provided app labels\n        pass\n\n    def test_parse_number(self):\n        # Test the parse_number method with different migration name formats\n        # This will cover the migration number extraction logic\n        pass\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_915": ["\nimport unittest\nfrom sphinx.domains.cpp import DefinitionParser, DefinitionError, NoOldIdError, Symbol\n\nclass TestCppDomain(unittest.TestCase):\n    def setUp(self):\n        # Set up any objects that you will need for your tests here\n        self.parser = DefinitionParser(\"test_signature\", location=\"test_location\")\n\n    def test_definition_parser_success(self):\n        # Test that the parser can correctly parse a valid C++ signature\n        result = self.parser.parse_expression()\n        self.assertIsNotNone(result)\n\n    def test_definition_parser_failure(self):\n        # Test that the parser raises an exception for an invalid C++ signature\n        with self.assertRaises(DefinitionError):\n            self.parser.parse_expression()\n\n    def test_symbol_get_id(self):\n        # Test that the Symbol.get_id method returns the correct ID for a symbol\n        symbol = Symbol(parent=None, identOrOp=\"test_ident\", templateParams=None, templateArgs=None, declaration=None, docname=\"test_docname\")\n        self.assertEqual(symbol.get_id(version=1), \"test_docname_1\")\n\n    def test_symbol_get_old_id(self):\n        # Test that the Symbol.get_old_id method returns the correct old ID for a symbol\n        symbol = Symbol(parent=None, identOrOp=\"test_ident\", templateParams=None, templateArgs=None, declaration=None, docname=\"test_docname\")\n        self.assertEqual(symbol.get_old_id(version=1), \"test_docname\")\n\n    def test_symbol_get_old_id_no_old_id(self):\n        # Test that the Symbol.get_old_id method raises a NoOldIdError when there is no old ID for a symbol\n        symbol = Symbol(parent=None, identOrOp=\"test_ident\", templateParams=None, templateArgs=None, declaration=None, docname=\"test_docname\")\n        with self.assertRaises(NoOldIdError):\n            symbol.get_old_id(version=2)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1169": ["\nimport unittest\nfrom sympy import symbols, Function, Dummy, Add, Mul, S, KroneckerDelta, Sqrt, Rational\nfrom sympy.physics.secondquant import (\n    Dagger, Bd, VarBosonicBasis, BBra, B, BKet, FixedBosonicBasis, matrix_rep, apply_operators,\n    InnerProduct, Commutator, KroneckerDelta, AnnihilateBoson, CreateBoson, BosonicOperator,\n    F, Fd, FKet, BosonState, CreateFermion, AnnihilateFermion, evaluate_deltas, AntiSymmetricTensor,\n    contraction, NO, wicks, PermutationOperator, simplify_index_permutations, _sort_anticommuting_fermions,\n    _get_ordered_dummies, substitute_dummies, FockStateBosonKet, ContractionAppliesOnlyToFermions\n)\n\nclass TestSecondQuantization(unittest.TestCase):\n\n    def setUp(self):\n        self.p, self.q, self.r = symbols('p q r')\n        self.a, self.b = symbols('a b', above_fermi=True)\n        self.i, self.j = symbols('i j', below_fermi=True)\n        self.f = Function('f')\n\n    def test_dagger(self):\n        self.assertEqual(Dagger(2*S.ImaginaryUnit), -2*S.ImaginaryUnit)\n        self.assertEqual(Dagger(B(0)), CreateBoson(0))\n        self.assertEqual(Dagger(Bd(0)), AnnihilateBoson(0))\n\n    def test_contraction(self):\n        self.assertEqual(contraction(F(self.a), Fd(self.b)), KroneckerDelta(self.a, self.b))\n        self.assertEqual(contraction(Fd(self.i), F(self.j)), KroneckerDelta(self.i, self.j))\n        self.assertEqual(contraction(Fd(self.p), F(self.q)),\n                         KroneckerDelta(Dummy('i', below_fermi=True), self.q)*KroneckerDelta(self.p, self.q))\n        self.assertEqual(contraction(F(self.p), Fd(self.q)),\n                         KroneckerDelta(Dummy('a', above_fermi=True), self.q)*KroneckerDelta(self.p, self.q))\n        self.assertRaises(ContractionAppliesOnlyToFermions, contraction, B(0), Bd(0))\n\n    # Add more tests for other functions and methods\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_658": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom _pytest.junitxml import LogXML, mangle_test_address, bin_xml_escape\n\nclass TestJunitXml(unittest.TestCase):\n\n    def setUp(self):\n        self.log_xml = LogXML('/tmp/test.xml', prefix='test_prefix')\n\n    def test_mangle_test_address(self):\n        address = 'path::to::test_function[param1]'\n        expected_result = ['path.to.test_function[param1]']\n        self.assertEqual(mangle_test_address(address), expected_result)\n\n    def test_bin_xml_escape(self):\n        self.assertEqual(bin_xml_escape('<tag>'), '&lt;tag&gt;')\n        self.assertEqual(bin_xml_escape('test'), 'test')\n\n    @patch('_pytest.junitxml.LogXML._get_global_properties_node')\n    @patch('_pytest.junitxml.Junit.testsuites')\n    @patch('os.path.isdir')\n    @patch('builtins.open')\n    def test_pytest_sessionfinish(self, mock_open, mock_isdir, mock_testsuites, mock_get_global_properties_node):\n        mock_isdir.return_value = True\n        mock_testsuites.return_value = 'test_suites'\n        mock_get_global_properties_node.return_value = 'global_properties'\n        self.log_xml.stats = {'passed': 1, 'failure': 0, 'skipped': 0, 'error': 0}\n        self.log_xml.pytest_sessionfinish()\n        mock_open.assert_called_once_with('/tmp/test.xml', 'w', encoding='utf-8')\n        mock_open.return_value.write.assert_any_call('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n\n    # Add more tests for other functions as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_797": ["\nimport unittest\nimport numpy as np\nfrom scipy import sparse\nfrom sklearn.linear_model.ridge import ridge_regression, Ridge, _RidgeGCV, RidgeCV, RidgeClassifier, RidgeClassifierCV, _solve_cholesky, _solve_cholesky_kernel\nfrom sklearn.datasets import make_regression, load_iris\n\nclass TestRidgeRegression(unittest.TestCase):\n\n    def setUp(self):\n        self.X, self.y = make_regression(n_samples=100, n_features=20, noise=0.1, random_state=42)\n\n    def test_ridge_regression(self):\n        coef = ridge_regression(self.X, self.y, alpha=1.0)\n        self.assertEqual(coef.shape, (20,))\n\n    def test_Ridge(self):\n        model = Ridge(alpha=1.0)\n        model.fit(self.X, self.y)\n        self.assertEqual(model.coef_.shape, (20,))\n\n    def test_RidgeCV(self):\n        model = RidgeCV(alphas=[0.1, 1.0, 10.0])\n        model.fit(self.X, self.y)\n        self.assertIn(model.alpha_, [0.1, 1.0, 10.0])\n\n    def test_RidgeClassifier(self):\n        iris = load_iris()\n        model = RidgeClassifier(alpha=1.0)\n        model.fit(iris.data, iris.target)\n        self.assertEqual(model.coef_.shape, (3, 4))\n\n    def test_RidgeClassifierCV(self):\n        iris = load_iris()\n        model = RidgeClassifierCV(alphas=[0.1, 1.0, 10.0])\n        model.fit(iris.data, iris.target)\n        self.assertIn(model.alpha_, [0.1, 1.0, 10.0])\n\n    def test_solve_cholesky(self):\n        coef = _solve_cholesky(self.X, self.y, alpha=1.0)\n        self.assertEqual(coef.shape, (1, 20))\n\n    def test_solve_cholesky_kernel(self):\n        K = np.dot(self.X, self.X.T)\n        dual_coef = _solve_cholesky_kernel(K, self.y, alpha=1.0)\n        self.assertEqual(dual_coef.shape, (100,))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1188": ["\nimport unittest\nfrom sympy import symbols, sin, cos, Matrix\nfrom sympy.printing.pretty import pretty\n\nclass TestPrettyPrinting(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_pretty_print_simple_expression(self):\n        expr = sin(self.x) + cos(self.y)\n        result = pretty(expr)\n        self.assertIsInstance(result, str)\n\n    def test_pretty_print_matrix(self):\n        mat = Matrix([[1, 2], [3, 4]])\n        result = pretty(mat)\n        self.assertIsInstance(result, str)\n\n    def test_pretty_print_complex_expression(self):\n        expr = (sin(self.x) + cos(self.y))**2\n        result = pretty(expr)\n        self.assertIsInstance(result, str)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_101": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock, PropertyMock, mock_open\nfrom django.utils import autoreload\nfrom django.utils.autoreload import WatchmanReloader, StatReloader, WatchmanUnavailable\n\nclass TestDjangoAutoreload(unittest.TestCase):\n    @patch('django.utils.autoreload.sys')\n    @patch('django.utils.autoreload.traceback')\n    def test_check_errors(self, mock_traceback, mock_sys):\n        mock_sys.exc_info.return_value = ('type', 'value', 'traceback')\n        mock_traceback.extract_tb.return_value = [('filename', 'line_no', 'function_name', 'text')]\n\n        @autoreload.check_errors\n        def test_func():\n            raise Exception()\n\n        with self.assertRaises(Exception):\n            test_func()\n\n    @patch('django.utils.autoreload.pywatchman')\n    def test_watchman_availability(self, mock_pywatchman):\n        mock_pywatchman.client = MagicMock()\n        mock_pywatchman.client.return_value.capabilityCheck.return_value = {'version': '4.9'}\n\n        self.assertTrue(WatchmanReloader.check_availability())\n\n        mock_pywatchman.client.return_value.capabilityCheck.return_value = {'version': '4.8'}\n\n        with self.assertRaises(WatchmanUnavailable):\n            WatchmanReloader.check_availability()\n\n    @patch('django.utils.autoreload.sys')\n    @patch('django.utils.autoreload.time.sleep')\n    def test_stat_reloader(self, mock_sleep, mock_sys):\n        mock_sys.path = ['/tmp']\n        reloader = StatReloader()\n        reloader.tick()\n        reloader.stop()\n\n    @patch('django.utils.autoreload.pywatchman')\n    @patch('django.utils.autoreload.sys')\n    @patch('django.utils.autoreload.time.sleep')\n    def test_watchman_reloader(self, mock_sleep, mock_sys, mock_pywatchman):\n        mock_sys.path = ['/tmp']\n        reloader = WatchmanReloader()\n        reloader.tick()\n        reloader.stop()\n"], "sample_847": ["\nimport unittest\nimport numpy as np\nfrom sklearn.metrics.regression import *\n\nclass TestRegressionMetrics(unittest.TestCase):\n\n    def setUp(self):\n        self.y_true = np.array([3, -0.5, 2, 7])\n        self.y_pred = np.array([2.5, 0.0, 2, 8])\n        self.y_true_multioutput = np.array([[0.5, 1], [-1, 1], [7, -6]])\n        self.y_pred_multioutput = np.array([[0, 2], [-1, 2], [8, -5]])\n        self.sample_weight = np.array([1, 2, 3, 4])\n\n    def test_mean_absolute_error(self):\n        self.assertAlmostEqual(mean_absolute_error(self.y_true, self.y_pred), 0.5)\n        self.assertIsInstance(mean_absolute_error(self.y_true_multioutput, self.y_pred_multioutput), np.ndarray)\n        self.assertIsInstance(mean_absolute_error(self.y_true_multioutput, self.y_pred_multioutput, multioutput='uniform_average'), float)\n\n    def test_mean_squared_error(self):\n        self.assertAlmostEqual(mean_squared_error(self.y_true, self.y_pred), 0.375)\n        self.assertIsInstance(mean_squared_error(self.y_true_multioutput, self.y_pred_multioutput), np.ndarray)\n        self.assertIsInstance(mean_squared_error(self.y_true_multioutput, self.y_pred_multioutput, multioutput='uniform_average'), float)\n\n    def test_mean_squared_log_error(self):\n        self.assertAlmostEqual(mean_squared_log_error(self.y_true, self.y_pred), 0.039, places=3)\n        self.assertIsInstance(mean_squared_log_error(self.y_true_multioutput, self.y_pred_multioutput), np.ndarray)\n        self.assertIsInstance(mean_squared_log_error(self.y_true_multioutput, self.y_pred_multioutput, multioutput='uniform_average'), float)\n\n    def test_median_absolute_error(self):\n        self.assertAlmostEqual(median_absolute_error(self.y_true, self.y_pred), 0.5)\n        self.assertIsInstance(median_absolute_error(self.y_true_multioutput, self.y_pred_multioutput), np.ndarray)\n        self.assertIsInstance(median_absolute_error(self.y_true_multioutput, self.y_pred_multioutput, multioutput='uniform_average'), float)\n\n    def test_explained_variance_score(self):\n        self.assertAlmostEqual(explained_variance_score(self.y_true, self.y_pred), 0.957, places=3)\n        self.assertIsInstance(explained_variance_score(self.y_true_multioutput, self.y_pred_multioutput), np.ndarray)\n        self.assertIsInstance(explained_variance_score(self.y_true_multioutput, self.y_pred_multioutput, multioutput='uniform_average'), float)\n\n    def test_r2_score(self):\n        self.assertAlmostEqual(r2_score(self.y_true, self.y_pred), 0.948, places=3)\n        self.assertIsInstance(r2_score(self.y_true_multioutput, self.y_pred_multioutput), np.ndarray)\n        self.assertIsInstance(r2_score(self.y_true_multioutput, self.y_pred_multioutput, multioutput='uniform_average'), float)\n\n    def test_max_error(self):\n        self.assertAlmostEqual(max_error(self.y_true, self.y_pred), 1)\n\n    def test_mean_tweedie_deviance(self):\n        y_true = np.array([2, 0, 1, 4])\n        y_pred = np.array([0.5, 0.5, 2., 2.])\n        self.assertAlmostEqual(mean_tweedie_deviance(y_true, y_pred, power=1), 1.4260, places=4)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_449": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom io import BytesIO\nfrom django.core.servers.basehttp import WSGIServer, WSGIRequestHandler, ServerHandler, run\nfrom django.core.handlers.wsgi import get_wsgi_application\n\nclass TestDjangoServer(unittest.TestCase):\n\n    @patch('django.core.servers.basehttp.WSGIServer')\n    def test_run_server(self, MockServer):\n        run('localhost', 8000, get_wsgi_application(), server_cls=MockServer)\n        MockServer.assert_called_once_with(('localhost', 8000), WSGIRequestHandler, ipv6=False)\n\n    def test_wsgi_server_init(self):\n        server = WSGIServer(('localhost', 8000))\n        self.assertEqual(server.address_family, socket.AF_INET)\n\n        server = WSGIServer(('localhost', 8000), ipv6=True)\n        self.assertEqual(server.address_family, socket.AF_INET6)\n\n    @patch('django.core.servers.basehttp.logger.info')\n    @patch('django.core.servers.basehttp.is_broken_pipe_error')\n    def test_handle_error(self, mock_is_broken_pipe_error, mock_logger_info):\n        mock_is_broken_pipe_error.return_value = True\n        server = WSGIServer(('localhost', 8000))\n        server.handle_error(None, ('localhost', 8000))\n        mock_logger_info.assert_called_once()\n\n    def test_wsgi_request_handler_address_string(self):\n        handler = WSGIRequestHandler(None, None, None)\n        handler.client_address = ('localhost', 8000)\n        self.assertEqual(handler.address_string(), 'localhost')\n\n    @patch('django.core.servers.basehttp.logger.error')\n    def test_wsgi_request_handler_log_message(self, mock_logger_error):\n        handler = WSGIRequestHandler(None, None, None)\n        handler.log_message('test message', 'localhost', '400', '0.1')\n        mock_logger_error.assert_called_once()\n\n    def test_server_handler_init(self):\n        environ = {'REQUEST_METHOD': 'POST', 'CONTENT_LENGTH': '10'}\n        handler = ServerHandler(BytesIO(), BytesIO(), BytesIO(), environ)\n        self.assertEqual(handler.stdin._limit, 10)\n\n    def test_server_handler_cleanup_headers(self):\n        environ = {'REQUEST_METHOD': 'HEAD'}\n        handler = ServerHandler(BytesIO(), BytesIO(), BytesIO(), environ)\n        handler.headers = {'Content-Length': '10'}\n        handler.cleanup_headers()\n        self.assertNotIn('Content-Length', handler.headers)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_751": ["\nimport unittest\nimport numpy as np\nfrom sklearn.cluster import optics_\nfrom sklearn.datasets import make_blobs\n\nclass TestOptics(unittest.TestCase):\n\n    def setUp(self):\n        self.X, self.y = make_blobs(n_samples=300, centers=4,\n                                    cluster_std=0.60, random_state=0)\n\n    def test_optics_function(self):\n        core_indices, labels = optics_.optics(self.X)\n        self.assertEqual(len(core_indices), len(labels))\n        self.assertTrue(np.all(core_indices < len(self.X)))\n        self.assertTrue(np.all(labels < np.max(self.y) + 1))\n\n    def test_optics_class(self):\n        clust = optics_.OPTICS(min_samples=5, max_eps=1.5)\n        clust.fit(self.X)\n        self.assertEqual(len(clust.core_sample_indices_), len(clust.labels_))\n        self.assertTrue(np.all(clust.core_sample_indices_ < len(self.X)))\n        self.assertTrue(np.all(clust.labels_ < np.max(self.y) + 1))\n\n    def test_extract_dbscan(self):\n        clust = optics_.OPTICS(min_samples=5, max_eps=1.5)\n        clust.fit(self.X)\n        core_indices, labels = clust.extract_dbscan(eps=0.5)\n        self.assertEqual(len(core_indices), len(labels))\n        self.assertTrue(np.all(core_indices < len(self.X)))\n        self.assertTrue(np.all(labels < np.max(self.y) + 1))\n\n    def test_tree_node(self):\n        node = optics_._TreeNode(self.X, 0, len(self.X), None)\n        self.assertEqual(node.start, 0)\n        self.assertEqual(node.end, len(self.X))\n        self.assertIsNone(node.parent_node)\n\n    def test_find_local_maxima(self):\n        reachability_plot = [0.1, 0.2, 0.3, 0.2, 0.1]\n        local_maxima = optics_._find_local_maxima(reachability_plot, 2)\n        self.assertEqual(local_maxima, [2])\n\n    def test_cluster_tree(self):\n        reachability_plot = [0.1, 0.2, 0.3, 0.2, 0.1]\n        ordering = np.arange(len(self.X))\n        node = optics_._TreeNode(ordering, 0, len(ordering), None)\n        local_maxima_points = optics_._find_local_maxima(reachability_plot, 2)\n        optics_._cluster_tree(node, None, local_maxima_points,\n                              reachability_plot, ordering, 5,\n                              0.75, 0.7, 0.4, 0.003)\n        self.assertEqual(len(node.children), 0)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_115": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.views.debug import (\n    CallableSettingWrapper, ExceptionReporter, SafeExceptionReporterFilter,\n    default_urlconf, get_default_exception_reporter_filter, technical_404_response,\n    technical_500_response,\n)\nfrom django.http import Http404, HttpRequest\nfrom django.urls import ResolverMatch\n\nclass TestDebugViews(unittest.TestCase):\n\n    def setUp(self):\n        self.request = HttpRequest()\n        self.exc_type = Exception\n        self.exc_value = Exception('Test exception')\n        self.tb = None\n\n    def test_callable_setting_wrapper(self):\n        callable_mock = MagicMock(return_value='test')\n        wrapper = CallableSettingWrapper(callable_mock)\n        self.assertEqual(str(wrapper), str(callable_mock))\n\n    def test_exception_reporter(self):\n        reporter = ExceptionReporter(self.request, self.exc_type, self.exc_value, self.tb)\n        self.assertIsNotNone(reporter.get_traceback_data())\n        self.assertIsNotNone(reporter.get_traceback_html())\n        self.assertIsNotNone(reporter.get_traceback_text())\n        self.assertIsNotNone(reporter.get_traceback_frames())\n\n    def test_safe_exception_reporter_filter(self):\n        filter = SafeExceptionReporterFilter()\n        self.assertIsNotNone(filter.get_safe_settings())\n        self.assertIsNotNone(filter.get_safe_request_meta(self.request))\n        self.assertFalse(filter.is_active(self.request))\n        self.assertIsNotNone(filter.get_cleansed_multivaluedict(self.request, self.request.POST))\n        self.assertIsNotNone(filter.get_post_parameters(self.request))\n        self.assertIsNotNone(filter.cleanse_special_types(self.request, 'test'))\n\n    def test_get_default_exception_reporter_filter(self):\n        self.assertIsInstance(get_default_exception_reporter_filter(), SafeExceptionReporterFilter)\n\n    @patch('django.views.debug.resolve')\n    def test_technical_404_response(self, mock_resolve):\n        mock_resolve.return_value = ResolverMatch(func='test_func', args=(), kwargs={})\n        exception = Http404({'path': '/test_path/'})\n        response = technical_404_response(self.request, exception)\n        self.assertEqual(response.status_code, 404)\n\n    def test_default_urlconf(self):\n        response = default_urlconf(self.request)\n        self.assertEqual(response.status_code, 200)\n\n    def test_technical_500_response(self):\n        response = technical_500_response(self.request, self.exc_type, self.exc_value, self.tb)\n        self.assertEqual(response.status_code, 500)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_778": ["\nimport unittest\nimport numpy as np\nfrom sklearn.decomposition import NMF, non_negative_factorization\nfrom sklearn.decomposition import nmf as nmf_internal\nfrom sklearn.utils.extmath import squared_norm\n\nclass TestNMF(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 1], [2, 1], [3, 1.2], [4, 1], [5, 0.8], [6, 1]])\n\n    def test_non_negative_factorization(self):\n        W, H, n_iter = non_negative_factorization(self.X, n_components=2, init='random', random_state=0)\n        self.assertEqual(W.shape, (6, 2))\n        self.assertEqual(H.shape, (2, 2))\n        self.assertIsInstance(n_iter, int)\n\n    def test_NMF_fit_transform(self):\n        model = NMF(n_components=2, init='random', random_state=0)\n        W = model.fit_transform(self.X)\n        self.assertEqual(W.shape, (6, 2))\n        self.assertEqual(model.components_.shape, (2, 2))\n\n    def test_NMF_fit(self):\n        model = NMF(n_components=2, init='random', random_state=0)\n        model.fit(self.X)\n        self.assertEqual(model.components_.shape, (2, 2))\n\n    def test_NMF_transform(self):\n        model = NMF(n_components=2, init='random', random_state=0)\n        model.fit(self.X)\n        W = model.transform(self.X)\n        self.assertEqual(W.shape, (6, 2))\n\n    def test_NMF_inverse_transform(self):\n        model = NMF(n_components=2, init='random', random_state=0)\n        model.fit(self.X)\n        W = model.transform(self.X)\n        X_reconstructed = model.inverse_transform(W)\n        self.assertEqual(X_reconstructed.shape, self.X.shape)\n\n    def test_squared_norm(self):\n        norm = squared_norm(self.X)\n        self.assertIsInstance(norm, float)\n\n    def test_beta_divergence(self):\n        W, H, _ = non_negative_factorization(self.X, n_components=2, init='random', random_state=0)\n        div = nmf_internal._beta_divergence(self.X, W, H, beta_loss=2)\n        self.assertIsInstance(div, float)\n\n    def test_multiplicative_update_w(self):\n        W, H, _ = non_negative_factorization(self.X, n_components=2, init='random', random_state=0)\n        delta_W, _, _, _ = nmf_internal._multiplicative_update_w(self.X, W, H, beta_loss=2, l1_reg_W=0, l2_reg_W=0, gamma=1)\n        self.assertEqual(delta_W.shape, W.shape)\n\n    def test_multiplicative_update_h(self):\n        W, H, _ = non_negative_factorization(self.X, n_components=2, init='random', random_state=0)\n        delta_H = nmf_internal._multiplicative_update_h(self.X, W, H, beta_loss=2, l1_reg_H=0, l2_reg_H=0, gamma=1)\n        self.assertEqual(delta_H.shape, H.shape)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_72": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.db.migrations.serializer import *\nfrom django.conf import SettingsReference\nfrom django.db import models\nfrom django.db.migrations.operations.base import Operation\nfrom django.utils.functional import LazyObject, Promise\nfrom django.utils.timezone import utc\nfrom decimal import Decimal\nimport datetime\nimport re\nimport enum\nimport uuid\n\nclass TestSerializer(unittest.TestCase):\n    def test_base_serializer(self):\n        self.assertRaises(NotImplementedError, BaseSerializer(\"test\").serialize)\n\n    def test_base_simple_serializer(self):\n        self.assertEqual(BaseSimpleSerializer(\"test\").serialize(), (\"'test'\", set()))\n\n    def test_datetime_serializer(self):\n        self.assertEqual(DateTimeSerializer(datetime.date.today()).serialize(), (repr(datetime.date.today()), {'import datetime'}))\n\n    def test_datetimedatetime_serializer(self):\n        self.assertEqual(DatetimeDatetimeSerializer(datetime.datetime.now()).serialize(), (repr(datetime.datetime.now()).replace('<UTC>', 'utc'), {'import datetime'}))\n\n    def test_decimal_serializer(self):\n        self.assertEqual(DecimalSerializer(Decimal(1.1)).serialize(), (repr(Decimal(1.1)), {\"from decimal import Decimal\"}))\n\n    def test_dictionary_serializer(self):\n        self.assertEqual(DictionarySerializer({\"test\": \"value\"}).serialize(), (\"{'test': 'value'}\", set()))\n\n    def test_enum_serializer(self):\n        class TestEnum(enum.Enum):\n            test = 1\n        self.assertEqual(EnumSerializer(TestEnum.test).serialize(), (\"__main__.TestEnum(1)\", {'import __main__'}))\n\n    def test_float_serializer(self):\n        self.assertEqual(FloatSerializer(float('nan')).serialize(), ('float(\"nan\")', set()))\n\n    def test_frozenset_serializer(self):\n        self.assertEqual(FrozensetSerializer(frozenset([1, 2, 3])).serialize(), (\"frozenset([1, 2, 3])\", set()))\n\n    def test_settingsreference_serializer(self):\n        self.assertEqual(SettingsReferenceSerializer(SettingsReference(\"TEST_SETTING\")).serialize(), (\"settings.TEST_SETTING\", {\"from django.conf import settings\"}))\n\n    def test_uuid_serializer(self):\n        self.assertEqual(UUIDSerializer(uuid.uuid4()).serialize(), (\"uuid.%s\" % repr(uuid.uuid4()), {\"import uuid\"}))\n\n    # Add more tests for other classes and functions as needed\n"], "sample_845": ["\nimport numpy as np\nimport pandas as pd\nimport pytest\nfrom sklearn.compose import ColumnTransformer, make_column_transformer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import load_iris\n\ndef test_column_transformer_fit_transform():\n    iris = load_iris()\n    X = iris.data\n    y = iris.target\n\n    transformer = ColumnTransformer(\n        transformers=[\n            (\"num\", StandardScaler(), [0, 2]),\n            (\"cat\", OneHotEncoder(), [1]),\n        ]\n    )\n\n    X_transformed = transformer.fit_transform(X)\n    assert X_transformed.shape[1] == 5\n\ndef test_column_transformer_transform_raises_error_when_not_fitted():\n    transformer = ColumnTransformer(\n        transformers=[\n            (\"num\", StandardScaler(), [0, 2]),\n            (\"cat\", OneHotEncoder(), [1]),\n        ]\n    )\n\n    with pytest.raises(NotFittedError):\n        transformer.transform(np.array([[1, 2, 3]]))\n\ndef test_make_column_transformer():\n    transformer = make_column_transformer(\n        (StandardScaler(), [0, 2]),\n        (OneHotEncoder(), [1]),\n    )\n\n    assert isinstance(transformer, ColumnTransformer)\n    assert len(transformer.transformers) == 2\n\ndef test_column_transformer_with_pipeline():\n    iris = load_iris()\n    X = iris.data\n    y = iris.target\n\n    transformer = ColumnTransformer(\n        transformers=[\n            (\"num\", StandardScaler(), [0, 2]),\n            (\"cat\", OneHotEncoder(), [1]),\n        ]\n    )\n\n    pipeline = Pipeline(steps=[('t', transformer), ('m', LogisticRegression())])\n    pipeline.fit(X, y)\n    y_pred = pipeline.predict(X)\n\n    assert y_pred.shape == (150,)\n\ndef test_column_transformer_with_dataframe():\n    data = {'A': [1, 2, 3], 'B': ['a', 'b', 'c']}\n    df = pd.DataFrame(data)\n\n    transformer = ColumnTransformer(\n        transformers=[\n            (\"num\", StandardScaler(), [\"A\"]),\n            (\"cat\", OneHotEncoder(), [\"B\"]),\n        ]\n    )\n\n    df_transformed = transformer.fit_transform(df)\n    assert df_transformed.shape[1] == 4\n"], "sample_538": ["\nimport unittest\nimport numpy as np\nfrom matplotlib.transforms import (Transform, Affine2D, Bbox, BboxTransform, BboxTransformTo,\n                                   BboxTransformToMaxOnly, BboxTransformFrom, ScaledTranslation,\n                                   AffineDeltaTransform, TransformedPath, TransformedPatchPath,\n                                   nonsingular, interval_contains, _interval_contains_close,\n                                   interval_contains_open, offset_copy)\nfrom matplotlib.path import Path\nfrom matplotlib.patches import Patch\n\nclass TestTransforms(unittest.TestCase):\n    def setUp(self):\n        self.affine1 = Affine2D().translate(1, 2).scale(3, 4)\n        self.affine2 = Affine2D().rotate_deg(30).translate(5, 6)\n        self.bbox1 = Bbox.from_bounds(1, 2, 3, 4)\n        self.bbox2 = Bbox.from_bounds(5, 6, 7, 8)\n        self.path = Path([[1, 1], [2, 2], [3, 3]])\n        self.patch = Patch(self.path, transform=self.affine1)\n        self.transform = self.affine1 + self.affine2\n\n    def test_transform_equality(self):\n        self.assertEqual(self.affine1 + self.affine2, self.affine2 + self.affine1)\n        self.assertNotEqual(self.affine1 + self.affine2, self.affine1)\n\n    def test_affine_transform(self):\n        points = np.array([[1, 2], [3, 4]])\n        result = self.affine1.transform(points)\n        expected = np.array([[7, 12], [21, 32]])\n        np.testing.assert_array_equal(result, expected)\n\n    def test_bbox_transform(self):\n        bbox_transform = BboxTransform(self.bbox1, self.bbox2)\n        result = bbox_transform.transform(np.array([[0, 0], [1, 1]]))\n        expected = np.array([[5, 6], [12, 14]])\n        np.testing.assert_array_equal(result, expected)\n\n    def test_bbox_transform_to(self):\n        bbox_transform_to = BboxTransformTo(self.bbox1)\n        result = bbox_transform_to.transform(np.array([[0, 0], [1, 1]]))\n        expected = np.array([[1, 2], [4, 6]])\n        np.testing.assert_array_equal(result, expected)\n\n    def test_bbox_transform_to_max_only(self):\n        bbox_transform_to_max_only = BboxTransformToMaxOnly(self.bbox1)\n        result = bbox_transform_to_max_only.transform(np.array([[0, 0], [1, 1]]))\n        expected = np.array([[3, 4], [3, 4]])\n        np.testing.assert_array_equal(result, expected)\n\n    def test_bbox_transform_from(self):\n        bbox_transform_from = BboxTransformFrom(self.bbox1)\n        result = bbox_transform_from.transform(np.array([[1, 2], [4, 6]]))\n        expected = np.array([[0, 0], [1, 1]])\n        np.testing.assert_array_equal(result, expected)\n\n    def test_scaled_translation(self):\n        scale_trans = Affine2D().scale(2, 2)\n        scaled_translation = ScaledTranslation(3, 4, scale_trans)\n        result = scaled_translation.transform(np.array([[0, 0], [1, 1]]))\n        expected = np.array([[6, 8], [6, 8]])\n        np.testing.assert_array_equal(result, expected)\n\n    def test_affine_delta_transform(self):\n        affine_delta_transform = AffineDeltaTransform(self.transform)\n        result = affine_delta_transform.transform(np.array([[1, 2], [3, 4]]))\n        expected = np.array([[-0.4330127, 1.29903811], [2.79898729, 4.59795642]])\n        np.testing.assert_allclose(result, expected, rtol=1e-5)\n\n    def test_transformed_path(self):\n        transformed_path = TransformedPath(self.path, self.transform)\n        result_path, result_affine = transformed_path.get_transformed_path_and_affine()\n        expected_path = Path([[-0.4330127, 1.29903811], [2.79898729, 4.59795642], [6.09690483, 7.89687496]])\n        np.testing.assert_allclose(result_path.vertices, expected_path.vertices, rtol=1e-5)\n\n    def test_transformed_patch_path(self):\n        transformed_patch_path = TransformedPatchPath(self.patch)\n        result_path, result_affine = transformed_patch_path.get_transformed_path_and_affine()\n        expected_path = Path([[-0.4330127, 1.29903811], [2.79898729, 4.59795642], [6.09690483, 7.89687496]])\n        np.testing.assert_allclose(result_path.vertices, expected_path.vertices, rtol=1e-5)\n\n    def test_nonsingular(self):\n        vmin, vmax = nonsingular(0, 0)\n        self.assertEqual(vmin, -0.001)\n        self.assertEqual(vmax, 0.001)\n\n    def test_interval_contains(self):\n        self.assertTrue(interval_contains((1, 3), 2))\n        self.assertFalse(interval_contains((1, 3), 4))\n\n    def test_interval_contains_close(self):\n        self.assertTrue(_interval_contains_close((1, 3), 2.0001))\n        self.assertFalse(_interval_contains_close((1, 3), 3.001))\n\n    def test_interval_contains_open(self):\n        self.assertTrue(interval_contains_open((1, 3), 2))\n        self.assertFalse(interval_contains_open((1, 3), 3))\n\n    def test_offset_copy(self):\n        fig = unittest.mock.Mock()\n        fig.dpi_scale_trans = Affine2D().scale(2, 2)\n        result = offset_copy(self.transform, fig=fig, x=1, y=2, units='points')\n        expected = self.transform + Affine2D().translate(1 / 72, 2 / 72)\n        np.testing.assert_allclose(result.get_matrix(), expected.get_matrix(), rtol=1e-5)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_852": ["\nimport unittest\nfrom sklearn.kernel_approximation import RBFSampler, AdditiveChi2Sampler, SkewedChi2Sampler, Nystroem\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import SGDClassifier\nimport numpy as np\n\nclass TestKernelApproximation(unittest.TestCase):\n    def setUp(self):\n        self.X, self.y = make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, random_state=42)\n\n    def test_RBFSampler(self):\n        rbf_feature = RBFSampler(gamma=1, random_state=1)\n        X_features = rbf_feature.fit_transform(self.X)\n        clf = SGDClassifier(max_iter=5, tol=1e-3)\n        clf.fit(X_features, self.y)\n        self.assertGreater(clf.score(X_features, self.y), 0.9)\n\n    def test_AdditiveChi2Sampler(self):\n        chi2sampler = AdditiveChi2Sampler(sample_steps=2)\n        X_transformed = chi2sampler.fit_transform(self.X, self.y)\n        clf = SGDClassifier(max_iter=5, random_state=0, tol=1e-3)\n        clf.fit(X_transformed, self.y)\n        self.assertGreater(clf.score(X_transformed, self.y), 0.9)\n\n    def test_SkewedChi2Sampler(self):\n        chi2_feature = SkewedChi2Sampler(skewedness=.01, n_components=10, random_state=0)\n        X_features = chi2_feature.fit_transform(self.X, self.y)\n        clf = SGDClassifier(max_iter=10, tol=1e-3)\n        clf.fit(X_features, self.y)\n        self.assertGreater(clf.score(X_features, self.y), 0.9)\n\n    def test_Nystroem(self):\n        feature_map_nystroem = Nystroem(gamma=.2, random_state=1, n_components=30)\n        data_transformed = feature_map_nystroem.fit_transform(self.X)\n        clf = SGDClassifier(max_iter=5, tol=1e-3)\n        clf.fit(data_transformed, self.y)\n        self.assertGreater(clf.score(data_transformed, self.y), 0.9)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_173": ["\nimport unittest\nfrom unittest.mock import Mock, MagicMock\nfrom datetime import datetime, timedelta, time, date\nfrom decimal import Decimal\n\nfrom django.db.backends.base.operations import BaseDatabaseOperations\n\nclass TestBaseDatabaseOperations(unittest.TestCase):\n    def setUp(self):\n        self.connection = MagicMock()\n        self.ops = BaseDatabaseOperations(self.connection)\n\n    def test_autoinc_sql(self):\n        self.assertIsNone(self.ops.autoinc_sql('table', 'column'))\n\n    def test_bulk_batch_size(self):\n        self.assertEqual(self.ops.bulk_batch_size('fields', [1, 2, 3]), 3)\n\n    def test_cache_key_culling_sql(self):\n        self.assertEqual(self.ops.cache_key_culling_sql(), \"SELECT cache_key FROM %s ORDER BY cache_key LIMIT 1 OFFSET %%s\")\n\n    def test_unification_cast_sql(self):\n        self.assertEqual(self.ops.unification_cast_sql('output_field'), '%s')\n\n    def test_adapt_decimalfield_value(self):\n        self.assertEqual(self.ops.adapt_decimalfield_value(Decimal('12.3456'), 6, 2), '12.35')\n\n    def test_adapt_datetimefield_value(self):\n        dt = datetime(2021, 1, 1, 12, 0, 0)\n        self.assertEqual(self.ops.adapt_datetimefield_value(dt), str(dt))\n\n    def test_adapt_datefield_value(self):\n        d = date(2021, 1, 1)\n        self.assertEqual(self.ops.adapt_datefield_value(d), str(d))\n\n    def test_adapt_timefield_value(self):\n        t = time(12, 0, 0)\n        self.assertEqual(self.ops.adapt_timefield_value(t), str(t))\n\n    def test_year_lookup_bounds_for_date_field(self):\n        bounds = self.ops.year_lookup_bounds_for_date_field(2021)\n        self.assertEqual(bounds, ['2021-01-01', '2021-12-31'])\n\n    def test_year_lookup_bounds_for_datetime_field(self):\n        bounds = self.ops.year_lookup_bounds_for_datetime_field(2021)\n        self.assertEqual(bounds, ['2021-01-01 00:00:00', '2021-12-31 23:59:59.999999'])\n\n    def test_window_frame_start(self):\n        self.assertEqual(self.ops.window_frame_start(-1), '1 PRECEDING')\n        self.assertEqual(self.ops.window_frame_start(0), 'CURRENT ROW')\n        self.assertEqual(self.ops.window_frame_start(None), 'UNBOUNDED PRECEDING')\n\n    def test_window_frame_end(self):\n        self.assertEqual(self.ops.window_frame_end(1), '1 FOLLOWING')\n        self.assertEqual(self.ops.window_frame_end(0), 'CURRENT ROW')\n        self.assertEqual(self.ops.window_frame_end(None), 'UNBOUNDED FOLLOWING')\n\n    def test_insert_statement(self):\n        self.assertEqual(self.ops.insert_statement(), 'INSERT INTO')\n\n    def test_ignore_conflicts_suffix_sql(self):\n        self.assertEqual(self.ops.ignore_conflicts_suffix_sql(), '')\n"], "sample_89": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.core.mail.message import EmailMessage, EmailMultiAlternatives, sanitize_address, BadHeaderError\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\nclass TestEmailMessage(unittest.TestCase):\n\n    def setUp(self):\n        self.subject = \"Test Subject\"\n        self.body = \"Test Body\"\n        self.from_email = \"from@example.com\"\n        self.to = [\"to@example.com\"]\n        self.email = EmailMessage(subject=self.subject, body=self.body, from_email=self.from_email, to=self.to)\n\n    def test_initialization(self):\n        self.assertEqual(self.email.subject, self.subject)\n        self.assertEqual(self.email.body, self.body)\n        self.assertEqual(self.email.from_email, self.from_email)\n        self.assertEqual(self.email.to, self.to)\n\n    def test_message_creation(self):\n        msg = self.email.message()\n        self.assertIsInstance(msg, MIMEText)\n        self.assertEqual(msg['Subject'], self.subject)\n        self.assertEqual(msg['From'], self.from_email)\n        self.assertEqual(msg['To'], self.to[0])\n\n    def test_recipients(self):\n        self.assertEqual(self.email.recipients(), self.to)\n\n    def test_attach(self):\n        self.email.attach(filename='test.txt', content='Test Content', mimetype='text/plain')\n        self.assertEqual(len(self.email.attachments), 1)\n        self.assertEqual(self.email.attachments[0][0], 'test.txt')\n\nclass TestEmailMultiAlternatives(unittest.TestCase):\n\n    def setUp(self):\n        self.subject = \"Test Subject\"\n        self.body = \"Test Body\"\n        self.from_email = \"from@example.com\"\n        self.to = [\"to@example.com\"]\n        self.email = EmailMultiAlternatives(subject=self.subject, body=self.body, from_email=self.from_email, to=self.to)\n\n    def test_initialization(self):\n        self.assertEqual(self.email.subject, self.subject)\n        self.assertEqual(self.email.body, self.body)\n        self.assertEqual(self.email.from_email, self.from_email)\n        self.assertEqual(self.email.to, self.to)\n\n    def test_attach_alternative(self):\n        self.email.attach_alternative(\"<p>Test HTML Body</p>\", \"text/html\")\n        self.assertEqual(len(self.email.alternatives), 1)\n        self.assertEqual(self.email.alternatives[0][1], \"text/html\")\n\nclass TestSanitizeAddress(unittest.TestCase):\n\n    def test_sanitize_address_tuple(self):\n        addr = (\"Test Name\", \"test@example.com\")\n        sanitized = sanitize_address(addr, 'utf-8')\n        self.assertEqual(sanitized, \"Test Name <test@example.com>\")\n\n    def test_sanitize_address_string(self):\n        addr = \"Test Name <test@example.com>\"\n        sanitized = sanitize_address(addr, 'utf-8')\n        self.assertEqual(sanitized, \"Test Name <test@example.com>\")\n\n    def test_sanitize_address_invalid(self):\n        addr = \"invalid_address\"\n        with self.assertRaises(ValueError):\n            sanitize_address(addr, 'utf-8')\n"], "sample_552": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nimport numpy as np\nfrom matplotlib.figure import Figure, FigureBase, SubFigure, figaspect\nfrom matplotlib.axes import Axes\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg\n\nclass TestFigure(unittest.TestCase):\n\n    def setUp(self):\n        self.figure = Figure()\n\n    def test_figaspect(self):\n        aspect_ratio = 2.0\n        width, height = figaspect(aspect_ratio)\n        self.assertAlmostEqual(width / height, aspect_ratio)\n\n    def test_add_axes(self):\n        ax = self.figure.add_axes([0.1, 0.1, 0.8, 0.8])\n        self.assertIsInstance(ax, Axes)\n\n    def test_add_subplot(self):\n        ax = self.figure.add_subplot(111)\n        self.assertIsInstance(ax, Axes)\n\n    def test_clear(self):\n        self.figure.add_axes([0.1, 0.1, 0.8, 0.8])\n        self.figure.clear()\n        self.assertEqual(len(self.figure.axes), 0)\n\n    @patch('matplotlib.pyplot.plt')\n    def test_show(self, mock_plt):\n        self.figure.show(warn=False)\n        mock_plt.show.assert_called_once()\n\n    def test_get_size_inches(self):\n        size = self.figure.get_size_inches()\n        self.assertEqual(len(size), 2)\n\n    def test_set_size_inches(self):\n        self.figure.set_size_inches(5, 6)\n        size = self.figure.get_size_inches()\n        self.assertEqual(size[0], 5)\n        self.assertEqual(size[1], 6)\n\n    def test_get_dpi(self):\n        dpi = self.figure.get_dpi()\n        self.assertIsInstance(dpi, float)\n\n    def test_set_dpi(self):\n        self.figure.set_dpi(150)\n        self.assertEqual(self.figure.get_dpi(), 150)\n\n    def test_add_axobserver(self):\n        observer = Mock()\n        self.figure.add_axobserver(observer)\n        self.figure._axobservers.process(\"_axes_change_event\", self.figure)\n        observer.assert_called_once()\n\nclass TestFigureBase(unittest.TestCase):\n\n    def setUp(self):\n        self.figure_base = FigureBase()\n\n    def test_get_default_bbox_extra_artists(self):\n        artists = self.figure_base.get_default_bbox_extra_artists()\n        self.assertEqual(len(artists), 0)\n\nclass TestSubFigure(unittest.TestCase):\n\n    def setUp(self):\n        self.parent_figure = Figure()\n        self.subplotspec = self.parent_figure.add_subplot(111).get_subplotspec()\n        self.sub_figure = SubFigure(self.parent_figure, self.subplotspec)\n\n    def test_get_dpi(self):\n        dpi = self.sub_figure.get_dpi()\n        self.assertEqual(dpi, self.parent_figure.get_dpi())\n\n    def test_set_dpi(self):\n        self.sub_figure.set_dpi(120)\n        self.assertEqual(self.sub_figure.get_dpi(), 120)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_707": ["\nimport pytest\nfrom _pytest.mark.expression import Expression, ParseError\n\n# Define a simple matcher function for testing\ndef simple_matcher(s: str) -> bool:\n    return s in [\"true\", \"yes\", \"1\"]\n\ndef test_expression_compilation():\n    # Test that the Expression class compiles a valid expression without errors\n    expr = Expression.compile(\"true or false\")\n    assert expr is not None\n\ndef test_expression_evaluation():\n    # Test that the Expression class evaluates a simple expression correctly\n    expr = Expression.compile(\"true or false\")\n    assert expr.evaluate(simple_matcher) is True\n\ndef test_invalid_expression():\n    # Test that the Expression class raises a ParseError for an invalid expression\n    with pytest.raises(ParseError):\n        Expression.compile(\"true or\")\n\ndef test_not_operator():\n    # Test that the not operator is evaluated correctly\n    expr = Expression.compile(\"not true\")\n    assert expr.evaluate(simple_matcher) is False\n\ndef test_parentheses():\n    # Test that expressions in parentheses are evaluated correctly\n    expr = Expression.compile(\"(true and false) or true\")\n    assert expr.evaluate(simple_matcher) is True\n\ndef test_unknown_identifier():\n    # Test that unknown identifiers are evaluated as False\n    expr = Expression.compile(\"unknown\")\n    assert expr.evaluate(simple_matcher) is False\n"], "sample_315": ["\nfrom django.test import RequestFactory, override_settings\nfrom django.http import HttpResponse\nfrom django.urls import path, include\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.middleware.locale import LocaleMiddleware\n\n# Test data\nurlpatterns = [\n    path('test/', lambda request: HttpResponse(), name='test'),\n]\n\nurlpatterns += i18n_patterns(\n    path('test/', lambda request: HttpResponse(), name='test-i18n'),\n    prefix_default_language=False,\n)\n\n@override_settings(ROOT_URLCONF=__name__)\ndef test_locale_middleware():\n    factory = RequestFactory()\n    middleware = LocaleMiddleware()\n\n    # Test request with language in URL\n    request = factory.get('/en/test/')\n    response = middleware.process_request(request)\n    assert response is None\n    response = middleware.process_response(request, HttpResponse())\n    assert response.status_code == 200\n    assert response['Content-Language'] == 'en'\n\n    # Test request without language in URL\n    request = factory.get('/test/')\n    response = middleware.process_request(request)\n    assert response is None\n    response = middleware.process_response(request, HttpResponse())\n    assert response.status_code == 200\n    assert response['Content-Language'] == settings.LANGUAGE_CODE\n\n    # Test 404 response with language prefix\n    request = factory.get('/test/')\n    response = HttpResponse(status=404)\n    response = middleware.process_response(request, response)\n    assert response.status_code == 302\n    assert response['Location'] == '/en/test/'\n\n# More tests can be added to cover other scenarios\n"], "sample_601": ["\nimport unittest\nimport numpy as np\nimport xarray as xr\nimport pandas as pd\nfrom xarray.core.accessor_dt import DatetimeAccessor, TimedeltaAccessor, CombinedDatetimelikeAccessor\nfrom xarray.testing import assert_array_equal\n\nclass TestDatetimeAccessor(unittest.TestCase):\n    def setUp(self):\n        self.dates = pd.date_range(start=\"2000/01/01\", freq=\"D\", periods=10)\n        self.ts = xr.DataArray(self.dates, dims=(\"time\"))\n        self.dt = DatetimeAccessor(self.ts)\n\n    def test_year(self):\n        assert_array_equal(self.dt.year, xr.DataArray([2000]*10, dims=(\"time\")))\n\n    def test_month(self):\n        assert_array_equal(self.dt.month, xr.DataArray(np.arange(1, 11), dims=(\"time\")))\n\n    # Add more tests for other properties and methods of DatetimeAccessor\n\nclass TestTimedeltaAccessor(unittest.TestCase):\n    def setUp(self):\n        self.deltas = pd.timedelta_range(start=\"1 day\", freq=\"6H\", periods=20)\n        self.td = xr.DataArray(self.deltas, dims=(\"time\"))\n        self.dt = TimedeltaAccessor(self.td)\n\n    def test_days(self):\n        assert_array_equal(self.dt.days, xr.DataArray([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5], dims=(\"time\")))\n\n    # Add more tests for other properties and methods of TimedeltaAccessor\n\nclass TestCombinedDatetimelikeAccessor(unittest.TestCase):\n    def test_datetime_accessor(self):\n        dt = CombinedDatetimelikeAccessor(xr.DataArray(pd.date_range(start=\"2000/01/01\", freq=\"D\", periods=10), dims=(\"time\")))\n        self.assertIsInstance(dt, DatetimeAccessor)\n\n    def test_timedelta_accessor(self):\n        dt = CombinedDatetimelikeAccessor(xr.DataArray(pd.timedelta_range(start=\"1 day\", freq=\"6H\", periods=20), dims=(\"time\")))\n        self.assertIsInstance(dt, TimedeltaAccessor)\n\n    # Add more tests for CombinedDatetimelikeAccessor\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1092": ["\nimport unittest\nfrom sympy import symbols, Add, Mul, Pow, cse, Matrix, Symbol, Eq, Tuple, S, cos, sin, exp, symbols, sympify, Function, CRootOf, IndexedBase, Idx, Piecewise, O\nfrom sympy.simplify import cse_main, cse_opts\n\nclass TestCseMain(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y, self.z, self.w = symbols('x y z w')\n\n    def test_cse(self):\n        replacements, reduced_exprs = cse(((self.w + self.x + self.y + self.z)*(self.w + self.y + self.z))/(self.w + self.x)**3)\n        self.assertEqual(replacements, [(Symbol('x0'), self.y + self.z), (Symbol('x1'), self.w + self.x)])\n        self.assertEqual(reduced_exprs, [(self.w + Symbol('x0'))*(Symbol('x0') + Symbol('x1'))/Symbol('x1')**3])\n\n    def test_cse_matrix(self):\n        m = Matrix([self.x + self.y, self.x + self.y + self.z])\n        replacements, reduced_exprs = cse([(self.x+self.y)**2, self.x + self.y + self.z, self.y + self.z, self.x + self.z + self.y, m])\n        self.assertEqual(replacements, [(Symbol('x0'), self.x + self.y), (Symbol('x1'), Symbol('x0') + self.z)])\n        self.assertEqual(reduced_exprs, [Symbol('x0')**2, Symbol('x1'), self.y + self.z, Symbol('x1'), Matrix([[Symbol('x0')], [Symbol('x1')]])])\n\n    def test_cse_ignore(self):\n        replacements, reduced_exprs = cse([self.y**2*(self.x + 1), 3*self.y**2*(self.x + 1)], ignore=(self.y,))\n        self.assertEqual(replacements, [(Symbol('x0'), self.x + 1)])\n        self.assertEqual(reduced_exprs, [Symbol('x0')*self.y**2, 3*Symbol('x0')*self.y**2])\n\n    def test_opt_cse(self):\n        opt_subs = cse_main.opt_cse([self.x**-2])\n        k, v = list(opt_subs.keys())[0], list(opt_subs.values())[0]\n        self.assertEqual(k, self.x**(-2))\n        self.assertEqual(v.as_unevaluated_basic(), 1/(self.x**2))\n\n    def test_preprocess_for_cse(self):\n        expr = self.x + self.x\n        optimizations = [(cse_opts.sub_pre, cse_opts.sub_post)]\n        preprocessed_expr = cse_main.preprocess_for_cse(expr, optimizations)\n        self.assertEqual(preprocessed_expr, 2*self.x)\n\n    def test_postprocess_for_cse(self):\n        expr = 2*self.x\n        optimizations = [(cse_opts.sub_pre, cse_opts.sub_post)]\n        postprocessed_expr = cse_main.postprocess_for_cse(expr, optimizations)\n        self.assertEqual(postprocessed_expr, self.x + self.x)\n\n    def test_reps_toposort(self):\n        r = [(Symbol('x'), Symbol('y') + 1), (Symbol('y'), 2)]\n        sorted_reps = cse_main.reps_toposort(r)\n        self.assertEqual(sorted_reps, [(Symbol('y'), 2), (Symbol('x'), Symbol('y') + 1)])\n\n    def test_cse_separate(self):\n        eq = (self.x + 1 + exp((self.x + 1)/(self.y + 1)) + cos(self.y + 1))\n        result = cse([eq, Eq(self.x, self.z + 1), self.z - 2], postprocess=cse_main.cse_separate)\n        self.assertIn(result, [\n            ([(Symbol('x0'), self.y + 1), (Symbol('x'), self.z + 1), (Symbol('x1'), self.x + 1)], [Symbol('x1') + exp(Symbol('x1')/Symbol('x0')) + cos(Symbol('x0')), self.z - 2]),\n            ([(Symbol('x1'), self.y + 1), (Symbol('x'), self.z + 1), (Symbol('x0'), self.x + 1)], [Symbol('x0') + exp(Symbol('x0')/Symbol('x1')) + cos(Symbol('x1')), self.z - 2])\n        ])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_600": ["\nimport unittest\nimport numpy as np\nimport pandas as pd\nfrom xarray.coding.variables import (\n    SerializationWarning,\n    VariableCoder,\n    CFMaskCoder,\n    CFScaleOffsetCoder,\n    UnsignedIntegerCoder,\n    Variable,\n    _apply_mask,\n    _scale_offset_decoding,\n    _choose_float_dtype,\n)\n\nclass TestVariableCoding(unittest.TestCase):\n    def setUp(self):\n        self.dims = ('x', 'y')\n        self.data = np.array([[1, 2], [3, 4]])\n        self.attrs = {'units': 'm'}\n        self.encoding = {'_FillValue': -9999}\n        self.variable = Variable(self.dims, self.data, self.attrs, self.encoding)\n\n    def test_cf_mask_coder(self):\n        coder = CFMaskCoder()\n        encoded_variable = coder.encode(self.variable)\n        decoded_variable = coder.decode(encoded_variable)\n        np.testing.assert_array_equal(self.data, decoded_variable.data)\n\n    def test_cf_scale_offset_coder(self):\n        coder = CFScaleOffsetCoder()\n        self.encoding.update({'scale_factor': 2, 'add_offset': 1})\n        encoded_variable = coder.encode(self.variable)\n        decoded_variable = coder.decode(encoded_variable)\n        np.testing.assert_array_equal(self.data, decoded_variable.data)\n\n    def test_unsigned_integer_coder(self):\n        coder = UnsignedIntegerCoder()\n        self.data = np.array([[1, 2], [3, 4]], dtype=np.uint8)\n        self.encoding.update({'_Unsigned': 'true'})\n        encoded_variable = coder.encode(self.variable)\n        decoded_variable = coder.decode(encoded_variable)\n        np.testing.assert_array_equal(self.data, decoded_variable.data)\n\n    def test_apply_mask(self):\n        data = np.array([[1, 2], [3, -9999]])\n        encoded_fill_values = [-9999]\n        decoded_fill_value = np.nan\n        dtype = np.float64\n        result = _apply_mask(data, encoded_fill_values, decoded_fill_value, dtype)\n        expected_result = np.array([[1.0, 2.0], [3.0, np.nan]])\n        np.testing.assert_array_equal(result, expected_result)\n\n    def test_scale_offset_decoding(self):\n        data = np.array([[1.0, 2.0], [3.0, 4.0]])\n        scale_factor = 2.0\n        add_offset = 1.0\n        dtype = np.float64\n        result = _scale_offset_decoding(data, scale_factor, add_offset, dtype)\n        expected_result = np.array([[2.0, 4.0], [6.0, 8.0]])\n        np.testing.assert_array_equal(result, expected_result)\n\n    def test_choose_float_dtype(self):\n        self.assertEqual(_choose_float_dtype(np.float32, False), np.float32)\n        self.assertEqual(_choose_float_dtype(np.int16, True), np.float64)\n        self.assertEqual(_choose_float_dtype(np.int32, False), np.float32)\n        self.assertEqual(_choose_float_dtype(np.int64, False), np.float64)\n        self.assertEqual(_choose_float_dtype(np.float64, False), np.float64)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1031": ["\nimport unittest\nfrom sympy import S\nfrom sympy.physics.units.definitions import (\n    c, kg, m, s, G, avogadro, electronvolt, speed_of_light, joule,\n    kilogram, meter, second, boltzmann_constant, planck_length,\n    planck_mass, planck_time, planck_charge, planck_temperature,\n    planck_energy, planck_area, planck_volume, planck_momentum,\n    planck_force, planck_power, planck_density, planck_energy_density,\n    planck_intensity, planck_angular_frequency, planck_pressure,\n    planck_current, planck_voltage, planck_impedance, planck_acceleration\n)\n\nclass TestDefinitions(unittest.TestCase):\n    def test_speed_of_light(self):\n        self.assertEqual(speed_of_light, 299792458*meter/second)\n\n    def test_planck_constants(self):\n        self.assertAlmostEqual(planck_length, 1.616255e-35 * meter)\n        self.assertAlmostEqual(planck_mass, 2.176434e-8 * kilogram)\n        self.assertAlmostEqual(planck_time, 5.391247e-44 * second)\n        self.assertAlmostEqual(planck_charge, 1.875546e-18)\n        self.assertAlmostEqual(planck_temperature, 1.416784e32)\n\n    def test_derived_planck_units(self):\n        self.assertAlmostEqual(planck_energy, 1.9561e9 * joule)\n        self.assertAlmostEqual(planck_area, 2.6121e-70 * meter**2)\n        self.assertAlmostEqual(planck_volume, 4.2217e-105 * meter**3)\n        self.assertAlmostEqual(planck_momentum, 6.5248e-21 * kg * meter / second)\n\n    def test_gravitational_constant(self):\n        self.assertAlmostEqual(G, 6.67408e-11 * m**3 / (kg * s**2))\n\n    def test_avogadro_constant(self):\n        self.assertAlmostEqual(avogadro, 6.022140857e23 / mole)\n\n    def test_electronvolt(self):\n        self.assertAlmostEqual(electronvolt, 1.60219e-19 * joule)\n\n    def test_boltzmann_constant(self):\n        self.assertAlmostEqual(boltzmann_constant, 1.38064852e-23 * joule / kelvin)\n\n    # Add more tests for other constants and units as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_764": ["\nimport numpy as np\nimport pandas as pd\nimport pytest\nfrom sklearn.compose import ColumnTransformer, make_column_transformer\nfrom sklearn.preprocessing import Normalizer, FunctionTransformer\nfrom sklearn.exceptions import NotFittedError, DataConversionWarning\n\ndef test_column_transformer_init():\n    transformers = [(\"norm1\", Normalizer(norm='l1'), [0, 1])]\n    ct = ColumnTransformer(transformers)\n    assert ct.transformers == transformers\n    assert ct.remainder == 'drop'\n    assert ct.sparse_threshold == 0.3\n    assert ct.n_jobs is None\n    assert ct.transformer_weights is None\n\ndef test_column_transformer_fit_transform():\n    ct = ColumnTransformer([(\"norm1\", Normalizer(norm='l1'), [0, 1]),\n                            (\"norm2\", Normalizer(norm='l1'), slice(2, 4))])\n    X = np.array([[0., 1., 2., 2.], [1., 1., 0., 1.]])\n    X_transformed = ct.fit_transform(X)\n    expected_output = np.array([[0. , 1. , 0.5, 0.5], [0.5, 0.5, 0. , 1. ]])\n    np.testing.assert_array_almost_equal(X_transformed, expected_output)\n\ndef test_column_transformer_transform():\n    ct = ColumnTransformer([(\"norm1\", Normalizer(norm='l1'), [0, 1])])\n    ct.fit(np.array([[0., 1., 2., 2.], [1., 1., 0., 1.]]))\n    X_test = np.array([[3., 4., 5., 6.]])\n    X_transformed = ct.transform(X_test)\n    expected_output = np.array([[0.3, 0.4, 5., 6.]])\n    np.testing.assert_array_almost_equal(X_transformed, expected_output)\n\ndef test_column_transformer_invalid_transformer():\n    ct = ColumnTransformer([(\"invalid\", \"invalid_transformer\", [0, 1])])\n    with pytest.raises(TypeError):\n        ct.fit(np.array([[0., 1., 2., 2.], [1., 1., 0., 1.]]))\n\ndef test_make_column_transformer():\n    ct = make_column_transformer((Normalizer(norm='l1'), [0, 1]),\n                                 (Normalizer(norm='l1'), slice(2, 4)))\n    assert isinstance(ct, ColumnTransformer)\n    assert len(ct.transformers) == 2\n    assert isinstance(ct.transformers[0][1], Normalizer)\n    assert isinstance(ct.transformers[1][1], Normalizer)\n\ndef test_make_column_transformer_invalid_input():\n    with pytest.raises(TypeError):\n        make_column_transformer((Normalizer(norm='l1'), [0, 1]), invalid=True)\n"], "sample_833": ["\nimport unittest\nimport numpy as np\nfrom scipy.sparse import csr_matrix\nfrom sklearn.utils.multiclass import unique_labels, is_multilabel, type_of_target, class_distribution, check_classification_targets, _ovr_decision_function\n\nclass TestMulticlassUtils(unittest.TestCase):\n    def test_unique_labels(self):\n        self.assertTrue(np.array_equal(unique_labels([3, 5, 5, 5, 7, 7]), np.array([3, 5, 7])))\n        self.assertTrue(np.array_equal(unique_labels([1, 2, 3, 4], [2, 2, 3, 4]), np.array([1, 2, 3, 4])))\n        self.assertTrue(np.array_equal(unique_labels([1, 2, 10], [5, 11]), np.array([1, 2, 5, 10, 11])))\n\n    def test_is_multilabel(self):\n        self.assertFalse(is_multilabel([0, 1, 0, 1]))\n        self.assertFalse(is_multilabel([[1], [0, 2], []]))\n        self.assertTrue(is_multilabel(np.array([[1, 0], [0, 0]])))\n        self.assertFalse(is_multilabel(np.array([[1], [0], [0]])))\n        self.assertTrue(is_multilabel(np.array([[1, 0, 0]])))\n\n    def test_type_of_target(self):\n        self.assertEqual(type_of_target([0.1, 0.6]), 'continuous')\n        self.assertEqual(type_of_target([1, -1, -1, 1]), 'binary')\n        self.assertEqual(type_of_target(['a', 'b', 'a']), 'binary')\n        self.assertEqual(type_of_target([1.0, 2.0]), 'binary')\n        self.assertEqual(type_of_target([1, 0, 2]), 'multiclass')\n        self.assertEqual(type_of_target([1.0, 0.0, 3.0]), 'multiclass')\n        self.assertEqual(type_of_target(['a', 'b', 'c']), 'multiclass')\n        self.assertEqual(type_of_target(np.array([[1, 2], [3, 1]])), 'multiclass-multioutput')\n        self.assertEqual(type_of_target([[1, 2]]), 'multiclass-multioutput')\n        self.assertEqual(type_of_target(np.array([[1.5, 2.0], [3.0, 1.6]])), 'continuous-multioutput')\n        self.assertEqual(type_of_target(np.array([[0, 1], [1, 1]])), 'multilabel-indicator')\n\n    def test_class_distribution(self):\n        y = np.array([[1, 2], [3, 1]])\n        classes, n_classes, class_prior = class_distribution(y)\n        self.assertTrue(np.array_equal(classes[0], np.array([1, 2])))\n        self.assertTrue(np.array_equal(classes[1], np.array([1, 3])))\n        self.assertTrue(np.array_equal(n_classes, [2, 2]))\n        self.assertTrue(np.array_equal(class_prior[0], np.array([0.5, 0.5])))\n        self.assertTrue(np.array_equal(class_prior[1], np.array([0.5, 0.5])))\n\n    def test_check_classification_targets(self):\n        self.assertIsNone(check_classification_targets(np.array([0, 1, 2])))\n        with self.assertRaises(ValueError):\n            check_classification_targets(np.array([0.1, 0.6]))\n\n    def test_ovr_decision_function(self):\n        predictions = np.array([[0, 1, 0], [1, 0, 1]])\n        confidences = np.array([[0.2, 0.3, 0.1], [0.5, 0.4, 0.6]])\n        n_classes = 3\n        result = _ovr_decision_function(predictions, confidences, n_classes)\n        expected_result = np.array([[0.46666667, -0.33333333, 0.13333333],\n                                    [0.33333333, 0.6, 0.46666667]])\n        np.testing.assert_array_almost_equal(result, expected_result)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_560": ["\nimport unittest\nimport matplotlib.pyplot as plt\nimport matplotlib.legend as mlegend\n\nclass TestLegend(unittest.TestCase):\n    def setUp(self):\n        self.fig, self.ax = plt.subplots()\n        self.line1, = self.ax.plot([1, 2, 3], label=\"Test line 1\")\n        self.line2, = self.ax.plot([3, 2, 1], label=\"Test line 2\")\n\n    def test_legend_creation(self):\n        legend = self.ax.legend()\n        self.assertIsInstance(legend, mlegend.Legend)\n        self.assertEqual(len(legend.get_texts()), 2)\n        self.assertEqual(len(legend.get_lines()), 2)\n\n    def test_legend_labels(self):\n        legend = self.ax.legend()\n        self.assertEqual(legend.get_texts()[0].get_text(), \"Test line 1\")\n        self.assertEqual(legend.get_texts()[1].get_text(), \"Test line 2\")\n\n    def test_legend_loc(self):\n        legend = self.ax.legend(loc=\"upper left\")\n        self.assertEqual(legend._loc, 2)\n\n    def test_legend_title(self):\n        legend = self.ax.legend(title=\"Test title\")\n        self.assertEqual(legend.get_title().get_text(), \"Test title\")\n\n    def test_legend_ncols(self):\n        legend = self.ax.legend(ncol=2)\n        self.assertEqual(legend._ncols, 2)\n\n    def test_legend_handlelength(self):\n        legend = self.ax.legend(handlelength=1.5)\n        self.assertEqual(legend.handlelength, 1.5)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_683": ["\nimport logging\nimport pytest\nfrom _pytest.logging import LogCaptureFixture, LogCaptureHandler, LoggingPlugin, _FileHandler, _LiveLoggingStreamHandler, _LiveLoggingNullHandler, caplog_records_key\nfrom _pytest.config import Config\nfrom _pytest.config.argparsing import Parser\nfrom _pytest.nodes import Node\nfrom _pytest.fixtures import FixtureRequest\n\n@pytest.fixture\ndef mock_node():\n    node = Node(\"test_node\")\n    node._store = {}\n    return node\n\n@pytest.fixture\ndef mock_config():\n    return Config()\n\n@pytest.fixture\ndef mock_request(mock_node):\n    request = FixtureRequest(mock_node)\n    return request\n\ndef test_LogCaptureHandler_emit(caplog):\n    caplog.set_level(logging.INFO)\n    logger = logging.getLogger(\"test_logger\")\n    logger.info(\"Test message\")\n    assert len(caplog.records) == 1\n    assert caplog.records[0].message == \"Test message\"\n\ndef test_LogCaptureFixture_set_level(caplog):\n    caplog.set_level(logging.INFO)\n    logger = logging.getLogger(\"test_logger\")\n    assert logger.level == logging.INFO\n\ndef test_LogCaptureFixture_at_level(caplog):\n    with caplog.at_level(logging.INFO):\n        logger = logging.getLogger(\"test_logger\")\n        assert logger.level == logging.INFO\n    assert logger.level != logging.INFO\n\ndef test_LoggingPlugin_init(mock_config):\n    logging_plugin = LoggingPlugin(mock_config)\n    assert logging_plugin._config == mock_config\n    assert logging_plugin.formatter is not None\n    assert logging_plugin.caplog_handler is not None\n    assert logging_plugin.report_handler is not None\n\ndef test_LoggingPlugin_set_log_path(mock_config, tmp_path):\n    logging_plugin = LoggingPlugin(mock_config)\n    log_file_path = tmp_path / \"test_log.txt\"\n    logging_plugin.set_log_path(str(log_file_path))\n    assert logging_plugin.log_file_handler.baseFilename == str(log_file_path)\n\ndef test_LiveLoggingStreamHandler_emit(mock_config, capsys):\n    terminal_reporter = mock_config.pluginmanager.get_plugin(\"terminalreporter\")\n    capture_manager = mock_config.pluginmanager.get_plugin(\"capturemanager\")\n    handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n    record = logging.LogRecord(\"test_logger\", logging.INFO, \"test_path\", 1, \"Test message\", [], None)\n    handler.emit(record)\n    captured = capsys.readouterr()\n    assert \"Test message\" in captured.out\n\ndef test_LiveLoggingNullHandler_methods():\n    handler = _LiveLoggingNullHandler()\n    handler.reset()\n    handler.set_when(\"test\")\n    handler.handleError(logging.LogRecord(\"test_logger\", logging.INFO, \"test_path\", 1, \"Test message\", [], None))\n\ndef test_caplog_fixture(mock_request):\n    result = LogCaptureFixture(mock_request.node)\n    assert result._item == mock_request.node\n    assert result._initial_handler_level is None\n    assert result._initial_logger_levels == {}\n\ndef test_caplog_fixture_finalize(mock_request):\n    result = LogCaptureFixture(mock_request.node)\n    result._initial_handler_level = logging.INFO\n    result._initial_logger_levels[\"test_logger\"] = logging.DEBUG\n    result._finalize()\n    assert result.handler.level == logging.INFO\n    assert logging.getLogger(\"test_logger\").level == logging.DEBUG\n"], "sample_842": ["\nimport numpy as np\nimport pytest\nfrom sklearn.gaussian_process.kernels import (\n    _approx_fprime, RBF, Matern, RationalQuadratic, ExpSineSquared,\n    DotProduct, ConstantKernel, WhiteKernel, PairwiseKernel,\n    KernelOperator, Exponentiation, Kernel, _check_length_scale\n)\n\n# Test _check_length_scale function\ndef test_check_length_scale():\n    X = np.random.rand(10, 2)\n    length_scale = np.array([1.0, 2.0])\n    result = _check_length_scale(X, length_scale)\n    assert np.array_equal(result, length_scale)\n\n    length_scale = 1.0\n    result = _check_length_scale(X, length_scale)\n    assert np.array_equal(result, length_scale)\n\n    with pytest.raises(ValueError):\n        length_scale = np.array([[1.0, 2.0], [3.0, 4.0]])\n        _check_length_scale(X, length_scale)\n\n    with pytest.raises(ValueError):\n        length_scale = np.array([1.0, 2.0, 3.0])\n        _check_length_scale(X, length_scale)\n\n# Test RBF kernel\ndef test_rbf_kernel():\n    X = np.random.rand(10, 2)\n    kernel = RBF(length_scale=1.0)\n    K = kernel(X)\n    assert K.shape == (10, 10)\n    assert np.all(np.linalg.eigvals(K) >= 0)\n\n    K_grad = kernel(X, eval_gradient=True)[1]\n    assert K_grad.shape == (10, 10, 1)\n\n# Test Matern kernel\ndef test_matern_kernel():\n    X = np.random.rand(10, 2)\n    kernel = Matern(length_scale=1.0, nu=1.5)\n    K = kernel(X)\n    assert K.shape == (10, 10)\n    assert np.all(np.linalg.eigvals(K) >= 0)\n\n    K_grad = kernel(X, eval_gradient=True)[1]\n    assert K_grad.shape == (10, 10, 1)\n\n# Add more test cases for other kernels and utility functions as needed...\n"], "sample_1158": ["\nimport unittest\nfrom sympy import sympify, _sympify, SympifyError, kernS, CantSympify\nimport numpy as np\n\nclass TestSympify(unittest.TestCase):\n    def setUp(self):\n        self.test_string = \"2**2 / 3 + 5\"\n        self.test_numpy_array = np.array([1, 2, 3])\n        self.test_numpy_scalar = np.float64(3.14)\n\n    def test_sympify(self):\n        self.assertEqual(sympify(self.test_string), 19/3)\n        self.assertEqual(sympify(self.test_numpy_array).tolist(), self.test_numpy_array.tolist())\n        self.assertEqual(sympify(self.test_numpy_scalar), 3.14)\n\n    def test_sympify_evaluate_false(self):\n        self.assertEqual(str(sympify(self.test_string, evaluate=False)), \"2**2/3 + 5\")\n\n    def test_sympify_strict(self):\n        with self.assertRaises(SympifyError):\n            sympify(None, strict=True)\n\n    def test_sympify_numpy_types(self):\n        self.assertEqual(sympify(np.int64(5)), 5)\n        self.assertEqual(sympify(np.complex128(2+3j)), 2+3j)\n\n    def test_kernS(self):\n        self.assertEqual(str(kernS(\"2*(x + y)\")), \"2*(x + y)\")\n\n    def test_CantSympify(self):\n        class TestClass(CantSympify):\n            pass\n\n        with self.assertRaises(SympifyError):\n            sympify(TestClass())\n\n    def test__sympify(self):\n        self.assertEqual(_sympify(self.test_string), 19/3)\n        self.assertEqual(_sympify(self.test_numpy_array).tolist(), self.test_numpy_array.tolist())\n        self.assertEqual(_sympify(self.test_numpy_scalar), 3.14)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_587": ["\nimport unittest\nfrom collections import OrderedDict\nfrom xarray.core import merge, Variable\nfrom xarray import Dataset\nimport pandas as pd\n\nclass TestMerge(unittest.TestCase):\n\n    def setUp(self):\n        self.var1 = Variable(('x',), [1, 2, 3])\n        self.var2 = Variable(('x',), [4, 5, 6])\n        self.var3 = Variable(('y',), [7, 8])\n        self.var4 = Variable(('x',), [1, 2, 3, 4])\n        self.dataset = Dataset({'var1': self.var1, 'var3': self.var3})\n        self.other = {'var2': self.var2, 'var3': self.var3}\n        self.other_conflict = {'var1': self.var4}\n\n    def test_broadcast_dimension_size(self):\n        variables = [self.var1, self.var2]\n        self.assertEqual(merge.broadcast_dimension_size(variables), {'x': 3})\n\n    def test_merge_core(self):\n        objs = [self.dataset, self.other]\n        variables, coord_names, dims = merge.merge_core(objs)\n        self.assertEqual(set(variables.keys()), {'var1', 'var2', 'var3'})\n\n    def test_merge_core_conflict(self):\n        objs = [self.dataset, self.other_conflict]\n        with self.assertRaises(merge.MergeError):\n            merge.merge_core(objs)\n\n    def test_merge(self):\n        arrays = [self.var1, self.var2]\n        merged = merge.merge(arrays)\n        self.assertIsInstance(merged, Dataset)\n\n    def test_dataset_merge_method(self):\n        variables, coord_names, dims = merge.dataset_merge_method(self.dataset, self.other, None, 'no_conflicts', 'outer', None)\n        self.assertEqual(set(variables.keys()), {'var1', 'var2', 'var3'})\n\n    def test_dataset_update_method(self):\n        variables, coord_names, dims = merge.dataset_update_method(self.dataset, self.other)\n        self.assertEqual(set(variables.keys()), {'var1', 'var2', 'var3'})\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_967": ["\nimport unittest\nimport inspect\nfrom sphinx.util import inspect as sphinx_inspect\n\nclass TestSphinxInspect(unittest.TestCase):\n    def setUp(self):\n        self.func = lambda x: x**2\n\n    def test_getargspec(self):\n        argspec = sphinx_inspect.getargspec(self.func)\n        self.assertEqual(argspec.args, ['x'])\n\n    def test_unwrap(self):\n        unwrapped_func = sphinx_inspect.unwrap(self.func)\n        self.assertIs(unwrapped_func, self.func)\n\n    def test_getannotations(self):\n        annotations = sphinx_inspect.getannotations(self.func)\n        self.assertEqual(annotations, {})\n\n    # Add more tests for other functions as needed\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_153": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.core.management.base import BaseCommand, AppCommand, LabelCommand, CommandError, CommandParser, SystemCheckError\nfrom io import StringIO\n\nclass TestBaseCommand(unittest.TestCase):\n    def setUp(self):\n        self.command = BaseCommand()\n\n    def test_create_parser(self):\n        parser = self.command.create_parser('prog_name', 'subcommand')\n        self.assertIsInstance(parser, CommandParser)\n\n    def test_execute(self):\n        with patch.object(self.command, 'handle', return_value='output') as mock_handle:\n            output = self.command.execute()\n            self.assertEqual(output, 'output')\n            mock_handle.assert_called_once()\n\n    def test_check(self):\n        with patch('django.core.management.base.checks.run_checks') as mock_run_checks:\n            mock_run_checks.return_value = []\n            self.command.check()\n            mock_run_checks.assert_called_once()\n\n    def test_check_migrations(self):\n        with patch('django.core.management.base.MigrationExecutor') as mock_migration_executor:\n            mock_migration_executor.return_value.migration_plan.return_value = []\n            self.command.check_migrations()\n            mock_migration_executor.assert_called_once()\n\n    def test_handle_not_implemented(self):\n        with self.assertRaises(NotImplementedError):\n            self.command.handle()\n\nclass TestAppCommand(unittest.TestCase):\n    def setUp(self):\n        self.command = AppCommand()\n\n    def test_handle(self):\n        with patch('django.apps.apps.get_app_config', return_value='app_config') as mock_get_app_config:\n            with patch.object(self.command, 'handle_app_config', return_value='output') as mock_handle_app_config:\n                output = self.command.handle('app_label')\n                self.assertEqual(output, 'output')\n                mock_get_app_config.assert_called_once()\n                mock_handle_app_config.assert_called_once()\n\n    def test_handle_app_config_not_implemented(self):\n        with self.assertRaises(NotImplementedError):\n            self.command.handle_app_config('app_config')\n\nclass TestLabelCommand(unittest.TestCase):\n    def setUp(self):\n        self.command = LabelCommand()\n\n    def test_handle(self):\n        with patch.object(self.command, 'handle_label', return_value='output') as mock_handle_label:\n            output = self.command.handle('label')\n            self.assertEqual(output, 'output')\n            mock_handle_label.assert_called_once()\n\n    def test_handle_label_not_implemented(self):\n        with self.assertRaises(NotImplementedError):\n            self.command.handle_label('label')\n"], "sample_970": ["\nimport unittest\nfrom typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar, Union)\nfrom sphinx.util.typing import restify, stringify, get_type_hints, ForwardRef\n\nclass TestTyping(unittest.TestCase):\n    def setUp(self):\n        self.cls1 = NewType('NewInt', int)\n        self.cls2 = Union[int, str]\n        self.cls3 = Optional[int]\n        self.cls4 = ForwardRef('int')\n        self.cls5 = Callable[[int], str]\n        self.cls6 = Dict[str, int]\n\n    def test_restify(self):\n        self.assertEqual(restify(self.cls1), ':py:class:`__main__.NewInt`')\n        self.assertEqual(restify(self.cls2), ':py:obj:`~typing.Union`\\\\ [:py:class:`int`, :py:class:`str`]')\n        self.assertEqual(restify(self.cls3), ':py:obj:`~typing.Optional`\\\\ [:py:class:`int`]')\n        self.assertEqual(restify(self.cls4), ':py:class:`int`')\n        self.assertEqual(restify(self.cls5), ':py:obj:`~typing.Callable`\\\\ [[:py:class:`int`], :py:class:`str`]')\n        self.assertEqual(restify(self.cls6), ':py:obj:`~typing.Dict`\\\\ [:py:class:`str`, :py:class:`int`]')\n\n    def test_stringify(self):\n        self.assertEqual(stringify(self.cls1), '__main__.NewInt')\n        self.assertEqual(stringify(self.cls2), 'typing.Union[int, str]')\n        self.assertEqual(stringify(self.cls3), 'typing.Optional[int]')\n        self.assertEqual(stringify(self.cls4), 'int')\n        self.assertEqual(stringify(self.cls5), 'typing.Callable[[int], str]')\n        self.assertEqual(stringify(self.cls6), 'typing.Dict[str, int]')\n\n    def test_get_type_hints(self):\n        def func(a: int, b: str) -> bool:\n            pass\n        self.assertEqual(get_type_hints(func), {'a': int, 'b': str, 'return': bool})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1103": ["\nimport unittest\nfrom sympy import symbols, Matrix, MatrixSymbol, S, I, eye, Symbol\nfrom sympy.matrices.expressions import MatMul, ZeroMatrix, Identity, MatPow\nfrom sympy.strategies import rm_id\nfrom sympy.matrices.expressions.matmul import (validate, newmul, any_zeros, merge_explicit, remove_ids,\n                                               factor_in_front, combine_powers, only_squares, refine_MatMul)\nfrom sympy import Q, assuming, refine\n\nclass TestMatMul(unittest.TestCase):\n    def setUp(self):\n        self.A = MatrixSymbol('A', 5, 4)\n        self.B = MatrixSymbol('B', 4, 3)\n        self.C = MatrixSymbol('C', 3, 6)\n\n    def test_matmul_creation(self):\n        matmul = MatMul(self.A, self.B, self.C)\n        self.assertEqual(str(matmul), \"A*B*C\")\n\n    def test_validate(self):\n        with self.assertRaises(ValueError):\n            validate(self.A, self.C)\n\n    def test_newmul(self):\n        matmul = newmul(1, self.A, self.B)\n        self.assertEqual(str(matmul), \"A*B\")\n\n    def test_any_zeros(self):\n        matmul = MatMul(self.A, ZeroMatrix(4, 4), self.B)\n        self.assertTrue(any_zeros(matmul).is_ZeroMatrix)\n\n    def test_merge_explicit(self):\n        B = Matrix([[1, 1], [1, 1]])\n        C = Matrix([[1, 2], [3, 4]])\n        matmul = MatMul(self.A, B, C)\n        merged = merge_explicit(matmul)\n        self.assertEqual(str(merged), \"A*Matrix([[4, 6], [4, 6]])\")\n\n    def test_remove_ids(self):\n        matmul = MatMul(self.A, Identity(4), self.B)\n        removed = remove_ids(matmul)\n        self.assertEqual(str(removed), \"A*B\")\n\n    def test_factor_in_front(self):\n        matmul = MatMul(2, self.A, self.B)\n        factored = factor_in_front(matmul)\n        self.assertEqual(str(factored), \"2*A*B\")\n\n    def test_combine_powers(self):\n        matmul = MatMul(self.A, self.A**2)\n        combined = combine_powers(matmul)\n        self.assertEqual(str(combined), \"A**3\")\n\n    def test_only_squares(self):\n        with self.assertRaises(RuntimeError):\n            only_squares(self.A, self.B)\n\n    def test_refine_MatMul(self):\n        X = MatrixSymbol('X', 2, 2)\n        expr = X * X.T\n        with assuming(Q.orthogonal(X)):\n            refined = refine(expr)\n        self.assertTrue(refined.is_Identity)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_910": ["\nimport unittest\nfrom sphinx.domains.c import CDomain, CXRefRole, CExprRole, Symbol, DefinitionParser\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.testing.util import SphinxTestCase\n\nclass TestCDomain(unittest.TestCase):\n    def setUp(self):\n        self.env = BuildEnvironment()\n        self.domain = CDomain(self.env)\n\n    def test_note_object(self):\n        self.domain.note_object('test_object', 'function', 'node_id')\n        self.assertEqual(self.domain.objects['test_object'], ('', 'node_id', 'function'))\n\n    def test_clear_doc(self):\n        root_symbol = Symbol(None, None, None, None)\n        self.domain.data['root_symbol'] = root_symbol\n        self.domain.objects['test_object'] = ('docname', 'node_id', 'function')\n        self.domain.clear_doc('docname')\n        self.assertNotIn('test_object', self.domain.objects)\n\nclass TestCXRefRole(unittest.TestCase):\n    def setUp(self):\n        self.env = BuildEnvironment()\n        self.role = CXRefRole()\n\n    def test_process_link(self):\n        refnode = docutils.nodes.reference()\n        title, target = self.role.process_link(self.env, refnode, False, 'title', 'target')\n        self.assertEqual(title, 'title')\n        self.assertEqual(target, 'target')\n\nclass TestCExprRole(unittest.TestCase):\n    def setUp(self):\n        self.env = BuildEnvironment()\n        self.role = CExprRole(asCode=True)\n\n    def test_run(self):\n        self.role.text = 'int x = 10;'\n        nodes, messages = self.role.run()\n        self.assertEqual(len(nodes), 1)\n        self.assertEqual(nodes[0].astext(), 'int x = 10;')\n\nclass TestSymbol(unittest.TestCase):\n    def test_init(self):\n        parent = Symbol(None, None, None, None)\n        ident = 'test_ident'\n        declaration = None\n        docname = 'test_docname'\n        symbol = Symbol(parent, ident, declaration, docname)\n        self.assertEqual(symbol.parent, parent)\n        self.assertEqual(symbol.ident, ident)\n        self.assertEqual(symbol.declaration, declaration)\n        self.assertEqual(symbol.docname, docname)\n\nclass TestDefinitionParser(SphinxTestCase):\n    def test_parse_expression(self):\n        parser = DefinitionParser('int x = 10;', location=None, config=self.config)\n        expression = parser.parse_expression()\n        self.assertEqual(str(expression), 'int x = 10;')\n"], "sample_320": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nfrom django.db import models\nfrom django.db.migrations.operations.models import (\n    CreateModel, DeleteModel, RenameModel, AlterModelTable, AlterModelTableComment,\n    AlterUniqueTogether, AlterIndexTogether, AlterOrderWithRespectTo, AlterModelOptions,\n    AlterModelManagers, AddIndex, RemoveIndex, RenameIndex, AddConstraint, RemoveConstraint\n)\nfrom django.db.migrations.state import ProjectState\n\nclass TestModelOperations(unittest.TestCase):\n\n    def setUp(self):\n        self.app_label = 'test_app'\n        self.state = ProjectState()\n\n    def test_create_model(self):\n        operation = CreateModel('TestModel', fields=[('field1', models.CharField(max_length=100))])\n        operation.state_forwards(self.app_label, self.state)\n        self.assertIn((self.app_label, 'testmodel'), self.state.models)\n\n    def test_delete_model(self):\n        self.state.models[(self.app_label, 'testmodel')] = MagicMock()\n        operation = DeleteModel('TestModel')\n        operation.state_forwards(self.app_label, self.state)\n        self.assertNotIn((self.app_label, 'testmodel'), self.state.models)\n\n    # Add more tests for RenameModel, AlterModelTable, AlterModelTableComment,\n    # AlterUniqueTogether, AlterIndexTogether, AlterOrderWithRespectTo,\n    # AlterModelOptions, AlterModelManagers, AddIndex, RemoveIndex, RenameIndex,\n    # AddConstraint, and RemoveConstraint following the same pattern as above.\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1157": ["\nimport unittest\nfrom sympy import symbols, Eq, Float, Rational, I\nfrom sympy.parsing.sympy_parser import (\n    parse_expr, standard_transformations, rationalize, TokenError, split_symbols,\n    implicit_multiplication, convert_equals_signs, convert_xor,\n    function_exponentiation, implicit_multiplication_application\n)\n\nclass TestSympyParser(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_parse_expr(self):\n        self.assertEqual(parse_expr('x + y'), self.x + self.y)\n        self.assertEqual(parse_expr('x * y'), self.x * self.y)\n        self.assertEqual(parse_expr('x ** y'), self.x ** self.y)\n\n    def test_rationalize(self):\n        tokens = [(1, 'Float'), (2, '('), (3, '0.5'), (4, ')')]\n        global_dict = {}\n        local_dict = {}\n        self.assertEqual(rationalize(tokens, local_dict, global_dict),\n                         [(1, 'Rational'), (2, '('), (3, '0.5'), (4, ')')])\n\n    def test_convert_xor(self):\n        tokens = [(1, 'OP'), (2, '^')]\n        global_dict = {}\n        local_dict = {}\n        self.assertEqual(convert_xor(tokens, local_dict, global_dict),\n                         [(1, 'OP'), (2, '**')])\n\n    def test_implicit_multiplication(self):\n        tokens = [(1, 'NAME'), (2, 'Symbol'), (3, 'OP'), (4, '('),\n                  (5, 'NAME'), (6, '\"x\"'), (7, 'OP'), (8, ')'),\n                  (9, 'NAME'), (10, 'Symbol'), (11, 'OP'), (12, '('),\n                  (13, 'NAME'), (14, '\"y\"'), (15, 'OP'), (16, ')')]\n        global_dict = {}\n        local_dict = {}\n        self.assertEqual(implicit_multiplication(tokens, local_dict, global_dict),\n                         [(1, 'Symbol'), (2, '('), (3, 'NAME'), (4, '\"x\"'),\n                          (5, 'OP'), (6, ')'), (7, 'OP'), (8, '*'),\n                          (9, 'Symbol'), (10, '('), (11, 'NAME'), (12, '\"y\"'),\n                          (13, 'OP'), (14, ')')])\n\n    # Add more tests for other functions as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_952": ["\nimport unittest\nfrom sphinx.domains.c import DefinitionParser, ASTDeclaration, ASTNestedName, ASTIdentifier, DefinitionError, Symbol\nfrom sphinx.testing import restructuredtext\n\nclass TestCDomain(unittest.TestCase):\n\n    def setUp(self):\n        self.parser = DefinitionParser(\"\", location=None, config=None)\n\n    def test_parse_nested_name(self):\n        self.parser.definition = \"abc.def.ghi\"\n        result = self.parser._parse_nested_name()\n        self.assertIsInstance(result, ASTNestedName)\n        self.assertEqual(str(result), \"abc.def.ghi\")\n\n    def test_parse_nested_name_rooted(self):\n        self.parser.definition = \".abc.def.ghi\"\n        result = self.parser._parse_nested_name()\n        self.assertIsInstance(result, ASTNestedName)\n        self.assertTrue(result.rooted)\n        self.assertEqual(str(result), \"abc.def.ghi\")\n\n    def test_parse_declaration(self):\n        self.parser.definition = \"int abc\"\n        result = self.parser.parse_declaration(\"member\", \"var\")\n        self.assertIsInstance(result, ASTDeclaration)\n        self.assertEqual(str(result.declaration.name), \"abc\")\n\n    def test_parse_declaration_error(self):\n        self.parser.definition = \"int abc; int def\"\n        with self.assertRaises(DefinitionError):\n            self.parser.parse_declaration(\"member\", \"var\")\n\n    def test_symbol_add_name(self):\n        root = Symbol(None, None, None, None, None)\n        symbol = root.add_name(ASTNestedName([ASTIdentifier(\"abc\")], rooted=False))\n        self.assertIsInstance(symbol, Symbol)\n        self.assertEqual(str(symbol.ident), \"abc\")\n\n    def test_symbol_add_declaration(self):\n        root = Symbol(None, None, None, None, None)\n        decl = ASTDeclaration(\"member\", \"var\", ASTType(ASTDeclSpecs(None, None, None, None),\n                                                       ASTDeclaratorNameParam(ASTNestedName([ASTIdentifier(\"abc\")], rooted=False), [], None)),\n                              False)\n        symbol = root.add_declaration(decl, \"docname\", 1)\n        self.assertIsInstance(symbol, Symbol)\n        self.assertEqual(str(symbol.declaration.name), \"abc\")\n\n    def test_restructuredtext_parsing(self):\n        text = \".. c:member:: int abc\"\n        doctree = restructuredtext.parse(text)\n        self.assertEqual(doctree[0].tagname, \"desc\")\n        self.assertEqual(doctree[0][0].tagname, \"desc_signature\")\n        self.assertEqual(doctree[0][0][0].astext(), \"int\")\n        self.assertEqual(doctree[0][0][1].astext(), \"abc\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_873": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nimport numpy as np\nfrom sklearn.base import (\n    BaseEstimator,\n    ClassifierMixin,\n    RegressorMixin,\n    ClusterMixin,\n    BiclusterMixin,\n    TransformerMixin,\n    OneToOneFeatureMixin,\n    ClassNamePrefixFeaturesOutMixin,\n    DensityMixin,\n    OutlierMixin,\n    MetaEstimatorMixin,\n    MultiOutputMixin,\n    _UnstableArchMixin,\n    is_classifier,\n    is_regressor,\n    is_outlier_detector,\n)\n\nclass TestBaseEstimator(unittest.TestCase):\n    def setUp(self):\n        self.estimator = BaseEstimator()\n\n    def test_get_params(self):\n        params = self.estimator.get_params()\n        self.assertIsInstance(params, dict)\n\n    def test_set_params(self):\n        self.estimator.set_params(param1='value1')\n        self.assertEqual(self.estimator.param1, 'value1')\n\n    # Add more test methods as needed\n\nclass TestClassifierMixin(unittest.TestCase):\n    # Add test methods for ClassifierMixin\n\nclass TestRegressorMixin(unittest.TestCase):\n    # Add test methods for RegressorMixin\n\n# Continue with the rest of the classes in a similar manner\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1011": ["\nimport unittest\nfrom sympy import symbols, Rational, sin, Integral, Matrix, pi, asin, log\nfrom sympy.printing.latex import latex, translate, LatexPrinter, greek_letters_set, tex_greek_dictionary, other_symbols\n\nclass TestLatexPrinter(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.tau, self.mu, self.r = symbols('x y tau mu r')\n\n    def test_translate(self):\n        self.assertEqual(translate('alphahatdotprime'), \"{\\\\dot{\\\\hat{\\\\alpha}}}'\")\n        self.assertEqual(translate('alpha'), \"\\\\alpha\")\n        self.assertEqual(translate('pi'), \"\\\\pi\")\n\n    def test_latex(self):\n        self.assertEqual(latex((2*self.tau)**Rational(7, 2)), \"8 \\\\sqrt{2} \\\\tau^{\\\\frac{7}{2}}\")\n        self.assertEqual(latex((2*self.tau)**sin(Rational(7, 2))), \"\\\\left(2 \\\\tau\\\\right)^{\\\\sin{\\\\left (\\\\frac{7}{2} \\\\right )}}\")\n        self.assertEqual(latex((2*self.tau)**sin(Rational(7, 2)), fold_func_brackets=True), \"\\\\left(2 \\\\tau\\\\right)^{\\\\sin {\\\\frac{7}{2}}}\")\n        self.assertEqual(latex(3*self.x**2/self.y, fold_short_frac=True), \"3 x^{2} / y\")\n        self.assertEqual(latex(Integral(self.r, self.r)/2/pi, long_frac_ratio=0), \"\\\\frac{1}{2 \\\\pi} \\\\int r\\\\, dr\")\n        self.assertEqual(latex(Matrix(2, 1, [self.x, self.y]), mat_str=\"array\"), \"\\\\left[\\\\begin{array}{c}x\\\\\\\\y\\\\end{array}\\\\right]\")\n        self.assertEqual(latex(log(10), ln_notation=True), \"\\\\ln{\\\\left (10 \\\\right )}\")\n\n    def test_LatexPrinter(self):\n        printer = LatexPrinter()\n        self.assertEqual(printer.doprint(self.x**2), \"x^{2}\")\n        self.assertEqual(printer.doprint(self.x + self.y), \"x + y\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1153": ["\nimport unittest\nfrom sympy import *\nfrom sympy.functions.elementary.complexes import *\n\nclass TestComplexFunctions(unittest.TestCase):\n    def setUp(self):\n        self.x = Symbol('x', real=True)\n        self.y = Symbol('y', imaginary=True)\n        self.z = Symbol('z', complex=True)\n\n    def test_re(self):\n        self.assertEqual(re(2*E), 2*E)\n        self.assertEqual(re(2*I + 17), 17)\n        self.assertEqual(re(2*I), 0)\n\n    def test_im(self):\n        self.assertEqual(im(2*E), 0)\n        self.assertEqual(im(2*I + 17), 2)\n        self.assertEqual(im(2*I), 2)\n\n    def test_sign(self):\n        self.assertEqual(sign(-1), -1)\n        self.assertEqual(sign(0), 0)\n        self.assertEqual(sign(-3*I), -I)\n\n    def test_Abs(self):\n        self.assertEqual(Abs(-1), 1)\n        self.assertEqual(Abs(3*self.x + 2*I), sqrt(9*self.x**2 + 4))\n        self.assertEqual(Abs(8*I), 8)\n\n    def test_arg(self):\n        self.assertEqual(arg(2.0), 0)\n        self.assertEqual(arg(I), pi/2)\n\n    def test_conjugate(self):\n        self.assertEqual(conjugate(2), 2)\n        self.assertEqual(conjugate(I), -I)\n        self.assertEqual(conjugate(3 + 2*I), 3 - 2*I)\n\n    def test_transpose(self):\n        A = MatrixSymbol('A', 25, 9)\n        self.assertEqual(transpose(A), A.T)\n\n    def test_adjoint(self):\n        A = MatrixSymbol('A', 10, 5)\n        self.assertEqual(adjoint(A), Adjoint(A))\n\n    def test_polar_lift(self):\n        self.assertEqual(polar_lift(4), 4*exp_polar(0))\n        self.assertEqual(polar_lift(-4), 4*exp_polar(I*pi))\n\n    def test_periodic_argument(self):\n        self.assertEqual(periodic_argument(exp_polar(10*I*pi), 2*pi), 0)\n        self.assertEqual(periodic_argument(exp_polar(5*I*pi), 4*pi), pi)\n\n    def test_unbranched_argument(self):\n        self.assertEqual(unbranched_argument(exp_polar(15*I*pi)), 15*pi)\n        self.assertEqual(unbranched_argument(exp_polar(7*I*pi)), 7*pi)\n\n    def test_principal_branch(self):\n        self.assertEqual(principal_branch(exp_polar(2*pi*I)*3, 2*pi), 3*exp_polar(0))\n        self.assertEqual(principal_branch(exp_polar(2*pi*I)*3*self.z, 2*pi), 3*principal_branch(self.z, 2*pi))\n\n    def test_polarify(self):\n        expr = (-self.x)**self.y\n        self.assertEqual(polarify(expr)[0].expand(), (_x**_y)*exp_polar(_y*I*pi))\n\n    def test_unpolarify(self):\n        self.assertEqual(unpolarify(polar_lift(I + 2)), 2 + I)\n        self.assertEqual(unpolarify(sin(polar_lift(I + 7))), sin(7 + I))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_925": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom sphinx.domains.cpp import DefinitionParser, DefinitionError, NoOldIdError\nfrom sphinx.domains.cpp import CPPDomain, Symbol, CPPObject\nfrom sphinx.addnodes import desc_signature\nfrom sphinx.environment import BuildEnvironment\n\nclass TestDefinitionParser(unittest.TestCase):\n    def setUp(self):\n        self.config = Mock()\n        self.config.cpp_id_attributes = []\n        self.config.cpp_paren_attributes = []\n\n    def test_parse_string(self):\n        parser = DefinitionParser('\"test string\"', config=self.config)\n        self.assertEqual(parser._parse_string(), '\"test string\"')\n\n    def test_parse_literal(self):\n        parser = DefinitionParser('42', config=self.config)\n        self.assertIsNotNone(parser._parse_literal())\n\n    def test_parse_primary_expression(self):\n        parser = DefinitionParser('identifier', config=self.config)\n        self.assertIsNotNone(parser._parse_primary_expression())\n\n    def test_parse_unary_expression(self):\n        parser = DefinitionParser('-42', config=self.config)\n        self.assertIsNotNone(parser._parse_unary_expression())\n\n    def test_parse_cast_expression(self):\n        parser = DefinitionParser('(int)42.5', config=self.config)\n        self.assertIsNotNone(parser._parse_cast_expression())\n\n    def test_parse_logical_or_expression(self):\n        parser = DefinitionParser('true || false', config=self.config)\n        self.assertIsNotNone(parser._parse_logical_or_expression(inTemplate=False))\n\n    def test_parse_assignment_expression(self):\n        parser = DefinitionParser('a = 42', config=self.config)\n        self.assertIsNotNone(parser._parse_assignment_expression(inTemplate=False))\n\n    def test_parse_constant_expression(self):\n        parser = DefinitionParser('42 + 2', config=self.config)\n        self.assertIsNotNone(parser._parse_constant_expression(inTemplate=False))\n\n    def test_parse_expression(self):\n        parser = DefinitionParser('a + b * c', config=self.config)\n        self.assertIsNotNone(parser._parse_expression())\n\n    # Add more test methods for other parsing methods as needed\n\nclass TestSymbol(unittest.TestCase):\n    def test_get_lookup_key(self):\n        symbol = Symbol(None, None, None, None, None, None)\n        self.assertIsNotNone(symbol.get_lookup_key())\n\n    # Add more test methods for Symbol class as needed\n\nclass TestCPPObject(unittest.TestCase):\n    def test_describe_signature(self):\n        ast = Mock()\n        signode = desc_signature()\n        options = {}\n        cpp_object = CPPObject()\n        cpp_object.describe_signature(signode, ast, options)\n        # Add assertions to verify the signode content as needed\n\n    # Add more test methods for CPPObject class as needed\n\nclass TestCPPDomain(unittest.TestCase):\n    def setUp(self):\n        self.domain = CPPDomain()\n        self.env = Mock(spec=BuildEnvironment)\n        self.env.domaindata = {'cpp': {'root_symbol': Symbol(None, None, None, None, None, None)}}\n\n    def test_clear_doc(self):\n        self.domain.clear_doc('test_docname')\n        # Add assertions to verify the domain data is cleared as expected\n\n    def test_process_doc(self):\n        self.domain.process_doc(self.env, 'test_docname', Mock())\n        # Add assertions to verify the domain data is processed as expected\n\n    # Add more test methods for C"], "sample_308": ["\nimport unittest\nfrom datetime import date, datetime, time, timedelta, timezone\nfrom django.utils.dateformat import DateFormat, TimeFormat, format, time_format\n\nclass TestDateFormat(unittest.TestCase):\n    def test_date_format(self):\n        d = date(2003, 10, 7)\n        df = DateFormat(d)\n        self.assertEqual(df.format('jS F Y'), '7th October 2003')\n        self.assertEqual(df.format('Y-m-d'), '2003-10-07')\n\n    def test_time_format(self):\n        t = time(11, 39, 59)\n        tf = TimeFormat(t)\n        self.assertEqual(tf.format('H:i:s'), '11:39:59')\n        self.assertEqual(tf.format('h:i a'), '11:39 AM')\n\n    def test_convenience_functions(self):\n        d = date(2003, 10, 7)\n        self.assertEqual(format(d, 'jS F Y'), '7th October 2003')\n        t = time(11, 39, 59)\n        self.assertEqual(time_format(t, 'H:i:s'), '11:39:59')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_232": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.core import exceptions\nfrom django.db import connections, NotSupportedError\nfrom django.db.models import lookups\nfrom django.db.models.fields.json import (\n    JSONField, KeyTransform, DataContains, ContainedBy, HasKey, HasKeys, HasAnyKeys, JSONExact,\n    KeyTransformIsNull, KeyTransformIn, KeyTransformExact, KeyTransformIExact, KeyTransformIContains,\n    KeyTransformStartsWith, KeyTransformIStartsWith, KeyTransformEndsWith, KeyTransformIEndsWith,\n    KeyTransformRegex, KeyTransformIRegex, KeyTransformLt, KeyTransformLte, KeyTransformGt, KeyTransformGte\n)\n\nclass TestJSONField(unittest.TestCase):\n\n    def setUp(self):\n        self.field = JSONField()\n\n    def test_init(self):\n        self.assertRaises(ValueError, JSONField, encoder='not_callable')\n        self.assertRaises(ValueError, JSONField, decoder='not_callable')\n\n    def test_check(self):\n        mock_model = Mock()\n        mock_model._meta.required_db_features = set()\n        mock_connection = Mock()\n        mock_connection.features.supports_json_field = False\n        mock_connection.display_name = 'Mock DB'\n        with patch.dict(connections, {'default': mock_connection}):\n            errors = self.field.check(databases=['default'], model=mock_model)\n            self.assertEqual(len(errors), 1)\n\n    def test_from_db_value(self):\n        self.assertEqual(self.field.from_db_value('{\"key\": \"value\"}', None, None), {'key': 'value'})\n\n    def test_get_prep_value(self):\n        self.assertEqual(self.field.get_prep_value({'key': 'value'}), '{\"key\": \"value\"}')\n\n    def test_validate(self):\n        self.field.validate({'key': 'value'}, None)\n        with self.assertRaises(exceptions.ValidationError):\n            self.field.validate(object(), None)\n\n    def test_register_lookup(self):\n        self.assertIsInstance(JSONField.get_lookup('exact')(None, None), lookups.Exact)\n        JSONField.register_lookup(DataContains)\n        self.assertIsInstance(JSONField.get_lookup('contains')(None, None), DataContains)\n\nclass TestKeyTransform(unittest.TestCase):\n\n    def setUp(self):\n        self.transform = KeyTransform('key')\n\n    def test_init(self):\n        self.assertEqual(self.transform.key_name, 'key')\n\n    # Add more tests for other methods in KeyTransform...\n\n# Add more test classes for other lookups and functionalities...\n"], "sample_610": ["\nimport unittest\nfrom datetime import timedelta\nfrom xarray.coding.cftimeindex import CFTimeIndex, _parse_array_of_cftime_strings, _parse_iso8601_with_reso, _parsed_string_to_bounds, assert_all_valid_date_type, parse_iso8601_like\nimport cftime\n\nclass TestCFTimeIndex(unittest.TestCase):\n    def setUp(self):\n        self.date_type = cftime.DatetimeNoLeap\n        self.test_dates = [self.date_type(2000, 1, 1), self.date_type(2000, 1, 2), self.date_type(2000, 1, 3)]\n        self.test_index = CFTimeIndex(self.test_dates)\n\n    def test_parse_iso8601_like(self):\n        result = parse_iso8601_like(\"2000-01-01T00:00:00\")\n        self.assertEqual(result[\"year\"], \"2000\")\n        self.assertEqual(result[\"month\"], \"01\")\n        self.assertEqual(result[\"day\"], \"01\")\n        self.assertEqual(result[\"hour\"], \"00\")\n        self.assertEqual(result[\"minute\"], \"00\")\n        self.assertEqual(result[\"second\"], \"00\")\n\n    def test_parse_iso8601_with_reso(self):\n        date, resolution = _parse_iso8601_with_reso(self.date_type, \"2000-01-01T00:00:00\")\n        self.assertEqual(date, self.date_type(2000, 1, 1, 0, 0, 0))\n        self.assertEqual(resolution, \"second\")\n\n    def test_parsed_string_to_bounds(self):\n        parsed = _parse_iso8601_with_reso(self.date_type, \"2000-01-01T00:00:00\")[0]\n        start, end = _parsed_string_to_bounds(self.date_type, \"day\", parsed)\n        self.assertEqual(start, self.date_type(2000, 1, 1))\n        self.assertEqual(end, self.date_type(2000, 1, 2) - timedelta(microseconds=1))\n\n    def test_assert_all_valid_date_type(self):\n        assert_all_valid_date_type(self.test_dates)\n\n    def test_parse_array_of_cftime_strings(self):\n        strings = np.array([[\"2000-01-01T00:00:00\", \"2000-01-02T00:00:00\"], [\"2000-01-03T00:00:00\", \"2000-01-04T00:00:00\"]])\n        result = _parse_array_of_cftime_strings(strings, self.date_type)\n        self.assertTrue(np.array_equal(result, np.array([[self.date_type(2000, 1, 1), self.date_type(2000, 1, 2)], [self.date_type(2000, 1, 3), self.date_type(2000, 1, 4)]])))\n\n    def test_contains(self):\n        self.assertTrue(\"2000-01-01\" in self.test_index)\n        self.assertFalse(\"2000-01-04\" in self.test_index)\n\n    def test_shift(self):\n        result = self.test_index.shift(1, \"D\")\n        self.assertTrue(np.array_equal(result.values, np.array([self.date_type(2000, 1, 2), self.date_type(2000, 1, 3), self.date_type(2000, 1, 4)])))\n\n    def test_add(self):\n        result = self.test_index + timedelta(days=1)\n        self.assertTrue(np.array_equal(result.values, np.array([self.date_type(2000, 1, 2), self.date_type(2000, 1, 3), self.date_type(2000, 1, 4)])))\n\n    def test_sub(self):\n        result = self.test_index - self.test_index[0]\n        self.assertTrue(np.array_equal(result.values, np.array([timedelta(days=0), timedelta(days=1), timedelta(days=2)])))\n\n    def test_to_datetimeindex(self):\n        result = self.test_index.to_datetimeindex()\n        self.assertTrue(isinstance(result, pd.DatetimeIndex))\n\n    def test_strftime(self):\n        result = self.test_index.strftime(\"%Y-%m-%d\")\n        self.assertTrue(np.array_equal(result.values, np.array([\"2000-01-01\", \"2000-01-02\", \"2000-01-03\"])))\n\n    def test_floor(self):\n        result = self.test_index.floor(\"D\")\n        self.assertTrue(np.array_equal(result.values, self.test_index.values))\n\n    def test_ceil(self):\n        result = self.test_index.ceil(\"D\")\n        self.assertTrue(np.array_equal(result.values, self.test_index.values))\n\n    def test_round(self):\n        result = self.test_index.round(\"D\")\n        self.assertTrue(np.array_equal(result.values, self.test_index.values))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_455": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db import connections\nfrom django.db.models.query_utils import Q\nfrom django.db.models.constraints import BaseConstraint, CheckConstraint, Deferrable, UniqueConstraint\nfrom django.core.exceptions import ValidationError\n\nclass TestBaseConstraint(unittest.TestCase):\n    def test_init(self):\n        # Test initializing BaseConstraint with name\n        base_constraint = BaseConstraint(name='test_constraint')\n        self.assertEqual(base_constraint.name, 'test_constraint')\n\n        # Test initializing BaseConstraint without name\n        with self.assertRaises(TypeError):\n            base_constraint = BaseConstraint()\n\n    # Add more tests for BaseConstraint methods\n\nclass TestCheckConstraint(unittest.TestCase):\n    def test_init(self):\n        # Test initializing CheckConstraint with check and name\n        check_constraint = CheckConstraint(check=Q(age__gt=18), name='test_constraint')\n        self.assertEqual(check_constraint.check, Q(age__gt=18))\n        self.assertEqual(check_constraint.name, 'test_constraint')\n\n        # Test initializing CheckConstraint without check\n        with self.assertRaises(TypeError):\n            check_constraint = CheckConstraint(name='test_constraint')\n\n    # Add more tests for CheckConstraint methods\n\nclass TestUniqueConstraint(unittest.TestCase):\n    def test_init(self):\n        # Test initializing UniqueConstraint with fields and name\n        unique_constraint = UniqueConstraint(fields=('field1', 'field2'), name='test_constraint')\n        self.assertEqual(unique_constraint.fields, ('field1', 'field2'))\n        self.assertEqual(unique_constraint.name, 'test_constraint')\n\n        # Test initializing UniqueConstraint without fields\n        with self.assertRaises(ValueError):\n            unique_constraint = UniqueConstraint(name='test_constraint')\n\n    # Add more tests for UniqueConstraint methods\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_575": ["\nimport unittest\nfrom unittest.mock import patch\nimport pandas as pd\nfrom seaborn._core.plot import Plot, Layer, FacetSpec, PairSpec\nfrom seaborn._marks.base import Mark\nfrom seaborn._stats.base import Stat\nfrom seaborn._core.scales import Scale\nfrom seaborn._core.moves import Move\nfrom seaborn._core.properties import PROPERTIES\n\nclass TestPlot(unittest.TestCase):\n\n    def setUp(self):\n        self.data = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5], 'z': ['a', 'b', 'a', 'b', 'a']})\n\n    def test_resolve_positionals(self):\n        p = Plot()\n        args = (self.data, 'x', 'y')\n        data, variables = p._resolve_positionals(args, None, {})\n        self.assertEqual(data, self.data)\n        self.assertEqual(variables, {'y': 'y', 'x': 'x'})\n\n    def test_add(self):\n        p = Plot(self.data, x='x', y='y')\n        mark = Mark()\n        stat = Stat()\n        p.add(mark, stat)\n        self.assertEqual(len(p._layers), 1)\n        self.assertEqual(p._layers[0]['mark'], mark)\n        self.assertEqual(p._layers[0]['stat'], stat)\n\n    # More tests for pair, facet, scale, share, limit, label, layout, theme, save, show, plot, _plot, _extract_data, _resolve_label, _setup_figure, _compute_stats, _get_scale, _get_subplot_data, _setup_scales, _plot_layer, _unscale_coords, _generate_pairings, _get_subplot_index, _filter_subplot_data, _setup_split_generator, _update_legend_contents, _make_legend, _finalize_figure\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_725": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing import Imputer\n\nclass TestImputer(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2], [np.nan, 3], [7, 6]])\n\n    def test_mean_imputation(self):\n        imp = Imputer(missing_values=np.nan, strategy='mean')\n        imp.fit(self.X)\n        X_transformed = imp.transform(self.X)\n        np.testing.assert_array_almost_equal(X_transformed, np.array([[1, 2], [4, 3], [7, 6]]))\n\n    def test_median_imputation(self):\n        imp = Imputer(missing_values=np.nan, strategy='median')\n        imp.fit(self.X)\n        X_transformed = imp.transform(self.X)\n        np.testing.assert_array_almost_equal(X_transformed, np.array([[1, 2], [7, 3], [7, 6]]))\n\n    def test_most_frequent_imputation(self):\n        X = np.array([[1, 2, 3], [4, np.nan, np.nan], [1, 2, 1]])\n        imp = Imputer(missing_values=np.nan, strategy='most_frequent')\n        imp.fit(X)\n        X_transformed = imp.transform(X)\n        np.testing.assert_array_almost_equal(X_transformed, np.array([[1, 2, 3], [4, 1, 1], [1, 2, 1]]))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_241": ["\nfrom django.test import TestCase\nfrom django.db.models import F, Q, Value\nfrom django.db.models.lookups import Exact, In, YearExact, YearGt, YearLte, UUIDIExact\nfrom django.db.models.fields import IntegerField, UUIDField\nfrom your_app.models import YourModel  # Import your model here\n\nclass TestLookups(TestCase):\n    def setUp(self):\n        # Set up any necessary data for your tests here\n        YourModel.objects.create(integer_field=1, uuid_field='123e4567-e89b-12d3-a456-426614174000')\n\n    def test_exact_lookup(self):\n        lookup = Exact(F('integer_field'), 1)\n        self.assertEqual(str(lookup), 'integer_field = 1')\n\n    def test_in_lookup(self):\n        lookup = In(F('integer_field'), [1, 2, 3])\n        self.assertEqual(str(lookup), 'integer_field IN (1, 2, 3)')\n\n    def test_year_exact_lookup(self):\n        lookup = YearExact(F('date_field'), 2022)\n        self.assertIsInstance(lookup, YearLookup)\n        # Add more specific assertions here\n\n    def test_year_gt_lookup(self):\n        lookup = YearGt(F('date_field'), 2021)\n        self.assertIsInstance(lookup, YearLookup)\n        # Add more specific assertions here\n\n    def test_year_lte_lookup(self):\n        lookup = YearLte(F('date_field'), 2023)\n        self.assertIsInstance(lookup, YearLookup)\n        # Add more specific assertions here\n\n    def test_uuid_iexact_lookup(self):\n        lookup = UUIDIExact(F('uuid_field'), '123e4567-e89b-12d3-a456-426614174000')\n        self.assertIsInstance(lookup.rhs, Value)\n        # Add more specific assertions here\n"], "sample_837": ["\nimport unittest\nfrom sklearn.base import BaseEstimator, ClassifierMixin, RegressorMixin, clone\nfrom sklearn.datasets import make_classification, make_regression\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\n\nclass TestSklearnBase(unittest.TestCase):\n    def setUp(self):\n        self.X_class, self.y_class = make_classification(n_samples=100, n_features=20, n_informative=2, random_state=1)\n        self.X_reg, self.y_reg = make_regression(n_samples=100, n_features=20, n_informative=2, random_state=1)\n        self.classifier = LogisticRegression()\n        self.regressor = LinearRegression()\n\n    def test_base_estimator_get_params(self):\n        params = self.classifier.get_params()\n        self.assertIsInstance(params, dict)\n\n    def test_classifier_mixin_score(self):\n        self.classifier.fit(self.X_class, self.y_class)\n        score = self.classifier.score(self.X_class, self.y_class)\n        self.assertIsInstance(score, float)\n\n    def test_regressor_mixin_score(self):\n        self.regressor.fit(self.X_reg, self.y_reg)\n        score = self.regressor.score(self.X_reg, self.y_reg)\n        self.assertIsInstance(score, float)\n\n    def test_clone(self):\n        cloned_classifier = clone(self.classifier)\n        self.assertIsNot(cloned_classifier, self.classifier)\n        self.assertIsInstance(cloned_classifier, LogisticRegression)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1027": ["\nimport unittest\nfrom sympy import symbols, lambdify, sqrt, sin, cos, pi\nfrom sympy.utilities.lambdify import implemented_function, lambdastr\n\nclass TestLambdify(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_lambdify_simple_expression(self):\n        expr = self.x**2\n        func = lambdify(self.x, expr, \"numpy\")\n        self.assertEqual(func(2), 4)\n\n    def test_lambdify_complex_expression(self):\n        expr = sin(self.x) + cos(self.y)\n        func = lambdify((self.x, self.y), expr, \"numpy\")\n        self.assertAlmostEqual(func(pi/2, pi), 1)\n\n    def test_lambdify_with_implemented_function(self):\n        f = implemented_function('f', lambda x: x+1)\n        expr = f(self.x)\n        func = lambdify(self.x, expr, \"numpy\")\n        self.assertEqual(func(4), 5)\n\n    def test_lambdastr_simple_expression(self):\n        expr = self.x**2\n        func_str = lambdastr(self.x, expr)\n        func = eval(func_str)\n        self.assertEqual(func(2), 4)\n\n    def test_lambdastr_complex_expression(self):\n        expr = sin(self.x) + cos(self.y)\n        func_str = lambdastr((self.x, self.y), expr)\n        func = eval(func_str)\n        self.assertAlmostEqual(func(pi/2, pi), 1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_154": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.models.base import Model, FieldDoesNotExist, ValidationError\nfrom django.db.models import CharField, IntegerField, ForeignKey\nfrom django.core.exceptions import ValidationError\n\nclass TestModel(unittest.TestCase):\n\n    def setUp(self):\n        class TestModel(Model):\n            name = CharField(max_length=200)\n            age = IntegerField()\n\n            class Meta:\n                app_label = 'test_app'\n\n        self.TestModel = TestModel\n        self.instance = TestModel(name='John', age=30)\n\n    def test_model_init(self):\n        self.assertEqual(self.instance.name, 'John')\n        self.assertEqual(self.instance.age, 30)\n\n    def test_model_get_pk_val(self):\n        self.assertEqual(self.instance._get_pk_val(), None)\n\n    def test_model_set_pk_val(self):\n        self.instance._set_pk_val(1)\n        self.assertEqual(self.instance._get_pk_val(), 1)\n\n    def test_model_get_deferred_fields(self):\n        self.assertEqual(self.instance.get_deferred_fields(), set())\n\n    def test_model_refresh_from_db(self):\n        self.instance.save()\n        self.instance.age = 31\n        self.instance.refresh_from_db()\n        self.assertEqual(self.instance.age, 30)\n\n    def test_model_serializable_value(self):\n        self.assertEqual(self.instance.serializable_value('name'), 'John')\n\n    def test_model_save(self):\n        self.instance.save()\n        self.assertIsNotNone(self.instance.pk)\n\n    def test_model_delete(self):\n        self.instance.save()\n        self.instance.delete()\n        with self.assertRaises(self.TestModel.DoesNotExist):\n            self.TestModel.objects.get(pk=self.instance.pk)\n\n    def test_model_validate_unique(self):\n        self.instance.save()\n        with self.assertRaises(ValidationError):\n            self.TestModel(name='John', age=30).validate_unique()\n\n    def test_model_full_clean(self):\n        self.instance.full_clean()\n\n    def test_model_clean_fields(self):\n        self.instance.clean_fields()\n\n    def test_model_check(self):\n        self.assertEqual(self.TestModel.check(), [])\n\n    def test_model_check_fields(self):\n        self.assertEqual(self.TestModel._check_fields(), [])\n\n    def test_model_check_m2m_through_same_relationship(self):\n        self.assertEqual(self.TestModel._check_m2m_through_same_relationship(), [])\n\n    def test_model_check_id_field(self):\n        self.assertEqual(self.TestModel._check_id_field(), [])\n\n    def test_model_check_field_name_clashes(self):\n        self.assertEqual(self.TestModel._check_field_name_clashes(), [])\n\n    def test_model_check_column_name_clashes(self):\n        self.assertEqual(self.TestModel._check_column_name_clashes(), [])\n\n    def test_model_check_model_name_db_lookup_clashes(self):\n        self.assertEqual(self.TestModel._check_model_name_db_lookup_clashes(), [])\n\n    def test_model_check_property_name_related_field_accessor_clashes(self):\n        self.assertEqual(self.TestModel._check_property_name_related_field_accessor_clashes(), [])\n\n    def test_model_check_single_primary_key(self):\n        self.assertEqual(self.TestModel._check_single_primary_key(), [])\n\n    def test_model_check_index_together(self):\n        self.assertEqual(self.TestModel._check_index_together(), [])\n\n    def test_model_check_unique_together(self):\n        self.assertEqual(self.TestModel._check_unique_together(), [])\n\n    def test_model_check_indexes(self):\n        self.assertEqual(self.TestModel._check_indexes(), [])\n\n    def test_model_check_ordering(self):\n        self.assertEqual(self.TestModel._check_ordering(), [])\n\n    def test_model_check_long_column_names(self):\n        self.assertEqual(self.TestModel._check_long_column_names(), [])\n\n    def test_model_check_constraints(self):\n        self.assertEqual(self.TestModel._check_constraints(databases=['default']), [])\n\n    def test_model_check_model(self):\n        self.assertEqual(self.TestModel._check_model(), [])\n\n    def test_model_check_managers(self):\n        self.assertEqual(self.TestModel._check_managers(), [])\n\n    def test_model_check_swappable(self):\n        self.assertEqual(self.TestModel._check_swappable(), [])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1057": ["\nimport unittest\nfrom sympy import symbols, And, Or, Not, true, false, sin, cos, sqrt, I, Matrix\nfrom sympy.printing.lambdarepr import lambdarepr, LambdaPrinter, NumExprPrinter\n\nx, y = symbols('x y')\n\nclass TestLambdaPrinter(unittest.TestCase):\n    def test_print_And(self):\n        expr = And(x > 0, y < 1)\n        self.assertEqual(lambdarepr(expr), \"(x > 0) and (y < 1)\")\n\n    def test_print_Or(self):\n        expr = Or(x > 0, y < 1)\n        self.assertEqual(lambdarepr(expr), \"(x > 0) or (y < 1)\")\n\n    def test_print_Not(self):\n        expr = Not(x > 0)\n        self.assertEqual(lambdarepr(expr), \"not (x > 0)\")\n\n    def test_print_BooleanTrue(self):\n        expr = true\n        self.assertEqual(lambdarepr(expr), \"True\")\n\n    def test_print_BooleanFalse(self):\n        expr = false\n        self.assertEqual(lambdarepr(expr), \"False\")\n\n    def test_print_ITE(self):\n        expr = (x > 0) ? x : -x\n        self.assertEqual(lambdarepr(expr), \"((x) if (x > 0) else (-x))\")\n\n    def test_print_NumberSymbol(self):\n        expr = 1.5\n        self.assertEqual(lambdarepr(expr), \"1.5\")\n\n    def test_print_Pow(self):\n        expr = x**2\n        self.assertEqual(lambdarepr(expr), \"pow(x, 2)\")\n\nclass TestNumExprPrinter(unittest.TestCase):\n    def test_print_Function(self):\n        expr = sin(x) + cos(y)\n        self.assertEqual(NumExprPrinter().doprint(expr), \"evaluate('sin(x) + cos(y)', truediv=True)\")\n\n    def test_print_ImaginaryUnit(self):\n        expr = I\n        self.assertEqual(NumExprPrinter().doprint(expr), \"evaluate('1j', truediv=True)\")\n\n    def test_print_Matrix(self):\n        expr = Matrix([[1, 2], [3, 4]])\n        with self.assertRaises(TypeError):\n            NumExprPrinter().doprint(expr)\n\n    def test_print_list(self):\n        expr = [1, 2, 3]\n        with self.assertRaises(TypeError):\n            NumExprPrinter().doprint(expr)\n\n    def test_print_tuple(self):\n        expr = (1, 2, 3)\n        with self.assertRaises(TypeError):\n            NumExprPrinter().doprint(expr)\n\n    def test_print_dict(self):\n        expr = {'a': 1, 'b': 2}\n        with self.assertRaises(TypeError):\n            NumExprPrinter().doprint(expr)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1076": ["\nimport unittest\nfrom sympy import symbols, sqrt, tan, Matrix, I, eye, Symbol, sin, cos, symbols, Sum, Piecewise, Eq, Ne, Lt, Gt, Ge, Le, Abs, log, acos, acosh, asin, asinh, atan, atan2, atanh, ceil, cosh, erf, erfc, exp, expm1, factorial, floor, gamma, hypot, lgamma, log10, log1p, log2, sinh, sin, tanh, tan, pi, E, Not, And, Or, Piecewise, print_function, symbols, Function, Expr, Rational, Half, Matrix, ImmutableMatrix, Identity, BlockMatrix, Indexed, MatrixSymbol, MatrixExpr, zeros, eye\nfrom sympy.printing.pycode import pycode, MpmathPrinter, NumPyPrinter, PythonCodePrinter, SciPyPrinter, SymPyPrinter\n\nclass TestPyCode(unittest.TestCase):\n    def setUp(self):\n        self.x = Symbol('x')\n        self.y = Symbol('y')\n\n    def test_pycode(self):\n        self.assertEqual(pycode(tan(self.x) + 1), 'math.tan(x) + 1')\n\n    def test_MpmathPrinter(self):\n        printer = MpmathPrinter()\n        self.assertEqual(printer.doprint(sqrt(self.x)), 'mpmath.sqrt(x)')\n\n    def test_NumPyPrinter(self):\n        printer = NumPyPrinter()\n        self.assertEqual(printer.doprint(Matrix([[1, 2], [3, 4]])), 'numpy.array([[1, 2], [3, 4]])')\n\n    def test_PythonCodePrinter(self):\n        printer = PythonCodePrinter()\n        self.assertEqual(printer.doprint(sin(self.x) + cos(self.y)), 'math.sin(x) + math.cos(y)')\n\n    def test_SciPyPrinter(self):\n        printer = SciPyPrinter()\n        self.assertEqual(printer.doprint(erf(self.x)), 'scipy.special.erf(x)')\n\n    def test_SymPyPrinter(self):\n        printer = SymPyPrinter()\n        self.assertEqual(printer.doprint(sin(self.x) + cos(self.y)), 'sympy.sin(x) + sympy.cos(y)')\n\n    def test_Piecewise(self):\n        expr = Piecewise((1, self.x < 0), (self.x, True))\n        self.assertEqual(pycode(expr), '(1) if (x < 0) else (x)')\n\n    def test_Not(self):\n        self.assertEqual(pycode(Not(self.x)), 'not(x)')\n\n    def test_And(self):\n        self.assertEqual(pycode(And(self.x, self.y)), '(x) and (y)')\n\n    def test_Or(self):\n        self.assertEqual(pycode(Or(self.x, self.y)), '(x) or (y)')\n\n    def test_Indexed(self):\n        A = MatrixSymbol('A', 3, 3)\n        self.assertEqual(pycode(A[1, 2]), 'A[1, 2]')\n\n    def test_Pow(self):\n        self.assertEqual(pycode(self.x**2), 'x**2')\n        self.assertEqual(pycode(sqrt(self.x)), 'math.sqrt(x)')\n        self.assertEqual(pycode(self.x**Rational(1, 2)), 'x**(1/2)')\n        self.assertEqual(pycode(1/sqrt(self.x)), '1/math.sqrt(x)')\n\n    def test_Rational(self):\n        self.assertEqual(pycode(Rational(1, 2)), '1/2')\n        self.assertEqual(pycode(Half()), '1/2')\n\n    def test_Matrix(self):\n        self.assertEqual(pycode(Matrix([[1, 2], [3, 4]])), 'Matrix([[1, 2], [3, 4]])')\n        self.assertEqual(pycode(ImmutableMatrix([[1, 2], [3, 4]])), 'ImmutableMatrix([[1, 2], [3, 4]])')\n        self.assertEqual(pycode(Identity(3)), 'eye(3)')\n        self.assertEqual(pycode(BlockMatrix([[Matrix([[1, 2], [3, 4]]), Matrix([[5, 6], [7, 8]])], [Matrix([[9, 10], [11, 12]]), Matrix([[13, 14], [15, 16]])]])), 'numpy.block([[numpy.array([[1, 2], [3, 4]]), numpy.array([[5, 6], [7, 8]])], [numpy.array([[9, 10], [11, 12]]), numpy.array([[13, 14], [15, 16]])]])')\n\n    def test_Function(self):\n        f = Function('f')\n        self.assertEqual(pycode(f(self.x)), 'f(x)')\n\n    def test_Relational(self):\n        self.assertEqual(pycode(Eq(self.x, self.y)), '(x == y)')\n        self.assertEqual(pycode(Ne(self.x, self.y)), '(x != y)')\n        self.assertEqual(pycode(Lt(self.x, self.y)), '(x < y)')\n        self.assertEqual(pycode(Gt(self.x, self.y)), '(x > y)')\n        self.assertEqual(pycode(Ge(self.x, self.y)), '(x >= y)')\n        self.assertEqual(pycode(Le(self.x, self.y)), '(x <= y)')\n\n    def test_print_function(self):\n        self.assertEqual(pycode(print_function('Hello, World!')), 'print(\"Hello, World!\")')\n\n    def test_Sum(self):\n        n, i = symbols('n i', integer=True)\n        self.assertEqual(pycode(Sum(i, (i, 1, n))), '(builtins.sum((i) for i in range(1, n+1)))')\n\n    def test_Abs(self):\n        self.assertEqual(pycode(Abs(self.x)), 'abs(x)')\n\n    def test_log(self):\n        self.assertEqual(pycode(log(self.x)), 'math.log(x)')\n        self.assertEqual(pycode(log(self.x, 10)), 'math.log(x, 10)')\n\n    def test_trigonometric_functions(self):\n        self.assertEqual(pycode(acos(self.x)), 'math.acos(x)')\n        self.assertEqual(pycode(acosh(self.x)), 'math.acosh(x)')\n        self.assertEqual(pycode(asin(self.x)), 'math.asin(x)')\n        self.assertEqual(pycode(asinh(self.x)), 'math.asinh(x)')\n        self.assertEqual(pycode(atan(self.x)), 'math.atan(x)')\n        self.assertEqual(pycode(atan2(self.y, self.x)), 'math.atan2(y, x)')\n        self.assertEqual(pycode(atanh(self.x)), 'math.atanh(x)')\n\n    def test_hyperbolic_functions(self):\n        self.assertEqual(pycode(cosh(self.x)), 'math.cosh(x)')\n        self.assertEqual(pycode(sinh(self.x)), 'math.sinh(x)')\n        self.assertEqual(pycode(tanh(self.x)), 'math.tanh(x)')\n\n    def test_exponential_functions(self):\n        self.assertEqual(pycode(exp(self.x)), 'math.exp(x)')\n        self.assertEqual(pycode(expm1(self.x)), 'math.expm1(x)')\n\n    def test_gamma_functions(self):\n        self.assertEqual(pycode(gamma(self.x)), 'math.gamma(x)')\n        self.assertEqual(pycode(lgamma(self.x)), 'math.lgamma(x)')\n\n    def test_other_functions(self):\n        self.assertEqual(pycode(ceil(self.x)), 'math.ceil(x)')\n        self.assertEqual(pycode(floor(self.x)), 'math.floor(x)')\n        self.assertEqual(pycode(hypot(self.x, self.y)), 'math.hypot(x, y)')\n        self.assertEqual(pycode(log10(self.x)), 'math.log10(x)')\n        self.assertEqual(pycode(log1p(self.x)), 'math.log1p(x)')\n        self.assertEqual(pycode(log2(self.x)), 'math.log2(x)')\n\n    def test_constants(self):\n        self.assertEqual(pycode(pi), 'math.pi')\n        self.assertEqual(pycode(E), 'math.e')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1058": ["\nimport unittest\nfrom sympy import symbols\nfrom sympy.codegen.pyutils import render_as_module\n\nclass TestRenderAsModule(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_render_simple_expression(self):\n        expr = self.x + self.y\n        result = render_as_module(expr)\n        self.assertIn('import sympy', result)\n        self.assertIn('x + y', result)\n\n    def test_render_complex_expression(self):\n        expr = (self.x ** 2 + self.y ** 2) ** 0.5\n        result = render_as_module(expr)\n        self.assertIn('import sympy', result)\n        self.assertIn('(x**2 + y**2)**0.5', result)\n\n    def test_render_with_standard(self):\n        expr = self.x + self.y\n        result = render_as_module(expr, standard='python2')\n        self.assertIn('import sympy', result)\n        self.assertIn('x + y', result)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_196": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.backends.base.operations import BaseDatabaseOperations\n\nclass TestBaseDatabaseOperations(unittest.TestCase):\n    def setUp(self):\n        self.connection = Mock()\n        self.ops = BaseDatabaseOperations(self.connection)\n\n    def test_autoinc_sql(self):\n        self.assertIsNone(self.ops.autoinc_sql('table', 'column'))\n\n    def test_bulk_batch_size(self):\n        self.assertEqual(self.ops.bulk_batch_size(['field1', 'field2'], ['obj1', 'obj2']), 2)\n\n    def test_cache_key_culling_sql(self):\n        self.assertEqual(self.ops.cache_key_culling_sql(), \"SELECT cache_key FROM %s ORDER BY cache_key LIMIT 1 OFFSET %%s\")\n\n    def test_unification_cast_sql(self):\n        self.assertEqual(self.ops.unification_cast_sql('output_field'), '%s')\n\n    @patch('django.db.backends.base.operations.BaseDatabaseOperations.date_extract_sql')\n    def test_time_extract_sql(self, mock_date_extract_sql):\n        self.ops.time_extract_sql('hour', 'field_name')\n        mock_date_extract_sql.assert_called_once_with('hour', 'field_name')\n\n    @patch('django.db.backends.base.operations.BaseDatabaseOperations.date_trunc_sql')\n    def test_time_trunc_sql(self, mock_date_trunc_sql):\n        self.ops.time_trunc_sql('hour', 'field_name')\n        mock_date_trunc_sql.assert_called_once_with('hour', 'field_name')\n\n    def test_deferrable_sql(self):\n        self.assertEqual(self.ops.deferrable_sql(), '')\n\n    def test_distinct_sql(self):\n        self.assertEqual(self.ops.distinct_sql([], []), (['DISTINCT'], []))\n\n    def test_field_cast_sql(self):\n        self.assertEqual(self.ops.field_cast_sql('db_type', 'internal_type'), '%s')\n\n    def test_force_no_ordering(self):\n        self.assertEqual(self.ops.force_no_ordering(), [])\n\n    def test_for_update_sql(self):\n        self.assertEqual(self.ops.for_update_sql(), 'FOR UPDATE')\n\n    def test_last_executed_query(self):\n        query = \"SELECT * FROM table WHERE id = %s\"\n        params = {'id': 1}\n        self.assertEqual(self.ops.last_executed_query(None, query, params), \"QUERY = 'SELECT * FROM table WHERE id = %s' - PARAMS = {'id': '1'}\")\n\n    def test_last_insert_id(self):\n        cursor = Mock()\n        cursor.lastrowid = 1\n        self.assertEqual(self.ops.last_insert_id(cursor, 'table', 'pk_name'), 1)\n\n    def test_lookup_cast(self):\n        self.assertEqual(self.ops.lookup_cast('lookup_type', 'internal_type'), \"%s\")\n\n    def test_max_in_list_size(self):\n        self.assertIsNone(self.ops.max_in_list_size())\n\n    def test_max_name_length(self):\n        self.assertIsNone(self.ops.max_name_length())\n\n    def test_pk_default_value(self):\n        self.assertEqual(self.ops.pk_default_value(), 'DEFAULT')\n\n    def test_prepare_sql_script(self):\n        script = \"SELECT * FROM table1; SELECT * FROM table2;\"\n        self.assertEqual(self.ops.prepare_sql_script(script), ['SELECT * FROM table1', 'SELECT * FROM table2'])\n\n    def test_process_clob(self):\n        self.assertEqual(self.ops.process_clob('value'), 'value')\n\n    def test_random_function_sql(self):\n        self.assertEqual(self.ops.random_function_sql(), 'RANDOM()')\n\n    def test_savepoint_create_sql(self):\n        self.assertEqual(self.ops.savepoint_create_sql('sid'), 'SAVEPOINT \"sid\"')\n\n    def test_savepoint_commit_sql(self):\n        self.assertEqual(self.ops.savepoint_commit_sql('sid'), 'RELEASE SAVEPOINT \"sid\"')\n\n    def test_savepoint_rollback_sql(self):\n        self.assertEqual(self.ops.savepoint_rollback_sql('sid'), 'ROLLBACK TO SAVEPOINT \"sid\"')\n\n    def test_set_time_zone_sql(self):\n        self.assertEqual(self.ops.set_time_zone_sql(), '')\n\n    def test_sequence_reset_by_name_sql(self):\n        self.assertEqual(self.ops.sequence_reset_by_name_sql(None, []), [])\n\n    def test_sequence_reset_sql(self):\n        self.assertEqual(self.ops.sequence_reset_sql(None, []), [])\n\n    def test_start_transaction_sql(self):\n        self.assertEqual(self.ops.start_transaction_sql(), \"BEGIN;\")\n\n    def test_end_transaction_sql(self):\n        self.assertEqual(self.ops.end_transaction_sql(), \"COMMIT;\")\n\n    def test_tablespace_sql(self):\n        self.assertEqual(self.ops.tablespace_sql('tablespace'), '')\n\n    def test_prep_for_like_query(self):\n        self.assertEqual(self.ops.prep_for_like_query('value'), 'value')\n\n    def test_prep_for_iexact_query(self):\n        self.assertEqual(self.ops.prep_for_iexact_query('value'), 'value')\n\n    def test_validate_autopk_value(self):\n        self.assertEqual(self.ops.validate_autopk_value(1), 1)\n\n    def test_adapt_unknown_value(self):\n        self.assertEqual(self.ops.adapt_unknown_value(1), 1)\n\n    def test_adapt_datefield_value(self):\n        self.assertEqual(self.ops.adapt_datefield_value('2022-01-01'), '2022-01-01')\n\n    def test_adapt_datetimefield_value(self):\n        self.assertEqual(self.ops.adapt_datetimefield_value('2022-01-01 12:00:00'), '2022-01-01 12:00:00')\n\n    def test_adapt_timefield_value(self):\n        self.assertEqual(self.ops.adapt_timefield_value('12:00:00'), '12:00:00')\n\n    def test_adapt_decimalfield_value(self):\n        self.assertEqual(self.ops.adapt_decimalfield_value(123.456, max_digits=5, decimal_places=2), '123.46')\n\n    def test_adapt_ipaddressfield_value(self):\n        self.assertEqual(self.ops.adapt_ipaddressfield_value('192.168.0.1'), '192.168.0.1')\n\n    def test_year_lookup_bounds_for_date_field(self):\n        self.assertEqual(self.ops.year_lookup_bounds_for_date_field(2022), ['2022-01-01', '2022-12-31'])\n\n    def test_year_lookup_bounds_for_datetime_field(self):\n        self.assertEqual(self.ops.year_lookup_bounds_for_datetime_field(2022), ['2022-01-01 00:00:00', '2022-12-31 23:59:59.999999'])\n\n    def test_get_db_converters(self):\n        self.assertEqual(self.ops.get_db_converters('expression'), [])\n\n    def test_convert_durationfield_value(self):\n        self.assertEqual(self.ops.convert_durationfield_value(1000, 'expression', 'connection'), datetime.timedelta(seconds=1))\n\n    def test_check_expression_support(self):\n        self.assertIsNone(self.ops.check_expression_support('expression'))\n\n    def test_conditional_expression_supported_in_where_clause(self):\n        self.assertTrue(self.ops.conditional_expression_supported_in_where_clause('expression'))\n\n    def test_combine_expression(self):\n        self.assertEqual(self.ops.combine_expression('AND', ['expr1', 'expr2']), 'expr1 AND expr2')\n\n    def test_combine_duration_expression(self):\n        self.assertEqual(self.ops.combine_duration_expression('+', ['expr1', 'expr2']), 'expr1 + expr2')\n\n    def test_binary_placeholder_sql(self):\n        self.assertEqual(self.ops.binary_placeholder_sql('value'), '%s')\n\n    def test_modify_insert_params(self):\n        self.assertEqual(self.ops.modify_insert_params('%s', ['param1', 'param2']), ['param1', 'param2'])\n\n    def test_integer_field_range(self):\n        self.assertEqual(self.ops.integer_field_range('IntegerField'), (-2147483648, 2147483647))\n\n    def test_subtract_temporals(self):\n        self.connection.features.supports_temporal_subtraction = True\n        self.assertEqual(self.ops.subtract_temporals('DateTimeField', (('%s', ['2022-01-01 12:00:00']), ('%s', ['2022-01-01 11:00:00'])), 'expression'), ('(%s - %s)', ('2022-01-01 12:00:00', '2022-01-01 11:00:00')))\n\n    def test_window_frame_start(self):\n        self.assertEqual(self.ops.window_frame_start(-5), '5 PRECEDING')\n\n    def test_window_frame_end(self):\n        self.assertEqual(self.ops.window_frame_end(10), '10 FOLLOWING')\n\n    def test_window_frame_rows_start_end(self):\n        self.connection.features.supports_over_clause = True\n        self.assertEqual(self.ops.window_frame_rows_start_end(-5, 10), ('5 PRECEDING', '10 FOLLOWING'))\n\n    def test_window_frame_range_start_end(self):\n        self.connection.features.supports_over_clause = True\n        self.connection.features.only_supports_unbounded_with_preceding_and_following = False\n        self.assertEqual(self.ops.window_frame_range_start_end(-5, 10), ('5 PRECEDING', '10 FOLLOWING'))\n\n    def test_explain_query_prefix(self):\n        self.connection.features.supports_explaining_query_execution = True\n        self.connection.features.supported_explain_formats = ['JSON', 'XML']\n        self.assertEqual(self.ops.explain_query_prefix('json'), 'EXPLAIN')\n\n    def test_insert_statement(self):\n        self.assertEqual(self.ops.insert_statement(), 'INSERT INTO')\n\n    def test_ignore_conflicts_suffix_sql(self):\n        self.assertEqual(self.ops.ignore_conflicts_suffix_sql(), '')\n"], "sample_1106": ["\nimport unittest\nfrom sympy import MatrixSymbol, eye, Matrix, MatAdd, pprint, symbols, transpose, adjoint, trace, diff, zeros\nfrom sympy.matrices.expressions.matadd import MatAdd, merge_explicit, validate, canonicalize\n\nclass TestMatAdd(unittest.TestCase):\n\n    def setUp(self):\n        self.A = MatrixSymbol('A', 2, 2)\n        self.B = eye(2)\n        self.C = Matrix([[1, 2], [3, 4]])\n        self.D = MatrixSymbol('D', 2, 3)\n        self.x = symbols('x')\n\n    def test_init(self):\n        matadd = MatAdd(self.A, self.B, self.C)\n        self.assertEqual(str(matadd), 'A + Matrix([\\n[1, 2],\\n[3, 4]\\n]) + I')\n\n    def test_shape(self):\n        matadd = MatAdd(self.A, self.B, self.C)\n        self.assertEqual(matadd.shape, (2, 2))\n\n    def test_entry(self):\n        matadd = MatAdd(self.A, self.B, self.C)\n        self.assertEqual(matadd._entry(0, 0), self.A[0, 0] + 1 + 1)\n        self.assertEqual(matadd._entry(1, 1), self.A[1, 1] + 1 + 4)\n\n    def test_transpose(self):\n        matadd = MatAdd(self.A, self.B, self.C)\n        self.assertEqual(matadd._eval_transpose(), MatAdd(transpose(self.A), transpose(self.B), transpose(self.C)).doit())\n\n    def test_adjoint(self):\n        matadd = MatAdd(self.A, self.B, self.C)\n        self.assertEqual(matadd._eval_adjoint(), MatAdd(adjoint(self.A), adjoint(self.B), adjoint(self.C)).doit())\n\n    def test_trace(self):\n        matadd = MatAdd(self.A, self.B, self.C)\n        self.assertEqual(matadd._eval_trace(), trace(self.A) + trace(self.B) + trace(self.C))\n\n    def test_doit(self):\n        matadd = MatAdd(self.A, self.x * self.B, self.C)\n        self.assertEqual(matadd.doit(), MatAdd(self.A, self.x * self.B, self.C))\n\n    def test_derivative_matrix_lines(self):\n        matadd = MatAdd(self.A * self.x, self.B * self.x, self.C * self.x)\n        self.assertEqual(matadd._eval_derivative_matrix_lines(self.x), [self.A, self.B, self.C])\n\n    def test_validate(self):\n        with self.assertRaises(TypeError):\n            validate(self.A, self.x)\n        with self.assertRaises(ShapeError):\n            validate(self.A, self.D)\n\n    def test_merge_explicit(self):\n        matadd = MatAdd(self.A, self.B, self.C)\n        self.assertEqual(str(merge_explicit(matadd)), 'A + Matrix([\\n[2, 2],\\n[3, 5]\\n])')\n\n    def test_canonicalize(self):\n        matadd = MatAdd(self.B, self.C, self.A)\n        self.assertEqual(str(canonicalize(matadd)), 'A + Matrix([\\n[2, 2],\\n[3, 5]\\n])')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1089": ["\nimport unittest\nfrom sympy import symbols, S, Dummy, PolynomialError\nfrom sympy.polys.polyfuncs import symmetrize, horner, interpolate, rational_interpolate, viete\n\nclass TestPolyFuncs(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.a, self.b, self.c, self.d, self.e = symbols('x y a b c d e')\n        self.d = Dummy()\n\n    def test_symmetrize(self):\n        self.assertEqual(symmetrize(self.x**2 + self.y**2), (-2*self.x*self.y + (self.x + self.y)**2, 0))\n        self.assertEqual(symmetrize(self.x**2 - self.y**2), (-2*self.x*self.y + (self.x + self.y)**2, -2*self.y**2))\n\n    def test_horner(self):\n        self.assertEqual(horner(9*self.x**4 + 8*self.x**3 + 7*self.x**2 + 6*self.x + 5),\n                         self.x*(self.x*(self.x*(9*self.x + 8) + 7) + 6) + 5)\n        self.assertEqual(horner(self.a*self.x**4 + self.b*self.x**3 + self.c*self.x**2 + self.d*self.x + self.e),\n                         self.e + self.x*(self.d + self.x*(self.c + self.x*(self.a*self.x + self.b))))\n\n    def test_interpolate(self):\n        self.assertEqual(interpolate([1, 4, 9, 16], self.x), self.x**2)\n        self.assertEqual(interpolate({-1: 2, 1: 2, 2: 5}, self.x), self.x**2 + 1)\n        self.assertEqual(interpolate([1, 4, 9], 5), 25)\n\n    def test_rational_interpolate(self):\n        data = [(1, -210), (2, -35), (3, 105), (4, 231), (5, 350), (6, 465)]\n        self.assertEqual(rational_interpolate(data, 2), (105*self.x**2 - 525)/(self.x + 1))\n\n    def test_viete(self):\n        r1, r2 = symbols('r1:3')\n        self.assertEqual(viete(self.a*self.x**2 + self.b*self.x + self.c, [r1, r2], self.x),\n                         [(r1 + r2, -self.b/self.a), (r1*r2, self.c/self.a)])\n        with self.assertRaises(PolynomialError):\n            viete(1, [r1, r2], self.x)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1068": ["\nimport unittest\nfrom sympy import symbols, sin, pi, Matrix, MatrixSymbol, Piecewise, Function, SparseMatrix\nfrom sympy.printing.octave import OctaveCodePrinter, octave_code\n\nclass TestOctaveCodePrinter(unittest.TestCase):\n\n    def setUp(self):\n        self.printer = OctaveCodePrinter()\n        self.x, self.y = symbols('x y')\n\n    def test_print_simple_expression(self):\n        expr = sin(self.x)\n        result = self.printer.doprint(expr)\n        self.assertEqual(result, \"sin(x)\")\n\n    def test_print_matrix(self):\n        mat = Matrix([[self.x**2, sin(self.x), pi]])\n        result = self.printer.doprint(mat)\n        self.assertEqual(result, \"[x.^2 sin(x) pi]\")\n\n    def test_print_sparse_matrix(self):\n        smat = SparseMatrix(3, 3, {(0, 0): 1, (1, 2): 2})\n        result = self.printer.doprint(smat)\n        self.assertEqual(result, \"sparse([1 2], [1 3], [1 2], 3, 3)\")\n\n    def test_print_piecewise(self):\n        pw = Piecewise((self.x + 1, self.x > 0), (self.x, True))\n        result = self.printer.doprint(pw)\n        self.assertEqual(result, \"((x > 0).*(x + 1) + (~(x > 0)).*(x))\")\n\n    def test_print_custom_function(self):\n        f = Function('f')\n        custom_functions = {\"f\": \"my_fcn\"}\n        expr = f(self.x)\n        result = self.printer.doprint(expr, user_functions=custom_functions)\n        self.assertEqual(result, \"my_fcn(x)\")\n\nclass TestOctaveCode(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_octave_code_simple_expression(self):\n        expr = sin(self.x)\n        result = octave_code(expr)\n        self.assertEqual(result, \"sin(x)\")\n\n    def test_octave_code_matrix(self):\n        mat = Matrix([[self.x**2, sin(self.x), pi]])\n        result = octave_code(mat, assign_to='A')\n        self.assertEqual(result, \"A = [x.^2 sin(x) pi];\")\n\n    def test_octave_code_piecewise(self):\n        pw = Piecewise((self.x + 1, self.x > 0), (self.x, True))\n        result = octave_code(pw, assign_to='tau')\n        self.assertEqual(result, \"tau = ((x > 0).*(x + 1) + (~(x > 0)).*(x));\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_973": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom inspect import Parameter, Signature\nfrom sphinx.util import inspect\nfrom sphinx.util.inspect import TypeAliasNamespace, stringify_signature\n\nclass TestSphinxInspect(unittest.TestCase):\n\n    def setUp(self):\n        self.mock_obj = MagicMock()\n\n    def test_getargspec(self):\n        def func(a, b=2, *args, c=3, **kwargs):\n            pass\n\n        argspec = inspect.getargspec(func)\n        self.assertEqual(argspec.args, ['a', 'b'])\n        self.assertEqual(argspec.varargs, 'args')\n        self.assertEqual(argspec.kwonlyargs, ['c'])\n        self.assertEqual(argspec.varkw, 'kwargs')\n        self.assertEqual(argspec.defaults, (2,))\n        self.assertEqual(argspec.kwdefaults, {'c': 3})\n\n    def test_unwrap(self):\n        def func():\n            pass\n\n        wrapped_func = MagicMock(wraps=func)\n        self.assertEqual(inspect.unwrap(wrapped_func), func)\n\n    # Add more tests for other functions in the sphinx/util/inspect.py\n\n    def test_TypeAliasNamespace(self):\n        type_aliases = {'A': 'int', 'B': 'A'}\n        namespace = TypeAliasNamespace(type_aliases)\n        self.assertEqual(namespace['A'], 'int')\n        self.assertEqual(namespace['B'], 'int')\n        with self.assertRaises(KeyError):\n            namespace['C']\n\n    def test_stringify_signature(self):\n        sig = Signature([Parameter('a', Parameter.POSITIONAL_OR_KEYWORD, annotation=int)])\n        self.assertEqual(stringify_signature(sig), '(a: int)')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1154": ["\nimport unittest\nfrom sympy import symbols, Eq\nfrom sympy.polys.matrices.linsolve import _linsolve\n\nclass TestLinsolve(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_unique_solution(self):\n        eqs = [Eq(self.x + self.y, 1), Eq(self.x - self.y, 2)]\n        result = _linsolve(eqs, [self.x, self.y])\n        self.assertEqual(result, {self.x: 3/2, self.y: -1/2})\n\n    def test_underdetermined_system(self):\n        eqs = [Eq(self.x + self.y, 0)]\n        result = _linsolve(eqs, [self.x, self.y])\n        self.assertEqual(result, {self.x: -self.y, self.y: self.y})\n\n    def test_no_solution(self):\n        eqs = [Eq(self.x + self.y, 1), Eq(self.x - self.y, 3)]\n        result = _linsolve(eqs, [self.x, self.y])\n        self.assertIsNone(result)\n\n    def test_empty_system(self):\n        eqs = []\n        result = _linsolve(eqs, [self.x, self.y])\n        self.assertEqual(result, {self.x: 0, self.y: 0})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1119": ["\nimport unittest\nfrom sympy import Matrix, Symbol, I, S, eye, zeros, ones, diag, sqrt, log, exp, Max, Min\nfrom sympy.matrices.common import NonSquareMatrixError, NonInvertibleMatrixError\nfrom sympy.matrices.dense import Matrix as DenseMatrix\nfrom sympy.matrices.sparse import Matrix as SparseMatrix\nfrom sympy.matrices.expressions import MatrixSymbol\nfrom sympy.matrices.expressions.blockmatrix import BlockMatrix\nfrom sympy.matrices.matrices import classof, a2idx\n\nclass TestMatrixMethods(unittest.TestCase):\n    def setUp(self):\n        self.m = Matrix([[1, 2], [3, 4]])\n        self.v = Matrix([1, 2])\n        self.sym = MatrixSymbol('A', 2, 2)\n\n    def test_init(self):\n        self.assertEqual(self.m.rows, 2)\n        self.assertEqual(self.m.cols, 2)\n\n    def test_add(self):\n        m2 = Matrix([[5, 6], [7, 8]])\n        result = self.m.add(m2)\n        self.assertEqual(result, Matrix([[6, 8], [10, 12]]))\n\n    def test_condition_number(self):\n        result = self.m.condition_number()\n        self.assertEqual(result, 5.477225575051661)\n\n    def test_copy(self):\n        result = self.m.copy()\n        self.assertEqual(result, self.m)\n        self.assertIsNot(result, self.m)\n\n    def test_cross(self):\n        v2 = Matrix([3, 4, 5])\n        result = self.v.cross(v2)\n        self.assertEqual(result, Matrix([-2, 4, -2]))\n\n    def test_dot(self):\n        result = self.v.dot(self.v)\n        self.assertEqual(result, 5)\n\n    # Add more tests for other methods...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1033": ["\nimport unittest\nfrom sympy import S, symbols, Mul, Add, Rational, Pow\nfrom sympy.core.mul import _keep_coeff, expand_2arg, _unevaluated_Mul, _mulsort\n\nclass TestMulFunctions(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_keep_coeff(self):\n        self.assertEqual(_keep_coeff(S.Half, self.x + 2), (self.x + 2)/2)\n        self.assertEqual(_keep_coeff(S.Half, self.x + 2, clear=False), self.x/2 + 1)\n        self.assertEqual(_keep_coeff(S.Half, (self.x + 2)*self.y, clear=False), self.y*(self.x + 2)/2)\n        self.assertEqual(_keep_coeff(S(-1), self.x + self.y), -self.x - self.y)\n        self.assertEqual(_keep_coeff(S(-1), self.x + self.y, sign=True), -(self.x + self.y))\n\n    def test_expand_2arg(self):\n        self.assertEqual(expand_2arg(2*(self.x + 1)), 2*self.x + 2)\n        self.assertEqual(expand_2arg(self.y*(2*self.x + 1)), 2*self.x*self.y + self.y)\n\n    def test_unevaluated_Mul(self):\n        self.assertEqual(_unevaluated_Mul(S(3.0), self.x, S(2)), 6.00000000000000*self.x)\n\n    def test_mulsort(self):\n        args = [self.y, self.x]\n        _mulsort(args)\n        self.assertEqual(args, [self.x, self.y])\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_931": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom sphinx.domains.cpp import DefinitionParser, DefinitionError, NoOldIdError, Symbol, _max_id, _id_prefix\n\nclass TestCPPDomain(unittest.TestCase):\n    def setUp(self):\n        self.config = Mock()\n        self.config.cpp_index_common_prefix = []\n        self.config.cpp_id_attributes = []\n        self.config.cpp_paren_attributes = []\n\n    def test_definition_parser_initialization(self):\n        definition = \"int function(int a, int b);\"\n        parser = DefinitionParser(definition, location=None, config=self.config)\n        self.assertEqual(parser.definition, definition)\n        self.assertEqual(parser.pos, 0)\n\n    def test_definition_parser_skip_ws(self):\n        definition = \"  int function(int a, int b);\"\n        parser = DefinitionParser(definition, location=None, config=self.config)\n        parser.skip_ws()\n        self.assertEqual(parser.pos, 2)\n\n    def test_definition_parser_skip_string(self):\n        definition = \"int function(int a, int b);\"\n        parser = DefinitionParser(definition, location=None, config=self.config)\n        self.assertTrue(parser.skip_string(\"int\"))\n        self.assertEqual(parser.pos, 3)\n\n    def test_definition_parser_fail(self):\n        definition = \"int function(int a, int b);\"\n        parser = DefinitionParser(definition, location=None, config=self.config)\n        with self.assertRaises(DefinitionError):\n            parser.fail(\"Test error\")\n\n    # Add more test cases for other functions in the CPPDomain class\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_588": ["\nimport unittest\nfrom xarray import DataArray, Dataset, concat, merge\nfrom xarray.core.combine import (\n    _infer_concat_order_from_positions,\n    _infer_tile_ids_from_nested_list,\n    _infer_concat_order_from_coords,\n    _check_shape_tile_ids,\n    _combine_nd,\n    _combine_all_along_first_dim,\n    _combine_1d,\n    _nested_combine,\n    combine_nested,\n    combine_by_coords,\n    vars_as_keys,\n)\n\nclass TestCombine(unittest.TestCase):\n\n    def setUp(self):\n        self.datasets = [Dataset({'x': range(3)}, coords={'time': i}) for i in range(3)]\n\n    def test_infer_concat_order_from_positions(self):\n        result = _infer_concat_order_from_positions(self.datasets)\n        self.assertIsInstance(result, dict)\n\n    def test_infer_tile_ids_from_nested_list(self):\n        result = list(_infer_tile_ids_from_nested_list(self.datasets, ()))\n        self.assertIsInstance(result, list)\n\n    def test_infer_concat_order_from_coords(self):\n        result = _infer_concat_order_from_coords(self.datasets)\n        self.assertIsInstance(result, tuple)\n\n    def test_check_shape_tile_ids(self):\n        combined_tile_ids = {(i,): ds for i, ds in enumerate(self.datasets)}\n        _check_shape_tile_ids(combined_tile_ids)  # Should not raise any error\n\n    def test_combine_nd(self):\n        combined_tile_ids = {(i,): ds for i, ds in enumerate(self.datasets)}\n        result = _combine_nd(combined_tile_ids, ['time'])\n        self.assertIsInstance(result, Dataset)\n\n    def test_combine_all_along_first_dim(self):\n        combined_tile_ids = {(i,): ds for i, ds in enumerate(self.datasets)}\n        result = _combine_all_along_first_dim(combined_tile_ids, 'time', 'all', 'different', 'no_conflicts')\n        self.assertIsInstance(result, dict)\n\n    def test_combine_1d(self):\n        result = _combine_1d(self.datasets, 'time')\n        self.assertIsInstance(result, Dataset)\n\n    def test_nested_combine(self):\n        result = _nested_combine(self.datasets, ['time'], 'no_conflicts', 'all', 'different', False)\n        self.assertIsInstance(result, Dataset)\n\n    def test_combine_nested(self):\n        result = combine_nested(self.datasets, 'time')\n        self.assertIsInstance(result, Dataset)\n\n    def test_vars_as_keys(self):\n        result = vars_as_keys(self.datasets[0])\n        self.assertIsInstance(result, tuple)\n\n    def test_combine_by_coords(self):\n        result = combine_by_coords(self.datasets)\n        self.assertIsInstance(result, Dataset)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_430": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom django.db.migrations import Migration\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.state import ProjectState\n\nclass TestMigrationAutodetector(unittest.TestCase):\n    def setUp(self):\n        self.from_state = Mock(spec=ProjectState)\n        self.to_state = Mock(spec=ProjectState)\n        self.questioner = Mock()\n        self.autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n\n    def test_init(self):\n        self.assertEqual(self.autodetector.from_state, self.from_state)\n        self.assertEqual(self.autodetector.to_state, self.to_state)\n        self.assertEqual(self.autodetector.questioner, self.questioner)\n\n    def test_changes(self):\n        self.autodetector._detect_changes = Mock(return_value={})\n        self.autodetector.arrange_for_graph = Mock(return_value={})\n        self.autodetector._trim_to_apps = Mock(return_value={})\n        result = self.autodetector.changes()\n        self.assertEqual(result, {})\n        self.autodetector._detect_changes.assert_called_once()\n        self.autodetector.arrange_for_graph.assert_called_once()\n        self.autodetector._trim_to_apps.assert_called_once()\n\n    # Add more tests as needed...\n"], "sample_957": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\n\nimport pytest\n\nimport sphinx.domains.cpp as cppDomain\nfrom sphinx.domains.cpp import (\n    DefinitionError, DefinitionParser, NoOldIdError, Symbol, _id_prefix, _max_id\n)\n\n# Tests for DefinitionParser class\nclass TestDefinitionParser:\n    # Test case for parsing a declaration\n    def test_parse_declaration(self):\n        parser = DefinitionParser(\"int foo(int x);\")\n        declaration = parser.parse_declaration(\"function\", \"function\")\n        assert declaration.objectType == \"function\"\n        assert declaration.directiveType == \"function\"\n        assert str(declaration.type.nestedName) == \"int\"\n        assert str(declaration.name) == \"foo\"\n\n    # Test case for parsing a nested name\n    def test_parse_nested_name(self):\n        parser = DefinitionParser(\"std::vector<int>\")\n        nested_name = parser.parse_nested_name()\n        assert str(nested_name) == \"std::vector<int>\"\n\n    # Test case for parsing a type\n    def test_parse_type(self):\n        parser = DefinitionParser(\"const int*\")\n        typ = parser._parse_type(False)\n        assert typ.declSpecs.rightSpecs.const\n        assert typ.declSpecs.trailing.fundamentalType == \"int\"\n        assert typ.decl.next.next.const\n        assert typ.decl.next.next.next is None\n\n    # Test case for parsing an expression\n    def test_parse_expression(self):\n        parser = DefinitionParser(\"2 + 3\")\n        expr = parser.parse_expression()\n        assert str(expr) == \"(2 + 3)\"\n\n# Tests for Symbol class\nclass TestSymbol:\n    # Test case for adding a declaration to a symbol\n    def test_add_declaration(self):\n        parent = Symbol(None, None, None, None, None, None, None)\n        symbol = parent.add_declaration(MagicMock(), \"docname\", 1)\n        assert symbol.docname == \"docname\"\n        assert symbol.line == 1\n\n    # Test case for finding a symbol by name\n    def test_find_symbol_by_name(self):\n        parent = Symbol(None, None, None, None, None, None, None)\n        symbol = parent.add_name(\"foo\")\n        found_symbol = parent.find_name(\"foo\", [], \"any\", False, True, False)\n        assert found_symbol == [symbol]\n\n    # Test case for finding a symbol by declaration\n    def test_find_symbol_by_declaration(self):\n        parent = Symbol(None, None, None, None, None, None, None)\n        declaration = MagicMock()\n        symbol = parent.add_declaration(declaration, \"docname\", 1)\n        found_symbol = parent.find_declaration(declaration, \"any\", False, False)\n        assert found_symbol == symbol\n\n    # Test case for merging symbols\n    def test_merge_symbols(self):\n        parent1 = Symbol(None, None, None, None, None, None, None)\n        parent2 = Symbol(None, None, None, None, None, None, None)\n        symbol1 = parent1.add_name(\"foo\")\n        symbol2 = parent2.add_name(\"foo\")\n        parent1.merge_with(parent2, [\"docname\"], MagicMock())\n        assert symbol1.docname == \"docname\"\n        assert symbol2.docname == \"docname\"\n"], "sample_1118": ["\nimport unittest\nfrom sympy import Matrix, MatrixSymbol, S, symbols, Identity, ZeroMatrix, PermutationMatrix\nfrom sympy.matrices.expressions import MatPow, Inverse, MatrixElement\nfrom sympy.matrices.common import NonSquareMatrixError, NonInvertibleMatrixError\n\nclass TestMatPow(unittest.TestCase):\n\n    def setUp(self):\n        self.A = MatrixSymbol('A', 3, 3)\n        self.B = MatrixSymbol('B', 2, 2)\n        self.x = symbols('x')\n\n    def test_init(self):\n        self.assertRaises(TypeError, MatPow, 'A', 2)\n        self.assertIsInstance(MatPow(self.A, 2), MatPow)\n\n    def test_base_exp_shape(self):\n        mat_pow = MatPow(self.A, 2)\n        self.assertEqual(mat_pow.base, self.A)\n        self.assertEqual(mat_pow.exp, 2)\n        self.assertEqual(mat_pow.shape, (3, 3))\n\n    def test_entry(self):\n        mat_pow = MatPow(self.B, 2)\n        self.assertIsInstance(mat_pow._entry(0, 0), MatrixElement)\n\n        mat_pow = MatPow(self.B, -2)\n        with self.assertRaises(NonSquareMatrixError):\n            mat_pow._entry(0, 0)\n\n    def test_doit(self):\n        mat_pow = MatPow(self.A, 0)\n        self.assertEqual(mat_pow.doit(), Identity(3))\n\n        mat_pow = MatPow(ZeroMatrix(2, 2), -1)\n        with self.assertRaises(NonInvertibleMatrixError):\n            mat_pow.doit()\n\n        mat_pow = MatPow(Identity(2), 1)\n        self.assertEqual(mat_pow.doit(), Identity(2))\n\n        mat_pow = MatPow(PermutationMatrix([0, 1, 2]), 2)\n        self.assertEqual(mat_pow.doit(), PermutationMatrix([0, 2, 1]))\n\n        mat_pow = MatPow(self.A, S.NegativeOne)\n        self.assertEqual(mat_pow.doit(), Inverse(self.A))\n\n    def test_eval_transpose(self):\n        mat_pow = MatPow(self.A, 2)\n        self.assertEqual(mat_pow._eval_transpose(), MatPow(self.A.T, 2))\n\n    def test_eval_derivative(self):\n        mat_pow = MatPow(self.A, self.x)\n        self.assertEqual(mat_pow._eval_derivative(self.x), self.x*MatPow(self.A, self.x - 1))\n\n    def test_eval_derivative_matrix_lines(self):\n        mat_pow = MatPow(self.B, 2)\n        self.assertEqual(mat_pow._eval_derivative_matrix_lines(self.x), mat_pow.doit()._eval_derivative_matrix_lines(self.x))\n\n        mat_pow = MatPow(self.B, -1)\n        self.assertEqual(mat_pow._eval_derivative_matrix_lines(self.x), Inverse(self.B)._eval_derivative_matrix_lines(self.x))\n\n        mat_pow = MatPow(self.B, 0)\n        self.assertEqual(mat_pow._eval_derivative_matrix_lines(self.x), mat_pow.doit()._eval_derivative_matrix_lines(self.x))\n\n        mat_pow = MatPow(self.B, self.x)\n        with self.assertRaises(NotImplementedError):\n            mat_pow._eval_derivative_matrix_lines(self.x)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_971": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar, Union)\nfrom sphinx.util.typing import restify, stringify, ForwardRef, get_type_hints, is_system_TypeVar\n\nclass TestTypingUtils(unittest.TestCase):\n    def test_restify(self):\n        self.assertEqual(restify(None), ':py:obj:`None`')\n        self.assertEqual(restify(str), ':py:class:`str`')\n        self.assertEqual(restify(Optional[str]), 'Optional[str]')\n        self.assertEqual(restify(Union[str, int]), 'str | int')\n        self.assertEqual(restify(NewType('MyStr', str)), ':py:class:`MyStr`')\n\n    def test_stringify(self):\n        self.assertEqual(stringify(None), 'None')\n        self.assertEqual(stringify(str), 'str')\n        self.assertEqual(stringify(Optional[str]), 'typing.Optional[str]')\n        self.assertEqual(stringify(Union[str, int]), 'typing.Union[str, int]')\n        self.assertEqual(stringify(NewType('MyStr', str)), 'MyStr')\n\n    def test_get_type_hints(self):\n        def func(a: int, b: str) -> bool:\n            pass\n        self.assertEqual(get_type_hints(func), {'a': int, 'b': str, 'return': bool})\n\n    def test_is_system_TypeVar(self):\n        self.assertTrue(is_system_TypeVar(TypeVar('T')))\n        self.assertFalse(is_system_TypeVar(str))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1141": ["\nimport unittest\nfrom sympy import symbols, sin, cos, pi, sqrt, exp, log, Rational, Dummy, Piecewise, Eq, Symbol\nfrom sympy.core.expr import Expr, AtomicExpr, _mag, UnevaluatedExpr, unchanged, ExprBuilder, Mul, Add, Pow, Function, _derivative_dispatch, Mod, factor_terms, Integer, Rational\n\nclass TestExpr(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n\n    def test_as_real_imag(self):\n        expr = self.x + self.y*sqrt(-1)\n        self.assertEqual(expr.as_real_imag(), (self.x, self.y))\n\n    def test_as_powers_dict(self):\n        expr = (self.x**2 * self.y**3)\n        self.assertEqual(expr.as_powers_dict(), {self.x: 2, self.y: 3})\n\n    def test_as_coefficients_dict(self):\n        expr = 3*self.x + 2*self.y + self.z\n        self.assertEqual(expr.as_coefficients_dict(), {self.x: 3, self.y: 2, self.z: 1})\n\n    def test_as_base_exp(self):\n        expr = self.x**2\n        self.assertEqual(expr.as_base_exp(), (self.x, 2))\n\n    def test_as_coeff_mul(self):\n        expr = 3*self.x*self.y\n        self.assertEqual(expr.as_coeff_mul(), (3, (self.x, self.y)))\n\n    def test_as_coeff_add(self):\n        expr = 3 + self.x + self.y\n        self.assertEqual(expr.as_coeff_add(), (3, (self.x, self.y)))\n\n    def test_primitive(self):\n        expr = 3*(self.x + 1)**2\n        self.assertEqual(expr.primitive(), (3, (self.x + 1)**2))\n\n    def test_as_numer_denom(self):\n        expr = (3*self.x + 2)/(self.y - 1)\n        self.assertEqual(expr.as_numer_denom(), (3*self.x + 2, self.y - 1))\n\n    def test_normal(self):\n        expr = (3*self.x + 2)/(self.y - 1)\n        self.assertEqual(expr.normal(), 3*self.x/self.y + 2/self.y + 2/(self.y - 1))\n\n    def test_extract_multiplicatively(self):\n        expr = (3*self.x + 2)*self.y\n        self.assertEqual(expr.extract_multiplicatively(self.x), self.y*(3*self.x + 2))\n\n    def test_extract_additively(self):\n        expr = 3*self.x + 2*self.y + 1\n        self.assertEqual(expr.extract_additively(self.x), 2*self.y + self.x + 1)\n\n    def test_is_polynomial(self):\n        expr = self.x**2 + self.y**3 + 1\n        self.assertTrue(expr.is_polynomial(self.x, self.y))\n\n    def test_is_rational_function(self):\n        expr = (self.x + 1)/(self.y**2 - 1)\n        self.assertTrue(expr.is_rational_function(self.x, self.y))\n\n    def test_is_meromorphic(self):\n        expr = sin(1/self.x)\n        self.assertTrue(expr.is_meromorphic(self.x, 0))\n\n    def test_is_algebraic_expr(self):\n        expr = sqrt(self.x**2 + 1)\n        self.assertTrue(expr.is_"], "sample_1174": ["\nimport unittest\nfrom sympy import symbols, Abs, exp_polar, pi, I, sin, polarify, polar_lift, unpolarify, principal_branch, oo, exp, S\n\nclass TestComplexFunctions(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y', real=True)\n        self.z = symbols('z', polar=True)\n\n    def test_Abs(self):\n        self.assertEqual(Abs(-1), 1)\n        self.assertEqual(Abs(self.x**2), self.x**2)\n        self.assertEqual(Abs(3*self.x + 2*I), sqrt(9*self.x**2 + 4))\n        self.assertEqual(Abs(8*I), 8)\n\n    def test_exp_polar(self):\n        self.assertEqual(exp_polar(I*pi), -1)\n\n    def test_sin(self):\n        self.assertEqual(sin(self.z), sin(self.z))\n\n    def test_polarify(self):\n        expr = (-self.x)**self.y\n        polar_expr, reps = polarify(expr)\n        self.assertEqual(polar_expr, (self.x*exp_polar(I*pi))**self.y)\n\n    def test_polar_lift(self):\n        self.assertEqual(polar_lift(4), 4*exp_polar(0))\n        self.assertEqual(polar_lift(-4), 4*exp_polar(I*pi))\n\n    def test_unpolarify(self):\n        self.assertEqual(unpolarify(polar_lift(I + 2)), 2 + I)\n        self.assertEqual(unpolarify(sin(polar_lift(I + 7))), sin(7 + I))\n\n    def test_principal_branch(self):\n        self.assertEqual(principal_branch(exp_polar(2*pi*I)*3, 2*pi), 3*exp_polar(0))\n        self.assertEqual(principal_branch(exp_polar(2*pi*I)*3*self.z, 2*pi), 3*principal_branch(self.z, 2*pi))\n\n    def test_exp_polar_unpolarify(self):\n        self.assertEqual(unpolarify(exp_polar(I*pi)), -1)\n        self.assertEqual(unpolarify(exp_polar(2*pi*I)*3), 3)\n\n    def test_polar_lift_unpolarify(self):\n        self.assertEqual(unpolarify(polar_lift(4)), 4)\n        self.assertEqual(unpolarify(polar_lift(-4)), -4)\n\n    def test_principal_branch_unpolarify(self):\n        self.assertEqual(unpolarify(principal_branch(exp_polar(2*pi*I)*3, 2*pi)), 3)\n        self.assertEqual(unpolarify(principal_branch(exp_polar(2*pi*I)*3*self.z, 2*pi)), 3*self.z)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_134": ["\nfrom django.test import RequestFactory, TestCase\nfrom django.utils import translation\nfrom django.urls import reverse\nfrom django.utils.translation import get_language\nfrom django.apps import apps\nfrom django.conf import settings\n\nfrom django.views.i18n import JavaScriptCatalog, JSONCatalog, get_formats, set_language\n\nclass TestI18nViews(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.set_language_url = reverse('set_language')\n        self.javascript_catalog_url = reverse('javascript_catalog')\n        self.json_catalog_url = reverse('json_catalog')\n\n    def test_set_language_view(self):\n        request = self.factory.post(self.set_language_url, {'language': 'en'})\n        response = set_language(request)\n        self.assertEqual(response.status_code, 204)\n        self.assertEqual(get_language(), 'en')\n\n    def test_javascript_catalog_view(self):\n        request = self.factory.get(self.javascript_catalog_url)\n        response = JavaScriptCatalog.as_view()(request)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'text/javascript; charset=\"utf-8\"')\n\n    def test_json_catalog_view(self):\n        request = self.factory.get(self.json_catalog_url)\n        response = JSONCatalog.as_view()(request)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'application/json')\n\n    def test_get_formats(self):\n        formats = get_formats()\n        self.assertIsInstance(formats, dict)\n        self.assertTrue(all(key in settings.FORMAT_SETTINGS for key in formats.keys()))\n\n    def test_javascript_catalog_get_paths(self):\n        view = JavaScriptCatalog()\n        paths = view.get_paths(['django.contrib.admin'])\n        self.assertEqual(len(paths), 1)\n        self.assertTrue(paths[0].endswith('django/contrib/admin/locale'))\n\n    def test_javascript_catalog_get_plural(self):\n        view = JavaScriptCatalog()\n        view.translation = translation.get_language_info('en')\n        plural = view.get_plural()\n        self.assertEqual(plural, '(n != 1)')\n\n    def test_javascript_catalog_get_catalog(self):\n        view = JavaScriptCatalog()\n        view.translation = translation.get_language_info('en')\n        catalog = view.get_catalog()\n        self.assertIsInstance(catalog, dict)\n\n    def test_json_catalog_render_to_response(self):\n        view = JSONCatalog()\n        view.translation = translation.get_language_info('en')\n        response = view.render_to_response(view.get_context_data())\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'application/json')\n"], "sample_1056": ["\nimport unittest\nfrom sympy import symbols, tan, sin, cos, sqrt, pi, S, Matrix, BlockMatrix, IndexedBase, Idx, MatrixSymbol, Function, Piecewise\nfrom sympy.printing.pycode import pycode, MpmathPrinter, NumPyPrinter, PythonCodePrinter, SciPyPrinter, SymPyPrinter\n\nclass TestPythonCodePrinter(unittest.TestCase):\n\n    def setUp(self):\n        self.x = symbols('x')\n\n    def test_pycode(self):\n        self.assertEqual(pycode(tan(self.x) + 1), 'math.tan(x) + 1')\n        self.assertEqual(pycode(sin(self.x) + cos(self.x)), 'math.sin(x) + math.cos(x)')\n\n    def test_MpmathPrinter(self):\n        printer = MpmathPrinter()\n        self.assertEqual(printer.doprint(sqrt(self.x)), 'mpmath.sqrt(x)')\n\n    def test_NumPyPrinter(self):\n        printer = NumPyPrinter()\n        A = Matrix([[1, 2], [3, 4]])\n        self.assertEqual(printer.doprint(A.inv()), 'numpy.linalg.inv(numpy.array([[1, 2], [3, 4]]))')\n\n    def test_PythonCodePrinter(self):\n        printer = PythonCodePrinter()\n        self.assertEqual(printer.doprint(sqrt(self.x)), 'math.sqrt(x)')\n\n    def test_SciPyPrinter(self):\n        printer = SciPyPrinter()\n        self.assertEqual(printer.doprint(sqrt(self.x)), 'numpy.sqrt(x)')\n\n    def test_SymPyPrinter(self):\n        printer = SymPyPrinter()\n        self.assertEqual(printer.doprint(sqrt(self.x)), 'sympy.sqrt(x)')\n\n    def test_Piecewise(self):\n        printer = NumPyPrinter()\n        expr = Piecewise((0, self.x < 0), (1, self.x >= 0))\n        self.assertEqual(printer.doprint(expr), \"numpy.select([x < 0, True], [0, 1], default=numpy.nan)\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_818": ["\nimport unittest\nimport numpy as np\nfrom scipy.sparse import csr_matrix\nfrom sklearn.metrics.pairwise import euclidean_distances, manhattan_distances, haversine_distances, \\\n    linear_kernel, chi2_kernel, additive_chi2_kernel, polynomial_kernel, rbf_kernel, laplacian_kernel, \\\n    sigmoid_kernel, cosine_similarity, cosine_distances, pairwise_distances, pairwise_distances_chunked, \\\n    pairwise_distances_argmin_min, pairwise_distances_argmin, pairwise_kernels, check_pairwise_arrays, \\\n    check_paired_arrays, paired_distances, paired_euclidean_distances, paired_manhattan_distances, \\\n    _euclidean_distances_upcast\n\nclass TestPairwiseMetrics(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[0, 1], [1, 1]])\n        self.Y = np.array([[0, 1], [2, 1]])\n\n    def test_euclidean_distances(self):\n        result = euclidean_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n        self.assertTrue(np.allclose(result, np.array([[0., 1.], [1.41421356, 1.]])))\n\n    def test_manhattan_distances(self):\n        result = manhattan_distances(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n        self.assertTrue(np.allclose(result, np.array([[0., 1.], [2., 1.]])))\n\n    def test_haversine_distances(self):\n        bsas = [-34.83333, -58.5166646]\n        paris = [49.0083899664, 2.53844117956]\n        result = haversine_distances([bsas, paris])\n        self.assertEqual(result.shape, (2, 2))\n        # Replace with actual expected values\n\n    def test_linear_kernel(self):\n        result = linear_kernel(self.X, self.Y)\n        self.assertEqual(result.shape, (2, 2))\n        # Replace with actual expected values\n\n    # Add more tests for other functions...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_828": ["\nimport unittest\nimport numpy as np\nimport scipy.sparse as sp\nfrom sklearn.utils.sparsefuncs import (\n    mean_variance_axis, incr_mean_variance_axis, inplace_column_scale,\n    inplace_row_scale, inplace_swap_row, inplace_swap_column, min_max_axis,\n    count_nonzero, csc_median_axis_0\n)\n\nclass TestSparseFuncs(unittest.TestCase):\n\n    def setUp(self):\n        self.X_csr = sp.csr_matrix([[1, 2], [0, 0], [3, 4]])\n        self.X_csc = self.X_csr.tocsc()\n        self.scale = np.array([0.5, 2])\n\n    def test_mean_variance_axis(self):\n        mean, var = mean_variance_axis(self.X_csr, 0)\n        np.testing.assert_array_almost_equal(mean, np.array([1.33333333, 3]))\n        np.testing.assert_array_almost_equal(var, np.array([2.22222222, 2.66666667]))\n\n        mean, var = mean_variance_axis(self.X_csc, 0)\n        np.testing.assert_array_almost_equal(mean, np.array([1.33333333, 3]))\n        np.testing.assert_array_almost_equal(var, np.array([2.22222222, 2.66666667]))\n\n    def test_incr_mean_variance_axis(self):\n        last_mean = np.zeros(2)\n        last_var = np.zeros(2)\n        last_n = 0\n\n        last_mean, last_var, last_n = incr_mean_variance_axis(self.X_csr, 0, last_mean, last_var, last_n)\n        np.testing.assert_array_almost_equal(last_mean, np.array([1.33333333, 3]))\n        np.testing.assert_array_almost_equal(last_var, np.array([2.22222222, 2.66666667]))\n        self.assertEqual(last_n, 3)\n\n    def test_inplace_column_scale(self):\n        X_csr_copy = self.X_csr.copy()\n        inplace_column_scale(X_csr_copy, self.scale)\n        np.testing.assert_array_almost_equal(X_csr_copy.toarray(), np.array([[0.5, 4], [0, 0], [1.5, 8]]))\n\n        X_csc_copy = self.X_csc.copy()\n        inplace_column_scale(X_csc_copy, self.scale)\n        np.testing.assert_array_almost_equal(X_csc_copy.toarray(), np.array([[0.5, 4], [0, 0], [1.5, 8]]))\n\n    def test_inplace_row_scale(self):\n        X_csr_copy = self.X_csr.copy()\n        inplace_row_scale(X_csr_copy, np.array([1, 2, 3]))\n        np.testing.assert_array_almost_equal(X_csr_copy.toarray(), np.array([[1, 2], [0, 0], [9, 12]]))\n\n        X_csc_copy = self.X_csc.copy()\n        inplace_row_scale(X_csc_copy, np.array([1, 2, 3]))\n        np.testing.assert_array_almost_equal(X_csc_copy.toarray(), np.array([[1, 2], [0, 0], [9, 12]]))\n\n    def test_inplace_swap_row(self):\n        X_csr_copy = self.X_csr.copy()\n        inplace_swap_row(X_csr_copy, 0, 2)\n        np.testing.assert_array_almost_equal(X_csr_copy.toarray(), np.array([[3, 4], [0, 0], [1, 2]]))\n\n        X_csc_copy = self.X_csc.copy()\n        inplace_swap_row(X_csc_copy, 0, 2)\n        np.testing.assert_array_almost_equal(X_csc_copy.toarray(), np.array([[3, 4], [0, 0], [1, 2]]))\n\n    def test_inplace_swap_column(self):\n        X_csr_copy = self.X_csr.copy()\n        inplace_swap_column(X_csr_copy, 0, 1)\n        np.testing.assert_array_almost_equal(X_csr_copy.toarray(), np.array([[2, 1], [0, 0], [4, 3]]))\n\n        X_csc_copy = self.X_csc.copy()\n        inplace_swap_column(X_csc_copy, 0, 1)\n        np.testing.assert_array_almost_equal(X_csc_copy.toarray(), np.array([[2, 1], [0, 0], [4, 3]]))\n\n    def test_min_max_axis(self):\n        mins, maxs = min_max_axis(self.X_csr, 0)\n        np.testing.assert_array_almost_equal(mins, np.array([1, 2]))\n        np.testing.assert_array_almost_equal(maxs, np.array([3, 4]))\n\n        mins, maxs = min_max_axis(self.X_csr, 1)\n        np.testing.assert_array_almost_equal(mins, np.array([1, 0, 3]))\n        np.testing.assert_array_almost_equal(maxs, np.array([2, 0, 4]))\n\n    def test_count_nonzero(self):\n        self.assertEqual(count_nonzero(self.X_csr, 0), 2)\n        np.testing.assert_array_almost_equal(count_nonzero(self.X_csr, 1), np.array([2, 0, 2]))\n\n    def test_csc_median_axis_0(self):\n        median = csc_median_axis_0(self.X_csc)\n        np.testing.assert_array_almost_equal(median, np.array([1, 3]))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_155": ["\nfrom django.test import TestCase\nfrom django.core.checks.database import check_database_backends\nfrom unittest.mock import MagicMock, patch\n\nclass DatabaseCheckTest(TestCase):\n    def setUp(self):\n        self.mock_connection = MagicMock()\n        self.mock_connections = {'default': self.mock_connection}\n\n    @patch('django.core.checks.database.connections', new_callable=lambda: self.mock_connections)\n    def test_check_database_backends_no_databases(self, mock_connections):\n        result = check_database_backends(databases=None)\n        self.assertEqual(result, [])\n\n    @patch('django.core.checks.database.connections', new_callable=lambda: self.mock_connections)\n    def test_check_database_backends_with_databases(self, mock_connections):\n        self.mock_connection.validation.check.return_value = ['mock issue']\n        result = check_database_backends(databases=['default'])\n        self.assertEqual(result, ['mock issue'])\n\n    @patch('django.core.checks.database.connections', new_callable=lambda: self.mock_connections)\n    def test_check_database_backends_with_multiple_databases(self, mock_connections):\n        self.mock_connections['second'] = MagicMock()\n        self.mock_connection.validation.check.return_value = ['mock issue 1']\n        self.mock_connections['second'].validation.check.return_value = ['mock issue 2']\n        result = check_database_backends(databases=['default', 'second'])\n        self.assertEqual(result, ['mock issue 1', 'mock issue 2'])\n"], "sample_319": ["\nfrom unittest.mock import MagicMock, patch\nfrom django.db import models\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.state import ProjectState\n\nclass TestMigrationAutodetector(unittest.TestCase):\n    def setUp(self):\n        self.from_state = ProjectState()\n        self.to_state = ProjectState()\n        self.questioner = MagicMock()\n\n    def test_init(self):\n        autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n        self.assertEqual(autodetector.from_state, self.from_state)\n        self.assertEqual(autodetector.to_state, self.to_state)\n        self.assertEqual(autodetector.questioner, self.questioner)\n\n    @patch('django.db.migrations.autodetector.MigrationAutodetector._detect_changes')\n    def test_changes(self, mock_detect_changes):\n        autodetector = MigrationAutodetector(self.from_state, self.to_state, self.questioner)\n        mock_detect_changes.return_value = []\n        result = autodetector.changes(graph=None, trim_to_apps=None, convert_apps=None, migration_name=None)\n        self.assertEqual(result, [])\n\n    # Add more tests to cover other methods and edge cases\n"], "sample_415": ["\nimport unittest\nfrom unittest.mock import MagicMock\nfrom django.db.models.constraints import BaseConstraint, CheckConstraint, Deferrable, UniqueConstraint\nfrom django.core.exceptions import ValidationError\nfrom django.db.models.query_utils import Q\nfrom django.db.models import F\n\nclass TestBaseConstraint(unittest.TestCase):\n    def setUp(self):\n        self.base_constraint = BaseConstraint('test_constraint')\n\n    def test_violation_error_message(self):\n        self.assertEqual(self.base_constraint.get_violation_error_message(), \"Constraint \u201ctest_constraint\u201d is violated.\")\n\n    def test_deconstruct(self):\n        path, args, kwargs = self.base_constraint.deconstruct()\n        self.assertEqual(path, 'django.db.models.BaseConstraint')\n        self.assertEqual(kwargs, {'name': 'test_constraint'})\n\n    def test_clone(self):\n        cloned_constraint = self.base_constraint.clone()\n        self.assertEqual(cloned_constraint.name, 'test_constraint')\n\nclass TestCheckConstraint(unittest.TestCase):\n    def setUp(self):\n        self.check_constraint = CheckConstraint(check=Q(age__gt=18), name='check_age')\n\n    def test_invalid_check(self):\n        with self.assertRaises(TypeError):\n            CheckConstraint(check='invalid_check', name='invalid_constraint')\n\n    def test_deconstruct(self):\n        path, args, kwargs = self.check_constraint.deconstruct()\n        self.assertEqual(path, 'django.db.models.CheckConstraint')\n        self.assertEqual(kwargs, {'name': 'check_age', 'check': Q(age__gt=18)})\n\nclass TestUniqueConstraint(unittest.TestCase):\n    def setUp(self):\n        self.unique_constraint = UniqueConstraint(fields=['username'], name='unique_username')\n\n    def test_invalid_unique_constraint(self):\n        with self.assertRaises(ValueError):\n            UniqueConstraint(name='invalid_constraint')\n\n    def test_deconstruct(self):\n        path, args, kwargs = self.unique_constraint.deconstruct()\n        self.assertEqual(path, 'django.db.models.UniqueConstraint')\n        self.assertEqual(kwargs, {'name': 'unique_username', 'fields': ('username',)})\n\n    def test_validate(self):\n        model = MagicMock()\n        model._default_manager.using.return_value.filter.return_value.exists.return_value = True\n        instance = MagicMock()\n        instance._get_field_value_map.return_value = {'username': 'test_user'}\n        with self.assertRaises(ValidationError):\n            self.unique_constraint.validate(model, instance)\n\n# Add more tests for Deferrable and other functionalities if needed\n"], "sample_821": ["\nimport unittest\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\nfrom sklearn.exceptions import NotFittedError\n\nclass TestEncoders(unittest.TestCase):\n    def setUp(self):\n        self.X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        self.X_test = [['Female', 3], ['Male', 1]]\n        self.X_error = [['Unknown', 3], ['Male', 1]]\n\n    def test_onehotencoder_fit(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        enc.fit(self.X)\n        self.assertEqual(len(enc.categories_), 2)\n        self.assertEqual(len(enc.categories_[0]), 2)\n        self.assertEqual(len(enc.categories_[1]), 3)\n\n    def test_onehotencoder_transform(self):\n        enc = OneHotEncoder(handle_unknown='ignore').fit(self.X)\n        transformed = enc.transform(self.X_test).toarray()\n        expected = np.array([[1., 0., 1., 0., 0.], [0., 1., 0., 0., 0.]])\n        np.testing.assert_array_equal(transformed, expected)\n\n    def test_onehotencoder_inverse_transform(self):\n        enc = OneHotEncoder(handle_unknown='ignore').fit(self.X)\n        inverse_transformed = enc.inverse_transform([[0, 1, 1, 0, 0], [0, 0, 0, 1, 0]])\n        expected = np.array([['Male', 1], [None, 2]], dtype=object)\n        np.testing.assert_array_equal(inverse_transformed, expected)\n\n    def test_onehotencoder_not_fitted(self):\n        enc = OneHotEncoder()\n        with self.assertRaises(NotFittedError):\n            enc.transform(self.X_test)\n\n    def test_onehotencoder_unknown_category(self):\n        enc = OneHotEncoder(handle_unknown='error')\n        enc.fit(self.X)\n        with self.assertRaises(ValueError):\n            enc.transform(self.X_error)\n\n    def test_ordinalencoder_fit(self):\n        enc = OrdinalEncoder()\n        enc.fit(self.X)\n        self.assertEqual(len(enc.categories_), 2)\n        self.assertEqual(len(enc.categories_[0]), 2)\n        self.assertEqual(len(enc.categories_[1]), 3)\n\n    def test_ordinalencoder_transform(self):\n        enc = OrdinalEncoder().fit(self.X)\n        transformed = enc.transform(self.X_test)\n        expected = np.array([[0., 2.], [1., 0.]])\n        np.testing.assert_array_equal(transformed, expected)\n\n    def test_ordinalencoder_inverse_transform(self):\n        enc = OrdinalEncoder().fit(self.X)\n        inverse_transformed = enc.inverse_transform([[1, 0], [0, 1]])\n        expected = np.array([['Male', 1], ['Female', 2]], dtype=object)\n        np.testing.assert_array_equal(inverse_transformed, expected)\n\n    def test_ordinalencoder_not_fitted(self):\n        enc = OrdinalEncoder()\n        with self.assertRaises(NotFittedError):\n            enc.transform(self.X_test)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_783": ["\nimport unittest\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor, ExtraTreesClassifier, ExtraTreesRegressor, RandomTreesEmbedding\nfrom sklearn.exceptions import NotFittedError\nfrom scipy import sparse\n\nclass TestForest(unittest.TestCase):\n\n    def setUp(self):\n        self.X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n        self.y = np.array([0, 1, 0, 1])\n        self.X_sparse = sparse.csr_matrix([[1, 0], [2, 3], [0, 4], [5, 6]])\n        self.y_multi = np.array([[0, 1], [1, 0], [0, 1], [1, 0]])\n\n    def test_random_forest_classifier(self):\n        clf = RandomForestClassifier(n_estimators=10, random_state=42)\n        clf.fit(self.X, self.y)\n        self.assertIsNotNone(clf.feature_importances_)\n        pred = clf.predict(self.X)\n        self.assertEqual(len(pred), len(self.y))\n\n    def test_random_forest_regressor(self):\n        reg = RandomForestRegressor(n_estimators=10, random_state=42)\n        reg.fit(self.X, self.y)\n        self.assertIsNotNone(reg.feature_importances_)\n        pred = reg.predict(self.X)\n        self.assertEqual(len(pred), len(self.y))\n\n    def test_extra_trees_classifier(self):\n        clf = ExtraTreesClassifier(n_estimators=10, random_state=42)\n        clf.fit(self.X, self.y)\n        self.assertIsNotNone(clf.feature_importances_)\n        pred = clf.predict(self.X)\n        self.assertEqual(len(pred), len(self.y))\n\n    def test_extra_trees_regressor(self):\n        reg = ExtraTreesRegressor(n_estimators=10, random_state=42)\n        reg.fit(self.X, self.y)\n        self.assertIsNotNone(reg.feature_importances_)\n        pred = reg.predict(self.X)\n        self.assertEqual(len(pred), len(self.y))\n\n    def test_random_trees_embedding(self):\n        embedding = RandomTreesEmbedding(n_estimators=10, random_state=42)\n        embedding.fit(self.X)\n        self.assertIsNotNone(embedding.estimators_)\n        transformed = embedding.transform(self.X)\n        self.assertEqual(transformed.shape[0], self.X.shape[0])\n\n    def test_random_trees_embedding_sparse_input(self):\n        embedding = RandomTreesEmbedding(n_estimators=10, random_state=42)\n        embedding.fit(self.X_sparse)\n        self.assertIsNotNone(embedding.estimators_)\n        transformed = embedding.transform(self.X_sparse)\n        self.assertEqual(transformed.shape[0], self.X_sparse.shape[0])\n\n    def test_random_trees_embedding_fit_transform(self):\n        embedding = RandomTreesEmbedding(n_estimators=10, random_state=42)\n        transformed = embedding.fit_transform(self.X)\n        self.assertEqual(transformed.shape[0], self.X.shape[0])\n\n    def test_random_forest_classifier_multilabel(self):\n        clf = RandomForestClassifier(n_estimators=10, random_state=42)\n        clf.fit(self.X, self.y_multi)\n        self.assertIsNotNone(clf.feature_importances_)\n        pred = clf.predict(self.X)\n        self.assertEqual(pred.shape, self.y_multi.shape)\n\n    def test_random_forest_regressor_multilabel(self):\n        reg = RandomForestRegressor(n_estimators=10, random_state=42)\n        reg.fit(self.X, self.y_multi)\n        self.assertIsNotNone(reg.feature_importances_)\n        pred = reg.predict(self.X)\n        self.assertEqual(pred.shape, self.y_multi.shape)\n\n    def test_not_fitted_error(self):\n        clf = RandomForestClassifier(n_estimators=10, random_state=42)\n        with self.assertRaises(NotFittedError):\n            clf.predict(self.X)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_195": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db import models\nfrom django.db.backends.sqlite3.operations import DatabaseOperations\nfrom django.test import override_settings\n\nclass TestDatabaseOperations(unittest.TestCase):\n    def setUp(self):\n        self.operations = DatabaseOperations()\n        self.operations.connection = MagicMock()\n        self.operations.connection.features.max_query_params = 1000\n\n    def test_bulk_batch_size(self):\n        fields = [1, 2, 3, 4, 5]\n        objs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        self.assertEqual(self.operations.bulk_batch_size(fields, objs), 200)\n\n        fields = [1]\n        self.assertEqual(self.operations.bulk_batch_size(fields, objs), 500)\n\n        fields = []\n        self.assertEqual(self.operations.bulk_batch_size(fields, objs), 10)\n\n    @override_settings(USE_TZ=True)\n    def test_convert_tznames_to_sql(self):\n        self.operations.connection.timezone_name = 'UTC'\n        self.assertEqual(self.operations._convert_tznames_to_sql('America/New_York'), (\"'America/New_York'\", \"'UTC'\"))\n\n    @override_settings(USE_TZ=False)\n    def test_convert_tznames_to_sql_no_tz(self):\n        self.assertEqual(self.operations._convert_tznames_to_sql('America/New_York'), ('NULL', 'NULL'))\n\n    # Add more tests for other functions as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1152": ["\nimport unittest\nfrom sympy import symbols, powsimp, sqrt, exp, log, Symbol\n\nclass TestPowsimp(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y, self.z, self.n = symbols('x y z n')\n\n    def test_powsimp_combine_all(self):\n        result = powsimp(self.x**self.y * self.x**self.z * self.y**self.z, combine='all')\n        self.assertEqual(result, self.x**(self.y + self.z) * self.y**self.z)\n\n    def test_powsimp_combine_exp(self):\n        result = powsimp(self.x**self.y * self.x**self.z * self.y**self.z, combine='exp')\n        self.assertEqual(result, self.x**(self.y + self.z) * self.y**self.z)\n\n    def test_powsimp_combine_base_force(self):\n        result = powsimp(self.x**self.y * self.x**self.z * self.n**self.z * self.n**self.y, combine='base', force=True)\n        self.assertEqual(result, (self.n*self.x)**(self.y + self.z))\n\n    def test_powsimp_deep_deep(self):\n        self.x, self.y = symbols('x y', positive=True)\n        result = powsimp(log(exp(self.x)*exp(self.y)), deep=True)\n        self.assertEqual(result, self.x + self.y)\n\n    def test_powsimp_radicals_with_Mul_bases(self):\n        a = sqrt(self.x*sqrt(self.y))\n        result = powsimp(a**4)\n        self.assertEqual(result, (self.x*sqrt(self.y))**(5/2))\n\n    def test_powdenest_basic(self):\n        result = powdenest((self.x**(2*self.y/3))**(3*self.x))\n        self.assertEqual(result, self.x**(2*self.y))\n\n    def test_powdenest_with_force(self):\n        i = Symbol('i', integer=True)\n        result = powdenest(((self.x**(2*i))**(3*self.y))**self.x, force=True)\n        self.assertEqual(result, self.x**(6*i*self.y))\n\n    def test_powdenest_with_polar(self):\n        result = powdenest(exp(self.y*(log(self.x) + log(self.y))), polar=True)\n        self.assertEqual(result, (self.x*self.y)**self.y)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_935": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom sphinx.testing.util import SphinxTestUtil\nfrom sphinx.domains.c import CDomain, DefinitionParser, Symbol\n\nclass TestCDomain(unittest.TestCase):\n    def setUp(self):\n        self.app = SphinxTestUtil().create_app()\n        self.domain = CDomain(self.app.env)\n\n    def test_parse_declaration(self):\n        parser = DefinitionParser(\"void function(int arg)\", Mock(), self.app.config)\n        declaration = self.domain.parse_declaration(\"function\", \"function\", parser)\n        self.assertIsNotNone(declaration)\n\n    def test_symbol_add_declaration(self):\n        symbol = Symbol(None, None, None, None)\n        declaration = Mock()\n        declaration.name = Mock()\n        declaration.name.names = [Mock()]\n        symbol.add_declaration(declaration, \"docname\")\n        self.assertIsNotNone(symbol.declaration)\n\n    # Add more tests for other methods and functionalities as needed\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_132": ["\nfrom unittest import mock\nfrom unittest.mock import MagicMock\n\nfrom django.http import Http404\nfrom django.test import RequestFactory, TestCase\nfrom django.views.debug import (\n    CallableSettingWrapper, ExceptionReporter, SafeExceptionReporterFilter, default_urlconf,\n    get_default_exception_reporter_filter, technical_404_response, technical_500_response,\n)\n\nclass TestDebugViews(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n\n    def test_callable_setting_wrapper(self):\n        callable_setting = MagicMock()\n        wrapper = CallableSettingWrapper(callable_setting)\n        self.assertEqual(repr(wrapper), repr(callable_setting))\n\n    def test_technical_500_response(self):\n        request = self.factory.get('/')\n        exc_type, exc_value, tb = type('TestException', (Exception,), {}), TestException(), None\n        response = technical_500_response(request, exc_type, exc_value, tb)\n        self.assertEqual(response.status_code, 500)\n\n    def test_get_default_exception_reporter_filter(self):\n        with mock.patch('django.views.debug.import_string') as import_string_mock:\n            get_default_exception_reporter_filter()\n            import_string_mock.assert_called_once_with('settings.DEFAULT_EXCEPTION_REPORTER_FILTER')\n\n    def test_safe_exception_reporter_filter(self):\n        filter = SafeExceptionReporterFilter()\n        self.assertEqual(filter.cleanse_setting('API_KEY', 'secret'), '********************')\n\n    def test_exception_reporter(self):\n        request = self.factory.get('/')\n        exc_type, exc_value, tb = type('TestException', (Exception,), {}), TestException(), None\n        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n        self.assertIsNotNone(reporter.get_traceback_data())\n\n    def test_technical_404_response(self):\n        request = self.factory.get('/')\n        exception = Http404()\n        response = technical_404_response(request, exception)\n        self.assertEqual(response.status_code, 404)\n\n    def test_default_urlconf(self):\n        request = self.factory.get('/')\n        response = default_urlconf(request)\n        self.assertEqual(response.status_code, 200)\n"], "sample_724": ["\nimport unittest\nimport numpy as np\nfrom sklearn.datasets import fetch_california_housing\nfrom sklearn.utils import Bunch\n\nclass TestCaliforniaHousingDataset(unittest.TestCase):\n    def setUp(self):\n        self.data, self.target = fetch_california_housing(return_X_y=True)\n        self.dataset = fetch_california_housing(return_X_y=False)\n\n    def test_data_shape(self):\n        self.assertEqual(self.data.shape, (20640, 8))\n        self.assertEqual(self.target.shape, (20640,))\n\n    def test_feature_names(self):\n        expected_feature_names = [\"MedInc\", \"HouseAge\", \"AveRooms\", \"AveBedrms\",\n                                 \"Population\", \"AveOccup\", \"Latitude\", \"Longitude\"]\n        self.assertEqual(self.dataset.feature_names, expected_feature_names)\n\n    def test_data_type(self):\n        self.assertIsInstance(self.data, np.ndarray)\n        self.assertIsInstance(self.target, np.ndarray)\n\n    def test_data_values(self):\n        self.assertTrue(np.all(self.data[:, 2] == self.dataset.data[:, 2] / self.dataset.data[:, 5]))\n        self.assertTrue(np.all(self.data[:, 3] == self.dataset.data[:, 3] / self.dataset.data[:, 5]))\n        self.assertTrue(np.all(self.data[:, 5] == self.dataset.data[:, 4] / self.dataset.data[:, 5]))\n        self.assertTrue(np.all(self.target == self.dataset.target / 100000.0))\n\n    def test_return_X_y(self):\n        self.assertIsInstance(self.dataset, Bunch)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_603": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nimport numpy as np\nimport xarray as xr\nfrom xarray.core import formatting_html as fh\n\nclass TestFormattingHTML(unittest.TestCase):\n\n    @patch('xarray.core.formatting_html.pkg_resources.resource_string')\n    def test_load_static_files(self, mock_resource_string):\n        mock_resource_string.return_value = b'static file content'\n        self.assertEqual(len(fh._load_static_files()), 2)\n\n    def test_short_data_repr_html(self):\n        array = xr.DataArray(np.array([1, 2, 3]))\n        self.assertIn('<pre>', fh.short_data_repr_html(array))\n\n    def test_format_dims(self):\n        dims = {'x': 10, 'y': 20}\n        coord_names = ['x']\n        self.assertIn('xr-has-index', fh.format_dims(dims, coord_names))\n\n    def test_summarize_attrs(self):\n        attrs = {'attr1': 'value1', 'attr2': 'value2'}\n        self.assertIn('<dl class=\\'xr-attrs\\'>', fh.summarize_attrs(attrs))\n\n    def test_summarize_variable(self):\n        var = xr.DataArray(np.array([1, 2, 3]), dims='x')\n        self.assertIn('<div class=\\'xr-var-name\\'>', fh.summarize_variable('var', var))\n\n    def test_collapsible_section(self):\n        self.assertIn('<input class=\\'xr-section-summary-in\\'', fh.collapsible_section('Section', 'Details'))\n\n    def test_dataset_repr(self):\n        ds = xr.Dataset({'var': (('x', 'y'), np.random.rand(4, 5))}, coords={'x': np.arange(4), 'y': np.arange(5)})\n        self.assertIn('<div class=\\'xr-obj-type\\'>', fh.dataset_repr(ds))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_937": ["\nimport unittest\nfrom sphinx.domains.cpp import DefinitionParser, DefinitionError, NoOldIdError\nfrom sphinx.testing.util import with_app\n\nclass TestDefinitionParser(unittest.TestCase):\n    def setUp(self):\n        self.parser = DefinitionParser('int a;')\n\n    def test_skip_ws(self):\n        self.parser.pos = 0\n        self.parser.skip_ws()\n        self.assertEqual(self.parser.pos, 3)\n\n    def test_skip_word(self):\n        self.parser.pos = 0\n        self.assertTrue(self.parser.skip_word('int'))\n        self.assertFalse(self.parser.skip_word('float'))\n\n    def test_skip_string(self):\n        self.parser.pos = 3\n        self.assertTrue(self.parser.skip_string('a'))\n        self.assertFalse(self.parser.skip_string('b'))\n\n    def test_match(self):\n        self.parser.pos = 0\n        self.assertTrue(self.parser.match(r'\\w+'))\n        self.assertEqual(self.parser.matched_text, 'int')\n\n    def test_assert_end(self):\n        self.parser.pos = len(self.parser.definition) - 1\n        self.parser.assert_end()\n        with self.assertRaises(DefinitionError):\n            self.parser.pos = len(self.parser.definition) - 2\n            self.parser.assert_end()\n\n    # Add more tests for other methods as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_921": ["\nimport unittest\nfrom unittest.mock import Mock, MagicMock, patch\nfrom sphinx.domains.c import DefinitionParser, Symbol, CDomain\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.util.docutils import nodes\n\nclass TestDefinitionParser(unittest.TestCase):\n    def setUp(self):\n        self.config = MagicMock()\n\n    def test_parse_expression(self):\n        parser = DefinitionParser(\"int x = 10;\", config=self.config)\n        result = parser.parse_expression()\n        self.assertIsNotNone(result)\n\n    def test_parse_type(self):\n        parser = DefinitionParser(\"int*\", config=self.config)\n        result = parser._parse_type(named=False)\n        self.assertIsNotNone(result)\n\nclass TestSymbol(unittest.TestCase):\n    def test_add_declaration(self):\n        symbol = Symbol(parent=None, ident=None, declaration=None, docname=None)\n        declaration = MagicMock()\n        declaration.name = \"test_name\"\n        result = symbol.add_declaration(declaration, docname=\"test_docname\")\n        self.assertIsNotNone(result)\n\nclass TestCDomain(unittest.TestCase):\n    def setUp(self):\n        self.domain = CDomain()\n        self.env = MagicMock()\n        self.env.domaindata = {'c': {'root_symbol': Symbol(None, None, None, None)}}\n        self.env.docname = \"test_docname\"\n        self.domain.env = self.env\n\n    def test_note_object(self):\n        self.domain.note_object(\"test_name\", \"function\", \"test_node_id\")\n        self.assertIn(\"test_name\", self.domain.objects)\n\n    def test_clear_doc(self):\n        self.domain.objects = {\"test_name\": (\"test_docname\", \"test_node_id\", \"function\")}\n        self.domain.clear_doc(\"test_docname\")\n        self.assertNotIn(\"test_name\", self.domain.objects)\n\n    def test_process_doc(self):\n        self.domain.process_doc(self.env, self.env.docname, nodes.document())\n        # No assertion as this function only prints the symbol tree for debugging\n\n    def test_merge_domaindata(self):\n        otherdata = {'root_symbol': Symbol(None, None, None, None), 'objects': {}}\n        self.domain.merge_domaindata([\"test_docname\"], otherdata)\n        # No assertion as this function merges the symbol tree and objects\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_302": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.db.backends.postgresql.client import DatabaseClient\n\nclass TestDatabaseClient(unittest.TestCase):\n    def setUp(self):\n        self.settings_dict = {\n            'HOST': 'localhost',\n            'PORT': '5432',\n            'NAME': 'test_db',\n            'USER': 'test_user',\n            'PASSWORD': 'test_password',\n            'OPTIONS': {\n                'passfile': 'test_passfile',\n                'service': 'test_service',\n                'sslmode': 'verify-full',\n                'sslrootcert': 'test_sslrootcert',\n                'sslcert': 'test_sslcert',\n                'sslkey': 'test_sslkey',\n            }\n        }\n\n    def test_settings_to_cmd_args_env(self):\n        args, env = DatabaseClient.settings_to_cmd_args_env(self.settings_dict, ['-c', 'test_command'])\n        self.assertEqual(args, ['psql', '-U', 'test_user', '-h', 'localhost', '-p', '5432', 'test_db', '-c', 'test_command'])\n        self.assertEqual(env, {\n            'PGPASSWORD': 'test_password',\n            'PGSERVICE': 'test_service',\n            'PGSSLMODE': 'verify-full',\n            'PGSSLROOTCERT': 'test_sslrootcert',\n            'PGSSLCERT': 'test_sslcert',\n            'PGSSLKEY': 'test_sslkey',\n            'PGPASSFILE': 'test_passfile',\n        })\n\n    def test_runshell(self):\n        with patch('django.db.backends.postgresql.client.super') as mock_super:\n            client = DatabaseClient()\n            client.runshell(['-c', 'test_command'])\n            mock_super.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_731": ["\nimport unittest\nimport numpy as np\nfrom sklearn.datasets import fetch_kddcup99\n\nclass TestKddCup99(unittest.TestCase):\n    def setUp(self):\n        self.kddcup99 = fetch_kddcup99(subset=None, shuffle=False, percent10=True)\n\n    def test_data_shape(self):\n        self.assertEqual(self.kddcup99.data.shape, (494021, 41))\n\n    def test_target_shape(self):\n        self.assertEqual(self.kddcup99.target.shape, (494021,))\n\n    def test_data_type(self):\n        self.assertEqual(self.kddcup99.data.dtype.names, ('duration', 'protocol_type', 'service', 'flag', 'src_bytes', 'dst_bytes',\n                                                           'land', 'wrong_fragment', 'urgent', 'hot', 'num_failed_logins',\n                                                           'logged_in', 'num_compromised', 'root_shell', 'su_attempted',\n                                                           'num_root', 'num_file_creations', 'num_shells', 'num_access_files',\n                                                           'num_outbound_cmds', 'is_host_login', 'is_guest_login', 'count',\n                                                           'srv_count', 'serror_rate', 'srv_serror_rate', 'rerror_rate',\n                                                           'srv_rerror_rate', 'same_srv_rate', 'diff_srv_rate', 'srv_diff_host_rate',\n                                                           'dst_host_count', 'dst_host_srv_count', 'dst_host_same_srv_rate',\n                                                           'dst_host_diff_srv_rate', 'dst_host_same_src_port_rate',\n                                                           'dst_host_srv_diff_host_rate', 'dst_host_serror_rate',\n                                                           'dst_host_srv_serror_rate', 'dst_host_rerror_rate',\n                                                           'dst_host_srv_rerror_rate'))\n\n    def test_target_type(self):\n        self.assertEqual(self.kddcup99.target.dtype, object)\n\n    def test_shuffle(self):\n        shuffled_kddcup99 = fetch_kddcup99(subset=None, shuffle=True, percent10=True)\n        self.assertFalse(np.array_equal(self.kddcup99.data, shuffled_kddcup99.data))\n\n    def test_subset_SA(self):\n        kddcup99_SA = fetch_kddcup99(subset='SA', shuffle=False, percent10=True)\n        self.assertLess(kddcup99_SA.data.shape[0], self.kddcup99.data.shape[0])\n        self.assertEqual(kddcup99_SA.data.shape[1], self.kddcup99.data.shape[1])\n\n    def test_subset_SF(self):\n        kddcup99_SF = fetch_kddcup99(subset='SF', shuffle=False, percent10=True)\n        self.assertLess(kddcup99_SF.data.shape[0], self.kddcup99.data.shape[0])\n        self.assertLess(kddcup99_SF.data.shape[1], self.kddcup99.data.shape[1])\n\n    def test_subset_http(self):\n        kddcup99_http = fetch_kddcup99(subset='http', shuffle=False, percent10=True)\n        self.assertLess(kddcup99_http.data.shape[0], self.kddcup99.data.shape[0])\n        self.assertEqual(kddcup99_http.data.shape[1], 3)\n\n    def test_subset_smtp(self):\n        kddcup99_smtp = fetch_kddcup99(subset='smtp', shuffle=False, percent10=True)\n        self.assertLess(kddcup99_smtp.data.shape[0], self.kddcup99.data.shape[0])\n        self.assertEqual(kddcup99_smtp.data.shape[1], 3)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_576": ["\nimport unittest\nimport numpy as np\nfrom seaborn._core.scales import Nominal, Continuous, Temporal, PseudoAxis\nfrom matplotlib.ticker import FixedLocator, LogLocator\n\nclass TestScales(unittest.TestCase):\n    def setUp(self):\n        self.nominal_scale = Nominal()\n        self.continuous_scale = Continuous()\n        self.temporal_scale = Temporal()\n        self.pseudo_axis = PseudoAxis(self.continuous_scale)\n        self.data = np.array([1, 2, 3, 4, 5])\n\n    def test_nominal_scale_setup(self):\n        class Property:\n            def get_mapping(self, scale, data):\n                return lambda x: x\n\n        result = self.nominal_scale._setup(self.data, Property())\n        self.assertIsInstance(result, Nominal)\n\n    def test_continuous_scale_setup(self):\n        class Property:\n            def get_mapping(self, scale, data):\n                return lambda x: x\n            normed = True\n\n        result = self.continuous_scale._setup(self.data, Property())\n        self.assertIsInstance(result, Continuous)\n\n    def test_temporal_scale_setup(self):\n        class Property:\n            def get_mapping(self, scale, data):\n                return lambda x: x\n            normed = True\n\n        result = self.temporal_scale._setup(self.data, Property())\n        self.assertIsInstance(result, Temporal)\n\n    def test_pseudo_axis_update_units(self):\n        self.pseudo_axis.update_units(self.data)\n        self.assertEqual(self.pseudo_axis.converter, None)\n\n    def test_pseudo_axis_convert_units(self):\n        result = self.pseudo_axis.convert_units(self.data)\n        np.testing.assert_array_equal(result, self.data)\n\n    def test_continuous_scale_tick(self):\n        result = self.continuous_scale.tick(at=[1, 2, 3])\n        self.assertIsInstance(result, Continuous)\n\n    def test_continuous_scale_label(self):\n        result = self.continuous_scale.label(like=\".2f\")\n        self.assertIsInstance(result, Continuous)\n\n    def test_continuous_scale_get_locators(self):\n        major, minor = self.continuous_scale._get_locators(FixedLocator([1, 2, 3]), None, None, None, None, None, None)\n        self.assertIsInstance(major, FixedLocator)\n        self.assertIsNone(minor)\n\n    def test_continuous_scale_get_formatter(self):\n        formatter = self.continuous_scale._get_formatter(LogLocator(), None, None, None, None)\n        self.assertIsInstance(formatter, LogLocator)\n\n    def test_temporal_scale_tick(self):\n        result = self.temporal_scale.tick(upto=5)\n        self.assertIsInstance(result, Temporal)\n\n    def test_temporal_scale_label(self):\n        result = self.temporal_scale.label(concise=True)\n        self.assertIsInstance(result, Temporal)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_926": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom sphinx.domains.c import CDomain, CObject, CMemberObject, CFunctionObject, CMacroObject, CStructObject, CUnionObject, CEnumObject, CEnumeratorObject, CTypeObject, CNamespaceObject, CNamespacePushObject, CNamespacePopObject, CAliasObject, CExprRole, CXRefRole, DefinitionParser, AliasNode, AliasTransform\nfrom sphinx.testing.util import assert_node\nfrom sphinx.addnodes import desc, desc_signature, desc_content, desc_name\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.config import Config\nfrom sphinx.util.nodes import Node\nfrom sphinx.util.docutils import new_document\n\nclass TestCDomain(unittest.TestCase):\n    def setUp(self):\n        self.env = Mock(spec=BuildEnvironment)\n        self.domain = CDomain(self.env)\n\n    def test_clear_doc(self):\n        # Test the clear_doc method\n\n    def test_process_doc(self):\n        # Test the process_doc method\n\n    def test_process_field_xref(self):\n        # Test the process_field_xref method\n\n    def test_merge_domaindata(self):\n        # Test the merge_domaindata method\n\n    def test_resolve_xref(self):\n        # Test the resolve_xref method\n\n    def test_resolve_any_xref(self):\n        # Test the resolve_any_xref method\n\n    def test_get_objects(self):\n        # Test the get_objects method\n\nclass TestCObject(unittest.TestCase):\n    def setUp(self):\n        self.env = Mock(spec=BuildEnvironment)\n        self.domain = CDomain(self.env)\n        self.obj = CObject(self.env, self.domain, Mock())\n\n    def test_add_target_and_index(self):\n        # Test the add_target_and_index method\n\n    def test_parse_definition(self):\n        # Test the parse_definition method\n\n    def test_describe_signature(self):\n        # Test the describe_signature method\n\n    def test_run(self):\n        # Test the run method\n\n    def test_handle_signature(self):\n        # Test the handle_signature method\n\n    def test_before_content(self):\n        # Test the before_content method\n\n    def test_after_content(self):\n        # Test the after_content method\n\n    def test_make_old_id(self):\n        # Test the make_old_id method\n\n# Add more test cases for other classes\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_279": ["\nfrom unittest import TestCase\nfrom unittest.mock import Mock\nfrom django.db.models.query_utils import Q\nfrom django.db.models.constraints import BaseConstraint, CheckConstraint, Deferrable, UniqueConstraint\n\nclass TestBaseConstraint(TestCase):\n    def setUp(self):\n        self.base_constraint = BaseConstraint(\"test_constraint\")\n\n    def test_deconstruct(self):\n        path, args, kwargs = self.base_constraint.deconstruct()\n        self.assertEqual(path, 'django.db.models.BaseConstraint')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'name': 'test_constraint'})\n\n    def test_clone(self):\n        cloned_constraint = self.base_constraint.clone()\n        self.assertEqual(cloned_constraint.name, 'test_constraint')\n\nclass TestCheckConstraint(TestCase):\n    def setUp(self):\n        self.check = Q(age__gte=18)\n        self.check_constraint = CheckConstraint(check=self.check, name=\"age_check\")\n\n    def test_init_with_invalid_check(self):\n        with self.assertRaises(TypeError):\n            CheckConstraint(check=\"invalid_check\", name=\"invalid_check_constraint\")\n\n    def test_constraint_sql(self):\n        model = Mock()\n        schema_editor = Mock()\n        schema_editor._check_sql.return_value = \"CHECK_SQL\"\n        self.assertEqual(self.check_constraint.constraint_sql(model, schema_editor), \"CHECK_SQL\")\n\n    def test_create_sql(self):\n        model = Mock()\n        schema_editor = Mock()\n        schema_editor._create_check_sql.return_value = \"CREATE_CHECK_SQL\"\n        self.assertEqual(self.check_constraint.create_sql(model, schema_editor), \"CREATE_CHECK_SQL\")\n\n    def test_remove_sql(self):\n        model = Mock()\n        schema_editor = Mock()\n        schema_editor._delete_check_sql.return_value = \"DELETE_CHECK_SQL\"\n        self.assertEqual(self.check_constraint.remove_sql(model, schema_editor), \"DELETE_CHECK_SQL\")\n\n    def test_repr(self):\n        expected_repr = \"<CheckConstraint: check=<Q: (AND: ('age__gte', 18))> name='age_check'>\"\n        self.assertEqual(repr(self.check_constraint), expected_repr)\n\n    def test_eq(self):\n        same_check_constraint = CheckConstraint(check=self.check, name=\"age_check\")\n        self.assertEqual(self.check_constraint, same_check_constraint)\n\n    def test_deconstruct(self):\n        path, args, kwargs = self.check_constraint.deconstruct()\n        self.assertEqual(path, 'django.db.models.CheckConstraint')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'name': 'age_check', 'check': self.check})\n\nclass TestUniqueConstraint(TestCase):\n    def setUp(self):\n        self.unique_constraint = UniqueConstraint(fields=['field1', 'field2'], name='unique_constraint')\n\n    def test_init_with_empty_fields(self):\n        with self.assertRaises(ValueError):\n            UniqueConstraint(fields=[], name='empty_fields_constraint')\n\n    def test_init_with_invalid_condition(self):\n        with self.assertRaises(ValueError):\n            UniqueConstraint(fields=['field1'], name='invalid_condition_constraint', condition='invalid_condition')\n\n    def test_init_with_invalid_deferrable(self):\n        with self.assertRaises(ValueError):\n            UniqueConstraint(fields=['field1'], name='invalid_deferrable_constraint', deferrable='invalid_deferrable')\n\n    def test_init_with_invalid_include(self):\n        with self.assertRaises(ValueError):\n            UniqueConstraint(fields=['field1'], name='invalid_include_constraint', include='invalid_include')\n\n    def test_init_with_invalid_opclasses(self):\n        with self.assertRaises(ValueError):\n            UniqueConstraint(fields=['field1'], name='invalid_opclasses_constraint', opclasses='invalid_opclasses')\n\n    def test_constraint_sql(self):\n        model = Mock()\n        schema_editor = Mock()\n        schema_editor._unique_sql.return_value = \"UNIQUE_SQL\"\n        self.assertEqual(self.unique_constraint.constraint_sql(model, schema_editor), \"UNIQUE_SQL\")\n\n    def test_create_sql(self):\n        model = Mock()\n        schema_editor = Mock()\n        schema_editor._create_unique_sql.return_value = \"CREATE_UNIQUE_SQL\"\n        self.assertEqual(self.unique_constraint.create_sql(model, schema_editor), \"CREATE_UNIQUE_SQL\")\n\n    def test_remove_sql(self):\n        model = Mock()\n        schema_editor = Mock()\n        schema_editor._delete_unique_sql.return_value = \"DELETE_UNIQUE_SQL\"\n        self.assertEqual(self.unique_constraint.remove_sql(model, schema_editor), \"DELETE_UNIQUE_SQL\")\n\n    def test_repr(self):\n        expected_repr = \"<UniqueConstraint: fields=('field1', 'field2') name='unique_constraint'>\"\n        self.assertEqual(repr(self.unique_constraint), expected_repr)\n\n    def test_eq(self):\n        same_unique_constraint = UniqueConstraint(fields=['field1', 'field2'], name='unique_constraint')\n        self.assertEqual(self.unique_constraint, same_unique_constraint)\n\n    def test_deconstruct(self):\n        path, args, kwargs = self.unique_constraint.deconstruct()\n        self.assertEqual(path, 'django.db.models.UniqueConstraint')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'name': 'unique_constraint', 'fields': ('field1', 'field2')})\n"], "sample_611": ["\nimport unittest\nfrom unittest.mock import patch\nfrom datetime import datetime, timedelta\nfrom xarray.coding.cftime_offsets import (\n    BaseCFTimeOffset, Day, Hour, Microsecond, Millisecond, Minute, MonthBegin, MonthEnd,\n    QuarterBegin, QuarterEnd, Second, Tick, YearBegin, YearEnd, _days_in_month,\n    cftime_range, date_range, date_range_like, get_date_type, to_cftime_datetime, to_offset,\n)\nimport pandas as pd\nimport cftime\n\nclass TestCFTimeOffsets(unittest.TestCase):\n    def setUp(self):\n        self.date = cftime.DatetimeGregorian(2022, 2, 15)\n\n    def test_day(self):\n        day = Day(2)\n        result = day + self.date\n        self.assertEqual(result, cftime.DatetimeGregorian(2022, 2, 17))\n\n    def test_hour(self):\n        hour = Hour(3)\n        result = hour + self.date\n        self.assertEqual(result, cftime.DatetimeGregorian(2022, 2, 15, 3))\n\n    # Add more tests for other offset classes\n\n    def test_to_offset(self):\n        offset = to_offset(\"2QS-MAR\")\n        self.assertIsInstance(offset, QuarterBegin)\n        self.assertEqual(offset.month, 3)\n\n    # Add more tests for other functions\n\n    def test_cftime_range(self):\n        result = cftime_range(start=\"2022-01-01\", end=\"2022-01-05\", freq=\"D\")\n        expected = pd.date_range(start=\"2022-01-01\", end=\"2022-01-05\", freq=\"D\").to_pydatetime()\n        self.assertEqual(result.to_pydatetime(), expected)\n\n    # Add more tests for other functions\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1064": ["\nimport unittest\nfrom sympy import symbols, sin, cos, Matrix\nfrom sympy.printing.tensorflow import TensorflowPrinter, tensorflow_code\n\nclass TestTensorflowPrinter(unittest.TestCase):\n    def setUp(self):\n        self.printer = TensorflowPrinter()\n\n    def test_simple_expression(self):\n        x = symbols('x')\n        expr = sin(x) + cos(x)\n        result = self.printer.doprint(expr)\n        self.assertEqual(result, \"tensorflow.math.sin(x) + tensorflow.math.cos(x)\")\n\n    def test_matrix_expression(self):\n        mat = Matrix([[1, 2], [3, 4]])\n        expr = mat.T\n        result = self.printer.doprint(expr)\n        self.assertEqual(result, \"tensorflow.linalg.matrix_transpose(tensorflow.constant([[1, 2], [3, 4]]))\")\n\n    def test_tensorflow_code_function(self):\n        x = symbols('x')\n        expr = sin(x) + cos(x)\n        result = tensorflow_code(expr)\n        self.assertEqual(result, \"tensorflow.math.sin(x) + tensorflow.math.cos(x)\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_949": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom sphinx.domains.cpp import CPPDomain, DefinitionParser, Symbol\n\nclass TestCPPDomain(unittest.TestCase):\n    def setUp(self):\n        self.env = Mock()\n        self.env.config = Mock()\n        self.env.config.cpp_id_attributes = []\n        self.env.config.cpp_paren_attributes = []\n        self.domain = CPPDomain(self.env)\n\n    def test_definition_parser(self):\n        parser = DefinitionParser('int foo(int bar);', location=None, config=self.env.config)\n        ast = parser.parse_declaration('function', 'function')\n        self.assertEqual(str(ast.name), 'foo')\n\n    def test_symbol_lookup(self):\n        root_symbol = Symbol(None, None, None, None, None, None, None)\n        symbol = root_symbol.add_name('foo')\n        found_symbol = root_symbol.direct_lookup(symbol.get_lookup_key())\n        self.assertEqual(symbol, found_symbol)\n\n    # Add more tests here...\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1069": ["\nimport unittest\nfrom sympy import symbols, Matrix, Piecewise, Idx, IndexedBase, Eq, sin, Rational, Abs, ceiling, glsl_code, S\n\nclass TestGLSLPrinter(unittest.TestCase):\n    def setUp(self):\n        self.printer = glsl_code\n        self.x, self.y, self.z = symbols('x y z')\n        self.tau = symbols(\"tau\")\n        self.mat = Matrix([[1, 2], [3, 4]])\n        self.large_mat = Matrix([[1,2,3,4,5],[6,7,8,9,10]])\n        self.nested_mat = Matrix([[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14]])\n        self.custom_functions = {\"ceiling\": \"CEIL\", \"Abs\": [(lambda x: not x.is_integer, \"fabs\"), (lambda x: x.is_integer, \"ABS\")]}\n        self.len_y = 5\n        self.y = IndexedBase('y', shape=(self.len_y,))\n        self.t = IndexedBase('t', shape=(self.len_y,))\n        self.Dy = IndexedBase('Dy', shape=(self.len_y-1,))\n        self.i = Idx('i', self.len_y-1)\n\n    def test_power_and_rational(self):\n        self.assertEqual(self.printer((2*self.tau)**Rational(7, 2)), '8*sqrt(2)*pow(tau, 3.5)')\n\n    def test_sin_function(self):\n        self.assertEqual(self.printer(sin(self.x), assign_to=\"float y\"), 'float y = sin(x);')\n\n    def test_matrix_types(self):\n        self.assertEqual(self.printer(Matrix([1,2,3])), 'vec3(1, 2, 3)')\n        self.assertEqual(self.printer(self.mat), 'mat2(1, 2, 3, 4)')\n        self.assertEqual(self.printer(self.mat, mat_transpose=True), 'mat2(1, 3, 2, 4)')\n\n    def test_large_matrix(self):\n        self.assertIn('float[10](', self.printer(self.large_mat))\n\n    def test_nested_matrix(self):\n        self.assertIn('float[5][3](', self.printer(self.nested_mat, mat_nested=True))\n\n    def test_custom_functions(self):\n        self.assertEqual(self.printer(Abs(self.x) + ceiling(self.x), user_functions=self.custom_functions), 'fabs(x) + CEIL(x)')\n\n    def test_operators_replacement(self):\n        self.assertEqual(self.printer(self.x*(self.y+self.z), use_operators=False), 'mul(x, add(y, z))')\n        self.assertEqual(self.printer(self.x*(self.y+self.z*(self.x-self.y)**self.z), use_operators=False), 'mul(x, add(y, mul(z, pow(sub(x, y), z))))')\n\n    def test_piecewise_expression(self):\n        expr = Piecewise((self.x + 1, self.x > 0), (self.x, True))\n        self.assertIn('if (x > 0)', self.printer(expr, self.tau))\n\n    def test_loop_expression(self):\n        e = Eq(self.Dy[self.i], (self.y[self.i+1]-self.y[self.i])/(self.t[self.i+1]-self.t[self.i]))\n        self.assertIn('Dy[i] = (y[i + 1] - y[i])/(t[i + 1] - t[i]);', self.printer(e.rhs, assign_to=e.lhs, contract=False))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1125": ["\nimport unittest\nfrom sympy import symbols, Derivative, Function\nfrom sympy.physics.quantum.operator import Operator, HermitianOperator, UnitaryOperator, IdentityOperator, OuterProduct, DifferentialOperator\nfrom sympy.physics.quantum import Dagger, Ket, Bra, Wavefunction\n\nclass TestOperators(unittest.TestCase):\n\n    def setUp(self):\n        self.A = Operator('A')\n        self.B = Operator('B')\n        self.H = HermitianOperator('H')\n        self.U = UnitaryOperator('U')\n        self.I = IdentityOperator()\n        self.k = Ket('k')\n        self.b = Bra('b')\n        self.op = OuterProduct(self.k, self.b)\n        self.f = Function('f')\n        self.x = symbols('x')\n        self.d = DifferentialOperator(1/self.x*Derivative(self.f(self.x), self.x), self.f(self.x))\n        self.w = Wavefunction(self.x**2, self.x)\n\n    def test_operator_properties(self):\n        self.assertEqual(self.A.hilbert_space, 'H')\n        self.assertEqual(self.A.label, ('A',))\n        self.assertFalse(self.A.is_commutative)\n\n    def test_operator_multiplication(self):\n        C = 2*self.A*self.A + I*self.B\n        self.assertEqual(str(C), \"2*A**2 + I*B\")\n\n    def test_operator_commutation(self):\n        self.assertNotEqual(self.A*self.B, self.B*self.A)\n\n    def test_operator_inverse(self):\n        self.assertEqual(self.A*self.A.inv(), 1)\n\n    def test_hermitian_operator(self):\n        self.assertTrue(self.H.is_hermitian)\n        self.assertEqual(Dagger(self.H), self.H)\n\n    def test_unitary_operator(self):\n        self.assertEqual(self.U*Dagger(self.U), 1)\n\n    def test_identity_operator(self):\n        self.assertEqual(str(self.I), \"I\")\n        self.assertEqual(self.A*self.I, self.A)\n\n    def test_outer_product(self):\n        self.assertEqual(self.op.hilbert_space, 'H')\n        self.assertEqual(self.op.ket, self.k)\n        self.assertEqual(self.op.bra, self.b)\n        self.assertEqual(Dagger(self.op), OuterProduct(Dagger(self.b), Dagger(self.k)))\n\n    def test_differential_operator(self):\n        self.assertEqual(self.d.variables, (self.x,))\n        self.assertEqual(self.d.function, self.f(self.x))\n        self.assertEqual(self.d.expr, 1/self.x*Derivative(self.f(self.x), self.x))\n        self.assertEqual(str(self.d.free_symbols), \"set()\")\n\n    def test_differential_operator_apply(self):\n        from sympy.physics.quantum.qapply import qapply\n        self.assertEqual(str(qapply(self.d*self.w)), \"Wavefunction(2, x)\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_726": ["\nimport unittest\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\nfrom scipy import sparse\n\nclass TestSimpleImputer(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2, np.nan], [4, np.nan, 6], [7, 8, 9]])\n        self.X_sparse = sparse.csr_matrix([[1, 2, np.nan], [4, np.nan, 6], [7, 8, 9]])\n\n    def test_mean_imputation(self):\n        imp = SimpleImputer(missing_values=np.nan, strategy='mean')\n        imp.fit(self.X)\n        X_transformed = imp.transform(self.X)\n        expected = np.array([[1, 2, 6.0], [4, 5.5, 6], [7, 8, 9]])\n        np.testing.assert_array_almost_equal(X_transformed, expected)\n\n    def test_median_imputation(self):\n        imp = SimpleImputer(missing_values=np.nan, strategy='median')\n        imp.fit(self.X)\n        X_transformed = imp.transform(self.X)\n        expected = np.array([[1, 2, 6.5], [4, 6.5, 6], [7, 8, 9]])\n        np.testing.assert_array_almost_equal(X_transformed, expected)\n\n    def test_most_frequent_imputation(self):\n        imp = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\n        imp.fit(self.X)\n        X_transformed = imp.transform(self.X)\n        expected = np.array([[1, 2, 9], [4, 2, 6], [7, 8, 9]])\n        np.testing.assert_array_almost_equal(X_transformed, expected)\n\n    def test_sparse_mean_imputation(self):\n        imp = SimpleImputer(missing_values=np.nan, strategy='mean')\n        imp.fit(self.X_sparse)\n        X_transformed = imp.transform(self.X_sparse)\n        expected = np.array([[1, 2, 6.0], [4, 5.5, 6], [7, 8, 9]])\n        np.testing.assert_array_almost_equal(X_transformed.toarray(), expected)\n\n    def test_axis_1_imputation(self):\n        X = np.array([[np.nan, 2, 3], [4, np.nan, 6], [7, np.nan, 9]])\n        imp = SimpleImputer(missing_values=np.nan, strategy='mean', axis=1)\n        imp.fit(X)\n        X_transformed = imp.transform(X)\n        expected = np.array([[2.5, 2, 3], [4, 5, 6], [7, 8, 9]])\n        np.testing.assert_array_almost_equal(X_transformed, expected)\n\n    def test_invalid_strategy(self):\n        with self.assertRaises(ValueError):\n            SimpleImputer(strategy='invalid')\n\n    def test_invalid_axis(self):\n        with self.assertRaises(ValueError):\n            SimpleImputer(axis=2)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1142": ["\nimport unittest\nfrom sympy import MatrixSymbol, Matrix, S, Symbol, ZeroMatrix, Identity, MatMul, MatAdd\nfrom sympy.matrices.expressions.matexpr import MatrixElement, _LeftRightArgs\n\nclass TestMatrixExpr(unittest.TestCase):\n\n    def setUp(self):\n        self.A = MatrixSymbol('A', 3, 3)\n        self.B = MatrixSymbol('B', 3, 3)\n        self.C = MatrixSymbol('C', 3, 4)\n        self.x = MatrixSymbol('x', 3, 1)\n        self.y = MatrixSymbol('y', 4, 1)\n\n    def test_matrix_element(self):\n        a = MatrixElement(self.A, 0, 1)\n        self.assertEqual(a.parent, self.A)\n        self.assertEqual(a.i, 0)\n        self.assertEqual(a.j, 1)\n\n    def test_matrix_symbol(self):\n        self.assertEqual(self.A.shape, (3, 3))\n        self.assertEqual(self.A.name, 'A')\n        self.assertEqual(self.A._entry(0, 1), MatrixElement(self.A, 0, 1))\n\n    def test_matrix_expr_operations(self):\n        expr = 2*self.A*self.B + Identity(3)\n        self.assertIsInstance(expr, MatAdd)\n\n        expr = (self.A.T*self.A).I * self.A * self.x\n        self.assertIsInstance(expr, MatMul)\n\n    def test_matrix_derivative(self):\n        x = Symbol('x')\n        expr = MatrixSymbol('M', 3, 3)\n        result = expr._eval_derivative(x)\n        self.assertEqual(result, ZeroMatrix(3, 3))\n\n    def test_left_right_args(self):\n        lines = [Identity(3), Identity(3)]\n        obj = _LeftRightArgs(lines)\n        self.assertEqual(obj.rank(), 2)\n        self.assertEqual(obj.build(), [Identity(3), Identity(3)])\n\n    # Add more tests as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_309": ["\nimport unittest\nfrom django.utils.http import (\n    base36_to_int, escape_leading_slashes, http_date, int_to_base36, is_same_domain,\n    parse_etags, parse_http_date, quote_etag, url_has_allowed_host_and_scheme,\n    urlencode, urlsafe_base64_decode, urlsafe_base64_encode,\n)\n\nclass TestDjangoUtilsHttp(unittest.TestCase):\n    def test_base36_to_int(self):\n        self.assertEqual(base36_to_int('10'), 36)\n        self.assertEqual(base36_to_int('z'), 35)\n        with self.assertRaises(ValueError):\n            base36_to_int('1' * 14)\n\n    def test_escape_leading_slashes(self):\n        self.assertEqual(escape_leading_slashes('//example.com'), '/%2Fexample.com')\n        self.assertEqual(escape_leading_slashes('/path'), '/path')\n\n    def test_http_date(self):\n        self.assertIsInstance(http_date(), str)\n\n    def test_int_to_base36(self):\n        self.assertEqual(int_to_base36(36), '10')\n        self.assertEqual(int_to_base36(35), 'z')\n        with self.assertRaises(ValueError):\n            int_to_base36(-1)\n\n    def test_is_same_domain(self):\n        self.assertTrue(is_same_domain('example.com', 'example.com'))\n        self.assertTrue(is_same_domain('sub.example.com', '.example.com'))\n        self.assertFalse(is_same_domain('example.com', '.sub.example.com'))\n\n    def test_parse_etags(self):\n        self.assertEqual(parse_etags('\"etag1\", \"etag2\"'), ['\"etag1\"', '\"etag2\"'])\n        self.assertEqual(parse_etags('*'), ['*'])\n\n    def test_parse_http_date(self):\n        self.assertIsInstance(parse_http_date(http_date()), int)\n        with self.assertRaises(ValueError):\n            parse_http_date('invalid date')\n\n    def test_quote_etag(self):\n        self.assertEqual(quote_etag('etag'), '\"etag\"')\n        self.assertEqual(quote_etag('\"etag\"'), '\"etag\"')\n\n    def test_url_has_allowed_host_and_scheme(self):\n        self.assertTrue(url_has_allowed_host_and_scheme('http://example.com', 'example.com'))\n        self.assertFalse(url_has_allowed_host_and_scheme('https://example.com', 'example.com'))\n\n    def test_urlencode(self):\n        self.assertEqual(urlencode({'key': 'value'}), 'key=value')\n        self.assertEqual(urlencode({'key': ['value1', 'value2']}), 'key=value1&key=value2')\n\n    def test_urlsafe_base64_encode_decode(self):\n        self.assertEqual(urlsafe_base64_decode(urlsafe_base64_encode(b'test')), b'test')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1037": ["\nimport unittest\nfrom sympy import MatrixSymbol, Identity, MatMul, MatrixElement, ZeroMatrix, KroneckerDelta, Sum, symbols, Dummy\nfrom sympy.matrices.expressions.matexpr import _matrix_derivative, MatrixExpr\n\nclass TestMatrixExpr(unittest.TestCase):\n\n    def setUp(self):\n        self.A = MatrixSymbol('A', 3, 3)\n        self.B = MatrixSymbol('B', 3, 3)\n        self.x = MatrixSymbol('x', 3, 1)\n\n    def test_matrix_multiplication(self):\n        result = MatMul(self.A, self.B)\n        self.assertEqual(result, self.A * self.B)\n\n    def test_matrix_element(self):\n        element = MatrixElement(self.A, 1, 2)\n        self.assertEqual(element.parent, self.A)\n        self.assertEqual(element.i, 1)\n        self.assertEqual(element.j, 2)\n\n    def test_zero_matrix(self):\n        Z = ZeroMatrix(3, 3)\n        self.assertEqual(Z.shape, (3, 3))\n        self.assertTrue(Z._eval_transpose(), ZeroMatrix(3, 3))\n\n    def test_identity_matrix(self):\n        I = Identity(3)\n        self.assertEqual(I.shape, (3, 3))\n        self.assertTrue(I._eval_transpose(), I)\n\n    def test_matrix_derivative(self):\n        expr = MatMul(self.A, self.x)\n        x = MatrixSymbol('x', 3, 1)\n        result = _matrix_derivative(expr, x)\n        self.assertEqual(result, self.A)\n\n    def test_matrix_expr_from_index_summation(self):\n        N = symbols('N')\n        A = MatrixSymbol(\"A\", N, N)\n        B = MatrixSymbol(\"B\", N, N)\n        expr = Sum(A[i, j]*B[j, k], (j, 0, N-1))\n        result = MatrixExpr.from_index_summation(expr)\n        self.assertEqual(result, MatMul(A, B))\n\n    def test_matrix_expr_equals(self):\n        A = MatrixSymbol('A', 2, 2)\n        B = Matrix([[1, 2], [3, 4]])\n        self.assertTrue(A.equals(B))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_431": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.db import models\nfrom django.db.models.base import Model, ModelBase\nfrom django.core.exceptions import ValidationError\n\nclass TestModel(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        class TestModel(models.Model):\n            name = models.CharField(max_length=200)\n            age = models.IntegerField()\n\n        cls.TestModel = TestModel\n\n    def test_model_instance(self):\n        obj = self.TestModel(name='Test', age=25)\n        self.assertEqual(obj.name, 'Test')\n        self.assertEqual(obj.age, 25)\n\n    def test_model_save(self):\n        obj = self.TestModel(name='Test', age=25)\n        obj.save()\n        self.assertIsNotNone(obj.pk)\n\n    def test_model_delete(self):\n        obj = self.TestModel(name='Test', age=25)\n        obj.save()\n        obj_id = obj.pk\n        obj.delete()\n        with self.assertRaises(self.TestModel.DoesNotExist):\n            self.TestModel.objects.get(pk=obj_id)\n\n    def test_model_full_clean(self):\n        obj = self.TestModel(name='Test', age='invalid')\n        with self.assertRaises(ValidationError):\n            obj.full_clean()\n\n    @patch('django.db.models.base.Model.save_base')\n    def test_model_save_base(self, mock_save_base):\n        obj = self.TestModel(name='Test', age=25)\n        obj.save_base()\n        mock_save_base.assert_called_once()\n\n    @patch('django.db.models.base.Model._do_insert')\n    def test_model_do_insert(self, mock_do_insert):\n        obj = self.TestModel(name='Test', age=25)\n        obj._do_insert(obj._base_manager, 'default', obj._meta.local_fields, [], False)\n        mock_do_insert.assert_called_once()\n\n    # Add more tests as needed to cover other parts of the code\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_604": ["\nimport unittest\nfrom unittest.mock import patch\nimport numpy as np\nimport pandas as pd\nfrom xarray.core import formatting\n\nclass TestFormatting(unittest.TestCase):\n    def setUp(self):\n        self.array = np.array([1, 2, 3, 4, 5])\n        self.timedelta_array = np.array([np.timedelta64(i, 'D') for i in range(5)])\n        self.datetime_array = np.array([np.datetime64('2022-01-01') + np.timedelta64(i, 'D') for i in range(5)])\n\n    def test_pretty_print(self):\n        result = formatting.pretty_print('test', 10)\n        self.assertEqual(result, 'test     ')\n\n    def test_maybe_truncate(self):\n        result = formatting.maybe_truncate('test'*100, 10)\n        self.assertEqual(result, 'testtes...')\n\n    def test_wrap_indent(self):\n        result = formatting.wrap_indent('test\\ntest', '  ', 2)\n        self.assertEqual(result, '  test\\n  test')\n\n    def test_format_timestamp(self):\n        result = formatting.format_timestamp(np.datetime64('2022-01-01'))\n        self.assertEqual(result, '2022-01-01')\n\n    def test_format_timedelta(self):\n        result = formatting.format_timedelta(np.timedelta64(1, 'D'))\n        self.assertEqual(result, '1 days 00:00:00')\n\n    def test_format_item(self):\n        self.assertEqual(formatting.format_item(1), '1')\n        self.assertEqual(formatting.format_item(1.23456), '1.2346')\n        self.assertEqual(formatting.format_item('test'), \"'test'\")\n        self.assertEqual(formatting.format_item(np.datetime64('2022-01-01')), '2022-01-01')\n        self.assertEqual(formatting.format_item(np.timedelta64(1, 'D')), '1 days 00:00:00')\n\n    def test_format_items(self):\n        result = formatting.format_items(self.array)\n        self.assertEqual(result, ['1', '2', '3', '4', '5'])\n\n        result = formatting.format_items(self.timedelta_array)\n        self.assertEqual(result, ['0 days', '1 days', '2 days', '3 days', '4 days'])\n\n        result = formatting.format_items(self.datetime_array)\n        self.assertEqual(result, ['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05'])\n\n    @patch('xarray.core.formatting.OPTIONS', {'display_width': 20})\n    def test_format_array_flat(self):\n        result = formatting.format_array_flat(self.array, 20)\n        self.assertEqual(result, '1 2 3 4 5')\n\n        result = formatting.format_array_flat(self.array, 10)\n        self.assertEqual(result, '1 2 ... 4 5')\n\n    # Add more tests for other functions as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_917": ["\nimport unittest\nfrom unittest.mock import Mock\nfrom sphinx.domains.cpp import DefinitionParser, DefinitionError, CPPDomain\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.testing.util import SphinxTest\n\nclass TestDefinitionParser(unittest.TestCase):\n    def setUp(self):\n        self.config = Mock()\n\n    def test_parse_simple_declaration(self):\n        parser = DefinitionParser('int x;', config=self.config)\n        ast = parser.parse_declaration('member', 'var')\n        self.assertEqual(str(ast.name), 'x')\n\n    # Add more tests for different types of declarations\n\nclass TestCPPDomain(SphinxTest):\n    def setUp(self):\n        super().setUp()\n        self.env = BuildEnvironment(self.srcdir, self.confdir, self.outdir)\n        self.domain = CPPDomain(self.env)\n\n    def test_clear_doc(self):\n        self.domain.data['root_symbol'] = Mock()\n        self.domain.clear_doc('test_doc')\n        self.domain.data['root_symbol'].clear_doc.assert_called_with('test_doc')\n\n    # Add more tests for other methods in CPPDomain\n\n# Add more test classes for other modules/classes if necessary\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1159": ["\nimport unittest\nfrom sympy import Symbol, sqrt, oo, pi\nfrom sympy.core.assumptions import (assumptions, check_assumptions, failing_assumptions, common_assumptions)\nfrom sympy.core.facts import InconsistentAssumptions\n\nclass TestAssumptions(unittest.TestCase):\n    def test_assumptions(self):\n        x = Symbol('x', real=True, positive=True)\n        self.assertEqual(assumptions(x), {'real': True, 'positive': True})\n\n        y = Symbol('y')\n        self.assertEqual(assumptions(y), {})\n\n    def test_check_assumptions(self):\n        x = Symbol('x', real=True, positive=True)\n        self.assertTrue(check_assumptions(x, real=True))\n        self.assertFalse(check_assumptions(x, integer=True))\n        self.assertIsNone(check_assumptions(x, imaginary=True))\n\n    def test_failing_assumptions(self):\n        x = Symbol('x', real=True, positive=True)\n        self.assertEqual(failing_assumptions(6*x + 1, real=True, positive=True), {'positive': None})\n\n    def test_common_assumptions(self):\n        self.assertEqual(common_assumptions([-4, 0, sqrt(2), 2, pi, oo]), {'commutative': True, 'composite': False, 'extended_real': True, 'imaginary': False, 'odd': False})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1173": ["\nimport unittest\nfrom sympy.parsing.sympy_parser import (\n    parse_expr, standard_transformations, rationalize, TokenError, split_symbols,\n    implicit_multiplication, convert_equals_signs, convert_xor, function_exponentiation,\n    implicit_multiplication_application\n)\nfrom sympy import symbols, Eq, Rational, Float, I, Integer, symbols, S\n\nclass TestSympyParser(unittest.TestCase):\n    def test_parse_expr(self):\n        self.assertEqual(parse_expr(\"1/2\"), Rational(1, 2))\n        self.assertEqual(parse_expr(\"1.5\"), Float(1.5))\n        self.assertEqual(parse_expr(\"2j\"), 2*I)\n\n    def test_rationalize(self):\n        self.assertEqual(rationalize([(NAME, 'Float'), (OP, '('), (NUMBER, '1.5'), (OP, ')')], {}, {}),\n                         [(NAME, 'Rational'), (OP, '('), (STRING, '1.5'), (OP, ')')])\n\n    def test_split_symbols(self):\n        self.assertEqual(split_symbols([(NAME, 'Symbol'), (OP, '('), (NAME, \"'xyz'\"), (OP, ')')], {}, {}),\n                         [(NAME, 'Symbol'), (OP, '('), (NAME, \"'x'\"), (OP, ')'), (OP, '*'),\n                          (NAME, 'Symbol'), (OP, '('), (NAME, \"'y'\"), (OP, ')'), (OP, '*'),\n                          (NAME, 'Symbol'), (OP, '('), (NAME, \"'z'\"), (OP, ')')])\n\n    def test_convert_equals_signs(self):\n        self.assertEqual(parse_expr(\"1=2\", transformations=(standard_transformations + (convert_equals_signs,))),\n                         Eq(1, 2))\n\n    def test_convert_xor(self):\n        self.assertEqual(convert_xor([(OP, '^')], {}, {}), [(OP, '**')])\n\n    def test_function_exponentiation(self):\n        self.assertEqual(function_exponentiation([(NAME, 'sin'), (OP, '**'), (NUMBER, '2')], {}, {}),\n                         [(NAME, 'sin'), (OP, '('), (NUMBER, '2'), (OP, ')')])\n\n    def test_implicit_multiplication_application(self):\n        self.assertEqual(parse_expr(\"sin x\", transformations=(standard_transformations + (implicit_multiplication_application,))),\n                         symbols('sin')(symbols('x')))\n\n    def test_token_error(self):\n        with self.assertRaises(TokenError):\n            parse_expr(\"1!!\")\n"], "sample_1035": ["\nimport unittest\nfrom sympy.physics.quantum.grover import (\n    apply_grover, superposition_basis, OracleGate, grover_iteration, WGate\n)\nfrom sympy.physics.quantum.qubit import IntQubit\nfrom sympy.physics.quantum.qapply import qapply\n\nclass TestGroverAlgorithm(unittest.TestCase):\n    def test_superposition_basis(self):\n        state = superposition_basis(2)\n        self.assertEqual(str(state), '1/2*|0> + 1/2*|1> + 1/2*|2> + 1/2*|3>')\n\n    def test_oracle_gate(self):\n        f = lambda qubits: qubits == IntQubit(2)\n        v = OracleGate(2, f)\n        self.assertEqual(str(qapply(v*IntQubit(2))), '-|2>')\n        self.assertEqual(str(qapply(v*IntQubit(3))), '|3>')\n\n    def test_w_gate(self):\n        wgate = WGate(2)\n        qubits = IntQubit(0)\n        self.assertEqual(str(qapply(wgate*qubits)), 'sqrt(2)/2*|0> + sqrt(2)/2*|1> - |0>')\n\n    def test_grover_iteration(self):\n        basis_states = superposition_basis(2)\n        f = lambda qubits: qubits == IntQubit(2)\n        v = OracleGate(2, f)\n        self.assertEqual(str(qapply(grover_iteration(basis_states, v))), '|2>')\n\n    def test_apply_grover(self):\n        f = lambda qubits: qubits == IntQubit(2)\n        self.assertEqual(str(qapply(apply_grover(f, 2))), '|2>')\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_437": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.backends.base.base import BaseDatabaseWrapper\n\nclass TestBaseDatabaseWrapper(unittest.TestCase):\n\n    def setUp(self):\n        self.settings_dict = {\n            'NAME': 'test_db',\n            'USER': 'test_user',\n            'PASSWORD': 'test_password',\n            'HOST': 'localhost',\n            'PORT': '5432',\n            'TIME_ZONE': None,\n            'AUTOCOMMIT': True,\n            'CONN_HEALTH_CHECKS': False,\n            'CONN_MAX_AGE': None,\n        }\n        self.wrapper = BaseDatabaseWrapper(self.settings_dict)\n\n    def test_init(self):\n        self.assertEqual(self.wrapper.alias, 'default')\n        self.assertIsNone(self.wrapper.connection)\n        self.assertFalse(self.wrapper.in_atomic_block)\n\n    def test_ensure_connection(self):\n        with patch.object(BaseDatabaseWrapper, 'connect') as mock_connect:\n            self.wrapper.ensure_connection()\n            mock_connect.assert_called_once()\n\n    def test_cursor(self):\n        with patch.object(BaseDatabaseWrapper, 'ensure_connection') as mock_ensure_connection, \\\n             patch.object(BaseDatabaseWrapper, '_prepare_cursor') as mock_prepare_cursor:\n            self.wrapper.cursor()\n            mock_ensure_connection.assert_called_once()\n            mock_prepare_cursor.assert_called_once()\n\n    def test_commit(self):\n        with patch.object(BaseDatabaseWrapper, '_commit') as mock_commit:\n            self.wrapper.commit()\n            mock_commit.assert_called_once()\n\n    def test_rollback(self):\n        with patch.object(BaseDatabaseWrapper, '_rollback') as mock_rollback:\n            self.wrapper.rollback()\n            mock_rollback.assert_called_once()\n\n    def test_close(self):\n        with patch.object(BaseDatabaseWrapper, '_close') as mock_close:\n            self.wrapper.close()\n            mock_close.assert_called_once()\n\n    def test_savepoint(self):\n        with patch.object(BaseDatabaseWrapper, '_savepoint_allowed', return_value=True), \\\n             patch.object(BaseDatabaseWrapper, '_savepoint') as mock_savepoint:\n            self.wrapper.savepoint()\n            mock_savepoint.assert_called_once()\n\n    def test_savepoint_rollback(self):\n        with patch.object(BaseDatabaseWrapper, '_savepoint_allowed', return_value=True), \\\n             patch.object(BaseDatabaseWrapper, '_savepoint_rollback') as mock_savepoint_rollback:\n            self.wrapper.savepoint_rollback('sid')\n            mock_savepoint_rollback.assert_called_once_with('sid')\n\n    def test_savepoint_commit(self):\n        with patch.object(BaseDatabaseWrapper, '_savepoint_allowed', return_value=True), \\\n             patch.object(BaseDatabaseWrapper, '_savepoint_commit') as mock_savepoint_commit:\n            self.wrapper.savepoint_commit('sid')\n            mock_savepoint_commit.assert_called_once_with('sid')\n\n    # Add more tests for other methods and edge cases as needed\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1155": ["\nimport unittest\nfrom sympy import symbols, S, sqrt, Integer, Rational, Float, I, sin, cos, pi, symbols, QQ, ZZ, EX, ZZ_I, QQ_I\nfrom sympy.polys.constructor import construct_domain, _construct_simple, _construct_algebraic, _construct_composite, _construct_expression\n\nclass TestConstructDomain(unittest.TestCase):\n    def setUp(self):\n        self.x, self.y = symbols('x y')\n\n    def test_construct_simple_integer(self):\n        coeffs = [S(2), S(3), S(4)]\n        opt = type('', (), {})()  # create a dummy object for options\n        opt.extension = False\n        domain, result = _construct_simple(coeffs, opt)\n        self.assertEqual(domain, ZZ)\n        self.assertEqual(result, [2, 3, 4])\n\n    def test_construct_simple_rational(self):\n        coeffs = [S(1)/2, S(3)/4]\n        opt = type('', (), {})()  # create a dummy object for options\n        opt.extension = False\n        domain, result = _construct_simple(coeffs, opt)\n        self.assertEqual(domain, QQ)\n        self.assertEqual(result, [S(1)/2, S(3)/4])\n\n    def test_construct_simple_complex(self):\n        coeffs = [S(1)/2 + I/3, S(3)/4 + I/5]\n        opt = type('', (), {})()  # create a dummy object for options\n        opt.extension = False\n        domain, result = _construct_simple(coeffs, opt)\n        self.assertEqual(domain, QQ_I)\n        self.assertEqual(result, [S(1)/2 + I/3, S(3)/4 + I/5])\n\n    def test_construct_algebraic(self):\n        coeffs = [sqrt(2), sqrt(3)]\n        opt = type('', (), {})()  # create a dummy object for options\n        domain, result = _construct_algebraic(coeffs, opt)\n        self.assertEqual(domain.domain, QQ)\n        self.assertEqual(domain.ext.base, QQ)\n        self.assertEqual(domain.ext.elem.minpoly(domain.ext.gen), QQ.from_sympy(x**2 - 2))\n\n    def test_construct_composite(self):\n        coeffs = [2*self.x + 1, self.y]\n        opt = type('', (), {})()  # create a dummy object for options\n        opt.field = False\n        opt.composite = None\n        domain, result = _construct_composite(coeffs, opt)\n        self.assertEqual(domain.domain, ZZ)\n        self.assertEqual(domain.gens, (self.x, self.y))\n        self.assertEqual(result, [2*domain.gens[0] + 1, domain.gens[1]])\n\n    def test_construct_expression(self):\n        coeffs = [sin(pi/3), cos(pi/4)]\n        opt = type('', (), {})()  # create a dummy object for options\n        domain, result = _construct_expression(coeffs, opt)\n        self.assertEqual(domain, EX)\n        self.assertEqual(result, [sin(pi/3), cos(pi/4)])\n\n    def test_construct_domain(self):\n        coeffs = [sqrt(2), self.x, S(3)/2]\n        domain, result = construct_domain(coeffs)\n        self.assertEqual(domain, EX)\n        self.assertEqual(result, [sqrt(2), self.x, S(3)/2])\n\n        coeffs = [sqrt(2), self.x, S(3)/2]\n        domain, result = construct_domain(coeffs, extension=True)\n        self.assertEqual(domain.domain, QQ)\n        self.assertEqual(domain.ext.base, QQ)\n        self.assertEqual(domain.ext.elem.minpoly(domain.ext.gen), QQ.from_sympy(x**2 - 2))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1038": ["\nimport unittest\nfrom sympy import MatrixSymbol, Identity, Matrix, MatMul, SparseMatrix, Transpose, Adjoint, ShapeError, Q, assuming, refine\nfrom sympy.matrices.expressions.matmul import validate, newmul, any_zeros, merge_explicit, xxinv, remove_ids, factor_in_front, combine_powers\nfrom sympy.matrices.expressions.matpow import MatPow\n\nclass TestMatMul(unittest.TestCase):\n    def setUp(self):\n        self.A = MatrixSymbol('A', 5, 4)\n        self.B = MatrixSymbol('B', 4, 3)\n        self.C = MatrixSymbol('C', 3, 6)\n        self.D = Matrix([[1, 1], [1, 1]])\n        self.E = Matrix([[1, 2], [3, 4]])\n\n    def test_matmul_creation(self):\n        matmul = MatMul(self.A, self.B, self.C)\n        self.assertEqual(str(matmul), \"A*B*C\")\n\n    def test_matmul_shape(self):\n        matmul = MatMul(self.A, self.B, self.C)\n        self.assertEqual(matmul.shape, (5, 6))\n\n    def test_validate(self):\n        with self.assertRaises(ShapeError):\n            validate(self.A, self.C)\n\n    def test_any_zeros(self):\n        matmul = MatMul(self.A, ZeroMatrix(4, 4), self.C)\n        self.assertTrue(any_zeros(matmul).is_ZeroMatrix)\n\n    def test_merge_explicit(self):\n        matmul = MatMul(self.A, self.D, self.E)\n        merged = merge_explicit(matmul)\n        self.assertEqual(str(merged), \"A*Matrix([[4, 6], [4, 6]])\")\n\n    def test_xxinv(self):\n        matmul = MatMul(self.A, self.A.inv(), self.B)\n        simplified = xxinv(matmul)\n        self.assertEqual(str(simplified), \"B\")\n\n    def test_remove_ids(self):\n        matmul = MatMul(self.A, Identity(4), self.B)\n        simplified = remove_ids(matmul)\n        self.assertEqual(str(simplified), \"A*B\")\n\n    def test_factor_in_front(self):\n        matmul = MatMul(2, self.A, self.B)\n        simplified = factor_in_front(matmul)\n        self.assertEqual(str(simplified), \"2*A*B\")\n\n    def test_combine_powers(self):\n        matmul = MatMul(self.A, self.A**2, self.B)\n        simplified = combine_powers(matmul)\n        self.assertEqual(str(simplified), \"A**3*B\")\n\n    def test_refine_MatMul(self):\n        expr = self.A * self.A.T\n        with assuming(Q.orthogonal(self.A)):\n            refined = refine(expr)\n            self.assertEqual(str(refined), \"I\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_1063": ["\nimport unittest\nimport numpy as np\nfrom sympy import symbols, sin, cos, lambdify\nfrom sympy.utilities.lambdify import implemented_function, lambdastr\n\nclass TestLambdify(unittest.TestCase):\n    def setUp(self):\n        self.x = symbols('x')\n\n    def test_simple_lambdify(self):\n        expr = sin(self.x) + cos(self.x)\n        f = lambdify(self.x, expr, 'numpy')\n        a = np.array([1, 2])\n        self.assertTrue(np.allclose(f(a), np.sin(a) + np.cos(a)))\n\n    def test_lambdastr(self):\n        expr = self.x ** 2\n        lstr = lambdastr(self.x, expr)\n        f = eval(lstr)\n        self.assertEqual(f(2), 4)\n\n    def test_implemented_function(self):\n        f = implemented_function('f', lambda x: x + 1)\n        func = lambdify(self.x, f(self.x))\n        self.assertEqual(func(4), 5)\n\n    def test_lambdify_with_custom_printer(self):\n        expr = sin(self.x) + cos(self.x)\n        def custom_printer(expr):\n            return str(expr).replace('sin', 'np.sin').replace('cos', 'np.cos')\n        f = lambdify(self.x, expr, printer=custom_printer)\n        a = np.array([1, 2])\n        self.assertTrue(np.allclose(f(a), np.sin(a) + np.cos(a)))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_586": ["\nimport unittest\nfrom xarray import DataArray, Dataset, concat\nimport numpy as np\n\nclass TestConcatFunction(unittest.TestCase):\n    def setUp(self):\n        self.ds1 = Dataset({'x': (('time', 'z'), np.random.rand(10, 5))},\n                           {'time': np.arange(10), 'z': np.arange(5)})\n        self.ds2 = Dataset({'x': (('time', 'z'), np.random.rand(10, 5))},\n                           {'time': np.arange(10), 'z': np.arange(5)})\n        self.da1 = DataArray(np.random.rand(10, 5),\n                             dims=('time', 'z'),\n                             coords={'time': np.arange(10), 'z': np.arange(5)})\n        self.da2 = DataArray(np.random.rand(10, 5),\n                             dims=('time', 'z'),\n                             coords={'time': np.arange(10), 'z': np.arange(5)})\n\n    def test_concat_datasets(self):\n        result = concat([self.ds1, self.ds2], dim='time')\n        self.assertEqual(result.dims['time'], 20)\n\n    def test_concat_dataarrays(self):\n        result = concat([self.da1, self.da2], dim='time')\n        self.assertEqual(result.dims['time'], 20)\n\n    def test_concat_invalid_type(self):\n        with self.assertRaises(TypeError):\n            concat(['invalid', self.ds1], dim='time')\n\n    def test_concat_invalid_compat(self):\n        with self.assertRaises(ValueError):\n            concat([self.ds1, self.ds2], dim='time', compat='invalid')\n\n    def test_concat_dataarrays_invalid_data_vars(self):\n        with self.assertRaises(ValueError):\n            concat([self.da1, self.da2], dim='time', data_vars='invalid')\n"], "sample_780": ["\nimport unittest\nimport numpy as np\nfrom sklearn.decomposition import LatentDirichletAllocation\nfrom sklearn.decomposition._online_lda import (_dirichlet_expectation_1d, _dirichlet_expectation_2d)\nfrom sklearn.exceptions import NotFittedError\n\nclass TestLatentDirichletAllocation(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        self.n_components = 2\n        self.lda = LatentDirichletAllocation(n_components=self.n_components, random_state=0)\n\n    def test_init(self):\n        self.assertEqual(self.lda.n_components, self.n_components)\n        self.assertIsNotNone(self.lda.random_state)\n\n    def test_fit(self):\n        self.lda.fit(self.X)\n        self.assertEqual(self.lda.components_.shape, (self.n_components, self.X.shape[1]))\n\n    def test_transform(self):\n        self.lda.fit(self.X)\n        doc_topic_distr = self.lda.transform(self.X)\n        self.assertEqual(doc_topic_distr.shape, (self.X.shape[0], self.n_components))\n\n    def test_partial_fit(self):\n        self.lda.partial_fit(self.X)\n        self.assertEqual(self.lda.components_.shape, (self.n_components, self.X.shape[1]))\n\n    def test_score(self):\n        self.lda.fit(self.X)\n        score = self.lda.score(self.X)\n        self.assertIsInstance(score, float)\n\n    def test_perplexity(self):\n        self.lda.fit(self.X)\n        perplexity = self.lda.perplexity(self.X)\n        self.assertIsInstance(perplexity, float)\n\n    def test_not_fitted_error(self):\n        with self.assertRaises(NotFittedError):\n            self.lda.transform(self.X)\n\n    def test_dirichlet_expectation_1d(self):\n        x = np.array([1, 2, 3])\n        alpha = 0.5\n        result = _dirichlet_expectation_1d(x, alpha)\n        self.assertEqual(result.shape, x.shape)\n\n    def test_dirichlet_expectation_2d(self):\n        x = np.array([[1, 2, 3], [4, 5, 6]])\n        result = _dirichlet_expectation_2d(x)\n        self.assertEqual(result.shape, x.shape)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1075": ["\nimport unittest\nfrom sympy import Symbol, I, pi, beta, conjugate, diff, digamma, gamma, S\n\nclass TestBetaFunction(unittest.TestCase):\n\n    def setUp(self):\n        self.x = Symbol('x')\n        self.y = Symbol('y')\n\n    def test_mirror_symmetry(self):\n        self.assertEqual(conjugate(beta(self.x, self.y)), beta(conjugate(self.x), conjugate(self.y)))\n\n    def test_differentiation_wrt_x(self):\n        self.assertEqual(diff(beta(self.x, self.y), self.x), (digamma(self.x) - digamma(self.x + self.y))*beta(self.x, self.y))\n\n    def test_differentiation_wrt_y(self):\n        self.assertEqual(diff(beta(self.x, self.y), self.y), (digamma(self.y) - digamma(self.x + self.y))*beta(self.x, self.y))\n\n    def test_numerical_evaluation_real(self):\n        self.assertAlmostEqual(beta(pi, pi).evalf(40), 0.02671848900111377452242355235388489324562, places=39)\n\n    def test_numerical_evaluation_complex(self):\n        self.assertAlmostEqual(beta(1 + I, 1 + I).evalf(20), -0.2112723729365330143 - 0.7655283165378005676*I, places=19)\n\n    def test_is_real(self):\n        self.assertTrue(beta(S(2), S(3)).is_real)\n        self.assertFalse(beta(2 + I, 3).is_real)\n\n    def test_rewrite_as_gamma(self):\n        self.assertEqual(beta(self.x, self.y)._eval_rewrite_as_gamma(self.x, self.y), gamma(self.x)*gamma(self.y) / gamma(self.x + self.y))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_909": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom sphinx.domains.c import DefinitionParser, Symbol, CDomain, CObject\nfrom sphinx.testing import restructuredtext\n\nclass TestCDomain(unittest.TestCase):\n\n    def setUp(self):\n        self.env = Mock()\n        self.env.config = {}\n        self.domain = CDomain()\n        self.domain.env = self.env\n\n    def test_definition_parser(self):\n        parser = DefinitionParser(\"int foo(int a, int b);\", location=None, config=self.env.config)\n        declaration = parser.parse_declaration('function', 'function')\n        self.assertEqual(declaration.objectType, 'function')\n\n    def test_symbol(self):\n        symbol = Symbol(None, None, None, None, None)\n        symbol.add_name(\"foo\")\n        child_symbol = symbol.find_identifier(\"foo\", True, True, True)\n        self.assertIsNotNone(child_symbol)\n\n    def test_c_domain(self):\n        self.domain.data['root_symbol'] = Symbol(None, None, None, None, None)\n        self.domain.process_doc(self.env, \"test_doc\", None)\n        self.domain.clear_doc(\"test_doc\")\n\n    @patch('sphinx.domains.c.logger.warning')\n    def test_c_object_run(self, mock_warning):\n        self.env.temp_data = {}\n        self.env.temp_data['c:parent_symbol'] = Symbol(None, None, None, None, None)\n        self.env.ref_context = {}\n        self.env.ref_context['c:parent_key'] = self.env.temp_data['c:parent_symbol'].get_lookup_key()\n        self.env.docname = \"test_doc\"\n        c_object = CObject(None, None, None, None, None, None, None, None, None)\n        c_object.env = self.env\n        c_object.handle_signature = Mock(return_value=None)\n        c_object.describe_signature = Mock()\n        c_object.run()\n        mock_warning.assert_called()  # Assuming handle_signature raises an error\n\n    def test_restructuredtext(self):\n        text = \".. c:function:: int foo(int a, int b)\"\n        doctree = restructuredtext.parse(text)\n        self.assertIsNotNone(doctree)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_825": ["\nimport unittest\nfrom sklearn.cross_decomposition import pls_\nimport numpy as np\n\nclass TestPLS(unittest.TestCase):\n    def setUp(self):\n        self.X = np.array([[0., 0., 1.], [1., 0., 0.], [2., 2., 2.], [2., 5., 4.]])\n        self.Y = np.array([[0.1, -0.2], [0.9, 1.1], [6.2, 5.9], [11.9, 12.3]])\n\n    def test_PLSRegression(self):\n        pls2 = pls_.PLSRegression(n_components=2)\n        pls2.fit(self.X, self.Y)\n        Y_pred = pls2.predict(self.X)\n        self.assertEqual(Y_pred.shape, self.Y.shape)\n\n    def test_PLSCanonical(self):\n        plsca = pls_.PLSCanonical(n_components=2)\n        plsca.fit(self.X, self.Y)\n        X_c, Y_c = plsca.transform(self.X, self.Y)\n        self.assertEqual(X_c.shape, (4, 2))\n        self.assertEqual(Y_c.shape, (4, 2))\n\n    def test_PLSSVD(self):\n        plssvd = pls_.PLSSVD(n_components=2)\n        plssvd.fit(self.X, self.Y)\n        X_c, Y_c = plssvd.transform(self.X, self.Y)\n        self.assertEqual(X_c.shape, (4, 2))\n        self.assertEqual(Y_c.shape, (4, 2))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1007": ["\nimport unittest\nfrom sympy import Symbol, S, ConditionSet, pi, Eq, sin, Interval, FiniteSet, UniversalSet, EmptySet, Union, And\nfrom sympy.abc import x, y, z\n\nclass TestConditionSet(unittest.TestCase):\n    def test_sin_solutions(self):\n        sin_sols = ConditionSet(x, Eq(sin(x), 0), Interval(0, 2*pi))\n        self.assertTrue(2*pi in sin_sols)\n        self.assertFalse(pi/2 in sin_sols)\n        self.assertFalse(3*pi in sin_sols)\n\n    def test_square_root_conditions(self):\n        self.assertTrue(5 in ConditionSet(x, x**2 > 4, S.Reals))\n        self.assertFalse(5 in ConditionSet(x, x**2 > 4, Interval(2, 4)))\n\n    def test_symbol_assumptions(self):\n        n = Symbol('n', negative=True)\n        self.assertEqual(ConditionSet(n, n > 0, S.Integers), EmptySet())\n\n    def test_dummy_symbol_substitution(self):\n        c = ConditionSet(x, x < 1, {x, z})\n        self.assertEqual(c.subs(x, y), ConditionSet(x, x < 1, {y, z}))\n        self.assertEqual(c.subs(x, y).subs(x, y), ConditionSet(y, y < 1, {y, z}))\n\n    def test_base_set_substitution(self):\n        self.assertEqual(ConditionSet(y, y < 1, {y, z}).subs(y, 1), ConditionSet(y, y < 1, {z}))\n\n    def test_universal_set_implied(self):\n        self.assertEqual(ConditionSet(x, x < 1).base_set, UniversalSet())\n\n    def test_non_symbol_dummy(self):\n        with self.assertRaises(ValueError):\n            ConditionSet(x + 1, x < 1, S.Integers)\n\n    def test_nested_condition_set(self):\n        c = ConditionSet(x, x < y, ConditionSet(y, x + y < 2, S.Integers))\n        self.assertEqual(c.sym, Symbol('lambda'))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_960": ["\nimport unittest\nfrom sphinx.domains.c import CDomain, DefinitionParser, Symbol\nfrom sphinx.testing import restructuredtext\n\nclass TestCDomain(unittest.TestCase):\n    def setUp(self):\n        self.domain = CDomain()\n        self.domain.env = restructuredtext.DummyBuildEnvironment()\n\n    def test_parse_declaration(self):\n        parser = DefinitionParser(\"int function(int arg);\", location=None, config=self.domain.env.config)\n        ast = self.domain.directives['function']().parse_definition(parser)\n        self.assertEqual(ast.objectType, 'function')\n\n    def test_parse_xref_object(self):\n        parser = DefinitionParser(\"function\", location=None, config=self.domain.env.config)\n        name = parser.parse_xref_object()\n        self.assertEqual(str(name), \"function\")\n\n    def test_symbol_merge_with(self):\n        symbol1 = Symbol(None, None, None, None, None)\n        symbol2 = Symbol(None, None, None, None, None)\n        symbol1.add_name(\"namespace\")\n        child_symbol1 = symbol1.add_name(\"child\")\n        child_symbol2 = symbol2.add_name(\"child\")\n        symbol1.merge_with(symbol2, [\"doc1\"], self.domain.env)\n        self.assertEqual(len(list(symbol1.get_all_symbols())), 2)\n        self.assertEqual(len(list(child_symbol1.get_all_symbols())), 1)\n\n    def test_clear_doc(self):\n        symbol = Symbol(None, None, None, None, None)\n        symbol.add_name(\"namespace\")\n        symbol.add_name(\"child\")\n        symbol.clear_doc(\"doc1\")\n        self.assertEqual(symbol.declaration, None)\n        self.assertEqual(symbol.docname, None)\n\n    # Add more tests to cover other functions and edge cases\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_303": ["\nimport unittest\nfrom unittest.mock import patch, Mock\nfrom django.db.backends.base.client import BaseDatabaseClient\n\nclass TestBaseDatabaseClient(unittest.TestCase):\n    def setUp(self):\n        self.mock_connection = Mock()\n        self.mock_connection.settings_dict = {'test': 'settings'}\n        self.base_database_client = BaseDatabaseClient(self.mock_connection)\n\n    @patch('os.environ', {'TEST_ENV': 'test_value'})\n    @patch('subprocess.run')\n    def test_runshell(self, mock_subprocess_run):\n        self.base_database_client.settings_to_cmd_args_env = Mock(return_value=(['test_cmd'], {'TEST_ENV': 'new_value'}))\n        self.base_database_client.runshell({'param': 'value'})\n        mock_subprocess_run.assert_called_once_with(['test_cmd'], env={'TEST_ENV': 'new_value'})\n\n    def test_settings_to_cmd_args_env_not_implemented(self):\n        with self.assertRaises(NotImplementedError):\n            BaseDatabaseClient.settings_to_cmd_args_env({'test': 'settings'}, {'param': 'value'})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1126": ["\nimport unittest\nfrom sympy import Matrix, I\nfrom sympy.physics.quantum.dagger import Dagger\nfrom sympy.physics.quantum.state import Ket, Bra\nfrom sympy.physics.quantum.operator import Operator\nfrom sympy.physics.quantum import InnerProduct, OuterProduct, IdentityOperator\n\nclass TestDagger(unittest.TestCase):\n\n    def test_dagger_quantum_objects(self):\n        self.assertEqual(Dagger(Ket('psi')), Bra('psi'))\n        self.assertEqual(Dagger(Bra('phi')), Ket('phi'))\n        self.assertEqual(Dagger(Operator('A')), Dagger(Operator('A')))\n\n    def test_dagger_inner_outer_products(self):\n        self.assertEqual(Dagger(InnerProduct(Bra('a'), Ket('b'))), InnerProduct(Ket('b'), Bra('a')))\n        self.assertEqual(Dagger(OuterProduct(Ket('a'), Bra('b'))), OuterProduct(Bra('b'), Ket('a')))\n\n    def test_dagger_powers_sums_products(self):\n        A = Operator('A')\n        B = Operator('B')\n        self.assertEqual(Dagger(A * B), Dagger(B) * Dagger(A))\n        self.assertEqual(Dagger(A + B), Dagger(A) + Dagger(B))\n        self.assertEqual(Dagger(A ** 2), Dagger(A) ** 2)\n\n    def test_dagger_complex_numbers_matrices(self):\n        m = Matrix([[1, I], [2, I]])\n        self.assertEqual(Dagger(m), Matrix([[1, 2], [-I, -I]]))\n\n    def test_dagger_identity_operator(self):\n        A = Operator('A')\n        self.assertEqual(Dagger(A * IdentityOperator()), Dagger(A))\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1117": ["\nimport unittest\nfrom sympy import Q, ask, symbols, MatrixSymbol, Identity, ZeroMatrix, OneMatrix, MatrixSlice, Determinant, MatMul, MatAdd, MatPow, DiagMatrix, DiagonalMatrix, BlockMatrix, HadamardProduct, DFT\nfrom sympy.assumptions.handlers.matrices import AskSquareHandler, AskSymmetricHandler, AskInvertibleHandler, AskOrthogonalHandler, AskUnitaryHandler, AskFullRankHandler, AskPositiveDefiniteHandler, AskUpperTriangularHandler, AskLowerTriangularHandler, AskDiagonalHandler, AskIntegerElementsHandler, AskRealElementsHandler, AskComplexElementsHandler\n\nclass TestMatrixHandlers(unittest.TestCase):\n\n    def setUp(self):\n        self.x, self.y, self.z = symbols('x y z')\n        self.A = MatrixSymbol('A', 3, 3)\n        self.I = Identity(3)\n        self.Z = ZeroMatrix(3, 3)\n        self.O = OneMatrix(3, 3)\n\n    def test_AskSquareHandler(self):\n        self.assertTrue(AskSquareHandler.MatrixExpr(self.A, Q.symbol(self.x)))\n        self.assertFalse(AskSquareHandler.MatrixExpr(MatrixSymbol('B', 3, 4), Q.symbol(self.x)))\n\n    def test_AskSymmetricHandler(self):\n        self.assertTrue(AskSymmetricHandler.MatMul(MatMul(self.I, self.I.T), Q.symbol(self.x)))\n        self.assertTrue(AskSymmetricHandler.MatrixSymbol(DiagonalMatrix([self.x, self.y, self.z]), Q.symbol(self.x) & Q.symbol(self.y) & Q.symbol(self.z)))\n\n    # Similar tests for other handlers\n\n    def test_AskIntegerElementsHandler(self):\n        self.assertTrue(AskIntegerElementsHandler.MatAdd(MatAdd(self.Z, self.O), Q.symbol(self.x)))\n        self.assertTrue(AskIntegerElementsHandler.MatPow(MatPow(self.I, 2), Q.symbol(self.x)))\n\n    # Continue this pattern for other handlers\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1034": ["\nimport unittest\nfrom sympy import Integer, S, sqrt\nfrom sympy.physics.quantum.qubit import Qubit, IntQubit, matrix_to_qubit, qubit_to_matrix, measure_all, measure_partial, measure_partial_oneshot, measure_all_oneshot\n\nclass TestQubitMethods(unittest.TestCase):\n    def setUp(self):\n        self.q0 = Qubit('00')\n        self.q1 = Qubit('01')\n        self.iq0 = IntQubit(0)\n        self.iq1 = IntQubit(1)\n\n    def test_qubit_creation(self):\n        self.assertEqual(self.q0.qubit_values, (0, 0))\n        self.assertEqual(self.q1.qubit_values, (0, 1))\n\n    def test_intqubit_creation(self):\n        self.assertEqual(self.iq0.qubit_values, (0,))\n        self.assertEqual(self.iq1.qubit_values, (1,))\n\n    def test_matrix_to_qubit_conversion(self):\n        self.assertEqual(matrix_to_qubit(qubit_to_matrix(self.q0)), self.q0)\n\n    def test_measure_all(self):\n        self.assertEqual(measure_all(self.q0), [(self.q0, 1)])\n        self.assertEqual(measure_all((self.q0 + self.q1)/sqrt(2)), [(self.q0, 0.5), (self.q1, 0.5)])\n\n    def test_measure_partial(self):\n        self.assertEqual(measure_partial(self.q0, (0,)), [(self.q0, 1)])\n        self.assertEqual(measure_partial(self.q1, (0,)), [(self.q1, 1)])\n\n    def test_measure_partial_oneshot(self):\n        self.assertEqual(measure_partial_oneshot(self.q0, (0,)), self.q0)\n        self.assertEqual(measure_partial_oneshot(self.q1, (0,)), self.q1)\n\n    def test_measure_all_oneshot(self):\n        self.assertEqual(measure_all_oneshot(self.q0), self.q0)\n        self.assertEqual(measure_all_oneshot((self.q0 + self.q1)/sqrt(2)), self.q0 or self.q1)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1116": ["\nimport unittest\nfrom sympy import MatrixSymbol, Inverse, MatPow, NonSquareMatrixError, S, Matrix\nfrom sympy.matrices.expressions.determinant import det\nfrom sympy.matrices.common import MatrixCommon\nfrom sympy.assumptions.assume import assuming, Q\n\nclass TestInverse(unittest.TestCase):\n\n    def setUp(self):\n        self.A = MatrixSymbol('A', 3, 3)\n        self.B = MatrixSymbol('B', 3, 3)\n\n    def test_inverse_creation(self):\n        inv_A = Inverse(self.A)\n        self.assertIsInstance(inv_A, Inverse)\n        self.assertEqual(inv_A.exp, S.NegativeOne)\n        self.assertEqual(inv_A.arg, self.A)\n\n    def test_non_square_matrix_inverse(self):\n        C = MatrixSymbol('C', 3, 2)\n        with self.assertRaises(NonSquareMatrixError):\n            Inverse(C)\n\n    def test_inverse_of_inverse(self):\n        inv_inv_A = Inverse(Inverse(self.A))\n        self.assertIsInstance(inv_inv_A, MatPow)\n        self.assertEqual(inv_inv_A.exp, S.One)\n\n    def test_eval_inverse(self):\n        inv_A = Inverse(self.A)\n        self.assertEqual(inv_A._eval_inverse(), self.A)\n\n    def test_eval_determinant(self):\n        inv_A = Inverse(self.A)\n        self.assertEqual(inv_A._eval_determinant(), 1/det(self.A))\n\n    def test_doit(self):\n        inv_A = Inverse(self.A)\n        self.assertEqual(inv_A.doit(), self.A.inverse())\n\n    def test_doit_deep(self):\n        inv_pow_A = Inverse(MatPow(self.A, 2))\n        self.assertEqual(inv_pow_A.doit(), MatPow(self.A, -2))\n\n    def test_refine_orthogonal(self):\n        with assuming(Q.orthogonal(self.A)):\n            self.assertEqual(Inverse(self.A), self.A.T)\n\n    def test_refine_unitary(self):\n        with assuming(Q.unitary(self.A)):\n            self.assertEqual(Inverse(self.A), self.A.conjugate())\n\n    def test_refine_singular(self):\n        with assuming(Q.singular(self.A)):\n            with self.assertRaises(ValueError):\n                Inverse(self.A)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_779": ["\nimport unittest\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.utils.estimator_checks import check_estimators_unfitted, check_fit_score_takes_y, check_no_attributes_set_in_init, check_classifiers_regression_target, check_decision_proba_consistency, check_outliers_fit_predict\n\nclass TestEstimatorChecks(unittest.TestCase):\n    def setUp(self):\n        self.estimator = LinearRegression()\n        self.X = np.array([[1, 2], [3, 4], [5, 6]])\n        self.y = np.array([2, 4, 6])\n\n    def test_check_estimators_unfitted(self):\n        with self.assertRaises(ValueError):\n            check_estimators_unfitted(\"LinearRegression\", self.estimator)\n\n    def test_check_fit_score_takes_y(self):\n        check_fit_score_takes_y(\"LinearRegression\", self.estimator)\n\n    def test_check_no_attributes_set_in_init(self):\n        check_no_attributes_set_in_init(\"LinearRegression\", self.estimator)\n\n    def test_check_classifiers_regression_target(self):\n        with self.assertRaises(ValueError):\n            check_classifiers_regression_target(\"LinearRegression\", self.estimator)\n\n    def test_check_decision_proba_consistency(self):\n        # LinearRegression does not have predict_proba and decision_function methods, so this test will be skipped\n        pass\n\n    def test_check_outliers_fit_predict(self):\n        # LinearRegression is not an outlier detection estimator, so this test will be skipped\n        pass\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_454": ["\nfrom django.test import TestCase\nfrom django.db import connection\nfrom django.core.exceptions import ValidationError\nfrom django.db.models import F, Q, Deferrable\nfrom django.contrib.postgres.constraints import ExclusionConstraint, ExclusionConstraintExpression\nfrom django.contrib.postgres.indexes import OpClass\nfrom django.db.models.lookups import PostgresOperatorLookup\nfrom django.db.models.expressions import Exists\nfrom django.db.models.sql import Query\n\nclass TestExclusionConstraint(TestCase):\n    def setUp(self):\n        # Assuming you have a model setup for testing\n        self.model = MyTestModel.objects.create\n\n    def test_init(self):\n        # Test valid initialization\n        constraint = ExclusionConstraint(name='test_constraint', expressions=[('column1', '&&')])\n        self.assertEqual(constraint.name, 'test_constraint')\n\n        # Test invalid initialization\n        with self.assertRaises(ValueError):\n            ExclusionConstraint(name='test_constraint', expressions=[])\n        with self.assertRaises(ValueError):\n            ExclusionConstraint(name='test_constraint', expressions=[('column1')])\n        with self.assertRaises(ValueError):\n            ExclusionConstraint(name='test_constraint', expressions=[('column1', '&&')], condition='invalid')\n        with self.assertRaises(ValueError):\n            ExclusionConstraint(name='test_constraint', expressions=[('column1', '&&')], deferrable='invalid')\n        with self.assertRaises(ValueError):\n            ExclusionConstraint(name='test_constraint', expressions=[('column1', '&&')], include='invalid')\n\n    def test_get_expressions(self):\n        constraint = ExclusionConstraint(name='test_constraint', expressions=[('column1', '&&')])\n        query = Query(self.model, alias_cols=False)\n        expressions = constraint._get_expressions(connection.schema_editor(), query)\n        self.assertIsInstance(expressions, ExclusionConstraintExpression)\n\n    def test_get_condition_sql(self):\n        constraint = ExclusionConstraint(name='test_constraint', expressions=[('column1', '&&')], condition=Q(column2=1))\n        query = Query(self.model, alias_cols=False)\n        compiler = query.get_compiler(connection=connection)\n        condition_sql = constraint._get_condition_sql(compiler, connection.schema_editor(), query)\n        self.assertIsInstance(condition_sql, str)\n\n    def test_constraint_sql(self):\n        constraint = ExclusionConstraint(name='test_constraint', expressions=[('column1', '&&')])\n        constraint_sql = constraint.constraint_sql(self.model, connection.schema_editor())\n        self.assertIsInstance(constraint_sql, str)\n\n    def test_create_sql(self):\n        constraint = ExclusionConstraint(name='test_constraint', expressions=[('column1', '&&')])\n        create_sql = constraint.create_sql(self.model, connection.schema_editor())\n        self.assertIsInstance(create_sql, str)\n\n    def test_remove_sql(self):\n        constraint = ExclusionConstraint(name='test_constraint', expressions=[('column1', '&&')])\n        remove_sql = constraint.remove_sql(self.model, connection.schema_editor())\n        self.assertIsInstance(remove_sql, str)\n\n    def test_validate(self):\n        constraint = ExclusionConstraint(name='test_constraint', expressions=[(F('column1'), '&&')])\n\n        # Test valid case\n        instance = self.model(column1='valid_value')\n        constraint.validate(self.model, instance)\n\n        # Test invalid case\n        instance = self.model(column1='existing_value')\n        self.model(column1='existing_value')  # Create a conflicting record\n        with self.assertRaises(ValidationError):\n            constraint.validate(self.model, instance)\n\n        # Test with condition\n        constraint = ExclusionConstraint(name='test_constraint', expressions=[(F('column1'), '&&')], condition=Q(column2=1))\n        instance = self.model(column1='existing_value', column2=1)\n        self.model(column1='existing_value', column2=1)  # Create a conflicting record\n        with self.assertRaises(ValidationError):\n            constraint.validate(self.model, instance)\n\n        # Test with exclude\n        constraint.validate(self.model, instance, exclude=['column1'])\n"], "sample_1086": ["\nimport unittest\nfrom sympy import symbols, ZZ, S, Add, Mul, Dummy, Poly, PurePoly\nfrom sympy.polys.specialpolys import (\n    swinnerton_dyer_poly,\n    cyclotomic_poly,\n    symmetric_poly,\n    random_poly,\n    interpolating_poly,\n    fateman_poly_F_1,\n    dmp_fateman_poly_F_1,\n    fateman_poly_F_2,\n    dmp_fateman_poly_F_2,\n    fateman_poly_F_3,\n    dmp_fateman_poly_F_3,\n    f_polys,\n    w_polys\n)\n\nclass TestSpecialPolys(unittest.TestCase):\n\n    def setUp(self):\n        self.x = symbols('x')\n\n    def test_swinnerton_dyer_poly(self):\n        self.assertEqual(str(swinnerton_dyer_poly(1, self.x)), \"x**2 - 2\")\n        self.assertEqual(str(swinnerton_dyer_poly(2, self.x)), \"x**4 - 10*x**2 + 1\")\n        self.assertEqual(str(swinnerton_dyer_poly(3, self.x)), \"x**8 - 40*x**6 + 352*x**4 - 960*x**2 + 576\")\n\n    def test_cyclotomic_poly(self):\n        self.assertEqual(str(cyclotomic_poly(1, self.x)), \"x - 1\")\n        self.assertEqual(str(cyclotomic_poly(2, self.x)), \"x + 1\")\n        self.assertEqual(str(cyclotomic_poly(3, self.x)), \"x**2 + x + 1\")\n\n    def test_symmetric_poly(self):\n        x, y, z = symbols('x y z')\n        self.assertEqual(str(symmetric_poly(2, x, y, z)), \"x*y + x*z + y*z\")\n        self.assertEqual(str(symmetric_poly(3, x, y, z)), \"x*y*z\")\n\n    def test_random_poly(self):\n        poly = random_poly(self.x, 3, 1, 10)\n        self.assertEqual(poly.degree(), 3)\n        for coeff in poly.all_coeffs():\n            self.assertTrue(1 <= coeff <= 10)\n\n    def test_interpolating_poly(self):\n        x = symbols('x')\n        X = [1, 2, 3]\n        Y = [2, 5, 10]\n        self.assertEqual(str(interpolating_poly(3, x, X, Y)), \"x**2 - 4*x + 8\")\n\n    def test_fateman_poly_F_1(self):\n        F, G, H = fateman_poly_F_1(3)\n        self.assertEqual(F.degree(), 6)\n        self.assertEqual(G.degree(), 8)\n        self.assertEqual(H.degree(), 12)\n\n    # similar tests can be written for the rest of the functions\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_243": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom django.db.models.sql.query import Query, JoinInfo, JoinPromoter\nfrom django.db.models import Model, CharField, IntegerField, ForeignKey\nfrom django.db.models.query import Q\nfrom django.db.models.sql.where import AND, OR\nfrom django.db.models.sql.datastructures import Join, BaseTable\nfrom django.db.models.sql.compiler import SQLCompiler\nfrom django.db.models.sql.constants import INNER, LOUTER\n\nclass TestQuery(unittest.TestCase):\n    def setUp(self):\n        class TestModel(Model):\n            name = CharField(max_length=255)\n            age = IntegerField()\n            parent = ForeignKey('self', null=True, on_delete=Model.SET_NULL)\n\n        self.model = TestModel\n        self.query = Query(self.model)\n\n    def test_get_initial_alias(self):\n        alias = self.query.get_initial_alias()\n        self.assertIn(alias, self.query.alias_map)\n\n    def test_join(self):\n        join = Join(self.model._meta.db_table, None, None, INNER, self.model._meta.pk)\n        alias = self.query.join(join)\n        self.assertIn(alias, self.query.alias_map)\n\n    def test_add_filter(self):\n        self.query.add_filter(('name', 'test'))\n        self.assertEqual(len(self.query.where.children), 1)\n\n    def test_add_q(self):\n        q = Q(name='test') | Q(age=25)\n        self.query.add_q(q)\n        self.assertEqual(len(self.query.where.children), 1)\n\n    def test_set_limits(self):\n        self.query.set_limits(low=10, high=20)\n        self.assertEqual(self.query.low_mark, 10)\n        self.assertEqual(self.query.high_mark, 20)\n\n    def test_clear_limits(self):\n        self.query.set_limits(low=10, high=20)\n        self.query.clear_limits()\n        self.assertEqual(self.query.low_mark, 0)\n        self.assertEqual(self.query.high_mark, None)\n\n    def test_add_ordering(self):\n        self.query.add_ordering('-name')\n        self.assertEqual(self.query.order_by, ('-name',))\n\n    def test_clear_ordering(self):\n        self.query.add_ordering('-name')\n        self.query.clear_ordering(force_empty=True)\n        self.assertEqual(self.query.order_by, ())\n        self.assertFalse(self.query.default_ordering)\n\n    def test_set_group_by(self):\n        self.query.add_annotation(Count('age'), alias='age_count', is_summary=True)\n        self.query.set_group_by()\n        self.assertEqual(len(self.query.group_by), 2)\n\n    @patch('django.db.models.sql.query.connections')\n    def test_explain(self, mock_connections):\n        mock_connections[self.query.get_initial_alias()].features.can_use_chunked_reads = False\n        mock_compiler = Mock(spec=SQLCompiler)\n        mock_compiler.explain_query.return_value = ['EXPLAIN QUERY PLAN']\n        self.query.get_compiler = Mock(return_value=mock_compiler)\n        result = self.query.explain(self.query.get_initial_alias())\n        self.assertEqual(result, 'EXPLAIN QUERY PLAN')\n\n    def test_set_annotation_mask(self):\n        self.query.add_annotation(Count('age'), alias='age_count', is_summary=True)\n        self.query.set_annotation_mask(['age_count'])\n        self.assertEqual(self.query.annotation_select_mask, {'age_count'})\n\n    def test_append_annotation_mask(self):\n        self.query.add_annotation(Count('age'), alias='age_count', is_summary=True)\n        self.query.append_annotation_mask(['age_count'])\n        self.assertEqual(self.query.annotation_select_mask, {'age_count'})\n\n    def test_set_extra_mask(self):\n        self.query.add_extra(select={'extra_col': '1'}, select_params=None, where=None, params=None, tables=None, order_by=None)\n        self.query.set_extra_mask(['extra_col'])\n        self.assertEqual(self.query.extra_select_mask, {'extra_col'})\n\n    def test_get_loaded_field_names(self):\n        self.query.add_deferred_loading(['age'])\n        loaded_fields = self.query.get_loaded_field_names()\n        self.assertIn(self.model, loaded_fields)\n        self.assertIn('name', loaded_fields[self.model])\n        self.assertNotIn('age', loaded_fields[self.model])\n\n    def test_is_nullable(self):\n        self.assertTrue(self.query.is_nullable(self.model._meta.get_field('parent')))\n        self.assertFalse(self.query.is_nullable(self.model._meta.get_field('name')))\n\nclass TestJoinPromoter(unittest.TestCase):\n    def test_add_votes(self):\n        join_promoter = JoinPromoter(AND, 2, False)\n        join_promoter.add_votes(['table1', 'table2', 'table1'])\n        self.assertEqual(join_promoter.votes['table1'], 2)\n        self.assertEqual(join_promoter.votes['table2'], 1)\n\n    def test_update_join_types(self):\n        join_promoter = JoinPromoter(AND, 2, False)\n        join_promoter.add_votes(['table1', 'table2', 'table1'])\n        query = Mock()\n        join_promoter.update_join_types(query)\n        query.promote_joins.assert_called_once_with(set())\n        query.demote_joins.assert_called_once_with({'table1'})\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_1028": ["\nimport unittest\nfrom sympy import symbols, tan, Piecewise, Eq, sin, cos, pi, Abs, Matrix, I, exp, Symbol, sqrt, Not, And, Or, Min, Max, arg, im, re, sinc, SparseMatrix, diag, eye, zeros, DiagonalMatrix, Transpose, MatMul, Pow, log, Sum, Integral, Function, exp\nfrom sympy.printing.pycode import pycode, MpmathPrinter, NumPyPrinter, PythonCodePrinter, SciPyPrinter, SymPyPrinter\n\nclass TestPyCodePrinter(unittest.TestCase):\n\n    def test_pycode_basic(self):\n        x = symbols('x')\n        self.assertEqual(pycode(tan(x) + 1), \"math.tan(x) + 1\")\n\n    def test_pycode_piecewise(self):\n        x = symbols('x')\n        expr = Piecewise((x, Eq(x, 0)), (sin(x), True))\n        self.assertEqual(pycode(expr), \"(sin(x) if x != 0 else x)\")\n\n    def test_pycode_matrix(self):\n        A = Matrix([[1, 2], [3, 4]])\n        self.assertEqual(pycode(A), \"Matrix([[1, 2], [3, 4]])\")\n\n    def test_MpmathPrinter(self):\n        x = symbols('x')\n        printer = MpmathPrinter()\n        self.assertEqual(printer._print_Float(1.0), \"mpmath.mpf((1, 0))\")\n\n    def test_NumPyPrinter(self):\n        x = symbols('x')\n        printer = NumPyPrinter()\n        self.assertEqual(printer._print_MatMul(MatMul(eye(3), zeros(3, 4))), \"numpy.eye(3).dot(numpy.zeros((3, 4)))\")\n\n    def test_SciPyPrinter(self):\n        x = symbols('x')\n        A = SparseMatrix([[1, 2], [3, 4]])\n        printer = SciPyPrinter()\n        self.assertIn(\"scipy.sparse.coo_matrix\", printer._print_SparseMatrix(A))\n\n    def test_SymPyPrinter(self):\n        x = symbols('x')\n        f = Function('f')\n        printer = SymPyPrinter()\n        self.assertEqual(printer._print_Function(f(x)), \"sympy.Function('f')(x)\")\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_980": ["\nimport unittest\nfrom sympy import Symbol, Wild, Dummy, symbols, var, S\n\nclass TestSymbol(unittest.TestCase):\n    def setUp(self):\n        self.x = Symbol('x')\n        self.y = Symbol('y')\n\n    def test_symbol_creation(self):\n        self.assertEqual(self.x.name, 'x')\n        self.assertEqual(self.y.name, 'y')\n\n    def test_symbol_assumptions(self):\n        self.assertTrue(self.x.is_commutative)\n        self.x_non_commutative = Symbol('x', commutative=False)\n        self.assertFalse(self.x_non_commutative.is_commutative)\n\n    def test_symbol_call(self):\n        self.assertEqual(str(self.x(self.y)), 'x(y)')\n\n    def test_symbol_sort_key(self):\n        self.assertEqual(self.x.sort_key(), (12, (('symbol', 'x'),), S.One.sort_key(), S.One))\n\n    def test_symbol_as_dummy(self):\n        self.assertIsInstance(self.x.as_dummy(), Dummy)\n\n    def test_symbol_is_constant(self):\n        self.assertTrue(self.x.is_constant(self.y))\n        self.assertFalse(self.x.is_constant(self.x))\n\nclass TestWild(unittest.TestCase):\n    def setUp(self):\n        self.a = Wild('a')\n        self.b = Wild('b', exclude=[Symbol('x')])\n\n    def test_wild_matches(self):\n        self.assertEqual(self.x.match(self.a), {self.a: self.x})\n        self.assertIsNone(self.x.match(self.b))\n\nclass TestDummy(unittest.TestCase):\n    def test_dummy_creation(self):\n        self.assertNotEqual(Dummy('x'), Dummy('x'))\n\n    def test_dummy_sort_key(self):\n        self.assertLess(Dummy('x').sort_key(), Dummy('y').sort_key())\n\nclass TestSymbols(unittest.TestCase):\n    def test_symbols_creation(self):\n        self.assertEqual(symbols('x,y'), (Symbol('x'), Symbol('y')))\n        self.assertEqual(symbols('x:3'), (Symbol('x0'), Symbol('x1'), Symbol('x2')))\n\nclass TestVar(unittest.TestCase):\n    def test_var_creation(self):\n        var('z')\n        self.assertEqual(z.name, 'z')\n"], "sample_907": ["\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom sphinx.domains.cpp import DefinitionParser, CPPDomain, Symbol, ASTDeclaration, ASTNestedName, ASTNestedNameElement, ASTIdentifier\nfrom sphinx.testing.util import SphinxTestUtil\n\nclass TestCPPDomain(unittest.TestCase):\n    def setUp(self):\n        self.util = SphinxTestUtil()\n        self.util.setup_build_environment()\n        self.domain = CPPDomain(self.util.env)\n\n    def test_definition_parser(self):\n        parser = DefinitionParser('int my_function(int a, int b)', location=None, config=None)\n        ast = parser.parse_declaration('function', 'function')\n        self.assertIsInstance(ast, ASTDeclaration)\n\n    def test_cpp_domain(self):\n        self.assertEqual(self.domain.name, 'cpp')\n        self.assertEqual(self.domain.label, 'C++')\n\n    def test_symbol(self):\n        parent = Symbol(None, None, None, None, None, None, None)\n        identOrOp = ASTIdentifier('my_symbol')\n        symbol = Symbol(parent, identOrOp, None, None, None, None, None)\n        self.assertEqual(str(symbol), 'my_symbol')\n\n    @patch('sphinx.domains.cpp.Symbol.direct_lookup')\n    def test_resolve_xref(self, mock_lookup):\n        mock_lookup.return_value = Mock(declaration=ASTDeclaration(objectType='function', directiveType='function', visibility=None, templatePrefix=None, requiresClause=None, declaration=Mock(), trailingRequiresClause=None, semicolon=True))\n        node = Mock(get=Mock(return_value='my_function'))\n        contnode = Mock()\n        result = self.domain.resolve_xref(self.util.env, 'docname', None, 'func', 'my_function', node, contnode)\n        self.assertIsNotNone(result)\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_874": ["\nimport unittest\nimport numpy as np\nfrom sklearn.feature_selection._base import SelectorMixin\n\nclass DummySelector(SelectorMixin):\n    def _get_support_mask(self):\n        return np.array([True, False, True, False])\n\nclass TestSelectorMixin(unittest.TestCase):\n    def setUp(self):\n        self.selector = DummySelector()\n        self.X = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n\n    def test_get_support(self):\n        self.assertTrue(np.array_equal(self.selector.get_support(), np.array([True, False, True, False])))\n        self.assertTrue(np.array_equal(self.selector.get_support(indices=True), np.array([0, 2])))\n\n    def test_transform(self):\n        X_transformed = self.selector.transform(self.X)\n        self.assertTrue(np.array_equal(X_transformed, np.array([[1, 3], [5, 7], [9, 11]])))\n\n    def test_inverse_transform(self):\n        X_transformed = self.selector.transform(self.X)\n        X_inverse_transformed = self.selector.inverse_transform(X_transformed)\n        self.assertTrue(np.array_equal(X_inverse_transformed, np.array([[1, 0, 3, 0], [5, 0, 7, 0], [9, 0, 11, 0]])))\n\n    def test_get_feature_names_out(self):\n        self.selector.feature_names_in_ = np.array(['f1', 'f2', 'f3', 'f4'])\n        feature_names_out = self.selector.get_feature_names_out()\n        self.assertTrue(np.array_equal(feature_names_out, np.array(['f1', 'f3'])))\n\nif __name__ == '__main__':\n    unittest.main()\n"]}, "raw_scored_generations": {"sample_3": [false], "sample_2": [false], "sample_1": [false], "sample_0": [false], "sample_6": [false], "sample_4": [false], "sample_7": [false], "sample_5": [false], "sample_8": [false], "sample_9": [false], "sample_10": [false], "sample_11": [false], "sample_12": [true], "sample_13": [false], "sample_14": [false], "sample_15": [false], "sample_16": [false], "sample_17": [false], "sample_19": [false], "sample_18": [false], "sample_20": [false], "sample_21": [false], "sample_22": [false], "sample_23": [false], "sample_24": [false], "sample_25": [false], "sample_26": [true], "sample_27": [false], "sample_28": [false], "sample_30": [false], "sample_31": [false], "sample_29": [false], "sample_32": [false], "sample_35": [false], "sample_33": [false], "sample_34": [false], "sample_36": [false], "sample_37": [false], "sample_38": [false], "sample_39": [false], "sample_41": [true], "sample_42": [false], "sample_40": [false], "sample_43": [false], "sample_45": [false], "sample_44": [false], "sample_46": [false], "sample_47": [true], "sample_48": [false], "sample_49": [true], "sample_50": [false], "sample_51": [true], "sample_52": [true], "sample_53": [true], "sample_54": [true], "sample_55": [true], "sample_56": [false], "sample_57": [false], "sample_58": [true], "sample_59": [false], "sample_60": [false], "sample_61": [false], "sample_62": [true], "sample_66": [false], "sample_64": [true], "sample_63": [true], "sample_67": [true], "sample_65": [false], "sample_68": [false], "sample_70": [false], "sample_69": [false], "sample_71": [false], "sample_72": [true], "sample_73": [false], "sample_76": [false], "sample_74": [false], "sample_77": [false], "sample_75": [true], "sample_79": [true], "sample_78": [true], "sample_80": [false], "sample_83": [true], "sample_82": [true], "sample_81": [false], "sample_84": [false], "sample_85": [true], "sample_87": [true], "sample_86": [false], "sample_89": [true], "sample_88": [false], "sample_94": [true], "sample_90": [true], "sample_91": [true], "sample_95": [false], "sample_92": [true], "sample_93": [true], "sample_96": [true], "sample_97": [true], "sample_98": [false], "sample_101": [false], "sample_99": [false], "sample_100": [false], "sample_103": [false], "sample_102": [true], "sample_104": [false], "sample_105": [true], "sample_106": [true], "sample_107": [true], "sample_108": [true], "sample_109": [true], "sample_110": [false], "sample_114": [true], "sample_111": [false], "sample_112": [true], "sample_113": [true], "sample_115": [true], "sample_117": [true], "sample_116": [true], "sample_118": [false], "sample_120": [true], "sample_119": [true], "sample_121": [false], "sample_123": [true], "sample_122": [true], "sample_125": [true], "sample_124": [true], "sample_126": [false], "sample_129": [false], "sample_130": [true], "sample_127": [true], "sample_128": [true], "sample_131": [false], "sample_132": [true], "sample_134": [false], "sample_133": [true], "sample_135": [true], "sample_136": [false], "sample_137": [false], "sample_138": [true], "sample_140": [true], "sample_139": [true], "sample_141": [true], "sample_142": [true], "sample_143": [true], "sample_145": [false], "sample_144": [false], "sample_146": [true], "sample_147": [true], "sample_148": [true], "sample_149": [false], "sample_150": [false], "sample_151": [true], "sample_153": [true], "sample_154": [true], "sample_155": [false], "sample_152": [true], "sample_156": [false], "sample_157": [false], "sample_158": [false], "sample_159": [false], "sample_160": [true], "sample_161": [true], "sample_162": [true], "sample_164": [true], "sample_165": [true], "sample_163": [true], "sample_167": [true], "sample_166": [true], "sample_168": [false], "sample_169": [true], "sample_170": [false], "sample_171": [true], "sample_174": [false], "sample_172": [true], "sample_173": [true], "sample_175": [false], "sample_176": [false], "sample_177": [true], "sample_178": [true], "sample_179": [true], "sample_180": [false], "sample_182": [true], "sample_181": [true], "sample_183": [false], "sample_184": [true], "sample_185": [true], "sample_186": [false], "sample_187": [true], "sample_188": [true], "sample_190": [true], "sample_189": [true], "sample_191": [false], "sample_192": [true], "sample_193": [false], "sample_194": [false], "sample_195": [false], "sample_196": [true], "sample_197": [true], "sample_198": [false], "sample_199": [false], "sample_200": [true], "sample_201": [true], "sample_202": [false], "sample_203": [true], "sample_205": [false], "sample_204": [true], "sample_206": [true], "sample_207": [true], "sample_208": [false], "sample_209": [true], "sample_210": [true], "sample_211": [true], "sample_212": [true], "sample_213": [false], "sample_214": [true], "sample_215": [true], "sample_216": [false], "sample_217": [true], "sample_218": [false], "sample_219": [true], "sample_220": [true], "sample_221": [true], "sample_222": [true], "sample_223": [false], "sample_224": [true], "sample_225": [true], "sample_226": [true], "sample_227": [true], "sample_228": [true], "sample_230": [true], "sample_229": [true], "sample_231": [true], "sample_232": [true], "sample_233": [true], "sample_234": [false], "sample_235": [false], "sample_236": [false], "sample_237": [false], "sample_238": [false], "sample_239": [true], "sample_240": [false], "sample_242": [true], "sample_241": [false], "sample_243": [false], "sample_244": [true], "sample_245": [false], "sample_246": [true], "sample_247": [true], "sample_248": [false], "sample_249": [false], "sample_250": [true], "sample_251": [false], "sample_253": [false], "sample_252": [0], "sample_254": [true], "sample_255": [true], "sample_256": [false], "sample_257": [false], "sample_258": [true], "sample_261": [true], "sample_260": [true], "sample_262": [false], "sample_259": [false], "sample_263": [false], "sample_264": [false], "sample_266": [true], "sample_267": [false], "sample_269": [true], "sample_265": [false], "sample_268": [true], "sample_270": [false], "sample_271": [false], "sample_272": [true], "sample_273": [false], "sample_275": [false], "sample_274": [true], "sample_276": [true], "sample_278": [true], "sample_277": [true], "sample_279": [true], "sample_280": [true], "sample_281": [false], "sample_282": [true], "sample_283": [false], "sample_284": [false], "sample_285": [true], "sample_286": [true], "sample_287": [false], "sample_288": [true], "sample_289": [true], "sample_290": [false], "sample_291": [true], "sample_292": [false], "sample_293": [true], "sample_294": [false], "sample_295": [true], "sample_296": [true], "sample_298": [true], "sample_297": [false], "sample_299": [false], "sample_301": [true], "sample_300": [false], "sample_302": [true], "sample_303": [false], "sample_304": [true], "sample_305": [false], "sample_306": [false], "sample_307": [true], "sample_308": [true], "sample_309": [true], "sample_310": [true], "sample_311": [true], "sample_312": [false], "sample_313": [false], "sample_314": [true], "sample_315": [false], "sample_316": [false], "sample_317": [true], "sample_318": [false], "sample_319": [false], "sample_320": [true], "sample_321": [false], "sample_322": [false], "sample_323": [false], "sample_324": [false], "sample_325": [true], "sample_326": [true], "sample_327": [true], "sample_328": [false], "sample_329": [true], "sample_330": [true], "sample_331": [false], "sample_332": [false], "sample_333": [true], "sample_334": [true], "sample_336": [true], "sample_335": [true], "sample_337": [false], "sample_338": [true], "sample_339": [true], "sample_341": [true], "sample_340": [false], "sample_342": [false], "sample_344": [true], "sample_343": [true], "sample_345": [false], "sample_346": [true], "sample_347": [false], "sample_348": [false], "sample_349": [true], "sample_350": [true], "sample_351": [false], "sample_352": [true], "sample_353": [false], "sample_354": [false], "sample_355": [false], "sample_356": [true], "sample_357": [false], "sample_358": [true], "sample_359": [false], "sample_360": [false], "sample_361": [true], "sample_362": [false], "sample_363": [true], "sample_364": [true], "sample_366": [true], "sample_365": [false], "sample_367": [true], "sample_369": [false], "sample_368": [true], "sample_370": [true], "sample_371": [true], "sample_372": [true], "sample_373": [true], "sample_374": [true], "sample_375": [true], "sample_376": [false], "sample_377": [false], "sample_378": [true], "sample_379": [true], "sample_380": [true], "sample_381": [false], "sample_382": [false], "sample_383": [false], "sample_384": [false], "sample_385": [false], "sample_386": [true], "sample_387": [false], "sample_388": [true], "sample_389": [true], "sample_390": [false], "sample_391": [true], "sample_392": [true], "sample_393": [false], "sample_394": [true], "sample_395": [false], "sample_396": [true], "sample_397": [false], "sample_398": [false], "sample_399": [true], "sample_400": [true], "sample_401": [true], "sample_402": [false], "sample_403": [true], "sample_404": [true], "sample_405": [true], "sample_406": [true], "sample_407": [true], "sample_408": [true], "sample_409": [false], "sample_410": [true], "sample_411": [true], "sample_412": [true], "sample_413": [false], "sample_414": [false], "sample_415": [true], "sample_416": [true], "sample_417": [false], "sample_418": [true], "sample_419": [true], "sample_420": [true], "sample_421": [true], "sample_422": [false], "sample_423": [true], "sample_424": [true], "sample_425": [false], "sample_426": [false], "sample_427": [true], "sample_428": [false], "sample_429": [true], "sample_430": [false], "sample_431": [true], "sample_432": [false], "sample_433": [true], "sample_434": [true], "sample_435": [false], "sample_436": [true], "sample_437": [false], "sample_438": [true], "sample_439": [true], "sample_440": [false], "sample_441": [true], "sample_442": [true], "sample_443": [true], "sample_444": [false], "sample_445": [false], "sample_446": [true], "sample_447": [false], "sample_448": [false], "sample_449": [false], "sample_450": [true], "sample_451": [true], "sample_452": [true], "sample_453": [true], "sample_454": [false], "sample_455": [true], "sample_456": [true], "sample_457": [true], "sample_458": [true], "sample_459": [true], "sample_460": [false], "sample_461": [false], "sample_462": [true], "sample_463": [false], "sample_464": [true], "sample_465": [false], "sample_466": [true], "sample_467": [true], "sample_468": [true], "sample_469": [true], "sample_470": [false], "sample_471": [true], "sample_472": [true], "sample_473": [true], "sample_474": [false], "sample_475": [true], "sample_476": [true], "sample_477": [true], "sample_478": [true], "sample_479": [true], "sample_480": [true], "sample_481": [true], "sample_482": [true], "sample_483": [false], "sample_484": [false], "sample_485": [true], "sample_486": [false], "sample_487": [false], "sample_488": [true], "sample_489": [true], "sample_490": [true], "sample_491": [false], "sample_492": [false], "sample_493": [true], "sample_495": [true], "sample_494": [true], "sample_496": [true], "sample_497": [false], "sample_498": [false], "sample_499": [false], "sample_500": [false], "sample_501": [false], "sample_502": [false], "sample_503": [false], "sample_504": [false], "sample_505": [false], "sample_506": [false], "sample_507": [false], "sample_508": [false], "sample_509": [false], "sample_510": [false], "sample_511": [false], "sample_512": [false], "sample_513": [false], "sample_514": [false], "sample_515": [false], "sample_516": [false], "sample_517": [false], "sample_518": [false], "sample_519": [false], "sample_520": [false], "sample_522": [false], "sample_521": [false], "sample_523": [false], "sample_524": [false], "sample_525": [false], "sample_526": [false], "sample_527": [false], "sample_529": [false], "sample_528": [false], "sample_530": [false], "sample_531": [false], "sample_532": [false], "sample_533": [false], "sample_534": [false], "sample_535": [false], "sample_536": [false], "sample_537": [false], "sample_538": [false], "sample_539": [true], "sample_540": [false], "sample_541": [false], "sample_542": [false], "sample_543": [false], "sample_544": [false], "sample_545": [false], "sample_546": [false], "sample_547": [false], "sample_548": [false], "sample_549": [false], "sample_550": [false], "sample_551": [false], "sample_552": [false], "sample_553": [false], "sample_554": [false], "sample_555": [false], "sample_556": [false], "sample_557": [false], "sample_558": [false], "sample_559": [false], "sample_560": [false], "sample_561": [false], "sample_562": [false], "sample_563": [false], "sample_564": [false], "sample_565": [false], "sample_566": [false], "sample_567": [false], "sample_568": [false], "sample_569": [false], "sample_570": [false], "sample_571": [false], "sample_572": [false], "sample_573": [false], "sample_574": [false], "sample_576": [false], "sample_575": [false], "sample_577": [false], "sample_578": [false], "sample_579": [false], "sample_580": [false], "sample_581": [false], "sample_582": [false], "sample_583": [false], "sample_584": [false], "sample_585": [false], "sample_586": [false], "sample_587": [false], "sample_588": [false], "sample_589": [false], "sample_590": [false], "sample_591": [false], "sample_592": [false], "sample_594": [false], "sample_593": [false], "sample_595": [false], "sample_597": [false], "sample_596": [false], "sample_598": [false], "sample_599": [false], "sample_600": [false], "sample_601": [false], "sample_602": [false], "sample_603": [false], "sample_604": [false], "sample_605": [false], "sample_606": [false], "sample_607": [false], "sample_608": [false], "sample_609": [false], "sample_610": [false], "sample_611": [false], "sample_612": [false], "sample_613": [false], "sample_614": [false], "sample_615": [false], "sample_616": [false], "sample_617": [false], "sample_618": [false], "sample_619": [false], "sample_620": [false], "sample_621": [false], "sample_623": [false], "sample_624": [false], "sample_622": [false], "sample_625": [false], "sample_626": [false], "sample_627": [true], "sample_628": [false], "sample_629": [false], "sample_630": [false], "sample_631": [false], "sample_632": [false], "sample_633": [false], "sample_640": [false], "sample_636": [false], "sample_637": [false], "sample_634": [false], "sample_635": [false], "sample_639": [false], "sample_638": [false], "sample_641": [false], "sample_642": [false], "sample_643": [false], "sample_645": [false], "sample_644": [true], "sample_646": [false], "sample_649": [true], "sample_648": [false], "sample_647": [true], "sample_657": [true], "sample_654": [true], "sample_652": [true], "sample_656": [true], "sample_650": [true], "sample_655": [true], "sample_651": [true], "sample_667": [false], "sample_653": [true], "sample_661": [true], "sample_659": [false], "sample_658": [false], "sample_670": [true], "sample_664": [false], "sample_662": [false], "sample_665": [true], "sample_672": [true], "sample_663": [true], "sample_668": [true], "sample_660": [true], "sample_669": [true], "sample_666": [false], "sample_671": [false], "sample_673": [true], "sample_674": [true], "sample_675": [true], "sample_677": [false], "sample_680": [true], "sample_679": [false], "sample_676": [true], "sample_684": [false], "sample_682": [true], "sample_685": [false], "sample_678": [false], "sample_683": [true], "sample_681": [false], "sample_686": [true], "sample_688": [true], "sample_687": [false], "sample_689": [true], "sample_693": [false], "sample_700": [false], "sample_696": [true], "sample_703": [true], "sample_690": [false], "sample_698": [false], "sample_699": [true], "sample_692": [true], "sample_697": [false], "sample_702": [true], "sample_695": [false], "sample_704": [true], "sample_691": [false], "sample_701": [true], "sample_694": [true], "sample_705": [false], "sample_707": [true], "sample_706": [true], "sample_708": [false], "sample_710": [true], "sample_711": [false], "sample_709": [false], "sample_713": [false], "sample_715": [false], "sample_718": [false], "sample_712": [false], "sample_714": [false], "sample_717": [false], "sample_716": [false], "sample_719": [false], "sample_720": [false], "sample_727": [false], "sample_722": [false], "sample_726": [false], "sample_725": [false], "sample_721": [false], "sample_723": [false], "sample_729": [false], "sample_730": [false], "sample_732": [false], "sample_733": [false], "sample_724": [false], "sample_731": [false], "sample_728": [false], "sample_734": [false], "sample_736": [false], "sample_735": [false], "sample_745": [false], "sample_738": [false], "sample_743": [false], "sample_737": [false], "sample_739": [false], "sample_740": [false], "sample_744": [false], "sample_742": [false], "sample_746": [false], "sample_741": [false], "sample_747": [false], "sample_748": [false], "sample_749": [false], "sample_760": [false], "sample_755": [false], "sample_750": [false], "sample_756": [false], "sample_759": [false], "sample_752": [false], "sample_751": [false], "sample_753": [false], "sample_762": [false], "sample_761": [false], "sample_757": [false], "sample_754": [false], "sample_758": [false], "sample_763": [false], "sample_764": [true], "sample_765": [false], "sample_766": [false], "sample_774": [false], "sample_770": [false], "sample_772": [false], "sample_767": [false], "sample_769": [false], "sample_773": [false], "sample_771": [false], "sample_768": [false], "sample_775": [false], "sample_776": [false], "sample_777": [true], "sample_778": [false], "sample_779": [false], "sample_780": [false], "sample_783": [false], "sample_787": [false], "sample_786": [false], "sample_789": [false], "sample_781": [false], "sample_782": [false], "sample_784": [false], "sample_785": [false], "sample_788": [false], "sample_790": [false], "sample_791": [false], "sample_794": [false], "sample_798": [false], "sample_796": [false], "sample_792": [false], "sample_801": [false], "sample_795": [false], "sample_797": [false], "sample_800": [false], "sample_802": [false], "sample_793": [false], "sample_799": [false], "sample_803": [false], "sample_804": [false], "sample_814": [false], "sample_810": [false], "sample_807": [false], "sample_812": [false], "sample_815": [false], "sample_808": [false], "sample_813": [false], "sample_809": [false], "sample_805": [false], "sample_811": [false], "sample_816": [false], "sample_806": [false], "sample_817": [false], "sample_826": [false], "sample_822": [false], "sample_829": [false], "sample_819": [false], "sample_820": [false], "sample_827": [false], "sample_824": [false], "sample_825": [false], "sample_821": [false], "sample_828": [false], "sample_818": [false], "sample_823": [false], "sample_830": [false], "sample_831": [false], "sample_835": [false], "sample_840": [false], "sample_832": [false], "sample_836": [false], "sample_833": [false], "sample_843": [false], "sample_834": [false], "sample_839": [false], "sample_841": [false], "sample_838": [false], "sample_837": [false], "sample_844": [false], "sample_842": [true], "sample_849": [false], "sample_845": [true], "sample_854": [false], "sample_846": [false], "sample_852": [false], "sample_847": [false], "sample_855": [false], "sample_848": [false], "sample_851": [false], "sample_853": [false], "sample_856": [false], "sample_850": [false], "sample_857": [false], "sample_858": [false], "sample_860": [false], "sample_862": [false], "sample_865": [false], "sample_864": [false], "sample_861": [false], "sample_867": [false], "sample_859": [false], "sample_869": [false], "sample_866": [false], "sample_863": [false], "sample_868": [false], "sample_870": [false], "sample_872": [false], "sample_871": [false], "sample_874": [false], "sample_873": [false], "sample_875": [false], "sample_882": [false], "sample_880": [false], "sample_881": [false], "sample_884": [false], "sample_883": [false], "sample_877": [false], "sample_879": [false], "sample_876": [false], "sample_886": [false], "sample_878": [false], "sample_885": [false], "sample_888": [false], "sample_887": [true], "sample_894": [false], "sample_889": [false], "sample_897": [true], "sample_890": [true], "sample_901": [false], "sample_892": [false], "sample_898": [false], "sample_891": [false], "sample_899": [false], "sample_902": [false], "sample_896": [false], "sample_903": [false], "sample_895": [false], "sample_900": [false], "sample_893": [false], "sample_914": [false], "sample_906": [false], "sample_907": [false], "sample_916": [false], "sample_909": [false], "sample_908": [false], "sample_915": [false], "sample_904": [false], "sample_911": [false], "sample_913": [false], "sample_912": [false], "sample_905": [false], "sample_910": [false], "sample_918": [false], "sample_922": [false], "sample_920": [false], "sample_923": [false], "sample_921": [false], "sample_932": [false], "sample_925": [false], "sample_917": [false], "sample_931": [false], "sample_924": [false], "sample_919": [false], "sample_926": [false], "sample_928": [false], "sample_933": [false], "sample_935": [false], "sample_927": [false], "sample_936": [false], "sample_943": [false], "sample_937": [false], "sample_929": [false], "sample_934": [false], "sample_938": [false], "sample_941": [false], "sample_930": [false], "sample_940": [false], "sample_942": [false], "sample_946": [false], "sample_944": [false], "sample_949": [false], "sample_945": [false], "sample_951": [false], "sample_954": [false], "sample_952": [false], "sample_953": [false], "sample_939": [false], "sample_958": [false], "sample_948": [false], "sample_950": [false], "sample_947": [false], "sample_956": [false], "sample_955": [false], "sample_960": [false], "sample_957": [false], "sample_967": [false], "sample_966": [false], "sample_959": [false], "sample_969": [false], "sample_970": [false], "sample_961": [false], "sample_965": [false], "sample_968": [false], "sample_964": [false], "sample_963": [false], "sample_962": [false], "sample_971": [false], "sample_972": [false], "sample_973": [false], "sample_984": [false], "sample_989": [false], "sample_975": [false], "sample_981": [false], "sample_978": [false], "sample_976": [false], "sample_983": [false], "sample_974": [false], "sample_986": [false], "sample_977": [false], "sample_980": [false], "sample_987": [false], "sample_979": [false], "sample_991": [false], "sample_988": [false], "sample_982": [false], "sample_985": [false], "sample_990": [false], "sample_993": [false], "sample_992": [false], "sample_997": [false], "sample_995": [false], "sample_1000": [false], "sample_994": [false], "sample_996": [false], "sample_998": [false], "sample_1001": [false], "sample_999": [false], "sample_1002": [false], "sample_1003": [false], "sample_1007": [false], "sample_1011": [false], "sample_1009": [false], "sample_1010": [false], "sample_1005": [false], "sample_1006": [false], "sample_1004": [false], "sample_1008": [false], "sample_1012": [false], "sample_1019": [false], "sample_1013": [false], "sample_1014": [false], "sample_1018": [false], "sample_1016": [false], "sample_1017": [false], "sample_1021": [false], "sample_1022": [false], "sample_1015": [false], "sample_1020": [false], "sample_1025": [false], "sample_1024": [false], "sample_1028": [false], "sample_1027": [false], "sample_1026": [false], "sample_1023": [false], "sample_1029": [false], "sample_1030": [false], "sample_1031": [false], "sample_1032": [false], "sample_1036": [false], "sample_1035": [false], "sample_1034": [false], "sample_1033": [false], "sample_1038": [false], "sample_1037": [false], "sample_1039": [false], "sample_1040": [false], "sample_1047": [false], "sample_1046": [false], "sample_1043": [false], "sample_1041": [false], "sample_1042": [false], "sample_1045": [false], "sample_1044": [false], "sample_1054": [false], "sample_1048": [false], "sample_1053": [false], "sample_1052": [false], "sample_1051": [false], "sample_1050": [false], "sample_1049": [false], "sample_1055": [false], "sample_1057": [false], "sample_1058": [false], "sample_1056": [false], "sample_1060": [false], "sample_1059": [false], "sample_1061": [false], "sample_1062": [false], "sample_1063": [false], "sample_1064": [false], "sample_1066": [false], "sample_1067": [false], "sample_1065": [false], "sample_1068": [false], "sample_1069": [false], "sample_1072": [false], "sample_1070": [false], "sample_1071": [false], "sample_1073": [false], "sample_1079": [false], "sample_1075": [false], "sample_1076": [false], "sample_1078": [false], "sample_1074": [false], "sample_1077": [true], "sample_1080": [false], "sample_1081": [false], "sample_1082": [false], "sample_1083": [false], "sample_1084": [false], "sample_1085": [false], "sample_1087": [false], "sample_1086": [false], "sample_1089": [false], "sample_1088": [false], "sample_1091": [false], "sample_1090": [false], "sample_1092": [false], "sample_1093": [false], "sample_1094": [false], "sample_1095": [false], "sample_1096": [false], "sample_1099": [false], "sample_1097": [false], "sample_1098": [false], "sample_1100": [false], "sample_1101": [false], "sample_1102": [false], "sample_1104": [false], "sample_1105": [false], "sample_1103": [false], "sample_1106": [false], "sample_1107": [false], "sample_1109": [false], "sample_1110": [false], "sample_1108": [false], "sample_1111": [false], "sample_1112": [false], "sample_1113": [false], "sample_1114": [false], "sample_1115": [false], "sample_1116": [false], "sample_1117": [false], "sample_1118": [false], "sample_1119": [false], "sample_1120": [false], "sample_1121": [false], "sample_1122": [false], "sample_1123": [false], "sample_1124": [false], "sample_1125": [false], "sample_1126": [false], "sample_1127": [false], "sample_1128": [false], "sample_1129": [false], "sample_1130": [false], "sample_1131": [false], "sample_1132": [false], "sample_1133": [false], "sample_1134": [false], "sample_1135": [false], "sample_1136": [false], "sample_1137": [false], "sample_1138": [false], "sample_1139": [false], "sample_1140": [false], "sample_1141": [false], "sample_1142": [false], "sample_1144": [false], "sample_1143": [false], "sample_1145": [false], "sample_1146": [false], "sample_1147": [false], "sample_1148": [false], "sample_1149": [false], "sample_1150": [false], "sample_1151": [false], "sample_1152": [false], "sample_1153": [false], "sample_1154": [false], "sample_1155": [false], "sample_1156": [false], "sample_1157": [false], "sample_1158": [false], "sample_1159": [false], "sample_1160": [false], "sample_1161": [false], "sample_1162": [false], "sample_1163": [false], "sample_1164": [false], "sample_1165": [false], "sample_1166": [false], "sample_1167": [false], "sample_1168": [false], "sample_1169": [false], "sample_1170": [false], "sample_1171": [false], "sample_1172": [false], "sample_1173": [false], "sample_1174": [false], "sample_1175": [false], "sample_1176": [false], "sample_1177": [false], "sample_1178": [false], "sample_1179": [false], "sample_1180": [false], "sample_1181": [false], "sample_1182": [false], "sample_1183": [false], "sample_1184": [false], "sample_1185": [false], "sample_1186": [false], "sample_1187": [false], "sample_1188": [false], "sample_1189": [false], "sample_1190": [false], "sample_1191": [false], "sample_1192": [false], "sample_1193": [false], "sample_1194": [false], "sample_1195": [false], "sample_1196": [false], "sample_1197": [false], "sample_1198": [false], "sample_1199": [false], "sample_1200": [false], "sample_1201": [false], "sample_1202": [false], "sample_1203": [false], "sample_1204": [false], "sample_1205": [false], "sample_1206": [false], "sample_1207": [false], "sample_1208": [false], "sample_1209": [false]}}