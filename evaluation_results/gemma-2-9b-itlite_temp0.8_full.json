{"raw_generations": {"sample_99": ["\nimport numpy as np\nfrom sklearn.linear_model.ridge import _BaseRidgeCV\nfrom sklearn.linear_model.ridge import Ridge\nfrom sklearn.linear_model.ridge import RidgeCV\nfrom sklearn.linear_model.ridge import RidgeClassifier\nfrom sklearn.linear_model.ridge import RidgeClassifierCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.datasets import make_classification\nfrom sklearn.datasets import make_regression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.utils.estimator_checks import check_estimator\nfrom sklearn.utils.validation import check_array\nfrom sklearn.utils.testing import assert_allclose\nfrom sklearn.utils.testing import assert_raises\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\n\ndef test_ridge():\n    X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n\n    # Test Ridge with default parameters\n    ridge = Ridge(alpha=1.0)\n    ridge.fit(X, y)\n    assert_allclose(ridge.coef_, ridge.coef_)\n\n    # Test Ridge with different alpha values\n    ridge = Ridge(alpha=0.1)\n    ridge.fit(X, y)\n    assert_allclose(ridge.coef_, ridge.coef_)\n\n    # Test Ridge with fit_intercept=False\n    ridge = Ridge(fit_intercept=False, alpha=1.0)\n    ridge.fit(X, y)\n    assert_allclose(ridge.intercept_, 0.0)\n\n    # Test Ridge with normalize=True\n    ridge = Ridge(normalize=True, alpha=1.0)\n    ridge.fit(X, y)\n    assert_allclose(ridge.coef_, ridge.coef_)\n\n    # Test Ridge with sparse data\n    X_sparse = scipy.sparse.csr_matrix(X)\n    ridge = Ridge(alpha=1.0)\n    ridge.fit(X_sparse, y)\n    assert_allclose(ridge.coef_, ridge.coef_)\n\ndef test_ridge_cv():\n    X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n    ridge = RidgeCV(alphas=[0.1, 1.0, 10.0])\n    ridge.fit(X, y)\n    assert_allclose(ridge.coef_, ridge.coef_)\n\n\ndef test_ridge_classifier():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    ridge = RidgeClassifier()\n    ridge.fit(X, y)\n    assert_allclose(ridge.coef_, ridge.coef_)\n\ndef test_ridge_classifier_cv():\n    X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n    ridge = RidgeClassifierCV(alphas=[0.1, 1.0, 10.0])\n    ridge.fit(X, y)\n    assert_allclose(ridge.coef_, ridge.coef_)\n\n\ndef test_ridge_scaling():\n    # test if Ridge handles scaling by making sure that the intercept is\n    # zero after fitting with normalize=True\n\n    X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n    scaler = StandardScaler()\n    X_scaled = scaler.fit_transform(X)\n    ridge = Ridge(normalize=True, alpha=1.0)\n    ridge.fit(X_scaled, y)\n    assert_allclose(ridge.intercept_, 0.0)\n\n\n\ndef test_ridge_errors():\n    X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n    ridge = Ridge(alpha=1.0)\n    ridge.fit(X, y)\n\n    with assert_raises(AttributeError):\n        ridge.coef_\n\n"], "sample_67": ["\nfrom django.conf import settings\nfrom django.test import TestCase\nfrom django.core.cache.backends.filebased import FileBasedCache, DEFAULT_TIMEOUT\nfrom django.utils.crypto import md5\nimport os\nimport tempfile\nimport time\nimport zlib\nimport pickle\nimport shutil\n\nclass FileBasedCacheTests(TestCase):\n    def setUp(self):\n        self.cache_dir = tempfile.mkdtemp()\n        settings.CACHES = {\n            'default': {\n                'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',\n                'LOCATION': self.cache_dir,\n                'TIMEOUT': DEFAULT_TIMEOUT,\n                'CULL_FREQUENCY': 1,\n            }\n        }\n\n    def tearDown(self):\n        shutil.rmtree(self.cache_dir)\n\n    def test_add(self):\n        cache = FileBasedCache(**settings.CACHES['default'])\n        self.assertTrue(cache.add('key', 'value'))\n        self.assertEqual(cache.get('key'), 'value')\n\n    def test_add_with_version(self):\n        cache = FileBasedCache(**settings.CACHES['default'])\n        self.assertTrue(cache.add('key', 'value', version=1))\n        self.assertEqual(cache.get('key', version=1), 'value')\n        self.assertFalse(cache.add('key', 'value', version=1))\n\n    def test_get_missing(self):\n        cache = FileBasedCache(**settings.CACHES['default'])\n        self.assertEqual(cache.get('key'), None)\n\n    def test_set(self):\n        cache = FileBasedCache(**settings.CACHES['default'])\n        cache.set('key', 'value')\n        self.assertEqual(cache.get('key'), 'value')\n\n    def test_touch(self):\n        cache = FileBasedCache(**settings.CACHES['default'])\n        cache.set('key', 'value')\n        self.assertTrue(cache.touch('key'))\n        self.assertEqual(cache.get('key'), 'value')\n\n    def test_delete(self):\n        cache = FileBasedCache(**settings.CACHES['default'])\n        cache.set('key', 'value')\n        self.assertTrue(cache.delete('key'))\n        self.assertEqual(cache.get('key'), None)\n\n    def test_has_key(self):\n        cache = FileBasedCache(**settings.CACHES['default'])\n        cache.set('key', 'value')\n        self.assertTrue(cache.has_key('key'))\n        self.assertFalse(cache.has_key('non_existent_key'))\n\n    def test_clear(self):\n        cache = FileBasedCache(**settings.CACHES['default'])\n        cache.set('key1', 'value1')\n        cache.set('key2', 'value2')\n        cache.clear()\n        self.assertEqual(cache.get('key1'), None)\n        self.assertEqual(cache.get('key2'), None)\n\n    def test_cull(self):\n        cache = FileBasedCache(**settings.CACHES['default'])\n        for i in range(10):\n            cache.set(f'key{i}', f'value{i}')\n        # Verify that the cache has been culled\n        self.assertEqual(len(os.listdir(self.cache_dir)), 1)  \n\n\n"], "sample_23": ["\nfrom django.db.backends.base.creation import (\n    TEST_DATABASE_PREFIX,\n    BaseDatabaseCreation,\n)\nfrom unittest import mock\n\n\nclass TestBaseDatabaseCreation(mock.TestCase):\n\n    def test_get_test_db_name(self):\n        with mock.patch('django.db.backends.base.creation.settings') as mock_settings:\n            mock_settings.DATABASES = {\n                'default': {\n                    'NAME': 'my_database',\n                    'TEST': {'NAME': 'my_test_database'},\n                }\n            }\n            instance = BaseDatabaseCreation(mock.MagicMock())\n            self.assertEqual(instance._get_test_db_name(), 'my_test_database')\n            mock_settings.DATABASES['default']['TEST']['NAME'] = None\n            self.assertEqual(instance._get_test_db_name(), 'test_my_database')\n\n    def test_create_test_db(self):\n        instance = BaseDatabaseCreation(mock.MagicMock())\n        with mock.patch('django.core.management.call_command') as mock_command:\n            instance.create_test_db(verbosity=1, autoclobber=False)\n            mock_command.assert_called_once_with(\n                'migrate',\n                verbosity=0,\n                interactive=False,\n                database='default',\n                run_syncdb=True,\n            )\n\n    def test_destroy_test_db(self):\n        instance = BaseDatabaseCreation(mock.MagicMock())\n        with mock.patch('django.db.backends.base.creation.sys') as mock_sys:\n            instance.destroy_test_db(verbosity=1, keepdb=False)\n            mock_sys.exit.assert_not_called()\n\n    def test_clone_test_db(self):\n        instance = BaseDatabaseCreation(mock.MagicMock())\n        with mock.patch('django.db.backends.base.creation.sys') as mock_sys:\n            instance.clone_test_db(suffix='test_suffix', verbosity=1)\n            mock_sys.exit.assert_not_called()\n\n    def test_get_test_db_clone_settings(self):\n        instance = BaseDatabaseCreation(mock.MagicMock())\n        settings_dict = instance.get_test_db_clone_settings('test_suffix')\n        self.assertEqual(settings_dict['NAME'], 'my_database_test_suffix')\n\n\n"], "sample_119": ["\nfrom itertools import permutations\nfrom sympy.combinatorics.permutations import (Permutation, _af_parity, _af_rmul, _af_rmuln, Cycle)\nimport random\nfrom sympy.testing.pytest import raises\nfrom sympy.utilities import isprime\n\ndef test_Permutation_init():\n    from sympy.combinatorics import Permutation\n    perm = Permutation([0, 1, 2, 3, 4])\n    assert perm.size == 5\n    assert perm.array_form == [0, 1, 2, 3, 4]\n    assert perm.cyclic_form == [Cycle([0, 1, 2, 3, 4])]\n    assert perm.rank() == 0\n    perm = Permutation(3)\n    assert perm.size == 3\n    assert perm.array_form == [0, 1, 2]\n    assert perm.cyclic_form == [Cycle([0, 1, 2])]\n    raise_\n    Permutation(4, 3) \n\ndef test_Permutation_next_lex():\n    from sympy.combinatorics import Permutation\n    perm = Permutation([0, 1, 2])\n    for i in range(6):\n        perm = perm.next_lex()\n        assert perm.rank() == i + 1\n\ndef test_Permutation_unrank_lex():\n    from sympy.combinatorics import Permutation\n    for i in range(6):\n        perm = Permutation.unrank_lex(3, i)\n        assert perm.rank() == i\n\ndef test_Permutation_inversion_vector():\n    from sympy.combinatorics import Permutation\n    # Test case 1\n    perm = Permutation([3, 2, 1, 0])\n    inv_vector = perm.inversion_vector()\n    assert inv_vector == [3, 2, 1]\n\n    # Test case 2\n    perm = Permutation([0, 1, 2, 3])\n    inv_vector = perm.inversion_vector()\n    assert inv_vector == [0, 0, 0]\n\ndef test_Permutation_rank():\n    perm = Permutation([1, 2, 0, 3])\n    assert perm.rank() == 3\n\ndef test_Permutation_order():\n    perm = Permutation([1, 2, 0, 3])\n    assert perm.order() == 4\n\ndef test_Permutation_min():\n    perm = Permutation([3, 2, 1, 0])\n    assert perm.min() == 0\n\ndef test_Permutation_max():\n    perm = Permutation([3, 2, 1, 0])\n    assert perm.max() == 3\n\ndef test_Permutation_signature():\n    perm = Permutation([1, 2, 0, 3])\n    assert perm.signature() == -1\n\n    perm = Permutation([0, 1, 2, 3])\n    assert perm.signature() == 1\n\ndef test_Permutation_cycles():\n    perm = Permutation([1, 2, 0, 3])\n    assert perm.cycles() == 3\n    perm = Permutation([1, 2, 3, 0])\n    assert perm.cycles() == 3\n\ndef test_Permutation_inversions():\n    perm = Permutation([1, 2, 0, 3])\n    assert perm.inversions() == 3\n\ndef test_Permutation_length():\n    perm = Permutation([1, 2, 0, 3])\n    assert perm.length() == 3\n\n\ndef test_Permutation_runs():\n    perm = Permutation([2, 5, 7, 3, 6, 0, 1, 4, 8])\n    assert perm.runs() == [[2, 5, 7], [3, 6], [0, 1, 4, 8]]\n\ndef test_Permutation_commutator():\n    from sympy.combinatorics.permutations import Permutation\n    p = Permutation([3, 1, 5, 2, 4, 0])\n    x = Permutation([2, 0, 4, 3, 1, 5])\n    c = p.commutator(x)\n    assert c == Permutation([2, 1, 5, 3, 4, 0])\n\ndef test_Permutation_trotterjohnson():\n    perm = Permutation(3)\n    assert perm.rank_trotterjohnson() == 0\n\n    perm = Permutation.unrank_trotterjohnson(3, 1)\n    assert perm.rank_trotterjohnson() == 1\n    assert perm.next_trotterjohnson() is None\n\ndef test_Permutation_precedence_matrix():\n    perm1 = Permutation([2, 0, 4, 3, 1])\n    perm2 = Permutation([3, 1, 2, 4, 0])\n    matrix1 = perm1.get_precedence_matrix()\n    matrix2 = perm2.get_precedence_matrix()\n    assert matrix1.tolist() == [[0, 0, 0, 0, 0, 0],\n                                 [1, 0, 0, 0, 1, 0],\n                                 [1, 1, 0, 1, 1, 1],\n                                 [1, 1, 0, 0, 1, 0],\n                                 [1, 0, 0, 0, 0, 0],\n                                 [1, 1, 0, 1, 1, 0]]\n    assert matrix2.tolist() == [[0, 0, 0, 0, 0, 0],\n                                 [0, 0, 0, 0, 1, 0],\n                                 [0, 0, 0, 0, 0, 1],\n                                 [0, 1, 0, 0, 0, 0],\n                                 [1, 0, 0, 0, 0, 0],\n                                 [0, 0, 1, 0, 0, 0]]\n\n    \n\n\n\n"], "sample_66": ["\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    serializer_factory,\n    Serializer,\n)\nfrom django.db import models\nfrom django.utils import timezone\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom typing import Any, Tuple, Dict\n\nclass SerializerTestCase(unittest.TestCase):\n    def test_serializer_factory_basic_types(self):\n        serializer_factory(1)\n        serializer_factory(b\"hello\")\n        serializer_factory(True)\n        serializer_factory(None)\n        serializer_factory(\"hello\")\n        serializer_factory([1, 2, 3])\n\n    def test_serializer_factory_datetime(self):\n        dt = timezone.now()\n        self.assertEqual(serializer_factory(dt).serialize()[0], repr(dt))\n        self.assertIn(\"import datetime\", serializer_factory(dt).serialize()[1])\n        dt_utc = dt.astimezone(timezone.utc)\n        self.assertEqual(serializer_factory(dt_utc).serialize()[0], repr(dt_utc))\n        self.assertIn(\"import datetime\", serializer_factory(dt_utc).serialize()[1])\n\n    def test_serializer_factory_collections(self):\n        self.assertEqual(\n            serializer_factory({}).serialize()[0], \"{}\",\n        )\n        self.assertEqual(\n            serializer_factory(set()).serialize()[0], \"set()\",\n        )\n        self.assertEqual(serializer_factory([]).serialize()[0], \"()\")\n        self.assertEqual(serializer_factory((1, 2)).serialize()[0], \"(1, 2)\")\n\n    def test_serializer_factory_models_field(self):\n        field = models.CharField(max_length=100)\n        self.assertEqual(serializer_factory(field).serialize()[0], \"models.CharField\")\n\n    def test_serializer_factory_models_manager(self):\n        manager = MagicMock()\n        def deconstruct(self):\n            return (True, \"manager\", None, (), {})\n        manager.deconstruct = deconstruct\n        self.assertEqual(serializer_factory(manager).serialize()[0], \"manager.as_manager()\")\n\n    def test_serializer_factory_operation(self):\n        operation = MagicMock()\n        operation.serialize = MagicMock(return_value=(\"\", set()))\n        self.assertEqual(serializer_factory(operation).serialize()[0], \"\")\n\n    def test_serializer_factory_type(self):\n        self.assertEqual(serializer_factory(int).serialize()[0], \"int\")\n        self.assertEqual(serializer_factory(list).serialize()[0], \"list\")\n        self.assertEqual(serializer_factory(str).serialize()[0], \"str\")\n        self.assertEqual(serializer_factory(type(None)).serialize()[0], \"types.NoneType\")\n        self.assertEqual(serializer_factory(models.Model).serialize()[0], \"models.Model\")\n        self.assertEqual(serializer_factory(uuid.UUID).serialize()[0], \"uuid.UUID\")\n\n    def test_serializer_factory_unknown_type(self):\n        with self.assertRaises(ValueError):\n            serializer_factory(object())\n\n    def test_serializer_factory_promise(self):\n        promise = Mock(\n            __reduce__=lambda self: (\n                str,\n                (self.value,),\n                None,\n            )\n        )\n        self.assertEqual(serializer_factory(promise).serialize()[0], \"Mock object\")\n\n    def test_serializer_factory_lazy_object(self):\n        lazy_obj = MagicMock(\n            __reduce__=lambda self: (\n                str,\n                (\"Mock object\",),\n                None,\n            )\n        )\n        self.assertEqual(serializer_factory(lazy_obj).serialize()[0], \"Mock object\")\n\n\n\n"], "sample_146": ["\nfrom sympy.core.function import (nfloat, count_ops, _coeff_isneg,\n    Derivative, expand, expand_log, expand_multinomial, expand_power_base,\n    expand_power_exp, expand_trig, expand_complex, expand_func,\n    expand_mul)\nfrom sympy import (S, pi, sin, cos, exp, sqrt, log, symbols, Dummy,\n    Rational, Integer, Tuple, Matrix, MatMul, simplify,\n    limit, oo, I, re, im)\nfrom sympy.abc import x, y, z\nfrom sympy.core.tests.utils import close\nfrom sympy.printing import pretty_print\nfrom sympy.utilities.pytest import XFAIL\n\ndef test_nfloat():\n    assert nfloat(x**4 + x/2 + cos(pi/3) + 1 + sqrt(y)) == x**4 + 0.5*x + sqrt(y) + 1.5\n    assert nfloat(x**4 + sqrt(y), exponent=True) == x**4.0 + y**0.5\n    assert nfloat((1, 2)) is (1, 2)\n\ndef test_nfloat_containers():\n    assert nfloat({x: x**2}) == {x: x**2}\n    assert nfloat({x: 2.5}) == {x: 2.5}\n    assert nfloat([x, y, x**2]) == [x, y, x**2]\n    assert nfloat(x**2 + Matrix([[1, 2], [3, 4]])) == x**2 + Matrix([[1., 2.], [3., 4.]])\n\ndef test_nfloat_special_cases():\n    assert nfloat(S.Pi) == 3.141592653589793\n\ndef test_nfloat_roots():\n    assert nfloat(sqrt(2)).n(3) == 1.414\n    assert nfloat(RootOf(x**2 - 2)).n(3) == 1.414\n\ndef test_count_ops():\n    assert count_ops(x + 2*y**3) == 1*ADD + 3*POW\n    assert count_ops(x + 2*y**3, visual=True) == ADD + 3*POW\n    assert count_ops(x - 2*y**3, visual=True) == SUB + 3*POW\n    assert count_ops(x**2 - 2*y**3) == 2*POW\n    assert count_ops((x + 2*y**3) ** 2) == 2*MUL\n    assert count_ops((x + 2*y**3) ** 2, visual=True) == 2*MUL\n    assert count_ops(1/x/y) == 1*DIV + 1*MUL\n\n    assert count_ops(1/x/y, visual=True) == DIV + MUL\n    assert count_ops(1/(x*y)) == 0  \n    assert count_ops(sin(x)*x + sin(x)**2) == 2*ADD + 2*SIN\n    assert count_ops([x, sin(x), None, True, x + 2], visual=True) == ADD + SIN\n    assert count_ops({x: sin(x), x + 2: y + 1}, visual=True) == 2*ADD + SIN\n    assert count_ops(x*(1 + x*(2 + x*(3 + x)))) == 0  \n    assert count_ops(x*(1 + x*(2 + x*(3 + x))), visual=True) == 0  \n    assert count_ops(x*(1 + x*(2 + x*(3 + x))), visual=True) == 0 \n    \n\ndef test_coeff_isneg():\n    assert _coeff_isneg(2 * x) == False\n    assert _coeff_isneg(-2 * x) == True\n    assert _coeff_isneg(2 * x + 3) == False\n    assert _coeff_isneg(-2 * x + 3) == True\n    assert _coeff_isneg(2 * x - 3) == False\n    assert _coeff_isneg(-2 * x - 3) == True\n\n\ndef test_expand_functions():\n    assert expand_log(log(x*y)) == log(x) + log(y)\n    assert expand_log(log(x*y*z), force=True) == log(x) + log(y) + log(z)\n    assert expand_mul(x*y*z) == x*y*z\n    assert expand_pow_base(x**2*y) == x**2*y\n\ndef test_expand_other():\n    assert expand_trig(sin(x+y)) == sin(x)*cos(y) + cos(x)*sin(y)\n    assert expand_power_exp(x**(y*z)) == x**(y*z)\n\n    assert expand_trig(sin(x + y)) == sin(x)*cos(y) + cos(x)*sin(y)\n    \n    assert expand(x**2 + y + 2*x*y) == x**2 + y + 2*x*y\n\n    assert expand_power_base((x*y)**z) == x**z*y**z\n\n\n\n"], "sample_124": ["\nimport unittest\nfrom sklearn.utils.multiclass import unique_labels\nfrom sklearn.utils.multiclass import is_multilabel\nfrom sklearn.utils.multiclass import type_of_target\nfrom sklearn.utils.multiclass import class_distribution\nfrom sklearn.utils.multiclass import check_classification_targets\nfrom sklearn.utils.multiclass import _ovr_decision_function\nfrom sklearn.metrics.pairwise import euclidean_distances\n\nimport numpy as np\n\n\nclass TestMulticlass(unittest.TestCase):\n\n    def test_unique_labels(self):\n        self.assertEqual(unique_labels([3, 5, 5, 5, 7, 7]), np.array([3, 5, 7]))\n        self.assertEqual(unique_labels([1, 2, 3, 4], [2, 2, 3, 4]), np.array([1, 2, 3, 4]))\n        self.assertEqual(unique_labels([1, 2, 10], [5, 11]), np.array([1, 2, 5, 10, 11]))\n\n    def test_unique_labels_mixed_types(self):\n        with self.assertRaises(ValueError):\n            unique_labels([1, \"a\", 2])\n\n    def test_is_multilabel(self):\n        self.assertFalse(is_multilabel([0, 1, 0, 1]))\n        self.assertFalse(is_multilabel([[1], [0, 2], []]))\n        self.assertTrue(is_multilabel(np.array([[1, 0], [0, 0]])))\n        self.assertTrue(is_multilabel(np.array([[1, 0, 0]])))\n\n    def test_type_of_target(self):\n        self.assertEqual(type_of_target([0.1, 0.6]), 'continuous')\n        self.assertEqual(type_of_target([1, -1, -1, 1]), 'binary')\n        self.assertEqual(type_of_target(['a', 'b', 'a']), 'binary')\n        self.assertEqual(type_of_target([1.0, 2.0]), 'binary')\n        self.assertEqual(type_of_target([1, 0, 2]), 'multiclass')\n        self.assertEqual(type_of_target([1.0, 0.0, 3.0]), 'multiclass')\n        self.assertEqual(type_of_target(['a', 'b', 'c']), 'multiclass')\n        self.assertEqual(type_of_target(np.array([[1, 2], [3, 1]])), 'multiclass-multioutput')\n        self.assertEqual(type_of_target([[1, 2]]), 'multilabel-indicator')\n        self.assertEqual(type_of_target(np.array([[1.5, 2.0], [3.0, 1.6]])), 'continuous-multioutput')\n        self.assertEqual(type_of_target(np.array([[0, 1], [1, 1]])), 'multilabel-indicator')\n\n    def test_check_classification_targets(self):\n        with self.assertRaises(ValueError) as cm:\n            check_classification_targets([1, 2, 3, 4, 'a'])\n        self.assertEqual(str(cm.exception), \"Unknown label type: 'object'\")\n\n    def test_class_distribution(self):\n        y = np.array([[0, 1, 2], [1, 2, 0], [2, 0, 1]])\n        classes, n_classes, class_prior = class_distribution(y)\n        self.assertEqual(classes, [[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n        self.assertEqual(n_classes, [3, 3, 3])\n        self.assertEqual(class_prior, [[0.33333333, 0.33333333, 0.33333333],\n                                       [0.33333333, 0.33333333, 0.33333333],\n                                       [0.33333333, 0.33333333, 0.33333333]])\n        y_w = np.array([[0, 1, 2], [1, 2, 0], [2, 0, 1]])\n        sample_weight = np.array([1, 2, 3])\n        classes, n_classes, class_prior = class_distribution(y_w, sample_weight)\n        self.assertEqual(classes, [[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n        self.assertEqual(n_classes, [3, 3, 3])\n        self.assertEqual(class_prior, [[0.33333333, 0.66666667, 0.00000000],\n                                       [0.66666667, 0.00000000, 0.33333333],\n                                       [0.00000000, 0.33333333, 0.66666667]])\n\n    def test_ovr_decision_function(self):\n        predictions = np.array([[0, 1, 0],\n                                [1, 0, 1],\n                                [0, 1, 0]])\n        confidences = np.array([[0.7, 0.3, 0.2],\n                                [0.8, 0.2, 0.9],\n                                [0.4, 0.6, 0.5]])\n        n_classes = 3\n        decision_function = _ovr_decision_function(predictions, confidences, n_classes)\n        expected_decision_function = np.array([\n            [0, 2, 0],\n            [2, 0, 1],\n            [0, 1, 1]\n        ])\n        self.assertTrue(np.allclose(decision_function, expected_decision_function))\n\n\n\n"], "sample_0": ["\nimport unittest\nfrom django.forms import widgets\nfrom django.utils.encoding import force_str\nfrom django.utils import timezone\nfrom django.utils.html import format_html\nfrom django.conf import settings\nfrom django.contrib.admin.widgets import AutocompleteSelect\n\n\nclass WidgetTests(unittest.TestCase):\n\n    def test_checkbox_input_boolean_check_True(self):\n        widget = widgets.CheckboxInput()\n        self.assertTrue(widget.check_test(True))\n\n    def test_checkbox_input_boolean_check_False(self):\n        widget = widgets.CheckboxInput()\n        self.assertFalse(widget.check_test(False))\n\n    def test_checkbox_input_boolean_check_None(self):\n        widget = widgets.CheckboxInput()\n        self.assertFalse(widget.check_test(None))\n\n    def test_checkbox_input_boolean_check_empty_string(self):\n        widget = widgets.CheckboxInput()\n        self.assertFalse(widget.check_test(\"\"))\n\n    def test_checkbox_input_value_from_datadict_True(self):\n        widget = widgets.CheckboxInput()\n        self.assertTrue(widget.value_from_datadict({\"my_checkbox\": \"on\"}, {}, \"my_checkbox\"))\n\n    def test_checkbox_input_value_from_datadict_False(self):\n        widget = widgets.CheckboxInput()\n        self.assertFalse(widget.value_from_datadict({\"my_checkbox\": \"\"}, {}, \"my_checkbox\"))\n\n    def test_checkbox_input_value_omitted(self):\n        widget = widgets.CheckboxInput()\n        self.assertTrue(widget.value_omitted_from_data({}, {}, \"my_checkbox\"))\n\n\n    def test_choice_widget_format_value(self):\n        widget = widgets.Select()\n        self.assertEqual(widget.format_value(None), [])\n        self.assertEqual(widget.format_value('test'), ['test'])\n        self.assertEqual(widget.format_value(['test', 'other']), ['test', 'other'])\n\n\n    def test_select_format_value_multiple_selected(self):\n        widget = widgets.SelectMultiple()\n        self.assertEqual(widget.format_value(None), [])\n        self.assertEqual(widget.format_value('test'), ['test'])\n        self.assertEqual(widget.format_value(['test', 'other']), ['test', 'other'])\n        self.assertEqual(widget.format_value(['other', 'test']), ['other', 'test'])\n\n    def test_date_input_format_value(self):\n        widget = widgets.DateInput()\n        self.assertEqual(widget.format_value(None), None)\n        self.assertEqual(widget.format_value(timezone.date(2023, 10, 26)), '2023-10-26')\n\n    def test_date_input_value_from_datadict(self):\n        widget = widgets.DateInput()\n        self.assertEqual(widget.value_from_datadict({\"my_date\": \"2023-10-26\"}, {}, 'my_date'), datetime.date(2023, 10, 26))\n\n    def test_split_hidden_datetime_widget(self):\n        widget = widgets.SplitHiddenDateTimeWidget()\n        self.assertEqual(widget.template_name, 'django/forms/widgets/splithiddendatetime.html')\n        # Tests the individual widgets.\n\n        self.assertEqual(widget.widgets[0].input_type, 'hidden')\n        self.assertEqual(widget.widgets[1].input_type, 'hidden')\n\n\n\n    def test_select_date_widget_format_value(self):\n        widget = widgets.SelectDateWidget()\n        self.assertEqual(widget.format_value(None), {'year': '', 'month': '', 'day': ''})\n        self.assertEqual(widget.format_value(timezone.date(2023, 10, 26)), {'year': '2023', 'month': '10', 'day': '26'})\n\n    def test_select_date_widget_value_from_datadict(self):\n        widget = widgets.SelectDateWidget()\n        self.assertEqual(\n            widget.value_from_datadict({\"year\": \"2023\", \"month\": \"10\", \"day\": \"26\"}, {}, 'my_date'),\n            timezone.date(2023, 10, 26)\n        )\n\n\n\n    def test_custom_widget_media(self):\n        widget = widgets.widgets.MultipleHiddenInput()\n        self.assertEqual(widget.media, Media({'js': ['/path/to/script.js']}))\n\n                    \n\n\n"], "sample_38": ["\nfrom django.db.migrations.serializer import Serializer, serializer_factory, DeconstructableSerializer,  BaseSerializer, \\\n    FrozensetSerializer, SequenceSerializer, SetSerializer, TupleSerializer, DictionarySerializer, ChoicesSerializer, \\\n    DateTimeSerializer, DatetimeDatetimeSerializer, DecimalSerializer, FunctionTypeSerializer, \\\n    FunctoolsPartialSerializer, IterableSerializer, ModelFieldSerializer, ModelManagerSerializer, OperationSerializer, \\\n    PathLikeSerializer, PathSerializer, RegexSerializer, UUIDSerializer, TypeSerializer\nfrom django.db import models\nfrom django.utils.timezone import utc\nfrom django.conf import Settings\nfrom pathlib import Path\nimport datetime\nimport decimal\nimport functools\nimport re\nimport types\nimport uuid\nimport collections\n\nimport unittest\n\nclass TestSerializer(unittest.TestCase):\n\n    def test_serializer_factory(self):\n        self.assertEqual(serializer_factory(1), BaseSimpleSerializer(1).serialize())\n        self.assertEqual(serializer_factory(1.0), BaseSimpleSerializer(1.0).serialize())\n        self.assertEqual(serializer_factory(1j), BaseSimpleSerializer(1j).serialize())\n        self.assertEqual(serializer_factory(True), BaseSimpleSerializer(True).serialize())\n        self.assertEqual(serializer_factory(False), BaseSimpleSerializer(False).serialize())\n        self.assertEqual(serializer_factory('test'), BaseSimpleSerializer('test').serialize())\n\n    def test_serializer_factory_list(self):\n        self.assertEqual(serializer_factory([1, 2, 3]).serialize(),  SequenceSerializer([1, 2, 3]).serialize())\n\n    def test_serializer_factory_tuple(self):\n        self.assertEqual(serializer_factory((1, 2, 3)).serialize(), TupleSerializer((1, 2, 3)).serialize())\n\n    def test_serializer_factory_dict(self):\n        self.assertEqual(serializer_factory({'a': 1, 'b': 2}).serialize(), DictionarySerializer({'a': 1, 'b': 2}).serialize())\n\n    def test_serializer_factory_set(self):\n        self.assertEqual(serializer_factory({1, 2, 3}).serialize(), SetSerializer({1, 2, 3}).serialize())\n\n    def test_serializer_factory_datetime(self):\n        dt = datetime.datetime(2023, 10, 26, 10, 30)\n        self.assertEqual(serializer_factory(dt).serialize(), DateTimeSerializer(dt).serialize())\n\n    def test_serializer_factory_datetime_datetime(self):\n        dt = datetime.datetime(2023, 10, 26, 10, 30, tzinfo=utc)\n        self.assertEqual(serializer_factory(dt).serialize(), DatetimeDatetimeSerializer(dt).serialize())\n\n    def test_serializer_factory_decimal(self):\n        self.assertEqual(serializer_factory(decimal.Decimal(\"1.23\")).serialize(), DecimalSerializer(decimal.Decimal(\"1.23\")).serialize())\n\n    def test_serializer_factory_enum(self):\n        class MyEnum(enum.Enum):\n            A = 1\n            B = 2\n\n        self.assertEqual(serializer_factory(MyEnum.A).serialize(), EnumSerializer(MyEnum.A).serialize())\n\n    def test_serializer_factory_choices(self):\n        class MyModel(models.Model):\n            CHOICES = (\n                ('A', 'Option A'),\n                ('B', 'Option B'),\n            )\n        self.assertEqual(serializer_factory(MyModel.CHOICES).serialize(), ChoicesSerializer(MyModel.CHOICES).serialize())\n\n    def test_serializer_factory_function(self):\n        def my_func():\n            pass\n\n        self.assertEqual(serializer_factory(my_func).serialize(), FunctionTypeSerializer(my_func).serialize())\n\n    def test_serializer_factory_partial(self):\n        def my_func(a, b):\n            pass\n\n        partial = functools.partial(my_func, 1)\n        self.assertEqual(serializer_factory(partial).serialize(), FunctoolsPartialSerializer(partial).serialize())\n\n    def test_serializer_factory_iterable(self):\n        self.assertEqual(serializer_factory([1, 2, 3]).serialize(), IterableSerializer([1, 2, 3]).serialize())\n\n    def test_serializer_factory_pathlike(self):\n        self.assertEqual(serializer_factory(Path('/tmp/test')).serialize(), PathLikeSerializer(Path('/tmp/test')).serialize())\n\n    def test_serializer_factory_path(self):\n        self.assertEqual(serializer_factory(Path('/tmp/test')).serialize(), PathSerializer(Path('/tmp/test')).serialize())\n\n    def test_serializer_factory_regex(self):\n        regex = re.compile(r\"\\d+\")\n        self.assertEqual(serializer_factory(regex).serialize(), RegexSerializer(regex).serialize())\n\n    def test_serializer_factory_uuid(self):\n        self.assertEqual(serializer_factory(uuid.uuid4()).serialize(), UUIDSerializer(uuid.uuid4()).serialize())\n\n    def test_serializer_factory_type(self):\n        self.assertEqual(serializer_factory(int).serialize(), TypeSerializer(int).serialize())\n\n    def test_serializer_factory_model_field(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n        field = MyModel._meta.get_field('name')\n        self.assertEqual(serializer_factory(field).serialize(), ModelFieldSerializer(field).serialize())\n\n    def test_serializer_factory_model_manager(self):\n        class MyModel(models.Model):\n            pass\n        manager = MyModel.objects.all()\n        self.assertEqual(serializer_factory(manager).serialize(), ModelManagerSerializer(manager).serialize())\n\n    def test_serializer_factory_operation(self):\n        class MyOperation(Operation):\n            def __init__(self):\n                pass\n        self.assertEqual(serializer_factory(MyOperation()).serialize(), OperationSerializer(MyOperation()).serialize())\n    \n    def test_serializer_factory_deconstructable(self):\n        class MyClass:\n            def deconstruct(self):\n                return 'my_class', [], {}\n        self.assertEqual(serializer_factory(MyClass()).serialize(), DeconstructableSerializer(MyClass()).serialize())\n\n    def test_serializer_factory_settings_reference(self):\n        self.assertEqual(serializer_factory(SettingsReference(Setting('TEST'))).serialize(), SettingsReferenceSerializer(SettingsReference(Setting('TEST'))).serialize())\n\n\n\n"], "sample_136": ["\nfrom sympy.physics.vector import dynamicsymbols, Point, ReferenceFrame\nfrom sympy.physics.vector import init_vprinting\nimport unittest\nfrom sympy import symbols\n\ninit_vprinting(pretty_print=False)\n\nclass TestPoint(unittest.TestCase):\n\n    def setUp(self):\n        self.N = ReferenceFrame('N')\n        self.B = ReferenceFrame('B')\n        self.B.set_ang_vel(self.N, 5 * self.B.y)\n\n    def test_init(self):\n        p = Point('p')\n        self.assertEqual(p.name, 'p')\n        self.assertEqual(p._pos_dict, {})\n        self.assertEqual(p._vel_dict, {})\n        self.assertEqual(p._acc_dict, {})\n\n    def test_str(self):\n        p = Point('p')\n        self.assertEqual(str(p), 'p')\n\n    def test_locatenew(self):\n        p1 = Point('p1')\n        p2 = p1.locatenew('p2', 10*self.N.x)\n        self.assertEqual(p2.name, 'p2')\n        self.assertEqual(p1.pos_from(p2), -10*self.N.x)\n\n    def test_pos_from(self):\n        p1 = Point('p1')\n        p2 = p1.locatenew('p2', 10*self.N.x)\n        self.assertEqual(p1.pos_from(p2), -10*self.N.x)\n\n    def test_set_pos(self):\n        p1 = Point('p1')\n        p2 = p1.locatenew('p2', 10*self.N.x)\n        self.assertEqual(p1.pos_from(p2), -10*self.N.x)\n\n    def test_acc(self):\n        p = Point('p')\n        p.set_acc(self.N, 10 * self.N.x)\n        self.assertEqual(p.acc(self.N), 10 * self.N.x)\n\n    def test_set_vel(self):\n        p = Point('p')\n        p.set_vel(self.N, 10 * self.N.x)\n        self.assertEqual(p.vel(self.N), 10 * self.N.x)\n\n    def test_vel(self):\n        p = Point('p')\n        p.set_vel(self.N, 10 * self.N.x)\n        self.assertEqual(p.vel(self.N), 10 * self.N.x)\n\n    def test_partial_velocity_single(self):\n        p = Point('p')\n        u1 = dynamicsymbols('u1')\n        p.set_vel(self.N, u1 * self.N.x)\n        self.assertEqual(p.partial_velocity(self.N, u1), self.N.x)\n\n    def test_partial_velocity_multiple(self):\n        p = Point('p')\n        u1, u2 = dynamicsymbols('u1, u2')\n        p.set_vel(self.N, u1 * self.N.x + u2 * self.B.y)\n        self.assertEqual(p.partial_velocity(self.N, u1), self.N.x)\n        self.assertEqual(p.partial_velocity(self.N, u2), self.B.y)\n\n    def test_v1pt_theory(self):\n        O = Point('O')\n        P = O.locatenew('P', 10 * self.B.x)\n        P.v1pt_theory(O, self.N, self.B)\n        self.assertEqual(P.vel(self.N), 10*self.B.x + 50*self.B.z)\n\n    def test_v2pt_theory(self):\n        O = Point('O')\n        P = O.locatenew('P', 10 * self.B.x)\n        P.v2pt_theory(O, self.N, self.B)\n        self.assertEqual(P.vel(self.N), 50*self.B.y)\n\n    def test_a1pt_theory(self):\n        O = Point('O')\n        P = O.locatenew('P', 10 * self.B.x)\n        P.a1pt_theory(O, self.N, self.B)\n        self.assertEqual(P.acc(self.N), 50*self.B.y - 250*self.B.x)\n\n\n    def test_a2pt_theory(self):\n        O = Point('O')\n        P = O.locatenew('P', 10 * self.B.x)\n        P.a2pt_theory(O, self.N, self.B)\n        self.assertEqual(P.acc(self.N), 50*self.B.y)\n\n\n\n"], "sample_84": ["\nimport pytest\nfrom _pytest.python import (\n    Function,\n    FunctionDefinition,\n    idmaker,\n    get_default_arg_names,\n    _idval,\n    ascii_escaped,\n    _showfixtures,\n    showfixtures,\n    _showfixtures_main,\n)\n\n\ndef test_function_init():\n    name = \"test_function\"\n    parent = object()\n    args = (\"arg1\", \"arg2\")\n    config = object()\n    callspec = object()\n    callobj = object()\n    keywords = {\"a\": 1, \"b\": 2}\n    session = object()\n    fixtureinfo = object()\n    originalname = \"test_function_original\"\n\n    function = Function(\n        name,\n        parent,\n        args=args,\n        config=config,\n        callspec=callspec,\n        callobj=callobj,\n        keywords=keywords,\n        session=session,\n        fixtureinfo=fixtureinfo,\n        originalname=originalname,\n    )\n\n    assert function.name == name\n    assert function.parent == parent\n    assert function.args == args\n    assert function.config == config\n    assert function.callspec == callspec\n    assert function.callobj == callobj\n    assert function.keywords == keywords\n    assert function.session == session\n    assert function.fixtureinfo == fixtureinfo\n    assert function.originalname == originalname\n\n\ndef test_get_default_arg_names():\n    def func(a, b=1, c=2):\n        pass\n\n    names = get_default_arg_names(func)\n    assert names == [\"a\", \"b\", \"c\"]\n\n\ndef test_idmaker():\n    argnames = [\"a\", \"b\"]\n    parametersets = [\n        (\"1\", \"2\"),\n        (\"3\", \"4\"),\n    ]\n    idfn = lambda val: f\"ID_{val}\"\n\n    ids = idmaker(argnames, parametersets, idfn=idfn)\n    expected_ids = [\n        \"ID_1ID_2\",\n        \"ID_3ID_4\",\n    ]\n    assert ids == expected_ids\n\n\ndef test_idval():\n    argname = \"arg1\"\n    val = \"value\"\n    idx = 0\n    idfn = None\n    item = object()\n    config = object()\n\n    result = _idval(val, argname, idx, idfn, item, config)\n    assert result == f\"{argname}{idx}\"\n\n\ndef test__showfixtures():\n    fixtures = {\n        \"fixture1\": {\"argname\": \"fixture1\", \"func\": object(), \"scope\": \"function\"},\n        \"fixture2\": {\"argname\": \"fixture2\", \"func\": object(), \"scope\": \"session\"},\n    }\n    config = object()\n    session = object()\n    session._fixturemanager._arg2fixturedefs = fixtures\n    _showfixtures(config, session)\n\n\ndef test_showfixtures_main():\n    fixtures = {\n        \"fixture1\": {\"argname\": \"fixture1\", \"func\": object(), \"scope\": \"function\"},\n        \"fixture2\": {\"argname\": \"fixture2\", \"func\": object(), \"scope\": \"session\"},\n    }\n    config = object()\n    session = object()\n    session._fixturemanager._arg2fixturedefs = fixtures\n    _showfixtures_main(config, session)\n\n\n\n"], "sample_126": ["\nfrom sympy import symbols, Symbol, sinh, nan, oo, zoo, pi, asinh, acosh, log, sqrt,  coth, I, cot, E, tanh, tan, cosh, cos, S, sin, Rational, atanh, acoth,  Integer, O, exp, sech, sec, csch, asech, acsch, acos, asin, expand_mul\nfrom sympy.functions.elementary.hyperbolic import asinh, acosh, atanh, acoth, asech, acsch\n\n\ndef test_asinh_eval():\n    x = Symbol('x')\n    assert asinh(x).func(0) == 0\n    assert asinh(1).func(1) == log(1 + sqrt(2))\n    assert asinh(-1).func(-1) == -log(1 + sqrt(2))\n    assert asinh(oo).func(oo) == oo\n    assert asinh(-oo).func(-oo) == -oo\n    assert asinh(sqrt(2)).func(sqrt(2)) == log(1 + sqrt(2))\n    assert asinh(S.ImaginaryUnit).func(S.ImaginaryUnit) == I * pi / 2\n\ndef test_acosh_eval():\n    x = Symbol('x')\n    assert acosh(x).func(1) == 0\n    assert acosh(oo).func(oo) == oo\n    assert acosh(-1).func(-1) == zoo\n    assert acosh(sqrt(2)).func(sqrt(2)) == log(1 + sqrt(2))\n    assert acosh(S.ImaginaryUnit).func(S.ImaginaryUnit) == I * pi / 2\n\n\ndef test_atanh_eval():\n    x = Symbol('x')\n    assert atanh(x).func(0) == 0\n    assert atanh(1).func(1) == oo\n    assert atanh(-1).func(-1) == -oo\n    assert atanh(S.ImaginaryUnit).func(S.ImaginaryUnit) == I*pi/2\n\ndef test_acoth_eval():\n    x = Symbol('x')\n    assert acoth(x).func(1) == oo\n    assert acoth(-1).func(-1) == -oo\n    assert acoth(S.ImaginaryUnit).func(S.ImaginaryUnit) == -I*pi/2\n\ndef test_asech_eval():\n    x = Symbol('x')\n    assert asech(x).func(1) == 0\n    assert asech(oo).func(oo) == pi*I/2\n    assert asech(0).func(0) == oo\n    assert asech(sqrt(2)).func(sqrt(2)) == pi/3\n    assert asech(S.ImaginaryUnit).func(S.ImaginaryUnit) == -pi/2 * I\n\ndef test_acsch_eval():\n    x = Symbol('x')\n    assert acsch(x).func(0) == oo\n    assert acsch(1).func(1) == log(1 + sqrt(2))\n    assert acsch(-1).func(-1) == -log(1 + sqrt(2))\n    assert acsch(S.ImaginaryUnit).func(S.ImaginaryUnit) == -I * pi / 2\n\n\n\n"], "sample_121": ["\nfrom typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar, Union)\n\nfrom sphinx.util.typing import restify, stringify, get_type_hints, is_system_TypeVar, ForwardRef\n\nclass A(TypeVar('A')):\n    pass\n\nclass B(TypeVar('B')):\n    pass\n\nclass C(TypeVar('C')):\n    pass\n\nclass D(TypeVar('D')):\n    pass\n\nclass E(TypeVar('E')):\n    pass\n\nclass F(TypeVar('F')):\n    pass\n\nclass G(TypeVar('G')):\n    pass\n\nclass H(TypeVar('H')):\n    pass\n\nclass I(TypeVar('I')):\n    pass\n\nclass J(TypeVar('J')):\n    pass\n\n\ndef test_get_type_hints():\n    class MyObject:\n        def my_method(self, a: int, b: str = None) -> Optional[str]:\n            pass\n\n        my_property: Optional[A]\n\n    hints = get_type_hints(MyObject)\n    assert hints == {\n        'my_method': {\n            'a': int,\n            'b': str,\n            'return': Optional[str]\n        },\n        'my_property': Optional[A]\n    }\n\ndef test_is_system_TypeVar():\n    assert is_system_TypeVar(Union)\n    assert is_system_TypeVar(List)\n    assert not is_system_TypeVar(A)\n    assert not is_system_TypeVar(B)\n\ndef test_restify_py36():\n    assert restify(NoneType) == ':obj:`None`'\n    assert restify(Ellipsis) == '...'\n    assert restify(str) == ':obj:`str`'\n    assert restify(list) == ':obj:`list`'\n    assert restify(int) == ':obj:`int`'\n    assert restify(typing.Union[int, str]) == ':obj:`Union[int, str]`'\n    assert restify(typing.Callable[[int], str]) == ':class:`Callable[[int], str]`'\n\n\ndef test_restify_py37():\n    assert restify(NoneType) == ':obj:`None`'\n    assert restify(Ellipsis) == '...'\n    assert restify(str) == ':obj:`str`'\n    assert restify(list) == ':obj:`list`'\n    assert restify(int) == ':obj:`int`'\n    assert restify(typing.Union[int, str]) == ':obj:`Union[int, str]`'\n    assert restify(typing.Callable[[int], str]) == ':class:`Callable[[int], str]`'\n    assert restify(typing.ForwardRef('A')) == ':class:`A`'\n    assert restify(typing.Optional[int]) == ':obj:`Optional`\\\\ [%s]' % restify(int)\n    assert restify(typing.TypeVar('T')) == ':class:`T`'\n    assert restify(typing.Tuple[int, str]) == ':class:`Tuple`\\\\ [%s, %s]' % (restify(int), restify(str))\n\ndef test_stringify():\n    assert stringify(int) == 'int'\n    assert stringify(str) == 'str'\n    assert stringify(list) == 'list'\n    assert stringify(NoneType) == 'None'\n    assert stringify(Ellipsis) == '...'\n    assert stringify(typing.Union[int, str]) == 'Union[int, str]'\n    assert stringify(typing.Callable[[int], str]) == 'Callable[[int], str]'\n    assert stringify(typing.ForwardRef('A')) == 'A'\n    assert stringify(typing.Optional[int]) == 'Optional[int]'\n    assert stringify(typing.Tuple[int, str]) == 'Tuple[int, str]'\n    assert stringify(A) == 'A'\n\n\n"], "sample_68": ["\nimport unittest\nimport os\nimport pathlib\nimport warnings\nfrom contextlib import suppress\nfrom matplotlib.style.core import (\n    use,\n    context,\n    available,\n    library,\n    reload_library,\n    _remove_blacklisted_style_params,\n    _apply_style,\n    read_style_directory,\n    update_nested_dict,\n    _StyleLibrary,\n    BASE_LIBRARY_PATH,\n    STYLE_EXTENSION,\n    STYLE_BLACKLIST,\n)\nfrom matplotlib import rcParams\n\n\nclass TestStyle(unittest.TestCase):\n\n    def setUp(self):\n        self.temp_style_dir = pathlib.Path(os.path.join(\n            os.path.dirname(__file__), \"temp_style_dir\"))\n        self.temp_style_dir.mkdir(parents=True, exist_ok=True)\n\n    def tearDown(self):\n        self.temp_style_dir.rmdir()\n\n    def test_use_default(self):\n        with suppress(DeprecationWarning):\n            use(\"default\")\n        self.assertEqual(rcParams[\"lines.linewidth\"], 2)\n\n    def test_use_style_from_file(self):\n        # Create a test style file\n        with open(os.path.join(self.temp_style_dir, \"test.mplstyle\"), \"w\") as f:\n            f.write(\"lines.linewidth = 1.5\")\n\n        with suppress(DeprecationWarning):\n            use(os.path.join(self.temp_style_dir, \"test.mplstyle\"))\n        self.assertEqual(rcParams[\"lines.linewidth\"], 1.5)\n\n    def test_use_style_from_path(self):\n        # Create a test style file\n        with open(os.path.join(self.temp_style_dir, \"test.mplstyle\"), \"w\") as f:\n            f.write(\"lines.linewidth = 1.5\")\n\n        with suppress(DeprecationWarning):\n            use(pathlib.Path(os.path.join(self.temp_style_dir, \"test.mplstyle\")))\n        self.assertEqual(rcParams[\"lines.linewidth\"], 1.5)\n\n    def test_use_style_name(self):\n        with suppress(DeprecationWarning):\n            use(\"default\")\n        self.assertEqual(rcParams[\"lines.linewidth\"], 2)\n\n    def test_use_style_dict(self):\n        style_dict = {\"lines.linewidth\": 1.5}\n        with suppress(DeprecationWarning):\n            use(style_dict)\n        self.assertEqual(rcParams[\"lines.linewidth\"], 1.5)\n\n    def test_use_multiple_styles(self):\n        with suppress(DeprecationWarning):\n            use([\n                {\"lines.linewidth\": 1.5},\n                {\"axes.labelsize\": 12}\n            ])\n        self.assertEqual(rcParams[\"lines.linewidth\"], 1.5)\n        self.assertEqual(rcParams[\"axes.labelsize\"], 12)\n\n    def test_use_deprecated_seaborn_style(self):\n        with suppress(DeprecationWarning):\n            use(\"seaborn-dark\")\n        self.assertEqual(rcParams[\"lines.linewidth\"], 2)  # Default\n\n    def test_context_manager_reset(self):\n        with context(\"default\", after_reset=True) as _:\n            self.assertEqual(rcParams[\"lines.linewidth\"], 2)\n\n    def test_context_manager_update(self):\n        with context(\"dark_background\") as _:\n            self.assertEqual(rcParams[\"figure.facecolor\"], \"black\")\n\n    def test_available_styles(self):\n        self.assertTrue(len(available) > 0)\n\n\n    def test_read_style_directory(self):\n        # Create a test style file\n        with open(os.path.join(self.temp_style_dir, \"test.mplstyle\"), \"w\") as f:\n            f.write(\"lines.linewidth = 1.5\")\n        styles = read_style_directory(self.temp_style_dir)\n        self.assertEqual(len(styles), 1)\n        self.assertEqual(styles[\"test\"][\"lines.linewidth\"], 1.5)\n\n    def test_update_nested_dict(self):\n        main_dict = {\"A\": {\"B\": 1}}\n        new_dict = {\"A\": {\"B\": 2, \"C\": 3}}\n        result = update_nested_dict(main_dict, new_dict)\n        self.assertEqual(result[\"A\"][\"B\"], 2)\n        self.assertEqual(result[\"A\"][\"C\"], 3)\n\n    def test_blacklisted_params(self):\n        style_params = {\"interactive\": True, \"backend\": \"TkAgg\"}\n        with suppress(UserWarning):\n            _remove_blacklisted_style_params(style_params)\n        self.assertNotIn(\"interactive\", style_params)\n        self.assertNotIn(\"backend\", style_params)\n\n    def test_apply_style(self):\n        style_params = {\"lines.linewidth\": 1.5}\n        with suppress(UserWarning):\n            _apply_style(style_params)\n        self.assertEqual(rcParams[\"lines.linewidth\"], 1.5)\n\n\n\n"], "sample_148": ["\nfrom sympy.printing.latex import (latex, translate, greek_letters_set, tex_greek_dictionary, multiline_latex, latex_escape, LatexPrinter)\nfrom sympy import Symbol, pi, sin, cos, exp, log, I, symbols, Integer, Rational, Matrix\nfrom sympy.abc import x, y, mu, r, tau\n\n\ndef test_latex_numbers():\n    assert latex(1) == '1'\n    assert latex(2.5) == '2.5'\n    assert latex(pi) == '\\\\pi'\n    assert latex(0) == '0'\n    assert latex(-1) == '-1'\n    assert latex(Integer(1)) == '1'\n    assert latex(Rational(1, 2)) == '\\\\frac{1}{2}'\n\ndef test_latex_symbols():\n    assert latex(x) == 'x'\n    assert latex(y) == 'y'\n    assert latex(mu) == '\\\\mu'\n    assert latex(r) == 'r'\n    assert latex(tau) == '\\\\tau'\n\ndef test_latex_functions():\n    assert latex(sin(x)) == '\\\\sin{\\left(x \\right)}'\n    assert latex(cos(x)) == '\\\\cos{\\left(x \\right)}'\n    assert latex(exp(x)) == '\\\\exp{\\left(x \\right)}'\n    assert latex(log(x)) == '\\\\log{\\left(x \\right)}'\n    assert latex(I) == 'i'\n\ndef test_latex_operators():\n    assert latex(x + y) == 'x + y'\n    assert latex(x - y) == 'x - y'\n    assert latex(x * y) == 'x y'\n    assert latex(x / y) == '\\\\frac{x}{y}'\n    assert latex(x**2) == 'x^{2}'\n    assert latex(x**Rational(1, 2)) == 'x^{1/2}'\n\n\ndef test_latex_parens():\n    assert latex((x + y)) == 'x + y'\n    assert latex(x + y * 2) == 'x + 2 y'\n    assert latex( (x + y) * (z + w) ) == '\\\\left(x + y\\right) \\\\left(z + w\\right)'\n\ndef test_latex_matrices():\n    A = Matrix([[1, 2], [3, 4]])\n    assert latex(A) == '\\left[\\begin{matrix}1 & 2 \\\\ 3 & 4\\end{matrix}\\right]'\n\ndef test_latex_multiline():\n    x, y, alpha = symbols('x y alpha')\n    expr = sin(alpha*y) + exp(I*alpha) - cos(log(y))\n    result = multiline_latex(x, expr)\n    assert result.startswith('\\begin{align*}') and result.endswith('\\end{align*}')\n\n    result = multiline_latex(x, expr, terms_per_line=3)\n    assert result.startswith('\\begin{align*}') and result.endswith('\\end{align*}')\n    assert result.count('\\n') >= 2\n\n    result = multiline_latex(x, expr, environment=\"eqnarray\", use_dots=True)\n    assert result.startswith('\\begin{eqnarray}') and result.endswith('\\end{eqnarray}')\n\n    result = multiline_latex(x, expr, environment=\"IEEEeqnarray\")\n    assert result.startswith('\\begin{IEEEeqnarray}{rCl}') and result.endswith('\\end{IEEEeqnarray}')\n\ndef test_latex_translate():\n    assert translate('alphahatdotprime') == r\"{\\\\dot{\\\\hat{\\\\alpha}}}\"\n    assert translate('alpha') == '\\\\alpha'\n    assert translate('beta') == '\\\\beta'\n    assert translate('pi') == '\\\\pi'\n    \n    assert translate('x') == 'x'\n    assert translate('x_i') == 'x_i' \n\n\n\n"], "sample_100": ["\nimport unittest\nimport numpy as np\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\n\nclass TestOneHotEncoder(unittest.TestCase):\n    def test_fit_transform_empty(self):\n        enc = OneHotEncoder(sparse=True)\n        X = []\n        res = enc.fit_transform(X)\n        self.assertTrue(res.shape == (0, 0))\n\n    def test_fit_transform_with_categories(self):\n        enc = OneHotEncoder(categories=[['a', 'b', 'c'], [1, 2, 3]], sparse=True)\n        X = [['a', 1], ['b', 2], ['c', 3]]\n        res = enc.fit_transform(X)\n        self.assertTrue(res.shape == (3, 3))\n        self.assertTrue(np.allclose(res.toarray(), [[1, 0, 0, 0, 1, 0],\n                                                  [0, 1, 0, 0, 0, 1],\n                                                  [0, 0, 1, 0, 0, 1]]))\n\n    def test_fit_transform_with_unknown_categories(self):\n        enc = OneHotEncoder(handle_unknown='ignore', sparse=True)\n        X = [['a', 1], ['b', 2], ['d', 3]]\n        res = enc.fit_transform(X)\n        self.assertTrue(res.shape == (3, 3))\n        self.assertTrue(np.allclose(res.toarray(), [[1, 0, 0, 0, 1, 0],\n                                                  [0, 1, 0, 0, 0, 1],\n                                                  [0, 0, 0, 1, 0, 0]]))\n\n    def test_fit_transform_with_unknown_categories_error(self):\n        enc = OneHotEncoder(handle_unknown='error', sparse=True)\n        X = [['a', 1], ['b', 2], ['d', 3]]\n        with self.assertRaises(ValueError):\n            enc.fit_transform(X)\n\n    def test_inverse_transform(self):\n        enc = OneHotEncoder(sparse=False)\n        X = [['a', 1], ['b', 2], ['c', 3]]\n        enc.fit(X)\n        X_encoded = enc.transform(X)\n        X_recovered = enc.inverse_transform(X_encoded)\n        self.assertTrue(np.array_equal(X, X_recovered))\n\n    def test_inverse_transform_with_unknown(self):\n        enc = OneHotEncoder(handle_unknown='ignore', sparse=False)\n        X = [['a', 1], ['b', 2], ['d', 3]]\n        enc.fit(X)\n        X_encoded = enc.transform(X)\n        X_encoded[0, 1] = 0.\n        with self.assertRaises(ValueError):\n            enc.inverse_transform(X_encoded)\n\n    def test_get_feature_names(self):\n        enc = OneHotEncoder()\n        X = [['a', 1], ['b', 2], ['c', 3]]\n        enc.fit(X)\n        names = enc.get_feature_names(['feature_1', 'feature_2'])\n        self.assertTrue(names.shape[0] == 2)\n        self.assertTrue(np.array_equal(names, ['feature_1_a', 'feature_1_b',\n                                             'feature_1_c',\n                                             'feature_2_1', 'feature_2_2',\n                                             'feature_2_3']))\n\nclass TestOrdinalEncoder(unittest.TestCase):\n    def test_fit_transform(self):\n        enc = OrdinalEncoder()\n        X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        res = enc.fit_transform(X)\n        self.assertTrue(res.shape == (3, 2))\n        self.assertTrue(np.array_equal(res, [[0., 0.], [1., 2.], [1., 1.]]))\n\n    def test_inverse_transform(self):\n        enc = OrdinalEncoder()\n        X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        enc.fit(X)\n        X_encoded = enc.transform(X)\n        X_recovered = enc.inverse_transform(X_encoded)\n        self.assertTrue(np.array_equal(X, X_recovered))\n"], "sample_142": ["\nfrom sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt, atan, atan2, nan, Symbol, re, im, sign, arg)\nfrom sympy.matrices.expressions.matexpr import MatrixSymbol\nfrom sympy.assumptions.refine import (refine_abs, refine_Pow, refine_atan2, refine_re, refine_im, \n                                    refine_arg, refine_sign, refine_matrixelement)\n\n\ndef test_refine_abs():\n    assert refine_abs(Abs(Symbol('x')), Q.real(Symbol('x'))) == Symbol('x')\n    assert refine_abs(Abs(Symbol('x')), Q.positive(Symbol('x'))) == Symbol('x')\n    assert refine_abs(Abs(Symbol('x')), Q.negative(Symbol('x'))) == -Symbol('x')\n    assert refine_abs(Abs(Symbol('x') + Symbol('y')), Q.real(Symbol('x')) & Q.real(Symbol('y'))) == \\\n           Abs(Symbol('x') + Symbol('y'))\n    assert refine_abs(Abs(-Symbol('x') * Symbol('y')), Q.real(Symbol('x')) & Q.real(Symbol('y'))) == \\\n           Abs(-Symbol('x') * Symbol('y'))\n\n\ndef test_refine_Pow():\n    assert refine_Pow(Symbol('x')**2, Q.real(Symbol('x'))) == Symbol('x')**2\n    assert refine_Pow(Symbol('x')**2, Q.positive(Symbol('x'))) == Symbol('x')**2\n    assert refine_Pow((-1)**Symbol('x'), Q.real(Symbol('x'))) == (-1)**Symbol('x')\n    assert refine_Pow((-1)**Symbol('x'), Q.even(Symbol('x'))) == 1\n    assert refine_Pow((-1)**Symbol('x'), Q.odd(Symbol('x'))) == -1\n    assert refine_Pow((-1)**(Symbol('x') + 1), True) == (-1)**(Symbol('x') + 1)\n\n\ndef test_refine_atan2():\n    assert refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.real(Symbol('y')) & Q.positive(Symbol('x'))) == atan(Symbol('y') / Symbol('x'))\n    assert refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.negative(Symbol('y')) & Q.negative(Symbol('x'))) == atan(Symbol('y') / Symbol('x')) - pi\n    assert refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.positive(Symbol('y')) & Q.negative(Symbol('x'))) == atan(Symbol('y') / Symbol('x')) + pi\n    assert refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.zero(Symbol('y')) & Q.negative(Symbol('x'))) == pi\n    assert refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.positive(Symbol('y')) & Q.zero(Symbol('x'))) == pi/2\n    assert refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.negative(Symbol('y')) & Q.zero(Symbol('x'))) == -pi/2\n    assert refine_atan2(atan2(Symbol('y'), Symbol('x')), Q.zero(Symbol('y')) & Q.zero(Symbol('x'))) == nan\n\n\ndef test_refine_re():\n    assert refine_re(re(Symbol('x')), Q.real(Symbol('x'))) == Symbol('x')\n    assert refine_re(re(I*Symbol('x')), Q.imaginary(Symbol('x'))) == 0\n\n\ndef test_refine_im():\n    assert refine_im(im(Symbol('x')), Q.real(Symbol('x'))) == 0\n    assert refine_im(im(I*Symbol('x')), Q.imaginary(Symbol('x'))) == -I*Symbol('x')\n\n\ndef test_refine_arg():\n    assert refine_arg(arg(Symbol('x')), Q.positive(Symbol('x'))) == 0\n    assert refine_arg(arg(Symbol('x')), Q.negative(Symbol('x'))) == pi\n\n\ndef test_refine_sign():\n    assert refine_sign(sign(Symbol('x')), Q.positive(Symbol('x')) & Q.nonzero(Symbol('x'))) == 1\n    assert refine_sign(sign(Symbol('x')), Q.negative(Symbol('x')) & Q.nonzero(Symbol('x'))) == -1\n    assert refine_sign(sign(0), Q.zero(Symbol('x'))) == 0\n    y = Symbol('y', imaginary = True)\n    assert refine_sign(sign(y), Q.positive(im(y))) == I\n    assert refine_sign(sign(y), Q.negative(im(y))) == -I\n\n\ndef test_refine_matrixelement():\n    X = MatrixSymbol('X', 3, 3)\n    assert refine_matrixelement(X[0, 1], Q.symmetric(X)) == X[0, 1]\n    assert refine_matrixelement(X[1, 0], Q.symmetric(X)) == X[0, 1]\n\n\n\n"], "sample_85": ["\nfrom _pytest.mark import pytest_configure, get_empty_parameterset_mark\nfrom _pytest.mark import Mark\nfrom unittest import mock\nfrom unittest.mock import patch\nimport _pytest.mark.evaluate as evaluate\nfrom _pytest.nodes import Item\nfrom typing import Dict\n\n\nclass TestMarkEvaluator:\n    def test_mark_evaluator_init(self):\n        item = Item()\n        mark_evaluator = evaluate.MarkEvaluator(item, \"my_mark\")\n        assert mark_evaluator.item == item\n        assert mark_evaluator._marks is None\n        assert mark_evaluator._mark is None\n        assert mark_evaluator._mark_name == \"my_mark\"\n\n    def test_mark_evaluator_bool(self):\n        item = Item()\n        mark_evaluator = evaluate.MarkEvaluator(item, \"my_mark\")\n\n        # When there are no marks, it should be False\n        assert not mark_evaluator\n\n        # When there is a mark, it should be True\n        mark = Mark.from_string(\"my_mark\")\n        item.add_marker(mark)\n        assert mark_evaluator\n\n    def test_mark_evaluator_wasvalid(self):\n        item = Item()\n        mark_evaluator = evaluate.MarkEvaluator(item, \"my_mark\")\n        assert mark_evaluator.wasvalid()\n\n        # Set exc attribute and check if it's invalid\n        mark_evaluator.exc = Exception(\"Test\")\n        assert not mark_evaluator.wasvalid()\n\n    def test_mark_evaluator_invalidraise(self):\n        item = Item()\n        mark_evaluator = evaluate.MarkEvaluator(item, \"my_mark\")\n        mark = Mark.from_string(\"my_mark, raises=ValueError\")\n        item.add_marker(mark)\n\n        # When exception type matches the raise condition, return None\n        with patch(\"builtins.eval\") as mock_eval:\n            mock_eval.return_value = True\n            assert mark_evaluator.invalidraise(ValueError) is None\n\n        # When exception type doesn't match, return False\n        with patch(\"builtins.eval\") as mock_eval:\n            mock_eval.return_value = True\n            assert mark_evaluator.invalidraise(TypeError) is False\n\n    def test_mark_evaluator_istrue(self):\n        item = Item()\n        mark_evaluator = evaluate.MarkEvaluator(item, \"my_mark\")\n\n        # Test with \"condition\" keyword argument\n        mark = Mark.from_string(\"my_mark, condition=True\")\n        item.add_marker(mark)\n        assert mark_evaluator._istrue() is True\n\n        # Test with multiple conditions\n        mark = Mark.from_string(\"my_mark, condition=('a', 'b')\")\n        item.add_marker(mark)\n        assert mark_evaluator._istrue() is True\n\n        # Test with a condition that evaluates to False\n        mark = Mark.from_string(\"my_mark, condition=False\")\n        item.add_marker(mark)\n        assert mark_evaluator._istrue() is False\n\n        # Test with empty condition (should evaluate to True)\n        mark = Mark.from_string(\"my_mark\")\n        item.add_marker(mark)\n        assert mark_evaluator._istrue() is True\n\n        # Test with a SyntaxError\n        with patch(\"builtins.eval\") as mock_eval:\n            mock_eval.side_effect = SyntaxError(\"invalid syntax\")\n            with pytest.raises(Exception) as excinfo:\n                mark_evaluator._istrue()\n            assert \"SyntaxError: invalid syntax\" in str(excinfo.value)\n\n    def test_mark_evaluator_get(self):\n        item = Item()\n        mark_evaluator = evaluate.MarkEvaluator(item, \"my_mark\")\n        mark = Mark.from_string(\"my_mark, reason='test reason'\")\n        item.add_marker(mark)\n\n        assert mark_evaluator.get(\"reason\") == \"test reason\"\n        assert mark_evaluator.get(\"unexistent_key\") is None\n\n    def test_mark_ evaluator_getexplanation(self):\n        item = Item()\n        mark_evaluator = evaluate.MarkEvaluator(item, \"my_mark\")\n        mark = Mark.from_string(\"my_mark, reason='test reason'\")\n        item.add_marker(mark)\n\n        assert mark_evaluator.getexplanation() == \"test reason\"\n\n\n"], "sample_57": ["\nfrom django.utils.html import (\n    conditional_escape,\n    escape,\n    escapejs,\n    format_html,\n    html_safe,\n    json_script,\n    linebreaks,\n    smart_urlquote,\n    strip_spaces_between_tags,\n    strip_tags,\n    urlize,\n)\nimport unittest\n\n\nclass TestHTMLUtils(unittest.TestCase):\n\n    def test_escape(self):\n        self.assertEqual(escape(\"Hello &world;\"), \"Hello &amp;world;\")\n        self.assertEqual(escape(\"Hello <world>\"), \"Hello &lt;world&gt;\")\n        self.assertEqual(escape(\"Hello <script>\"), \"Hello &lt;script&gt;\")\n        self.assertEqual(escape(None), \"\")\n        self.assertEqual(escape(\" \"), \" \")\n\n    def test_conditional_escape(self):\n        class MySafeString(SafeString):\n            pass\n\n        self.assertEqual(conditional_escape(\"Hello &world;\"), \"Hello &amp;world;\")\n        self.assertEqual(conditional_escape(MySafeString(\"Hello &world;\")), \"Hello &world;\")\n        self.assertEqual(conditional_escape(\"Hello <world>\"), \"Hello &lt;world&gt;\")\n\n    def test_escapejs(self):\n        self.assertEqual(escapejs(\"Hello world \"), \"Hello world \")\n        self.assertEqual(escapejs(\"Hello\\\"world\"), \"Hello\\\\\\\"world\")\n        self.assertEqual(escapejs(\"Hello\\nworld\"), \"Hello\\\\nworld\")\n\n    def test_json_script(self):\n        self.assertEqual(\n            json_script({\"name\": \"John Doe\"}),\n            '{\"name\":\"John Doe\"}',\n        )\n        self.assertEqual(\n            json_script({\"name\": \"John Doe\"}, element_id=\"my-script\"),\n            '<script id=\"my-script\" type=\"application/json\">{\"name\":\"John Doe\"}</script>',\n        )\n\n    def test_format_html(self):\n        self.assertEqual(format_html(\"Hello {0}!\", \"world\"), \"Hello world!\")\n        self.assertEqual(format_html(\"Hello {name}!\", name=\"world\"), \"Hello world!\")\n        self.assertEqual(format_html(\"Hello {0} {1}!\", \"world\", \"!\") , \"Hello world !\")\n        self.assertEqual(format_html(\"Hello {name}!\", name=None), \"Hello !\")\n\n    def test_format_html_join(self):\n        self.assertEqual(\n            format_html_join(\" \", \"<li>{0} {1}</li>\", ((1, 2), (3, 4))),\n            \"<li>1 2</li><li>3 4</li>\",\n        )\n\n    def test_linebreaks(self):\n        self.assertEqual(linebreaks(\"\\nThis is a test.\"), \"<p>This is a test.</p>\")\n        self.assertEqual(linebreaks(\"\\nThis\\n is a test.\\n\"), \"<p>This<br> is a test.</p>\")\n        self.assertEqual(\n            linebreaks(\"\\nThis\\n is a test.\\n\", autoescape=True),\n            '<p>This<br> is a test.</p>',\n        )\n\n    def test_strip_tags(self):\n        self.assertEqual(strip_tags(\"<b>This is a test</b>\"), \"This is a test\")\n        self.assertEqual(strip_tags(\"<p>This is a <a href=\"#\">test</a>.</p>\"), \"This is a test.\")\n        # Test for IDN in URLs\n        self.assertEqual(strip_tags(\"<a href='http://xn--bcher-mca.de'>Test</a>\"), \"Test\")\n\n    def test_strip_spaces_between_tags(self):\n        self.assertEqual(strip_spaces_between_tags(\"<div>  <p>This is a test</p>  </div>\"), \"<div><p>This is a test</p></div>\")\n\n    def test_smart_urlquote(self):\n        self.assertEqual(smart_urlquote(\"http://www.example.com\"), \"http://www.example.com\")\n        self.assertEqual(smart_urlquote(\"www.example.com\"), \"http://www.example.com\")\n        self.assertEqual(smart_urlquote(\"https://example.com\"), \"https://example.com\")\n\n    def test_urlize(self):\n        self.assertEqual(urlize(\"This is a test http://www.example.com\"), \"This is a test <a href=\\\"http://www.example.com\\\">http://www.example.com</a>\")\n        self.assertEqual(urlize(\"This is a test example@example.com\"), \"This is a test <a href=\\\"mailto:example@example.com\\\">example@example.com</a>\")\n        self.assertEqual(urlize(\"This is a test https://example.com/foo\"), \"This is a test <a href=\\\"https://example.com/foo\\\">https://example.com/foo</a>\")\n\n    def test_avoid_wrapping(self):\n        self.assertEqual(avoid_wrapping(\"This is a test\"), \"This is a test\")\n        self.assertEqual(avoid_wrapping(\"This is a test.\\n\"), \"This is a test.\\n\")\n        self.assertEqual(avoid_wrapping(\"This is a test\\t\"), \"This is a test\\t\")\n        self.assertEqual(avoid_wrapping(\"This is a test \"), \"This is a test \")\n\n\n\n"], "sample_13": ["\nfrom django.db.models.deletion import (\n    CASCADE, PROTECT, SET, SET_NULL, SET_DEFAULT, DO_NOTHING,\n    Collector, ProtectedError\n)\nfrom django.db import connections, models\nfrom django.db.models import signals, sql\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\nfrom django.core.exceptions import InternalError\n\n\nclass TestDeletion(TestCase):\n\n    @override_settings(DATABASE_ROUTERS=[['default', 'router.router']])\n    def setUp(self):\n        class Parent(models.Model):\n            id = models.AutoField(primary_key=True)\n            parent_field = models.ForeignKey(\n                'Child', on_delete=CASCADE, null=True, related_name='parent_relation'\n            )\n\n        class Child(models.Model):\n            id = models.AutoField(primary_key=True)\n            child_field = models.ForeignKey(\n                'Parent', on_delete=PROTECT, related_name='child_relation'\n            )\n\n        # Create test database\n        self.db_name = 'test_db'\n        connections['default'].close()\n        connections['default'] = connections['default'].using(database=self.db_name)\n\n        self.models = [Parent, Child]\n\n    def tearDown(self):\n        connections['default'].close()\n        if self.db_name:\n            connections['default'] = connections['default'].using(database='default')\n\n    def test_collector_add_and_get(self):\n        collector = Collector('default')\n\n        objs = [Parent(), Parent(), Parent()]\n        collector.add(objs)\n        self.assertEqual(len(collector.data['Parent']), len(objs))\n\n    def test_collector_add_with_source(self):\n        collector = Collector('default')\n        parent_objs = [Parent(), Parent(), Parent()]\n        child_objs = [Child() for _ in parent_objs]\n        collector.add(parent_objs, source='Parent', nullable=False)\n\n        for i, (p, c) in enumerate(zip(parent_objs, child_objs)):\n            p.child_relation.add(c)\n\n        self.assertEqual(len(collector.data['Parent']), 3)\n        self.assertEqual(len(collector.data['Child']), 3)\n        self.assertEqual(collector.dependencies['Parent']['Child'], len(collector.data['Child']))\n\n    def test_collector_related_objects(self):\n        collector = Collector('default')\n        parent_objs = [Parent.objects.create(parent_field=None)]\n        child_objs = [Child.objects.create(child_field=None)]\n        collector.collect(parent_objs, source='Parent', nullable=True)\n        collector.collect(child_objs, source='Child', nullable=True)\n\n        self.assertEqual(len(collector.data['Parent']), 1)\n        self.assertEqual(len(collector.data['Child']), 1)\n\n    def test_collector_dependencies(self):\n        collector = Collector('default')\n        parent_objs = [Parent()]\n        child_objs = [Child()]\n        collector.add(parent_objs, source='Parent', nullable=False)\n        collector.add(child_objs, source='Child', nullable=False)\n        collector.collect(child_objs, source='Child', nullable=False)\n        self.assertEqual(collector.dependencies['Parent']['Child'], 1)\n\n    def test_collector_can_fast_delete(self):\n        collector = Collector('default')\n        objs = [Parent()]\n        self.assertTrue(collector.can_fast_delete(objs))\n\n    def test_collector_can_fast_delete_with_relations(self):\n        collector = Collector('default')\n        objs = [Parent()]\n        collector.collect(objs, source='Parent', nullable=False)\n        self.assertFalse(collector.can_fast_delete(objs))\n\n    def test_collector_delete_single_object(self):\n        parent_obj = Parent()\n        child_obj = Child(child_field=parent_obj)\n        parent_obj.save()\n        child_obj.save()\n\n        collector = Collector('default')\n        collector.add([child_obj])\n        deleted_count, deleted_objects = collector.delete()\n        self.assertEqual(deleted_count, 1)\n\n    def test_collector_delete_multiple_objects(self):\n        parent_objs = [Parent() for _ in range(3)]\n        child_objs = [Child(child_field=parent) for parent in parent_objs]\n        for parent, child in zip(parent_objs, child_objs):\n            parent.save()\n            child.save()\n\n        collector = Collector('default')\n        collector.add(child_objs)\n        deleted_count, deleted_objects = collector.delete()\n        self.assertEqual(deleted_count, 3)\n\n    def test_collector_protected_error(self):\n        with self.assertRaises(ProtectedError):\n            collector = Collector('default')\n            parent_obj = Parent()\n            collector.add([parent_obj], source='Parent', nullable=False)\n            collector.delete()\n\n    def test_collector_cascade_on_delete(self):\n        parent_obj = Parent()\n        child_obj = Child(child_field=parent_obj)\n        parent_obj.save()\n        child_obj.save()\n\n        collector = Collector('default')\n        collector.add([parent_obj], source='Parent', nullable=False)\n        deleted_count, deleted_objects = collector.delete()\n\n        self.assertEqual(deleted_count, 2)\n\n\n    def test_on_delete_functionality(self):\n        collector = Collector('default')\n        parent_objs = [Parent(), Parent()]\n        collector.add(parent_objs, source='Parent', nullable=False)\n        collector.collect(parent_objs, source='Parent', nullable=False)\n        deleted_count, deleted_objects = collector.delete()\n        self.assertEqual(deleted_count, 2)\n\n    def test_set_on_delete(self):\n        collector = Collector('default')\n        parent_objs = [Parent()]\n        collector.add(parent_objs, source='Parent', nullable=False)\n        collector.collect(parent_objs, source='Parent', nullable=False)\n\n        collector.data['Parent'][0].parent_field = None\n        deleted_count, deleted_objects = collector.delete()\n        self.assertEqual(deleted_count, 1)\n\n\n\n"], "sample_43": ["\nfrom django.db import IntegrityError, connection, migrations, models, transaction\nfrom django.db.migrations.state import ModelState, ProjectState\nfrom django.db.models.functions import Abs\nfrom django.test import TestCase\nfrom django.test.utils import get_migrations\n\n\nclass TestModelOperations(TestCase):\n\n    def setUp(self):\n        self.app_label = 'my_app'\n        self.model_name = 'MyModel'\n\n    def create_app_state(self):\n        project_state = ProjectState()\n        state = ModelState(app_label=self.app_label)\n        project_state.add_app(self.app_label, state)\n        return project_state\n\n    def create_model(self, app_state):\n        model = models.Model(\n            name=models.CharField(max_length=255),\n            age=models.IntegerField(),\n        )\n        app_state.models[self.app_label, self.model_name] = model\n        return model\n\n    def test_add_field(self):\n        project_state = self.create_app_state()\n        model = self.create_model(project_state)\n        operation = AddField(\n            self.app_label,\n            self.model_name,\n            'description',\n            models.TextField(),\n        )\n        operation.apply(project_state, migration=None)\n        model = project_state.models[self.app_label, self.model_name]\n        self.assertIn('description', model._meta.fields)\n\n    def test_remove_field(self):\n        project_state = self.create_app_state()\n        model = self.create_model(project_state)\n        model._meta.fields.append(\n            models.CharField(max_length=255, name='description')\n        )\n        operation = RemoveField(self.app_label, self.model_name, 'description')\n        operation.apply(project_state, migration=None)\n        model = project_state.models[self.app_label, self.model_name]\n        self.assertNotIn('description', model._meta.fields)\n\n    def test_rename_field(self):\n        project_state = self.create_app_state()\n        model = self.create_model(project_state)\n        model._meta.fields.append(\n            models.CharField(max_length=255, name='name')\n        )\n        operation = RenameField(self.app_label, self.model_name, 'name', 'new_name')\n        operation.apply(project_state, migration=None)\n        model = project_state.models[self.app_label, self.model_name]\n        self.assertEqual(model._meta.get_field('new_name').name, 'new_name')\n\n    def test_add_model(self):\n        project_state = self.create_app_state()\n        operation = AddModel(self.app_label, 'MyOtherModel', '')\n        operation.apply(project_state, migration=None)\n        self.assertIn('MyOtherModel', project_state.models)\n\n    def test_delete_model(self):\n        project_state = self.create_app_state()\n        model = self.create_model(project_state)\n        operation = DeleteModel(self.app_label, self.model_name)\n        operation.apply(project_state, migration=None)\n        self.assertNotIn(self.model_name, project_state.models)\n\n    def test_rename_model(self):\n        project_state = self.create_app_state()\n        model = self.create_model(project_state)\n        operation = RenameModel(\n            self.app_label, self.model_name, 'RenamedModel'\n        )\n        operation.apply(project_state, migration=None)\n        self.assertIn('RenamedModel', project_state.models)\n        self.assertNotIn(self.model_name, project_state.models)\n\n    def test_alter_model_table(self):\n        project_state = self.create_app_state()\n        model = self.create_model(project_state)\n        operation = AlterModelTable(self.app_label, self.model_name, 'new_table_name')\n        operation.apply(project_state, migration=None)\n        self.assertEqual(\n            project_state.models[self.app_label, self.model_name]._meta.db_table, 'new_table_name'\n        )\n\n    def test_alter_index(self):\n        project_state = self.create_app_state()\n        model = self.create_model(project_state)\n        operation = AddIndex(self.app_label, self.model_name, models.Index(fields=['name'], name='my_index'))\n        operation.apply(project_state, migration=None)\n        self.assertTrue(model._meta.get_indexes()[0].name == 'my_index')\n\n    def test_remove_index(self):\n        project_state = self.create_app_state()\n        model = self.create_model(project_state)\n        model._meta.indexes.append(Index(fields=['name'], name='my_index'))\n        operation = RemoveIndex(self.app_label, self.model_name, 'my_index')\n        operation.apply(project_state, migration=None)\n        self.assertFalse(any(index.name == 'my_index' for index in model._meta.indexes))\n\n\n\n"], "sample_41": ["\nfrom django.contrib.admin.views.autocomplete import AutocompleteJsonView\nfrom django.contrib.admin.models import LogEntry\nfrom django.test import TestCase\nfrom django.http import QueryDict\nfrom django.shortcuts import reverse\n\nclass TestAutocompleteJsonView(TestCase):\n    def setUp(self):\n        # Create a dummy model for testing\n        class DummyModel(LogEntry):\n            pass\n        \n        # Register the dummy model with Django\n        apps.app_configs[LogEntry._meta.app_label].models_manual.append(DummyModel)\n\n    def test_process_request_valid(self):\n        request = self.create_request(\"app_label\", \"model_name\", \"field_name\", \"term\")\n        view = AutocompleteJsonView()\n        try:\n            view.process_request(request)\n        except Exception as e:\n            self.fail(f\"Process request failed with error: {e}\")\n\n    def test_process_request_missing_params(self):\n        request = self.create_request(None, \"model_name\", \"field_name\", \"term\")\n        view = AutocompleteJsonView()\n        with self.assertRaises(PermissionDenied):\n            view.process_request(request)\n\n    def test_process_request_invalid_app_model(self):\n        request = self.create_request(\"app_label\", \"invalid_model\", \"field_name\", \"term\")\n        view = AutocompleteJsonView()\n        with self.assertRaises(PermissionDenied):\n            view.process_request(request)\n\n    def test_process_request_invalid_field(self):\n        request = self.create_request(\"app_label\", \"model_name\", \"invalid_field\", \"term\")\n        view = AutocompleteJsonView()\n        with self.assertRaises(PermissionDenied):\n            view.process_request(request)\n\n    def test_process_request_missing_to_field(self):\n        request = self.create_request(\"app_label\", \"model_name\", \"field_name\", \"term\")\n        view = AutocompleteJsonView()\n        with self.assertRaises(PermissionDenied):\n            view.process_request(request)\n\n    def test_process_request_not_allowed_to_field(self):\n        request = self.create_request(\"app_label\", \"model_name\", \"field_name\", \"term\")\n        view = AutocompleteJsonView()\n        with self.assertRaises(PermissionDenied):\n            view.process_request(request)\n    \n    def test_get(self):\n        request = self.create_request(\"app_label\", \"model_name\", \"field_name\", \"term\")\n        view = AutocompleteJsonView()\n        view.process_request(request)\n        response = view.get(request)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.json()['results'], [])  \n        self.assertTrue(response.json()['pagination']['more'])\n\n    def create_request(self, app_label=None, model_name=\"LogEntry\", field_name=\"content_type_id\", term=\"test\"):\n        data = {\n            'app_label': app_label,\n            'model_name': model_name,\n            'field_name': field_name,\n            'term': term,\n        }\n        return QueryDict(data, mutable=True)\n\n"], "sample_39": ["\nfrom django.test import SimpleTestCase\nfrom django.urls import (\n    NoReverseMatch,\n    Resolver404,\n    ResolverMatch,\n    URLPattern,\n    URLResolver,\n    get_callable,\n    get_resolver,\n    get_urlconf,\n    include,\n    path,\n    re_path,\n    resolve,\n    reverse,\n    reverse_lazy,\n)\nfrom django.urls.resolvers import RegexPattern\nfrom django.http import HttpResponse\n\nclass TestURLResolver(SimpleTestCase):\n\n    def setUp(self):\n        self.resolver = URLResolver(RegexPattern(r'^'), 'my_app.urls')  \n\n    def test_basic_reverse(self):\n        self.assertEqual(reverse('view_name', args=['arg1', 'arg2']), '/view_name/arg1/arg2')\n\n    def test_named_args(self):\n        self.assertEqual(reverse('view_name', kwargs={'name': 'John Doe'}), '/view_name/?name=John+Doe')\n\n    def test_reverse_with_kwargs(self):\n        self.assertEqual(reverse('view_name', kwargs={'age': 30}), '/view_name/?age=30')\n\n    def test_reverse_with_pos_args(self):\n        self.assertEqual(reverse('view_name', args=['arg1', 'arg2']), '/view_name/arg1/arg2')\n\n    def test_reverse_with_combined_args(self):\n        self.assertEqual(reverse('view_name', kwargs={'name': 'John Doe'}, args=['arg1']), '/view_name/arg1/?name=John+Doe')\n\n    def test_reverse_with_urlconf(self):\n        from django.conf.urls import url\n        from my_app.views import my_view\n        urlpatterns = [url(r'^my_view/(?P<name>[\\w]+)/$', my_view)]\n        resolver = get_resolver(urlpatterns)\n        self.assertEqual(resolver.reverse('my_view', kwargs={'name': 'John'}), '/my_view/John/')\n\n    def test_reverse_with_nested_urlconf(self):\n        from django.conf.urls import url, include\n        urlpatterns = [\n            url(r'^', include('my_app.urls')),\n        ]\n        from my_app.urls import urlpatterns as my_app_urlpatterns\n        my_app_urlpatterns = [\n            url(r'^my_view/(?P<name>[\\w]+)/$', my_view), \n        ]\n\n        resolver = get_resolver(urlpatterns)\n\n        self.assertEqual(resolver.reverse('my_view', kwargs={'name': 'John'}), '/my_view/John/')\n\n\n\n    def test_resolve_path(self):\n        self.resolver = URLResolver(RegexPattern(r'^'), 'my_app.urls')\n        from my_app.views import my_view\n        urlpatterns = [\n            path('my_view/<name>/', my_view), \n        ]\n        self.resolver.urlconf_module = urlpatterns\n        result = self.resolver.resolve('/my_view/John/')\n        self.assertEqual(result.func, my_view)\n        self.assertEqual(result.kwargs, {'name': 'John'})\n\n    def test_resolve_path_with_args(self):\n        self.resolver = URLResolver(RegexPattern(r'^'), 'my_app.urls')\n        from my_app.views import my_view\n        urlpatterns = [\n            path('my_view/<name>/<int:age>/', my_view), \n        ]\n        self.resolver.urlconf_module = urlpatterns\n        result = self.resolver.resolve('/my_view/John/30')\n        self.assertEqual(result.func, my_view)\n        self.assertEqual(result.kwargs, {'name': 'John', 'age': 30})\n\n    def test_resolve_missing_path(self):\n        with self.assertRaises(Resolver404):\n            self.resolver.resolve('/unknown_path')\n\n    def test_resolve_incorrect_path(self):\n        with self.assertRaises(Resolver404):\n            self.resolver.resolve('/my_view/John/wrong/')\n\n    def test_URLResolver_check(self):\n        resolver = URLResolver(RegexPattern(r'^'), 'my_app.urls')\n        with self.assertRaises(ImproperlyConfigured):\n            resolver.check()\n\n\n"], "sample_65": ["\nfrom django.utils.numberformat import format as nformat\nfrom decimal import Decimal\n\ndef test_format_int():\n    assert nformat(1234567890, ',') == '1,234,567,890'\n\ndef test_format_float():\n    assert nformat(3.1415926535, ',') == '3,141,592.6535'\n\ndef test_format_float_with_decimal_pos():\n    assert nformat(3.1415926535, ',', decimal_pos=2) == '3,14'\n\ndef test_format_float_with_decimal_pos_zero():\n    assert nformat(3.1415926535, ',', decimal_pos=0) == '3'\n\ndef test_format_negative_number():\n    assert nformat(-1234567890, ',') == '-1,234,567,890'\n\ndef test_format_empty_string():\n    assert nformat('', ',') == ''\n\ndef test_format_none():\n    assert nformat(None, ',') is None\n\ndef test_format_with_grouping():\n    assert nformat(1234567890, ',', grouping=3) == '1,234,567,890'\n\ndef test_format_with_thousand_sep():\n    assert nformat(1234567890, ',', thousand_sep='.') == '1.234.567.890'\n\ndef test_format_with_grouping_and_thousand_sep():\n    assert nformat(1234567890, ',', grouping=3, thousand_sep='.') == '1.234.567.890'\n\ndef test_format_large_decimal():\n    large_decimal = Decimal(\"1.23456789012345678901234567890123456789\")\n    assert nformat(large_decimal, ',', decimal_pos=10) == '1.234567890123456789e+20'\n\n    \n"], "sample_82": ["\nimport unittest\nimport logging\nfrom _pytest.logging import (\n    _LiveLoggingStreamHandler,\n    pytest_addoption,\n    pytest_configure,\n    pytest_setup_logging,\n    ColoredLevelFormatter,\n)\nfrom _pytest.capture import CaptureManager\nfrom _pytest.config import Config\nfrom _pytest.terminal import TerminalReporter\n\n\nclass TestLoggingPlugin(unittest.TestCase):\n    def test_colored_level_formatter(self):\n        formatter = ColoredLevelFormatter(\n            create_terminal_writer(Config()),\n            log_format=\"%(levelname)s: %(message)s\",\n            datefmt=None,\n        )\n        self.assertIn(\"%(levelname)s\", formatter._fmt)\n        self.assertIn(\"%(message)s\", formatter._fmt)\n\n\n    def test_pytest_addoption(self):\n        with patch(\"sys.argv\", [\"py.test\", \"--no-print-logs\"]):\n            pytest_addoption(Config())\n            config = Config()\n            self.assertFalse(config.get(\"log_print\"))\n\n\n    def test_pytest_configure(self):\n        config = Config()\n        pytest_configure(config)\n\nclass TestCaptureManager(unittest.TestCase):\n    def test_setup_disable_capture_manager(self):\n        capture_manager = CaptureManager(None)\n        with capture_manager.global_and_fixture_disabled() as captured:\n            with capture_manager.capture_calls() as captured_calls:\n                pass\n\n        self.assertFalse(captured, \"Global capture should be disabled\")\n        self.assertFalse(captured_calls, \"Calls capture should be disabled\")\n\n    def test_reset_capture_manager(self):\n        capture_manager = CaptureManager(None)\n        with capture_manager.capture_calls() as captured_calls:\n            print(\"This will be captured\")\n\n        capture_manager.reset_capture()\n\n        with capture_manager.capture_calls() as captured_calls:\n            print(\"This will not be captured\")\n\n        self.assertFalse(captured_calls, \"Calls capture should be reset\")\n\n    def test_pytest_configure_logging(self):\n        config = Config()\n        pytest_configure(config)\n        self.assertIsInstance(config.pluginmanager.plugins[0], logging.Handler)\n        self.assertIsInstance(config.pluginmanager.plugins[1], logging.Handler)\n\n    def test_live_logging_stream_handler(self):\n        terminal_reporter = TerminalReporter(Config())\n        capture_manager = CaptureManager(Config())\n        handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        handler.reset()\n        handler.set_when(\"setup\")\n        handler.emit(logging.LogRecord(\n            name='test',\n            level=logging.INFO,\n            msg='This is a test message',\n            args=(),\n            kwargs={}\n        ))\n        stream = six.BytesIO()\n        handler.stream = stream\n        handler.emit(logging.LogRecord(\n            name='test',\n            level=logging.INFO,\n            msg='This is another test message',\n            args=(),\n            kwargs={}\n        ))\n        self.assertIn(b\"\\n\", stream.getvalue())\n        self.assertIn(b\"live log setup\", stream.getvalue())\n\n"], "sample_63": ["\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    serializer_factory,\n    Serializer,\n)\nfrom django.db import models\nfrom django.utils import timezone\nimport decimal\nimport enum\nimport functools\nimport pathlib\nimport re\nimport uuid\nfrom django.conf import settings\nfrom unittest import TestCase  \n\nclass SerializerTest(TestCase):\n\n    def test_serializer_factory(self):\n        self.assertEqual(serializer_factory(10), BaseSimpleSerializer(10))\n        self.assertEqual(serializer_factory(\"hello\"), BaseSimpleSerializer(\"hello\"))\n        self.assertEqual(serializer_factory(True), BaseSimpleSerializer(True))\n        self.assertEqual(serializer_factory(decimal.Decimal(\"1.23\")), DecimalSerializer(decimal.Decimal(\"1.23\")))\n        self.assertEqual(serializer_factory(datetime.datetime.now()), DatetimeDatetimeSerializer(timezone.now()))\n        self.assertEqual(serializer_factory(timezone.now()), DateTimeSerializer(timezone.now()))\n\n        # Test for function types\n        def my_function():\n            return None\n        self.assertEqual(serializer_factory(my_function).__class__.__name__, 'FunctionTypeSerializer')\n\n\n    def test_serializer_factory_with_deconstructable(self):\n        class MyModel(models.Model):\n            pass\n        field = models.CharField(max_length=100)\n        deconstruct_args = field.deconstruct()\n        serializer = serializer_factory(field)\n        self.assertEqual(serializer.__class__.__name__, 'ModelFieldSerializer')\n        self.assertEqual(serializer.serialize(), serializer_factory(deconstruct_args).serialize())\n\n    def test_serializer_factory_with_enum(self):\n        class MyEnum(enum.Enum):\n            VALUE1 = 1\n            VALUE2 = 2\n        serializer = serializer_factory(MyEnum.VALUE1)\n        self.assertEqual(serializer.__class__.__name__, 'EnumSerializer')\n\n\n\n"], "sample_18": ["\nfrom django.contrib.admin.sites import AdminSite, AlreadyRegistered, NotRegistered, all_sites\nfrom django.contrib.auth.models import User\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.test import Client, TestCase\nfrom django.test.utils import override_settings\nfrom django.urls import reverse\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.utils.timezone import now\nimport unittest\n\nclass TestAdminSite(TestCase):\n\n    def setUp(self):\n        all_sites.clear()\n        self.site = AdminSite()\n        self.client = Client()\n        self.user = User.objects.create_user('testuser', 'test@example.com', 'testpassword')\n        self.user.is_staff = True\n        self.user.save()\n        self.client.login(username='testuser', password='testpassword')\n\n    def test_register_model(self):\n        from django.db import models\n        class TestModel(models.Model):\n            name = models.CharField(max_length=255)\n\n        class TestAdmin(AdminSite):\n            pass\n\n        self.site.register(TestModel, TestAdmin)\n        self.assertIn(TestModel, self.site._registry)\n\n    def test_register_duplicate_model(self):\n        from django.db import models\n        class TestModel(models.Model):\n            name = models.CharField(max_length=255)\n\n        class TestAdmin(AdminSite):\n            pass\n\n        self.site.register(TestModel, TestAdmin)\n        with self.assertRaises(AlreadyRegistered):\n            self.site.register(TestModel, TestAdmin)\n\n    def test_unregister_model(self):\n        from django.db import models\n        class TestModel(models.Model):\n            name = models.CharField(max_length=255)\n\n        class TestAdmin(AdminSite):\n            pass\n\n        self.site.register(TestModel, TestAdmin)\n        self.assertIn(TestModel, self.site._registry)\n        self.site.unregister(TestModel)\n        self.assertNotIn(TestModel, self.site._registry)\n\n    def test_unregister_non_registered_model(self):\n        from django.db import models\n        class TestModel(models.Model):\n            name = models.CharField(max_length=255)\n\n        class TestAdmin(AdminSite):\n            pass\n\n        with self.assertRaises(NotRegistered):\n            self.site.unregister(TestModel)\n\n    def test_abstract_model_registration(self):\n        from django.db import models\n\n        class AbstractModel(models.Model):\n            class Meta:\n                abstract = True\n\n        with self.assertRaises(ImproperlyConfigured):\n            self.site.register(AbstractModel)\n\n    def test_add_action(self):\n        self.site.add_action(delete_selected, name='my_action')\n        self.assertIn('my_action', self.site._actions)\n\n    def test_disable_action(self):\n        self.site.add_action(delete_selected, name='my_action')\n        self.assertIn('my_action', self.site._actions)\n        self.site.disable_action('my_action')\n        self.assertNotIn('my_action', self.site._actions)\n\n    def test_get_action(self):\n        self.site.add_action(delete_selected, name='my_action')\n        self.assertIn('my_action', self.site._actions)\n        action = self.site.get_action('my_action')\n        self.assertEqual(action, delete_selected)\n\n    def test_has_permission(self):\n        self.assertTrue(self.site.has_permission(self.client.request))\n        self.client.logout()\n        self.assertFalse(self.site.has_permission(self.client.request))\n\n    def test_each_context(self):\n        context = self.site.each_context(self.client.request)\n        self.assertIn('site_title', context)\n        self.assertIn('site_header', context)\n        self.assertIn('site_url', context)\n        self.assertTrue(context['has_permission'])\n\n    def test_admin_view(self):\n        @self.site.admin_view\n        def my_view(request):\n            return 'Hello'\n\n        urlpatterns = [\n            path('my_view/', my_view),\n        ]\n        response = self.client.get(reverse('admin:my_view'))\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content, b'Hello')\n\n    def test_get_urls(self):\n        urlpatterns = self.site.get_urls()\n        self.assertIn(('^$', 'admin_site.index'), urlpatterns)\n\n\n\n"], "sample_86": ["\nimport unittest\nfrom _pytest.junitxml import LogXML, mangle_test_address, bin_xml_escape\nfrom _pytest import junitxml\n\n\nclass TestJunitXML(unittest.TestCase):\n\n    def test_bin_xml_escape(self):\n        self.assertEqual(bin_xml_escape(' '), '&nbsp;')\n        self.assertEqual(bin_xml_escape('\\t'), '&tab;')\n        self.assertEqual(bin_xml_escape('\\n'), '<br>')\n        self.assertEqual(bin_xml_escape('<'), '&lt;')\n        self.assertEqual(bin_xml_escape('>'), '&gt;')\n        self.assertEqual(bin_xml_escape('\"'), '&quot;')\n        self.assertEqual(bin_xml_escape('\\\\'), '&apos;')\n\n    def test_mangle_test_address(self):\n        self.assertEqual(mangle_test_address(\"test.function\"), [\"test\", \"function\"])\n        self.assertEqual(mangle_test_address(\"test.module::test.function\"), [\"test\", \"module\", \"test.function\"])\n        self.assertEqual(mangle_test_address(\"test.module::test.function[param1=value1]\"), [\"test\", \"module\", \"test.function[param1=value1]\"])\n        self.assertEqual(mangle_test_address(\"test::test.function\"), [\"test\", \"test.function\"])\n        self.assertEqual(mangle_test_address(\"test.module::Test.test.function\"), [\"test\", \"module\", \"Test.test.function\"])\n\n\n"], "sample_105": ["\nimport unittest\nimport numpy as np\nfrom sklearn.pipeline import Pipeline, FeatureUnion, make_pipeline, make_union\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.datasets import load_iris\nfrom sklearn.utils.estimator_checks import check_estimator\n\nclass TestPipeline(unittest.TestCase):\n    def test_pipeline_basic(self):\n        est = LinearRegression()\n        scaler = StandardScaler()\n        pipeline = Pipeline([('scaler', scaler), ('est', est)])\n        self.assertEqual(pipeline.steps, [('scaler', scaler), ('est', est)])\n\n    def test_pipeline_fit_transform(self):\n        X, y = load_iris(return_X_y=True)\n        est = LinearRegression()\n        scaler = StandardScaler()\n        pipeline = Pipeline([('scaler', scaler), ('est', est)])\n        Xt = pipeline.fit_transform(X, y)\n        self.assertEqual(len(Xt.shape), X.shape)\n\n    def test_pipeline_fit(self):\n        X, y = load_iris(return_X_y=True)\n        est = LinearRegression()\n        scaler = StandardScaler()\n        pipeline = Pipeline([('scaler', scaler), ('est', est)])\n        pipeline.fit(X, y)\n        self.assertEqual(est.coef_.shape, (est.coef_.shape[0],))\n        \n\n    def test_pipeline_transform(self):\n        X, y = load_iris(return_X_y=True)\n        est = LinearRegression()\n        scaler = StandardScaler()\n        pipeline = Pipeline([('scaler', scaler), ('est', est)])\n        pipeline.fit(X, y)\n        Xt = pipeline.transform(X)\n        self.assertEqual(len(Xt.shape), X.shape)\n\n    def test_pipeline_named_steps(self):\n        est = LinearRegression()\n        scaler = StandardScaler()\n        pipeline = Pipeline([('scaler', scaler), ('est', est)])\n        self.assertEqual(pipeline.named_steps['scaler'], scaler)\n        self.assertEqual(pipeline.named_steps['est'], est)\n\n    def test_pipeline_invalid_step(self):\n        with self.assertRaises(TypeError):\n            Pipeline([('scaler', StandardScaler()), ('invalid_step', 'invalid')])\n\n    def test_pipeline_fit_transform_passthrough(self):\n        X = np.array([[1, 2], [3, 4]])\n        pipeline = Pipeline([('passthrough', PassThrough())])\n        Xt = pipeline.fit_transform(X)\n        self.assertTrue(np.array_equal(Xt, X))\n\n    def test_pipeline_empty(self):\n        pipeline = Pipeline([])\n        Xt = pipeline.fit_transform(np.array([]))\n        self.assertEqual(Xt.shape, ())\n\n\nclass PassThrough(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X, y=None):\n        return X\n\n\n    \nclass TestFeatureUnion(unittest.TestCase):\n    def test_feature_union_basic(self):\n        pca = PCA(n_components=2)\n        svd = TruncatedSVD(n_components=1)\n        union = FeatureUnion([(\"pca\", pca), (\"svd\", svd)])\n        self.assertEqual(union.transformer_list, [(\"pca\", pca), (\"svd\", svd)])\n    \n    def test_feature_union_fit_transform(self):\n        X, y = load_iris(return_X_y=True)\n        pca = PCA(n_components=2)\n        svd = TruncatedSVD(n_components=1)\n        union = FeatureUnion([(\"pca\", pca), (\"svd\", svd)])\n        Xt = union.fit_transform(X)\n\n    def test_feature_union_fit_one_transformer(self):\n        X, y = load_iris(return_X_y=True)\n        pca = PCA(n_components=2)\n        svd = TruncatedSVD(n_components=1)\n        union = FeatureUnion([(\"pca\", pca), (\"svd\", svd)])\n        Xt = union.fit_transform(X)\n    \n    def test_feature_union_transform(self):\n        X, y = load_iris(return_X_y=True)\n        pca = PCA(n_components=2)\n        svd = TruncatedSVD(n_components=1)\n        union = FeatureUnion([(\"pca\", pca), (\"svd\", svd)])\n        union.fit(X)\n        Xt = union.transform(X)\n\n    def test_feature_union_get_feature_names(self):\n        pca = PCA(n_components=2)\n        svd = TruncatedSVD(n_components=1)\n        union = FeatureUnion([(\"pca\", pca), (\"svd\", svd)])\n        feature_names = union.get_feature_names()\n\n    def test_feature_union_empty(self):\n        union = FeatureUnion([])\n        Xt = union.fit_transform(np.array([]))\n        self.assertEqual(Xt.shape, ())\n\n    def test_feature_union_weights(self):\n        pca = PCA(n_components=2)\n        svd = TruncatedSVD(n_components=1)\n        union = FeatureUnion([(\"pca\", pca), (\"svd\", svd)],\n                             transformer_weights={'pca': 2, 'svd': 1})\n        X, y = load_iris(return_X_y=True)\n        Xt = union.fit_transform(X)\n        # Check that the weights are applied correctly\n\n\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n"], "sample_4": ["\nimport unittest\nfrom astropy.io import fits\nfrom astropy.wcs import WCS\n\nclass TestWCS(unittest.TestCase):\n\n    def test_wcs_from_header(self):\n        header = fits.Header.fromtext(\"\"\"\n        SIMPLE = T\n        BITPIX = -32\n        NAXIS = 2\n        NAXIS1 = 1024\n        NAXIS2 = 1024\n        CRPIX1 = 512.5\n        CRPIX2 = 512.5\n        CDELT1 = 0.1\n        CDELT2 = 0.1\n        CTYPE1 = 'RA---TAN'\n        CTYPE2 = 'DEC--TAN'\n        \"\"\")\n        wcs = WCS(header)\n        self.assertEqual(wcs.naxis, 2)\n        self.assertEqual(wcs.crpix[0], 512.5)\n        self.assertEqual(wcs.crpix[1], 512.5)\n        self.assertEqual(wcs.cdelt[0], 0.1)\n        self.assertEqual(wcs.cdelt[1], 0.1)\n        self.assertEqual(wcs.ctype[0], 'RA---TAN')\n        self.assertEqual(wcs.ctype[1], 'DEC--TAN')\n\n    def test_wcs_header_string(self):\n        header = fits.Header.fromtext(\"\"\"\n        SIMPLE = T\n        BITPIX = -32\n        NAXIS = 2\n        NAXIS1 = 1024\n        NAXIS2 = 1024\n        CRPIX1 = 512.5\n        CRPIX2 = 512.5\n        CDELT1 = 0.1\n        CDELT2 = 0.1\n        CTYPE1 = 'RA---TAN'\n        CTYPE2 = 'DEC--TAN'\n        \"\"\")\n        wcs = WCS(header)\n        header_string = wcs.to_header()\n        self.assertEqual(header_string, str(header))\n\n    def test_wcs_to_fits(self):\n        header = fits.Header.fromtext(\"\"\"\n        SIMPLE = T\n        BITPIX = -32\n        NAXIS = 2\n        NAXIS1 = 1024\n        NAXIS2 = 1024\n        CRPIX1 = 512.5\n        CRPIX2 = 512.5\n        CDELT1 = 0.1\n        CDELT2 = 0.1\n        CTYPE1 = 'RA---TAN'\n        CTYPE2 = 'DEC--TAN'\n        \"\"\")\n        wcs = WCS(header)\n\n        with io.StringIO() as output:\n            wcs.to_fits(output, overwrite=True)\n\n        hdu = fits.open(io.StringIO(output.getvalue()))\n        self.assertEqual(hdu[0].header, header)\n\n    def test_wcs_get_wcs_type(self):\n        header = fits.Header.fromtext(\"\"\"\n        SIMPLE = T\n        BITPIX = -32\n        NAXIS = 2\n        NAXIS1 = 1024\n        NAXIS2 = 1024\n        CRPIX1 = 512.5\n        CRPIX2 = 512.5\n        CDELT1 = 0.1\n        CDELT2 = 0.1\n        CTYPE1 = 'RA---TAN'\n        CTYPE2 = 'DEC--TAN'\n        \"\"\")\n        wcs = WCS(header)\n        self.assertEqual(wcs.wcs_type, 'celestial')\n\n    def test_wcs_sub(self):\n        header = fits.Header.fromtext(\"\"\"\n        SIMPLE = T\n        BITPIX = -32\n        NAXIS = 3\n        NAXIS1 = 1024\n        NAXIS2 = 1024\n        NAXIS3 = 1024\n        CRPIX1 = 512.5\n        CRPIX2 = 512.5\n        CRPIX3 = 512.5\n        CDELT1 = 0.1\n        CDELT2 = 0.1\n        CDELT3 = 0.1\n        CTYPE1 = 'RA---TAN'\n        CTYPE2 = 'DEC--TAN'\n        CTYPE3 = 'FREQ'\n        \"\"\")\n        wcs = WCS(header)\n\n        # Extract the celestial axes\n        wcs_celestial = wcs.sub([WCSSUB_CELESTIAL])\n        self.assertEqual(wcs_celestial.naxis, 2)\n        self.assertEqual(wcs_celestial.ctype[0], 'RA---TAN')\n        self.assertEqual(wcs_celestial.ctype[1], 'DEC--TAN')\n\n    def test_wcs_swapaxes(self):\n        header = fits.Header.fromtext(\"\"\"\n        SIMPLE = T\n        BITPIX = -32\n        NAXIS = 2\n        NAXIS1 = 1024\n        NAXIS2 = 1024\n        CRPIX1 = 512.5\n        CRPIX2 = 512.5\n        CDELT1 = 0.1\n        CDELT2 = 0.1\n        CTYPE1 = 'RA---TAN'\n        CTYPE2 = 'DEC--TAN'\n        \"\"\")\n        wcs = WCS(header)\n\n        # Swap the celestial axes\n        wcs_swapaxes = wcs.swapaxes(ax0=0, ax1=1)\n        self.assertEqual(wcs_swapaxes.ctype[0], 'DEC--TAN')\n        self.assertEqual(wcs_swapaxes.ctype[1], 'RA---TAN')\n\n    def test_wcs_slice(self):\n        header = fits.Header.fromtext(\"\"\"\n        SIMPLE = T\n        BITPIX = -32\n        NAXIS = 2\n        NAXIS1 = 1024\n        NAXIS2 = 1024\n        CRPIX1 = 512.5\n        CRPIX2 = 512.5\n        CDELT1 = 0.1\n        CDELT2 = 0.1\n        CTYPE1 = 'RA---TAN'\n        CTYPE2 = 'DEC--TAN'\n        \"\"\")\n        wcs = WCS(header)\n\n        # Slice the WCS object along both axes\n        wcs_slice = wcs.slice((slice(1, 9), slice(2, 9)))\n        self.assertEqual(wcs_slice.naxis, 2)\n        self.assertEqual(wcs_slice.cdelt[0], 0.1)\n        self.assertEqual(wcs_slice.cdelt[1], 0.1)\n\n    def test_wcs_slice_numpy_order(self):\n        header = fits.Header.fromtext(\"\"\"\n        SIMPLE = T\n        BITPIX = -32\n        NAXIS = 2\n        NAXIS1 = 1024\n        NAXIS2 = 1024\n        CRPIX1 = 512.5\n        CRPIX2 = 512.5\n        CDELT1 = 0.1\n        CDELT2 = 0.1\n        CTYPE1 = 'RA---TAN'\n        CTYPE2 = 'DEC--TAN'\n        \"\"\")\n        wcs = WCS(header)\n        wcs_slice = wcs.slice(slice(1, 9), numpy_order=True)\n        self.assertEqual(wcs_slice.naxis, 2)\n        self.assertEqual(wcs_slice.cdelt[0], 0.1)\n        self.assertEqual(wcs_slice.cdelt[1], 0.1)\n\n    def test_wcs_slice_step(self):\n        header = fits.Header.fromtext(\"\"\"\n        SIMPLE = T\n        BITPIX = -32\n        NAXIS = 2\n        NAXIS1 = 1024\n        NAXIS2 = 1024\n        CRPIX1 = 512.5\n        CRPIX2 = 512.5\n        CDELT1 = 0.1\n        CDELT2 = 0.1\n        CTYPE1 = 'RA---TAN'\n        CTYPE2 = 'DEC--TAN'\n        \"\"\")\n        wcs = WCS(header)\n\n        wcs_slice = wcs.slice(slice(1, 9, 2))\n        self.assertEqual(wcs_slice.naxis, 2)\n\n\n    def test_wcs_reorient_celestial_first(self):\n        header = fits.Header.fromtext(\"\"\"\n        SIMPLE = T\n        BITPIX = -32\n        NAXIS = 3\n        NAXIS1 = 1024\n        NAXIS2 = 1024\n        NAXIS3 = 1024\n        CRPIX1 = 512.5\n        CRPIX2 = 512.5\n        CRPIX3 = 512.5\n        CDELT1 = 0.1\n        CDELT2 = 0.1\n        CDELT3 = 0.1\n        CTYPE1 = 'RA---TAN'\n        CTYPE2 = 'DEC--TAN'\n        CTYPE3 = 'FREQ'\n        \"\"\")\n        wcs = WCS(header)\n\n        wcs_ordered = wcs.reorient_celestial_first()\n        self.assertEqual(wcs_ordered.ctype[0], 'RA---TAN')\n        self.assertEqual(wcs_ordered.ctype[1], 'DEC--TAN')\n\n\n\n"], "sample_157": ["\nimport unittest\nfrom sympy.physics.units.definitions.dimension_definitions import Dimension, charge, length, time, temperature, pressure, energy, mass\nfrom sympy.physics.units.systems.si import dimsys_SI\nfrom sympy.physics.units.unitsystem import UnitSystem, Quantity\n\nclass TestUnitSystem(unittest.TestCase):\n\n    def test_init_default(self):\n        system = UnitSystem(base_units=[length, time, mass], name=\"MySystem\")\n        self.assertEqual(system.name, \"MySystem\")\n        self.assertEqual(system._base_units, (length, time, mass))\n\n    def test_init_with_derived_units(self):\n        derived_units = {\n            Dimension(charge): Quantity(\"ElectricCharge\", {\"Electric Charge\": 1}),\n            Dimension(energy): Quantity(\"Energy\", {\"Energy\": 1})\n        }\n        system = UnitSystem(base_units=[length, time, mass], derived_units=derived_units, name=\"MySystem\")\n        self.assertEqual(system.name, \"MySystem\")\n        self.assertEqual(system._base_units, (length, time, mass))\n        self.assertEqual(system._derived_units, derived_units)\n\n    def test_get_unit_system(self):\n        system = UnitSystem(base_units=[length, time, mass], name=\"MySystem\")\n        self.assertEqual(UnitSystem.get_unit_system(\"MySystem\"), system)\n        self.assertEqual(UnitSystem.get_unit_system(system), system)\n        with self.assertRaises(ValueError):\n            UnitSystem.get_unit_system(\"NonExistingSystem\")\n\n    def test_get_default_unit_system(self):\n        self.assertEqual(UnitSystem.get_default_unit_system(), dimsys_SI)\n\n    def test_extend(self):\n        base_units = [length, time, mass]\n        new_units = [Quantity(\"ElectricCharge\", {\"Electric Charge\": 1})]\n        system = UnitSystem(base_units, name=\"MySystem\")\n        new_system = system.extend(new_units, name=\"MyExtendedSystem\")\n        self.assertEqual(new_system._base_units, tuple(base_units + new_units))\n        self.assertEqual(new_system.name, \"MyExtendedSystem\")\n\n    def test_str(self):\n        system = UnitSystem(base_units=[length, time, mass], name=\"\")\n        self.assertEqual(str(system), \"UnitSystem((length, time, mass))\")\n        system = UnitSystem(base_units=[length, time, mass], name=\"MySystem\")\n        self.assertEqual(str(system), \"MySystem\")\n\n    def test_dim(self):\n        system = UnitSystem(base_units=[length, time, mass], name=\"\")\n        self.assertEqual(system.dim, 3)\n\n    def test_is_consistent(self):\n        system = UnitSystem(base_units=[length, time, mass], name=\"\")\n        self.assertTrue(system.is_consistent)\n\n    def test_get_dimension_system(self):\n        system = UnitSystem(base_units=[length, time, mass], name=\"MySystem\")\n        self.assertEqual(system.get_dimension_system(), dimsys_SI)\n\n\n\n"], "sample_89": ["\nimport pytest\nfrom _pytest.skipping import evaluate_skip_marks\nfrom _pytest.skipping import evaluate_xfail_marks\nfrom _pytest.skipping import pytest_runtest_setup\nfrom _pytest.nodes import Item\nfrom typing import Dict\n\nclass ItemMock:\n    def __init__(self, name: str, func: str = None, reportinfo: tuple = None):\n        self.name = name\n        self.obj = func\n        self.reportinfo = reportinfo\n        self.config = MockConfig()\n\n    def iter_markers(self, name):\n        return []\n\n    def __getattr__(self, name):\n        return getattr(self, name)\n\n\n\nclass MockConfig:\n    def getini(self, section: str, name: str):\n        if (section, name) == (\"general\", \"xfail_strict\"):\n            return True\n        return None\n\n    def option = object()\n    \n\n\ndef test_evaluate_skip_marks_no_skipif():\n    item = ItemMock(\"test\")\n    assert evaluate_skip_marks(item) is None\n\ndef test_evaluate_skip_marks_skip():\n    item = ItemMock(\"test\", reportinfo=(\"test.py\", 1, \"test\"))\n    skip_reason = \"Test skipped\"\n    item._store = {}\n    item._store[skipped_by_mark_key] = False\n    for mark in item.iter_markers(name=\"skip\"):\n        mark.kwargs[\"reason\"] = skip_reason\n        break\n    assert evaluate_skip_marks(item) == Skip(reason=skip_reason)\n\ndef test_evaluate_skip_marks_skipif_string():\n    item = ItemMock(\"test\")\n    item._store = {}\n    item._store[skipped_by_mark_key] = False\n    for mark in item.iter_markers(name=\"skipif\"):\n        mark.kwargs[\"condition\"] = \"sys.platform == 'win32'\"\n        break\n    assert evaluate_skip_marks(item).reason == 'condition: sys.platform == \"win32\"'\n    assert item._store[skipped_by_mark_key] is True\n\ndef test_evaluate_skip_marks_skipif_bool():\n    item = ItemMock(\"test\")\n    item._store = {}\n    item._store[skipped_by_mark_key] = False\n    for mark in item.iter_markers(name=\"skipif\"):\n        mark.kwargs[\"condition\"] = True\n        break\n    assert evaluate_skip_marks(item).reason == 'condition: True'\n    assert item._store[skipped_by_mark_key] is True\n\ndef test_evaluate_skip_marks_skipif_multiple_conditions_one_true():\n    item = ItemMock(\"test\")\n    item._store = {}\n    item._store[skipped_by_mark_key] = False\n    for mark in item.iter_markers(name=\"skipif\"):\n        mark.kwargs[\"condition\"] = [\n            False,\n            True,\n            False,\n        ]\n        break\n    assert evaluate_skip_marks(item).reason == 'condition: [False, True, False]'\n    assert item._store[skipped_by_mark_key] is True\n\n\ndef test_evaluate_xfail_marks_no_xfail():\n    item = ItemMock(\"test\")\n    assert evaluate_xfail_marks(item) is None\n\ndef test_evaluate_xfail_marks_xfail():\n    item = ItemMock(\"test\", reportinfo=(\"test.py\", 1, \"test\"))\n    xfail_reason = \"Test expected to fail\"\n    item._store = {}\n    item._store[xfailed_key] = None\n    for mark in item.iter_markers(name=\"xfail\"):\n        mark.kwargs[\"reason\"] = xfail_reason\n        break\n    assert evaluate_xfail_marks(item) == Xfail(reason=xfail_reason, run=True, strict=True)\n\ndef test_evaluate_xfail_marks_xfail_not_run():\n    item = ItemMock(\"test\")\n    item._store = {}\n    item._store[xfailed_key] = None\n    for mark in item.iter_markers(name=\"xfail\"):\n        mark.kwargs[\"run\"] = False\n        mark.kwargs[\"reason\"] = \"Test expected to fail\"\n        break\n    assert evaluate_xfail_marks(item).run is False\n\ndef test_evaluate_xfail_marks_xfail_strict():\n    item = ItemMock(\"test\")\n    item._store = {}\n    item._store[xfailed_key] = None\n    for mark in item.iter_markers(name=\"xfail\"):\n        mark.kwargs[\"strict\"] = True\n        mark.kwargs[\"reason\"] = \"Test expected to fail\"\n        break\n    assert evaluate_xfail_marks(item).strict is True\n\ndef test_evaluate_xfail_marks_xfail_raises():\n    item = ItemMock(\"test\")\n    item._store = {}\n    item._store[xfailed_key] = None\n    for mark in item.iter_markers(name=\"xfail\"):\n        mark.kwargs[\"raises\"] = (TypeError,)\n        mark.kwargs[\"reason\"] = \"Test expected to fail\"\n        break\n    assert evaluate_xfail_marks(item).raises == (TypeError,)\n\n\n"], "sample_50": ["\nimport unittest\nfrom django.forms.models import ModelChoiceField, ModelMultipleChoiceField, InlineForeignKeyField, BaseInlineFormSet,  ModelChoiceIterator, ModelChoiceIteratorValue\nfrom django.db import models\nfrom django.forms import ModelForm\nfrom django.utils.timezone import now\n\nclass Article(models.Model):\n    title = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(default=now)\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n    pub_date = models.DateTimeField(default=now)\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n\nclass Writer(models.Model):\n    name = models.CharField(max_length=100)\n\nclass ModelChoiceFieldTest(unittest.TestCase):\n    def setUp(self):\n        Author.objects.create(name=\"Jane Doe\")\n        Author.objects.create(name=\"John Doe\")\n        self.article_choices = [\n            {'pk': 1, 'title': 'Article 1'},\n            {'pk': 2, 'title': 'Article 2'},\n        ]\n\n    def test_choices_creation(self):\n        field = ModelChoiceField(queryset=Article.objects.all(), empty_label=\"---------\")\n        self.assertEqual(len(field.choices), 2)\n        self.assertTrue(isinstance(field.choices[0][0], ModelChoiceIteratorValue))\n        self.assertEqual(field.choices[0][0].value, 1)\n        self.assertEqual(field.choices[0][1], \"Article 1\")\n\n    def test_label_from_instance(self):\n        field = ModelChoiceField(queryset=Article.objects.all())\n        self.assertEqual(field.label_from_instance(self.article_choices[0]), \"Article 1\")\n        \n    def test_to_python_valid(self):\n        field = ModelChoiceField(queryset=Article.objects.all())\n        self.assertEqual(field.to_python(1), self.article_choices[0])\n        self.assertEqual(field.to_python(self.article_choices[0]), self.article_choices[0])\n        self.assertEqual(field.to_python(ModelChoiceIteratorValue(1, self.article_choices[0])), self.article_choices[0])\n\n    def test_to_python_invalid(self):\n        field = ModelChoiceField(queryset=Article.objects.all())\n        with self.assertRaises(ValidationError):\n            field.to_python(3)\n            field.to_python(\"invalid\")\n            field.to_python(None)\n\n    def test_prepare_value(self):\n        field = ModelChoiceField(queryset=Article.objects.all())\n        self.assertEqual(field.prepare_value(self.article_choices[0]), 1)\n\n    def test_clean_valid(self):\n        field = ModelChoiceField(queryset=Article.objects.all())\n        self.assertEqual(field.clean(1), self.article_choices[0])\n\n    def test_clean_invalid_empty(self):\n        field = ModelChoiceField(queryset=Article.objects.all(), required=True)\n        with self.assertRaises(ValidationError):\n            field.clean(None)\n    \n    def test_clean_invalid_not_in_queryset(self):\n        field = ModelChoiceField(queryset=Article.objects.all())\n        with self.assertRaises(ValidationError):\n            field.clean(3)\n\nclass ModelMultipleChoiceFieldTest(unittest.TestCase):\n    def setUp(self):\n        Author.objects.create(name=\"Jane Doe\")\n        Author.objects.create(name=\"John Doe\")\n        self.article_choices = [\n            {'pk': 1, 'title': 'Article 1'},\n            {'pk': 2, 'title': 'Article 2'},\n        ]\n\n    def test_choices_creation(self):\n        field = ModelMultipleChoiceField(queryset=Article.objects.all(), empty_label=None)\n        self.assertEqual(len(field.choices), 2)\n        self.assertTrue(isinstance(field.choices[0][0], ModelChoiceIteratorValue))\n        self.assertEqual(field.choices[0][0].value, 1)\n        self.assertEqual(field.choices[0][1], \"Article 1\")\n\n    def test_to_python_valid(self):\n        field = ModelMultipleChoiceField(queryset=Article.objects.all())\n        self.assertEqual(field.to_python([1, 2]), [self.article_choices[0], self.article_choices[1]])\n\n    def test_to_python_invalid(self):\n        field = ModelMultipleChoiceField(queryset=Article.objects.all())\n        with self.assertRaises(ValidationError):\n            field.to_python([3])\n            field.to_python([\"invalid\"])\n            field.to_python(None)\n\n    def test_clean_valid(self):\n        field = ModelMultipleChoiceField(queryset=Article.objects.all())\n        self.assertEqual(field.clean([1, 2]), [self.article_choices[0], self.article_choices[1]])\n\n    def test_clean_invalid_empty(self):\n        field = ModelMultipleChoiceField(queryset=Article.objects.all(), required=True)\n        with self.assertRaises(ValidationError):\n            field.clean(None)\n    \n    def test_clean_invalid_not_in_queryset(self):\n        field = ModelMultipleChoiceField(queryset=Article.objects.all())\n        with self.assertRaises(ValidationError):\n            field.clean([3])\n\n\nclass InlineForeignKeyFieldTest(unittest.TestCase):\n    def setUp(self):\n        self.author = Author.objects.create(name=\"Jane Doe\")\n\n    def test_clean_valid(self):\n        field = InlineForeignKeyField(parent_instance=self.author)\n        self.assertEqual(field.clean(self.author), self.author)\n        \n    def test_clean_invalid(self):\n        field = InlineForeignKeyField(parent_instance=self.author)\n        with self.assertRaises(ValidationError):\n            field.clean(None)\n        with self.assertRaises(ValidationError):\n            field.clean(self.author.pk + 1)\n\n\n\nclass BaseInlineFormSetTest(unittest.TestCase):\n    def setUp(self):\n        pass\n\n    def test_empty_form_set(self):\n        formset = BaseInlineFormSet()\n        self.assertEqual(formset.initial_form_count(), 0)\n\n    def test_non_empty_form_set(self):\n        formset = BaseInlineFormSet(initial=[{'pk': 1}, {'pk': 2}])\n        self.assertEqual(formset.initial_form_count(), 2)\n\n\n\n"], "sample_109": ["\nfrom sklearn.utils._pprint import _EstimatorPrettyPrinter\nfrom sklearn.base import BaseEstimator\nimport unittest\nfrom collections import OrderedDict\nimport pprint\n\nclass TestEstimatorPrettyPrinter(unittest.TestCase):\n\n    def test_non_estimator_objects(self):\n        pp = _EstimatorPrettyPrinter()\n        self.assertEqual(pp.format(123), '123')\n        self.assertEqual(pp.format([1, 2, 3]), '[1, 2, 3]')\n        self.assertEqual(pp.format({'a': 1, 'b': 2}), '{\\'a\\': 1, \\'b\\': 2}')\n\n    def test_estimator_with_no_changed_params(self):\n        class Estimator(BaseEstimator):\n            def __init__(self, a=1, b=2):\n                super().__init__()\n                self.a = a\n                self.b = b\n\n        estimator = Estimator(a=3, b=4)\n        pp = _EstimatorPrettyPrinter()\n        expected = \"Estimator(a=3, b=4)\"\n        self.assertEqual(pp.format(estimator), expected)\n\n    def test_estimator_with_changed_params(self):\n        class Estimator(BaseEstimator):\n            def __init__(self, a=1, b=2):\n                super().__init__()\n                self.a = a\n                self.b = b\n\n        estimator = Estimator(a=3, b=4)\n        pp = _EstimatorPrettyPrinter(changed_only=True)\n        expected = \"Estimator(a=3, b=4)\"\n        self.assertEqual(pp.format(estimator), expected)\n\n    def test_estimator_with_dict_params(self):\n        class Estimator(BaseEstimator):\n            def __init__(self, a=1, b=2, c={'key': 1}):\n                super().__init__()\n                self.a = a\n                self.b = b\n                self.c = c\n\n        estimator = Estimator(a=3, b=4, c={'key': 2})\n        pp = _EstimatorPrettyPrinter()\n        expected = \"Estimator(a=3, b=4, c={'key': 2})\"\n        self.assertEqual(pp.format(estimator), expected)\n\n    def test_long_list_truncation(self):\n        class Estimator(BaseEstimator):\n            def __init__(self, params):\n                super().__init__()\n                self.params = params\n\n        estimator = Estimator(params=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        pp = _EstimatorPrettyPrinter()\n        expected = \"Estimator(params=[1, 2, 3, ..., 7, 8, 9, 10])\"\n        self.assertEqual(pp.format(estimator), expected)\n\n    def test_long_dict_truncation(self):\n        class Estimator(BaseEstimator):\n            def __init__(self, params):\n                super().__init__()\n                self.params = params\n\n        estimator = Estimator(params={'a': 1, 'b': 2, 'c': 3, 'd': 4,\n                                      'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9,\n                                      'j': 10})\n        pp = _EstimatorPrettyPrinter()\n        expected = \"Estimator(params={'a': 1, 'b': 2, 'c': 3, ..., 'h': 8, 'i': 9, 'j': 10})\"\n        self.assertEqual(pp.format(estimator), expected)\n\n\n\n"], "sample_78": ["\nimport click\nfrom click.testing import CliRunner\nfrom flask import current_app\nfrom flask.cli import AppGroup\nfrom flask.cli import find_best_app\nfrom flask.cli import FlaskGroup\nfrom flask.cli import get_version\nfrom flask.cli import load_dotenv\nfrom flask.cli import locate_app\nfrom flask.cli import NoAppException\nfrom flask.cli import prepare_import\nfrom flask.cli import run_command\nfrom flask.cli import ScriptInfo\nfrom flask.cli import with_appcontext\nfrom cliapp.app import testapp\nfrom flask.cli import cli\n\ndef test_cli_run_command():\n    runner = CliRunner()\n\n    result = runner.invoke(cli, [\"run\", \"--host\", \"127.0.0.1\", \"--port\", \"5000\"])\n    assert result.exit_code == 0\n\n\n\ndef test_cli_shell_command():\n    runner = CliRunner()\n\n    result = runner.invoke(cli, [\"shell\"])\n    assert result.exit_code == 0\n\n\n\ndef test_cli_routes_command():\n    runner = CliRunner()\n\n    result = runner.invoke(cli, [\"routes\"])\n    assert result.exit_code == 0\n\n\n\ndef test_find_best_app():\n    from flask import Flask\n\n    app1 = Flask(__name__)\n    app2 = Flask(__name__)\n\n    app1.config[\"FLASK_APP\"] = __name__\n    app2.config[\"FLASK_APP\"] = \"invalid_app\"\n\n    app = find_best_app()\n    assert app is app1\n\n\n\ndef test_locate_app():\n    from flask import Flask\n\n    app = Flask(__name__)\n    app.config[\"FLASK_APP\"] = \"app.py\"\n\n    with app.app_context():\n        app_info = locate_app()\n        assert app_info.load_app() is app\n\n\n\ndef test_load_dotenv():\n    from flask.cli import load_dotenv\n\n    # Mock the environment to simulate a loaded dotenv\n    os.environ[\"FLASK_DEBUG\"] = \"True\"\n    os.environ[\"FLASK_SECRET_KEY\"] = \"test_secret_key\"\n\n    # Load the dotenv\n    load_dotenv()\n\n    assert os.environ[\"FLASK_DEBUG\"] == \"True\"\n    assert os.environ[\"FLASK_SECRET_KEY\"] == \"test_secret_key\"\n\n\n\ndef test_prepare_import():\n    from flask.cli import prepare_import\n\n    # Test with a known import path\n    path = \"modules.app\"\n    result = prepare_import(path)\n    assert result == \"modules.app\"\n\n    # Test with a relative import path\n    path = \"app\"\n    result = prepare_import(path)\n    assert result == \"app\"\n\n\n\ndef test_NoAppException():\n    from flask.cli import NoAppException\n    with pytest.raises(NoAppException):\n        find_best_app()\n\n\n\ndef test_get_version():\n    from flask.cli import get_version\n    assert get_version()\n\n\n\ndef test_ScriptInfo():\n    from flask.cli import ScriptInfo\n\n    info = ScriptInfo(create_app=lambda: None)\n\n    assert info.app_import_path is None\n    assert info.set_debug_flag is None\n\n\n\ndef test_with_appcontext():\n    from flask.cli import with_appcontext\n\n    @with_appcontext\n    def test_function():\n        assert current_app is not None\n\n    test_function()\n\n\n\n"], "sample_2": ["\nfrom astropy.modeling.separable import (_coord_matrix, is_separable, _cdot, _cstack, _arith_oper, separability_matrix)\nfrom astropy.modeling.core import Model, SeparableModel\nfrom astropy.modeling.mappings import Mapping\nfrom astropy.utils.exceptions import AstropyWarning\nimport numpy as np\nimport unittest\n\nclass TestSeparable(unittest.TestCase):\n\n    def test_is_separable_singleton_inputs(self):\n        model = SeparableModel(n_inputs=1, n_outputs=2)\n        self.assertTrue(is_separable(model))\n        self.assertTrue(np.array([False] * 2).all())\n\n    def test_is_separable_identity(self):\n        model = SeparableModel(n_inputs=2, n_outputs=2)\n        self.assertTrue(is_separable(model))\n        self.assertTrue(np.ones(2).all())\n\n    def test_is_separable_mapping(self):\n        mapping = Mapping([0, 1, 0, 1])\n        model = Model(n_inputs=4, n_outputs=4)\n        model.add_mapping(mapping)\n        self.assertTrue(is_separable(model))\n        self.assertTrue(np.array([True, True, True, True]).all())\n\n    def test_is_separable_arithmetic_operators(self):\n        model1 = SeparableModel(n_inputs=2, n_outputs=2)\n        model2 = SeparableModel(n_inputs=2, n_outputs=2)\n        compound_model = model1 & model2\n        self.assertFalse(is_separable(compound_model))\n        self.assertFalse(np.array([True, True]).all())\n\n    def test_separability_matrix_singleton_inputs(self):\n        model = SeparableModel(n_inputs=1, n_outputs=2)\n        result = separability_matrix(model)\n        self.assertTrue(np.array([[True, False], [False, True]]).all())\n\n    def test_separability_matrix_identity(self):\n        model = SeparableModel(n_inputs=2, n_outputs=2)\n        result = separability_matrix(model)\n        self.assertTrue(np.array([[True, False], [False, True]]).all())\n\n    def test_separability_matrix_mapping(self):\n        mapping = Mapping([0, 1, 0, 1])\n        model = Model(n_inputs=4, n_outputs=4)\n        model.add_mapping(mapping)\n        result = separability_matrix(model)\n        self.assertTrue(np.array([[True, False, True, False],\n                              [False, True, False, True],\n                              [True, False, True, False],\n                              [False, True, False, True]]).all())\n\n    def test_separability_matrix_arithmetic_operators(self):\n        model1 = SeparableModel(n_inputs=2, n_outputs=2)\n        model2 = SeparableModel(n_inputs=2, n_outputs=2)\n        compound_model = model1 & model2\n        result = separability_matrix(compound_model)\n        self.assertTrue(np.array([[True, False], [False, True]]).all())\n\n\n\n"], "sample_145": ["\nfrom sympy import (Abs, acos, adjoint, arg, atan, atan2, conjugate, cos, DiracDelta, E, exp, expand, Expr, Function, Heaviside, I, im, log, nan, oo, pi, Rational, re, S, sign, sin, sqrt, Symbol, symbols, transpose, zoo, exp_polar, Piecewise, Interval, comp, Integral, Matrix, ImmutableMatrix, SparseMatrix, ImmutableSparseMatrix, MatrixSymbol, FunctionMatrix, Lambda, Derivative, Eq)\nfrom sympy.core.expr import unchanged\nfrom sympy.core.function import ArgumentIndexError\nfrom sympy.testing.pytest import XFAIL, raises, _both_exp_pow\nfrom sympy import polar_lift, polarify\nfrom sympy import (exp_polar, polar_lift, exp, unpolarify, principal_branch)\nfrom sympy import gamma, erf, sin, tanh, uppergamma, Eq, Ne\nfrom sympy.abc import x\nfrom sympy import Matrix, simplify\nfrom sympy import (periodic_argument, unbranched_argument, oo, principal_branch, polar_lift, pi)\n\ndef test_exp_polar_eval():\n    assert exp_polar(0) == 1\n    assert exp_polar(I*pi) == -1\n    assert exp_polar(2*I*pi) == 1\n    assert exp_polar(I) == I\n    assert exp_polar(3*I*pi/2) == -I\n\ndef test_exp_polar_evalf():\n    assert exp_polar(0).evalf() == 1.0\n    assert exp_polar(I*pi).evalf() == -1.0\n\ndef test_exp_polar_expand():\n    assert expand(exp_polar(I*pi/2)) == I\n    assert expand(exp_polar(-I*pi/2)) == -I\n\ndef test_exp_polar_polar_lift():\n    assert polar_lift(exp_polar(I*pi)) == exp_polar(I*pi)\n\ndef test_periodic_argument():\n    assert periodic_argument(exp_polar(2*pi*I), 2*pi) == 0\n    assert periodic_argument(exp_polar(3*pi*I), 2*pi) == pi\n    assert periodic_argument(exp_polar(5*pi*I), 2*pi) == pi\n    assert periodic_argument(exp_polar(3*pi*I), 3*pi) == 0\n\ndef test_unbranched_argument():\n    assert unbranched_argument(exp_polar(2*pi*I)) == 2*pi\n    assert unbranched_argument(exp_polar(3*pi*I)) == 3*pi\n\ndef test_polarify():\n    assert polarify(1) == (1, {})\n    assert polarify(x, subs=True, lift=True) == (polar_lift(x), {_x: x})\n    assert polarify(1 + I, subs=True, lift=True) == (exp_polar(I*pi/4), {_x: x})\n\ndef test_unpolarify():\n    assert unpolarify(exp_polar(0)) == 1\n    assert unpolarify(exp_polar(I*pi)) == -1\n    assert unpolarify(polar_lift(I)) == I\n\n\n\n"], "sample_15": ["\nfrom django.db.migrations.serializer import (\n    BaseSerializer,\n    Serializer,\n    serializer_factory,\n    BaseSequenceSerializer,\n    BaseSimpleSerializer,\n    ChoicesSerializer,\n    DateTimeSerializer,\n    DatetimeDatetimeSerializer,\n    DecimalSerializer,\n    DeconstructableSerializer,\n    DictionarySerializer,\n    EnumSerializer,\n    FloatSerializer,\n    FrozensetSerializer,\n    FunctionTypeSerializer,\n    FunctoolsPartialSerializer,\n    IterableSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    RegexSerializer,\n    SequenceSerializer,\n    SetSerializer,\n    SettingsReferenceSerializer,\n    TupleSerializer,\n    TypeSerializer,\n    UUIDSerializer,\n)\nfrom django.db import models\nimport datetime\nimport re\nimport uuid\nfrom django.conf import Settings  \n\nclass TestSerializer(object):\n\n    def test_serializer_registry(self):\n        self.assertEqual(len(Serializer._registry), 23)\n        self.assertIn(list, Serializer._registry)\n\n    def test_register_unregister(self):\n        class CustomSerializer(BaseSerializer):\n            pass\n        Serializer.register(str, CustomSerializer)\n        self.assertIn(str, Serializer._registry)\n        Serializer.unregister(str)\n        self.assertNotIn(str, Serializer._registry)\n\n    def test_serializer_factory_primitives(self):\n        self.assertEqual(serializer_factory(True).serialize(), ('True', set()))\n        self.assertEqual(serializer_factory(False).serialize(), ('False', set()))\n        self.assertEqual(serializer_factory(1).serialize(), ('1', set()))\n        self.assertEqual(serializer_factory(1.0).serialize(), ('1.0', set()))\n        self.assertEqual(serializer_factory('test').serialize(), (repr('test'), set()))\n        self.assertEqual(serializer_factory(None).serialize(), (repr(None), set()))\n        self.assertEqual(serializer_factory(tuple()).serialize(), '()', set())\n\n\n    def test_serializer_factory_datetime(self):\n        dt = datetime.datetime.now()\n        self.assertEqual(serializer_factory(dt).serialize(), serializer_factory(datetime.datetime.now()).serialize())\n        self.assertEqual(serializer_factory(datetime.date.today()).serialize(), serializer_factory(datetime.timedelta(days=1)).serialize())\n    \n    def test_serializer_factory_models_field(self):\n        field = models.CharField(max_length=100, null=True, blank=True)\n        serializer = serializer_factory(field)\n        self.assertEqual(serializer.serialize(), ('models.CharField', {'from django.db import models'}))\n\n    def test_serializer_factory_models_manager(self):\n        class MyManager(models.Manager):\n            pass\n        manager = MyManager()\n        serializer = serializer_factory(manager)\n        self.assertEqual(serializer.serialize(), ('models.Manager', {'from django.db import models'}))\n\n    def test_serializer_factory_operation(self):\n        from django.db.migrations.operations import CreateModel\n        operation = CreateModel(name='MyModel', ...)\n        serializer = serializer_factory(operation)\n        self.assertEqual(serializer.serialize(), ('CreateModel', {'from django.db.migrations.operations.base import Operation'}), )\n\n    def test_serializer_factory_regex(self):\n        # TODO: Test with different flags\n        regex = re.compile(r'abc')\n        serializer = serializer_factory(regex)\n        self.assertEqual(serializer.serialize(), ('re.compile(r\"abc\")', {'import re'}), )\n\n    def test_serializer_factory_uuid(self):\n        uuid_obj = uuid.UUID('61263e87-a357-4657-9b7a-ba99330c337a')\n        serializer = serializer_factory(uuid_obj)\n        self.assertEqual(serializer.serialize(), ('uuid.UUID(\"61263e87-a357-4657-9b7a-ba99330c337a\")', {'import uuid'}), )\n\n"], "sample_149": ["\nfrom sympy.testing.pytest import raises\nfrom sympy.functions.elementary.trigonometric import sin, cos\nfrom sympy.matrices.dense import Matrix\nfrom sympy.simplify import simplify\nfrom sympy.tensor.array import Array\nfrom sympy.tensor.array.dense_ndim_array import ( ImmutableDenseNDimArray, MutableDenseNDimArray)\nfrom sympy.tensor.array.sparse_ndim_array import ( ImmutableSparseNDimArray, MutableSparseNDimArray)\nfrom sympy.abc import x, y\n\ndef test_ndim_array_creation():\n    assert ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2)) == ImmutableDenseNDimArray([[1, 2], [3, 4]])\n    assert ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2)).shape == (2, 2)\n\n    assert ImmutableDenseNDimArray([1, 2, 3]).shape == (3,)\n\n    with raises(ValueError):\n        ImmutableDenseNDimArray([1, 2, 3], (2,))\n\n    with raises(ValueError):\n        ImmutableDenseNDimArray([1, 2, 3, 4], (3, 2))\n\ndef test_ndim_array_from_iterable():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    assert a.tolist() == [[1, 2], [3, 4]]\n\n    a = ImmutableDenseNDimArray([[1, 2], [3, 4]])\n    assert a.tolist() == [[1, 2], [3, 4]]\n\ndef test_ndim_array_reshape():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    b = a.reshape(2, 2)\n    assert b.tolist() == [[1, 2], [3, 4]]\n\n\ndef test_ndim_array_arithmetic():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n    b = ImmutableDenseNDimArray([5, 6, 7, 8], (2, 2))\n    \n    c = a + b\n    assert c.tolist() == [[6, 8], [10, 12]]\n    \n    c = a - b\n    assert c.tolist() == [[-4, -4], [-4, -4]]\n    \n    c = a * b\n    assert c.tolist() == [[5, 12], [15, 32]]\n    \n    c = a / 2\n    assert c.tolist() == [[0.5, 1], [1.5, 2]]\n\n\ndef test_ndim_array_indexing():\n    a = ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))\n\n    assert a[0, 0] == 1\n    assert a[1, 1] == 4\n    assert a[0] == [1, 2]\n    assert a[:, 0] == [1, 3]\n\n    with raises(IndexError):\n        a[2, 0]\n\n\n\n\n"], "sample_102": ["\nfrom sklearn.datasets import load_iris\nfrom sklearn.neighbors.nca import NeighborhoodComponentsAnalysis\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\n\nclass TestNeighborhoodComponentsAnalysis(object):\n\n    def test_fit_transform(self):\n        iris = load_iris()\n        X, y = iris.data, iris.target\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        # Create an NCA instance\n        nca = NeighborhoodComponentsAnalysis(n_components=2, random_state=42)\n\n        # Fit the model and transform the training data\n        nca.fit(X_train, y_train)\n        X_train_embedded = nca.transform(X_train)\n        X_test_embedded = nca.transform(X_test)\n\n        # Create a k-NN classifier and train it on the embedded data\n        from sklearn.neighbors import KNeighborsClassifier\n        knn = KNeighborsClassifier(n_neighbors=3)\n        knn.fit(X_train_embedded, y_train)\n\n        # Evaluate the classifier on the transformed test data\n        y_pred = knn.predict(X_test_embedded)\n        accuracy = accuracy_score(y_test, y_pred)\n\n        assert accuracy > 0.9, \"Accuracy should be greater than 0.9\"\n\n    def test_fit_with_pca_init(self):\n        iris = load_iris()\n        X, y = iris.data, iris.target\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        # Create an NCA instance with PCA initialization\n        nca = NeighborhoodComponentsAnalysis(init='pca', n_components=2, random_state=42)\n\n        # Fit the model\n        nca.fit(X_train, y_train)\n\n        # Check that the transformation matrix has the expected shape\n        assert nca.components_.shape[0] == 2, \"Incorrect number of components\"\n        assert nca.components_.shape[1] == X.shape[1], \"Incorrect number of features\"\n\n    def test_fit_with_lda_init(self):\n        iris = load_iris()\n        X, y = iris.data, iris.target\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        # Create an NCA instance with LDA initialization\n        nca = NeighborhoodComponentsAnalysis(init='lda', n_components=2, random_state=42)\n\n        # Fit the model\n        nca.fit(X_train, y_train)\n\n        # Check that the transformation matrix has the expected shape\n        assert nca.components_.shape[0] == 2, \"Incorrect number of components\"\n        assert nca.components_.shape[1] == X.shape[1], \"Incorrect number of features\"\n\n    def test_initialize_random_init(self):\n        n_components = 2\n        n_features = 10\n        nca = NeighborhoodComponentsAnalysis(n_components=n_components, random_state=42)\n\n        # Initialize with random transformation\n        transformation = nca._initialize(np.random.rand(10, n_features),\n                                         np.zeros(10), init='random')\n\n        # Check if initialized transformation has correct shape\n        assert transformation.shape == (n_components, n_features), \\\n            \"Incorrect shape of the initialized transformation\"\n\n    def test_initialize_auto_init(self):\n        n_components = 3\n        n_features = 10\n        nca = NeighborhoodComponentsAnalysis(n_components=n_components, random_state=42)\n        X = np.random.rand(10, n_features)\n        y = np.random.randint(0, 2, size=10)\n \n        # Initialize with auto\n        transformation = nca._initialize(X, y, init='auto')\n        # 'auto' should choose 'pca' in this case\n\n        # Check if initialized transformation has correct shape\n        assert transformation.shape == (n_components, n_features), \\\n            \"Incorrect shape of the initialized transformation\"\n\n    def test_fit_with_warm_start(self):\n        iris = load_iris()\n        X, y = iris.data, iris.target\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        # Create an NCA instance\n        nca = NeighborhoodComponentsAnalysis(n_components=2, random_state=42)\n\n        # Fit the model for the first time\n        nca.fit(X_train, y_train)\n\n        # Store the components\n        components = nca.components_\n\n        # Fit again with warm_start=True\n        nca = NeighborhoodComponentsAnalysis(warm_start=True, n_components=2, random_state=42)\n        nca.components_ = components  # Set initial components\n\n        # Fit the model\n        nca.fit(X_train, y_train)\n\n        # Check that the transformation matrix is the same as before\n        assert np.allclose(nca.components_, components), \"Components should be the same\"\n\n    def test_validation_params(self):\n        X = np.random.rand(5, 3)\n        y = np.random.randint(0, 2, size=5)\n\n        # Test cases for different initialization options\n        nca = NeighborhoodComponentsAnalysis(random_state=42)\n        with np.errstate(divide='ignore'):\n            try:\n                nca._validate_params(X, y, init='invalid')\n                assert False\n            except ValueError:\n                pass\n\n        nca = NeighborhoodComponentsAnalysis(random_state=42)\n        with np.errstate(divide='ignore'):\n            try:\n                nca._validate_params(X, y, init=np.array([1, 2, 3]))\n                assert False\n            except ValueError:\n                pass\n\n        nca = NeighborhoodComponentsAnalysis(random_state=42)\n        with np.errstate(divide='ignore'):\n            try:\n                nca._validate_params(X, y, n_components=-1)\n                assert False\n            except ValueError:\n                pass\n\n        nca = NeighborhoodComponentsAnalysis(random_state=42)\n        with np.errstate(divide='ignore'):\n            try:\n                nca._validate_params(X, y, max_iter=-1)\n                assert False\n            except ValueError:\n                pass\n\n        nca = NeighborhoodComponentsAnalysis(random_state=42)\n        with np.errstate(divide='ignore'):\n            try:\n                nca._validate_params(X, y, tol=1.01)\n                assert False\n            except ValueError:\n                pass\n\n        nca = NeighborhoodComponentsAnalysis(random_state=42)\n        with np.errstate(divide='ignore'):\n            try:\n                nca._validate_params(X, y, verbose=-1)\n                assert False\n            except ValueError:\n                pass\n\n\n        nca = NeighborhoodComponentsAnalysis(random_state=42)\n        with np.errstate(divide='ignore'):\n            try:\n                nca._validate_params(X, y, warm_start='invalid')\n                assert False\n            except ValueError:\n                pass\n\n"], "sample_61": ["\nimport unittest\n\nfrom django.forms import BaseForm, CharField\nfrom django.forms.formsets import BaseFormSet, DEFAULT_MIN_NUM, DEFAULT_MAX_NUM, formset_factory, all_valid, ManagementForm\n\n\nclass TestFormSet(unittest.TestCase):\n\n    def test_formset_factory(self):\n        class TestForm(BaseForm):\n            name = CharField(label=\"Name\")\n\n        FormSet = formset_factory(TestForm, extra=2)\n        self.assertEqual(FormSet.extra, 2)\n        self.assertEqual(FormSet.can_order, False)\n        self.assertEqual(FormSet.can_delete, False)\n        self.assertEqual(FormSet.min_num, DEFAULT_MIN_NUM)\n        self.assertEqual(FormSet.max_num, DEFAULT_MAX_NUM)\n\n    def test_formset_factory_with_arguments(self):\n        class TestForm(BaseForm):\n            name = CharField(label=\"Name\")\n\n        FormSet = formset_factory(TestForm, extra=3, can_order=True, can_delete=True, max_num=5, validate_max=True)\n        self.assertEqual(FormSet.extra, 3)\n        self.assertEqual(FormSet.can_order, True)\n        self.assertEqual(FormSet.can_delete, True)\n        self.assertEqual(FormSet.max_num, 5)\n        self.assertEqual(FormSet.validate_max, True)\n\n    def test_formset_factory_with_renderer(self):\n        class TestForm(BaseForm):\n            name = CharField(label=\"Name\")\n\n        FormSet = formset_factory(TestForm, renderer=Jinja2)\n        self.assertEqual(FormSet.renderer, Jinja2)\n\n    def test_all_valid(self):\n        class TestForm(BaseForm):\n            pass\n\n        formset1 = BaseFormSet(form=TestForm)\n        formset2 = BaseFormSet(form=TestForm)\n\n        self.assertTrue(all_valid([formset1]))\n        self.assertTrue(all_valid([formset1, formset2]))\n\n        formset1.is_valid = False\n        self.assertFalse(all_valid([formset1, formset2]))\n\n\n    def test_management_form(self):\n        class TestForm(BaseForm):\n            pass\n\n        formset = BaseFormSet(form=TestForm, extra=2)\n\n        management_form = formset.management_form\n        self.assertEqual(management_form.fields, {\n            TOTAL_FORM_COUNT: HiddenInput(),\n            INITIAL_FORM_COUNT: HiddenInput(),\n            MIN_NUM_FORM_COUNT: HiddenInput(),\n            MAX_NUM_FORM_COUNT: HiddenInput(),\n        })\n        self.assertEqual(management_form.template_name, \"django/forms/div.html\")\n\n"], "sample_117": ["\nfrom sympy import mathematica_code as mcode, symbols, sin, cos, exp, log, sqrt\nfrom sympy.abc import x, y\n\ndef test_basic_functions():\n    assert mcode(x) == 'x'\n    assert mcode(x + y) == 'x + y'\n    assert mcode(x * y) == 'x*y'\n    assert mcode(x - y) == 'x - y'\n    assert mcode(x / y) == 'x/y'\n    assert mcode(sin(x)) == 'Sin[x]'\n    assert mcode(cos(x)) == 'Cos[x]'\n    assert mcode(exp(x)) == 'Exp[x]'\n    assert mcode(log(x)) == 'Log[x]'\n    assert mcode(sqrt(x)) == 'Sqrt[x]'\n\ndef test_pow():\n    assert mcode(x**2) == 'x^2'\n    assert mcode(2**x) == '2^x'\n\ndef test_mul():\n    assert mcode(2 * x * y) == '2*x*y'\n    assert mcode(x * y * 2) == 'x*y*2'\n\ndef test_pi_infinity():\n    assert mcode(x * pi) == 'x*Pi'\n    assert mcode(x * oo) == 'x*Infinity'\n    assert mcode(-x * oo) == '-x*Infinity'\n\ndef test_list_tuple():\n    assert mcode([1, 2, 3]) == '{1, 2, 3}'\n    assert mcode((1, 2, 3)) == '{1, 2, 3}'\n\ndef test_integral():\n    assert mcode(integrate(x**2, x)) == 'Hold[Integrate[x^2, x]]'\n    assert mcode(integrate(sin(x), (x, 0, pi))) == 'Hold[Integrate[Sin[x], {x, 0, Pi}]]'\n\ndef test_sum():\n    assert mcode(sum(x**i for i in range(5))) == 'Hold[Sum[x^i, {i, 0, 4}]]'\n\n\n"], "sample_93": ["\nimport pytest\nfrom _pytest.python import (\n    Function,\n    FunctionDefinition,\n    get_real_func,\n    _idvalset,\n    idmaker,\n    _pytest_fixture_setup,\n    _pytest_hook_report,\n    _pytest_mark_run,\n    _pytest_runtest_call,\n    _pytest_runtest_log,\n    _pytest_runtest_teardown,\n    _pytest_skip_test,\n)\n\n\ndef test_fixturemanager_getfixtureinfo():\n    pass\n\n\ndef test_function_constructor():\n    pass\n\n\ndef test_function_runtest():\n    pass\n\n\ndef test_function_setup():\n    pass\n\n\n\n"], "sample_24": ["\nfrom unittest import mock\n\nfrom django.db import migrations\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.apps import AppConfig\nfrom django.test import TestCase\nfrom django.core.management.migration import MigrationCommand\n\nfrom django.conf import settings\nfrom django.test import override_settings\n\nclass TestMigrationAutodetector(TestCase):\n    def setUp(self):\n        self.autodetector = MigrationAutodetector()\n\n    @override_settings(INSTALLED_APPS=['app1', 'app2'])\n    def test_detect_migrations(self):\n        # Mock out all app configuration (we don't want to use real apps here)\n        with mock.patch('django.apps.AppConfig.apps',\n                        new_callable=mock.PropertyMock) as mock_apps:\n            mock_apps.return_value.get_models = lambda: []\n\n            # Mock out the MigrationCommand class\n            with mock.patch('django.core.management.migration.MigrationCommand') as mock_command:\n                mock_command.return_value.migration_name = lambda: '0001_initial'\n\n                # Fake a migration directory structure\n                self.autodetector._migrate_dir = '/path/to/migrations'\n                self.autodetector._app_dirs = {\n                    'app1': '/path/to/app1/migrations',\n                    'app2': '/path/to/app2/migrations',\n                }\n\n                # Mock the files and names in the migrations directory\n                # (this is a simplification, MigrationAutodetector\n                # expects a more complex structure)\n                self.autodetector._files = {\n                    '/path/to/app1/migrations/0001_initial.py': {\n                        'name': '0001_initial',\n                        'app': 'app1',\n                        'operations': [],\n                    },\n                    '/path/to/app2/migrations/0002_data.py': {\n                        'name': '0002_data',\n                        'app': 'app2',\n                        'operations': [],\n                    },\n                }\n\n                # Call the migrate method\n                self.autodetector.migrate(force=True)\n                self.assertEqual(self.autodetector.migration_name, '0002_data')\n                self.assertEqual(self.autodetector.migration_apps, {\"app2\"})\n                self.assertEqual(self.autodetector.migration_file, '/path/to/app2/migrations/0002_data.py')\n"], "sample_44": ["\nfrom django.db import migrations, models\nfrom django.db.backends.base.validation import DatabaseError\nfrom django.test import override_settings, TestCase\nfrom django.test.utils import override_settings_temporarily\nfrom django.core.management import call_command\nfrom django.apps import apps\n\nfrom ..executor import MigrationExecutor\nfrom ..loader import MigrationLoader\nfrom ..recorder import MigrationRecorder\nfrom ..state import ProjectState\n\n\nclass TestMigrationExecutor(TestCase):\n    def setUp(self):\n        self.connection = None\n        self.loader = MigrationLoader(self.connection)\n        self.recorder = MigrationRecorder(self.connection)\n\n    @override_settings(DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}})\n    def test_migration_plan(self):\n        with self.connection.start_atomic():\n            self.loader.graph = self.loader.build_graph()\n            executor = MigrationExecutor(self.connection)\n            plan = executor.migration_plan([(self.loader.graph.leaf_nodes())[0]])\n            self.assertEqual(len(plan), 1)\n            self.assertEqual(plan[0][0].name, '0001_initial')\n\n    @override_settings(DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}})\n    def test_migrate_app_up(self):\n        with self.connection.start_atomic():\n            call_command('migrate', 'myapp', 'fake')\n            executor = MigrationExecutor(self.connection)\n            state = executor.migrate(targets=['myapp'])\n\n    @override_settings(DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}})\n    def test_migrate_down(self):\n        with self.connection.start_atomic():\n            call_command('migrate', 'myapp', 'fake')\n            executor = MigrationExecutor(self.connection)\n            state = executor.migrate(targets=['myapp', 'down'])\n\n    @override_settings(DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}})\n    def test_migrate_multiple_apps(self):\n        with override_settings_temporarily(INSTALLED_APPS=['myapp', 'myapp2']):\n            with self.connection.start_atomic():\n                call_command('migrate', 'myapp', 'myapp2', 'fake')\n                executor = MigrationExecutor(self.connection)\n                state = executor.migrate(targets=['myapp', 'myapp2'])\n\n    @override_settings(DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}})\n    def test_migration_plan_with_replacements(self):\n        with self.connection.start_atomic():\n            self.loader.graph = self.loader.build_graph()\n            executor = MigrationExecutor(self.connection)\n            plan = executor.migration_plan([(self.loader.graph.leaf_nodes())[0]])\n            self.assertEqual(len(plan), 1)\n            self.assertEqual(plan[0][0].name, '0001_initial')\n\n\n\n"], "sample_130": ["\nfrom sympy import symbols, lambdify, sqrt, sin, cos, tan, pi, acos, acosh, Rational, Float, Matrix, Lambda, Piecewise, exp, Integral, oo, I, Abs, Function, true, false, And, Or, Not, ITE, Min, Max, floor, diff, IndexedBase, Sum, DotProduct, Eq, Dummy, sinc\nfrom sympy.utilities.lambdify import implemented_function\nfrom sympy.utilities.lambdify import MATH_TRANSLATIONS\nfrom sympy.utilities.lambdify import MPMATH_TRANSLATIONS\nfrom sympy.utilities.lambdify import NUMPY_TRANSLATIONS\nfrom sympy.utilities.lambdify import TENSORFLOW_TRANSLATIONS\nimport numpy as np\nimport tensorflow as tf\nimport inspect\n\n\n\ndef test_lambdify_basic():\n    x = symbols('x')\n    f = lambdify(x, x**2)\n    assert f(3) == 9\n\ndef test_lambdify_sin():\n    x = symbols('x')\n    f = lambdify(x, sin(x))\n    assert f(pi/2) == 1.0\n    assert f(0) == 0.0\n\ndef test_lambdify_sqrt():\n    x = symbols('x')\n    f = lambdify(x, sqrt(x))\n    assert f(4) == 2.0\n\ndef test_lambdify_nested():\n    x = symbols('x')\n    y = symbols('y')\n    f = lambdify((x, y), x**2 + y**2)\n    assert f(1, 2) == 5\n\ndef test_lambdify_list_args():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, y, z), [x + y, y + z, x * z])\n    assert f(1, 2, 3) == (3, 5, 3)\n\ndef test_lambdify_tuple_args():\n    x, y, z = symbols('x y z')\n    f = lambdify((x, (y, z)), x + y + z)\n    assert f(1, (2, 3)) == 6\n\ndef test_lambdify_with_modules():\n    x = symbols('x')\n    f = lambdify(x, sin(x), 'numpy')\n    assert f(np.pi/2) == 1.0\n    \ndef test_lambdify_with_tensorflow():\n    x = symbols('x')\n    f = lambdify(x, sin(x), 'tensorflow')\n    with tf.compat.v1.Session() as sess:\n        assert sess.run(f(tf.constant(np.pi/2))) == 1.0\n\ndef test_lambdify_complex():\n    x = symbols('x')\n    f = lambdify(x, x**2 + 1j*x)\n    assert f(2) == 5 + 2j\n\ndef test_lambdify_implemented_function():\n    f = implemented_function(Function('f'), lambda x: x+1)\n    g = lambdify(x, f(x))\n    assert g(4) == 5\n\ndef test_lambdify_multiple_implemented_functions():\n    x = symbols('x')\n\n    f = implemented_function(Function('f'), lambda x: x**2)\n    g = implemented_function(Function('g'), lambda x: x + 1)\n    h = lambdify(x, f(g(x)))\n\n    assert h(4) == 25\n\ndef test_lambdify_string_arg():\n    x = symbols('x')\n    f = lambdify(x, lambda x: 'x**2')\n    assert f(3) == '9'\n\n\n\n"], "sample_26": ["\nfrom django.db.backends.base.creation import (\n    TEST_DATABASE_PREFIX,\n    BaseDatabaseCreation,\n)\nfrom unittest import mock\nfrom io import StringIO\nfrom django.conf import settings\nfrom django.apps import apps\nfrom django.core.management import call_command\nfrom django.core.management.base import BaseCommand\nfrom django.db import router\nfrom django.db.models import get_models\n\nclass TestCreation(object):\n    @classmethod\n    def setUpClass(cls):\n        cls.old_settings = settings.DATABASES.copy()\n\n    @classmethod\n    def tearDownClass(cls):\n        settings.DATABASES = cls.old_settings\n\n    def test_get_test_db_name(self):\n        # If no custom test database name is provided, it should append the prefix.\n        settings.DATABASES['default'] = {'NAME': 'mydatabase'}\n        creation = BaseDatabaseCreation(None)\n        self.assertEqual(creation._get_test_db_name(), 'test_mydatabase')\n\n    def test_get_test_db_name_with_custom_name(self):\n        # If a custom test database name is provided, it should use that.\n        settings.DATABASES['default'] = {'NAME': 'mydatabase', 'TEST': {'NAME': 'custom_test_db'}}\n        creation = BaseDatabaseCreation(None)\n        self.assertEqual(creation._get_test_db_name(), 'custom_test_db')\n\n    def test_create_test_db_verbosity(self):\n        mock_cursor = mock.MagicMock()\n        creation = BaseDatabaseCreation(None)\n        creation._nodb_cursor = lambda: mock_cursor\n        creation.create_test_db(verbosity=0, autoclobber=False, serialize=True, keepdb=False)\n        mock_cursor.execute.assert_called_once_with('CREATE DATABASE test_mydatabase')\n\n    def test_create_test_db_autoclobber(self):\n        mock_cursor = mock.MagicMock()\n        creation = BaseDatabaseCreation(None)\n        creation._nodb_cursor = lambda: mock_cursor\n        creation.create_test_db(verbosity=0, autoclobber=True, serialize=True, keepdb=False)\n        mock_cursor.execute.assert_called_once_with('CREATE DATABASE test_mydatabase')\n\n    def test_create_test_db_keepdb(self):\n        mock_cursor = mock.MagicMock()\n        creation = BaseDatabaseCreation(None)\n        creation._nodb_cursor = lambda: mock_cursor\n        creation.create_test_db(verbosity=0, autoclobber=False, serialize=True, keepdb=True)\n        mock_cursor.execute.assert_not_called()\n\n    def test_destroy_test_db(self):\n        mock_cursor = mock.MagicMock()\n        creation = BaseDatabaseCreation(None)\n        creation._nodb_cursor = lambda: mock_cursor\n        creation.destroy_test_db()\n        mock_cursor.execute.assert_called_once_with('DROP DATABASE test_mydatabase')\n\n\n    def test_destroy_test_db_keepdb(self):\n        mock_cursor = mock.MagicMock()\n        creation = BaseDatabaseCreation(None)\n        creation._nodb_cursor = lambda: mock_cursor\n        creation.destroy_test_db(keepdb=True)\n        mock_cursor.execute.assert_not_called()\n\n    def test_serialize_db_to_string(self):\n        creation = BaseDatabaseCreation(None)\n        with mock.patch('django.core.serializers.serialize') as mock_serialize:\n            # Mocking the serialization logic for simplicity\n            creation.serialize_db_to_string()\n            mock_serialize.assert_called_once_with('json', get_models(), indent=None, stream=mock.ANY)\n\n    def test_deserialize_db_from_string(self):\n        creation = BaseDatabaseCreation(None)\n        with mock.patch('django.core.serializers.deserialize') as mock_deserialize:\n            creation.deserialize_db_from_string('serialized_data')\n            mock_deserialize.assert_called_once_with('json', StringIO('serialized_data'), using=mock.ANY)\n\n\n"], "sample_1": ["\nimport unittest\nfrom django.http import (\n    HttpResponse,\n    HttpResponseRedirect,\n    HttpResponsePermanentRedirect,\n    HttpResponseNotModified,\n    HttpResponseBadRequest,\n    HttpResponseNotFound,\n    HttpResponseForbidden,\n    HttpResponseNotAllowed,\n    HttpResponseGone,\n    HttpResponseServerError,\n    JsonResponse,\n    FileResponse,\n    BadHeaderError,\n)\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom django.utils.encoding import iri_to_uri\nimport datetime\nfrom django.http import SimpleCookie\n\nclass HttpResponseTests(unittest.TestCase):\n\n    def test_basic_http_response(self):\n        response = HttpResponse('Hello, world!')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'text/html; charset=utf-8')\n        self.assertEqual(response.content.decode('utf-8'), 'Hello, world!')\n\n    def test_http_response_with_explicit_content_type(self):\n        response = HttpResponse('Hello, world!', content_type='text/plain')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'text/plain')\n        self.assertEqual(response.content.decode('utf-8'), 'Hello, world!')\n\n    def test_http_response_with_custom_charset(self):\n        response = HttpResponse(\n            content='Hello, world!', charset='latin-1'\n        )\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'text/html; charset=latin-1')\n        self.assertEqual(response.content.decode('latin-1'), 'Hello, world!')\n\n    def test_http_response_with_content_length(self):\n        response = HttpResponse('Hello, world!', content_type='text/plain')\n        self.assertEqual(response['Content-Length'], '13')\n\n    def test_http_response_bytes_content(self):\n        response = HttpResponse(b'Hello, world!', content_type='text/plain')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'text/plain')\n        self.assertEqual(response.content.decode('utf-8'), 'Hello, world!')\n\n    def test_http_response_set_cookie(self):\n        response = HttpResponse()\n        response.set_cookie('name', 'value')\n        self.assertIn('set-cookie', response)\n\n    def test_http_response_set_signed_cookie(self):\n        response = HttpResponse()\n        response.set_signed_cookie('name', 'value', salt='secret')\n        self.assertIn('set-cookie', response)\n\n    def test_http_response_delete_cookie(self):\n        response = HttpResponse()\n        response.set_cookie('name', 'value')\n        response.delete_cookie('name')\n        self.assertNotIn('set-cookie', response)\n\n    def test_http_response_redirect(self):\n        response = HttpResponseRedirect('/new-url')\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response['Location'], '/new-url')\n\n    def test_http_response_permanent_redirect(self):\n        response = HttpResponsePermanentRedirect('/new-url')\n        self.assertEqual(response.status_code, 301)\n        self.assertEqual(response['Location'], '/new-url')\n\n    def test_http_response_not_modified(self):\n        response = HttpResponseNotModified()\n        self.assertEqual(response.status_code, 304)\n        self.assertEqual(response.content, b'')\n\n    def test_http_response_bad_request(self):\n        response = HttpResponseBadRequest()\n        self.assertEqual(response.status_code, 400)\n\n    def test_http_response_not_found(self):\n        response = HttpResponseNotFound()\n        self.assertEqual(response.status_code, 404)\n\n    def test_http_response_forbidden(self):\n        response = HttpResponseForbidden()\n        self.assertEqual(response.status_code, 403)\n\n    def test_http_response_not_allowed(self):\n        response = HttpResponseNotAllowed(['GET', 'POST'])\n        self.assertEqual(response.status_code, 405)\n        self.assertEqual(response['Allow'], 'GET, POST')\n\n    def test_http_response_gone(self):\n        response = HttpResponseGone()\n        self.assertEqual(response.status_code, 410)\n\n    def test_http_response_server_error(self):\n        response = HttpResponseServerError()\n        self.assertEqual(response.status_code, 500)\n\n    def test_http_response_json(self):\n        response = JsonResponse({'message': 'Hello, world!'})\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'application/json')\n        self.assertEqual(response.content.decode('utf-8'), '{\"message\": \"Hello, world!\"}')\n\n    def test_file_response_basic(self):\n        class MockFile:\n            def __init__(self, content):\n                self.content = content\n            def read(self, size):\n                return self.content[:size]\n            def getbuffer(self):\n                return bytearray(self.content)\n            def close(self):\n                pass\n        response = FileResponse(MockFile(b'Hello, world!'))\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content.decode('utf-8'), 'Hello, world!')\n\n\n    def test_file_response_set_headers(self):\n        class MockFile:\n            def __init__(self, content):\n                self.content = content\n            def read(self, size):\n                return self.content[:size]\n            def getbuffer(self):\n                return bytearray(self.content)\n            def close(self):\n                pass\n        response = FileResponse(MockFile(b'Hello, world!'), as_attachment=True)\n        response.set_headers(MockFile(b'Hello, world!'))\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Disposition'], 'attachment; filename=\"Hello, world!\"') \n\n\n\n"], "sample_132": ["\nfrom sympy import mathematica_code as mcode, symbols, sin, cos, pi, oo\nfrom sympy.abc import x, y\n\ndef test_basic_functions():\n    assert mcode(x) == 'x'\n    assert mcode(2.5) == '2.5'\n    assert mcode(pi) == 'Pi'\n    assert mcode(oo) == 'Infinity'\n    assert mcode(-oo) == '-Infinity'\n\ndef test_arithmetic_operations():\n    assert mcode(x + 2) == 'x + 2'\n    assert mcode(x * 2) == '2 x'\n    assert mcode(x - 2) == 'x - 2'\n    assert mcode(x / 2) == 'x/2'\n    assert mcode(x**2) == 'x^2'\n\ndef test_trig_functions():\n    assert mcode(sin(x)) == 'Sin[x]'\n    assert mcode(cos(x)) == 'Cos[x]'\n\ndef test_pow():\n    assert mcode(x**2) == 'x^2'\n    assert mcode(2**x) == '2^x'\n\ndef test_mul():\n    assert mcode(2*x*y) == '2 x y'\n    assert mcode(2 * x**2) == '2 x^2'\n\ndef test_list():\n    assert mcode([1, 2, 3]) == '{1, 2, 3}'\n\ndef test_integral():\n    assert mcode(integrate(x, x)) == 'Hold[Integrate[x, x]]'\n\n\n"], "sample_122": ["\nfrom sympy import (Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr)\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt\nfrom sympy.core.numbers import (igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse)\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom sympy import pi\nfrom mpmath.libmp.libmpf import fnan\nfrom sympy import Pi\nimport unittest\n\nclass TestNumbers(unittest.TestCase):\n\n    def test_sympify_fractions(self):\n        self.assertEqual(sympify_fractions(fractions.Fraction(5, 7)),  Rational(5, 7))\n        self.assertEqual(sympify_fractions(fractions.Fraction(1, 2)), Rational(1, 2))\n\n    def test_sympify_mpz(self):\n        self.assertEqual(sympify_mpz(gmpy.mpz(12345)), Integer(12345))\n\n    def test_sympify_mpq(self):\n        self.assertEqual(sympify_mpq(gmpy.mpq(6789, 10111)), Rational(6789, 10111))\n\n    def test_sympify_complex(self):\n        self.assertEqual(sympify_complex(3 + 4j),  S.Three + S.ImaginaryUnit*S.Four)\n        self.assertEqual(sympify_complex(1.23 + 4.56j),  S.Float('1.23') + S.ImaginaryUnit*S.Float('4.56'))\n\n\n\n"], "sample_29": ["\nimport json\nfrom django.db import connection\nfrom django.test import TestCase\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom django.db.models.fields.json import (\n    KeyTextTransform, KeyTransform, KeyTransformFactory, KeyTransformTextLookupMixin, DataContains, ContainedBy, HasKey, HasKeys, HasAnyKeys, JSONExact, \n    KeyTransformIn, KeyTransformExact, KeyTransformIsNull, KeyTransformIExact, KeyTransformIContains, \n    KeyTransformStartsWith, KeyTransformIStartsWith, KeyTransformEndsWith, KeyTransformIEndsWith, KeyTransformRegex, \n    KeyTransformIRegex, KeyTransformLt, KeyTransformLte, KeyTransformGt, KeyTransformGte\n)\nfrom .models import CustomJSONDecoder, JSONModel, NullableJSONModel, RelatedJSONModel\n\nclass JSONFieldTest(TestCase):\n \n    def setUp(self):\n        self.create_test_data()\n\n    def create_test_data(self):\n        self.json_model_data = {\n            \"field_json\": {\"key1\": \"value1\", \"key2\": 2},\n            \"field_json_null\": None,\n        }\n        self.nullable_json_data = {\n            \"field_json\": {\"key1\": \"value1\", \"key2\": 2},\n            \"field_json_null\": None,\n           \"field_id\": 1,\n        }\n        self.related_json_data = {\n            \"field_json\": {\"key1\": \"value1\", \"key2\": 2},\n            \"related_id\": 1\n        }\n\n\n    def test_json_field_creation_without_encoder_decoder(self):\n        field = Field('field_json', JSONField())\n        self.assertEqual(field.encoder, None)\n        self.assertEqual(field.decoder, None)\n\n    def test_json_field_creation_with_encoder_decoder(self):\n        def my_encoder(obj):\n            return {\n                'key1': obj.key1,\n                'key2': obj.key2,\n            }\n\n        def my_decoder(obj):\n            return {\n                'key1': obj['key1'], \n                'key2': obj['key2'],\n            }\n        field = Field('field_json', JSONField(encoder=my_encoder, decoder=my_decoder))\n        self.assertEqual(field.encoder, my_encoder)\n        self.assertEqual(field.decoder, my_decoder)\n\n    def test_json_field_check(self):\n        field = Field('field_json', JSONField())\n        errors = field.check()\n        self.assertEqual(len(errors), 0)\n\n    def test_json_field_check_unsupported_database(self):\n        with self.settings(DATABASES={'default': {'ENGINE': 'django.db.backends.dummy'}}), connection.cursor():\n            field = Field('field_json', JSONField())\n            errors = field.check()\n            self.assertEqual(len(errors), 1)\n\n    def test_json_field_from_db_value_null(self):\n        field = Field('field_json', JSONField())\n        value = None\n        result = field.from_db_value(value)\n        self.assertEqual(result, value)\n\n    def test_json_field_from_db_value_json_string(self):\n        field = Field('field_json', JSONField())\n        value = json.dumps({\"key1\": \"value1\", \"key2\": 2})\n        result = field.from_db_value(value)\n        self.assertEqual(result, {\"key1\": \"value1\", \"key2\": 2})\n\n    def test_json_field_get_prep_value(self):\n        field = Field('field_json', JSONField())\n        value = {\"key1\": \"value1\", \"key2\": 2}\n        result = field.get_prep_value(value)\n        self.assertEqual(result, json.dumps(value))\n\n    def test_json_field_get_internal_type(self):\n        field = Field('field_json', JSONField())\n        result = field.get_internal_type()\n        self.assertEqual(result, 'JSONField')\n\n    def test_json_field_value_to_string(self):\n        field = Field('field_json', JSONField())\n        obj = {\"key1\": \"value1\", \"key2\": 2}\n        result = field.value_to_string(obj)\n        self.assertEqual(result, json.dumps(obj))\n\n    def test_json_field_formfield(self):\n        field = Field('field_json', JSONField())\n        formfield = field.formfield()\n        self.assertEqual(formfield().field.widget.attrs['class'], 'JSONField')\n\n    def test_data_contains_lookup(self):\n        # Test for a valid JSON object with a key\n        self.assertQuerysetEqual(\n            JSONModel.objects.filter(field_json__contains={'key1': 'value1'}),\n            ['<JSONModel: 1>'], \n        )\n        \n        # Test for a lookup that should return no results\n        self.assertQuerysetEqual(\n            JSONModel.objects.filter(field_json__contains={'key3': 'value3'}),\n            [],\n        )\n\n    def test_contained_by_lookup(self):\n        # Test for a valid JSON object with a key\n        self.assertQuerysetEqual(\n            JSONModel.objects.filter(field_json__contained_by={'key1': 'value1', 'key2': 2}),\n            ['<JSONModel: 1>'], \n        )\n        \n        # Test for a lookup that should return no results\n        self.assertQuerysetEqual(\n            JSONModel.objects.filter(field_json__contained_by={'key3': 'value3'}),\n            [],\n        )\n\n    def test_has_key_lookup(self):\n        # Test for a valid JSON object with a key\n        self.assertQuerysetEqual(\n            JSONModel.objects.filter(field_json__has_key='key1'),\n            ['<JSONModel: 1>'], \n        )\n\n        # Test for a lookup that should return no results\n        self.assertQuerysetEqual(\n            JSONModel.objects.filter(field_json__has_key='key3'),\n            [],\n        )\n\n    def test_has_keys_lookup(self):\n        # Test for a valid JSON object with multiple keys\n        self.assertQuerysetEqual(\n            JSONModel.objects.filter(field_json__has_keys=['key1', 'key2']),\n            ['<JSONModel: 1>'], \n        )\n\n        # Test for a lookup that should return no results\n        self.assertQuerysetEqual(\n            JSONModel.objects.filter(field_json__has_keys=['key3', 'key4']),\n            [],\n        )\n\n    def test_has_any_keys_lookup(self):\n        # Test for a valid JSON object with multiple keys\n        self.assertQuerysetEqual(\n            JSONModel.objects.filter(field_json__has_any_keys=['key1', 'key2', 'key3']),\n            ['<JSONModel: 1>'], \n        )\n\n        # Test for a lookup that should return no results\n        self.assertQuerysetEqual(\n            JSONModel.objects.filter(field_json__has_any_keys=['key4', 'key5']),\n            [],\n        )\n\n    def test_json_exact_lookup(self):\n        # Test for a valid JSON object with a key\n        self.assertQuerysetEqual(\n            JSONModel.objects.filter(field_json__exact={'key1': 'value1', 'key2': 2}),\n            ['<JSONModel: 1>'], \n        )\n\n        # Test for a lookup that should return no results\n        self.assertQuerysetEqual(\n            JSONModel.objects.filter(field_json__exact={'key3': 'value3'}),\n            [],\n        )\n\n    def test_key_transform_factory(self):\n        factory = KeyTransformFactory('key1')\n        key_transform = factory()\n        self.assertEqual(key_transform.key_name, 'key1')\n\n\n"], "sample_92": ["\nimport unittest\n\nfrom _pytest._code import Source\nfrom _pytest._code.source import deindent as deindent\nfrom _pytest._code.source import findsource\nfrom _pytest._code.source import getstatementrange_ast\nfrom _pytest._code.source import getstatementrange_ast\n\n\nclass TestSource(unittest.TestCase):\n\n    def test_init_empty(self):\n        source = Source()\n        self.assertEqual(source.lines, [])\n\n    def test_init_from_list(self):\n        source = Source([\n            \"line1\",\n            \"line2\",\n            \"line3\",\n        ])\n        self.assertEqual(source.lines, [\n            \"line1\",\n            \"line2\",\n            \"line3\",\n        ])\n\n    def test_init_from_str(self):\n        source = Source(\"\"\"line1\nline2\nline3\"\"\")\n        self.assertEqual(source.lines, [\n            \"line1\",\n            \"line2\",\n            \"line3\",\n        ])\n\n    def test_init_from_source(self):\n        source = Source(Source([\n            \"line1\",\n            \"line2\",\n            \"line3\",\n        ]))\n        self.assertEqual(source.lines, [\n            \"line1\",\n            \"line2\",\n            \"line3\",\n        ])\n\n    def test_init_from_function(self):\n        def myfunc():\n            pass\n        source = Source(myfunc)\n        self.assertEqual(source.lines, getrawcode(myfunc).co_code)\n\n    def test_getitem_int(self):\n        source = Source([\n            \"line1\",\n            \"line2\",\n            \"line3\",\n        ])\n        self.assertEqual(source[1], \"line2\")\n\n    def test_getitem_slice(self):\n        source = Source([\n            \"line1\",\n            \"line2\",\n            \"line3\",\n        ])\n        self.assertEqual(source[1:3], Source([\"line2\", \"line3\"]))\n\n    def test_getitem_slice_step(self):\n        source = Source([\n            \"line1\",\n            \"line2\",\n            \"line3\",\n            \"line4\",\n        ])\n        with self.assertRaises(IndexError):\n            source[1::2]\n\n    def test_iter(self):\n        source = Source([\n            \"line1\",\n            \"line2\",\n            \"line3\",\n        ])\n        expected = [\"line1\", \"line2\", \"line3\"]\n        self.assertEqual(list(source), expected)\n\n    def test_len(self):\n        source = Source([\n            \"line1\",\n            \"line2\",\n            \"line3\",\n        ])\n        self.assertEqual(len(source), 3)\n\n    def test_strip(self):\n        source = Source([\n            \"\",\n            \"line1\",\n            \"line2\",\n            \"\",\n            \"\",\n        ])\n        stripped_source = source.strip()\n        self.assertEqual(stripped_source.lines, [\"line1\", \"line2\"])\n\n    def test_indent(self):\n        source = Source([\n            \"line1\",\n            \"line2\",\n            \"line3\",\n        ])\n        indented_source = source.indent(indent=\"  \")\n        self.assertEqual(indented_source.lines, [\n            \"  line1\",\n            \"  line2\",\n            \"  line3\",\n        ])\n\n    def test_getstatement(self):\n        source = Source([\n            \"def test_function():\",\n            \"    pass\",\n        ])\n        statement = source.getstatement(0)\n        self.assertEqual(statement.lines, [\"def test_function():\"])\n\n    def test_getstatement_with_lineno_error(self):\n        source = Source([\n            \"def test_function():\",\n            \"    pass\",\n        ])\n        with self.assertRaises(IndexError):\n            source.getstatement(10)\n\n    def test_getstatementrange(self):\n        source = Source([\n            \"def test_function():\",\n            \"    pass\"\n        ])\n        start, end = source.getstatementrange(0)\n        self.assertEqual(start, 0)\n        self.assertEqual(end, 2)\n\n    def test_getstatementrange_with_lineno_error(self):\n        source = Source([\n            \"def test_function():\",\n            \"    pass\",\n        ])\n        with self.assertRaises(IndexError):\n            source.getstatementrange(10)\n\n\n"], "sample_115": ["\nimport unittest\nfrom sklearn.utils._set_output import _wrap_in_pandas_container\nfrom sklearn.utils._set_output import _safe_set_output\nfrom sklearn.utils._set_output import _SetOutputMixin\nfrom sklearn.utils._set_output import _get_output_config\nimport pandas as pd\nimport numpy as np\n\n\nclass Test_wrap_in_pandas_container(unittest.TestCase):\n\n    def test_wrap_in_pandas_container_dataframe(self):\n        data = np.array([[1, 2], [3, 4]])\n        df = pd.DataFrame(data, columns=['A', 'B'])\n        wrapped_df = _wrap_in_pandas_container(df, columns=['C', 'D'])\n        self.assertEqual(wrapped_df.columns, ['C', 'D'])\n        self.assertEqual(wrapped_df.values, data)\n\n    def test_wrap_in_pandas_container_ndarray(self):\n        data = np.array([[1, 2], [3, 4]])\n        wrapped_df = _wrap_in_pandas_container(data, columns=['A', 'B'])\n        self.assertEqual(wrapped_df.columns, ['A', 'B'])\n        self.assertEqual(wrapped_df.values, data)\n\n    def test_wrap_in_pandas_container_callable_columns_success(self):\n        data = np.array([[1, 2], [3, 4]])\n        def get_columns():\n            return ['X', 'Y']\n        wrapped_df = _wrap_in_pandas_container(data, columns=get_columns)\n        self.assertEqual(wrapped_df.columns, ['X', 'Y'])\n        self.assertEqual(wrapped_df.values, data)\n\n    def test_wrap_in_pandas_container_callable_columns_failure(self):\n        data = np.array([[1, 2], [3, 4]])\n        def get_columns():\n            raise ValueError(\"Error\")\n        with self.assertRaises(ValueError):\n            _wrap_in_pandas_container(data, columns=get_columns)\n\n    def test_wrap_in_pandas_container_sparsity(self):\n        data = np.array([[1, 2], [3, 4]])\n        from scipy.sparse import csr_matrix\n        sparse_data = csr_matrix(data)\n        with self.assertRaises(ValueError):\n            _wrap_in_pandas_container(sparse_data, columns=['A', 'B'])\n\n\nclass Test_get_output_config(unittest.TestCase):\n\n    def test_get_output_config_default(self):\n        config = _get_output_config(\"transform\", estimator=None)\n        self.assertEqual(config[\"dense\"], \"default\")\n\n    def test_get_output_config_pandas(self):\n        config = _get_output_config(\"transform\", estimator=None)\n        self.assertEqual(config[\"dense\"], \"default\")\n\n    def test_get_output_config_estimator_config(self):\n        class Estimator:\n            def __init__(self):\n                self._sklearn_output_config = {\"transform\": \"pandas\"}\n        estimator = Estimator()\n        config = _get_output_config(\"transform\", estimator=estimator)\n        self.assertEqual(config[\"dense\"], \"pandas\")\n\n    def test_get_output_config_invalid_config(self):\n        with self.assertRaises(ValueError):\n            _get_output_config(\"transform\", estimator=None, dense=\"invalid\")\n\n\n\n\nclass Test_safe_set_output(unittest.TestCase):\n\n    def test_safe_set_output_no_transform(self):\n        class Estimator:\n            pass\n        estimator = Estimator()\n        _safe_set_output(estimator, transform=\"pandas\")\n\n    def test_safe_set_output_no_set_output(self):\n        class Estimator:\n            pass\n        estimator = Estimator()\n        with self.assertRaises(ValueError):\n            _safe_set_output(estimator, transform=\"pandas\")\n\n\n\nclass Test_SetOutputMixin(unittest.TestCase):\n\n    def test_set_output_default(self):\n        class MyEstimator(_SetOutputMixin):\n            pass\n        estimator = MyEstimator()\n        estimator.set_output(transform=None)\n        self.assertEqual(estimator._sklearn_output_config[\"transform\"], None)\n        with self.assertRaises(ValueError):\n            estimator.transform([], return_estimator=True)\n        with self.assertRaises(ValueError):\n            estimator.fit_transform([], return_estimator=True)\n\n    def test_set_output_pandas(self):\n        class MyEstimator(_SetOutputMixin):\n            def __init__(self):\n                self.get_feature_names_out = lambda: ['A', 'B']\n            def transform(self, X):\n                return np.array([[1, 2], [3, 4]])\n\n        estimator = MyEstimator()\n        estimator.set_output(transform=\"pandas\")\n        data = estimator.transform([])\n        self.assertIsInstance(data, pd.DataFrame)\n        self.assertEqual(data.columns, ['A', 'B'])\n        self.assertEqual(data.values, [[1, 2], [3, 4]])\n        with self.assertRaises(ValueError):\n            estimator.transform([], return_estimator=True)\n        with self.assertRaises(ValueError):\n            estimator.fit_transform([], return_estimator=True)\n\n"], "sample_155": ["\nfrom sympy.physics.quantum.tensorproduct import TensorProduct, tensor_product_simp  \nfrom sympy import Matrix, Symbol, Add, Mul, Pow,  Dagger\nfrom sympy.abc import x, y\n\ndef test_tensor_product_matrix():\n    m1 = Matrix([[1,2],[3,4]])\n    m2 = Matrix([[1,0],[0,1]])\n    tp = TensorProduct(m1, m2)\n    assert tp.args[0] == m1\n    assert tp.args[1] == m2\n    assert isinstance(tp, TensorProduct)\n\ndef test_tensor_product_symbols():\n    A = Symbol('A',commutative=False)\n    B = Symbol('B',commutative=False)\n    tp = TensorProduct(A,B)\n    assert tp.args[0] == A\n    assert tp.args[1] == B\n    assert isinstance(tp, TensorProduct)\n    assert str(tp) == 'AxB'\n\ndef test_tensor_product_commutative():\n    a = Symbol('a')\n    b = Symbol('b')\n    tp = TensorProduct(a,b)\n    assert tp.is_commutative == True\n\ndef test_tensor_product_noncommutative():\n    a = Symbol('a',commutative=False)\n    b = Symbol('b',commutative=False)\n    tp = TensorProduct(a,b)\n    assert tp.is_commutative == False\n\ndef test_tensor_product_order():\n    A = Symbol('A',commutative=False)\n    B = Symbol('B',commutative=False)\n    C = Symbol('C',commutative=False)\n    tp = TensorProduct(TensorProduct(A,B),C)\n    assert tp.args[0].args[0] == A\n    assert tp.args[0].args[1] == B\n    assert tp.args[1] == C\n\ndef test_tensor_product_dagger():\n    A = Symbol('A',commutative=False)\n    B = Symbol('B',commutative=False)\n    tp = TensorProduct(A,B)\n    d_tp = Dagger(tp)\n    assert d_tp.args[0] == Dagger(A)\n    assert d_tp.args[1] == Dagger(B)\n    assert isinstance(d_tp, TensorProduct)\n\ndef test_tensor_product_expand():\n    A = Symbol('A',commutative=False)\n    B = Symbol('B',commutative=False)\n    C = Symbol('C',commutative=False)\n    tp = TensorProduct(A+B,C)\n    assert tp._eval_expand_tensorproduct() == (A*C + B*C)\n    \ndef test_tensor_product_simplification():\n    A = Symbol('A',commutative=False)\n    B = Symbol('B',commutative=False)\n    C = Symbol('C',commutative=False)\n    D = Symbol('D',commutative=False)\n    tp = TensorProduct(A,B)*TensorProduct(C,D)\n    simplified_tp = tensor_product_simp(tp)\n    assert simplified_tp == (A*C)x(B*D)\n\ndef test_tensor_product_simp_pow():\n    A = Symbol('A',commutative=False)\n    B = Symbol('B',commutative=False)\n    tp = TensorProduct(A,B)**2\n    simplified_tp = tensor_product_simp(tp)\n    assert simplified_tp == (A*B)**2\n    \n\n\n"], "sample_10": ["\nfrom django.core.checks.translation import (\n    check_language_settings_consistent,\n    check_setting_language_code,\n    check_setting_languages,\n    check_setting_languages_bidi,\n)\nfrom django.conf import settings\nfrom django.utils.translation import get_supported_language_variant\n\nsettings.LANGUAGE_CODE = 'en'\nsettings.LANGUAGES = [('en', 'English'), ('fr', 'French')]\nsettings.LANGUAGES_BIDI = [\n    'ar', 'he', 'ur'\n]\n\ndef test_check_setting_language_code_valid():\n    \"\"\"Test that check_setting_language_code returns an empty list for a valid LANGUAGE_CODE.\"\"\"\n    with open('django/conf/settings.py', 'w') as f:\n        f.write(f'''\n        LANGUAGE_CODE = 'en'\n        ''')\n\n    result = check_setting_language_code(None, )\n    assert result == []\n\ndef test_check_setting_language_code_invalid_empty_string():\n    with open('django/conf/settings.py', 'w') as f:\n        f.write(f'''\n        LANGUAGE_CODE = ''\n        ''')\n    result = check_setting_language_code(None, )\n    assert len(result) == 1\n    assert result[0].id == 'translation.E001'\n\ndef test_check_setting_language_code_invalid_non_string():\n    with open('django/conf/settings.py', 'w') as f:\n        f.write(f'''\n        LANGUAGE_CODE = 123\n        ''')\n    result = check_setting_language_code(None, )\n    assert len(result) == 1\n    assert result[0].id == 'translation.E001'\n\ndef test_check_setting_language_code_invalid_format():\n    with open('django/conf/settings.py', 'w') as f:\n        f.write(f'''\n        LANGUAGE_CODE = 'en-invalid'\n        ''')\n    result = check_setting_language_code(None, )\n    assert len(result) == 1\n    assert result[0].id == 'translation.E001'\n\n\ndef test_check_setting_languages_valid():\n    \"\"\"Test that check_setting_languages returns an empty list for valid LANGUAGES.\"\"\"\n    result = check_setting_languages(None, )\n    assert result == []\n\ndef test_check_setting_languages_invalid_non_string():\n    with open('django/conf/settings.py', 'w') as f:\n        f.write(f'''\n        LANGUAGES = [(123, 'English')]\n        ''')\n    result = check_setting_languages(None, )\n    assert len(result) == 1\n    assert result[0].id == 'translation.E002'\n\ndef test_check_setting_languages_invalid_format():\n    with open('django/conf/settings.py', 'w') as f:\n        f.write(f'''\n        LANGUAGES = [('en', 'English'), ('fr-invalid', 'French')]\n        ''')\n    result = check_setting_languages(None, )\n    assert len(result) == 1\n    assert result[0].id == 'translation.E002'\n\ndef test_check_setting_languages_bidi_valid():\n    \"\"\"Test that check_setting_languages_bidi returns an empty list for valid LANGUAGES_BIDI.\"\"\"\n    result = check_setting_languages_bidi(None, )\n    assert result == []\n\ndef test_check_setting_languages_bidi_invalid_non_string():\n    with open('django/conf/settings.py', 'w') as f:\n        f.write(f'''\n        LANGUAGES_BIDI = [123]\n        ''')\n    result = check_setting_languages_bidi(None, )\n    assert len(result) == 1\n    assert result[0].id == 'translation.E003'\n\ndef test_check_setting_languages_bidi_invalid_format():\n    with open('django/conf/settings.py', 'w') as f:\n        f.write(f'''\n        LANGUAGES_BIDI = ['en-invalid']\n        ''')\n    result = check_setting_languages_bidi(None, )\n    assert len(result) == 1\n    assert result[0].id == 'translation.E003'\n\ndef test_check_language_settings_consistent_valid():\n    \"\"\"Test that check_language_settings_consistent returns an empty list when settings are consistent.\"\"\"\n    result = check_language_settings_consistent(None, )\n    assert result == []\n\ndef test_check_language_settings_consistent_invalid():\n    with open('django/conf/settings.py', 'w') as f:\n        f.write(f'''\n        LANGUAGE_CODE = 'fr'\n        LANGUAGES = [('en', 'English'), ('fr', 'French')]\n        ''')\n\n    result = check_language_settings_consistent(None, )\n    assert len(result) == 1\n    assert result[0].id == 'translation.E004'\n\n\n\n"], "sample_153": ["\nfrom sympy.polys.monomials import ( itermonomials, monomial_count, monomial_mul, monomial_div, monomial_gcd, monomial_lcm, monomial_max, monomial_min, monomial_divides, monomial_pow, Monomial, )\nfrom sympy import symbols\nfrom sympy.testing.pytest import raises\n\ndef test_itermonomials():\n    for i in range(5):\n        for min_degree in range(i + 1):\n            for max_degree in range(min_degree, i + 1):\n                for vars in [\n                    (symbols('x' + str(j) for j in range(i + 1)),),\n                    (symbols('x' + str(j) for j in range(i + 1)), symbols('y' + str(j) for j in range(i + 1))),\n                ]:\n                    for monom in itermonomials(vars, max_degree, min_degree):\n                        assert monomial_deg(monom) >= min_degree\n                        assert monomial_deg(monom) <= max_degree\n                        assert all(e >= 0 for e in monom)\n\n    with raises(ValueError):\n        itermonomials([1, 2], 3, 4)\n\n    with raises(ValueError):\n        itermonomials([1, 2], 3, -1)\n\n    with raises(ValueError):\n        itermonomials([1, 2], 3, 4, min_degrees=[1, 5])\n\n    with raises(ValueError):\n        itermonomials([1, 2], 3, 4, max_degrees=[1, 2])\n\ndef test_monomial_count():\n    assert monomial_count(2, 2) == 6\n    assert monomial_count(3, 3) == 10\n    assert monomial_count(4, 0) == 1\n\ndef test_monomial_mul():\n    assert monomial_mul((1, 2, 3), (4, 5, 6)) == (5, 7, 9)\n    assert monomial_mul((1, 2), (0, 2)) == (1, 4)\n    assert monomial_mul((0, 2), (1, 2)) == (0, 4)\n\ndef test_monomial_div():\n    assert monomial_div((1, 2, 3), (1, 1, 1)) == (0, 1, 2)\n    assert monomial_div((3, 4, 5), (1, 2, 2)) == (2, 2, 1)\n\ndef test_monomial_ldiv():\n    assert monomial_ldiv((1, 2, 3), (1, 1, 1)) == (0, 1, 2)\n    assert monomial_ldiv((3, 4, 5), (1, 2, 2)) == (2, 2, 1)\n\ndef test_monomial_pow():\n    assert monomial_pow((1, 2, 3), 2) == (2, 4, 6)\n\ndef test_monomial_gcd():\n    assert monomial_gcd((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\n    assert monomial_gcd((1, 2, 3), (1, 1, 3)) == (1, 1, 3)\n\ndef test_monomial_lcm():\n    assert monomial_lcm((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\n    assert monomial_lcm((1, 2, 3), (1, 1, 3)) == (1, 2, 3)\n\ndef test_monomial_divides():\n    assert monomial_divides((1, 2), (1, 1))\n    assert not monomial_divides((1, 2), (1, 3))\n\ndef test_monomial_max():\n    assert monomial_max((1, 2, 3), (0, 5, 1), (6, 3, 9)) == (6, 5, 9)\n\ndef test_monomial_min():\n    assert monomial_min((1, 2, 3), (0, 5, 1), (6, 3, 9)) == (0, 2, 1)\n\ndef test_monomial_deg():\n    assert monomial_deg((1, 2)) == 3\n    assert monomial_deg((0, 0, 0)) == 0\n\ndef test_Monomial():\n    monomial = Monomial((1, 2, 3))\n    assert monomial.exponents == (1, 2, 3)\n\n    result = monomial * Monomial((4, 5, 6))\n    assert result.exponents == (5, 7, 9)\n\n    result = monomial / Monomial((1, 1, 1))\n    assert result.exponents == (0, 1, 2)\n\n    result = monomial ** 2\n    assert result.exponents == (2, 4, 6)\n\n\n\n\n"], "sample_106": ["\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.ensemble.iforest import _average_path_length\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.utils.estimator_checks import check_estimator\nfrom sklearn.utils.testing import assert_raises\n\nimport numpy as np\nfrom scipy.sparse import csr_matrix\n\ndef test_iforest_creation():\n    model = IsolationForest()\n    assert isinstance(model, IsolationForest)\n    assert model.n_estimators == 100\n    assert model.max_samples == 'auto'\n    assert model.contamination == 0.1\n    assert model.max_features == 1.0\n    assert model.bootstrap == False\n    assert model.random_state is None\n    assert model.behaviour == 'old'\n    assert model.verbose == 0\n\ndef test_iforest_creation_with_parameters():\n    model = IsolationForest(n_estimators=200,\n                           max_samples=256,\n                           contamination=0.2,\n                           max_features=0.5,\n                           bootstrap=True,\n                           random_state=42,\n                           behaviour='new',\n                           verbose=2)\n    assert model.n_estimators == 200\n    assert model.max_samples == 256\n    assert model.contamination == 0.2\n    assert model.max_features == 0.5\n    assert model.bootstrap == True\n    assert model.random_state == 42\n    assert model.behaviour == 'new'\n    assert model.verbose == 2\n\ndef test_iforest_behaviour():\n    model = IsolationForest(behaviour='new')\n    assert model.behaviour == 'new'\n    assert_raises(DeprecatedWarning, lambda: IsolationForest(behaviour='old'))\n\ndef test_iforest_fit_predict():\n    X, y = make_classification(n_samples=1000, n_features=20, random_state=42)\n    model = IsolationForest()\n    model.fit(X)\n    y_pred = model.predict(X)\n    assert len(y_pred) == X.shape[0]\n    assert np.sum(y_pred == 1) > 0\n    assert np.sum(y_pred == -1) > 0\n\ndef test_iforest_decision_function():\n    X, y = make_classification(n_samples=1000, n_features=20, random_state=42)\n    model = IsolationForest()\n    model.fit(X)\n    scores = model.decision_function(X)\n    assert scores.shape == X.shape[0]\n\ndef test_iforest_score_samples():\n    X, y = make_classification(n_samples=1000, n_features=20, random_state=42)\n    model = IsolationForest()\n    model.fit(X)\n    scores = model.score_samples(X)\n    assert scores.shape == X.shape[0]\n\ndef test_average_path_length():\n    # Test with different number of samples in a leaf\n    n_samples_leaf = np.array([1, 2, 3, 4, 5])\n    expected = np.array([0.0, 1.0, 1.4054856, 1.83244628, 2.21401814])\n    actual = _average_path_length(n_samples_leaf)\n    np.testing.assert_allclose(actual, expected)\n\n\ndef test_iforest_sparse_matrix():\n    X = csr_matrix([[1, 2, 3], [4, 5, 6]])\n    model = IsolationForest()\n    model.fit(X)\n    model.predict(X)\n\ndef test_iforest_with_warm_start():\n    X, y = make_classification(n_samples=1000, n_features=20, random_state=42)\n    model = IsolationForest(warm_start=True)\n    model.fit(X)\n    previous_n_estimators = len(model.estimators_)\n    model.fit(X)\n    assert len(model.estimators_) == previous_n_estimators + 1\n\ndef test_iforest_check_estimator():\n    check_estimator(IsolationForest)\n"], "sample_104": ["\nimport unittest\nfrom sklearn.feature_selection.mutual_info_ import (mutual_info_regression, \n                                                    mutual_info_classif,\n                                                    _compute_mi,\n                                                    _estimate_mi)\nimport numpy as np\nfrom sklearn.datasets import make_classification, make_regression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.utils.estimator_checks import check_estimator\n\n\nclass TestMutualInfo(unittest.TestCase):\n    def test_mutual_info_regression_works(self):\n        X, y = make_regression(n_samples=100, n_features=5, random_state=42)\n\n        mi = mutual_info_regression(X, y, n_neighbors=3)\n        self.assertEqual(mi.shape[0], X.shape[1])\n        self.assertTrue(np.all(mi >= 0))\n\n    def test_mutual_info_classif_works(self):\n        X, y = make_classification(n_samples=100, n_features=5, random_state=42)\n        mi = mutual_info_classif(X, y, n_neighbors=3)\n        self.assertEqual(mi.shape[0], X.shape[1])\n        self.assertTrue(np.all(mi >= 0))\n\n    def test_mutual_info_regression_sparse(self):\n        X, y = make_regression(n_samples=100, n_features=5, random_state=42)\n        X_sparse = X.tocoo() \n\n        mi = mutual_info_regression(X_sparse, y, n_neighbors=3)\n        self.assertEqual(mi.shape[0], X.shape[1])\n        self.assertTrue(np.all(mi >= 0))\n\n    def test_mutual_info_classif_sparse(self):\n        X, y = make_classification(n_samples=100, n_features=5, random_state=42)\n        X_sparse = X.tocoo() \n\n        mi = mutual_info_classif(X_sparse, y, n_neighbors=3)\n        self.assertEqual(mi.shape[0], X.shape[1])\n        self.assertTrue(np.all(mi >= 0))\n\n    def test_discrete_features(self):\n        X, y = make_classification(n_samples=100, n_features=5, \n                                   discrete_features=[0, 1], random_state=42)\n        mi = mutual_info_classif(X, y, discrete_features=[0, 1], n_neighbors=3)\n        self.assertEqual(mi.shape[0], X.shape[1])\n        self.assertTrue(np.all(mi >= 0))\n\n    def test_discrete_target(self):\n        X, y = make_classification(n_samples=100, n_features=5, random_state=42)\n        y[::2] = 0  \n        mi = mutual_info_classif(X, y, discrete_target=True, n_neighbors=3)\n        self.assertEqual(mi.shape[0], X.shape[1])\n        self.assertTrue(np.all(mi >= 0))\n\n    def test_n_neighbors(self):\n        X, y = make_regression(n_samples=100, n_features=5, random_state=42)\n\n        mi_small = mutual_info_regression(X, y, n_neighbors=1)\n        mi_large = mutual_info_regression(X, y, n_neighbors=10)\n        self.assertGreater(np.max(mi_large), np.max(mi_small)) \n\n    def test_copy_parameter(self):\n        X, y = make_regression(n_samples=100, n_features=5, random_state=42)\n        X_copy = X.copy()\n        mi_copy = mutual_info_regression(X, y, copy=True)\n        mi_no_copy = mutual_info_regression(X, y, copy=False)\n\n        self.assertTrue(np.allclose(mi_copy, mi_no_copy))\n        self.assertNotEqual(X_copy, X)\n\n    def test_random_state(self):\n        X, y = make_regression(n_samples=100, n_features=5, random_state=42)\n\n        mi1 = mutual_info_regression(X, y, random_state=42)\n        mi2 = mutual_info_regression(X, y, random_state=42)\n        self.assertTrue(np.allclose(mi1, mi2))\n\n    def test_estimator_checks(self):\n        check_estimator(mutual_info_regression)\n        check_estimator(mutual_info_classif)\n\n    def test_compute_mi(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        y = np.array([0, 1, 0])\n        mi = _compute_mi(X, y, discrete_features=True, n_neighbors=3)\n\n        expected_mi = 0.6931471805599453\n        self.assertAlmostEqual(mi, expected_mi)\n"], "sample_116": ["\nfrom sympy.printing.ccode import ccode\nfrom sympy import symbols, sin, cos, exp, log, pi, Rational, Abs, Piecewise, Matrix, MatrixSymbol, IndexedBase, Idx, Function\nfrom sympy.utilities.pytest import raises\n\ndef test_basic_operations():\n    x = symbols('x')\n    assert ccode(x + 1) == 'x + 1'\n    assert ccode(x * 2) == '2*x'\n    assert ccode(x**2) == 'pow(x, 2)'\n    assert ccode(sin(x)) == 'sin(x)'\n    assert ccode(cos(x)) == 'cos(x)'\n    assert ccode(exp(x)) == 'exp(x)'\n    assert ccode(log(x)) == 'log(x)'\n    assert ccode(pi) == 'M_PI'\n\ndef test_rational():\n    assert ccode(Rational(1, 2)) == '0.5'\n\ndef test_abs():\n    x = symbols('x')\n    assert ccode(Abs(x)) == 'fabs(x)'\n\ndef test_piecewise():\n    x = symbols('x')\n    expr = Piecewise((x + 1, x > 0), (x, True))\n    assert ccode(expr) == 'if (x > 0) {\\n x = x + 1;\\n} else {\\n x = x;\\n}'\n\ndef test_matrix():\n    x = symbols('x')\n    mat = Matrix([[x**2, sin(x), x + 1]])\n    A = MatrixSymbol('A', 1, 3)\n    assert ccode(mat, A) == 'A[0] = pow(x, 2);\\nA[1] = sin(x);\\nA[2] = x + 1;'\n\ndef test_indexed():\n    x = symbols('x')\n    y = IndexedBase('y', shape=(5,))\n    i = Idx('i', 4)\n    assert ccode(y[i]) == 'y[i]'\n    assert ccode(y[i] + 1) == 'y[i] + 1'\n\ndef test_function_overrides():\n    from sympy import Function\n    f = Function('f')\n    custom_functions = {'f': 'my_f'}\n    assert ccode(f(x), user_functions=custom_functions) == 'my_f(x)'\n\ndef test_user_functions():\n    x = symbols('x')\n    custom_functions = {'Abs': [(lambda x: not x.is_integer, 'fabs'),\n                                (lambda x: x.is_integer, 'ABS')]\n    assert ccode(Abs(x), user_functions=custom_functions) == 'fabs(x)'\n    assert ccode(Abs(int(x)), user_functions=custom_functions) == 'ABS(x)'\n\ndef test_sign():\n    x = symbols('x')\n    assert ccode(sign(x)) == '((({0}) > 0) - (({0}) < 0))'.format(x)\n\n\n\ndef test_for_loop():\n    x = symbols('x')\n    from sympy import Range\n    assert ccode(x + 1 for x in Range(1, 5)) == 'for (int x = 1; x < 5; x++){\\n x + 1;\\n}'\n\ndef test_for_loop_with_assign():\n    x = symbols('x')\n    from sympy import Range\n    z = symbols('z')\n    assert ccode((x + 1) for x in Range(1, 5), assign_to=z) == 'for (int x = 1; x < 5; x++){\\nz = x + 1;\\n}'\n\n\ndef test_augmented_assignment():\n    x = symbols('x')\n    assert ccode(x += 1) == 'x += 1'\n    assert ccode(x -= 5) == 'x -= 5'\n    assert ccode(x *= 2) == 'x *= 2'\n    assert ccode(x /= 3) == 'x /= 3'\n    assert ccode(x //= 4) == 'x //= 4'\n    assert ccode(x %= 5) == 'x %= 5'\n\n\n\ndef test_invalid_piecewise():\n    x = symbols('x')\n    with raises(ValueError):\n        ccode(Piecewise((x + 1, x > 0)))\n\n\n\n"], "sample_51": ["\nimport os\nfrom unittest import TestCase\n\nfrom django.template import engines\nfrom django.template.backends.django import DjangoTemplates\nfrom django.utils.autoreload import autoreload_started, file_changed, is_django_path\n\n\nclass TestAutoreload(TestCase):\n    def test_get_template_directories(self):\n        # Mock DjangoTemplate backend\n        class MockDjangoTemplates(DjangoTemplates):\n            def __init__(self):\n                self.dirs = ['/path/to/mock/dir']\n                super().__init__()\n\n            def get_template_loaders(self):\n                return [MockTemplateLoader()]\n\n        engines.all.clear()\n        engines.all.append(MockDjangoTemplates())\n\n        class MockTemplateLoader:\n            def get_dirs(self):\n                return ['/path/to/loader/dir']\n\n        self.assertEqual(get_template_directories(), {'/path/to/mock/dir', '/path/to/loader/dir'})\n\n    def test_reset_loaders(self):\n        # Mock DjangoTemplate backend\n        class MockDjangoTemplates(DjangoTemplates):\n            def __init__(self):\n                self.dirs = ['/path/to/mock/dir']\n                self.template_loaders = [MockTemplateLoader()]\n                super().__init__()\n\n        engines.all.clear()\n        engines.all.append(MockDjangoTemplates())\n\n        class MockTemplateLoader:\n            def reset(self):\n                # Simulate reset logic\n                pass\n\n        reset_loaders()\n        self.assertEqual(len(engines.all()), 1)\n\n    def test_watch_for_template_changes(self):\n        # Mock autoreload_started signal receiver\n        autoreload_started.send(None, **{})\n\n        # Mock get_template_directories to return a list of directories\n        def mock_get_template_directories():\n            return ['/path/to/template/dir']\n\n        with self.patch('django.template.autoreload.get_template_directories', mock_get_template_directories):\n            watch_for_template_changes(None, **{})\n\n        # Assert that watch_for_template_changes called sender.watch_dir\n        # (You'll need to inspect the implementation of sender.watch_dir)\n\n    def test_template_changed(self):\n        # Mock file_changed signal receiver\n        file_changed.send(None, file_path=Path('/path/to/template.html'))\n\n        # Mock get_template_directories to return a list of directories\n        def mock_get_template_directories():\n            return ['/path/to/template/dir']\n\n        with self.patch('django.template.autoreload.get_template_directories', mock_get_template_directories):\n            template_changed(None, file_path=Path('/path/to/template.html'), **{})\n\n        # Assert that template_changed called reset_loaders\n\n\n\n"], "sample_60": ["\nfrom django.db import (\n    IntegrityError,\n    NotSupportedError,\n    OperationalError,\n    ProgrammingError,\n    connection,\n)\nfrom django.db.models import Prefetch, FileField, Value\nfrom django.db.models.functions import Lower, Now\nfrom django.test import (\n    TestCase,\n    override_settings,\n    skipIfDBFeature,\n    skipUnlessDBFeature,\n)\nfrom .models import (\n    BigAutoFieldModel,\n    Country,\n    FieldsWithDbColumns,\n    NoFields,\n    NullableFields,\n    Pizzeria,\n    ProxyCountry,\n    ProxyMultiCountry,\n    ProxyMultiProxyCountry,\n    ProxyProxyCountry,\n    RelatedModel,\n    Restaurant,\n    SmallAutoFieldModel,\n    State,\n    TwoFields,\n    UpsertConflict,\n)\n\nclass QuerySetTests(TestCase):\n\n    def test_empty_query_set(self):\n        qs = BigAutoFieldModel.objects.none()\n        self.assertTrue(qs.is_empty())\n        self.assertEqual(len(qs), 0)\n        self.assertEqual(list(qs), [])\n\n    def test_query_set_iterator(self):\n        objects = [BigAutoFieldModel(pk=i) for i in range(5)]\n        BigAutoFieldModel.objects.bulk_create(objects)\n        qs = BigAutoFieldModel.objects.all()\n        iterator = iter(qs)\n        self.assertEqual(next(iterator).pk, 0)\n        self.assertEqual(next(iterator).pk, 1)\n        self.assertEqual(list(qs), objects)\n\n    def test_query_set_getitem(self):\n        objects = [BigAutoFieldModel(pk=i) for i in range(5)]\n        BigAutoFieldModel.objects.bulk_create(objects)\n        qs = BigAutoFieldModel.objects.all()\n        self.assertEqual(qs[0].pk, 0)\n        self.assertEqual(qs[2].pk, 2)\n\n    def test_query_set_len(self):\n        objects = [BigAutoFieldModel(pk=i) for i in range(5)]\n        BigAutoFieldModel.objects.bulk_create(objects)\n        qs = BigAutoFieldModel.objects.all()\n        self.assertEqual(len(qs), 5)\n\n    def test_query_set_contains(self):\n        objects = [BigAutoFieldModel(pk=i) for i in range(5)]\n        BigAutoFieldModel.objects.bulk_create(objects)\n        qs = BigAutoFieldModel.objects.all()\n        self.assertTrue(3 in qs)\n        self.assertFalse(100 in qs)\n\n    def test_query_set_iter(self):\n        objects = [BigAutoFieldModel(pk=i) for i in range(5)]\n        BigAutoFieldModel.objects.bulk_create(objects)\n        qs = BigAutoFieldModel.objects.all()\n        list(qs)  # Consume the iterator\n\n    def test_query_set_ordering(self):\n        objects = [\n            BigAutoFieldModel(pk=i) for i in range(5)\n        ]\n        BigAutoFieldModel.objects.bulk_create(objects)\n        qs = BigAutoFieldModel.objects.all().order_by(\"pk\")\n        self.assertEqual(list(qs), [o for o in objects])\n\n    def test_query_set_related_objects(self):\n        country1 = Country(name=\"USA\")\n        country1.save()\n        country2 = Country(name=\"Canada\")\n        country2.save()\n        pizzeria1 = Pizzeria(name=\"Pizza Palace\", country=country1)\n        pizzeria1.save()\n        pizzeria2 = Pizzeria(name=\"Pizza Hut\", country=country2)\n        pizzeria2.save()\n        qs = Pizzeria.objects.all()\n        for pizzeria in qs:\n            self.assertIsInstance(pizzeria.country, Country)\n\n    def test_query_set_prefetch_related(self):\n        country1 = Country(name=\"USA\")\n        country1.save()\n        country2 = Country(name=\"Canada\")\n        country2.save()\n        pizzeria1 = Pizzeria(name=\"Pizza Palace\", country=country1)\n        pizzeria1.save()\n        pizzeria2 = Pizzeria(name=\"Pizza Hut\", country=country2)\n        pizzeria2.save()\n        qs = Pizzeria.objects.prefetch_related(\"country\")\n        for pizzeria in qs:\n            self.assertIsInstance(pizzeria.country, Country)\n        # The prefetch should have populated the country objects\n\n    def test_query_set_extra(self):\n        qs = BigAutoFieldModel.objects.extra(select={\"new_field\": \"pk + 1\"})\n        self.assertEqual(qs.values_list(\"new_field\", flat=True), [1, 2, 3, 4, 5])\n\n\n\n"], "sample_81": ["\nimport numpy as np\nimport pytest\nimport xarray as xr\nfrom xarray.core import groupby\nfrom xarray.core.groupby import (\n    _DummyGroup,\n    _ensure_1d,\n    _get_index_and_items,\n    _inverse_permutation_indices,\n    _unique_and_monotonic,\n    _unique_and_monotonic_with_groups,\n)\n\n@pytest.fixture()\ndef ds_test():\n    data = np.random.rand(2, 3, 3)\n    coords = {\"x\": [0, 1], \"y\": [0, 1, 2], \"z\": [0, 1, 2]}\n    return xr.Dataset({\"a\": ((\"x\", \"y\", \"z\"), data), \"b\": ((\"x\", \"z\"), data)}, coords=coords)\n\n@pytest.fixture()\ndef da_test():\n    data = np.random.rand(2, 3, 3)\n    coords = {\"x\": [0, 1], \"y\": [0, 1, 2], \"z\": [0, 1, 2]}\n    return xr.DataArray(data, coords=coords, dims=[\"x\", \"y\", \"z\"])\n\ndef test_ensure_1d():\n    da = xr.DataArray(np.arange(12), dims=(\"x\", \"y\"), coords={\"x\": [0, 1, 2], \"y\": [0, 1, 2]})\n    group_name = \"x\"\n    group = da.groupby(group_name)\n\n    # Make sure the result is always 1D\n    for var in group.groups:\n        assert len(var) == 1\n        assert len(var.shape) == 1\n\ndef test__consolidate_slices(ds_test):\n    group = ds_test.groupby(\"x\")\n    assert group._consolidate_slices(group.groups[0]) == slice(0, 2)\n\n\ndef test_unique_and_monotonic(ds_test):\n    group_var = ds_test[\"x\"]\n    result = _unique_and_monotonic(group_var.values)\n    assert result == (np.array([0, 1]), True)\n\ndef test_unique_and_monotonic_with_groups(ds_test):\n    group_var = ds_test[\"x\"]\n    result = _unique_and_monotonic_with_groups(group_var.values, group_var.index)\n    assert result == ((np.array([0, 1]),), True)\n\ndef test__get_index_and_items(ds_test):\n    group = ds_test.groupby(\"x\")\n    items, indices = _get_index_and_items(group.groups)\n    assert items == [[ds_test[\"a\"][i].values for i in indices[0]]] \n\n\ndef test__inverse_permutation_indices(ds_test):\n    indices = np.array([1, 0])\n    result = _inverse_permutation_indices(indices)\n    assert result == [1, 0]  \n\n\n\n    \n"], "sample_135": ["\nfrom sympy.utilities.iterables import (\n    _partition, _set_partitions, binary_partitions, bracelets, capture, cartes, common_prefix, common_suffix, connected_components, dict_merge, filter_symbols, flatten, generate_bell, generate_derangements, generate_involutions, generate_oriented_forest, group, has_dups, ibin, iproduct, kbins, minlex, multiset, multiset_combinations, multiset_partitions, multiset_permutations, necklaces, numbered_symbols, ordered, partitions, permutations, postfixes, postorder_traversal, prefixes, reshape, rotate_left, rotate_right, runs, sift, strongly_connected_components, subsets, take, topological_sort, unflatten, uniq, variations, ordered_partitions, rotations, is_palindromic\n)\nfrom sympy.utilities.enumerative import (\n    factoring_visitor, multiset_partitions_taocp\n)\nimport unittest\n\nclass TestIterables(unittest.TestCase):\n\n    def test__partition(self):\n        self.assertEqual(_partition([1, 2, 3], 2), [[1, 2], [3]])\n        self.assertEqual(_partition([1, 2, 3], 3), [[1, 2, 3]])\n        self.assertEqual(_partition([], 2), [])\n        self.assertEqual(_partition([], 1), [])\n\n    def test__set_partitions(self):\n        self.assertEqual(_set_partitions([1, 2, 3], 2), [[{1, 2}, {3}], [{1}, {2}, {3}]])\n        self.assertEqual(_set_partitions([1, 2, 3], 1), [[{1, 2, 3}]] )\n        self.assertEqual(_set_partitions([], 2), [])\n        \n\n    def test_binary_partitions(self):\n        self.assertEqual(list(binary_partitions(4)), [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 1], [0, 1, 0, 0], [0, 1, 0, 1], [0, 1, 1, 0], [0, 1, 1, 1], [1, 0, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0], [1, 0, 1, 1], [1, 1, 0, 0], [1, 1, 0, 1], [1, 1, 1, 0], [1, 1, 1, 1]])\n\n    def test_bracelets(self):\n        self.assertEqual(list(bracelets(3, 2)), [['...', '...'], ['..o', 'o..'], ['o..', '..o'], ['oo.', '.oo'], ['o.o', '.oo'], ['..oo', '.o.'], ['o.o', '.oo'], ['oo.', '.oo']])\n\n    def test_capture(self):\n        self.assertEqual(capture('ABCD', 'CDE'), 'CDE')\n\n\n    def test_cartes(self):\n        self.assertEqual(list(cartes( (1,2),(3,4) )), [(1,3), (1,4), (2,3), (2,4)])\n\n    def test_common_prefix(self):\n        self.assertEqual(common_prefix('ABAB', 'ABC'), 'AB')\n        self.assertEqual(common_prefix('ABAB', 'ABD'), 'AB')\n        self.assertEqual(common_prefix('ABAB', 'ABCD'), 'AB')\n        self.assertEqual(common_prefix('ABAB', 'ACAB'), 'AB')\n        self.assertEqual(common_prefix('ABAB', 'A'), 'A')\n\n    def test_common_suffix(self):\n        self.assertEqual(common_suffix('ABAB', 'ABC'), 'AB')\n        self.assertEqual(common_suffix('ABAB', 'ABD'), 'AB')\n        self.assertEqual(common_suffix('ABAB', 'ABCD'), 'AB')\n        self.assertEqual(common_suffix('ABAB', 'ACAB'), 'AB')\n        self.assertEqual(common_suffix('ABAB', 'A'), 'A')\n\n    def test_connected_components(self):\n        self.assertEqual(connected_components([(0, 1), (1, 2), (2, 3)]), [[0, 1, 2, 3]])\n        self.assertEqual(connected_components([(0, 1), (2, 3), (4, 5)]), [[0, 1], [2, 3], [4, 5]])\n        self.assertEqual(connected_components([(0, 1), (1, 2), (2, 3), (4, 5)]), [[0, 1, 2, 3], [4, 5]])\n\n    def test_dict_merge(self):\n        self.assertEqual(dict_merge({'a': 1, 'b': 2}, {'b': 3, 'c': 4}), {'a': 1, 'b': 3, 'c': 4})\n        self.assertEqual(dict_merge({'a': 1, 'b': 2}, {'x': 3, 'y': 4}), {'a': 1, 'b': 2, 'x': 3, 'y': 4})\n\n    def test_filter_symbols(self):\n        self.assertEqual(filter_symbols('abc123', '123'), 'abc')\n        self.assertEqual(filter_symbols('abc123', 'ab'), 'abc123')\n\n    def test_flatten(self):\n        self.assertEqual(flatten([1, 2, [3, 4], 5]), [1, 2, 3, 4, 5])\n\n    def test_generate_bell(self):\n        self.assertEqual(list(generate_bell(3)), [[0, 0, 0], [0, 1, 1], [1, 2, 0], [1, 1, 1]])\n\n    def test_generate_derangements(self):\n        self.assertEqual(list(generate_derangements([1, 2, 3])), [[0, 2, 1], [0, 1, 3], [1, 2, 0], [1, 3, 2], [2, 0, 1], [2, 1, 0], [3, 0, 2], [3, 2, 1]])\n\n    def test_generate_involutions(self):\n        self.assertEqual(list(generate_involutions([1, 2, 3])), [[1, 2, 3], [1, 3, 2]])\n\n    def test_generate_oriented_forest(self):\n        self.assertEqual(list(generate_oriented_forest(4)), [[0, 1, 2, 3], [0, 1, 2, 2], [0, 1, 2, 1], [0, 1, 2, 0], [0, 1, 1, 1], [0, 1, 1, 0], [0, 1, 0, 1], [0, 1, 0, 0], [0, 0, 0, 0]])\n\n    def test_group(self):\n        self.assertEqual(group([1, 2, 3, 4, 4, 3], 3), [[1, 2, 3], [4, 4, 3]])\n\n    def test_has_dups(self):\n        self.assertTrue(has_dups([1, 2, 2, 3]))\n        self.assertFalse(has_dups([1, 2, 3, 4]))\n\n    def test_ib(self):\n        self.assertEqual(ib(3, 2), [[0, 1], [1, 2], [2, 0]])\n\n    def test_iproduct(self):\n        self.assertEqual(list(iproduct([1, 2], [3, 4, 5])), [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5)])\n\n    def test_kbins(self):\n        self.assertEqual(list(kbins(list(range(5), 2)), [[0], [1, 2, 3, 4], [0, 1], [2, 3], [4]])\n\n    def test_minlex(self):\n        self.assertEqual(minlex('123', directed=False))\n        self.assertEqual(minlex('123'))\n    def test_set_partitions(self):\n        self.assertEqual(list(partitions([1, 2, 3]), [[1, 2, 3], [1, 2, 3], [1, 2, 3]])\n\n\n\n"], "sample_150": ["\nfrom sympy.utilities.lambdify import lambdify, implemented_function, lambdastr, _imp_namespace\nfrom sympy.abc import *\nfrom sympy import sin, cos, exp, log, sqrt, diff, O\nfrom sympy.testing.pytest import raises\nfrom sympy.core.function import Function\nimport numpy as np\nimport math\n\ndef test_lambdify_basic():\n    f = lambdify(x, x**2)\n    assert f(2) == 4\n\ndef test_lambdify_multiple_symbols():\n    f = lambdify((x, y), x**2 + 2*y)\n    assert f(1, 2) == 5\n\ndef test_lambdify_with_numpy():\n    f = lambdify(x, sin(x), 'numpy')\n    assert np.isclose(f(0), 0)\n\ndef test_lambdify_with_scipy():\n    f = lambdify(x, sin(x), 'scipy')\n    assert np.isclose(f(0), 0)\n\ndef test_lambdify_with_mpmath():\n    f = lambdify(x, sin(x), 'mpmath')\n    assert np.isclose(f(0), 0)\n\ndef test_lambdify_with_custom_module():\n    def my_func(x):\n        return x**3\n    \n    f = lambdify(x, my_func(x), modules={'my_module': my_func})\n    assert f(2) == 8\n\ndef test_lambdify_with_custom_printer():\n    class CustomPrinter:\n        def doprint(self, expr):\n            return repr(expr)\n\n    f = lambdify(x, x**2, printer=CustomPrinter())\n    assert f(2) == '2**2'\n\ndef test_lambdify_cse():\n    f = lambdify(x, x**2 + 2*x, cse=True)\n    assert f(2) == 8\n\ndef test_lambdify_cse_with_nested_expressions():\n    f = lambdify(x, (x + 1)**2, cse=True)\n    assert f(2) == 9\n\ndef test_lambdify_with_dummies():\n    f = lambdify(x, sin(x + Dummy()), dummify=True)\n    assert f(2) == np.sin(2 + 0)\n\ndef test_lambdastr():\n    assert lambdastr(x, x**2) == 'lambda x: (x**2)'\n    assert lambdastr((x,y), x + y) == 'lambda x,y: (x + y)'\n    assert lambdastr((x, (y, z)), x + y) == 'lambda _0,_1: (lambda x,y,z: (x + y))(_0,_1[0],_1[1])'\n\ndef test_implemented_function():\n    f = implemented_function('f', lambda x: x + 1)\n    assert f(2) == 3\n    \ndef test_implemented_function_with_kwarg():\n    class MyFunction(Function):\n        def __new__(cls, *args, **kwargs):\n            return super(MyFunction, cls).__new__(cls, *args)\n\n    f = implemented_function('f', lambda x: x + 1, kwarg1=1)\n    assert f(2) == 3\n    assert f._kwargs == {'kwarg1': 1}\n\ndef test_implemented_function_with_existing_name():\n    implemented_function('sin', lambda x: x)\n    raises(ValueError, implemented_function, 'sin', lambda x: x**2)\n\ndef test_imp_namespace():\n    from sympy import symbols, sin\n    x = symbols('x')\n    f = sin(x)\n    namespace = _imp_namespace(f)\n    assert 'sin' in namespace\ndef test_imp_namespace_with_list():\n    from sympy import symbols, sin\n    x = symbols('x')\n    f = [sin(x), x**2]\n    namespace = _imp_namespace(f)\n    assert 'sin' in namespace\n    assert 'x' in namespace\n\n"], "sample_83": ["\nfrom unittest import TestCase\nfrom pylint.checkers import misc\nfrom pylint.checkers.misc import EncodingChecker, ByIdManagedMessagesChecker\n\nclass TestMiscCheckers(TestCase):\n\n    def test_encoding_checker_basic(self):\n        # Test EncodingChecker with basic ascii content\n        checker = EncodingChecker(None)\n        node = nodes.Module()\n        node.file_encoding = 'ascii'\n        with self.assertLogs() as cm:\n            checker.process_module(node)\n        self.assertEqual(len(cm.output), 0)\n\n    def test_encoding_checker_utf8(self):\n        # Test EncodingChecker with utf8 content\n        checker = EncodingChecker(None)\n        node = nodes.Module()\n        node.file_encoding = 'utf-8'\n        with self.assertLogs() as cm:\n            checker.process_module(node)\n        self.assertEqual(len(cm.output), 0)\n\n    def test_encoding_checker_decode_error(self):\n        # Test EncodingChecker with a line that cannot be decoded\n        checker = EncodingChecker(None)\n        node = nodes.Module()\n        node.file_encoding = 'ascii'\n        node.stream = [b'\\x80']\n        with self.assertLogs() as cm:\n            checker.process_module(node)\n        self.assertTrue(\"Cannot decode using encoding\" in cm.output[0].msg)\n\n    def test_encoding_checker_pragma(self):\n        # Test EncodingChecker with a pragma encoding declaration\n        checker = EncodingChecker(None)\n        node = nodes.Module()\n        node.file_encoding = 'ascii'\n        node.stream = [b\"# coding: utf-8\"]\n        with self.assertLogs() as cm:\n            checker.process_module(node)\n        self.assertEqual(len(cm.output), 0)\n\n    def test_encoding_checker_notes(self):\n        # Test EncodingChecker with notes\n        checker = EncodingChecker(None)\n        node = nodes.Module()\n        node.file_encoding = 'ascii'\n        node.stream = [b'# TODO Fix this']\n        with self.assertLogs() as cm:\n            checker.process_module(node)\n        self.assertTrue(\"Used when a warning note as FIXME or XXX is detected\" in cm.output[0].msg)\n\n    def test_by_id_managed_messages_checker(self):\n        checker = ByIdManagedMessagesChecker(None)\n        # Test how messages are stored and cleared.\n        checker._by_id_managed_msgs = [\n            (\"module\", \"F001\", \"symbol\", 10, False),\n        ]\n        checker.process_module(None)  \n        self.assertEqual(len(checker._by_id_managed_msgs), 0)\n\n\n"], "sample_55": ["\nfrom django.db.backends.postgresql.client import DatabaseClient\nimport unittest\nfrom unittest.mock import patch\nfrom django.conf import settings\n\nclass TestDatabaseClient(unittest.TestCase):\n\n    def test__init__(self):\n        client = DatabaseClient()\n        self.assertEqual(client.executable_name, \"psql\")\n\n    @patch('os.environ')\n    def test_settings_to_cmd_args_env_no_db(self, mock_env):\n        settings_dict = {\n            \"HOST\": \"localhost\",\n            \"PORT\": 5432,\n            \"USER\": \"testuser\"\n        }\n        parameters = [\"-c\", \"SELECT NOW()\"]\n        args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n        self.assertEqual(args, [\"psql\", \"-U\", \"testuser\", \"-h\", \"localhost\", \"-p\", \"5432\", \"-c\", \"SELECT NOW()\"])\n        self.assertEqual(len(env), 0)\n\n    @patch('os.environ')\n    def test_settings_to_cmd_args_env_with_db(self, mock_env):\n        settings_dict = {\n            \"HOST\": \"localhost\",\n            \"PORT\": 5432,\n            \"NAME\": \"mydb\",\n            \"USER\": \"testuser\"\n        }\n        parameters = [\"-c\", \"SELECT NOW()\"]\n        args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n        self.assertEqual(args, [\"psql\", \"-U\", \"testuser\", \"-h\", \"localhost\", \"-p\", \"5432\", \"mydb\", \"-c\", \"SELECT NOW()\"])\n        self.assertEqual(len(env), 0)\n\n    @patch('os.environ')\n    def test_settings_to_cmd_args_env_with_password(self, mock_env):\n        settings_dict = {\n            \"HOST\": \"localhost\",\n            \"PORT\": 5432,\n            \"NAME\": \"mydb\",\n            \"USER\": \"testuser\",\n            \"PASSWORD\": \"mypassword\"\n        }\n        parameters = [\"-c\", \"SELECT NOW()\"]\n        args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n        self.assertEqual(args, [\"psql\", \"-U\", \"testuser\", \"-h\", \"localhost\", \"-p\", \"5432\", \"mydb\", \"-c\", \"SELECT NOW()\"])\n        self.assertEqual(len(env), 1)\n        self.assertEqual(env[\"PGPASSWORD\"], \"mypassword\")\n\n    @patch('os.environ')\n    def test_settings_to_cmd_args_env_with_passfile(self, mock_env):\n        settings_dict = {\n            \"HOST\": \"localhost\",\n            \"PORT\": 5432,\n            \"NAME\": \"mydb\",\n            \"USER\": \"testuser\",\n            \"OPTIONS\": {\"passfile\": \"/path/to/passfile\"}\n        }\n        parameters = [\"-c\", \"SELECT NOW()\"]\n        args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n        self.assertEqual(args, [\"psql\", \"-U\", \"testuser\", \"-h\", \"localhost\", \"-p\", \"5432\", \"mydb\", \"-c\", \"SELECT NOW()\"])\n        self.assertEqual(len(env), 1)\n        self.assertEqual(env[\"PGPASSFILE\"], \"/path/to/passfile\")\n\n    def test_runshell_with_parameters(self):\n        client = DatabaseClient()\n        with patch('signal.signal') as mock_signal:\n            client.runshell([\"-c\", \"SELECT NOW()\"])\n            mock_signal.assert_called()\n"], "sample_107": ["\nimport numpy as np\nfrom sklearn.metrics.cluster import  _generalized_average,  _astype_copy_false, contingency_matrix\nfrom sklearn.metrics.cluster import adjusted_mutual_info_score\nfrom sklearn.metrics.cluster import adjusted_rand_score\nfrom sklearn.metrics.cluster import completeness_score\nfrom sklearn.metrics.cluster import fowlkes_mallows_score\nfrom sklearn.metrics.cluster import homogeneity_score\nfrom sklearn.metrics.cluster import mutual_info_score\nfrom sklearn.metrics.cluster import normalized_mutual_info_score\nfrom sklearn.metrics.cluster import v_measure_score\nimport unittest\n\nclass TestCluster(_unittest.TestCase):\n\n\n\n    def test_homogeneity_score(self):\n        self.assertEqual(homogeneity_score([0, 0, 1, 1], [0, 0, 1, 1]), 1.0)\n        self.assertEqual(homogeneity_score([0, 0, 1, 1], [1, 1, 0, 0]), 0.0)\n        self.assertEqual(homogeneity_score([0, 0, 0, 0], [0, 1, 2, 3]), 0.0)\n\n    def test_completeness_score(self):\n        self.assertEqual(completeness_score([0, 0, 1, 1], [0, 0, 1, 1]), 1.0)\n        self.assertEqual(completeness_score([0, 0, 1, 1], [1, 1, 0, 0]), 0.0)\n        self.assertEqual(completeness_score([0, 0, 0, 0], [0, 1, 2, 3]), 0.0)\n\n    def test_v_measure_score(self):\n        self.assertEqual(v_measure_score([0, 0, 1, 1], [0, 0, 1, 1]), 1.0)\n        self.assertEqual(v_measure_score([0, 0, 1, 1], [1, 1, 0, 0]), 1.0)\n        self.assertEqual(v_measure_score([0, 0, 0, 0], [0, 1, 2, 3]), 0.0)\n\n    def test_mutual_info_score(self):\n        self.assertEqual(mutual_info_score([0, 0, 1, 1], [0, 0, 1, 1]),\n                         0.0)\n        self.assertEqual(mutual_info_score([0, 0, 1, 1], [1, 1, 0, 0]),\n                         0.0)\n        self.assertEqual(mutual_info_score([0, 0, 0, 0], [0, 1, 2, 3]),\n                         0.0)\n\n\n    def test_normalized_mutual_info_score(self):\n        self.assertEqual(normalized_mutual_info_score([0, 0, 1, 1], [0, 0, 1, 1]),\n                         1.0)\n        self.assertEqual(normalized_mutual_info_score([0, 0, 1, 1], [1, 1, 0, 0]),\n                         1.0)\n        self.assertEqual(normalized_mutual_info_score([0, 0, 0, 0], [0, 1, 2, 3]),\n                         0.0)\n\n    def test_adjusted_mutual_info_score(self):\n        self.assertEqual(adjusted_mutual_info_score([0, 0, 1, 1], [0, 0, 1, 1]),\n                         1.0)\n        self.assertEqual(adjusted_mutual_info_score([0, 0, 1, 1], [1, 1, 0, 0]),\n                         1.0)\n        self.assertEqual(adjusted_mutual_info_score([0, 0, 0, 0], [0, 1, 2, 3]),\n                         0.0)\n\n    def test_fowlkes_mallows_score(self):\n        self.assertEqual(fowlkes_mallows_score([0, 0, 1, 1], [0, 0, 1, 1]), 1.0)\n        self.assertEqual(fowlkes_mallows_score([0, 0, 1, 1], [1, 1, 0, 0]), 0.0)\n        self.assertEqual(fowlkes_mallows_score([0, 0, 0, 0], [0, 1, 2, 3]), 0.0)\n\n\n\n"], "sample_101": ["\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.ensemble import VotingClassifier, VotingRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.datasets import make_classification\nfrom sklearn.datasets import make_regression\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport unittest\n\nclass TestVotingClassifier(unittest.TestCase):\n\n    def test_voting_classifier_init(self):\n        VotingClassifier(estimators=[('lr', LogisticRegression())])\n\n    def test_voting_classifier_fit(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier()\n        eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)], voting='hard')\n        eclf.fit(X, y)\n\n    def test_voting_classifier_predict(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier()\n        eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)], voting='hard')\n        eclf.fit(X, y)\n        y_pred = eclf.predict(X)\n        self.assertEqual(len(y_pred), len(y))\n\n    def test_voting_classifier_predict_proba(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier()\n        eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)], voting='soft')\n        eclf.fit(X, y)\n        y_pred_proba = eclf.predict_proba(X)\n        self.assertEqual(y_pred_proba.shape[1], 2)  # Assuming binary classification\n\n    def test_voting_classifier_transform(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier()\n        eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)])\n        eclf.fit(X, y)\n        transformed = eclf.transform(X)\n        self.assertEqual(transformed.shape[1], 2)  # 2 classifiers\n\n    def test_voting_classifier_set_params(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier()\n        eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)], voting='hard')\n        eclf.set_params(rf=None)\n        self.assertEqual(len(eclf.estimators_), 1)\n\n    def test_voting_classifier_weights(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier()\n        eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)],\n                                weights=[1, 2])\n        eclf.fit(X, y)\n\n    def test_voting_classifier_invalid_weights(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier()\n        with self.assertRaises(ValueError):\n            eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)],\n                                    weights=[1, 2, 3, 4])\n\n    def test_voting_classifier_invalid_voting(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier()\n        with self.assertRaises(ValueError):\n            eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)],\n                                    voting='invalid')\n\n    def test_voting_classifier_voting_none(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        clf1 = LogisticRegression()\n        clf2 = RandomForestClassifier()\n        with self.assertRaises(ValueError):\n            eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)],\n                                    voting=None)\n\n    def test_voting_classifier_invalid_estimators(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        with self.assertRaises(ValueError):\n            eclf = VotingClassifier(estimators=[('lr', LogisticRegression()),\n                                                 ('rf', None)])\n\n    def test_voting_classifier_all_estimators_none(self):\n        X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n        with self.assertRaises(ValueError):\n            eclf = VotingClassifier(estimators=[(None, None)])\n\n\n\nclass TestVotingRegressor(unittest.TestCase):\n\n    def test_voting_regressor_init(self):\n        VotingRegressor(estimators=[('lr', LogisticRegression())])\n\n    def test_voting_regressor_fit(self):\n        X, y = make_regression(n_samples=100, n_features=20, random_state=42)\n        r1 = LogisticRegression()\n        r2 = RandomForestRegressor()\n        evr = VotingRegressor(estimators=[('lr', r1), ('rf', r2)])\n        evr.fit(X, y)\n\n    def test_voting_regressor_predict(self):\n        X, y = make_regression(n_samples=100, n_features=20, random_state=42)\n        r1 = LogisticRegression()\n        r2 = RandomForestRegressor()\n        evr = VotingRegressor(estimators=[('lr', r1), ('rf', r2)])\n        evr.fit(X, y)\n        y_pred = evr.predict(X)\n        self.assertEqual(len(y_pred), len(y))\n\n    def test_voting_regressor_transform(self):\n        X, y = make_regression(n_samples=100, n_features=20, random_state=42)\n        r1 = LogisticRegression()\n        r2 = RandomForestRegressor()\n        evr = VotingRegressor(estimators=[('lr', r1), ('rf', r2)])\n        evr.fit(X, y)\n        transformed = evr.transform(X)\n        self.assertEqual(transformed.shape[1], 2)  # 2 regressors\n\n    def test_voting_regressor_weights(self):\n        X, y = make_regression(n_samples=100, n_features=20, random_state=42)\n        r1 = LogisticRegression()\n        r2 = RandomForestRegressor()\n        evr = VotingRegressor(estimators=[('lr', r1), ('rf', r2)],\n                              weights=[1, 2])\n        evr.fit(X, y)\n\n    def test_voting_regressor_invalid_weights(self):\n        X, y = make_regression(n_samples=100, n_features=20, random_state=42)\n        r1 = LogisticRegression()\n        r2 = RandomForestRegressor()\n        with self.assertRaises(ValueError):\n            evr = VotingRegressor(estimators=[('lr', r1), ('rf', clf2)],\n                                weights=[1, 2, 3, 4])\n\n\n"], "sample_114": ["\nimport unittest\nfrom sklearn.base import is_fitted\nfrom sklearn.compose import ColumnTransformer, make_column_transformer, make_column_selector\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.utils.estimator_checks import check_estimator\nfrom typing import List\nfrom unittest.mock import patch, MagicMock\nimport numpy as np\nimport pandas as pd\n\nclass TestColumnTransformer(unittest.TestCase):\n\n    def test_init(self):\n        ct = ColumnTransformer()\n        self.assertEqual(ct.transformers, [])\n        self.assertIsNone(ct.sparse_threshold)\n        self.assertIsNone(ct.n_jobs)\n\n    def test_make_column_transformer(self):\n        ct = make_column_transformer(\n            (StandardScaler(), ['numerical_column']),\n            (OneHotEncoder(), ['categorical_column'])\n        )\n\n        self.assertEqual(ct.transformers, [\n            ('standardscaler', StandardScaler(), ['numerical_column']),\n            ('onehotencoder', OneHotEncoder(), ['categorical_column'])\n        ])\n\n    def test_make_column_selector(self):\n        selector = make_column_selector(pattern='^city')\n        df = pd.DataFrame({'city': ['London', 'Paris'], 'age': [25, 30]})\n        selected_cols = selector(df)\n        self.assertEqual(selected_cols, ['city'])\n\n    def test_fit_transform(self):\n        X = pd.DataFrame({'numerical_column': [1, 2, 3], 'categorical_column': ['A', 'B', 'A']})\n        ct = make_column_transformer(\n            (StandardScaler(), ['numerical_column']),\n            (OneHotEncoder(), ['categorical_column'])\n        )\n        X_transformed = ct.fit_transform(X)\n        self.assertEqual(X_transformed.shape, (3, 4))\n\n    def test_fit_transform_remainder(self):\n        X = pd.DataFrame({'numerical_column': [1, 2, 3], 'categorical_column': ['A', 'B', 'A'], 'new_column': [1, 2, 3]})\n        ct = make_column_transformer(\n            (StandardScaler(), ['numerical_column']),\n            ('passthrough', None, ['categorical_column', 'new_column'])\n        )\n        X_transformed = ct.fit_transform(X)\n        self.assertEqual(X_transformed.shape, (3, 5))\n\n    def test_get_feature_names_out(self):\n        X = pd.DataFrame({'numerical_column': [1, 2, 3], 'categorical_column': ['A', 'B', 'A']})\n        ct = make_column_transformer(\n            (StandardScaler(), ['numerical_column']),\n            (OneHotEncoder(), ['categorical_column'])\n        )\n\n        ct.fit(X)\n        feature_names = ct.get_feature_names_out()\n        self.assertEqual(feature_names, ['numerical_column_std', 'categorical_column_A', 'categorical_column_B'])\n\n    def test_verbose_feature_names_out_without_prefix(self):\n        X = pd.DataFrame({'numerical_column': [1, 2, 3], 'categorical_column': ['A', 'B', 'A']})\n\n        ct = make_column_transformer(\n            (StandardScaler(), ['numerical_column']),\n            (OneHotEncoder(), ['categorical_column']),\n            verbose_feature_names_out=False\n        )\n\n        ct.fit(X)\n\n        with self.assertRaises(ValueError):\n            ct.get_feature_names_out()\n\n\n"], "sample_54": ["\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db import connections\nfrom django.db.models.options import Options\n\n\nclass TestMigrationAutodetector(unittest.TestCase):\n\n    def setUp(self):\n        self.autodetector = MigrationAutodetector(\n            app_label=\"myapp\", connection=connections['default']\n        )\n\n    def test_detect_no_changes(self):\n        old_state = {\n            \"myapp\": {\n                \"models\": {\n                    \"Model1\": {\n                        \"fields\": [\n                            {\"name\": \"id\", \"type\": \"AutoField\", \"primary_key\": True},\n                            {\"name\": \"name\", \"type\": \"CharField\"},\n                        ],\n                        \"options\": {\"db_table\": \"myapp_model1\"},\n                    }\n                }\n            }\n        }\n        new_state = old_state.copy()\n        actual_changes = self.autodetector.detect_changes(old_state, new_state)\n        self.assertEqual(actual_changes, {})\n\n    def test_detect_field_addition(self):\n        old_state = {\n            \"myapp\": {\n                \"models\": {\n                    \"Model1\": {\n                        \"fields\": [\n                            {\"name\": \"id\", \"type\": \"AutoField\", \"primary_key\": True},\n                            {\"name\": \"name\", \"type\": \"CharField\"},\n                        ],\n                        \"options\": {\"db_table\": \"myapp_model1\"},\n                    }\n                }\n            }\n        }\n        new_state = old_state.copy()\n        new_state[\"myapp\"][\"models\"][\"Model1\"][\"fields\"].append(\n            {\"name\": \"new_field\", \"type\": \"IntegerField\"}\n        )\n        actual_changes = self.autodetector.detect_changes(old_state, new_state)\n        expected_changes = {\n            \"myapp\": {\n                \"Model1\": [\n                    {\"added\": {\"name\": \"new_field\", \"type\": \"IntegerField\"}}\n                ],\n            }\n        }\n        self.assertEqual(actual_changes, expected_changes)\n\n    def test_detect_field_removal(self):\n        old_state = {\n            \"myapp\": {\n                \"models\": {\n                    \"Model1\": {\n                        \"fields\": [\n                            {\"name\": \"id\", \"type\": \"AutoField\", \"primary_key\": True},\n                            {\"name\": \"name\", \"type\": \"CharField\"},\n                            {\"name\": \"removed_field\", \"type\": \"CharField\"},\n                        ],\n                        \"options\": {\"db_table\": \"myapp_model1\"},\n                    }\n                }\n            }\n        }\n        new_state = old_state.copy()\n        new_state[\"myapp\"][\"models\"][\"Model1\"][\"fields\"] = [\n            {\"name\": \"id\", \"type\": \"AutoField\", \"primary_key\": True},\n            {\"name\": \"name\", \"type\": \"CharField\"},\n        ]\n        actual_changes = self.autodetector.detect_changes(old_state, new_state)\n        expected_changes = {\n            \"myapp\": {\n                \"Model1\": [\n                    {\"removed\": {\"name\": \"removed_field\", \"type\": \"CharField\"}}\n                ],\n            }\n        }\n        self.assertEqual(actual_changes, expected_changes)\n\n    def test_detect_field_modification(self):\n        old_state = {\n            \"myapp\": {\n                \"models\": {\n                    \"Model1\": {\n                        \"fields\": [\n                            {\"name\": \"id\", \"type\": \"AutoField\", \"primary_key\": True},\n                            {\"name\": \"name\", \"type\": \"CharField\"},\n                        ],\n                        \"options\": {\"db_table\": \"myapp_model1\"},\n                    }\n                }\n            }\n        }\n        new_state = old_state.copy()\n        new_state[\"myapp\"][\"models\"][\"Model1\"][\"fields\"][1][\"type\"] = \"TextField\"\n        actual_changes = self.autodetector.detect_changes(old_state, new_state)\n        expected_changes = {\n            \"myapp\": {\n                \"Model1\": [\n                    {\n                        \"modified\": {\"name\": \"name\", \"type\": \"TextField\"}\n                    }\n                ],\n            }\n        }\n        self.assertEqual(actual_changes, expected_changes)\n\n    def test_detect_model_addition(self):\n        old_state = {\n            \"myapp\": {\"models\": {}}\n        }\n        new_state = old_state.copy()\n        new_state[\"myapp\"][\"models\"][\"Model2\"] = {\n            \"fields\": [\n                {\"name\": \"id\", \"type\": \"AutoField\", \"primary_key\": True},\n                {\"name\": \"name\", \"type\": \"CharField\"},\n            ],\n            \"options\": {\"db_table\": \"myapp_model2\"},\n        }\n        actual_changes = self.autodetector.detect_changes(old_state, new_state)\n        expected_changes = {\n            \"myapp\": {\n                \"Model2\": [{\"added\": {\"name\": \"Model2\", \"fields\": [{\"name\": \"id\", \"type\": \"AutoField\", \"primary_key\": True}, {\"name\": \"name\", \"type\": \"CharField\"}], \"options\": {\"db_table\": \"myapp_model2\"}}]\n            }\n        }\n        self.assertEqual(actual_changes, expected_changes)\n\n    def test_detect_model_removal(self):\n        old_state = {\n            \"myapp\": {\n                \"models\": {\"Model1\": {\"fields\": [{\"name\": \"id\", \"type\": \"AutoField\", \"primary_key\": True}, {\"name\": \"name\", \"type\": \"CharField\"}]},}\n            }\n        }\n        new_state = {\n            \"myapp\": {\"models\": {}}\n        }\n        actual_changes = self.autodetector.detect_changes(old_state, new_state)\n        expected_changes = {\n            \"myapp\": {\"Model1\": [{\"removed\": {\"name\": \"Model1\"}}],}\n        }\n        self.assertEqual(actual_changes, expected_changes)\n\n\n\n\n"], "sample_36": ["\nfrom django.db import models\nfrom django.db.models import Q, CharField, ForeignKey, OneToOneField\nfrom django.db.models.query_utils import (\n    select_related_descend,\n    refs_expression,\n    check_rel_lookup_compatibility,\n    FilteredRelation,\n)\nfrom django.tests.utils import skipIfDBFeature\n\nclass TestQueryUtils(skipIfDBFeature('postgis')):\n\n    def setup(self):\n        class Book(models.Model):\n            title = CharField(max_length=255)\n            author = ForeignKey('Author', on_delete=models.CASCADE)\n\n        class Author(models.Model):\n            name = CharField(max_length=255)\n\n        self.Book = Book\n        self.Author = Author\n\n    def test_select_related_descend(self):\n        book_model = self.Book\n        author_model = self.Author\n        restricted = False\n        requested = {}\n        load_fields = set()\n        reverse = False\n        \n        field = book_model.author\n        self.assertTrue(select_related_descend(field, restricted, requested, load_fields, reverse))\n\n        restricted = True\n        requested = {'author_id'}\n        self.assertTrue(select_related_descend(field, restricted, requested, load_fields, reverse))\n\n        restricted = True\n        requested = {'title'}\n        self.assertFalse(select_related_descend(field, restricted, requested, load_fields, reverse))\n\n        reverse = True\n        self.assertFalse(select_related_descend(field, restricted, requested, load_fields, reverse))\n\n    def test_refs_expression(self):\n        lookup_parts = ['book__author__name']\n        annotations = {'book__author__name': True}\n        result, remaining = refs_expression(lookup_parts, annotations)\n        self.assertEqual(result, annotations['book__author__name'], remaining)\n\n    def test_check_rel_lookup_compatibility(self):\n        book_model = self.Book\n        author_model = self.Author\n        field = book_model.author\n        self.assertTrue(check_rel_lookup_compatibility(book_model, author_model._meta, field))\n        self.assertTrue(check_rel_lookup_compatibility(author_model, book_model._meta, field))\n\n    def test_FilteredRelation(self):\n        book_alias = 'b'\n        fr = FilteredRelation('book', condition=Q(title__icontains='test'))\n        self.assertEqual(fr.relation_name, 'book')\n        self.assertEqual(fr.alias, None)\n        self.assertIsInstance(fr.condition, Q)\n        self.assertEqual(fr.path, [])\n\n        fr_clone = fr.clone()\n        self.assertNotEqual(fr, fr_clone)\n\n\n\n"], "sample_49": ["\nfrom django.contrib.messages.storage.cookie import (\n    CookieStorage, MessageDecoder, MessageEncoder, MessageSerializer\n)\nfrom django.contrib.messages.storage.base import BaseStorage\nfrom django.http import SimpleCookie\nfrom django.core.signing import create_signature_scheme\nfrom django.test import TestCase\nfrom django.conf import settings\nfrom unittest.mock import patch, Mock\nimport json\nfrom unittest.mock import MagicMock\n\nclass CookieStorageTests(TestCase):\n    @patch('django.contrib.messages.storage.cookie.signing.get_cookie_signer')\n    def test_cookie_storage_init(self, mock_get_cookie_signer):\n        storage = CookieStorage()\n        mock_get_cookie_signer.assert_called_once_with(salt='django.contrib.messages')\n        self.assertIsInstance(storage.signer, signing.Signer)\n\n    @patch('django.contrib.messages.storage.cookie.SimpleCookie')\n    def test__update_cookie(self, mock_SimpleCookie):\n        response = Mock()\n        storage = CookieStorage()\n\n        storage._update_cookie(b'test', response)\n        mock_SimpleCookie.assert_called_once_with()\n        response.set_cookie.assert_called_once_with(\n            'messages', 'test',\n            domain=settings.SESSION_COOKIE_DOMAIN,\n            secure=settings.SESSION_COOKIE_SECURE,\n            httponly=settings.SESSION_COOKIE_HTTPONLY,\n            samesite=settings.SESSION_COOKIE_SAMESITE,\n        )\n\n        # test deletion\n        storage._update_cookie('', response)\n        response.delete_cookie.assert_called_once_with(\n            'messages',\n            domain=settings.SESSION_COOKIE_DOMAIN,\n            samesite=settings.SESSION_COOKIE_SAMESITE,\n        )\n\n    @patch('django.contrib.messages.storage.cookie.SimpleCookie')\n    def test__store_messages(self, mock_SimpleCookie):\n        storage = CookieStorage()\n        messages = [Message('test', level=100)]\n        response = Mock()\n        encoded_data = b'test_data'\n        \n\n        with patch('django.contrib.messages.storage.cookie.binascii.b2a_base64') as mock_b2a_base64:\n            mock_b2a_base64.return_value = encoded_data\n            \n            # Test regular scenario\n            storage._store(messages, response)\n            mock_SimpleCookie.assert_called_once_with()\n            response.set_cookie.assert_called_once_with(\n                'messages', encoded_data,\n                domain=settings.SESSION_COOKIE_DOMAIN,\n                secure=settings.SESSION_COOKIE_SECURE,\n                httponly=settings.SESSION_COOKIE_HTTPONLY,\n                samesite=settings.SESSION_COOKIE_SAMESITE,\n            )\n            \n            # Test scenario where cookie size exceeded\n            self.maxDiff = None\n            mock_SimpleCookie.reset_mock()\n            \n            large_messages = [Message('a' * 1024, level=100) for _ in range(50)]\n            storage._store(large_messages, response, remove_oldest=True)\n            mock_SimpleCookie.assert_called_once_with()\n            \n            \n            # Test scenario where cookie size exceeded but no messages are removed\n            self.maxDiff = None\n            mock_SimpleCookie.reset_mock()\n            storage._store(large_messages, response, remove_oldest=False)\n            mock_SimpleCookie.assert_called_once_with()\n\n    def test_cookie_storage_get(self):\n        storage = CookieStorage()\n        messages, all_retrieved = storage._get(request=Mock(COOKIES={'messages': b'test_data'}))\n        self.assertEqual(messages, [1, 0, 100, 'test'])\n        self.assertTrue(all_retrieved)\n\n    def test_cookie_storage_get_unfinished(self):\n        storage = CookieStorage()\n        messages, all_retrieved = storage._get(request=Mock(COOKIES={'messages': b'1,0,100,test,' + CookieStorage.not_finished}))\n        self.assertEqual(messages, [1, 0, 100, 'test'])\n        self.assertFalse(all_retrieved)\n\n    def test_cookie_storage_get_empty(self):\n        storage = CookieStorage()\n        messages, all_retrieved = storage._get(request=Mock(COOKIES={}))\n        self.assertEqual(messages, [])\n        self.assertTrue(all_retrieved)\n\n    def test_cookie_storage_get_invalid(self):\n        storage = CookieStorage()\n        messages, all_retrieved = storage._get(request=Mock(COOKIES={'messages': b'invalid_data'}))\n        self.assertEqual(messages, None)\n        self.assertIsNone(all_retrieved)\n\n\n\n    @patch('django.contrib.messages.storage.cookie.signing.get_cookie_signer')\n    def test_message_encoder(self, mock_get_cookie_signer):\n        encoder = MessageEncoder()\n        message = Message('test', level=100)\n        encoded = json.dumps(encoder.default(message))\n        self.assertEqual(encoded, '{\"__json_message\":1,\"level\":100,\"message\":\"test\"}')\n\n    @patch('django.contrib.messages.storage.cookie.signing.get_cookie_signer')\n    def test_message_decoder(self, mock_get_cookie_signer):\n        decoder = MessageDecoder()\n        data = '{\"__json_message\":1,\"level\":100,\"message\":\"test\"}'\n        decoded = decoder.decode(data)\n        self.assertEqual(decoded, [100, 'test'])\n    \n\n"], "sample_96": ["\nfrom sklearn.neighbors.base import (\n    check_is_fitted, \n    KDTree,\n    BallTree,\n    NearestNeighbors,\n    VALID_METRICS,\n    VALID_METRICS_SPARSE,\n    _get_n_jobs,\n    gen_even_slices,\n    check_array,\n    pairwise_distances,\n    csrs\n)\nfrom sklearn.metrics import pairwise_distances\nfrom sklearn.datasets import make_classification\nfrom sklearn.datasets import make_blobs\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\nclass TestNearestNeighborsBase(object):\n    def test_check_is_fitted(self):\n        neigh = NearestNeighbors()\n        with pytest.raises(NotFittedError):\n            neigh.kneighbors([[1, 2]])\n    \n        neigh.fit([[1, 2], [3, 4]])\n        neigh.kneighbors([[1, 2]])\n\n    def test_pairwise_distances(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        dist_matrix = pairwise_distances(X)\n        self.assertTrue((dist_matrix == dist_matrix.T).all())\n        \n    def test_gen_even_slices(self):\n        n = 10\n        slices = gen_even_slices(n, 5)\n        self.assertEqual(len(slices), 3)\n        self.assertEqual(slices, ([0, 2, 4, 6, 8],))\n\n    def test_KDTree(self):\n        X = np.random.rand(100, 2)\n        tree = KDTree(X)\n        self.assertEqual(tree.data.shape, X.shape)\n\n    def test_BallTree(self):\n        X = np.random.rand(100, 2)\n        tree = BallTree(X)\n        self.assertEqual(tree.data.shape, X.shape)\n        \n    def test_check_array_non_sparse(self):\n        X = np.random.rand(10, 2)\n        check_array(X)\n\n    def test_check_array_sparse(self):\n        from scipy.sparse import csr_matrix\n        X = csr_matrix((np.random.rand(10, 2), (np.arange(10), np.arange(10))),\n                         shape=(10, 2))\n        check_array(X)\n\n    def test_check_array_fails(self):\n        with pytest.raises(ValueError):\n            check_array({'a': 1, 'b': 2})\n\n    def test_NearestNeighbors_init(self):\n        neigh = NearestNeighbors()\n        assert neigh.n_neighbors == 5\n        assert neigh.algorithm == 'auto'\n        assert neigh.leaf_size is None\n        assert neigh.p is None\n        assert neigh.metric == 'euclidean'\n        \n        neigh = NearestNeighbors(n_neighbors=3)\n        assert neigh.n_neighbors == 3\n\n    def test_NearestNeighbors_fit_X(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        neigh = NearestNeighbors()\n        neigh.fit(X)\n\n    def test_NearestNeighbors_fit_X_sparse(self):\n        X = csr_matrix([[1, 2], [3, 4], [5, 6]])\n        neigh = NearestNeighbors()\n        neigh.fit(X)\n\n    def test_NearestNeighbors_fit_X_precomputed(self):\n        X = np.array([[1, 2], [3, 4], [5, 6]])\n        dist_matrix = pairwise_distances(X)\n        neigh = NearestNeighbors(metric='precomputed')\n        neigh.fit(dist_matrix)\n\n    def test_NearestNeighbors_kneighbors_fails(self):\n        neigh = NearestNeighbors()\n        with pytest.raises(NotFittedError):\n            neigh.kneighbors([[1, 2]])\n    \n    def test_NearestNeighbors_kneighbors(self):\n        X_train = np.array([[1, 2], [3, 4], [5, 6]])\n        neigh = NearestNeighbors()\n        neigh.fit(X_train)\n        result = neigh.kneighbors([[2, 3]])\n        assert result[0].shape == (1, 5)\n        assert result[1].shape == (1, 5)\n\n    def test_NearestNeighbors_kneighbors_sparse(self):\n        X_train = csr_matrix([[1, 2], [3, 4], [5, 6]])\n        neigh = NearestNeighbors()\n        neigh.fit(X_train)\n        result = neigh.kneighbors([[2, 3]])\n        assert result[0].shape == (1, 5)\n        assert result[1].shape == (1, 5)\n    \n    def test_NearestNeighbors_kneighbors_precomputed(self):\n        X_train = np.array([[1, 2], [3, 4], [5, 6]])\n        dist_matrix = pairwise_distances(X_train)\n        neigh = NearestNeighbors(metric='precomputed')\n        neigh.fit(dist_matrix)\n        result = neigh.kneighbors([[2, 3]])\n        assert result[0].shape == (1, 5)\n        assert result[1].shape == (1, 5)\n    \n\n\n"], "sample_141": ["\nfrom sympy.matrices.expressions.blockmatrix import ( block_collapse, bc_matmul, bc_block_plus_ident, BlockDiagMatrix, BlockMatrix, bc_dist, bc_matadd, bc_transpose, bc_inverse, blockcut, reblock_2x2, deblock)\nfrom sympy.matrices.expressions import (MatrixSymbol, Identity, Inverse, trace, Transpose, det, ZeroMatrix)\nfrom sympy.functions import transpose\nfrom sympy.utilities.iterables import is_sequence\nfrom sympy import Q\n\ndef test_blockmatrix_basics():\n    from sympy import symbols, MatrixSymbol\n    n,m,l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m ,m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert(str(B) == \"Matrix([  [X, Z],  [0, Y]])\")\n    assert(B.shape == (n + m, n + m))\n\ndef test_blockmatrix_irregular():\n    from sympy import symbols, Matrix\n    n,m,l = symbols('n m l')\n    dat = [\n    [MatrixSymbol('A', n, 2), MatrixSymbol('B', n, 3)],\n    [MatrixSymbol('C', 2, m), MatrixSymbol('D', 3, m)]]\n    with  assertRaises(ValueError):\n        BlockMatrix(dat)\n\ndef test_blockmatrix_equality():\n    from sympy import symbols, MatrixSymbol\n    n = symbols('n')\n    A = MatrixSymbol('A', n, n)\n    B = MatrixSymbol('B', n, n)\n    C = BlockMatrix([[A, ZeroMatrix(n, n)], [ZeroMatrix(n, n), B]])\n    D = BlockMatrix([[A, ZeroMatrix(n, n)], [ZeroMatrix(n, n), B]])\n    assert(C == D)\n    assert(C.structurally_equal(D))\n\ndef test_blockmatrix_transpose():\n    from sympy import symbols, MatrixSymbol\n    n,m,l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m ,m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert(B.transpose() == BlockMatrix([[X.T, 0], [Z.T, Y.T]]))\n\ndef test_blockmatrix_trace():\n    from sympy import symbols, MatrixSymbol\n    n,m,l = symbols('n m l')\n    A = MatrixSymbol('A', n, n)\n    B = MatrixSymbol('B', m, m)\n    C = BlockMatrix([[A, ZeroMatrix(n, m)], [ZeroMatrix(m, n), B]])\n    assert(trace(C) == trace(A) + trace(B))\n\ndef test_blockmatrix_determinant():\n    from sympy import symbols, MatrixSymbol\n    n = symbols('n')\n    A = MatrixSymbol('A', n, n)\n    B = MatrixSymbol('B', n, n)\n    C = BlockMatrix([[A, ZeroMatrix(n, n)], [ZeroMatrix(n, n), B]])\n    assert(det(C) == det(A)*det(B))\n\ndef test_blockmatrix_inverse():\n    from sympy import symbols, MatrixSymbol\n    n = symbols('n')\n    A = MatrixSymbol('A', n, n)\n    B = MatrixSymbol('B', n, n)\n    C = BlockMatrix([[A, ZeroMatrix(n, n)], [ZeroMatrix(n, n), B]])\n    assert(C.inverse() == BlockMatrix([[A.I, ZeroMatrix(n, n)], [ZeroMatrix(n, n), B.I]]))\n\ndef test_block_collapse():\n    from sympy import symbols, MatrixSymbol, Identity, ZeroMatrix\n    n,m,l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m ,m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    assert(block_collapse(B*BlockMatrix([[X],[Z]])) == BlockMatrix([[X*X, X*Z + Z*Y], [0, Y]]))\n\ndef test_block_collapse_diag():\n    from sympy import symbols, MatrixSymbol, Identity, ZeroMatrix\n    n,m,l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m ,m)\n    Z = MatrixSymbol('Z', n, m)\n    B = BlockMatrix([[X, Z], [ZeroMatrix(m, n), Y]])\n    D = BlockDiagMatrix(X, Y)\n    assert(block_collapse(B*D) == BlockMatrix([[X*X, X*Z + Z*Y], [0, Y]]))\n\ndef test_blockdiag_basics():\n    from sympy import symbols, MatrixSymbol, Identity, ZeroMatrix\n    n,m,l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m ,m)\n    Z = MatrixSymbol('Z', n, m)\n    BD = BlockDiagMatrix(X, Y)\n    assert(str(BD) == \"Matrix([  [X, 0],  [0, Y]])\")\n\ndef test_blockdiag_transpose():\n    from sympy import symbols, MatrixSymbol, Identity, ZeroMatrix\n    n,m,l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m ,m)\n    Z = MatrixSymbol('Z', n, m)\n    BD = BlockDiagMatrix(X, Y)\n    assert(BD.transpose() == BlockDiagMatrix(X.T, Y.T))\n\ndef test_blockdiag_inverse():\n    from sympy import symbols, MatrixSymbol, Identity, ZeroMatrix\n    n,m,l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m ,m)\n    BD = BlockDiagMatrix(X, Y)\n    assert(BD.inverse() == BlockDiagMatrix(X.I, Y.I))\n\n\ndef test_block_add():\n    from sympy import symbols, MatrixSymbol, Identity, ZeroMatrix\n    n,m,l = symbols('n m l')\n    A = MatrixSymbol('A', n, n)\n    B = MatrixSymbol('B', n, n)\n    C = BlockMatrix([[A, ZeroMatrix(n, m)], [ZeroMatrix(m, n), B]])\n    D = BlockMatrix([[A, ZeroMatrix(n, m)], [ZeroMatrix(m, n), B]])\n    assert(C + D == BlockMatrix([[2*A, ZeroMatrix(n, m)], [ZeroMatrix(m, n), 2*B]]))\n\n\n\ndef test_block_matmul():\n    from sympy import symbols, MatrixSymbol, Identity, ZeroMatrix\n    n,m,l = symbols('n m l')\n    A = MatrixSymbol('A', n, n)\n    B = MatrixSymbol('B', n, m)\n    C = BlockMatrix([[A, ZeroMatrix(n, m)], [ZeroMatrix(m, n), B]])\n    D = BlockMatrix([[A, ZeroMatrix(n, m)], [ZeroMatrix(m, n), B]])\n    assert(C*D == BlockMatrix([[A*A, A*ZeroMatrix(n, m)], [ZeroMatrix(m, n)*A, ZeroMatrix(m, n)*B]]))\n\ndef test_block_matmul_diag():\n    from sympy import symbols, MatrixSymbol, Identity, ZeroMatrix\n    n,m,l = symbols('n m l')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m ,m)\n    Z = MatrixSymbol('Z', n, m)\n    BD1 = BlockDiagMatrix(X, Y)\n    BD2 = BlockDiagMatrix(X, Y)\n    assert(block_collapse(BD1*BD2) == BlockDiagMatrix(X*X, Y*Y))\n\ndef test_block_matmul_multi():\n    from sympy import symbols, MatrixSymbol, Identity, ZeroMatrix\n    n,m,l = symbols('n m l')\n    A = MatrixSymbol('A', n, n)\n    B = MatrixSymbol('B', n, m)\n    C = MatrixSymbol('C', m, l)\n    D = MatrixSymbol('D', l, m)\n    BD1 = BlockDiagMatrix(A, ZeroMatrix(n, m))\n    BD2 = BlockDiagMatrix(B, C)\n    BD3 = BlockDiagMatrix(D, ZeroMatrix(l, m))\n    assert(block_collapse(BD1*BD2*BD3) == BlockDiagMatrix(A*B*D, ZeroMatrix(n, l)))\n\n\ndef test_blockcut_basic():\n    from sympy import ImmutableMatrix, blockcut\n    M = ImmutableMatrix(4, 4, range(16))\n    B = blockcut(M, (1, 3), (1, 3))\n    assert(B.blockshape == (3, 3))\n    assert(str(B) == \"Matrix([  [1, 2, 3, 4],  [5, 6, 7, 8],  [9, 10, 11, 12]])\")\n\ndef test_blockcut_multi():\n    from sympy import ImmutableMatrix, blockcut\n    M = ImmutableMatrix(4, 4, range(16))\n    B = blockcut(M, (1, 2, 1), (1, 2, 1))\n    assert(B.blockshape == (2, 2))\n    assert(str(B) == \"Matrix([  [1, 2, 3, 4],  [5, 6, 7, 8]])\")\n\ndef test_reblock_2x2():\n    from sympy import symbols, MatrixSymbol, ZeroMatrix\n    n = symbols('n')\n    A = MatrixSymbol('A', n, n)\n    B = MatrixSymbol('B', n, n)\n    C = MatrixSymbol('C', n, n)\n    D = MatrixSymbol('D', n, n)\n    assert(reblock_2x2(BlockMatrix([[A, B], [C, D]])) == BlockMatrix([[A, B], [C, D]]))\n\ndef test_deblock():\n    from sympy import symbols, MatrixSymbol, ZeroMatrix\n    n = symbols('n')\n    A = MatrixSymbol('A', n, n)\n    B = MatrixSymbol('B', n, n)\n    D = BlockMatrix([[A, ZeroMatrix(n, n)], [ZeroMatrix(n, n), B]])\n    assert(deblock(D) == BlockMatrix([[A, ZeroMatrix(n, n)], [ZeroMatrix(n, n), B]]))\n\n\n\ndef test_blockdiag_shape():\n    from sympy import symbols, MatrixSymbol, Identity, ZeroMatrix\n    n,m = symbols('n m')\n    X = MatrixSymbol('X', n, n)\n    Y = MatrixSymbol('Y', m, m)\n    BD = BlockDiagMatrix(X,Y)\n    assert(BD.shape == (n+m, n+m))\n\n\n\ndef test_block_add_identity():\n    from sympy import symbols, MatrixSymbol, Identity, ZeroMatrix\n    n = symbols('n')\n    A = MatrixSymbol('A', n, n)\n    B = BlockMatrix([[A, ZeroMatrix(n, n)], [ZeroMatrix(n, n), Identity(n)]])\n    assert(B + Identity(n) == BlockMatrix([[A + Identity(n), ZeroMatrix(n, n)], [ZeroMatrix(n, n), 2*Identity(n)]))\n    \ndef test_block_inverse_idempotent():\n    from sympy import symbols, MatrixSymbol, Identity, ZeroMatrix\n    n = symbols('n')\n    X = MatrixSymbol('X', n, n)\n    B = BlockMatrix([[X, ZeroMatrix(n, n)], [ZeroMatrix(n, n), X]])\n    assert(bc_inverse(B).blocks[0,0].is_zero)\n\n\n\n\n"], "sample_53": ["\nfrom unittest.mock import Mock, patch\n\nfrom django.conf import settings\nfrom django.core.checks.templates import (\n    E001,\n    E002,\n    E003,\n    check_for_template_tags_with_the_same_name,\n    check_setting_app_dirs_loaders,\n    check_string_if_invalid_is_string,\n)\nfrom django.template.backends.django import get_template_tag_modules\n\n\nclass TemplateTagModulesMock(object):\n    def __init__(self, modules):\n        self.modules = modules\n\n    def __iter__(self):\n        return iter(self.modules)\n\n\ndef test_check_setting_app_dirs_loaders():\n    settings.TEMPLATES = [\n        {\"APP_DIRS\": True, \"OPTIONS\": {\"loaders\": [\"django.template.loaders.filesystem.Loader\"]}},\n        {\"APP_DIRS\": False},\n        {\"APP_DIRS\": True},\n    ]\n    assert check_setting_app_dirs_loaders(None) == [E001]\n\n    settings.TEMPLATES = [{\"APP_DIRS\": False}, {\"APP_DIRS\": False}]\n    assert check_setting_app_dirs_loaders(None) == []\n\n\ndef test_check_string_if_invalid_is_string():\n    settings.TEMPLATES = [\n        {\"OPTIONS\": {\"string_if_invalid\": \"hello\"}},\n        {\"OPTIONS\": {\"string_if_invalid\": 123}},\n        {\"OPTIONS\": {\"string_if_invalid\": True}},\n    ]\n    errors = check_string_if_invalid_is_string(None)\n    assert len(errors) == 3\n    assert isinstance(errors[0].msg, str)\n\n\ndef test_check_for_template_tags_with_the_same_name():\n    test_modules = [\n        (\"django.template.defaulttags\", \"path1\"),\n        (\"django.template.defaulttags\", \"path2\"),\n        (\"my_app.template_tags\", \"path2\"),\n    ]\n    with patch(\n        \"django.template.backends.django.get_template_tag_modules\",\n        return_value=test_modules\n    ):\n        errors = check_for_template_tags_with_the_same_name(None)\n        assert len(errors) == 1\n        assert errors[0].msg.startswith(\"my_app.template_tags, path2\")\n\n\n\n"], "sample_58": ["\nimport unittest\nfrom django.core.management.base import (\n    BaseCommand,\n    CommandError,\n    DjangoHelpFormatter,\n    OutputWrapper,\n    LabelCommand,\n)\n\nclass TestBaseCommand(unittest.TestCase):\n    def test_create_parser(self):\n        command = BaseCommand()\n        parser = command.create_parser(\"test_command\", \"test_subcommand\")\n        self.assertIsInstance(parser, argparse.ArgumentParser)\n\n    def test_add_base_argument(self):\n        command = BaseCommand()\n        parser = argparse.ArgumentParser()\n        command.add_base_argument(parser, \"--version\")\n        self.assertIn(\"--version\", parser.format_help().splitlines())\n\n    def test_handle(self):\n        command = BaseCommand()\n        self.assertRaises(NotImplementedError, command.handle)\n\n    def test_handle_default_options(self):\n        command = BaseCommand()\n        options = {\"settings\": \"test_settings\"}\n        handle_default_options(options)\n        self.assertEqual(os.environ[\"DJANGO_SETTINGS_MODULE\"], \"test_settings\")\n\n    def test_check(self):\n        command = BaseCommand()\n        command.check()\n\n    def test_check_migrations(self):\n        command = BaseCommand()\n        command.check_migrations()\n\n    def test_print_help(self):\n        command = BaseCommand()\n        command.print_help(\"test_command\", \"test_subcommand\")\n\n    def test_run_from_argv(self):\n        command = BaseCommand()\n        argv = [\"test_command\", \"test_subcommand\", \"--verbosity\", \"2\"]\n        command.run_from_argv(argv)\n\n    def test_OutputWrapper(self):\n        output = OutputWrapper(sys.stdout)\n        output.write(\"test\")\n        self.assertEqual(output.getvalue(), \"test\")\n\n\nclass TestAppCommand(unittest.TestCase):\n    def test_create_parser(self):\n        command = AppCommand()\n        parser = command.create_parser(\"test_command\", \"test_subcommand\")\n        self.assertIn(\"app_label\", parser.format_help().splitlines())\n\n    def test_handle(self):\n        command = AppCommand()\n        self.assertRaises(NotImplementedError, command.handle)\n\n    def test_handle_app_config(self):\n        command = AppCommand()\n        self.assertRaises(NotImplementedError, command.handle_app_config)\n\n\n\nclass TestLabelCommand(unittest.TestCase):\n    def test_create_parser(self):\n        command = LabelCommand()\n        parser = command.create_parser(\"test_command\", \"test_subcommand\")\n        self.assertIn(\"label\", parser.format_help().splitlines())\n\n    def test_handle(self):\n        command = LabelCommand()\n        self.assertRaises(NotImplementedError, command.handle)\n\n    def test_handle_label(self):\n        command = LabelCommand()\n        self.assertRaises(NotImplementedError, command.handle_label)\n\n\n"], "sample_97": ["\nUnit test Python code (file level)\n\nimport pytest\nfrom _pytest.skipping import evaluate_skip_marks\nfrom _pytest.skipping import evaluate_xfail_marks\nfrom _pytest.skipping import pytest_runtest_setup\nfrom _pytest.config import Config\n\nclass TestSkipping:\n\n    def test_evaluate_skip_marks_no_marks(self):\n        item = object()\n        assert evaluate_skip_marks(item) is None\n\n    def test_evaluate_skip_marks_skip_mark(self):\n        item = object()\n        item.add_marker(pytest.mark.skip(reason=\"test skipped\"))\n        skip_result = evaluate_skip_marks(item)\n        assert skip_result.reason == \"test skipped\"\n\n    def test_evaluate_skip_marks_skipif_mark_true(self):\n        item = object()\n        item.add_marker(pytest.mark.skipif(\"os.name == 'nt'\", reason=\"windows\"))\n        skip_result = evaluate_skip_marks(item)\n        assert skip_result.reason == \"windows\"\n\n    def test_evaluate_skip_marks_skipif_mark_false(self):\n        item = object()\n        item.add_marker(pytest.mark.skipif(\"os.name == 'nt'\", reason=\"windows\"))\n        skip_result = evaluate_skip_marks(item)\n        assert skip_result is None\n\n    def test_evaluate_skip_marks_skipif_multiple_conditions(self):\n        item = object()\n        item.add_marker(pytest.mark.skipif(\n            \"os.name == 'nt' or sys.platform == 'win32'\", reason=\"windows\"))\n        skip_result = evaluate_skip_marks(item)\n        assert skip_result.reason == \"windows\"\n\n    def test_evaluate_xfail_marks_no_marks(self):\n        item = object()\n        assert evaluate_xfail_marks(item) is None\n\n    def test_evaluate_xfail_marks_xfail_mark(self):\n        item = object()\n        item.add_marker(pytest.mark.xfail(reason=\"test expected to fail\"))\n        xfail_result = evaluate_xfail_marks(item)\n        assert xfail_result.reason == \"test expected to fail\"\n\n    def test_evaluate_xfail_marks_xfail_run_false(self):\n        item = object()\n        item.add_marker(pytest.mark.xfail(run=False, reason=\"test expected to fail\"))\n        xfail_result = evaluate_xfail_marks(item)\n        assert xfail_result.run is False\n\n    def test_evaluate_xfail_marks_xfail_conditional(self):\n        item = object()\n        item.add_marker(pytest.mark.xfail(\"os.name == 'nt'\", reason=\"windows\"))\n        xfail_result = evaluate_xfail_marks(item)\n        assert xfail_result.reason == \"windows\"\n\n    def test_evaluate_xfail_marks_xfail_conditional_raises(self):\n        item = object()\n        item.add_marker(pytest.mark.xfail(\"os.name == 'nt'\", reason=\"windows\", raises=(ValueError,)))\n        xfail_result = evaluate_xfail_marks(item)\n        assert xfail_result.reason == \"windows\"\n\n    def test_pytest_runtest_setup_skip(self):\n        item = object()\n        item.add_marker(pytest.mark.skip(reason=\"test skipped\"))\n        pytest_runtest_setup(item)\n        assert item._store[skipped_by_mark_key] is True\n\n    def test_pytest_runtest_setup_xfail(self):\n        item = object()\n        item.add_marker(pytest.mark.xfail(reason=\"test expected to fail\"))\n        pytest_runtest_setup(item)\n        assert item._store[xfailed_key] is not None\n\n\n\n"], "sample_40": ["\nfrom django.db.models.query_utils import (\n    select_related_descend, refs_expression, check_rel_lookup_compatibility,\n    FilteredRelation,\n    PathInfo,\n    subclasses\n)\nfrom django.db import models\nfrom django.db.models import Q, F\nfrom django.test.utils import override_settings\nfrom django.core.exceptions import FieldError\n\nclass TestQueryUtils(models.Model):\n    a = models.IntegerField()\n    b = models.CharField(max_length=10)\n    c = models.ForeignKey('TestQueryUtils', on_delete=models.CASCADE, related_name='tests')\n\n\nclass TestPathInfo(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Subclass(TestQueryUtils):\n    pass\n\n@override_settings(\n    INSTALLED_APPS=[\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n    ],\n)\nclass TestSelectRelatedDescend:\n    def test_basic(self):\n        assert select_related_descend(TestQueryUtils._meta.get_field('c'), False, {}, {})\n\n    def test_not_remote(self):\n        assert not select_related_descend(TestQueryUtils._meta.get_field('a'), False, {}, {})\n\n    def test_parent_link(self):\n        assert not select_related_descend(TestQueryUtils._meta.get_field('c'), False, {}, {}, reverse=True)\n\n    def test_restricted(self):\n        assert select_related_descend(TestQueryUtils._meta.get_field('c'), True, {'c'}, {})\n\n    def test_restricted_reverse(self):\n        assert select_related_descend(TestQueryUtils._meta.get_field('c'), True, {'tests'}, {})\n\n    def test_null(self):\n        assert not select_related_descend(TestQueryUtils._meta.get_field('c'), False, {}, {})\n\n    def test_load_fields(self):\n        assert select_related_descend(TestQueryUtils._meta.get_field('c'), False, {}, {'c'})\n\ndef test_refs_expression():\n    annotations = {'tests.a': True}\n    assert refs_expression(['tests', 'a'], annotations) == (annotations['tests.a'], ())\n\n\ndef test_check_rel_lookup_compatibility():\n    class TestModel(models.Model):\n        pk = models.IntegerField(primary_key=True)\n        field = models.ForeignKey(TestModel, on_delete=models.CASCADE, related_name='related_field')\n\n    assert check_rel_lookup_compatibility(TestModel, TestModel._meta, TestModel._meta.get_field('field'))\n\ndef test_filtered_relation():\n    fr = FilteredRelation('tests', condition=Q(a__gt=1))\n    assert fr.relation_name == 'tests'\n    assert fr.condition.compare == 'gt'\n    assert fr.condition.lhs.field == TestQueryUtils._meta.get_field('a')\n    assert fr.condition.rhs == Value(1)\n    fr2 = fr.clone()\n    assert fr2 != fr\n    assert fr2.condition.compare == 'gt'\n\ndef test_filtered_relation_as_sql():\n    fr = FilteredRelation('tests', condition=Q(a__gt=1))\n    with CaptureQueriesContext() as captured:\n        fr.as_sql(compiler=None, connection=None)\n    assert captured.captured_queries==['SELECT ... WHERE \"testqueryutils_testqueryutils\".\"a\" > %s']\n\n\n\n  \n\n\n\n"], "sample_31": ["\nfrom django.db import IntegrityError, connections, transaction\nfrom django.db.models import ProtectedError, RestrictedError\nfrom django.db.models.deletion import (\n    CASCADE, PROTECT, RESTRICT, SET, SET_NULL, SET_DEFAULT, DO_NOTHING,\n    Collector, get_candidate_relations_to_delete,\n)\nfrom django.test import TestCase\n\n\nclass TestDeletion(TestCase):\n    \n    def test_collect_no_cascade(self):\n        collector = Collector(using=connections['default'])\n        objs = [A(name=\"A1\")]\n        collector.collect(objs)\n        self.assertEqual(len(collector.data), 1)\n        self.assertEqual(len(collector.data[A._meta.model]), 1)\n\n    def test_collect_cascade(self):\n        collector = Collector(using=connections['default'])\n        objs = [B(name=\"B1\")]\n        collector.collect(objs, source=A, nullable=True)\n        self.assertEqual(len(collector.data), 1)\n        self.assertEqual(len(collector.data[B._meta.model]), 1)\n\n    def test_collect_cascade_no_collect_related(self):\n        collector = Collector(using=connections['default'])\n        objs = [B(name=\"B1\")]\n        collector.collect(objs, source=A, nullable=True, collect_related=False)\n        self.assertEqual(len(collector.data), 1)\n        self.assertEqual(len(collector.data[B._meta.model]), 1)\n        self.assertEqual(len(collector.field_updates), 0)\n\n    def test_collect_protected(self):\n        collector = Collector(using=connections['default'])\n        objs = [B(name=\"B1\")]\n        try:\n            collector.collect(objs, source=A, nullable=True)\n            self.fail(\"ProtectedError not raised\")\n        except ProtectedError as e:\n            self.assertIn('Cannot delete some instances of model', str(e))\n\n    def test_collect_restricted(self):\n        collector = Collector(using=connections['default'])\n        objs = [B(name=\"B1\")]\n        try:\n            collector.collect(objs, source=A, nullable=True, fail_on_restricted=False)\n            self.fail(\"RestrictedError not raised\")\n        except RestrictedError as e:\n            self.assertIn('Cannot delete some instances of model', str(e))\n\n    def test_collect_protected_cascade_recursive(self):\n        collector = Collector(using=connections['default'])\n        objs = [B(name=\"B1\")]\n        collector.collect(objs, source=A, nullable=True, fail_on_restricted=False)\n        collector.collect(collector.data[B._meta.model], source=B, nullable=True,\n                         fail_on_restricted=False)\n\n        self.assertEqual(len(collector.data), 1)\n        self.assertEqual(len(collector.data[B._meta.model]), 1)\n\n    def test_related_objects(self):\n        collector = Collector(using=connections['default'])\n        B1 = A(name=\"A1\")\n        B1.save()\n        B2 = B(name=\"B2\", a=B1)\n        B2.save()\n        objs = [B2]\n\n        related_objects = collector.related_objects(B._meta.model, [B.a], objs)\n        self.assertEqual(len(related_objects), 1)\n        self.assertEqual(related_objects.first().name, \"A1\")\n\n    def test_can_fast_delete_cascades(self):\n        collector = Collector(using=connections['default'])\n        objs = [A(name=\"A1\")]\n        collector.collect(objs, source=A, nullable=True)\n        self.assertFalse(collector.can_fast_delete(objs))\n\n    def test_can_fast_delete_no_cascades(self):\n        collector = Collector(using=connections['default'])\n        objs = [B(name=\"B1\")]\n        collector.collect(objs)\n        self.assertTrue(collector.can_fast_delete(objs))\n\n    def test_can_fast_delete_related_objects(self):\n        collector = Collector(using=connections['default'])\n        objs = [A(name=\"A1\")]\n        collector.collect(objs, source=A, nullable=True)\n        self.assertFalse(collector.can_fast_delete(objs))\n\n    def test_can_fast_delete_no_cascade_and_no_signals(self):\n        class NoSignalChild(B):\n            pass\n        NoSignalChild._meta.delete_signals = []\n        collector = Collector(using=connections['default'])\n        objs = [NoSignalChild(name=\"B1\")]\n        collector.collect(objs)\n        self.assertTrue(collector.can_fast_delete(objs))\n\n    def test_can_fast_delete_parent_related(self):\n        collector = Collector(using=connections['default'])\n        objs = [A(name=\"A1\")]\n        collector.collect(objs, source=A, nullable=True)\n        self.assertFalse(collector.can_fast_delete(objs))\n        collector.collect(collector.data[B._meta.model], source=B, nullable=True,\n                         fail_on_restricted=False)\n        self.assertTrue(collector.can_fast_delete(collector.data[B._meta.model]))\n\n    def test_get_del_batches(self):\n        collector = Collector(using=connections['default'])\n        objs = list(range(100))\n        batches = collector.get_del_batches(objs, [A.name])\n        self.assertEqual(len(batches), 10)\n        for batch in batches:\n            self.assertEqual(len(batch), 10)\n\n    def test_sort(self):\n        collector = Collector(using=connections['default'])\n        collector.data[A] = list(range(100))\n        collector.data[B] = list(range(10))\n        collector.data[MR] = list(range(5))\n        collector.dependencies[A._meta.concrete_model] = {B._meta.concrete_model}\n        collector.dependencies[B._meta.concrete_model] = {MR._meta.concrete_model}\n        collector.sort()\n        self.assertEqual(list(collector.data.keys()), [MR, B, A])\n\n\n\n"], "sample_46": ["\nfrom django.forms import (\n    BaseForm, CharField, DateField, FileField, Form, IntegerField, SplitDateTimeField, formsets,\n)\nfrom django.forms.formsets import BaseFormSet, all_valid, formset_factory\nfrom django.forms.utils import ErrorList\nfrom django.forms.widgets import HiddenInput\nfrom unittest import TestCase\n\nclass TestBaseFormSet(TestCase):\n\n    def setUp(self):\n        class MyForm(Form):\n            name = CharField(required=True)\n\n        self.formset = formset_factory(MyForm, extra=2)\n        self.formset_instance = self.formset()\n\n    def test_total_form_count(self):\n        self.assertEqual(self.formset_instance.total_form_count(), 2)\n        self.formset_instance.data = {'form-0-name': 'John Doe', 'form-1-name': 'Jane Doe'}\n        self.assertEqual(self.formset_instance.total_form_count(), 3)\n\n    def test_initial_form_count(self):\n        self.assertEqual(self.formset_instance.initial_form_count(), 0)\n\n    def test_forms(self):\n        self.assertEqual(len(self.formset_instance.forms), 2)\n\n    def test_empty_form(self):\n        empty_form = self.formset_instance.empty_form\n        self.assertTrue(empty_form.is_valid())\n\n    def test_ordering_widget(self):\n        self.assertIsInstance(self.formset_instance.ordering_widget, IntegerInput)\n\n    def test_as_table(self):\n        # Test rendering as HTML table.\n        html = self.formset_instance.as_table()\n        self.assertTrue('<table' in html)\n\n    def test_as_p(self):\n        # Test rendering as HTML <p>s.\n        html = self.formset_instance.as_p()\n        self.assertTrue('<p' in html)\n\n    def test_as_ul(self):\n        # Test rendering as HTML <li>s.\n        html = self.formset_instance.as_ul()\n        self.assertTrue('<li' in html)\n\n\n    def test_media(self):\n        # Assert that the media is set correctly.\n        self.assertEqual(\n            self.formset_instance.media,\n            self.formset_instance.forms[0].media\n        )\n\n\n\n    def test_management_form(self):\n        # Assert that the management form is correctly initialized\n        self.assertIsInstance(self.formset_instance.management_form, ManagementForm)\n\n    def test_formset_factory(self):\n        # Test factory creation.\n        new_formset = formset_factory(MyForm, extra=3, can_order=True, can_delete=True)\n        self.assertEqual(new_formset.extra, 3)\n        self.assertEqual(new_formset.can_order, True)\n        self.assertEqual(new_formset.can_delete, True)\n\n    def test_all_valid(self):\n        # Test all_valid function.\n        valid_formsets = [self.formset_instance]\n        invalid_formsets = [self.formset_instance]\n        invalid_formsets[0].errors = ['Test Error']\n\n        self.assertTrue(all_valid(valid_formsets))\n        self.assertFalse(all_valid(invalid_formsets))\n\n\n\n"], "sample_133": ["\nimport unittest\nfrom sympy.utilities.codegen import (codegen, make_routine, CCodeGen, C89CodeGen, C99CodeGen, InputArgument, CodeGenError, FCodeGen, CodeGenArgumentListError, OutputArgument, InOutArgument)\nfrom sympy import symbols, Eq, Matrix, sin, cos, pi\n\nclass TestCodeGen(unittest.TestCase):\n\n    def test_codegen_basic(self):\n        # Test generating C code for a simple expression\n        x, y = symbols('x y')\n        result = codegen(((\"add\", x + y)), \"C\", header=False, empty=False)\n        self.assertEqual(result[0], \"add.c\\n\")\n        self.assertEqual(result[1], \"#include \\\"add.h\\\"\\n\"\n                         \"#include <math.h>\\ndouble add(double x, double y) {\\n\"\n                         \"  double add_result;\\n\"\n                         \"  add_result = x + y;\\n\"\n                         \"  return add_result;\\n\"\n                         \"}\\n\")\n\n    def test_codegen_multiple_outputs(self):\n        # Test generating C code for expressions with multiple outputs\n        x, y, z = symbols('x y z')\n        result = codegen(((\"multi\", (x + y, z * x)),), \"C\", header=False, empty=False)\n        self.assertEqual(result[0], \"multi.c\\n\")\n        self.assertEqual(result[1], \"#include \\\"multi.h\\\"\\n\"\n                         \"#include <math.h>\\ndouble multi(double x, double y, double z) {\\n\"\n                         \"  double multi_result_0;\\n\"\n                         \"  double multi_result_1;\\n\"\n                         \"  multi_result_0 = x + y;\\n\"\n                         \"  multi_result_1 = z * x;\\n\"\n                         \"  return multi_result_0, multi_result_1;\\n\"\n                         \"}\\n\")\n\n    def test_codegen_equality_output(self):\n        # Test generating C code for expressions with equality outputs\n        x, y = symbols('x y')\n        result = codegen(((\"eq_out\", Eq(x + y, z)),), \"C\", header=False, empty=False)\n        self.assertEqual(result[0], \"eq_out.c\\n\")\n        self.assertEqual(result[1], \"#include \\\"eq_out.h\\\"\\n\"\n                         \"#include <math.h>\\ndouble eq_out(double x, double y, double z) {\\n\"\n                         \"  double eq_out_result;\\n\"\n                         \"  eq_out_result = x + y;\\n\"\n                         \"  return eq_out_result;\\n\"\n                         \"}\\n\")\n\n    def test_codegen_global_vars(self):\n        # Test handling of global variables\n        x = symbols('x')\n        result = codegen(((\"fcn\", x + y),), \"C\", header=False, empty=False, global_vars=(y,))\n        self.assertEqual(result[0], \"fcn.c\\n\")\n        self.assertEqual(result[1], \"#include \\\"fcn.h\\\"\\n\"\n                         \"#include <math.h>\\ndouble fcn(double x) {\\n\"\n                         \"  double fcn_result;\\n\"\n                         \"  fcn_result = x + y;\\n\"\n                         \"  return fcn_result;\\n\"\n                         \"}\\n\")\n\n    def test_codegen_argument_sequence(self):\n        # Test specifying argument sequence\n        x, y = symbols('x y')\n        result = codegen(((\"order\", x + y),), \"C\", header=False, empty=False, argument_sequence=(y, x))\n        self.assertEqual(result[0], \"order.c\\n\")\n        self.assertEqual(result[1], \"#include \\\"order.h\\\"\\n\"\n                         \"#include <math.h>\\ndouble order(double y, double x) {\\n\"\n                         \"  double order_result;\\n\"\n                         \"  order_result = x + y;\\n\"\n                         \"  return order_result;\\n\"\n                         \"}\\n\")\n\n    def test_codegen_f95(self):\n        # Test generating F95 code\n        x, y = symbols('x y')\n        result = codegen(((\"f95_fcn\", x + y)), \"F95\", header=False, empty=False)\n        self.assertEqual(result[0], \"f95_fcn.f95\\n\")\n        self.assertEqual(result[1], \"REAL*8 function f95_fcn(x, y)\\n\"\n                         \"  implicit none\\n\"\n                         \"  REAL*8, intent(in) :: x\\n\"\n                         \"  REAL*8, intent(in) :: y\\n\"\n                         \"  f95_fcn = x + y\\n\"\n                         \"end function\\n\")\n\n    def test_codegen_octave(self):\n        # Test generating Octave code\n        x, y = symbols('x y')\n        result = codegen(((\"octave_fcn\", x + y)), \"OCTAVE\", header=False, empty=False)\n        self.assertEqual(result[0], \"octave_fcn.m\\n\")\n        self.assertEqual(result[1], \"function out = octave_fcn(x, y)\\n\"\n                         \"  out = x + y;\\n\"\n                         \"endfunction\\n\")\n\n    def test_codegen_rust(self):\n        # Test generating Rust code\n        x, y = symbols('x y')\n        result = codegen(((\"rust_fcn\", x + y)), \"RUST\", header=False, empty=False)\n        self.assertEqual(result[0], \"rust_fcn.rs\\n\")\n        self.assertEqual(result[1], \"fn rust_fcn(x: f64, y: f64) -> f64 {\\n\"\n                         \"  let rust_fcn_result = x + y;\\n\"\n                         \"  rust_fcn_result\\n\"\n                         \"}\\n\")\n    \n    def test_make_routine(self):\n        x, y = symbols('x y')\n        r = make_routine('test', x + y)\n        self.assertEqual(r.name, \"test\")\n        self.assertEqual(type(r.expr), type(x + y))\n        self.assertEqual(len(r.arguments), 2)\n        self.assertEqual(r.arguments[0].name, 'x')\n        self.assertEqual(r.arguments[1].name, 'y')\n\n    def test_make_routine_equality(self):\n        x, y = symbols('x y')\n        r = make_routine('test', Eq(x + y, z))\n        self.assertEqual(len(r.arguments), 3)\n        self.assertEqual(r.arguments[0].name, 'x')\n        self.assertEqual(r.arguments[1].name, 'y')\n        self.assertEqual(r.arguments[2].name, 'z')\n        self.assertEqual(len(r.results), 1)\n        self.assertEqual(r.results[0].name, 'z')\n\n    def test_make_routine_multiple_outputs(self):\n        x, y = symbols('x y')\n        r = make_routine('test', (x + y, y * x))\n        self.assertEqual(len(r.arguments), 2)\n        self.assertEqual(len(r.results), 2)\n\n    def test_make_routine_matrix_output(self):\n        x = symbols('x')\n        matrix = Matrix([[x, 2]])\n        r = make_routine('test', (x * y, Eq(matrix, x),) )\n        self.assertEqual(len(r.arguments), 1)\n        self.assertEqual(len(r.results), 2)\n\n\n\n"], "sample_8": ["\nfrom django.utils.http import (\n    base36_to_int,\n    escape_leading_slashes,\n    http_date,\n    int_to_base36,\n    is_safe_url,\n    is_same_domain,\n    parse_etags,\n    parse_http_date,\n    quote_etag,\n    url_has_allowed_host_and_scheme,\n    urlencode,\n    urlquote,\n    urlquote_plus,\n    urlsafe_base64_decode,\n    urlsafe_base64_encode,\n    urlunquote,\n    urlunquote_plus,\n)\n\nimport unittest\nfrom datetime import datetime\n\n\nclass HttpUtilsTest(unittest.TestCase):\n\n    def test_base36_to_int(self):\n        self.assertEqual(base36_to_int('0'), 0)\n        self.assertEqual(base36_to_int('1'), 1)\n        self.assertEqual(base36_to_int('1A'), 1 * 36 + 10)\n        self.assertEqual(base36_to_int('123456789'), 123456789)\n        self.assertEqual(base36_to_int('123456789abcdef'), 123456789 * 36 + 26)\n        with self.assertRaises(ValueError):\n            base36_to_int('123456789abcdefghijkl')\n\n    def test_int_to_base36(self):\n        self.assertEqual(int_to_base36(0), '0')\n        self.assertEqual(int_to_base36(1), '1')\n        self.assertEqual(int_to_base36(36), '10')\n        self.assertEqual(int_to_base36(36 * 36 + 10), '1010')\n        self.assertEqual(int_to_base36(123456789), '123456789')\n\n    def test_escape_leading_slashes(self):\n        self.assertEqual(escape_leading_slashes(''), '')\n        self.assertEqual(escape_leading_slashes('/'), '/%2F')\n        self.assertEqual(escape_leading_slashes('//some/path'), '/%2Fsome%2Fpath')\n        self.assertEqual(escape_leading_slashes('https://example.com'), 'https://example.com')\n\n    def test_http_date(self):\n        now = datetime.datetime.now()\n        expected_date = now.strftime('%a, %d %b %Y %H:%M:%S GMT')\n        self.assertEqual(http_date(), expected_date)\n        self.assertEqual(http_date(now.timestamp()), expected_date)\n\n    def test_parse_http_date(self):\n        self.assertEqual(parse_http_date('Mon, 06 Jan 2023 15:00:00 GMT'), 1673073600)\n        self.assertEqual(parse_http_date('Tue, 07 Feb 2023 16:00:00 +0000'), 1675729600)\n        with self.assertRaises(ValueError):\n            parse_http_date('invalid date')\n\n    def test_parse_http_date_safe(self):\n        self.assertEqual(parse_http_date_safe('Mon, 06 Jan 2023 15:00:00 GMT'), 1673073600)\n        self.assertEqual(parse_http_date_safe('Tue, 07 Feb 2023 16:00:00 +0000'), 1675729600)\n        self.assertIsNone(parse_http_date_safe('invalid date'))\n\n    def test_parse_etags(self):\n        self.assertEqual(parse_etags('*'), ['*'])\n        self.assertEqual(parse_etags('\"123\"'), ['123'])\n        self.assertEqual(parse_etags('\"123\", \"456\"'), ['123', '456'])\n        self.assertEqual(parse_etags('\"123\" , \"456\"'), ['123 \"456\"'])\n\n    def test_quote_etag(self):\n        self.assertEqual(quote_etag('123'), '\"123\"')\n        self.assertEqual(quote_etag('\"123\"'), '\"123\"')\n\n    def test_is_same_domain(self):\n        self.assertTrue(is_same_domain(domain='example.com', pattern='example.com'))\n        self.assertTrue(is_same_domain(domain='subdomain.example.com', pattern='.example.com'))\n        self.assertFalse(is_same_domain(domain='example.com', pattern='another.com'))\n        self.assertFalse(is_same_domain(domain='example.com', pattern='.org'))\n\n    def test_is_safe_url(self):\n        # Examples mimicking real-world scenarios\n        self.assertTrue(is_safe_url('https://www.example.com', ['www.example.com']))\n        self.assertFalse(is_safe_url('http://www.example.com', ['www.example.com'], require_https=True))\n        self.assertFalse(is_safe_url('http://example.com', ['www.example.com']))\n        self.assertFalse(is_safe_url('https://example.com/path/to/page', ['example.com']))\n        self.assertTrue(is_safe_url('https://example.com/path/to/page', ['example.com', '*.example.com']))\n\n    def test_urlencode(self):\n        self.assertEqual(urlencode({'key': 'value'}), 'key=value')\n        self.assertEqual(urlencode({'key1': 'value1', 'key2': 'value2'}), 'key1=value1&key2=value2')\n        self.assertEqual(urlencode({'key': ['value1', 'value2']}), 'key=value1&key=value2')\n        self.assertEqual(urlencode({'key': None}), 'key=')\n\n    def test_urlquote(self):\n        self.assertEqual(urlquote('https://www.example.com'), 'https%3A%2F%2Fwww.example.com')\n        self.assertEqual(urlquote('/path/to/page'), '%2Fpath%2Fto%2Fpage')\n        self.assertEqual(urlquote('\u00e4\u00f6\u00fc'), '%C3%A4%C3%B6%C3%BC')\n\n    def test_urlquote_plus(self):\n        self.assertEqual(urlquote_plus('https://www.example.com'), 'https%253A%252F%252Fwww.example.com')\n        self.assertEqual(urlquote_plus('/path/to/page'), '%252Fpath%252Fto%252Fpage')\n        self.assertEqual(urlquote_plus('\u00e4\u00f6\u00fc'), '%C3%A4%C3%B6%C3%BC')\n\n    def test_urlsafe_base64_encode(self):\n        self.assertEqual(urlsafe_base64_encode(b'hello'), 'aGVsbG8=')\n        self.assertEqual(urlsafe_base64_encode(b'\u4f60\u597d'), '5Lit5LiA56We')\n\n    def test_urlsafe_base64_decode(self):\n        self.assertEqual(urlsafe_base64_decode('aGVsbG8='), b'hello')\n        self.assertEqual(urlsafe_base64_decode('5Lit5LiA56We'), b'\u4f60\u597d')\n\n\n\n    def test_urlunquote(self):\n        self.assertEqual(urlunquote('https%3A%2F%2Fwww.example.com'), 'https://www.example.com')\n        self.assertEqual(urlunquote('%2Fpath%2Fto%2Fpage'), '/path/to/page')\n        self.assertEqual(urlunquote('%C3%A4%C3%B6%C3%BC'), '\u00e4\u00f6\u00fc')\n\n    def test_urlunquote_plus(self):\n        self.assertEqual(urlunquote_plus('https%253A%252F%252Fwww.example.com'), 'https://www.example.com')\n        self.assertEqual(urlunquote_plus('%252Fpath%252Fto%252Fpage'), '/path/to/page')\n        self.assertEqual(urlunquote_plus('%C3%A4%C3%B6%C3%BC'), '\u00e4\u00f6\u00fc')\n\n\n\n"], "sample_80": ["\nimport pytest\nfrom xarray import DataArray, Dataset, Variable, concat\n\nfrom xarray.core.concat import _dataset_concat, _dataarray_concat, _calc_concat_dim_coord, _calc_concat_over, _parse_datasets\n\nimport numpy as np\nfrom .utils import assert_allclose\n\n@pytest.fixture\ndef simple_arrays():\n    return (\n        DataArray(np.arange(6), dims=(\"x\", \"y\"), name=\"data\"),\n        DataArray(np.arange(12, 18), dims=(\"x\", \"y\"), name=\"data\"),\n    )\n\n@pytest.fixture\ndef simple_datasets():\n    return (\n        Dataset({\n            \"data\": DataArray(np.arange(6), dims=(\"x\", \"y\"), name=\"data\"),\n            \"coords\": DataArray(np.arange(3), dims=\"x\", name=\"x\"),\n        }),\n        Dataset({\n            \"data\": DataArray(np.arange(12, 18), dims=(\"x\", \"y\"), name=\"data\"),\n            \"coords\": DataArray(np.arange(3, 6), dims=\"x\", name=\"x\"),\n        }),\n    )\n\n@pytest.fixture\ndef simple_dataset_with_concat_coord():\n    return (\n        Dataset({\n            \"data\": DataArray(np.arange(6), dims=(\"x\", \"y\"), name=\"data\"),\n            \"coords\": DataArray(np.arange(3), dims=\"x\", name=\"x\"),\n        }),\n        Dataset({\n            \"data\": DataArray(np.arange(12, 18), dims=(\"x\", \"y\"), name=\"data\"),\n            \"x\": DataArray(np.arange(3, 6), dims=\"x\", name=\"x\"),  # Same name as coord but not in same dataset\n        }),\n    )\n\ndef test_concat_arrays_same_shape(simple_arrays):\n    a, b = simple_arrays\n    result = concat([a, b], dim=\"y\")\n    assert result.shape == (6, 18)\n\ndef test_concat_arrays_different_shape(simple_arrays):\n    a, b = simple_arrays\n    result = concat([a, b], dim=\"y\", join='exact')\n    assert result.shape == (6, 18)\n    \n\ndef test_concat_datasets_coords_different(simple_datasets):\n    ds1, ds2 = simple_datasets\n    result = concat([ds1, ds2], dim=\"x\", coords=\"different\")\n\n    assert not np.array_equal(result.coords[\"x\"].data, np.arange(3))\n    assert not np.array_equal(result.coords[\"x\"].data, np.arange(3, 6))\n\ndef test_concat_datasets_data_different(simple_datasets):\n    ds1, ds2 = simple_datasets\n    result = concat([ds1, ds2], dim=\"x\", data_vars=\"different\")\n\n    assert len(result.data_vars) == 1\n\ndef test_concat_datasets_data_vars_all(simple_datasets):\n    ds1, ds2 = simple_datasets\n    result = concat([ds1, ds2], dim=\"x\", data_vars=\"all\")\n\n    assert len(result.data_vars) == 1\n\n\n\ndef test_concat_datasets_no_conflict_data(simple_datasets):\n    ds1, ds2 = simple_datasets\n    result = concat([ds1, ds2], dim=\"x\", compat='no_conflicts')\n\n    assert len(result.data_vars) == 1\n\ndef test_concat_datasets_identical_attributes(simple_datasets):\n    ds1, ds2 = simple_datasets\n    concat([ds1, ds2], dim=\"x\", compat='identical')\n\n    # No assertion here, this test passes if there are no errors\n\n\ndef test_concat_dataset_with_concat_coord():\n    ds1, ds2 = simple_dataset_with_concat_coord()\n    with pytest.raises(ValueError):\n        concat([ds1, ds2], dim=\"x\")\n\n\ndef test_concat_dataset_different_dim_coords():\n    ds1 = Dataset({\n        \"data\": DataArray(np.arange(6), dims=(\"x\", \"y\"), name=\"data\"),\n        \"x\": DataArray(np.arange(3), dims=\"x\", name=\"x\"),\n    })\n    ds2 = Dataset({\n        \"data\": DataArray(np.arange(12, 18), dims=(\"x\", \"y\"), name=\"data\"),\n        \"y\": DataArray(np.arange(3, 6), dims=\"y\", name=\"y\"),\n    })\n    with pytest.raises(ValueError):\n        concat([ds1, ds2], dim=\"y\", coords=\"different\")\n\n    with pytest.raises(ValueError):\n        concat([ds1, ds2], dim=\"x\", coords=\"different\")\n\n\n\n\ndef test_concat_dataarrays_broadcast_equals():\n    a = DataArray(np.arange(12).reshape(2, 6), dims=[\"x\", \"y\"], name=\"data\")\n    b = DataArray(np.arange(6), dims=\"y\", name=\"data\")\n    with pytest.raises(ValueError):\n        concat([a, b], dim=\"x\", compat=\"broadcast_equals\")\n\ndef test_calc_concat_dim_coord():\n    from xarray import DataArray\n    assert _calc_concat_dim_coord(\"x\") == (\"x\", None)\n    assert _calc_concat_dim_coord(DataArray(np.arange(3), dims=\"x\", name=\"x\")) == (\"x\", DataArray(np.arange(3), dims=\"x\", name=\"x\"))\n\ndef test_calc_concat_over():\n    datasets = [\n        Dataset({\"a\": DataArray(np.ones(3), dims=\"x\"), \"b\": DataArray(np.ones(3), dims=\"x\")}),\n        Dataset({\"a\": DataArray(np.ones(3)*2, dims=\"x\"), \"b\": DataArray(np.ones(3)*2, dims=\"x\")}),\n    ]\n    concat_over, equals, concat_dim_lengths = _calc_concat_over(datasets, \"x\", (), {\"a\": \"all\", \"b\": \"all\"}, \"all\", \"identical\")\n    assert concat_over == {\"a\", \"b\"}\n    assert equals == {\"a\": True, \"b\": True}\n    assert concat_dim_lengths == [3, 3] \n\ndef test_parse_datasets():\n    datasets = [\n        Dataset({\"a\": DataArray(np.ones(3), dims=\"x\"), \"b\": DataArray(np.ones(3), dims=\"x\")}),\n        Dataset({\"a\": DataArray(np.ones(3), dims=\"x\", name=\"a_1\"), \"b\": DataArray(np.ones(3), dims=\"x\"),}),\n    ]\n    dim_coords, dims_sizes, coord_names, data_names = _parse_datasets(datasets)\n    assert dim_coords == {\"x\": DataArray(np.ones(3), dims=\"x\")}\n    assert dims_sizes == {\"x\": 3}\n    assert coord_names == {\"a\", \"b\"}\n    assert data_names == {\"a\"}\n\n\n\n\n"], "sample_37": ["\nimport unittest\nfrom django.contrib.auth.forms import (\n    AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm, PasswordResetForm, ReadOnlyPasswordHashField, ReadOnlyPasswordHashWidget, SetPasswordForm, UserChangeForm, UserCreationForm, \n)\nfrom django.forms import forms\nfrom django.forms.fields import CharField, Field, IntegerField\nfrom django.test import TestCase\nfrom django.utils.encoding import force_bytes\nfrom django.utils.http import urlsafe_base64_encode\nfrom django.core.exceptions import ValidationError\n\nclass TestReadOnlyPasswordHashWidget(TestCase):\n    def test_render(self):\n        widget = ReadOnlyPasswordHashWidget()\n        output = widget.render(\n            name=\"password_hash\", value=\"-19$2a$10$2Kq9G0Z63l4P5z18i3.219e2zC1L8mG/j/P6v4v98Wj\", attrs={}\n        )\n        self.assertIn('<span class=\"readonly-password-hash\">', output)\n        self.assertIn('-19$2a$10$2Kq9G0Z63l4P5z18i3.219e2zC1L8mG/j/P6v4v98Wj', output)\n\nclass TestReadOnlyPasswordHashField(TestCase):\n    def test_widget(self):\n        field = ReadOnlyPasswordHashField()\n        self.assertIsInstance(field.widget, ReadOnlyPasswordHashWidget)\n\n    def test_render(self):\n        field = ReadOnlyPasswordHashField()\n        output = field.render(name=\"password_hash\", value=\"-19$2a$10$2Kq9G0Z63l4P5z18i3.219e2zC1L8mG/j/P6v4v98Wj\", attrs={})\n        self.assertIn('<span class=\"readonly-password-hash\">', output)\n        self.assertIn('-19$2a$10$2Kq9G0Z63l4P5z18i3.219e2zC1L8mG/j/P6v4v98Wj', output)\n\nclass TestUsernameField(TestCase):\n    def test_to_python(self):\n        field = UsernameField()\n        self.assertEqual(field.to_python(\"  Test User  \"), \"Test User\")\n\n    def test_widget_attrs(self):\n        field = UsernameField()\n        attrs = field.widget_attrs(forms.TextInput())\n        self.assertEqual(attrs['autocapitalize'], 'none')\n        self.assertEqual(attrs['autocomplete'], 'username')\n\n\nclass TestUserCreationForm(TestCase):\n    def test_initial_state(self):\n        form = UserCreationForm()\n        self.assertFalse(form.is_bound)\n        self.assertEqual(form.fields['username'].label, capfirst('Username'))\n\n    def test_password_mismatch(self):\n        form = UserCreationForm(data={'username': 'testuser', 'password1': 'password', 'password2': 'wrong_password'})\n        self.assertFalse(form.is_valid())\n\n    def test_password_validation(self):\n        form = UserCreationForm(data={'username': 'testuser', 'password1': 'shortpassword', 'password2': 'shortpassword'})\n        self.assertFalse(form.is_valid())\n        # Check if there is a password validation error message\n\n    def test_save(self):\n        user = User.objects.create(username='testuser')\n        form = UserCreationForm(data={'username': 'testuser', 'password1': 'password', 'password2': 'password'})\n        self.assertTrue(form.is_valid())\n        new_user = form.save()\n        self.assertTrue(new_user.is_active)\n        self.assertEqual(new_user.username, 'testuser')\n\nclass TestUserChangeForm(TestCase):\n\n    def test_initial_state(self):\n        form = UserChangeForm(instance=User.objects.create(username='testuser'))\n        self.assertFalse(form.is_bound)\n\n    def test_password_field(self):\n        form = UserChangeForm(instance=User.objects.create(username='testuser'))\n        self.assertEqual(form.fields['password'].label, 'Password')\n        self.assertTrue(form.fields['password'].widget.help_text)\n\n  \nclass TestAuthenticationForm(TestCase):\n    def test_clean_username_password(self):\n        form = AuthenticationForm()\n        form.data = {'username': 'testuser', 'password': 'testpassword'}\n        with self.assertRaises(ValidationError):\n            form.clean()\n\n    def test_confirm_login_allowed(self):\n        form = AuthenticationForm()\n        form.user_cache = User.objects.create(username='testuser', is_active=False)\n        with self.assertRaises(ValidationError):\n            form.confirm_login_allowed(form.user_cache)\n\nclass TestPasswordResetForm(TestCase):\n    def test_send_mail(self):\n        form = PasswordResetForm()\n        # Arrange mock email sending behavior\n        def mock_send_mail(subject, body, from_email, to_email, html_email=None):\n            # ... (Assert email content here)\n            pass\n        form.send_mail = mock_send_mail\n        form.save()\n\n    def test_get_users(self):\n        user1 = User.objects.create(username='testuser1@example.com', email='testuser1@example.com')\n        user2 = User.objects.create(username='testuser2@example.com', email='testuser2@example.com', is_active=False)\n        form = PasswordResetForm()\n        users = form.get_users('testuser1@example.com')\n        self.assertEqual(len(users), 1)\n        self.assertEqual(users[0], user1)\n\nclass TestSetPasswordForm(TestCase):\n    def test_clean_new_password2(self):\n        form = SetPasswordForm(user=User.objects.create(username='testuser'))\n        form.data = {'new_password1': 'password', 'new_password2': 'wrong_password'}\n        with self.assertRaises(ValidationError):\n            form.clean()\n\n    def test_save(self):\n        user = User.objects.create(username='testuser')\n        form = SetPasswordForm(user=user, data={'new_password1': 'password', 'new_password2': 'password'})\n        self.assertTrue(form.is_valid())\n        form.save()\n        self.assertEqual(user.password, 'password')\n\nclass TestPasswordChangeForm(TestCase):\n    def test_clean_old_password(self):\n        form = PasswordChangeForm(user=User.objects.create(username='testuser', password='oldpassword'))\n        form.data = {'old_password': 'wrong_password', 'new_password1': 'newpassword', 'new_password2': 'newpassword'}\n        with self.assertRaises(ValidationError):\n            form.clean()\n\n    def test_save(self):\n        user = User.objects.create(username='testuser', password='oldpassword')\n        form = PasswordChangeForm(user=user, data={'old_password': 'oldpassword', 'new_password1': 'newpassword', 'new_password2': 'newpassword'})\n        self.assertTrue(form.is_valid())\n        form.save()\n        self.assertEqual(user.password, 'newpassword')\n\nclass TestAdminPasswordChangeForm(TestCase):\n    def test_clean_password2(self):\n        form = AdminPasswordChangeForm(user=User.objects.create(username='testuser'))\n        form.data = {'password1': 'password', 'password2': 'wrong_password'}\n        with self.assertRaises(ValidationError):\n            form.clean()\n\n    def test_save(self):\n        user = User.objects.create(username='testuser')\n        form = AdminPasswordChangeForm(user=user, data={'password1': 'password', 'password2': 'password'})\n        self.assertTrue(form.is_valid())\n        form.save()\n        self.assertEqual(user.password, 'password')\n\n\n\n"], "sample_159": ["\nfrom sympy.physics.units.definitions.dimension_definitions import Dimension\nfrom sympy.physics.units.systems.si import dimsys_SI\nfrom sympy import symbols\nfrom sympy.physics.units.unitsystem import UnitSystem, Quantity, get_unit_system\n\nimport unittest\n\nclass TestUnitSystem(unittest.TestCase):\n    def test_unit_system_init(self):\n        base_units = (Dimension(length), Dimension(time))\n        unit_system = UnitSystem(base_units, name=\"MyUnits\")\n        self.assertEqual(unit_system.name, \"MyUnits\")\n        self.assertEqual(len(unit_system._base_units), 2)\n        self.assertEqual(unit_system._dimension_system, dimsys_SI)\n\n    def test_unit_system_extend(self):\n        base_units = (Dimension(length), Dimension(time))\n        unit_system = UnitSystem(base_units, name=\"MyUnits\")\n        new_base_units = (Dimension(mass),)\n        new_unit_system = unit_system.extend(new_base_units, name=\"MyUnitsExtended\")\n        self.assertEqual(len(new_unit_system._base_units), 3)\n        self.assertEqual(new_unit_system.name, \"MyUnitsExtended\")\n\n    def test_get_unit_system(self):\n        unit_system = UnitSystem((), name=\"SI\", dimension_system=dimsys_SI)\n        self.assertEqual(get_unit_system(\"SI\"), unit_system)\n        self.assertEqual(get_unit_system(unit_system), unit_system)\n        with self.assertRaises(ValueError):\n            get_unit_system(\"Not_a_valid_unit_system\")\n\n    def test_get_default_unit_system(self):\n        self.assertEqual(get_unit_system(\"SI\"), UnitSystem.get_default_unit_system())\n\n    def test_dim(self):\n        base_units = (Dimension(length), Dimension(time))\n        unit_system = UnitSystem(base_units)\n        self.assertEqual(unit_system.dim, 2)\n\n    def test_is_consistent(self):\n        base_units = (Dimension(length), Dimension(time))\n        unit_system = UnitSystem(base_units)\n        self.assertTrue(unit_system.is_consistent)\n\n    def test_derived_units(self):\n        base_units = (Dimension(length), Dimension(time))\n        unit_system = UnitSystem(base_units, derived_units={Dimension(velocity): Quantity(\"m/s\")})\n        self.assertEqual(unit_system.derived_units[Dimension(velocity)], Quantity(\"m/s\"))\n\n    def test_get_dimension_system(self):\n        base_units = (Dimension(length), Dimension(time))\n        unit_system = UnitSystem(base_units)\n        self.assertEqual(unit_system.get_dimension_system(), dimsys_SI)\n\n    def test_get_quantity_dimension(self):\n        base_units = (Dimension(length), Dimension(time))\n        unit_system = UnitSystem(base_units)\n        self.assertEqual(unit_system.get_quantity_dimension(Quantity(\"m\")), Dimension(length))\n\n    def test_get_quantity_scale_factor(self):\n        base_units = (Dimension(length), Dimension(time))\n        unit_system = UnitSystem(base_units)\n        self.assertEqual(unit_system.get_quantity_scale_factor(Quantity(\"1 m\")), 1)\n\n    def test_get_dimensional_expr(self):\n        base_units = (Dimension(length), Dimension(time))\n        unit_system = UnitSystem(base_units)\n        self.assertEqual(unit_system.get_dimensional_expr(Quantity(\"1 m\")), Dimension(length))\n        self.assertEqual(unit_system.get_dimensional_expr(Quantity(\"2 m/s\")), Dimension(length) * Dimension(time)**-1)\n\n\n"], "sample_21": ["\nfrom django.utils import text\nfrom django.utils.text import format_lazy\nfrom django.utils.translation import gettext_lazy, override\nimport unittest\n\nclass TestTextUtils(unittest.TestCase):\n\n    def test_capfirst(self):\n        self.assertEqual(text.capfirst(\"hello\"), \"Hello\")\n        self.assertEqual(text.capfirst(\"\"), \"\")\n        self.assertEqual(text.capfirst(None), None)\n\n    def test_wrap(self):\n        self.assertEqual(text.wrap(\"This is a test string.\", 10), \"This is a\\n      test string.\")\n        self.assertEqual(text.wrap(\"This is a test string.\", 20), \"This is a test string.\")\n        self.assertEqual(text.wrap(\"This is a test string.\\nThis is another line.\", 10), \"This is a\\n      test string.\\nThis is an\\nother line.\")\n        self.assertEqual(text.wrap(\"This is a test string.\\nThis is another line.\", 20), \"This is a test string.\\nThis is another line.\")\n\n    def test_truncate_chars(self):\n        self.assertEqual(text.Truncator(\"This is a test string.\").chars(10), \"This is a test\")\n        self.assertEqual(text.Truncator(\"This is a test string.\").chars(10, truncate=\"...\"), \"This is a test...\")\n        self.assertEqual(text.Truncator(\"This is a test string.\").chars(10, html=True), \"This is a test\")\n        self.assertEqual(text.Truncator(\"This is a <b>test</b> string.\").chars(10, html=True), \"This is a <b>\")\n        self.assertEqual(text.Truncator(\"This is a test string.\").chars(20), \"This is a test string.\")\n\n    def test_truncate_words(self):\n        self.assertEqual(text.Truncator(\"This is a test string.\").words(3), \"This is a test\")\n        self.assertEqual(text.Truncator(\"This is a test string.\").words(3, truncate=\"...\"), \"This is a...\")\n        self.assertEqual(text.Truncator(\"This is a test string.\").words(5), \"This is a test string.\")\n        self.assertEqual(text.Truncator(\"This is a test string.\").words(2, truncate=\"...\"), \"This is...\")\n\n    def test_get_valid_filename(self):\n        self.assertEqual(text.get_valid_filename(\"john's portrait in 2004.jpg\"), \"johns_portrait_in_2004.jpg\")\n        self.assertEqual(text.get_valid_filename(\"This is a test file name.txt\"), \"this_is_a_test_file_name.txt\")\n\n    def test_get_text_list(self):\n        self.assertEqual(text.get_text_list(['a', 'b', 'c', 'd']), 'a, b, c or d')\n        self.assertEqual(text.get_text_list(['a', 'b', 'c'], 'and'), 'a, b and c')\n        self.assertEqual(text.get_text_list(['a']), 'a')\n        self.assertEqual(text.get_text_list([]), '')\n\n    def test_normalize_newlines(self):\n        self.assertEqual(text.normalize_newlines(\"\\r\\nThis is a test.\\r\"), \"\\nThis is a test.\")\n        self.assertEqual(text.normalize_newlines(\"\\nThis is a test.\\r\\n\"), \"\\nThis is a test.\")\n        self.assertEqual(text.normalize_newlines(\"\\nThis is a test.\\n\"), \"\\nThis is a test.\")\n\n    def test_phone2numeric(self):\n        self.assertEqual(text.phone2numeric(\"123-456-7890\"), \"1234567890\")\n        self.assertEqual(text.phone2numeric(\"(123) 456-7890\"), \"1234567890\")\n        self.assertEqual(text.phone2numeric(\"1-234-567-8901\"), \"12345678901\")\n        self.assertEqual(text.phone2numeric(\"1-234-567-8901 ext. 123\"), \"12345678901\")\n        self.assertEqual(text.phone2numeric(\"abc-def-ghi\"), \"222-333-444\")\n        self.assertEqual(text.phone2numeric(\"123ABC456\"), \"123222456\")\n\n    def test_smart_split(self):\n        self.assertEqual(list(text.smart_split(\"This is 'a test' string.\")), ['This', 'is', \"'a test'\", 'string.'])\n        self.assertEqual(list(text.smart_split('\"a \" test\" string\"')), ['a \" test\"', 'string'])\n        self.assertEqual(list(text.smart_split(\"Another 'person's' test.\")), ['Another', \"'person\\\\'s'\", 'test.'])\n\n\n    def test_unescape_entities(self):\n        self.assertEqual(text.unescape_entities(\"&lt;p&gt;\"), \"<p>\")\n        self.assertEqual(text.unescape_entities(\"&amp;\"), \"&\")\n        self.assertEqual(text.unescape_entities(\"&quot;\"), '\"')\n        self.assertEqual(text.unescape_entities(\"&nbsp;\"), \" \")\n        self.assertEqual(text.unescape_entities(\"&#38;\"), \"&\")\n\n    def test_unescape_string_literal(self):\n        self.assertEqual(text.unescape_string_literal('\"abc\"'), 'abc')\n        self.assertEqual(text.unescape_string_literal(\"'abc'\"), 'abc')\n        self.assertEqual(text.unescape_string_literal('\"a \\\"bc\\\"\"'), 'a \"bc\"')\n        self.assertEqual(text.unescape_string_literal(\"'\\'ab\\' c'\"), \"'ab' c\")\n\n    def test_slugify(self):\n        self.assertEqual(text.slugify(\"This is a test string.\"), \"this-is-a-test-string\")\n        self.assertEqual(text.slugify(\"This is a test string.\", allow_unicode=True), \"this-is-a-test-string\")\n        self.assertEqual(text.slugify(\"A \\\"Funky\\\" Style\"), \"a-funky-style\")\n        self.assertEqual(text.slugify(\"A \\\"Funky\\\" Style\", allow_unicode=True), \"a-funky-style\")\n\n    def test_camel_case_to_spaces(self):\n        self.assertEqual(text.camel_case_to_spaces(\"ThisIsACamelCaseString\"), \"this is a camel case string\")\n        self.assertEqual(text.camel_case_to_spaces(\"This_Is_A_CamelCaseString\"), \"this is a camel case string\")\n\n\n"], "sample_17": ["\nfrom django.contrib.auth.tokens import PasswordResetTokenGenerator, int_to_base36, base36_to_int\nfrom django.contrib.auth.models import User\nfrom django.utils import timezone\nfrom unittest.mock import patch, MagicMock\nfrom django.conf import settings\nimport hashlib\nsettings.PASSWORD_RESET_TIMEOUT = 1\n\n\nclass TestPasswordResetTokenGenerator:\n\n    @patch('django.contrib.auth.tokens.datetime')\n    def test_make_token_with_timestamp(self, mock_datetime):\n        user = User(pk=1)\n        token_generator = PasswordResetTokenGenerator()\n        timestamp = 1678886400\n        mock_datetime.now.return_value = timezone.make_aware(datetime.fromtimestamp(timestamp))\n        token = token_generator._make_token_with_timestamp(user, timestamp)\n        assert token.startswith(int_to_base36(timestamp))\n        assert len(token) == 40\n\n    @patch('django.contrib.auth.tokens.datetime')\n    def test_make_token_with_timestamp_legacy(self, mock_datetime):\n        user = User(pk=1)\n        token_generator = PasswordResetTokenGenerator()\n        timestamp = 1678886400\n        mock_datetime.now.return_value = timezone.make_aware(datetime.fromtimestamp(timestamp))\n        token = token_generator._make_token_with_timestamp(user, timestamp, legacy=True)\n        assert token.startswith(int_to_base36(timestamp))\n        assert len(token) == 40\n\n    @patch('django.contrib.auth.tokens.datetime')\n    def test_check_token_valid(self, mock_datetime):\n        user = User(pk=1)\n        token_generator = PasswordResetTokenGenerator()\n        timestamp = 1678886400\n        mock_datetime.now.return_value = timezone.make_aware(datetime.fromtimestamp(timestamp))\n        token = token_generator._make_token_with_timestamp(user, timestamp)\n        assert token_generator.check_token(user, token) is True\n\n    @patch('django.contrib.auth.tokens.datetime')\n    def test_check_token_invalid_timestamp(self, mock_datetime):\n        user = User(pk=1)\n        token_generator = PasswordResetTokenGenerator()\n        timestamp = 1678886400\n        mock_datetime.now.return_value = timezone.make_aware(datetime.fromtimestamp(timestamp + settings.PASSWORD_RESET_TIMEOUT))\n        token = token_generator._make_token_with_timestamp(user, timestamp)\n        assert token_generator.check_token(user, token) is False\n\n    @patch('django.contrib.auth.tokens.datetime')\n    def test_check_token_invalid_token_data(self, mock_datetime):\n        user = User(pk=1)\n        token_generator = PasswordResetTokenGenerator()\n        timestamp = 1678886400\n        mock_datetime.now.return_value = timezone.make_aware(datetime.fromtimestamp(timestamp))\n        token = token_generator._make_token_with_timestamp(user, timestamp)\n        modified_token = token[:-1]\n        assert token_generator.check_token(user, modified_token) is False\n        \n\n    @patch('django.contrib.auth.tokens.datetime')\n    def test_check_token_invalid_user(self, mock_datetime):\n        token_generator = PasswordResetTokenGenerator()\n        token = \"any_token\"\n        assert token_generator.check_token(None, token) is False\n\n"], "sample_152": ["\nfrom sympy.printing.pretty import pretty, PrettyPrinter\n\n\n\ndef test_empty_Printer():\n    p = PrettyPrinter()\n\n    assert p.doprint(S.EmptySet) == 'set()'\n\ndef test_empty_Printer_unicode():\n    p = PrettyPrinter(use_unicode=True)\n\n    assert p.doprint(S.EmptySet) == '\u2205'\n\n\n\ndef test_pretty_print_symbol():\n    assert pretty(S.Pi) == r'$\\pi$'\n\n\n\ndef test_pretty_print_symbol_unicode_off():\n    p = PrettyPrinter(use_unicode=False)\n    assert p.doprint(S.Pi) == 'pi'\n\n\n\ndef test_pretty_print_numbers():\n    assert pretty(2) == '2'\n    assert pretty(2.5) == '2.5'\n    assert pretty(1.5e10) == '1.5e+10'\n\n\n\ndef test_pretty_print_symbols():\n    assert pretty(S.Symbol('x')) == 'x'\n\n\n\ndef test_pretty_print_variables():\n    assert pretty(Symbol('x')) == 'x'\n\n\n\ndef test_pretty_print_functions():\n    x = Symbol('x')\n    assert pretty(sin(x)) == 'sin(%s)' % pretty(x)\n\n\n\ndef test_pretty_print_functions_unicode():\n    x = Symbol('x')\n    p = PrettyPrinter(use_unicode=True)\n    assert p.doprint(sin(x)) == 'sin(%s)' % pretty(x)\n\n\n\ndef test_pretty_print_add():\n    x = Symbol('x')\n    y = Symbol('y')\n    assert pretty(x + y) == 'x + y'\n\n\n\ndef test_pretty_print_add_unicode():\n    x = Symbol('x')\n    y = Symbol('y')\n    p = PrettyPrinter(use_unicode=True)\n    assert p.doprint(x + y) == 'x + y'\n\n\n\ndef test_pretty_print_mul():\n    x = Symbol('x')\n    y = Symbol('y')\n    assert pretty(x * y) == 'x*y'\n\n\n\ndef test_pretty_print_mul_unicode():\n    x = Symbol('x')\n    y = Symbol('y')\n    p = PrettyPrinter(use_unicode=True)\n    assert p.doprint(x * y) == 'x*y'\n\n\n\ndef test_pretty_print_pow():\n    x = Symbol('x')\n    y = Symbol('y')\n    assert pretty(x**y) == 'x**y'\n\n\n\ndef test_pretty_print_pow_unicode():\n    x = Symbol('x')\n    y = Symbol('y')\n    p = PrettyPrinter(use_unicode=True)\n    assert p.doprint(x**y) == 'x**y'\n\n\n\ndef test_pretty_print_Eq():\n    x = Symbol('x')\n    y = Symbol('y')\n    assert pretty(Eq(x, y)) == 'x == y'\n\n\n\ndef test_pretty_print_Eq_unicode():\n    x = Symbol('x')\n    y = Symbol('y')\n    p = PrettyPrinter(use_unicode=True)\n    assert p.doprint(Eq(x, y)) == 'x == y'\n\n\n\ndef test_pretty_print_List():\n    assert pretty([1, 2, 3]) == '[1, 2, 3]'\n\n\n\ndef test_pretty_print_List_unicode():\n    p = PrettyPrinter(use_unicode=True)\n    assert p.doprint([1, 2, 3]) == '[1, 2, 3]'\n\n\n\ndef test_pretty_print_Dict():\n    assert pretty({1: 2, 3: 4}) == '{1: 2, 3: 4}'\n\n\n\ndef test_pretty_print_Dict_unicode():\n    p = PrettyPrinter(use_unicode=True)\n    assert p.doprint({1: 2, 3: 4}) == '{1: 2, 3: 4}'\n\n\n\ndef test_pretty_print_Set():\n    assert pretty({1, 2, 3}) == '{1, 2, 3}'\n\n\n\ndef test_pretty_print_Set_unicode():\n    p = PrettyPrinter(use_unicode=True)\n    assert p.doprint({1, 2, 3}) == '{1, 2, 3}'\n\n\n\ndef test_pretty_print_Tuple():\n    assert pretty((1, 2, 3)) == '(1, 2, 3)'\n\n\n\ndef test_pretty_print_Tuple_unicode():\n    p = PrettyPrinter(use_unicode=True)\n    assert p.doprint((1, 2, 3)) == '(1, 2, 3)'\n\n\n\ndef test_pretty_print_frozenset():\n    assert pretty(frozenset({1, 2, 3})) == 'frozenset({1, 2, 3})'\n\n\n\ndef test_pretty_print_frozenset_unicode():\n    p = PrettyPrinter(use_unicode=True)\n    assert p.doprint(frozenset({1, 2, 3})) == 'frozenset({1, 2, 3})'\n\n\n\ndef test_pretty_print_UniversalSet():\n    assert pretty(S.UniversalSet) == 'UniversalSet'\n\n\n\ndef test_pretty_print_PolyRing():\n    x = Symbol('x')\n    assert pretty(PolyRing(x)) == 'PolyRing(x)'\n\n\n\ndef test_pretty_print_RationalField():\n    assert pretty(RationalField()) == 'QQ'\n\n\n\ndef test_pretty_print_RealField():\n    assert pretty(RealField()) == 'RR'\n\n\n\ndef test_pretty_print_ComplexField():\n    assert pretty(ComplexField()) == 'CC'\n\n\n\ndef test_pretty_print_IntegerRing():\n    assert pretty(IntegerRing()) == 'ZZ'\n\n\n\ndef test_pretty_print_PolynomialRingBase():\n    x = Symbol('x')\n    assert pretty(PolynomialRingBase(x)) == 'PolynomialRingBase(x)'\n\n\n\ndef test_pretty_print_Subs():\n    x = Symbol('x')\n    y = Symbol('y')\n    assert pretty(Subs(x, y)) == 'x=y'\n\n\n\ndef test_pretty_print_euler():\n    assert pretty(euler()) == 'E'\n\n\n\ndef test_pretty_print_catalan():\n    assert pretty(catalan()) == 'C'\n\n\n\ndef test_pretty_print_bernoulli():\n    assert pretty(bernoulli()) == 'B'\n\n\n\ndef test_pretty_print_bell():\n    assert pretty(bell()) == 'B'\n\n\n\ndef test_pretty_print_lucas():\n    assert pretty(lucas()) == 'L'\n\n\n\ndef test_pretty_print_fibonacci():\n    assert pretty(fibonacci()) == 'F'\n\n\n\ndef test_pretty_print_tribonacci():\n    assert pretty(tribonacci()) == 'T'\n\n\n\ndef test_pretty_print_stieltjes():\n    assert pretty(stieltjes()) == '\u03b3'\n\n\n\ndef test_pretty_print_KroneckerDelta():\n    x = Symbol('x')\n    y = Symbol('y')\n    assert pretty(KroneckerDelta(x, y)) == 'delta(x, y)'\n\n\n\ndef test_pretty_print_DMP():\n    pass\n\n\n\ndef test_pretty_print_DMF():\n    pass\n\n\n\ndef test_pretty_print_Object():\n    pass\n\n\n\ndef test_pretty_print_Morphism():\n    pass\n\n\n\ndef test_pretty_print_NamedMorphism():\n    pass\n\n\n\ndef test_pretty_print_IdentityMorphism():\n    pass\n\n\n\ndef test_pretty_print_CompositeMorphism():\n    pass\n\n\n\ndef test_pretty_print_Category():\n    pass\n\n\n\ndef test_pretty_print_Diagram():\n    pass\n\n\n\ndef test_pretty_print_DiagramGrid():\n    pass\n\n\n\ndef test_pretty_print_FreeModuleElement():\n    pass\n\n\n\ndef test_pretty_print_SubModule():\n    pass\n\n\n\ndef test_pretty_print_FreeModule():\n    pass\n\n\n\ndef test_pretty_print_ModuleImplementedIdeal():\n    pass\n\n\n\ndef test_pretty_print_QuotientRing():\n    pass\n\n\n\ndef test_pretty_print_QuotientRingElement():\n    pass\n\n\n\ndef test_pretty_print_QuotientModuleElement():\n    pass\n\n\n\ndef test_pretty_print_QuotientModule():\n    pass\n\n\n\ndef test_pretty_print_MatrixHomomorphism():\n    pass\n\n\n\ndef test_pretty_print_Manifold():\n    pass\n\n\n\ndef test_pretty_print_Patch():\n    pass\n\n\n\ndef test_pretty_print_CoordSystem():\n    pass\n\n\n\ndef test_pretty_print_BaseScalarField():\n    pass\n\n\n\ndef test_pretty_print_BaseVectorField():\n    pass\n\n\n\ndef test_pretty_print_Differential():\n    pass\n\n\n\ndef test_pretty_print_Tr():\n    pass\n\n\n\ndef test_pretty_print_Quantity():\n    pass\n\n\n\ndef test_pretty_print_AssignmentBase():\n    pass\n\n\n\n"], "sample_112": ["\nfrom sklearn.cluster import AffinityPropagation\nimport numpy as np\nfrom sklearn.cluster._affinity_propagation import affinity_propagation\nfrom sklearn.metrics import pairwise_distances_argmin\n\ndef test_affinity_propagation_equal_similarities_and_preferences():\n    # Test empty array\n    test_array = np.array([])\n    assert _equal_similarities_and_preferences(test_array, 0) == True\n\n    # Test single element array\n    test_array = np.array([4])\n    assert _equal_similarities_and_preferences(test_array, 4) == True\n\n    # Test array with equal similarities\n    test_array = np.array([[1, 2], [2, 1]])\n    assert _equal_similarities_and_preferences(test_array, 1) == True\n\n    # Test array with equal similarities and preferences\n    test_array = np.array([[1, 2], [2, 1]])\n    assert _equal_similarities_and_preferences(test_array, 1) == True\n\n    # Test array with different similarities\n    test_array = np.array([[1, 2], [2, 3]])\n    assert _equal_similarities_and_preferences(test_array, 1) == False\n\ndef test_affinity_propagation_default_preference():\n    S = np.array([[1, 2], [2, 3]])\n    cluster_centers_indices, labels, n_iter = affinity_propagation(S,\n                                                                preference=None)\n    assert cluster_centers_indices.size == 1\n\ndef test_affinity_propagation_all_equal_preferences():\n    S = np.array([[1, 2], [2, 3]])\n    preference = np.array([1, 1])\n    cluster_centers_indices, labels, n_iter = affinity_propagation(S,\n                                                                preference=preference)\n    assert cluster_centers_indices.size == 2\n\ndef test_affinity_propagation_no_clusters():\n    S = np.array([[1, 2], [2, 3]])\n    preference = np.array([100, 100])\n    cluster_centers_indices, labels, n_iter = affinity_propagation(S,\n                                                                preference=preference)\n    assert cluster_centers_indices.size == 2\n\ndef test_affinity_propagation_convergence():\n    S = np.array([[1, 2], [2, 3]])\n    cluster_centers_indices, labels, n_iter = affinity_propagation(S,\n                                                                preference=None,\n                                                                convergence_iter=1)\n    assert n_iter == 1\n\ndef test_affinity_propagation_precomputed_affinity():\n    S = np.array([[1, 2], [2, 3]])\n    cluster_centers_indices, labels, n_iter = affinity_propagation(S,\n                                                                preference=None,\n                                                                affinity='precomputed')\n    assert cluster_centers_indices.size == 1\n\ndef test_affinity_propagation_euclidean_affinity():\n    X = np.array([[1, 2], [2, 3]])\n    cluster_centers_indices, labels, n_iter = affinity_propagation(X,\n                                                                preference=None,\n                                                                affinity='euclidean')\n    assert cluster_centers_indices.size == 1\n\n\n"], "sample_144": ["\nfrom sympy import *\nfrom sympy.printing.pycode import pycode, PythonCodePrinter, MpmathPrinter, NumPyPrinter, SciPyPrinter\n\ndef test_basic_expressions():\n    expr = x**2 + 2*x + 1\n    result = pycode(expr)\n    expected = 'x**2 + 2*x + 1'\n    assert result == expected\n\ndef test_function_calls():\n    expr = sin(x)\n    result = pycode(expr)\n    expected = 'math.sin(x)'\n    assert result == expected\n\ndef test_constants():\n    expr = pi\n    result = pycode(expr)\n    expected = 'math.pi'\n    assert result == expected\n\ndef test_multiple_operations():\n    expr = (x**2 + 2*x + 1) / (x + 1)\n    result = pycode(expr)\n    expected = '(x**2 + 2*x + 1) / (x + 1)'\n    assert result == expected\n\ndef test_mpmath_printing():\n    expr = sqrt(2)\n    result = pycode(expr, mpmath=True)\n    expected = 'mpmath.mpf(2)**0.5'\n    assert result == expected\n\ndef test_numpy_printing():\n    expr = sin(x*y)\n    result = pycode(expr, numpy=True)\n    expected = 'numpy.sin(x*y)'\n    assert result == expected\n\n    expr = numpy.array([[1, 2], [3, 4]])\n    result = pycode(expr, numpy=True)\n    expected = 'numpy.array([[1, 2], [3, 4]])'\n    assert result == expected\n\ndef test_scipy_printing():\n    expr = scipy.special.erf(x)\n    result = pycode(expr, scipy=True)\n    expected = 'scipy.special.erf(x)'\n    assert result == expected\n\n    expr = scipy.special.gamma(x)\n    result = pycode(expr, scipy=True)\n    expected = 'scipy.special.gamma(x)'\n    assert result == expected\n\ndef test_sympy_printing():\n    expr = sin(x)\n    result = pycode(expr, sympy=True)\n    expected = 'sympy.sin(x)'\n    assert result == expected\n\n    expr = pi\n    result = pycode(expr, sympy=True)\n    expected = 'sympy.pi'\n    assert result == expected\n\n\n\n"], "sample_42": ["\nfrom django.core.exceptions import ValidationError\nfrom django.forms.utils import flatatt, pretty_name\nfrom django.forms.widgets import Textarea, TextInput\nfrom django.utils.html import conditional_escape\nfrom django.utils.safestring import mark_safe\nfrom django.utils.translation import gettext_lazy as _\n\nfrom django.test import SimpleTestCase\nfrom django.test.utils import override_settings\n\nfrom ..field import BoundField, BoundWidget\n\n\nclass TestBoundField(SimpleTestCase):\n\n    def test_label_tag(self):\n        field = BoundField(form=None, field=None, name='foo')\n        field.label = 'Bar'\n        with self.subTest(label=None):\n            self.assertEqual(\n                field.label_tag(),\n                '<label>Bar</label>',\n            )\n        with self.subTest(label_suffix=None):\n            self.assertEqual(\n                field.label_tag(label_suffix='*'),\n                '<label>Bar*</label>',\n            )\n\n    def test_label_tag_with_errors(self):\n        field = BoundField(form=None, field=None, name='foo')\n        field.label = 'Bar'\n        field.errors = [f'Error']\n        with self.subTest(error_css_class='error'):\n            field.form.error_css_class = 'error'\n            self.assertIn(\n                '<label class=\"error\">',\n                field.label_tag(),\n            )\n\n    def test_label_tag_required(self):\n        field = BoundField(form=None, field=None, name='foo')\n        field.label = 'Bar'\n        field.field.required = True\n        field.form.required_css_class = 'required'\n        self.assertIn(\n            '<label class=\"required\">',\n            field.label_tag(),\n        )\n\n    def test_css_classes(self):\n        field = BoundField(form=None, field=None, name='foo')\n        self.assertEqual(field.css_classes(), '')\n        field.errors = [f'Error']\n        self.assertEqual(field.css_classes(), 'error')\n\n    def test_subwidgets(self):\n        class FakeWidget(object):\n\n            def subwidgets(self, name, value, attrs={}):\n                return [\n                    BoundWidget(self, {'id': 'id1', 'label': 'Choice 1'}, None)\n                ]\n\n        field = BoundField(form=None, field=None, name='foo')\n        field.field.widget = FakeWidget()\n        subwidgets = list(field.subwidgets)\n        self.assertEqual(len(subwidgets), 1)\n        self.assertEqual(subwidgets[0].id_for_label, 'id1')\n\n    def test_is_hidden(self):\n        class HiddenWidget(object):\n            is_hidden = True\n        field = BoundField(form=None, field=None, name='foo')\n        field.field.widget = HiddenWidget()\n        self.assertTrue(field.is_hidden)\n\n    def test_auto_id(self):\n        class MyForm(Form):\n            pass\n        form = MyForm()\n        field = BoundField(form, field=None, name='foo')\n        self.assertEqual(field.auto_id, '')\n\n        with override_settings(AUTO_ID='my_auto_id'):\n            self.assertEqual(field.auto_id, 'my_auto_id')\n\n        with override_settings(AUTO_ID='my_auto_id_%(name)s'):\n            self.assertEqual(field.auto_id, 'my_auto_id_foo')\n\n\n"], "sample_128": ["\nfrom sympy import (Rational, Symbol, Float, I, sqrt, oo, nan, pi, E, Integer, S, factorial, Catalan, EulerGamma, GoldenRatio, cos, exp, Number, zoo, log, Mul, Pow, Tuple, latex, Gt, Lt, Ge, Le, AlgebraicNumber, simplify, sin, fibonacci, RealField, sympify, srepr)\nfrom sympy.core.compatibility import long\nfrom sympy.core.power import integer_nthroot, isqrt, integer_log\nfrom sympy.core.numbers import (igcd, ilcm, igcdex, seterr, _intcache, igcd2, igcd_lehmer, mpf_norm, comp, mod_inverse)\nfrom sympy.utilities.decorator import conserve_mpmath_dps\nfrom sympy import pi\nfrom mpmath.libmp.libmpf import fnan\nfrom sympy import Pi\n\ndef test_sympify():\n    assert sympify(1) == S.One\n    assert sympify(2.0) == S.Two\n    assert sympify(3j) == S.ImaginaryUnit*3\n    assert sympify(\"pi\") == S.Pi\n    assert sympify(\"e\") == S.Exp1\n    assert sympify(\"x\") == Symbol(\"x\")\n\n\ndef test_NumberSymbol():\n    assert isinstance(S.Pi, NumberSymbol)\n    assert isinstance(S.Exp1, NumberSymbol)\n    assert isinstance(S.GoldenRatio, NumberSymbol)\n\n\ndef test_abs():\n    assert abs(S.One) == S.One\n    assert abs(S.NegativeOne) == S.One\n    assert abs(S.Zero) == S.Zero\n    assert abs(S.Infinity) == S.Infinity\n    assert abs(S.NegativeInfinity) == S.Infinity\n    assert abs(S.NaN) == S.NaN\n\ndef test_int():\n    assert int(S.One) == 1\n    assert int(S.Two) == 2\n    assert int(S.Three) == 3\n    assert int(S.Zero) == 0\n    assert int(S.NegativeOne) == -1\n    assert int(S.Infinity) == oo\n    assert int(S.NegativeInfinity) == -oo\n    assert int(S.NaN) == 0 \n\ndef test_float():\n    assert float(S.One) == 1.0\n    assert float(S.Two) == 2.0\n    assert float(S.Three) == 3.0\n    assert float(S.Zero) == 0.0\n    assert float(S.NegativeOne) == -1.0\n    assert float(S.Infinity) == oo\n    assert float(S.NegativeInfinity) == -oo\n    assert float(S.NaN) == nan\n\n\n\n"], "sample_20": ["\nfrom django.core.checks import Error, Warning\nfrom django.core.checks.model_checks import _check_lazy_references\nfrom django.db import connection, connections, models\nfrom django.db.models.functions import Lower\nfrom django.db.models.signals import post_init\nfrom django.utils.functional import partialmethod\n\nimport unittest\n\nclass ModelBaseTests(unittest.TestCase):\n\n    def test_check_swappable(self):\n        # Test when a valid swappable app_label is given.\n        app_label = 'myapp'\n        model_name = 'MyModel'\n        model_meta_mock = type('ModelMeta', (), {'app_label': app_label, 'model_name': model_name})\n        mock_model = type('MyModel', (models.Model,), {'_meta': model_meta_mock})\n        errors = mock_model._meta.check(app_label)\n        self.assertEqual(errors, [])\n\n    def test_check_swappable_invalid_app_label(self):\n        app_label = 'invalid_app'\n        model_name = 'MyModel'\n        model_meta_mock = type('ModelMeta', (), {'app_label': app_label, 'model_name': model_name})\n        mock_model = type('MyModel', (models.Model,), {'_meta': model_meta_mock})\n        errors = mock_model._meta.check(app_label)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].msg, \"'invalid_app' - No model found with the name 'MyModel' in the app 'invalid_app'.\")\n\n    def test_check_swappable_no_swappable_app_label(self):\n        app_label = None\n        model_name = 'MyModel'\n        model_meta_mock = type('ModelMeta', (), {'app_label': app_label, 'model_name': model_name})\n        mock_model = type('MyModel', (models.Model,), {'_meta': model_meta_mock})\n        errors = mock_model._meta.check(app_label)\n        self.assertEqual(errors, [])\n\n    def test_check_field_name_clashes(self):\n        # Define a base model with a field named 'id'.\n        class Base(models.Model):\n            id = models.AutoField(primary_key=True)\n\n        # Define a child model that also defines 'id'.\n        class Child(Base):\n            id = models.CharField(max_length=255)  \n\n        # Check for clashes. \n        warnings = Child.objects.check()\n        self.assertEqual(len(warnings), 1)\n        self.assertEqual(warnings[0].id, 'models.E006')\n\n        \n    def test_make_foreign_order_accessors(self):\n        # Create a simple model\n        class ModelA(models.Model):\n            name = models.CharField(max_length=100)\n            \n        # Create another model that has a foreign key to ModelA\n        class ModelB(models.Model):\n            model_a = models.ForeignKey(ModelA, on_delete=models.CASCADE)\n            \n        # Call the function to create the accessors\n        make_foreign_order_accessors(ModelA, ModelB)\n\n        # Test if the methods exist\n        self.assertTrue(hasattr(ModelB, 'get_modela_order'))\n        self.assertTrue(hasattr(ModelB, 'set_modela_order'))\n\n"], "sample_35": ["\nfrom django.core.management import CommandError, call_command\nfrom django.core.management.commands.shell import Command\nfrom unittest.mock import patch, call\nimport io\nimport sys\nimport subprocess\n\n\nclass TestShellCommand(TestCase):\n\n    def test_handle_with_command_option(self):\n        with patch('sys.stdout') as stdout:\n            call_command('shell', command=\"print('Hello, world!')\")\n            self.assertEqual(stdout.getvalue(), 'Hello, world!\\n')\n\n    def test_handle_with_stdin(self):\n        with patch('sys.stdin', io.BytesIO(b'print(\"Hello, world!\")\\n')) as mock_stdin:\n            with patch('sys.stdout') as stdout:\n                call_command('shell')\n                self.assertEqual(stdout.getvalue(), 'Hello, world!\\n')\n\n    def test_handle_with_no_startup_option(self):\n        with patch('os.environ', {'PYTHONSTARTUP': '/path/to/pythonrc'}):\n            with patch('sys.stdout') as stdout:\n                call_command('shell', no_startup=True)\n                self.assertEqual(stdout.getvalue(), '')\n\n    def test_handle_with_interface_option(self):\n        with patch('subprocess.check_output') as mock_subprocess:\n            mock_subprocess.return_value = b\"IPython\"\n            with patch('sys.stdout') as stdout:\n                call_command('shell', interface='ipython')\n                mock_subprocess.assert_called_with(['ipython', '-i'])\n\n    def test_handle_with_unknown_interface_option(self):\n        with patch('sys.stdout') as stdout:\n            with self.assertRaises(CommandError):\n                call_command('shell', interface='unknown')\n\n    def test_handle_with_available_shells(self):\n        with patch('sys.stdout') as stdout:\n            call_command('shell')\n            self.assertTrue(Command().shells in stdout.getvalue())\n\n    def test_handle_with_missing_shells(self):\n        with patch('sys.stdout') as stdout:\n            with patch('django.core.management.commands.shell.Command.shells', []):\n                call_command('shell')\n                self.assertEqual(stdout.getvalue(), '')\n\n\n"], "sample_87": ["\nimport pytest\nfrom _pytest._io.saferepr import _pformat_dispatch\nfrom _pytest._io.saferepr import saferepr\nfrom _pytest._io.saferepr import SafeRepr\nfrom typing import List, Dict, Tuple\n\n\n\ndef test_saferepr_basic():\n    assert saferepr(123) == \"123\"\n    assert saferepr(\"hello\") == \"hello\"\n    assert saferepr([1, 2, 3]) == \"[1, 2, 3]\"\n    assert saferepr({\"a\": 1, \"b\": 2}) == \"{a: 1, b: 2}\"\n\ndef test_saferepr_maxsize():\n    assert len(saferepr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], maxsize=5)) < 5\n    assert saferepr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], maxsize=100) == \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\ndef test_saferepr_exception():\n    class MyException(Exception):\n        pass\n\n    class MyObject:\n        def __repr__(self):\n            raise MyException()\n\n    obj = MyObject()\n    try:\n        saferepr(obj)\n    except MyException as e:\n        assert _format_repr_exception(e, obj) in repr(e)\n\ndef test_pformat_dispatch():\n    class MyObject:\n        def __repr__(self):\n            return \"MyObject(value=42)\"\n\n    obj = MyObject()\n    result = _pformat_dispatch(obj)\n    assert result == \"MyObject(value=42)\"\n\n"], "sample_45": ["\nimport unittest\nimport functools\nfrom django.utils.decorators import (\n    method_decorator,\n    _multi_decorate,\n    _update_method_wrapper,\n    decorator_from_middleware,\n    make_middleware_decorator,\n)\n\n\nclass TestDecorators(unittest.TestCase):\n    def test_classonlymethod(self):\n        class MyCustomClass:\n            @classonlymethod\n            def my_method(cls):\n                pass\n\n        instance = MyCustomClass()\n        with self.assertRaises(AttributeError):\n            instance.my_method()\n\n        MyCustomClass.my_method(MyCustomClass)\n\n    def test__multi_decorate(self):\n        def decorator1(func):\n            return lambda *args, **kwargs: f\"Decorated by 1: {func(*args, **kwargs)}\"\n\n        def decorator2(func):\n            return lambda *args, **kwargs: f\"Decorated by 2: {func(*args, **kwargs)}\"\n\n        @decorator1\n        @decorator2\n        def target_func(x):\n            return x * 2\n\n        wrapped_func = _multi_decorate([decorator1, decorator2], target_func)\n        self.assertEqual(wrapped_func(3), \"Decorated by 2: Decorated by 1: 6\")  \n\n    def test__update_method_wrapper(self):\n        def decorator(func):\n            return lambda *args, **kwargs: func(*args, **kwargs) + \" decorated\"\n\n        _update_method_wrapper(None, decorator)\n\n    def test_method_decorator(self):\n        def my_decorator(func):\n            return lambda *args, **kwargs: f\"Decorated: {func(*args, **kwargs)}\"\n\n        class MyTestClass:\n            @method_decorator(my_decorator)\n            def my_method(self, x):\n                return x * 2\n\n        instance = MyTestClass()\n        self.assertEqual(instance.my_method(3), \"Decorated: 6\")\n\n    def test_decorator_from_middleware(self):\n        class MyMiddleware:\n            def __init__(self, view_func):\n                self.view_func = view_func\n            def process_request(self, request):\n                return None\n\n        @decorator_from_middleware(MyMiddleware)\n        def target_func(request):\n            return \"Target Function\"\n\n        self.assertIsNotNone(target_func.__wrapped__.view_func)\n        self.assertEqual(target_func(None), \"Target Function\")\n\n    def test_make_middleware_decorator(self):\n        class MyMiddleware:\n            def __init__(self, view_func, *args, **kwargs):\n                self.view_func = view_func\n                self.args = args\n                self.kwargs = kwargs\n\n        decorator = make_middleware_decorator(MyMiddleware)\n        wrapped_func = decorator()(lambda x: x)\n\n        self.assertIsNotNone(wrapped_func.__wrapped__.view_func)\n        self.assertEqual(wrapped_func(1), 1)\n\n        # Test with arguments\n        wrapped_func = decorator()(lambda x, y: x + y, 1, 2)\n\n        self.assertEqual(wrapped_func(3), 6)  \n\n\n\n\n"], "sample_120": ["\nfrom sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\nfrom sympy.matrices import MutableSparseMatrix, MutableDenseMatrix\nfrom sympy.matrices import SparseMatrix\nfrom sympy import sympify\n\ndef test_SparseMatrix():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0)))\n    assert A.rows == 3\n    assert A.cols == 3\n    assert A._smat == {(0, 0): 1, (0, 2): 1, (1, 1): 1, (2, 0): 1, (2, 1): 1}\n\ndef test_SparseMatrix_scalar_multiply():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0)))\n    B = A.scalar_multiply(2)\n    assert B._smat == {(0, 0): 2, (0, 2): 2, (1, 1): 2, (2, 0): 2, (2, 1): 2}\n\ndef test_SparseMatrix_zeros():\n    A = SparseMatrix.zeros(2, 3)\n    assert A._smat == {}\n\ndef test_SparseMatrix_identity():\n    A = SparseMatrix.eye(3)\n    assert A._smat == {(0, 0): 1, (1, 1): 1, (2, 2): 1}\n\ndef test_SparseMatrix_copy():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0)))\n    B = A.copy()\n    assert B._smat == A._smat\n\ndef test_SparseMatrix_astype():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0))).astype(int)\n    assert A._smat == {(0, 0): 1, (0, 2): 1, (1, 1): 1, (2, 0): 1, (2, 1): 1}\n\ndef test_SparseMatrix_to_dense():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0)))\n    B = A.to_dense()\n    assert B.tolist() == [[1, 0, 1], [0, 1, 0], [1, 1, 0]]\n\ndef test_SparseMatrix_row_del():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0)))\n    A.row_del(1)\n    assert A._smat == {(0, 0): 1, (0, 2): 1, (2, 0): 1, (2, 1): 1}\n\ndef test_SparseMatrix_col_del():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0)))\n    A.col_del(1)\n    assert A._smat == {(0, 0): 1, (0, 2): 1, (2, 0): 1, (2, 2): 1}\n\ndef test_SparseMatrix_row_join():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0)))\n    B = SparseMatrix(((0, 1, 0), (1, 0, 1)))\n    C = A.row_join(B)\n    assert C._smat == {(0, 0): 1, (0, 1): 0, (0, 2): 1, (1, 0): 0, (1, 1): 1, (1, 2): 0, (2, 0): 0, (2, 1): 1, (2, 2): 1}\n\ndef test_SparseMatrix_col_join():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0)))\n    B = SparseMatrix(((0, 1), (1, 0)))\n    C = A.col_join(B)\n    assert C._smat == {(0, 0): 1, (0, 1): 0, (0, 2): 1, (1, 0): 0, (1, 1): 1, (1, 2): 0, (2, 0): 0, (2, 1): 1, (2, 2): 1}\n\n\ndef test_SparseMatrix_row_swap():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0)))\n    A.row_swap(1, 2)\n    assert A._smat == {(0, 0): 1, (0, 2): 1, (2, 0): 1, (2, 1): 1}\n\ndef test_SparseMatrix_col_swap():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0)))\n    A.col_swap(1, 2)\n    assert A._smat == {(0, 0): 1, (0, 2): 1, (1, 0): 1, (1, 2): 0, (2, 0): 1, (2, 2): 0}\n\ndef test_SparseMatrix_row_op():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0)))\n    A.row_op(1, lambda v, j: v + 1)\n    assert A._smat == {(0, 0): 1, (0, 2): 1, (1, 1): 2, (2, 0): 1, (2, 1): 1}\n\ndef test_SparseMatrix_col_op():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0)))\n    A.col_op(1, lambda v, j: v * 2)\n    assert A._smat == {(0, 0): 1, (0, 2): 1, (1, 1): 2, (2, 0): 1, (2, 1): 2}\n\ndef test_SparseMatrix_zip_row_op():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0)))\n    A.zip_row_op(1, 0, lambda v, u: v + u)\n    assert A._smat == {(0, 0): 1, (0, 2): 1, (1, 1): 2, (2, 0): 1, (2, 1): 1}\n\ndef test_SparseMatrix_applyfunc():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0))\n    B = A.applyfunc(lambda x: x*2)\n    assert B._smat == {(0, 0): 2, (0, 2): 2, (1, 1): 2, (2, 0): 2, (2, 1): 2}\n\n\ndef test_SparseMatrix_getitem():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0))\n\n    assert A[0, 0] == 1\n    assert A[1, 1] == 1\n    assert A[2, 2] == 0\n\n\ndef test_SparseMatrix___setitem__():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0))\n\n    A[0, 0] = 2\n    assert A._smat == {(0, 0): 2, (0, 2): 1, (1, 1): 1, (2, 0): 1, (2, 1): 1}\n\n\n\ndef test_SparseMatrix_setitem():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0))\n    A[[0, 2]] = [2, 3]\n    assert A._smat == {(0, 0): 2, (0, 2): 3, (1, 1): 1, (2, 0): 1, (2, 1): 1}\n\n\n\ndef test_SparseMatrix_item():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0))\n    assert A[1, 1] == 1\n  \ndef test_SparseMatrix_setitem():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0))\n    A[1, 1] = 2\n    assert A._smat == {(0, 0): 1, (0, 2): 1, (1, 1): 2, (2, 0): 1, (2, 1): 1}\n\n\n\ndef test_SparseMatrix___setitem__():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0))\n    A[1, 1] = 2\n    assert A._smat == {(0, 0): 1, (0, 2): 1, (1, 1): 2, (2, 0): 1, (2, 2): 0}\n\ndef test_SparseMatrix_setitem_list():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0))\n    A[[0, 1]] = [2, 3]\n    assert A._smat == {(0, 0): 2, (1, 1): 3, (0, 2): 1, (2, 0): 1, (2, 1): 1}\n\n\n\ndef test_SparseMatrix_set_invalid_index():\n    A = SparseMatrix(((1, 0, 1), (0, 1, 0), (1, 1, 0))\n    with pytest.raises(IndexError):\n        A[10, 1] = 1\n    \n\ndef test_SparseMatrix_set_duplicate_key\n\n\n"], "sample_25": ["\nimport unittest\nfrom django.db import connection\nfrom django.db.models import (\n    F, IntegerField, OuterRef, QuerySet, Value,\n    models, query, related,\n)\nfrom django.test import (\n    TestCase, skipIfDBFeature, skipUnlessDBFeature,\n)\n\n\nclass QuerySetTests(TestCase):\n    @classmethod\n    def setUpClass(cls):\n        super().setUpClass()\n        cls.create_test_model()\n\n    @classmethod\n    def tearDownClass(cls):\n        super().tearDownClass()\n        connection.close()\n\n    @classmethod\n    def create_test_model(cls):\n        from django.db import models\n\n        class TestModel(models.Model):\n            name = models.CharField(max_length=50)\n            num = models.IntegerField()\n\n        TestModel.objects.create(name='test1', num=1)\n        TestModel.objects.create(name='test2', num=2)\n\n    def test_count(self):\n        qs = TestModel.objects.all()\n        self.assertEqual(qs.count(), 2)\n\n    def test_get(self):\n        qs = TestModel.objects.all()\n        obj = qs.get(name='test1')\n        self.assertEqual(obj.name, 'test1')\n\n\nclass PrefetchTests(TestCase):\n    def test_prefetch_related(self):\n        pass\n\n    def test_prefetch_related_with_complex_lookups(self):\n        pass\n\n\n\n"], "sample_103": ["\nimport unittest\nfrom sklearn.metrics.scorer import get_scorer\nfrom sklearn.linear_model.logistic import ( LogisticRegression, logistic_regression_path, _logistic_regression_path, LogisticRegressionCV, _logistic_loss_and_grad, _logistic_grad_hess, _multinomial_grad_hess, _logistic_loss, _log_reg_scoring_path)\nfrom sklearn.datasets import load_iris\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.utils import check_X_y\nfrom numpy import zeros, ones, array, arange, random\nfrom sklearn.utils.testing import assert_almost_equal\nfrom sklearn.metrics import accuracy_score\n\nclass TestLogisticRegressionCV(unittest.TestCase):\n    def test_logistic_regression_cv_basic(self):\n        X, y = load_iris(return_X_y=True)\n        X = X[:100]\n        y = y[:100]\n\n        clf = LogisticRegressionCV(Cs=10, cv=5, random_state=0).fit(X, y)\n\n        y_pred = clf.predict(X)\n        self.assertTrue(accuracy_score(y, y_pred) > 0.9)\n\n    def test_logistic_regression_cv_multi_class(self):\n        X, y = load_iris(return_X_y=True)\n        X = X[:100]\n        y = y[:100]\n\n        clf = LogisticRegressionCV(Cs=10, cv=5,\n                                   multi_class='multinomial',\n                                   random_state=0).fit(X, y)\n\n        y_pred = clf.predict(X)\n        self.assertTrue(accuracy_score(y, y_pred) > 0.9)\n\n    def test_logistic_regression_cv_penalty_l1(self):\n        X, y = load_iris(return_X_y=True)\n        X = X[:100]\n        y = y[:100]\n        clf = LogisticRegressionCV(Cs=10, cv=5, penalty='l1',\n                                   random_state=0).fit(X, y)\n\n        y_pred = clf.predict(X)\n        self.assertTrue(accuracy_score(y, y_pred) > 0.9)\n\n    def test_logistic_regression_cv_penalty_both(self):\n        X, y = load_iris(return_X_y=True)\n        X = X[:100]\n        y = y[:100]\n\n        clf = LogisticRegressionCV(Cs=10, cv=5, penalty='elasticnet',\n                                   random_state=0).fit(X, y)\n\n        y_pred = clf.predict(X)\n        self.assertTrue(accuracy_score(y, y_pred) > 0.9)\n\n    def test_logistic_regression_cv_l1_ratio(self):\n        X, y = load_iris(return_X_y=True)\n        X = X[:100]\n        y = y[:100]\n\n        clf = LogisticRegressionCV(Cs=10, cv=5, penalty='elasticnet',\n                                   l1_ratios=[0.1, 0.5, 0.9],\n                                   random_state=0).fit(X, y)\n\n        y_pred = clf.predict(X)\n        self.assertTrue(accuracy_score(y, y_pred) > 0.9)\n\n    def test_logistic_regression_cv_refit(self):\n        X, y = load_iris(return_X_y=True)\n        X = X[:100]\n        y = y[:100]\n\n        clf = LogisticRegressionCV(Cs=10, cv=5, refit=False,\n                                   random_state=0).fit(X, y)\n        self.assertTrue(clf.coef_ is None)\n        self.assertTrue(clf.intercept_ is None)\n\n\n    # Test cases for _log_reg_scoring_path\n    def test_log_reg_scoring_path_single_class(self):\n        X = random.rand(100, 10)\n        y = random.rand(100,) < 0.5\n        Cs = 10\n        solver = 'lbfgs'\n        penalty = 'l2'\n        dual = False\n        tol = 1e-4\n        max_iter = 100\n        fit_intercept = True\n        class_weight = None\n        multi_class = 'ovr'\n        intercept_scaling = 1\n        random_state = 0\n        l1_ratio = None\n        sample_weight = None\n\n        _log_reg_scoring_path(X, y, train, test, pos_class=None, Cs=Cs,\n                                  fit_intercept=fit_intercept, penalty=penalty,\n                                  dual=dual, solver=solver, tol=tol,\n                                  max_iter=max_iter, verbose=0,\n                                  class_weight=class_weight, multi_class=multi_class,\n                                  intercept_scaling=intercept_scaling,\n                                  random_state=random_state, sample_weight=sample_weight,\n                                  l1_ratio=l1_ratio)\n\n#  \n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_98": ["\nimport unittest\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import label_binarize\nfrom sklearn.preprocessing import _inverse_binarize_thresholding\nfrom sklearn.preprocessing import _inverse_binarize_multiclass\nfrom typing import List, Tuple\n\nclass TestLabelBinarizer(unittest.TestCase):\n\n    def test_fit_transform_multiclass(self):\n        lb = LabelBinarizer()\n        y = [1, 2, 6, 4]\n        y_bin = lb.fit_transform(y)\n        self.assertEqual(y_bin.shape, (4, 4))\n        self.assertTrue((y_bin[:, 0] == [1, 0, 0, 0]).all())\n        self.assertTrue((y_bin[:, 1] == [0, 1, 0, 0]).all())\n        self.assertTrue((y_bin[:, 2] == [0, 0, 1, 0]).all())\n        self.assertTrue((y_bin[:, 3] == [0, 0, 0, 1]).all())\n\n    def test_fit_transform_binary(self):\n        lb = LabelBinarizer()\n        y = [1, 0]\n        y_bin = lb.fit_transform(y)\n        self.assertEqual(y_bin.shape, (2, 2))\n        self.assertTrue((y_bin[:, 0] == [1, 0]).all())\n        self.assertTrue((y_bin[:, 1] == [0, 1]).all())\n\n    def test_fit_transform_multilabel(self):\n        lb = LabelBinarizer()\n        y = [['A'], ['A', 'B'], ['B', 'C']]\n        y_bin = lb.fit_transform(y)\n        self.assertEqual(y_bin.shape, (3, 3))\n        self.assertTrue((y_bin[:, 0] == [1, 1, 0]).all())\n        self.assertTrue((y_bin[:, 1] == [0, 1, 1]).all())\n        self.assertTrue((y_bin[:, 2] == [0, 0, 1]).all())\n\n    def test_transform_binary(self):\n        lb = LabelBinarizer()\n        lb.fit([1, 2, 6, 4])\n        y = [1, 2, 6, 4]\n        y_bin = lb.transform(y)\n        self.assertEqual(y_bin.shape, (4, 4))\n        self.assertTrue((y_bin[:, 0] == [1, 0, 0, 0]).all())\n        self.assertTrue((y_bin[:, 1] == [0, 1, 0, 0]).all())\n        self.assertTrue((y_bin[:, 2] == [0, 0, 1, 0]).all())\n        self.assertTrue((y_bin[:, 3] == [0, 0, 0, 1]).all())\n\n    def test_transform_multiclass(self):\n        lb = LabelBinarizer()\n        lb.fit([1, 2, 6, 4])\n        y = [1, 2, 6, 4]\n        y_bin = lb.transform(y)\n        self.assertEqual(y_bin.shape, (4, 4))\n        self.assertTrue((y_bin[:, 0] == [1, 0, 0, 0]).all())\n        self.assertTrue((y_bin[:, 1] == [0, 1, 0, 0]).all())\n        self.assertTrue((y_bin[:, 2] == [0, 0, 1, 0]).all())\n        self.assertTrue((y_bin[:, 3] == [0, 0, 0, 1]).all())\n\n\nclass TestLabelEncoder(unittest.TestCase):\n    def test_fit_transform(self):\n        le = LabelEncoder()\n        y = ['A', 'B', 'A', 'C', 'B']\n        y_encoded = le.fit_transform(y)\n        self.assertEqual(y_encoded.shape, (5,))\n        self.assertEqual(le.classes_, ['A', 'B', 'C'])\n        self.assertTrue((y_encoded == [0, 1, 0, 2, 1]).all())\n\n    def test_inverse_transform(self):\n        le = LabelEncoder()\n        le.fit(['A', 'B', 'C'])\n        y_encoded = le.transform(['A', 'B', 'C'])\n        y_decoded = le.inverse_transform(y_encoded)\n        self.assertEqual(y_decoded, ['A', 'B', 'C'])\n\n\n\nclass TestMultiLabelBinarizer(unittest.TestCase):\n    def test_fit_transform(self):\n        mlb = MultiLabelBinarizer()\n        y = [(1, 2), (3,), (1, 2, 3)]\n        mlb_labels = mlb.fit_transform(y)\n        self.assertEqual(mlb_labels.shape, (3, 3))\n        self.assertTrue((mlb_labels[:1] == [1, 1, 0]).all())\n        self.assertTrue((mlb_labels[1] == [0, 0, 1]).all())\n        self.assertTrue((mlb_labels[2] == [1, 1, 1]).all())\n\n    def test_transform(self):\n        mlb = MultiLabelBinarizer()\n        mlb.fit([\n            (1, 2),\n            (3,),\n            (1, 2, 3)\n        ])\n        y = [(1, 2), (3,), (1, 2, 3)]\n        mlb_labels = mlb.transform(y)\n        self.assertEqual(mlb_labels.shape, (3, 3))\n        self.assertTrue((mlb_labels[:1] == [1, 1, 0]).all())\n        self.assertTrue((mlb_labels[1] == [0, 0, 1]).all())\n        self.assertTrue((mlb_labels[2] == [1, 1, 1]).all())\n\n    def test_inverse_transform(self):\n        mlb = MultiLabelBinarizer()\n        mlb.classes_ = ['A', 'B', 'C']\n        mlb_labels = mlb.transform([[1, 1, 0], [0, 0, 1], [1, 1, 1]])\n        decoded_labels = mlb.inverse_transform(mlb_labels)\n        self.assertEqual(decoded_labels, [\n            ['A', 'B'], ['C'], ['A', 'B', 'C']\n        ])\n\n\n\nif __name__ == '__main__':\n    unittest.main()\n"], "sample_127": ["\nfrom sympy.printing.latex import latex, translate, greek_letters_set, tex_greek_dictionary\nfrom sympy.printing.latex import LatexPrinter\nfrom sympy.printing.latex import LatexPrinter\nfrom sympy.printing.latex import other_symbols\nfrom sympy import *\nfrom sympy.abc import *\n\ndef test_latex():\n    assert latex(2*x) == '2 x'\n    assert latex(x**2) == 'x^{2}'\n    assert latex(sin(x)) == '\\\\sin{x}'\n    assert latex(cos(x)) == '\\\\cos{x}'\n    assert latex(tan(x)) == '\\\\tan{x}'\n    assert latex(exp(x)) == '\\\\exp{x}'\n    assert latex(log(x)) == '\\\\log{x}'\n    assert latex(sqrt(x)) == '\\\\sqrt{x}'\n    assert latex(Rational(3, 2)) == '\\\\frac{3}{2}'\n    assert latex(pi) == '\\\\pi'\n\ndef test_latex_mode():\n    assert latex(2*x, mode='inline') == '$2 x$'\n    assert latex(2*x, mode='equation') == '\\\\begin{equation}2 x \\\\end{equation}'\n    assert latex(2*x, mode='equation*', itex=True) == '$$2 x$$'\n    assert latex(2*x, mode='plain') == '2 x'\n\ndef test_latex_ordering():\n    assert latex(2*x + 3*y, order='None') == '2 x + 3 y'\n\ndef test_latex_fold_frac_powers():\n    assert latex(2**Rational(7, 2), fold_frac_powers=True) == '2^{7/2}'\n    assert latex(2**Rational(7, 2), fold_frac_powers=False) == '2^{\\\\frac{7}{2}}'\n\ndef test_latex_fold_func_brackets():\n    expr = (2*x)**sin(Rational(7, 2))\n    assert latex(expr) == '\\\\left(2 x\\right)^{\\sin{\\left (\\\\frac{7}{2} \\right )}}'\n    assert latex(expr, fold_func_brackets=True) == '\\\\left(2 x\\right)^{\\sin {\\frac{7}{2}}}'\n\ndef test_latex_fold_short_frac():\n    assert latex(3*x**2/y) == '\\\\frac{3 x^{2}}{y}'\n    assert latex(3*x**2/y, fold_short_frac=True) == '3 x^{2} / y'\n\ndef test_latex_long_frac_ratio():\n    assert latex(Integral(r, r)/2/pi) == '\\\\frac{\\\\int r\\, dr}{2 \\pi}'\n    assert latex(Integral(r, r)/2/pi, long_frac_ratio=0) == '\\\\frac{1}{2 \\pi} \\\\int r\\, dr'\n\ndef test_latex_mul_symbol():\n    assert latex((2*tau)**sin(Rational(7, 2)), mul_symbol=\"times\") == '\\\\left(2 \\\\times \\tau\\right)^{\\sin{\\left (\\\\frac{7}{2} \\right )}}'\n\ndef test_latex_inv_trig_style():\n    assert latex(asin(Rational(7, 2))) == '\\\\operatorname{asin}{\\left (\\\\frac{7}{2} \\right )}'\n    assert latex(asin(Rational(7, 2)), inv_trig_style=\"full\") == '\\\\arcsin{\\left (\\\\frac{7}{2} \\right )}'\n\ndef test_latex_mat_str():\n    assert latex(Matrix(2, 1, [x, y])) == '\\\\left[\\begin{matrix}x\\\\y\\end{matrix}\\right]'\n    assert latex(Matrix(2, 1, [x, y]), mat_str=\"array\") == '\\\\left[\\begin{array}{c}x\\\\y\\end{array}\\right]'\n    assert latex(Matrix(3, 3, [x, y, z, 1, 2, 3, 4, 5, 6]), mat_str=\"array\") == '\\\\left[\\begin{array}{ccc}x & y & z\\\\1 & 2 & 3\\\\4 & 5 & 6\\end{array}\\right]'\n\ndef test_latex_mat_delim():\n    assert latex(Matrix(2, 1, [x, y]), mat_delim=\"(\") == '\\\\left(\\\\begin{matrix}x\\\\y\\end{matrix}\\\\right)'\n\n\n\n"], "sample_123": ["\nfrom sympy.printing.latex import (latex, translate, greek_letters_set, tex_greek_dictionary)\nfrom sympy.printing.latex import LatexPrinter\nfrom sympy.printing.latex import LatexPrinter\nfrom sympy.printing.latex import other_symbols\nfrom sympy import pi, sin, asin, Integral, Matrix, Rational, log, Symbol, add, Mul, Pow\nfrom sympy.abc import x, y, mu, r, tau\n\ndef test_latex():\n    assert latex((2*tau)**Rational(7,2)) == '8 \\\\sqrt{2} \\\\tau^{\\\\frac{7}{2}}'\n    assert latex((2*mu)**Rational(7,2), mode='plain') == '8 \\\\sqrt{2} \\\\mu^{\\\\frac{7}{2}}'\n    assert latex((2*tau)**Rational(7,2), mode='inline') == '$8 \\sqrt{2} \\tau^{7 / 2}$'\n    assert latex((2*mu)**Rational(7,2), mode='equation*') == '\\\\begin{equation*}8 \\sqrt{2} \\\\mu^{\\\\frac{7}{2}}\\end{equation*}'\n    assert latex((2*mu)**Rational(7,2), mode='equation') == '\\\\begin{equation}8 \\sqrt{2} \\\\mu^{\\\\frac{7}{2}}\\end{equation}'\n    assert latex((2*mu)**Rational(7,2), mode='equation', itex=True) == '$$8 \\sqrt{2} \\mu^{\\\\frac{7}{2}}$$'\n    assert latex((2*tau)**Rational(7,2), fold_frac_powers=True) == '8 \\\\sqrt{2} \\\\tau^{7/2}'\n    assert latex((2*tau)**sin(Rational(7,2))) == '\\\\left(2 \\tau\\right)^{\\sin{\\left (\\\\frac{7}{2} \\right )}}'\n    assert latex((2*tau)**sin(Rational(7,2)), fold_func_brackets = True) == '\\\\left(2 \\tau\\right)^{\\sin \\\\frac{7}{2}}'\n\n    assert latex(3*x**2/y) == '\\\\frac{3 x^{2}}{y}'\n    assert latex(3*x**2/y, fold_short_frac=True) == '3 x^{2} / y'\n    assert latex(Integral(r, r)/2/pi, long_frac_ratio=2) == '\\\\frac{\\\\int r\\, dr}{2 \\pi}'\n    assert latex(Integral(r, r)/2/pi, long_frac_ratio=0) == '\\\\frac{1}{2 \\pi} \\\\int r\\, dr'\n    assert latex((2*tau)**sin(Rational(7,2)), mul_symbol=\"times\") == '\\\\left(2 \\\\times \\tau\\right)^{\\sin{\\left (\\\\frac{7}{2} \\right )}}'\n    assert latex(asin(Rational(7,2))) == '\\\\operatorname{asin}{\\left (\\\\frac{7}{2} \\right )}'\n    assert latex(asin(Rational(7,2)), inv_trig_style=\"full\") == '\\\\arcsin{\\left (\\\\frac{7}{2} \\right )}'\n    assert latex(asin(Rational(7,2)), inv_trig_style=\"power\") == '\\\\sin^{-1}{\\left (\\\\frac{7}{2} \\right )}'\n    assert latex(Matrix(2, 1, [x, y])) == '\\\\left[\\begin{matrix}x\\\\y\\end{matrix}\\right]'\n    assert latex(Matrix(2, 1, [x, y]), mat_str = \"array\") == '\\\\left[\\begin{array}{c}x\\\\y\\end{array}\\right]'\n    assert latex(Matrix(2, 1, [x, y]), mat_delim=\"(\") == '\\\\left(\\\\begin{matrix}x\\\\y\\end{matrix}\\\\right)'\n    assert latex(x**2, symbol_names={x:'x_i'}) == 'x_i^{2}'\n    assert latex([2/x, y], mode='inline') == '$ \\left [ 2 / x, \\quad y\\right ]$'\n    assert latex(log(10)) == '\\\\log{\\left (10 \\right )}'\n    assert latex(log(10), ln_notation=True) == '\\\\ln{\\left (10 \\right )}'\n\n\n\ndef test_translate():\n    assert translate('alphahatdotprime') == '{\\\\dot{\\\\hat{\\\\alpha}}}\"'\n    assert translate('beta') == '\\\\beta'\n    assert translate('gamma') == '\\\\gamma'\n    assert translate('delta') == '\\\\delta'\n    assert translate('epsilon') == '\\\\epsilon'\n    assert translate('phi') == '\\\\phi'\n    assert translate('pi') == '\\\\pi'\n    assert translate('rho') == '\\\\rho'\n    assert translate('sigma') == '\\\\sigma'\n    assert translate('tau') == '\\\\tau'\n    assert translate('upsilon') == '\\\\upsilon'\n    assert translate('omega') == '\\\\omega'\n    assert translate('alpha') == '\\\\alpha'\n    assert translate('betahat') == '\\\\hat{\\\\beta}'\n\n"], "sample_131": ["\nfrom sympy.core.basic import (Basic, Atom, preorder_traversal, as_Basic, _atomic, _aresame)\nfrom sympy.core.function import Function, Lambda\nfrom sympy.core.compatibility import default_sort_key\nfrom sympy.functions.elementary.exponential import exp\nfrom sympy.core.symbol import Symbol\nfrom sympy.abc import x, y\n\n\ndef test_Basic_class_key():\n    assert Basic._constructor_postprocessor_mapping[Basic] == []\n    class MyInt(Basic):\n        _constructor_postprocessor_mapping = {'special': [lambda x: x]}\n\n    assert MyInt._constructor_postprocessor_mapping['special'] == [lambda x: x]\n\n\ndef test_Atom_is_Atom():\n    assert Atom.is_Atom  \n\ndef test_Atom_matches():\n    a = Symbol('a')\n    assert a.matches(a, {}) == {}\n    assert a.matches(b, {}) == None\n\ndef test_Atom_xreplace():\n    a = Symbol('a')\n    assert a.xreplace({a: b}) == b\n\ndef test_preorder_traversal():\n    x, y, z = symbols('x y z')\n    assert list(preorder_traversal(x + y * z)) == [x + y*z, x, y*z, y, z]\n    assert list(preorder_traversal((x + y)*z)) == [z*(x + y), z, x + y, x, y]\n    assert list(preorder_traversal((x + y)*z, keys=True)) == [z*(x + y), z, x + y, x, y]\n    \n\ndef test_aresame():\n    assert _aresame(1, 1.0)\n    assert _aresame(1.0, 1)\n    assert not _aresame(1, 2)\n    assert not _aresame(1.0, 2.0)\n    assert _aresame(x, x)\n    assert not _aresame(x, y)\n\ndef test__atomic():\n    f = Function('f')\n    x, y, z = symbols('x y z')\n    assert _atomic(x + y) == {x, y}\n    assert _atomic(x + f(y)) == {x, f(y)}\n    assert _atomic(Derivative(f(x), x) + cos(x) + y) == {y, cos(x), Derivative(f(x), x)}\n\n"], "sample_91": ["\nimport unittest\nfrom contextlib import redirect_stdout\nfrom io import StringIO\nfrom pylint.reporters.text import (\n    ColorizedTextReporter,\n    ParseableTextReporter,\n    TextReporter,\n    VSTextReporter,\n)\nfrom pylint.message import Message\n\n\nclass MockLinter:\n    def __init__(self):\n        self.messages: list[Message] = []\n        self.config = object()  # Required for TextReporter\n\n    def register_reporter(self, reporter: type) -> None:\n        pass\n\n    def add_message(self, msg: Message) -> None:\n        self.messages.append(msg)\n\n    def run(self) -> None:\n        pass\n\n\nclass TestTextReporter(unittest.TestCase):\n    def test_text_reporter_basic(self) -> None:\n        reporter = TextReporter(output=StringIO())\n        linter = MockLinter()\n\n        msg = Message(\n            \"test_module\",\n            \"test_file\",\n            1,\n            2,\n            \"C001\",\n            \"msg\",\n            \"symbol\",\n            {  # type: ignore[assignment]\n                \"category\": \"W\",\n                \"obj\": \"obj\",\n            },\n            \"some_path\",\n        )\n        linter.add_message(msg)\n        reporter.handle_message(msg)\n\n        output = reporter.output.getvalue()\n        expected_output = \"some_path:1:2: C001: msg (symbol) W obj\"\n        self.assertEqual(output, expected_output)\n\n    def test_text_reporter_template(self) -> None:\n        reporter = TextReporter(output=StringIO())\n        linter = MockLinter()\n        linter.config.msg_template = \"{path}:{line} - {msg_id}: {msg}\"\n\n        msg = Message(\n            \"test_module\",\n            \"test_file\",\n            1,\n            2,\n            \"C001\",\n            \"msg\",\n            \"symbol\",\n            {  # type: ignore[assignment]\n                \"category\": \"W\",\n                \"obj\": \"obj\",\n            },\n            \"some_path\",\n        )\n        linter.add_message(msg)\n        reporter.handle_message(msg)\n\n        output = reporter.output.getvalue()\n        expected_output = \"some_path:1 - C001: msg\"\n        self.assertEqual(output, expected_output)\n\n    def test_parseable_text_reporter(self) -> None:\n        reporter = ParseableTextReporter(output=StringIO())\n        linter = MockLinter()\n\n        msg = Message(\n            \"test_module\",\n            \"test_file\",\n            1,\n            2,\n            \"C001\",\n            \"msg\",\n            \"symbol\",\n            {  # type: ignore[assignment]\n                \"category\": \"W\",\n                \"obj\": \"obj\",\n            },\n            \"some_path\",\n        )\n        linter.add_message(msg)\n        reporter.handle_message(msg)\n\n        output = reporter.output.getvalue()\n        expected_output = (\n            \"some_path(1): [C001(symbol), obj] msg\"\n        )\n        self.assertEqual(output, expected_output)\n\n    def test_vs_text_reporter(self) -> None:\n        reporter = VSTextReporter(output=StringIO())\n        linter = MockLinter()\n\n        msg = Message(\n            \"test_module\",\n            \"test_file\",\n            1,\n            2,\n            \"C001\",\n            \"msg\",\n            \"symbol\",\n            {  # type: ignore[assignment]\n                \"category\": \"W\",\n                \"obj\": \"obj\",\n            },\n            \"some_path\",\n        )\n        linter.add_message(msg)\n        reporter.handle_message(msg)\n\n        output = reporter.output.getvalue()\n        expected_output = f\"some_path(1): [C001(symbol){'obj'}] msg\"\n        self.assertEqual(output, expected_output)\n\n    def test_colorized_text_reporter(self) -> None:\n        reporter = ColorizedTextReporter(output=StringIO())\n        linter = MockLinter()\n\n        msg = Message(\n            \"test_module\",\n            \"test_file\",\n            1,\n            2,\n            \"C001\",\n            \"msg\",\n            \"symbol\",\n            {  # type: ignore[assignment]\n                \"category\": \"W\",\n                \"obj\": \"obj\",\n            },\n            \"some_path\",\n        )\n        linter.add_message(msg)\n        reporter.handle_message(msg)\n\n        output = reporter.output.getvalue()\n        expected_output = (\n            f\"\\033[32m************* Module test_module\\033[0m\\n\"\n            f\"\\033[33m some_path(1): [C001\\033[0m(symbol)] msg\"\n        )\n        self.assertEqual(output, expected_output)\n\n"], "sample_71": ["\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colorbar import Colorbar, make_axes, make_axes_gridspec\n\ndef test_colorbar_init():\n    fig, ax = plt.subplots()\n    cm = plt.cm.get_cmap('jet')\n    norm = plt.Normalize(0, 1)\n\n    cb1 = Colorbar(ax, cmap=cm, norm=norm)\n    assert isinstance(cb1, Colorbar)\n\n    with plt.testing.assert_no_warnings():\n        cb2 = Colorbar(ax, cmap='jet', norm=norm)\n    assert isinstance(cb2, Colorbar)\n\n    with plt.testing.assert_no_warnings():\n        cb3 = Colorbar(ax, orientation='vertical', cmap=cm, norm=norm)\n    assert isinstance(cb3, Colorbar)\n\ndef test_colorbar_basic_args():\n    fig, ax = plt.subplots()\n    cm = plt.cm.get_cmap('jet')\n    norm = plt.Normalize(0, 1)\n\n    cb = Colorbar(ax, cmap=cm, norm=norm, label='My Colorbar')\n    assert cb.ax.get_ylabel() == 'My Colorbar'\n\n    cb = Colorbar(ax, cmap=cm, norm=norm, extend='both')\n    assert cb._extend == 'both'\n\n    cb = Colorbar(ax, cmap=cm, norm=norm, fraction=0.2)\n    assert cb._fraction == 0.2\n    \ndef test_colorbar_ticks_and_labels():\n    fig, ax = plt.subplots()\n    cm = plt.cm.get_cmap('jet')\n    norm = plt.Normalize(0, 1)\n\n    # Test default ticks and labels\n    cb = Colorbar(ax, cmap=cm, norm=norm)\n    assert len(cb.ax.get_yticks()) > 0\n    assert len(cb.ax.get_yticklabels()) > 0\n\n    # Test custom ticks and labels\n    cb = Colorbar(ax, cmap=cm, norm=norm,\n                  ticks=[0.1, 0.2, 0.3, 0.4],\n                  ticklabels=['a', 'b', 'c', 'd'])\n    ticks = cb.ax.get_yticks()\n    labels = cb.ax.get_yticklabels()\n    assert np.array_equal(ticks, [0.1, 0.2, 0.3, 0.4])\n    assert np.array_equal(labels, ['a', 'b', 'c', 'd'])\n\ndef test_colorbar_make_axes():\n    fig, axs = plt.subplots(2, 2)\n\n    # Test default behavior\n    cb_ax, kwargs = make_axes(axs[0], location='right')\n    assert cb_ax.get_position().x0 > 1\n\n    # Test location and orientation arguments\n    cb_ax, kwargs = make_axes(axs[0], location='top', orientation='vertical')\n    assert cb_ax.get_position().y0 > 1\n\n    # Test shrink and fraction arguments\n    cb_ax, kwargs = make_axes(axs[0], shrink=0.5, fraction=0.1)\n\ndef test_colorbar_make_axes_gridspec():\n    fig, axs = plt.subplots(2, 2)\n    \n    # Test default behavior\n    cb_ax, kwargs = make_axes_gridspec(axs[0], location='right')\n    assert cb_ax.get_position().x0 > 1\n\n    # Test location and orientation arguments\n    cb_ax, kwargs = make_axes_gridspec(axs[0], location='top', orientation='vertical')\n    assert cb_ax.get_position().y0 > 1\n\n    # Test shrink and fraction arguments\n    cb_ax, kwargs = make_axes_gridspec(axs[0], shrink=0.5, fraction=0.1)\n\n"], "sample_76": ["\nimport unittest\nfrom unittest.mock import MagicMock\n\nfrom seaborn._stats.regression import PolyFit\n\n\nclass TestPolyFit(unittest.TestCase):\n\n    def test_fit_predict_with_unique_data(self):\n        data = pd.DataFrame({\"x\": [1, 2, 3, 4], \"y\": [2, 4, 6, 8]})\n        polyfit = PolyFit()\n        result = polyfit._fit_predict(data)\n        self.assertEqual(len(result[\"x\"]), 100)  \n        self.assertEqual(len(result[\"y\"]), 100)\n\n    def test_fit_predict_with_few_unique_data(self):\n        data = pd.DataFrame({\"x\": [1, 1, 2, 2], \"y\": [2, 3, 4, 5]})\n        polyfit = PolyFit()\n        result = polyfit._fit_predict(data)\n        self.assertEqual(len(result[\"x\"]), 0)\n        self.assertEqual(len(result[\"y\"]), 0)\n\n    def test_call(self):\n        data = pd.DataFrame({\"x\": [1, 2, 3, 4], \"y\": [2, 4, 6, 8]})\n        groupby = MagicMock()  \n        groupby.apply.return_value = data\n        polyfit = PolyFit()\n        result = polyfit(data, groupby, \"orient\", \"scales\")\n        groupby.apply.assert_called_once_with(lambda x: x.dropna(subset=[\"x\", \"y\"]), polyfit._fit_predict)\n\n\n\n"], "sample_154": ["\nfrom sympy.solvers.polysys import (solve_poly_system, solve_triangulated, solve_biquadratic, SolveFailed)\nfrom sympy import symbols, S\nfrom sympy.abc import x, y, z\nfrom sympy.polys import Poly\n\n\ndef test_solve_poly_system():\n    assert solve_poly_system([x*y - 2*y, 2*y**2 - x**2], x, y) == [(0, 0), (2, -S(2**0.5)), (2, S(2**0.5))]\n\n    try:\n        solve_poly_system([x**2 + y**2, x + y], x, y)\n    except SolveFailed:\n        pass\n\ndef test_solve_biquadratic():\n\n    assert solve_biquadratic(Poly(y**2 - 4 + x, y, x), Poly(y*2 + 3*x - 7, y, x), Options((x,y), {'domain': 'ZZ'})) == [(1/3, 3), (41/27, 11/9)]\n\n    assert solve_biquadratic(Poly(y + x**2 - 3, y, x), Poly(-y + x - 4, y, x), Options((x,y), {'domain': 'ZZ'})) == [(7/2 - S(29)**0.5 / 2, -S(29)**0.5 / 2 - 1/2), (S(29)**0.5 / 2 + 7/2, -1/2 + S(29)**0.5 / 2)]\n    \n\n\ndef test_solve_generic():\n    assert solve_generic([Poly(x - y + 5, x, y), Poly(x + y - 3, x, y)], Options((x,y), {'domain': 'ZZ'})) == [(-1, 4)]\n\n\n    assert solve_generic([Poly(x - 2*y + 5, x, y), Poly(2*x - y - 3, x, y)], Options((x,y), {'domain': 'ZZ'})) == [(11/3, 13/3)]\n    assert solve_generic([Poly(x**2 + y, x, y), Poly(x + y*4, x, y)], Options((x,y), {'domain': 'ZZ'})) == [(0, 0), (1/4, -1/16)]\n\ndef test_solve_triangulated():\n    F = [x**2 + y + z - 1, x + y**2 + z - 1, x + y + z**2 - 1]\n    assert solve_triangulated(F, x, y, z) == [(0, 0, 1), (0, 1, 0), (1, 0, 0)]\n"], "sample_19": ["\nimport unittest\nfrom django.core.exceptions import FieldDoesNotExist\nfrom django.db import connection, models\nfrom django.db.models.fields import RelatedField, ManyToManyField\nfrom django.test import TestCase, override_settings\nfrom django.apps import apps\nfrom django.core.management.sql import get_default_db_backend\nfrom django.utils.functional import lazy\n\nfrom ..fields import ManyToManyDescriptor, \\\n    create_many_to_many_intermediary_model,  ManyToManyField\n\nclass MockModel(models.Model):\n    pk = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=100)\n\nclass MockManyToManyField(ManyToManyField):\n    pass\n\n\nclass TestManyToManyField(TestCase):\n\n    def setUp(self):\n        self.app_label = \"my_app\"\n        apps.apps.registered[self.app_label] = mock_app\n\n    def tearDown(self):\n        del apps.apps.registered[self.app_label]\n\n    def test_resolve_relation(self):\n        class MyModel(MockModel):\n            my_m2m = MockManyToManyField(related_model=MockModel,  related_name='my_m2m_rel')\n        self.assertIsInstance(MyModel._meta.get_field('my_m2m').remote_field, ManyToManyField)\n        \n    def test_create_many_to_many_intermediary_model(self):\n        m2m_field = MockManyToManyField(\n            to=MockModel,\n            through=None,\n            db_constraint=False,\n            related_name='related_models'\n        )\n        self.assertEqual(\n            create_many_to_many_intermediary_model(m2m_field, MockModel).name,\n            'my_app_mockmodel_my_m2m'\n        )\n         \n\n    def test_check(self):\n        field = ManyToManyField(to=MockModel)\n        field.contribute_to_class(MockModel, 'my_m2m')\n\n    def test_m2m_reverse_attr(self):\n        m2m_field = ManyToManyField(to=MockModel)\n        m2m_field.m2m_reverse_attr = partial(m2m_field._get_m2m_attr, MockModel, attr='name')\n        self.assertEqual(m2m_field.m2m_reverse_attr(MockModel), 'my_m2m')\n\n    def test_m2m_field_name(self):\n        m2m_field = ManyToManyField(to=MockModel)\n        m2m_field.m2m_field_name = partial(m2m_field._get_m2m_attr, MockModel, attr='name')\n        self.assertEqual(m2m_field.m2m_field_name(MockModel), 'my_m2m')\n\n\n\n\n"], "sample_3": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.utils.autoreload import (\n    StatReloader,\n    WatchmanReloader,\n    get_reloader,\n    restart_with_reloader,\n    iter_all_python_module_files,\n    file_changed,\n    autoreload_started,\n)\nfrom django import apps\nfrom pathlib import Path\n\n# These are set up for testing purposes\nos.environ[DJANGO_AUTORELOAD_ENV] = 'true'\n\n\nclass TestAutoreload(unittest.TestCase):\n\n    def _get_reloader(self):\n        return get_reloader()\n\n    def test_get_reloader_watchman_available(self):\n        with patch('django.utils.autoreload.pywatchman', MagicMock()):\n            self.assertIsInstance(self._get_reloader(), WatchmanReloader)\n\n    def test_get_reloader_watchman_unavailable(self):\n        with patch(\n            'django.utils.autoreload.pywatchman',\n            MagicMock(side_effect=WatchmanUnavailable('Test Error')),\n        ):\n            self.assertIsInstance(self._get_reloader(), StatReloader)\n\n    def test_iter_all_python_module_files(self):\n        # This test requires some setup for accurate results, as it relies on\n        # the current state of sys.modules. It's good practice to clear\n        # sys.modules before and after tests that modify global state.\n\n        # Cleanup\n        del sys.modules[:]\n        \n        # Test\n        files = list(iter_all_python_module_files())\n        # Verify if the expected files are present in the result (may vary)\n        self.assertIn('django.core.__init__', files)\n\n\n    def test_restart_with_reloader(self):\n        with patch('subprocess.call', MagicMock(return_value=0)):\n            self.assertEqual(restart_with_reloader(), 0)\n\n    def test_raise_last_exception(self):\n        raise_last_exception()\n        self.assertEqual(_exception, (TypeError(\"test error\"),))\n\n    def test_check_errors(self):\n        def my_function():\n            1 / 0\n\n        @autoreload.check_errors\n        def wrapper():\n            my_function()\n\n        with self.assertRaises(ZeroDivisionError):\n            wrapper()\n\n    def test_file_changed(self):\n        file_changed.send(sender=None, file_path=Path(__file__).resolve())\n        # Verify that the file_changed signal was sent.\n\n\n\n    def test_autoreload_started(self):\n        autoreload_started.send(sender=None)\n        self.assertTrue(True)  # Trigger the signal and check that it was indeed triggered\n\n\n\n"], "sample_134": ["\nfrom sympy.geometry import Point, Point2D, Line, Circle, Polygon, Segment, convex_hull, intersection, centroid\nfrom sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\nfrom sympy.utilities.pytest import raises\nfrom sympy.utilities.iterables import subsets\nfrom sympy import symbols, Eq, sympify\n\n\ndef test_idiff():\n    x, y = symbols('x y')\n    assert idiff(x + y, y, x) == -1\n    assert idiff(x + y, [y, x], x) == -1\n    assert idiff(x**2 + y**2 - 4, y, x) == -x/y\n    assert idiff(x**2 + y**2 - 4, y, x, 2).simplify() == -(x**2 + y**2)/y**3\n\n\ndef test_find():\n    from sympy.geometry.entity import GeometryEntity\n\n    class MyGeometryEntity(GeometryEntity):\n        pass\n\n    e = MyGeometryEntity()\n    with raises(ValueError):\n        find(e, 'x')\n    with raises(ValueError):\n        find(e, 'y')\n    x = find(e, 'z')\n    assert x is None\n\ndef test_are_coplanar():\n    from sympy.geometry.line import Line3D\n    from sympy.geometry.point import Point3D\n    from sympy.geometry.plane import Plane\n    p = Point3D(0, 0, 0)\n    q = Point3D(1, 0, 0)\n    plane = Plane(p, q, Point3D(0, 1, 0))\n    l1 = Line3D(p, q)\n    l2 = Line3D(q, Point3D(1, 1, 0))\n    assert are_coplanar(l1, l2, plane)\n\n    assert not are_coplanar(l1, l1, plane)\n    assert not are_coplanar(l1, l2, l1)\n\n\ndef test_are_similar():\n    from sympy.geometry import Point, Circle, Triangle\n    c1, c2 = Circle(Point(0, 0), 4), Circle(Point(1, 4), 3)\n    t1 = Triangle(Point(0, 0), Point(1, 0), Point(0, 1))\n    t2 = Triangle(Point(0, 0), Point(2, 0), Point(0, 2))\n    t3 = Triangle(Point(0, 0), Point(3, 0), Point(0, 1))\n    assert are_similar(t1, t2)\n    assert not are_similar(t1, t3)\n\n    res = [are_similar(c1, c2), are_similar(c2, c1)]\n    assert all(r is False for r in res)\n    assert are_similar(c1, c1) \n    \ndef test_centroid():\n    from sympy.geometry import Point, Segment, Polygon\n    p = Point(0, 0)\n    q = Point(2, 0)\n    r = Point(0, 3)\n    s = Point(2, 3)\n    t = Polygon([p, q, r, s])\n\n    assert centroid(p, q) == Point2D(1, 0)\n    assert centroid(p, q, r) == Point2D(1, 1)\n    assert centroid(p, r, s) == Point2D(1, 1.5)\n    assert centroid(t).simplify() == Point2D(1, 1.5)\n\n\n\ndef test_closest_points():\n    p1 = Point2D(1, 1)\n    p2 = Point2D(1, 2)\n    p3 = Point2D(2, 1)\n    p4 = Point2D(2, 2)\n    p5 = Point2D(3,3)\n\n    assert closest_points(p1, p2, p3, p4, p5) == {(p1, p2), (p3, p4)}\n    assert closest_points(p1, p2, p3) == {(p1, p2)}\n\ndef test_convex_hull():\n    from sympy.geometry import Point, Polygon\n\n    p1 = Point(1, 1)\n    p2 = Point(1, 2)\n    p3 = Point(3, 1)\n    p4 = Point(1, 3)\n    p5 = Point(3, 3)\n\n    hull = convex_hull(p1, p2, p3, p4, p5)\n    assert isinstance(hull, Polygon)\n    assert hull.args == (p1, p2, p5, p3)\n    hull = convex_hull(p1, p2, p3, p4, p5, polygon=False)\n    assert isinstance(hull, tuple)\n    assert len(hull) == 2\n    assert isinstance(hull[0], list)\n    assert isinstance(hull[1], list)\n\ndef test_farthest_points():\n    from sympy.geometry import Point, Circle\n\n    p1 = Point(1, 1)\n    p2 = Point(1, 2)\n    p3 = Point(2, 1)\n    p4 = Point(2, 2)\n    c = Circle((0, 0), 1)\n    assert farthest_points(p1, p2, p3, p4).issubset({(p1, p4), (p2, p3)})\n\ndef test_intersection():\n    from sympy.geometry import Ray, Circle, Point\n\n    c = Circle((0, 1), 1)\n    right = Ray((0, 0), (1, 0))\n    up = Ray((0, 0), (0, 1))\n    assert intersection(c, right, up) == [Point2D(0, 0)]\n    assert intersection(c, right, up, pairwise=True) == [Point2D(0, 0), Point2D(0, 2)]\n    left = Ray((1, 0), (0, 0))\n    assert intersection(right, left) == [Segment2D(Point2D(0, 0), Point2D(1, 0))]\n\n\n\n"], "sample_75": ["\nimport unittest\nimport numpy as np\nfrom seaborn._core.scales import (\n    Nominal,\n    Continuous,\n    Temporal,\n    PseudoAxis,\n    _make_identity_transforms,\n    _make_log_transforms,\n    _make_logit_transforms,\n    _make_symlog_transforms,\n    _make_sqrt_transforms,\n    _make_power_transforms,\n)\n\n\nclass TestScales(unittest.TestCase):\n    def test_nominal(self):\n        scale = Nominal()\n        self.assertEqual(scale._priority, 0)\n\n    def test_continuous(self):\n        scale = Continuous()\n        self.assertEqual(scale._priority, 1)\n        self.assertIsNone(scale.trans)\n\n    def test_temporal(self):\n        scale = Temporal()\n        self.assertEqual(scale._priority, 2)\n        self.assertIsNone(scale.trans)\n\n    def test_pseudo_axis(self):\n        scale = Continuous()\n        axis = PseudoAxis(scale)\n        self.assertIsNotNone(axis.scale)\n\n    def test_identity_transforms(self):\n        forward, inverse = _make_identity_transforms()\n        self.assertTrue(np.allclose(forward(np.array([1, 2, 3])), np.array([1, 2, 3])))\n        self.assertTrue(np.allclose(inverse(np.array([1, 2, 3])), np.array([1, 2, 3])))\n\n    def test_log_transforms(self):\n        forward, inverse = _make_log_transforms()\n        self.assertTrue(np.allclose(forward(np.array([1, 10, 100])), np.array([0, 1, 2])))\n        self.assertTrue(np.allclose(inverse(np.array([0, 1, 2])), np.array([1, 10, 100])))\n\n    def test_logit_transforms(self):\n        forward, inverse = _make_logit_transforms()\n        self.assertTrue(np.allclose(forward(np.array([0.1, 0.5, 0.9])), np.array([-2.3, 0, 2.3])))\n        self.assertTrue(np.allclose(inverse(np.array([-2.3, 0, 2.3])), np.array([0.1, 0.5, 0.9])))\n\n    def test_symlog_transforms(self):\n        forward, inverse = _make_symlog_transforms()\n        self.assertTrue(np.allclose(forward(np.array([-1, 0, 1])), np.array([-1.099, 0, 1.099])))\n        self.assertTrue(np.allclose(inverse(np.array([-1.099, 0, 1.099])), np.array([-1, 0, 1])))\n\n    def test_sqrt_transforms(self):\n        forward, inverse = _make_sqrt_transforms()\n        self.assertTrue(np.allclose(forward(np.array([1, 4, 9])), np.array([1, 2, 3])))\n        self.assertTrue(np.allclose(inverse(np.array([1, 2, 3])), np.array([1, 4, 9])))\n\n    def test_power_transforms(self):\n        forward, inverse = _make_power_transforms(2)\n        self.assertTrue(np.allclose(forward(np.array([1, 2, 3])), np.array([1, 4, 9])))\n        self.assertTrue(np.allclose(inverse(np.array([1, 4, 9])), np.array([1, 2, 3])))\n\n\n\n"], "sample_90": ["\nimport pytest\nfrom _pytest.main import _in_venv, ExitCode, Session\nfrom _pytest.main import pytest_ignore_collect\nfrom _pytest.main import pytest_collection_modifyitems\n\nclass Test_in_venv:\n    def test_in_venv_venv_directory(self):\n        assert _in_venv(__file__) is True\n    \n    def test_in_venv_not_venv_directory(self):\n        assert _in_venv(\"not_a_venv_directory\") is False\n\nclass TestExitCode:\n    def test_exit_code_values(self):\n        assert ExitCode.OK == 0\n        assert ExitCode.TESTS_FAILED == 1\n        assert ExitCode.INTERRUPTED == 2\n        assert ExitCode.INTERNAL_ERROR == 3\n        assert ExitCode.USAGE_ERROR == 4\n        assert ExitCode.NO_TESTS_COLLECTED == 5\n\nclass TestSession:\n    def test_session(self):\n        s = Session(None)\n        assert s.testsfailed == 0\n        assert s.testscollected == 0\n\n\nclass Test_pytest_ignore_collect:\n    def test_pytest_ignore_collect_excluded_path(self):\n        config = Mock()\n        config.getoption.return_value = [\"some_path\"]\n        assert _pytest_ignore_collect(Mock(), config, mock_path=Mock(path=\"some_path\"))\n \nclass Test_pytest_collection_modifyitems:\n    def test_pytest_collection_modifyitems(self):\n        config = Mock()\n        config.getoption.return_value = [\"some_path\"]\n        items = [Mock(nodeid=\"id1\"), Mock(nodeid=\"id2\")]\n        pytest_collection_modifyitems(items, config)\n        assert len(items) == 2\n\n"], "sample_125": ["\nfrom sympy.polys.polyoptions import ( Options, Expand, Gens, Wrt, Sort, Order, Field, Greedy, Domain, Split, Gaussian, Extension, Modulus, Symmetric, Strict, Auto, Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\nfrom sympy.polys.orderings import lex\nfrom sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\nfrom sympy.polys.polyerrors import OptionError, GeneratorsError\nimport unittest\n\n\nclass TestOptions(unittest.TestCase):\n    def test_Options_defaults(self):\n        options = Options(gens=(x, y, z), args={'domain': ZZ})\n        self.assertEqual(options['expand'], True)\n        self.assertEqual(options['gens'], (x, y, z))\n        self.assertEqual(options['domain'], ZZ)\n        self.assertEqual(options['auto'], True)\n        self.assertEqual(options['field'], False)\n        self.assertEqual(options['greedy'], False)\n        self.assertEqual(options['split'], False)\n        self.assertEqual(options['gaussian'], False)\n        self.assertEqual(options['extension'], None)\n        self.assertEqual(options['modulus'], None)\n        self.assertEqual(options['symmetric'], True)\n        self.assertEqual(options['strict'], True)\n        self.assertEqual(options['frac'], False)\n        self.assertEqual(options['formal'], False)\n        self.assertEqual(options['polys'], False)\n        self.assertEqual(options['include'], False)\n        self.assertEqual(options['all'], False)\n        self.assertEqual(options['gen'], 0)\n        self.assertEqual(options['series'], False)\n        self.assertEqual(options['symbols'], numbered_symbols('s', start=1))\n        self.assertEqual(options['method'], None)\n\n    def test_Options_build_options(self):\n        self.assertEqual(build_options((x, y, z), {'domain': ZZ}),\n                         Options((x, y, z), {'domain': ZZ}))\n        self.assertEqual(build_options((x, y, z), {'opt': Options((x, y, z), {'domain': ZZ})}),\n                         Options((x, y, z), {'domain': ZZ}))\n    \n    def test_Options_preprocess_options(self):\n        options = Options(gens=(x, y, z), args={'domain': ZZ, 'expand': True})\n        \n        # Test for Option classes\n        self.assertEqual(options['expand'], True)\n        self.assertEqual(options['gens'], (x, y, z))\n        self.assertEqual(options['domain'], ZZ)\n        self.assertEqual(options['auto'], True)\n        self.assertEqual(options['field'], False)\n        self.assertEqual(options['greedy'], False)\n        self.assertEqual(options['split'], False)\n        self.assertEqual(options['gaussian'], False)\n        self.assertEqual(options['extension'], None)\n        self.assertEqual(options['modulus'], None)\n        self.assertEqual(options['symmetric'], True)\n        self.assertEqual(options['strict'], True)\n        self.assertEqual(options['frac'], False)\n        self.assertEqual(options['formal'], False)\n        self.assertEqual(options['polys'], False)\n        self.assertEqual(options['include'], False)\n        self.assertEqual(options['all'], False)\n        self.assertEqual(options['gen'], 0)\n        self.assertEqual(options['series'], False)\n        self.assertEqual(options['symbols'], numbered_symbols('s', start=1))\n        self.assertEqual(options['method'], None)\n\n    def test_Options_order(self):\n        with self.assertRaises(RuntimeError):\n            Options._init_dependencies_order()\n\n    def test_Options_clone(self):\n        options = Options(gens=(x, y, z), args={'domain': ZZ, 'expand': True})\n        cloned_options = options.clone(updates={'expand': False})\n        self.assertEqual(cloned_options['expand'], False)\n        self.assertEqual(cloned_options['domain'], ZZ)\n\n    def test_Options_getattr(self):\n        options = Options(gens=(x, y, z), args={'domain': ZZ, 'expand': True})\n        self.assertEqual(options.get('domain'), ZZ)\n        self.assertEqual(options.get('expand'), True)\n\n    def test_Options_setattr(self):\n        options = Options(gens=(x, y, z), args={'domain': ZZ, 'expand': True})\n        options.auto = False\n        self.assertEqual(options['auto'], False)\n\n    def test_Options_allowed_flags(self):\n        with self.assertRaises(FlagError):\n            allowed_flags({'domain': ZZ, 'frac': True}, [])\n\n        allowed_flags({'domain': ZZ, 'frac': True}, ['frac'])\n\n    def test_Options_set_defaults(self):\n        options = Options(gens=(x, y, z), args={'domain': ZZ})\n        updated_options = set_defaults(options, auto=False)\n        self.assertEqual(updated_options['auto'], False)\n\n\n\n"], "sample_129": ["\nfrom sympy.core.numbers import (S,  oo, nan, pi, E, I, exp, sin, Integer, Rational,  sympify,\n                                GoldenRatio, Catalan, EulerGamma,  \n                                ImaginaryUnit,  _intcache, sympify_fractions, \n                                sympify_mpz, sympify_mpq, sympify_mpmath,\n                                sympify_complex)\nfrom sympy import  Symbol, sqrt\n\n\ndef test_symbols_creation():\n    assert S.Zero == S.Zero\n    assert S.One == S.One\n    assert S.Infinity == S.Infinity\n    assert S.NegativeInfinity == S.NegativeInfinity\n    assert S.NaN == S.NaN\n\n\ndef test_sympify():\n    assert sympify(3) == Integer(3)\n    assert sympify(1j) == I\n    assert sympify(1.5) == Float(1.5)\n    assert sympify(Symbol('x')) == Symbol('x')\n    assert sympify(oo) == oo\n\n\ndef test_number_properties():\n    assert pi.is_number is True\n    assert pi.is_real is True\n    assert pi.is_irrational is True\n    assert E.is_number is True\n    assert E.is_real is True\n    assert E.is_irrational is True\n    assert I.is_imaginary is True\n    assert I.is_number is True\n    assert I.is_real is False\n\ndef test_nan_operations():\n    assert nan + 1 == nan\n    assert nan - 1 == nan\n    assert nan * 2 == nan\n    assert nan / 2 == nan\n    assert nan * oo == nan\n    assert nan / oo == nan\n    assert not (nan == nan)\n    assert ~ (nan == nan)\n\n\n\ndef test_sympify_complex():\n    assert sympify_complex(complex(1, 2)) == 1 + 2*I\n    assert sympify_complex(complex(1, -2)) == 1 - 2*I\n\ndef test_sympify_fractions():\n    assert sympify_fractions(fractions.Fraction(1, 2)) == Rational(1, 2)\n\ndef test_sympify_mpz():\n    assert sympify_mpz(gmpy.mpz(10)) == Integer(10)\n\ndef test_sympify_mpq():\n    assert sympify_mpq(gmpy.mpq(1, 2)) == Rational(1, 2)\n\ndef test_sympify_mpmath():\n    assert sympify_mpmath(mpmath.mpf('1.23456789')) == Float('1.23456789')\n\n\n"], "sample_62": ["\nfrom django.template import Template, TemplateSyntaxError\nfrom django.template.defaultfilters  import (\n    add,\n    default,\n    default_if_none,\n    divisibleby,\n    filesizesformat,\n    get_digit,\n    join,\n    slugify,\n    truncatechars,\n    truncatewords,\n    yesno,\n    pluralize\n)\nfrom django.test import TestCase\nfrom django.utils.safestring import mark_safe\nfrom django.utils.html import escape\nimport re\nfrom datetime import datetime, date, timedelta\nfrom unittest.mock import patch\n\n\nclass DefaultFiltersTests(TestCase):\n\n    def test_add(self):\n        self.assertEqual(add('1', '2'), 3)\n        self.assertEqual(add('1', '2.5'), 3.5)\n        self.assertEqual(add('1.5', '2.5'), 4)\n        self.assertEqual(add('ABC', 'DEF'), 'ABCDEF')\n\n    def test_divisibleby(self):\n        self.assertTrue(divisibleby(10, 2))\n        self.assertFalse(divisibleby(10, 3))\n\n    def test_default(self):\n        self.assertEqual(default('foo', 'bar'), 'foo')\n        self.assertEqual(default(None, 'bar'), 'bar')\n\n    def test_default_if_none(self):\n        self.assertEqual(default_if_none('foo', 'bar'), 'foo')\n        self.assertEqual(default_if_none(None, 'bar'), 'bar')\n\n    def test_get_digit(self):\n        self.assertEqual(get_digit('12345', '1'), 1)\n        self.assertEqual(get_digit('12345', '2'), 2)\n        self.assertEqual(get_digit('12345', '3'), 3)\n        self.assertEqual(get_digit('12345', '4'), 4)\n        self.assertEqual(get_digit('12345', '5'), 5)\n        self.assertEqual(get_digit('12345', '6'), 0)\n\n\n    def test_yesno(self):\n        self.assertEqual(yesno(True), \"yes\")\n        self.assertEqual(yesno(False), \"no\")\n        self.assertEqual(yesno(None), \"maybe\")\n        self.assertEqual(yesno(True, \"yup,nope\"), \"yup\")\n        self.assertEqual(yesno(False, \"yup,nope\"), \"nope\")\n        self.assertEqual(yesno(None, \"yup,nope\"), \"maybe\")\n\n    def test_pluralize(self):\n        self.assertEqual(pluralize(0), \"votes\")\n        self.assertEqual(pluralize(1), \"vote\")\n        self.assertEqual(pluralize(2), \"votes\")\n        self.assertEqual(pluralize(0, \"es\"), \"classes\")\n        self.assertEqual(pluralize(1, \"es\"), \"class\")\n        self.assertEqual(pluralize(2, \"es\"), \"classes\")\n        self.assertEqual(pluralize(0, \"y,ies\"), \"candies\")\n        self.assertEqual(pluralize(1, \"y,ies\"), \"candy\")\n        self.assertEqual(pluralize(2, \"y,ies\"), \"candies\")\n\n    def test_filesizesformat(self):\n        self.assertEqual(filesizeformat(0), \"0 bytes\")\n        self.assertEqual(filesizeformat(1024), \"1 KB\")\n        self.assertEqual(filesizeformat(1024 * 1024), \"1 MB\")\n        self.assertEqual(filesizeformat(1024 * 1024 * 1024), \"1 GB\")\n        self.assertEqual(filesizeformat(-1024), \"-1 KB\")\n\n    def test_join(self):\n        self.assertEqual(join(['first', 'second', 'third'], ' - '), 'first - second - third')\n\n"], "sample_88": ["\nimport pytest\nfrom _pytest.nodes import (\n    _splitnode,\n    ischildnode,\n    Node,\n    Collector,\n    File,\n    Item,\n    get_fslocation_from_item,\n)\n\n\ndef test_splitnode():\n    assert _splitnode(\"\") == ()\n    assert _splitnode(\"testing\") == (\"testing\",)\n    assert _splitnode(\"testing/code\") == (\"testing\", \"code\")\n    assert _splitnode(\"testing/code/test_excinfo.py\") == (\n        \"testing\",\n        \"code\",\n        \"test_excinfo.py\",\n    )\n    assert _splitnode(\"testing/code/test_excinfo.py::TestFormattedExcinfo\") == (\n        \"testing\",\n        \"code\",\n        \"test_excinfo.py\",\n        \"TestFormattedExcinfo\",\n    )\n\n\ndef test_ischildnode():\n    assert ischildnode(\"foo\", \"foo\")\n    assert ischildnode(\"foo/bar\", \"foo\")\n    assert ischildnode(\"foo/bar\", \"foo/bar\")\n    assert not ischildnode(\"foo/bar\", \"foo\")\n    assert not ischildnode(\"foo/bar\", \"foo/baz\")\n\n\ndef test_node_init():\n    node = Node(\"test\", parent=None)\n    assert node.name == \"test\"\n    assert node.parent is None\n    assert node.config is None\n    assert node.session is None\n    assert node.fspath is None\n    assert node.nodeid is None\n    assert len(node.keywords) == 0\n    assert len(node.own_markers) == 0\n    assert node.extra_keyword_matches == set()\n\n    node = Node(\n        \"test\",\n        parent=None,\n        config=None,\n        session=None,\n        fspath=None,\n        nodeid=\"test::()\",\n    )\n    assert node.name == \"test\"\n    assert node.parent is None\n    assert node.config is None\n    assert node.session is None\n    assert node.fspath is None\n    assert node.nodeid == \"test::()\"\n    assert len(node.keywords) == 0\n    assert len(node.own_markers) == 0\n    assert node.extra_keyword_matches == set()\n\n\ndef test_ischildnode():\n    assert ischildnode(\"foo\", \"foo\")\n    assert ischildnode(\"foo/bar\", \"foo\")\n    assert ischildnode(\"foo/bar\", \"foo/bar\")\n    assert not ischildnode(\"foo/bar\", \"foo\")\n    assert not ischildnode(\"foo/bar\", \"foo/baz\")\n\n\ndef test_collector_collect():\n    class MockCollector(Collector):\n        def collect(self):\n            return []\n\n    collector = MockCollector(\"test\")\n    assert len(collector.collect()) == 0\n\n\ndef test_file_init():\n    file = File(\"test.py\", parent=None)\n    assert file.fspath == py.path.local(\"test.py\")\n\n\ndef test_item_init():\n    item = Item(\"test\", parent=None)\n    assert item.name == \"test\"\n    assert item.parent is None\n    assert item.fspath is None\n    assert item.nextitem is None\n\n\ndef test_get_fslocation_from_item():\n    item = Node(\"test\")\n    assert get_fslocation_from_item(item) == (\"unknown location\", -1)\n\n    class ItemWithLocation(Node):\n        def __init__(self, name, parent=None):\n            super().__init__(name, parent)\n            self.location = (py.path.local(\"test.py\"), 10)\n\n    item = ItemWithLocation(\"test\")\n    assert get_fslocation_from_item(item) == (\"test.py\", 10)\n\n"], "sample_118": ["\nfrom sympy import KroneckerDelta, diff, Piecewise, And\nfrom sympy import Sum\nfrom sympy.core import S, symbols, Add, Mul\nfrom sympy.functions import transpose, sin, cos, sqrt\nfrom sympy.simplify import simplify\nfrom sympy.matrices import (Identity, ImmutableMatrix, Inverse, MatAdd, MatMul, MatPow, Matrix, MatrixExpr, MatrixSymbol, ShapeError, ZeroMatrix, SparseMatrix, Transpose, Adjoint)\nfrom sympy.matrices.expressions.matexpr import MatrixElement\nfrom sympy.utilities.pytest import raises\n\n\n\ndef test_MatrixExpr_init():\n    A = MatrixSymbol('A', 3, 3)\n    assert A.is_Matrix is True\n    assert A.is_MatrixExpr is True\n    assert not A.is_Identity\n    assert not A.is_Inverse\n    assert not A.is_Transpose\n    assert not A.is_ZeroMatrix\n    assert not A.is_commutative\n    assert A.rows == 3\n    assert A.cols == 3\n\ndef test_MatrixExpr_neg():\n    A = MatrixSymbol('A', 2, 2)\n    B = -A\n    assert isinstance(B, MatMul)\n    assert B.args[0] == S.NegativeOne\n    assert B.args[1] == A\n\ndef test_MatrixExpr_add():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = A + B\n    assert isinstance(C, MatAdd)\n    assert C.args[0] == A\n    assert C.args[1] == B\n\ndef test_MatrixExpr_radd():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = B + A\n    assert isinstance(C, MatAdd)\n    assert C.args[0] == B\n    assert C.args[1] == A\n\ndef test_MatrixExpr_sub():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = A - B\n    assert isinstance(C, MatAdd)\n    assert C.args[0] == A\n    assert C.args[1] == -B\n\ndef test_MatrixExpr_rsub():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = B - A\n    assert isinstance(C, MatAdd)\n    assert C.args[0] == B\n    assert C.args[1] == -A\n\ndef test_MatrixExpr_mul():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = A * B\n    assert isinstance(C, MatMul)\n    assert C.args[0] == A\n    assert C.args[1] == B\n\ndef test_MatrixExpr_matmul():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = A @ B\n    assert isinstance(C, MatMul)\n    assert C.args[0] == A\n    assert C.args[1] == B\n\ndef test_MatrixExpr_rmul():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = B * A\n    assert isinstance(C, MatMul)\n    assert C.args[0] == A\n    assert C.args[1] == B\n\ndef test_MatrixExpr_rmatmul():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = B @ A\n    assert isinstance(C, MatMul)\n    assert C.args[0] == A\n    assert C.args[1] == B\n\ndef test_MatrixExpr_pow():\n    A = MatrixSymbol('A', 2, 2)\n    B = A**2\n    assert isinstance(B, MatPow)\n    assert B.args[0] == A\n    assert B.args[1] == 2\n\ndef test_MatrixExpr_rpow():\n    A = MatrixSymbol('A', 2, 2)\n    with raises(NotImplementedError):\n        2**A\n\ndef test_MatrixExpr_div():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = A / B\n    assert isinstance(C, MatMul)\n    assert C.args[0] == A\n    assert C.args[1] == B**-1\n\ndef test_MatrixExpr_rdiv():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    with raises(NotImplementedError):\n        B / A\n\ndef test_MatrixExpr__truediv__():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = A / B\n    assert isinstance(C, MatMul)\n    assert C.args[0] == A\n    assert C.args[1] == B**-1\n\ndef test_MatrixExpr__rtruediv__():\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    with raises(NotImplementedError):\n        B / A\n\ndef test_MatrixExpr_as_explicit():\n    A = MatrixSymbol('A', 2, 3)\n    result = A.as_explicit()\n    assert isinstance(result, ImmutableMatrix)\n    assert result.shape == (2, 3)\n\n\ndef test_MatrixExpr_as_mutable():\n    A = MatrixSymbol('A', 2, 3)\n    result = A.as_mutable()\n    assert isinstance(result, ImmutableMatrix)\n    assert result.shape == (2, 3)\n\n\ndef test_MatrixExpr___getitem__():\n    A = MatrixSymbol('A', 3, 3)\n    with raises(IndexError):\n        A[2]\n    with raises(IndexError):\n        A['a']\n    assert A[0, 0] == A[0, 0]\n    assert A[1, 2] == A[1, 2]\n\ndef test_MatrixExpr_valid_index():\n    A = MatrixSymbol('A', 3, 3)\n    assert A.valid_index(0, 0) is True\n    assert A.valid_index(2, 2) is True\n    assert A.valid_index(0, 3) is False\n    assert A.valid_index(3, 0) is False\n\ndef test_MatrixExpr_equals():\n    A = Identity(2)\n    B = MatrixSymbol('B', 2, 2)\n    assert A.equals(B) \n\ndef test_MatrixExpr_canonicalize():\n    A = MatrixSymbol('A', 2, 2)\n    assert A.canonicalize() == A \n\ndef test_MatrixExpr_as_coeff_mmul():\n    A = MatrixSymbol('A', 2, 2)\n    result = A.as_coeff_mmul()\n    assert result == (1, A) \n\ndef test_MatrixElement():\n    A = MatrixSymbol('A', 2, 3)\n    el = A[1, 2]\n    assert el.parent is A\n    assert isinstance(el, MatrixElement)\n    assert el.i == 1\n    assert el.j == 2\n    assert el.doit() == A[1, 2]\n\n\n\n"], "sample_77": ["\n\nfrom unittest import TestCase\nfrom matplotlib.offsetbox import (AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, HPacker, OffsetBox, OffsetImage, PaddedBox, TextArea, VPacker, _get_packed_offsets)\n\nclass TestOffsetBox(TestCase):\n\n    def test_offsetbox_basic(self):\n        box = OffsetBox()\n        self.assertIsInstance(box, OffsetBox)\n        self.assertEqual(box.get_transform(), None)\n\n    def test_offsetbox_set_offset(self):\n        box = OffsetBox()\n        box.set_offset((1, 2))\n        self.assertEqual(box._offset, (1, 2))\n\n    def test_offsetbox_get_window_extent(self):\n        box = OffsetBox()\n        box.set_offset((1, 2))\n        bbox = box.get_window_extent(renderer=None)\n        self.assertEqual(bbox.x0, 1)\n        self.assertEqual(bbox.y0, 2)\n\n    def test_offsetbox_child(self):\n        box = OffsetBox()\n        child = TextArea(\"Test\")\n        box.add_artist(child)\n        self.assertEqual(len(box.get_children()), 1)\n        self.assertTrue(child in box.get_children())\n\nclass TestAnchoredOffsetbox(TestCase):\n\n    def test_anchoredoffsetbox_basic(self):\n        box = AnchoredOffsetbox(loc='upper left')\n        self.assertIsInstance(box, AnchoredOffsetbox)\n        self.assertEqual(box.loc, 'upper left')\n\n    def test_anchoredoffsetbox_set_child(self):\n        box = AnchoredOffsetbox(loc='upper left')\n        child = TextArea(\"Test\")\n        box.set_child(child)\n        self.assertEqual(box.get_child(), child)\n\n    def test_anchoredoffsetbox_get_offset(self):\n        box = AnchoredOffsetbox(loc='upper left')\n        bbox = box.get_window_extent()\n        offset = box.get_offset(bbox, renderer=None)\n        self.assertEqual(offset, (0, bbox.y0))\n\n    def test_anchoredoffsetbox_update_frame(self):\n        box = AnchoredOffsetbox(loc='upper left')\n        bbox = box.get_window_extent()\n        fontsize = 12\n        box.update_frame(bbox, fontsize)\n        self.assertTrue(box.patch.visible)\n\nclass TestAnnotationBbox(TestCase):\n\n    def test_annotationbbox_basic(self):\n        fig = plt.figure()\n        ann = AnnotationBbox(\n            OffsetBox(), (1, 1), xybox=(1, 1),\n            textcoords='data', frameon=True,\n            arrowprops=dict(arrowstyle=\"->\"))\n        self.assertIsInstance(ann, AnnotationBbox)\n        self.assertEqual(ann.xy, (1, 1))\n        self.assertEqual(ann.xybox, (1, 1))\n        self.assertEqual(ann.boxcoords, 'data')\n        self.assertTrue(ann.patch.visible)\n\n    def test_annotationbbox_set_fontsize(self):\n        bbox = AnnotationBbox(OffsetBox(), (1, 1))\n        bbox.set_fontsize(12)\n        self.assertEqual(bbox.get_fontsize(), 12)\n\nclass TestDraggableOffsetBox(TestCase):\n\n    @property\n    def _make_ref_artist(self):\n        # Override in subclasses for specific artist types\n        return TextArea(\"Test\")\n\n    def test_draggableoffsetbox_basic(self):\n        ref_artist = self._make_ref_artist()\n        box = DraggableOffsetBox(ref_artist, OffsetBox(), use_blit=False)\n        self.assertIsInstance(box, DraggableOffsetBox)\n        self.assertIs(box.ref_artist, ref_artist)\n        self.assertIs(box.offsetbox, box.offsetbox)\n\n    def test_draggableoffsetbox_save_offset(self):\n        ref_artist = self._make_ref_artist()\n        box = DraggableOffsetBox(ref_artist, OffsetBox(), use_blit=False)\n        box.save_offset()\n        # assert that the offset is stored appropriately - this depends\n        # on the specific implementation of OffsetBox._offset.\n\n    def test_draggableoffsetbox_update_offset(self):\n        ref_artist = self._make_ref_artist()\n        box = DraggableOffsetBox(ref_artist, OffsetBox(), use_blit=False)\n        dx = 10\n        dy = 20\n        box.update_offset(dx, dy)\n        # assert that the offset is updated appropriately.\n\n\n\n"], "sample_30": ["\nfrom django.contrib.admin import (\n    ModelAdmin, StackedInline, TabularInline, InlineModelAdmin,\n    get_content_type_for_model, get_object_or_404,\n)\nfrom django.http import HttpResponseRedirect\nfrom django.urls import reverse\nfrom django.test import TestCase, override_settings\nfrom django.test.utils import capture_stderr\nfrom django.utils.timezone import now\n\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.core.exceptions import ObjectDoesNotExist\n\nclass TestOptions(TestCase):\n\n    def setUp(self):\n        pass\n\n    def test_get_content_type_for_model(self):\n        content_type = get_content_type_for_model(object)\n        self.assertEqual(content_type.app_label, 'tests')\n        self.assertEqual(content_type.model, 'test')\n\n\n    def test_get_object_or_404(self):\n        try:\n            get_object_or_404(MyModel, pk=10)\n        except ObjectDoesNotExist:\n            pass\n\n\n\n"], "sample_47": ["\nfrom django.conf.urls.static import static\nfrom django.test import TestCase\nfrom django.http import HttpResponse\nfrom django.utils._os import safe_join\nfrom django.utils.http import http_date\nfrom django.utils.translation import gettext as _\nfrom django.utils.translation import gettext_lazy\n\nfrom ..views import serve, DEFAULT_DIRECTORY_INDEX_TEMPLATE, directory_index, was_modified_since\n\nclass TestStaticViews(TestCase):\n\n    def setUp(self):\n        self.document_root = \"/tmp/tests\"\n        self.path = \"testfile.txt\"\n        self.fullpath = safe_join(self.document_root, self.path)\n\n    def test_serve_file(self):\n        with open(self.fullpath, \"wb\") as f:\n            f.write(b\"test content\")\n        \n        response = serve(self.request, path=self.path, document_root=self.document_root)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content.decode(), \"test content\")\n\n    def test_serve_nonexistent_file(self):\n        response = serve(self.request, path=\"nonexistent.txt\", document_root=self.document_root)\n        self.assertEqual(response.status_code, 404)\n\n    def test_serve_directory(self):\n        with open(safe_join(self.document_root, \"index.html\"), \"w\") as f:\n            f.write(\"test directory content\")\n\n        response = serve(self.request, path=\"\", document_root=self.document_root)\n        self.assertEqual(response.status_code, 404)\n\n    def test_serve_directory_index(self):\n        with open(safe_join(self.document_root, \"index.html\"), \"w\") as f:\n            f.write(\"test directory content\")\n        \n        response = serve(self.request, path=\"\", document_root=self.document_root, show_indexes=True)\n        self.assertEqual(response.status_code, 200)\n\n    def test_was_modified_since(self):\n        # Test with no header\n        self.assertTrue(was_modified_since())\n\n        # Test with old header\n        header = http_date(0)\n        self.assertTrue(was_modified_since(header, 1, 1))\n\n        # Test with new header\n        header = http_date(1)\n        self.assertFalse(was_modified_since(header, 1, 1))\n\n    def test_was_modified_since_with_length(self):\n        # Test with old header and different length\n        header = http_date(0)\n        self.assertTrue(was_modified_since(header, 1, 10))\n\n        # Test with new header and same length\n        header = http_date(1)\n        self.assertFalse(was_modified_since(header, 1, 10))\n\n\n\n"], "sample_52": ["\nimport unittest\nfrom django.db import connection\nfrom django.db.utils import IntegrityError\nfrom django.test import TestCase\nfrom django.test.utils import get_random_string\nfrom django.core.management.commands.migrate import Command\nfrom django.apps import apps\nfrom django.db.models import fields\nfrom django.db.migrations import MigrationPlan\nfrom django.db.migrations.operations import (\n    AlterModelOptions,\n    AddConstraint,\n    AddIndex,\n    AlterModelTable,\n    RenameModel,\n    ModelOperation,\n    DeleteModel,\n    RenameIndex,\n    RemoveIndex,\n    RemoveConstraint,\n)\nfrom django.db.migrations.state import ModelState, ProjectState\nfrom django.db.migrations.migration import Migration\n\n# For testing, use the default connection.\nTEST_DB_NAME = connection.settings_dict['NAME']\n\nclass MigrationOperationTest(TestCase):\n    def test_add_index(self):\n        app_label = 'testapp'\n        model_name = 'TestModel'\n        old_state = ProjectState()\n        new_state = ProjectState()\n        \n        # Create test app and model\n        with apps.app_context(using=connection.alias):\n            models.Model.objects.create(\n                pk=1,\n                name='TestModel'\n            )\n            \n        # Add index operation\n        index_operation = AddIndex(model_name, index=models.Index(fields=['name'], name='my_index'))\n        index_operation.apply(old_state, new_state, connection)\n\n        # Assert that index was added\n        self.assertEqual(new_state.models[app_label, model_name].get_index_by_name('my_index'), index_operation.index)\n\n    def test_remove_index(self):\n        app_label = 'testapp'\n        model_name = 'TestModel'\n        old_state = ProjectState()\n        new_state = ProjectState()\n        \n        # Create test app and model\n        with apps.app_context(using=connection.alias):\n            models.Model.objects.create(\n                pk=1,\n                name='TestModel'\n            )\n\n        # Add index operation\n        add_index = AddIndex(model_name, index=models.Index(fields=['name'], name='my_index'))\n        add_index.apply(old_state, new_state, connection)\n\n        # Remove index operation\n        remove_index = RemoveIndex(model_name, name='my_index')\n        remove_index.apply(old_state, new_state, connection)\n\n        # Assert that index was removed\n        self.assertFalse(new_state.models[app_label, model_name].get_index_by_name('my_index'))\n\n    def test_rename_index(self):\n        app_label = 'testapp'\n        model_name = 'TestModel'\n        old_state = ProjectState()\n        new_state = ProjectState()\n        \n        # Create test app and model\n        with apps.app_context(using=connection.alias):\n            models.Model.objects.create(\n                pk=1,\n                name='TestModel'\n            )\n\n        # Add index operation\n        add_index = AddIndex(model_name, index=models.Index(fields=['name'], name='my_old_index'))\n        add_index.apply(old_state, new_state, connection)\n\n        # Rename index operation\n        rename_index = RenameIndex(\n            model_name,\n            new_name = 'my_new_index',\n            old_name='my_old_index',\n        )\n        rename_index.apply(old_state, new_state, connection)\n\n        # Assert that index was renamed\n        self.assertEqual(new_state.models[app_label, model_name].get_index_by_name('my_new_index').name, 'my_new_index')\n\n    def test_alter_model_table(self):\n        app_label = 'testapp'\n        model_name = 'TestModel'\n        old_state = ProjectState()\n        new_state = ProjectState()\n        \n        # Create test app and model\n        with apps.app_context(using=connection.alias):\n            models.Model.objects.create(\n                pk=1,\n                name='TestModel'\n            )\n\n        # Alter table operation\n        alter_table = AlterModelTable(model_name, 'new_table_name')\n        alter_table.apply(old_state, new_state, connection)\n\n        # Assert that table name was changed\n        self.assertEqual(new_state.models[app_label, model_name]._meta.db_table, 'new_table_name')\n\n    def test_rename_model(self):\n        app_label = 'testapp'\n        old_model_name = 'TestModel'\n        new_model_name = 'RenamedModel'\n        old_state = ProjectState()\n        new_state = ProjectState()\n        \n        # Create test app and model\n        with apps.app_context(using=connection.alias):\n            models.Model.objects.create(\n                pk=1,\n                name='TestModel'\n            )\n\n        # Rename model operation\n        rename_model = RenameModel(old_model_name, new_model_name)\n        rename_model.apply(old_state, new_state, connection)\n\n        # Assert that model name was changed\n        self.assertEqual(new_state.models[app_label, new_model_name]._meta.db_table, old_state.models[app_label, old_model_name]._meta.db_table)\n\n    def test_delete_model(self):\n        app_label = 'testapp'\n        model_name = 'TestModel'\n        old_state = ProjectState()\n        new_state = ProjectState()\n        \n        # Create test app and model\n        with apps.app_context(using=connection.alias):\n            models.Model.objects.create(\n                pk=1,\n                name='TestModel'\n            )\n\n        # Delete model operation\n        delete_model = DeleteModel(model_name)\n        delete_model.apply(old_state, new_state, connection)\n\n        # Assert that model was deleted\n        self.assertFalse(new_state.models.get(app_label, model_name))\n\n    def test_alter_model_options(self):\n        app_label = 'testapp'\n        model_name = 'TestModel'\n        model = models.Model()\n        old_state = ProjectState()\n        new_state = ProjectState()\n        \n        # Create test app and model\n        with apps.app_context(using=connection.alias):\n            models.Model.objects.create(\n                pk=1,\n                name='TestModel'\n            )\n\n        # Alter model options operation\n        alter_options = AlterModelOptions(\n            model_name, {'ordering': ['name']}\n        )\n        alter_options.apply(old_state, new_state, connection)\n\n        # Assert that options were changed\n        self.assertEqual(new_state.models[app_label, model_name]._meta.ordering, ['name'])\n\n\n\n"], "sample_5": ["\nimport unittest\nfrom django.db import models\nfrom django.db.models import Func\nfrom django.utils.timezone import utc\nfrom django.utils.functional import LazyObject\nfrom django.conf import settings\n\nfrom django.db.migrations.serializer import (\n    serializer_factory,\n    BaseSerializer,\n    ModelFieldSerializer,\n    ModelManagerSerializer,\n    OperationSerializer,\n    RegexSerializer,\n    SequenceSerializer,\n    SetSerializer,\n    SettingsReferenceSerializer,\n    TupleSerializer,\n    TypeSerializer,\n    UUIDSerializer\n)\n\nclass TestSerializer(unittest.TestCase):\n\n    def test_serializer_factory_simple(self):\n        self.assertEqual(serializer_factory(12).serialize(), ('12', set()))\n        self.assertEqual(serializer_factory(None).serialize(), ('None', set()))\n\n    def test_serializer_factory_string(self):\n        self.assertEqual(serializer_factory('Hello').serialize(), ('\"Hello\"', set()))\n\n    def test_serializer_factory_float(self):\n        self.assertEqual(serializer_factory(3.14).serialize(), ('3.14', set()))\n        self.assertEqual(serializer_factory(float(\"nan\")).serialize(), ('float(\"nan\")', set()))\n        self.assertEqual(serializer_factory(float(\"inf\")).serialize(), ('float(\"inf\")', set()))\n\n    def test_serializer_factory_bool(self):\n        self.assertEqual(serializer_factory(True).serialize(), ('True', set()))\n        self.assertEqual(serializer_factory(False).serialize(), ('False', set()))\n\n    def test_serializer_factory_datetime_datetime(self):\n        dt = datetime.datetime(2023, 10, 26, 10, 30, 0, tzinfo=utc)\n        self.assertEqual(serializer_factory(dt).serialize(), ('datetime(2023, 10, 26, 10, 30, 0, tzinfo=utc)', {'import datetime'}),)\n\n    def test_serializer_factory_datetime_date(self):\n        from datetime import date\n        self.assertEqual(\n            serializer_factory(date(2023, 10, 26)).serialize(),\n            ('date(2023, 10, 26)', {'import datetime'}),\n        )\n\n    def test_serializer_factory_datetime_timedelta(self):\n        from datetime import timedelta\n        self.assertEqual(\n            serializer_factory(timedelta(days=1, hours=2, minutes=3)).serialize(),\n            ('timedelta(days=1, hours=2, minutes=3)', {'import datetime'}),\n        )\n\n    def test_serializer_factory_datetime_time(self):\n        from datetime import time\n        self.assertEqual(\n            serializer_factory(time(10, 30, 0)).serialize(),\n            ('time(10, 30, 0)', {'import datetime'}),\n        )\n\n    def test_serializer_factory_settings_reference(self):\n        self.assertEqual(serializer_factory(settings.DEBUG).serialize(), ('settings.DEBUG', {'from django.conf import settings'}),)\n\n    def test_serializer_factory_settings_reference_without_setting(self):\n        class FakeSettings(object):\n            DEBUG = False\n        settings.DEBUG = FakeSettings()\n        self.assertEqual(serializer_factory(settings.DEBUG).serialize(), ('settings.DEBUG', {'from django.conf import settings'}),)\n\n    def test_serializer_factory_models_field(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n\n        self.assertEqual(serializer_factory(MyModel.name).serialize(), ('models.CharField(max_length=100)', {'from django.db import models'}),)\n\n    def test_serializer_factory_models_manager(self):\n        class MyModel(models.Model):\n            pass\n\n        class MyManager(models.Manager):\n            pass\n\n        MyModel.objects = MyManager()\n        self.assertEqual(serializer_factory(MyModel.objects).serialize(), ('MyManager', {'from django.db import models', 'import MyModel'}),)\n\n    def test_serializer_factory_operation(self):\n        class SimpleOperation(Operation):\n            pass\n        self.assertEqual(serializer_factory(SimpleOperation()).serialize(), ('Operation', {'from django.db.migrations.operations.base import Operation'}),)\n\n    def test_serializer_factory_tuple(self):\n        self.assertEqual(serializer_factory((1, 2, 3)).serialize(), ('(1, 2, 3)', set()))\n\n    def test_serializer_factory_list(self):\n        self.assertEqual(serializer_factory([1, 2, 3]).serialize(), ('[1, 2, 3]', set()))\n\n    def test_serializer_factory_set(self):\n        self.assertEqual(serializer_factory({1, 2, 3}).serialize(), ('{1, 2, 3}', set()))\n\n    def test_serializer_factory_dict(self):\n        self.assertEqual(serializer_factory({'a': 1, 'b': 2}).serialize(), ('{\"a\": 1, \"b\": 2}', set()))\n\n    def test_serializer_factory_enum(self):\n        from enum import Enum\n        class MyEnum(Enum):\n            ONE = 1\n            TWO = 2\n        self.assertEqual(serializer_factory(MyEnum.ONE).serialize(), ('MyEnum.ONE', {'import MyEnum'}),)\n\n    def test_serializer_factory_regex(self):\n        regex = re.compile(r\"abc\")\n        self.assertEqual(serializer_factory(regex).serialize(), (r\"re.compile(r'abc')\", {'import re'}))\n\n    def test_serializer_factory_type(self):\n        self.assertEqual(serializer_factory(int).serialize(), ('int', set()))\n\n    def test_serializer_factory_uuid(self):\n        self.assertEqual(serializer_factory(uuid.uuid4()).serialize(), ('uuid.uuid4()', {'import uuid'}),)\n\n    def test_serializer_factory_lazyobject(self):\n        lazy_value = LazyObject(lambda: 42)\n        self.assertEqual(serializer_factory(lazy_value).serialize(), ('42', set()))\n\n    def test_serializer_factory_promise(self):\n        from django.utils.functional import Promise\n        promise_value = Promise(42)\n        self.assertEqual(serializer_factory(promise_value).serialize(), ('42', set()))\n\n    def test_serializer_factory_custom(self):\n        class MyCustomType:\n            pass\n        Serializer.register(MyCustomType, BaseSerializer)  \n        self.assertEqual(serializer_factory(MyCustomType()).serialize(), ('MyCustomType()', set()))\n\n    def test_serializer_factory_custom_unregister(self):\n        class MyCustomType:\n            pass\n        Serializer.register(MyCustomType, BaseSerializer)\n        Serializer.unregister(MyCustomType)\n        with self.assertRaises(ValueError):\n            serializer_factory(MyCustomType())\n    \n    def test_serializer_factory_func(self):\n        def func():\n            return 42\n        self.assertEqual(serializer_factory(func).serialize(), (\n            \"functools.partial(func)\", {'import functools'},\n        ))\n \n    def test_serializer_factory_model_func(self):\n        class MyModel(models.Model):\n            def model_func(self):\n                return self.pk\n\n        obj = MyModel.objects.create(name='test')\n        self.assertEqual(serializer_factory(obj.model_func).serialize(), (\n            \"functools.partial(MyModel.model_func, obj)\", {'import MyModel', 'import functools'},\n        ))\n    \n    def test_serializer_factory_func_with_args(self):\n        def func(a, b):\n            return a + b\n        self.assertEqual(serializer_factory(func).serialize(), (\n            \"functools.partial(func)\", {'import functools'},\n        ))\n\n    def test_serializer_factory_model_field_with_func(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n            def custom_func(self):\n                return Func('LOWER', self.name)\n        \n        self.assertEqual(\n            serializer_factory(MyModel.custom_func).serialize(),\n            ('MyModel.custom_func', {'import MyModel'}),\n        )\n    \n\n    \n"], "sample_108": ["\nimport unittest\nimport numpy as np\nfrom sklearn.isotonic import check_increasing, isotonic_regression, IsotonicRegression, _make_unique\nfrom sklearn.utils.testing import assert_almost_equal\n\nclass TestIsotonicRegression(unittest.TestCase):\n\n    def test_check_increasing(self):\n        self.assertTrue(check_increasing(np.array([1, 2, 3]), np.array([4, 5, 6])))\n        self.assertFalse(check_increasing(np.array([1, 2, 3]), np.array([6, 5, 4])))\n        self.assertTrue(check_increasing(np.array([1, 1, 2, 3]), np.array([4, 4, 5, 6])))\n        self.assertTrue(len(np.array([1, 2, 3]) )== len(np.array([4, 5, 6]))) # make sure the arrays are the same length\n\n    def test_isotonic_regression_simple(self):\n        y = np.array([1, 2, 3, 4, 5])\n        X = np.array([0, 1, 2, 3, 4])\n        y_pred = isotonic_regression(y, increasing=True)\n        np.testing.assert_array_almost_equal(y_pred, y)\n\n    def test_isotonic_regression_decreasing(self):\n        y = np.array([5, 4, 3, 2, 1])\n        X = np.array([0, 1, 2, 3, 4])\n        y_pred = isotonic_regression(y, increasing=False)\n        np.testing.assert_array_almost_equal(y_pred, y)\n\n    def test_isotonic_regression_weights(self):\n        y = np.array([1, 2, 3, 4, 5])\n        X = np.array([0, 1, 2, 3, 4])\n        sample_weight = np.array([1, 2, 0, 4, 0])\n        y_pred = isotonic_regression(y, sample_weight=sample_weight, increasing=True)\n        expected_y_pred = np.array([1, 2, 3, 4, 5])\n        np.testing.assert_array_almost_equal(y_pred, expected_y_pred)\n\n    def test_isotonic_regression_bounds(self):\n        y = np.array([1, 2, 3, 4, 5])\n        X = np.array([0, 1, 2, 3, 4])\n        y_pred = isotonic_regression(y, y_min=0, y_max=6, increasing=True)\n        np.testing.assert_array_almost_equal(y_pred, y)\n\n    def test_isotonic_regression_auto(self):\n        y = np.array([1, 2, 3, 4, 5])\n        X = np.array([0, 1, 2, 3, 4])\n        y_pred = isotonic_regression(y, increasing=\"auto\")\n        np.testing.assert_array_almost_equal(y_pred, y)\n\n    def test_isotonic_regression_empty(self):\n        y = np.array([])\n        X = np.array([])\n        y_pred = isotonic_regression(y, increasing=True)\n        self.assertEqual(len(y_pred), 0)\n\n    def test_isotonic_regression_single_point(self):\n        y = np.array([5])\n        X = np.array([0])\n        y_pred = isotonic_regression(y, increasing=True)\n        self.assertEqual(y_pred.size, 1)\n        self.assertEqual(y_pred[0], 5)\n\n\n    def test_isotonic_regression_clip(self):\n        y = np.array([1, 2, 3, 4, 5])\n        X = np.array([0, 1, 2, 3, 4])\n\n        # Clip to y_min = 0 and y_max = 4\n        y_pred = isotonic_regression(y, increasing=True, y_min=0, y_max=4)\n        expected_y_pred = np.clip(y_pred, 0, 4)\n\n        np.testing.assert_array_almost_equal(y_pred, expected_y_pred)\n\n    def test_IsotonicRegression_fit_transform(self):\n        X = np.array([1, 2, 3, 4, 5])\n        y = np.array([2, 4, 1, 3, 5])\n        iso_reg = IsotonicRegression()\n        iso_reg.fit(X, y)\n\n        # Check that the transformed data matches the original\n        transformed_y = iso_reg.transform(X)\n        np.testing.assert_array_almost_equal(transformed_y, y)\n\n    def test_IsotonicRegression_predict_transform(self):\n        X = np.array([1, 2, 3, 4, 5])\n        y = np.array([2, 4, 1, 3, 5])\n        iso_reg = IsotonicRegression()\n        iso_reg.fit(X, y)\n\n        # Check that the predicted values match the original\n        predicted_y = iso_reg.predict(X)\n        np.testing.assert_array_almost_equal(predicted_y, y)\n\n    def test_isotonic_regression_out_of_bounds_nan(self):\n        y = np.array([1, 2, 3, 4, 5])\n        X = np.array([0, 1, 2, 3, 4])\n        y_pred = isotonic_regression(y, increasing=True, out_of_bounds=\"nan\")\n        self.assertTrue(np.isnan(y_pred).any())    \n\n    def test_isotonic_regression_out_of_bounds_clip(self):\n        y = np.array([1, 2, 3, 4, 5])\n        X = np.array([0, 1, 2, 3, 4])\n        y_pred = isotonic_regression(\n            y, increasing=True, out_of_bounds=\"clip\", y_min=0, y_max=6\n        )\n        self.assertEqual(y_pred.min(), 0)\n        self.assertEqual(y_pred.max(), 6)\n\n    def test_isotonic_regression_out_of_bounds_raise(self):\n        y = np.array([1, 2, 3, 4, 5])\n        X = np.array([0, 1, 2, 3, 4])\n        with self.assertRaises(ValueError):\n            isotonic_regression(y, increasing=True, out_of_bounds=\"raise\")\n\n    def test_make_unique(self):\n        X = np.array([1, 2, 2, 3, 4, 4, 5])\n        y = np.array([1, 2, 3, 4, 5, 6, 7])\n        X_unique, y_unique, weights_unique = _make_unique(X, y, weights=np.ones(len(X)))\n        self.assertEqual(np.unique(X_unique).size, 5)\n        self.assertEqual(np.unique(y_unique).size, 5)\n        self.assertEqual(np.unique(weights_unique).size, 5)   \n\n"], "sample_14": ["\nimport unittest\nfrom unittest.mock import patch, MagicMock, call\nfrom django.utils.autoreload import StatReloader, WatchmanReloader\nfrom django.apps import apps, AppConfig\nfrom django.core.management import call_command\nfrom django.core.signals import request_finished\nfrom django.utils.functional import cached_property\n\nclass TestAutoreload(unittest.TestCase):\n\n    def setUp(self):\n        # Mock out the `time` module's sleep function to allow for controlled test execution\n        self.sleep_mock = patch('time.sleep')\n        self.addCleanup(self.sleep_mock.stop)\n        self.sleep = self.sleep_mock.start()\n\n        # Mock Django signals and other dependencies\n        self.fake_apps = MagicMock(spec=apps)\n        self.fake_app_config = MagicMock(spec=AppConfig)\n        self.fake_app_config.ready_event = MagicMock()\n\n        self.fake_django_main_thread = MagicMock()\n\n    def test_get_reloader(self):\n        with patch('django.utils.autoreload.pywatchman.client') as watchman_client:\n            watchman_client.return_value = MagicMock()\n            self.assertIsInstance(get_reloader(), WatchmanReloader)\n\n        with patch('django.utils.autoreload.pywatchman.client') as watchman_client:\n            watchman_client.side_effect = WatchmanUnavailable(\"Mock Error\")\n            self.assertIsInstance(get_reloader(), StatReloader)\n\n    def test_stat_reloader_tick(self):\n        reloader = StatReloader()\n        with patch('os.stat') as mock_stat, patch('time.time') as mock_time:\n\n            mock_time.return_value = 100\n            mock_stat.return_value = MagicMock(st_mtime=101)\n            mock_stat.side_effect = [MagicMock(st_mtime=100), MagicMock(st_mtime=101)]\n\n            for _ in reloader.tick():\n                pass\n\n            mock_stat.assert_has_calls([call(Path('file1')), call(Path('file2'))])\n\n    def test_watchman_reloader_tick(self):\n        reloader = WatchmanReloader()\n        reloader.client = MagicMock()\n        reloader.client.query.return_value = {\"subscribe\": {\"clock\": 100}}\n        with patch('django.utils.autoreload.WatchmanReloader._watch_root') as mock_watch_root:\n            with patch('django.utils.autoreload.WatchmanReloader._check_subscription') as mock_check_subscription:\n                for _ in reloader.tick():\n                    pass\n\n            mock_watch_root.assert_called_once()\n            mock_check_subscription.assert_called_once()\n\n        reloader.client.receive.return_value = {\"files\": [\n            {\"name\": \"file1\"}, {\"name\": \"file2\"}\n        ]}\n        for _ in reloader.tick():\n            pass\n        reloader.client.receive.assert_called_once()\n\n    def test_restart_with_reloader(self):\n        exit_code = restart_with_reloader()\n        self.assertEqual(exit_code, 3)\n\n    def test_start_django(self):\n        reloader = MagicMock(spec=StatReloader)\n        main_func = MagicMock()\n        django_main_thread = MagicMock()\n\n        with patch('django.utils.autoreload.get_reloader') as get_reloader_mock:\n            with patch('django.core.management.call_command', return_value=None) as call_command_mock:\n                get_reloader_mock.return_value = reloader\n                start_django(reloader, main_func, *(), **{})\n\n                reloader.run.assert_called_once_with(django_main_thread)\n                main_func.assert_called_once()\n                call_command_mock.assert_called_with('runserver')\n\n\n\n"], "sample_72": ["\nimport unittest\nfrom django.contrib.admin.options import ModelAdmin, InlineModelAdmin, BaseModelAdminChecks, BaseInlineModelAdmin\nfrom django.contrib.admin.checks import (\n    must_be,\n    must_inherit_from,\n    refer_to_missing_field,\n    check_model_admin\n)\nfrom django.db import models\nfrom django.test import override_settings\nfrom django.utils.functional import lazy\nfrom django.contrib.admin.sites import AdminSite\n\nclass MyModelAdmin(ModelAdmin):\n    pass\n\nclass MyInlineModelAdmin(InlineModelAdmin):\n    pass\n\nclass MyModel(models.Model):\n    pass\n\nclass TestChecks(unittest.TestCase):\n\n    def test_ModelAdminChecks_check(self):\n        admin_obj = MyModelAdmin(MyModel, AdminSite())\n        errors = check_model_admin(admin_obj)\n        self.assertEqual(len(errors), 0)\n\n    def test_ModelAdminChecks_check_invalid_save_as(self):\n        admin_obj = MyModelAdmin(MyModel, AdminSite())\n        admin_obj.save_as = \"foobar\"\n        errors = check_model_admin(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].message, \"The value of 'save_as' must be a boolean.\")\n\n    def test_ModelAdminChecks_check_invalid_save_on_top(self):\n        admin_obj = MyModelAdmin(MyModel, AdminSite())\n        admin_obj.save_on_top = \"foobar\"\n        errors = check_model_admin(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].message, \"The value of 'save_on_top' must be a boolean.\")\n\n    def test_ModelAdminChecks_check_invalid_inlines(self):\n        admin_obj = MyModelAdmin(MyModel, AdminSite())\n        admin_obj.inlines = [\"foobar\"]\n        errors = check_model_admin(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].message, \"The value of 'inlines' must be a list or tuple.\")\n\n    def test_ModelAdminChecks_check_invalid_list_display(self):\n        admin_obj = MyModelAdmin(MyModel, AdminSite())\n        admin_obj.list_display = [\"foobar\"]\n        errors = check_model_admin(admin_obj)\n        self.assertEqual(len(errors), 1)\n        self.assertEqual(errors[0].message, \"The value of 'list_display' must be a list or tuple.\")\n\n\n\n"], "sample_28": ["\nfrom django.contrib.admin.utils import (\n    NestedObjects, display_for_field, display_for_value, flatten, flatten_fieldsets, label_for_field,\n    lookup_field, quote, unquote, lookup_needs_distinct, prepare_lookup_value\n)\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.utils import timezone\nfrom django.utils.safestring import mark_safe\n\nclass TestUtils(TestCase):\n\n    def test_lookup_needs_distinct(self):\n        class MyModel(models.Model):\n            pk = models.AutoField(primary_key=True)\n            name = models.CharField(max_length=255)\n            related_item = models.ForeignKey('self', on_delete=models.CASCADE, related_name='related_items')\n\n        opts = MyModel._meta\n\n        # Without m2m relation\n        self.assertFalse(lookup_needs_distinct(opts, \"name\"))\n        self.assertFalse(lookup_needs_distinct(opts, \"pk\"))\n\n        # With m2m relation\n        self.assertTrue(lookup_needs_distinct(opts, \"related_item\"))\n\n    def test_prepare_lookup_value(self):\n        self.assertEqual(prepare_lookup_value(\"name\", \"test\"), \"test\")\n        self.assertEqual(prepare_lookup_value(\"name__in\", \"test,test2\"), \"test,test2\")\n        self.assertEqual(prepare_lookup_value(\"name__isnull\", \"True\"), True)\n\n    def test_quote(self):\n        self.assertEqual(quote(\"hello\"), \"hello\")\n        self.assertEqual(quote(\"world/this/is/a/test\"), \"world%2Fthis%2Fis%2Fa%2Ftest\")\n        self.assertEqual(quote(123), \"123\")\n\n    def test_unquote(self):\n        self.assertEqual(unquote(\"hello\"), \"hello\")\n        self.assertEqual(unquote(\"test%20world\"), \"test world\")\n\n    def test_flatten(self):\n        self.assertEqual(flatten([\"a\", \"b\", [\"c\", \"d\"]]), [\"a\", \"b\", \"c\", \"d\"])\n        self.assertEqual(flatten([[\"a\", \"b\"], [\"c\", \"d\"]]), [\"a\", \"b\", \"c\", \"d\"])\n\n    def test_flatten_fieldsets(self):\n        self.assertEqual(flatten_fieldsets([(\"A\", {\"fields\": [\"a\", \"b\"]}), (\"B\", {\"fields\": [\"c\"]})]),\n                         [\"a\", \"b\", \"c\"])\n\n    def test_label_for_field(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=255)\n            related_field = models.ForeignKey('self', on_delete=models.CASCADE, related_name='related_items')\n\n        self.assertEqual(label_for_field(\"name\", MyModel), \"Name\")\n        self.assertEqual(label_for_field(\"related_field\", MyModel), \"Related Item\")\n\n    def test_lookup_field(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=255)\n\n        obj = MyModel.objects.create(name=\"test\")\n        self.assertIsInstance(lookup_field(\"name\", obj), models.CharField)\n        with self.assertRaises(FieldDoesNotExist):\n            lookup_field(\"unknown_field\", obj)\n\n    def test_display_for_field(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=255)\n            date_field = models.DateField()\n            bool_field = models.BooleanField()\n\n        obj = MyModel.objects.create(name=\"test\", date_field=timezone.now(), bool_field=True)\n\n        self.assertEqual(display_for_field(\"name\", obj, empty_value_display=\"N/A\"), \"test\")\n        self.assertEqual(display_for_field(\"date_field\", obj, empty_value_display=\"N/A\"), formats.localize(timezone.template_localtime(obj.date_field)))\n        self.assertEqual(display_for_field(\"bool_field\", obj, empty_value_display=\"N/A\"), mark_safe('<span class=\"icon-yes\"></span>'))\n\n    def test_display_for_value(self):\n        self.assertEqual(display_for_value(\"test\"), \"test\")\n        self.assertEqual(display_for_value(True), \"True\")\n        self.assertEqual(display_for_value(False), \"False\")\n        self.assertEqual(display_for_value(123), \"123\")\n        self.assertEqual(display_for_value([1, 2, 3]), \"1, 2, 3\")\n        self.assertEqual(display_for_value(None), \"N/A\")\n\n"], "sample_59": ["\nfrom django.contrib.auth.forms import (\n    AdminPasswordChangeForm,\n    AuthenticationForm,\n    PasswordChangeForm,\n    PasswordResetForm,\n    ReadOnlyPasswordHashField,\n    ReadOnlyPasswordHashWidget,\n    SetPasswordForm,\n    UserChangeForm,\n    UserCreationForm,\n)\nfrom django.contrib.auth.models import User\nfrom django.core.exceptions import ValidationError\nfrom django.core.mail import EmailMessage\nfrom django.test import TestCase, override_settings\nfrom django.utils.encoding import force_bytes\nfrom django.utils.test.context_processors import csrf\nfrom django.utils.timezone import now\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom django.shortcuts import redirect\nfrom django.http import HttpResponseRedirect\n\nclass TestAuthenticationForm(TestCase):\n\n    def test_username_field_length(self):\n        form = AuthenticationForm()\n        self.assertEqual(form.fields[\"username\"].max_length, 254)\n        self.assertEqual(form.fields[\"username\"].widget.attrs[\"maxlength\"], 254)\n\n\n    def test_clean_empty_data(self):\n        form = AuthenticationForm()\n        with self.assertRaises(ValidationError) as e:\n            form.clean()\n        self.assertEqual(e.exception.code, AuthenticationForm.error_messages[\"invalid_login\"])\n\n    def test_clean_invalid_credentials(self):\n        form = AuthenticationForm()\n\n        # Mock the authenticate function to raise an AuthenticationError\n        with patch(\"django.contrib.auth.authenticate\", return_value=None):\n            form.data = {\"username\": \"testuser\", \"password\": \"invalidpassword\"}\n            with self.assertRaises(ValidationError) as e:\n                form.clean()\n            self.assertEqual(e.exception.code, AuthenticationForm.error_messages[\"invalid_login\"])\n\n    def test_clean_inactive_user(self):\n        user = User.objects.create_user(username=\"testuser\", password=\"testpassword\")\n        user.is_active = False\n        user.save()\n        form = AuthenticationForm(data={\"username\": \"testuser\", \"password\": \"testpassword\"})\n        with self.assertRaises(ValidationError) as e:\n            form.clean()\n        self.assertEqual(e.exception.code, AuthenticationForm.error_messages[\"inactive\"])\n\n\nclass TestUserCreationForm(TestCase):\n\n    def test_password_mismatch(self):\n        form = UserCreationForm({\"username\": \"testuser\", \"password1\": \"password\", \"password2\": \"incorrectpassword\"})\n        with self.assertRaises(ValidationError) as e:\n            form.clean()\n        self.assertEqual(e.exception.code, UserCreationForm.error_messages[\"password_mismatch\"])\n\n    def test_save(self):\n        form = UserCreationForm({\"username\": \"testuser\", \"password1\": \"password\", \"password2\": \"password\"})\n        form.save()\n        self.assertEqual(User.objects.count(), 1)\n        self.assertEqual(User.objects.first().username, \"testuser\")\n\n        # Check if password is hashed\n        self.assertTrue(User.objects.first().password)\n\nclass TestUserChangeForm(TestCase):\n\n    def test_user_permissions_queryset(self):\n        form = UserChangeForm(instance=User.objects.create_user(username=\"testuser\"),)\n        self.assertEqual(form.fields[\"user_permissions\"].queryset.count(), 0)\n\n\nclass TestPasswordChangeForm(TestCase):\n\n    def test_password_mismatch(self):\n        user = User.objects.create_user(username=\"testuser\", password=\"testpassword\")\n        form = PasswordChangeForm(user=user, data={\"old_password\": \"testpassword\", \"new_password1\": \"newpassword\", \"new_password2\": \"wrongpassword\"})\n        with self.assertRaises(ValidationError) as e:\n            form.clean()\n        self.assertEqual(e.exception.code, PasswordChangeForm.error_messages[\"password_mismatch\"])\n\n    def test_password_incorrect(self):\n        user = User.objects.create_user(username=\"testuser\", password=\"testpassword\")\n        form = PasswordChangeForm(user=user, data={\"old_password\": \"incorrectpassword\", \"new_password1\": \"newpassword\", \"new_password2\": \"newpassword\"})\n        with self.assertRaises(ValidationError) as e:\n            form.clean()\n        self.assertEqual(e.exception.code, PasswordChangeForm.error_messages[\"password_incorrect\"])\n\n    def test_save(self):\n        user = User.objects.create_user(username=\"testuser\", password=\"testpassword\")\n        form = PasswordChangeForm(user=user, data={\"old_password\": \"testpassword\", \"new_password1\": \"newpassword\", \"new_password2\": \"newpassword\"})\n        form.save()\n        self.assertEqual(user.password, \"pbkdf2_sha256$13$8c90f785608f78470b579873a0184319$84bd2a4c5041ac27480f8e2d8c8b2729\")\n        \n\nclass TestAdminPasswordChangeForm(TestCase):\n\n    def test_password_mismatch(self):\n        user = User.objects.create_user(username=\"testuser\", password=\"testpassword\")\n        form = AdminPasswordChangeForm(instance=user, data={\"password1\": \"newpassword\", \"password2\": \"wrongpassword\"})\n        with self.assertRaises(ValidationError) as e:\n            form.clean()\n        self.assertEqual(e.exception.code, AdminPasswordChangeForm.error_messages[\"password_mismatch\"])\n\n    def test_save(self):\n        user = User.objects.create_user(username=\"testuser\", password=\"testpassword\")\n        form = AdminPasswordChangeForm(instance=user, data={\"password1\": \"newpassword\", \"password2\": \"newpassword\"})\n        form.save()\n        self.assertEqual(user.password, \"pbkdf2_sha256$13$8c90f785608f78470b579873a0184319$84bd2a4c5041ac27480f8e2d8c8b2729\")\n\n\n\nclass TestReadOnlyPasswordHashField(TestCase):\n\n    def test_to_python(self):\n        field = ReadOnlyPasswordHashField()\n        self.assertEqual(field.to_python(\"\"), \"\")\n\n    def test_render(self):\n        field = ReadOnlyPasswordHashField()\n        with patch(\"django.template.loader.render_to_string\") as mock_render:\n            mock_render.return_value = \"test_html\"\n            rendered_html = field.render(None, None, None)\n            self.assertEqual(rendered_html, \"test_html\")\n\nclass TestReadOnlyPasswordHashWidget(TestCase):\n\n    def test_render(self):\n        widget = ReadOnlyPasswordHashWidget()\n        with patch(\"django.template.loader.render_to_string\") as mock_render:\n            mock_render.return_value = \"test_html\"\n            rendered_html = widget.render(None, None, None)\n            self.assertEqual(rendered_html, \"test_html\")\n\nclass TestPasswordResetForm(TestCase):\n\n    def test_get_users(self):\n        # Mock database queries to simulate user existence\n        user1 = User.objects.create_user(username=\"testuser1@example.com\", password=\"password\")\n        user2 = User.objects.create_user(username=\"testuser2@example.com\", password=\"password\")\n        user1.email = \"testuser1@example.com\"\n        user2.email = \"testuser2@example.com\"\n        user1.save()\n        user2.save()\n\n        form = PasswordResetForm()\n        users = form.get_users(\"testuser1@example.com\")\n        self.assertEqual(len(list(users)), 1)\n        self.assertEqual(users.next().username, \"testuser1@example.com\")\n\n    def test_send_mail(self):\n        # Mock EmailMultiAlternatives to simulate sending email\n        with patch(\"django.core.mail.EmailMultiAlternatives\") as mock_email:\n            form = PasswordResetForm()\n            form.send_mail(\n                subject_template_name=\"registration/password_reset_subject.txt\",\n                email_template_name=\"registration/password_reset_email.html\",\n                context={\"email\": \"testuser@example.com\"},\n                from_email=\"noreply@example.com\",\n                to_email=\"testuser@example.com\",\n            )\n            mock_email.assert_called_once_with(\n                \"Password Reset\",\n                \"testuser@example.com\",\n                [\"noreply@example.com\"],\n                \"registration/password_reset_email.html\",\n                {},\n            )\n\n\n"], "sample_69": ["\nimport matplotlib.artist as martist\nimport unittest\nfrom matplotlib.patches import Rectangle\nimport numpy as np\nimport warnings\n\nclass TestArtist(unittest.TestCase):\n\n    def test_getset(self):\n        rect = Rectangle((0, 0), 1, 1)\n\n        # Simple set property\n        rect.set_facecolor('red')\n        self.assertEqual(rect.get_facecolor(), 'red')\n\n        # Test with get_ prefix\n        rect.set_linewidth(2)\n        self.assertEqual(rect.get_linewidth(), 2)\n\n        # Test alias\n        rect.set_edgecolor('blue')\n        self.assertEqual(rect.get_edgecolor(), 'blue')\n        self.assertEqual(rect.get_ec(), 'blue')\n\n        # Test multiple properties\n        rect.set_alpha(0.5)\n        rect.set_transform(np.eye(2))\n        self.assertAlmostEqual(rect.get_alpha(), 0.5)\n        self.assertTrue(np.array_equal(rect.get_transform().as_matrix(), np.eye(2)))\n\n        # Get properties with None\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\")\n            self.assertIsNone(rect.get_hatch())\n            self.assertIsNone(rect.get_label())\n\n    def test_getp(self):\n        rect = Rectangle((0, 0), 1, 1)\n\n        # Single property\n        self.assertEqual(martist.getp(rect, 'facecolor'), 'none')\n\n        # List allowed values\n        martist.getp(rect, 'linestyle')  # Should print allowed linestyles\n\n        # List all properties\n        martist.getp(rect)  # Should print all properties and values\n\n    def test_setp(self):\n        rect = Rectangle((0, 0), 1, 1)\n\n        # Set single property\n        martist.setp(rect, facecolor='green')\n        self.assertEqual(rect.get_facecolor(), 'green')\n\n        # Set multiple properties\n        martist.setp(rect, linewidth=3, edgecolor='blue')\n        self.assertEqual(rect.get_linewidth(), 3)\n        self.assertEqual(rect.get_edgecolor(), 'blue')\n\n        # MATLAB-style string/value pairs\n        martist.setp(rect, 'linewidth', 4, 'color', 'red')\n        self.assertEqual(rect.get_linewidth(), 4)\n        self.assertEqual(rect.get_color(), 'red')\n\n        # Set properties with allowed values\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\")\n            martist.setp(rect, linestyle='--')  # Valid linestyle\n            martist.setp(rect, linestyle='invalid')  # Should raise ValueError\n\n\n\n"], "sample_48": ["\nfrom django.db.backends.ddl_references import (Columns, Expressions, ForeignKeyName, IndexName, Statement, Table)\nfrom unittest import mock\n\n\nclass TestReferenceBase(object):\n\n    def test_repr(self):\n        ref = self.reference_class()\n        self.assertEqual(repr(ref), '<%s %r>' % (self.reference_class.__name__, str(ref)))\n\n    def test_str(self):\n        ref = self.reference_class()\n        self.assertIsInstance(str(ref), str)\n\n\nclass TestTable(TestReferenceBase):\n    reference_class = Table\n\n    def test_references_table(self):\n        ref = self.reference_class('users', lambda x: x)\n        self.assertTrue(ref.references_table('users'))\n        self.assertFalse(ref.references_table('accounts'))\n\n    def test_rename_table_references(self):\n        ref = self.reference_class('users', lambda x: x)\n        ref.rename_table_references('users', 'accounts')\n        self.assertEqual(ref.table, 'accounts')\n\n\nclass TestTableColumns(TestReferenceBase):\n    reference_class = TableColumns\n\n    def test_references_column(self):\n        ref = self.reference_class('users', ['id', 'name'])\n        self.assertTrue(ref.references_column('users', 'id'))\n        self.assertFalse(ref.references_column('users', 'email'))\n\n    def test_rename_column_references(self):\n        ref = self.reference_class('users', ['id', 'name'])\n        ref.rename_column_references('users', 'id', 'user_id')\n        self.assertEqual(ref.columns, ['user_id', 'name'])\n\n\nclass TestColumns(TestTableColumns):\n    reference_class = Columns\n\n    def test_str(self):\n        ref = self.reference_class(\n            'users',\n            ['id', 'name'],\n            lambda x: x,\n            col_suffixes=('', '_alias')\n        )\n        self.assertEqual(str(ref), 'id _alias, name _alias')\n\nclass TestIndexName(TestTableColumns):\n    reference_class = IndexName\n\n    def test_str(self):\n        ref = self.reference_class(\n            'users', ['id', 'name'], 'suffix', lambda x, _, __: f'{x}_index'\n        )\n        self.assertEqual(str(ref), 'users_index')\n\nclass TestIndexColumns(TestTableColumns):\n    reference_class = IndexColumns\n\n    def test_str(self):\n        ref = self.reference_class(\n            'users', ['id', 'name'], lambda x: x, col_suffixes=('', '_alias'), opclasses=('btree', 'btree')\n        )\n        self.assertEqual(str(ref), 'id btree _alias, name btree _alias')\n\nclass TestForeignKeyName(TestTableColumns):\n    reference_class = ForeignKeyName\n\n    def test_references_table_and_column(self):\n        from_table = 'users'\n        from_columns = ['id']\n        to_table = 'accounts'\n        to_columns = ['id']\n        suffix_template = '{to_table}_{to_column}'\n        create_fk_name = lambda x, _, __: f'{x}_{suffix_template}'\n        ref = self.reference_class(from_table, from_columns, to_table, to_columns, suffix_template, create_fk_name)\n        self.assertTrue(ref.references_table(from_table))\n        self.assertTrue(ref.references_column(from_table, from_columns[0]))\n        self.assertTrue(ref.references_table(to_table))\n        self.assertTrue(ref.references_column(to_table, to_columns[0]))\n\n    def test_rename_table_and_column_references(self):\n        from_table = 'users'\n        from_columns = ['id']\n        to_table = 'accounts'\n        to_columns = ['id']\n        suffix_template = '{to_table}_{to_column}'\n        create_fk_name = lambda x, _, __: f'{x}_{suffix_template}'\n        ref = self.reference_class(from_table, from_columns, to_table, to_columns, suffix_template, create_fk_name)\n        ref.rename_table_references(from_table, 'users_old')\n        ref.rename_column_references(to_table, to_columns[0], 'account_id')\n        self.assertEqual(ref.table, 'users_old')\n        self.assertEqual(ref.to_reference.table, 'accounts')\n        self.assertEqual(ref.to_reference.columns, ['account_id'])\n\n\nclass TestStatement(TestReferenceBase):\n    reference_class = Statement\n\n    def test_references(self):\n        template = 'SELECT %s FROM %s'\n        parts = {'%s': 'id', '%s': 'users'}\n        ref = self.reference_class(template, **parts)\n        self.assertTrue(ref.references_table('users'))\n        self.assertTrue(ref.references_column('users', 'id'))\n\n    def test_rename(self):\n        template = 'SELECT %s FROM %s'\n        parts = {'%s': 'id', '%s': 'users'}\n        ref = self.reference_class(template, **parts)\n        ref.rename_table_references('users', 'accounts')\n        ref.rename_column_references('users', 'id', 'user_id')\n        self.assertEqual(ref.parts['%s'], 'user_id')\n        self.assertEqual(ref.parts['%s'], 'accounts')\n\n\nclass TestExpressions(TestReferenceBase):\n    reference_class = Expressions\n    \n    def test_rename_table_references(self):\n        expressions = mock.Mock()\n        compiler = mock.Mock()\n        quote_value = mock.Mock()\n        ref = self.reference_class(\n            'users',\n            expressions,\n            compiler,\n            quote_value,\n        )\n        ref.rename_table_references('users', 'accounts')\n        expressions.relabeled_clone.assert_called_once_with({\n            'users': 'accounts'\n        })\n\n    def test_rename_column_references(self):\n        expressions = mock.Mock()\n        compiler = mock.Mock()\n        quote_value = mock.Mock()\n        ref = self.reference_class(\n            'users',\n            expressions,\n            compiler,\n            quote_value,\n        )\n        ref.rename_column_references('users', 'id', 'user_id')\n        compiler.query._gen_cols.assert_called_once_with([expressions])\n        self.assertEqual(ref.columns, ['user_id'])\n        expressions.assert_has_calls([mock.call.target.column = 'user_id'])\n\n    def test_str(self):\n        expressions = mock.Mock()\n        compiler = mock.Mock()\n        quote_value = mock.Mock()\n        ref = self.reference_class(\n            'users',\n            expressions,\n            compiler,\n            quote_value,\n        )\n        compiler.compile.return_value = ('sql', tuple())\n        self.assertEqual(str(ref), 'sql')\n\n"], "sample_33": ["\nimport unittest\n\nfrom django.forms import ModelChoiceField, ModelMultipleChoiceField, ChoiceField, Form, ValidationError\nfrom django.conf import settings\nfrom django.db import models\nfrom django.forms.models import modelform_factory, BaseModelFormSet, inlineformset_factory\nfrom django.forms.utils import ErrorList, flatatt\nfrom django.utils.safestring import mark_safe\nfrom django.test import TestCase\n\n\nclass ChoiceModel(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\n\nclass MyForm(Form):\n    field1 = CharField()\n    field2 = ChoiceField(choices=())\n\n\nclass MyModelForm(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass ModelChoiceFieldTestCase(TestCase):\n    def test_to_python_unicode(self):\n        queryset = ChoiceModel.objects.all()\n        field = ModelChoiceField(queryset)\n        field.to_python(\"1\")\n        self.assertEqual(field.to_python(\"1\"), queryset.filter(pk=1)[0])\n\n    def test_to_python_int(self):\n        queryset = ChoiceModel.objects.all()\n        field = ModelChoiceField(queryset)\n        self.assertEqual(field.to_python(1), queryset.filter(pk=1)[0])\n\n    def test_to_python_none(self):\n        queryset = ChoiceModel.objects.all()\n        field = ModelChoiceField(queryset)\n        self.assertEqual(field.to_python(None), None)\n\n    def test_to_python_invalid(self):\n        queryset = ChoiceModel.objects.all()\n        field = ModelChoiceField(queryset)\n        with self.assertRaises(ValidationError):\n            field.to_python(\"invalid\")\n\n    def test_to_python_empty_queryset(self):\n        queryset = ChoiceModel.objects.none()\n        field = ModelChoiceField(queryset)\n        with self.assertRaises(ValidationError):\n            field.to_python(\"1\")\n\n\nclass ModelMultipleChoiceFieldTestCase(TestCase):\n    def test_to_python_list(self):\n        queryset = ChoiceModel.objects.all()\n        field = ModelMultipleChoiceField(queryset)\n        self.assertEqual(\n            field.to_python([1, 2]),\n            queryset.filter(pk__in=(1, 2)).values_list(\"pk\", flat=True),\n        )\n\n    def test_to_python_tuple(self):\n        queryset = ChoiceModel.objects.all()\n        field = ModelMultipleChoiceField(queryset)\n        self.assertEqual(\n            field.to_python((1, 2)),\n            queryset.filter(pk__in=(1, 2)).values_list(\"pk\", flat=True),\n        )\n\n    def test_to_python_empty_list(self):\n        queryset = ChoiceModel.objects.all()\n        field = ModelMultipleChoiceField(queryset)\n        self.assertEqual(field.to_python([]), queryset.none())\n\n    def test_to_python_invalid_list(self):\n        queryset = ChoiceModel.objects.all()\n        field = ModelMultipleChoiceField(queryset)\n        with self.assertRaises(ValidationError):\n            field.to_python([\"invalid1\", 2])\n\n    def test_to_python_invalid_type(self):\n        queryset = ChoiceModel.objects.all()\n        field = ModelMultipleChoiceField(queryset)\n        with self.assertRaises(ValidationError):\n            field.to_python(1)\n\n\nclass ModelChoiceIteratorTestCase(TestCase):\n    def test_iter(self):\n        queryset = ChoiceModel.objects.all()\n        field = ModelChoiceField(queryset)\n        iterator = field.iterator\n\n        for obj in iterator:\n            self.assertIsInstance(obj, tuple)\n            self.assertIsInstance(obj[0], str)\n            self.assertIsInstance(obj[1], str)\n\n\nclass ModelFormFactoryTestCase(TestCase):\n    def test_modelform_factory(self):\n        FormClass = modelform_factory(MyModelForm)\n        self.assertEqual(FormClass, MyModelForm)\n\n\nclass BaseModelFormSetTestCase(TestCase):\n    def test_base_formset(self):\n        FormClass = MyModelForm\n        FormSet = BaseModelFormSet(\n            data=None,\n            prefix='myprefix',\n            queryset=MyModelForm.objects.all(),\n            instance=None,\n            form_kwargs={'fields': ['name']},\n        )\n        self.assertEqual(FormSet._meta.model, FormClass)\n\n\nclass InlineFormSetTestCase(TestCase):\n    def test_inlineformset_factory(self):\n        FormSet = inlineformset_factory(\n            parent_model=MyModelForm,\n            model=ChoiceModel,\n            form=ModelChoiceField,\n        )\n        self.assertEqual(FormSet.fk, None)\n\n"], "sample_139": ["\nfrom sympy.matrices.expressions.blockmatrix import ( block_collapse, bc_matmul, bc_block_plus_ident, BlockDiagMatrix, BlockMatrix, bc_dist, bc_matadd, bc_transpose, bc_inverse, blockcut, reblock_2x2, deblock)\nfrom sympy.matrices.expressions import (MatrixSymbol, Identity, Inverse, trace, Transpose, det, ZeroMatrix)\nfrom sympy.functions import transpose\nfrom sympy import Q\nimport sympy\nimport unittest\n\nclass TestBlockMatrix(unittest.TestCase):\n    def test_block_matrix_construction(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        A = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(A.blockshape, (2, 2))\n        self.assertEqual(A.rowblocksizes, [2, 3])\n        self.assertEqual(A.colblocksizes, [2, 2])\n        self.assertEqual(A.blocks[0, 0].rows, 2)\n        self.assertEqual(A.blocks[0, 0].cols, 2)\n\n    def test_block_matrix_equality(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        A = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        C = BlockMatrix([[X+sympy.eye(2), Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(A, B)\n        self.assertNotEqual(A, C)\n\n    def test_block_diagonal_matrix_construction(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 3, 3)\n        diag_mat = BlockDiagMatrix(X, Y)\n        self.assertEqual(diag_mat.blockshape, (2, 2))\n        self.assertEqual(diag_mat.diag, [X, Y])\n\n    def test_block_collapse(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n\n        C = BlockMatrix([[Identity(2), Z]])\n        self.assertEqual(block_collapse(C*B), BlockMatrix([[X, Z + Z*Y]]))\n\n    def test_block_matadd(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        A = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        B = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        self.assertEqual(bc_matadd(MatAdd(A, B)), A + B)\n        \n    def test_block_inverse(self):\n        X = MatrixSymbol('X', 2, 2)\n        Y = MatrixSymbol('Y', 2, 2)\n        Z = MatrixSymbol('Z', 2, 3)\n        B1 = BlockMatrix([[X, Z], [ZeroMatrix(3, 2), Y]])\n        B2 = BlockDiagMatrix(X, Y)\n        self.assertEqual(bc_inverse(Inverse(B1)), Inverse(B1))\n        self.assertEqual(bc_inverse(Inverse(B2)), Inverse(B2))\n\n    def test_blockcut(self):\n        M = ImmutableMatrix(4, 4, range(16))\n        B = blockcut(M, (1, 3), (1, 3))\n        self.assertEqual(B.blockshape, (2, 2))\n        self.assertEqual(B.blocks[0, 0].shape, (1, 3))\n        self.assertEqual(B.blocks[0, 1].shape, (1, 1))\n\n\n"], "sample_73": ["\nimport unittest\nimport matplotlib.pyplot as plt\nfrom matplotlib.figure import Figure\nfrom mpl_toolkits.axes_grid1 import Grid, ImageGrid\nfrom mpl_toolkits.axes_grid1 import axes_size as Size\nfrom matplotlib.patches import Rectangle\n\nclass TestGrid(unittest.TestCase):\n\n    def test_grid_creation(self):\n        fig = Figure(figsize=(6, 4))\n        grid = Grid(fig, rect=(0.1, 0.1, 0.8, 0.8),\n                    nrows_ncols=(2, 3), ngrids=4)\n        self.assertEqual(len(grid.axes_all), 4)\n        self.assertEqual(grid.get_geometry(), (2, 3))\n\n        # Test ngrids parameter\n        grid = Grid(fig, rect=(0.1, 0.1, 0.8, 0.8),\n                    nrows_ncols=(2, 3), ngrids=1)\n        self.assertEqual(len(grid.axes_all), 1)\n\n    def test_grid_direction(self):\n        fig = Figure(figsize=(6, 4))\n        grid_row = Grid(fig, rect=(0.1, 0.1, 0.8, 0.8),\n                        nrows_ncols=(2, 3), direction=\"row\")\n        grid_col = Grid(fig, rect=(0.1, 0.1, 0.8, 0.8),\n                        nrows_ncols=(2, 3), direction=\"column\")\n\n        self.assertEqual(grid_row.axes_column[0][0].get_position().left, 0.12)\n        self.assertEqual(grid_col.axes_column[0][0].get_position().bottom, 0.12)\n\n    def test_grid_axes_pad(self):\n        fig = Figure(figsize=(6, 4))\n        grid = Grid(fig, rect=(0.1, 0.1, 0.8, 0.8),\n                    nrows_ncols=(2, 3), axes_pad=0.05)\n\n        # Check default axes pad\n        self.assertAlmostEqual(grid.axes_all[0].get_position().width, 0.23)\n        self.assertAlmostEqual(grid.axes_all[0].get_position().height, 0.23)\n\n        # Check new axes pad\n        grid.set_axes_pad(0.1)\n        self.assertAlmostEqual(grid.axes_all[0].get_position().width, 0.17)\n        self.assertAlmostEqual(grid.axes_all[0].get_position().height, 0.17)\n\n    def test_grid_label_mode(self):\n        fig = Figure(figsize=(6, 4))\n        grid = Grid(fig, rect=(0.1, 0.1, 0.8, 0.8),\n                    nrows_ncols=(2, 3), label_mode=\"L\")\n\n        self.assertIsNotNone(grid.axes_all[0].xaxis.get_label())\n        self.assertIsNotNone(grid.axes_all[0].yaxis.get_label())\n        self.assertIsNone(grid.axes_all[1].xaxis.get_label())\n        self.assertIsNone(grid.axes_all[1].yaxis.get_label())\n\n        grid = Grid(fig, rect=(0.1, 0.1, 0.8, 0.8),\n                    nrows_ncols=(2, 3), label_mode=\"1\")\n        self.assertIsNotNone(grid.axes_all[0].xaxis.get_label())\n        self.assertIsNotNone(grid.axes_all[0].yaxis.get_label())\n        self.assertIsNone(grid.axes_all[1].xaxis.get_label())\n        self.assertIsNone(grid.axes_all[1].yaxis.get_label())\n\n\nclass TestImageGrid(unittest.TestCase):\n\n    def test_image_grid_creation(self):\n        fig = Figure(figsize=(6, 4))\n        image_grid = ImageGrid(fig, rect=(0.1, 0.1, 0.8, 0.8),\n                              nrows_ncols=(2, 3), ngrids=4)\n        self.assertEqual(len(image_grid.axes_all), 4)\n        self.assertEqual(len(image_grid.cbar_axes), 4)\n\n\n    def test_image_grid_colorbar(self):\n        fig = Figure(figsize=(6, 4))\n        image_grid = ImageGrid(fig, rect=(0.1, 0.1, 0.8, 0.8),\n                              nrows_ncols=(2, 3), ngrids=4,\n                              cbar_mode=\"single\")\n        self.assertEqual(len(image_grid.cbar_axes), 1)\n        self.assertIsNotNone(image_grid.axes_all[0].cax)\n\n        image_grid = ImageGrid(fig, rect=(0.1, 0.1, 0.8, 0.8),\n                              nrows_ncols=(2, 3), ngrids=4,\n                              cbar_mode=\"each\")\n        self.assertEqual(len(image_grid.cbar_axes), 4)\n\n        image_grid = ImageGrid(fig, rect=(0.1, 0.1, 0.8, 0.8),\n                              nrows_ncols=(2, 3), ngrids=4,\n                              cbar_mode=\"edge\", cbar_location=\"right\")\n        self.assertEqual(len(image_grid.cbar_axes), 3)\n\n\n\n"], "sample_27": ["\nimport unittest\nfrom unittest.mock import MagicMock, patch\nfrom django.http import HttpResponse\nfrom django.test import TestCase\nfrom django.utils.module_loading import import_string\nfrom django.utils.encoding import force_str\nfrom django.template import Context\nfrom django.conf import settings\nfrom django.urls import resolve\n\nfrom django.views.debug import ( \n    CallableSettingWrapper, ExceptionReporter, Path, SafeExceptionReporterFilter, default_urlconf, get_default_exception_reporter_filter, technical_404_response, technical_500_response, \n    get_exception_reporter_class, get_exception_reporter_filter, \n)\n\nclass TestExceptionReporter(TestCase):\n\n    def setUp(self):\n        self.request = MagicMock(spec=HttpRequest)\n        self.exc_type = Exception\n        self.exc_value = Exception(\"Test Exception\")\n        self.tb = MagicMock(spec=traceback.Traceback)\n        self.reporter = ExceptionReporter(self.request, self.exc_type, self.exc_value, self.tb)\n\n    def test_get_traceback_data(self):\n        data = self.reporter.get_traceback_data()\n        self.assertTrue('frames' in data)\n        self.assertTrue('request' in data)\n        self.assertTrue('settings' in data)\n        self.assertTrue('sys_executable' in data)\n        self.assertTrue('sys_version_info' in data)\n        self.assertTrue('server_time' in data)\n        self.assertTrue('django_version_info' in data)\n        self.assertTrue('sys_path' in data)\n\n    def test_get_traceback_html(self):\n        html = self.reporter.get_traceback_html()\n        self.assertIsInstance(html, HttpResponse)\n\n    def test_get_traceback_text(self):\n        text = self.reporter.get_traceback_text()\n        self.assertIsInstance(text, HttpResponse)\n\n    def test_get_traceback_frames_with_exception(self):\n        self.reporter.get_traceback_frames()\n\n\nclass TestSafeExceptionReporterFilter(TestCase):\n    def setUp(self):\n        self.filter = SafeExceptionReporterFilter()\n\n    def test_cleanse_setting(self):\n        self.assertIsInstance(self.filter.cleanse_setting(\"API_KEY\", \"my_secret_key\"), str)\n\n    def test_cleanse_setting_with_dict(self):\n        settings_dict = {\"API_KEY\": \"my_secret_key\", \"OTHER\": {\"some\": \"data\"}}\n        cleansed_dict = self.filter.cleanse_setting({}, settings_dict)\n        self.assertEqual(cleansed_dict['API_KEY'], '********************')\n\n    def test_cleanse_setting_with_list(self):\n        settings_list = [\"API_KEY\", \"OTHER\"]\n        cleansed_list = self.filter.cleanse_setting('', settings_list)\n        self.assertEqual(cleansed_list[0], '********************')\n\n    def test_cleanse_setting_with_tuple(self):\n        settings_tuple = (\"API_KEY\", \"OTHER\")\n        cleansed_tuple = self.filter.cleanse_setting('', settings_tuple)\n        self.assertEqual(cleansed_tuple[0], '********************')\n\n    def test_is_active(self):\n        self.assertTrue(self.filter.is_active(MagicMock(request=None)))\n        settings.DEBUG = False\n        self.assertFalse(self.filter.is_active(MagicMock(request=None)))\n\n    def test_get_safe_settings(self):\n        settings.API_KEY = 'my_secret_key'\n        settings.OTHER_SECRET = 'another_secret'\n        cleansed_settings = self.filter.get_safe_settings()\n        self.assertEqual(cleansed_settings[\"API_KEY\"], '********************')\n\n    def test_get_cleansed_multivaluedict(self):\n        post_data = MultiValueDict({'API_KEY': 'my_secret_key'})\n        cleansed_data = self.filter.get_cleansed_multivaluedict(MagicMock(request=None), post_data)\n        self.assertEqual(cleansed_data['API_KEY'], ['********************'])\n\n    def test_get_post_parameters(self):\n        settings.sensitive_post_parameters = ['API_KEY', 'OTHER_SECRET']\n        post_data = MultiValueDict({'API_KEY': 'my_secret_key', 'OTHER_SECRET': 'another_secret'})\n        cleansed_data = self.filter.get_post_parameters(MagicMock(request=None))\n        self.assertEqual(cleansed_data['API_KEY'], ['********************'])\n        self.assertEqual(cleansed_data['OTHER_SECRET'], ['********************'])\n\nclass TestPath(TestCase):\n\n    def test_Path(self):\n        path = Path('/some/path')\n        self.assertEqual(path.parent, Path('/some'))\n        self.assertEqual(path.name, 'path')\n\n\nclass TestTechnical404Response(TestCase):\n\n    def setUp(self):\n        self.request = MagicMock(spec=HttpRequest, path_info='/test/')\n        self.exception = Http404('Not Found')\n\n    def test_default_urlconf(self):\n        response = default_urlconf(self.request)\n        self.assertEqual(response.status_code, 404)\n\n    def test_technical_404_response(self):\n        response = technical_404_response(self.request, self.exception)\n        self.assertEqual(response.status_code, 404)\n\n\n\nclass TestTechnical500Response(TestCase):\n\n    def setUp(self):\n        self.request = MagicMock(spec=HttpRequest)\n        self.exc_type = Exception\n        self.exc_value = Exception(\"Test Exception\")\n        self.tb = MagicMock(spec=traceback.Traceback)\n    \n    def test_technical_500_response(self):\n        response = technical_500_response(self.request, self.exc_value, self.exc_type, self.tb)\n        self.assertEqual(response.status_code, 500)\n\n\n\n"], "sample_140": ["\nfrom sympy import ( Abs, acos, adjoint, arg, atan, atan2, conjugate, cos, DiracDelta, E, exp, expand, Expr, Function, Heaviside, I, im, log, nan, oo, pi, Rational, re, S, sign, sin, sqrt, Symbol, symbols, transpose, zoo, exp_polar, Piecewise, Interval, comp, Integral, Matrix, ImmutableMatrix, SparseMatrix, ImmutableSparseMatrix, MatrixSymbol, FunctionMatrix, Lambda, Derivative, Eq)\nfrom sympy.core.expr import unchanged\nfrom sympy.core.function import ArgumentIndexError\nfrom sympy.testing.pytest import XFAIL, raises\nfrom sympy import polar_lift, polarify\nfrom sympy import (exp_polar, polar_lift, exp, unpolarify, principal_branch)\nfrom sympy import gamma, erf, sin, tanh, uppergamma, Eq, Ne\nfrom sympy.abc import x\nfrom sympy import Matrix, simplify\nfrom sympy import (periodic_argument, unbranched_argument, oo, principal_branch, polar_lift, pi)\nfrom sympy import principal_branch\nfrom sympy import principal_branch, polar_lift, exp_polar\nfrom sympy import simplify\nfrom sympy.functions.elementary.complexes import unpolarify\n\ndef test_polar_lift():\n    from sympy import Symbol, I\n    assert polar_lift(2).args[0] == 2\n    assert polar_lift(-2).args[0] == -2\n    assert polar_lift(2*I).args[0] == 2*I\n    assert polar_lift(-2*I).args[0] == -2*I\n    p = Symbol('p', polar=True)\n    assert polar_lift(p) == p\n    assert polar_lift(p * 2) == 2*p\n    assert polar_lift(polar_lift(p)) == polar_lift(p)\n\ndef test_periodic_argument():\n    from sympy import Symbol, I, pi, exp_polar\n    z = Symbol('z')\n    assert periodic_argument(exp_polar(3*I*pi), 2*pi) == 0\n    assert periodic_argument(exp_polar(5*I*pi), 2*pi) == pi\n    assert periodic_argument(exp_polar(7*I*pi), 2*pi) == 2*pi\n    assert periodic_argument(exp_polar(3*I*pi), pi) == 0\n    assert periodic_argument(exp_polar(I*pi), pi) == 0\n\ndef test_principal_branch():\n    from sympy import Symbol, I, pi\n    z = Symbol('z')\n    assert principal_branch(z, 2*pi) == z\n    assert principal_branch(3*exp_polar(2*I*pi), 2*pi) == 3\n\ndef test_unpolarify():\n    from sympy import I, exp_polar, sin\n    assert unpolarify(polar_lift(I + 2)) == 2 + I\n    assert unpolarify(sin(polar_lift(I + 7))) == sin(7 + I)\n\n"], "sample_137": ["\nfrom sympy.physics.units.util import convert_to, quantity_simplify, check_dimensions\nfrom sympy import (\n    Add, Mul, Pow, Symbol, Quantity, UnitSystem,\n    meter, kilogram, second,  \n    electric_charge, ampere, volt, ohm, second,\n    gravitational_constant, speed_of_light, hbar,\n    inch, foot, mile, kilometer,\n)\nfrom sympy.physics.units.prefixes import kilo\n\n\ndef test_convert_to_single_unit():\n    assert convert_to(meter, kilometer) == 1000*meter / kilometer\n    assert convert_to(mile, kilometer).n() == 1.609344*kilometer\n\ndef test_convert_to_multiple_units():\n    assert convert_to(speed_of_light, [meter, second]) == 299792458*meter/second\n    assert convert_to(3*newton, [centimeter, gram, second]).n() == 300000*centimeter*gram/second**2\n\n\ndef test_convert_to_complex_units():\n    assert convert_to(atomic_mass_constant, [gravitational_constant, speed_of_light, hbar]).n() == 7.62963085040767e-20*gravitational_constant**(-0.5)*hbar**0.5*speed_of_light**0.5\n\ndef test_quantity_simplify():\n    assert quantity_simplify(kilo*foot*inch) == 250*foot**2/3\n    assert quantity_simplify(foot - 6*inch) == foot/2\n    \n\ndef test_check_dimensions():\n    assert check_dimensions(10*meter) is 10*meter\n    assert check_dimensions(meter + 10) is meter + 10\n\n\n\n"], "sample_110": ["\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom sklearn.model_selection import LeaveOneOut\nfrom sklearn.model_selection import LeaveOneGroupOut\nfrom sklearn.model_selection import LeavePOut\nfrom sklearn.model_selection import LeavePGroupsOut\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import GroupShuffleSplit\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.model_selection import PredefinedSplit\nfrom sklearn.model_selection import check_cv\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection._split import _validate_shuffle_split, _build_repr\nimport numpy as np\nimport warnings\nfrom sklearn.utils.testing import assert_array_almost_equal\nfrom types import FunctionType\n\ndef test__validate_shuffle_split():\n    # Test different input types and edge cases\n    assert _validate_shuffle_split(10, 0.3, None, default_test_size=0.2) == (7, 3)\n    assert _validate_shuffle_split(10, None, 0.7, default_test_size=0.2) == (3, 7)\n    assert _validate_shuffle_split(10, 0.3, 3) == (4, 6)\n    assert _validate_shuffle_split(10, 0.3, 3, default_test_size=0.2) == (4, 6)\n    assert _validate_shuffle_split(10, 0.3, 3, default_test_size=0.25) == (4, 6)\n    assert _validate_shuffle_split(10, 0.3, 0.8) is None  \n    assert _validate_shuffle_split(10, None, 1.1) is None\n    assert _validate_shuffle_split(10, 1.1, None) is None\n\ndef test_check_cv():\n    # Test different input types and edge cases\n    assert check_cv(5).get_n_splits() == 5\n    assert check_cv(10).get_n_splits() == 10\n    cv = StratifiedKFold(n_splits=5)\n    assert check_cv(cv).get_n_splits() == 5\n    assert check_cv((lambda a, b: ((a, b), (a, b)))).get_n_splits() == 2\n\n    with pytest.raises(ValueError):\n        check_cv(None)\n   \n    with pytest.raises(ValueError):\n        check_cv('not an object')\n    \n    with pytest.raises(ValueError):\n        check_cv(0)\n\n    with pytest.raises(ValueError):\n        check_cv([1, 2, 3]) \n\ndef test_train_test_split():\n    # Define a sample dataset\n    X = np.arange(10).reshape((5, 2))\n    y = np.array([0, 1, 2, 3, 4])\n\n    # Test default settings (test_size=0.25)\n    X_train, X_test, y_train, y_test = train_test_split(X, y)\n    assert X_train.shape[0] == 7\n    assert X_test.shape[0] == 3\n    assert y_train.shape[0] == 7\n    assert y_test.shape[0] == 3\n\n    # Test explicit test_size\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)\n    assert X_train.shape[0] == 6\n    assert X_test.shape[0] == 4\n    assert y_train.shape[0] == 6\n    assert y_test.shape[0] == 4\n\n    # Test explicit train_size\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.75)\n    assert X_train.shape[0] == 8\n    assert X_test.shape[0] == 2\n    assert y_train.shape[0] == 8\n    assert y_test.shape[0] == 2\n\n    # Test with stratify\n    X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.25)\n    assert y_train.tolist() == sorted(list(set(y_train)))  # Check for stratification\n\n    # Test shuffle=False\n    X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=False)\n    assert np.all(np.sort(X_train) == X[:X_train.shape[0]])  # Check that data is not shuffled\n\n\n\n"], "sample_111": ["\nimport unittest\nfrom sklearn.svm.base import _get_liblinear_solver_type\nimport numpy as np\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.exceptions import (NotFittedError, UndefinedMetricWarning)\nfrom sklearn.svm import SVC\n\nclass TestBaseSVC(unittest.TestCase):\n    def test_get_liblinear_solver_type_ovr(self):\n        self.assertEqual(_get_liblinear_solver_type(multi_class='ovr',\n                    penalty='l2', loss='logistic_regression', dual=False),\n                    0)\n\n    def test_get_liblinear_solver_type_crammer_singer(self):\n        self.assertEqual(_get_liblinear_solver_type(multi_class='crammer_singer',\n                    penalty='l2', loss='logistic_regression', dual=False),\n                    4)\n\n    def test_get_liblinear_solver_type_error_multi_class(self):\n        with self.assertRaises(ValueError):\n            _get_liblinear_solver_type(multi_class='invalid',\n                    penalty='l2', loss='logistic_regression', dual=False)\n\n    def test_get_liblinear_solver_type_error_loss(self):\n        with self.assertRaises(ValueError):\n            _get_liblinear_solver_type(multi_class='ovr',\n                    penalty='l2', loss='invalid', dual=False)\n\n    def test_get_liblinear_solver_type_error_penalty(self):\n        with self.assertRaises(ValueError):\n            _get_liblinear_solver_type(multi_class='ovr',\n                    penalty='invalid', loss='logistic_regression', dual=False)\n\n    def test_get_liblinear_solver_type_error_dual(self):\n        with self.assertRaises(ValueError):\n            _get_liblinear_solver_type(multi_class='ovr',\n                    penalty='l2', loss='logistic_regression', dual='invalid')\n\n\n# This will test a simple classification task\n    def test_fit_and_predict(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n        clf = SVC(kernel='linear', probability=True, C=1.0)\n        clf.fit(X, y)\n        predictions = clf.predict(X)\n        self.assertEqual(np.sum(predictions == y), len(y),\n                         'The accuracy is not 100%')\n        \n\n    def test_predict_proba_after_fit(self):\n        X, y = make_classification(n_samples=100, n_features=10, random_state=42)\n        clf = SVC(kernel='linear', probability=True, C=1.0)\n        clf.fit(X, y)\n        probs = clf.predict_proba(X)\n        self.assertTrue(np.all(probs >= 0),\n                         'Probs should be greater than or equal to 0')\n        self.assertTrue(np.all(probs[:, 0] + probs[:, 1] >= 0.99998),\n                         'Prob should sum to 1')\n\n\n\n"], "sample_113": ["\nfrom unittest.mock import Mock, patch\nfrom sphinx.environment.adapters.indexentries import IndexEntries\n\n\nclass TestIndexEntries(object):\n\n    def test_create_index_single(self):\n        env = Mock(spec=BuildEnvironment)\n        builder = Mock(spec=Builder)\n        domain = Mock(spec=IndexDomain)\n        env.get_domain = lambda self, x: domain\n        index_entries = IndexEntries(env)\n\n        domain.entries = {\n            'example.txt': [('single', 'Test Function', 'test_id', 'Test Function', None)]\n        }\n\n        result = index_entries.create_index(builder, group_entries=False)\n        expected = [\n            ('Test Function', [('Test Function', 'example.txt#test_id')])\n        ]\n        assert result == expected\n\n    def test_create_index_pair(self):\n        env = Mock(spec=BuildEnvironment)\n        builder = Mock(spec=Builder)\n        domain = Mock(spec=IndexDomain)\n        env.get_domain = lambda self, x: domain\n        index_entries = IndexEntries(env)\n\n        domain.entries = {\n            'example.txt': [('pair', 'First Item', 'Second Item', 'First Item', None)]\n        }\n\n        result = index_entries.create_index(builder, group_entries=False)\n        expected = [\n            ('First Item', [('First Item', 'example.txt#'),\n                           ('Second Item', 'example.txt#')]),\n            ('Second Item', [('Second Item', 'example.txt#'),\n                             ('First Item', 'example.txt#')])\n        ]\n        assert result == expected\n\n    def test_create_index_triple(self):\n        env = Mock(spec=BuildEnvironment)\n        builder = Mock(spec=Builder)\n        domain = Mock(spec=IndexDomain)\n        env.get_domain = lambda self, x: domain\n        index_entries = IndexEntries(env)\n\n        domain.entries = {\n            'example.txt': [('triple', 'First Item', 'Second Item', 'Third Item', 'First Item')]\n        }\n\n        result = index_entries.create_index(builder, group_entries=False)\n        expected = [\n            ('First Item', [('First Item', 'example.txt#'),\n                           ('Second Item Third Item', 'example.txt#')]),\n            ('Second Item Third Item', [('First Item', 'example.txt#'),\n                                     ('Second Item Third Item', 'example.txt#')]),\n            ('Third Item First Item', [('Second Item', 'example.txt#'),\n                                     ('First Item', 'example.txt#')])\n        ]\n        assert result == expected\n\n    def test_create_index_see(self):\n        env = Mock(spec=BuildEnvironment)\n        builder = Mock(spec=Builder)\n        domain = Mock(spec=IndexDomain)\n        env.get_domain = lambda self, x: domain\n        index_entries = IndexEntries(env)\n\n        domain.entries = {\n            'example.txt': [('see', 'First Item', 'See Item', 'See Item', None)]\n        }\n\n        result = index_entries.create_index(builder, group_entries=False)\n        expected = [\n            ('First Item', [('First Item', 'example.txt#'),\n                           ('see See Item', 'example.txt#')])\n        ]\n        assert result == expected\n\n    def test_create_index_seealso(self):\n        env = Mock(spec=BuildEnvironment)\n        builder = Mock(spec=Builder)\n        domain = Mock(spec=IndexDomain)\n        env.get_domain = lambda self, x: domain\n        index_entries = IndexEntries(env)\n\n        domain.entries = {\n            'example.txt': [('seealso', 'First Item', 'See Item', 'See Item', None)]\n        }\n\n        result = index_entries.create_index(builder, group_entries=False)\n        expected = [\n            ('First Item', [('First Item', 'example.txt#'),\n                           ('see also See Item', 'example.txt#')])\n        ]\n        assert result == expected\n\n\n"], "sample_16": ["\nimport unittest\nfrom django.core.exceptions import (\n    FieldDoesNotExist,\n    AppRegistryNotReady,\n    ObjectDoesNotExist,\n    MultipleObjectsReturned,\n    SuspiciousOperation,\n    SuspiciousMultipartForm,\n    SuspiciousFileOperation,\n    DisallowedHost,\n    DisallowedRedirect,\n    TooManyFieldsSent,\n    RequestDataTooBig,\n    RequestAborted,\n    PermissionDenied,\n    ViewDoesNotExist,\n    MiddlewareNotUsed,\n    ImproperlyConfigured,\n    FieldError,\n    ValidationError,\n    NON_FIELD_ERRORS,\n    EmptyResultSet,\n    SynchronousOnlyOperation,\n)\n\n\nclass TestExceptions(unittest.TestCase):\n\n    def test_field_does_not_exist_exception(self):\n        with self.assertRaises(FieldDoesNotExist):\n            raise FieldDoesNotExist()\n\n    def test_app_registry_not_ready_exception(self):\n        with self.assertRaises(AppRegistryNotReady):\n            raise AppRegistryNotReady()\n\n    def test_object_does_not_exist_exception(self):\n        with self.assertRaises(ObjectDoesNotExist):\n            raise ObjectDoesNotExist()\n\n    def test_multiple_objects_returned_exception(self):\n        with self.assertRaises(MultipleObjectsReturned):\n            raise MultipleObjectsReturned()\n\n    def test_suspicious_operation_exception(self):\n        with self.assertRaises(SuspiciousOperation):\n            raise SuspiciousOperation()\n\n    def test_suspicious_multipart_form_exception(self):\n        with self.assertRaises(SuspiciousMultipartForm):\n            raise SuspiciousMultipartForm()\n\n    def test_suspicious_file_operation_exception(self):\n        with self.assertRaises(SuspiciousFileOperation):\n            raise SuspiciousFileOperation()\n\n    def test_disallowed_host_exception(self):\n        with self.assertRaises(DisallowedHost):\n            raise DisallowedHost()\n\n    def test_disallowed_redirect_exception(self):\n        with self.assertRaises(DisallowedRedirect):\n            raise DisallowedRedirect()\n\n    def test_too_many_fields_sent_exception(self):\n        with self.assertRaises(TooManyFieldsSent):\n            raise TooManyFieldsSent()\n\n    def test_request_data_too_big_exception(self):\n        with self.assertRaises(RequestDataTooBig):\n            raise RequestDataTooBig()\n\n    def test_request_aborted_exception(self):\n        with self.assertRaises(RequestAborted):\n            raise RequestAborted()\n\n    def test_permission_denied_exception(self):\n        with self.assertRaises(PermissionDenied):\n            raise PermissionDenied()\n\n    def test_view_does_not_exist_exception(self):\n        with self.assertRaises(ViewDoesNotExist):\n            raise ViewDoesNotExist()\n\n    def test_middleware_not_used_exception(self):\n        with self.assertRaises(MiddlewareNotUsed):\n            raise MiddlewareNotUsed()\n\n    def test_improperly_configured_exception(self):\n        with self.assertRaises(ImproperlyConfigured):\n            raise ImproperlyConfigured()\n\n    def test_field_error_exception(self):\n        with self.assertRaises(FieldError):\n            raise FieldError()\n\n    def test_validation_error_with_string_message(self):\n        exception = ValidationError(\"This field is required\")\n        self.assertEqual(str(exception), \"This field is required\")\n        self.assertEqual(exception.code, None)\n        self.assertEqual(exception.params, None)\n\n    def test_validation_error_with_dict_message(self):\n        exception = ValidationError({\n            'name': [\"This field is required.\"],\n            'email': [\"This field is invalid.\"],\n        })\n        self.assertEqual(exception.error_dict, {'name': [\"This field is required.\"], 'email': [\"This field is invalid.\"]})\n\n    def test_validation_error_with_list_message(self):\n        exception = ValidationError([\"This field is required.\", \"This field is invalid.\"])\n        self.assertEqual(exception.error_list, [\"This field is required.\", \"This field is invalid.\"])\n\n    def test_validation_error_with_code_and_params(self):\n        exception = ValidationError(\"This field is required\", code=\"invalid_field\", params={\"field\": \"name\"})\n        self.assertEqual(exception.code, \"invalid_field\")\n        self.assertEqual(exception.params, {\"field\": \"name\"})\n\n    def test_validation_error_update_error_dict(self):\n        error_dict = {}\n        exception = ValidationError({\n            'name': [\"This field is required.\"],\n        })\n\n        exception.update_error_dict(error_dict)\n        self.assertEqual(error_dict, {'name': ['This field is required.']})\n\n    def test_validation_error_iter(self):\n        exception = ValidationError({\n            'name': [\"This field is required.\"],\n            'email': [\"This field is invalid.\"],\n        })\n        self.assertEqual(list(exception), [\n            \"This field is required.\",\n            \"This field is invalid.\",\n        ])\n\n    def test_empty_result_set_exception(self):\n        with self.assertRaises(EmptyResultSet):\n            raise EmptyResultSet()\n\n    def test_synchronous_only_operation_exception(self):\n        with self.assertRaises(SynchronousOnlyOperation):\n            raise SynchronousOnlyOperation()\n\n\n\n"], "sample_95": ["\nimport pytest\n\nfrom _pytest.tmpdir import get_user\nfrom _pytest.tmpdir import TempPathFactory\nfrom _pytest.tmpdir import TempdirFactory\nfrom _pytest.tmpdir import _mk_tmp\nfrom pathlib import Path\n\nclass TestTempPathFactory:\n    def test_getbasetemp(self, tmp_path_factory):\n        assert isinstance(tmp_path_factory.getbasetemp(), Path)\n        assert tmp_path_factory.getbasetemp().exists()\n    \n    def test_mktemp_numbering_works(self, tmp_path_factory):\n        p1 = tmp_path_factory.mktemp(\"foo\", numbered=True)\n        p2 = tmp_path_factory.mktemp(\"foo\", numbered=True)\n        assert p1.name != p2.name\n    \n    def test_getbasetemp_given_basetemp(self, tmp_path_factory):\n        given_basetemp = Path(\"some/given/path\")\n        factory = TempPathFactory(given_basetemp, trace=print, _ispytest=True)\n        assert factory.getbasetemp() == given_basetemp\n\nclass TestTempdirFactory:\n    def test_mktemp_as_pypath(self, tmp_path_factory):\n        t = tmp_path_factory.mktemp(\"test\", numbered=False)\n        assert isinstance(t, py.path.local)\n\nclass TestHelperFunctions:\n    def test_get_user(self):\n        assert isinstance(get_user(), str) or get_user() is None\n    \n    def test__mk_tmp(self, tmp_path_factory):\n        request = object()\n        p = _mk_tmp(request, tmp_path_factory)\n        assert isinstance(p, Path)\n"], "sample_158": ["\nfrom sympy.parsing.mathematica import parse_mathematica, MathematicaParser\n\ndef test_parse_mathematica():\n    s = parse_mathematica(\"Sin[x] + Cos[y]\")\n    assert s == sin(x) + cos(y)\n\ndef test_parse_mathematica_complex():\n    s = parse_mathematica(\"ComplexExpand[E^(I*x)]\")\n    assert s == cos(x) + I*sin(x)\n\ndef test_parse_mathematica_nested_functions():\n    s = parse_mathematica(\"Sin[x^2 + y]\")\n    assert s == sin(x**2 + y)\n\ndef test_parse_mathematica_parentheses():\n    s = parse_mathematica(\"(x + y) * z\")\n    assert s == (x + y) * z\n\ndef test_parse_mathematica_fraction():\n    s = parse_mathematica(\"x/y\")\n    assert s == x/y\n\ndef test_parse_mathematica_power():\n    s = parse_mathematica(\"x^2\")\n    assert s == x**2\n\ndef test_parse_mathematica_exponentials():\n    s = parse_mathematica(\"Exp[x]\")\n    assert s == exp(x)\n\ndef test_parse_mathematica_logarithms():\n    s = parse_mathematica(\"Log[x,2]\")\n    assert s == log(x, 2)\n\ndef test_parse_mathematica_trigonometric_functions():\n    s = parse_mathematica(\"Sin[x] + Cos[y] + Tan[z]\")\n    assert s == sin(x) + cos(y) + tan(z)\n\ndef test_parse_mathematica_list():\n    s = parse_mathematica(\"[1, 2, 3]\")\n    assert s == (1, 2, 3)\n\ndef test_parse_mathematica_apply():\n    s = parse_mathematica(\"Plus[a, b]\")\n    assert s == a + b\n\ndef test_parse_mathematica_rule():\n    s = parse_mathematica(\"a -> b\")\n    assert s == (a, b)\n\ndef test_parse_mathematica_conditional():\n    s = parse_mathematica(\"If[x > 0, a, b]\")\n    assert s == If(x > 0, a, b)\n\ndef test_parse_mathematica_slot():\n    s = parse_mathematica(\"#1\")\n    assert s == 1\n\ndef test_parse_mathematica_document_string():\n    s = parse_mathematica(\"This is a Mathematica expression.\")\n    assert s == \"This is a Mathematica expression.\"\n\ndef test_parse_mathematica_empty_expression():\n    s = parse_mathematica(\"\")\n    assert s is None\n\ndef test_parse_mathematica_invalid_expression():\n    s = parse_mathematica(\"This is not a valid Mathematica expression.\")\n    assert s is None\n\ndef test_parse_mathematica_fullform():\n    s = parse_mathematica(\"FullForm[Sin[x]]\")\n    assert s == (\n        'List',\n        'Sin',\n        'x'\n    )\n\n    s = parse_mathematica(\"FullForm[Plus[x,y]]\")\n    assert s == (\n        'List',\n        'Plus',\n        'x',\n        'y'\n    )\n\n    s = parse_mathematica(\"FullForm[Times[x,y,z]]\")\n    assert s == (\n        'List',\n        'Times',\n        'x',\n        'y',\n        'z'\n    )\n\n    s = parse_mathematica(\"FullForm[Sin[x^2 + y]]\")\n    assert s == (\n        'List',\n        'Sin',\n        'List',\n        '+',\n        'x',\n        '^',\n        '2',\n        'y'\n    )\n\n\n\n"], "sample_70": ["\nimport unittest\nimport matplotlib.legend as mlegend\nfrom matplotlib import patches, transforms, _api\nfrom matplotlib.figure import Figure\nfrom matplotlib.axes import Axes\nfrom matplotlib.lines import Line2D\nfrom matplotlib.collections import PatchCollection\nfrom matplotlib.artist import Artist\nfrom mpl_toolkits.mplot3d.axes3d import Axes3D\nfrom mpl_toolkits.axes_grid1 import AxesGrid\n\nclass TestLegend(unittest.TestCase):\n\n    def setUp(self):\n        self.fig, self.ax = Figure(), Axes()\n        self.ax.set_xlim(0, 10)\n        self.ax.set_ylim(0, 10)\n\n    def test_legend_basics(self):\n\n        line, = self.ax.plot([0, 5, 10], [0, 5, 10])\n        patch = patches.Rectangle((0, 0), 1, 1, label='test')\n        self.ax.add_patch(patch)\n\n        legend = mlegend.Legend(self.ax,\n                          handles=[line, patch],\n                          labels=['Line', 'Rectangle'])\n        self.assertEqual(len(legend.get_patches()), 2)\n        self.assertEqual(legend.get_texts(), [\n            text for text in legend.legendHandles if text.get_text()] )\n\n    def test_legend_loc(self):\n\n        line, = self.ax.plot([0, 5, 10], [0, 5, 10])\n        patch = patches.Rectangle((0, 0), 1, 1, label='test')\n        self.ax.add_patch(patch)\n\n        legend = mlegend.Legend(self.ax,\n                          handles=[line, patch],\n                          labels=['Line', 'Rectangle'])\n\n        # Test various loc codes\n        for loc in range(1, 11):\n            legend.set_loc(loc)\n            self.assertEqual(legend._loc, loc)\n\n        # Test default location\n        legend.set_loc('best')\n        self.assertTrue('best' in legend._loc_codes)\n\n    def test_legend_bbox_to_anchor(self):\n\n        line, = self.ax.plot([0, 5, 10], [0, 5, 10])\n        patch = patches.Rectangle((0, 0), 1, 1, label='test')\n        self.ax.add_patch(patch)\n\n        legend = mlegend.Legend(self.ax,\n                          handles=[line, patch],\n                          labels=['Line', 'Rectangle'])\n\n        legend.set_bbox_to_anchor((0.5, 0.5))\n        self.assertEqual(legend.get_bbox_to_anchor(), (0.5, 0.5))\n\n    def test_legend_title(self):\n\n        line, = self.ax.plot([0, 5, 10], [0, 5, 10])\n        patch = patches.Rectangle((0, 0), 1, 1, label='test')\n        self.ax.add_patch(patch)\n\n        legend = mlegend.Legend(self.ax,\n                          handles=[line, patch],\n                          labels=['Line', 'Rectangle'], title='My Legend')\n\n        self.assertEqual(legend._legend_title_box._text.get_text(), 'My Legend')\n\n    def test_legend_draggable(self):\n\n        line, = self.ax.plot([0, 5, 10], [0, 5, 10])\n        patch = patches.Rectangle((0, 0), 1, 1, label='test')\n        self.ax.add_patch(patch)\n\n        legend = mlegend.Legend(self.ax,\n                          handles=[line, patch],\n                          labels=['Line', 'Rectangle'])\n        legend.set_draggable(state=True, update='bbox')\n        self.assertTrue(legend.get_draggable() is not None)\n        legend.set_draggable(state=False)\n        self.assertFalse(legend.get_draggable() is not None)\n\n    def test_legend_frame_on(self):\n        line, = self.ax.plot([0, 5, 10], [0, 5, 10])\n        patch = patches.Rectangle((0, 0), 1, 1, label='test')\n        self.ax.add_patch(patch)\n\n        legend = mlegend.Legend(self.ax,\n                          handles=[line, patch],\n                          labels=['Line', 'Rectangle'])\n        self.assertTrue(legend.get_frame_on())\n        legend.set_frame_on(False)\n        self.assertFalse(legend.get_frame_on())\n\n    def test_legend_handler_map(self):\n\n        line, = self.ax.plot([0, 5, 10], [0, 5, 10])\n        patch = patches.Rectangle((0, 0), 1, 1, label='test')\n        self.ax.add_patch(patch)\n\n        legend = mlegend.Legend(self.ax,\n                          handles=[line, patch],\n                          labels=['Line', 'Rectangle'])\n        # Ensure default handlers are used for the Line2D and Patch types.\n        self.assertEqual(legend.get_legend_handle_box(legend.legendHandles[0]).__class__.__name__,\n                         'HandlerLine2D')\n        self.assertEqual(legend.get_legend_handle_box(legend.legendHandles[1]).__class__.__name__,\n                         'HandlerPatch')\n\n        # Modify the handler for Line2D\n        with mlegend.get_default_handler_map() as handler_map:\n            handler_map[Line2D] = lambda obj, prop: patches.Rectangle((0, 0), 1, 1, color='red')\n            legend = mlegend.Legend(self.ax,\n                                  handles=[line, patch],\n                                  labels=['Line', 'Rectangle'],\n                                  handler_map=handler_map)\n        self.assertEqual(legend.get_legend_handle_box(legend.legendHandles[0]).__class__.__name__,\n                         'HandlerPatch')\n\n    def test_legend_get_default_handler_map(self):\n        default_handler_map = mlegend.Legend.get_default_handler_map()\n        # Check if the default handler map contains the expected keys.\n        self.assertIn(Line2D, default_handler_map)\n        self.assertIn(Patch, default_handler_map)\n\n\n\n\n    def test_legend_auto_legend_data(self):\n        line, = self.ax.plot([0, 5, 10], [0, 5, 10])\n        patch = patches.Rectangle((0, 0), 1, 1)\n        self.ax.add_patch(patch)\n        bboxes, lines, offsets = mlegend._auto_legend_data()\n        self.assertIsInstance(bboxes, list)\n        self.assertIsInstance(lines, list)\n        self.assertIsInstance(offsets, list)\n        self.assertEqual(len(bboxes), 2)\n        self.assertEqual(len(lines), 1)\n        self.assertEqual(len(offsets), 2)\n        \n    def test_legend_get_bbox_to_anchor(self):\n        line, = self.ax.plot([0, 5, 10], [0, 5, 10])\n        patch = patches.Rectangle((0, 0), 1, 1)\n        self.ax.add_patch(patch)\n        legend = mlegend.Legend(self.ax,\n                          handles=[line, patch],\n                          labels=['Line', 'Rectangle'])\n\n        bbox = legend.get_bbox_to_anchor()\n        self.assertIsInstance(bbox, transforms.BboxBase)\n    \n    def test_legend_contains(self):\n        line, = self.ax.plot([0, 5, 10], [0, 5, 10])\n        patch = patches.Rectangle((0, 0), 1, 1)\n        self.ax.add_patch(patch)\n        legend = mlegend.Legend(self.ax,\n                          handles=[line, patch],\n                          labels=['Line', 'Rectangle'])\n\n        self.assertFalse(legend.contains((0,10))\n        self.assertTrue(legend.contains(0.2, 0.2))\n        self.assertTrue(legend.contains(0.2, 0.2))\n\n    test_legend_default_handler_map= mlegend.Legend.get_default_handler_map()\n\n\n\n"], "sample_6": ["\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom unittest import mock\nfrom django.db import connections\nfrom django.apps import apps\nfrom django.core.management.base import CommandError\nfrom django.test import SimpleTestCase\nfrom django.conf import settings\n\nclass MigrationAutodetectorTests(SimpleTestCase):\n\n    def setUp(self):\n        self.autodetector = MigrationAutodetector(\n            settings.INSTALLED_APPS,\n            connections['default'],\n            None,\n        )\n\n    def test_migration_creation_empty_changes(self):\n        changes = self.autodetector.changes()\n        self.assertEqual(len(changes), 0)\n\n    def test_migration_creation_existing_model(self):\n        from django.db import models\n\n        class MyModel(models.Model):\n            pass\n\n        self.autodetector.detect(app_label='tests')\n        changes = self.autodetector.changes()\n        self.assertEqual(len(changes), 0)\n\n    def test_migration_creation_new_model(self):\n        with mock.patch('django.db.migrations.loader.MigrationLoader.get_app_state') as get_app_state:\n            def mock_get_app_state(app_label):\n                state = {}\n                state['models'] = {}\n                return state\n            get_app_state.side_effect = mock_get_app_state\n            \n            class MyModel(models.Model):\n                pass\n\n            with apps.app_config('tests', {'INSTALLED_APPS': ['tests']}):\n                self.autodetector.detect(app_label='tests')\n                changes = self.autodetector.changes()\n                self.assertEqual(len(changes), 1)\n\n\n"], "sample_9": ["\nimport unittest\nfrom astropy.io.ascii.qdp import _get_lines_from_file, _read_table_qdp, _write_table_qdp\nfrom astropy.table import Table\nimport io\n\nclass TestQDP(unittest.TestCase):\n\n    def test_get_lines_from_file(self):\n        test_string = \"\"\"\n        ! This is a comment\n        This is a data line\n        Another data line\n        \"\"\"\n        lines = _get_lines_from_file(test_string)\n        self.assertEqual(lines,test_string.strip().split(\"\\n\"))\n\n    def test_get_lines_from_file_file_object(self):\n        with open('test_file.txt', 'w') as f:\n            f.write(\"\"\"\n            ! This is a comment\n            This is a data line\n            Another data line\n            \"\"\")\n\n        lines = _get_lines_from_file('test_file.txt')\n        self.assertEqual(lines, ['! This is a comment', 'This is a data line', 'Another data line'])\n\n    def test_get_lines_from_file_list(self):\n        test_list = ['! This is a comment', 'This is a data line', 'Another data line']\n        lines = _get_lines_from_file(test_list)\n        self.assertEqual(lines, test_list)\n\n    def test_read_table_qdp(self):\n        qdp_data = \"\"\"\n        READ SERR 3\n        READ TERR 2\n        ! Table 0 comment\n        col1 col1(pos) col1(neg) col2 col3 col4 col5\n        1.0 0.1 -0.1 2.0 3.0 4.0\n        2.0 0.2 -0.2 4.0 6.0 8.0\n        \"\"\"\n\n        table = _read_table_qdp(qdp_data)\n        self.assertEqual(table.shape, (2, 6))\n        self.assertEqual(table.colnames, ['col1', 'col1_err', 'col1_perr', 'col2', 'col3', 'col4', 'col5'])\n\n    def test_read_table_qdp_with_names(self):\n        qdp_data = \"\"\"\n        READ SERR 3\n        READ TERR 2\n        ! Table 0 comment\n        a a(pos) a(neg) b c d\n        1.0 0.1 -0.1 2.0 3.0 4.0\n        2.0 0.2 -0.2 4.0 6.0 8.0\n        \"\"\"\n        table = _read_table_qdp(qdp_data, names=['a', 'b', 'c', 'd'])\n        self.assertEqual(table.shape, (2, 4))\n        self.assertEqual(table.colnames, ['a', 'b', 'c', 'd'])\n\n    def test_write_table_qdp(self):\n        table = Table(\n            names=['col1', 'col2', 'col3'],\n            data=[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\n        )\n        \n        lines = _write_table_qdp(table)\n        \n        self.assertEqual(lines[0], \"! col1 col2 col3\")\n        self.assertEqual(lines[1], \"1.0 2.0 3.0\")\n        self.assertEqual(lines[2], \"4.0 5.0 6.0\")\n\n\n    \n"], "sample_138": ["\nfrom sympy.utilities.iterables import (\n    _partition, _set_partitions, binary_partitions, bracelets, capture, cartes, common_prefix, common_suffix, connected_components, dict_merge, filter_symbols, flatten, generate_bell, generate_derangements, generate_involutions, generate_oriented_forest, group, has_dups, ibin, iproduct, kbins, minlex, multiset, multiset_combinations, multiset_partitions, multiset_permutations, necklaces, numbered_symbols, ordered, partitions, permutations, postfixes, postorder_traversal, prefixes, reshape, rotate_left, rotate_right, runs, sift, strongly_connected_components, subsets, take, topological_sort, unflatten, uniq, variations, ordered_partitions, rotations, is_palindromic\n)\nfrom sympy.utilities.enumerative import (\n    factoring_visitor, multiset_partitions_taocp\n)\n\ndef test_multiset_partitions_taocp():\n    assert list(multiset_partitions_taocp([1, 1, 2, 2])) == [\n        [1, 1, 2, 2],\n        [1, 2, 1, 2],\n        [2, 1, 1, 2],\n        [2, 2, 1, 1],\n        [1, 2, 2, 1],\n    ]\n\ndef test_capture():\n    def test_func(x):\n        return x * 2\n\n    a = 1, 2, 3\n    b = capture(test_func, a)\n    assert b == (2, 4, 6)\n\ndef test_flatten():\n    assert flatten([[1, 2, 3], [4, 5], [6]]) == [1, 2, 3, 4, 5, 6]\n    assert flatten( [1, 2, [3, 4], [5, [6, 7]]]) == [1, 2, 3, 4, 5, 6, 7]\n    \n\ndef test_partition():\n    assert list(partitions(3, 2, size=True)) == [\n       {(0, 1): 2, (2, ): 1},\n       {(0, ): 1, (1, 2): 2},\n       {(0, 2): 2, (1, ): 1}\n    ]\n\ndef test_multiset_partitions():\n    assert list(multiset_partitions([1, 1, 2, 2])) == [\n        [1, 1, 2, 2],\n        [1, 2, 1, 2],\n        [2, 1, 1, 2],\n        [2, 2, 1, 1],\n        [1, 2, 2, 1],\n    ]\n\ndef test_permutations():\n    assert list(permutations([1, 2, 3])) == [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\n\ndef test_variations():\n    assert list(variations(3, 2)) == [(0, 1), (0, 2), (1, 2), (1, 0), (2, 0), (2, 1)]\n\n\ndef test_generate_bell():\n    assert list(generate_bell(3)) == [(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (0, 2, 0), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]\n\ndef test_generate_derangements():\n    assert list(generate_derangements([0, 1, 2])) == [[1, 2, 0], [2, 0, 1]]\n\n\ndef test_generate_involutions():\n    assert list(generate_involutions([1, 2, 3])) == [(0, 1, 2), (0, 2, 1), (1, 0, 2), (2, 1, 0)]\n\ndef test_generate_oriented_forest():\n    assert list(generate_oriented_forest(4)) == [[0, 1, 2, 3], [0, 1, 2, 2], [0, 1, 2, 1], [0, 1, 2, 0], [0, 1, 1, 1], [0, 1, 1, 0], [0, 1, 0, 1], [0, 1, 0, 0], [0, 0, 0, 0]]\n\ndef test_connected_components():\n    g = {\n        (0, 1), (0, 2), (1, 3), (2, 3),\n    } \n    assert list(connected_components(g)) == [[0, 1, 2, 3]]\n\n\ndef test_strongly_connected_components():\n    g = {\n        (0, 1), (1, 2), (2, 0), (0, 2),\n    } \n    assert list(strongly_connected_components(g)) == [[0, 1, 2]]\n\n\n\ndef test_group():\n    assert list(group([1, 2, 3, 1, 2, 3])) == [[1, 2, 3, 1, 2, 3]]\n\ndef test_has_dups():\n    assert has_dups([1, 2, 3]) == False\n    assert has_dups([1, 2, 2]) == True\ndef test_ib():\n    assert list(ib([1,2,3])) == [(1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]\n\ndef test_iproduct():\n    assert list(iproduct([1, 2], [3, 4])) == [(1, 3), (1, 4), (2, 3), (2, 4)]\n\ndef test_minlex():\n    assert minlex('11010011000') == '00011010011'\n    assert minlex('11010011000', directed=False) == '00011010011'\n    assert minlex(range(5), directed=False) == list(range(5))\n    assert minlex('11010011000', directed=False, small=0) == '00011010011'\n\ndef test_runs():\n    assert runs([0, 1, 2, 2, 1, 4, 3, 2, 2] ) == [[0, 1, 2], [2], [1, 4], [3], [2], [2]]\n\n\n\ndef test_kinbs():\n    assert list(kbins([1, 2, 3], 2, ordered=None)) == [[1, 2], [3]]\n    assert list(kbins([1, 2, 3], 2, ordered=1)) == []\n\n\n\ndef test_rotate_left():\n    assert rotate_left([1, 2, 3, 4], 1) == [2, 3, 4, 1]\n\n\n\ndef test_ordered_partitions():\n    assert list(ordered_partitions(3, 2, size=True)) == [\n       {(0, 1): 2, (2, ): 1},\n       {(0, ): 1, (1, 2): 2},\n       {(0, 2): 2, (1, ): 1}\n    ]\n\n\n\ndef test_rotations():\n    assert list(rotations([1, 2, 3]) == [[1, 2, 3], [2, 3, 1], [3, 1, 2]]\n\ndef test_is_palindromic():\n    assert is_palindromic('racecar')\n    assert not is_palindromic('race')\n\n\n\n"], "sample_94": ["\nimport unittest\nimport numpy as np\nfrom sklearn.utils.validation import check_array, check_X_y, check_symmetric, check_is_fitted, check_consistent_length, LARGE_SPARSE_SUPPORTED, check_random_state, has_fit_parameter, _shape_repr, _num_samples\nfrom scipy import sparse\n\nclass TestValidation(unittest.TestCase):\n\n    def test_check_array_basic(self):\n        X = np.array([[1, 2], [3, 4]])\n        X_converted = check_array(X, accept_sparse=False, dtype=None)\n        self.assertTrue(np.array_equal(X, X_converted))\n\n    def test_check_array_sparse(self):\n        X = sparse.csr_matrix([[1, 2], [3, 4]])\n        X_converted = check_array(X, accept_sparse=True, dtype=None)\n        self.assertTrue(isinstance(X_converted, sparse.csr_matrix))\n        self.assertTrue(np.array_equal(X_converted.data, X.data))\n        self.assertTrue(np.array_equal(X_converted.indices, X.indices))\n        self.assertTrue(np.array_equal(X_converted.indptr, X.indptr))\n\n    def test_check_array_accept_sparse_false(self):\n        X = sparse.csr_matrix([[1, 2], [3, 4]])\n        with self.assertRaises(ValueError):\n            check_array(X, accept_sparse=False, dtype=None)\n\n    def test_check_array_large_sparse(self):\n        X = sparse.csr_matrix([[1, 2], [3, 4]], dtype=np.int64)\n        with self.assertRaises(ValueError):\n            check_array(X, accept_sparse=True, accept_large_sparse=False)\n\n    def test_check_array_dtype(self):\n        X = np.array([[1, 2], [3, 4]], dtype=object)\n        X_converted = check_array(X, dtype=\"numeric\")\n        self.assertEqual(X_converted.dtype, np.float64)\n\n    def test_check_array_force_finite(self):\n        X = np.array([[1, 2], [np.inf, 4]])\n        with self.assertRaises(ValueError):\n            check_array(X, force_all_finite=True)\n\n    def test_check_array_force_finite_allow_nan(self):\n        X = np.array([[1, 2], [np.nan, 4]])\n        check_array(X, force_all_finite='allow-nan') # should not raise\n\n    def test_check_X_y_basic(self):\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([0, 1])\n\n        X, y = check_X_y(X, y)\n        self.assertTrue(np.array_equal(X, X))\n        self.assertTrue(np.array_equal(y, y))\n\n    def test_check_X_y_sparse(self):\n        X = sparse.csr_matrix([[1, 2], [3, 4]])\n        y = np.array([0, 1])\n\n        X, y = check_X_y(X, y, multi_output=True)\n        self.assertTrue(isinstance(X, sparse.csr_matrix))\n        self.assertTrue(np.array_equal(y, y))\n\n    def test_check_X_y_multi_output_false(self):\n        X = sparse.csr_matrix([[1, 2], [3, 4]])\n        y = sparse.csr_matrix([[0], [1]])  \n\n        with self.assertRaises(ValueError):\n            check_X_y(X, y, multi_output=False)\n\n    def test_check_X_y_y_numeric(self):\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([0, 1], dtype=object)  \n\n        X, y = check_X_y(X, y, y_numeric=True)\n\n        self.assertEqual(y.dtype, np.float64)\n\n    def test_check_symmetric(self):\n        # Test symmetric matrix\n        A = np.array([[1, 2], [2, 3]])\n        check_symmetric(A)\n        # Test non-symmetric matrix\n        B = np.array([[1, 2], [3, 4]])\n        check_symmetric(B, raise_warning=True)\n\n    def test_check_is_fitted(self):\n        class DummyEstimator:\n            def __init__(self):\n                self.fitted = False\n\n            def fit(self, X, y):\n                self.fitted = True\n\n        estimator = DummyEstimator()\n        with self.assertRaises(NotFittedError):\n            check_is_fitted(estimator, ['fitted'])\n\n        estimator.fit(np.zeros((10, 5)), np.zeros((10,)))\n        check_is_fitted(estimator, ['fitted'])\n\n    def test_has_fit_parameter(self):\n        class DummyEstimator:\n            def __init__(self):\n                pass\n\n            def fit(self, X, y, sample_weight=None):\n                pass\n\n        self.assertTrue(has_fit_parameter(DummyEstimator(), 'sample_weight'))\n        self.assertFalse(has_fit_parameter(DummyEstimator(), 'nonexistent_param'))\n\n    def test_check_consistent_length(self):\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([0, 1, 2])\n        with self.assertRaises(ValueError):\n            check_consistent_length(X, y)\n\n    def test_check_consistent_length_ok(self):\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([0, 1])\n        check_consistent_length(X, y)\n\n\n\n"], "sample_64": ["\nfrom django.contrib.admin.templatetags.admin_modify import (\n    prepopulated_fields_js,\n    submit_row,\n    change_form_object_tools_tag,\n    cell_count,\n)\nfrom django.test import TestCase\nfrom django.template import Context\n\nclass AdminModifyTemplateTagsTest(TestCase):\n\n    def test_prepopulated_fields_js(self):\n        context = Context({\"adminform\": {\"prepopulated_fields\": [\n            {\"field\": {\"name\": \"field1\", \"auto_id\": \"id_field1\"}, \"dependencies\": [{\"name\": \"dependency1\", \"auto_id\": \"id_dependency1\"}]}\n        ]}} )\n        result = prepopulated_fields_js(context)\n        expected_json = json.dumps([\n            {\n                \"id\": \"#id_field1\",\n                \"name\": \"field1\",\n                \"dependency_ids\": [\"#id_dependency1\"],\n                \"dependency_list\": [\"dependency1\"],\n                \"maxLength\": 50,\n                \"allowUnicode\": False,\n            }\n        ])\n        self.assertEqual(result[\"prepopulated_fields_json\"], expected_json)\n\n    def test_submit_row(self):\n        context = Context({\n            \"add\": True,\n            \"change\": False,\n            \"is_popup\": False,\n            \"save_as\": True,\n            \"has_add_permission\": True,\n            \"has_change_permission\": False,\n            \"show_save_and_add_another\": True,\n            \"show_save_and_continue\": True,\n        })\n        result = submit_row(context)\n        self.assertTrue(result[\"show_save_and_add_another\"])\n        self.assertTrue(result[\"show_save_and_continue\"])\n\n    def test_change_form_object_tools_tag(self):\n        context = Context({})\n        result = change_form_object_tools_tag(None, None)(context)\n        self.assertEqual(result, context)  \n\n    def test_cell_count(self):\n        inline_admin_form = {\n            \"formset\": {\n                \"can_delete\": True\n            },\n            \"empty\": True\n        }\n        self.assertEqual(cell_count(inline_admin_form), 2)  \n"], "sample_156": ["\nfrom sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo,  kibi\n\nimport unittest\nfrom sympy import sympify, S\n\nclass TestPrefixes(unittest.TestCase):\n    def test_prefix_creation(self):\n        k = Prefix('kilo', 'k', 3)\n        self.assertEqual(k.name, 'kilo')\n        self.assertEqual(k.abbrev, 'k')\n        self.assertEqual(k.scale_factor, 1000)\n        self.assertEqual(k.base, 10)\n\n        m = Prefix('mega', 'M', 6, base=10)\n        self.assertEqual(m.scale_factor, 1000000)\n\n    def test_prefix_multiplication(self):\n        k = PREFIXES['k']\n        m = PREFIXES['M']\n        km = k * m\n        self.assertEqual(km.name, 'kiloMega')\n        self.assertEqual(km.abbrev, 'kM')\n        self.assertEqual(km.scale_factor, 1000000000)  \n\n    def test_prefix_division(self):\n        m = PREFIXES['M']\n        k = PREFIXES['k']\n        self.assertEqual(m / k, Prefix('mega', 'M', 3))\n        self.assertEqual(k / m, Prefix('kilo', 'k', -3))\n    \n    def test_prefix_simplification(self):\n        k = PREFIXES['k']\n        km = k * PREFIXES['m']\n        self.assertEqual(km,  PREFIXES['milli'])\n\n        m = PREFIXES['milli']\n        mm = m * PREFIXES['m']\n        self.assertEqual(mm, PREFIXES['micro'])\n\n    def test_prefix_units(self):\n        m = sympify('meter')\n        result = prefix_unit(m, PREFIXES)\n        expected = [\n            Prefix('milli', 'm', -3, base=10, latex_repr=r\"\\mu\"),\n            Prefix('centi', 'c', -2, base=10),\n            Prefix('deci', 'd', -1, base=10),\n            Prefix('deka', 'da', 1, base=10),\n            Prefix('hecto', 'h', 2, base=10),\n            Prefix('kilo', 'k', 3, base=10),\n            Prefix('mega', 'M', 6, base=10),\n            Prefix('giga', 'G', 9, base=10),\n            Prefix('tera', 'T', 12, base=10),\n            Prefix('peta', 'P', 15, base=10),\n            Prefix('exa', 'E', 18, base=10),\n            Prefix('zetta', 'Z', 21, base=10),\n            Prefix('yotta', 'Y', 24, base=10)\n        ]\n        self.assertEqual(result, expected)\n\n\n    def test_binary_prefixes(self):\n        kibi = PREFIXES['Ki']\n        mebi = PREFIXES['Mi']\n        self.assertEqual(kibi.base, 2)\n        self.assertEqual(mebi.base, 2)\n\n"], "sample_56": ["\nimport unittest\nfrom django.forms import BaseFormSet, formset_factory, all_valid, ManagementForm\nfrom django.forms.utils import ErrorList\nfrom django.core.exceptions import ValidationError\n\nclass TestFormSet(unittest.TestCase):\n\n    def test_formset_factory_creation(self):\n        # Test creating a simple FormSet\n        class TestForm(BaseForm):\n            test_field = CharField(label=\"Test Field\")\n\n        FormSet = formset_factory(TestForm)\n        self.assertIsInstance(FormSet, type)\n        self.assertEqual(FormSet.__name__, 'TestFormSet')\n        self.assertEqual(FormSet.extra, 1)\n        self.assertFalse(FormSet.can_order)\n        self.assertFalse(FormSet.can_delete)\n\n    def test_formset_factory_customization(self):\n        # Test customizing FormSet parameters\n        class TestForm(BaseForm):\n            test_field = CharField(label=\"Test Field\")\n\n        FormSet = formset_factory(\n            TestForm,\n            extra=3,\n            can_order=True,\n            can_delete=True,\n            max_num=5,\n            validate_max=True,\n            min_num=2,\n            validate_min=True,\n        )\n        self.assertEqual(FormSet.extra, 3)\n        self.assertTrue(FormSet.can_order)\n        self.assertTrue(FormSet.can_delete)\n        self.assertEqual(FormSet.max_num, 5)\n        self.assertTrue(FormSet.validate_max)\n        self.assertEqual(FormSet.min_num, 2)\n        self.assertTrue(FormSet.validate_min)\n\n    def test_management_form(self):\n        # Test ManagementForm\n        class TestForm(BaseForm):\n            test_field = CharField(label=\"Test Field\")\n\n        FormSet = formset_factory(TestForm)\n        formset = FormSet()\n        management_form = formset.management_form\n\n        self.assertIsInstance(management_form, ManagementForm)\n        self.assertEqual(management_form.fields[\"TOTAL_FORM_COUNT\"].initial, 0)\n        self.assertEqual(management_form.fields[TOTAL_FORM_COUNT].widget, HiddenInput)\n\n    def test_total_form_count(self):\n        # Test total_form_count\n        class TestForm(BaseForm):\n            test_field = CharField(label=\"Test Field\")\n\n        FormSet = formset_factory(TestForm)\n        formset = FormSet()\n\n        self.assertEqual(formset.total_form_count(), 0)\n\n        formset.management_form.initial[\"TOTAL_FORMS\"] = 3\n        self.assertEqual(formset.total_form_count(), 3)\n\n    def test_initial_form_count(self):\n        # Test initial_form_count\n        class TestForm(BaseForm):\n            test_field = CharField(label=\"Test Field\")\n\n        FormSet = formset_factory(TestForm)\n        formset = FormSet(initial=[{\"test_field\": \"value1\"}])\n\n        self.assertEqual(formset.initial_form_count(), 1)\n\n    def test_forms(self):\n        # Test forms\n        class TestForm(BaseForm):\n            test_field = CharField(label=\"Test Field\")\n\n        FormSet = formset_factory(TestForm)\n        formset = FormSet()\n\n        self.assertEqual(len(formset.forms), 1)\n\n    def test_extra_forms(self):\n        # Test extra_forms\n        class TestForm(BaseForm):\n            test_field = CharField(label=\"Test Field\")\n\n        FormSet = formset_factory(TestForm, extra=2)\n        formset = FormSet()\n\n        self.assertEqual(len(formset.extra_forms), 2)\n\n    def test_empty_form(self):\n        class TestForm(BaseForm):\n            test_field = CharField(label=\"Test Field\")\n\n        FormSet = formset_factory(TestForm)\n        empty_form = FormSet().empty_form\n        self.assertIsInstance(empty_form, TestForm)\n\n    def test_cleaned_data(self):\n        class TestForm(BaseForm):\n            test_field = CharField(label=\"Test Field\")\n\n        FormSet = formset_factory(TestForm)\n        formset = FormSet(\n            [{\"test_field\": \"value1\"}, {\"test_field\": \"value2\"}]\n        )\n        formset.is_valid()\n        cleaned_data = formset.cleaned_data\n\n        self.assertEqual(len(cleaned_data), 2)\n\n    def test_deleted_forms(self):\n        class TestForm(BaseForm):\n            test_field = CharField(label=\"Test Field\")\n            DELETE = BooleanField(widget=HiddenInput(), required=False)\n\n        FormSet = formset_factory(TestForm, can_delete=True)\n        formset = FormSet(\n            [\n                {\"test_field\": \"value1\", \"DELETE\": True},\n                {\"test_field\": \"value2\"},\n            ]\n        )\n        formset.is_valid()\n        deleted_forms = formset.deleted_forms\n        self.assertEqual(len(deleted_forms), 1)\n\n    def test_ordered_forms(self):\n        class TestForm(BaseForm):\n            test_field = CharField(label=\"Test Field\")\n            ORDER = IntegerField(\n                label=\"Order\", required=False, widget=IntegerField(attrs={\"type\": \"number\"})\n            )\n\n        FormSet = formset_factory(TestForm, can_order=True)\n        formset = FormSet(\n            [\n                {\"test_field\": \"value1\", \"ORDER\": 1},\n                {\"test_field\": \"value2\", \"ORDER\": 2},\n                {\"test_field\": \"value3\", \"ORDER\": 1},\n            ]\n        )\n        formset.is_valid()\n        ordered_forms = formset.ordered_forms\n\n        self.assertEqual(len(ordered_forms), 3)\n        self.assertEqual(\n            [form.cleaned_data[\"test_field\"] for form in ordered_forms],\n            [\"value1\", \"value2\", \"value3\"],\n        )\n\n    def test_is_valid(self):\n        class TestForm(BaseForm):\n            test_field = CharField(label=\"Test Field\")\n\n        FormSet = formset_factory(TestForm)\n        formset = FormSet()\n        self.assertFalse(formset.is_valid())\n\n        formset.is_valid()\n        self.assertTrue(formset.is_valid())\n\n    def test_full_clean(self):\n        class TestForm(BaseForm):\n            test_field = CharField(label=\"Test Field\")\n\n        FormSet = formset_factory(TestForm, can_delete=True)\n        formset = FormSet(\n            [{\"test_field\": \"value1\", \"DELETE\": False}, {\"test_field\": \"\"}]\n        )\n        with self.assertRaises(ValidationError):\n            formset.full_clean()\n\n    def test_all_valid(self):\n        class TestForm(BaseForm):\n            test_field = CharField(label=\"Test Field\")\n\n        FormSet1 = formset_factory(TestForm, can_delete=True)\n        formset1 = FormSet1(\n            [{\"test_field\": \"value1\", \"DELETE\": False}, {\"test_field\": \"\"}]\n        )\n        FormSet2 = formset_factory(TestForm, can_delete=True)\n        formset2 = FormSet2(\n            [{\"test_field\": \"value1\", \"DELETE\": False}, {\"test_field\": \"value2\"}]\n        )\n        self.assertFalse(all_valid([formset1, formset2]))\n        self.assertTrue(all_valid([formset2, formset2]))\n\n\n\n"], "sample_22": ["\nimport unittest\nfrom django.db import connection\nfrom django.db.models import (\n    CharField,\n    ForeignKey,\n    IntegerField,\n    Model,\n    Q,\n    Subquery,\n    Value\n)\nfrom django.db.models.query import (\n    QuerySet,\n    JoinPromoter,\n    get_order_dir,\n    add_to_dict\n)\n\n\nclass MyModel(Model):\n    id = IntegerField(primary_key=True)\n    name = CharField(max_length=100)\n    related_id = ForeignKey('OtherModel', related_name='+')\n\nclass OtherModel(Model):\n    id = IntegerField(primary_key=True)\n    data = CharField(max_length=100)\n\n\nclass TestQuery(unittest.TestCase):\n    def setUp(self):\n        connection.creation.create_test_database()\n\n        with connection.cursor() as cursor:\n            cursor.execute(\"\"\"\n            CREATE TABLE MyModel (\n                id INTEGER PRIMARY KEY,\n                name TEXT\n            );\n            \"\"\")\n            cursor.execute(\"\"\"\n            CREATE TABLE OtherModel (\n                id INTEGER PRIMARY KEY,\n                data TEXT\n            );\n            \"\"\")\n\n\n    def tearDown(self):\n        connection.creation.destroy_test_database()\n\n    def test_get_order_dir(self):\n        self.assertEqual(get_order_dir('name'), ('name', 'ASC'))\n        self.assertEqual(get_order_dir('-name'), ('name', 'DESC'))\n        self.assertEqual(get_order_dir('+name'), ('name', 'ASC'))\n\n    def test_add_to_dict(self):\n        data = {}\n        add_to_dict(data, 'key', 'value1')\n        self.assertEqual(data['key'], {'value1'})\n        add_to_dict(data, 'key', 'value2')\n        self.assertEqual(data['key'], {'value1', 'value2'})\n\n\n\n    def test_JoinPromoter(self):\n        promoter = JoinPromoter(connector=AND, num_children=3, negated=False)\n        promoter.add_votes([('MyModel', 2), ('OtherModel', 1)])\n        promoter.update_join_types(QuerySet())\n\n"], "sample_11": ["\nimport unittest\nfrom unittest.mock import patch\nfrom django.conf import settings\nfrom django.http import HttpResponse, HttpResponseNotFound\nfrom django.template import TemplateDoesNotExist\nfrom django.test import RequestFactory\nfrom django.utils.http import http_date\nfrom django.utils.encoding import force_text\nfrom django.utils.timezone import datetime\nfrom django.core.exceptions import Http404\nfrom django.contrib.auth.models import User\nfrom django.urls import resolve\n\nfrom django.views.debug import (\n    CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n    cleanse_setting, default_urlconf, technical_404_response, \n    technical_500_response,\n)\n\n\nclass TestCleanseSetting(unittest.TestCase):\n    def test_cleanse_setting(self):\n        settings.DEBUG = False\n\n        # Test basic cleansing\n        self.assertEqual(cleanse_setting('KEY', 'value'), '**********')\n\n        # Test dictionary cleansing\n        self.assertEqual(\n            cleanse_setting('DICT', {'secret': 'value'}),\n            {'DICT': {'secret': '**********'}}\n        )\n\n        # Test callable cleansing\n        class CallableObject:\n            def __call__(self):\n                return 'value'\n        self.assertIsInstance(cleanse_setting('callable', CallableObject()), CallableSettingWrapper)\n\n    def test_cleanse_setting_no_regex(self):\n        self.assertEqual(cleanse_setting('non_sensitive', 123), 123)\n\n\n\n\nclass TestExceptionReporter(unittest.TestCase):\n\n    def setUp(self):\n        self.request_factory = RequestFactory()\n        self.request = self.request_factory.get('/')\n        \n    def test_get_traceback_data(self):\n        exc_type = TypeError\n        exc_value = Exception(\"Test Error\")\n        tb = sys.exc_info()[2]\n        reporter = ExceptionReporter(self.request, exc_type, exc_value, tb)\n        data = reporter.get_traceback_data()\n        self.assertIn('exception_type', data)\n        self.assertIn('exception_value', data)\n        self.assertIn('frames', data)\n        self.assertIn('request', data)\n\n    def test_get_traceback_html(self):\n        exc_type = TypeError\n        exc_value = Exception(\"Test Error\")\n        tb = sys.exc_info()[2]\n        reporter = ExceptionReporter(self.request, exc_type, exc_value, tb)\n        html = reporter.get_traceback_html()\n        self.assertIsInstance(html, HttpResponse)\n        self.assertTrue(html.status_code == 500)\n        self.assertIn('<h1>INTERNAL SERVER ERROR</h1>', html.content.decode('utf-8'))\n\n\nclass TestTechnicalErrorResponses(unittest.TestCase):\n    def setUp(self):\n        self.request_factory = RequestFactory()\n        settings.ROOT_URLCONF = 'django.urls'  \n\n    def test_technical_500_response(self):\n        request = self.request_factory.get('/')\n        exc_type = TypeError\n        exc_value = Exception(\"Test Error\")\n        tb = sys.exc_info()[2]\n        response = technical_500_response(request, exc_type, exc_value, tb)\n        self.assertIsInstance(response, HttpResponse)\n        self.assertTrue(response.status_code == 500)\n\n    def test_technical_404_response(self):\n        request = self.request_factory.get('/does_not_exist')\n        exception = Http404(\"Not Found\")\n        response = technical_404_response(request, exception)\n        self.assertIsInstance(response, HttpResponseNotFound)\n        self.assertTrue(response.status_code == 404)\n\n\n\n    def test_default_urlconf(self):\n        request = self.request_factory.get('/')\n        response = default_urlconf(request)\n        self.assertIsInstance(response, HttpResponse)\n        self.assertTrue(response.status_code == 200)\n\n"], "sample_143": ["\nfrom sympy.printing import sstr, sstrrepr, StrPrinter\nfrom sympy.core.symbol import Str\nfrom sympy import *\n\ndef test_sstr_basic():\n    a, b = symbols('a b')\n    assert sstr(a + b) == 'a + b'\n    assert sstr(a * b) == 'a * b'\n    assert sstr(a**2) == 'a**2'\n    assert sstr(sin(a)) == 'sin(a)'\n    assert sstr(log(a)) == 'log(a)'\n\ndef test_sstr_equality():\n    assert sstr(Eq(a + b, 0)) == 'Eq(a + b, 0)'\n    assert sstr(a == b) == 'Eq(a, b)'\n\ndef test_sstr_expressions():\n    x = symbols('x')\n    assert sstr(integrate(x**2, x)) == 'integrate(x**2, x)'\n    assert sstr(diff(x**2, x)) == 'diff(x**2, x)'\n\ndef test_sstr_functions():\n    assert sstr(factorial(5)) == 'factorial(5)'\n    assert sstr(gamma(2)) == 'gamma(2)'\n\ndef test_sstr_numbers():\n    assert sstr(pi) == 'pi'\n    assert sstr(2.71828) == '2.71828'\n    assert sstr(1j) == '1j'\n    assert sstr(S(1)) == 'S(1)'\n\ndef test_sstr_complexes():\n    assert sstr(2 + 3j) == '2 + 3j'\n    assert sstr(complex(1, 2)) == 'complex(1, 2)'\n\ndef test_sstr_symbols():\n    a, b = symbols('a b')\n    assert sstr(a) == 'a'\n    assert sstr(b) == 'b'\n\ndef test_sstr_sets():\n    assert sstr({1, 2, 3}) == '{1, 2, 3}'\n    assert sstr(set([1, 2, 3])) == '{1, 2, 3}'\n\ndef test_sstr_tuples():\n    assert sstr((1, 2, 3)) == '(1, 2, 3)'\n    assert sstr(tuple([1, 2, 3])) == '(1, 2, 3)'\n\ndef test_sstr_strings():\n    assert sstr(str(123)) == \"'123'\"\n\n\n\ndef test_sstrrepr_basic():\n    a, b = symbols('a b')\n    assert sstrrepr(a + b) == \"a + b\"\n    assert sstrrepr(a * b) == \"a * b\"\n    assert sstrrepr(a**2) == \"a**2\"\n    assert sstrrepr(sin(a)) == \"sin(a)\"\n    assert sstrrepr(log(a)) == \"log(a)\"\n\ndef test_sstrrepr_equality():\n    assert sstrrepr(Eq(a + b, 0)) == \"Eq(a + b, 0)\"\n    assert sstrrepr(a == b) == \"Eq(a, b)\"\n\ndef test_sstrrepr_expressions():\n    x = symbols('x')\n    assert sstrrepr(integrate(x**2, x)) == \"integrate(x**2, x)\"\n    assert sstrrepr(diff(x**2, x)) == \"diff(x**2, x)\"\n\ndef test_sstrrepr_functions():\n    assert sstrrepr(factorial(5)) == \"factorial(5)\"\n    assert sstrrepr(gamma(2)) == \"gamma(2)\"\n\ndef test_sstrrepr_numbers():\n    assert sstrrepr(pi) == \"'pi'\"\n    assert sstrrepr(2.71828) == \"2.71828\"\n    assert sstrrepr(1j) == \"'1j'\"\n    assert sstrrepr(S(1)) == \"S(1)\"\n\ndef test_sstrrepr_complexes():\n    assert sstrrepr(2 + 3j) == \"2 + 3j\"\n    assert sstrrepr(complex(1, 2)) == \"complex(1, 2)\"\n\ndef test_sstrrepr_symbols():\n    a, b = symbols('a b')\n    assert sstrrepr(a) == \"a\"\n    assert sstrrepr(b) == \"b\"\n\ndef test_sstrrepr_sets():\n    assert sstrrepr({1, 2, 3}) == \"{1, 2, 3}\"\n    assert sstrrepr(set([1, 2, 3])) == \"{1, 2, 3}\"\n\ndef test_sstrrepr_tuples():\n    assert sstrrepr((1, 2, 3)) == \"(1, 2, 3)\"\n    assert sstrrepr(tuple([1, 2, 3])) == \"(1, 2, 3)\"\n\ndef test_sstrrepr_strings():\n    assert sstrrepr(str(123)) == \"'123'\"\n"], "sample_7": ["\nfrom django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator\nfrom django.core.exceptions import ValidationError\nimport unittest\n\n\nclass TestUsernameValidators(unittest.TestCase):\n\n    def test_ascii_username_validator(self):\n        validator = ASCIIUsernameValidator()\n        self.assertEqual(validator.regex, r'^[\\w.@+-]+\\Z')\n        self.assertEqual(validator.message, _(\n            'Enter a valid username. This value may contain only English letters, '\n            'numbers, and @/./+/-/_ characters.'\n        ))\n        self.assertEqual(validator.flags, re.ASCII)\n\n        self.assertTrue(validator.validate('test_ascii'))\n        self.assertTrue(validator.validate('test.ascii'))\n        self.assertTrue(validator.validate('test+ascii'))\n        self.assertTrue(validator.validate('test_ascii'))\n\n        with self.assertRaises(ValidationError):\n            validator.validate('\u0442\u0435\u0441\u0442_\u0430\u0441\u0441i')\n\n    def test_unicode_username_validator(self):\n        validator = UnicodeUsernameValidator()\n        self.assertEqual(validator.regex, r'^[\\w.@+-]+\\Z')\n        self.assertEqual(validator.message, _(\n            'Enter a valid username. This value may contain only letters, '\n            'numbers, and @/./+/-/_ characters.'\n        ))\n        self.assertEqual(validator.flags, 0)\n\n        self.assertTrue(validator.validate('test_unicode'))\n        self.assertTrue(validator.validate('\u0442\u0435\u0441\u0442_unicode'))\n        self.assertTrue(validator.validate('test.unicode'))\n        self.assertTrue(validator.validate('test+unicode'))\n        self.assertTrue(validator.validate('test_unicode'))\n\n        with self.assertRaises(ValidationError):\n            validator.validate('\u0442\u0435\u0441\u0442_\u0430\u0441\u0441i')\n"], "sample_12": ["\nimport unittest\nfrom django.db import connection\nfrom django.db.models import (\n    F,\n    IntegerField,\n    DateTimeField,\n    Value,\n    CharField,\n    PositiveIntegerField,\n    Q,\n    Exists,\n    Lookup,\n    BooleanField,\n)\nfrom django.test import TestCase\n\nfrom django.db.models.lookups import (\n    Exact,\n    IExact,\n    GreaterThan,\n    GreaterThanOrEqual,\n    LessThan,\n    LessThanOrEqual,\n    In,\n    Contains,\n    IContains,\n    StartsWith,\n    IStartsWith,\n    EndsWith,\n    IEndsWith,\n    Range,\n    IsNull,\n    Regex,\n    IRegex,\n    YearExact,\n    YearGt,\n    YearGte,\n    YearLt,\n    YearLte,\n    Transform,\n    BuiltinLookup,\n    FieldGetDbPrepValueMixin,\n    IntegerFieldFloatRounding,\n)\n\nclass LookupTests(TestCase):\n    def setUp(self):\n        connection.settings_dict['DATABASE_ENGINE'] = 'django.db.backends.sqlite3'\n        connection.open()\n\n    def tearDown(self):\n        connection.close()\n\n    def test_exact(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n        MyModel.objects.create(name='test')\n        query = MyModel.objects.filter(name__exact='test')\n        self.assertEqual(query.query.get_bind_params(), ('test',))\n\n    def test_iexact(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n        MyModel.objects.create(name='Test')\n        query = MyModel.objects.filter(name__iexact='test')\n        self.assertEqual(query.query.get_bind_params(), ('test',))\n\n    def test_gt(self):\n        class MyModel(models.Model):\n            name = models.IntegerField()\n        MyModel.objects.create(name=10)\n        query = MyModel.objects.filter(name__gt=5)\n        self.assertEqual(query.query.get_bind_params(), (5,))\n\n    def test_gte(self):\n        class MyModel(models.Model):\n            name = models.IntegerField()\n        MyModel.objects.create(name=10)\n        query = MyModel.objects.filter(name__gte=10)\n        self.assertEqual(query.query.get_bind_params(), (10,))\n\n    def test_lt(self):\n        class MyModel(models.Model):\n            name = models.IntegerField()\n        MyModel.objects.create(name=10)\n        query = MyModel.objects.filter(name__lt=10)\n        self.assertEqual(query.query.get_bind_params(), (10,))\n\n    def test_lte(self):\n        class MyModel(models.Model):\n            name = models.IntegerField()\n        MyModel.objects.create(name=10)\n        query = MyModel.objects.filter(name__lte=10)\n        self.assertEqual(query.query.get_bind_params(), (10,))\n\n    def test_in(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n        MyModel.objects.bulk_create([\n            models.Model.objects.create(name='test1'),\n            models.Model.objects.create(name='test2'),\n            models.Model.objects.create(name='test3'),\n        ])\n        query = MyModel.objects.filter(name__in=['test1', 'test3'])\n        self.assertEqual(query.query.get_bind_params(), ('test1', 'test3'))\n\n    def test_contains(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n        MyModel.objects.create(name='test123')\n        query = MyModel.objects.filter(name__contains='test')\n        self.assertEqual(query.query.get_bind_params(), ('test',))\n\n    def test_icontains(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n        MyModel.objects.create(name='Test123')\n        query = MyModel.objects.filter(name__icontains='test')\n        self.assertEqual(query.query.get_bind_params(), ('test',))\n\n    def test_startswith(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n        MyModel.objects.create(name='test123')\n        query = MyModel.objects.filter(name__startswith='test')\n        self.assertEqual(query.query.get_bind_params(), ('test',))\n\n    def test_istartswith(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n        MyModel.objects.create(name='Test123')\n        query = MyModel.objects.filter(name__istartswith='test')\n        self.assertEqual(query.query.get_bind_params(), ('test',))\n\n    def test_endswith(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n        MyModel.objects.create(name='test123')\n        query = MyModel.objects.filter(name__endswith='3')\n        self.assertEqual(query.query.get_bind_params(), ('3',))\n\n    def test_iendswith(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n        MyModel.objects.create(name='test123')\n        query = MyModel.objects.filter(name__iendswith='3')\n        self.assertEqual(query.query.get_bind_params(), ('3',))\n\n    def test_range(self):\n        class MyModel(models.Model):\n            name = models.IntegerField()\n        MyModel.objects.create(name=10)\n        query = MyModel.objects.filter(name__range=(5, 15))\n        self.assertEqual(query.query.get_bind_params(), (5, 15))\n\n    def test_isnull(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n            nullable = models.CharField(max_length=100, null=True)\n        MyModel.objects.create(name='test', nullable=None)\n        query = MyModel.objects.filter(name__isnull=False)\n        self.assertEqual(query.query.get_bind_params(), ())\n\n    def test_iregex(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n        MyModel.objects.create(name='test123')\n        query = MyModel.objects.filter(name__iregex='test')\n        self.assertEqual(query.query.get_bind_params(), ('test',))\n\n    def test_year_exact(self):\n        class MyModel(models.Model):\n            date = models.DateField()\n        MyModel.objects.create(date=date(2023, 1, 1))\n        query = MyModel.objects.filter(date__year__exact=2023)\n        self.assertEqual(query.query.get_bind_params(), (2023,))\n\n    def test_year_gt(self):\n        class MyModel(models.Model):\n            date = models.DateField()\n        MyModel.objects.create(date=date(2023, 1, 1))\n        query = MyModel.objects.filter(date__year__gt=2022)\n        self.assertEqual(query.query.get_bind_params(), (2022,))\n\n    def test_year_gte(self):\n        class MyModel(models.Model):\n            date = models.DateField()\n        MyModel.objects.create(date=date(2023, 1, 1))\n        query = MyModel.objects.filter(date__year__gte=2023)\n        self.assertEqual(query.query.get_bind_params(), (2023,))\n\n    def test_year_lt(self):\n        class MyModel(models.Model):\n            date = models.DateField()\n        MyModel.objects.create(date=date(2023, 1, 1))\n        query = MyModel.objects.filter(date__year__lt=2023)\n        self.assertEqual(query.query.get_bind_params(), (2023,))\n\n    def test_year_lte(self):\n        class MyModel(models.Model):\n            date = models.DateField()\n        MyModel.objects.create(date=date(2023, 1, 1))\n        query = MyModel.objects.filter(date__year__lte=2023)\n        self.assertEqual(query.query.get_bind_params(), (2023,))\n\n\n\n"], "sample_32": ["\nimport unittest\nfrom django.dispatch import Signal, receiver\nimport weakref\nfrom django.apps import apps\n\n\nclass MockObject:\n    def __init__(self, name, some_value):\n        self.name = name\n        self.some_value = some_value\n\n    def __eq__(self, other):\n        return self.name == other.name and self.some_value == other.some_value\n\n    def __hash__(self):\n        return hash((self.name, self.some_value))\n\n\nclass TestSignal(unittest.TestCase):\n\n    def test_signal_creation(self):\n        signal = Signal()\n        self.assertEqual(signal.receivers, [])\n\n    def test_connect(self):\n        signal = Signal()\n        @receiver(signal)\n        def test_receiver(sender, **kwargs):\n            pass\n\n        self.assertEqual(len(signal.receivers), 1)\n        self.assertIn(('test_receiver', _make_id(None)), signal.receivers)\n\n    def test_disconnect(self):\n        signal = Signal()\n        @receiver(signal)\n        def test_receiver(sender, **kwargs):\n            pass\n\n        signal.connect(test_receiver)\n        signal.disconnect(test_receiver)\n        self.assertEqual(len(signal.receivers), 0)\n\n    def test_send(self):\n        signal = Signal()\n        @receiver(signal)\n        def test_receiver(sender, **kwargs):\n            return \"receiver_called\"\n\n        with self.assertRaises(RuntimeError):\n            signal.send(None)\n        result = signal.send(\n            MockObject(\"test_sender\", \"test_value\"),\n            test_value=\"test\",\n        )\n        self.assertEqual(result, [\"(test_receiver, 'receiver_called')\"])\n\n    def test_send_robust(self):\n        signal = Signal()\n        @receiver(signal)\n        def test_receiver(sender, **kwargs):\n            raise ValueError(\"Test error\")\n\n        result = signal.send_robust(\n            MockObject(\"test_sender\", \"test_value\"),\n            test_value=\"test\",\n        )\n        self.assertEqual(result, [((test_receiver, ValueError(\"Test error\")))])\n\n    def test_has_listeners(self):\n        signal = Signal()\n        @receiver(signal)\n        def test_receiver(sender, **kwargs):\n            pass\n        self.assertTrue(signal.has_listeners())\n        signal.disconnect(test_receiver)\n        self.assertFalse(signal.has_listeners())\n\n    def test_weak_references(self):\n        signal = Signal()\n        @receiver(signal)\n        def test_receiver(sender, **kwargs):\n            pass\n\n        signal.connect(test_receiver)\n        del test_receiver\n        with self.assertRaises(ReferenceError):\n            signal.send(MockObject(\"test_sender\", \"test_value\"))\n\n\n\n# Helper function (copied from dispatcher.py)\ndef _make_id(target):\n    if hasattr(target, '__func__'):\n        return (id(target.__self__), id(target.__func__))\n    return id(target)\n\n\n"], "sample_79": ["\nimport unittest\nfrom pathlib import Path\nfrom xarray.core import formatting\nimport numpy as np\nfrom xarray import Dataset, DataArray\nfrom typing import Dict\nfrom datetime import datetime, timedelta\nimport pandas as pd\n\nclass TestFormatting(unittest.TestCase):\n    def test_pretty_print(self):\n        self.assertEqual(formatting.pretty_print(\"hello world\", 10), \"hello world \")\n        self.assertEqual(formatting.pretty_print(\"This is a very long string\", 10), \"This is a ver\")\n        self.assertEqual(formatting.pretty_print(\"This is a very long string\", 5), \"This i\")\n\n    def test_maybe_truncate(self):\n        self.assertEqual(formatting.maybe_truncate(\"This is a test\", 10), \"This is a test\")\n        self.assertEqual(formatting.maybe_truncate(\"This is a test\", 5), \"This i\")\n        self.assertEqual(formatting.maybe_truncate(\"This is a very long string\", 10), \"This is a very long string\")\n\n    def test_wrap_indent(self):\n        text = \"\"\"This is a test string\n        that should be wrapped.\"\"\"\n        result = formatting.wrap_indent(text, length=10)\n        self.assertEqual(result, \"This is a test string\\n\"\n                         \"that should be wrapped.\")\n\n    def test_format_timestamp(self):\n        self.assertEqual(formatting.format_timestamp(datetime(2023, 10, 26, 10, 0, 0)), \"2023-10-26T10:00:00\")\n        self.assertEqual(formatting.format_timestamp(pd.Timestamp(\"2023-10-26T10:00:00\")), \"2023-10-26T10:00:00\")\n\n    def test_format_timedelta(self):\n        self.assertEqual(formatting.format_timedelta(timedelta(days=1, seconds=10)), \"1 day, 00:00:10\")\n        self.assertEqual(formatting.format_timedelta(timedelta(seconds=10), timedelta_format=\"time\"), \"00:00:10\")\n\n    def test_format_item(self):\n        self.assertEqual(formatting.format_item(True), \"True\")\n        self.assertEqual(formatting.format_item(1), \"1\")\n        self.assertEqual(formatting.format_item(1.234), \"1.234\")\n\n    def test_format_items(self):\n        self.assertEqual(formatting.format_items([1, 2, 3]), [\"1\", \"2\", \"3\"])\n        self.assertEqual(formatting.format_items([1.234, 2.345, 3.456]), [\"1.234\", \"2.345\", \"3.456\"])\n\n    def test_format_array_flat(self):\n        array = np.array([1, 2, 3, 4, 5])\n        self.assertEqual(formatting.format_array_flat(array, 10), \"1 2 3 4 5\")\n\n    def test_inline_dask_repr(self):\n        from dask.array import from_array\n        array = from_array(np.array([1, 2, 3]), chunks=(2,))\n        self.assertEqual(formatting.inline_dask_repr(array), \"dask.array<chunksize=(2,)>\")\n\n    def test_inline_sparse_repr(self):\n        from sparse import coo_matrix\n        array = coo_matrix([[1, 2], [3, 4]])\n        self.assertEqual(formatting.inline_sparse_repr(array), \"<coo: nnz=4, fill_value=0>\")\n\n    def test_inline_variable_array_repr(self):\n        data = np.array([1, 2, 3])\n        var = DataArray(data, dims=\"x\", name=\"my_array\")\n        self.assertEqual(formatting.inline_variable_array_repr(var, 10), \"  my_array: x\")\n\n    def test_summarize_coord(self):\n        coords = {\"x\": ((\"x\",), [1, 2, 3])}\n        self.assertEqual(formatting.summarize_coord(\"x\", coords[\"x\"], 10), \"  x: x(1, 2, 3)\")\n\n    def test_summarize_datavar(self):\n        data = np.array([1, 2, 3])\n        var = DataArray(data, dims=\"x\", name=\"my_array\")\n        self.assertEqual(formatting.summarize_datavar(\"my_array\", var, 10), \"  my_array: x\")\n\n    def test_summarize_attr(self):\n        attrs = {\"x\": 1, \"y\": \"string\"}\n        self.assertEqual(formatting.summarize_attr(\"x\", attrs[\"x\"], 10), \"    x: 1\")\n\n    def test_data_vars_repr(self):\n        data_vars = {\"my_array\": DataArray(np.array([1, 2]), dims=(\"x\",))}\n        self.assertEqual(\n            formatting.data_vars_repr(data_vars, col_width=10),\n            \"Data variables:\\n    my_array: x(2,)\"\n        )\n\n    def test_attrs_repr(self):\n        attrs = {\"x\": 1, \"y\": \"string\"}\n        self.assertEqual(formatting.attrs_repr(attrs, col_width=10), \"Attributes:\\n    x: 1\\n    y: string\")\n\n    def test_indexes_repr(self):\n        indexes = {\"x\": DataArray([1, 2], dims=(\"x\",))}\n        self.assertEqual(formatting.indexes_repr(indexes), \"x: <xarray.DataArray(data=[1 2], dims=['x'], name=None, shape=(2,), dtype=int64,attrs={})\")\n\n    def test_dim_summary(self):\n        dims = {\"x\": 5, \"y\": 3}\n        self.assertEqual(formatting.dim_summary(dims), \"x: 5, y: 3\")\n\n\n    def test_unindexed_dims_repr(self):\n        dims = {\"x\": 5, \"y\": 3, \"z\": 1}\n        coords = {\"x\": DataArray([1, 2], dims=(\"x\",)), \"y\": DataArray([1, 2, 3], dims=(\"y\",))}\n        self.assertEqual(formatting.unindexed_dims_repr(dims, coords), \"Dimensions without coordinates: z\")\n        \n\n    def test_array_repr(self):\n        data = np.array([1, 2, 3])\n        var = DataArray(data, dims=\"x\", name=\"my_array\")\n        self.assertEqual(formatting.array_repr(var), \"<xarray.DataArray object at 0x...>x(3)[\\n  my_array: x(3)\\n]\")\n\n    def test_dataset_repr(self):\n        data = {\"x\": np.array([1, 2, 3]), \"y\": np.array([4, 5, 6])}\n        ds = Dataset(data, dims=[\"x\"])\n        self.assertEqual(formatting.dataset_repr(ds), \"<xarray.Dataset object at 0x...>Dimensions: x(3)\\n\\n    x(3)\\n\\nData variables:\\n    x: x(3)\\n\")\n\n\n    def test_diff_dim_summary(self):\n        a = Dataset(data_vars={\"x\": np.arange(10)}, dims=\"x\")\n        b = Dataset(data_vars={\"x\": np.arange(10)[::-1]}, dims=\"x\")\n        self.assertEqual(formatting.diff_dim_summary(a, b), \"\")\n        \n        c = Dataset(data_vars={\"x\": np.arange(10), \"y\": np.arange(10)}, dims=(\"x\",))\n        d = Dataset(data_vars={\"x\": np.arange(10), \"z\": np.arange(10)}, dims=(\"x\",))\n        self.assertEqual(formatting.diff_dim_summary(c, d), \"Differing dimensions:\\n    (x,) != (x, z)\")\n\n    def test_diff_coords_repr(self):\n        a = Dataset(data_vars={\"x\": np.arange(10)}, coords={\"x\": pd.Series([1, 2, 3])})\n        b = Dataset(data_vars={\"x\": np.arange(10)}, coords={\"x\": pd.Series([1, 2, 4])})\n        self.assertEqual(formatting.diff_coords_repr(a.coords, b.coords, \"identical\", col_width=10).split(\"\\n\")[1], \"L    x: <xarray.Series(data=[1, 2, 3], name=None, index=Int64Index([0, 1, 2], dtype='int64'):\\nR    x: <xarray.Series(data=[1, 2, 4], name=None, index=Int64Index([0, 1, 2], dtype='int64'):\")\n\n    def test_diff_data_vars_repr(self):\n        a = Dataset({\"x\": np.arange(5)})\n        b = Dataset({\"x\": np.arange(5)**2})\n        self.assertEqual(formatting.diff_data_vars_repr(a.data_vars, b.data_vars, \"equals\"), \"Data variables only on\\n    x: 0 1 2 3 4\\n\")\n\n\n    def test_diff_attrs_repr(self):\n        a = Dataset({\"x\": np.arange(5)})\n        a.attrs['my_key'] = 1\n        b = Dataset({\"x\": np.arange(5)})\n        self.assertEqual(formatting.diff_attrs_repr(a.attrs, b.attrs, \"identical\"), \"Attributes only on the left:\\n    my_key: 1\")\n\n    def test_diff_array_repr(self):\n        a = Dataset({\"x\": np.ones((2, 2)), \"y\": np.zeros((2, 2))}\n        b = Dataset({\"x\": np.ones((2, 2))})\n        self.assertEqual(formatting.diff_array_repr(a, b, \"identical\"), \"Left and right Dataset objects are not identical\\n    Dimensions: x(2, 2)\\nLeft           L\\n    x(2, 2)\\nRight          R\\n    x(2, 2)\")\n\n\n\n"], "sample_147": ["\nfrom sympy.matrices import Adjoint, Inverse, MatrixSymbol, Transpose, KroneckerProduct\nfrom sympy.printing.pretty import pprint, pretty as xpretty\nfrom sympy.printing.pretty.pretty_symbology import center_accent, is_combining\nfrom sympy import pretty  # As it is redefined above\nfrom sympy.abc import x, y, z\nfrom sympy.logic import And, Or, Not, Implies\nfrom sympy.geometry import Point, Line, Segment, Circle\nfrom sympy.functions import sin, cos, exp, log, sqrt\nfrom sympy.polys import Poly, ring\nfrom sympy.stats import Normal, random_sample\nfrom sympy.concrete.expr_maker import expr_maker\nfrom sympy.tensor import TensorProduct\n\ndef test_basic_types():\n    assert xpretty(1) == \"1\"\n    assert xpretty(2.5) == \"2.5\"\n    assert xpretty(x) == \"x\"\n    assert xpretty((x + 1)) == \"(x + 1)\"\n    assert xpretty(x**2) == \"x**2\"\n    assert xpretty(sin(x)) == \"sin(x)\"\n    assert xpretty(sqrt(x)) == \"\u221ax\"\n\ndef test_operations():\n    assert xpretty(x + 1) == \"x + 1\"\n    assert xpretty(x - 1) == \"x - 1\"\n    assert xpretty(x * 2) == \"2*x\"\n    assert xpretty(x / 2) == \"x/2\"\n    assert xpretty(x**2) == \"x**2\"\n\ndef test_functions():\n    assert xpretty(sin(x)) == \"sin(x)\"\n    assert xpretty(cos(x)) == \"cos(x)\"\n    assert xpretty(exp(x)) == \"exp(x)\"\n    assert xpretty(log(x)) == \"log(x)\"\n\ndef test_symbols():\n    assert xpretty(x) == \"x\"\n    assert xpretty(y) == \"y\"\n    assert xpretty(z) == \"z\"\n\ndef test_matrix():\n    A = Matrix([[1, 2], [3, 4]])\n    assert xpretty(A) == \"[[1, 2], [3, 4]]\"\n\ndef test_matrix_operations():\n    A = Matrix([[1, 2], [3, 4]])\n    B = Matrix([[5, 6], [7, 8]])\n    assert xpretty(A + B) == \"[[6, 8], [10, 12]]\"\n    assert xpretty(A * B) == \"[[19, 22], [43, 50]]\"\n\ndef test_logic():\n    assert xpretty(And(x, y)) == \"x and y\"\n    assert xpretty(Or(x, y)) == \"x or y\"\n    assert xpretty(Not(x)) == \"\u00acx\"\n    assert xpretty(Implies(x, y)) == \"x implies y\"\n\ndef test_geometry():\n    p = Point(1, 2)\n    l = Line(p, x)\n    assert xpretty(p) == \"(1, 2)\"\n    assert xpretty(l) == \"Line(Point(1, 2), x)\"\n\ndef test_concrete_expr_maker():\n    expr_maker = expr_maker()\n    expr = expr_maker.apply_binary('add', expr_maker.apply_symbol('x'), expr_maker.apply_constant(2))\n    assert xpretty(expr) == \"x + 2\"\n\ndef test_tensor_product():\n    a = MatrixSymbol('a', 3, 2)\n    b = MatrixSymbol('b', 2, 4)\n    t = TensorProduct(a, b)\n\n    assert xpretty(t) == \"TensorProduct(a, b)\"\n\n\n\n"], "sample_74": ["\nimport unittest\nimport numpy as np\nfrom matplotlib.figure import Figure, figaspect, _stale_figure_callback, _blocking_input\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg\nfrom matplotlib.cm import cm\nfrom matplotlib.axes import Axes\nfrom matplotlib.lines import Line2D\n\nclass TestFigure(unittest.TestCase):\n\n    def test_get_size_inches(self):\n        fig = Figure(figsize=(5, 4))\n        self.assertAlmostEqual(fig.get_figwidth(), 5)\n        self.assertAlmostEqual(fig.get_figheight(), 4)\n\n    def test_set_size_inches(self):\n        fig = Figure(figsize=(6, 3))\n        fig.set_size_inches(4, 6)\n        self.assertAlmostEqual(fig.get_figwidth(), 4)\n        self.assertAlmostEqual(fig.get_figheight(), 6)\n\n    def test_set_size_inches_forward(self):\n        fig = Figure(figsize=(6, 3))\n        fig.set_size_inches(4, 6, forward=False)\n        self.assertAlmostEqual(fig.get_figwidth(), 6)\n        self.assertAlmostEqual(fig.get_figheight(), 3)\n\n    def test_set_dpi(self):\n        fig = Figure()\n        fig.set_dpi(150)\n        self.assertEqual(fig.get_dpi(), 150)\n\n    def test_figaspect(self):\n        # Test aspect ratio for float input\n        w, h = figaspect(2.0)\n        self.assertAlmostEqual(w, 1.0, delta=1e-6)\n        self.assertAlmostEqual(h, 2.0, delta=1e-6)\n\n        # Test aspect ratio for array input\n        A = np.random.rand(3, 2)\n        w, h = figaspect(A)\n        self.assertAlmostEqual(w / h, A.shape[0] / A.shape[1], delta=1e-6)\n\n    def test_tight_layout(self):\n        fig = Figure()\n        ax1 = fig.add_subplot(1, 1, 1)\n        ax1.text(0.5, 0.5, \"Test text\", ha=\"center\", va=\"center\")\n        fig.tight_layout()\n        # Check if the text is not overlapping the axes\n\n    def test_stale(self):\n        fig = Figure()\n        fig.stale = False\n        fig.stale = True\n        self.assertTrue(fig.stale)\n        # more tests for stale behavior\n\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n"], "sample_151": ["\nfrom sympy.geometry.point import Point, Point2D, Point3D, rotate, scale, translate\n\ndef test_Point_init():\n    p = Point(1, 2)\n    assert p.x == 1\n    assert p.y == 2\n    assert p.dimension == 2\n    \n    p = Point([1, 2])\n    assert p.x == 1\n    assert p.y == 2\n    assert p.dimension == 2\n\n    p = Point(1, 2, evaluate=False)\n    assert p.x == 1\n    assert p.y == 2\n    assert p.dimension == 2\n\n    with raises(TypeError):\n        Point(1, 2, 3, evaluate=True)\n\n    with raises(TypeError):\n        Point('a', 'b')\n\ndef test_Point_equal():\n    p1 = Point(1, 2)\n    p2 = Point(1, 2)\n    p3 = Point(1, 3)\n    \n    assert p1 == p2\n    assert not p1 == p3\n    assert p1 != p3\n    \ndef test_Point_add():\n    p1 = Point(1, 2)\n    p2 = Point(3, 4)\n    \n    p3 = p1 + p2\n    assert p3.x == 4\n    assert p3.y == 6\n    \n    p4 = p2 + p1\n    assert p4.x == 4\n    assert p4.y == 6\n    \n    with raises(TypeError):\n        p1 + Point2D(3, 4)\n\ndef test_Point_sub():\n    p1 = Point(1, 2)\n    p2 = Point(3, 4)\n    \n    p3 = p1 - p2\n    assert p3.x == -2\n    assert p3.y == -2\n    \n    p4 = p2 - p1\n    assert p4.x == 2\n    assert p4.y == 2\n\ndef test_Point_distance():\n    p1 = Point(1, 2)\n    p2 = Point(3, 4)\n    \n    dist = p1.distance(p2)\n    assert dist == sqrt(5)\n    \ndef test_Point_dot():\n    p1 = Point(1, 2)\n    p2 = Point(3, 4)\n    \n    dot = p1.dot(p2)\n    assert dot == 11\n    \ndef test_Point_projection():\n    p1 = Point(1, 2)\n    p2 = Point(3, 4)\n\n    proj = Point.project(p1, p2)\n    assert proj.x == 2.6666666666666666\n    assert proj.y == 3.333333333333333\n\ndef test_Point_intersection():\n    p1 = Point(1, 2)\n    p2 = Point(3, 4)\n    \n    with raises(TypeError):\n        p1.intersection('abc')\n    assert p1.intersection(p2) == []\n    \n\ndef test_Point2D_init():\n    p = Point2D(1, 2)\n    assert p.x == 1\n    assert p.y == 2\n    assert p.dimension == 2\n    \n    p = Point2D([1, 2])\n    assert p.x == 1\n    assert p.y == 2\n    assert p.dimension == 2\n\n    p = Point2D(1, 2, evaluate=False)\n    assert p.x == 1\n    assert p.y == 2\n    assert p.dimension == 2\n\n    with raises(TypeError):\n        Point2D(1, 2, 3)\n\n    with raises(TypeError):\n        Point2D('a', 'b')\n\ndef test_Point2D_are_collinear():\n    p1, p2, p3 = Point2D(0, 0), Point2D(1, 1), Point2D(2, 2)\n    \n    assert Point2D.are_collinear(p1, p2, p3)\n\ndef test_Point3D_init():\n    p = Point3D(1, 2, 3)\n    assert p.x == 1\n    assert p.y == 2\n    assert p.z == 3\n    assert p.dimension == 3\n    \n    p = Point3D([1, 2, 3])\n    assert p.x == 1\n    assert p.y == 2\n    assert p.z == 3\n    assert p.dimension == 3\n\n    p = Point3D(1, 2, 3, evaluate=False)\n    assert p.x == 1\n    assert p.y == 2\n    assert p.z == 3\n    assert p.dimension == 3\n\n    with raises(TypeError):\n        Point3D(1, 2, 3, 4)\n\n    with raises(TypeError):\n        Point3D('a', 'b', 'c')\n\ndef test_Point3D_scale():\n    p = Point3D(1, 2, 3)\n    p2 = p.scale(2)\n\n    assert p2.x == 2\n    assert p2.y == 4\n    assert p2.z == 6\n\n    p3 = p.scale(2, 3)\n\n    assert p3.x == 2\n    assert p3.y == 6\n    assert p3.z == 3\n\n\n\n"], "sample_34": ["\nimport unittest\nimport warnings\nfrom unittest import mock\nfrom django.apps import apps\nfrom django.db import models, router\nfrom django.db.models import (\n    F,\n    Q,\n    ExpressionWrapper,\n    Manager,\n    ForeignKey,\n    CASCADE,\n)\nfrom django.core.checks import Error, Warning, register\nfrom django.test import override_settings\nfrom django.test.testcases import TransactionTestCase\n\nfrom .base import (\n    make_foreign_order_accessors,\n    model_unpickle,\n    checks as django_checks,\n    method_set_order,\n    method_get_order,\n)\n\nclass BaseTest(TransactionTestCase):\n    @classmethod\n    def setUpClass(cls):\n        super().setUpClass()\n        cls.objects_cache = {}\n\n        class User(models.Model):\n            name = models.CharField(max_length=255)\n            posts = models.ManyToManyField('Post', related_name='users')\n\n        class Post(models.Model):\n            title = models.CharField(max_length=255)\n            user = models.ForeignKey(User, on_delete=models.CASCADE)\n\n        cls.User = User\n        cls.Post = Post\n        apps.populate_cache(apps, ['myapp'])\n\nclass TestBase(BaseTest):\n\n    def test_model_unpickle(self):\n        with override_settings(INSTALLED_APPS=['myapp']):\n            user = self.User\n            unpickled_user = model_unpickle(user)\n\n            self.assertIs(unpickled_user.__class__, user)\n\n    def assertFieldDoesNotExist(self, model, field_name):\n        with self.assertRaises(FieldDoesNotExist):\n            model._meta.get_field(field_name)\n\n    def assertFieldExists(self, model, field_name):\n        self.assertTrue(model._meta.get_field(field_name) is not None)\n\nclass TestChecks(TestBase):\n    def test_check_indexes_all_databases(self):\n        # TODO: Add test case for checking indexes across all databases\n\n    def test_check_model_name_db_lookup_clashes(self):\n        class ModelWithClash(models.Model):\n            name = models.CharField(max_length=255)\n\n        with self.subTest('Single database'):\n            # TODO: Test with single database\n\n        with self.subTest('Multiple databases'):\n            # TODO: Test with multiple databases\n\n\n\n    def test_check_unique_together(self):\n        class ModelWithUniqueTogether(models.Model):\n            name = models.CharField(max_length=255)\n            field2 = models.CharField(max_length=255)\n            unique_together = ('name', 'field2')\n\n        errors = django_checks.run_checks(\n            [ModelWithUniqueTogether],\n            databases=['default'],\n        )\n        self.assertEqual(len(errors), 0)\n\n    def test_check_unique_together_with_foreign_keys(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=255)\n\n        class Book(models.Model):\n            title = models.CharField(max_length=255)\n            author = models.ForeignKey(Author, on_delete=models.CASCADE)\n            unique_together = ('title', 'author',)\n\n        errors = django_checks.run_checks(\n            [Book],\n            databases=['default'],\n        )\n        self.assertEqual(len(errors), 0)\n\n    def test_check_unique_together_with_order_with_respect_to(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=255)\n\n        class Book(models.Model):\n            title = models.CharField(max_length=255)\n            author = models.ForeignKey(Author, on_delete=models.CASCADE, related_name=\"books\")\n\n            class Meta:\n                order_with_respect_to = 'author'\n                unique_together = ('title', 'author',)\n\n        errors = django_checks.run_checks(\n            [Book],\n            databases=['default'],\n        )\n        self.assertEqual(len(errors), 0)\n\n    def test_check_ordering_with_respect_to(self):\n        class Foo(models.Model):\n            name = models.CharField(max_length=255)\n            bar = models.ForeignKey('Bar', on_delete=models.CASCADE, related_name='foos')\n\n        class Bar(models.Model):\n            value = models.IntegerField()\n\n        with self.subTest('Valid ordering'):\n            class FooMeta(models.ModelBase):\n                order_with_respect_to = 'bar_value'\n\n            Foo._meta = FooMeta\n            errors = django_checks.check_ordering_with_respect_to(Foo, 'bar')\n            self.assertEqual(len(errors), 0)\n\n        with self.subTest('Invalid ordering'):\n            class FooMeta(models.ModelBase):\n                order_with_respect_to = 'invalid_field'\n\n            Foo._meta = FooMeta\n            errors = django_checks.check_ordering_with_respect_to(Foo, 'bar')\n            self.assertEqual(len(errors), 1)\n\n    def test_check_ordering(self):\n\n        with self.subTest('Empty ordering'):\n            class User(models.Model):\n                pass  \n            errors = django_checks.check_ordering(User)\n            self.assertEqual(len(errors), 0)\n\n        with self.subTest('Valid ordering'):\n            class User(models.Model):\n                name = models.CharField(max_length=255)\n\n            errors = django_checks.check_ordering(User)\n            self.assertEqual(len(errors), 0)\n\n        with self.subTest('Invalid ordering'):\n            class User(models.Model):\n                name = models.CharField(max_length=255)\n\n                class Meta:\n                    ordering = ['invalid_field']  \n\n            errors = django_checks.check_ordering(User)\n            self.assertEqual(len(errors), 1)\n            \n\n        with self.subTest('Ordering with M2M fields'):\n            class User(models.Model):\n                name = models.CharField(max_length=255)\n                posts = models.ManyToManyField('Post', related_name='users')\n\n            class Post(models.Model):\n                title = models.CharField(max_length=255)\n\n            class Meta:\n                ordering = ('title',)\n            errors = django_checks.check_ordering(Post)\n            self.assertEqual(len(errors), 1)\n\n        with self.subTest('Ordering with relations'):\n            class User(models.Model):\n                name = models.CharField(max_length=255)\n\n            class Post(models.Model):\n                title = models.CharField(max_length=255)\n                user = models.ForeignKey(User, on_delete=models.CASCADE)\n\n            class Meta:\n                ordering = ('user__name',)\n            errors = django_checks.check_ordering(Post)\n            self.assertEqual(len(errors), 0)\n\n\n\n\n\n    def test_check_model_name_db_lookup_clashes_single_database(self):\n        class MyModel(models.Model):\n            pass\n\n        errors = django_checks.check_model_name_db_lookup_clashes(\n            [MyModel],\n            databases=['default'],\n        )\n        self.assertEqual(len(errors), 0)\n\n\n\n    def test_check_local_fields(self):\n        class User(models.Model):\n            name = models.CharField(max_length=255)\n\n        fields = ['name']\n\n        errors = django_checks.check_local_fields(fields, 'indexes')\n        self.assertEqual(len(errors), 0)\n\n\n\n    def test_check_single_primary_key(self):\n        class User(models.Model):\n            name = models.CharField(max_length=255)\n            pk = models.AutoField(primary_key=True)\n\n        errors = django_checks.check_single_primary_key(User)\n        self.assertEqual(len(errors), 0)\n\n    def test_check_id_field_is_present(self):\n        class User(models.Model):\n            name = models.CharField(max_length=255)\n\n        errors = django_checks.check_id_field_is_present(User)\n        self.assertEqual(len(errors), 1)\n\n\n\n    def test_check_ordering_with_pk(self):\n        class User(models.Model):\n            name = models.CharField(max_length=255)\n\n            class Meta:\n                ordering = ['pk']\n\n        errors = django_checks.check_ordering_with_pk(User)\n        self.assertEqual(len(errors), 1)\n\n\n\n    # These are tests for the model.\n\n    \n    def test_create_model_instance(self):\n        self.User = self.User\n\n    def test_pk(self):\n        self.assertFieldExists(self.User, 'id')\n        self.assertFieldExists(self.User, 'pk')\n\n"]}, "raw_scored_generations": {"sample_1": [true], "sample_4": [false], "sample_0": [true], "sample_2": [false], "sample_8": [true], "sample_15": [true], "sample_11": [false], "sample_9": [false], "sample_12": [false], "sample_3": [false], "sample_5": [true], "sample_14": [false], "sample_7": [false], "sample_13": [false], "sample_6": [false], "sample_10": [false], "sample_16": [true], "sample_24": [false], "sample_25": [false], "sample_23": [false], "sample_26": [false], "sample_22": [false], "sample_18": [true], "sample_31": [false], "sample_20": [false], "sample_19": [false], "sample_21": [true], "sample_28": [true], "sample_27": [false], "sample_17": [false], "sample_29": [false], "sample_35": [false], "sample_34": [false], "sample_40": [false], "sample_37": [true], "sample_39": [false], "sample_32": [true], "sample_33": [false], "sample_42": [false], "sample_30": [false], "sample_36": [false], "sample_50": [false], "sample_38": [true], "sample_43": [false], "sample_46": [true], "sample_45": [true], "sample_47": [false], "sample_41": [false], "sample_48": [true], "sample_51": [false], "sample_58": [true], "sample_54": [false], "sample_44": [false], "sample_52": [false], "sample_49": [false], "sample_57": [true], "sample_55": [false], "sample_53": [true], "sample_63": [true], "sample_61": [true], "sample_64": [false], "sample_59": [false], "sample_67": [false], "sample_56": [false], "sample_62": [false], "sample_60": [true], "sample_69": [false], "sample_65": [false], "sample_72": [false], "sample_77": [false], "sample_68": [false], "sample_74": [false], "sample_66": [true], "sample_73": [false], "sample_70": [false], "sample_79": [false], "sample_71": [false], "sample_75": [false], "sample_78": [false], "sample_81": [false], "sample_80": [false], "sample_86": [false], "sample_88": [true], "sample_83": [false], "sample_91": [false], "sample_76": [false], "sample_87": [true], "sample_90": [false], "sample_82": [false], "sample_84": [false], "sample_93": [false], "sample_89": [false], "sample_95": [false], "sample_85": [false], "sample_92": [false], "sample_98": [false], "sample_99": [true], "sample_94": [false], "sample_100": [false], "sample_104": [false], "sample_101": [false], "sample_109": [false], "sample_105": [false], "sample_110": [false], "sample_96": [false], "sample_102": [false], "sample_111": [false], "sample_97": [false], "sample_103": [false], "sample_106": [true], "sample_112": [false], "sample_107": [false], "sample_108": [false], "sample_115": [false], "sample_119": [false], "sample_118": [true], "sample_117": [true], "sample_120": [true], "sample_114": [false], "sample_124": [false], "sample_126": [false], "sample_121": [false], "sample_129": [false], "sample_113": [false], "sample_122": [false], "sample_116": [true], "sample_128": [false], "sample_134": [true], "sample_133": [false], "sample_125": [false], "sample_132": [true], "sample_127": [true], "sample_131": [true], "sample_123": [false], "sample_144": [true], "sample_130": [false], "sample_135": [false], "sample_141": [true], "sample_138": [true], "sample_139": [false], "sample_147": [false], "sample_136": [false], "sample_140": [true], "sample_143": [true], "sample_142": [true], "sample_137": [false], "sample_146": [false], "sample_151": [false], "sample_154": [true], "sample_153": [true], "sample_145": [true], "sample_152": [false], "sample_148": [true], "sample_158": [false], "sample_150": [false], "sample_157": [false], "sample_149": [true], "sample_155": [false], "sample_159": [false], "sample_156": [false]}}