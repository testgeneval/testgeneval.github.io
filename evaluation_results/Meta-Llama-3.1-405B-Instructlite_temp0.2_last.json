{"raw_generations": {"sample_97": ["def test_label_binarize_empty_input():\n    y = []\n    classes = [0, 1, 2]\n    pos_label = 1\n    neg_label = 0\n\n    lb = LabelBinarizer(neg_label=neg_label, pos_label=pos_label)\n    binarized = lb.fit_transform(y)\n    assert_array_equal(binarized, np.array([]))\n    assert_array_equal(lb.classes_, classes)\n\n    binarized = label_binarize(y, classes, neg_label=neg_label,\n                               pos_label=pos_label)\n    assert_array_equal(binarized, np.array([]))\n"], "sample_37": ["    def test_combine(self):\n        q1 = Q(x=1)\n        q2 = Q(y=2)\n        combined = q1 & q2\n        self.assertEqual(combined.children, [q1, q2])\n        self.assertEqual(combined.connector, Q.AND)\n\n        combined = q1 | q2\n        self.assertEqual(combined.children, [q1, q2])\n        self.assertEqual(combined.connector, Q.OR)\n"], "sample_7": ["    def test_ensure_echo_on_called(self, mocked_termios):\n        autoreload.ensure_echo_on()\n        self.assertEqual(mocked_termios.tcgetattr.call_count, 1)\n        self.assertEqual(mocked_termios.tcsetattr.call_count, 1)\n"], "sample_150": ["def test_solve_generic():\n    assert solve_generic([Poly(x - 1, x)], Options((x,), {'domain': 'ZZ'})) == [(1,)]\n    assert solve_generic([Poly(y - x, x, y), Poly(y - x - 1, x, y)], Options((x, y), {'domain': 'ZZ'})) is None\n\n    f_1 = Poly(x**2 + y + z - 1, x, y, z)\n    f_2 = Poly(x + y**2 + z - 1, x, y, z)\n    f_3 = Poly(x + y + z**2 - 1, x, y, z)\n\n    a, b = sqrt(2) - 1, -sqrt(2) - 1\n\n    assert solve_generic([f_1, f_2, f_3], Options((x, y, z), {'domain': 'ZZ'})) == \\\n        [(0, 0, 1), (0, 1, 0), (1, 0, 0)]\n\n    raises(NotImplementedError, lambda: solve_generic([Poly(x**3 - y**3, x, y)], Options((x, y), {'domain': 'ZZ'})))\n    raises(PolynomialError, lambda: solve_generic([Poly(1/x, x)], Options((x,), {'domain': 'ZZ'})))\n"], "sample_84": ["def test_fixture_scope_overrides_parametrize_scope(testdir):\n    \"\"\"Test that a fixture's scope can override the scope of a parametrize call (#2464)\"\"\"\n    testdir.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.fixture(scope=\"module\", params=[1, 2])\n            return request.param\n\n        @pytest.mark.parametrize(\"arg\", [1, 2], scope=\"function\")\n            pass\n    \"\"\"\n    )\n    result = testdir.runpytest()\n    result.stdout.fnmatch_lines([\"* 4 passed in *\"])\n"], "sample_47": ["def test_migration_plan_with_replaced_migrations(self):\n    \"\"\"\n    Tests that replaced migrations are properly handled in the migration plan.\n    \"\"\"\n    executor = MigrationExecutor(connection)\n    # Make sure the replaced migration is not applied\n    self.assertNotIn((\"migrations\", \"0001_initial\"), executor.loader.applied_migrations)\n    # Create a plan to apply the replacing migration\n    plan = executor.migration_plan([(\"migrations\", \"0002_second\")])\n    self.assertEqual(\n        plan,\n        [\n            (executor.loader.graph.nodes[\"migrations\", \"0001_initial\"], False),\n            (executor.loader.graph.nodes[\"migrations\", \"0002_second\"], False),\n        ],\n    )\n    # Fake-apply the replaced migration\n    executor.migrate([(\"migrations\", \"0001_initial\")], fake=True)\n    # Rebuild the graph to reflect the new DB state\n    executor.loader.build_graph()\n    # Create a new plan to apply the replacing migration\n    plan = executor.migration_plan([(\"migrations\", \"0002_second\")])\n    self.assertEqual(\n        plan,\n        [\n            (executor.loader.graph.nodes[\"migrations\", \"0002_second\"], False),\n        ],\n    )\n"], "sample_61": ["def test_decimal_subclass_formatting(self):\n    class EuroDecimal(Decimal):\n        \"\"\"\n        Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n        \"\"\"\n\n            amount = super().__format__(specifier, **kwargs)\n            return \"\u20ac {}\".format(amount)\n\n    euro_decimal = EuroDecimal(\"1234.56\")\n    self.assertEqual(nformat(euro_decimal, \".\"), \"\u20ac 1234.56\")\n    self.assertEqual(nformat(euro_decimal, \".\", decimal_pos=2), \"\u20ac 1234.56\")\n    self.assertEqual(\n        nformat(euro_decimal, \".\", grouping=3, thousand_sep=\",\"), \"\u20ac 1,234.56\"\n    )\n"], "sample_9": ["    def test_ensure_echo_on_calls_tcsetattr(self, mocked_termios):\n        with mock.patch('sys.stdin.isatty', return_value=True):\n            autoreload.ensure_echo_on()\n        self.assertEqual(mocked_termios.tcsetattr.call_count, 1)\n"], "sample_146": ["def test_ElementwiseApplyFunction():\n    from sympy.tensor.array.expressions.array_expressions import ElementwiseApplyFunction\n    A = ArraySymbol(\"A\", (3, 3))\n    func = Lambda(x, x**2)\n    expr = ElementwiseApplyFunction(func, A)\n    assert str(expr) == \"Lambda(x, x**2).(A)\"\n"], "sample_3": ["def test_custom_model_separable():\n    @custom_model\n        return x\n\n    @custom_model(separable=True)\n        return x, y\n\n    @custom_model(separable=False)\n        return x + y, x - y\n\n    assert_allclose(is_separable(model_a), np.array([True]))\n    assert_allclose(separability_matrix(model_a), np.array([[True]]))\n\n    assert_allclose(is_separable(model_b), np.array([True, True]))\n    assert_allclose(separability_matrix(model_b), np.array([[True, False], [False, True]]))\n\n    assert_allclose(is_separable(model_c), np.array([False, False]))\n    assert_allclose(separability_matrix(model_c), np.array([[True, True], [True, True]]))\n"], "sample_8": ["    def test_cleanse_setting_dictionary(self):\n        setting = {'foo': 'bar', 'password': 'super_secret'}\n        cleansed_setting = cleanse_setting('SETTING', setting)\n        self.assertEqual(cleansed_setting['foo'], 'bar')\n        self.assertEqual(cleansed_setting['password'], CLEANSED_SUBSTITUTE)\n"], "sample_133": ["def test_c_with_printer():\n    #issue 13586\n    from sympy.printing.ccode import C99CodePrinter\n    class CustomPrinter(C99CodePrinter):\n            return \"fastpow({}, {})\".format(self._print(expr.base),\n                                            self._print(expr.exp))\n\n    x, y = symbols('x y')\n    expr = x**y\n\n    gen = C99CodeGen(printer=CustomPrinter())\n\n    expected = (\n        '#include \"expr.h\"\\n'\n        '#include <math.h>\\n'\n        'double expr(double x, double y) {\\n'\n        '   double expr_result;\\n'\n        '   expr_result = fastpow(x, y);\\n'\n        '   return expr_result;\\n'\n        '}\\n'\n    )\n\n    result = codegen(('expr', expr), header=False, empty=False, code_gen=gen)\n    source = result[0][1]\n    assert source == expected\n"], "sample_105": ["def test_voting_regressor_get_params():\n    \"\"\"Check get_params method of VotingRegressor.\"\"\"\n    reg1 = LinearRegression()\n    reg2 = RandomForestRegressor()\n    ereg = VotingRegressor(estimators=[('lr', reg1), ('rf', reg2)])\n    params = ereg.get_params()\n    assert 'estimators' in params\n    assert 'lr' in params\n    assert 'rf' in params\n    assert params['lr'] is reg1\n    assert params['rf'] is reg2\n    assert params['lr__n_jobs'] is None\n    assert params['rf__n_estimators'] == 100\n"], "sample_59": ["    def test_template_name_from_renderer(self):\n        class CustomRenderer(TemplatesSetting):\n            formset_template_name = \"a/custom/formset/template.html\"\n\n        ChoiceFormSet = formset_factory(Choice, renderer=CustomRenderer)\n        self.assertEqual(\n            ChoiceFormSet().template_name, \"a/custom/formset/template.html\"\n        )\n"], "sample_141": ["def test_check_dimensions():\n    u = Quantity(\"u\")\n    v = Quantity(\"v\")\n    w = Quantity(\"w\")\n\n    u.set_global_relative_scale_factor(S(10), meter)\n    v.set_global_relative_scale_factor(S(5), meter)\n    w.set_global_relative_scale_factor(S(2), second)\n\n    assert check_dimensions(u + v) == u + v\n    assert check_dimensions(u - v) == u - v\n    raises(ValueError, lambda: check_dimensions(u + w))\n    raises(ValueError, lambda: check_dimensions(u - w))\n    raises(ValueError, lambda: check_dimensions(u + 1))\n    raises(ValueError, lambda: check_dimensions(u - 1))\n"], "sample_140": ["def test_auto_point_vel_multiple_frame_path():\n    t = dynamicsymbols._t\n    q1, q2, u1 = dynamicsymbols('q1 q2 u1')\n    N = ReferenceFrame('N')\n    B = ReferenceFrame('B')\n    B.set_ang_vel(N, q1 * B.z)\n    P = Point('P')\n    P.set_vel(B, u1 * B.x)\n    P1 = Point('P1')\n    P1.set_pos(P, q2 * B.y)\n    O = Point('O')\n    O.set_vel(N, q1 * N.x)\n    P1.set_pos(O, q2 * N.y)\n    assert P1.vel(N) == (u1 + q2.diff(t)) * B.x + q2.diff(t) * B.y + q1 * N.x\n"], "sample_38": ["    def test_render_with_unusable_password(self):\n        widget = ReadOnlyPasswordHashWidget()\n        value = '!'\n        html = widget.render(name='password', value=value, attrs={})\n        self.assertIn(_(\"No password set.\"), html)\n"], "sample_20": ["    def test_model_attribute(self):\n        class Model(models.Model):\n            field = models.CharField(max_length=10)\n\n        self.assertEqual(Model.check(), [])\n"], "sample_98": ["def test_check_X_y():\n    # Test that X and y are checked correctly\n    X = np.array([[1, 2], [3, 4]])\n    y = np.array([0, 1])\n    X_checked, y_checked = check_X_y(X, y)\n    assert_array_equal(X, X_checked)\n    assert_array_equal(y, y_checked)\n\n    # Test that X and y are checked correctly when y is None\n    X_checked, y_checked = check_X_y(X, None)\n    assert_array_equal(X, X_checked)\n    assert y_checked is None\n\n    # Test that an error is raised when X and y have different lengths\n    assert_raises_regex(ValueError, \"Found input variables with inconsistent\"\n                        \" numbers of samples\", check_X_y, X, np.array([0]))\n\n    # Test that an error is raised when y is not a 1D array\n    assert_raises_regex(ValueError, \"bad input shape\", check_X_y, X,\n                        np.array([[0, 1]]))\n\n    # Test that an error is raised when y has non-numeric dtype\n    assert_raises_regex(ValueError, \"Unknown label type\", check_X_y, X,\n                        np.array(['a', 'b']))\n\n    # Test that an error is raised when X has non-numeric dtype\n    assert_raises_regex(ValueError, \"could not convert string to float\",\n                        check_X_y, np.array([['a', 'b'], ['c', 'd']]), y)\n\n    # Test that no error is raised when X has object dtype but all elements are\n    # numeric\n    X_object = np.array([[1, 2], [3, 4]], dtype=object)\n    check_X_y(X_object, y)\n\n    # Test that no error is raised when y has object dtype but all elements are\n    # numeric\n    y_object = np.array([0, 1], dtype=object)\n    check_X_y(X, y_object)\n"], "sample_45": ["    def test_sync_and_async_middleware(self):\n        @sync_and_async_middleware\n            return get_response\n\n        self.assertTrue(my_middleware.sync_capable)\n        self.assertTrue(my_middleware.async_capable)\n"], "sample_49": ["def test_get_template_directories_with_loader_without_get_dirs(self):\n    self.assertSetEqual(\n        autoreload.get_template_directories(),\n        {\n            EXTRA_TEMPLATES_DIR,\n            ROOT / 'templates',\n        }\n    )\n"], "sample_5": ["def test_collector_sort(self):\n    # Create some objects with dependencies between them.\n    r = R.objects.create()\n    s1 = S.objects.create(r=r)\n    s2 = S.objects.create(r=r)\n    t1 = T.objects.create(s=s1)\n    t2 = T.objects.create(s=s2)\n\n    # Create a collector and add the objects to it.\n    collector = Collector(using='default')\n    collector.collect([r, s1, s2, t1, t2])\n\n    # Sort the collector.\n    collector.sort()\n\n    # Check that the objects are in the correct order for deletion.\n    self.assertEqual(\n        [type(obj) for obj in collector.data],\n        [T, T, S, S, R]\n    )\n"], "sample_156": ["def test_parser_mathematica_from_fullform_to_sympy():\n    parser = MathematicaParser()\n\n        return parser._from_fullformsympy_to_sympy(parser._from_fullformlist_to_fullformsympy(\n            parser._from_fullform_to_fullformlist(expr)))\n\n    assert chain(\"Sin[x]\") == sin(x)\n    assert chain(\"Cos[x]\") == cos(x)\n    assert chain(\"Times[a, b]\") == a*b\n    assert chain(\"Plus[a, b, c]\") == a + b + c\n    assert chain(\"Power[a, b]\") == a**b\n    assert chain(\"Mod[a, b]\") == Mod(a, b)\n    assert chain(\"Max[a, b, c]\") == Max(a, b, c)\n    assert chain(\"Min[a, b, c]\") == Min(a, b, c)\n    assert chain(\"Pochhammer[a, b]\") == rf(a, b)\n    assert chain(\"ExpIntegralEi[x]\") == Ei(x)\n    assert chain(\"SinIntegral[x]\") == Si(x)\n    assert chain(\"CosIntegral[x]\") == Ci(x)\n    assert chain(\"AiryAi[x]\") == airyai(x)\n    assert chain(\"AiryAiPrime[x]\") == airyaiprime(x)\n    assert chain(\"AiryBi[x]\") == airybi(x)\n    assert chain(\"AiryBiPrime[x]\") == airybiprime(x)\n    assert chain(\"LogIntegral[x]\") == li(x)\n    assert chain(\"PrimePi[x]\") == primepi(x)\n    assert chain(\"Prime[x]\") == prime(x)\n    assert chain(\"PrimeQ[x]\") == isprime(x)\n"], "sample_158": ["def test_unit_system_get_default():\n    assert UnitSystem.get_default_unit_system() == SI\n    assert UnitSystem.get_unit_system(\"SI\") == SI\n    with raises(ValueError):\n        UnitSystem.get_unit_system(\"InvalidUnitSystem\")\n"], "sample_55": ["def test_command_error_returncode(self):\n    error = CommandError(\"Test\", returncode=42)\n    self.assertEqual(error.returncode, 42)\n    error = CommandError(\"Test\")\n    self.assertEqual(error.returncode, 1)\n"], "sample_95": ["def test_xfail_strict_with_multiple_conditions(pytester: Pytester) -> None:\n    pytester.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.mark.xfail(\"True or False\", reason=\"first condition\", strict=True)\n            assert 1\n    \"\"\"\n    )\n    result = pytester.runpytest(\"-rxX\")\n    result.stdout.fnmatch_lines([\"*XPASS(strict)*first condition*\"])\n    assert result.ret == 1\n"], "sample_106": ["def test_components_shape():\n    \"\"\"Test that the learned components have the expected shape.\"\"\"\n    X = iris_data\n    y = iris_target\n\n    nca = NeighborhoodComponentsAnalysis(n_components=None)\n    nca.fit(X, y)\n    assert nca.components_.shape == (X.shape[1], X.shape[1])\n\n    nca = NeighborhoodComponentsAnalysis(n_components=X.shape[1] - 1)\n    nca.fit(X, y)\n    assert nca.components_.shape == (X.shape[1] - 1, X.shape[1])\n"], "sample_90": ["def test_mark_evaluator_invalidraise(testdir):\n    testdir.makepyfile(\n        \"\"\"\n        import pytest\n\n        @pytest.mark.skipif(\"True\", reason=\"skip\")\n            assert False\n\n        @pytest.mark.xfail(\"True\", reason=\"xfail\")\n            assert False\n    \"\"\"\n    )\n\n    item = testdir.getitem(\"test_skip\")\n    evaluator = MarkEvaluator(item, \"skipif\")\n    assert evaluator.invalidraise(Exception()) is None\n\n    item = testdir.getitem(\"test_xfail\")\n    evaluator = MarkEvaluator(item, \"xfail\")\n    assert evaluator.invalidraise(Exception()) is True\n"], "sample_85": ["def test_log_file_path_is_absolute(testdir):\n    log_file = \"/tmp/pytest.log\"\n\n    testdir.makeini(\n        \"\"\"\n        [pytest]\n        log_file={}\n        log_file_level = INFO\n        \"\"\".format(\n            log_file\n        )\n    )\n\n    testdir.makepyfile(\n        \"\"\"\n        import logging\n\n            logging.getLogger().info(\"Normal message\")\n    \"\"\"\n    )\n\n    result = testdir.runpytest()\n\n    assert result.ret == 0\n    assert os.path.isfile(log_file)\n    with open(log_file, encoding=\"utf-8\") as rfh:\n        contents = rfh.read()\n        assert \"Normal message\" in contents\n"], "sample_132": ["def test_closest_points():\n    p1, p2, p3 = Point2D(0, 0), Point2D(1, 1), Point2D(3, 3)\n    assert closest_points(p1, p2, p3) == {(p1, p2)}\n    p4 = Point2D(1, 0)\n    assert closest_points(p1, p2, p3, p4) == {(p1, p4)}\n    p5 = Point2D(0, 1)\n    assert closest_points(p1, p2, p3, p4, p5) == {(p1, p4), (p1, p5)}\n"], "sample_27": ["def test_token_with_different_algorithm(self):\n    \"\"\"\n    A valid token can be created with an algorithm other than the default by\n    using the PasswordResetTokenGenerator.algorithm attribute.\n    \"\"\"\n    user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n    new_algorithm = 'md5'\n    # Create and check a token with a different algorithm.\n    p0 = PasswordResetTokenGenerator()\n    p0.algorithm = new_algorithm\n    tk0 = p0.make_token(user)\n    self.assertIs(p0.check_token(user, tk0), True)\n    # Create and check a token with the default algorithm.\n    p1 = PasswordResetTokenGenerator()\n    self.assertEqual(p1.algorithm, settings.DEFAULT_HASHING_ALGORITHM)\n    self.assertNotEqual(p1.algorithm, new_algorithm)\n    tk1 = p1.make_token(user)\n    # Tokens created with a different algorithm don't validate.\n    self.assertIs(p0.check_token(user, tk1), False)\n    self.assertIs(p1.check_token(user, tk0), False)\n"], "sample_144": ["def test_refine_matrixelement():\n    X = MatrixSymbol('X', 3, 3)\n    assert refine(X[0, 1], Q.symmetric(X)) == X[0, 1]\n    assert refine(X[1, 0], Q.symmetric(X)) == X[0, 1]\n    assert refine(X[0, 0], Q.symmetric(X)) == X[0, 0]\n"], "sample_31": ["def test_shell_with_no_backends_installed(self, select):\n    select.return_value = ([], [], [])\n    with self.assertRaisesMessage(CommandError, \"Couldn't import python interface.\"):\n        call_command('shell')\n"], "sample_64": ["def test_prepopulated_fields_js(self):\n    \"\"\"\n    prepopulated_fields_js template tag should return a list of dictionaries\n    containing field information.\n    \"\"\"\n    request = self.request_factory.get(\n        reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n    )\n    request.user = self.superuser\n    admin = UserAdmin(User, site)\n    response = admin.change_view(request, str(self.superuser.pk))\n    template_context = prepopulated_fields_js(response.context_data)\n    self.assertIsInstance(template_context[\"prepopulated_fields\"], list)\n    self.assertIsInstance(template_context[\"prepopulated_fields_json\"], str)\n    for field in template_context[\"prepopulated_fields\"]:\n        self.assertIn(\"field\", field)\n        self.assertIn(\"dependencies\", field)\n"], "sample_86": ["def test_log_passing_tests(testdir):\n    testdir.makepyfile(\n        \"\"\"\n        import pytest\n\n            pass\n    \"\"\"\n    )\n    result, dom = runandparse(testdir, \"-o\", \"junit_log_passing_tests=False\")\n    node = dom.find_first_by_tag(\"testsuite\")\n    tnode = node.find_first_by_tag(\"testcase\")\n    assert len(tnode.find_by_tag(\"system-out\")) == 0\n    assert len(tnode.find_by_tag(\"system-err\")) == 0\n"], "sample_76": ["def test_insufficient_unique_x(self, df):\n\n    groupby = GroupBy([\"group\"])\n    df[\"x\"] = 1  # Set all x values to the same value\n    res = PolyFit(order=2)(df, groupby, \"x\", {})\n\n    assert_frame_equal(res, pd.DataFrame(columns=[\"x\", \"y\"]))\n"], "sample_19": ["    def test_get_traceback_frame_variables(self):\n        reporter_filter = SafeExceptionReporterFilter()\n        tb_frame = sys._getframe()\n        tb_frame.f_locals['foo'] = 'bar'\n        tb_frame.f_locals['password'] = 'secret'\n        variables = reporter_filter.get_traceback_frame_variables(None, tb_frame)\n        self.assertIn(('foo', 'bar'), variables)\n        self.assertIn(('password', reporter_filter.cleansed_substitute), variables)\n"], "sample_118": ["def test_ccode_For():\n    i, n = symbols('i n', integer=True)\n    f = For(i, Range(n), [aug_assign(x, '+', i)])\n    assert ccode(f) == (\n        'for (int i=0; i<n; i++){\\n'\n        '   x += i;\\n'\n        '}'\n    )\n"], "sample_152": ["def test_array_equality():\n    for ArrayType in array_types:\n        A = ArrayType([[1, 2], [3, 4]])\n        B = ArrayType([[1, 2], [3, 4]])\n        C = ArrayType([[1, 2], [3, 5]])\n\n        assert A == B\n        assert A != C\n\n        # Test equality with different shapes\n        D = ArrayType([1, 2, 3, 4])\n        assert A != D\n\n        # Test equality with non-array object\n        assert A != [[1, 2], [3, 4]]\n\n        # Test equality with sparse and dense arrays\n        if ArrayType in [ImmutableSparseNDimArray, MutableSparseNDimArray]:\n            E = ImmutableDenseNDimArray([[1, 2], [3, 4]])\n            assert A == E\n"], "sample_154": ["def test_lambdify_with_cse():\n    args = symbols('x y')\n    exprs = [sin(x) + cos(y), sin(x) - cos(y)]\n    f_no_cse = lambdify(args, exprs)\n    f_with_cse = lambdify(args, exprs, cse=True)\n\n    # Both functions should return the same results\n    assert f_no_cse(1, 2) == f_with_cse(1, 2)\n\n    # The function with CSE should be faster\n    import timeit\n    no_cse_time = timeit.timeit(lambda: f_no_cse(1, 2), number=1000)\n    with_cse_time = timeit.timeit(lambda: f_with_cse(1, 2), number=1000)\n    assert with_cse_time < no_cse_time\n"], "sample_51": ["def test_was_modified_since_with_size(self):\n    \"\"\"\n    Test was_modified_since with file size.\n    \"\"\"\n    mtime = 1343416141\n    size = 100\n    header = http_date(mtime) + \"; length=\" + str(size)\n    self.assertFalse(was_modified_since(header, mtime, size))\n    self.assertTrue(was_modified_since(header, mtime, size + 1))\n"], "sample_17": ["def test_create_test_db_with_keepdb(self, mocked_migrate, mocked_ensure_connection):\n    test_connection = get_connection_copy()\n    creation = test_connection.creation_class(test_connection)\n    old_database_name = test_connection.settings_dict['NAME']\n    try:\n        with mock.patch.object(creation, '_create_test_db') as mocked_create_test_db:\n            creation.create_test_db(verbosity=0, autoclobber=True, serialize=False, keepdb=True)\n            mocked_create_test_db.assert_called_once_with(verbosity=0, autoclobber=True, keepdb=True)\n        with mock.patch.object(creation, '_destroy_test_db') as mocked_destroy_test_db:\n            creation.destroy_test_db(old_database_name, verbosity=0, keepdb=True)\n            mocked_destroy_test_db.assert_not_called()\n    finally:\n        with mock.patch.object(creation, '_destroy_test_db'):\n            creation.destroy_test_db(old_database_name, verbosity=0)\n"], "sample_130": ["def test_lambdify_with_integer_types():\n    f = lambdify(x, x**2)\n    assert f(2) == 4\n    assert f(2.0) == 4.0\n    assert f(numpy.int8(2)) == 4\n    assert f(numpy.int16(2)) == 4\n    assert f(numpy.int32(2)) == 4\n    assert f(numpy.int64(2)) == 4\n"], "sample_116": ["def test_create_index_with_group_entries(app):\n    text = (\".. index:: single: docutils\\n\"\n            \".. index:: single: Python\\n\"\n            \".. index:: single: Python (in module foo)\\n\"\n            \".. index:: single: Python (in module bar)\\n\")\n    restructuredtext.parse(app, text)\n    index = IndexEntries(app.env).create_index(app.builder)\n\n    # check index is created correctly\n    assert len(index) == 2\n    assert index[0] == ('D', [('docutils', [[('', '#index-0')], [], None])])\n    assert index[1] == ('P', [('Python', [[('', '#index-1')],\n                                          [('in module bar', [('', '#index-3')]),\n                                           ('in module foo', [('', '#index-2')])],\n                                         None])])\n\n    # check the index with group_entries=False\n    index = IndexEntries(app.env).create_index(app.builder, group_entries=False)\n    assert len(index) == 4\n    assert index[0] == ('D', [('docutils', [[('', '#index-0')], [], None])])\n    assert index[1] == ('P', [('Python', [[('', '#index-1')], [], None])])\n    assert index[2] == ('P', [('Python (in module bar)', [[('', '#index-3')], [], None])])\n    assert index[3] == ('P', [('Python (in module foo)', [[('', '#index-2')], [], None])])\n"], "sample_40": ["def test_boundfield_widget_type(self):\n    class MyForm(Form):\n        field = CharField(widget=TextInput)\n\n    form = MyForm()\n    self.assertEqual(form['field'].widget_type, 'text')\n    self.assertEqual(form['field'].widget_type, form.fields['field'].widget_type)\n"], "sample_73": ["def test_auxtransformbox():\n    fig, ax = plt.subplots()\n    aux_transform = mtransforms.Affine2D().translate(10, 20)\n    atb = AuxTransformBox(aux_transform)\n    atb.add_artist(mpatches.Rectangle((0, 0), 5, 5))\n    ax.add_artist(atb)\n    fig.canvas.draw()\n    assert not fig.stale\n    atb.set_offset((30, 40))\n    assert fig.stale\n"], "sample_54": ["def test_urlize_with_trailing_punctuation(self):\n    tests = (\n        (\n            \"Search for google.com.\",\n            'Search for <a href=\"http://google.com/\">google.com</a>.',\n        ),\n        (\n            \"Search for google.com!?\",\n            'Search for <a href=\"http://google.com/\">google.com</a>!?',\n        ),\n        (\n            \"Search for google.com,\",\n            'Search for <a href=\"http://google.com/\">google.com</a>,',\n        ),\n    )\n    for value, output in tests:\n        with self.subTest(value=value):\n            self.assertEqual(urlize(value), output)\n"], "sample_155": ["def test_get_units_non_prefixed():\n    assert set(SI.get_units_non_prefixed()) == {\n        meter, second, kilogram, ampere, kelvin, mole, candela\n    }\n"], "sample_83": ["def test_colorized_text_reporter_color_mapping_deprecation() -> None:\n    \"\"\"Test that a deprecation warning is raised when passing a deprecated color mapping.\"\"\"\n    with warnings.catch_warnings(record=True) as cm:\n        warnings.simplefilter(\"always\")\n        ColorizedTextReporter(color_mapping={\"I\": (\"green\", \"bold\")})\n\n    assert len(cm) == 1\n    assert isinstance(cm[0].message, DeprecationWarning)\n    assert (\n        \"In pylint 3.0, the ColorizedTextReporter will only accept ColorMappingDict as color_mapping parameter\"\n        in str(cm[0].message)\n    )\n"], "sample_43": ["def test_process_request_invalid_app_label(self):\n    request = self.factory.get(self.url, {'term': 'is', 'app_label': 'invalid', 'model_name': Answer._meta.model_name, 'field_name': 'question'})\n    request.user = self.superuser\n    with self.assertRaises(PermissionDenied):\n        AutocompleteJsonView.as_view(**self.as_view_args)(request)\n"], "sample_119": ["def test_Sum():\n    assert mcode(Sum(x**2, (x, 1, 10))) == \"Hold[Sum[x^2, {x, 1, 10}]]\"\n    assert mcode(Sum(x**2 + y**2, (x, 1, 10), (y, 1, 10))) == \\\n        \"Hold[Sum[x^2 + y^2, {x, 1, 10}, {y, 1, 10}]]\"\n"], "sample_88": ["def test_saferepr_recursive():\n    \"\"\"Test saferepr() with recursive objects.\"\"\"\n\n    class Recursive:\n            self.name = name\n            self.children = []\n\n            return f\"Recursive({self.name})\"\n\n    obj1 = Recursive(\"obj1\")\n    obj2 = Recursive(\"obj2\")\n    obj1.children.append(obj2)\n    obj2.children.append(obj1)\n\n    assert \"...\" in saferepr(obj1)\n"], "sample_21": ["def test_collector_sort(self):\n    # Create some objects to delete\n    r1 = R.objects.create()\n    r2 = R.objects.create()\n    s1 = S.objects.create(r=r1)\n    s2 = S.objects.create(r=r2)\n    t1 = T.objects.create(s=s1)\n    t2 = T.objects.create(s=s2)\n\n    # Create a collector and add the objects to delete\n    collector = Collector(using='default')\n    collector.add([r1, r2])\n    collector.add([s1, s2])\n    collector.add([t1, t2])\n\n    # Sort the collector\n    collector.sort()\n\n    # Check that the objects are in the correct order for deletion\n    self.assertEqual(collector.data, {\n        T: {t1, t2},\n        S: {s1, s2},\n        R: {r1, r2},\n    })\n"], "sample_69": ["def test_artist_inspector_pprint_setters_rest():\n    # Test ArtistInspector.pprint_setters_rest() with various inputs.\n    ai = martist.ArtistInspector(mlines.Line2D)\n\n    # Test with no arguments.\n    output = ai.pprint_setters_rest()\n    assert isinstance(output, list)\n    assert all(isinstance(line, str) for line in output)\n\n    # Test with a property name.\n    output = ai.pprint_setters_rest(prop='linewidth')\n    assert isinstance(output, str)\n\n    # Test with leading spaces.\n    output = ai.pprint_setters_rest(leadingspace=8)\n    assert isinstance(output, list)\n    assert all(line.startswith(' ' * 8) for line in output)\n"], "sample_58": ["def test_runshell_parameters(self):\n    client = DatabaseClient(connection)\n    parameters = [\"--help\"]\n    with mock.patch.object(client, \"runshell\") as mock_runshell:\n        client.runshell(parameters)\n        mock_runshell.assert_called_once_with(parameters)\n"], "sample_41": ["def test_formset_add_fields(self):\n    \"\"\"A formset has an add_fields method to add fields to each form.\"\"\"\n    class AddFieldsFormSet(BaseFormSet):\n            super().add_fields(form, index)\n            form.fields['extra_field'] = CharField()\n\n    AddFieldsFormset = formset_factory(FavoriteDrinkForm, formset=AddFieldsFormSet)\n    formset = AddFieldsFormset()\n    for form in formset:\n        self.assertIn('extra_field', form.fields)\n"], "sample_94": ["def test_getstatementrange_ast_with_nested_blocks() -> None:\n    source = Source(\n        \"\"\"\\"], "sample_91": ["def test_xfail_strict_ini(testdir):\n    testdir.makeini(\n        \"\"\"\n        [pytest]\n        xfail_strict = True\n    \"\"\"\n    )\n    testdir.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.xfail\n            assert 1\n    \"\"\"\n    )\n    result = testdir.runpytest()\n    result.stdout.fnmatch_lines([\"*1 failed*\"])\n    assert result.ret == 1\n"], "sample_115": ["def test__wrap_data_with_container_index():\n    \"\"\"Check that _wrap_data_with_container preserves the index.\"\"\"\n    pd = pytest.importorskip(\"pandas\")\n    X_df = pd.DataFrame([[1, 0, 3], [0, 0, 1]], columns=[\"a\", \"b\", \"c\"], index=[10, 12])\n    est = EstimatorWithSetOutputIndex().fit(X_df)\n\n    # Set output to pandas to test _wrap_data_with_container\n    est.set_output(transform=\"pandas\")\n\n    X_trans_df = est.transform(X_df)\n    assert_array_equal(X_trans_df.index, [f\"s{i}\" for i in range(X_df.shape[0])])\n\n    # Check that _wrap_data_with_container preserves the index\n    X_wrapped = _wrap_data_with_container(\"transform\", X_trans_df, X_df, est)\n    assert_array_equal(X_wrapped.index, X_trans_df.index)\n"], "sample_15": ["def test_consistent_language_settings(self):\n    for tag in ['en', 'fr']:\n        with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n            self.assertEqual(check_language_settings_consistent(None), [])\n"], "sample_12": ["def test_alter_model_table_with_custom_database_table_name(self):\n    \"\"\"\n    AlterModelTable operation should be generated when the model's database table name is changed.\n    \"\"\"\n    changes = self.get_changes([self.author_empty], [self.author_with_db_table_options])\n    # Right number/type of migrations?\n    self.assertNumberMigrations(changes, 'testapp', 1)\n    self.assertOperationTypes(changes, 'testapp', 0, [\"AlterModelTable\"])\n    self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"author\", table=\"author_one\")\n\n    changes = self.get_changes([self.author_with_db_table_options], [self.author_with_new_db_table_options])\n    # Right number/type of migrations?\n    self.assertNumberMigrations(changes, 'testapp', 1)\n    self.assertOperationTypes(changes, 'testapp', 0, [\"AlterModelTable\"])\n    self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"author\", table=\"author_two\")\n"], "sample_100": ["def test_ordinal_encoder_unsorted_categories():\n    X = np.array([['a', 'b']], dtype=object).T\n\n    enc = OrdinalEncoder(categories=[['b', 'a', 'c']])\n    exp = np.array([[1.], [0.]])\n    assert_array_equal(enc.fit(X).transform(X), exp)\n    assert_array_equal(enc.fit_transform(X), exp)\n    assert enc.categories_[0].tolist() == ['b', 'a', 'c']\n    assert np.issubdtype(enc.categories_[0].dtype, np.object_)\n\n    # unsorted passed categories still raise for numerical values\n    X = np.array([[1, 2]]).T\n    enc = OrdinalEncoder(categories=[[2, 1, 3]])\n    msg = 'Unsorted categories are not supported'\n    with pytest.raises(ValueError, match=msg):\n        enc.fit_transform(X)\n"], "sample_81": ["def test_fixme_pattern_with_custom_notes_rgx(self) -> None:\n    code = \"\"\"a = 1\n            # BUG123\n            \"\"\"\n    set_config(self.checker, notes_rgx=\"BUG\\\\d+\")\n    with self.assertAddsMessages(\n        MessageTest(msg_id=\"fixme\", line=2, args=\"BUG123\", col_offset=17)\n    ):\n        self.checker.process_tokens(_tokenize_str(code))\n"], "sample_4": ["    def test_file_response(self):\n        file_path = os.path.join(os.path.dirname(__file__), 'abc.txt')\n        response = FileResponse(open(file_path, 'rb'))\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response['Content-Type'], 'text/plain')\n        self.assertEqual(response['Content-Length'], str(os.path.getsize(file_path)))\n"], "sample_1": ["def test_get_lines_from_file(tmp_path):\n    example_qdp = \"\"\"\n    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n    ! Columns are as labelled\n    READ TERR 1\n    READ SERR 2\n    ! WT -- hard data\n    !MJD            Err (pos)       Err(neg)        Rate            Error\n    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n    \"\"\"\n\n    path = tmp_path / \"test.qdp\"\n\n    with open(path, \"w\") as fp:\n        print(example_qdp, file=fp)\n\n    lines = _get_lines_from_file(fp.name)\n    assert lines[0].startswith(\"! Swift\")\n\n    lines = _get_lines_from_file(str(path))\n    assert lines[0].startswith(\"! Swift\")\n\n    lines = _get_lines_from_file(example_qdp)\n    assert lines[0].startswith(\"! Swift\")\n\n    with pytest.raises(ValueError):\n        _get_lines_from_file(123)\n"], "sample_139": ["def test_issue_20761():\n    from sympy import symbols, I\n    x = symbols('x', real=True)\n    assert re((1 + I)*x) == x\n    assert im((1 + I)*x) == x\n"], "sample_131": ["def test_Sum():\n    assert mcode(Sum(x**2, (x, 1, 10))) == \"Hold[Sum[x^2, {x, 1, 10}]]\"\n    assert mcode(Sum(x**2 + y**2, (x, 1, 10), (y, 1, 10))) == \\\n        \"Hold[Sum[x^2 + y^2, {x, 1, 10}, {y, 1, 10}]]\"\n"], "sample_29": ["    def test_get_initial_alias(self):\n        query = Query(Model)\n        alias = query.get_initial_alias()\n        self.assertEqual(alias, Model._meta.db_table)\n        self.assertEqual(query.alias_refcount[alias], 1)\n"], "sample_62": ["    def test_path_traversal(self):\n        cache = caches[\"default\"]\n        key = \"../test_key\"\n        value = \"test_value\"\n\n        # Attempt to set a cache key with a path traversal attack\n        cache.set(key, value)\n\n        # Check if the cache file was created in the correct location\n        cache_file_path = os.path.join(cache._dir, cache._key_to_file(key))\n        self.assertFalse(os.path.exists(cache_file_path))\n\n        # Attempt to get the cache key with a path traversal attack\n        self.assertIsNone(cache.get(key))\n\n        # Attempt to delete the cache key with a path traversal attack\n        self.assertIs(cache.delete(key), False)\n"], "sample_33": ["def test_receiver_disconnect(self):\n    @receiver(a_signal)\n        self.state = val\n\n    self.state = False\n    a_signal.send(sender=self, val=True)\n    self.assertTrue(self.state)\n\n    a_signal.disconnect(f)\n    self.state = False\n    a_signal.send(sender=self, val=True)\n    self.assertFalse(self.state)\n"], "sample_93": ["def test_tmp_path_factory_cleanup(pytester: Pytester, tmp_path_factory: TempPathFactory) -> None:\n    \"\"\"Test that the tmp_path_factory cleans up after itself.\"\"\"\n    # Create a temporary directory using the factory\n    tmp_dir = tmp_path_factory.mktemp(\"test_dir\")\n\n    # Check that the directory exists\n    assert tmp_dir.exists()\n\n    # Clean up the factory\n    tmp_path_factory.getbasetemp().rmdir()\n\n    # Check that the directory no longer exists\n    assert not tmp_dir.exists()\n"], "sample_120": ["def test_MatrixElement_as_real_imag():\n    A = MatrixSymbol('A', 2, 2)\n    a11 = A[0, 0]\n    assert a11.as_real_imag() == ((a11 + a11.conjugate())/2, (a11 - a11.conjugate())/(2*S.I))\n"], "sample_157": ["def test_tensor_product_trace():\n    # Test the trace of a tensor product\n    assert Tr(TP(A, B)) == Tr(A)*Tr(B)\n    assert Tr(TP(mat1, mat2)) == Tr(mat1)*Tr(mat2)\n    # Test the trace with indices\n    assert Tr(TP(A, B), indices=[0]) == Tr(A)*B\n    assert Tr(TP(A, B), indices=[1]) == A*Tr(B)\n"], "sample_110": ["def test_affinity_propagation_sparse_input():\n    # Test AffinityPropagation with sparse input\n    X_sparse = csr_matrix(X)\n    af = AffinityPropagation(affinity=\"euclidean\")\n    labels_sparse = af.fit_predict(X_sparse)\n    af_dense = AffinityPropagation(affinity=\"euclidean\")\n    labels_dense = af_dense.fit_predict(X)\n    assert_array_equal(labels_sparse, labels_dense)\n"], "sample_99": ["def test_neighbors_n_jobs():\n    # Test that the n_jobs parameter is correctly passed to the underlying\n    # BallTree or KDTree.\n    X = np.random.RandomState(0).rand(100, 5)\n    nn = neighbors.NearestNeighbors(n_neighbors=5, algorithm='ball_tree',\n                                    n_jobs=2)\n    nn.fit(X)\n\n    # Check that the 'n_jobs' attribute of the BallTree object is set to 2.\n    assert_equal(nn._tree.n_jobs, 2)\n\n    # Check that an error is raised if n_jobs is not an integer.\n    nn = neighbors.NearestNeighbors(n_neighbors=5, algorithm='ball_tree')\n    assert_raises(TypeError, nn.set_params, n_jobs='2')\n\n    # Check that an error is raised if n_jobs is less than 1.\n    assert_raises(ValueError, nn.set_params, n_jobs=0)\n"], "sample_6": ["    def test_validator(self):\n        valid_usernames = ['joe', 'joe123', 'joe_123', 'joe.123', 'joe@123']\n        invalid_usernames = [\n            \"o'connell\", \"Ren\u00e9\", \"\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30\", \"\u0623\u062d\u0645\u062f\",\n            \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n            \"en\\u2013dash\", 'trailingnewline\\u000A',\n        ]\n        v = validators.ASCIIUsernameValidator()\n        for valid in valid_usernames:\n            with self.subTest(valid=valid):\n                v(valid)\n        for invalid in invalid_usernames:\n            with self.subTest(invalid=invalid):\n                with self.assertRaises(ValidationError):\n                    v(invalid)\n"], "sample_63": ["    def test_render_with_unusable_password(self):\n        widget = ReadOnlyPasswordHashWidget()\n        value = \"unusable password\"\n        html = widget.render(name=\"password\", value=value, attrs={})\n        self.assertIn(_(\"No password set.\"), html)\n"], "sample_96": ["def test_ridgecv_scorer():\n    # Test that RidgeCV works with a custom scorer\n    X, y = make_regression(n_samples=100, n_features=10, random_state=42)\n    scorer = make_scorer(mean_squared_error, greater_is_better=False)\n    ridgecv = RidgeCV(scorer=scorer)\n    ridgecv.fit(X, y)\n    assert hasattr(ridgecv, 'best_score_')\n    assert hasattr(ridgecv, 'alpha_')\n"], "sample_36": ["def test_register_lookup(self):\n    class TestLookup:\n        lookup_name = 'test'\n\n    class TestClass(RegisterLookupMixin):\n        pass\n\n    TestClass.register_lookup(TestLookup)\n    self.assertIn('test', TestClass.get_lookups())\n    self.assertEqual(TestClass.get_lookups()['test'], TestLookup)\n\n    # Test unregistering a lookup.\n    TestClass._unregister_lookup(TestLookup)\n    self.assertNotIn('test', TestClass.get_lookups())\n"], "sample_78": ["def test_cli_blueprint_registration(app, runner):\n    \"\"\"Test blueprint commands register correctly to the application\"\"\"\n    bp = Blueprint(\"test\", __name__)\n\n    @bp.cli.command(\"cmd\")\n        click.echo(\"result\")\n\n    app.register_blueprint(bp)\n    cli = FlaskGroup(create_app=lambda: app)\n\n    result = runner.invoke(cli, [\"cmd\"])\n    assert result.exit_code == 0\n    assert result.output.strip() == \"result\"\n"], "sample_71": ["def test_reload_library():\n    original_library = style.library.copy()\n    with temp_style('test', DUMMY_SETTINGS):\n        assert 'test' in style.library\n    style.reload_library()\n    assert style.library == original_library\n"], "sample_26": ["    def test_create_test_db_with_keepdb(self):\n        test_connection = get_connection_copy()\n        creation = test_connection.creation_class(test_connection)\n        with mock.patch.object(creation, '_create_test_db') as mocked_create:\n            creation.create_test_db(verbosity=0, autoclobber=True, serialize=False, keepdb=True)\n            mocked_create.assert_called_once_with(verbosity=0, autoclobber=True, keepdb=True)\n"], "sample_117": ["def test_stringify_type_hints_Ellipsis():\n    assert stringify(Ellipsis) == \"...\"\n"], "sample_87": ["def test_collect_with_broken_conftest(testdir):\n    \"\"\"Test that a broken conftest.py does not prevent collection of other tests.\"\"\"\n    sub = testdir.mkdir(\"sub\")\n    sub.ensure(\"conftest.py\").write(\"assert 0, 'broken conftest'\")\n    sub.ensure(\"test_file.py\").write(\"def test_file(): pass\")\n\n    result = testdir.runpytest(\"-v\", str(sub))\n    result.stdout.fnmatch_lines(\n        [\n            \"*ERROR collecting sub/test_file.py\",\n            \"E*assert 0, 'broken conftest'\",\n            \"*1 error in*\",\n        ]\n    )\n"], "sample_153": ["def test_pretty_printing_mod():\n    from sympy import symbols, Mod\n    x = symbols('x')\n    assert pretty(Mod(x, 2)) == 'x mod 2'\n"], "sample_82": ["def test_groupby_bins_empty():\n    # Test groupby_bins with empty DataArray\n    da = xr.DataArray([], dims=\"x\")\n    bins = [0, 1, 2]\n    with raises_regex(ValueError, \"None of the data falls within bins with edges\"):\n        da.groupby_bins(\"x\", bins=bins)\n"], "sample_70": ["def test_legend_set_title():\n    fig, ax = plt.subplots()\n    ax.plot([1, 2], [3, 4], label='line')\n    leg = ax.legend()\n\n    # Test setting title with string\n    leg.set_title('Test Title')\n    assert leg.get_title().get_text() == 'Test Title'\n\n    # Test setting title with empty string\n    leg.set_title('')\n    assert leg.get_title().get_text() == ''\n\n    # Test setting title with None\n    leg.set_title(None)\n    assert leg.get_title().get_text() == ''\n"], "sample_75": ["def test_grid_set_axes_locator():\n    fig = plt.figure()\n    grid = Grid(fig, 111, (2, 3))\n    locator = grid.get_axes_locator()\n    grid.set_axes_locator(locator)\n    assert grid.get_axes_locator() == locator\n"], "sample_114": ["def test_ovr_decision_function():\n    # Test _ovr_decision_function with a simple example\n    predictions = np.array([[0, 1, 0], [1, 0, 1]])\n    confidences = np.array([[0.2, 0.8, 0.4], [0.7, 0.3, 0.9]])\n    n_classes = 3\n\n    decision = _ovr_decision_function(predictions, confidences, n_classes)\n    expected_decision = np.array([[0.06666667, 0.73333333, 0.2], [0.63333333, 0.13333333, 0.23333333]])\n\n    assert_allclose(decision, expected_decision)\n"], "sample_16": ["def test_quote(self):\n    tests = [\n        ('hello', 'hello'),\n        ('hello/world', 'hello_2Fworld'),\n        ('hello#world', 'hello_23world'),\n        ('hello?world', 'hello_3Fworld'),\n        ('hello;world', 'hello_3Bworld'),\n        ('hello:world', 'hello_3Aworld'),\n        ('hello@world', 'hello_40world'),\n        ('hello&world', 'hello_26world'),\n        ('hello=world', 'hello_3Dworld'),\n        ('hello+world', 'hello_2Bworld'),\n        ('hello$world', 'hello_24world'),\n        ('hello,world', 'hello_2Cworld'),\n        ('hello world', 'hello world'),  # space is not quoted\n    ]\n    for value, expected in tests:\n        with self.subTest(value=value):\n            self.assertEqual(quote(value), expected)\n\n    # Test non-string values are returned unchanged\n    self.assertEqual(quote(123), 123)\n    self.assertEqual(quote(None), None)\n"], "sample_89": ["def test_node_repr():\n    node = nodes.Node.from_parent(None, name=\"test_node\")\n    assert repr(node) == \"<Node test_node>\"\n"], "sample_13": ["    def test_escape_leading_slashes(self):\n        self.assertEqual(escape_leading_slashes('//example.com'), '/%2F/example.com')\n        self.assertEqual(escape_leading_slashes('/example.com'), '/example.com')\n        self.assertEqual(escape_leading_slashes('example.com'), 'example.com')\n"], "sample_50": ["def test_update_cookie(self):\n    storage = self.get_storage()\n    response = self.get_response()\n\n    # Test setting the cookie with encoded data\n    messages = [Message(constants.INFO, 'test')]\n    encoded_data = storage._encode(messages)\n    storage._update_cookie(encoded_data, response)\n    self.assertEqual(response.cookies['messages'].value, encoded_data)\n\n    # Test deleting the cookie when there's no encoded data\n    storage._update_cookie(None, response)\n    self.assertEqual(response.cookies['messages']['max-age'], 0)\n"], "sample_92": ["def test_xfail_strict_from_ini(testdir):\n    testdir.makeini(\n        \"\"\"\n        [pytest]\n        xfail_strict = True\n    \"\"\"\n    )\n    testdir.makepyfile(\n        \"\"\"\n        import pytest\n        @pytest.mark.xfail\n            pass\n    \"\"\"\n    )\n    result = testdir.runpytest()\n    result.stdout.fnmatch_lines([\"*1 failed*\"])\n"], "sample_46": ["    def setUp(self):\n        self.reference = IndexColumns(\n            'table', ['first_column', 'second_column'], lambda column: column.upper(),\n            col_suffixes=('ASC', 'DESC'), opclasses=('text_ops', 'int4_ops')\n        )\n"], "sample_159": ["def test_prefix_repr():\n    m = PREFIXES['m']\n    k = PREFIXES['k']\n    M = PREFIXES['M']\n\n    assert repr(m) == \"Prefix('milli', 'm', -3)\"\n    assert repr(k) == \"Prefix('kilo', 'k', 3)\"\n    assert repr(M) == \"Prefix('mega', 'M', 6)\"\n\n    dodeca = Prefix('dodeca', 'dd', 1, base=12)\n    assert repr(dodeca) == \"Prefix('dodeca', 'dd', 1, 12)\"\n"], "sample_24": ["def test_update_error_dict(self):\n    error_dict = {}\n    exception = ValidationError('message')\n    exception.update_error_dict(error_dict)\n    self.assertEqual(error_dict, {'__all__': ['message']})\n\n    error_dict = {}\n    exception = ValidationError({'field1': 'message'})\n    exception.update_error_dict(error_dict)\n    self.assertEqual(error_dict, {'field1': ['message']})\n\n    error_dict = {'field1': ['existing']}\n    exception = ValidationError({'field1': 'message', 'field2': 'other'})\n    exception.update_error_dict(error_dict)\n    self.assertEqual(error_dict, {'field1': ['existing', 'message'], 'field2': ['other']})\n"], "sample_147": ["def test_MatMul_kind():\n    A = MatrixSymbol('A', 2,2)\n    B = MatrixSymbol('B', 2,2)\n    assert MatMul(A, B).kind is MatrixKind(NumberKind)\n    assert MatMul(A, comm_x).kind is MatrixKind(NumberKind)\n    assert MatMul(noncomm_x, A).kind is UndefinedKind\n"], "sample_57": ["def test_formset_template_name(self):\n    \"\"\"Formset's template_name is set to the renderer's formset_template_name.\"\"\"\n    ChoiceFormSet = formset_factory(Choice)\n    formset = ChoiceFormSet()\n    self.assertEqual(formset.template_name, formset.renderer.formset_template_name)\n\n    class CustomRenderer(TemplatesSetting):\n        formset_template_name = \"a/custom/formset/template.html\"\n\n    ChoiceFormSet = formset_factory(Choice, renderer=CustomRenderer)\n    formset = ChoiceFormSet()\n    self.assertEqual(formset.template_name, \"a/custom/formset/template.html\")\n"], "sample_103": ["def test_mutual_info_regression_sparse():\n    # Test that sparse and dense matrices give the same results for regression.\n    rng = check_random_state(0)\n    X = rng.rand(100, 5)\n    y = rng.rand(100)\n\n    # Create a sparse matrix with the same data as X\n    X_sparse = csr_matrix(X)\n\n    mi_dense = mutual_info_regression(X, y, random_state=0)\n    mi_sparse = mutual_info_regression(X_sparse, y, random_state=0)\n\n    assert_array_equal(mi_dense, mi_sparse)\n"], "sample_101": ["def test_pipeline_with_none_step():\n    X = np.array([[1, 2]])\n    pipe = Pipeline([('transf', None), ('clf', Mult())])\n    assert_raises_regex(TypeError,\n                        \"All intermediate steps should be transformers \"\n                        \"and implement fit and transform or be the string \"\n                        \"'passthrough' 'NoneType' (type <class 'NoneType'>) \"\n                        \"doesn't\", pipe.fit, X)\n"], "sample_108": ["def test_libsvm_sparse_predict():\n    # Test that sparse predict works for libsvm models\n    X, y = make_classification(n_samples=100, n_features=10, random_state=0)\n    clf = svm.SVC(kernel='linear', probability=True, random_state=0)\n    clf.fit(X, y)\n\n    # Create a sparse version of the data\n    X_sparse = sparse.csr_matrix(X)\n\n    # Predict on both dense and sparse data\n    y_pred_dense = clf.predict(X)\n    y_pred_sparse = clf.predict(X_sparse)\n\n    assert_array_equal(y_pred_dense, y_pred_sparse)\n"], "sample_22": ["def test_camel_case_to_spaces(self):\n    items = [\n        ('camelCase', 'camel case'),\n        ('CamelCase', 'camel case'),\n        ('CAMELCase', 'camel case'),\n        ('_camelCase', '_camel case'),\n        ('__camelCase', '__camel case'),\n        ('123camelCase', '123camel case'),\n    ]\n    for value, output in items:\n        self.assertEqual(text.camel_case_to_spaces(value), output)\n        self.assertEqual(text.camel_case_to_spaces(lazystr(value)), output)\n"], "sample_44": ["def test_modelchoicefield_iterator_value_equality(self):\n    value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n    value_2 = ModelChoiceIteratorValue(self.c1.pk, None)\n    value_3 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n\n    self.assertEqual(value_1, value_2)\n    self.assertEqual(value_1, self.c1.pk)\n    self.assertNotEqual(value_1, value_3)\n    self.assertNotEqual(value_1, self.c2.pk)\n"], "sample_28": ["    def setUpTestData(cls):\n        cls.u1 = User.objects.create_superuser(username='super', password='secret', email='super@example.com')\n"], "sample_104": ["def test_indent_at_name():\n    # Render an estimator with indent_at_name=False\n    pp = _EstimatorPrettyPrinter(compact=True, indent=1, indent_at_name=False)\n    lr = LogisticRegression()\n    expected = \"\"\""], "sample_107": ["def test_logistic_regression_path_multiclass():\n    # Test that logistic_regression_path returns the correct coefs for\n    # multiclass problems.\n    X, y = make_classification(n_samples=200, n_classes=3, n_informative=2,\n                               n_redundant=0, n_clusters_per_class=1,\n                               random_state=0, n_features=2)\n    Cs = [.00001, 1, 10000]\n    coefs, _, _ = _logistic_regression_path(X, y, penalty='l2', Cs=Cs,\n                                            solver='saga', random_state=0,\n                                            multi_class='multinomial')\n\n    # Check that the returned coefs have the correct shape.\n    assert coefs.shape == (len(Cs), 3, 2)\n\n    # Check that the returned coefs are not all zeros.\n    assert np.any(coefs != 0)\n"], "sample_34": ["    def test_field_name_clashes_with_related_field_accessor(self):\n        class Model(models.Model):\n            foo = models.CharField(max_length=10)\n\n            @property\n                return 'bar'\n\n        class RelatedModel(models.Model):\n            model = models.ForeignKey(Model, on_delete=models.CASCADE)\n            bar = models.CharField(max_length=10)\n\n        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n            Error(\n                \"The property 'bar' clashes with a related field accessor.\",\n                obj=Model,\n                id='models.E025',\n            ),\n        ])\n"], "sample_39": ["    def test_warning_on_invalid_pattern(self):\n        msg = (\n            \"Your URL pattern '^invalid-regex/$' [name='invalid-regex'] has a \"\n            \"route that contains '(?P<', begins with a '^', or ends with a '$'. \"\n            \"This was likely an oversight when migrating to django.urls.path().\"\n        )\n        warnings = check_resolver(get_resolver('urlpatterns_reverse.urls'))\n        self.assertEqual(len(warnings), 1)\n        self.assertEqual(warnings[0].msg, msg)\n"], "sample_35": ["    def test_modelform_unique_error_messages(self):\n        # Create a model form with unique and unique_together constraints.\n        from .models import UniqueModel\n\n        class UniqueForm(forms.ModelForm):\n            class Meta:\n                model = UniqueModel\n                fields = '__all__'\n\n        # Test unique constraint error message.\n        f = UniqueForm({'name': 'Taken'})\n        UniqueModel.objects.create(name='Taken')\n        self.assertFormErrors(['UniqueModel with this Name already exists.'], f.clean)\n\n        # Test unique_together constraint error message.\n        f = UniqueForm({'name': 'Taken', 'birthdate': '2000-01-01'})\n        UniqueModel.objects.create(name='Taken', birthdate='2000-01-01')\n        self.assertFormErrors(['UniqueModel with this Name and Birthdate already exists.'], f.clean)\n"], "sample_149": ["def test_monomial_ldiv():\n    assert monomial_ldiv((3, 4, 1), (1, 2, 0)) == (2, 2, 1)\n    assert monomial_ldiv((3, 4, 1), (1, 2, 2)) == (2, 2, -1)\n"], "sample_79": ["def test_concat_positions(self):\n    # Test that the `positions` argument works as expected\n    data = create_test_data()\n    split_data = [data.isel(dim1=slice(3)), data.isel(dim1=slice(3, None))]\n    positions = [[0, 1, 2], [3, 4, 5]]\n    actual = concat(split_data, dim=\"dim1\", positions=positions)\n    assert_identical(data, actual)\n\n    # Test that incorrect positions raise an error\n    with raises_regex(ValueError, \"Length of positions does not match\"):\n        concat(split_data, dim=\"dim1\", positions=[[0, 1], [3, 4]])\n"], "sample_77": ["    def test_coordinate(self):\n\n        scale = Continuous()._setup(pd.Series([1, 2, 3]), Coordinate())\n        axis = PseudoAxis(scale._matplotlib_scale)\n        axis.set_view_interval(0, 10)\n        assert_array_equal(axis.major.locator(), [0, 5, 10])\n"], "sample_102": ["def test_iforest_fit_predict_sparse():\n    \"\"\"Test fit and predict methods with sparse data\"\"\"\n    X_train = csr_matrix(np.array([[0, 1], [1, 2]]))\n    X_test = csr_matrix(np.array([[2, 1], [1, 1]]))\n\n    clf = IsolationForest(random_state=rng)\n    clf.fit(X_train)\n    y_pred = clf.predict(X_test)\n\n    assert_array_equal(y_pred, [-1, -1])\n"], "sample_25": ["def test_alter_model_table_with_inheritance(self):\n    \"\"\"\n    AlterModelTable should be generated when a model's db_table is changed,\n    even if the model has inheritance.\n    \"\"\"\n    before = [\n        ModelState('app', 'Parent', [\n            ('id', models.AutoField(primary_key=True)),\n        ]),\n        ModelState('app', 'Child', [], bases=('app.Parent',)),\n    ]\n    after = [\n        ModelState('app', 'Parent', [\n            ('id', models.AutoField(primary_key=True)),\n        ], options={'db_table': 'new_parent'}),\n        ModelState('app', 'Child', [], bases=('app.Parent',)),\n    ]\n    changes = self.get_changes(before, after)\n    self.assertNumberMigrations(changes, 'app', 1)\n    self.assertOperationTypes(changes, 'app', 0, ['AlterModelTable'])\n    self.assertOperationAttributes(changes, 'app', 0, 0, name='parent', table='new_parent')\n"], "sample_56": ["    def setUpClass(cls):\n        super().setUpClass()\n        cls.error_same_tags = Error(\n            E003.msg.format(\n                \"'same_tags'\",\n                \"'check_framework.template_test_apps.same_tags_app_1.\"\n                \"templatetags.same_tags', \"\n                \"'check_framework.template_test_apps.same_tags_app_2.\"\n                \"templatetags.same_tags'\",\n            ),\n            id=E003.id,\n        )\n"], "sample_135": ["def test_compare_pretty():\n    from sympy import Symbol, Order\n    x = Symbol('x')\n    assert Basic._compare_pretty(x, x) == 0\n    assert Basic._compare_pretty(x, Order(x)) == -1\n    assert Basic._compare_pretty(Order(x), x) == 1\n    assert Basic._compare_pretty(Order(x), Order(x)) == 0\n"], "sample_74": ["def test_colorbar_with_no_norm():\n    fig, ax = plt.subplots()\n    cmap = mpl.colormaps[\"viridis\"]\n    mappable = cm.ScalarMappable(cmap=cmap)\n    with pytest.raises(TypeError):\n        Colorbar(ax, mappable=mappable)\n"], "sample_48": ["def test_reduce_references_model(self):\n    operation = FieldOperation('Model', 'field', models.ForeignKey('Other', models.CASCADE))\n    other_operation = FieldOperation('Other', 'field', models.BooleanField(default=False))\n    self.assertIs(operation.reduce(other_operation, 'migrations'), False)\n    self.assertIs(other_operation.reduce(operation, 'migrations'), True)\n"], "sample_113": ["def test_column_transformer_feature_names_out_with_callable():\n    \"\"\"Check feature names out when using a callable as a column selector.\"\"\"\n    pd = pytest.importorskip(\"pandas\")\n\n    df = pd.DataFrame([[1, 2, 3]], columns=[\"a\", \"b\", \"c\"])\n\n        return [\"a\", \"b\"]\n\n    ct = ColumnTransformer(\n        [(\"bycol\", TransWithNames([\"x\", \"y\"]), selector)], remainder=\"drop\"\n    )\n    ct.fit(df)\n\n    assert_array_equal(ct.get_feature_names_out(), [\"bycol__x\", \"bycol__y\"])\n"], "sample_128": ["def test_Method_postprocess():\n    opt = {'method': 'something'}\n    Method.postprocess(opt)\n\n    assert opt == {'method': 'something'}\n"], "sample_68": ["def test_update_conflicts_with_fields_db_column(self):\n    FieldsWithDbColumns.objects.bulk_create(\n        [\n            FieldsWithDbColumns(field1=\"a\", field2=\"b\"),\n            FieldsWithDbColumns(field1=\"c\", field2=\"d\"),\n        ]\n    )\n    self.assertEqual(FieldsWithDbColumns.objects.count(), 2)\n\n    conflicting_objects = [\n        FieldsWithDbColumns(field1=\"a\", field2=\"x\"),\n        FieldsWithDbColumns(field1=\"c\", field2=\"y\"),\n    ]\n    results = FieldsWithDbColumns.objects.bulk_create(\n        conflicting_objects,\n        update_conflicts=True,\n        update_fields=[\"field2\"],\n        unique_fields=[\"field1\"],\n    )\n    self.assertEqual(len(results), len(conflicting_objects))\n    if connection.features.can_return_rows_from_bulk_insert:\n        for instance in results:\n            self.assertIsNotNone(instance.pk)\n    self.assertEqual(FieldsWithDbColumns.objects.count(), 2)\n    self.assertCountEqual(\n        FieldsWithDbColumns.objects.values(\"field1\", \"field2\"),\n        [\n            {\"field1\": \"a\", \"field2\": \"x\"},\n            {\"field1\": \"c\", \"field2\": \"y\"},\n        ],\n    )\n"], "sample_72": ["def test_figure_repr():\n    fig = Figure()\n    assert repr(fig) == \"<Figure size 640x480 with 0 Axes>\"\n    ax = fig.add_subplot(111)\n    assert repr(fig) == \"<Figure size 640x480 with 1 Axes>\"\n"], "sample_80": ["def test_short_data_repr(self):\n    array = np.arange(100)\n    actual = formatting.short_data_repr(array)\n    expected = short_numpy_repr(array)\n    assert actual == expected\n\n    import dask.array as da\n\n    array = da.from_array(np.arange(100), chunks=10)\n    actual = formatting.short_data_repr(array)\n    expected = limit_lines(repr(array), limit=40)\n    assert actual == expected\n\n    class CustomArray:\n            self.value = value\n\n            return f\"CustomArray({self.value})\"\n\n            return NotImplemented\n\n        @property\n            return self.value.shape\n\n        @property\n            return self.value.dtype\n\n        @property\n            return self.value.ndim\n\n    array = CustomArray(np.arange(100))\n    actual = formatting.short_data_repr(array)\n    expected = array._repr_inline_(80)\n    assert actual == expected\n"], "sample_0": ["def test_format_value(self):\n    widget = forms.SelectDateWidget()\n    self.assertEqual(widget.format_value(None), {'year': None, 'month': None, 'day': None})\n    self.assertEqual(widget.format_value('2022-01-01'), {'year': 2022, 'month': 1, 'day': 1})\n    self.assertEqual(widget.format_value(datetime.date(2022, 1, 1)), {'year': 2022, 'month': 1, 'day': 1})\n    self.assertEqual(widget.format_value('invalid'), {'year': None, 'month': None, 'day': None})\n"], "sample_134": ["def test_cbrt():\n    if not np:\n        skip(\"NumPy not installed\")\n    assert abs(lambdify((a,), cbrt(a), 'numpy')(27) - 3) < 1e-16\n    assert abs(lambdify((a,), Cbrt(a), 'numpy')(27) - 3) < 1e-16\n"], "sample_67": ["def test_serialize_type_with_module(self):\n    self.assertSerializedEqual(type)\n    self.assertSerializedResultEqual(\n        type,\n        (\"type\", set()),\n    )\n    self.assertSerializedEqual(models.Model)\n    self.assertSerializedResultEqual(\n        models.Model,\n        (\"models.Model\", {\"from django.db import models\"}),\n    )\n"], "sample_60": ["def test_serialize_type_with_module(self):\n    class TestType:\n        pass\n\n    self.assertSerializedEqual(TestType)\n    self.assertSerializedResultEqual(\n        MigrationWriter.serialize(TestType),\n        (\"('migrations.test_writer.TestType', {'import migrations.test_writer'})\", set()),\n    )\n"], "sample_10": ["def test_exists_with_max(self):\n    max_id = Article.objects.aggregate(Max('id'))['id__max']\n    qs = Article.objects.filter(id=OuterRef('id'))\n    self.assertTrue(Article.objects.filter(id=max_id).annotate(has_next=Exists(qs)).get().has_next)\n"], "sample_11": ["def test_unregister_serializer(self):\n    class ComplexSerializer(BaseSerializer):\n            return 'complex(%r)' % self.value, {}\n\n    Serializer.register(complex, ComplexSerializer)\n    Serializer.unregister(complex)\n\n    with self.assertRaisesMessage(ValueError, \"Cannot serialize: (1+1j)\\nThere are some values Django cannot serialize into migration files.\\nFor more, see https://docs.djangoproject.com/en/%s/topics/migrations/#migration-serializing\" % get_docs_version()):\n        MigrationWriter.serialize(1 + 1j)\n"], "sample_30": ["    def test_get_extra(self):\n        class MyInline(TabularInline):\n            model = Inner\n\n                return 10\n\n        modeladmin = ModelAdmin(Holder, admin_site)\n        modeladmin.inlines = [MyInline]\n        request = self.factory.get(reverse('admin:admin_inlines_holder_add'))\n        request.user = self.superuser\n        response = modeladmin.changeform_view(request)\n        self.assertContains(response, 'id=\"id_inner_set-TOTAL_FORMS\" value=\"10\"')\n"], "sample_124": ["def test_csch_expansion():\n    x, y = symbols('x,y')\n    assert csch(x+y).expand(trig=True) == (csch(x)*csch(y)*cosh(x)*cosh(y) - \n                                           csch(x)*csch(y)*sinh(x)*sinh(y))\n    assert csch(2*x).expand(trig=True) == csch(x)**2*cosh(x)*sinh(x)\n    assert csch(3*x).expand(trig=True).expand() == (csch(x)**3*cosh(x)**2*sinh(x) - \n                                                    csch(x)**3*sinh(x)**3)\n"], "sample_109": ["def test_validate_shuffle_split():\n    # Test the _validate_shuffle_split function\n    n_samples = 10\n\n    # Test with valid test_size and train_size\n    test_size, train_size = _validate_shuffle_split(n_samples, test_size=0.2)\n    assert test_size == 2\n    assert train_size == 8\n\n    # Test with valid test_size and default train_size\n    test_size, train_size = _validate_shuffle_split(n_samples, test_size=0.2,\n                                                    train_size=None)\n    assert test_size == 2\n    assert train_size == 8\n\n    # Test with valid train_size and default test_size\n    test_size, train_size = _validate_shuffle_split(n_samples, train_size=0.8,\n                                                    test_size=None)\n    assert test_size == 2\n    assert train_size == 8\n\n    # Test with both test_size and train_size specified\n    test_size, train_size = _validate_shuffle_split(n_samples, test_size=0.2,\n                                                    train_size=0.8)\n    assert test_size == 2\n    assert train_size == 8\n\n    # Test with invalid test_size\n    with pytest.raises(ValueError):\n        _validate_shuffle_split(n_samples, test_size=1.1)\n\n    # Test with invalid train_size\n    with pytest.raises(ValueError):\n        _validate_shuffle_split(n_samples, train_size=1.1)\n\n    # Test with test_size and train_size that don't add up to 1\n    with pytest.raises(ValueError):\n        _validate_shuffle_split(n_samples, test_size=0.4, train_size=0.7)\n"], "sample_111": ["def test_empty_input(metric_name):\n    # All supervised clustering metrics should be able to handle empty input\n    metric = SUPERVISED_METRICS[metric_name]\n    assert metric([], []) == 1.0\n    assert metric([1, 2, 3], []) == 1.0\n    assert metric([], [1, 2, 3]) == 1.0\n"], "sample_151": ["def test_affine_rank():\n    assert Point.affine_rank() == -1\n    assert Point.affine_rank(Point(0, 0)) == 0\n    assert Point.affine_rank(Point(0, 0), Point(1, 1)) == 1\n    assert Point.affine_rank(Point(0, 0), Point(1, 1), Point(2, 2)) == 1\n    assert Point.affine_rank(Point(0, 0), Point(1, 0), Point(0, 1)) == 2\n    assert Point.affine_rank(Point(0, 0, 0), Point(1, 0, 0), Point(0, 1, 0)) == 2\n    assert Point.affine_rank(Point(0, 0, 0), Point(1, 0, 0), Point(0, 1, 0), Point(0, 0, 1)) == 3\n"], "sample_148": ["def test_issue_21625():\n    from sympy import im, acos, acosh\n    assert unchanged(im, S(\"acos(-i + acosh(-g + i))\"))\n    assert unchanged(im, S(\"acosh(i + acos(-g + i))\"))\n"], "sample_121": ["def test_cycle_structure():\n    p = Permutation([1, 0, 2, 3])\n    assert p.cycle_structure == {1: 2, 2: 1}\n    q = Permutation([0, 2, 1, 3])\n    assert q.cycle_structure == {2: 1, 1: 2}\n    r = Permutation([3, 2, 1, 0])\n    assert r.cycle_structure == {4: 1}\n    s = Permutation([0, 1, 2, 3])\n    assert s.cycle_structure == {1: 4}\n"], "sample_65": ["    def test_add01(self):\n        output = self.engine.render_to_string(\"add01\", {\"num1\": 5, \"num2\": 3})\n        self.assertEqual(output, \"8\")\n"], "sample_122": ["def test_sparse_matrix_row_col_operations():\n    # Test row and column operations on sparse matrices\n    A = SparseMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n    # Test row swap\n    A.row_swap(0, 1)\n    assert A == SparseMatrix([[4, 5, 6], [1, 2, 3], [7, 8, 9]])\n\n    # Test col swap\n    A.col_swap(0, 1)\n    assert A == SparseMatrix([[5, 4, 6], [2, 1, 3], [8, 7, 9]])\n\n    # Test row delete\n    A.row_del(0)\n    assert A == SparseMatrix([[2, 1, 3], [8, 7, 9]])\n\n    # Test col delete\n    A.col_del(0)\n    assert A == SparseMatrix([[1, 3], [7, 9]])\n\n    # Test row insert\n    A.row_insert(0, SparseMatrix([10, 11]))\n    assert A == SparseMatrix([[10, 11], [1, 3], [7, 9]])\n\n    # Test col insert\n    A.col_insert(0, SparseMatrix([12, 13, 14]))\n    assert A == SparseMatrix([[12, 10, 11], [13, 1, 3], [14, 7, 9]])\n"], "sample_32": ["    def test_m2m(self):\n        related_obj = RelatedJSONModel.objects.create(value={'foo': 'bar'})\n        obj = JSONModel.objects.create(value={'baz': 'qux'})\n        obj.related.add(related_obj)\n        self.assertSequenceEqual(\n            JSONModel.objects.filter(related__value__foo='bar'),\n            [obj],\n        )\n"], "sample_42": ["def test_unregister_serializer(self):\n    class ComplexSerializer(BaseSerializer):\n            return 'complex(%r)' % self.value, {}\n\n    Serializer.register(complex, ComplexSerializer)\n    Serializer.unregister(complex)\n\n    with self.assertRaisesMessage(ValueError, \"Cannot serialize: (1+2j)\"):\n        MigrationWriter.serialize(1 + 2j)\n"], "sample_142": ["def test_roundrobin():\n    assert list(roundrobin('ABC', 'D', 'EF')) == [\n        'A', 'D', 'E', 'B', 'F', 'C']\n    assert list(roundrobin([1, 2], [3, 4, 5])) == [1, 3, 2, 4]\n    assert list(roundrobin([1, 2, 3], [4, 5], [6, 7, 8, 9])) == [\n        1, 4, 6, 2, 5, 7, 3, 8, 9]\n"], "sample_14": ["def test_unregister_serializer(self):\n    class ComplexSerializer(BaseSerializer):\n            return 'complex(%r)' % self.value, {}\n\n    Serializer.register(complex, ComplexSerializer)\n    Serializer.unregister(complex)\n\n    with self.assertRaisesMessage(ValueError, \"Cannot serialize: (1+2j)\\nThere are some values Django cannot serialize into migration files.\"):\n        MigrationWriter.serialize(1 + 2j)\n"], "sample_136": ["def test_blockcut_non_symbolic_matrix():\n    M = ImmutableMatrix(4, 4, range(16))\n    B = blockcut(M, (1, 3), (1, 3))\n    assert ImmutableMatrix(B.blocks[0, 1]) == ImmutableMatrix([[1, 2, 3]])\n    assert ImmutableMatrix(B.blocks[1, 0]) == ImmutableMatrix([[4], [5], [6]])\n"], "sample_66": ["    def test_not_callable_or_boolean(self):\n        class TestModelAdmin(ModelAdmin):\n            view_on_site = \"hello\"\n\n        self.assertIsInvalid(\n            TestModelAdmin,\n            ValidationTestModel,\n            \"The value of 'view_on_site' must be a callable or a boolean value.\",\n            \"admin.E025\",\n        )\n"], "sample_2": ["def test_to_fits_2():\n    \"\"\"\n    Test to_fits() with SIP distortion.\n    \"\"\"\n    fits_name = get_pkg_data_filename('data/sip.fits')\n    w = wcs.WCS(fits_name)\n    wfits = w.to_fits()\n    assert isinstance(wfits, fits.HDUList)\n    assert isinstance(wfits[0], fits.PrimaryHDU)\n    assert 'A_1_1' in wfits[0].header\n    assert 'B_1_1' in wfits[0].header\n"], "sample_23": ["def test_union_with_deferred_fields(self):\n    qs1 = Number.objects.defer('other_num').filter(num__lte=1)\n    qs2 = Number.objects.defer('other_num').filter(num__gte=8)\n    self.assertNumbersEqual(qs1.union(qs2), [0, 1, 8, 9], ordered=False)\n"], "sample_18": ["    def test_swappable_model(self):\n        class SwappableModel(models.Model):\n            class Meta:\n                swappable = 'TEST_SWAPPABLE_MODEL'\n\n        class Model(models.Model):\n            explicit_fk = models.ForeignKey(\n                SwappableModel,\n                models.CASCADE,\n                related_name='explicit_fk',\n            )\n            implicit_fk = models.ForeignKey(\n                'invalid_models_tests.SwappableModel',\n                models.CASCADE,\n                related_name='implicit_fk',\n            )\n            explicit_m2m = models.ManyToManyField(SwappableModel, related_name='explicit_m2m')\n            implicit_m2m = models.ManyToManyField(\n                'invalid_models_tests.SwappableModel',\n                related_name='implicit_m2m',\n            )\n\n        fields = [\n            Model._meta.get_field('explicit_fk'),\n            Model._meta.get_field('implicit_fk'),\n            Model._meta.get_field('explicit_m2m'),\n            Model._meta.get_field('implicit_m2m'),\n        ]\n\n        expected_warning = DjangoWarning(\n            \"Model 'invalid_models_tests.Model' has a ForeignKey or ManyToManyField to \"\n            \"swappable model 'invalid_models_tests.SwappableModel'. You must ensure this \"\n            \"model is installed before creating the model with the ForeignKey or \"\n            \"ManyToManyField.\",\n            id='fields.W301',\n        )\n\n        for field in fields:\n            expected_warning.obj = field\n            self.assertEqual(field.check(from_model=Model), [expected_warning])\n"], "sample_112": ["def test_isotonic_regression_get_params():\n    \"\"\"Check `get_params` for `IsotonicRegression`.\"\"\"\n    iso = IsotonicRegression(y_min=0.0, y_max=1.0, increasing=True, out_of_bounds=\"clip\")\n    params = iso.get_params()\n    assert \"y_min\" in params\n    assert \"y_max\" in params\n    assert \"increasing\" in params\n    assert \"out_of_bounds\" in params\n    assert params[\"y_min\"] == 0.0\n    assert params[\"y_max\"] == 1.0\n    assert params[\"increasing\"] is True\n    assert params[\"out_of_bounds\"] == \"clip\"\n"], "sample_137": ["def test_roundrobin():\n    assert list(roundrobin('ABC', 'D', 'EF')) == [\n        'A', 'D', 'E', 'B', 'F', 'C']\n    assert list(roundrobin([1, 2], [3, 4, 5])) == [1, 3, 2, 4]\n"], "sample_138": ["def test_blockcollapse_inverse():\n    A = MatrixSymbol('A', n, n)\n    B = MatrixSymbol('B', n, m)\n    C = MatrixSymbol('C', m, n)\n    D = MatrixSymbol('D', m, m)\n    X = BlockMatrix([[A, B], [C, D]])\n\n    assert block_collapse(X.inverse()) == block_collapse(Inverse(X))\n"], "sample_129": ["def test_latex_LieDerivative():\n    from sympy.diffgeom import LieDerivative, TensorProduct\n    from sympy.diffgeom.rn import R2, R2_p, R2_r\n    from sympy.diffgeom.dd import Differential\n\n    # scalar field\n    field = R2.x*R2.y\n    # vector field\n    vfield = R2_r.x - R2_r.y\n    # tensor field\n    tenfield = TensorProduct(R2.dx, R2.dy)\n\n    # Lie derivative of a scalar field\n    assert latex(LieDerivative(vfield, field)) == r'\\mathcal{L}_{x e_{x} - y e_{y}} x y'\n\n    # Lie derivative of a vector field\n    assert latex(LieDerivative(vfield, R2_r.x)) == r'\\mathcal{L}_{x e_{x} - y e_{y}} e_{x}'\n\n    # Lie derivative of a 1-form\n    assert latex(LieDerivative(vfield, R2.dx)) == r'\\mathcal{L}_{x e_{x} - y e_{y}} dx'\n\n    # Lie derivative of a tensor field\n    assert latex(LieDerivative(vfield, tenfield)) == r'\\mathcal{L}_{x e_{x} - y e_{y}} dx\\otimes dy'\n"], "sample_145": ["def test_latex_limited_precision():\n    assert latex(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679, decimal_separator=\"period\", full_prec=False) == r\"3.141592653589793\"\n"], "sample_53": ["def test_remove_model_with_field_removed_from_base_model(self):\n    \"\"\"\n    Removing a base field takes place before removing an inherited model\n    that has a field with the same name.\n    \"\"\"\n    before = [\n        ModelState(\n            \"app\",\n            \"readable\",\n            [\n                (\"id\", models.AutoField(primary_key=True)),\n                (\"title\", models.CharField(max_length=200)),\n            ],\n        ),\n        ModelState(\n            \"app\",\n            \"book\",\n            [],\n            bases=(\"app.readable\",),\n        ),\n    ]\n    after = [\n        ModelState(\n            \"app\",\n            \"readable\",\n            [\n                (\"id\", models.AutoField(primary_key=True)),\n            ],\n        ),\n    ]\n    changes = self.get_changes(before, after)\n    self.assertNumberMigrations(changes, \"app\", 1)\n    self.assertOperationTypes(changes, \"app\", 0, [\"RemoveField\", \"DeleteModel\"])\n    self.assertOperationAttributes(\n        changes, \"app\", 0, 0, name=\"title\", model_name=\"readable\"\n    )\n    self.assertOperationAttributes(changes, \"app\", 0, 1, name=\"book\")\n"], "sample_123": ["def test_issue_13317():\n    assert Integer.sqrt(0) == 0\n    assert Integer.sqrt(1) == 1\n    assert Integer.sqrt(4) == 2\n    assert Integer.sqrt(9) == 3\n    assert Integer.sqrt(16) == 4\n    assert Integer.sqrt(25) == 5\n    assert Integer.sqrt(36) == 6\n    assert Integer.sqrt(49) == 7\n    assert Integer.sqrt(64) == 8\n    assert Integer.sqrt(81) == 9\n    assert Integer.sqrt(100) == 10\n    assert Integer.sqrt(121) == 11\n    assert Integer.sqrt(144) == 12\n    assert Integer.sqrt(169) == 13\n    assert Integer.sqrt(196) == 14\n    assert Integer.sqrt(225) == 15\n    assert Integer.sqrt(256) == 16\n    assert Integer.sqrt(289) == 17\n    assert Integer.sqrt(324) == 18\n    assert Integer.sqrt(361) == 19\n    assert Integer.sqrt(400) == 20\n    assert Integer.sqrt(441) == 21\n    assert Integer.sqrt(484) == 22\n    assert Integer.sqrt(529) == 23\n    assert Integer.sqrt(576) == 24\n    assert Integer.sqrt(625) == 25\n    assert Integer.sqrt(676) == 26\n    assert Integer.sqrt(729) == 27\n    assert Integer.sqrt(784) == 28\n    assert Integer.sqrt(841) == 29\n    assert Integer.sqrt(900) == 30\n"], "sample_143": ["def test_pretty_PolynomialRingBase():\n    R = QQ.old_poly_ring(x, y, order=lex)\n    R2 = QQ.old_poly_ring(x, y, order=grlex)\n    R3 = QQ.old_poly_ring(x, y, order=ilex)\n\n    ucode_str = \\"], "sample_52": ["    def test_state_forwards_rejects_model_options_with_invalid_keys(self):\n        project_state = ProjectState()\n        project_state.add_model(ModelState(\"migrations\", \"Foo\", []))\n        operation = migrations.AlterModelOptions(\"Foo\", {\"invalid_option\": True})\n        msg = \"Model 'Foo' has invalid option 'invalid_option' in AlterModelOptions\"\n        with self.assertRaisesMessage(ValueError, msg):\n            operation.state_forwards(\"migrations\", project_state)\n"], "sample_126": ["def test_mod_inverse_finite_field():\n    F = GF(31)\n    assert mod_inverse(F(3), F) == F(21)\n    assert mod_inverse(F(17), F) == F(11)\n    raises(ValueError, lambda: mod_inverse(F(0), F))\n"], "sample_125": ["def test_Float_hash():\n    assert hash(Float(1.0)) == hash(Float(1.0, 15))\n    assert hash(Float(1.0, 15)) != hash(Float(1.0, 30))\n    assert hash(Float(1.0, 15)) != hash(Float(1.000000000000001, 15))\n"], "sample_127": ["def test_latex_MatPow():\n    from sympy import MatrixSymbol\n    A = MatrixSymbol(\"A\", 3, 3)\n    assert latex(A**3) == r\"A^{3}\"\n    assert latex(A**-1) == r\"A^{-1}\"\n    assert latex(A**0) == r\"A^{0}\"\n"]}, "raw_scored_generations": {"sample_3": [false], "sample_2": [false], "sample_0": [true], "sample_1": [false], "sample_6": [true], "sample_4": [false], "sample_5": [true], "sample_7": [false], "sample_9": [false], "sample_8": [true], "sample_10": [true], "sample_11": [false], "sample_13": [false], "sample_12": [true], "sample_14": [false], "sample_15": [true], "sample_16": [true], "sample_17": [true], "sample_18": [false], "sample_19": [false], "sample_21": [true], "sample_20": [true], "sample_23": [true], "sample_22": [true], "sample_24": [true], "sample_25": [true], "sample_28": [false], "sample_26": [false], "sample_27": [true], "sample_29": [false], "sample_31": [true], "sample_30": [false], "sample_32": [false], "sample_33": [false], "sample_34": [false], "sample_35": [false], "sample_36": [true], "sample_37": [false], "sample_39": [false], "sample_38": [true], "sample_40": [true], "sample_42": [false], "sample_41": [true], "sample_43": [true], "sample_45": [false], "sample_44": [true], "sample_46": [false], "sample_48": [true], "sample_47": [true], "sample_50": [true], "sample_49": [true], "sample_51": [true], "sample_52": [false], "sample_53": [true], "sample_55": [true], "sample_54": [true], "sample_56": [false], "sample_58": [true], "sample_57": [true], "sample_60": [true], "sample_59": [true], "sample_61": [false], "sample_63": [false], "sample_62": [false], "sample_64": [true], "sample_66": [true], "sample_65": [false], "sample_68": [true], "sample_67": [true], "sample_69": [false], "sample_70": [true], "sample_71": [true], "sample_72": [true], "sample_73": [false], "sample_74": [false], "sample_75": [true], "sample_76": [false], "sample_77": [false], "sample_78": [false], "sample_79": [false], "sample_80": [false], "sample_82": [false], "sample_81": [false], "sample_83": [false], "sample_84": [false], "sample_85": [false], "sample_86": [true], "sample_87": [false], "sample_88": [false], "sample_89": [false], "sample_90": [false], "sample_91": [false], "sample_92": [false], "sample_93": [false], "sample_95": [false], "sample_94": [false], "sample_96": [false], "sample_97": [false], "sample_98": [false], "sample_99": [false], "sample_100": [true], "sample_101": [false], "sample_102": [false], "sample_103": [false], "sample_104": [false], "sample_105": [false], "sample_107": [false], "sample_106": [true], "sample_108": [false], "sample_109": [false], "sample_110": [true], "sample_111": [false], "sample_112": [true], "sample_113": [false], "sample_114": [false], "sample_115": [false], "sample_116": [false], "sample_117": [true], "sample_118": [false], "sample_119": [true], "sample_120": [false], "sample_121": [false], "sample_122": [false], "sample_123": [false], "sample_124": [false], "sample_125": [true], "sample_126": [false], "sample_127": [false], "sample_128": [true], "sample_129": [false], "sample_130": [false], "sample_131": [true], "sample_132": [false], "sample_133": [false], "sample_134": [true], "sample_135": [true], "sample_136": [false], "sample_137": [false], "sample_138": [true], "sample_139": [true], "sample_140": [false], "sample_142": [false], "sample_141": [false], "sample_143": [false], "sample_144": [true], "sample_145": [false], "sample_146": [false], "sample_147": [false], "sample_148": [true], "sample_149": [false], "sample_150": [false], "sample_151": [true], "sample_152": [true], "sample_153": [true], "sample_154": [true], "sample_155": [false], "sample_156": [false], "sample_157": [false], "sample_158": [false], "sample_159": [true]}}