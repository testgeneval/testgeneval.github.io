{"raw_generations": {"sample_6": ["    def test_ascii_username_validator(self):\n        validator = validators.ASCIIUsernameValidator()\n        self.assertTrue(validator('testuser123'))\n        self.assertTrue(validator('test.user123'))\n        self.assertFalse(validator('test user123'))\n        self.assertFalse(validator('test\u30e6\u30fc\u30b6\u30fc123'))\n"], "sample_100": ["    def test_onehotencoder_inverse_transform_unknown_categories(self):\n        enc = OneHotEncoder(handle_unknown='ignore')\n        X = [['Male', 1], ['Female', 3], ['Female', 2]]\n        enc.fit(X)\n        X_trans = enc.transform([['Female', 4], ['Male', 1]])\n        X_inv = enc.inverse_transform(X_trans)\n        assert_equal(X_inv, [['Female', None], ['Male', 1]])\n"], "sample_105": ["    def test_voting_regressor_gridsearchcv(self):\n        # Check that VotingRegressor works with GridSearchCV\n        clf1 = LinearRegression()\n        clf2 = RandomForestRegressor(n_estimators=10, random_state=1)\n        eclf = VotingRegressor([('lr', clf1), ('rf', clf2)])\n        params = {'rf__n_estimators': [5, 10]}\n        grid = GridSearchCV(estimator=eclf, param_grid=params, cv=2)\n        grid.fit(X_r, y_r)\n        assert grid.best_score_ is not None\n"], "sample_150": ["def test_solve_biquadratic_complex():\n    x, y = symbols('x y')\n    a = Poly(y**2 - 4 + x, y, x, domain='ZZ')\n    b = Poly(y*2 + 3*x - 7, y, x, domain='ZZ')\n    NewOption = Options((x, y), {'domain': 'ZZ'})\n    sol = solve_biquadratic(a, b, NewOption)\n    assert set(sol) == {(1/3, 3), (41/27, 11/9)}\n"], "sample_95": ["    def test_skip_reason_is_reported(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.skip(reason=\"my reason\")\n                pass\n        \"\"\"\n        )\n        result = testdir.runpytest()\n        result.assert_outcomes(skipped=1)\n        assert \"my reason\" in result.stdout.str()\n"], "sample_101": ["    def test_pipeline_memory_cache(self):\n        # Test that pipeline caches the fitted transformers when memory is given\n        # and that the cached transformers are reused.\n        memory = Memory(location=mkdtemp(), verbose=0)\n        X = np.array([[1, 2], [3, 4]])\n        y = np.array([0, 1])\n\n        # Create a pipeline with a transformer that stores a timestamp\n        # on fit\n        pipeline = Pipeline([('dummy', DummyTransf()), ('clf', SVC())],\n                            memory=memory)\n\n        # First fit\n        pipeline.fit(X, y)\n        timestamp1 = pipeline.named_steps['dummy'].timestamp_\n\n        # Second fit should reuse the cached transformer\n        pipeline.fit(X, y)\n        timestamp2 = pipeline.named_steps['dummy'].timestamp_\n\n        assert timestamp1 == timestamp2\n\n        shutil.rmtree(memory.location)\n"], "sample_143": ["def test_pretty_print_TensorProduct():\n    x = Symbol('x')\n    y = Symbol('y')\n    A = TensorHead('A', [1], [1])\n    B = TensorHead('B', [1], [1])\n    t = TensorProduct(A(x), B(y))\n    assert pretty(t) == 'A(x) \u2297 B(y)'\n"], "sample_159": ["    def test_prefix_unit():\n        assert prefix_unit(meter, PREFIXES) == [\n            Quantity('millimeter', abbrev='mm', is_prefixed=True),\n            Quantity('centimeter', abbrev='cm', is_prefixed=True),\n            Quantity('decimeter', abbrev='dm', is_prefixed=True),\n            meter,\n            Quantity('decameter', abbrev='dam', is_prefixed=True),\n            Quantity('hectometer', abbrev='hm', is_prefixed=True),\n            Quantity('kilometer', abbrev='km', is_prefixed=True),\n            Quantity('megameter', abbrev='Mm', is_prefixed=True),\n            Quantity('gigameter', abbrev='Gm', is_prefixed=True),\n            Quantity('terameter', abbrev='Tm', is_prefixed=True),\n            Quantity('petameter', abbrev='Pm', is_prefixed=True),\n            Quantity('exameter', abbrev='Em', is_prefixed=True),\n            Quantity('zettameter', abbrev='Zm', is_prefixed=True),\n            Quantity('yottameter', abbrev='Ym', is_prefixed=True),\n        ]\n"], "sample_41": ["    def test_formset_factory_absolute_max(self):\n        formset_class = formset_factory(FavoriteDrinkForm, max_num=5, absolute_max=3)\n        formset = formset_class(data={'form-0-name': 'A', 'form-1-name': 'B', 'form-2-name': 'C'})\n        self.assertTrue(formset.is_valid())\n        self.assertEqual(len(formset.cleaned_data), 3)\n\n        formset = formset_class(data={'form-0-name': 'A', 'form-1-name': 'B', 'form-2-name': 'C', 'form-3-name': 'D'})\n        self.assertFalse(formset.is_valid())\n        self.assertEqual(len(formset.cleaned_data), 3)\n\n        with self.assertRaises(ValidationError):\n            formset_class(data={'form-0-name': 'A', 'form-1-name': 'B', 'form-2-name': 'C', 'form-3-name': 'D', 'form-4-name': 'E'})\n"], "sample_99": ["    def test_radius_neighbors_graph_sparse_input(self):\n        # Test radius_neighbors_graph with sparse input\n        X = csr_matrix(iris.data)\n        neigh = neighbors.NearestNeighbors(radius=1.5)\n        neigh.fit(X)\n        A = neigh.radius_neighbors_graph(X)\n        assert_true(issparse(A))\n        assert_equal(A.shape, (X.shape[0], X.shape[0]))\n"], "sample_11": ["    def test_serialize_lazy_object(self):\n        lazy_value = SimpleLazyObject(lambda: 'lazy')\n        serialized, imports = serializer_factory(lazy_value).serialize()\n        self.assertEqual(serialized, \"'lazy'\")\n        self.assertEqual(imports, set())\n"], "sample_36": ["    def test_q_resolve_expression(self):\n        q = Q(field__exact=1)\n        with self.assertRaises(NotImplementedError):\n            q.resolve_expression()\n"], "sample_83": ["def test_text_reporter_with_custom_template(reporter: TextReporter, disable: list[str]) -> None:\n    \"\"\"Test custom template for TextReporter.\"\"\"\n    linter = PyLinter()\n    linter.disable(disable)\n    linter.reporter = reporter\n    linter.config.msg_template = \"{path}:{line}:{column}: {msg_id}: {msg} ({symbol}) - {obj}\"\n    output = StringIO()\n    with redirect_stdout(output):\n        linter.process_modules([\"test.py\"])\n    assert (\n        output.getvalue()\n        == \"test.py:1:0: C0111: Missing docstring (missing-docstring) - <module>\\n\"\n    )\n"], "sample_78": ["def test_run_command_with_cert_adhoc(runner, tmpdir):\n    \"\"\"Test running with adhoc certificates.\"\"\"\n    app = Flask(__name__)\n    with tmpdir.as_cwd():\n        with open(\"app.py\", \"w\") as f:\n            f.write(\n                f\"\"\""], "sample_63": ["    def test_creation_form_with_custom_user_model(self):\n        with override_settings(AUTH_USER_MODEL=\"tests.models.CustomUser\"):\n            form = UserCreationForm()\n            self.assertEqual(form.fields[\"username\"].widget.attrs[\"autofocus\"], True)\n            self.assertTrue(isinstance(form.fields[\"username\"], UsernameField))\n"], "sample_50": ["    def test_cookie_storage_max_size(self):\n        storage = self.get_storage()\n        messages = [Message(constants.DEBUG, get_random_string(100)) for _ in range(20)]\n        set_cookie_data(storage, messages)\n        response = self.client.get('/')\n        self.assertEqual(stored_cookie_messages_count(storage, response), CookieStorage.max_cookie_size // 100)\n"], "sample_4": ["    def test_getlist(self):\n        qd = QueryDict('a=1&a=2&b=3')\n        self.assertEqual(qd.getlist('a'), ['1', '2'])\n        self.assertEqual(qd.getlist('b'), ['3'])\n        self.assertEqual(qd.getlist('c'), [])\n"], "sample_158": ["    def test_get_dimensional_expr(self):\n        x = Symbol('x')\n        v = Symbol('v')\n        t = Symbol('t')\n        a = Symbol('a')\n        \n        expr = v*t + 0.5*a*t**2\n        dim = SI.get_dimensional_expr(expr)\n        assert dim == length / time\n\n        expr = v**2 / (2*a)\n        dim = SI.get_dimensional_expr(expr)\n        assert dim == length**2 / (time**2)\n\n        expr = sin(x)\n        dim = SI.get_dimensional_expr(expr)\n        assert dim == S.One\n\n        expr = exp(x)\n        dim = SI.get_dimensional_expr(expr)\n        assert dim == S.One\n\n        expr = log(x)\n        dim = SI.get_dimensional_expr(expr)\n        assert dim == S.One\n\n        expr = sqrt(x)\n        dim = SI.get_dimensional_expr(expr)\n        assert dim == sqrt(SI.get_quantity_dimension(x))\n\n"], "sample_96": ["    def test_ridgecv_sparse_input(self):\n        # Test RidgeCV with sparse input\n        X = sp.csr_matrix(np.random.randn(100, 10))\n        y = np.random.randn(100)\n        clf = RidgeCV(alphas=[0.1, 1.0, 10.0])\n        clf.fit(X, y)\n        assert_true(isinstance(clf.coef_, np.ndarray))\n        assert_equal(clf.coef_.shape, (10,))\n\n"], "sample_31": ["    def test_python_shell_with_startup_script(self):\n        with captured_stdout() as stdout, captured_stdin() as stdin, mock.patch('os.environ', {'PYTHONSTARTUP': 'print(\"Hello from PYTHONSTARTUP\")'}):\n            call_command('shell', no_startup=False)\n            self.assertIn('Hello from PYTHONSTARTUP', stdout.getvalue())\n"], "sample_19": ["    def test_callable_setting_wrapper_repr(self):\n        class MyCallable:\n                return 'MyCallable()'\n        wrapped_callable = CallableSettingWrapper(MyCallable())\n        self.assertEqual(repr(wrapped_callable), 'MyCallable()')\n"], "sample_16": ["    def test_nested_objects_with_circular_references(self):\n        self._connect(1, 0)\n        self._connect(2, 1)\n        self._connect(3, 2)\n        self._collect(0, 1, 2, 3)\n        target = [\n            [self.objs[0].num, [self.objs[1].num, [self.objs[2].num, [self.objs[3].num]]]],\n        ]\n        self._check(target)\n"], "sample_91": ["    def test_evaluate_skip_marks_skipif_condition_true(self):\n        item = runtestprotocol.Item.from_parent(None, name=\"test_func\")\n        item._store = {}\n        item.config = pytest.Config()\n        item.config.option = pytest.Option()\n        mark = pytest.mark.skipif(True)\n        item._add_marker(mark)\n        skip_result = evaluate_skip_marks(item)\n        assert skip_result is not None\n        assert skip_result.reason == \"condition: True\"\n"], "sample_117": ["    def test_restify_forwardref():\n        assert restify(ForwardRef('MyClass1')) == ':class:`MyClass1`'\n        assert restify(ForwardRef('MyClass2')) == ':class:`MyClass2`'\n"], "sample_23": ["    def test_union_with_subquery(self):\n        # Test union with a subquery that uses a different model\n        subquery = ReservedName.objects.filter(name__startswith='R').values('id')\n        union_queryset = Number.objects.filter(num__gt=5).union(subquery)\n        self.assertNumbersEqual(union_queryset, [\n            Number(num=6, other_num=4),\n            Number(num=7, other_num=3),\n            Number(num=8, other_num=2),\n            Number(num=9, other_num=1),\n        ])\n"], "sample_116": ["def test_indexentries_single(app, env):\n    env.get_domain('index').entries = {\n        'index.rst': [\n            ('single', 'entry', 'target', 'main', None),\n        ]\n    }\n    indexentries = IndexEntries(env)\n    index = indexentries.create_index(app.builder)\n    assert index == [\n        ('entry', [\n            ('main', app.builder.get_relative_uri('genindex', 'index.rst') + '#target'),\n        ]),\n    ]\n"], "sample_129": ["def test_latex_SingularityFunction():\n    assert latex(SingularityFunction(x, 0)) == '\\\\delta(x)'\n    assert latex(SingularityFunction(x, 1)) == '\\\\frac{d}{dx} \\\\delta(x)'\n    assert latex(SingularityFunction(x, 2)) == '\\\\frac{d^2}{dx^2} \\\\delta(x)'\n\n"], "sample_43": ["    def test_permission_denied_for_missing_search_fields(self):\n        with model_admin(Answer, AnswerAdmin, admin_site=site):\n            AnswerAdmin.get_search_fields = lambda *args: []\n            request = self.factory.get(self.url, {\n                'app_label': self.opts['app_label'],\n                'model_name': self.opts['model_name'],\n                'field_name': self.opts['field_name'],\n                'term': 'test',\n            })\n            request.user = self.user\n            with self.assertRaises(Http404):\n                AutocompleteJsonView.as_view(**self.as_view_args)(request)\n"], "sample_111": ["    def test_silhouette_score_empty_clusters():\n        # Test silhouette score with empty clusters\n        labels = np.array([0, 0, 1, 1, 2])\n        X = np.array([[1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6]])\n        with pytest.raises(ValueError):\n            silhouette_score(X, labels)\n"], "sample_97": ["    def test_label_binarize_multioutput_error(self):\n        y = np.array([[1, 2], [3, 4]])\n        assert_raises(ValueError, label_binarize, y, classes=[1, 2, 3, 4],\n                      multi_output='raw_values')\n"], "sample_47": ["    def test_migrate_unapplied_initial_migration(self):\n        \"\"\"\n        Test that an unapplied initial migration is correctly detected and applied.\n        \"\"\"\n        with self.connection.cursor() as cursor:\n            with mock.patch('django.db.migrations.executor.MigrationExecutor.detect_soft_applied',\n                            return_value=(True, ProjectState(real_apps={}))) as mock_detect_soft_applied:\n                self.migrate_and_assert_state(\n                    'migrations2',\n                    '0001_initial',\n                    expected_state={\n                        'migrations2': {\n                            'models': {\n                                'MyModel': {\n                                    'fields': [\n                                        ('id', models.AutoField(primary_key=True)),\n                                        ('name', models.CharField(max_length=100)),\n                                    ],\n                                },\n                            },\n                        },\n                    },\n                    fake_initial=True,\n                )\n                mock_detect_soft_applied.assert_called_once()\n"], "sample_128": ["def test_Options_clone():\n    opt = Options((x, y), {'domain': ZZ})\n    opt2 = opt.clone({'domain': QQ})\n\n    assert opt['domain'] == ZZ\n    assert opt2['domain'] == QQ\n"], "sample_131": ["    def test_print_Derivative(self):\n        self.assertEqual(mcode(Derivative(sin(x), x)), \"Hold[D[Sin[x], x]]\")\n        self.assertEqual(mcode(Derivative(sin(x), x, 2)), \"Hold[D[Sin[x], {x, 2}]]\")\n        self.assertEqual(mcode(Derivative(sin(x*y), x, y)), \"Hold[D[Sin[x*y], {x, y}]]\")\n"], "sample_29": ["    def test_expression_wrapper(self):\n        query = self.company_query.annotate(\n            double_employees=ExpressionWrapper(F('num_employees') * 2, output_field=IntegerField())\n        )\n        self.assertQuerysetEqual(\n            query, [\n                {'name': 'Example Inc.', 'num_employees': 2300, 'num_chairs': 5, 'double_employees': 4600},\n                {'name': 'Foobar Ltd.', 'num_employees': 3, 'num_chairs': 4, 'double_employees': 6},\n                {'name': 'Test GmbH', 'num_employees': 32, 'num_chairs': 1, 'double_employees': 64},\n            ],\n            transform=lambda x: {k: v for k, v in x.items() if k != 'id'}\n        )\n"], "sample_64": ["    def test_submit_row_tag(self):\n        request = self.request_factory.get(reverse('admin:myapp_article_change', args=(1,)))\n        request.user = self.user\n        context = {\n            'add': False,\n            'change': True,\n            'is_popup': False,\n            'save_as': False,\n            'has_add_permission': True,\n            'has_change_permission': True,\n            'has_view_permission': True,\n            'has_delete_permission': True,\n            'has_editable_inline_admin_formsets': False,\n        }\n        template = Template(\"{% load admin_modify %}{% submit_row %}\")\n        rendered = template.render(Context(context))\n        self.assertIn('id=\"save\"', rendered)\n        self.assertIn('id=\"delete\"', rendered)\n\n"], "sample_73": ["    def test_draggable_annotation(self):\n        fig, ax = plt.subplots()\n        x, y = 0.5, 0.5\n        ann = ax.annotate(\n            \"test\", xy=(x, y), xycoords=\"data\",\n            xytext=(10, 10), textcoords=\"offset points\",\n            arrowprops=dict(arrowstyle=\"->\"))\n        draggable_ann = DraggableAnnotation(ann)\n        # Simulate a click and drag event\n        event = MouseEvent(\n            'button_press_event', fig.canvas, x, y, button=MouseButton.LEFT\n        )\n        draggable_ann.on_pick(event)\n        event = MouseEvent(\n            'motion_notify_event', fig.canvas, x + 10, y + 10, button=MouseButton.LEFT\n        )\n        draggable_ann.on_motion(event)\n        event = MouseEvent(\n            'button_release_event', fig.canvas, x + 10, y + 10, button=MouseButton.LEFT\n        )\n        draggable_ann.on_release(event)\n        assert_allclose(ann.xyann, (x + 10, y + 10))\n"], "sample_10": ["    def test_year_lookups(self):\n        # Test year lookups with different operators.\n        self.assertQuerysetEqual(\n            Article.objects.filter(pub_date__year__exact=2005),\n            ['<Article: Article 1>', '<Article: Article 2>', '<Article: Article 3>', '<Article: Article 4>'],\n        )\n        self.assertQuerysetEqual(\n            Article.objects.filter(pub_date__year__gt=2004),\n            ['<Article: Article 1>', '<Article: Article 2>', '<Article: Article 3>', '<Article: Article 4>', '<Article: Article 5>', '<Article: Article 6>', '<Article: Article 7>'],\n        )\n        self.assertQuerysetEqual(\n            Article.objects.filter(pub_date__year__gte=2005),\n            ['<Article: Article 1>', '<Article: Article 2>', '<Article: Article 3>', '<Article: Article 4>', '<Article: Article 5>', '<Article: Article 6>', '<Article: Article 7>'],\n        )\n        self.assertQuerysetEqual(\n            Article.objects.filter(pub_date__year__lt=2006),\n            ['<Article: Article 1>', '<Article: Article 2>', '<Article: Article 3>', '<Article: Article 4>', '<Article: Article 5>', '<Article: Article 6>', '<Article: Article 7>'],\n        )\n        self.assertQuerysetEqual(\n            Article.objects.filter(pub_date__year__lte=2005),\n            ['<Article: Article 1>', '<Article: Article 2>', '<Article: Article 3>', '<Article: Article 4>'],\n        )\n"], "sample_51": ["    def test_serve_directory_index(self):\n        response = self.client.get('/media/test_dir/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'Index of test_dir/')\n        self.assertContains(response, '<a href=\"../\">../</a>')\n        for f in ['file1.txt', 'file2.jpg', 'subdir/']:\n            self.assertContains(response, f'<a href=\"{quote(f)}\">{f}</a>')\n"], "sample_148": ["def test_polar_lift_conjugate():\n    x = Symbol('x', real=True)\n    y = Symbol('y', real=True)\n    assert conjugate(polar_lift(x + I*y)) == polar_lift(x - I*y)\n"], "sample_80": ["    def test_format_timedelta_timedelta64(self):\n        t = np.timedelta64(10, 'D')\n        assert formatting.format_timedelta(t) == \"10 days\"\n        t = np.timedelta64(10, 'h')\n        assert formatting.format_timedelta(t, timedelta_format=\"time\") == \"10:00:00\"\n        t = np.timedelta64(10, 'D') + np.timedelta64(12, 'h')\n        assert formatting.format_timedelta(t, timedelta_format=\"datetime\") == \"10 days 12:00:00\"\n"], "sample_127": ["def test_latex_SingularityFunction():\n    assert latex(SingularityFunction(x, 0, 1)) == r\"\\operatorname{SingularityFunction}\\left(x, 0, 1\\right)\"\n"], "sample_98": ["    def test_check_consistent_length_pandas(self):\n        # Test check_consistent_length with pandas DataFrame\n        df = MockDataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\n        X = df[['col1']]\n        y = df[['col2']]\n        check_consistent_length(X, y)\n\n        y = np.array([1, 2])\n        with pytest.raises(ValueError):\n            check_consistent_length(X, y)\n"], "sample_57": ["    def test_formset_factory_absolute_max(self):\n        formset_class = formset_factory(\n            Choice,\n            max_num=5,\n            absolute_max=3,\n        )\n        formset = formset_class(data={\"choices-TOTAL_FORMS\": \"4\"})\n        self.assertEqual(formset.errors, [\n            ErrorList([ValidationError(\"Please submit at most 3 forms.\", code='too_many_forms')])\n        ])\n"], "sample_66": ["    def test_raw_id_fields_check(self):\n        class MyModelAdmin(ModelAdmin):\n            raw_id_fields = ('nonexistent_field',)\n\n        self.assertIsInvalid(\n            MyModelAdmin,\n            ValidationTestModel,\n            r\"The value of 'raw_id_fields' refers to 'nonexistent_field', which is not a field of 'ValidationTestModel'.\",\n            id=\"admin.E108\",\n        )\n"], "sample_119": ["    def test_mcode_derivative(self):\n        assert mcode(Derivative(sin(x), x)) == 'Hold[D[Sin[x], x]]'\n"], "sample_14": ["    def test_serialize_lazy_object(self):\n        lazy_obj = SimpleLazyObject(lambda: 'lazy value')\n        serialized, imports = serializer_factory(lazy_obj).serialize()\n        self.assertEqual(serialized, \"'lazy value'\")\n        self.assertEqual(imports, set())\n"], "sample_118": ["    def test_ccode_IndexedBase_with_MatrixSymbol(self):\n        i = Idx('i', 3)\n        A = MatrixSymbol('A', 3, 3)\n        expr = A[i, i]\n        code = ccode(expr, assign_to='B')\n        expected = 'B = A[i];'\n        self.assertEqual(code, expected)\n"], "sample_133": ["def test_codegen_indexed_output():\n    x, y = symbols('x y')\n    A = MatrixSymbol('A', 2, 2)\n    expr = Eq(A[0, 0], x*y)\n    routine = make_routine('test', expr)\n    code = get_string(CCodeGen().dump_c, [routine])\n    assert 'A[0]' in code\n    assert 'x*y' in code\n\n"], "sample_27": ["    def test_check_token_legacy_algorithm(self):\n        user = User.objects.create_user(username='testuser', password='password')\n        generator = MockedPasswordResetTokenGenerator(now=datetime(2023, 10, 26, 12, 0, 0))\n        token = generator.make_token(user)\n\n        # Simulate a scenario where settings.DEFAULT_HASHING_ALGORITHM is 'sha1'\n        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n            self.assertTrue(generator.check_token(user, token))\n\n        # Ensure the token is still valid even when using the legacy algorithm\n        self.assertTrue(generator.check_token(user, token))\n"], "sample_61": ["    def test_format_large_decimal_scientific_notation(self):\n        self.assertEqual(\n            nformat(Decimal(\"1.2345678901234567890123456789\"), decimal_sep=\",\", decimal_pos=3),\n            \"1,235\",\n        )\n"], "sample_112": ["    def test_out_of_bounds_clip(self):\n        # Test out_of_bounds='clip' behavior\n        X = np.array([1, 2, 3, 4, 5])\n        y = np.array([1, 2, 3, 4, 5])\n        iso_reg = IsotonicRegression(out_of_bounds='clip').fit(X, y)\n\n        # Test points within bounds\n        assert_allclose(iso_reg.predict([2.5, 3.5]), [3, 4])\n\n        # Test points outside bounds\n        assert_allclose(iso_reg.predict([0, 6]), [1, 5])\n"], "sample_70": ["    def test_get_bbox_to_anchor(self, loc, expected_bbox):\n        fig, ax = plt.subplots()\n        legend = ax.legend(loc=loc)\n        assert legend._bbox_to_anchor.bounds == expected_bbox\n"], "sample_153": ["def test_pretty_del():\n    assert pretty(Del) == '\u2207'\n    assert upretty(Del) == '\u2207'\n"], "sample_106": ["    def test_nca_warm_start(self):\n        nca = NeighborhoodComponentsAnalysis(n_components=2, init='pca',\n                                            random_state=rng, warm_start=True)\n        nca.fit(iris_data[:100], iris_target[:100])\n        nca.fit(iris_data, iris_target)\n        assert_equal(nca.components_.shape, (2, 4))\n"], "sample_79": ["    def test_concat_dataarray_different_coords():\n        # Test concatenating DataArrays with different coordinates\n        arr1 = DataArray(\n            np.arange(4).reshape(2, 2),\n            coords={\"x\": [0, 1], \"y\": [0, 1]},\n            dims=[\"x\", \"y\"],\n        )\n        arr2 = DataArray(\n            np.arange(4).reshape(2, 2),\n            coords={\"x\": [2, 3], \"y\": [0, 1]},\n            dims=[\"x\", \"y\"],\n        )\n\n        expected = DataArray(\n            np.arange(8).reshape(4, 2),\n            coords={\"x\": [0, 1, 2, 3], \"y\": [0, 1]},\n            dims=[\"x\", \"y\"],\n        )\n\n        actual = concat([arr1, arr2], dim=\"x\")\n        assert_identical(actual, expected)\n"], "sample_81": ["    def test_fixme_with_pragma(self):\n        stmts = _tokenize_str(\n            \"\"\"\n            # pylint: disable=fixme\n            # FIXME: This is a bug\n                pass\n            \"\"\"\n        )\n        with set_config(notes=(\"FIXME\",)):\n            self.checker.process_tokens(stmts)\n            self.assertMessageCount(0)\n"], "sample_126": ["def test_GoldenRatio_properties():\n    assert GoldenRatio.is_irrational is True\n    assert GoldenRatio.is_algebraic is True\n    assert GoldenRatio.is_transcendental is False\n    assert GoldenRatio > 1\n    assert GoldenRatio.expand(func=True) == 1/2 + sqrt(5)/2\n"], "sample_109": ["def test_shuffle_split_stratify_with_sparse_data():\n    # Test that ShuffleSplit with stratify works correctly with sparse data\n    X = coo_matrix([[1, 0], [0, 1], [1, 1], [0, 0]])\n    y = np.array([0, 1, 0, 1])\n    ss = ShuffleSplit(n_splits=5, test_size=0.25, random_state=42)\n    for train_index, test_index in ss.split(X, y):\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n        assert np.array_equal(np.unique(y_train), np.unique(y))\n        assert np.array_equal(np.unique(y_test), np.unique(y))\n"], "sample_42": ["    def test_serialize_lazy_object(self):\n        lazy_value = SimpleLazyObject(lambda: 'lazy')\n        serialized, imports = serializer_factory(lazy_value).serialize()\n        self.assertEqual(serialized, \"'lazy'\")\n        self.assertEqual(imports, set())\n"], "sample_151": ["def test_point3d_intersection():\n    p1 = Point3D(0, 0, 0)\n    p2 = Point3D(1, 1, 1)\n    p3 = Point3D(2, 2, 2)\n    assert p1.intersection(p2) == []\n    assert p1.intersection(p1) == [p1]\n    assert p1.intersection(p3) == []\n"], "sample_89": ["compilation error"], "sample_124": ["def test_acsch_eval():\n    x = Symbol('x')\n    assert acsch(S.Zero) == zoo\n    assert acsch(oo) == S.Zero\n    assert acsch(-oo) == S.Zero\n    assert acsch(S.One) == log(1 + sqrt(2))\n    assert acsch(-S.One) == -log(1 + sqrt(2))\n    assert acsch(I) == -I*pi/2\n    assert acsch(-2*I) == I*pi/6\n    assert acsch(I*(sqrt(6) - sqrt(2))) == -5*I*pi/12\n"], "sample_120": ["def test_MatrixElement_subs():\n    i, j = symbols('i j')\n    M = MatrixSymbol('M', 3, 3)\n    me = MatrixElement(M, i, j)\n    assert me.subs(i, 1) == MatrixElement(M, 1, j)\n    assert me.subs(j, 2) == MatrixElement(M, i, 2)\n    assert me.subs({i:1, j:2}) == MatrixElement(M, 1, 2)\n"], "sample_87": ["    def test_in_venv(self, tmpdir):\n        venv = tmpdir.mkdir(\"venv\")\n        venv.join(\"bin\").mkdir()\n        venv.join(\"Scripts\").mkdir()\n        assert _in_venv(venv)\n        assert not _in_venv(tmpdir)\n"], "sample_145": ["def test_latex_SetExpr():\n    S = FiniteSet(1, 2, 3)\n    assert latex(S) == '\\\\left\\{1, 2, 3\\\\right\\}'\n    S = ImageSet(Lambda(x, x**2), Interval(0, 1))\n    assert latex(S) == '\\\\left\\{x^{2} \\\\mid x \\\\in \\\\left[0, 1\\\\right]\\\\right\\}'\n    S = Complement(UniversalSet, S)\n    assert latex(S) == '\\\\mathbb{U} \\\\setminus \\\\left\\{x^{2} \\\\mid x \\\\in \\\\left[0, 1\\\\right]\\\\right\\}'\n    S = Union(S, FiniteSet(4, 5))\n    assert latex(S) == '\\\\left(\\\\mathbb{U} \\\\setminus \\\\left\\{x^{2} \\\\mid x \\\\in \\\\left[0, 1\\\\right]\\\\right\\}\\\\right) \\\\cup \\\\left\\{4, 5\\\\right\\}'\n    S = Intersection(S, Interval(2, 4))\n    assert latex(S) == '\\\\left(\\\\mathbb{U} \\\\setminus \\\\left\\{x^{2} \\\\mid x \\\\in \\\\left[0, 1\\\\right]\\\\right\\}\\\\right) \\\\cap \\\\left[2, 4\\\\right] \\\\cup \\\\left\\{4, 5\\\\right\\} \\\\cap \\\\left[2, 4\\\\right\\}'\n\n"], "sample_22": ["    def test_smart_split(self):\n        self.assertEqual(list(text.smart_split(r'This is \"a person\\'s\" test.')),\n                         ['This', 'is', '\"a person\\\\\\'s\"', 'test.'])\n        self.assertEqual(list(text.smart_split(r\"Another 'person\\'s' test.\")),\n                         ['Another', \"'person\\\\'s'\", 'test.'])\n        self.assertEqual(list(text.smart_split(r'A \"\\\"funky\\\" style\" test.')),\n                         ['A', '\"\\\\\"funky\\\\\" style\"', 'test.'])\n"], "sample_102": ["    def test_sparse_input(self):\n        # Test IsolationForest with sparse input\n        X_sparse = csc_matrix(boston.data)\n        clf = IsolationForest(random_state=rng).fit(X_sparse)\n        assert_array_equal(clf.predict(X_sparse), clf.predict(boston.data))\n"], "sample_7": ["    def test_iter_modules_and_files_zipfile(self):\n        with tempfile.TemporaryDirectory() as tempdir:\n            zip_path = Path(tempdir) / 'my_module.zip'\n            with zipfile.ZipFile(zip_path, 'w') as zf:\n                zf.writestr('my_module/__init__.py', '')\n            sys.path.append(str(tempdir))\n            self.import_and_cleanup('my_module')\n            self.assertFileFound(zip_path)\n"], "sample_49": ["    def test_template_changed_resets_loaders(self):\n        reset_loaders = mock.patch('django.template.autoreload.reset_loaders')\n        with reset_loaders as mock_reset_loaders:\n            file_path = EXTRA_TEMPLATES_DIR / 'test.html'\n            autoreload.template_changed(None, file_path)\n            mock_reset_loaders.assert_called_once()\n"], "sample_17": ["    def test_test_db_signature(self):\n        connection = get_connection_copy()\n        creation = BaseDatabaseCreation(connection)\n        original_settings = connection.settings_dict.copy()\n\n        # Test with default settings\n        signature = creation.test_db_signature()\n        self.assertEqual(\n            signature,\n            (original_settings['HOST'], original_settings['PORT'],\n             original_settings['ENGINE'],\n             TEST_DATABASE_PREFIX + original_settings['NAME']),\n        )\n\n        # Test with modified settings\n        connection.settings_dict['HOST'] = 'localhost'\n        connection.settings_dict['PORT'] = 5432\n        connection.settings_dict['NAME'] = 'test_db'\n        signature = creation.test_db_signature()\n        self.assertEqual(\n            signature,\n            ('localhost', 5432, original_settings['ENGINE'],\n             TEST_DATABASE_PREFIX + 'test_db'),\n        )\n"], "sample_25": ["    def test_rename_field_with_default(self):\n        before = [\n            self.author_name,\n        ]\n        after = [\n            self.author_name_renamed,\n        ]\n        changes = self.get_changes(before, after)\n        self.assertNumberMigrations(changes, 'testapp', 1)\n        self.assertOperationTypes(changes, 'testapp', 0, ['RenameField'])\n        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='name', old_name='name_old')\n\n"], "sample_67": ["    def test_serialize_enum_flag(self):\n        class MyIntFlagEnum(enum.IntFlag):\n            A = 1\n            B = 2\n            C = 4\n\n        value = MyIntFlagEnum.A | MyIntFlagEnum.B\n        serialized, imports = serializer_factory(value).serialize()\n        self.assertEqual(serialized, 'MyIntFlagEnum[A] | MyIntFlagEnum[B]')\n        self.assertEqual(imports, {'import enum'})\n"], "sample_76": ["    def test_polyfit(self, df):\n\n        df[\"x\"] = np.linspace(0, 10, len(df))\n        df[\"y\"] = df[\"x\"]**2 + np.random.normal(0, 1, len(df))\n\n        groupby = GroupBy(df, \"group\")\n        result = PolyFit(order=2)(groupby, \"group\", \"x\", {})\n\n        assert isinstance(result, pd.DataFrame)\n        assert \"x\" in result.columns\n        assert \"y\" in result.columns\n"], "sample_32": ["    def test_key_transform_isnull_with_null_key(self):\n        model = JSONModel.objects.create(data={'key': None})\n        self.assertTrue(JSONModel.objects.filter(data__key__isnull=True).exists())\n        self.assertFalse(JSONModel.objects.filter(data__key__isnull=False).exists())\n"], "sample_56": ["    def test_check_setting_app_dirs_loaders(self):\n        errors = check_setting_app_dirs_loaders(None, **{})\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Error)\n        self.assertEqual(errors[0].id, E001.id)\n"], "sample_40": ["    def test_boundfield_label_tag_with_label_suffix(self):\n        form = PersonNew({'first_name': 'John', 'last_name': 'Doe'})\n        bound_field = form['first_name']\n        label_tag = bound_field.label_tag(label_suffix='*')\n        self.assertIn('John*', label_tag)\n"], "sample_149": ["def test_Monomial_as_expr():\n    m = Monomial((1, 2, 3), gens=[x, y, z])\n    assert m.as_expr() == x*y**2*z**3\n    assert m.as_expr(x, z, y) == x*z**3*y**2\n    assert Monomial((1,)).as_expr() == x\n    assert Monomial((0,)).as_expr() == 1\n"], "sample_135": ["def test_basic_equality():\n    assert b1 != b2\n    assert b2 == b21\n    assert b2 != b3\n    assert b1 == Basic()\n    assert b2 == Basic(Basic(), Basic())\n"], "sample_132": ["def test_farthest_points():\n    p1, p2, p3 = Point(0, 0), Point(1, 0), Point(0, 1)\n    assert farthest_points(p1, p2, p3) == {(p1, p3)}\n    p4 = Point(2, 2)\n    assert farthest_points(p1, p2, p3, p4) == {(p1, p4)}\n    assert farthest_points(p1, p2, p3, p4, Point(0, 2)) == {(p1, p4)}\n    p5 = Point(1, 1)\n    assert farthest_points(p1, p2, p3, p4, p5) == {(p1, p4)}\n"], "sample_34": ["    def test_duplicate_db_table_names(self):\n        with self.assertRaisesMessage(\n            ValueError,\n            \"Duplicate table name 'test_duplicatetable' found in app 'check_framework'.\"\n        ):\n            class DuplicateTable(models.Model):\n                name = models.CharField(max_length=100)\n\n            class AnotherDuplicateTable(models.Model):\n                name = models.CharField(max_length=100)\n"], "sample_39": ["compilation error"], "sample_115": ["    def test_wrap_in_pandas_container_sparse_input():\n        with pytest.raises(ValueError, match=\"Pandas output does not support sparse data.\"):\n            _wrap_in_pandas_container(csr_matrix((2, 2)), columns=[0, 1])\n"], "sample_37": ["    def test_filtered_relation_as_sql(self):\n        with CaptureQueriesContext(connection) as captured_queries:\n            filtered_relation = FilteredRelation('employees', condition=Q(salary__gt=10))\n            query = Company.objects.annotate(\n                filtered_employees=Count(\n                    'employees__filtered_relation',\n                    filter=filtered_relation,\n                )\n            )\n            list(query)\n        sql = captured_queries[0]['sql']\n        self.assertIn('WHERE \"employees\".\"salary\" > 10', sql)\n"], "sample_147": ["def test_expand_power_base_noncommutative():\n    x, y = noncomm_x, noncomm_x\n    assert expand_power_base((x*y)**2) == x**2*y**2\n    assert expand_power_base((x*y)**3) == x**3*y**3\n    assert expand_power_base((x*y)**(-2)) == x**(-2)*y**(-2)\n"], "sample_65": ["    def test_join_with_empty_list(self):\n        self.assertEqual(self.engine.render('join01', {'a': []}), '')\n"], "sample_15": ["    def test_check_setting_language_code_invalid(self):\n        for tag in self.invalid_tags:\n            with override_settings(LANGUAGE_CODE=tag):\n                errors = check_setting_language_code(None, **{})\n                self.assertEqual(len(errors), 1)\n                self.assertIsInstance(errors[0], Error)\n"], "sample_107": ["    def test_logistic_regression_cv_multiclass_ovr_sparse_input(self):\n        # Test LogisticRegressionCV with sparse input and multiclass\n        # classification using 'ovr' strategy\n        X = sp.csr_matrix(iris.data)\n        y = iris.target\n        clf = LogisticRegressionCV(cv=5, solver='lbfgs', multi_class='ovr')\n        clf.fit(X, y)\n        check_predictions(clf, X, y)\n"], "sample_54": ["    def test_urlize_nofollow(self):\n        self.check_output(\n            urlize,\n            \"Visit <a href='http://www.example.com'>example.com</a>.\",\n            \"Visit <a href='http://www.example.com'>example.com</a>.\",\n        )\n        self.check_output(\n            urlize,\n            \"Visit <a href='http://www.example.com'>example.com</a>.\",\n            \"Visit <a href='http://www.example.com' rel='nofollow'>example.com</a>.\",\n            nofollow=True,\n        )\n"], "sample_82": ["def test_groupby_apply_with_empty_groups(array):\n    # create a groupby object with some empty groups\n    group_array = array.groupby(\"x\").apply(lambda x: x.where(x > 0))\n    # check that the resulting array has the correct shape and values\n    assert_equal(group_array.shape, (3, 4, 2))\n    assert_allclose(group_array.sel(x=\"a\"), array.sel(x=\"a\").where(array.sel(x=\"a\") > 0))\n"], "sample_114": ["    def test_type_of_target_multilabel_sequences(self):\n        for y in MULTILABEL_SEQUENCES:\n            assert type_of_target(y) == \"multilabel-indicator\"\n"], "sample_18": ["    def test_m2m_through_fields_validation_with_invalid_field_names(self):\n        class Author(models.Model):\n            name = models.CharField(max_length=100)\n\n        class Book(models.Model):\n            title = models.CharField(max_length=100)\n            authors = models.ManyToManyField(Author, through='BookAuthor', through_fields=('book', 'invalid_field'))\n\n        class BookAuthor(models.Model):\n            book = models.ForeignKey(Book, on_delete=models.CASCADE)\n            author = models.ForeignKey(Author, on_delete=models.CASCADE)\n\n        with self.assertRaisesMessage(\n            checks.Error,\n            \"The intermediary model 'BookAuthor' has no field 'invalid_field'.\"\n        ):\n            Book.check()\n"], "sample_113": ["    def test_column_transformer_sparse_output_threshold(self):\n        X = np.array([[1, 2], [3, 4]])\n        transformer = ColumnTransformer(\n            transformers=[\n                (\"trans1\", Trans(), [0]),\n                (\"trans2\", SparseMatrixTrans(), [1]),\n            ],\n            sparse_threshold=0.5,\n        )\n        Xt = transformer.fit_transform(X)\n        assert isinstance(Xt, sparse.csr_matrix)\n        assert Xt.shape == (2, 2)\n\n        transformer = ColumnTransformer(\n            transformers=[\n                (\"trans1\", Trans(), [0]),\n                (\"trans2\", SparseMatrixTrans(), [1]),\n            ],\n            sparse_threshold=0.2,\n        )\n        Xt = transformer.fit_transform(X)\n        assert isinstance(Xt, np.ndarray)\n        assert Xt.shape == (2, 2)\n"], "sample_85": ["    def test_log_capture_handler_records_log_messages(\n        caplog, tmpdir"], "sample_35": ["    def test_modelmultiplechoicefield_invalid_pk(self):\n        class MyForm(Form):\n            choices = ModelMultipleChoiceField(ChoiceModel.objects.all())\n\n        form = MyForm({'choices': ['1000']})\n        self.assertFormErrors(\n            [\n                '\u201c1000\u201d is not a valid value.'\n            ],\n            form.clean,\n        )\n"], "sample_157": ["    def test_tensorproduct_simp_trace(self):\n        A = Matrix([[1, 2], [3, 4]])\n        B = Matrix([[5, 6], [7, 8]])\n        tp = TensorProduct(A, B)\n        self.assertEqual(Tr(tp), Tr(A)*Tr(B))\n        self.assertEqual(Tr(tp, indices=[0]), Tr(A)*B[0,0] + Tr(A)*B[1,1])\n"], "sample_136": ["def test_blockcut():\n    M = ImmutableMatrix(4, 4, range(16))\n    B = blockcut(M, (1, 3), (1, 3))\n    assert isinstance(B, BlockMatrix)\n    assert ImmutableMatrix(B.blocks[0, 1]) == ImmutableMatrix([[1, 2, 3]])\n"], "sample_90": ["    def test_mark_evaluator_istrue_with_condition_and_reason(self, mark_generator):\n        mark = mark_generator(\"condition=1==1 reason='this is the reason'\")\n        item = mock.Mock(spec=Node)\n        item.config = mock.Mock()\n        item.obj = mock.Mock()\n        item.obj.__globals__ = {}\n        item.iter_markers.return_value = [mark]\n        evaluator = MarkEvaluator(item, \"mark\")\n        assert evaluator.istrue()\n        assert evaluator.reason == \"this is the reason\"\n        assert evaluator.expr == \"1==1\"\n"], "sample_26": ["    def test_test_db_signature(self):\n        connection = get_connection_copy()\n        creation = BaseDatabaseCreation(connection)\n        original_settings = connection.settings_dict.copy()\n        signature = creation.test_db_signature()\n        self.assertEqual(len(signature), 4)\n        self.assertIn(original_settings['HOST'], signature)\n        self.assertIn(original_settings['PORT'], signature)\n        self.assertIn(original_settings['ENGINE'], signature)\n        self.assertIn(TEST_DATABASE_PREFIX + original_settings['NAME'], signature)\n"], "sample_104": ["    def test_estimator_pretty_printer_n_max_elements_to_show(self):\n        set_config(print_changed_only=False)\n        lr = LogisticRegression(penalty='l2', dual=False, tol=1e-4, C=1.0,\n                               fit_intercept=True, intercept_scaling=1,\n                               class_weight=None, random_state=None,\n                               solver='warn', max_iter=100,\n                               multi_class='warn', verbose=0, warm_start=False,\n                               n_jobs=None, l1_ratio=None)\n        pipe = make_pipeline(StandardScaler(), SelectKBest(chi2, k=10), lr)\n        pipe.fit(np.random.rand(100, 20), np.random.randint(0, 2, 100))\n\n        # Test with n_max_elements_to_show\n        pp = _EstimatorPrettyPrinter(n_max_elements_to_show=5)\n        expected = (\n            \"Pipeline(steps=[('standardscaler', StandardScaler()), \"\n            \"('selectkbest', SelectKBest(k=10, score_func=<function chi2 at \"\n            \"0x...>, ...)), ('logisticregression', LogisticRegression(C=1.0, \"\n            \"class_weight=None, dual=False, fit_intercept=True, ...))], \"\n            \"verbose=False)\"\n        )\n        self.assertEqual(pp.pformat(pipe), expected)\n\n"], "sample_154": ["def test_lambdify_tensorflow_sparse_matrix():\n    from sympy.matrices import SparseMatrix\n    A = SparseMatrix([[1, 0], [0, 1]])\n    f = lambdify(x, A*x, 'tensorflow')\n    assert f(tensorflow.constant([1, 2])).numpy().tolist() == [1, 2]\n"], "sample_45": ["    def test_method_decorator_with_class_and_name(self):\n        class MyClass:\n            @method_decorator(staff_member_required, name='my_method')\n                return HttpResponse('OK')\n\n        instance = MyClass()\n        response = instance.my_method(HttpRequest())\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.content, b'OK')\n"], "sample_134": ["    def test_codegen_array_diagonal(self):\n        x = MatrixSymbol('x', 3, 3)\n        expr = CodegenArrayDiagonal(x, (0, 1))\n        printer = NumPyPrinter()\n        code = printer.doprint(expr)\n        assert code == 'numpy.diagonal(x, 0, axis1=0, axis2=1)'\n"], "sample_92": ["    def test_evaluate_skip_marks_skipif_condition_true(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.mark.skipif(sys.platform == 'win32')\n                assert True\n        \"\"\"\n        )\n        result = testdir.runpytest()\n        result.assert_outcomes(skipped=1)\n"], "sample_72": ["    def test_tight_layout_rect(self):\n        fig, ax = plt.subplots()\n        ax.plot([1, 2, 3], [4, 5, 6])\n        fig.tight_layout(rect=[0.1, 0.1, 0.9, 0.9])\n        assert fig.bbox_inches.x0 == 0.1\n        assert fig.bbox_inches.y0 == 0.1\n        assert fig.bbox_inches.x1 == 0.9\n        assert fig.bbox_inches.y1 == 0.9\n"], "sample_86": ["    def test_junitxml_with_custom_properties(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.parametrize(\"i\", range(2))\n                record_property(\"example_key\", i)\n                assert True\n        \"\"\"\n        )\n        result, dom = runandparse(testdir)\n        testcase = dom.find_first_by_tag(\"testcase\")\n        properties = testcase.find_by_tag(\"properties\")[0]\n        assert properties.find_by_tag(\"property\")[0].text == \"0\"\n        assert properties.find_by_tag(\"property\")[1].text == \"1\"\n"], "sample_155": ["    def test_get_dimensional_expr(self):\n        x = Symbol('x')\n        y = Symbol('y')\n        t = Symbol('t')\n        v = Symbol('v')\n        a = Symbol('a')\n\n        expr = 2*x*y**2*t**(-1)*v**3\n        expected_dim = length*length/time\n        assert SI.get_dimensional_expr(expr) == expected_dim\n\n        expr = 2*x*y**2*t**(-1)*v**3*a\n        expected_dim = length*length/time*acceleration\n        assert SI.get_dimensional_expr(expr) == expected_dim\n\n        expr = 2*x*y**2*t**(-1)*v**3/a\n        expected_dim = length*length/(time*acceleration)\n        assert SI.get_dimensional_expr(expr) == expected_dim\n\n        expr = sin(x*t)\n        assert SI.get_dimensional_expr(expr) == S.One\n\n        expr = exp(x*t)\n        assert SI.get_dimensional_expr(expr) == S.One\n\n        expr = log(x*t)\n        assert SI.get_dimensional_expr(expr) == S.One\n\n        expr = sqrt(x*t)\n        assert SI.get_dimensional_expr(expr) == sqrt(length*time)\n\n        expr = diff(x*t**2, t)\n        assert SI.get_dimensional_expr(expr) == length/time\n\n        expr = integrate(x*t**2, t)\n        assert SI.get_dimensional_expr(expr) == length*time**2\n\n"], "sample_103": ["    def test_mutual_info_classif_sparse_data():\n        rng = check_random_state(0)\n        n_samples = 100\n        n_features = 5\n\n        X = csr_matrix(rng.randint(0, 2, size=(n_samples, n_features)))\n        y = rng.randint(0, 2, size=n_samples)\n\n        mi = mutual_info_classif(X, y)\n        assert_equal(mi.shape, (n_features,))\n        assert_greater(np.sum(mi), 0)\n"], "sample_0": ["    def test_required_field_renders_empty_option(self):\n        form = RequiredBandForm()\n        self.assertHTMLEqual(\n            str(form['band']),\n            f'<select name=\"band\" id=\"id_band\" class=\"autocomplete-select\" required>'\n            f'{self.empty_option}'\n            f'</select>',\n        )\n\n"], "sample_121": ["def test_from_inversion_vector():\n    assert Permutation.from_inversion_vector([3, 2, 1, 0, 0]).array_form == [3, 2, 1, 0, 4]\n    assert Permutation.from_inversion_vector([0, 0, 1, 1, 2]).array_form == [0, 1, 2, 3, 4]\n    raises(ValueError, lambda: Permutation.from_inversion_vector([4, 0, 1, 2, 3]))\n"], "sample_130": ["def test_lambdify_tensorflow_piecewise():\n    if not tensorflow:\n        skip(\"Tensorflow is not installed\")\n    f = Piecewise((x, x < 0), (x**2, x >= 0))\n    f_tf = lambdify(x, f, 'tensorflow')\n    assert f_tf(-1).numpy() == -1\n    assert f_tf(1).numpy() == 1\n"], "sample_13": ["    def test_urlencode_multivaluedict(self):\n        data = MultiValueDict({'a': ['1', '2'], 'b': '3'})\n        self.assertEqual(urlencode(data), 'a=1&a=2&b=3')\n"], "sample_8": ["    def test_callable_setting_wrapper(self):\n        wrapped_callable = CallableSettingWrapper(lambda: 'test')\n        self.assertEqual(str(wrapped_callable), '<function <lambda> at 0x...> ')\n        self.assertTrue(callable(wrapped_callable))\n        self.assertEqual(wrapped_callable(), 'test')\n"], "sample_12": ["    def test_rename_field_with_default(self):\n        before = [\n            self.author_name,\n        ]\n        after = [\n            self.author_name_renamed,\n        ]\n        changes = self.get_changes(before, after)\n        self.assertNumberMigrations(changes, 'testapp', 1)\n        self.assertOperationTypes(changes, 'testapp', 0, ['RenameField'])\n        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='name', old_name='name_old')\n\n"], "sample_30": ["    def test_inline_formset_extra(self):\n        request = self.factory.get('/admin/admin_inlines/holder/')\n        request.user = self.superuser\n        view = admin_site.get_view('admin_inlines.HolderAdmin', 'change')\n        response = view(request, object_id=self.holder.id)\n        self.assertInHTML('<input type=\"hidden\" name=\"form-TOTAL_FORMS\" value=\"2\">', response.content.decode())\n\n"], "sample_138": ["    def test_blockcut():\n        M = ImmutableMatrix(4, 4, range(16))\n        B = blockcut(M, (1, 3), (1, 3))\n        assert isinstance(B, BlockMatrix)\n        assert ImmutableMatrix(B.blocks[0, 1]) == ImmutableMatrix([[1, 2, 3]])\n"], "sample_110": ["    def test_affinity_propagation_precomputed_equal_similarities():\n        # Test affinity propagation with precomputed similarities\n        # and equal similarities and preferences.\n\n        S = np.ones((5, 5))\n        preference = 0.5\n\n        # Check if the function correctly identifies a single cluster\n        # when preference is smaller than similarities\n        labels = affinity_propagation(S, preference=preference,\n                                      return_n_iter=False)[1]\n        assert_array_equal(labels, np.zeros(5))\n\n        # Check if the function correctly identifies each sample as its own\n        # cluster when preference is larger than similarities\n        preference = 1.5\n        labels = affinity_propagation(S, preference=preference,\n                                      return_n_iter=False)[1]\n        assert_array_equal(labels, np.arange(5))\n\n"], "sample_46": ["    def test_table_references_table(self):\n        self.assertTrue(self.reference.references_table('TABLE'))\n        self.assertFalse(self.reference.references_table('other_table'))\n"], "sample_137": ["def test_permute_signs():\n    assert list(permute_signs((0, 1, 2))) == [(0, 1, 2), (0, -1, 2), (0, 1, -2), (0, -1, -2)]\n    assert list(permute_signs((1, 2, 3))) == [(1, 2, 3), (-1, 2, 3), (1, -2, 3), (1, 2, -3), (-1, -2, 3), (-1, 2, -3), (1, -2, -3), (-1, -2, -3)]\n"], "sample_44": ["    def test_modelchoicefield_empty_label(self):\n        class CategoryForm(forms.Form):\n            category = forms.ModelChoiceField(Category.objects.all(), empty_label='Select a category')\n\n        form = CategoryForm()\n        self.assertEqual(form.fields['category'].choices[0][0], '')\n        self.assertEqual(form.fields['category'].choices[0][1], 'Select a category')\n"], "sample_84": ["    def test_fixture_lookup_error(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n\n            @pytest.fixture\n                return 42\n\n                assert bar == 42\n        \"\"\"\n        )\n        result = testdir.runpytest()\n        result.assert_outcomes(failed=1)\n        assert \"fixture 'bar' not found\" in result.stdout.str()\n"], "sample_144": ["    def test_refine_Pow_complex_base():\n        x = Symbol('x', real=True)\n        y = Symbol('y', real=True)\n        assert refine(Pow(2*I, x), Q.real(x)) == (2*I)**x\n        assert refine(Pow(2*I, x), Q.imaginary(x)) == (2*I)**x\n        assert refine(Pow(2*I, x + y), Q.real(x) & Q.imaginary(y)) == (2*I)**(x + y)\n        assert refine(Pow(2*I, x + y), Q.imaginary(x) & Q.real(y)) == (2*I)**(x + y)\n"], "sample_58": ["    def test_settings_to_cmd_args_env_with_ssl_options(self):\n        settings_dict = {\n            \"HOST\": \"localhost\",\n            \"PORT\": 5432,\n            \"NAME\": \"mydatabase\",\n            \"USER\": \"myuser\",\n            \"PASSWORD\": \"mypassword\",\n            \"OPTIONS\": {\n                \"sslmode\": \"require\",\n                \"sslrootcert\": \"/path/to/rootcert.pem\",\n                \"sslcert\": \"/path/to/cert.pem\",\n                \"sslkey\": \"/path/to/key.pem\",\n            },\n        }\n        args, env = self.settings_to_cmd_args_env(settings_dict)\n        self.assertEqual(\n            args,\n            [\n                \"psql\",\n                \"-U\",\n                \"myuser\",\n                \"-h\",\n                \"localhost\",\n                \"-p\",\n                \"5432\",\n                \"mydatabase\",\n            ],\n        )\n        self.assertEqual(\n            env,\n            {\n                \"PGPASSWORD\": \"mypassword\",\n                \"PGSSLMODE\": \"require\",\n                \"PGSSLROOTCERT\": \"/path/to/rootcert.pem\",\n                \"PGSSLCERT\": \"/path/to/cert.pem\",\n                \"PGSSLKEY\": \"/path/to/key.pem\",\n            },\n        )\n"], "sample_94": ["    def test_getstatementrange_ast_empty_lines():\n        source = Source(\n            \"\"\""], "sample_5": ["    def test_cascade_delete_with_transaction_rollback(self):\n        # Create some objects with cascading relationships.\n        parent = Parent.objects.create(name='Parent')\n        child1 = Child.objects.create(parent=parent, name='Child 1')\n        child2 = Child.objects.create(parent=parent, name='Child 2')\n\n        # Start a transaction.\n        with transaction.atomic():\n            # Delete the parent object. This should cascade to the children.\n            parent.delete()\n\n            # Rollback the transaction.\n            transaction.rollback()\n\n        # Check that the parent and children still exist.\n        self.assertEqual(Parent.objects.count(), 1)\n        self.assertEqual(Child.objects.count(), 2)\n"], "sample_75": ["    def test_grid_label_mode(self, nrows, ncols, ngrids, direction, label_mode):\n        fig, axs = plt.subplots(nrows=nrows, ncols=ncols)\n        grid = Grid(fig, 111, (nrows, ncols), ngrids=ngrids,\n                    direction=direction, label_mode=label_mode)\n        for ax in grid.axes_all:\n            ax.tick_params(axis='both', which='major', length=5)\n        fig.canvas.draw()\n        for ax in grid.axes_all:\n            if label_mode == \"L\":\n                if ax.is_last_row() and not ax.is_first_col():\n                    assert ax.xaxis.get_ticklabels()[0].get_visible()\n                elif ax.is_first_col() and not ax.is_last_row():\n                    assert ax.yaxis.get_ticklabels()[0].get_visible()\n                else:\n                    assert not ax.xaxis.get_ticklabels()[0].get_visible()\n                    assert not ax.yaxis.get_ticklabels()[0].get_visible()\n            elif label_mode == \"1\":\n                if ax.is_first_row() and ax.is_first_col():\n                    assert ax.xaxis.get_ticklabels()[0].get_visible()\n                    assert ax.yaxis.get_ticklabels()[0].get_visible()\n                else:\n                    assert not ax.xaxis.get_ticklabels()[0].get_visible()\n                    assert not ax.yaxis.get_ticklabels()[0].get_visible()\n            elif label_mode == \"all\":\n                assert ax.xaxis.get_ticklabels()[0].get_visible()\n                assert"], "sample_60": ["    def test_serialize_enum_flag(self):\n        with self.settings(INSTALLED_APPS=['custom_migration_operations']):\n            operation = migrations.CreateModel(\n                name='TestModel',\n                fields=[\n                    models.IntegerField(\n                        choices=[(IntFlagEnum.A | IntFlagEnum.B, 'Both')],\n                        default=IntFlagEnum.A,\n                    ),\n                ],\n            )\n            writer = OperationWriter(operation)\n            self.assertEqual(\n                writer.serialize(),\n                (\n                    'migrations.CreateModel(\\n'\n                    '    name=\\'TestModel\\',\\n'\n                    '    fields=[(\\n'\n                    '        models.IntegerField(\\n'\n                    '            choices=[(IntFlagEnum.A | IntFlagEnum.B, \\'Both\\')], \\n'\n                    '            default=IntFlagEnum.A,\\n'\n                    '        ),\\n'\n                    '    )],\\n'\n                    ')'\n                ),\n                set(),\n            )\n\n"], "sample_74": ["    def test_colorbar_extension_shape_vertical(self):\n        fig = _colorbar_extension_shape('proportional')\n        for i in range(4):\n            ax = fig.axes[i]\n            cb = ax.collections[0]\n            # Check that the colorbar extensions have the correct shape.\n            assert cb.ax.get_position().width == cb.ax.get_position().height\n            assert cb.ax.get_position().height == cb.ax.get_position().height\n\n"], "sample_2": ["    def test_maps_read(self):\n        for filename in self._file_list:\n            with open(filename, 'r') as f:\n                header = fits.Header.fromstring(f.read())\n            wcs = wcs.WCS(header)\n            assert wcs.is_celestial\n"], "sample_139": ["    def test_polarify_subs():\n        x, y = symbols('x y')\n        expr = x**y\n        res, subs = polarify(expr, subs=True)\n        assert res == _x**_y\n        assert subs == {_x: x, _y: y}\n"], "sample_59": ["    def test_formset_factory_absolute_max(self):\n        formset_class = formset_factory(\n            Choice,\n            max_num=5,\n            absolute_max=3,\n        )\n        formset = formset_class(data={\n            \"choices-TOTAL_FORMS\": \"4\",\n            \"choices-INITIAL_FORMS\": \"0\",\n            \"choices-0-choice\": \"Choice 1\",\n            \"choices-0-votes\": \"1\",\n            \"choices-1-choice\": \"Choice 2\",\n            \"choices-1-votes\": \"2\",\n            \"choices-2-choice\": \"Choice 3\",\n            \"choices-2-votes\": \"3\",\n            \"choices-3-choice\": \"Choice 4\",\n            \"choices-3-votes\": \"4\",\n        })\n        self.assertFalse(formset.is_valid())\n        self.assertEqual(formset.errors, [\n            [{'choice': ['This field is required.']}],\n            [{'votes': ['This field is required.']}],\n            [{'choice': ['This field is required.']}],\n            [{'votes': ['This field is required.']}],\n        ])\n        self.assertEqual(formset.non_form_errors(), ErrorList([\n            ValidationError(\"Please submit at most 3 forms.\", code='too_many_forms'),\n        ]))\n"], "sample_48": ["    def test_alter_field_with_related_model(self):\n        with atomic(using=self.database):\n            # Create a model with a related field\n            class Author(models.Model):\n                name = models.CharField(max_length=100)\n\n            class Book(models.Model):\n                title = models.CharField(max_length=100)\n                author = models.ForeignKey(Author, on_delete=models.CASCADE)\n\n            # Create some data\n            author = Author.objects.create(name='John Doe')\n            Book.objects.create(title='The Hitchhiker\\'s Guide to the Galaxy', author=author)\n\n            # Get the initial state\n            state = ProjectState.from_apps(self.apps)\n\n            # Create a migration that alters the related field\n            migration = Migration(\n                'test_alter_field_with_related_model',\n                [\n                    AlterField(\n                        model_name='book',\n                        name='author',\n                        field=models.ForeignKey(Author, on_delete=models.SET_NULL, null=True),\n                    ),\n                ],\n            )\n\n            # Apply the migration\n            with connection.schema_editor() as schema_editor:\n                migration.apply(schema_editor, state)\n\n            # Check that the database schema has been updated\n            with CaptureQueriesContext(connection) as captured_queries:\n                Book.objects.get(title='The Hitchhiker\\'s Guide to the Galaxy')\n            self.assertQuerySetEqual(\n                captured_queries.captured_queries,\n                [\n                    'SELECT \"book\".\"id\", \"book\".\"title\", \"book\".\"author_id\" FROM \"book\"',\n                ],\n            )\n\n            # Rollback the migration\n            with connection.schema_editor() as schema_editor:\n                migration.unapply(schema_editor, state)\n\n            # Check that the database schema has been rolled back\n            with CaptureQueriesContext(connection) as captured_queries:\n                Book.objects.get(title='The Hitchhiker\\'s Guide to the Galaxy')\n            self.assertQuerySetEqual(\n                captured_queries.captured_queries,\n                [\n                    'SELECT"], "sample_68": ["    def test_bulk_create_with_related_objects(self):\n        pizzeria = Pizzeria(name=\"Pizza Place\")\n        pizzeria.save()\n        restaurants = [\n            Restaurant(name=\"Restaurant 1\", pizzeria=pizzeria),\n            Restaurant(name=\"Restaurant 2\", pizzeria=pizzeria),\n        ]\n        Restaurant.objects.bulk_create(restaurants)\n        self.assertEqual(Restaurant.objects.count(), 2)\n        self.assertEqual(Restaurant.objects.filter(pizzeria=pizzeria).count(), 2)\n"], "sample_21": ["    def test_fast_delete_with_related_objects(self):\n        # Create a parent object with a child object.\n        p = Parent.objects.create()\n        c = Child.objects.create(parent=p)\n\n        # Delete the parent object using a Collector.\n        collector = Collector(using='default')\n        collector.collect([p])\n        collector.delete()\n\n        # Assert that the child object is also deleted.\n        self.assertFalse(Child.objects.filter(pk=c.pk).exists())\n"], "sample_146": ["def test_print_NDimArray():\n    a = NDimArray([1, 2, 3], shape=(3,))\n    assert sstr(a) == 'NDimArray([1, 2, 3], shape=(3,))'\n"], "sample_140": ["    def test_set_vel_and_vel(self):\n        N = ReferenceFrame('N')\n        p1 = Point('p1')\n        p1.set_vel(N, 10 * N.x)\n        assert p1.vel(N) == 10 * N.x\n"], "sample_62": ["    def test_file_based_cache_cull(self):\n        cache = caches['default']\n        self.assertEqual(cache.get('key1'), None)\n        cache.set('key1', 'value1')\n        cache.set('key2', 'value2')\n        cache.set('key3', 'value3')\n        cache.set('key4', 'value4')\n        cache._max_entries = 3\n        cache._cull_frequency = 2\n        cache.set('key5', 'value5')\n        self.assertEqual(cache.get('key1'), None)\n        self.assertEqual(cache.get('key2'), 'value2')\n        self.assertEqual(cache.get('key3'), 'value3')\n        self.assertEqual(cache.get('key4'), 'value4')\n        self.assertEqual(cache.get('key5'), 'value5')\n"], "sample_142": ["def test_permute_signs():\n    assert list(permute_signs((0, 1, 2))) == [(0, 1, 2), (0, -1, 2), (0, 1, -2), (0, -1, -2)]\n    assert list(permute_signs((1, 2, 3))) == [(1, 2, 3), (-1, 2, 3), (1, -2, 3), (1, 2, -3), (-1, -2, 3), (-1, 2, -3), (1, -2, -3), (-1, -2, -3)]\n"], "sample_69": ["    def test_getp_setp():\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [4, 5, 6])\n\n        # Test getp\n        assert getp(line, 'color') == line.get_color()\n        assert getp(line, 'linewidth') == line.get_linewidth()\n\n        # Test setp with single property\n        setp(line, color='red')\n        assert getp(line, 'color') == 'red'\n\n        # Test setp with multiple properties\n        setp(line, linewidth=5, marker='o')\n        assert getp(line, 'linewidth') == 5\n        assert getp(line, 'marker') == 'o'\n\n        # Test setp with MATLAB-style string/value pairs\n        setp(line, 'linestyle', '--', 'markersize', 10)\n        assert getp(line, 'linestyle') == '--'\n        assert getp(line, 'markersize') == 10\n\n        # Test setp with list of artists\n        lines = [line, ax.plot([1, 2, 3], [7, 8, 9])[0]]\n        setp(lines, color='green')\n        for l in lines:\n            assert getp(l, 'color') == 'green'\n\n"], "sample_3": ["    def test_separability_matrix_compound_model_cm11():\n        transform = compound_models['cm11'][0]\n        expected_separable = compound_models['cm11'][1][0]\n        expected_matrix = compound_models['cm11'][1][1]\n        assert_allclose(is_separable(transform), expected_separable)\n        assert_allclose(separability_matrix(transform), expected_matrix)\n"], "sample_122": ["    def test_row_swap(self):\n        M = SparseMatrix([[1, 2], [3, 4]])\n        M.row_swap(0, 1)\n        assert M == SparseMatrix([[3, 4], [1, 2]])\n"], "sample_38": ["    def test_creation_form_with_custom_user_model(self):\n        with override_settings(AUTH_USER_MODEL='tests.models.custom_user.CustomUser'):\n            form = UserCreationForm()\n            self.assertEqual(form.fields['username'].widget.attrs['autofocus'], True)\n            self.assertFalse(form.fields.get('email'))\n"], "sample_93": ["    def test_tmpdir_factory_getbasetemp_with_given_basetemp(self, tmpdir: Path) -> None:\n        config = Config.fromdict({\"basetemp\": str(tmpdir)})\n        factory = TempPathFactory.from_config(config, _ispytest=True)\n        assert factory.getbasetemp() == tmpdir\n"], "sample_152": ["def test_array_diff():\n    a = ImmutableDenseNDimArray([[x, y], [1, x*y]])\n    assert a.diff(x) == ImmutableDenseNDimArray([[1, 0], [0, y]])\n    assert a.diff(y) == ImmutableDenseNDimArray([[0, 1], [0, x]])\n"], "sample_53": ["    def test_rename_field_with_default(self):\n        before = self.make_project_state(\n            [\n                self.author_with_name,\n            ]\n        )\n        after = self.make_project_state(\n            [\n                self.author_with_name_renamed_field,\n            ]\n        )\n        changes = self.get_changes(before, after)\n        self.assertNumberMigrations(changes, \"testapp\", 1)\n        self.assertOperationTypes(changes, \"testapp\", 0, [\"RenameField\"])\n        self.assertOperationAttributes(\n            changes, \"testapp\", 0, 0, name=\"name\", old_name=\"name_old\"\n        )\n"], "sample_71": ["def test_context_after_reset():\n    with temp_style('test_style'):\n        with style.context('test_style', after_reset=True):\n            assert plt.rcParams[PARAM] == VALUE\n        assert plt.rcParams[PARAM] != VALUE\n"], "sample_20": ["    def test_index_together_with_invalid_field(self):\n        class MyModel(models.Model):\n            name = models.CharField(max_length=100)\n            invalid_field = 'not_a_field'\n\n            class Meta:\n                index_together = [('name', 'invalid_field')]\n\n        errors = MyModel.check()\n        self.assertEqual(len(errors), 1)\n        self.assertIsInstance(errors[0], Error)\n        self.assertIn(\"'index_together' refers to the nonexistent field 'invalid_field'\", str(errors[0]))\n"], "sample_141": ["def test_convert_to_multiple_units_with_symbols():\n    x, y = symbols('x y')\n    expr = x*meter + y*second\n    res = convert_to(expr, [meter, second])\n    assert res == x*meter + y*second\n"], "sample_88": ["    def test_saferepr_maxsize():\n        obj = [1] * 1000\n        assert len(saferepr(obj, maxsize=50)) <= 50\n"], "sample_156": ["    def test_parse_mathematica_function_with_arguments():\n        parser = MathematicaParser()\n        expr = parser.parse(\"Sin[x]\")\n        assert expr == sin(x)\n\n        expr = parser.parse(\"Sin[x + y]\")\n        assert expr == sin(x + y)\n\n        expr = parser.parse(\"Sin[x, y]\")\n        assert expr == Function('Sin')(x, y)\n\n        expr = parser.parse(\"f[x, y]\")\n        assert expr == Function('f')(x, y)\n"], "sample_33": ["    def test_receiver_disconnect_weakref(self):\n            pass\n\n        weak_receiver = weakref.ref(receiver_func)\n        a_signal.connect(weak_receiver, weak=True)\n        self.assertTrue(a_signal.has_listeners())\n        del receiver_func\n        garbage_collect()\n        self.assertFalse(a_signal.has_listeners())\n"], "sample_123": ["def test_sympify_complex():\n    assert sympify(complex(1, 2)) == 1 + 2*I\n    assert sympify(complex(-1, 2)) == -1 + 2*I\n    assert sympify(complex(1, -2)) == 1 - 2*I\n    assert sympify(complex(-1, -2)) == -1 - 2*I\n"], "sample_77": ["    def test_label_concise(self, x):\n        a, locs = self.setup_labels(x, concise=True)\n        formatter = a.major.formatter\n        assert isinstance(formatter, mpl.dates.ConciseDateFormatter)\n        assert formatter.formats == [\n            '%H:%M',\n            '%H:%M:%S',\n            '%Y-%m-%d',\n            '%b %d',\n            '%Y',\n        ]\n"], "sample_125": ["def test_sympify_Tuple():\n    assert sympify(Tuple()) == Tuple()\n    assert sympify((1, 2, 3)) == Tuple(1, 2, 3)\n    assert sympify((1, S.Pi, 3)) == Tuple(1, S.Pi, 3)\n"], "sample_52": ["    def test_rename_index_unnamed(self):\n        with connection.cursor() as cursor:\n            cursor.execute(\n                \"CREATE TABLE test_rename_index_unnamed (id INTEGER PRIMARY KEY, name TEXT)\"\n            )\n            cursor.execute(\n                \"CREATE INDEX test_rename_index_unnamed_idx ON test_rename_index_unnamed (name)\"\n            )\n\n        class Model(models.Model):\n            name = models.CharField(max_length=100)\n\n            class Meta:\n                db_table = \"test_rename_index_unnamed\"\n\n        state = ProjectState.from_apps(self.apps)\n        state.models[\n            \"test_app\", \"test_rename_index_unnamed\"\n        ].indexes = [\n            models.Index(fields=[\"name\"], name=\"test_rename_index_unnamed_idx\"),\n        ]\n\n        with atomic():\n            migration = Migration(\n                \"test_app\",\n                \"0001_initial\",\n                operations=[\n                    RenameIndex(\n                        \"test_rename_index_unnamed\",\n                        new_name=\"new_name\",\n                        old_fields=[\"name\"],\n                    ),\n                ],\n            )\n            self.apply_migration(migration, state)\n\n        with connection.cursor() as cursor:\n            cursor.execute(\"SELECT * FROM sqlite_master WHERE type='index'\")\n            indexes = cursor.fetchall()\n            self.assertEqual(len(indexes), 1)\n            self.assertEqual(indexes[0][2], \"new_name\")\n\n        with atomic():\n            self.unapply_migration(migration, state)\n\n        with connection.cursor() as cursor:\n            cursor.execute(\"SELECT * FROM sqlite_master WHERE type='index'\")\n            indexes = cursor.fetchall()\n            self.assertEqual(len(indexes), 1)\n            self.assertEqual(indexes[0][2], \"test_rename_index_unnamed_idx\")\n"], "sample_55": ["    def test_no_translations(self):\n        with translation.override(\"fr\"):\n            with captured_stderr() as stderr:\n                management.call_command(\"dance\", stdout=StringIO())\n            self.assertEqual(stderr.getvalue(), \"\")\n"], "sample_1": ["def test_read_qdp_with_comments():\n    qdp_data = \"\"\""], "sample_9": ["    def test_watchman_unavailable(self):\n        with mock.patch('django.utils.autoreload.pywatchman') as mock_watchman:\n            mock_watchman.client.side_effect = WatchmanUnavailable('Watchman unavailable')\n            reloader = autoreload.get_reloader()\n            self.assertIsInstance(reloader, autoreload.StatReloader)\n"], "sample_28": ["    def test_each_context_available_apps(self):\n        self.assertIn('available_apps', self.ctx)\n        self.assertIsInstance(self.ctx['available_apps'], list)\n        for app in self.ctx['available_apps']:\n            self.assertIn('name', app)\n            self.assertIn('app_label', app)\n            self.assertIn('app_url', app)\n            self.assertIn('has_module_perms', app)\n            self.assertIn('models', app)\n            self.assertIsInstance(app['models'], list)\n            for model in app['models']:\n                self.assertIn('name', model)\n                self.assertIn('object_name', model)\n                self.assertIn('perms', model)\n                self.assertIn('admin_url', model)\n                self.assertIn('add_url', model)\n"], "sample_24": ["    def test_validationerror_from_dict(self):\n        error_dict = {'field1': ['Error 1', 'Error 2'], 'field2': 'Error 3'}\n        ve = ValidationError(error_dict)\n        self.assertEqual(ve.error_dict, error_dict)\n        self.assertEqual(list(ve), ['Error 1', 'Error 2', 'Error 3'])\n"], "sample_108": ["    def test_svc_decision_function_shape_ovr(self):\n        # Test decision_function_shape='ovr' for SVC\n        X_train, X_test, y_train, y_test = train_test_split(\n            iris.data, iris.target, test_size=0.2, random_state=42)\n        clf = svm.SVC(decision_function_shape='ovr', kernel='linear')\n        clf.fit(X_train, y_train)\n        dec_func = clf.decision_function(X_test)\n        assert dec_func.shape == (len(y_test), len(np.unique(y_train)))\n"]}, "raw_scored_generations": {"sample_2": [false], "sample_3": [false], "sample_0": [false], "sample_1": [false], "sample_6": [false], "sample_4": [true], "sample_5": [false], "sample_7": [false], "sample_9": [true], "sample_8": [false], "sample_10": [false], "sample_11": [false], "sample_13": [false], "sample_12": [false], "sample_14": [false], "sample_15": [true], "sample_16": [false], "sample_17": [true], "sample_18": [false], "sample_19": [false], "sample_21": [false], "sample_20": [true], "sample_23": [false], "sample_22": [true], "sample_24": [false], "sample_25": [false], "sample_28": [true], "sample_26": [true], "sample_27": [false], "sample_29": [true], "sample_31": [false], "sample_30": [false], "sample_32": [false], "sample_33": [false], "sample_34": [false], "sample_35": [false], "sample_36": [false], "sample_37": [false], "sample_39": [false], "sample_38": [true], "sample_40": [false], "sample_42": [false], "sample_41": [false], "sample_43": [false], "sample_45": [false], "sample_44": [false], "sample_46": [false], "sample_48": [false], "sample_47": [false], "sample_50": [false], "sample_49": [false], "sample_51": [false], "sample_52": [false], "sample_53": [false], "sample_55": [true], "sample_54": [false], "sample_56": [true], "sample_58": [true], "sample_57": [false], "sample_60": [false], "sample_59": [false], "sample_61": [false], "sample_63": [false], "sample_62": [false], "sample_64": [false], "sample_66": [false], "sample_65": [false], "sample_68": [false], "sample_67": [false], "sample_69": [false], "sample_70": [false], "sample_71": [true], "sample_72": [false], "sample_73": [false], "sample_74": [false], "sample_75": [false], "sample_76": [false], "sample_77": [false], "sample_78": [false], "sample_79": [false], "sample_80": [false], "sample_82": [false], "sample_81": [false], "sample_83": [false], "sample_84": [false], "sample_85": [false], "sample_86": [false], "sample_87": [false], "sample_88": [false], "sample_89": [false], "sample_90": [false], "sample_91": [false], "sample_92": [false], "sample_93": [false], "sample_95": [false], "sample_94": [false], "sample_96": [false], "sample_97": [false], "sample_98": [false], "sample_99": [false], "sample_100": [false], "sample_101": [false], "sample_102": [false], "sample_103": [false], "sample_104": [false], "sample_105": [false], "sample_107": [false], "sample_106": [false], "sample_108": [false], "sample_109": [false], "sample_110": [false], "sample_111": [false], "sample_112": [false], "sample_113": [false], "sample_114": [false], "sample_115": [false], "sample_116": [false], "sample_117": [false], "sample_118": [false], "sample_119": [false], "sample_120": [true], "sample_121": [false], "sample_122": [false], "sample_123": [true], "sample_124": [true], "sample_125": [true], "sample_126": [true], "sample_127": [false], "sample_128": [true], "sample_129": [false], "sample_130": [true], "sample_131": [false], "sample_132": [false], "sample_133": [false], "sample_134": [false], "sample_135": [false], "sample_136": [true], "sample_137": [false], "sample_138": [false], "sample_139": [true], "sample_140": [false], "sample_142": [false], "sample_141": [true], "sample_143": [false], "sample_144": [false], "sample_145": [false], "sample_146": [false], "sample_147": [false], "sample_148": [false], "sample_149": [false], "sample_150": [false], "sample_151": [true], "sample_152": [true], "sample_153": [false], "sample_154": [false], "sample_155": [false], "sample_156": [false], "sample_157": [false], "sample_158": [false], "sample_159": [false]}}